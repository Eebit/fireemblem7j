commit 9ecfc7d905d7c88bbb8a3bd990328c0d20b94109
Author: MokhaLeee <nkulyc@163.com>
Date:   Sat Jun 3 02:07:48 2023 +0800

    NEW: unit.c in process
    
    Brief:
    
            1. Decomp unit.c in process
            2. Split asm code
            3. Add scripts
    
    Signed-off-by: MokhaLeee <nkulyc@163.com>

diff --git a/FireEmblem7J.lds b/FireEmblem7J.lds
index 2e0cca6..5d55d41 100644
--- a/FireEmblem7J.lds
+++ b/FireEmblem7J.lds
@@ -10,7 +10,7 @@ SECTIONS
 	EWRAM (NOLOAD) :
 	ALIGN(4)
 	{
-
+		. = 0x02BBF4; gPlaySt = .;
 	}
 
 	. = 0x03000000;
@@ -36,6 +36,13 @@ SECTIONS
 		src/irq.o(.text);
 		src/random.o(.text);
 		asm/code.o(.text);
+		asm/evt-utils.o(.text);
+		asm/sprite-anim.o(.text);
+		asm/game-ctrl.o(.text);
+		asm/utils.o(.text);
+		asm/bm.o(.text);
+		asm/item.o(.text);
+		src/unit.o(.text);
 		asm/unit.o(.text);
 		asm/fe7.o(.text);
 
diff --git a/asm/bm.s b/asm/bm.s
new file mode 100644
index 0000000..ca93403
--- /dev/null
+++ b/asm/bm.s
@@ -0,0 +1,1830 @@
+	.include "macro.inc"
+
+	.syntax unified
+
+	thumb_func_start OnVBlank
+OnVBlank: @ 0x080156C8
+	push {lr}
+	ldr r1, _0801570C @ =0x03007FF8
+	movs r0, #1
+	strh r0, [r1]
+	bl sub_08000F20
+	bl SoundVSync_rev01
+	ldr r0, _08015710 @ =0x02026A28
+	ldr r0, [r0]
+	bl sub_0800456C
+	bl sub_08003214
+	ldr r1, _08015714 @ =0x0202BBB4
+	movs r0, #0
+	ldrsb r0, [r1, r0]
+	cmp r0, #0
+	beq _08015702
+	movs r0, #0
+	strb r0, [r1]
+	bl sub_08001188
+	bl sub_080016C4
+	bl sub_08003054
+	bl sub_080031BC
+_08015702:
+	bl m4aSoundMain
+	pop {r0}
+	bx r0
+	.align 2, 0
+_0801570C: .4byte 0x03007FF8
+_08015710: .4byte 0x02026A28
+_08015714: .4byte 0x0202BBB4
+
+	thumb_func_start OnGameLoopMain
+OnGameLoopMain: @ 0x08015718
+	push {r4, lr}
+	ldr r0, _08015774 @ =gpKeySt
+	ldr r0, [r0]
+	bl sub_08001BA0
+	bl sub_08006840
+	ldr r4, _08015778 @ =0x02026A28
+	ldr r0, [r4, #4]
+	bl sub_0800456C
+	bl sub_080157A4
+	lsls r0, r0, #0x18
+	cmp r0, #0
+	bne _0801573E
+	ldr r0, [r4, #8]
+	bl sub_0800456C
+_0801573E:
+	ldr r0, [r4, #0xc]
+	bl sub_0800456C
+	ldr r0, [r4, #0x14]
+	bl sub_0800456C
+	movs r0, #0
+	bl sub_080068F4
+	ldr r0, [r4, #0x10]
+	bl sub_0800456C
+	movs r0, #0xd
+	bl sub_080068F4
+	ldr r1, _0801577C @ =0x0202BBB4
+	movs r0, #1
+	strb r0, [r1]
+	ldr r0, _08015780 @ =0x04000006
+	ldrh r0, [r0]
+	strh r0, [r1, #6]
+	bl VBlankIntrWait
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08015774: .4byte gpKeySt
+_08015778: .4byte 0x02026A28
+_0801577C: .4byte 0x0202BBB4
+_08015780: .4byte 0x04000006
+
+	thumb_func_start sub_08015784
+sub_08015784: @ 0x08015784
+	ldr r1, _08015790 @ =0x0202BBB4
+	ldrb r0, [r1, #1]
+	adds r0, #1
+	strb r0, [r1, #1]
+	bx lr
+	.align 2, 0
+_08015790: .4byte 0x0202BBB4
+
+	thumb_func_start sub_08015794
+sub_08015794: @ 0x08015794
+	ldr r1, _080157A0 @ =0x0202BBB4
+	ldrb r0, [r1, #1]
+	subs r0, #1
+	strb r0, [r1, #1]
+	bx lr
+	.align 2, 0
+_080157A0: .4byte 0x0202BBB4
+
+	thumb_func_start sub_080157A4
+sub_080157A4: @ 0x080157A4
+	ldr r0, _080157AC @ =0x0202BBB4
+	ldrb r0, [r0, #1]
+	bx lr
+	.align 2, 0
+_080157AC: .4byte 0x0202BBB4
+
+	thumb_func_start sub_080157B0
+sub_080157B0: @ 0x080157B0
+	push {lr}
+	ldr r2, _080157C4 @ =gPlaySt
+	ldrb r0, [r2, #0xf]
+	cmp r0, #0x40
+	beq _080157DA
+	cmp r0, #0x40
+	bgt _080157C8
+	cmp r0, #0
+	beq _080157CE
+	b _080157EE
+	.align 2, 0
+_080157C4: .4byte gPlaySt
+_080157C8:
+	cmp r0, #0x80
+	beq _080157D4
+	b _080157EE
+_080157CE:
+	movs r0, #0x80
+	strb r0, [r2, #0xf]
+	b _080157EE
+_080157D4:
+	movs r0, #0x40
+	strb r0, [r2, #0xf]
+	b _080157EE
+_080157DA:
+	movs r0, #0
+	strb r0, [r2, #0xf]
+	ldrh r1, [r2, #0x10]
+	ldr r0, _080157F4 @ =0x000003E6
+	cmp r1, r0
+	bhi _080157EA
+	adds r0, r1, #1
+	strh r0, [r2, #0x10]
+_080157EA:
+	bl sub_08026D24
+_080157EE:
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080157F4: .4byte 0x000003E6
+
+	thumb_func_start sub_080157F8
+sub_080157F8: @ 0x080157F8
+	push {lr}
+	ldr r0, _08015814 @ =gPlaySt
+	ldrb r0, [r0, #0xe]
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+	bl sub_08031AEC
+	ldr r0, [r0, #0x38]
+	bl sub_0800AE98
+	movs r0, #0
+	pop {r1}
+	bx r1
+	.align 2, 0
+_08015814: .4byte gPlaySt
+
+	thumb_func_start sub_08015818
+sub_08015818: @ 0x08015818
+	push {lr}
+	bl ClearActiveFactionGrayedStates
+	bl sub_08025BB0
+	bl sub_080157B0
+	bl sub_08079158
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+	cmp r0, #1
+	beq _08015836
+	movs r0, #1
+	b _0801583C
+_08015836:
+	bl sub_08079188
+	movs r0, #0
+_0801583C:
+	pop {r1}
+	bx r1
+
+	thumb_func_start sub_08015840
+sub_08015840: @ 0x08015840
+	push {lr}
+	bl sub_080798D4
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+	cmp r0, #1
+	beq _08015852
+	movs r0, #1
+	b _08015858
+_08015852:
+	bl sub_08079894
+	movs r0, #0
+_08015858:
+	pop {r1}
+	bx r1
+
+	thumb_func_start sub_0801585C
+sub_0801585C: @ 0x0801585C
+	push {r4, lr}
+	adds r4, r0, #0
+	ldr r0, _08015874 @ =gPlaySt
+	ldrb r0, [r0, #0xf]
+	cmp r0, #0x40
+	beq _08015898
+	cmp r0, #0x40
+	bgt _08015878
+	cmp r0, #0
+	beq _0801587E
+	b _080158A0
+	.align 2, 0
+_08015874: .4byte gPlaySt
+_08015878:
+	cmp r0, #0x80
+	beq _08015888
+	b _080158A0
+_0801587E:
+	ldr r0, _08015884 @ =0x08C02630
+	b _0801588A
+	.align 2, 0
+_08015884: .4byte 0x08C02630
+_08015888:
+	ldr r0, _08015894 @ =0x08C06154
+_0801588A:
+	adds r1, r4, #0
+	bl sub_080043D4
+	b _080158A0
+	.align 2, 0
+_08015894: .4byte 0x08C06154
+_08015898:
+	ldr r0, _080158AC @ =0x08C06154
+	adds r1, r4, #0
+	bl sub_080043D4
+_080158A0:
+	adds r0, r4, #0
+	bl sub_0800457C
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080158AC: .4byte 0x08C06154
+
+	thumb_func_start sub_080158B0
+sub_080158B0: @ 0x080158B0
+	push {r4, lr}
+	adds r4, r0, #0
+	ldr r0, _080158D0 @ =0x08C02630
+	adds r1, r4, #0
+	bl sub_080043D4
+	movs r1, #7
+	bl sub_080045FC
+	adds r0, r4, #0
+	bl sub_0800457C
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080158D0: .4byte 0x08C02630
+
+	thumb_func_start sub_080158D4
+sub_080158D4: @ 0x080158D4
+	push {lr}
+	adds r1, r0, #0
+	ldr r0, _080158F0 @ =gPlaySt
+	ldrb r0, [r0, #0xf]
+	cmp r0, #0x40
+	bne _080158F8
+	ldr r0, _080158F4 @ =0x08C03834
+	bl sub_080043D4
+	bl sub_0802C70C
+	movs r0, #0
+	b _080158FA
+	.align 2, 0
+_080158F0: .4byte gPlaySt
+_080158F4: .4byte 0x08C03834
+_080158F8:
+	movs r0, #1
+_080158FA:
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_08015900
+sub_08015900: @ 0x08015900
+	push {lr}
+	ldr r1, _08015914 @ =0x0203A858
+	movs r0, #9
+	strb r0, [r1, #0x16]
+	movs r0, #3
+	bl WriteSuspendSave
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08015914: .4byte 0x0203A858
+
+	thumb_func_start sub_08015918
+sub_08015918: @ 0x08015918
+	push {r4, lr}
+	adds r4, r0, #0
+	ldr r0, _0801593C @ =gPlaySt
+	ldrb r0, [r0, #0xe]
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+	bl sub_08031A5C
+	ldrb r0, [r0, #0xd]
+	cmp r0, #0
+	bne _08015936
+	adds r0, r4, #0
+	movs r1, #9
+	bl sub_080045FC
+_08015936:
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_0801593C: .4byte gPlaySt
+
+	thumb_func_start sub_08015940
+sub_08015940: @ 0x08015940
+	push {lr}
+	adds r1, r0, #0
+	ldr r0, _08015970 @ =gPlaySt
+	ldrb r0, [r0, #0xe]
+	cmp r0, #0x2f
+	bne _08015978
+	ldr r2, _08015974 @ =0x03002790
+	adds r1, r2, #0
+	adds r1, #0x3c
+	movs r0, #0xc0
+	ldrb r3, [r1]
+	orrs r0, r3
+	strb r0, [r1]
+	adds r0, r2, #0
+	adds r0, #0x44
+	movs r1, #0
+	strb r1, [r0]
+	adds r0, #1
+	strb r1, [r0]
+	adds r1, r2, #0
+	adds r1, #0x46
+	movs r0, #0x10
+	strb r0, [r1]
+	b _0801597E
+	.align 2, 0
+_08015970: .4byte gPlaySt
+_08015974: .4byte 0x03002790
+_08015978:
+	ldr r0, _08015984 @ =0x08C02BF0
+	bl sub_080043D4
+_0801597E:
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08015984: .4byte 0x08C02BF0
+
+	thumb_func_start sub_08015988
+sub_08015988: @ 0x08015988
+	push {lr}
+	bl sub_0807B2A8
+	movs r0, #0x91
+	bl sub_0807A0E0
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08015998
+sub_08015998: @ 0x08015998
+	ldr r0, _080159D0 @ =gPlaySt
+	ldrb r0, [r0, #0x15]
+	cmp r0, #7
+	bne _080159D8
+	ldr r3, _080159D4 @ =0x03002790
+	movs r2, #4
+	rsbs r2, r2, #0
+	adds r0, r2, #0
+	ldrb r1, [r3, #0xc]
+	ands r0, r1
+	strb r0, [r3, #0xc]
+	adds r0, r2, #0
+	ldrb r1, [r3, #0x10]
+	ands r0, r1
+	movs r1, #1
+	orrs r0, r1
+	strb r0, [r3, #0x10]
+	adds r0, r2, #0
+	ldrb r1, [r3, #0x14]
+	ands r0, r1
+	movs r1, #2
+	orrs r0, r1
+	strb r0, [r3, #0x14]
+	ldrb r0, [r3, #0x18]
+	ands r2, r0
+	orrs r2, r1
+	strb r2, [r3, #0x18]
+	b _08015A04
+	.align 2, 0
+_080159D0: .4byte gPlaySt
+_080159D4: .4byte 0x03002790
+_080159D8:
+	ldr r3, _08015A08 @ =0x03002790
+	movs r1, #4
+	rsbs r1, r1, #0
+	adds r0, r1, #0
+	ldrb r2, [r3, #0xc]
+	ands r0, r2
+	strb r0, [r3, #0xc]
+	adds r0, r1, #0
+	ldrb r2, [r3, #0x10]
+	ands r0, r2
+	movs r2, #1
+	orrs r0, r2
+	strb r0, [r3, #0x10]
+	ldrb r0, [r3, #0x14]
+	ands r1, r0
+	movs r0, #2
+	orrs r1, r0
+	strb r1, [r3, #0x14]
+	movs r0, #3
+	ldrb r1, [r3, #0x18]
+	orrs r0, r1
+	strb r0, [r3, #0x18]
+_08015A04:
+	bx lr
+	.align 2, 0
+_08015A08: .4byte 0x03002790
+
+	thumb_func_start sub_08015A0C
+sub_08015A0C: @ 0x08015A0C
+	push {r4, lr}
+	ldr r0, _08015A38 @ =0x0818F9F0
+	ldr r4, _08015A3C @ =0x02020140
+	adds r1, r4, #0
+	bl sub_08013688
+	ldr r1, _08015A40 @ =0x06010000
+	adds r0, r4, #0
+	movs r2, #0x12
+	movs r3, #4
+	bl sub_08013758
+	ldr r0, _08015A44 @ =0x0818FE70
+	movs r1, #0x80
+	lsls r1, r1, #2
+	movs r2, #0x40
+	bl sub_0800105C
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08015A38: .4byte 0x0818F9F0
+_08015A3C: .4byte 0x02020140
+_08015A40: .4byte 0x06010000
+_08015A44: .4byte 0x0818FE70
+
+	thumb_func_start sub_08015A48
+sub_08015A48: @ 0x08015A48
+	push {lr}
+	bl sub_08005280
+	bl sub_0804A9F8
+	bl sub_080069C4
+	bl sub_08004BC4
+	movs r0, #4
+	bl sub_08004C08
+	bl sub_08015A0C
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08015A68
+sub_08015A68: @ 0x08015A68
+	push {r4, r5, r6, r7, lr}
+	lsls r0, r0, #0x10
+	lsrs r1, r0, #0x10
+	mov ip, r1
+	lsrs r7, r0, #0x14
+	movs r0, #0xf
+	ands r7, r0
+	ldr r3, _08015B68 @ =0x0202BBB4
+	ldr r4, _08015B6C @ =0x08C01FE4
+	lsls r2, r7, #1
+	adds r0, r2, r4
+	movs r1, #0
+	ldrsb r1, [r0, r1]
+	ldrh r0, [r3, #0x14]
+	adds r1, r0, r1
+	lsls r1, r1, #0x10
+	adds r0, r4, #1
+	adds r2, r2, r0
+	movs r0, #0
+	ldrsb r0, [r2, r0]
+	ldrh r2, [r3, #0x16]
+	adds r0, r2, r0
+	lsls r0, r0, #0x10
+	lsrs r6, r1, #0x10
+	orrs r6, r0
+	movs r0, #2
+	ldrb r1, [r3, #4]
+	ands r0, r1
+	adds r5, r3, #0
+	cmp r0, #0
+	beq _08015AE6
+	movs r2, #0x16
+	ldrsh r0, [r5, r2]
+	ldr r1, _08015B70 @ =0x0202E3E0
+	ldr r2, [r1]
+	lsls r0, r0, #2
+	adds r0, r0, r2
+	movs r3, #0x14
+	ldrsh r1, [r5, r3]
+	ldr r0, [r0]
+	adds r0, r0, r1
+	ldrb r0, [r0]
+	cmp r0, #0x77
+	bhi _08015AE6
+	asrs r0, r6, #0x10
+	lsls r0, r0, #2
+	adds r0, r0, r2
+	lsls r1, r6, #0x10
+	asrs r1, r1, #0x10
+	ldr r0, [r0]
+	adds r0, r0, r1
+	ldrb r0, [r0]
+	cmp r0, #0x77
+	bls _08015AE6
+	movs r0, #0xf0
+	ldr r1, _08015B74 @ =gpKeySt
+	ldr r2, [r1]
+	mov r1, ip
+	ands r1, r0
+	ldrh r2, [r2, #8]
+	ands r0, r2
+	cmp r1, r0
+	bne _08015B8A
+_08015AE6:
+	lsls r0, r6, #0x10
+	asrs r1, r0, #0x10
+	cmp r1, #0
+	blt _08015B10
+	ldr r0, _08015B78 @ =0x0202E3D4
+	movs r2, #0
+	ldrsh r0, [r0, r2]
+	cmp r1, r0
+	bge _08015B10
+	lsls r0, r7, #1
+	adds r0, r0, r4
+	ldrb r0, [r0]
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+	lsls r0, r0, #4
+	ldrh r3, [r5, #0x1c]
+	adds r0, r3, r0
+	strh r0, [r5, #0x1c]
+	ldrh r0, [r5, #0x14]
+	strh r0, [r5, #0x18]
+	strh r6, [r5, #0x14]
+_08015B10:
+	asrs r2, r6, #0x10
+	adds r1, r2, #0
+	cmp r1, #0
+	blt _08015B3C
+	ldr r0, _08015B78 @ =0x0202E3D4
+	movs r3, #2
+	ldrsh r0, [r0, r3]
+	cmp r1, r0
+	bge _08015B3C
+	lsls r0, r7, #1
+	adds r1, r4, #1
+	adds r0, r0, r1
+	ldrb r0, [r0]
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+	lsls r0, r0, #4
+	ldrh r1, [r5, #0x1e]
+	adds r0, r1, r0
+	strh r0, [r5, #0x1e]
+	ldrh r0, [r5, #0x16]
+	strh r0, [r5, #0x1a]
+	strh r2, [r5, #0x16]
+_08015B3C:
+	ldrb r1, [r5, #4]
+	movs r0, #4
+	ands r0, r1
+	cmp r0, #0
+	bne _08015B84
+	ldr r1, [r5, #0x14]
+	ldr r0, [r5, #0x18]
+	cmp r1, r0
+	beq _08015B8A
+	ldr r0, _08015B7C @ =gPlaySt
+	adds r0, #0x41
+	ldrb r0, [r0]
+	lsls r0, r0, #0x1e
+	cmp r0, #0
+	blt _08015B60
+	ldr r0, _08015B80 @ =0x00000385
+	bl m4aSongNumStart
+_08015B60:
+	movs r0, #4
+	ldrb r2, [r5, #4]
+	orrs r0, r2
+	b _08015B88
+	.align 2, 0
+_08015B68: .4byte 0x0202BBB4
+_08015B6C: .4byte 0x08C01FE4
+_08015B70: .4byte 0x0202E3E0
+_08015B74: .4byte gpKeySt
+_08015B78: .4byte 0x0202E3D4
+_08015B7C: .4byte gPlaySt
+_08015B80: .4byte 0x00000385
+_08015B84:
+	movs r0, #0xfb
+	ands r0, r1
+_08015B88:
+	strb r0, [r5, #4]
+_08015B8A:
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08015B90
+sub_08015B90: @ 0x08015B90
+	push {r4, r5, lr}
+	adds r4, r0, #0
+	ldr r2, _08015BE0 @ =0x0202BBB4
+	ldrh r3, [r2, #0x20]
+	movs r0, #0x20
+	ldrsh r1, [r2, r0]
+	movs r5, #0x1c
+	ldrsh r0, [r2, r5]
+	cmp r1, r0
+	bge _08015BA8
+	adds r0, r3, r4
+	strh r0, [r2, #0x20]
+_08015BA8:
+	ldrh r3, [r2, #0x20]
+	movs r0, #0x20
+	ldrsh r1, [r2, r0]
+	movs r5, #0x1c
+	ldrsh r0, [r2, r5]
+	cmp r1, r0
+	ble _08015BBA
+	subs r0, r3, r4
+	strh r0, [r2, #0x20]
+_08015BBA:
+	ldrh r3, [r2, #0x22]
+	movs r1, #0x22
+	ldrsh r0, [r2, r1]
+	movs r5, #0x1e
+	ldrsh r1, [r2, r5]
+	cmp r0, r1
+	bge _08015BCC
+	adds r0, r3, r4
+	strh r0, [r2, #0x22]
+_08015BCC:
+	ldrh r3, [r2, #0x22]
+	movs r5, #0x22
+	ldrsh r0, [r2, r5]
+	cmp r0, r1
+	ble _08015BDA
+	subs r0, r3, r4
+	strh r0, [r2, #0x22]
+_08015BDA:
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08015BE0: .4byte 0x0202BBB4
+
+	thumb_func_start sub_08015BE4
+sub_08015BE4: @ 0x08015BE4
+	push {r4, r5, r6, lr}
+	adds r4, r0, #0
+	movs r6, #0
+	ldr r2, _08015C0C @ =0x0202BBB4
+	movs r0, #0x20
+	ldrsh r1, [r2, r0]
+	movs r3, #0x22
+	ldrsh r5, [r2, r3]
+	movs r3, #0xc
+	ldrsh r0, [r2, r3]
+	adds r0, #0x30
+	cmp r0, r1
+	ble _08015C28
+	adds r0, r1, #0
+	subs r0, #0x30
+	cmp r0, #0
+	bge _08015C10
+	strh r6, [r2, #0xc]
+	b _08015C28
+	.align 2, 0
+_08015C0C: .4byte 0x0202BBB4
+_08015C10:
+	movs r6, #1
+	ldrh r3, [r2, #0xc]
+	subs r0, r3, r4
+	strh r0, [r2, #0xc]
+	rsbs r0, r4, #0
+	adds r3, r2, #0
+	adds r3, #0x36
+	strb r0, [r3]
+	movs r0, #0xf
+	ldrh r3, [r2, #0xc]
+	ands r0, r3
+	strh r0, [r2, #0x32]
+_08015C28:
+	movs r3, #0xc
+	ldrsh r0, [r2, r3]
+	adds r0, #0xb0
+	cmp r0, r1
+	bge _08015C58
+	subs r1, #0xb0
+	movs r3, #0x28
+	ldrsh r0, [r2, r3]
+	cmp r1, r0
+	ble _08015C42
+	ldrh r0, [r2, #0x28]
+	strh r0, [r2, #0xc]
+	b _08015C58
+_08015C42:
+	movs r6, #1
+	ldrh r1, [r2, #0xc]
+	adds r0, r1, r4
+	strh r0, [r2, #0xc]
+	adds r0, r2, #0
+	adds r0, #0x36
+	strb r4, [r0]
+	movs r0, #0xf
+	ldrh r3, [r2, #0xc]
+	ands r0, r3
+	strh r0, [r2, #0x32]
+_08015C58:
+	movs r1, #0xe
+	ldrsh r0, [r2, r1]
+	adds r0, #0x20
+	cmp r0, r5
+	ble _08015C88
+	adds r0, r5, #0
+	subs r0, #0x20
+	cmp r0, #0
+	bge _08015C70
+	movs r0, #0
+	strh r0, [r2, #0xe]
+	b _08015C88
+_08015C70:
+	movs r6, #1
+	ldrh r3, [r2, #0xe]
+	subs r0, r3, r4
+	strh r0, [r2, #0xe]
+	rsbs r0, r4, #0
+	adds r1, r2, #0
+	adds r1, #0x37
+	strb r0, [r1]
+	movs r0, #0xf
+	ldrh r1, [r2, #0xe]
+	ands r0, r1
+	strh r0, [r2, #0x34]
+_08015C88:
+	movs r3, #0xe
+	ldrsh r0, [r2, r3]
+	adds r0, #0x70
+	cmp r0, r5
+	bge _08015CBA
+	adds r1, r5, #0
+	subs r1, #0x70
+	movs r3, #0x2a
+	ldrsh r0, [r2, r3]
+	cmp r1, r0
+	ble _08015CA4
+	ldrh r0, [r2, #0x2a]
+	strh r0, [r2, #0xe]
+	b _08015CBA
+_08015CA4:
+	movs r6, #1
+	ldrh r1, [r2, #0xe]
+	adds r0, r1, r4
+	strh r0, [r2, #0xe]
+	adds r0, r2, #0
+	adds r0, #0x37
+	strb r4, [r0]
+	movs r0, #0xf
+	ldrh r3, [r2, #0xe]
+	ands r0, r3
+	strh r0, [r2, #0x34]
+_08015CBA:
+	cmp r6, #0
+	bne _08015D08
+	adds r3, r2, #0
+	ldrh r1, [r3, #0x32]
+	movs r4, #0x32
+	ldrsh r0, [r3, r4]
+	cmp r0, #0
+	beq _08015CE4
+	adds r4, r3, #0
+	adds r4, #0x36
+	movs r0, #0
+	ldrsb r0, [r4, r0]
+	adds r0, r1, r0
+	movs r1, #0xf
+	ands r0, r1
+	strh r0, [r3, #0x32]
+	movs r0, #0
+	ldrsb r0, [r4, r0]
+	ldrh r1, [r3, #0xc]
+	adds r0, r1, r0
+	strh r0, [r3, #0xc]
+_08015CE4:
+	ldrh r1, [r2, #0x34]
+	movs r3, #0x34
+	ldrsh r0, [r2, r3]
+	cmp r0, #0
+	beq _08015D08
+	adds r3, r2, #0
+	adds r3, #0x37
+	movs r0, #0
+	ldrsb r0, [r3, r0]
+	adds r0, r1, r0
+	movs r1, #0xf
+	ands r0, r1
+	strh r0, [r2, #0x34]
+	movs r0, #0
+	ldrsb r0, [r3, r0]
+	ldrh r4, [r2, #0xe]
+	adds r0, r4, r0
+	strh r0, [r2, #0xe]
+_08015D08:
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08015D10
+sub_08015D10: @ 0x08015D10
+	push {r4, lr}
+	adds r3, r0, #0
+	ldr r0, _08015D50 @ =0x0202BBB4
+	movs r1, #0xc
+	ldrsh r2, [r0, r1]
+	adds r1, r2, #0
+	adds r1, #0x30
+	adds r4, r0, #0
+	cmp r1, r3
+	ble _08015D2E
+	adds r2, r3, #0
+	subs r2, #0x30
+	cmp r2, #0
+	bge _08015D2E
+	movs r2, #0
+_08015D2E:
+	movs r1, #0xc
+	ldrsh r0, [r4, r1]
+	adds r0, #0xb0
+	cmp r0, r3
+	bge _08015D46
+	movs r1, #0x28
+	ldrsh r0, [r4, r1]
+	adds r2, r3, #0
+	subs r2, #0xb0
+	cmp r2, r0
+	ble _08015D46
+	adds r2, r0, #0
+_08015D46:
+	lsls r0, r2, #0x10
+	lsrs r0, r0, #0x10
+	pop {r4}
+	pop {r1}
+	bx r1
+	.align 2, 0
+_08015D50: .4byte 0x0202BBB4
+
+	thumb_func_start sub_08015D54
+sub_08015D54: @ 0x08015D54
+	push {r4, lr}
+	adds r3, r0, #0
+	ldr r0, _08015D94 @ =0x0202BBB4
+	movs r1, #0xe
+	ldrsh r2, [r0, r1]
+	adds r1, r2, #0
+	adds r1, #0x20
+	adds r4, r0, #0
+	cmp r1, r3
+	ble _08015D72
+	adds r2, r3, #0
+	subs r2, #0x20
+	cmp r2, #0
+	bge _08015D72
+	movs r2, #0
+_08015D72:
+	movs r1, #0xe
+	ldrsh r0, [r4, r1]
+	adds r0, #0x70
+	cmp r0, r3
+	bge _08015D8A
+	movs r1, #0x2a
+	ldrsh r0, [r4, r1]
+	adds r2, r3, #0
+	subs r2, #0x70
+	cmp r2, r0
+	ble _08015D8A
+	adds r2, r0, #0
+_08015D8A:
+	lsls r0, r2, #0x10
+	lsrs r0, r0, #0x10
+	pop {r4}
+	pop {r1}
+	bx r1
+	.align 2, 0
+_08015D94: .4byte 0x0202BBB4
+
+	thumb_func_start sub_08015D98
+sub_08015D98: @ 0x08015D98
+	adds r1, r0, #0
+	subs r1, #0x78
+	cmp r1, #0
+	bge _08015DA2
+	movs r1, #0
+_08015DA2:
+	ldr r0, _08015DBC @ =0x0202BBB4
+	movs r2, #0x28
+	ldrsh r0, [r0, r2]
+	cmp r1, r0
+	ble _08015DAE
+	adds r1, r0, #0
+_08015DAE:
+	movs r2, #0x10
+	rsbs r2, r2, #0
+	adds r0, r2, #0
+	ands r1, r0
+	lsls r0, r1, #0x10
+	lsrs r0, r0, #0x10
+	bx lr
+	.align 2, 0
+_08015DBC: .4byte 0x0202BBB4
+
+	thumb_func_start sub_08015DC0
+sub_08015DC0: @ 0x08015DC0
+	adds r1, r0, #0
+	subs r1, #0x50
+	cmp r1, #0
+	bge _08015DCA
+	movs r1, #0
+_08015DCA:
+	ldr r0, _08015DE4 @ =0x0202BBB4
+	movs r2, #0x2a
+	ldrsh r0, [r0, r2]
+	cmp r1, r0
+	ble _08015DD6
+	adds r1, r0, #0
+_08015DD6:
+	movs r2, #0x10
+	rsbs r2, r2, #0
+	adds r0, r2, #0
+	ands r1, r0
+	lsls r0, r1, #0x10
+	lsrs r0, r0, #0x10
+	bx lr
+	.align 2, 0
+_08015DE4: .4byte 0x0202BBB4
+
+	thumb_func_start sub_08015DE8
+sub_08015DE8: @ 0x08015DE8
+	push {r4, r5, r6, r7, lr}
+	mov r7, sb
+	mov r6, r8
+	push {r6, r7}
+	sub sp, #4
+	adds r6, r0, #0
+	adds r7, r1, #0
+	adds r5, r2, #0
+	movs r0, #0
+	mov sb, r0
+	mov r8, r0
+	bl sub_08000EEC
+	lsrs r4, r0, #1
+	movs r0, #0xf
+	ands r4, r0
+	cmp r5, #4
+	bhi _08015EA2
+	lsls r0, r5, #2
+	ldr r1, _08015E18 @ =_08015E1C
+	adds r0, r0, r1
+	ldr r0, [r0]
+	mov pc, r0
+	.align 2, 0
+_08015E18: .4byte _08015E1C
+_08015E1C: @ jump table
+	.4byte _08015E30 @ case 0
+	.4byte _08015E30 @ case 1
+	.4byte _08015E40 @ case 2
+	.4byte _08015E88 @ case 3
+	.4byte _08015E98 @ case 4
+_08015E30:
+	movs r1, #2
+	mov sb, r1
+	ldr r1, _08015E3C @ =0x08C0206C
+	lsls r0, r4, #2
+	adds r0, r0, r1
+	b _08015E9E
+	.align 2, 0
+_08015E3C: .4byte 0x08C0206C
+_08015E40:
+	bl sub_08000EEC
+	subs r0, #1
+	ldr r5, _08015E7C @ =0x0202BC40
+	ldr r1, [r5]
+	cmp r0, r1
+	bne _08015E60
+	ldr r0, _08015E80 @ =0x0202BC3C
+	movs r2, #0
+	ldrsh r1, [r0, r2]
+	adds r1, r6, r1
+	asrs r6, r1, #1
+	movs r1, #2
+	ldrsh r0, [r0, r1]
+	adds r0, r7, r0
+	asrs r7, r0, #1
+_08015E60:
+	movs r2, #0x24
+	mov sb, r2
+	ldr r1, _08015E84 @ =0x08C0206C
+	lsls r0, r4, #2
+	adds r0, r0, r1
+	ldr r0, [r0]
+	mov r8, r0
+	ldr r0, _08015E80 @ =0x0202BC3C
+	strh r6, [r0]
+	strh r7, [r0, #2]
+	bl sub_08000EEC
+	str r0, [r5]
+	b _08015EA2
+	.align 2, 0
+_08015E7C: .4byte 0x0202BC40
+_08015E80: .4byte 0x0202BC3C
+_08015E84: .4byte 0x08C0206C
+_08015E88:
+	movs r0, #2
+	mov sb, r0
+	ldr r1, _08015E94 @ =0x08C02052
+	mov r8, r1
+	b _08015EA2
+	.align 2, 0
+_08015E94: .4byte 0x08C02052
+_08015E98:
+	movs r2, #0x24
+	mov sb, r2
+	ldr r0, _08015ED0 @ =0x08C0206C
+_08015E9E:
+	ldr r0, [r0]
+	mov r8, r0
+_08015EA2:
+	ldr r0, _08015ED4 @ =0x0202BBB4
+	movs r2, #0xc
+	ldrsh r1, [r0, r2]
+	subs r6, r6, r1
+	movs r1, #0xe
+	ldrsh r0, [r0, r1]
+	subs r7, r7, r0
+	mov r2, sb
+	str r2, [sp]
+	movs r0, #4
+	adds r1, r6, #0
+	adds r2, r7, #0
+	mov r3, r8
+	bl sub_08006884
+	add sp, #4
+	pop {r3, r4}
+	mov r8, r3
+	mov sb, r4
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08015ED0: .4byte 0x08C0206C
+_08015ED4: .4byte 0x0202BBB4
+
+	thumb_func_start sub_08015ED8
+sub_08015ED8: @ 0x08015ED8
+	push {r4, r5, lr}
+	sub sp, #4
+	adds r4, r0, #0
+	adds r5, r1, #0
+	bl sub_08000EEC
+	lsrs r0, r0, #1
+	movs r1, #0xf
+	ands r0, r1
+	movs r2, #2
+	ldr r1, _08015F08 @ =0x08C0206C
+	lsls r0, r0, #2
+	adds r0, r0, r1
+	ldr r3, [r0]
+	str r2, [sp]
+	movs r0, #4
+	adds r1, r4, #0
+	adds r2, r5, #0
+	bl sub_08006884
+	add sp, #4
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08015F08: .4byte 0x08C0206C
+
+	thumb_func_start sub_08015F0C
+sub_08015F0C: @ 0x08015F0C
+	ldr r2, _08015F20 @ =0x0202BBB4
+	strh r0, [r2, #0x14]
+	strh r1, [r2, #0x16]
+	lsls r0, r0, #4
+	strh r0, [r2, #0x1c]
+	lsls r1, r1, #4
+	strh r1, [r2, #0x1e]
+	strh r0, [r2, #0x20]
+	strh r1, [r2, #0x22]
+	bx lr
+	.align 2, 0
+_08015F20: .4byte 0x0202BBB4
+
+	thumb_func_start sub_08015F24
+sub_08015F24: @ 0x08015F24
+	push {r4, r5, r6, lr}
+	sub sp, #4
+	adds r5, r0, #0
+	adds r6, r1, #0
+	lsls r4, r2, #0x18
+	lsrs r4, r4, #0x18
+	bl sub_08000EEC
+	lsrs r0, r0, #3
+	movs r1, #3
+	bl __umodsi3
+	cmp r4, #0
+	beq _08015F48
+	ldr r1, _08015F44 @ =0x08C020E8
+	b _08015F4A
+	.align 2, 0
+_08015F44: .4byte 0x08C020E8
+_08015F48:
+	ldr r1, _08015F68 @ =0x08C020DC
+_08015F4A:
+	lsls r0, r0, #2
+	adds r0, r0, r1
+	ldr r3, [r0]
+	movs r0, #0
+	str r0, [sp]
+	movs r0, #4
+	adds r1, r5, #0
+	adds r2, r6, #0
+	bl sub_08006884
+	add sp, #4
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08015F68: .4byte 0x08C020DC
+
+	thumb_func_start sub_08015F6C
+sub_08015F6C: @ 0x08015F6C
+	push {r4, r5, r6, lr}
+	mov ip, r0
+	movs r5, #1
+	movs r1, #0x2c
+	ldrsh r2, [r0, r1]
+	movs r3, #0x30
+	ldrsh r0, [r0, r3]
+	subs r1, r2, r0
+	cmp r1, #0
+	bge _08015F82
+	subs r1, r0, r2
+_08015F82:
+	mov r4, ip
+	movs r0, #0x2e
+	ldrsh r3, [r4, r0]
+	movs r2, #0x32
+	ldrsh r0, [r4, r2]
+	subs r2, r3, r0
+	cmp r2, #0
+	bge _08015F94
+	subs r2, r0, r3
+_08015F94:
+	cmp r1, r2
+	ble _08015FA4
+	mov r0, ip
+	adds r0, #0x40
+	strb r5, [r0]
+	mov r3, ip
+	strh r1, [r3, #0x38]
+	b _08015FB0
+_08015FA4:
+	mov r1, ip
+	adds r1, #0x40
+	movs r0, #0
+	strb r0, [r1]
+	mov r4, ip
+	strh r2, [r4, #0x38]
+_08015FB0:
+	mov r0, ip
+	movs r1, #0x38
+	ldrsh r3, [r0, r1]
+	movs r4, #0
+	lsls r0, r5, #0x18
+	asrs r0, r0, #0x19
+	subs r0, r3, r0
+	ldr r6, _08015FC8 @ =0x0202BC44
+	cmp r0, #0
+	bge _08015FCC
+	strb r3, [r6]
+	b _08015FF2
+	.align 2, 0
+_08015FC8: .4byte 0x0202BC44
+_08015FCC:
+	lsls r1, r5, #0x18
+	asrs r2, r1, #0x18
+	asrs r1, r1, #0x19
+	subs r3, r3, r1
+	adds r0, r4, r6
+	strb r1, [r0]
+	cmp r2, #0xf
+	bgt _08015FE2
+	adds r0, r2, #1
+	lsls r0, r0, #0x18
+	lsrs r5, r0, #0x18
+_08015FE2:
+	adds r4, #1
+	lsls r0, r5, #0x18
+	asrs r0, r0, #0x19
+	subs r0, r3, r0
+	cmp r0, #0
+	bge _08015FCC
+	adds r0, r4, r6
+	strb r3, [r0]
+_08015FF2:
+	mov r2, ip
+	str r4, [r2, #0x3c]
+	ldrh r0, [r2, #0x38]
+	strh r0, [r2, #0x3a]
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08016000
+sub_08016000: @ 0x08016000
+	push {r4, r5, lr}
+	adds r5, r0, #0
+	ldr r1, [r5, #0x3c]
+	cmp r1, #0
+	bne _08016020
+	ldr r0, _0801601C @ =0x0202BBB4
+	ldrh r1, [r0, #0xc]
+	strh r1, [r5, #0x2c]
+	ldrh r0, [r0, #0xe]
+	strh r0, [r5, #0x2e]
+	adds r0, r5, #0
+	bl sub_08004460
+	b _08016072
+	.align 2, 0
+_0801601C: .4byte 0x0202BBB4
+_08016020:
+	ldr r0, _08016078 @ =0x0202BC44
+	adds r0, r1, r0
+	ldrb r0, [r0]
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+	ldrh r2, [r5, #0x3a]
+	subs r0, r2, r0
+	strh r0, [r5, #0x3a]
+	subs r0, r1, #1
+	str r0, [r5, #0x3c]
+	ldr r4, _0801607C @ =0x0202BBB4
+	movs r1, #0x30
+	ldrsh r0, [r5, r1]
+	movs r2, #0x2c
+	ldrsh r1, [r5, r2]
+	subs r0, r0, r1
+	movs r2, #0x3a
+	ldrsh r1, [r5, r2]
+	muls r0, r1, r0
+	movs r2, #0x38
+	ldrsh r1, [r5, r2]
+	bl __divsi3
+	ldrh r1, [r5, #0x2c]
+	adds r0, r1, r0
+	strh r0, [r4, #0xc]
+	movs r2, #0x32
+	ldrsh r0, [r5, r2]
+	movs r2, #0x2e
+	ldrsh r1, [r5, r2]
+	subs r0, r0, r1
+	movs r2, #0x3a
+	ldrsh r1, [r5, r2]
+	muls r0, r1, r0
+	movs r2, #0x38
+	ldrsh r1, [r5, r2]
+	bl __divsi3
+	ldrh r5, [r5, #0x2e]
+	adds r0, r5, r0
+	strh r0, [r4, #0xe]
+_08016072:
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08016078: .4byte 0x0202BC44
+_0801607C: .4byte 0x0202BBB4
+
+	thumb_func_start sub_08016080
+sub_08016080: @ 0x08016080
+	push {r4, r5, lr}
+	adds r4, r2, #0
+	subs r0, #7
+	str r0, [r4]
+	subs r1, #5
+	str r1, [r3]
+	ldr r0, [r4]
+	cmp r0, #0
+	bge _08016096
+	movs r0, #0
+	str r0, [r4]
+_08016096:
+	ldr r0, [r3]
+	cmp r0, #0
+	bge _080160A0
+	movs r0, #0
+	str r0, [r3]
+_080160A0:
+	ldr r1, [r4]
+	adds r1, #8
+	ldr r5, _080160D0 @ =0x0202E3D4
+	movs r0, #0
+	ldrsh r2, [r5, r0]
+	subs r0, r2, #1
+	cmp r1, r0
+	ble _080160B4
+	subs r0, #0xe
+	str r0, [r4]
+_080160B4:
+	ldr r0, [r3]
+	adds r0, #4
+	movs r1, #2
+	ldrsh r2, [r5, r1]
+	subs r1, r2, #1
+	cmp r0, r1
+	ble _080160C8
+	adds r0, r2, #0
+	subs r0, #0xa
+	str r0, [r3]
+_080160C8:
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080160D0: .4byte 0x0202E3D4
+
+	thumb_func_start sub_080160D4
+sub_080160D4: @ 0x080160D4
+	push {r4, r5, r6, r7, lr}
+	sub sp, #8
+	adds r5, r0, #0
+	adds r6, r1, #0
+	adds r7, r2, #0
+	add r3, sp, #4
+	adds r0, r6, #0
+	adds r1, r7, #0
+	mov r2, sp
+	bl sub_08016080
+	ldr r1, [sp]
+	lsls r1, r1, #4
+	str r1, [sp]
+	ldr r0, [sp, #4]
+	lsls r2, r0, #4
+	str r2, [sp, #4]
+	ldr r3, _08016118 @ =0x0202BBB4
+	movs r4, #0xc
+	ldrsh r0, [r3, r4]
+	cmp r1, r0
+	bne _08016108
+	movs r1, #0xe
+	ldrsh r0, [r3, r1]
+	cmp r2, r0
+	beq _08016114
+_08016108:
+	ldr r4, _0801611C @ =0x08C020F4
+	adds r0, r4, #0
+	bl sub_08004584
+	cmp r0, #0
+	beq _08016120
+_08016114:
+	movs r0, #0
+	b _08016150
+	.align 2, 0
+_08016118: .4byte 0x0202BBB4
+_0801611C: .4byte 0x08C020F4
+_08016120:
+	cmp r5, #0
+	beq _0801612E
+	adds r0, r4, #0
+	adds r1, r5, #0
+	bl sub_080043D4
+	b _08016136
+_0801612E:
+	adds r0, r4, #0
+	movs r1, #3
+	bl Proc_Start
+_08016136:
+	adds r2, r0, #0
+	ldr r1, _08016158 @ =0x0202BBB4
+	ldrh r0, [r1, #0xc]
+	strh r0, [r2, #0x30]
+	ldrh r0, [r1, #0xe]
+	strh r0, [r2, #0x32]
+	ldr r0, [sp]
+	strh r0, [r2, #0x2c]
+	ldr r0, [sp, #4]
+	strh r0, [r2, #0x2e]
+	strh r6, [r2, #0x34]
+	strh r7, [r2, #0x36]
+	movs r0, #1
+_08016150:
+	add sp, #8
+	pop {r4, r5, r6, r7}
+	pop {r1}
+	bx r1
+	.align 2, 0
+_08016158: .4byte 0x0202BBB4
+
+	thumb_func_start sub_0801615C
+sub_0801615C: @ 0x0801615C
+	push {r4, r5, r6, r7, lr}
+	mov r7, sb
+	mov r6, r8
+	push {r6, r7}
+	adds r5, r0, #0
+	mov r8, r1
+	mov sb, r2
+	lsls r0, r1, #4
+	bl sub_08015D10
+	lsls r0, r0, #0x10
+	lsrs r7, r0, #0x10
+	mov r1, sb
+	lsls r0, r1, #4
+	bl sub_08015D54
+	lsls r0, r0, #0x10
+	lsrs r6, r0, #0x10
+	ldr r1, _080161A4 @ =0x0202BBB4
+	movs r2, #0xc
+	ldrsh r0, [r1, r2]
+	cmp r7, r0
+	bne _08016192
+	movs r2, #0xe
+	ldrsh r0, [r1, r2]
+	cmp r6, r0
+	beq _0801619E
+_08016192:
+	ldr r4, _080161A8 @ =0x08C020F4
+	adds r0, r4, #0
+	bl sub_08004584
+	cmp r0, #0
+	beq _080161AC
+_0801619E:
+	movs r0, #0
+	b _080161DC
+	.align 2, 0
+_080161A4: .4byte 0x0202BBB4
+_080161A8: .4byte 0x08C020F4
+_080161AC:
+	cmp r5, #0
+	beq _080161BA
+	adds r0, r4, #0
+	adds r1, r5, #0
+	bl sub_080043D4
+	b _080161C2
+_080161BA:
+	adds r0, r4, #0
+	movs r1, #3
+	bl Proc_Start
+_080161C2:
+	adds r2, r0, #0
+	ldr r0, _080161E8 @ =0x0202BBB4
+	ldrh r1, [r0, #0xc]
+	strh r1, [r2, #0x30]
+	ldrh r0, [r0, #0xe]
+	strh r0, [r2, #0x32]
+	strh r7, [r2, #0x2c]
+	strh r6, [r2, #0x2e]
+	mov r0, r8
+	strh r0, [r2, #0x34]
+	mov r1, sb
+	strh r1, [r2, #0x36]
+	movs r0, #1
+_080161DC:
+	pop {r3, r4}
+	mov r8, r3
+	mov sb, r4
+	pop {r4, r5, r6, r7}
+	pop {r1}
+	bx r1
+	.align 2, 0
+_080161E8: .4byte 0x0202BBB4
+
+	thumb_func_start sub_080161EC
+sub_080161EC: @ 0x080161EC
+	push {r4, r5, lr}
+	adds r5, r1, #0
+	lsls r0, r0, #4
+	bl sub_08015D10
+	adds r4, r0, #0
+	lsls r4, r4, #0x10
+	lsrs r4, r4, #0x10
+	lsls r5, r5, #4
+	adds r0, r5, #0
+	bl sub_08015D54
+	lsls r0, r0, #0x10
+	lsrs r2, r0, #0x10
+	ldr r1, _08016220 @ =0x0202BBB4
+	movs r3, #0xc
+	ldrsh r0, [r1, r3]
+	cmp r4, r0
+	bne _08016224
+	movs r3, #0xe
+	ldrsh r0, [r1, r3]
+	cmp r2, r0
+	bne _08016224
+	movs r0, #0
+	b _08016226
+	.align 2, 0
+_08016220: .4byte 0x0202BBB4
+_08016224:
+	movs r0, #1
+_08016226:
+	pop {r4, r5}
+	pop {r1}
+	bx r1
+
+	thumb_func_start sub_0801622C
+sub_0801622C: @ 0x0801622C
+	push {r4, r5, lr}
+	adds r5, r0, #0
+	ldr r0, _08016250 @ =0x0202BBB4
+	movs r2, #0xe
+	ldrsh r1, [r0, r2]
+	movs r2, #0x2a
+	ldrsh r0, [r0, r2]
+	cmp r1, r0
+	ble _0801624A
+	ldr r4, _08016254 @ =0x08C020F4
+	adds r0, r4, #0
+	bl sub_08004584
+	cmp r0, #0
+	beq _08016258
+_0801624A:
+	movs r0, #0
+	b _08016284
+	.align 2, 0
+_08016250: .4byte 0x0202BBB4
+_08016254: .4byte 0x08C020F4
+_08016258:
+	cmp r5, #0
+	beq _08016266
+	adds r0, r4, #0
+	adds r1, r5, #0
+	bl sub_080043D4
+	b _0801626E
+_08016266:
+	adds r0, r4, #0
+	movs r1, #3
+	bl Proc_Start
+_0801626E:
+	adds r2, r0, #0
+	ldr r1, _0801628C @ =0x0202BBB4
+	ldrh r0, [r1, #0xc]
+	strh r0, [r2, #0x30]
+	ldrh r0, [r1, #0xe]
+	strh r0, [r2, #0x32]
+	ldrh r0, [r1, #0xc]
+	strh r0, [r2, #0x2c]
+	ldrh r0, [r1, #0x2a]
+	strh r0, [r2, #0x2e]
+	movs r0, #1
+_08016284:
+	pop {r4, r5}
+	pop {r1}
+	bx r1
+	.align 2, 0
+_0801628C: .4byte 0x0202BBB4
+
+	thumb_func_start sub_08016290
+sub_08016290: @ 0x08016290
+	push {r4, r5, r6, r7, lr}
+	adds r7, r0, #0
+	movs r1, #0x2c
+	ldrsh r0, [r7, r1]
+	movs r2, #0x30
+	ldrsh r1, [r7, r2]
+	subs r0, r0, r1
+	ldr r4, [r7, #0x34]
+	muls r0, r4, r0
+	ldr r5, [r7, #0x38]
+	adds r1, r5, #0
+	bl __divsi3
+	adds r6, r0, #0
+	movs r1, #0x2e
+	ldrsh r0, [r7, r1]
+	movs r2, #0x32
+	ldrsh r1, [r7, r2]
+	subs r0, r0, r1
+	muls r0, r4, r0
+	adds r1, r5, #0
+	bl __divsi3
+	adds r1, r0, #0
+	adds r0, r6, #0
+	movs r2, #0
+	bl sub_08015DE8
+	ldr r0, [r7, #0x34]
+	subs r0, #1
+	str r0, [r7, #0x34]
+	cmp r0, #0
+	bge _080162D8
+	adds r0, r7, #0
+	bl sub_0800457C
+_080162D8:
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_080162E0
+sub_080162E0: @ 0x080162E0
+	push {r4, r5, r6, lr}
+	adds r4, r0, #0
+	adds r5, r1, #0
+	adds r6, r2, #0
+	ldr r0, _08016310 @ =0x08C0211C
+	movs r1, #3
+	bl Proc_Start
+	ldr r2, _08016314 @ =0x0202BBB4
+	ldrh r3, [r2, #0x14]
+	lsls r1, r3, #4
+	strh r1, [r0, #0x2c]
+	ldrh r2, [r2, #0x16]
+	lsls r1, r2, #4
+	strh r1, [r0, #0x2e]
+	lsls r4, r4, #4
+	strh r4, [r0, #0x30]
+	lsls r5, r5, #4
+	strh r5, [r0, #0x32]
+	str r6, [r0, #0x38]
+	str r6, [r0, #0x34]
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08016310: .4byte 0x08C0211C
+_08016314: .4byte 0x0202BBB4
+
+	thumb_func_start sub_08016318
+sub_08016318: @ 0x08016318
+	push {r4, r5, r6, r7, lr}
+	ldr r0, _0801634C @ =gPlaySt
+	movs r1, #0
+	ldrb r0, [r0, #0x1b]
+	cmp r0, #3
+	bne _08016326
+	movs r1, #3
+_08016326:
+	adds r4, r1, #0
+	movs r0, #4
+	bl sub_0807A0C8
+	lsls r0, r0, #0x18
+	movs r1, #6
+	cmp r0, #0
+	bne _08016338
+	adds r1, r4, #0
+_08016338:
+	adds r7, r1, #0
+	movs r0, #4
+	bl sub_0807A0C8
+	lsls r0, r0, #0x18
+	cmp r0, #0
+	bne _08016350
+	adds r1, r4, #1
+	b _08016352
+	.align 2, 0
+_0801634C: .4byte gPlaySt
+_08016350:
+	movs r1, #7
+_08016352:
+	adds r6, r1, #0
+	movs r0, #4
+	bl sub_0807A0C8
+	lsls r0, r0, #0x18
+	cmp r0, #0
+	bne _08016364
+	adds r4, #2
+	b _08016366
+_08016364:
+	movs r4, #6
+_08016366:
+	ldr r5, _08016378 @ =gPlaySt
+	ldrb r0, [r5, #0xf]
+	cmp r0, #0x40
+	beq _08016392
+	cmp r0, #0x40
+	bgt _0801637C
+	cmp r0, #0
+	beq _080163A4
+	b _080163F4
+	.align 2, 0
+_08016378: .4byte gPlaySt
+_0801637C:
+	cmp r0, #0x80
+	bne _080163F4
+	movs r0, #0xe
+	ldrsb r0, [r5, r0]
+	bl sub_08031A5C
+	lsls r1, r6, #1
+	adds r0, #0x16
+	adds r0, r0, r1
+	ldrh r0, [r0]
+	b _080163F4
+_08016392:
+	movs r0, #0xe
+	ldrsb r0, [r5, r0]
+	bl sub_08031A5C
+	lsls r1, r4, #1
+	adds r0, #0x16
+	adds r0, r0, r1
+	ldrh r0, [r0]
+	b _080163F4
+_080163A4:
+	movs r0, #0xe
+	ldrsb r0, [r5, r0]
+	bl sub_08031A5C
+	adds r0, #0x86
+	ldrb r0, [r0]
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+	cmp r0, #0
+	beq _080163E0
+	ldr r1, _080163DC @ =0x0001000C
+	movs r0, #0x80
+	bl sub_08023D00
+	adds r4, r0, #0
+	movs r0, #0xe
+	ldrsb r0, [r5, r0]
+	bl sub_08031A5C
+	adds r0, #0x86
+	ldrb r0, [r0]
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+	cmp r4, r0
+	bgt _080163E0
+	movs r0, #9
+	b _080163F4
+	.align 2, 0
+_080163DC: .4byte 0x0001000C
+_080163E0:
+	ldr r0, _080163FC @ =gPlaySt
+	ldrb r0, [r0, #0xe]
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+	bl sub_08031A5C
+	lsls r1, r7, #1
+	adds r0, #0x16
+	adds r0, r0, r1
+	ldrh r0, [r0]
+_080163F4:
+	pop {r4, r5, r6, r7}
+	pop {r1}
+	bx r1
+	.align 2, 0
+_080163FC: .4byte gPlaySt
+
+	thumb_func_start sub_08016400
+sub_08016400: @ 0x08016400
+	push {lr}
+	bl sub_08016318
+	movs r1, #0
+	bl sub_0800376C
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08016410
+sub_08016410: @ 0x08016410
+	push {r4, r5, r6, lr}
+	sub sp, #4
+	adds r5, r0, #0
+	movs r0, #0x30
+	ldrsh r1, [r5, r0]
+	movs r4, #0x2c
+	ldrsh r2, [r5, r4]
+	ldr r3, [r5, #0x3c]
+	movs r6, #0x3a
+	ldrsh r0, [r5, r6]
+	str r0, [sp]
+	movs r0, #0
+	bl sub_08013508
+	adds r4, r0, #0
+	movs r0, #0x32
+	ldrsh r1, [r5, r0]
+	movs r6, #0x2e
+	ldrsh r2, [r5, r6]
+	ldr r3, [r5, #0x3c]
+	movs r6, #0x3a
+	ldrsh r0, [r5, r6]
+	str r0, [sp]
+	movs r0, #0
+	bl sub_08013508
+	ldr r1, _08016468 @ =0x0202BBB4
+	strh r4, [r1, #0xc]
+	strh r0, [r1, #0xe]
+	ldr r0, [r5, #0x3c]
+	adds r0, #1
+	str r0, [r5, #0x3c]
+	movs r2, #0x3a
+	ldrsh r1, [r5, r2]
+	cmp r0, r1
+	blt _0801645E
+	adds r0, r5, #0
+	bl sub_08004460
+_0801645E:
+	add sp, #4
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08016468: .4byte 0x0202BBB4
+
+	thumb_func_start nullsub_37
+nullsub_37: @ 0x0801646C
+	bx lr
+	.align 2, 0
diff --git a/asm/code.s b/asm/code.s
index f439b57..23d2c99 100644
--- a/asm/code.s
+++ b/asm/code.s
@@ -1835,7 +1835,7 @@ sub_08001CC4: @ 0x08001CC4
 	sub sp, #4
 	mov r7, sp
 	str r0, [r7]
-	ldr r1, _08001D28 @ =0x08BBFC7C
+	ldr r1, _08001D28 @ =gpKeySt
 	ldr r0, [r1]
 	ldr r1, [r7]
 	adds r2, r1, #0
@@ -1849,7 +1849,7 @@ sub_08001CC4: @ 0x08001CC4
 	orrs r2, r1
 	adds r1, r2, #0
 	strh r1, [r0, #8]
-	ldr r1, _08001D28 @ =0x08BBFC7C
+	ldr r1, _08001D28 @ =gpKeySt
 	ldr r0, [r1]
 	ldr r1, [r7]
 	adds r2, r1, #0
@@ -1863,7 +1863,7 @@ sub_08001CC4: @ 0x08001CC4
 	orrs r2, r1
 	adds r1, r2, #0
 	strh r1, [r0, #6]
-	ldr r1, _08001D28 @ =0x08BBFC7C
+	ldr r1, _08001D28 @ =gpKeySt
 	ldr r0, [r1]
 	ldr r1, [r7]
 	adds r2, r1, #0
@@ -1882,7 +1882,7 @@ sub_08001CC4: @ 0x08001CC4
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08001D28: .4byte 0x08BBFC7C
+_08001D28: .4byte gpKeySt
 
 	thumb_func_start sub_08001D2C
 sub_08001D2C: @ 0x08001D2C
@@ -3865,7 +3865,7 @@ _08002BDC:
 sub_08002BE4: @ 0x08002BE4
 	push {r7, lr}
 	mov r7, sp
-	ldr r1, _08002BFC @ =0x08BBFC7C
+	ldr r1, _08002BFC @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #4]
 	ldr r0, _08002C00 @ =0x00000303
@@ -3875,10 +3875,10 @@ sub_08002BE4: @ 0x08002BE4
 	bl sub_080C0584
 	b _08002C1C
 	.align 2, 0
-_08002BFC: .4byte 0x08BBFC7C
+_08002BFC: .4byte gpKeySt
 _08002C00: .4byte 0x00000303
 _08002C04:
-	ldr r1, _08002C18 @ =0x08BBFC7C
+	ldr r1, _08002C18 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #4]
 	cmp r1, #0xf
@@ -3887,7 +3887,7 @@ _08002C04:
 	bl sub_080C0584
 	b _08002C1C
 	.align 2, 0
-_08002C18: .4byte 0x08BBFC7C
+_08002C18: .4byte gpKeySt
 _08002C1C:
 	pop {r7}
 	pop {r0}
@@ -5299,7 +5299,7 @@ sub_080036F0: @ 0x080036F0
 	.align 2, 0
 _08003714: .4byte 0x02024E14
 _08003718:
-	ldr r1, _0800372C @ =0x0202BBF4
+	ldr r1, _0800372C @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -5309,7 +5309,7 @@ _08003718:
 	beq _08003730
 	b _08003764
 	.align 2, 0
-_0800372C: .4byte 0x0202BBF4
+_0800372C: .4byte gPlaySt
 _08003730:
 	bl sub_080040F8
 	ldr r0, _08003758 @ =0x02024E14
@@ -5465,7 +5465,7 @@ sub_08003858: @ 0x08003858
 	str r0, [r7]
 	str r1, [r7, #4]
 	str r2, [r7, #8]
-	ldr r1, _08003878 @ =0x0202BBF4
+	ldr r1, _08003878 @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -5475,7 +5475,7 @@ sub_08003858: @ 0x08003858
 	beq _0800387C
 	b _0800392A
 	.align 2, 0
-_08003878: .4byte 0x0202BBF4
+_08003878: .4byte gPlaySt
 _0800387C:
 	ldr r0, _08003934 @ =0x02024E14
 	ldrb r1, [r0, #6]
@@ -5575,7 +5575,7 @@ sub_0800394C: @ 0x0800394C
 	sub sp, #4
 	mov r7, sp
 	str r0, [r7]
-	ldr r1, _08003968 @ =0x0202BBF4
+	ldr r1, _08003968 @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -5585,7 +5585,7 @@ sub_0800394C: @ 0x0800394C
 	beq _0800396C
 	b _080039BE
 	.align 2, 0
-_08003968: .4byte 0x0202BBF4
+_08003968: .4byte gPlaySt
 _0800396C:
 	ldr r0, _080039C8 @ =0x02024E14
 	ldr r1, _080039C8 @ =0x02024E14
@@ -5641,7 +5641,7 @@ _080039D0: .4byte 0x03005A30
 sub_080039D4: @ 0x080039D4
 	push {r7, lr}
 	mov r7, sp
-	ldr r1, _080039EC @ =0x0202BBF4
+	ldr r1, _080039EC @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -5651,7 +5651,7 @@ sub_080039D4: @ 0x080039D4
 	beq _080039F0
 	b _08003A56
 	.align 2, 0
-_080039EC: .4byte 0x0202BBF4
+_080039EC: .4byte gPlaySt
 _080039F0:
 	ldr r0, _080039FC @ =0x02024E14
 	ldrh r1, [r0, #2]
@@ -5718,7 +5718,7 @@ sub_08003A68: @ 0x08003A68
 	mov r7, sp
 	adds r1, r7, #0
 	strh r0, [r1]
-	ldr r1, _08003A84 @ =0x0202BBF4
+	ldr r1, _08003A84 @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -5728,7 +5728,7 @@ sub_08003A68: @ 0x08003A68
 	beq _08003A88
 	b _08003AF0
 	.align 2, 0
-_08003A84: .4byte 0x0202BBF4
+_08003A84: .4byte gPlaySt
 _08003A88:
 	ldr r0, _08003A94 @ =0x02024E14
 	ldrh r1, [r0, #2]
@@ -5794,7 +5794,7 @@ _08003B00: .4byte 0x02024E14
 sub_08003B04: @ 0x08003B04
 	push {r7, lr}
 	mov r7, sp
-	ldr r1, _08003B1C @ =0x0202BBF4
+	ldr r1, _08003B1C @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -5804,7 +5804,7 @@ sub_08003B04: @ 0x08003B04
 	beq _08003B20
 	b _08003B42
 	.align 2, 0
-_08003B1C: .4byte 0x0202BBF4
+_08003B1C: .4byte gPlaySt
 _08003B20:
 	ldr r0, _08003B48 @ =0x02024E14
 	ldr r1, _08003B48 @ =0x02024E14
@@ -6120,7 +6120,7 @@ sub_08003D7C: @ 0x08003D7C
 	str r0, [r7]
 	str r1, [r7, #4]
 	str r2, [r7, #8]
-	ldr r1, _08003D9C @ =0x0202BBF4
+	ldr r1, _08003D9C @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -6130,7 +6130,7 @@ sub_08003D7C: @ 0x08003D7C
 	beq _08003DA0
 	b _08003DE2
 	.align 2, 0
-_08003D9C: .4byte 0x0202BBF4
+_08003D9C: .4byte gPlaySt
 _08003DA0:
 	ldr r1, _08003DEC @ =0x08BBFCD8
 	adds r0, r1, #0
@@ -14342,7 +14342,7 @@ sub_0800798C: @ 0x0800798C
 	ldr r2, _080079AC @ =0x030040E0
 	ldr r0, [r2]
 	ldr r4, [r0, #0x48]
-	ldr r1, _080079B0 @ =0x08BBFC7C
+	ldr r1, _080079B0 @ =gpKeySt
 	ldr r0, [r1]
 	movs r3, #1
 	ldrh r0, [r0, #4]
@@ -14355,7 +14355,7 @@ sub_0800798C: @ 0x0800798C
 	b _080079B6
 	.align 2, 0
 _080079AC: .4byte 0x030040E0
-_080079B0: .4byte 0x08BBFC7C
+_080079B0: .4byte gpKeySt
 _080079B4:
 	strh r3, [r4, #0x32]
 _080079B6:
@@ -15162,7 +15162,7 @@ sub_08007FC0: @ 0x08007FC0
 	bl sub_08007F58
 	cmp r0, #0
 	bne _08008038
-	ldr r0, _08008028 @ =0x08BBFC7C
+	ldr r0, _08008028 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0xa
 	ldrh r1, [r1, #8]
@@ -15189,7 +15189,7 @@ sub_08007FC0: @ 0x08007FC0
 	.align 2, 0
 _08008020: .4byte 0x08BFFC7C
 _08008024: .4byte 0x08BFFCD4
-_08008028: .4byte 0x08BBFC7C
+_08008028: .4byte gpKeySt
 _0800802C: .4byte 0x08BFFB68
 _08008030: .4byte 0x02022C60
 _08008034: .4byte 0x02023460
@@ -15202,7 +15202,7 @@ _08008038:
 	bl sub_08007F58
 	cmp r0, #0
 	bne _08008062
-	ldr r0, _0800806C @ =0x08BBFC7C
+	ldr r0, _0800806C @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0xf3
 	ldrh r1, [r1, #8]
@@ -15219,7 +15219,7 @@ _08008062:
 	bx r0
 	.align 2, 0
 _08008068: .4byte 0x08BFFBFC
-_0800806C: .4byte 0x08BBFC7C
+_0800806C: .4byte gpKeySt
 _08008070: .4byte 0x08BFFB68
 
 	thumb_func_start sub_08008074
@@ -17229,7 +17229,7 @@ _08009100:
 	movs r0, #0
 	bl sub_08006884
 _08009120:
-	ldr r0, _08009144 @ =0x08BBFC7C
+	ldr r0, _08009144 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0xf3
 	ldrh r1, [r1, #8]
@@ -17246,7 +17246,7 @@ _08009134:
 	.align 2, 0
 _0800913C: .4byte 0x08BFFC3C
 _08009140: .4byte 0x0000B2BF
-_08009144: .4byte 0x08BBFC7C
+_08009144: .4byte gpKeySt
 
 	thumb_func_start nullsub_24
 nullsub_24: @ 0x08009148
@@ -17482,14 +17482,14 @@ _0800930C: .4byte 0x03002790
 sub_08009310: @ 0x08009310
 	push {r4, r5, lr}
 	adds r4, r0, #0
-	ldr r0, _0800933C @ =0x08BBFC7C
+	ldr r0, _0800933C @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #2
 	ands r0, r1
 	cmp r0, #0
 	beq _0800934C
-	ldr r0, _08009340 @ =0x0202BBF4
+	ldr r0, _08009340 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -17502,8 +17502,8 @@ _08009334:
 	movs r0, #0
 	b _0800936E
 	.align 2, 0
-_0800933C: .4byte 0x08BBFC7C
-_08009340: .4byte 0x0202BBF4
+_0800933C: .4byte gpKeySt
+_08009340: .4byte gPlaySt
 _08009344: .4byte 0x0000038B
 _08009348: .4byte 0x030000E0
 _0800934C:
@@ -17512,7 +17512,7 @@ _0800934C:
 	ands r0, r1
 	cmp r0, #0
 	beq _08009384
-	ldr r0, _08009378 @ =0x0202BBF4
+	ldr r0, _08009378 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -17530,7 +17530,7 @@ _0800936E:
 	bl sub_0800457C
 	b _08009404
 	.align 2, 0
-_08009378: .4byte 0x0202BBF4
+_08009378: .4byte gPlaySt
 _0800937C: .4byte 0x0000038A
 _08009380: .4byte 0x030000E0
 _08009384:
@@ -17541,7 +17541,7 @@ _08009384:
 	ldrh r0, [r4, #0x2a]
 	cmp r0, #2
 	bne _080093B2
-	ldr r0, _0800940C @ =0x0202BBF4
+	ldr r0, _0800940C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -17557,7 +17557,7 @@ _080093A4:
 	beq _080093B2
 	bl _call_via_r0
 _080093B2:
-	ldr r0, _08009414 @ =0x08BBFC7C
+	ldr r0, _08009414 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x10
 	ldrh r1, [r1, #8]
@@ -17567,7 +17567,7 @@ _080093B2:
 	ldrh r1, [r4, #0x2a]
 	cmp r1, #1
 	bne _080093E8
-	ldr r0, _0800940C @ =0x0202BBF4
+	ldr r0, _0800940C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -17602,9 +17602,9 @@ _08009404:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0800940C: .4byte 0x0202BBF4
+_0800940C: .4byte gPlaySt
 _08009410: .4byte 0x00000387
-_08009414: .4byte 0x08BBFC7C
+_08009414: .4byte gpKeySt
 
 	thumb_func_start sub_08009418
 sub_08009418: @ 0x08009418
@@ -19545,7 +19545,7 @@ _0800A3FE:
 	adds r2, r5, #0
 	movs r3, #4
 	bl sub_08005234
-	ldr r1, _0800A420 @ =0x08BBFC7C
+	ldr r1, _0800A420 @ =gpKeySt
 	ldr r2, [r1]
 	movs r0, #4
 	ldrh r3, [r2, #8]
@@ -19556,7 +19556,7 @@ _0800A3FE:
 	bl sub_0800457C
 	b _0800A4E6
 	.align 2, 0
-_0800A420: .4byte 0x08BBFC7C
+_0800A420: .4byte gpKeySt
 _0800A424:
 	ldrh r2, [r2, #6]
 	movs r0, #0x40
@@ -19912,7 +19912,7 @@ _0800A6BA:
 	strb r0, [r4, #0x10]
 	ldrb r0, [r5, #5]
 	strb r0, [r4, #0x11]
-	ldr r1, _0800A708 @ =0x0202BBF4
+	ldr r1, _0800A708 @ =gPlaySt
 	movs r0, #0x40
 	ldrb r2, [r1, #0x14]
 	ands r0, r2
@@ -19945,7 +19945,7 @@ _0800A6FE:
 	bx r0
 	.align 2, 0
 _0800A704: .4byte 0xFFFEFFFF
-_0800A708: .4byte 0x0202BBF4
+_0800A708: .4byte gPlaySt
 
 	thumb_func_start sub_0800A70C
 sub_0800A70C: @ 0x0800A70C
@@ -20025,7 +20025,7 @@ _0800A79A:
 
 	thumb_func_start sub_0800A7A4
 sub_0800A7A4: @ 0x0800A7A4
-	ldr r0, _0800A7B8 @ =0x08BBFC7C
+	ldr r0, _0800A7B8 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x80
 	lsls r0, r0, #1
@@ -20036,7 +20036,7 @@ sub_0800A7A4: @ 0x0800A7A4
 	movs r0, #0
 	b _0800A7BE
 	.align 2, 0
-_0800A7B8: .4byte 0x08BBFC7C
+_0800A7B8: .4byte gpKeySt
 _0800A7BC:
 	movs r0, #1
 _0800A7BE:
@@ -20397,7 +20397,7 @@ sub_0800AA80: @ 0x0800AA80
 	ldrh r0, [r1]
 	cmp r0, #0
 	beq _0800AA9E
-	ldr r0, _0800AAA4 @ =0x0202BBF4
+	ldr r0, _0800AAA4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -20409,7 +20409,7 @@ _0800AA9E:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0800AAA4: .4byte 0x0202BBF4
+_0800AAA4: .4byte gPlaySt
 
 	thumb_func_start sub_0800AAA8
 sub_0800AAA8: @ 0x0800AAA8
@@ -20617,7 +20617,7 @@ sub_0800AC34: @ 0x0800AC34
 	ldr r0, [r1, #0x30]
 	cmp r0, #0
 	bge _0800AC54
-	ldr r0, _0800AC50 @ =0x08BBFC7C
+	ldr r0, _0800AC50 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r0, [r0, #8]
 	cmp r0, #0
@@ -20626,7 +20626,7 @@ sub_0800AC34: @ 0x0800AC34
 	bl sub_0800457C
 	b _0800AC66
 	.align 2, 0
-_0800AC50: .4byte 0x08BBFC7C
+_0800AC50: .4byte gpKeySt
 _0800AC54:
 	cmp r0, #0
 	beq _0800AC66
@@ -21508,7 +21508,7 @@ sub_0800B2CC: @ 0x0800B2CC
 	lsls r0, r0, #0x18
 	cmp r0, #0
 	beq _0800B31C
-	ldr r0, _0800B318 @ =0x08BBFC7C
+	ldr r0, _0800B318 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #8
 	ldrh r1, [r1, #8]
@@ -21520,7 +21520,7 @@ sub_0800B2CC: @ 0x0800B2CC
 	b _0800B3D0
 	.align 2, 0
 _0800B314: .4byte 0x08C05CA0
-_0800B318: .4byte 0x08BBFC7C
+_0800B318: .4byte gpKeySt
 _0800B31C:
 	adds r3, r4, #0
 	adds r3, #0x50
@@ -21534,13 +21534,13 @@ _0800B31C:
 	ldrb r0, [r0]
 	cmp r0, #0
 	beq _0800B3D0
-	ldr r0, _0800B370 @ =0x0202BBF4
+	ldr r0, _0800B370 @ =gPlaySt
 	adds r0, #0x40
 	ldrb r0, [r0]
 	lsrs r0, r0, #7
 	cmp r0, #0
 	bne _0800B34E
-	ldr r0, _0800B374 @ =0x08BBFC7C
+	ldr r0, _0800B374 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #1
 	ldrh r1, [r1, #4]
@@ -21565,8 +21565,8 @@ _0800B34E:
 	strh r0, [r3]
 	b _0800B3D0
 	.align 2, 0
-_0800B370: .4byte 0x0202BBF4
-_0800B374: .4byte 0x08BBFC7C
+_0800B370: .4byte gPlaySt
+_0800B374: .4byte gpKeySt
 _0800B378:
 	ldr r1, [r4, #0x40]
 	cmp r1, #0
@@ -21790,7 +21790,7 @@ _0800B4F0: .4byte 0x03002790
 sub_0800B4F4: @ 0x0800B4F4
 	push {r4, r5, lr}
 	adds r4, r0, #0
-	ldr r0, _0800B51C @ =0x0202BBF4
+	ldr r0, _0800B51C @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -21807,7 +21807,7 @@ sub_0800B4F4: @ 0x0800B4F4
 	movs r0, #0
 	b _0800B56E
 	.align 2, 0
-_0800B51C: .4byte 0x0202BBF4
+_0800B51C: .4byte gPlaySt
 _0800B520:
 	bl sub_0807FC04
 	lsls r0, r0, #0x18
@@ -22015,7 +22015,7 @@ _0800B694:
 	asrs r0, r0, #0x18
 	cmp r0, #0
 	beq _0800B6C0
-	ldr r0, _0800B6BC @ =0x0202BBF4
+	ldr r0, _0800B6BC @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -22027,13 +22027,13 @@ _0800B694:
 	bl sub_0800AD98
 	b _0800B700
 	.align 2, 0
-_0800B6BC: .4byte 0x0202BBF4
+_0800B6BC: .4byte gPlaySt
 _0800B6C0:
 	movs r0, #0
 	ldrsb r0, [r5, r0]
 	cmp r0, r6
 	bne _0800B6E8
-	ldr r0, _0800B6E4 @ =0x0202BBF4
+	ldr r0, _0800B6E4 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -22045,9 +22045,9 @@ _0800B6C0:
 	bl sub_08014500
 	b _0800B700
 	.align 2, 0
-_0800B6E4: .4byte 0x0202BBF4
+_0800B6E4: .4byte gPlaySt
 _0800B6E8:
-	ldr r0, _0800B708 @ =0x0202BBF4
+	ldr r0, _0800B708 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -22063,7 +22063,7 @@ _0800B700:
 	pop {r1}
 	bx r1
 	.align 2, 0
-_0800B708: .4byte 0x0202BBF4
+_0800B708: .4byte gPlaySt
 
 	thumb_func_start sub_0800B70C
 sub_0800B70C: @ 0x0800B70C
@@ -22230,7 +22230,7 @@ _0800B85E:
 	ands r0, r1
 	cmp r0, #0
 	beq _0800B890
-	ldr r2, _0800B8C4 @ =0x0202BBF4
+	ldr r2, _0800B8C4 @ =gPlaySt
 	adds r2, #0x40
 	ldrb r1, [r2]
 	lsls r0, r1, #0x19
@@ -22269,7 +22269,7 @@ _0800B8BA:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0800B8C4: .4byte 0x0202BBF4
+_0800B8C4: .4byte gPlaySt
 _0800B8C8: .4byte sub_0800BCF0
 
 	thumb_func_start sub_0800B8CC
@@ -22358,7 +22358,7 @@ _0800B95C:
 	movs r1, #2
 	movs r2, #1
 	bl sub_08007C88
-	ldr r0, _0800B97C @ =0x0202BBF4
+	ldr r0, _0800B97C @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #3
 	beq _0800B980
@@ -22369,7 +22369,7 @@ _0800B95C:
 	bl sub_0800B848
 	b _0800B98C
 	.align 2, 0
-_0800B97C: .4byte 0x0202BBF4
+_0800B97C: .4byte gPlaySt
 _0800B980:
 	ldr r0, [r4, #0x30]
 	ldr r1, [r0, #8]
@@ -22451,7 +22451,7 @@ _0800BA00:
 	movs r0, #0
 	b _0800BA2E
 _0800BA04:
-	ldr r0, _0800BA1C @ =0x0202BBF4
+	ldr r0, _0800BA1C @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #3
 	beq _0800BA20
@@ -22462,7 +22462,7 @@ _0800BA04:
 	bl sub_0800B848
 	b _0800BA2C
 	.align 2, 0
-_0800BA1C: .4byte 0x0202BBF4
+_0800BA1C: .4byte gPlaySt
 _0800BA20:
 	ldr r0, [r2, #0x30]
 	ldr r1, [r0, #8]
@@ -22882,7 +22882,7 @@ sub_0800BCF0: @ 0x0800BCF0
 	rsbs r0, r0, #0
 	cmp r1, r0
 	beq _0800BD30
-	ldr r2, _0800BD38 @ =0x0202BBF4
+	ldr r2, _0800BD38 @ =gPlaySt
 	adds r2, #0x40
 	movs r0, #3
 	ands r1, r0
@@ -22898,7 +22898,7 @@ _0800BD30:
 	str r0, [r4, #0x40]
 	b _0800BD78
 	.align 2, 0
-_0800BD38: .4byte 0x0202BBF4
+_0800BD38: .4byte gPlaySt
 _0800BD3C:
 	bl sub_08009E30
 	lsls r0, r0, #0x18
@@ -22917,7 +22917,7 @@ _0800BD50:
 	rsbs r0, r0, #0
 	cmp r1, r0
 	beq _0800BD76
-	ldr r2, _0800BD80 @ =0x0202BBF4
+	ldr r2, _0800BD80 @ =gPlaySt
 	adds r2, #0x40
 	movs r0, #3
 	ands r1, r0
@@ -22935,7 +22935,7 @@ _0800BD78:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0800BD80: .4byte 0x0202BBF4
+_0800BD80: .4byte gPlaySt
 
 	thumb_func_start sub_0800BD84
 sub_0800BD84: @ 0x0800BD84
@@ -23118,7 +23118,7 @@ _0800BEE8: .4byte 0x0202BBB4
 sub_0800BEEC: @ 0x0800BEEC
 	push {r4, r5, lr}
 	adds r5, r0, #0
-	bl sub_080307E4
+	bl GetPlayerLeaderUnitId
 	bl GetUnitFromCharId
 	adds r4, r0, #0
 	movs r1, #0x10
@@ -23977,7 +23977,7 @@ sub_0800C54C: @ 0x0800C54C
 	push {r7}
 	sub sp, #4
 	adds r4, r0, #0
-	bl sub_080307E4
+	bl GetPlayerLeaderUnitId
 	bl GetUnitFromCharId
 	adds r6, r0, #0
 	ldr r0, [r4, #0x30]
@@ -24437,21 +24437,21 @@ sub_0800C8BC: @ 0x0800C8BC
 	ldr r0, [r0, #4]
 	cmp r0, #0
 	bne _0800C8F0
-	bl sub_080307E4
+	bl GetPlayerLeaderUnitId
 	lsls r0, r0, #0x18
 	lsrs r0, r0, #0x18
 	bl sub_0807A754
 	lsls r0, r0, #0x18
 	cmp r0, #0
 	beq _0800C91C
-	bl sub_080307E4
+	bl GetPlayerLeaderUnitId
 	bl GetUnitFromCharId
 	adds r3, r0, #0
-	ldr r0, _0800C8EC @ =0x0202BBF4
+	ldr r0, _0800C8EC @ =gPlaySt
 	ldrb r2, [r0, #0x1b]
 	b _0800C90C
 	.align 2, 0
-_0800C8EC: .4byte 0x0202BBF4
+_0800C8EC: .4byte gPlaySt
 _0800C8F0:
 	lsls r0, r0, #0x18
 	lsrs r0, r0, #0x18
@@ -24494,21 +24494,21 @@ sub_0800C92C: @ 0x0800C92C
 	ldr r0, [r0, #4]
 	cmp r0, #0
 	bne _0800C964
-	bl sub_080307E4
+	bl GetPlayerLeaderUnitId
 	lsls r0, r0, #0x18
 	lsrs r0, r0, #0x18
 	bl sub_0807A754
 	lsls r0, r0, #0x18
 	cmp r0, #0
 	beq _0800C9B8
-	bl sub_080307E4
+	bl GetPlayerLeaderUnitId
 	bl GetUnitFromCharId
 	adds r5, r0, #0
-	ldr r0, _0800C960 @ =0x0202BBF4
+	ldr r0, _0800C960 @ =gPlaySt
 	ldrb r3, [r0, #0x1b]
 	b _0800C980
 	.align 2, 0
-_0800C960: .4byte 0x0202BBF4
+_0800C960: .4byte gPlaySt
 _0800C964:
 	lsls r0, r0, #0x18
 	lsrs r0, r0, #0x18
@@ -24984,7 +24984,7 @@ sub_0800CCFC: @ 0x0800CCFC
 	ldr r0, [r0, #4]
 	ldr r1, _0800CD48 @ =0xFFFF0000
 	ands r0, r1
-	ldr r1, _0800CD4C @ =0x0202BBF4
+	ldr r1, _0800CD4C @ =gPlaySt
 	cmp r0, #0
 	beq _0800CD18
 	movs r0, #0x40
@@ -25018,7 +25018,7 @@ _0800CD18:
 	b _0800CD60
 	.align 2, 0
 _0800CD48: .4byte 0xFFFF0000
-_0800CD4C: .4byte 0x0202BBF4
+_0800CD4C: .4byte gPlaySt
 _0800CD50: .4byte 0x0202E3F0
 _0800CD54: .4byte sub_0800CF2C
 _0800CD58:
@@ -25056,7 +25056,7 @@ _0800CD8C: .4byte 0x0202E3F0
 sub_0800CD90: @ 0x0800CD90
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r1, _0800CDA4 @ =0x0202BBF4
+	ldr r1, _0800CDA4 @ =gPlaySt
 	ldr r0, [r4, #0x30]
 	ldrb r1, [r1, #0x1b]
 	ldrb r0, [r0, #4]
@@ -25065,7 +25065,7 @@ sub_0800CD90: @ 0x0800CD90
 	movs r0, #0
 	b _0800CDC0
 	.align 2, 0
-_0800CDA4: .4byte 0x0202BBF4
+_0800CDA4: .4byte gPlaySt
 _0800CDA8:
 	ldr r0, _0800CDC8 @ =0x0202E3F0
 	ldr r0, [r0]
@@ -25088,7 +25088,7 @@ _0800CDC8: .4byte 0x0202E3F0
 sub_0800CDCC: @ 0x0800CDCC
 	push {r4, r5, lr}
 	adds r5, r0, #0
-	ldr r1, _0800CE04 @ =0x0202BBF4
+	ldr r1, _0800CE04 @ =gPlaySt
 	movs r0, #0x40
 	ldrb r2, [r1, #0x14]
 	ands r0, r2
@@ -25115,7 +25115,7 @@ _0800CDE8:
 	beq _0800CE18
 	b _0800CE1E
 	.align 2, 0
-_0800CE04: .4byte 0x0202BBF4
+_0800CE04: .4byte gPlaySt
 _0800CE08: .4byte 0x0202E3F0
 _0800CE0C:
 	ldr r0, [r5, #0x30]
@@ -25165,7 +25165,7 @@ _0800CE4C:
 sub_0800CE54: @ 0x0800CE54
 	push {r4, r5, lr}
 	adds r5, r0, #0
-	ldr r1, _0800CE8C @ =0x0202BBF4
+	ldr r1, _0800CE8C @ =gPlaySt
 	movs r0, #0x40
 	ldrb r2, [r1, #0x14]
 	ands r0, r2
@@ -25192,7 +25192,7 @@ _0800CE70:
 	beq _0800CEA0
 	b _0800CEA6
 	.align 2, 0
-_0800CE8C: .4byte 0x0202BBF4
+_0800CE8C: .4byte gPlaySt
 _0800CE90: .4byte 0x0202E3F0
 _0800CE94:
 	ldr r0, [r5, #0x30]
@@ -25463,7 +25463,7 @@ _0800D06A:
 	ble _0800D04C
 	cmp r5, #0
 	ble _0800D086
-	ldr r0, _0800D0C8 @ =0x0202BBF4
+	ldr r0, _0800D0C8 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -25472,7 +25472,7 @@ _0800D06A:
 	cmp r0, #0
 	bne _0800D162
 _0800D086:
-	ldr r0, _0800D0C8 @ =0x0202BBF4
+	ldr r0, _0800D0C8 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -25505,7 +25505,7 @@ _0800D0BC:
 	b _0800D0FA
 	.align 2, 0
 _0800D0C4: .4byte 0x00010004
-_0800D0C8: .4byte 0x0202BBF4
+_0800D0C8: .4byte gPlaySt
 _0800D0CC:
 	movs r4, #1
 _0800D0CE:
@@ -26331,14 +26331,14 @@ _0800D674: .4byte 0x08C0003C
 sub_0800D678: @ 0x0800D678
 	push {lr}
 	adds r2, r0, #0
-	ldr r0, _0800D688 @ =0x0202BBF4
+	ldr r0, _0800D688 @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #2
 	beq _0800D68C
 	movs r0, #0
 	b _0800D696
 	.align 2, 0
-_0800D688: .4byte 0x0202BBF4
+_0800D688: .4byte gPlaySt
 _0800D68C:
 	ldr r0, [r2, #0x30]
 	ldr r1, [r0, #4]
@@ -26353,14 +26353,14 @@ _0800D696:
 sub_0800D69C: @ 0x0800D69C
 	push {lr}
 	adds r2, r0, #0
-	ldr r0, _0800D6AC @ =0x0202BBF4
+	ldr r0, _0800D6AC @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #3
 	beq _0800D6B0
 	movs r0, #0
 	b _0800D6BA
 	.align 2, 0
-_0800D6AC: .4byte 0x0202BBF4
+_0800D6AC: .4byte gPlaySt
 _0800D6B0:
 	ldr r0, [r2, #0x30]
 	ldr r1, [r0, #4]
@@ -26379,7 +26379,7 @@ sub_0800D6C0: @ 0x0800D6C0
 	ldrh r0, [r2, #2]
 	cmp r0, #0
 	beq _0800D6E0
-	ldr r1, _0800D6DC @ =0x0202BBF4
+	ldr r1, _0800D6DC @ =gPlaySt
 	movs r0, #0x40
 	ldrb r1, [r1, #0x14]
 	ands r0, r1
@@ -26387,9 +26387,9 @@ sub_0800D6C0: @ 0x0800D6C0
 	beq _0800D6FC
 	b _0800D6EC
 	.align 2, 0
-_0800D6DC: .4byte 0x0202BBF4
+_0800D6DC: .4byte gPlaySt
 _0800D6E0:
-	ldr r1, _0800D6F8 @ =0x0202BBF4
+	ldr r1, _0800D6F8 @ =gPlaySt
 	movs r0, #0x40
 	ldrb r1, [r1, #0x14]
 	ands r0, r1
@@ -26401,7 +26401,7 @@ _0800D6EC:
 	bl sub_0800D384
 	b _0800D6FE
 	.align 2, 0
-_0800D6F8: .4byte 0x0202BBF4
+_0800D6F8: .4byte gPlaySt
 _0800D6FC:
 	movs r0, #0
 _0800D6FE:
@@ -26451,7 +26451,7 @@ _0800D73E:
 sub_0800D744: @ 0x0800D744
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r1, _0800D768 @ =0x0202BBF4
+	ldr r1, _0800D768 @ =gPlaySt
 	movs r0, #0x40
 	ldrb r1, [r1, #0x14]
 	ands r0, r1
@@ -26467,7 +26467,7 @@ _0800D75C:
 	bl sub_0800D384
 	b _0800D76E
 	.align 2, 0
-_0800D768: .4byte 0x0202BBF4
+_0800D768: .4byte gPlaySt
 _0800D76C:
 	movs r0, #0
 _0800D76E:
@@ -26526,7 +26526,7 @@ _0800D7C6:
 sub_0800D7CC: @ 0x0800D7CC
 	push {lr}
 	adds r2, r0, #0
-	ldr r0, _0800D7E0 @ =0x0202BBF4
+	ldr r0, _0800D7E0 @ =gPlaySt
 	ldr r1, [r2, #0x30]
 	ldrh r0, [r0, #0x10]
 	ldrh r3, [r1, #2]
@@ -26535,7 +26535,7 @@ sub_0800D7CC: @ 0x0800D7CC
 	movs r0, #0
 	b _0800D7EC
 	.align 2, 0
-_0800D7E0: .4byte 0x0202BBF4
+_0800D7E0: .4byte gPlaySt
 _0800D7E4:
 	ldr r1, [r1, #4]
 	adds r0, r2, #0
@@ -26675,7 +26675,7 @@ sub_0800D8BC: @ 0x0800D8BC
 	adds r4, r0, #0
 	ldr r0, [r4, #0x30]
 	ldrh r5, [r0, #4]
-	bl sub_080307E4
+	bl GetPlayerLeaderUnitId
 	bl GetUnitFromCharId
 	adds r1, r5, #0
 	adds r2, r4, #0
@@ -26816,7 +26816,7 @@ _0800D9C4:
 	beq _0800DA04
 	subs r0, r4, #1
 	bl sub_0802C2A8
-	ldr r0, _0800DA00 @ =0x0202BBF4
+	ldr r0, _0800DA00 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -26827,9 +26827,9 @@ _0800D9C4:
 	b _0800DA16
 	.align 2, 0
 _0800D9FC: .4byte 0x00007FFF
-_0800DA00: .4byte 0x0202BBF4
+_0800DA00: .4byte gPlaySt
 _0800DA04:
-	ldr r0, _0800DA34 @ =0x0202BBF4
+	ldr r0, _0800DA34 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -26848,7 +26848,7 @@ _0800DA16:
 	bl sub_0801DA0C
 	b _0800DA5A
 	.align 2, 0
-_0800DA34: .4byte 0x0202BBF4
+_0800DA34: .4byte gPlaySt
 _0800DA38:
 	adds r0, r4, #0
 	bl sub_0802C228
@@ -28188,7 +28188,7 @@ sub_0800E40C: @ 0x0800E40C
 	ands r0, r1
 	cmp r0, #0
 	bne _0800E432
-	ldr r0, _0800E438 @ =0x0202BBF4
+	ldr r0, _0800E438 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -28202,7 +28202,7 @@ _0800E432:
 	pop {r1}
 	bx r1
 	.align 2, 0
-_0800E438: .4byte 0x0202BBF4
+_0800E438: .4byte gPlaySt
 
 	thumb_func_start sub_0800E43C
 sub_0800E43C: @ 0x0800E43C
@@ -28283,7 +28283,7 @@ sub_0800E4C0: @ 0x0800E4C0
 	adds r1, #0x4c
 	movs r0, #0xff
 	strb r0, [r1]
-	ldr r1, _0800E508 @ =0x0202BBF4
+	ldr r1, _0800E508 @ =gPlaySt
 	ldr r0, [r4, #0x30]
 	ldr r0, [r0, #4]
 	strb r0, [r1, #0xe]
@@ -28307,19 +28307,19 @@ sub_0800E4C0: @ 0x0800E4C0
 	pop {r1}
 	bx r1
 	.align 2, 0
-_0800E508: .4byte 0x0202BBF4
+_0800E508: .4byte gPlaySt
 _0800E50C: .4byte 0x0202BBB4
 
 	thumb_func_start sub_0800E510
 sub_0800E510: @ 0x0800E510
-	ldr r1, _0800E51C @ =0x0202BBF4
+	ldr r1, _0800E51C @ =gPlaySt
 	ldr r0, [r0, #0x30]
 	ldrh r0, [r0, #2]
 	strb r0, [r1, #0xe]
 	movs r0, #0
 	bx lr
 	.align 2, 0
-_0800E51C: .4byte 0x0202BBF4
+_0800E51C: .4byte gPlaySt
 
 	thumb_func_start sub_0800E520
 sub_0800E520: @ 0x0800E520
@@ -28871,13 +28871,13 @@ _0800E8DE:
 	adds r1, #0x6e
 	strb r0, [r1]
 	mov r0, sb
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	ldr r2, _0800E99C @ =0x0203A434
 	strh r0, [r2]
 	adds r4, #0x4a
 	strh r0, [r4]
 	mov r0, sl
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	adds r1, r5, #0
 	adds r1, #0x48
 	strh r0, [r1]
@@ -29657,7 +29657,7 @@ sub_0800EEBC: @ 0x0800EEBC
 	adds r4, r0, #0
 	ldr r5, [r4, #0x54]
 	ldr r0, [r4, #0x58]
-	bl sub_080165F0
+	bl MakeNewItem
 	adds r1, r0, #0
 	adds r0, r5, #0
 	adds r2, r4, #0
@@ -29844,7 +29844,7 @@ _0800EFFC:
 	ands r1, r0
 	cmp r1, #0
 	beq _0800F058
-	ldr r5, _0800F054 @ =0x0202BBF4
+	ldr r5, _0800F054 @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r5, r0]
 	bl sub_08031A5C
@@ -29874,7 +29874,7 @@ _0800F046:
 	b _0800F062
 	.align 2, 0
 _0800F050: .4byte 0x0201000C
-_0800F054: .4byte 0x0202BBF4
+_0800F054: .4byte gPlaySt
 _0800F058:
 	ldrb r0, [r6, #6]
 	strb r0, [r4, #0x10]
@@ -29956,7 +29956,7 @@ sub_0800F0CC: @ 0x0800F0CC
 	ands r0, r1
 	cmp r0, #0
 	beq _0800F176
-	ldr r4, _0800F124 @ =0x0202BBF4
+	ldr r4, _0800F124 @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r4, r0]
 	bl sub_08031A5C
@@ -29985,7 +29985,7 @@ _0800F118:
 	strb r0, [r7, #0x11]
 	b _0800F17C
 	.align 2, 0
-_0800F124: .4byte 0x0202BBF4
+_0800F124: .4byte gPlaySt
 _0800F128:
 	ldrb r0, [r4, #6]
 	strb r0, [r7, #0x10]
@@ -30066,7 +30066,7 @@ _0800F18C:
 	ands r1, r0
 	cmp r1, #0
 	beq _0800F1F0
-	ldr r5, _0800F1FC @ =0x0202BBF4
+	ldr r5, _0800F1FC @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r5, r0]
 	bl sub_08031A5C
@@ -30106,7 +30106,7 @@ _0800F1F0:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0800F1FC: .4byte 0x0202BBF4
+_0800F1FC: .4byte gPlaySt
 
 	thumb_func_start sub_0800F200
 sub_0800F200: @ 0x0800F200
@@ -32141,7 +32141,7 @@ _08010018: .4byte 0x000001FF
 sub_0801001C: @ 0x0801001C
 	push {lr}
 	ldr r0, [r0, #0x2c]
-	bl sub_08012B8C
+	bl EndSpriteAnimProc
 	pop {r0}
 	bx r0
 
@@ -32973,15534 +32973,3 @@ _08010628:
 	pop {r0}
 	bx r0
 	.align 2, 0
-
-	thumb_func_start sub_08010630
-sub_08010630: @ 0x08010630
-	push {r4, r5, r6, r7, lr}
-	mov r7, sl
-	mov r6, sb
-	mov r5, r8
-	push {r5, r6, r7}
-	sub sp, #8
-	adds r6, r0, #0
-	ldr r2, [r6, #0x38]
-	movs r1, #0x80
-	lsls r1, r1, #3
-	adds r0, r2, r1
-	ldr r4, _08010748 @ =0x0001FFFF
-	ands r0, r4
-	lsrs r0, r0, #5
-	str r0, [sp, #4]
-	ldr r1, [r6, #0x3c]
-	adds r0, r1, #1
-	movs r3, #0xf
-	ands r0, r3
-	lsls r0, r0, #0xc
-	ldr r5, [sp, #4]
-	orrs r5, r0
-	str r5, [sp, #4]
-	ands r2, r4
-	lsrs r7, r2, #5
-	ands r1, r3
-	lsls r1, r1, #0xc
-	orrs r7, r1
-	ldr r1, [r6, #0x30]
-	adds r4, r6, #0
-	adds r4, #0x48
-	ldr r2, [r6, #0x34]
-	ldrh r0, [r4]
-	adds r2, r0, r2
-	ldr r5, _0801074C @ =0x08BFF798
-	str r7, [sp]
-	movs r0, #4
-	adds r3, r5, #0
-	bl sub_080068C4
-	ldr r0, [r6, #0x44]
-	subs r0, #2
-	lsls r0, r0, #3
-	ldr r1, [r6, #0x30]
-	adds r1, r1, r0
-	ldr r2, [r6, #0x34]
-	ldrh r3, [r4]
-	adds r2, r3, r2
-	adds r0, r7, #4
-	str r0, [sp]
-	movs r0, #4
-	adds r3, r5, #0
-	bl sub_080068C4
-	ldr r1, [r6, #0x30]
-	ldrh r0, [r4]
-	adds r0, #0x18
-	ldr r2, [r6, #0x34]
-	adds r2, r2, r0
-	adds r0, r7, #0
-	adds r0, #0xd
-	str r0, [sp]
-	movs r0, #4
-	adds r3, r5, #0
-	bl sub_080068C4
-	ldr r0, [r6, #0x44]
-	subs r0, #2
-	lsls r0, r0, #3
-	ldr r1, [r6, #0x30]
-	adds r1, r1, r0
-	ldrh r0, [r4]
-	adds r0, #0x18
-	ldr r2, [r6, #0x34]
-	adds r2, r2, r0
-	adds r0, r7, #0
-	adds r0, #0x11
-	str r0, [sp]
-	movs r0, #4
-	adds r3, r5, #0
-	bl sub_080068C4
-	ldr r1, [r6, #0x30]
-	ldrh r0, [r4]
-	adds r0, #8
-	ldr r2, [r6, #0x34]
-	adds r2, r2, r0
-	ldr r5, _08010750 @ =0x08BFF760
-	adds r0, r7, #6
-	str r0, [sp]
-	movs r0, #4
-	adds r3, r5, #0
-	bl sub_080068C4
-	ldr r1, [r6, #0x30]
-	ldrh r0, [r4]
-	adds r0, #0x10
-	ldr r2, [r6, #0x34]
-	adds r2, r2, r0
-	adds r0, r7, #0
-	adds r0, #0xb
-	str r0, [sp]
-	movs r0, #4
-	adds r3, r5, #0
-	bl sub_080068C4
-	ldr r0, [r6, #0x44]
-	subs r0, #1
-	lsls r0, r0, #3
-	ldr r1, [r6, #0x30]
-	adds r1, r1, r0
-	ldrh r0, [r4]
-	adds r0, #8
-	ldr r2, [r6, #0x34]
-	adds r2, r2, r0
-	adds r0, r7, #0
-	adds r0, #0xa
-	str r0, [sp]
-	movs r0, #4
-	adds r3, r5, #0
-	bl sub_080068C4
-	ldr r0, [r6, #0x44]
-	subs r0, #1
-	lsls r0, r0, #3
-	ldr r1, [r6, #0x30]
-	adds r1, r1, r0
-	ldrh r0, [r4]
-	adds r0, #0x10
-	ldr r2, [r6, #0x34]
-	adds r2, r2, r0
-	adds r0, r7, #0
-	adds r0, #0xc
-	str r0, [sp]
-	movs r0, #4
-	adds r3, r5, #0
-	bl sub_080068C4
-	movs r5, #2
-	b _08010772
-	.align 2, 0
-_08010748: .4byte 0x0001FFFF
-_0801074C: .4byte 0x08BFF798
-_08010750: .4byte 0x08BFF760
-_08010754:
-	lsls r0, r5, #3
-	ldr r1, [r6, #0x30]
-	adds r1, r1, r0
-	adds r0, r6, #0
-	adds r0, #0x48
-	ldr r2, [r6, #0x34]
-	ldrh r0, [r0]
-	adds r2, r0, r2
-	adds r0, r7, #2
-	str r0, [sp]
-	movs r0, #4
-	ldr r3, _080107B0 @ =0x08BFF798
-	bl sub_080068C4
-	adds r5, #2
-_08010772:
-	ldr r0, [r6, #0x44]
-	subs r0, #2
-	cmp r5, r0
-	blt _08010754
-	ldr r0, [r6, #0x44]
-	subs r0, #1
-	movs r1, #0x48
-	adds r1, r1, r6
-	mov sl, r1
-	cmp r5, r0
-	bge _080107AC
-_08010788:
-	lsls r0, r5, #3
-	ldr r1, [r6, #0x30]
-	adds r1, r1, r0
-	ldr r2, [r6, #0x34]
-	mov r3, sl
-	ldrh r3, [r3]
-	adds r2, r3, r2
-	adds r0, r7, #2
-	str r0, [sp]
-	movs r0, #4
-	ldr r3, _080107B4 @ =0x08BFF760
-	bl sub_080068C4
-	adds r5, #1
-	ldr r0, [r6, #0x44]
-	subs r0, #1
-	cmp r5, r0
-	blt _08010788
-_080107AC:
-	movs r5, #2
-	b _080107D8
-	.align 2, 0
-_080107B0: .4byte 0x08BFF798
-_080107B4: .4byte 0x08BFF760
-_080107B8:
-	lsls r0, r5, #3
-	ldr r1, [r6, #0x30]
-	adds r1, r1, r0
-	mov r2, sl
-	ldrh r0, [r2]
-	adds r0, #0x18
-	ldr r2, [r6, #0x34]
-	adds r2, r2, r0
-	adds r0, r7, #0
-	adds r0, #0xf
-	str r0, [sp]
-	movs r0, #4
-	ldr r3, _080108B8 @ =0x08BFF798
-	bl sub_080068C4
-	adds r5, #2
-_080107D8:
-	ldr r0, [r6, #0x44]
-	subs r0, #2
-	cmp r5, r0
-	blt _080107B8
-	movs r5, #1
-	ldr r0, [r6, #0x44]
-	subs r0, #2
-	cmp r5, r0
-	bge _08010832
-	mov sb, sl
-	movs r3, #8
-	adds r3, r3, r7
-	mov r8, r3
-_080107F2:
-	lsls r4, r5, #3
-	ldr r1, [r6, #0x30]
-	adds r1, r1, r4
-	mov r2, sb
-	ldrh r0, [r2]
-	adds r0, #8
-	ldr r2, [r6, #0x34]
-	adds r2, r2, r0
-	mov r3, r8
-	str r3, [sp]
-	movs r0, #4
-	ldr r3, _080108B8 @ =0x08BFF798
-	bl sub_080068C4
-	ldr r1, [r6, #0x30]
-	adds r1, r1, r4
-	mov r2, sb
-	ldrh r0, [r2]
-	adds r0, #0x10
-	ldr r2, [r6, #0x34]
-	adds r2, r2, r0
-	mov r3, r8
-	str r3, [sp]
-	movs r0, #4
-	ldr r3, _080108B8 @ =0x08BFF798
-	bl sub_080068C4
-	adds r5, #2
-	ldr r0, [r6, #0x44]
-	subs r0, #2
-	cmp r5, r0
-	blt _080107F2
-_08010832:
-	ldr r0, [r6, #0x44]
-	subs r0, #1
-	cmp r5, r0
-	bge _0801087E
-	mov r8, sl
-	ldr r0, _080108BC @ =0x08BFF760
-	mov sb, r0
-	adds r7, #8
-_08010842:
-	lsls r4, r5, #3
-	ldr r1, [r6, #0x30]
-	adds r1, r1, r4
-	mov r2, r8
-	ldrh r0, [r2]
-	adds r0, #8
-	ldr r2, [r6, #0x34]
-	adds r2, r2, r0
-	str r7, [sp]
-	movs r0, #4
-	mov r3, sb
-	bl sub_080068C4
-	ldr r1, [r6, #0x30]
-	adds r1, r1, r4
-	mov r3, r8
-	ldrh r0, [r3]
-	adds r0, #0x10
-	ldr r2, [r6, #0x34]
-	adds r2, r2, r0
-	str r7, [sp]
-	movs r0, #4
-	mov r3, sb
-	bl sub_080068C4
-	adds r5, #1
-	ldr r0, [r6, #0x44]
-	subs r0, #1
-	cmp r5, r0
-	blt _08010842
-_0801087E:
-	ldr r4, [sp, #4]
-	movs r7, #8
-	movs r5, #2
-_08010884:
-	ldr r1, [r6, #0x30]
-	adds r1, r1, r7
-	mov r2, sl
-	ldrh r0, [r2]
-	adds r0, #8
-	ldr r2, [r6, #0x34]
-	adds r2, r2, r0
-	str r4, [sp]
-	movs r0, #0
-	ldr r3, _080108C0 @ =0x08BFF7A8
-	bl sub_080068C4
-	adds r4, #4
-	adds r7, #0x20
-	subs r5, #1
-	cmp r5, #0
-	bge _08010884
-	add sp, #8
-	pop {r3, r4, r5}
-	mov r8, r3
-	mov sb, r4
-	mov sl, r5
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080108B8: .4byte 0x08BFF798
-_080108BC: .4byte 0x08BFF760
-_080108C0: .4byte 0x08BFF7A8
-
-	thumb_func_start nullsub_32
-nullsub_32: @ 0x080108C4
-	bx lr
-	.align 2, 0
-
-	thumb_func_start sub_080108C8
-sub_080108C8: @ 0x080108C8
-	adds r2, r0, #0
-	lsls r1, r1, #0x18
-	lsrs r0, r1, #0x18
-	cmp r2, #0
-	beq _080108EC
-	lsls r0, r0, #0x18
-	asrs r1, r0, #0x18
-	cmp r1, #0
-	beq _080108E6
-	adds r1, r2, #0
-	adds r1, #0x48
-	movs r0, #0x80
-	lsls r0, r0, #3
-	strh r0, [r1]
-	b _080108EC
-_080108E6:
-	adds r0, r2, #0
-	adds r0, #0x48
-	strh r1, [r0]
-_080108EC:
-	bx lr
-	.align 2, 0
-
-	thumb_func_start sub_080108F0
-sub_080108F0: @ 0x080108F0
-	push {lr}
-	adds r0, #0x4c
-	movs r3, #0
-	movs r1, #0
-	strh r1, [r0]
-	ldr r0, _0801095C @ =0x03002790
-	mov ip, r0
-	mov r2, ip
-	adds r2, #0x3c
-	movs r0, #0x3f
-	ldrb r1, [r2]
-	ands r0, r1
-	movs r1, #0x40
-	orrs r0, r1
-	strb r0, [r2]
-	mov r0, ip
-	adds r0, #0x44
-	strb r3, [r0]
-	mov r1, ip
-	adds r1, #0x45
-	movs r0, #0x10
-	strb r0, [r1]
-	mov r0, ip
-	adds r0, #0x46
-	strb r3, [r0]
-	ldr r0, _08010960 @ =0x0000FFE0
-	mov r3, ip
-	ldrh r3, [r3, #0x3c]
-	ands r0, r3
-	ldr r1, _08010964 @ =0x0000E0FF
-	ands r0, r1
-	movs r3, #0xf8
-	lsls r3, r3, #5
-	adds r1, r3, #0
-	orrs r0, r1
-	mov r1, ip
-	strh r0, [r1, #0x3c]
-	movs r0, #0x20
-	ldrb r1, [r2]
-	orrs r1, r0
-	strb r1, [r2]
-	mov r1, ip
-	adds r1, #0x3d
-	ldrb r2, [r1]
-	orrs r0, r2
-	strb r0, [r1]
-	ldr r0, _08010968 @ =0x08C01124
-	bl sub_08004584
-	movs r1, #1
-	bl sub_080108C8
-	pop {r0}
-	bx r0
-	.align 2, 0
-_0801095C: .4byte 0x03002790
-_08010960: .4byte 0x0000FFE0
-_08010964: .4byte 0x0000E0FF
-_08010968: .4byte 0x08C01124
-
-	thumb_func_start sub_0801096C
-sub_0801096C: @ 0x0801096C
-	push {r4, r5, r6, r7, lr}
-	mov r7, sl
-	mov r6, sb
-	mov r5, r8
-	push {r5, r6, r7}
-	adds r3, r0, #0
-	adds r0, #0x4c
-	ldrh r1, [r0]
-	adds r1, #1
-	movs r6, #0
-	strh r1, [r0]
-	movs r1, #0
-	ldrsh r4, [r0, r1]
-	ldr r2, _080109EC @ =0x03002790
-	adds r5, r2, #0
-	adds r5, #0x3c
-	movs r0, #0x3f
-	mov sl, r0
-	ldrb r1, [r5]
-	ands r0, r1
-	movs r1, #0x40
-	orrs r0, r1
-	strb r0, [r5]
-	movs r0, #0x44
-	adds r0, r0, r2
-	mov sb, r0
-	strb r4, [r0]
-	movs r0, #0x10
-	subs r0, r0, r4
-	movs r1, #0x45
-	adds r1, r1, r2
-	mov r8, r1
-	strb r0, [r1]
-	adds r7, r2, #0
-	adds r7, #0x46
-	strb r6, [r7]
-	cmp r4, #0x10
-	bne _080109DC
-	adds r0, r3, #0
-	bl sub_0800457C
-	mov r0, sl
-	ldrb r1, [r5]
-	ands r0, r1
-	strb r0, [r5]
-	mov r0, sb
-	strb r4, [r0]
-	mov r1, r8
-	strb r6, [r1]
-	strb r6, [r7]
-	ldr r0, _080109F0 @ =0x08C01124
-	bl sub_08004584
-	movs r1, #0
-	bl sub_080108C8
-_080109DC:
-	pop {r3, r4, r5}
-	mov r8, r3
-	mov sb, r4
-	mov sl, r5
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080109EC: .4byte 0x03002790
-_080109F0: .4byte 0x08C01124
-
-	thumb_func_start sub_080109F4
-sub_080109F4: @ 0x080109F4
-	push {lr}
-	adds r0, #0x4c
-	movs r3, #0
-	movs r1, #0
-	strh r1, [r0]
-	ldr r0, _08010A60 @ =0x03002790
-	mov ip, r0
-	mov r2, ip
-	adds r2, #0x3c
-	movs r0, #0x3f
-	ldrb r1, [r2]
-	ands r0, r1
-	movs r1, #0x40
-	orrs r0, r1
-	strb r0, [r2]
-	mov r1, ip
-	adds r1, #0x44
-	movs r0, #0x10
-	strb r0, [r1]
-	mov r0, ip
-	adds r0, #0x45
-	strb r3, [r0]
-	adds r0, #1
-	strb r3, [r0]
-	ldr r0, _08010A64 @ =0x0000FFE0
-	mov r3, ip
-	ldrh r3, [r3, #0x3c]
-	ands r0, r3
-	ldr r1, _08010A68 @ =0x0000E0FF
-	ands r0, r1
-	movs r3, #0xf8
-	lsls r3, r3, #5
-	adds r1, r3, #0
-	orrs r0, r1
-	mov r1, ip
-	strh r0, [r1, #0x3c]
-	movs r0, #0x20
-	ldrb r1, [r2]
-	orrs r1, r0
-	strb r1, [r2]
-	mov r1, ip
-	adds r1, #0x3d
-	ldrb r2, [r1]
-	orrs r0, r2
-	strb r0, [r1]
-	ldr r0, _08010A6C @ =0x08C01124
-	bl sub_08004584
-	movs r1, #1
-	bl sub_080108C8
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08010A60: .4byte 0x03002790
-_08010A64: .4byte 0x0000FFE0
-_08010A68: .4byte 0x0000E0FF
-_08010A6C: .4byte 0x08C01124
-
-	thumb_func_start sub_08010A70
-sub_08010A70: @ 0x08010A70
-	push {r4, r5, lr}
-	adds r5, r0, #0
-	adds r0, #0x4c
-	ldrh r1, [r0]
-	adds r1, #1
-	movs r4, #0
-	strh r1, [r0]
-	movs r1, #0
-	ldrsh r3, [r0, r1]
-	ldr r0, _08010AC4 @ =0x03002790
-	mov ip, r0
-	mov r2, ip
-	adds r2, #0x3c
-	movs r0, #0x3f
-	ldrb r1, [r2]
-	ands r0, r1
-	movs r1, #0x40
-	orrs r0, r1
-	strb r0, [r2]
-	movs r0, #0x10
-	subs r0, r0, r3
-	mov r1, ip
-	adds r1, #0x44
-	strb r0, [r1]
-	mov r0, ip
-	adds r0, #0x45
-	strb r3, [r0]
-	adds r0, #1
-	strb r4, [r0]
-	cmp r3, #0x10
-	bne _08010ABE
-	ldr r0, _08010AC8 @ =0x08C01124
-	bl sub_08004584
-	bl sub_08004460
-	adds r0, r5, #0
-	bl sub_0800457C
-_08010ABE:
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08010AC4: .4byte 0x03002790
-_08010AC8: .4byte 0x08C01124
-
-	thumb_func_start sub_08010ACC
-sub_08010ACC: @ 0x08010ACC
-	ldr r3, _08010AF0 @ =0x03002790
-	adds r1, r3, #0
-	adds r1, #0x3c
-	movs r0, #0x3f
-	ldrb r2, [r1]
-	ands r0, r2
-	strb r0, [r1]
-	adds r1, #8
-	movs r2, #0
-	movs r0, #0x10
-	strb r0, [r1]
-	adds r0, r3, #0
-	adds r0, #0x45
-	strb r2, [r0]
-	adds r0, #1
-	strb r2, [r0]
-	bx lr
-	.align 2, 0
-_08010AF0: .4byte 0x03002790
-
-	thumb_func_start sub_08010AF4
-sub_08010AF4: @ 0x08010AF4
-	push {r4, r5, r6, r7, lr}
-	mov r7, sl
-	mov r6, sb
-	mov r5, r8
-	push {r5, r6, r7}
-	sub sp, #0x24
-	mov r8, r0
-	mov sb, r1
-	adds r4, r2, #0
-	adds r5, r3, #0
-	movs r6, #0
-	ldr r0, _08010BD8 @ =0x08C01124
-	ldr r1, [sp, #0x48]
-	bl Proc_Start
-	adds r7, r0, #0
-	adds r0, r4, #0
-	bl sub_08013318
-	mov sl, r0
-	mov r0, r8
-	str r0, [r7, #0x30]
-	mov r2, sb
-	str r2, [r7, #0x34]
-	str r5, [r7, #0x38]
-	ldr r0, [sp, #0x44]
-	str r0, [r7, #0x3c]
-	str r4, [r7, #0x40]
-	adds r0, r7, #0
-	adds r0, #0x48
-	strh r6, [r0]
-	ldr r0, _08010BDC @ =0x08C01144
-	ldr r1, [sp, #0x48]
-	bl sub_080043D4
-	ldr r0, _08010BE0 @ =0x08452C74
-	ldr r1, [r7, #0x3c]
-	adds r1, #0x10
-	lsls r1, r1, #5
-	movs r2, #0x20
-	bl sub_0800105C
-	ldr r0, _08010BE4 @ =0x081901C8
-	ldr r1, [r7, #0x3c]
-	adds r1, #0x11
-	lsls r1, r1, #5
-	movs r2, #0x20
-	bl sub_0800105C
-	ldr r0, _08010BE8 @ =0x08452AD4
-	ldr r1, [r7, #0x38]
-	ldr r2, _08010BEC @ =0x06010000
-	adds r1, r1, r2
-	bl sub_08013688
-	mov r0, sl
-	bl sub_080054CC
-	adds r6, r0, #0
-	adds r4, r6, #0
-	cmp r6, #0
-	bge _08010B72
-	adds r4, r6, #7
-_08010B72:
-	asrs r4, r4, #3
-	adds r6, r4, #5
-	str r6, [r7, #0x44]
-	ldr r1, [r7, #0x38]
-	ldr r0, _08010BF0 @ =0x06010400
-	adds r1, r1, r0
-	ldr r2, [r7, #0x3c]
-	adds r2, #0x12
-	mov r0, sp
-	bl sub_08005ACC
-	mov r0, sp
-	bl sub_08005320
-	mov r2, sp
-	adds r2, #0x18
-	str r2, [sp, #0x20]
-	adds r0, r2, #0
-	bl sub_08005B08
-	ldr r0, [sp, #0x20]
-	movs r1, #0
-	bl sub_08005B8C
-	movs r0, #0
-	bl sub_080052E0
-	adds r4, #3
-	lsls r4, r4, #3
-	adds r0, r4, #0
-	mov r1, sl
-	bl sub_08005564
-	adds r1, r0, #0
-	ldr r0, [sp, #0x20]
-	movs r2, #0
-	mov r3, sl
-	bl sub_080059DC
-	movs r0, #0
-	bl sub_08005320
-	add sp, #0x24
-	pop {r3, r4, r5}
-	mov r8, r3
-	mov sb, r4
-	mov sl, r5
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08010BD8: .4byte 0x08C01124
-_08010BDC: .4byte 0x08C01144
-_08010BE0: .4byte 0x08452C74
-_08010BE4: .4byte 0x081901C8
-_08010BE8: .4byte 0x08452AD4
-_08010BEC: .4byte 0x06010000
-_08010BF0: .4byte 0x06010400
-
-	thumb_func_start sub_08010BF4
-sub_08010BF4: @ 0x08010BF4
-	push {r4, r5, lr}
-	sub sp, #8
-	adds r2, r0, #0
-	ldr r0, [r2, #0x30]
-	ldr r5, [r0, #4]
-	ldr r1, [r0, #8]
-	movs r0, #0x80
-	lsls r0, r0, #8
-	ands r0, r1
-	cmp r0, #0
-	bne _08010C14
-	ldr r4, _08010C10 @ =0x0000FFFF
-	ands r4, r1
-	b _08010C18
-	.align 2, 0
-_08010C10: .4byte 0x0000FFFF
-_08010C14:
-	movs r4, #1
-	rsbs r4, r4, #0
-_08010C18:
-	ldr r0, [r2, #0x30]
-	ldrh r3, [r0, #0xa]
-	movs r0, #0x80
-	lsls r0, r0, #8
-	ands r0, r3
-	movs r1, #1
-	rsbs r1, r1, #0
-	cmp r0, #0
-	bne _08010C2C
-	adds r1, r3, #0
-_08010C2C:
-	adds r3, r2, #0
-	adds r3, #0x5e
-	movs r0, #4
-	ldrh r3, [r3]
-	ands r0, r3
-	cmp r0, #0
-	bne _08010C50
-	movs r3, #0xa0
-	lsls r3, r3, #7
-	movs r0, #9
-	str r0, [sp]
-	str r2, [sp, #4]
-	adds r0, r4, #0
-	adds r2, r5, #0
-	bl sub_08010AF4
-	movs r0, #2
-	b _08010C52
-_08010C50:
-	movs r0, #0
-_08010C52:
-	add sp, #8
-	pop {r4, r5}
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_08010C5C
-sub_08010C5C: @ 0x08010C5C
-	push {lr}
-	adds r1, r0, #0
-	adds r2, r1, #0
-	adds r2, #0x5e
-	movs r0, #4
-	ldrh r2, [r2]
-	ands r0, r2
-	cmp r0, #0
-	beq _08010C80
-	ldr r0, _08010C7C @ =0x08C01124
-	bl sub_08004584
-	bl sub_08004460
-	movs r0, #0
-	b _08010CA8
-	.align 2, 0
-_08010C7C: .4byte 0x08C01124
-_08010C80:
-	adds r0, r1, #0
-	adds r0, #0x4d
-	ldrb r0, [r0]
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-	cmp r0, #0
-	beq _08010CA0
-	ldr r0, _08010C9C @ =0x08C01124
-	bl sub_08004584
-	bl sub_08004460
-	b _08010CA6
-	.align 2, 0
-_08010C9C: .4byte 0x08C01124
-_08010CA0:
-	ldr r0, _08010CAC @ =0x08C0115C
-	bl sub_080043D4
-_08010CA6:
-	movs r0, #2
-_08010CA8:
-	pop {r1}
-	bx r1
-	.align 2, 0
-_08010CAC: .4byte 0x08C0115C
-
-	thumb_func_start sub_08010CB0
-sub_08010CB0: @ 0x08010CB0
-	push {r4, r5, r6, r7, lr}
-	adds r5, r0, #0
-	ldr r4, _08010D60 @ =0x03002790
-	movs r6, #1
-	ldrb r0, [r4, #1]
-	orrs r0, r6
-	movs r7, #2
-	orrs r0, r7
-	movs r1, #5
-	rsbs r1, r1, #0
-	ands r0, r1
-	movs r1, #8
-	orrs r0, r1
-	movs r1, #0x10
-	orrs r0, r1
-	strb r0, [r4, #1]
-	adds r3, r4, #0
-	adds r3, #0x3c
-	movs r0, #0x3f
-	ldrb r1, [r3]
-	ands r0, r1
-	movs r1, #0x40
-	orrs r0, r1
-	strb r0, [r3]
-	adds r1, r4, #0
-	adds r1, #0x44
-	movs r2, #0
-	movs r0, #0x10
-	strb r0, [r1]
-	adds r0, r4, #0
-	adds r0, #0x45
-	strb r2, [r0]
-	adds r0, #1
-	strb r2, [r0]
-	ldr r0, _08010D64 @ =0x0000FFE0
-	ldrh r2, [r4, #0x3c]
-	ands r0, r2
-	movs r1, #4
-	orrs r0, r1
-	ldr r1, _08010D68 @ =0x0000E0FF
-	ands r0, r1
-	movs r2, #0x80
-	lsls r2, r2, #4
-	adds r1, r2, #0
-	orrs r0, r1
-	strh r0, [r4, #0x3c]
-	movs r0, #0x20
-	ldrb r1, [r3]
-	orrs r1, r0
-	strb r1, [r3]
-	adds r1, r4, #0
-	adds r1, #0x3d
-	ldrb r2, [r1]
-	orrs r0, r2
-	strb r0, [r1]
-	movs r0, #2
-	movs r1, #0
-	movs r2, #0
-	bl sub_08001D64
-	ldr r0, [r5, #0x34]
-	movs r1, #0x80
-	lsls r1, r1, #1
-	ands r0, r1
-	cmp r0, #0
-	bne _08010D6C
-	movs r1, #4
-	rsbs r1, r1, #0
-	adds r0, r1, #0
-	ldrb r2, [r4, #0xc]
-	ands r0, r2
-	strb r0, [r4, #0xc]
-	adds r0, r1, #0
-	ldrb r2, [r4, #0x10]
-	ands r0, r2
-	orrs r0, r6
-	strb r0, [r4, #0x10]
-	ldrb r0, [r4, #0x14]
-	ands r1, r0
-	orrs r1, r7
-	strb r1, [r4, #0x14]
-	movs r0, #3
-	ldrb r1, [r4, #0x18]
-	orrs r0, r1
-	strb r0, [r4, #0x18]
-	movs r0, #8
-	b _08010D6E
-	.align 2, 0
-_08010D60: .4byte 0x03002790
-_08010D64: .4byte 0x0000FFE0
-_08010D68: .4byte 0x0000E0FF
-_08010D6C:
-	movs r0, #6
-_08010D6E:
-	str r0, [r5, #0x44]
-	movs r0, #0
-	str r0, [r5, #0x30]
-	ldr r0, _08010D84 @ =0x08BFFF78
-	bl sub_08004584
-	str r0, [r5, #0x40]
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08010D84: .4byte 0x08BFFF78
-
-	thumb_func_start sub_08010D88
-sub_08010D88: @ 0x08010D88
-	push {r4, r5, lr}
-	adds r4, r0, #0
-	ldr r0, _08010DF0 @ =0x06008000
-	ldr r1, _08010DF4 @ =0x06001000
-	movs r2, #0xa0
-	lsls r2, r2, #5
-	bl CpuFastSet
-	ldr r0, _08010DF8 @ =0x02022960
-	ldr r2, _08010DFC @ =0xFFFFFF00
-	adds r1, r0, r2
-	ldr r2, [r4, #0x44]
-	lsls r2, r2, #3
-	ldr r3, _08010E00 @ =0x001FFFFF
-	ands r2, r3
-	bl CpuFastSet
-	ldr r5, _08010E04 @ =0x00008080
-	adds r4, r5, #0
-	ldr r3, _08010E08 @ =0x02024460
-	ldr r2, _08010E0C @ =0x02023C60
-	movs r1, #0x80
-	lsls r1, r1, #3
-_08010DB6:
-	ldrh r5, [r3]
-	adds r0, r4, r5
-	strh r0, [r2]
-	adds r3, #2
-	adds r2, #2
-	subs r1, #1
-	cmp r1, #0
-
-	thumb_func_start sub_08010DC4
-sub_08010DC4: @ 0x08010DC4
-	bne _08010DB6
-	movs r0, #4
-	bl sub_08000FD4
-	bl sub_08001034
-	ldr r2, _08010E10 @ =0x03002790
-	movs r0, #1
-	ldrb r1, [r2, #1]
-	orrs r0, r1
-	movs r1, #2
-	orrs r0, r1
-	movs r1, #4
-	orrs r0, r1
-	movs r1, #8
-	orrs r0, r1
-	movs r1, #0x10
-	orrs r0, r1
-	strb r0, [r2, #1]
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08010DF0: .4byte 0x06008000
-_08010DF4: .4byte 0x06001000
-_08010DF8: .4byte 0x02022960
-_08010DFC: .4byte 0xFFFFFF00
-_08010E00: .4byte 0x001FFFFF
-_08010E04: .4byte 0x00008080
-_08010E08: .4byte 0x02024460
-_08010E0C: .4byte 0x02023C60
-_08010E10: .4byte 0x03002790
-
-	thumb_func_start sub_08010E14
-sub_08010E14: @ 0x08010E14
-	push {r4, r5, lr}
-	sub sp, #4
-	adds r5, r0, #0
-	adds r0, #0x3c
-	ldrb r0, [r0]
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-	cmp r0, #0
-	beq _08010E7C
-	ldr r4, _08010E70 @ =0x08C00798
-	ldr r1, [r5, #0x2c]
-	lsls r0, r1, #1
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	adds r0, r0, r4
-	ldr r0, [r0]
-	ldr r1, _08010E74 @ =0x06008000
-	bl sub_08013688
-	ldr r0, _08010E78 @ =0x02024460
-	ldr r2, [r5, #0x2c]
-	lsls r1, r2, #1
-	adds r1, r1, r2
-	lsls r1, r1, #2
-	adds r2, r4, #4
-	adds r1, r1, r2
-	ldr r1, [r1]
-	movs r2, #0x80
-	lsls r2, r2, #8
-	bl sub_080C0C28
-	ldr r1, [r5, #0x2c]
-	lsls r0, r1, #1
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	adds r4, #8
-	adds r0, r0, r4
-	ldr r0, [r0]
-	movs r1, #0x80
-	lsls r1, r1, #1
-	ldr r2, [r5, #0x44]
-	lsls r2, r2, #5
-	bl sub_0800105C
-	b _08010E8E
-	.align 2, 0
-_08010E70: .4byte 0x08C00798
-_08010E74: .4byte 0x06008000
-_08010E78: .4byte 0x02024460
-_08010E7C:
-	ldr r0, _08010E9C @ =0x02024460
-	movs r1, #0x80
-	lsls r1, r1, #8
-	ldr r3, [r5, #0x44]
-	ldr r2, [r5, #0x2c]
-	str r2, [sp]
-	movs r2, #8
-	bl sub_080B7980
-_08010E8E:
-	movs r0, #8
-	bl sub_08000FD4
-	add sp, #4
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08010E9C: .4byte 0x02024460
-
-	thumb_func_start sub_08010EA0
-sub_08010EA0: @ 0x08010EA0
-	push {r4, lr}
-	adds r4, r0, #0
-	ldr r2, [r4, #0x30]
-	ldr r0, [r4, #0x38]
-	adds r2, r2, r0
-	str r2, [r4, #0x30]
-	asrs r2, r2, #4
-	ldr r0, _08010EE8 @ =0x03002790
-	mov ip, r0
-	mov r3, ip
-	adds r3, #0x3c
-	movs r0, #0x3f
-	ldrb r1, [r3]
-	ands r0, r1
-	movs r1, #0x40
-	orrs r0, r1
-	strb r0, [r3]
-	movs r0, #0x10
-	subs r0, r0, r2
-	mov r1, ip
-	adds r1, #0x44
-	movs r3, #0
-	strb r0, [r1]
-	mov r0, ip
-	adds r0, #0x45
-	strb r2, [r0]
-	adds r0, #1
-	strb r3, [r0]
-	cmp r2, #0x10
-	bne _08010EE2
-	adds r0, r4, #0
-	bl sub_0800457C
-_08010EE2:
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08010EE8: .4byte 0x03002790
-
-	thumb_func_start sub_08010EEC
-sub_08010EEC: @ 0x08010EEC
-	push {r4, lr}
-	adds r4, r0, #0
-	movs r0, #3
-	movs r1, #0
-	movs r2, #0
-	bl sub_08001D64
-	ldr r0, _08010F40 @ =0x02023C60
-	movs r1, #0
-	bl sub_080017E8
-	movs r0, #4
-	bl sub_08000FD4
-	ldr r3, _08010F44 @ =0x03002790
-	adds r1, r3, #0
-	adds r1, #0x3c
-	movs r0, #0x3f
-	ldrb r2, [r1]
-	ands r0, r2
-	strb r0, [r1]
-	adds r1, #8
-	movs r2, #0
-	movs r0, #0x10
-	strb r0, [r1]
-	adds r0, r3, #0
-	adds r0, #0x45
-	strb r2, [r0]
-	adds r0, #1
-	strb r2, [r0]
-	ldr r0, [r4, #0x34]
-	movs r1, #0x80
-	lsls r1, r1, #1
-	ands r0, r1
-	cmp r0, #0
-	bne _08010F38
-	bl sub_08015998
-_08010F38:
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08010F40: .4byte 0x02023C60
-_08010F44: .4byte 0x03002790
-
-	thumb_func_start sub_08010F48
-sub_08010F48: @ 0x08010F48
-	push {r4, r5, r6, lr}
-	adds r6, r0, #0
-	adds r4, r1, #0
-	adds r5, r2, #0
-	adds r1, r3, #0
-	lsls r4, r4, #0x18
-	lsrs r4, r4, #0x18
-	ldr r0, _08010F70 @ =0x08C0117C
-	bl sub_080043D4
-	str r5, [r0, #0x2c]
-	str r6, [r0, #0x34]
-	movs r1, #0xff
-	ands r1, r6
-	str r1, [r0, #0x38]
-	adds r0, #0x3c
-	strb r4, [r0]
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08010F70: .4byte 0x08C0117C
-
-	thumb_func_start sub_08010F74
-sub_08010F74: @ 0x08010F74
-	push {r4, r5, r6, r7, lr}
-	adds r5, r0, #0
-	ldr r7, _08011028 @ =0x03002790
-	movs r6, #1
-	ldrb r0, [r7, #1]
-	orrs r0, r6
-	movs r1, #2
-	orrs r0, r1
-	movs r1, #5
-	rsbs r1, r1, #0
-	ands r0, r1
-	movs r1, #8
-	orrs r0, r1
-	movs r1, #0x10
-	orrs r0, r1
-	strb r0, [r7, #1]
-	adds r2, r7, #0
-	adds r2, #0x3c
-	movs r0, #0x3f
-	ldrb r1, [r2]
-	ands r0, r1
-	movs r1, #0x40
-	orrs r0, r1
-	strb r0, [r2]
-	adds r0, r7, #0
-	adds r0, #0x44
-	movs r4, #0
-	strb r4, [r0]
-	adds r1, r7, #0
-	adds r1, #0x45
-	movs r0, #0x10
-	strb r0, [r1]
-	adds r0, r7, #0
-	adds r0, #0x46
-	strb r4, [r0]
-	ldr r0, _0801102C @ =0x0000FFE0
-	ldrh r3, [r7, #0x3c]
-	ands r0, r3
-	movs r1, #4
-	orrs r0, r1
-	ldr r1, _08011030 @ =0x0000E0FF
-	ands r0, r1
-	movs r3, #0xc0
-	lsls r3, r3, #5
-	adds r1, r3, #0
-	orrs r0, r1
-	strh r0, [r7, #0x3c]
-	movs r0, #0x20
-	ldrb r1, [r2]
-	orrs r1, r0
-	strb r1, [r2]
-	adds r1, r7, #0
-	adds r1, #0x3d
-	ldrb r2, [r1]
-	orrs r0, r2
-	strb r0, [r1]
-	movs r0, #2
-	movs r1, #0
-	movs r2, #0
-	bl sub_08001D64
-	movs r1, #4
-	rsbs r1, r1, #0
-	adds r0, r1, #0
-	ldrb r3, [r7, #0xc]
-	ands r0, r3
-	strb r0, [r7, #0xc]
-	adds r0, r1, #0
-	ldrb r2, [r7, #0x10]
-	ands r0, r2
-	orrs r0, r6
-	strb r0, [r7, #0x10]
-	ldrb r3, [r7, #0x14]
-	ands r1, r3
-	strb r1, [r7, #0x14]
-	movs r0, #3
-	ldrb r1, [r7, #0x18]
-	orrs r0, r1
-	strb r0, [r7, #0x18]
-	movs r0, #6
-	str r0, [r5, #0x44]
-	str r4, [r5, #0x30]
-	ldr r0, _08011034 @ =0x08BFFF78
-	bl sub_08004584
-	str r0, [r5, #0x40]
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08011028: .4byte 0x03002790
-_0801102C: .4byte 0x0000FFE0
-_08011030: .4byte 0x0000E0FF
-_08011034: .4byte 0x08BFFF78
-
-	thumb_func_start sub_08011038
-sub_08011038: @ 0x08011038
-	push {r4, r5, lr}
-	sub sp, #4
-	adds r5, r0, #0
-	adds r0, #0x3c
-	ldrb r0, [r0]
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-	cmp r0, #0
-	beq _0801109C
-	ldr r4, _08011090 @ =0x08C00798
-	ldr r1, [r5, #0x2c]
-	lsls r0, r1, #1
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	adds r0, r0, r4
-	ldr r0, [r0]
-	ldr r1, _08011094 @ =0x06001000
-	bl sub_08013688
-	ldr r0, _08011098 @ =0x02023C60
-	ldr r2, [r5, #0x2c]
-	lsls r1, r2, #1
-	adds r1, r1, r2
-	lsls r1, r1, #2
-	adds r2, r4, #4
-	adds r1, r1, r2
-	ldr r1, [r1]
-	movs r2, #0x80
-	bl sub_080C0C28
-	ldr r1, [r5, #0x2c]
-	lsls r0, r1, #1
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	adds r4, #8
-	adds r0, r0, r4
-	ldr r0, [r0]
-	ldr r2, [r5, #0x44]
-	lsls r2, r2, #5
-	movs r1, #0
-	bl sub_0800105C
-	b _080110AE
-	.align 2, 0
-_08011090: .4byte 0x08C00798
-_08011094: .4byte 0x06001000
-_08011098: .4byte 0x02023C60
-_0801109C:
-	ldr r0, _080110DC @ =0x02023C60
-	movs r1, #0x80
-	lsls r1, r1, #5
-	ldr r3, [r5, #0x44]
-	ldr r2, [r5, #0x2c]
-	str r2, [sp]
-	movs r2, #0
-	bl sub_080B7980
-_080110AE:
-	movs r0, #4
-	bl sub_08000FD4
-	bl sub_08001034
-	ldr r2, _080110E0 @ =0x03002790
-	movs r0, #1
-	ldrb r1, [r2, #1]
-	orrs r0, r1
-	movs r1, #2
-	orrs r0, r1
-	movs r1, #4
-	orrs r0, r1
-	movs r1, #8
-	orrs r0, r1
-	movs r1, #0x10
-	orrs r0, r1
-	strb r0, [r2, #1]
-	add sp, #4
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080110DC: .4byte 0x02023C60
-_080110E0: .4byte 0x03002790
-
-	thumb_func_start sub_080110E4
-sub_080110E4: @ 0x080110E4
-	push {r4, lr}
-	adds r4, r0, #0
-	ldr r2, [r4, #0x30]
-	ldr r0, [r4, #0x38]
-	adds r2, r2, r0
-	str r2, [r4, #0x30]
-	asrs r2, r2, #4
-	ldr r0, _0801112C @ =0x03002790
-	mov ip, r0
-	mov r3, ip
-	adds r3, #0x3c
-	movs r0, #0x3f
-	ldrb r1, [r3]
-	ands r0, r1
-	movs r1, #0x40
-	orrs r0, r1
-	strb r0, [r3]
-	mov r0, ip
-	adds r0, #0x44
-	movs r1, #0
-	strb r2, [r0]
-	movs r0, #0x10
-	subs r0, r0, r2
-	adds r3, #9
-	strb r0, [r3]
-	mov r0, ip
-	adds r0, #0x46
-	strb r1, [r0]
-	cmp r2, #0x10
-	bne _08011126
-	adds r0, r4, #0
-	bl sub_0800457C
-_08011126:
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_0801112C: .4byte 0x03002790
-
-	thumb_func_start sub_08011130
-sub_08011130: @ 0x08011130
-	push {r4, r5, lr}
-	adds r4, r0, #0
-	bl sub_0802D874
-	bl sub_0806D51C
-	movs r0, #3
-	movs r1, #0
-	movs r2, #0
-	bl sub_08001D64
-	ldr r0, _08011190 @ =0x06001000
-	ldr r1, _08011194 @ =0x06008000
-	movs r2, #0xa0
-	lsls r2, r2, #5
-	bl CpuFastSet
-	ldr r0, _08011198 @ =0x02022860
-	movs r2, #0x80
-	lsls r2, r2, #1
-	adds r1, r0, r2
-	ldr r2, [r4, #0x44]
-	lsls r2, r2, #3
-	ldr r3, _0801119C @ =0x001FFFFF
-	ands r2, r3
-	bl CpuFastSet
-	movs r5, #0xff
-	lsls r5, r5, #7
-	adds r4, r5, #0
-	ldr r3, _080111A0 @ =0x02023C60
-	ldr r2, _080111A4 @ =0x02024460
-	movs r1, #0x80
-	lsls r1, r1, #3
-_08011174:
-	ldrh r5, [r3]
-	adds r0, r4, r5
-	strh r0, [r2]
-	adds r3, #2
-	adds r2, #2
-	subs r1, #1
-	cmp r1, #0
-	bne _08011174
-	movs r0, #8
-	bl sub_08000FD4
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08011190: .4byte 0x06001000
-_08011194: .4byte 0x06008000
-_08011198: .4byte 0x02022860
-_0801119C: .4byte 0x001FFFFF
-_080111A0: .4byte 0x02023C60
-_080111A4: .4byte 0x02024460
-
-	thumb_func_start sub_080111A8
-sub_080111A8: @ 0x080111A8
-	push {lr}
-	ldr r0, _080111E0 @ =0x02023C60
-	movs r1, #0
-	bl sub_080017E8
-	movs r0, #4
-	bl sub_08000FD4
-	ldr r3, _080111E4 @ =0x03002790
-	adds r1, r3, #0
-	adds r1, #0x3c
-	movs r0, #0x3f
-	ldrb r2, [r1]
-	ands r0, r2
-	strb r0, [r1]
-	adds r1, #8
-	movs r2, #0
-	movs r0, #0x10
-	strb r0, [r1]
-	adds r0, r3, #0
-	adds r0, #0x45
-	strb r2, [r0]
-	adds r0, #1
-	strb r2, [r0]
-	bl sub_08015998
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080111E0: .4byte 0x02023C60
-_080111E4: .4byte 0x03002790
-
-	thumb_func_start sub_080111E8
-sub_080111E8: @ 0x080111E8
-	push {r4, r5, r6, lr}
-	adds r6, r0, #0
-	adds r4, r1, #0
-	adds r5, r2, #0
-	adds r1, r3, #0
-	lsls r4, r4, #0x18
-	lsrs r4, r4, #0x18
-	ldr r0, _08011210 @ =0x08C011CC
-	bl sub_080043D4
-	str r5, [r0, #0x2c]
-	str r6, [r0, #0x34]
-	movs r1, #0xff
-	ands r1, r6
-	str r1, [r0, #0x38]
-	adds r0, #0x3c
-	strb r4, [r0]
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08011210: .4byte 0x08C011CC
-
-	thumb_func_start sub_08011214
-sub_08011214: @ 0x08011214
-	push {r4, lr}
-	adds r3, r0, #0
-	ldr r0, [r3, #0x30]
-	ldr r2, [r0, #4]
-	ldr r4, [r0, #8]
-	adds r1, r3, #0
-	adds r1, #0x5e
-	movs r0, #4
-	ldrh r1, [r1]
-	ands r0, r1
-	cmp r0, #0
-	bne _0801123E
-	adds r0, r3, #0
-	adds r0, #0x4c
-	strb r2, [r0]
-	adds r0, r4, #0
-	movs r1, #1
-	bl sub_08010F48
-	movs r0, #2
-	b _08011240
-_0801123E:
-	movs r0, #0
-_08011240:
-	pop {r4}
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_08011248
-sub_08011248: @ 0x08011248
-	push {r4, r5, r6, lr}
-	adds r3, r0, #0
-	ldr r0, [r3, #0x30]
-	ldr r6, [r0, #4]
-	ldr r4, [r0, #8]
-	adds r1, r3, #0
-	adds r1, #0x5e
-	movs r0, #4
-	ldrh r1, [r1]
-	ands r0, r1
-	cmp r0, #0
-	beq _08011264
-	movs r0, #0
-	b _08011292
-_08011264:
-	adds r0, r3, #0
-	adds r0, #0x4c
-	movs r2, #0
-	ldrsb r2, [r0, r2]
-	movs r1, #1
-	rsbs r1, r1, #0
-	adds r5, r0, #0
-	cmp r2, r1
-	bne _08011282
-	adds r0, r4, #0
-	movs r1, #0
-	adds r2, r6, #0
-	bl sub_080111E8
-	b _0801128C
-_08011282:
-	adds r0, r4, #0
-	movs r1, #0
-	adds r2, r6, #0
-	bl sub_08010F48
-_0801128C:
-	movs r0, #0x61
-	strb r0, [r5]
-	movs r0, #2
-_08011292:
-	pop {r4, r5, r6}
-	pop {r1}
-	bx r1
-
-	thumb_func_start sub_08011298
-sub_08011298: @ 0x08011298
-	push {r4, r5, r6, r7, lr}
-	adds r5, r0, #0
-	ldr r7, _0801134C @ =0x03002790
-	movs r6, #1
-	ldrb r0, [r7, #1]
-	orrs r0, r6
-	movs r1, #2
-	orrs r0, r1
-	movs r1, #5
-	rsbs r1, r1, #0
-	ands r0, r1
-	movs r1, #8
-	orrs r0, r1
-	movs r1, #0x10
-	orrs r0, r1
-	strb r0, [r7, #1]
-	adds r2, r7, #0
-	adds r2, #0x3c
-	movs r0, #0x3f
-	ldrb r1, [r2]
-	ands r0, r1
-	movs r1, #0x40
-	orrs r0, r1
-	strb r0, [r2]
-	adds r0, r7, #0
-	adds r0, #0x44
-	movs r4, #0
-	strb r4, [r0]
-	adds r1, r7, #0
-	adds r1, #0x45
-	movs r0, #0x10
-	strb r0, [r1]
-	adds r0, r7, #0
-	adds r0, #0x46
-	strb r4, [r0]
-	ldr r0, _08011350 @ =0x0000FFE0
-	ldrh r3, [r7, #0x3c]
-	ands r0, r3
-	movs r1, #4
-	orrs r0, r1
-	ldr r1, _08011354 @ =0x0000E0FF
-	ands r0, r1
-	movs r3, #0xc0
-	lsls r3, r3, #5
-	adds r1, r3, #0
-	orrs r0, r1
-	strh r0, [r7, #0x3c]
-	movs r0, #0x20
-	ldrb r1, [r2]
-	orrs r1, r0
-	strb r1, [r2]
-	adds r1, r7, #0
-	adds r1, #0x3d
-	ldrb r2, [r1]
-	orrs r0, r2
-	strb r0, [r1]
-	movs r0, #2
-	movs r1, #0
-	movs r2, #0
-	bl sub_08001D64
-	movs r1, #4
-	rsbs r1, r1, #0
-	adds r0, r1, #0
-	ldrb r3, [r7, #0xc]
-	ands r0, r3
-	strb r0, [r7, #0xc]
-	adds r0, r1, #0
-	ldrb r2, [r7, #0x10]
-	ands r0, r2
-	orrs r0, r6
-	strb r0, [r7, #0x10]
-	ldrb r3, [r7, #0x14]
-	ands r1, r3
-	strb r1, [r7, #0x14]
-	movs r0, #3
-	ldrb r1, [r7, #0x18]
-	orrs r0, r1
-	strb r0, [r7, #0x18]
-	movs r0, #6
-	str r0, [r5, #0x44]
-	str r4, [r5, #0x30]
-	ldr r0, _08011358 @ =0x08BFFF78
-	bl sub_08004584
-	str r0, [r5, #0x40]
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_0801134C: .4byte 0x03002790
-_08011350: .4byte 0x0000FFE0
-_08011354: .4byte 0x0000E0FF
-_08011358: .4byte 0x08BFFF78
-
-	thumb_func_start sub_0801135C
-sub_0801135C: @ 0x0801135C
-	push {r4, r5, lr}
-	adds r4, r0, #0
-	ldr r0, _080113E8 @ =0x06008000
-	ldr r1, _080113EC @ =0x06001000
-	movs r2, #0xa0
-	lsls r2, r2, #5
-	bl CpuFastSet
-	ldr r0, _080113F0 @ =0x02022960
-	ldr r2, _080113F4 @ =0xFFFFFF00
-	adds r1, r0, r2
-	ldr r2, [r4, #0x44]
-	lsls r2, r2, #3
-	ldr r3, _080113F8 @ =0x001FFFFF
-	ands r2, r3
-	bl CpuFastSet
-	ldr r5, _080113FC @ =0x00008080
-	adds r3, r5, #0
-	ldr r2, _08011400 @ =0x02024460
-	ldr r1, _08011404 @ =0x02023C60
-	movs r4, #0x80
-	lsls r4, r4, #3
-_0801138A:
-	ldrh r5, [r2]
-	adds r0, r3, r5
-	strh r0, [r1]
-	adds r2, #2
-	adds r1, #2
-	subs r4, #1
-	cmp r4, #0
-	bne _0801138A
-	movs r0, #4
-	bl sub_08000FD4
-	bl sub_08001034
-	ldr r3, _08011408 @ =0x03002790
-	movs r0, #1
-	ldrb r1, [r3, #1]
-	orrs r0, r1
-	movs r1, #2
-	orrs r0, r1
-	movs r1, #4
-	orrs r0, r1
-	movs r1, #8
-	orrs r0, r1
-	movs r1, #0x10
-	orrs r0, r1
-	strb r0, [r3, #1]
-	adds r2, r3, #0
-	adds r2, #0x3c
-	movs r0, #0x3f
-	ldrb r5, [r2]
-	ands r0, r5
-	movs r1, #0x40
-	orrs r0, r1
-	strb r0, [r2]
-	adds r1, r3, #0
-	adds r1, #0x44
-	movs r0, #0x10
-	strb r0, [r1]
-	adds r0, r3, #0
-	adds r0, #0x45
-	strb r4, [r0]
-	adds r0, #1
-	strb r4, [r0]
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080113E8: .4byte 0x06008000
-_080113EC: .4byte 0x06001000
-_080113F0: .4byte 0x02022960
-_080113F4: .4byte 0xFFFFFF00
-_080113F8: .4byte 0x001FFFFF
-_080113FC: .4byte 0x00008080
-_08011400: .4byte 0x02024460
-_08011404: .4byte 0x02023C60
-_08011408: .4byte 0x03002790
-
-	thumb_func_start sub_0801140C
-sub_0801140C: @ 0x0801140C
-	push {r4, r5, lr}
-	adds r5, r0, #0
-	ldr r4, _08011454 @ =0x0202BBF4
-	movs r0, #0xe
-	ldrsb r0, [r4, r0]
-	bl sub_080195BC
-	ldrb r0, [r4, #0x15]
-	bl sub_0802D8E4
-	bl sub_080198EC
-	bl sub_08025BB0
-	bl sub_08025124
-	ldr r0, [r5, #0x34]
-	movs r1, #0x80
-	lsls r1, r1, #2
-	ands r0, r1
-	cmp r0, #0
-	beq _0801143C
-	bl sub_0802516C
-_0801143C:
-	bl sub_08025A0C
-	bl sub_0802D8A8
-	bl sub_0806D52C
-	movs r0, #8
-	bl sub_08000FD4
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08011454: .4byte 0x0202BBF4
-
-	thumb_func_start sub_08011458
-sub_08011458: @ 0x08011458
-	push {r4, lr}
-	adds r4, r0, #0
-	ldr r2, [r4, #0x30]
-	ldr r0, [r4, #0x38]
-	adds r2, r2, r0
-	str r2, [r4, #0x30]
-	asrs r2, r2, #4
-	ldr r0, _080114A0 @ =0x03002790
-	mov ip, r0
-	mov r3, ip
-	adds r3, #0x3c
-	movs r0, #0x3f
-	ldrb r1, [r3]
-	ands r0, r1
-	movs r1, #0x40
-	orrs r0, r1
-	strb r0, [r3]
-	movs r0, #0x10
-	subs r0, r0, r2
-	mov r1, ip
-	adds r1, #0x44
-	movs r3, #0
-	strb r0, [r1]
-	mov r0, ip
-	adds r0, #0x45
-	strb r2, [r0]
-	adds r0, #1
-	strb r3, [r0]
-	cmp r2, #0x10
-	bne _0801149A
-	adds r0, r4, #0
-	bl sub_0800457C
-_0801149A:
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080114A0: .4byte 0x03002790
-
-	thumb_func_start sub_080114A4
-sub_080114A4: @ 0x080114A4
-	push {lr}
-	ldr r0, _080114E4 @ =0x02023C60
-	movs r1, #0
-	bl sub_080017E8
-	movs r0, #4
-	bl sub_08000FD4
-	ldr r3, _080114E8 @ =0x03002790
-	adds r1, r3, #0
-	adds r1, #0x3c
-	movs r0, #0x3f
-	ldrb r2, [r1]
-	ands r0, r2
-	strb r0, [r1]
-	adds r1, #8
-	movs r2, #0
-	movs r0, #0x10
-	strb r0, [r1]
-	adds r0, r3, #0
-	adds r0, #0x45
-	strb r2, [r0]
-	adds r0, #1
-	strb r2, [r0]
-	bl sub_08015998
-	bl sub_08015A48
-	bl sub_08005904
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080114E4: .4byte 0x02023C60
-_080114E8: .4byte 0x03002790
-
-	thumb_func_start sub_080114EC
-sub_080114EC: @ 0x080114EC
-	push {r4, lr}
-	adds r4, r0, #0
-	ldr r0, _08011504 @ =0x08C01224
-	bl sub_080043D4
-	str r4, [r0, #0x34]
-	movs r1, #0xff
-	ands r1, r4
-	str r1, [r0, #0x38]
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08011504: .4byte 0x08C01224
-
-	thumb_func_start sub_08011508
-sub_08011508: @ 0x08011508
-	push {r4, r5, r6, lr}
-	adds r5, r0, #0
-	ldr r0, [r5, #0x30]
-	ldr r2, [r0, #4]
-	adds r1, r5, #0
-	adds r1, #0x5e
-	movs r0, #4
-	ldrh r1, [r1]
-	ands r0, r1
-	lsls r0, r0, #0x10
-	lsrs r6, r0, #0x10
-	cmp r6, #0
-	beq _08011548
-	adds r4, r5, #0
-	adds r4, #0x4c
-	ldrb r2, [r4]
-	movs r1, #0
-	ldrsb r1, [r4, r1]
-	movs r0, #1
-	rsbs r0, r0, #0
-	cmp r1, r0
-	beq _08011544
-	movs r0, #0xff
-	strb r0, [r4]
-	bl sub_0802E834
-	bl sub_0802D8A8
-	bl sub_0806D52C
-_08011544:
-	movs r0, #0
-	b _08011560
-_08011548:
-	adds r4, r5, #0
-	adds r4, #0x4c
-	adds r0, r2, #0
-	adds r1, r5, #0
-	bl sub_080114EC
-	movs r0, #0xff
-	strb r0, [r4]
-	adds r0, r5, #0
-	adds r0, #0x4d
-	strb r6, [r0]
-	movs r0, #2
-_08011560:
-	pop {r4, r5, r6}
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_08011568
-sub_08011568: @ 0x08011568
-	push {r4, r5, r6, lr}
-	sub sp, #8
-	adds r6, r0, #0
-	ldr r3, _08011604 @ =0x03002790
-	adds r2, r3, #0
-	adds r2, #0x3c
-	movs r0, #0x3f
-	ldrb r1, [r2]
-	ands r0, r1
-	movs r1, #0x40
-	orrs r0, r1
-	strb r0, [r2]
-	adds r0, r3, #0
-	adds r0, #0x44
-	movs r5, #0
-	strb r5, [r0]
-	adds r1, r3, #0
-	adds r1, #0x45
-	movs r0, #0x10
-	strb r0, [r1]
-	adds r0, r3, #0
-	adds r0, #0x46
-	strb r5, [r0]
-	ldr r0, _08011608 @ =0x0000FFE0
-	ldrh r2, [r3, #0x3c]
-	ands r0, r2
-	movs r1, #4
-	orrs r0, r1
-	ldr r1, _0801160C @ =0x0000E0FF
-	ands r0, r1
-	movs r2, #0xc0
-	lsls r2, r2, #5
-	adds r1, r2, #0
-	orrs r0, r1
-	strh r0, [r3, #0x3c]
-	ldr r0, _08011610 @ =0x08198D98
-	ldr r1, _08011614 @ =0x06001000
-	bl sub_08013688
-	ldr r4, _08011618 @ =0x08199250
-	movs r1, #0xf0
-	lsls r1, r1, #1
-	adds r0, r4, #0
-	movs r2, #0x20
-	bl sub_0800105C
-	ldr r0, _0801161C @ =0x02023C60
-	ldr r1, _08011620 @ =0x08199290
-	ldr r2, _08011624 @ =0x0000F080
-	bl sub_080C0C28
-	movs r0, #4
-	bl sub_08000FD4
-	adds r1, r4, #0
-	adds r1, #0x20
-	movs r0, #1
-	str r0, [sp]
-	str r6, [sp, #4]
-	adds r0, r4, #0
-	movs r2, #0x20
-	movs r3, #0xf
-	bl sub_080AB7F4
-	str r5, [r6, #0x30]
-	movs r0, #0x20
-	str r0, [r6, #0x34]
-	str r5, [r6, #0x3c]
-	str r5, [r6, #0x40]
-	movs r0, #2
-	movs r1, #0
-	movs r2, #0
-	bl sub_08001D64
-	add sp, #8
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08011604: .4byte 0x03002790
-_08011608: .4byte 0x0000FFE0
-_0801160C: .4byte 0x0000E0FF
-_08011610: .4byte 0x08198D98
-_08011614: .4byte 0x06001000
-_08011618: .4byte 0x08199250
-_0801161C: .4byte 0x02023C60
-_08011620: .4byte 0x08199290
-_08011624: .4byte 0x0000F080
-
-	thumb_func_start sub_08011628
-sub_08011628: @ 0x08011628
-	push {r4, r5, lr}
-	adds r4, r0, #0
-	ldr r0, [r4, #0x30]
-	adds r0, #1
-	str r0, [r4, #0x30]
-	asrs r5, r0, #1
-	ldr r3, _080116A4 @ =0x03002790
-	adds r2, r3, #0
-	adds r2, #0x3c
-	movs r0, #0x3f
-	ldrb r1, [r2]
-	ands r0, r1
-	movs r1, #0x40
-	orrs r0, r1
-	strb r0, [r2]
-	adds r0, r3, #0
-	adds r0, #0x44
-	movs r2, #0
-	strb r5, [r0]
-	movs r0, #0x10
-	subs r0, r0, r5
-	cmp r0, #0xd
-	bge _08011658
-	movs r0, #0xd
-_08011658:
-	adds r1, r3, #0
-	adds r1, #0x45
-	strb r0, [r1]
-	adds r0, r3, #0
-	adds r0, #0x46
-	strb r2, [r0]
-	cmp r5, #0x10
-	bne _08011670
-	str r2, [r4, #0x30]
-	adds r0, r4, #0
-	bl sub_0800457C
-_08011670:
-	ldr r3, [r4, #0x34]
-	adds r3, #1
-	str r3, [r4, #0x34]
-	lsls r0, r3, #1
-	adds r0, r0, r3
-	ldr r1, [r4, #0x3c]
-	adds r1, r1, r0
-	str r1, [r4, #0x3c]
-	ldr r2, [r4, #0x40]
-	adds r2, r2, r3
-	str r2, [r4, #0x40]
-	asrs r1, r1, #5
-	rsbs r1, r1, #0
-	lsls r1, r1, #0x10
-	lsrs r1, r1, #0x10
-	asrs r2, r2, #5
-	rsbs r2, r2, #0
-	lsls r2, r2, #0x10
-	lsrs r2, r2, #0x10
-	movs r0, #2
-	bl sub_08001D64
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080116A4: .4byte 0x03002790
-
-	thumb_func_start sub_080116A8
-sub_080116A8: @ 0x080116A8
-	push {r4, lr}
-	adds r4, r0, #0
-	ldr r0, [r4, #0x30]
-	adds r0, #1
-	str r0, [r4, #0x30]
-	ldr r1, [r4, #0x2c]
-	cmp r0, r1
-	blt _080116C2
-	movs r0, #0
-	str r0, [r4, #0x30]
-	adds r0, r4, #0
-	bl sub_0800457C
-_080116C2:
-	ldr r3, [r4, #0x34]
-	lsls r0, r3, #1
-	adds r0, r0, r3
-	ldr r1, [r4, #0x3c]
-	adds r1, r1, r0
-	str r1, [r4, #0x3c]
-	ldr r2, [r4, #0x40]
-	adds r2, r2, r3
-	str r2, [r4, #0x40]
-	asrs r1, r1, #5
-	rsbs r1, r1, #0
-	lsls r1, r1, #0x10
-	lsrs r1, r1, #0x10
-	asrs r2, r2, #5
-	rsbs r2, r2, #0
-	lsls r2, r2, #0x10
-	lsrs r2, r2, #0x10
-	movs r0, #2
-	bl sub_08001D64
-	pop {r4}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_080116F0
-sub_080116F0: @ 0x080116F0
-	push {r4, r5, lr}
-	adds r4, r0, #0
-	ldr r0, [r4, #0x30]
-	adds r0, #1
-	str r0, [r4, #0x30]
-	asrs r5, r0, #3
-	ldr r3, _08011768 @ =0x03002790
-	adds r2, r3, #0
-	adds r2, #0x3c
-	movs r0, #0x3f
-	ldrb r1, [r2]
-	ands r0, r1
-	movs r1, #0x40
-	orrs r0, r1
-	strb r0, [r2]
-	movs r0, #0x10
-	subs r0, r0, r5
-	adds r1, r3, #0
-	adds r1, #0x44
-	strb r0, [r1]
-	adds r0, r5, #0
-	adds r0, #0xd
-	cmp r0, #0x10
-	ble _08011722
-	movs r0, #0x10
-_08011722:
-	adds r1, r3, #0
-	adds r1, #0x45
-	strb r0, [r1]
-	adds r1, #1
-	movs r0, #0
-	strb r0, [r1]
-	ldr r3, [r4, #0x34]
-	lsls r0, r3, #1
-	adds r0, r0, r3
-	ldr r1, [r4, #0x3c]
-	adds r1, r1, r0
-	str r1, [r4, #0x3c]
-	ldr r2, [r4, #0x40]
-	adds r2, r2, r3
-	str r2, [r4, #0x40]
-	asrs r1, r1, #5
-	rsbs r1, r1, #0
-	lsls r1, r1, #0x10
-	lsrs r1, r1, #0x10
-	asrs r2, r2, #5
-	rsbs r2, r2, #0
-	lsls r2, r2, #0x10
-	lsrs r2, r2, #0x10
-	movs r0, #2
-	bl sub_08001D64
-	cmp r5, #0x10
-	bne _08011760
-	adds r0, r4, #0
-	bl sub_0800457C
-_08011760:
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08011768: .4byte 0x03002790
-
-	thumb_func_start sub_0801176C
-sub_0801176C: @ 0x0801176C
-	push {lr}
-	ldr r0, _080117A4 @ =0x02023C60
-	movs r1, #0
-	bl sub_080017E8
-	movs r0, #4
-	bl sub_08000FD4
-	ldr r2, _080117A8 @ =0x03002790
-	adds r1, r2, #0
-	adds r1, #0x3c
-	movs r0, #0x3f
-	ldrb r3, [r1]
-	ands r0, r3
-	strb r0, [r1]
-	adds r0, r2, #0
-	adds r0, #0x44
-	movs r1, #0
-	strb r1, [r0]
-	adds r3, r2, #0
-	adds r3, #0x45
-	movs r0, #0x10
-	strb r0, [r3]
-	adds r0, r2, #0
-	adds r0, #0x46
-	strb r1, [r0]
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080117A4: .4byte 0x02023C60
-_080117A8: .4byte 0x03002790
-
-	thumb_func_start sub_080117AC
-sub_080117AC: @ 0x080117AC
-	push {r4, lr}
-	adds r1, r0, #0
-	ldr r0, [r1, #0x30]
-	ldr r4, [r0, #4]
-	adds r2, r1, #0
-	adds r2, #0x5e
-	movs r0, #4
-	ldrh r2, [r2]
-	ands r0, r2
-	cmp r0, #0
-	bne _080117D4
-	ldr r0, _080117D0 @ =0x08C0127C
-	bl sub_080043D4
-	str r4, [r0, #0x2c]
-	movs r0, #2
-	b _080117D6
-	.align 2, 0
-_080117D0: .4byte 0x08C0127C
-_080117D4:
-	movs r0, #0
-_080117D6:
-	pop {r4}
-	pop {r1}
-	bx r1
-
-	thumb_func_start sub_080117DC
-sub_080117DC: @ 0x080117DC
-	push {r4, r5, r6, lr}
-	sub sp, #0x14
-	adds r5, r0, #0
-	ldr r6, _08011894 @ =0x03002790
-	adds r2, r6, #0
-	adds r2, #0x3c
-	movs r0, #0x3f
-	ldrb r1, [r2]
-	ands r0, r1
-	movs r1, #0x40
-	orrs r0, r1
-	strb r0, [r2]
-	adds r0, r6, #0
-	adds r0, #0x44
-	movs r4, #0
-	strb r4, [r0]
-	adds r1, r6, #0
-	adds r1, #0x45
-	movs r0, #0x10
-	strb r0, [r1]
-	adds r0, r6, #0
-	adds r0, #0x46
-	strb r4, [r0]
-	ldr r0, _08011898 @ =0x0000FFE0
-	ldrh r2, [r6, #0x3c]
-	ands r0, r2
-	movs r1, #4
-	orrs r0, r1
-	ldr r1, _0801189C @ =0x0000E0FF
-	ands r0, r1
-	movs r2, #0xf8
-	lsls r2, r2, #5
-	adds r1, r2, #0
-	orrs r0, r1
-	strh r0, [r6, #0x3c]
-	bl sub_0807702C
-	movs r0, #0
-	movs r1, #0
-	bl sub_080780E0
-	movs r0, #0
-	bl sub_08002DF0
-	ldr r0, _080118A0 @ =sub_08078098
-	bl sub_08002DF0
-	movs r1, #4
-	rsbs r1, r1, #0
-	adds r0, r1, #0
-	ldrb r2, [r6, #0xc]
-	ands r0, r2
-	strb r0, [r6, #0xc]
-	adds r0, r1, #0
-	ldrb r2, [r6, #0x10]
-	ands r0, r2
-	movs r2, #1
-	orrs r0, r2
-	strb r0, [r6, #0x10]
-	ldrb r0, [r6, #0x14]
-	ands r1, r0
-	orrs r1, r2
-	strb r1, [r6, #0x14]
-	movs r0, #3
-	ldrb r1, [r6, #0x18]
-	orrs r0, r1
-	strb r0, [r6, #0x18]
-	movs r0, #7
-	bl sub_08000FD4
-	str r4, [r5, #0x30]
-	ldr r0, _080118A4 @ =0x08DBA258
-	movs r1, #0x80
-	lsls r1, r1, #5
-	str r1, [sp]
-	movs r1, #0xa0
-	lsls r1, r1, #6
-	str r1, [sp, #4]
-	movs r1, #0xe
-	str r1, [sp, #8]
-	str r4, [sp, #0xc]
-	str r5, [sp, #0x10]
-	movs r1, #2
-	movs r2, #0
-	movs r3, #0
-	bl sub_080AB654
-	add sp, #0x14
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08011894: .4byte 0x03002790
-_08011898: .4byte 0x0000FFE0
-_0801189C: .4byte 0x0000E0FF
-_080118A0: .4byte sub_08078098
-_080118A4: .4byte 0x08DBA258
-
-	thumb_func_start sub_080118A8
-sub_080118A8: @ 0x080118A8
-	push {r4, r5, lr}
-	adds r5, r0, #0
-	ldr r0, [r5, #0x30]
-	adds r0, #1
-	str r0, [r5, #0x30]
-	asrs r4, r0, #1
-	ldr r2, _080118D8 @ =0x03002790
-	adds r3, r2, #0
-	adds r3, #0x3c
-	movs r0, #0x3f
-	ldrb r1, [r3]
-	ands r0, r1
-	movs r1, #0x40
-	orrs r0, r1
-	strb r0, [r3]
-	adds r0, r2, #0
-	adds r0, #0x44
-	strb r4, [r0]
-	adds r3, r2, #0
-	cmp r4, #6
-	bgt _080118DC
-	movs r0, #0x10
-	subs r1, r0, r4
-	b _080118DE
-	.align 2, 0
-_080118D8: .4byte 0x03002790
-_080118DC:
-	movs r1, #0xa
-_080118DE:
-	adds r0, r3, #0
-	adds r0, #0x45
-	movs r3, #0
-	strb r1, [r0]
-	adds r0, r2, #0
-	adds r0, #0x46
-	strb r3, [r0]
-	cmp r4, #0x10
-	bne _080118F8
-	str r3, [r5, #0x30]
-	adds r0, r5, #0
-	bl sub_0800457C
-_080118F8:
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08011900
-sub_08011900: @ 0x08011900
-	push {r4, r5, lr}
-	adds r5, r0, #0
-	ldr r0, [r5, #0x30]
-	adds r0, #1
-	str r0, [r5, #0x30]
-	asrs r4, r0, #1
-	ldr r3, _08011950 @ =0x03002790
-	adds r2, r3, #0
-	adds r2, #0x3c
-	movs r0, #0x3f
-	ldrb r1, [r2]
-	ands r0, r1
-	movs r1, #0x40
-	orrs r0, r1
-	strb r0, [r2]
-	movs r0, #0x10
-	subs r0, r0, r4
-	adds r1, r3, #0
-	adds r1, #0x44
-	strb r0, [r1]
-	adds r0, r4, #0
-	adds r0, #0xa
-	cmp r0, #0x10
-	ble _08011932
-	movs r0, #0x10
-_08011932:
-	adds r1, r3, #0
-	adds r1, #0x45
-	strb r0, [r1]
-	adds r1, #1
-	movs r0, #0
-	strb r0, [r1]
-	cmp r4, #0x10
-	bne _08011948
-	adds r0, r5, #0
-	bl sub_0800457C
-_08011948:
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08011950: .4byte 0x03002790
-
-	thumb_func_start sub_08011954
-sub_08011954: @ 0x08011954
-	push {lr}
-	ldr r0, _080119BC @ =0x02023C60
-	movs r1, #0
-	bl sub_080017E8
-	movs r0, #4
-	bl sub_08000FD4
-	movs r0, #0
-	bl sub_08002DF0
-	ldr r3, _080119C0 @ =0x03002790
-	adds r1, r3, #0
-	adds r1, #0x3c
-	movs r0, #0x3f
-	ldrb r2, [r1]
-	ands r0, r2
-	strb r0, [r1]
-	adds r0, r3, #0
-	adds r0, #0x44
-	movs r1, #0
-	strb r1, [r0]
-	adds r2, r3, #0
-	adds r2, #0x45
-	movs r0, #0x10
-	strb r0, [r2]
-	adds r0, r3, #0
-	adds r0, #0x46
-	strb r1, [r0]
-	subs r1, #4
-	adds r0, r1, #0
-	ldrb r2, [r3, #0xc]
-	ands r0, r2
-	strb r0, [r3, #0xc]
-	adds r0, r1, #0
-	ldrb r2, [r3, #0x10]
-	ands r0, r2
-	movs r2, #1
-	orrs r0, r2
-	strb r0, [r3, #0x10]
-	ldrb r0, [r3, #0x14]
-	ands r1, r0
-	movs r0, #2
-	orrs r1, r0
-	strb r1, [r3, #0x14]
-	movs r0, #3
-	ldrb r1, [r3, #0x18]
-	orrs r0, r1
-	strb r0, [r3, #0x18]
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080119BC: .4byte 0x02023C60
-_080119C0: .4byte 0x03002790
-
-	thumb_func_start sub_080119C4
-sub_080119C4: @ 0x080119C4
-	push {lr}
-	adds r1, r0, #0
-	adds r2, r1, #0
-	adds r2, #0x5e
-	movs r0, #4
-	ldrh r2, [r2]
-	ands r0, r2
-	cmp r0, #0
-	bne _080119E4
-	ldr r0, _080119E0 @ =0x08C012BC
-	bl sub_080043D4
-	movs r0, #2
-	b _080119E6
-	.align 2, 0
-_080119E0: .4byte 0x08C012BC
-_080119E4:
-	movs r0, #0
-_080119E6:
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_080119EC
-sub_080119EC: @ 0x080119EC
-	push {lr}
-	adds r0, #0x5e
-	movs r1, #4
-	ldrh r0, [r0]
-	ands r1, r0
-	cmp r1, #0
-	bne _08011A10
-	ldr r0, _08011A0C @ =0x08C012BC
-	bl sub_08004584
-	movs r1, #0
-	bl sub_080045FC
-	movs r0, #2
-	b _08011A1C
-	.align 2, 0
-_08011A0C: .4byte 0x08C012BC
-_08011A10:
-	ldr r0, _08011A20 @ =0x08C012BC
-	bl sub_08004584
-	bl sub_08004460
-	movs r0, #0
-_08011A1C:
-	pop {r1}
-	bx r1
-	.align 2, 0
-_08011A20: .4byte 0x08C012BC
-
-	thumb_func_start sub_08011A24
-sub_08011A24: @ 0x08011A24
-	push {r4, r5, lr}
-	sub sp, #0x14
-	ldr r5, _08011AB8 @ =0x03002790
-	movs r2, #4
-	rsbs r2, r2, #0
-	adds r1, r2, #0
-	ldrb r3, [r5, #0xc]
-	ands r1, r3
-	strb r1, [r5, #0xc]
-	adds r1, r2, #0
-	ldrb r3, [r5, #0x10]
-	ands r1, r3
-	movs r3, #1
-	orrs r1, r3
-	strb r1, [r5, #0x10]
-	ldrb r1, [r5, #0x14]
-	ands r2, r1
-	strb r2, [r5, #0x14]
-	movs r1, #3
-	ldrb r2, [r5, #0x18]
-	orrs r1, r2
-	strb r1, [r5, #0x18]
-	adds r3, r5, #0
-	adds r3, #0x3c
-	movs r1, #0x3f
-	ldrb r2, [r3]
-	ands r1, r2
-	movs r2, #0x40
-	orrs r1, r2
-	strb r1, [r3]
-	adds r2, r5, #0
-	adds r2, #0x44
-	movs r4, #0
-	movs r1, #0x10
-	strb r1, [r2]
-	adds r2, #1
-	strb r1, [r2]
-	adds r1, r5, #0
-	adds r1, #0x46
-	strb r4, [r1]
-	ldr r1, _08011ABC @ =0x0000FFE0
-	ldrh r3, [r5, #0x3c]
-	ands r1, r3
-	movs r2, #4
-	orrs r1, r2
-	ldr r2, _08011AC0 @ =0x0000E0FF
-	ands r1, r2
-	movs r3, #0xc0
-	lsls r3, r3, #5
-	adds r2, r3, #0
-	orrs r1, r2
-	strh r1, [r5, #0x3c]
-	str r4, [r0, #0x30]
-	ldr r5, _08011AC4 @ =0x08C012FC
-	ldr r2, [r0, #0x3c]
-	adds r2, #0x54
-	ldr r3, [r0, #0x40]
-	str r4, [sp]
-	movs r1, #0x80
-	lsls r1, r1, #6
-	str r1, [sp, #4]
-	movs r1, #0xf
-	str r1, [sp, #8]
-	str r4, [sp, #0xc]
-	str r0, [sp, #0x10]
-	adds r0, r5, #0
-	movs r1, #2
-	bl sub_080AB654
-	add sp, #0x14
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08011AB8: .4byte 0x03002790
-_08011ABC: .4byte 0x0000FFE0
-_08011AC0: .4byte 0x0000E0FF
-_08011AC4: .4byte 0x08C012FC
-
-	thumb_func_start sub_08011AC8
-sub_08011AC8: @ 0x08011AC8
-	push {lr}
-	ldr r2, _08011AF8 @ =0x03002790
-	adds r1, r2, #0
-	adds r1, #0x3c
-	movs r0, #0x3f
-	ldrb r3, [r1]
-	ands r0, r3
-	strb r0, [r1]
-	adds r0, r2, #0
-	adds r0, #0x44
-	movs r1, #0
-	strb r1, [r0]
-	adds r3, r2, #0
-	adds r3, #0x45
-	movs r0, #0x10
-	strb r0, [r3]
-	adds r0, r2, #0
-	adds r0, #0x46
-	strb r1, [r0]
-	bl sub_08015998
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08011AF8: .4byte 0x03002790
-
-	thumb_func_start sub_08011AFC
-sub_08011AFC: @ 0x08011AFC
-	push {r4, r5, lr}
-	adds r1, r0, #0
-	ldr r0, [r1, #0x30]
-	ldr r4, [r0, #4]
-	ldr r5, [r0, #8]
-	adds r2, r1, #0
-	adds r2, #0x5e
-	movs r0, #4
-	ldrh r2, [r2]
-	ands r0, r2
-	cmp r0, #0
-	bne _08011B28
-	ldr r0, _08011B24 @ =0x08C013C8
-	bl sub_080043D4
-	str r4, [r0, #0x3c]
-	str r5, [r0, #0x40]
-	movs r0, #2
-	b _08011B2A
-	.align 2, 0
-_08011B24: .4byte 0x08C013C8
-_08011B28:
-	movs r0, #0
-_08011B2A:
-	pop {r4, r5}
-	pop {r1}
-	bx r1
-
-	thumb_func_start sub_08011B30
-sub_08011B30: @ 0x08011B30
-	push {lr}
-	ldr r0, _08011B40 @ =0x08C013C8
-	bl sub_08004584
-	cmp r0, #0
-	bne _08011B44
-	movs r0, #0
-	b _08011B46
-	.align 2, 0
-_08011B40: .4byte 0x08C013C8
-_08011B44:
-	movs r0, #1
-_08011B46:
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_08011B4C
-sub_08011B4C: @ 0x08011B4C
-	push {r4, lr}
-	movs r3, #0
-	str r3, [r0, #0x30]
-	ldr r0, _08011BC8 @ =0x03002790
-	mov ip, r0
-	movs r1, #4
-	rsbs r1, r1, #0
-	adds r0, r1, #0
-	mov r2, ip
-	ldrb r2, [r2, #0xc]
-	ands r0, r2
-	mov r4, ip
-	strb r0, [r4, #0xc]
-	adds r0, r1, #0
-	ldrb r2, [r4, #0x10]
-	ands r0, r2
-	movs r2, #1
-	orrs r0, r2
-	strb r0, [r4, #0x10]
-	ldrb r4, [r4, #0x14]
-	ands r1, r4
-	mov r0, ip
-	strb r1, [r0, #0x14]
-	movs r0, #3
-	mov r1, ip
-	ldrb r1, [r1, #0x18]
-	orrs r0, r1
-	mov r2, ip
-	strb r0, [r2, #0x18]
-	adds r2, #0x3c
-	movs r0, #0x3f
-	ldrb r4, [r2]
-	ands r0, r4
-	movs r1, #0x40
-	orrs r0, r1
-	strb r0, [r2]
-	mov r0, ip
-	adds r0, #0x44
-	movs r1, #0x10
-	strb r1, [r0]
-	adds r0, #1
-	strb r1, [r0]
-	adds r0, #1
-	strb r3, [r0]
-	ldr r0, _08011BCC @ =0x0000FFE0
-	mov r1, ip
-	ldrh r1, [r1, #0x3c]
-	ands r0, r1
-	movs r1, #4
-	orrs r0, r1
-	ldr r1, _08011BD0 @ =0x0000E0FF
-	ands r0, r1
-	movs r2, #0xc0
-	lsls r2, r2, #5
-	adds r1, r2, #0
-	orrs r0, r1
-	mov r4, ip
-	strh r0, [r4, #0x3c]
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08011BC8: .4byte 0x03002790
-_08011BCC: .4byte 0x0000FFE0
-_08011BD0: .4byte 0x0000E0FF
-
-	thumb_func_start sub_08011BD4
-sub_08011BD4: @ 0x08011BD4
-	push {r4, lr}
-	adds r4, r0, #0
-	ldr r0, [r4, #0x30]
-	adds r0, #1
-	str r0, [r4, #0x30]
-	movs r2, #0x80
-	lsls r2, r2, #1
-	subs r2, r2, r0
-	ldr r3, _08011C04 @ =0xFFFFBFFF
-	adds r0, r2, #0
-	adds r1, r2, #0
-	bl sub_08013C48
-	ldr r0, [r4, #0x30]
-	cmp r0, #0x40
-	bne _08011BFE
-	movs r0, #0
-	str r0, [r4, #0x30]
-	adds r0, r4, #0
-	bl sub_0800457C
-_08011BFE:
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08011C04: .4byte 0xFFFFBFFF
-
-	thumb_func_start sub_08011C08
-sub_08011C08: @ 0x08011C08
-	push {r4, lr}
-	adds r4, r0, #0
-	ldr r2, [r4, #0x30]
-	adds r0, r2, #1
-	str r0, [r4, #0x30]
-	adds r2, #0xc1
-	ldr r3, _08011C34 @ =0xFFFFBFFF
-	adds r0, r2, #0
-	adds r1, r2, #0
-	bl sub_08013C48
-	ldr r0, [r4, #0x30]
-	cmp r0, #0x40
-	bne _08011C2E
-	movs r0, #0
-	str r0, [r4, #0x30]
-	adds r0, r4, #0
-	bl sub_0800457C
-_08011C2E:
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08011C34: .4byte 0xFFFFBFFF
-
-	thumb_func_start sub_08011C38
-sub_08011C38: @ 0x08011C38
-	push {r4, lr}
-	adds r4, r0, #0
-	ldr r0, [r4, #0x30]
-	adds r0, #1
-	str r0, [r4, #0x30]
-	movs r1, #0xfa
-	lsls r1, r1, #2
-	cmp r0, r1
-	bne _08011C56
-	movs r0, #0
-	bl sub_080AB634
-	adds r0, r4, #0
-	bl sub_0800457C
-_08011C56:
-	pop {r4}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08011C5C
-sub_08011C5C: @ 0x08011C5C
-	push {r4, r5, r6, lr}
-	sub sp, #8
-	adds r6, r0, #0
-	ldr r0, _08011CA8 @ =0x081AC808
-	ldr r1, _08011CAC @ =0x06010800
-	bl sub_08013688
-	ldr r0, _08011CB0 @ =0x081ACA20
-	movs r1, #0xa8
-	lsls r1, r1, #2
-	movs r2, #0x20
-	bl sub_0800105C
-	movs r4, #0
-_08011C78:
-	movs r5, #0
-	str r5, [sp]
-	movs r0, #4
-	str r0, [sp, #4]
-	ldr r0, _08011CB4 @ =0x081ACA40
-	movs r1, #0xc0
-	lsls r1, r1, #1
-	movs r2, #0
-	ldr r3, _08011CB8 @ =0x00005040
-	bl sub_08012AF0
-	lsls r2, r4, #2
-	adds r1, r6, #0
-	adds r1, #0x44
-	adds r1, r1, r2
-	str r0, [r1]
-	adds r4, #1
-	cmp r4, #7
-	ble _08011C78
-	str r5, [r6, #0x30]
-	add sp, #8
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08011CA8: .4byte 0x081AC808
-_08011CAC: .4byte 0x06010800
-_08011CB0: .4byte 0x081ACA20
-_08011CB4: .4byte 0x081ACA40
-_08011CB8: .4byte 0x00005040
-
-	thumb_func_start sub_08011CBC
-sub_08011CBC: @ 0x08011CBC
-	push {r4, r5, r6, r7, lr}
-	mov r7, sl
-	mov r6, sb
-	mov r5, r8
-	push {r5, r6, r7}
-	sub sp, #0xc
-	adds r6, r0, #0
-	ldr r4, [r6, #0x30]
-	adds r4, #1
-	str r4, [r6, #0x30]
-	ldr r0, [r6, #0x3c]
-	lsls r0, r0, #4
-	ldr r2, _08011DC4 @ =0x0202BBB4
-	movs r3, #0xc
-	ldrsh r1, [r2, r3]
-	subs r0, r0, r1
-	adds r0, #8
-	str r0, [sp, #8]
-	ldr r0, _08011DC8 @ =0x000001FF
-	ldr r1, [sp, #8]
-	ands r1, r0
-	str r1, [sp, #8]
-	ldr r0, [r6, #0x40]
-	lsls r0, r0, #4
-	movs r3, #0xe
-	ldrsh r1, [r2, r3]
-	subs r0, r0, r1
-	adds r0, #8
-	mov sl, r0
-	movs r0, #0xff
-	mov r1, sl
-	ands r1, r0
-	mov sl, r1
-	movs r2, #0xa0
-	subs r4, r2, r4
-	lsls r0, r4, #4
-	subs r0, r0, r4
-	lsls r0, r0, #3
-	muls r0, r4, r0
-	movs r5, #0xc8
-	lsls r5, r5, #7
-	adds r1, r5, #0
-	bl __divsi3
-	adds r7, r0, #0
-	lsls r0, r4, #8
-	muls r0, r4, r0
-	adds r1, r5, #0
-	bl __divsi3
-	movs r1, #0x88
-	lsls r1, r1, #1
-	movs r5, #0
-	ldr r3, _08011DCC @ =0x080C0E98
-	mov sb, r3
-	movs r2, #0xff
-	mov r8, r2
-	subs r4, r1, r0
-_08011D30:
-	adds r2, r4, #0
-	mov r3, r8
-	ands r2, r3
-	adds r0, r2, #0
-	adds r0, #0x40
-	lsls r0, r0, #1
-	add r0, sb
-	movs r1, #0
-	ldrsh r0, [r0, r1]
-	muls r0, r7, r0
-	asrs r0, r0, #0xc
-	movs r1, #0x78
-	subs r1, r1, r0
-	lsls r2, r2, #1
-	add r2, sb
-	movs r3, #0
-	ldrsh r0, [r2, r3]
-	muls r0, r7, r0
-	asrs r0, r0, #0xc
-	movs r2, #0x50
-	subs r2, r2, r0
-	lsls r3, r5, #2
-	adds r0, r6, #0
-	adds r0, #0x44
-	adds r0, r0, r3
-	ldr r0, [r0]
-	ldr r3, _08011DC8 @ =0x000001FF
-	ands r1, r3
-	mov r3, r8
-	ands r2, r3
-	movs r3, #0x80
-	lsls r3, r3, #3
-	adds r2, r2, r3
-	movs r3, #1
-	rsbs r3, r3, #0
-	bl sub_08012B70
-	adds r4, #0x20
-	adds r5, #1
-	cmp r5, #7
-	ble _08011D30
-	movs r0, #0xa0
-	movs r1, #3
-	bl __divsi3
-	ldr r1, [r6, #0x30]
-	cmp r1, r0
-	bne _08011DA8
-	ldr r0, _08011DD0 @ =0x081ACA40
-	movs r2, #0x80
-	lsls r2, r2, #3
-	add r2, sl
-	ldr r3, _08011DD4 @ =0x00005040
-	movs r1, #1
-	str r1, [sp]
-	movs r1, #4
-	str r1, [sp, #4]
-	ldr r1, [sp, #8]
-	bl sub_08012AF0
-_08011DA8:
-	ldr r0, [r6, #0x30]
-	cmp r0, #0xa0
-	bne _08011DB4
-	adds r0, r6, #0
-	bl sub_0800457C
-_08011DB4:
-	add sp, #0xc
-	pop {r3, r4, r5}
-	mov r8, r3
-	mov sb, r4
-	mov sl, r5
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08011DC4: .4byte 0x0202BBB4
-_08011DC8: .4byte 0x000001FF
-_08011DCC: .4byte 0x080C0E98
-_08011DD0: .4byte 0x081ACA40
-_08011DD4: .4byte 0x00005040
-
-	thumb_func_start sub_08011DD8
-sub_08011DD8: @ 0x08011DD8
-	push {r4, r5, lr}
-	adds r5, r0, #0
-	adds r5, #0x44
-	movs r4, #7
-_08011DE0:
-	ldm r5!, {r0}
-	bl sub_08012B8C
-	subs r4, #1
-	cmp r4, #0
-	bge _08011DE0
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08011DF4
-sub_08011DF4: @ 0x08011DF4
-	push {r4, r5, r6, lr}
-	sub sp, #0x14
-	adds r5, r0, #0
-	ldr r2, [r5, #0x3c]
-	lsls r2, r2, #4
-	ldr r4, _08011E40 @ =0x0202BBB4
-	movs r1, #0xc
-	ldrsh r0, [r4, r1]
-	subs r2, r2, r0
-	subs r2, #0x28
-	movs r1, #0xff
-	ands r2, r1
-	ldr r3, [r5, #0x40]
-	lsls r3, r3, #4
-	movs r6, #0xe
-	ldrsh r0, [r4, r6]
-	subs r3, r3, r0
-	subs r3, #0x28
-	ands r3, r1
-	ldr r0, _08011E44 @ =0x08C013F0
-	movs r4, #0
-	str r4, [sp]
-	movs r1, #0x80
-	lsls r1, r1, #6
-	str r1, [sp, #4]
-	movs r1, #0xf
-	str r1, [sp, #8]
-	str r4, [sp, #0xc]
-	str r5, [sp, #0x10]
-	movs r1, #2
-	bl sub_080AB654
-	str r4, [r5, #0x30]
-	add sp, #0x14
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08011E40: .4byte 0x0202BBB4
-_08011E44: .4byte 0x08C013F0
-
-	thumb_func_start sub_08011E48
-sub_08011E48: @ 0x08011E48
-	push {r4, r5, lr}
-	sub sp, #0x10
-	adds r4, r0, #0
-	ldr r0, [r4, #0x30]
-	adds r0, #1
-	str r0, [r4, #0x30]
-	movs r5, #0
-	cmp r0, #0x14
-	bne _08011E70
-	ldr r2, [r4, #0x3c]
-	ldr r3, [r4, #0x40]
-	str r2, [sp]
-	str r3, [sp, #4]
-	movs r0, #1
-	str r0, [sp, #8]
-	str r5, [sp, #0xc]
-	movs r0, #0xdc
-	movs r1, #0x40
-	bl sub_080123C8
-_08011E70:
-	ldr r0, [r4, #0x30]
-	cmp r0, #0x28
-	bne _08011E84
-	str r5, [r4, #0x30]
-	movs r0, #0
-	bl sub_080AB634
-	adds r0, r4, #0
-	bl sub_0800457C
-_08011E84:
-	add sp, #0x10
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08011E8C
-sub_08011E8C: @ 0x08011E8C
-	push {lr}
-	ldr r2, _08011EBC @ =0x03002790
-	adds r1, r2, #0
-	adds r1, #0x3c
-	movs r0, #0x3f
-	ldrb r3, [r1]
-	ands r0, r3
-	strb r0, [r1]
-	adds r0, r2, #0
-	adds r0, #0x44
-	movs r1, #0
-	strb r1, [r0]
-	adds r3, r2, #0
-	adds r3, #0x45
-	movs r0, #0x10
-	strb r0, [r3]
-	adds r0, r2, #0
-	adds r0, #0x46
-	strb r1, [r0]
-	bl sub_08015998
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08011EBC: .4byte 0x03002790
-
-	thumb_func_start sub_08011EC0
-sub_08011EC0: @ 0x08011EC0
-	push {r4, r5, lr}
-	sub sp, #0x10
-	adds r1, r0, #0
-	ldr r0, [r1, #0x30]
-	ldr r4, [r0, #4]
-	ldr r5, [r0, #8]
-	adds r2, r1, #0
-	adds r2, #0x5e
-	movs r0, #4
-	ldrh r2, [r2]
-	ands r0, r2
-	cmp r0, #0
-	bne _08011EEC
-	ldr r0, _08011EE8 @ =0x08C015DC
-	bl sub_080043D4
-	str r4, [r0, #0x3c]
-	str r5, [r0, #0x40]
-	movs r0, #2
-	b _08011F06
-	.align 2, 0
-_08011EE8: .4byte 0x08C015DC
-_08011EEC:
-	str r4, [sp]
-	str r5, [sp, #4]
-	movs r0, #1
-	str r0, [sp, #8]
-	movs r0, #0
-	str r0, [sp, #0xc]
-	movs r0, #0xdc
-	movs r1, #0x54
-	adds r2, r4, #0
-	adds r3, r5, #0
-	bl sub_080123C8
-	movs r0, #0
-_08011F06:
-	add sp, #0x10
-	pop {r4, r5}
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_08011F10
-sub_08011F10: @ 0x08011F10
-	push {lr}
-	movs r1, #0
-	str r1, [r0, #0x3c]
-	bl sub_08013BCC
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08011F20
-sub_08011F20: @ 0x08011F20
-	push {r4, r5, lr}
-	adds r4, r0, #0
-	ldr r1, [r4, #0x3c]
-	ldr r0, [r4, #0x34]
-	adds r2, r1, r0
-	str r2, [r4, #0x3c]
-	cmp r2, #0xff
-	bgt _08011F5C
-	movs r0, #0x80
-	lsls r0, r0, #1
-	subs r0, r0, r2
-	lsls r3, r0, #8
-	ldr r0, [r4, #0x40]
-	muls r0, r2, r0
-	adds r0, r3, r0
-	cmp r0, #0
-	bge _08011F44
-	adds r0, #0xff
-_08011F44:
-	asrs r5, r0, #8
-	ldr r0, [r4, #0x48]
-	muls r0, r2, r0
-	adds r1, r3, r0
-	cmp r1, #0
-	bge _08011F52
-	adds r1, #0xff
-_08011F52:
-	asrs r1, r1, #8
-	ldr r0, [r4, #0x44]
-	muls r0, r2, r0
-	adds r0, r3, r0
-	b _08011F8C
-_08011F5C:
-	movs r0, #0x80
-	lsls r0, r0, #2
-	subs r3, r0, r2
-	ldr r0, [r4, #0x40]
-	adds r1, r0, #0
-	muls r1, r3, r1
-	ldr r5, _08011FBC @ =0xFFFFFF00
-	adds r0, r2, r5
-	lsls r2, r0, #8
-	adds r0, r1, r2
-	cmp r0, #0
-	bge _08011F76
-	adds r0, #0xff
-_08011F76:
-	asrs r5, r0, #8
-	ldr r0, [r4, #0x48]
-	muls r0, r3, r0
-	adds r0, r0, r2
-	cmp r0, #0
-	bge _08011F84
-	adds r0, #0xff
-_08011F84:
-	asrs r1, r0, #8
-	ldr r0, [r4, #0x44]
-	muls r0, r3, r0
-	adds r0, r0, r2
-_08011F8C:
-	cmp r0, #0
-	bge _08011F92
-	adds r0, #0xff
-_08011F92:
-	asrs r2, r0, #8
-	ldr r3, [r4, #0x30]
-	adds r0, r5, #0
-	bl sub_08013C48
-	ldr r1, [r4, #0x3c]
-	movs r0, #0x80
-	lsls r0, r0, #1
-	cmp r1, r0
-	bne _08011FC0
-	ldr r0, [r4, #0x2c]
-	subs r0, #1
-	str r0, [r4, #0x2c]
-	cmp r0, #0
-	bgt _08011FCC
-	movs r0, #0
-	str r0, [r4, #0x3c]
-	adds r0, r4, #0
-	bl sub_0800457C
-	b _08011FCC
-	.align 2, 0
-_08011FBC: .4byte 0xFFFFFF00
-_08011FC0:
-	movs r0, #0x80
-	lsls r0, r0, #2
-	cmp r1, r0
-	bne _08011FCC
-	movs r0, #0
-	str r0, [r4, #0x3c]
-_08011FCC:
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08011FD4
-sub_08011FD4: @ 0x08011FD4
-	push {r4, r5, r6, r7, lr}
-	adds r4, r0, #0
-	ldr r1, [r4, #0x3c]
-	ldr r0, [r4, #0x38]
-	adds r1, r1, r0
-	str r1, [r4, #0x3c]
-	movs r7, #0x80
-	lsls r7, r7, #1
-	subs r2, r7, r1
-	ldr r0, [r4, #0x40]
-	muls r0, r2, r0
-	lsls r1, r1, #8
-	adds r0, r0, r1
-	cmp r0, #0
-	bge _08011FF4
-	adds r0, #0xff
-_08011FF4:
-	asrs r6, r0, #8
-	ldr r0, [r4, #0x48]
-	muls r0, r2, r0
-	adds r0, r0, r1
-	cmp r0, #0
-	bge _08012002
-	adds r0, #0xff
-_08012002:
-	asrs r5, r0, #8
-	ldr r0, [r4, #0x44]
-	muls r0, r2, r0
-	adds r0, r0, r1
-	cmp r0, #0
-	bge _08012010
-	adds r0, #0xff
-_08012010:
-	asrs r2, r0, #8
-	ldr r3, [r4, #0x30]
-	adds r0, r6, #0
-	adds r1, r5, #0
-	bl sub_08013C48
-	ldr r0, [r4, #0x3c]
-	cmp r0, r7
-	bne _08012028
-	adds r0, r4, #0
-	bl sub_0800457C
-_08012028:
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08012030
-sub_08012030: @ 0x08012030
-	push {r4, r5, r6, r7, lr}
-	mov r7, r8
-	push {r7}
-	mov r8, r0
-	adds r4, r1, #0
-	adds r5, r2, #0
-	adds r6, r3, #0
-	ldr r7, [sp, #0x18]
-	ldr r1, [sp, #0x24]
-	ldr r0, _08012068 @ =0x08C0162C
-	bl sub_080043D4
-	str r4, [r0, #0x2c]
-	mov r1, r8
-	str r1, [r0, #0x30]
-	str r5, [r0, #0x34]
-	str r6, [r0, #0x38]
-	str r7, [r0, #0x40]
-	ldr r1, [sp, #0x1c]
-	str r1, [r0, #0x48]
-	ldr r1, [sp, #0x20]
-	str r1, [r0, #0x44]
-	pop {r3}
-	mov r8, r3
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08012068: .4byte 0x08C0162C
-
-	thumb_func_start sub_0801206C
-sub_0801206C: @ 0x0801206C
-	push {r4, r5, r6, r7, lr}
-	mov r7, r8
-	push {r7}
-	sub sp, #0x10
-	adds r7, r0, #0
-	ldr r0, [r7, #0x30]
-	ldr r1, [r0, #4]
-	mov ip, r1
-	ldr r1, [r0, #8]
-	mov r8, r1
-	ldr r1, [r0, #0xc]
-	movs r2, #0xff
-	adds r6, r1, #0
-	ands r6, r2
-	lsrs r5, r1, #0x10
-	ands r5, r2
-	ldr r0, [r0, #0x10]
-	ldr r1, _080120C4 @ =0x000003FF
-	adds r4, r0, #0
-	ands r4, r1
-	lsrs r3, r0, #0xa
-	ands r3, r1
-	lsrs r2, r0, #0x14
-	ands r2, r1
-	adds r1, r7, #0
-	adds r1, #0x5e
-	movs r0, #4
-	ldrh r1, [r1]
-	ands r0, r1
-	cmp r0, #0
-	bne _080120C8
-	str r4, [sp]
-	str r3, [sp, #4]
-	str r2, [sp, #8]
-	str r7, [sp, #0xc]
-	mov r0, ip
-	mov r1, r8
-	adds r2, r6, #0
-	adds r3, r5, #0
-	bl sub_08012030
-	movs r0, #2
-	b _080120CA
-	.align 2, 0
-_080120C4: .4byte 0x000003FF
-_080120C8:
-	movs r0, #0
-_080120CA:
-	add sp, #0x10
-	pop {r3}
-	mov r8, r3
-	pop {r4, r5, r6, r7}
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_080120D8
-sub_080120D8: @ 0x080120D8
-	movs r1, #0
-	str r1, [r0, #0x38]
-	bx lr
-	.align 2, 0
-
-	thumb_func_start sub_080120E0
-sub_080120E0: @ 0x080120E0
-	push {r4, r5, r6, lr}
-	adds r4, r0, #0
-	ldr r0, [r4, #0x38]
-	ldr r1, [r4, #0x34]
-	adds r0, r0, r1
-	str r0, [r4, #0x38]
-	cmp r0, #0xff
-	ble _080120FC
-	adds r0, r4, #0
-	bl sub_0800457C
-	movs r0, #0x80
-	lsls r0, r0, #1
-	str r0, [r4, #0x38]
-_080120FC:
-	ldr r2, [r4, #0x38]
-	movs r0, #0x80
-	lsls r0, r0, #1
-	subs r3, r0, r2
-	ldr r0, [r4, #0x3c]
-	adds r1, r0, #0
-	muls r1, r3, r1
-	ldr r0, [r4, #0x48]
-	muls r0, r2, r0
-	adds r0, r1, r0
-	cmp r0, #0
-	bge _08012116
-	adds r0, #0xff
-_08012116:
-	asrs r6, r0, #8
-	ldr r0, [r4, #0x40]
-	adds r1, r0, #0
-	muls r1, r3, r1
-	ldr r0, [r4, #0x4c]
-	muls r0, r2, r0
-	adds r1, r1, r0
-	cmp r1, #0
-	bge _0801212A
-	adds r1, #0xff
-_0801212A:
-	asrs r5, r1, #8
-	ldr r0, [r4, #0x44]
-	adds r1, r0, #0
-	muls r1, r3, r1
-	ldr r0, [r4, #0x50]
-	muls r0, r2, r0
-	adds r0, r1, r0
-	cmp r0, #0
-	bge _0801213E
-	adds r0, #0xff
-_0801213E:
-	asrs r2, r0, #8
-	ldr r3, [r4, #0x30]
-	adds r0, r6, #0
-	adds r1, r5, #0
-	bl sub_08013C48
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08012150
-sub_08012150: @ 0x08012150
-	push {r4, r5, r6, r7, lr}
-	mov r7, r8
-	push {r7}
-	mov r8, r0
-	adds r4, r1, #0
-	adds r6, r2, #0
-	adds r7, r3, #0
-	ldr r1, [sp, #0x1c]
-	ldr r0, _080121A0 @ =0x08C01654
-	bl sub_080043D4
-	adds r5, r0, #0
-	movs r0, #0xff
-	ands r0, r4
-	cmp r0, #0x80
-	bne _08012174
-	movs r0, #0x80
-	lsls r0, r0, #1
-_08012174:
-	str r0, [r5, #0x34]
-	bl sub_08013BA0
-	str r0, [r5, #0x3c]
-	bl sub_08013BAC
-	str r0, [r5, #0x40]
-	bl sub_08013BBC
-	str r0, [r5, #0x44]
-	mov r0, r8
-	str r0, [r5, #0x30]
-	str r6, [r5, #0x48]
-	str r7, [r5, #0x4c]
-	ldr r0, [sp, #0x18]
-	str r0, [r5, #0x50]
-	pop {r3}
-	mov r8, r3
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080121A0: .4byte 0x08C01654
-
-	thumb_func_start sub_080121A4
-sub_080121A4: @ 0x080121A4
-	push {r4, r5, r6, r7, lr}
-	sub sp, #8
-	adds r5, r0, #0
-	ldr r0, [r5, #0x30]
-	ldr r6, [r0, #4]
-	ldr r7, [r0, #8]
-	ldr r0, [r0, #0xc]
-	ldr r1, _080121E0 @ =0x000003FF
-	adds r4, r0, #0
-	ands r4, r1
-	lsrs r3, r0, #0xa
-	ands r3, r1
-	lsrs r2, r0, #0x14
-	ands r2, r1
-	adds r1, r5, #0
-	adds r1, #0x5e
-	movs r0, #4
-	ldrh r1, [r1]
-	ands r0, r1
-	cmp r0, #0
-	bne _080121E4
-	str r2, [sp]
-	str r5, [sp, #4]
-	adds r0, r6, #0
-	adds r1, r7, #0
-	adds r2, r4, #0
-	bl sub_08012150
-	movs r0, #2
-	b _080121E6
-	.align 2, 0
-_080121E0: .4byte 0x000003FF
-_080121E4:
-	movs r0, #0
-_080121E6:
-	add sp, #8
-	pop {r4, r5, r6, r7}
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_080121F0
-sub_080121F0: @ 0x080121F0
-	push {lr}
-	bl sub_08013BCC
-	movs r0, #2
-	pop {r1}
-	bx r1
-
-	thumb_func_start sub_080121FC
-sub_080121FC: @ 0x080121FC
-	push {lr}
-	movs r2, #0x80
-	lsls r2, r2, #1
-	movs r3, #1
-	rsbs r3, r3, #0
-	adds r0, r2, #0
-	adds r1, r2, #0
-	bl sub_08013C48
-	movs r0, #2
-	pop {r1}
-	bx r1
-
-	thumb_func_start sub_08012214
-sub_08012214: @ 0x08012214
-	push {r4, r5, r6, lr}
-	mov r6, r8
-	push {r6}
-	sub sp, #0x18
-	mov r8, r0
-	ldr r1, _08012274 @ =0x0202BBB4
-	movs r2, #0xc
-	ldrsh r0, [r1, r2]
-	mov r5, r8
-	ldr r3, [r5, #0x2c]
-	subs r3, r3, r0
-	adds r3, #8
-	movs r2, #0xe
-	ldrsh r0, [r1, r2]
-	ldr r4, [r5, #0x30]
-	subs r4, r4, r0
-	adds r4, #8
-	ldr r6, [r5, #0x38]
-	ldr r0, [r6, #4]
-	ldr r1, [r6]
-	ldr r2, [r6, #8]
-	ldr r5, _08012278 @ =0x000001FF
-	ands r3, r5
-	movs r5, #0xff
-	ands r4, r5
-	ldrh r5, [r6, #0xc]
-	adds r4, r5, r4
-	str r4, [sp]
-	movs r4, #0
-	str r4, [sp, #4]
-	ldrb r4, [r6, #0x10]
-	str r4, [sp, #8]
-	ldrb r4, [r6, #0x11]
-	str r4, [sp, #0xc]
-	ldrh r4, [r6, #0xe]
-	str r4, [sp, #0x10]
-	movs r4, #4
-	str r4, [sp, #0x14]
-	bl sub_080AB840
-	mov r1, r8
-	str r0, [r1, #0x34]
-	add sp, #0x18
-	pop {r3}
-	mov r8, r3
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08012274: .4byte 0x0202BBB4
-_08012278: .4byte 0x000001FF
-
-	thumb_func_start sub_0801227C
-sub_0801227C: @ 0x0801227C
-	push {r4, r5, r6, lr}
-	adds r4, r0, #0
-	ldr r6, [r4, #0x34]
-	ldr r5, [r6]
-	cmp r5, #0
-	beq _080122BC
-	ldr r2, _080122B4 @ =0x0202BBB4
-	movs r1, #0xc
-	ldrsh r0, [r2, r1]
-	ldr r1, [r4, #0x2c]
-	subs r1, r1, r0
-	adds r1, #8
-	movs r3, #0xe
-	ldrsh r0, [r2, r3]
-	ldr r2, [r4, #0x30]
-	subs r2, r2, r0
-	adds r2, #8
-	ldr r0, _080122B8 @ =0x000001FF
-	ands r1, r0
-	movs r0, #0xff
-	ands r2, r0
-	movs r3, #1
-	rsbs r3, r3, #0
-	adds r0, r6, #0
-	bl sub_08012B70
-	b _080122C4
-	.align 2, 0
-_080122B4: .4byte 0x0202BBB4
-_080122B8: .4byte 0x000001FF
-_080122BC:
-	adds r0, r4, #0
-	bl sub_0800457C
-	str r5, [r4, #0x34]
-_080122C4:
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_080122CC
-sub_080122CC: @ 0x080122CC
-	push {lr}
-	ldr r0, [r0, #0x34]
-	cmp r0, #0
-	beq _080122D8
-	bl sub_08012B8C
-_080122D8:
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_080122DC
-sub_080122DC: @ 0x080122DC
-	push {r4, r5, r6, lr}
-	adds r1, r0, #0
-	ldr r0, [r1, #0x30]
-	ldr r6, [r0, #4]
-	ldr r2, [r0, #8]
-	movs r0, #0x80
-	lsls r0, r0, #8
-	ands r0, r2
-	cmp r0, #0
-	bne _080122FC
-	ldr r4, _080122F8 @ =0x0000FFFF
-	ands r4, r2
-	b _08012300
-	.align 2, 0
-_080122F8: .4byte 0x0000FFFF
-_080122FC:
-	movs r4, #1
-	rsbs r4, r4, #0
-_08012300:
-	ldr r0, [r1, #0x30]
-	ldrh r2, [r0, #0xa]
-	movs r0, #0x80
-	lsls r0, r0, #8
-	ands r0, r2
-	movs r5, #1
-	rsbs r5, r5, #0
-	cmp r0, #0
-	bne _08012314
-	adds r5, r2, #0
-_08012314:
-	adds r2, r1, #0
-	adds r2, #0x5e
-	movs r0, #4
-	ldrh r2, [r2]
-	ands r0, r2
-	cmp r0, #0
-	beq _08012326
-	movs r0, #0
-	b _08012332
-_08012326:
-	ldr r0, _08012338 @ =0x08C01674
-	bl Proc_Start
-	str r4, [r0, #0x2c]
-	str r5, [r0, #0x30]
-	str r6, [r0, #0x38]
-_08012332:
-	pop {r4, r5, r6}
-	pop {r1}
-	bx r1
-	.align 2, 0
-_08012338: .4byte 0x08C01674
-
-	thumb_func_start sub_0801233C
-sub_0801233C: @ 0x0801233C
-	push {lr}
-	ldr r0, _0801234C @ =0x08C01674
-	bl sub_08004584
-	bl sub_08004460
-	pop {r1}
-	bx r1
-	.align 2, 0
-_0801234C: .4byte 0x08C01674
-
-	thumb_func_start sub_08012350
-sub_08012350: @ 0x08012350
-	push {lr}
-	ldr r0, _0801236C @ =0x08C01674
-	bl sub_08004584
-	cmp r0, #0
-	beq _08012370
-	ldr r0, [r0, #0x34]
-	cmp r0, #0
-	beq _08012368
-	ldr r0, [r0]
-	cmp r0, #0
-	bne _08012370
-_08012368:
-	movs r0, #0
-	b _08012372
-	.align 2, 0
-_0801236C: .4byte 0x08C01674
-_08012370:
-	movs r0, #1
-_08012372:
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_08012378
-sub_08012378: @ 0x08012378
-	push {r4, r5, r6, r7, lr}
-	sub sp, #8
-	adds r5, r0, #0
-	ldr r0, [r5, #0x30]
-	ldr r6, [r0, #4]
-	ldr r7, [r0, #8]
-	ldr r4, [r0, #0xc]
-	adds r1, r5, #0
-	adds r1, #0x5e
-	movs r0, #4
-	ldrh r1, [r1]
-	ands r0, r1
-	cmp r0, #0
-	beq _08012398
-	movs r0, #0
-	b _080123B2
-_08012398:
-	movs r1, #0xff
-	adds r2, r4, #0
-	ands r2, r1
-	asrs r3, r4, #0x10
-	ands r3, r1
-	asrs r0, r4, #0x18
-	ands r0, r1
-	str r0, [sp]
-	str r5, [sp, #4]
-	adds r0, r6, #0
-	adds r1, r7, #0
-	bl sub_080AB7F4
-_080123B2:
-	add sp, #8
-	pop {r4, r5, r6, r7}
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_080123BC
-sub_080123BC: @ 0x080123BC
-	push {lr}
-	bl sub_080AB82C
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_080123C8
-sub_080123C8: @ 0x080123C8
-	push {r4, r5, r6, r7, lr}
-	mov r7, sl
-	mov r6, sb
-	mov r5, r8
-	push {r5, r6, r7}
-	sub sp, #4
-	adds r6, r0, #0
-	mov r8, r1
-	mov sb, r2
-	mov sl, r3
-	ldr r7, [sp, #0x24]
-	ldr r5, [sp, #0x2c]
-	movs r0, #0
-	str r0, [sp]
-	ldr r4, _08012438 @ =0x030040F0
-	ldr r2, _0801243C @ =0x01000004
-	mov r0, sp
-	adds r1, r4, #0
-	bl CpuFastSet
-	movs r0, #3
-	ands r5, r0
-	lsls r5, r5, #1
-	movs r0, #7
-	rsbs r0, r0, #0
-	ldrb r1, [r4, #3]
-	ands r0, r1
-	orrs r0, r5
-	movs r1, #7
-	ands r0, r1
-	movs r1, #8
-	orrs r0, r1
-	strb r0, [r4, #3]
-	strb r6, [r4]
-	mov r0, r8
-	strb r0, [r4, #1]
-	mov r1, sb
-	strb r1, [r4, #4]
-	mov r0, sl
-	strb r0, [r4, #5]
-	strb r7, [r4, #6]
-	add r1, sp, #0x28
-	ldrb r1, [r1]
-	strb r1, [r4, #7]
-	adds r0, r4, #0
-	ldr r1, [sp, #0x30]
-	bl sub_0800A614
-	add sp, #4
-	pop {r3, r4, r5}
-	mov r8, r3
-	mov sb, r4
-	mov sl, r5
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08012438: .4byte 0x030040F0
-_0801243C: .4byte 0x01000004
-
-	thumb_func_start sub_08012440
-sub_08012440: @ 0x08012440
-	push {r4, r5, r6, lr}
-	sub sp, #4
-	adds r4, r0, #0
-	adds r6, r1, #0
-	movs r0, #0
-	str r0, [sp]
-	ldr r5, _08012490 @ =0x030040F0
-	ldr r2, _08012494 @ =0x01000004
-	mov r0, sp
-	adds r1, r5, #0
-	bl CpuFastSet
-	ldrb r2, [r4, #3]
-	movs r1, #6
-	ands r1, r2
-	movs r0, #7
-	rsbs r0, r0, #0
-	ldrb r3, [r5, #3]
-	ands r0, r3
-	orrs r0, r1
-	lsrs r2, r2, #3
-	lsls r2, r2, #3
-	movs r1, #7
-	ands r0, r1
-	orrs r0, r2
-	strb r0, [r5, #3]
-	ldrb r0, [r4]
-	strb r0, [r5]
-	ldrb r0, [r4, #1]
-	strb r0, [r5, #1]
-	cmp r6, #0
-	beq _08012498
-	ldrb r0, [r4, #4]
-	strb r0, [r5, #4]
-	ldrb r0, [r4, #5]
-	strb r0, [r5, #5]
-	ldrb r1, [r4, #6]
-	ldrb r2, [r4, #7]
-	b _080124A2
-	.align 2, 0
-_08012490: .4byte 0x030040F0
-_08012494: .4byte 0x01000004
-_08012498:
-	ldrb r1, [r4, #6]
-	strb r1, [r5, #4]
-	ldrb r0, [r4, #7]
-	strb r0, [r5, #5]
-	adds r2, r0, #0
-_080124A2:
-	ldr r0, _080124B8 @ =0x030040F0
-	strb r1, [r0, #6]
-	strb r2, [r0, #7]
-	adds r1, r6, #0
-	bl sub_0800A614
-	add sp, #4
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080124B8: .4byte 0x030040F0
-
-	thumb_func_start sub_080124BC
-sub_080124BC: @ 0x080124BC
-	push {r4, r5, r6, r7, lr}
-	mov r7, sl
-	mov r6, sb
-	mov r5, r8
-	push {r5, r6, r7}
-	sub sp, #0x10
-	adds r7, r0, #0
-	ldr r1, [r7, #0x54]
-	ldrb r0, [r1]
-	cmp r0, #0
-	bne _080124DA
-	adds r0, r7, #0
-	bl sub_08004460
-	b _08012582
-_080124DA:
-	ldrb r4, [r1, #6]
-	str r4, [r7, #0x2c]
-	ldrb r3, [r1, #7]
-	str r3, [r7, #0x30]
-	ldr r6, _08012594 @ =0x0202E3D8
-	ldr r1, [r6]
-	lsls r0, r3, #2
-	adds r0, r0, r1
-	ldr r0, [r0]
-	adds r0, r0, r4
-	ldrb r0, [r0]
-	cmp r0, #0
-	beq _08012578
-	movs r0, #0xff
-	mov sb, r0
-	movs r1, #1
-	rsbs r1, r1, #0
-	mov sl, r1
-	mov r2, sl
-	str r2, [sp]
-	ldr r2, _08012598 @ =0x08C52B94
-	adds r0, r4, #0
-	adds r1, r3, #0
-	bl sub_0801A060
-	movs r5, #0
-	ldr r0, _0801259C @ =0x0202E3D4
-	movs r3, #2
-	ldrsh r1, [r0, r3]
-	cmp r5, r1
-	bge _08012570
-	movs r3, #0
-	ldrsh r2, [r0, r3]
-	str r2, [sp, #8]
-	str r1, [sp, #4]
-_08012520:
-	movs r3, #0
-	adds r6, r5, #1
-	mov ip, r6
-	ldr r0, [sp, #8]
-	cmp r3, r0
-	bge _08012568
-	ldr r1, _080125A0 @ =0x0202E3E0
-	ldr r0, [r1]
-	lsls r1, r5, #2
-	adds r0, r1, r0
-	ldr r0, [r0]
-	str r0, [sp, #0xc]
-	ldr r2, _0801259C @ =0x0202E3D4
-	movs r6, #0
-	ldrsh r4, [r2, r6]
-	ldr r0, _08012594 @ =0x0202E3D8
-	mov r8, r0
-_08012542:
-	ldr r2, [sp, #0xc]
-	adds r0, r2, r3
-	ldrb r2, [r0]
-	cmp sb, r2
-	ble _08012562
-	mov r6, r8
-	ldr r0, [r6]
-	adds r0, r1, r0
-	ldr r0, [r0]
-	adds r0, r0, r3
-	ldrb r0, [r0]
-	cmp r0, #0
-	bne _08012562
-	mov sb, r2
-	str r3, [sp]
-	mov sl, r5
-_08012562:
-	adds r3, #1
-	cmp r3, r4
-	blt _08012542
-_08012568:
-	mov r5, ip
-	ldr r0, [sp, #4]
-	cmp r5, r0
-	blt _08012520
-_08012570:
-	ldr r1, [sp]
-	str r1, [r7, #0x2c]
-	mov r2, sl
-	str r2, [r7, #0x30]
-_08012578:
-	ldr r1, [r7, #0x2c]
-	ldr r2, [r7, #0x30]
-	adds r0, r7, #0
-	bl sub_0801615C
-_08012582:
-	add sp, #0x10
-	pop {r3, r4, r5}
-	mov r8, r3
-	mov sb, r4
-	mov sl, r5
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08012594: .4byte 0x0202E3D8
-_08012598: .4byte 0x08C52B94
-_0801259C: .4byte 0x0202E3D4
-_080125A0: .4byte 0x0202E3E0
-
-	thumb_func_start sub_080125A4
-sub_080125A4: @ 0x080125A4
-	push {r4, r5, r6, lr}
-	sub sp, #0x14
-	adds r4, r0, #0
-	ldr r5, [r4, #0x54]
-	ldr r1, [r4, #0x2c]
-	ldr r2, [r4, #0x30]
-	movs r0, #1
-	str r0, [sp]
-	adds r0, r4, #0
-	movs r3, #1
-	bl sub_08020E5C
-	add r1, sp, #4
-	adds r0, r5, #0
-	ldm r0!, {r2, r3, r6}
-	stm r1!, {r2, r3, r6}
-	ldr r0, [r0]
-	str r0, [r1]
-	add r2, sp, #4
-	adds r1, r2, #0
-	ldr r0, [r4, #0x2c]
-	strb r0, [r1, #6]
-	strb r0, [r2, #4]
-	ldr r0, [r4, #0x30]
-	strb r0, [r1, #7]
-	strb r0, [r2, #5]
-	adds r0, r1, #0
-	bl LoadUnit
-	adds r5, #0x10
-	str r5, [r4, #0x54]
-	add sp, #0x14
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_080125EC
-sub_080125EC: @ 0x080125EC
-	push {r4, lr}
-	adds r4, r0, #0
-	ldr r0, _08012638 @ =0x0202E3F0
-	ldr r0, [r0]
-	movs r1, #0
-	bl BmMapFillg
-	ldr r0, _0801263C @ =0x08C0169C
-	adds r1, r4, #0
-	bl sub_080043D4
-	adds r2, r0, #0
-	ldr r0, [r4, #0x30]
-	ldr r0, [r0, #4]
-	str r0, [r2, #0x54]
-	movs r3, #0
-	adds r0, r4, #0
-	adds r0, #0x4d
-	ldrb r0, [r0]
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-	cmp r0, #0
-	bne _08012628
-	adds r1, r4, #0
-	adds r1, #0x5e
-	movs r0, #4
-	ldrh r1, [r1]
-	ands r0, r1
-	cmp r0, #0
-	beq _0801262A
-_08012628:
-	movs r3, #1
-_0801262A:
-	adds r0, r2, #0
-	adds r0, #0x64
-	strh r3, [r0]
-	movs r0, #2
-	pop {r4}
-	pop {r1}
-	bx r1
-	.align 2, 0
-_08012638: .4byte 0x0202E3F0
-_0801263C: .4byte 0x08C0169C
-
-	thumb_func_start AP_ClearAll
-AP_ClearAll: @ 0x08012640
-	ldr r1, _08012654 @ =0x03000110
-	movs r2, #0
-	movs r3, #0xbe
-	lsls r3, r3, #2
-	adds r0, r1, r3
-_0801264A:
-	str r2, [r0]
-	subs r0, #0x28
-	cmp r0, r1
-	bge _0801264A
-	bx lr
-	.align 2, 0
-_08012654: .4byte 0x03000110
-
-	thumb_func_start sub_08012658
-sub_08012658: @ 0x08012658
-	push {r4, r5, r6, lr}
-	adds r6, r0, #0
-	lsls r1, r1, #0x10
-	lsrs r5, r1, #0x10
-	movs r0, #0
-	bl sub_08012AD0
-	adds r4, r0, #0
-	cmp r4, #0
-	beq _08012678
-	adds r1, r6, #0
-	adds r2, r5, #0
-	bl sub_08012A98
-	adds r0, r4, #0
-	b _0801267A
-_08012678:
-	movs r0, #0
-_0801267A:
-	pop {r4, r5, r6}
-	pop {r1}
-	bx r1
-
-	thumb_func_start sub_08012680
-sub_08012680: @ 0x08012680
-	adds r1, r0, #0
-	cmp r1, #0
-	beq _08012690
-	ldr r0, [r1]
-	cmp r0, #0
-	beq _08012690
-	movs r0, #0
-	str r0, [r1]
-_08012690:
-	bx lr
-	.align 2, 0
-
-	thumb_func_start sub_08012694
-sub_08012694: @ 0x08012694
-	push {r4, lr}
-	adds r4, r0, #0
-	cmp r4, #0
-	beq _080126A2
-	ldr r0, [r4]
-	cmp r0, #0
-	bne _080126A6
-_080126A2:
-	movs r0, #0
-	b _080126B6
-_080126A6:
-	adds r0, r4, #0
-	bl sub_080126BC
-	adds r0, r4, #0
-	bl sub_08012718
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-_080126B6:
-	pop {r4}
-	pop {r1}
-	bx r1
-
-	thumb_func_start sub_080126BC
-sub_080126BC: @ 0x080126BC
-	push {r4, r5, r6, lr}
-	sub sp, #4
-	adds r4, r0, #0
-	adds r5, r1, #0
-	adds r6, r2, #0
-	movs r2, #0
-	cmp r4, #0
-	beq _0801270E
-	ldr r0, [r4]
-	cmp r0, #0
-	beq _0801270E
-	ldr r0, [r4, #0x14]
-	cmp r0, #0
-	beq _080126E6
-	adds r0, r4, #0
-	bl sub_08012808
-	adds r0, r4, #0
-	adds r0, #0x21
-	ldrb r0, [r0]
-	lsls r2, r0, #9
-_080126E6:
-	ldrh r0, [r4, #0x1e]
-	orrs r2, r5
-	ldr r3, [r4, #0x10]
-	ldrh r1, [r4, #0x22]
-	str r1, [sp]
-	adds r1, r2, #0
-	adds r2, r6, #0
-	bl sub_080068C4
-	ldr r0, [r4, #0x24]
-	cmp r0, #0
-	beq _0801270E
-	adds r0, r4, #0
-	adds r0, #0x20
-	ldrb r0, [r0]
-	cmp r0, #0
-	beq _0801270E
-	adds r0, r4, #0
-	bl sub_08012944
-_0801270E:
-	add sp, #4
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08012718
-sub_08012718: @ 0x08012718
-	push {r4, lr}
-	adds r2, r0, #0
-	cmp r2, #0
-	beq _0801278A
-	ldr r0, [r2]
-	cmp r0, #0
-	beq _0801278A
-	ldrh r0, [r2, #0x1a]
-	cmp r0, #0
-	beq _08012740
-	ldrh r1, [r2, #0x18]
-	movs r3, #0x18
-	ldrsh r0, [r2, r3]
-	cmp r0, #0
-	beq _0801274E
-	subs r0, r1, #1
-	strh r0, [r2, #0x18]
-	lsls r0, r0, #0x10
-	cmp r0, #0
-	ble _08012744
-_08012740:
-	movs r0, #1
-	b _08012802
-_08012744:
-	movs r0, #0
-	strh r0, [r2, #0x18]
-	ldr r0, [r2, #0xc]
-	adds r0, #4
-	str r0, [r2, #0xc]
-_0801274E:
-	ldr r0, [r2, #0xc]
-	ldrh r1, [r0]
-	adds r4, r0, #0
-	cmp r1, #0
-	bne _0801278E
-	ldrh r1, [r4, #2]
-	cmp r1, #1
-	beq _08012784
-	cmp r1, #1
-	bgt _08012768
-	cmp r1, #0
-	beq _0801278A
-	b _0801278E
-_08012768:
-	ldr r0, _08012780 @ =0x0000FFFF
-	cmp r1, r0
-	bne _0801278E
-	ldr r0, [r2, #8]
-	str r0, [r2, #0xc]
-	adds r0, r2, #0
-	bl sub_08012718
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-	b _08012802
-	.align 2, 0
-_08012780: .4byte 0x0000FFFF
-_08012784:
-	adds r0, r2, #0
-	bl sub_08012680
-_0801278A:
-	movs r0, #0
-	b _08012802
-_0801278E:
-	ldrh r1, [r2, #0x1a]
-	ldrh r3, [r4]
-	adds r0, r1, #0
-	muls r0, r3, r0
-	ldrh r3, [r2, #0x1c]
-	adds r1, r3, r0
-	strh r1, [r2, #0x1c]
-	lsls r3, r1, #0x10
-	lsrs r0, r3, #0x10
-	cmp r0, #0xff
-	bhi _080127B4
-	movs r0, #1
-	strh r0, [r2, #0x18]
-	adds r0, r2, #0
-	bl sub_08012718
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-	b _08012802
-_080127B4:
-	lsrs r0, r3, #0x18
-	strh r0, [r2, #0x18]
-	movs r0, #0xff
-	ands r1, r0
-	strh r1, [r2, #0x1c]
-	ldr r1, [r2, #4]
-	ldrh r4, [r4, #2]
-	lsls r0, r4, #1
-	adds r0, r0, r1
-	ldrh r0, [r0]
-	lsrs r0, r0, #1
-	lsls r0, r0, #1
-	adds r3, r1, r0
-	str r3, [r2, #0x10]
-	ldrh r4, [r3]
-	movs r0, #0x80
-	lsls r0, r0, #8
-	ands r0, r4
-	lsls r0, r0, #0x10
-	lsrs r0, r0, #0x10
-	cmp r0, #0
-	beq _080127F8
-	str r3, [r2, #0x14]
-	ldr r1, _080127F4 @ =0x00007FFF
-	ands r1, r4
-	lsls r0, r1, #1
-	adds r0, r0, r1
-	lsls r0, r0, #1
-	adds r0, #2
-	adds r0, r3, r0
-	str r0, [r2, #0x10]
-	b _080127FA
-	.align 2, 0
-_080127F4: .4byte 0x00007FFF
-_080127F8:
-	str r0, [r2, #0x14]
-_080127FA:
-	adds r1, r2, #0
-	adds r1, #0x20
-	movs r0, #1
-	strb r0, [r1]
-_08012802:
-	pop {r4}
-	pop {r1}
-	bx r1
-
-	thumb_func_start sub_08012808
-sub_08012808: @ 0x08012808
-	push {r4, r5, r6, r7, lr}
-	mov r7, sl
-	mov r6, sb
-	mov r5, r8
-	push {r5, r6, r7}
-	sub sp, #0xc
-	str r0, [sp, #4]
-	cmp r0, #0
-	beq _080128D8
-	ldr r0, [r0]
-	cmp r0, #0
-	beq _080128D8
-	ldr r1, [sp, #4]
-	ldr r0, [r1, #0x14]
-	cmp r0, #0
-	beq _080128D8
-	ldr r2, _080128E8 @ =0x00007FFF
-	ldrh r1, [r0]
-	ands r1, r2
-	str r1, [sp, #8]
-	adds r7, r0, #2
-	movs r2, #0
-	mov r8, r2
-	cmp r8, r1
-	bge _080128D8
-	ldr r0, _080128EC @ =0x080C0E98
-	mov sb, r0
-	movs r1, #0xff
-	mov sl, r1
-_08012842:
-	mov r0, sl
-	ldrh r2, [r7]
-	ands r0, r2
-	adds r0, #0x40
-	lsls r0, r0, #1
-	add r0, sb
-	movs r1, #0
-	ldrsh r0, [r0, r1]
-	lsls r0, r0, #4
-	ldrh r1, [r7, #2]
-	bl Div
-	adds r6, r0, #0
-	lsls r6, r6, #0x10
-	asrs r6, r6, #0x10
-	mov r0, sl
-	ldrh r2, [r7]
-	ands r0, r2
-	lsls r0, r0, #1
-	add r0, sb
-	movs r1, #0
-	ldrsh r0, [r0, r1]
-	rsbs r0, r0, #0
-	lsls r0, r0, #4
-	ldrh r1, [r7, #4]
-	bl Div
-	adds r5, r0, #0
-	lsls r5, r5, #0x10
-	asrs r5, r5, #0x10
-	mov r0, sl
-	ldrh r2, [r7]
-	ands r0, r2
-	lsls r0, r0, #1
-	add r0, sb
-	movs r1, #0
-	ldrsh r0, [r0, r1]
-	lsls r0, r0, #4
-	ldrh r1, [r7, #2]
-	bl Div
-	adds r4, r0, #0
-	lsls r4, r4, #0x10
-	asrs r4, r4, #0x10
-	mov r0, sl
-	ldrh r2, [r7]
-	ands r0, r2
-	adds r0, #0x40
-	lsls r0, r0, #1
-	add r0, sb
-	movs r1, #0
-	ldrsh r0, [r0, r1]
-	lsls r0, r0, #4
-	ldrh r1, [r7, #4]
-	bl Div
-	lsls r0, r0, #0x10
-	asrs r0, r0, #0x10
-	ldr r1, [sp, #4]
-	adds r1, #0x21
-	ldrb r1, [r1]
-	add r1, r8
-	str r0, [sp]
-	adds r0, r1, #0
-	adds r1, r6, #0
-	adds r2, r5, #0
-	adds r3, r4, #0
-	bl sub_08003264
-	adds r7, #6
-	movs r2, #1
-	add r8, r2
-	ldr r0, [sp, #8]
-	cmp r8, r0
-	blt _08012842
-_080128D8:
-	add sp, #0xc
-	pop {r3, r4, r5}
-	mov r8, r3
-	mov sb, r4
-	mov sl, r5
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080128E8: .4byte 0x00007FFF
-_080128EC: .4byte 0x080C0E98
-
-	thumb_func_start sub_080128F0
-sub_080128F0: @ 0x080128F0
-	push {r4, lr}
-	adds r3, r0, #0
-	cmp r3, #0
-	beq _0801291C
-	ldr r2, [r3]
-	cmp r2, #0
-	beq _0801291C
-	ldrh r4, [r2, #2]
-	lsrs r0, r4, #1
-	lsls r0, r0, #1
-	adds r0, r2, r0
-	lsls r1, r1, #1
-	adds r1, r1, r0
-	ldrh r1, [r1]
-	lsrs r1, r1, #1
-	lsls r1, r1, #1
-	adds r0, r0, r1
-	str r0, [r3, #8]
-	str r0, [r3, #0xc]
-	adds r0, r3, #0
-	bl sub_08012A78
-_0801291C:
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08012924
-sub_08012924: @ 0x08012924
-	push {r4, lr}
-	adds r4, r0, #0
-	cmp r4, #0
-	beq _0801293E
-	ldr r0, [r4]
-	cmp r0, #0
-	beq _0801293E
-	adds r0, r4, #0
-	bl sub_08012A54
-	adds r0, r4, #0
-	bl sub_08012A78
-_0801293E:
-	pop {r4}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08012944
-sub_08012944: @ 0x08012944
-	push {r4, r5, r6, r7, lr}
-	mov r7, sl
-	mov r6, sb
-	mov r5, r8
-	push {r5, r6, r7}
-	sub sp, #4
-	adds r6, r0, #0
-	cmp r6, #0
-	beq _08012A3E
-	ldr r0, [r6]
-	cmp r0, #0
-	beq _08012A3E
-	ldr r0, [r6, #0x10]
-	ldrh r5, [r0]
-	adds r4, r0, #2
-	adds r2, r5, #0
-	lsls r1, r5, #1
-	adds r1, r1, r5
-	lsls r1, r1, #1
-	adds r1, #2
-	adds r0, r0, r1
-	mov sl, r0
-	movs r0, #0
-	mov r8, r0
-	subs r5, #1
-	adds r1, r6, #0
-	adds r1, #0x20
-	str r1, [sp]
-	cmp r2, #0
-	ble _08012A38
-	ldr r2, _080129F4 @ =0x08C01714
-	mov sb, r2
-	movs r7, #0xc0
-	lsls r7, r7, #8
-_08012988:
-	ldr r1, _080129F8 @ =0x000003FF
-	mov r3, sl
-	ldrh r3, [r3]
-	ands r1, r3
-	lsls r1, r1, #5
-	ldr r0, [r6, #0x24]
-	adds r0, r0, r1
-	ldr r1, _080129F8 @ =0x000003FF
-	ldrh r2, [r6, #0x22]
-	ands r1, r2
-	lsls r1, r1, #5
-	ldr r2, _080129FC @ =0x06010000
-	add r2, r8
-	adds r1, r1, r2
-	adds r3, r7, #0
-	ldrh r2, [r4]
-	ands r3, r2
-	lsrs r3, r3, #0xc
-	mov ip, r3
-	adds r2, r7, #0
-	ldrh r3, [r4, #2]
-	ands r2, r3
-	lsrs r2, r2, #0xe
-	add r2, ip
-	lsls r3, r2, #1
-	adds r2, r3, #0
-	add r2, sb
-	ldrb r2, [r2]
-	mov ip, r2
-	adds r3, #1
-	add r3, sb
-	ldrb r3, [r3]
-	bl sub_0801372C
-	ldr r1, _08012A00 @ =0x03002790
-	movs r0, #0x40
-	ldrb r1, [r1]
-	ands r0, r1
-	cmp r0, #0
-	bne _08012A04
-	adds r0, r7, #0
-	ldrh r3, [r4]
-	ands r0, r3
-	lsrs r0, r0, #0xc
-	adds r1, r7, #0
-	ldrh r2, [r4, #2]
-	ands r1, r2
-	lsrs r1, r1, #0xe
-	adds r0, r0, r1
-	lsls r0, r0, #1
-	add r0, sb
-	ldrb r0, [r0]
-	b _08012A26
-	.align 2, 0
-_080129F4: .4byte 0x08C01714
-_080129F8: .4byte 0x000003FF
-_080129FC: .4byte 0x06010000
-_08012A00: .4byte 0x03002790
-_08012A04:
-	adds r0, r7, #0
-	ldrh r3, [r4]
-	ands r0, r3
-	lsrs r0, r0, #0xc
-	adds r1, r7, #0
-	ldrh r2, [r4, #2]
-	ands r1, r2
-	lsrs r1, r1, #0xe
-	adds r0, r0, r1
-	lsls r0, r0, #1
-	add r0, sb
-	ldrb r1, [r0]
-	adds r3, r1, #0
-	muls r3, r1, r3
-	adds r0, r3, #0
-	ldr r2, _08012A50 @ =0x000003FF
-	ands r0, r2
-_08012A26:
-	lsls r0, r0, #5
-	add r8, r0
-	adds r4, #6
-	movs r3, #2
-	add sl, r3
-	adds r0, r5, #0
-	subs r5, #1
-	cmp r0, #0
-	bgt _08012988
-_08012A38:
-	movs r0, #0
-	ldr r1, [sp]
-	strb r0, [r1]
-_08012A3E:
-	add sp, #4
-	pop {r3, r4, r5}
-	mov r8, r3
-	mov sb, r4
-	mov sl, r5
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08012A50: .4byte 0x000003FF
-
-	thumb_func_start sub_08012A54
-sub_08012A54: @ 0x08012A54
-	str r1, [r0]
-	ldrh r3, [r1]
-	lsrs r2, r3, #1
-	lsls r2, r2, #1
-	adds r2, r1, r2
-	str r2, [r0, #4]
-	ldrh r3, [r1, #2]
-	lsrs r2, r3, #1
-	lsls r2, r2, #1
-	adds r1, r1, r2
-	ldrh r3, [r1]
-	lsrs r2, r3, #1
-	lsls r2, r2, #1
-	adds r1, r1, r2
-	str r1, [r0, #8]
-	str r1, [r0, #0xc]
-	bx lr
-	.align 2, 0
-
-	thumb_func_start sub_08012A78
-sub_08012A78: @ 0x08012A78
-	push {r4, r5, lr}
-	adds r4, r0, #0
-	movs r0, #0
-	ldrh r5, [r4, #0x1a]
-	strh r0, [r4, #0x18]
-	movs r0, #0x80
-	lsls r0, r0, #1
-	strh r0, [r4, #0x1a]
-	adds r0, r4, #0
-	bl sub_08012718
-	strh r5, [r4, #0x1a]
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08012A98
-sub_08012A98: @ 0x08012A98
-	push {r4, r5, lr}
-	adds r4, r0, #0
-	lsls r5, r2, #0x10
-	lsrs r5, r5, #0x10
-	bl sub_08012A54
-	movs r1, #0
-	str r1, [r4, #0x24]
-	movs r0, #0
-	strh r1, [r4, #0x22]
-	strh r1, [r4, #0x18]
-	strh r5, [r4, #0x1e]
-	str r1, [r4, #0x14]
-	adds r2, r4, #0
-	adds r2, #0x21
-	strb r0, [r2]
-	strh r1, [r4, #0x18]
-	movs r0, #0x80
-	lsls r0, r0, #1
-	strh r0, [r4, #0x1a]
-	strh r1, [r4, #0x1c]
-	adds r0, r4, #0
-	bl sub_08012718
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08012AD0
-sub_08012AD0: @ 0x08012AD0
-	adds r3, r0, #0
-	movs r2, #0
-	ldr r1, _08012AE0 @ =0x03000110
-_08012AD6:
-	ldr r0, [r1]
-	cmp r0, r3
-	bne _08012AE4
-	adds r0, r1, #0
-	b _08012AEE
-	.align 2, 0
-_08012AE0: .4byte 0x03000110
-_08012AE4:
-	adds r1, #0x28
-	adds r2, #1
-	cmp r2, #0x13
-	ble _08012AD6
-	movs r0, #0
-_08012AEE:
-	bx lr
-
-	thumb_func_start sub_08012AF0
-sub_08012AF0: @ 0x08012AF0
-	push {r4, r5, r6, lr}
-	mov r6, sb
-	mov r5, r8
-	push {r5, r6}
-	mov r8, r1
-	mov sb, r2
-	adds r6, r3, #0
-	ldr r5, [sp, #0x18]
-	ldr r1, [sp, #0x1c]
-	lsls r1, r1, #0x10
-	lsrs r1, r1, #0x10
-	bl sub_08012658
-	adds r4, r0, #0
-	adds r1, r5, #0
-	bl sub_080128F0
-	strh r6, [r4, #0x22]
-	ldr r0, _08012B34 @ =0x08C016FC
-	movs r1, #3
-	bl Proc_Start
-	str r4, [r0, #0x50]
-	mov r1, r8
-	str r1, [r0, #0x54]
-	mov r1, sb
-	str r1, [r0, #0x58]
-	pop {r3, r4}
-	mov r8, r3
-	mov sb, r4
-	pop {r4, r5, r6}
-	pop {r1}
-	bx r1
-	.align 2, 0
-_08012B34: .4byte 0x08C016FC
-
-	thumb_func_start sub_08012B38
-sub_08012B38: @ 0x08012B38
-	push {r4, lr}
-	adds r4, r0, #0
-	ldr r0, [r4, #0x50]
-	ldr r1, [r4, #0x54]
-	ldr r2, [r4, #0x58]
-	bl sub_08012694
-	lsls r0, r0, #0x18
-	cmp r0, #0
-	bne _08012B5E
-	ldr r0, [r4, #0x50]
-	cmp r0, #0
-	beq _08012B58
-	ldr r0, [r0]
-	cmp r0, #0
-	bne _08012B5E
-_08012B58:
-	adds r0, r4, #0
-	bl sub_08004460
-_08012B5E:
-	pop {r4}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08012B64
-sub_08012B64: @ 0x08012B64
-	push {lr}
-	ldr r0, [r0, #0x50]
-	bl sub_08012680
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08012B70
-sub_08012B70: @ 0x08012B70
-	push {r4, lr}
-	adds r4, r0, #0
-	str r1, [r4, #0x54]
-	str r2, [r4, #0x58]
-	movs r0, #1
-	rsbs r0, r0, #0
-	cmp r3, r0
-	beq _08012B84
-	ldr r0, [r4, #0x50]
-	strh r3, [r0, #0x22]
-_08012B84:
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08012B8C
-sub_08012B8C: @ 0x08012B8C
-	push {lr}
-	bl sub_08004460
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08012B98
-sub_08012B98: @ 0x08012B98
-	push {lr}
-	ldr r0, _08012BA4 @ =0x08C016FC
-	bl sub_08004748
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08012BA4: .4byte 0x08C016FC
-
-	thumb_func_start sub_08012BA8
-sub_08012BA8: @ 0x08012BA8
-	push {lr}
-	ldr r0, _08012BBC @ =0x08C016FC
-	bl sub_08004584
-	cmp r0, #0
-	beq _08012BB6
-	movs r0, #1
-_08012BB6:
-	pop {r1}
-	bx r1
-	.align 2, 0
-_08012BBC: .4byte 0x08C016FC
-
-	thumb_func_start sub_08012BC0
-sub_08012BC0: @ 0x08012BC0
-	push {r4, r5, r6, lr}
-	sub sp, #0x48
-	bl sub_080A0D74
-	lsls r1, r0, #4
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	adds r4, r1, r0
-	movs r5, #0
-	mov r6, sp
-_08012BD4:
-	adds r0, r5, #0
-	bl IsSaveValid
-	lsls r0, r0, #0x18
-	cmp r0, #0
-	beq _08012C02
-	adds r0, r5, #0
-	mov r1, sp
-	bl ReadGameSavePlaySt
-	movs r2, #0xe
-	ldrsb r2, [r6, r2]
-	ldrh r0, [r6, #0x2e]
-	lsls r1, r0, #0x14
-	lsrs r1, r1, #0x1b
-	lsls r0, r1, #4
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	adds r0, r0, r1
-	adds r2, r2, r0
-	cmp r4, r2
-	bge _08012C02
-	adds r4, r2, #0
-_08012C02:
-	adds r5, #1
-	cmp r5, #2
-	ble _08012BD4
-	cmp r4, #4
-	bgt _08012C10
-	movs r0, #0
-	b _08012C5A
-_08012C10:
-	cmp r4, #0xa
-	bgt _08012C18
-	movs r0, #1
-	b _08012C5A
-_08012C18:
-	cmp r4, #0x12
-	bgt _08012C20
-	movs r0, #2
-	b _08012C5A
-_08012C20:
-	cmp r4, #0x1a
-	bgt _08012C28
-	movs r0, #3
-	b _08012C5A
-_08012C28:
-	cmp r4, #0x44
-	bgt _08012C30
-	movs r0, #4
-	b _08012C5A
-_08012C30:
-	cmp r4, #0x49
-	bgt _08012C38
-	movs r0, #5
-	b _08012C5A
-_08012C38:
-	cmp r4, #0x4f
-	bgt _08012C40
-	movs r0, #6
-	b _08012C5A
-_08012C40:
-	cmp r4, #0x57
-	bgt _08012C48
-	movs r0, #7
-	b _08012C5A
-_08012C48:
-	cmp r4, #0x5f
-	bgt _08012C50
-	movs r0, #8
-	b _08012C5A
-_08012C50:
-	cmp r4, #0x89
-	ble _08012C58
-	movs r0, #0xa
-	b _08012C5A
-_08012C58:
-	movs r0, #9
-_08012C5A:
-	add sp, #0x48
-	pop {r4, r5, r6}
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_08012C64
-sub_08012C64: @ 0x08012C64
-	push {r4, lr}
-	adds r4, r0, #0
-	bl sub_08012BC0
-	lsls r0, r0, #0x18
-	lsrs r0, r0, #0x18
-	adds r1, r4, #0
-	bl sub_080AFE1C
-	movs r0, #0
-	pop {r4}
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_08012C80
-sub_08012C80: @ 0x08012C80
-	push {lr}
-	adds r2, r0, #0
-	ldr r0, _08012CA0 @ =0x08BBFC7C
-	ldr r1, [r0]
-	movs r0, #0x85
-	lsls r0, r0, #2
-	ldrh r1, [r1, #4]
-	cmp r1, r0
-	bne _08012C9A
-	adds r0, r2, #0
-	movs r1, #0xf
-	bl sub_080045FC
-_08012C9A:
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08012CA0: .4byte 0x08BBFC7C
-
-	thumb_func_start sub_08012CA4
-sub_08012CA4: @ 0x08012CA4
-	push {lr}
-	movs r0, #0
-	bl sub_08002A44
-	bl sub_08015A48
-	ldr r2, _08012CD4 @ =0x0202BBF4
-	adds r2, #0x40
-	movs r0, #0x61
-	rsbs r0, r0, #0
-	ldrb r1, [r2]
-	ands r0, r1
-	movs r1, #0x20
-	orrs r0, r1
-	strb r0, [r2]
-	movs r2, #1
-	rsbs r2, r2, #0
-	movs r0, #3
-	movs r1, #0
-	bl sub_0808068C
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08012CD4: .4byte 0x0202BBF4
-
-	thumb_func_start sub_08012CD8
-sub_08012CD8: @ 0x08012CD8
-	movs r1, #0x14
-	strh r1, [r0, #0x2e]
-	bx lr
-	.align 2, 0
-
-	thumb_func_start sub_08012CE0
-sub_08012CE0: @ 0x08012CE0
-	push {r4, lr}
-	adds r4, r0, #0
-	ldr r0, _08012CFC @ =0x08BBFC7C
-	ldr r1, [r0]
-	movs r0, #8
-	ldrh r1, [r1, #4]
-	ands r0, r1
-	cmp r0, #0
-	bne _08012D00
-	adds r0, r4, #0
-	bl sub_0800457C
-	b _08012D44
-	.align 2, 0
-_08012CFC: .4byte 0x08BBFC7C
-_08012D00:
-	ldrh r0, [r4, #0x2e]
-	subs r0, #1
-	strh r0, [r4, #0x2e]
-	lsls r0, r0, #0x10
-	cmp r0, #0
-	bge _08012D44
-	movs r0, #3
-	bl IsValidSuspendSave
-	lsls r0, r0, #0x18
-	cmp r0, #0
-	beq _08012D28
-	movs r0, #3
-	bl ReadSuspendSave
-	adds r0, r4, #0
-	movs r1, #6
-	bl sub_080045FC
-	b _08012D44
-_08012D28:
-	movs r0, #0x5a
-	movs r1, #0
-	bl sub_08003684
-	movs r0, #0
-	movs r1, #0xc0
-	movs r2, #0x3c
-	movs r3, #0
-	bl sub_08003B4C
-	adds r0, r4, #0
-	movs r1, #4
-	bl sub_080045FC
-_08012D44:
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08012D4C
-sub_08012D4C: @ 0x08012D4C
-	push {lr}
-	adds r1, r0, #0
-	adds r1, #0x26
-	ldrb r1, [r1]
-	cmp r1, #0xb
-	beq _08012D5C
-	bl sub_08004460
-_08012D5C:
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08012D60
-sub_08012D60: @ 0x08012D60
-	push {lr}
-	sub sp, #4
-	movs r0, #0
-	str r0, [sp]
-	ldr r1, _08012D88 @ =0x02022860
-	ldr r2, _08012D8C @ =0x01000100
-	mov r0, sp
-	bl CpuFastSet
-	bl sub_08001034
-	ldr r0, _08012D90 @ =sub_08012D4C
-	bl sub_08004648
-	ldr r0, _08012D94 @ =OnGameLoopMain
-	bl SetMainUpdateRoutine
-	add sp, #4
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08012D88: .4byte 0x02022860
-_08012D8C: .4byte 0x01000100
-_08012D90: .4byte sub_08012D4C
-_08012D94: .4byte OnGameLoopMain
-
-	thumb_func_start sub_08012D98
-sub_08012D98: @ 0x08012D98
-	push {lr}
-	movs r0, #0x5a
-	movs r1, #0
-	bl sub_08003684
-	movs r0, #0
-	movs r1, #0xc0
-	movs r2, #0x3c
-	movs r3, #0
-	bl sub_08003B4C
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08012DB4
-sub_08012DB4: @ 0x08012DB4
-	push {lr}
-	movs r0, #0x80
-	lsls r0, r0, #1
-	movs r1, #0xc0
-	movs r2, #0x20
-	movs r3, #0
-	bl sub_08003B4C
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08012DC8
-sub_08012DC8: @ 0x08012DC8
-	push {r4, r5, lr}
-	adds r4, r0, #0
-	adds r0, #0x29
-	ldrb r1, [r0]
-	cmp r1, #1
-	beq _08012E02
-	cmp r1, #1
-	bgt _08012DDE
-	cmp r1, #0
-	beq _08012DF2
-	b _08012E38
-_08012DDE:
-	cmp r1, #2
-	beq _08012DE8
-	cmp r1, #3
-	beq _08012E30
-	b _08012E38
-_08012DE8:
-	adds r0, r4, #0
-	movs r1, #3
-	bl sub_080045FC
-	b _08012E38
-_08012DF2:
-	adds r0, r4, #0
-	movs r1, #4
-	bl sub_080045FC
-	adds r0, r4, #0
-	bl sub_08012DB4
-	b _08012E38
-_08012E02:
-	adds r0, r4, #0
-	adds r0, #0x2b
-	ldrb r2, [r0]
-	ands r1, r2
-	adds r5, r0, #0
-	cmp r1, #0
-	beq _08012E16
-	cmp r1, #1
-	beq _08012E20
-	b _08012E28
-_08012E16:
-	adds r0, r4, #0
-	movs r1, #1
-	bl sub_080045FC
-	b _08012E28
-_08012E20:
-	adds r0, r4, #0
-	movs r1, #0
-	bl sub_080045FC
-_08012E28:
-	ldrb r0, [r5]
-	adds r0, #1
-	strb r0, [r5]
-	b _08012E38
-_08012E30:
-	adds r0, r4, #0
-	movs r1, #0x15
-	bl sub_080045FC
-_08012E38:
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08012E40
-sub_08012E40: @ 0x08012E40
-	push {lr}
-	adds r1, r0, #0
-	adds r1, #0x29
-	ldrb r1, [r1]
-	cmp r1, #0
-	beq _08012E52
-	cmp r1, #1
-	beq _08012E5A
-	b _08012E60
-_08012E52:
-	movs r1, #3
-	bl sub_080045FC
-	b _08012E60
-_08012E5A:
-	movs r1, #0
-	bl sub_080045FC
-_08012E60:
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08012E64
-sub_08012E64: @ 0x08012E64
-	push {r4, lr}
-	adds r4, r0, #0
-	adds r0, #0x29
-	ldrb r0, [r0]
-	cmp r0, #8
-	bhi _08012F24
-	lsls r0, r0, #2
-	ldr r1, _08012E7C @ =_08012E80
-	adds r0, r0, r1
-	ldr r0, [r0]
-	mov pc, r0
-	.align 2, 0
-_08012E7C: .4byte _08012E80
-_08012E80: @ jump table
-	.4byte _08012EA4 @ case 0
-	.4byte _08012EA4 @ case 1
-	.4byte _08012EA4 @ case 2
-	.4byte _08012EA4 @ case 3
-	.4byte _08012EF4 @ case 4
-	.4byte _08012EFE @ case 5
-	.4byte _08012F08 @ case 6
-	.4byte _08012F12 @ case 7
-	.4byte _08012F1C @ case 8
-_08012EA4:
-	bl sub_080A0580
-	cmp r0, #0xb
-	bne _08012EB6
-	adds r0, r4, #0
-	movs r1, #0x14
-	bl sub_080045FC
-	b _08012F24
-_08012EB6:
-	bl sub_0802EBB0
-	ldrb r0, [r0]
-	cmp r0, #0
-	bne _08012EE6
-	ldr r1, _08012ED8 @ =0x0202BBF4
-	adds r1, #0x2b
-	movs r0, #1
-	ldrb r1, [r1]
-	ands r0, r1
-	cmp r0, #0
-	beq _08012EDC
-	adds r0, r4, #0
-	movs r1, #0x12
-	bl sub_080045FC
-	b _08012F24
-	.align 2, 0
-_08012ED8: .4byte 0x0202BBF4
-_08012EDC:
-	ldr r0, _08012EF0 @ =0x00000569
-	bl sub_08013318
-	bl sub_0802EBB8
-_08012EE6:
-	adds r0, r4, #0
-	movs r1, #5
-	bl sub_080045FC
-	b _08012F24
-	.align 2, 0
-_08012EF0: .4byte 0x00000569
-_08012EF4:
-	adds r0, r4, #0
-	movs r1, #6
-	bl sub_080045FC
-	b _08012F24
-_08012EFE:
-	adds r0, r4, #0
-	movs r1, #0x16
-	bl sub_080045FC
-	b _08012F24
-_08012F08:
-	adds r0, r4, #0
-	movs r1, #0xa
-	bl sub_080045FC
-	b _08012F24
-_08012F12:
-	adds r0, r4, #0
-	movs r1, #0xb
-	bl sub_080045FC
-	b _08012F24
-_08012F1C:
-	adds r0, r4, #0
-	movs r1, #0xc
-	bl sub_080045FC
-_08012F24:
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08012F2C
-sub_08012F2C: @ 0x08012F2C
-	push {lr}
-	adds r1, r0, #0
-	adds r1, #0x29
-	ldrb r1, [r1]
-	cmp r1, #5
-	bne _08012F3E
-	movs r1, #3
-	bl sub_080045FC
-_08012F3E:
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08012F44
-sub_08012F44: @ 0x08012F44
-	push {lr}
-	movs r1, #3
-	bl sub_080045FC
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08012F50
-sub_08012F50: @ 0x08012F50
-	push {lr}
-	adds r1, r0, #0
-	adds r1, #0x29
-	ldrb r1, [r1]
-	cmp r1, #0
-	beq _08012F66
-	cmp r1, #1
-	bne _08012F66
-	movs r1, #0x10
-	bl sub_080045FC
-_08012F66:
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08012F6C
-sub_08012F6C: @ 0x08012F6C
-	push {r4, r5, lr}
-	adds r5, r0, #0
-	adds r0, #0x29
-	ldrb r0, [r0]
-	cmp r0, #5
-	bne _08012F82
-	adds r0, r5, #0
-	movs r1, #4
-	bl sub_080045FC
-	b _08012FA6
-_08012F82:
-	movs r0, #0
-	bl sub_0802E3E0
-	ldr r4, _08012FAC @ =0x0202BBF4
-	movs r0, #8
-	ldrb r1, [r4, #0x14]
-	orrs r0, r1
-	strb r0, [r4, #0x14]
-	bl sub_0807A0A0
-	bl sub_08079FDC
-	bl InitUnits
-	adds r0, r5, #0
-	adds r0, #0x2a
-	ldrb r0, [r0]
-	strb r0, [r4, #0xe]
-_08012FA6:
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08012FAC: .4byte 0x0202BBF4
-
-	thumb_func_start sub_08012FB0
-sub_08012FB0: @ 0x08012FB0
-	push {lr}
-	bl sub_080A2BFC
-	bl ClearPidStats
-	bl sub_0802E8A0
-	ldr r1, _08012FC8 @ =0x0202BBF4
-	movs r0, #0x30
-	strb r0, [r1, #0xe]
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08012FC8: .4byte 0x0202BBF4
-
-	thumb_func_start sub_08012FCC
-sub_08012FCC: @ 0x08012FCC
-	push {lr}
-	movs r0, #3
-	bl sub_080A1A60
-	ldr r1, _08012FE8 @ =0x0202BBF4
-	adds r1, #0x41
-	movs r0, #2
-	rsbs r0, r0, #0
-	ldrb r2, [r1]
-	ands r0, r2
-	strb r0, [r1]
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08012FE8: .4byte 0x0202BBF4
-
-	thumb_func_start sub_08012FEC
-sub_08012FEC: @ 0x08012FEC
-	push {r4, lr}
-	adds r4, r0, #0
-	bl sub_0806D4A4
-	adds r0, r4, #0
-	adds r0, #0x29
-	ldrb r0, [r0]
-	cmp r0, #5
-	bhi _0801304A
-	lsls r0, r0, #2
-	ldr r1, _08013008 @ =_0801300C
-	adds r0, r0, r1
-	ldr r0, [r0]
-	mov pc, r0
-	.align 2, 0
-_08013008: .4byte _0801300C
-_0801300C: @ jump table
-	.4byte _08013024 @ case 0
-	.4byte _0801304A @ case 1
-	.4byte _0801302E @ case 2
-	.4byte _08013038 @ case 3
-	.4byte _08013042 @ case 4
-	.4byte _08013042 @ case 5
-_08013024:
-	adds r0, r4, #0
-	movs r1, #3
-	bl sub_080045FC
-	b _0801304A
-_0801302E:
-	adds r0, r4, #0
-	movs r1, #0xd
-	bl sub_080045FC
-	b _0801304A
-_08013038:
-	adds r0, r4, #0
-	movs r1, #0x13
-	bl sub_080045FC
-	b _0801304A
-_08013042:
-	adds r0, r4, #0
-	movs r1, #0xd
-	bl sub_080045FC
-_0801304A:
-	pop {r4}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08013050
-sub_08013050: @ 0x08013050
-	push {lr}
-	adds r2, r0, #0
-	ldr r1, _0801306C @ =0x0202BBF4
-	movs r0, #0x20
-	ldrb r1, [r1, #0x14]
-	ands r0, r1
-	cmp r0, #0
-	beq _08013068
-	adds r0, r2, #0
-	movs r1, #0xe
-	bl sub_080045FC
-_08013068:
-	pop {r0}
-	bx r0
-	.align 2, 0
-_0801306C: .4byte 0x0202BBF4
-
-	thumb_func_start sub_08013070
-sub_08013070: @ 0x08013070
-	push {lr}
-	adds r2, r0, #0
-	ldr r1, _0801308C @ =0x0202BBF4
-	movs r0, #0x80
-	ldrb r1, [r1, #0x14]
-	ands r0, r1
-	cmp r0, #0
-	beq _08013090
-	adds r0, r2, #0
-	movs r1, #8
-	bl sub_080045FC
-	b _08013098
-	.align 2, 0
-_0801308C: .4byte 0x0202BBF4
-_08013090:
-	adds r0, r2, #0
-	movs r1, #7
-	bl sub_080045FC
-_08013098:
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_0801309C
-sub_0801309C: @ 0x0801309C
-	push {r4, r5, lr}
-	adds r4, r0, #0
-	ldr r5, _080130BC @ =0x0202BBF4
-	adds r0, r5, #0
-	bl sub_080A05A0
-	bl sub_080B7880
-	adds r4, #0x2a
-	ldrb r0, [r4]
-	strb r0, [r5, #0xe]
-	bl sub_0802E8A0
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080130BC: .4byte 0x0202BBF4
-
-	thumb_func_start sub_080130C0
-sub_080130C0: @ 0x080130C0
-	push {lr}
-	adds r1, r0, #0
-	ldr r0, _080130D8 @ =0x0202BBF4
-	ldrb r0, [r0, #0xe]
-	cmp r0, #0x2f
-	beq _080130D2
-	adds r0, r1, #0
-	bl sub_080A5AF8
-_080130D2:
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080130D8: .4byte 0x0202BBF4
-
-	thumb_func_start sub_080130DC
-sub_080130DC: @ 0x080130DC
-	ldr r1, _080130E4 @ =0x0202BBF4
-	movs r0, #2
-	strb r0, [r1, #0x1b]
-	bx lr
-	.align 2, 0
-_080130E4: .4byte 0x0202BBF4
-
-	thumb_func_start sub_080130E8
-sub_080130E8: @ 0x080130E8
-	ldr r3, _08013120 @ =0x03002790
-	adds r2, r3, #0
-	adds r2, #0x3c
-	movs r0, #0xc0
-	ldrb r1, [r2]
-	orrs r0, r1
-	strb r0, [r2]
-	adds r0, r3, #0
-	adds r0, #0x44
-	movs r1, #0
-	strb r1, [r0]
-	adds r0, #1
-	strb r1, [r0]
-	adds r1, r3, #0
-	adds r1, #0x46
-	movs r0, #0x10
-	strb r0, [r1]
-	ldr r0, _08013124 @ =0x0000FFE0
-	ldrh r1, [r3, #0x3c]
-	ands r0, r1
-	movs r1, #0x1f
-	orrs r0, r1
-	strh r0, [r3, #0x3c]
-	movs r0, #0x20
-	ldrb r1, [r2]
-	orrs r0, r1
-	strb r0, [r2]
-	bx lr
-	.align 2, 0
-_08013120: .4byte 0x03002790
-_08013124: .4byte 0x0000FFE0
-
-	thumb_func_start sub_08013128
-sub_08013128: @ 0x08013128
-	push {lr}
-	movs r0, #0
-	bl sub_08002A44
-	ldr r0, _08013140 @ =0x0202BBF4
-	ldrb r0, [r0, #0x1b]
-	cmp r0, #2
-	beq _08013144
-	cmp r0, #3
-	beq _08013150
-	b _08013156
-	.align 2, 0
-_08013140: .4byte 0x0202BBF4
-_08013144:
-	ldr r0, _0801314C @ =0x08D8A0E0
-	bl sub_0800AE98
-	b _08013156
-	.align 2, 0
-_0801314C: .4byte 0x08D8A0E0
-_08013150:
-	ldr r0, _0801315C @ =0x08D8A114
-	bl sub_0800AE98
-_08013156:
-	pop {r0}
-	bx r0
-	.align 2, 0
-_0801315C: .4byte 0x08D8A114
-
-	thumb_func_start sub_08013160
-sub_08013160: @ 0x08013160
-	push {lr}
-	movs r0, #0
-	bl sub_08002A44
-	ldr r0, _08013178 @ =0x0202BBF4
-	ldrb r0, [r0, #0x1b]
-	cmp r0, #2
-	beq _0801317C
-	cmp r0, #3
-	beq _08013188
-	b _0801318E
-	.align 2, 0
-_08013178: .4byte 0x0202BBF4
-_0801317C:
-	ldr r0, _08013184 @ =0x08D8A148
-	bl sub_0800AE98
-	b _0801318E
-	.align 2, 0
-_08013184: .4byte 0x08D8A148
-_08013188:
-	ldr r0, _08013194 @ =0x08D8A1B4
-	bl sub_0800AE98
-_0801318E:
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08013194: .4byte 0x08D8A1B4
-
-	thumb_func_start sub_08013198
-sub_08013198: @ 0x08013198
-	ldr r1, _080131A4 @ =0x0202BBF4
-	ldrb r1, [r1, #0xe]
-	adds r0, #0x30
-	strb r1, [r0]
-	bx lr
-	.align 2, 0
-_080131A4: .4byte 0x0202BBF4
-
-	thumb_func_start sub_080131A8
-sub_080131A8: @ 0x080131A8
-	ldr r1, _080131B4 @ =0x0202BBF4
-	adds r0, #0x30
-	ldrb r0, [r0]
-	strb r0, [r1, #0xe]
-	bx lr
-	.align 2, 0
-_080131B4: .4byte 0x0202BBF4
-
-	thumb_func_start StartGame
-StartGame: @ 0x080131B8
-	push {lr}
-	ldr r0, _080131E4 @ =OnGameLoopMain
-	bl SetMainUpdateRoutine
-	ldr r0, _080131E8 @ =OnVBlank
-	bl SetInterrupt_LCDVBlank
-	ldr r0, _080131EC @ =0x08C01744
-	movs r1, #3
-	bl Proc_Start
-	adds r2, r0, #0
-	adds r2, #0x29
-	movs r1, #0
-	strb r1, [r2]
-	adds r2, #1
-	strb r1, [r2]
-	adds r0, #0x2b
-	strb r1, [r0]
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080131E4: .4byte OnGameLoopMain
-_080131E8: .4byte OnVBlank
-_080131EC: .4byte 0x08C01744
-
-	thumb_func_start sub_080131F0
-sub_080131F0: @ 0x080131F0
-	push {lr}
-	ldr r0, _080131FC @ =0x08C01744
-	bl sub_08004584
-	pop {r1}
-	bx r1
-	.align 2, 0
-_080131FC: .4byte 0x08C01744
-
-	thumb_func_start sub_08013200
-sub_08013200: @ 0x08013200
-	push {r4, lr}
-	adds r4, r0, #0
-	bl sub_080131F0
-	adds r0, #0x29
-	strb r4, [r0]
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08013214
-sub_08013214: @ 0x08013214
-	push {r4, lr}
-	adds r4, r0, #0
-	bl sub_080131F0
-	adds r0, #0x2a
-	strb r4, [r0]
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08013228
-sub_08013228: @ 0x08013228
-	push {lr}
-	bl sub_080131F0
-	adds r1, r0, #0
-	adds r1, #0x2a
-	ldrb r2, [r1]
-	rsbs r0, r2, #0
-	orrs r0, r2
-	lsrs r0, r0, #0x1f
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_08013240
-sub_08013240: @ 0x08013240
-	push {r4, lr}
-	ldr r4, _08013260 @ =0x08C01744
-	adds r0, r4, #0
-	bl sub_08004748
-	adds r0, r4, #0
-	movs r1, #3
-	bl Proc_Start
-	movs r1, #5
-	bl sub_080045FC
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08013260: .4byte 0x08C01744
-
-	thumb_func_start sub_08013264
-sub_08013264: @ 0x08013264
-	push {r4, lr}
-	ldr r4, _08013284 @ =0x08C01744
-	adds r0, r4, #0
-	bl sub_08004748
-	adds r0, r4, #0
-	movs r1, #3
-	bl Proc_Start
-	movs r1, #6
-	bl sub_080045FC
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08013284: .4byte 0x08C01744
-
-	thumb_func_start sub_08013288
-sub_08013288: @ 0x08013288
-	push {r4, lr}
-	ldr r4, _080132A8 @ =0x08C01744
-	adds r0, r4, #0
-	bl sub_08004748
-	adds r0, r4, #0
-	movs r1, #3
-	bl Proc_Start
-	movs r1, #0xf
-	bl sub_080045FC
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080132A8: .4byte 0x08C01744
-
-	thumb_func_start sub_080132AC
-sub_080132AC: @ 0x080132AC
-	ldr r0, _080132C4 @ =0x0202BBF4
-	adds r0, #0x41
-	movs r1, #2
-	rsbs r1, r1, #0
-	ldrb r2, [r0]
-	ands r1, r2
-	movs r2, #3
-	rsbs r2, r2, #0
-	ands r1, r2
-	strb r1, [r0]
-	bx lr
-	.align 2, 0
-_080132C4: .4byte 0x0202BBF4
-
-	thumb_func_start sub_080132C8
-sub_080132C8: @ 0x080132C8
-	push {r4, r5, lr}
-	ldr r1, _08013314 @ =0x0202BBF4
-	adds r2, r1, #0
-	adds r2, #0x42
-	movs r0, #7
-	rsbs r0, r0, #0
-	ldrb r3, [r2]
-	ands r0, r3
-	strb r0, [r2]
-	adds r5, r1, #0
-	adds r5, #0x40
-	movs r2, #0x61
-	rsbs r2, r2, #0
-	ldrb r0, [r5]
-	ands r2, r0
-	movs r0, #0x20
-	orrs r2, r0
-	movs r0, #0x7f
-	ands r2, r0
-	adds r3, r1, #0
-	adds r3, #0x41
-	movs r4, #2
-	rsbs r4, r4, #0
-	adds r0, r4, #0
-	ldrb r1, [r3]
-	ands r0, r1
-	movs r1, #2
-	orrs r0, r1
-	movs r1, #0xd
-	rsbs r1, r1, #0
-	ands r0, r1
-	strb r0, [r3]
-	ands r2, r4
-	strb r2, [r5]
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08013314: .4byte 0x0202BBF4
-
-	thumb_func_start sub_08013318
-sub_08013318: @ 0x08013318
-	push {r4, r5, r6, lr}
-	adds r5, r0, #0
-	ldr r6, _0801333C @ =0x0202B5B0
-	ldr r0, [r6]
-	cmp r5, r0
-	beq _08013348
-	ldr r1, _08013340 @ =0x08BBB370
-	lsls r0, r5, #2
-	adds r0, r0, r1
-	ldr r0, [r0]
-	ldr r4, _08013344 @ =0x0202A5B0
-	adds r1, r4, #0
-	bl sub_08004240
-	str r5, [r6]
-	adds r0, r4, #0
-	b _0801334A
-	.align 2, 0
-_0801333C: .4byte 0x0202B5B0
-_08013340: .4byte 0x08BBB370
-_08013344: .4byte 0x0202A5B0
-_08013348:
-	ldr r0, _08013350 @ =0x0202A5B0
-_0801334A:
-	pop {r4, r5, r6}
-	pop {r1}
-	bx r1
-	.align 2, 0
-_08013350: .4byte 0x0202A5B0
-
-	thumb_func_start sub_08013354
-sub_08013354: @ 0x08013354
-	push {r4, lr}
-	adds r4, r1, #0
-	ldr r1, _08013370 @ =0x08BBB370
-	lsls r0, r0, #2
-	adds r0, r0, r1
-	ldr r0, [r0]
-	adds r1, r4, #0
-	bl sub_08004240
-	adds r0, r4, #0
-	pop {r4}
-	pop {r1}
-	bx r1
-	.align 2, 0
-_08013370: .4byte 0x08BBB370
-
-	thumb_func_start sub_08013374
-sub_08013374: @ 0x08013374
-	push {r4, r5, lr}
-	ldr r5, _0801338C @ =0x0202A9B0
-	movs r0, #0x80
-	lsls r0, r0, #3
-	adds r4, r5, r0
-	ldr r0, _08013390 @ =0xFFFFFC00
-	adds r1, r5, r0
-	adds r0, r5, #0
-	bl CopyString
-	b _0801346C
-	.align 2, 0
-_0801338C: .4byte 0x0202A9B0
-_08013390: .4byte 0xFFFFFC00
-_08013394:
-	adds r0, r1, #0
-	cmp r0, #0x1f
-	bhi _0801339E
-	strb r1, [r4]
-	b _0801343A
-_0801339E:
-	cmp r0, #0x80
-	beq _080133A8
-	strb r1, [r4]
-	adds r5, #1
-	b _08013434
-_080133A8:
-	adds r5, #1
-	ldrb r0, [r5]
-	subs r0, #0x12
-	cmp r0, #0x10
-	bhi _08013430
-	lsls r0, r0, #2
-	ldr r1, _080133BC @ =_080133C0
-	adds r0, r0, r1
-	ldr r0, [r0]
-	mov pc, r0
-	.align 2, 0
-_080133BC: .4byte _080133C0
-_080133C0: @ jump table
-	.4byte _08013404 @ case 0
-	.4byte _08013408 @ case 1
-	.4byte _0801340C @ case 2
-	.4byte _08013410 @ case 3
-	.4byte _08013430 @ case 4
-	.4byte _08013430 @ case 5
-	.4byte _08013430 @ case 6
-	.4byte _08013430 @ case 7
-	.4byte _08013430 @ case 8
-	.4byte _08013430 @ case 9
-	.4byte _08013430 @ case 10
-	.4byte _08013430 @ case 11
-	.4byte _08013430 @ case 12
-	.4byte _08013430 @ case 13
-	.4byte _08013414 @ case 14
-	.4byte _08013430 @ case 15
-	.4byte _0801341A @ case 16
-_08013404:
-	movs r1, #0
-	b _08013440
-_08013408:
-	movs r1, #1
-	b _08013440
-_0801340C:
-	movs r1, #2
-	b _08013440
-_08013410:
-	movs r1, #3
-	b _08013440
-_08013414:
-	bl sub_0802EBB0
-	b _08013422
-_0801341A:
-	ldr r0, _0801342C @ =0x0203A858
-	ldrh r0, [r0, #6]
-	bl sub_08017610
-_08013422:
-	adds r1, r0, #0
-	adds r0, r4, #0
-	bl CopyString
-	b _0801345A
-	.align 2, 0
-_0801342C: .4byte 0x0203A858
-_08013430:
-	movs r0, #0x80
-	strb r0, [r4]
-_08013434:
-	adds r4, #1
-	ldrb r0, [r5]
-	strb r0, [r4]
-_0801343A:
-	adds r5, #1
-	adds r4, #1
-	b _0801346C
-_08013440:
-	ldr r0, _08013480 @ =0x0202BBF4
-	adds r0, #0x1c
-	adds r0, r1, r0
-	ldrb r0, [r0]
-	bl sub_08019120
-	ldrh r0, [r0]
-	bl sub_08013318
-	adds r1, r0, #0
-	adds r0, r4, #0
-	bl CopyString
-_0801345A:
-	ldrb r0, [r4]
-	adds r1, r5, #1
-	cmp r0, #0
-	beq _0801346A
-_08013462:
-	adds r4, #1
-	ldrb r0, [r4]
-	cmp r0, #0
-	bne _08013462
-_0801346A:
-	adds r5, r1, #0
-_0801346C:
-	ldrb r1, [r5]
-	cmp r1, #0
-	bne _08013394
-	movs r0, #0
-	strb r0, [r4]
-	ldr r0, _08013484 @ =0x0202ADB0
-	pop {r4, r5}
-	pop {r1}
-	bx r1
-	.align 2, 0
-_08013480: .4byte 0x0202BBF4
-_08013484: .4byte 0x0202ADB0
-
-	thumb_func_start sub_08013488
-sub_08013488: @ 0x08013488
-	push {r4, r5, lr}
-	ldr r5, _080134A0 @ =0x0202B3B0
-	movs r0, #0x80
-	lsls r0, r0, #1
-	adds r4, r5, r0
-	ldr r0, _080134A4 @ =0xFFFFF200
-	adds r1, r5, r0
-	adds r0, r5, #0
-	bl CopyString
-	b _080134F0
-	.align 2, 0
-_080134A0: .4byte 0x0202B3B0
-_080134A4: .4byte 0xFFFFF200
-_080134A8:
-	adds r0, r1, #0
-	cmp r0, #0x1f
-	bhi _080134B2
-	strb r1, [r4]
-	b _080134CC
-_080134B2:
-	cmp r0, #0x80
-	beq _080134BC
-	strb r1, [r4]
-	adds r5, #1
-	b _080134C6
-_080134BC:
-	adds r5, #1
-	ldrb r1, [r5]
-	cmp r1, #0x20
-	beq _080134D2
-	strb r0, [r4]
-_080134C6:
-	adds r4, #1
-	ldrb r0, [r5]
-	strb r0, [r4]
-_080134CC:
-	adds r5, #1
-	adds r4, #1
-	b _080134F0
-_080134D2:
-	bl sub_0802EBB0
-	adds r1, r0, #0
-	adds r0, r4, #0
-	bl CopyString
-	ldrb r0, [r4]
-	adds r1, r5, #1
-	cmp r0, #0
-	beq _080134EE
-_080134E6:
-	adds r4, #1
-	ldrb r0, [r4]
-	cmp r0, #0
-	bne _080134E6
-_080134EE:
-	adds r5, r1, #0
-_080134F0:
-	ldrb r1, [r5]
-	cmp r1, #0
-	bne _080134A8
-	movs r0, #0
-	strb r0, [r4]
-	ldr r0, _08013504 @ =0x0202B4B0
-	pop {r4, r5}
-	pop {r1}
-	bx r1
-	.align 2, 0
-_08013504: .4byte 0x0202B4B0
-
-	thumb_func_start sub_08013508
-sub_08013508: @ 0x08013508
-	push {r4, r5, r6, lr}
-	adds r6, r1, #0
-	ldr r5, [sp, #0x10]
-	cmp r5, #0
-	bne _08013516
-	adds r0, r2, #0
-	b _080135CA
-_08013516:
-	cmp r0, #5
-	bhi _080135C8
-	lsls r0, r0, #2
-	ldr r1, _08013524 @ =_08013528
-	adds r0, r0, r1
-	ldr r0, [r0]
-	mov pc, r0
-	.align 2, 0
-_08013524: .4byte _08013528
-_08013528: @ jump table
-	.4byte _08013540 @ case 0
-	.4byte _0801354C @ case 1
-	.4byte _0801355C @ case 2
-	.4byte _08013570 @ case 3
-	.4byte _08013594 @ case 4
-	.4byte _080135A6 @ case 5
-_08013540:
-	subs r0, r2, r6
-	adds r2, r0, #0
-	muls r2, r3, r2
-	adds r0, r2, #0
-	adds r1, r5, #0
-	b _0801358C
-_0801354C:
-	adds r0, r3, #0
-	muls r0, r3, r0
-	subs r1, r2, r6
-	adds r2, r0, #0
-	muls r2, r1, r2
-	adds r1, r5, #0
-	muls r1, r5, r1
-	b _0801358A
-_0801355C:
-	adds r0, r3, #0
-	muls r0, r3, r0
-	adds r1, r0, #0
-	muls r1, r3, r1
-	subs r0, r2, r6
-	adds r2, r1, #0
-	muls r2, r0, r2
-	adds r0, r5, #0
-	muls r0, r5, r0
-	b _08013586
-_08013570:
-	adds r0, r3, #0
-	muls r0, r3, r0
-	muls r0, r3, r0
-	adds r1, r0, #0
-	muls r1, r3, r1
-	subs r0, r2, r6
-	adds r2, r1, #0
-	muls r2, r0, r2
-	adds r0, r5, #0
-	muls r0, r5, r0
-	muls r0, r5, r0
-_08013586:
-	adds r1, r0, #0
-	muls r1, r5, r1
-_0801358A:
-	adds r0, r2, #0
-_0801358C:
-	bl Div
-	adds r0, r6, r0
-	b _080135CA
-_08013594:
-	subs r1, r5, r3
-	adds r0, r1, #0
-	muls r0, r1, r0
-	subs r4, r2, r6
-	adds r2, r0, #0
-	muls r2, r4, r2
-	adds r1, r5, #0
-	muls r1, r5, r1
-	b _080135BC
-_080135A6:
-	subs r1, r5, r3
-	adds r0, r1, #0
-	muls r0, r1, r0
-	muls r0, r1, r0
-	subs r4, r2, r6
-	adds r2, r0, #0
-	muls r2, r4, r2
-	adds r0, r5, #0
-	muls r0, r5, r0
-	adds r1, r0, #0
-	muls r1, r5, r1
-_080135BC:
-	adds r0, r2, #0
-	bl Div
-	adds r4, r6, r4
-	subs r0, r4, r0
-	b _080135CA
-_080135C8:
-	movs r0, #0
-_080135CA:
-	pop {r4, r5, r6}
-	pop {r1}
-	bx r1
-
-	thumb_func_start nullsub_33
-nullsub_33: @ 0x080135D0
-	bx lr
-	.align 2, 0
-
-	thumb_func_start StringCompare
-StringCompare: @ 0x080135D4
-	push {r4, lr}
-	adds r4, r0, #0
-	b _080135E6
-_080135DA:
-	adds r1, #1
-	adds r4, #1
-	cmp r2, r3
-	beq _080135E6
-	movs r0, #0
-	b _080135F4
-_080135E6:
-	ldrb r2, [r4]
-	ldrb r3, [r1]
-	adds r0, r3, #0
-	orrs r0, r2
-	cmp r0, #0
-	bne _080135DA
-	movs r0, #1
-_080135F4:
-	pop {r4}
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start CopyString
-CopyString: @ 0x080135FC
-	adds r3, r0, #0
-	b _08013606
-_08013600:
-	strb r2, [r3]
-	adds r1, #1
-	adds r3, #1
-_08013606:
-	ldrb r2, [r1]
-	cmp r2, #0
-	bne _08013600
-	ldrb r0, [r1]
-	strb r0, [r3]
-	bx lr
-	.align 2, 0
-
-	thumb_func_start sub_08013614
-sub_08013614: @ 0x08013614
-	push {r4, r5, lr}
-	adds r4, r0, #0
-	adds r5, r1, #0
-	bl sub_080136C8
-	adds r2, r0, #0
-	subs r1, r2, #4
-	movs r0, #0x1f
-	ands r0, r1
-	cmp r0, #0
-	beq _0801363C
-	adds r0, r4, #4
-	lsrs r2, r1, #0x1f
-	adds r2, r1, r2
-	lsls r2, r2, #0xa
-	lsrs r2, r2, #0xb
-	adds r1, r5, #0
-	bl CpuSet
-	b _08013652
-_0801363C:
-	adds r3, r4, #4
-	adds r0, r1, #0
-	cmp r0, #0
-	bge _08013646
-	subs r0, r2, #1
-_08013646:
-	lsls r2, r0, #9
-	lsrs r2, r2, #0xb
-	adds r0, r3, #0
-	adds r1, r5, #0
-	bl CpuFastSet
-_08013652:
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08013658
-sub_08013658: @ 0x08013658
-	push {r4, r5, r6, lr}
-	adds r4, r0, #0
-	adds r5, r1, #0
-	ldr r6, _08013684 @ =0x02020140
-	adds r1, r6, #0
-	bl LZ77UnCompWram
-	adds r0, r4, #0
-	bl sub_080136C8
-	cmp r0, #0
-	bge _08013672
-	adds r0, #3
-_08013672:
-	lsls r2, r0, #9
-	lsrs r2, r2, #0xb
-	adds r0, r6, #0
-	adds r1, r5, #0
-	bl CpuFastSet
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08013684: .4byte 0x02020140
-
-	thumb_func_start sub_08013688
-sub_08013688: @ 0x08013688
-	push {r4, r5, lr}
-	adds r3, r0, #0
-	adds r4, r1, #0
-	movs r0, #0xfa
-	lsls r0, r0, #0x18
-	adds r1, r4, r0
-	ldr r0, _080136C0 @ =0x00017FFF
-	movs r2, #1
-	cmp r1, r0
-	bhi _0801369E
-	movs r2, #0
-_0801369E:
-	ldr r0, _080136C4 @ =0x08C01B84
-	movs r1, #0xf0
-	ldrb r5, [r3]
-	ands r1, r5
-	lsrs r1, r1, #3
-	adds r1, r2, r1
-	lsls r1, r1, #2
-	adds r1, r1, r0
-	ldr r2, [r1]
-	adds r0, r3, #0
-	adds r1, r4, #0
-	bl _call_via_r2
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080136C0: .4byte 0x00017FFF
-_080136C4: .4byte 0x08C01B84
-
-	thumb_func_start sub_080136C8
-sub_080136C8: @ 0x080136C8
-	ldr r0, [r0]
-	lsrs r0, r0, #8
-	bx lr
-	.align 2, 0
-
-	thumb_func_start sub_080136D0
-sub_080136D0: @ 0x080136D0
-	adds r3, r2, #0
-	str r3, [r0]
-	ldr r2, _080136E4 @ =0x0000FFE0
-	ands r1, r2
-	asrs r1, r1, #5
-	ands r2, r3
-	asrs r3, r2, #5
-	subs r1, r3, r1
-	str r1, [r0, #4]
-	bx lr
-	.align 2, 0
-_080136E4: .4byte 0x0000FFE0
-
-	thumb_func_start sub_080136E8
-sub_080136E8: @ 0x080136E8
-	push {r4, r5, lr}
-	adds r5, r0, #0
-	adds r4, r1, #0
-	ldr r1, [r5]
-	adds r0, r4, #0
-	bl sub_08013688
-	adds r0, r4, #0
-	bl sub_080136C8
-	ldr r1, [r5]
-	adds r1, r1, r0
-	str r1, [r5]
-	ldr r1, [r5, #4]
-	cmp r0, #0
-	bge _0801370A
-	adds r0, #0x1f
-_0801370A:
-	asrs r0, r0, #5
-	adds r0, r1, r0
-	str r0, [r5, #4]
-	adds r0, r1, #0
-	pop {r4, r5}
-	pop {r1}
-	bx r1
-
-	thumb_func_start sub_08013718
-sub_08013718: @ 0x08013718
-	lsls r3, r1, #5
-	ldr r2, [r0]
-	adds r2, r2, r3
-	str r2, [r0]
-	ldr r2, [r0, #4]
-	adds r1, r2, r1
-	str r1, [r0, #4]
-	adds r0, r2, #0
-	bx lr
-	.align 2, 0
-
-	thumb_func_start sub_0801372C
-sub_0801372C: @ 0x0801372C
-	push {r4, r5, r6, r7, lr}
-	adds r6, r0, #0
-	adds r5, r1, #0
-	lsls r7, r2, #5
-	cmp r3, #0
-	ble _08013752
-	adds r4, r3, #0
-_0801373A:
-	adds r0, r6, #0
-	adds r1, r5, #0
-	adds r2, r7, #0
-	bl sub_08002F54
-	adds r6, r6, r7
-	movs r0, #0x80
-	lsls r0, r0, #3
-	adds r5, r5, r0
-	subs r4, #1
-	cmp r4, #0
-	bne _0801373A
-_08013752:
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08013758
-sub_08013758: @ 0x08013758
-	push {r4, r5, r6, r7, lr}
-	adds r7, r0, #0
-	adds r6, r1, #0
-	lsls r4, r2, #5
-	cmp r3, #0
-	ble _08013788
-	adds r5, r3, #0
-_08013766:
-	adds r2, r4, #0
-	cmp r4, #0
-	bge _0801376E
-	adds r2, r4, #3
-_0801376E:
-	lsls r2, r2, #9
-	lsrs r2, r2, #0xb
-	adds r0, r7, #0
-	adds r1, r6, #0
-	bl CpuFastSet
-	adds r7, r7, r4
-	movs r0, #0x80
-	lsls r0, r0, #3
-	adds r6, r6, r0
-	subs r5, #1
-	cmp r5, #0
-	bne _08013766
-_08013788:
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08013790
-sub_08013790: @ 0x08013790
-	push {r4, r5, r6, r7, lr}
-	mov r7, sb
-	mov r6, r8
-	push {r6, r7}
-	adds r6, r0, #0
-	adds r5, r1, #0
-	adds r7, r2, #0
-	cmp r3, #0
-	ble _080137C0
-	lsls r0, r7, #6
-	mov sb, r0
-	adds r4, r3, #0
-	lsls r0, r7, #5
-	mov r8, r0
-_080137AC:
-	adds r0, r6, #0
-	adds r1, r5, #0
-	adds r2, r7, #0
-	bl sub_080137CC
-	add r6, sb
-	add r5, r8
-	subs r4, #1
-	cmp r4, #0
-	bne _080137AC
-_080137C0:
-	pop {r3, r4}
-	mov r8, r3
-	mov sb, r4
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_080137CC
-sub_080137CC: @ 0x080137CC
-	push {r4, r5, r6, r7, lr}
-	adds r6, r0, #0
-	adds r5, r1, #0
-	adds r7, r2, #0
-	cmp r7, #0
-	ble _080137EE
-	adds r4, r7, #0
-_080137DA:
-	adds r0, r6, #0
-	adds r1, r5, #0
-	adds r2, r7, #0
-	bl sub_080137F4
-	adds r6, #8
-	adds r5, #0x20
-	subs r4, #1
-	cmp r4, #0
-	bne _080137DA
-_080137EE:
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_080137F4
-sub_080137F4: @ 0x080137F4
-	push {r4, r5, lr}
-	adds r3, r0, #0
-	adds r4, r1, #0
-	movs r1, #7
-_080137FC:
-	ldrb r5, [r3, #7]
-	lsls r0, r5, #4
-	ldrb r5, [r3, #6]
-	orrs r0, r5
-	lsls r0, r0, #4
-	ldrb r5, [r3, #5]
-	orrs r0, r5
-	lsls r0, r0, #4
-	ldrb r5, [r3, #4]
-	orrs r0, r5
-	lsls r0, r0, #4
-	ldrb r5, [r3, #3]
-	orrs r0, r5
-	lsls r0, r0, #4
-	ldrb r5, [r3, #2]
-	orrs r0, r5
-	lsls r0, r0, #4
-	ldrb r5, [r3, #1]
-	orrs r0, r5
-	lsls r0, r0, #4
-	ldrb r5, [r3]
-	orrs r0, r5
-	stm r4!, {r0}
-	lsls r0, r2, #3
-	adds r3, r3, r0
-	subs r1, #1
-	cmp r1, #0
-	bge _080137FC
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_0801383C
-sub_0801383C: @ 0x0801383C
-	push {r4, r5, r6, lr}
-	adds r6, r0, #0
-	adds r4, r1, #0
-	adds r5, r2, #0
-	movs r0, #0
-	cmp r0, r3
-	bge _08013868
-_0801384A:
-	adds r2, r0, #1
-	cmp r5, #0
-	ble _08013862
-	lsls r0, r0, #6
-	adds r0, r0, r6
-	adds r1, r5, #0
-_08013856:
-	strh r4, [r0]
-	adds r4, #1
-	adds r0, #2
-	subs r1, #1
-	cmp r1, #0
-	bne _08013856
-_08013862:
-	adds r0, r2, #0
-	cmp r0, r3
-	blt _0801384A
-_08013868:
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08013870
-sub_08013870: @ 0x08013870
-	push {r4, r5, lr}
-	adds r4, r0, #0
-	adds r5, r2, #0
-	cmp r3, #0
-	ble _08013894
-	movs r2, #0
-_0801387C:
-	strh r2, [r0]
-	subs r0, #2
-	subs r3, #1
-	cmp r3, #0
-	bne _0801387C
-	b _08013894
-_08013888:
-	ldrb r2, [r1]
-	adds r0, r2, r5
-	subs r0, #0x30
-	strh r0, [r4]
-	subs r4, #2
-	subs r1, #1
-_08013894:
-	ldrb r0, [r1]
-	cmp r0, #0x20
-	bne _08013888
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_080138A0
-sub_080138A0: @ 0x080138A0
-	adds r0, #0x4c
-	strh r1, [r0]
-	bx lr
-	.align 2, 0
-
-	thumb_func_start sub_080138A8
-sub_080138A8: @ 0x080138A8
-	adds r0, #0x4c
-	ldrh r1, [r0]
-	adds r1, #1
-	ldr r2, _080138B8 @ =0x00007FFF
-	ands r1, r2
-	strh r1, [r0]
-	bx lr
-	.align 2, 0
-_080138B8: .4byte 0x00007FFF
-
-	thumb_func_start sub_080138BC
-sub_080138BC: @ 0x080138BC
-	adds r0, #0x4c
-	ldrh r1, [r0]
-	subs r1, #1
-	strh r1, [r0]
-	bx lr
-	.align 2, 0
-
-	thumb_func_start sub_080138C8
-sub_080138C8: @ 0x080138C8
-	push {r4, lr}
-	movs r1, #0x9f
-	movs r3, #0xf0
-	movs r4, #1
-	rsbs r4, r4, #0
-	adds r2, r4, #0
-_080138D4:
-	strh r3, [r0]
-	adds r0, #2
-	strh r2, [r0]
-	adds r0, #2
-	subs r1, #1
-	cmp r1, #0
-	bge _080138D4
-	pop {r4}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_080138E8
-sub_080138E8: @ 0x080138E8
-	push {r4, r5, r6, r7, lr}
-	mov r7, r8
-	push {r7}
-	mov r8, r0
-	adds r5, r1, #0
-	adds r4, r2, #0
-	ldr r6, [sp, #0x18]
-	cmp r4, r6
-	ble _08013906
-	adds r1, r3, #0
-	adds r3, r5, #0
-	adds r5, r1, #0
-	adds r1, r6, #0
-	adds r6, r4, #0
-	adds r4, r1, #0
-_08013906:
-	subs r0, r3, r5
-	lsls r0, r0, #0x10
-	subs r1, r6, r4
-	bl __divsi3
-	mov ip, r0
-	lsls r5, r5, #0x10
-	cmp r6, #0xa0
-	ble _0801391A
-	movs r6, #0xa0
-_0801391A:
-	cmp r4, #0
-	bge _0801392A
-	rsbs r0, r4, #0
-	mov r1, ip
-	muls r1, r0, r1
-	adds r0, r1, #0
-	adds r5, r5, r0
-	movs r4, #0
-_0801392A:
-	cmp r4, r6
-	bge _08013964
-	lsls r0, r4, #2
-	mov r2, r8
-	adds r1, r0, r2
-	adds r2, r1, #0
-_08013936:
-	asrs r3, r5, #0x10
-	cmp r3, #0xf0
-	ble _0801393E
-	movs r3, #0xf0
-_0801393E:
-	cmp r3, #0
-	bge _08013944
-	movs r3, #0
-_08013944:
-	movs r7, #0
-	ldrsh r0, [r1, r7]
-	cmp r0, r3
-	ble _0801394E
-	strh r3, [r1]
-_0801394E:
-	movs r7, #2
-	ldrsh r0, [r2, r7]
-	cmp r0, r3
-	bge _08013958
-	strh r3, [r2, #2]
-_08013958:
-	add r5, ip
-	adds r1, #4
-	adds r2, #4
-	adds r4, #1
-	cmp r4, r6
-	blt _08013936
-_08013964:
-	pop {r3}
-	mov r8, r3
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08013970
-sub_08013970: @ 0x08013970
-	push {r4, r5, r6, r7, lr}
-	mov r7, sl
-	mov r6, sb
-	mov r5, r8
-	push {r5, r6, r7}
-	sub sp, #0x1c
-	adds r6, r0, #0
-	str r6, [sp]
-	cmp r6, #0x50
-	ble _08013988
-	movs r0, #0x50
-	str r0, [sp]
-_08013988:
-	adds r2, r6, #0
-	movs r1, #0
-	mov sb, r1
-	cmp r2, #0
-	blt _08013A80
-	movs r3, #0
-	str r3, [sp, #4]
-	ldr r4, [sp]
-	lsls r0, r4, #2
-	ldr r7, _08013A94 @ =0x02020140
-	adds r0, r0, r7
-	mov sl, r0
-	str r0, [sp, #8]
-	rsbs r1, r2, #0
-	str r1, [sp, #0xc]
-	lsls r0, r2, #2
-	ldr r3, [sp, #8]
-	subs r3, r3, r0
-	str r3, [sp, #0x10]
-	ldr r4, [sp, #8]
-	adds r0, r0, r4
-	str r0, [sp, #0x14]
-_080139B4:
-	ldr r0, [sp]
-	add r0, sb
-	lsls r0, r0, #0x10
-	lsrs r0, r0, #0x10
-	str r0, [sp, #0x18]
-	cmp r0, #0x9f
-	bhi _080139C6
-	mov r7, sl
-	strh r2, [r7, #2]
-_080139C6:
-	ldr r0, [sp]
-	mov r1, sb
-	subs r0, r0, r1
-	mov r8, r0
-	lsls r0, r0, #0x10
-	lsrs r4, r0, #0x10
-	cmp r4, #0x9f
-	bhi _080139DA
-	ldr r3, [sp, #8]
-	strh r2, [r3, #2]
-_080139DA:
-	ldr r7, [sp]
-	adds r7, r7, r2
-	mov ip, r7
-	lsls r0, r7, #0x10
-	lsrs r3, r0, #0x10
-	cmp r3, #0x9f
-	bhi _080139EE
-	mov r1, sb
-	ldr r0, [sp, #0x14]
-	strh r1, [r0, #2]
-_080139EE:
-	ldr r7, [sp]
-	subs r5, r7, r2
-	lsls r0, r5, #0x10
-	lsrs r1, r0, #0x10
-	cmp r1, #0x9f
-	bhi _08013A00
-	mov r7, sb
-	ldr r0, [sp, #0x10]
-	strh r7, [r0, #2]
-_08013A00:
-	ldr r0, [sp, #0x18]
-	cmp r0, #0x9f
-	bhi _08013A0E
-	mov r7, sp
-	ldrh r0, [r7, #0xc]
-	mov r7, sl
-	strh r0, [r7]
-_08013A0E:
-	cmp r4, #0x9f
-	bhi _08013A20
-	mov r4, r8
-	lsls r0, r4, #2
-	ldr r7, _08013A94 @ =0x02020140
-	adds r0, r0, r7
-	mov r4, sp
-	ldrh r4, [r4, #0xc]
-	strh r4, [r0]
-_08013A20:
-	cmp r3, #0x9f
-	bhi _08013A32
-	mov r7, ip
-	lsls r0, r7, #2
-	ldr r3, _08013A94 @ =0x02020140
-	adds r0, r0, r3
-	mov r4, sp
-	ldrh r4, [r4, #4]
-	strh r4, [r0]
-_08013A32:
-	cmp r1, #0x9f
-	bhi _08013A42
-	lsls r0, r5, #2
-	ldr r7, _08013A94 @ =0x02020140
-	adds r0, r0, r7
-	mov r1, sp
-	ldrh r1, [r1, #4]
-	strh r1, [r0]
-_08013A42:
-	adds r1, r6, #1
-	mov r3, sb
-	lsls r0, r3, #1
-	subs r6, r1, r0
-	cmp r6, #0
-	bge _08013A68
-	subs r1, r2, #1
-	lsls r0, r1, #1
-	adds r6, r6, r0
-	ldr r4, [sp, #0xc]
-	adds r4, #1
-	str r4, [sp, #0xc]
-	ldr r7, [sp, #0x10]
-	adds r7, #4
-	str r7, [sp, #0x10]
-	ldr r0, [sp, #0x14]
-	subs r0, #4
-	str r0, [sp, #0x14]
-	adds r2, r1, #0
-_08013A68:
-	ldr r1, [sp, #4]
-	subs r1, #1
-	str r1, [sp, #4]
-	movs r3, #4
-	add sl, r3
-	ldr r4, [sp, #8]
-	subs r4, #4
-	str r4, [sp, #8]
-	movs r7, #1
-	add sb, r7
-	cmp r2, sb
-	bge _080139B4
-_08013A80:
-	ldr r0, _08013A94 @ =0x02020140
-	add sp, #0x1c
-	pop {r3, r4, r5}
-	mov r8, r3
-	mov sb, r4
-	mov sl, r5
-	pop {r4, r5, r6, r7}
-	pop {r1}
-	bx r1
-	.align 2, 0
-_08013A94: .4byte 0x02020140
-
-	thumb_func_start sub_08013A98
-sub_08013A98: @ 0x08013A98
-	push {r4, r5, r6, r7, lr}
-	adds r3, r0, #0
-	ldr r7, _08013AB4 @ =0x02020140
-	movs r6, #0
-	adds r5, r7, #0
-	ldr r4, _08013AB8 @ =0x02022860
-_08013AA4:
-	ldrh r1, [r4]
-	movs r0, #0x1f
-	ands r0, r1
-	cmp r0, r3
-	blt _08013ABC
-	subs r1, r1, r3
-	b _08013AC0
-	.align 2, 0
-_08013AB4: .4byte 0x02020140
-_08013AB8: .4byte 0x02022860
-_08013ABC:
-	ldr r0, _08013AD0 @ =0x0000FFE0
-	ands r1, r0
-_08013AC0:
-	movs r0, #0xf8
-	lsls r0, r0, #2
-	ands r0, r1
-	lsls r2, r3, #5
-	cmp r0, r2
-	blt _08013AD4
-	subs r1, r1, r2
-	b _08013AD8
-	.align 2, 0
-_08013AD0: .4byte 0x0000FFE0
-_08013AD4:
-	ldr r0, _08013AE8 @ =0x0000FC1F
-	ands r1, r0
-_08013AD8:
-	movs r0, #0xf8
-	lsls r0, r0, #7
-	ands r0, r1
-	lsls r2, r3, #0xa
-	cmp r0, r2
-	blt _08013AEC
-	subs r1, r1, r2
-	b _08013AF0
-	.align 2, 0
-_08013AE8: .4byte 0x0000FC1F
-_08013AEC:
-	ldr r0, _08013B18 @ =0x000003FF
-	ands r1, r0
-_08013AF0:
-	strh r1, [r5]
-	adds r5, #2
-	adds r4, #2
-	adds r6, #1
-	ldr r0, _08013B1C @ =0x000001FF
-	cmp r6, r0
-	ble _08013AA4
-	bl sub_08001048
-	movs r1, #0xa0
-	lsls r1, r1, #0x13
-	movs r2, #0x80
-	lsls r2, r2, #3
-	adds r0, r7, #0
-	bl sub_08002F54
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08013B18: .4byte 0x000003FF
-_08013B1C: .4byte 0x000001FF
-
-	thumb_func_start nullsub_34
-nullsub_34: @ 0x08013B20
-	bx lr
-	.align 2, 0
-
-	thumb_func_start sub_08013B24
-sub_08013B24: @ 0x08013B24
-	push {lr}
-	sub sp, #0x10
-	ldr r1, _08013B40 @ =0x0818F980
-	mov r0, sp
-	movs r2, #0xd
-	bl memcpy
-	mov r0, sp
-	bl sub_08013B24
-	add sp, #0x10
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08013B40: .4byte 0x0818F980
-
-	thumb_func_start sub_08013B44
-sub_08013B44: @ 0x08013B44
-	ldr r0, _08013B48 @ =0x0202B5B4
-	bx lr
-	.align 2, 0
-_08013B48: .4byte 0x0202B5B4
-
-	thumb_func_start sub_08013B4C
-sub_08013B4C: @ 0x08013B4C
-	push {r4, r5, lr}
-	adds r4, r1, #0
-	adds r5, r2, #0
-	bl sub_08013B68
-	adds r0, r4, #0
-	bl sub_08013B78
-	adds r0, r5, #0
-	bl sub_08013B8C
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08013B68
-sub_08013B68: @ 0x08013B68
-	push {r4, lr}
-	adds r4, r0, #0
-	bl sub_08013B44
-	strh r4, [r0, #0x2a]
-	pop {r4}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08013B78
-sub_08013B78: @ 0x08013B78
-	push {r4, lr}
-	adds r4, r0, #0
-	bl sub_08013B44
-	adds r0, #0x5a
-	strh r4, [r0]
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08013B8C
-sub_08013B8C: @ 0x08013B8C
-	push {r4, lr}
-	adds r4, r0, #0
-	bl sub_08013B44
-	adds r0, #0x8a
-	strh r4, [r0]
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08013BA0
-sub_08013BA0: @ 0x08013BA0
-	push {lr}
-	bl sub_08013B44
-	ldrh r0, [r0, #0x2a]
-	pop {r1}
-	bx r1
-
-	thumb_func_start sub_08013BAC
-sub_08013BAC: @ 0x08013BAC
-	push {lr}
-	bl sub_08013B44
-	adds r0, #0x5a
-	ldrh r0, [r0]
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_08013BBC
-sub_08013BBC: @ 0x08013BBC
-	push {lr}
-	bl sub_08013B44
-	adds r0, #0x8a
-	ldrh r0, [r0]
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_08013BCC
-sub_08013BCC: @ 0x08013BCC
-	push {r4, r5, lr}
-	bl sub_08013B44
-	ldr r3, _08013C14 @ =0x02022860
-	movs r1, #0
-_08013BD6:
-	adds r5, r0, #0
-	adds r5, #0x30
-	adds r4, r1, #1
-	adds r1, r0, #0
-	movs r2, #0xf
-_08013BE0:
-	ldrh r0, [r3]
-	strh r0, [r1]
-	adds r3, #2
-	adds r1, #2
-	subs r2, #1
-	cmp r2, #0
-	bge _08013BE0
-	adds r0, r5, #0
-	adds r1, r4, #0
-	cmp r1, #0x1f
-	ble _08013BD6
-	movs r4, #0x80
-	lsls r4, r4, #1
-	adds r0, r4, #0
-	bl sub_08013B68
-	adds r0, r4, #0
-	bl sub_08013B78
-	adds r0, r4, #0
-	bl sub_08013B8C
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08013C14: .4byte 0x02022860
-
-	thumb_func_start sub_08013C18
-sub_08013C18: @ 0x08013C18
-	push {r4, lr}
-	adds r4, r0, #0
-	bl sub_08013B44
-	lsls r2, r4, #5
-	ldr r1, _08013C44 @ =0x02022860
-	adds r2, r2, r1
-	lsls r1, r4, #1
-	adds r1, r1, r4
-	lsls r1, r1, #4
-	adds r1, r1, r0
-	movs r3, #0xf
-_08013C30:
-	ldrh r0, [r2]
-	strh r0, [r1]
-	adds r2, #2
-	adds r1, #2
-	subs r3, #1
-	cmp r3, #0
-	bge _08013C30
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08013C44: .4byte 0x02022860
-
-	thumb_func_start sub_08013C48
-sub_08013C48: @ 0x08013C48
-	push {r4, r5, r6, r7, lr}
-	mov r7, sl
-	mov r6, sb
-	mov r5, r8
-	push {r5, r6, r7}
-	sub sp, #4
-	adds r7, r0, #0
-	mov r8, r1
-	str r2, [sp]
-	mov sl, r3
-	bl sub_08013B68
-	mov r0, r8
-	bl sub_08013B78
-	ldr r0, [sp]
-	bl sub_08013B8C
-	bl sub_08013B44
-	mov sb, r0
-	movs r0, #0x80
-	lsls r0, r0, #1
-	cmp r7, r0
-	ble _08013CCC
-	ldr r0, _08013CC4 @ =0xFFFFFF00
-	adds r7, r7, r0
-	movs r5, #0
-	mov ip, r5
-_08013C82:
-	movs r0, #1
-	lsls r0, r5
-	mov r1, sl
-	ands r0, r1
-	cmp r0, #0
-	beq _08013CB8
-	movs r4, #0
-	movs r6, #0x1f
-	mov r3, ip
-	add r3, sb
-	lsls r0, r5, #5
-	ldr r1, _08013CC8 @ =0x02022860
-	adds r2, r0, r1
-_08013C9C:
-	adds r1, r6, #0
-	ldrh r0, [r3]
-	ands r1, r0
-	subs r0, r6, r1
-	muls r0, r7, r0
-	asrs r0, r0, #8
-	adds r1, r1, r0
-	ands r1, r6
-	strh r1, [r2]
-	adds r3, #2
-	adds r2, #2
-	adds r4, #1
-	cmp r4, #0xf
-	ble _08013C9C
-_08013CB8:
-	movs r1, #0x30
-	add ip, r1
-	adds r5, #1
-	cmp r5, #0x1f
-	ble _08013C82
-	b _08013D0C
-	.align 2, 0
-_08013CC4: .4byte 0xFFFFFF00
-_08013CC8: .4byte 0x02022860
-_08013CCC:
-	movs r5, #0
-	mov ip, r5
-_08013CD0:
-	movs r0, #1
-	lsls r0, r5
-	mov r6, sl
-	ands r0, r6
-	cmp r0, #0
-	beq _08013D02
-	movs r4, #0
-	movs r3, #0x1f
-	mov r2, ip
-	add r2, sb
-	lsls r0, r5, #5
-	ldr r6, _08013D68 @ =0x02022860
-	adds r1, r0, r6
-_08013CEA:
-	adds r0, r3, #0
-	ldrh r6, [r2]
-	ands r0, r6
-	muls r0, r7, r0
-	asrs r0, r0, #8
-	ands r0, r3
-	strh r0, [r1]
-	adds r2, #2
-	adds r1, #2
-	adds r4, #1
-	cmp r4, #0xf
-	ble _08013CEA
-_08013D02:
-	movs r0, #0x30
-	add ip, r0
-	adds r5, #1
-	cmp r5, #0x1f
-	ble _08013CD0
-_08013D0C:
-	movs r0, #0x80
-	lsls r0, r0, #1
-	cmp r8, r0
-	ble _08013D70
-	ldr r1, _08013D6C @ =0xFFFFFF00
-	add r8, r1
-	movs r5, #0
-	mov ip, r5
-_08013D1C:
-	movs r0, #1
-	lsls r0, r5
-	mov r6, sl
-	ands r0, r6
-	cmp r0, #0
-	beq _08013D5C
-	movs r4, #0
-	movs r6, #0xf8
-	lsls r6, r6, #2
-	mov r3, ip
-	add r3, sb
-	lsls r0, r5, #5
-	ldr r7, _08013D68 @ =0x02022860
-	adds r2, r0, r7
-_08013D38:
-	adds r0, r6, #0
-	ldrh r1, [r3]
-	ands r0, r1
-	subs r1, r6, r0
-	mov r7, r8
-	muls r7, r1, r7
-	adds r1, r7, #0
-	asrs r1, r1, #8
-	adds r0, r0, r1
-	ands r0, r6
-	ldrh r1, [r2]
-	orrs r0, r1
-	strh r0, [r2]
-	adds r3, #2
-	adds r2, #2
-	adds r4, #1
-	cmp r4, #0xf
-	ble _08013D38
-_08013D5C:
-	movs r6, #0x30
-	add ip, r6
-	adds r5, #1
-	cmp r5, #0x1f
-	ble _08013D1C
-	b _08013DB8
-	.align 2, 0
-_08013D68: .4byte 0x02022860
-_08013D6C: .4byte 0xFFFFFF00
-_08013D70:
-	movs r5, #0
-	movs r6, #0
-_08013D74:
-	movs r0, #1
-	lsls r0, r5
-	mov r7, sl
-	ands r0, r7
-	cmp r0, #0
-	beq _08013DB0
-	movs r4, #0
-	movs r3, #0xf8
-	lsls r3, r3, #2
-	mov r0, sb
-	adds r2, r6, r0
-	lsls r0, r5, #5
-	ldr r7, _08013E18 @ =0x02022860
-	adds r1, r0, r7
-_08013D90:
-	adds r0, r3, #0
-	ldrh r7, [r2]
-	ands r0, r7
-	mov r7, r8
-	muls r7, r0, r7
-	adds r0, r7, #0
-	asrs r0, r0, #8
-	ands r0, r3
-	ldrh r7, [r1]
-	orrs r0, r7
-	strh r0, [r1]
-	adds r2, #2
-	adds r1, #2
-	adds r4, #1
-	cmp r4, #0xf
-	ble _08013D90
-_08013DB0:
-	adds r6, #0x30
-	adds r5, #1
-	cmp r5, #0x1f
-	ble _08013D74
-_08013DB8:
-	movs r0, #0x80
-	lsls r0, r0, #1
-	ldr r1, [sp]
-	cmp r1, r0
-	ble _08013E20
-	ldr r5, _08013E1C @ =0xFFFFFF00
-	adds r1, r1, r5
-	str r1, [sp]
-	movs r5, #0
-_08013DCA:
-	movs r0, #1
-	lsls r0, r5
-	mov r6, sl
-	ands r0, r6
-	adds r7, r5, #1
-	cmp r0, #0
-	beq _08013E10
-	movs r4, #0
-	lsls r0, r5, #1
-	adds r0, r0, r5
-	lsls r0, r0, #4
-	movs r6, #0xf8
-	lsls r6, r6, #7
-	mov r1, sb
-	adds r3, r0, r1
-	lsls r0, r5, #5
-	ldr r5, _08013E18 @ =0x02022860
-	adds r2, r0, r5
-_08013DEE:
-	adds r0, r6, #0
-	ldrh r1, [r3]
-	ands r0, r1
-	subs r1, r6, r0
-	ldr r5, [sp]
-	muls r1, r5, r1
-	asrs r1, r1, #8
-	adds r0, r0, r1
-	ands r0, r6
-	ldrh r1, [r2]
-	orrs r0, r1
-	strh r0, [r2]
-	adds r3, #2
-	adds r2, #2
-	adds r4, #1
-	cmp r4, #0xf
-	ble _08013DEE
-_08013E10:
-	adds r5, r7, #0
-	cmp r5, #0x1f
-	ble _08013DCA
-	b _08013E6A
-	.align 2, 0
-_08013E18: .4byte 0x02022860
-_08013E1C: .4byte 0xFFFFFF00
-_08013E20:
-	movs r5, #0
-_08013E22:
-	movs r0, #1
-	lsls r0, r5
-	mov r6, sl
-	ands r0, r6
-	adds r7, r5, #1
-	cmp r0, #0
-	beq _08013E64
-	movs r4, #0
-	lsls r0, r5, #1
-	adds r0, r0, r5
-	lsls r0, r0, #4
-	movs r3, #0xf8
-	lsls r3, r3, #7
-	mov r1, sb
-	adds r2, r0, r1
-	lsls r0, r5, #5
-	ldr r5, _08013E80 @ =0x02022860
-	adds r1, r0, r5
-_08013E46:
-	adds r0, r3, #0
-	ldrh r6, [r2]
-	ands r0, r6
-	ldr r5, [sp]
-	muls r0, r5, r0
-	asrs r0, r0, #8
-	ands r0, r3
-	ldrh r6, [r1]
-	orrs r0, r6
-	strh r0, [r1]
-	adds r2, #2
-	adds r1, #2
-	adds r4, #1
-	cmp r4, #0xf
-	ble _08013E46
-_08013E64:
-	adds r5, r7, #0
-	cmp r5, #0x1f
-	ble _08013E22
-_08013E6A:
-	bl sub_08001034
-	add sp, #4
-	pop {r3, r4, r5}
-	mov r8, r3
-	mov sb, r4
-	mov sl, r5
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08013E80: .4byte 0x02022860
-
-	thumb_func_start sub_08013E84
-sub_08013E84: @ 0x08013E84
-	movs r1, #0
-	str r1, [r0, #0x44]
-	bx lr
-	.align 2, 0
-
-	thumb_func_start sub_08013E8C
-sub_08013E8C: @ 0x08013E8C
-	push {r4, r5, r6, r7, lr}
-	adds r4, r0, #0
-	ldr r1, [r4, #0x44]
-	ldr r0, [r4, #0x48]
-	adds r2, r1, r0
-	str r2, [r4, #0x44]
-	movs r7, #0x80
-	lsls r7, r7, #1
-	subs r3, r7, r2
-	ldr r0, [r4, #0x2c]
-	adds r1, r0, #0
-	muls r1, r3, r1
-	ldr r0, [r4, #0x38]
-	muls r0, r2, r0
-	adds r0, r1, r0
-	cmp r0, #0
-	bge _08013EB0
-	adds r0, #0xff
-_08013EB0:
-	asrs r6, r0, #8
-	ldr r0, [r4, #0x30]
-	adds r1, r0, #0
-	muls r1, r3, r1
-	ldr r0, [r4, #0x3c]
-	muls r0, r2, r0
-	adds r1, r1, r0
-	cmp r1, #0
-	bge _08013EC4
-	adds r1, #0xff
-_08013EC4:
-	asrs r5, r1, #8
-	ldr r0, [r4, #0x34]
-	adds r1, r0, #0
-	muls r1, r3, r1
-	ldr r0, [r4, #0x40]
-	muls r0, r2, r0
-	adds r1, r1, r0
-	cmp r1, #0
-	bge _08013ED8
-	adds r1, #0xff
-_08013ED8:
-	asrs r2, r1, #8
-	ldr r3, [r4, #0x4c]
-	adds r0, r6, #0
-	adds r1, r5, #0
-	bl sub_08013C48
-	ldr r0, [r4, #0x44]
-	cmp r0, r7
-	bne _08013EF0
-	adds r0, r4, #0
-	bl sub_0800457C
-_08013EF0:
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08013EF8
-sub_08013EF8: @ 0x08013EF8
-	push {r4, r5, r6, r7, lr}
-	mov r7, sb
-	mov r6, r8
-	push {r6, r7}
-	adds r5, r0, #0
-	adds r6, r1, #0
-	mov r8, r2
-	mov sb, r3
-	ldr r7, [sp, #0x1c]
-	ldr r4, [sp, #0x28]
-	ldr r1, [sp, #0x2c]
-	ldr r0, _08013F38 @ =0x08C01BA4
-	bl Proc_Start
-	str r5, [r0, #0x2c]
-	str r6, [r0, #0x30]
-	mov r1, r8
-	str r1, [r0, #0x34]
-	mov r1, sb
-	str r1, [r0, #0x38]
-	str r7, [r0, #0x3c]
-	ldr r1, [sp, #0x20]
-	str r1, [r0, #0x40]
-	str r4, [r0, #0x48]
-	ldr r1, [sp, #0x24]
-	str r1, [r0, #0x4c]
-	pop {r3, r4}
-	mov r8, r3
-	mov sb, r4
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08013F38: .4byte 0x08C01BA4
-
-	thumb_func_start sub_08013F3C
-sub_08013F3C: @ 0x08013F3C
-	push {lr}
-	ldr r0, _08013F4C @ =0x08C01BA4
-	bl sub_08004584
-	cmp r0, #0
-	bne _08013F50
-	movs r0, #0
-	b _08013F52
-	.align 2, 0
-_08013F4C: .4byte 0x08C01BA4
-_08013F50:
-	movs r0, #1
-_08013F52:
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_08013F58
-sub_08013F58: @ 0x08013F58
-	adds r2, r0, #0
-	adds r2, #0x64
-	movs r1, #0
-	strh r1, [r2]
-	adds r0, #0x66
-	movs r1, #0x5a
-	strh r1, [r0]
-	bx lr
-
-	thumb_func_start sub_08013F68
-sub_08013F68: @ 0x08013F68
-	push {r4, r5, lr}
-	adds r3, r0, #0
-	movs r4, #0
-	ldr r5, _08013FCC @ =0x08BBFC7C
-	ldr r1, [r5]
-	movs r0, #1
-	ldrh r1, [r1, #8]
-	ands r0, r1
-	cmp r0, #0
-	beq _08013F86
-	adds r1, r3, #0
-	adds r1, #0x66
-	ldrh r0, [r1]
-	adds r0, #1
-	strh r0, [r1]
-_08013F86:
-	adds r1, r3, #0
-	adds r1, #0x64
-	ldrh r2, [r1]
-	adds r0, r2, #1
-	strh r0, [r1]
-	movs r0, #0xf
-	ands r0, r2
-	cmp r0, #0
-	bne _08013FC6
-	ldr r0, [r5]
-	ldrh r1, [r0, #4]
-	movs r0, #0x20
-	ands r0, r1
-	cmp r0, #0
-	beq _08013FAE
-	adds r0, r3, #0
-	adds r0, #0x66
-	movs r2, #0
-	ldrsh r0, [r0, r2]
-	rsbs r4, r0, #0
-_08013FAE:
-	movs r0, #0x10
-	ands r0, r1
-	cmp r0, #0
-	beq _08013FBE
-	adds r0, r3, #0
-	adds r0, #0x66
-	movs r1, #0
-	ldrsh r4, [r0, r1]
-_08013FBE:
-	movs r0, #0x9a
-	adds r1, r4, #0
-	bl sub_080151FC
-_08013FC6:
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08013FCC: .4byte 0x08BBFC7C
-
-	thumb_func_start sub_08013FD0
-sub_08013FD0: @ 0x08013FD0
-	push {lr}
-	ldr r0, _08013FE0 @ =0x08C01BC4
-	movs r1, #3
-	bl Proc_Start
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08013FE0: .4byte 0x08C01BC4
-
-	thumb_func_start nullsub_35
-nullsub_35: @ 0x08013FE4
-	bx lr
-	.align 2, 0
-
-	thumb_func_start sub_08013FE8
-sub_08013FE8: @ 0x08013FE8
-	push {r4, r5, lr}
-	adds r4, r0, #0
-	adds r5, r1, #0
-	adds r3, r2, #0
-	ldr r0, _08014000 @ =0x08C01CEC
-	adds r1, r4, #0
-	adds r2, r5, #0
-	bl sub_08014020
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08014000: .4byte 0x08C01CEC
-
-	thumb_func_start sub_08014004
-sub_08014004: @ 0x08014004
-	push {r4, r5, lr}
-	adds r4, r0, #0
-	adds r5, r1, #0
-	adds r3, r2, #0
-	ldr r0, _0801401C @ =0x08C01D0C
-	adds r1, r4, #0
-	adds r2, r5, #0
-	bl sub_08014020
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_0801401C: .4byte 0x08C01D0C
-
-	thumb_func_start sub_08014020
-sub_08014020: @ 0x08014020
-	push {r4, r5, r6, lr}
-	mov r6, sb
-	mov r5, r8
-	push {r5, r6}
-	mov sb, r0
-	adds r5, r1, #0
-	adds r6, r2, #0
-	adds r1, r3, #0
-	lsls r4, r5, #1
-	adds r4, r4, r5
-	lsls r4, r4, #4
-	ldr r0, _08014074 @ =0x0202B5B4
-	adds r4, r4, r0
-	ldr r0, _08014078 @ =0x08C01BDC
-	bl Proc_Start
-	mov r8, r0
-	lsls r5, r5, #5
-	ldr r0, _0801407C @ =0x02022860
-	adds r5, r5, r0
-	adds r0, r5, #0
-	adds r1, r4, #0
-	movs r2, #0x10
-	bl CpuSet
-	str r5, [r4, #0x24]
-	mov r0, sb
-	str r0, [r4, #0x20]
-	movs r0, #0
-	strh r0, [r4, #0x28]
-	strh r6, [r4, #0x2a]
-	adds r6, #1
-	strh r6, [r4, #0x2c]
-	mov r0, r8
-	str r4, [r0, #0x2c]
-	adds r0, r4, #0
-	pop {r3, r4}
-	mov r8, r3
-	mov sb, r4
-	pop {r4, r5, r6}
-	pop {r1}
-	bx r1
-	.align 2, 0
-_08014074: .4byte 0x0202B5B4
-_08014078: .4byte 0x08C01BDC
-_0801407C: .4byte 0x02022860
-
-	thumb_func_start sub_08014080
-sub_08014080: @ 0x08014080
-	push {lr}
-	ldr r0, _0801408C @ =0x08C01BDC
-	bl sub_08004748
-	pop {r0}
-	bx r0
-	.align 2, 0
-_0801408C: .4byte 0x08C01BDC
-
-	thumb_func_start sub_08014090
-sub_08014090: @ 0x08014090
-	strh r1, [r0, #0x2c]
-	bx lr
-
-	thumb_func_start sub_08014094
-sub_08014094: @ 0x08014094
-	push {r4, r5, r6, r7, lr}
-	mov r7, sl
-	mov r6, sb
-	mov r5, r8
-	push {r5, r6, r7}
-	sub sp, #0x10
-	adds r7, r0, #0
-	ldr r0, [r7, #0x2c]
-	mov sl, r0
-	ldr r1, [r0, #0x20]
-	str r1, [sp, #8]
-	ldr r1, [r0, #0x24]
-	ldrh r0, [r0, #0x28]
-	mov r2, sl
-	ldrh r2, [r2, #0x2c]
-	cmp r0, r2
-	beq _080140BE
-	mov r3, sl
-	ldrh r3, [r3, #0x2a]
-	cmp r0, r3
-	bls _080140C6
-_080140BE:
-	adds r0, r7, #0
-	bl sub_08004460
-	b _0801416C
-_080140C6:
-	movs r0, #0
-	str r0, [sp, #4]
-	str r1, [sp, #0xc]
-_080140CC:
-	ldr r1, [sp, #4]
-	lsls r2, r1, #1
-	mov r3, sl
-	adds r0, r2, r3
-	ldrh r0, [r0]
-	movs r1, #0x1f
-	ands r1, r0
-	movs r6, #0xf8
-	lsls r6, r6, #2
-	ands r6, r0
-	movs r3, #0xf8
-	lsls r3, r3, #7
-	mov sb, r3
-	ands r3, r0
-	mov sb, r3
-	ldr r0, [sp, #8]
-	adds r2, r2, r0
-	ldrh r0, [r2]
-	movs r2, #0x1f
-	ands r2, r0
-	movs r4, #0xf8
-	lsls r4, r4, #2
-	ands r4, r0
-	movs r3, #0xf8
-	lsls r3, r3, #7
-	mov r8, r3
-	ands r3, r0
-	mov r8, r3
-	ldr r0, [r7, #0x2c]
-	ldrh r3, [r0, #0x28]
-	ldrh r0, [r0, #0x2a]
-	str r0, [sp]
-	movs r0, #0
-	bl sub_08013508
-	adds r5, r0, #0
-	ldr r0, [r7, #0x2c]
-	ldrh r3, [r0, #0x28]
-	ldrh r0, [r0, #0x2a]
-	str r0, [sp]
-	movs r0, #0
-	adds r1, r6, #0
-	adds r2, r4, #0
-	bl sub_08013508
-	adds r4, r0, #0
-	ldr r0, [r7, #0x2c]
-	ldrh r3, [r0, #0x28]
-	ldrh r0, [r0, #0x2a]
-	str r0, [sp]
-	movs r0, #0
-	mov r1, sb
-	mov r2, r8
-	bl sub_08013508
-	movs r1, #0xf8
-	lsls r1, r1, #7
-	ands r0, r1
-	movs r2, #0xf8
-	lsls r2, r2, #2
-	ands r4, r2
-	orrs r0, r4
-	movs r3, #0x1f
-	ands r5, r3
-	orrs r0, r5
-	ldr r1, [sp, #0xc]
-	strh r0, [r1]
-	adds r1, #2
-	str r1, [sp, #0xc]
-	ldr r2, [sp, #4]
-	adds r2, #1
-	str r2, [sp, #4]
-	cmp r2, #0xf
-	ble _080140CC
-	bl sub_08001034
-	ldr r1, [r7, #0x2c]
-	ldrh r0, [r1, #0x28]
-	adds r0, #1
-	strh r0, [r1, #0x28]
-_0801416C:
-	add sp, #0x10
-	pop {r3, r4, r5}
-	mov r8, r3
-	mov sb, r4
-	mov sl, r5
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_0801417C
-sub_0801417C: @ 0x0801417C
-	push {lr}
-	adds r1, r0, #0
-	ldr r0, _08014194 @ =0x08C01CEC
-	lsls r1, r1, #5
-	ldr r2, _08014198 @ =0x02022860
-	adds r1, r1, r2
-	movs r2, #0x10
-	bl CpuSet
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08014194: .4byte 0x08C01CEC
-_08014198: .4byte 0x02022860
-
-	thumb_func_start sub_0801419C
-sub_0801419C: @ 0x0801419C
-	push {lr}
-	adds r1, r0, #0
-	ldr r0, _080141B4 @ =0x08C01D0C
-	lsls r1, r1, #5
-	ldr r2, _080141B8 @ =0x02022860
-	adds r1, r1, r2
-	movs r2, #0x10
-	bl CpuSet
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080141B4: .4byte 0x08C01D0C
-_080141B8: .4byte 0x02022860
-
-	thumb_func_start sub_080141BC
-sub_080141BC: @ 0x080141BC
-	push {r4, lr}
-	movs r4, #0
-_080141C0:
-	adds r0, r4, #0
-	bl sub_0801417C
-	adds r4, #1
-	cmp r4, #0x1f
-	ble _080141C0
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_080141D4
-sub_080141D4: @ 0x080141D4
-	push {r4, lr}
-	movs r4, #0
-_080141D8:
-	adds r0, r4, #0
-	bl sub_0801417C
-	adds r4, #1
-	cmp r4, #0x1f
-	ble _080141D8
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_080141EC
-sub_080141EC: @ 0x080141EC
-	push {r4, r5, r6, lr}
-	ldr r1, _0801425C @ =0x03002790
-	mov ip, r1
-	mov r2, ip
-	adds r2, #0x34
-	movs r3, #0x20
-	ldrb r1, [r2]
-	orrs r1, r3
-	strb r1, [r2]
-	adds r2, #1
-	ldrb r1, [r2]
-	orrs r1, r3
-	strb r1, [r2]
-	adds r2, #2
-	ldrb r1, [r2]
-	orrs r1, r3
-	strb r1, [r2]
-	subs r2, #1
-	ldrb r1, [r2]
-	orrs r1, r3
-	strb r1, [r2]
-	mov r4, ip
-	adds r4, #0x3c
-	movs r1, #0xc0
-	ldrb r2, [r4]
-	orrs r1, r2
-	strb r1, [r4]
-	mov r1, ip
-	adds r1, #0x44
-	movs r5, #0
-	strb r5, [r1]
-	adds r1, #1
-	strb r5, [r1]
-	adds r1, #1
-	strb r5, [r1]
-	ldr r1, _08014260 @ =0x0000FFE0
-	mov r6, ip
-	ldrh r6, [r6, #0x3c]
-	ands r1, r6
-	movs r2, #0x1f
-	orrs r1, r2
-	mov r2, ip
-	strh r1, [r2, #0x3c]
-	ldrb r6, [r4]
-	orrs r3, r6
-	strb r3, [r4]
-	adds r2, r0, #0
-	adds r2, #0x64
-	movs r1, #0x10
-	strh r1, [r2]
-	adds r0, #0x66
-	strh r5, [r0]
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_0801425C: .4byte 0x03002790
-_08014260: .4byte 0x0000FFE0
-
-	thumb_func_start sub_08014264
-sub_08014264: @ 0x08014264
-	push {lr}
-	adds r2, r0, #0
-	ldr r0, _0801427C @ =0x03002790
-	adds r3, r0, #0
-	adds r3, #0x46
-	ldrb r0, [r3]
-	cmp r0, #0x10
-	bne _08014280
-	adds r0, r2, #0
-	bl sub_08004460
-	b _080142A4
-	.align 2, 0
-_0801427C: .4byte 0x03002790
-_08014280:
-	adds r1, r2, #0
-	adds r1, #0x66
-	adds r0, r2, #0
-	adds r0, #0x64
-	ldrh r2, [r1]
-	ldrh r0, [r0]
-	adds r0, r2, r0
-	strh r0, [r1]
-	lsls r0, r0, #0x10
-	asrs r0, r0, #0x10
-	cmp r0, #0xff
-	ble _0801429E
-	movs r0, #0x80
-	lsls r0, r0, #1
-	strh r0, [r1]
-_0801429E:
-	ldrh r1, [r1]
-	lsrs r0, r1, #4
-	strb r0, [r3]
-_080142A4:
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_080142A8
-sub_080142A8: @ 0x080142A8
-	push {r4, r5, r6, lr}
-	ldr r1, _08014328 @ =0x03002790
-	mov ip, r1
-	mov r2, ip
-	adds r2, #0x34
-	movs r3, #0x20
-	ldrb r1, [r2]
-	orrs r1, r3
-	strb r1, [r2]
-	adds r2, #1
-	ldrb r1, [r2]
-	orrs r1, r3
-	strb r1, [r2]
-	adds r2, #2
-	ldrb r1, [r2]
-	orrs r1, r3
-	strb r1, [r2]
-	subs r2, #1
-	ldrb r1, [r2]
-	orrs r1, r3
-	strb r1, [r2]
-	mov r4, ip
-	adds r4, #0x3c
-	movs r1, #0xc0
-	ldrb r2, [r4]
-	orrs r1, r2
-	strb r1, [r4]
-	mov r1, ip
-	adds r1, #0x44
-	movs r2, #0
-	strb r2, [r1]
-	adds r1, #1
-	strb r2, [r1]
-	adds r1, #1
-	movs r5, #0x10
-	strb r5, [r1]
-	ldr r1, _0801432C @ =0x0000FFE0
-	mov r6, ip
-	ldrh r6, [r6, #0x3c]
-	ands r1, r6
-	movs r2, #0x1f
-	orrs r1, r2
-	ldr r2, _08014330 @ =0x0000E0FF
-	ands r1, r2
-	movs r6, #0xf8
-	lsls r6, r6, #5
-	adds r2, r6, #0
-	orrs r1, r2
-	mov r2, ip
-	strh r1, [r2, #0x3c]
-	ldrb r6, [r4]
-	orrs r3, r6
-	strb r3, [r4]
-	adds r1, r0, #0
-	adds r1, #0x64
-	strh r5, [r1]
-	adds r0, #0x66
-	movs r1, #0x80
-	lsls r1, r1, #1
-	strh r1, [r0]
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08014328: .4byte 0x03002790
-_0801432C: .4byte 0x0000FFE0
-_08014330: .4byte 0x0000E0FF
-
-	thumb_func_start sub_08014334
-sub_08014334: @ 0x08014334
-	push {lr}
-	adds r2, r0, #0
-	ldr r0, _0801434C @ =0x03002790
-	adds r3, r0, #0
-	adds r3, #0x46
-	ldrb r0, [r3]
-	cmp r0, #0
-	bne _08014350
-	adds r0, r2, #0
-	bl sub_08004460
-	b _08014370
-	.align 2, 0
-_0801434C: .4byte 0x03002790
-_08014350:
-	adds r1, r2, #0
-	adds r1, #0x66
-	adds r0, r2, #0
-	adds r0, #0x64
-	ldrh r2, [r1]
-	ldrh r0, [r0]
-	subs r0, r2, r0
-	strh r0, [r1]
-	lsls r0, r0, #0x10
-	cmp r0, #0
-	bgt _0801436A
-	movs r0, #0
-	strh r0, [r1]
-_0801436A:
-	ldrh r1, [r1]
-	lsrs r0, r1, #4
-	strb r0, [r3]
-_08014370:
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08014374
-sub_08014374: @ 0x08014374
-	push {lr}
-	bl sub_080141EC
-	ldr r3, _080143A0 @ =0x03002790
-	adds r2, r3, #0
-	adds r2, #0x3c
-	movs r0, #0x3f
-	ldrb r1, [r2]
-	ands r0, r1
-	movs r1, #0x80
-	orrs r0, r1
-	strb r0, [r2]
-	adds r0, r3, #0
-	adds r0, #0x44
-	movs r1, #0
-	strb r1, [r0]
-	adds r0, #1
-	strb r1, [r0]
-	adds r0, #1
-	strb r1, [r0]
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080143A0: .4byte 0x03002790
-
-	thumb_func_start sub_080143A4
-sub_080143A4: @ 0x080143A4
-	push {lr}
-	bl sub_080142A8
-	ldr r3, _080143D4 @ =0x03002790
-	adds r2, r3, #0
-	adds r2, #0x3c
-	movs r0, #0x3f
-	ldrb r1, [r2]
-	ands r0, r1
-	movs r1, #0x80
-	orrs r0, r1
-	strb r0, [r2]
-	adds r0, r3, #0
-	adds r0, #0x44
-	movs r1, #0
-	strb r1, [r0]
-	adds r0, #1
-	strb r1, [r0]
-	adds r1, r3, #0
-	adds r1, #0x46
-	movs r0, #0x10
-	strb r0, [r1]
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080143D4: .4byte 0x03002790
-
-	thumb_func_start sub_080143D8
-sub_080143D8: @ 0x080143D8
-	push {lr}
-	ldr r0, _08014408 @ =0x08C01C14
-	bl sub_08004584
-	cmp r0, #0
-	bne _08014418
-	ldr r0, _0801440C @ =0x08C01BF4
-	bl sub_08004584
-	cmp r0, #0
-	bne _08014418
-	ldr r0, _08014410 @ =0x08C01C54
-	bl sub_08004584
-	cmp r0, #0
-	bne _08014418
-	ldr r0, _08014414 @ =0x08C01C34
-	bl sub_08004584
-	cmp r0, #0
-	bne _08014418
-	movs r0, #0
-	b _0801441A
-	.align 2, 0
-_08014408: .4byte 0x08C01C14
-_0801440C: .4byte 0x08C01BF4
-_08014410: .4byte 0x08C01C54
-_08014414: .4byte 0x08C01C34
-_08014418:
-	movs r0, #1
-_0801441A:
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_08014420
-sub_08014420: @ 0x08014420
-	push {r4, lr}
-	adds r4, r0, #0
-	ldr r0, _08014438 @ =0x08C01BF4
-	movs r1, #3
-	bl Proc_Start
-	adds r0, #0x64
-	strh r4, [r0]
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08014438: .4byte 0x08C01BF4
-
-	thumb_func_start sub_0801443C
-sub_0801443C: @ 0x0801443C
-	push {r4, lr}
-	adds r4, r0, #0
-	ldr r0, _08014454 @ =0x08C01C14
-	movs r1, #3
-	bl Proc_Start
-	adds r0, #0x64
-	strh r4, [r0]
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08014454: .4byte 0x08C01C14
-
-	thumb_func_start sub_08014458
-sub_08014458: @ 0x08014458
-	push {r4, lr}
-	adds r4, r0, #0
-	ldr r0, _0801446C @ =0x08C01BF4
-	bl sub_080043D4
-	adds r0, #0x64
-	strh r4, [r0]
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_0801446C: .4byte 0x08C01BF4
-
-	thumb_func_start sub_08014470
-sub_08014470: @ 0x08014470
-	push {r4, lr}
-	adds r4, r0, #0
-	ldr r0, _08014484 @ =0x08C01C14
-	bl sub_080043D4
-	adds r0, #0x64
-	strh r4, [r0]
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08014484: .4byte 0x08C01C14
-
-	thumb_func_start sub_08014488
-sub_08014488: @ 0x08014488
-	push {r4, lr}
-	adds r4, r0, #0
-	ldr r0, _0801449C @ =0x08C01C34
-	bl sub_080043D4
-	adds r0, #0x64
-	strh r4, [r0]
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_0801449C: .4byte 0x08C01C34
-
-	thumb_func_start sub_080144A0
-sub_080144A0: @ 0x080144A0
-	push {r4, lr}
-	adds r4, r0, #0
-	ldr r0, _080144B4 @ =0x08C01C54
-	bl sub_080043D4
-	adds r0, #0x64
-	strh r4, [r0]
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080144B4: .4byte 0x08C01C54
-
-	thumb_func_start sub_080144B8
-sub_080144B8: @ 0x080144B8
-	push {lr}
-	movs r0, #0x10
-	bl sub_08014420
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_080144C4
-sub_080144C4: @ 0x080144C4
-	push {lr}
-	movs r0, #4
-	bl sub_08014420
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_080144D0
-sub_080144D0: @ 0x080144D0
-	push {lr}
-	movs r0, #0x40
-	bl sub_08014420
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_080144DC
-sub_080144DC: @ 0x080144DC
-	push {lr}
-	movs r0, #0x10
-	bl sub_0801443C
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_080144E8
-sub_080144E8: @ 0x080144E8
-	push {lr}
-	movs r0, #4
-	bl sub_0801443C
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_080144F4
-sub_080144F4: @ 0x080144F4
-	push {lr}
-	movs r0, #0x40
-	bl sub_0801443C
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08014500
-sub_08014500: @ 0x08014500
-	push {lr}
-	adds r1, r0, #0
-	movs r0, #0x10
-	bl sub_08014458
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08014510
-sub_08014510: @ 0x08014510
-	push {lr}
-	adds r1, r0, #0
-	movs r0, #4
-	bl sub_08014458
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08014520
-sub_08014520: @ 0x08014520
-	push {lr}
-	adds r1, r0, #0
-	movs r0, #0x40
-	bl sub_08014458
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08014530
-sub_08014530: @ 0x08014530
-	push {lr}
-	adds r1, r0, #0
-	movs r0, #0x10
-	bl sub_08014470
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08014540
-sub_08014540: @ 0x08014540
-	push {lr}
-	adds r1, r0, #0
-	movs r0, #4
-	bl sub_08014470
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08014550
-sub_08014550: @ 0x08014550
-	push {lr}
-	adds r1, r0, #0
-	movs r0, #0x40
-	bl sub_08014470
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08014560
-sub_08014560: @ 0x08014560
-	push {lr}
-	adds r1, r0, #0
-	movs r0, #4
-	bl sub_08014488
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08014570
-sub_08014570: @ 0x08014570
-	push {lr}
-	adds r1, r0, #0
-	movs r0, #4
-	bl sub_080144A0
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08014580
-sub_08014580: @ 0x08014580
-	push {lr}
-	adds r2, r0, #0
-	ldr r3, _08014594 @ =sub_08014900
-	movs r0, #1
-	movs r1, #4
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08014594: .4byte sub_08014900
-
-	thumb_func_start sub_08014598
-sub_08014598: @ 0x08014598
-	push {lr}
-	adds r2, r0, #0
-	ldr r3, _080145AC @ =sub_08014900
-	movs r0, #1
-	movs r1, #8
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080145AC: .4byte sub_08014900
-
-	thumb_func_start sub_080145B0
-sub_080145B0: @ 0x080145B0
-	push {lr}
-	adds r2, r0, #0
-	ldr r3, _080145C4 @ =sub_08014900
-	movs r0, #1
-	movs r1, #0x10
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080145C4: .4byte sub_08014900
-
-	thumb_func_start sub_080145C8
-sub_080145C8: @ 0x080145C8
-	push {lr}
-	adds r2, r0, #0
-	ldr r3, _080145DC @ =sub_08014900
-	movs r0, #1
-	movs r1, #0x20
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080145DC: .4byte sub_08014900
-
-	thumb_func_start sub_080145E0
-sub_080145E0: @ 0x080145E0
-	push {lr}
-	adds r2, r0, #0
-	ldr r3, _080145F4 @ =sub_08014900
-	movs r0, #1
-	movs r1, #0x40
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080145F4: .4byte sub_08014900
-
-	thumb_func_start sub_080145F8
-sub_080145F8: @ 0x080145F8
-	push {lr}
-	adds r2, r0, #0
-	movs r0, #0
-	movs r1, #8
-	movs r3, #0
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_0801460C
-sub_0801460C: @ 0x0801460C
-	push {lr}
-	adds r2, r0, #0
-	movs r0, #0
-	movs r1, #0x10
-	movs r3, #0
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08014620
-sub_08014620: @ 0x08014620
-	push {lr}
-	adds r2, r0, #0
-	movs r0, #0
-	movs r1, #0x20
-	movs r3, #0
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08014634
-sub_08014634: @ 0x08014634
-	push {lr}
-	adds r2, r0, #0
-	movs r0, #0
-	movs r1, #0x40
-	movs r3, #0
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08014648
-sub_08014648: @ 0x08014648
-	push {lr}
-	adds r2, r0, #0
-	ldr r3, _0801465C @ =sub_08014900
-	movs r0, #3
-	movs r1, #4
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-_0801465C: .4byte sub_08014900
-
-	thumb_func_start sub_08014660
-sub_08014660: @ 0x08014660
-	push {lr}
-	adds r2, r0, #0
-	ldr r3, _08014674 @ =sub_08014900
-	movs r0, #3
-	movs r1, #8
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08014674: .4byte sub_08014900
-
-	thumb_func_start sub_08014678
-sub_08014678: @ 0x08014678
-	push {lr}
-	adds r2, r0, #0
-	ldr r3, _0801468C @ =sub_08014900
-	movs r0, #3
-	movs r1, #0x10
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-_0801468C: .4byte sub_08014900
-
-	thumb_func_start sub_08014690
-sub_08014690: @ 0x08014690
-	push {lr}
-	adds r2, r0, #0
-	ldr r3, _080146A4 @ =sub_08014900
-	movs r0, #3
-	movs r1, #0x20
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080146A4: .4byte sub_08014900
-
-	thumb_func_start sub_080146A8
-sub_080146A8: @ 0x080146A8
-	push {lr}
-	adds r2, r0, #0
-	ldr r3, _080146BC @ =sub_08014900
-	movs r0, #3
-	movs r1, #0x40
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080146BC: .4byte sub_08014900
-
-	thumb_func_start sub_080146C0
-sub_080146C0: @ 0x080146C0
-	push {lr}
-	adds r2, r0, #0
-	movs r0, #2
-	movs r1, #4
-	movs r3, #0
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_080146D4
-sub_080146D4: @ 0x080146D4
-	push {lr}
-	adds r2, r0, #0
-	movs r0, #2
-	movs r1, #8
-	movs r3, #0
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_080146E8
-sub_080146E8: @ 0x080146E8
-	push {lr}
-	adds r2, r0, #0
-	movs r0, #2
-	movs r1, #8
-	movs r3, #0
-	bl sub_080147E8
-	bl sub_080148C0
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08014700
-sub_08014700: @ 0x08014700
-	push {lr}
-	adds r2, r0, #0
-	movs r0, #2
-	movs r1, #0x10
-	movs r3, #0
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08014714
-sub_08014714: @ 0x08014714
-	push {lr}
-	adds r2, r0, #0
-	movs r0, #2
-	movs r1, #0x20
-	movs r3, #0
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08014728
-sub_08014728: @ 0x08014728
-	push {lr}
-	adds r2, r0, #0
-	movs r0, #2
-	movs r1, #0x40
-	movs r3, #0
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_0801473C
-sub_0801473C: @ 0x0801473C
-	push {lr}
-	adds r2, r0, #0
-	movs r0, #6
-	movs r1, #0x10
-	movs r3, #0
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08014750
-sub_08014750: @ 0x08014750
-	push {lr}
-	adds r2, r0, #0
-	movs r0, #7
-	movs r1, #0x10
-	movs r3, #0
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08014764
-sub_08014764: @ 0x08014764
-	push {lr}
-	adds r2, r0, #0
-	movs r0, #6
-	movs r1, #8
-	movs r3, #0
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08014778
-sub_08014778: @ 0x08014778
-	push {lr}
-	adds r2, r0, #0
-	movs r0, #4
-	movs r1, #4
-	movs r3, #0
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_0801478C
-sub_0801478C: @ 0x0801478C
-	push {lr}
-	adds r2, r0, #0
-	movs r0, #4
-	movs r1, #8
-	movs r3, #0
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_080147A0
-sub_080147A0: @ 0x080147A0
-	push {lr}
-	adds r2, r0, #0
-	ldr r3, _080147B4 @ =sub_08014970
-	movs r0, #7
-	movs r1, #8
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080147B4: .4byte sub_08014970
-
-	thumb_func_start sub_080147B8
-sub_080147B8: @ 0x080147B8
-	push {r4, lr}
-	adds r4, r0, #0
-	bl sub_080143D8
-	lsls r0, r0, #0x18
-	cmp r0, #0
-	bne _080147CC
-	adds r0, r4, #0
-	bl sub_0800457C
-_080147CC:
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_080147D4
-sub_080147D4: @ 0x080147D4
-	push {lr}
-	adds r2, r0, #0
-	adds r3, r1, #0
-	movs r0, #3
-	movs r1, #0x40
-	bl sub_080147E8
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_080147E8
-sub_080147E8: @ 0x080147E8
-	push {r4, r5, r6, r7, lr}
-	adds r4, r1, #0
-	adds r1, r2, #0
-	adds r5, r3, #0
-	ldr r7, _0801482C @ =0x0818F990
-	lsls r2, r0, #1
-	adds r2, r2, r0
-	lsls r6, r2, #2
-	adds r0, r6, r7
-	ldr r2, [r0]
-	ldr r0, _08014830 @ =0x08C01C74
-	bl _call_via_r2
-	str r4, [r0, #0x54]
-	str r5, [r0, #0x4c]
-	asrs r4, r4, #4
-	cmp r4, #0
-	bne _0801480E
-	movs r4, #1
-_0801480E:
-	adds r0, r7, #4
-	adds r0, r6, r0
-	ldr r1, [r0]
-	adds r0, r7, #0
-	adds r0, #8
-	adds r0, r6, r0
-	ldr r0, [r0]
-	muls r0, r4, r0
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-	bl _call_via_r1
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_0801482C: .4byte 0x0818F990
-_08014830: .4byte 0x08C01C74
-
-	thumb_func_start sub_08014834
-sub_08014834: @ 0x08014834
-	push {lr}
-	ldr r0, _08014840 @ =0x08C01C74
-	bl sub_08004748
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08014840: .4byte 0x08C01C74
-
-	thumb_func_start sub_08014844
-sub_08014844: @ 0x08014844
-	movs r1, #0
-	str r1, [r0, #0x58]
-	str r1, [r0, #0x5c]
-	str r1, [r0, #0x4c]
-	bx lr
-	.align 2, 0
-
-	thumb_func_start sub_08014850
-sub_08014850: @ 0x08014850
-	push {r4, lr}
-	adds r4, r0, #0
-	bl sub_08014874
-	lsls r0, r0, #0x18
-	cmp r0, #0
-	bne _0801486E
-	ldr r0, [r4, #0x4c]
-	cmp r0, #0
-	beq _08014868
-	bl _call_via_r0
-_08014868:
-	adds r0, r4, #0
-	bl sub_0800457C
-_0801486E:
-	pop {r4}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08014874
-sub_08014874: @ 0x08014874
-	push {r4, lr}
-	adds r4, r0, #0
-	ldr r0, [r4, #0x58]
-	ldr r2, [r4, #0x54]
-	adds r1, r0, r2
-	str r1, [r4, #0x58]
-	ldr r0, [r4, #0x5c]
-	adds r0, r0, r2
-	str r0, [r4, #0x5c]
-	cmp r1, #0xf
-	bgt _08014892
-	cmp r0, r2
-	beq _08014898
-_0801488E:
-	movs r0, #1
-	b _080148B0
-_08014892:
-	adds r0, r1, #0
-	subs r0, #0x10
-	str r0, [r4, #0x58]
-_08014898:
-	bl sub_080C0C38
-	ldr r1, _080148B8 @ =0x02022860
-	movs r0, #0
-	strh r0, [r1]
-	bl sub_08001034
-	ldr r1, [r4, #0x5c]
-	ldr r0, _080148BC @ =0x000001FF
-	cmp r1, r0
-	ble _0801488E
-	movs r0, #0
-_080148B0:
-	pop {r4}
-	pop {r1}
-	bx r1
-	.align 2, 0
-_080148B8: .4byte 0x02022860
-_080148BC: .4byte 0x000001FF
-
-	thumb_func_start sub_080148C0
-sub_080148C0: @ 0x080148C0
-	push {lr}
-	movs r0, #0x10
-	movs r1, #0x10
-	movs r2, #0
-	bl sub_08002310
-	bl sub_080148E4
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_080148D4
-sub_080148D4: @ 0x080148D4
-	push {lr}
-	movs r2, #0
-	bl sub_08002310
-	bl sub_080148E4
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_080148E4
-sub_080148E4: @ 0x080148E4
-	push {lr}
-	ldr r0, _080148FC @ =0x08C01C74
-	bl sub_08004584
-	adds r1, r0, #0
-	cmp r1, #0
-	beq _080148F6
-	movs r0, #0
-	str r0, [r1, #0x4c]
-_080148F6:
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080148FC: .4byte 0x08C01C74
-
-	thumb_func_start sub_08014900
-sub_08014900: @ 0x08014900
-	push {r4, lr}
-	ldr r4, _08014964 @ =0x03002790
-	adds r2, r4, #0
-	adds r2, #0x3c
-	movs r0, #0xc0
-	ldrb r1, [r2]
-	orrs r0, r1
-	strb r0, [r2]
-	adds r0, r4, #0
-	adds r0, #0x44
-	movs r3, #0
-	strb r3, [r0]
-	adds r0, #1
-	strb r3, [r0]
-	adds r1, r4, #0
-	adds r1, #0x46
-	movs r0, #0x10
-	strb r0, [r1]
-	ldr r0, _08014968 @ =0x0000FFE0
-	ldrh r1, [r4, #0x3c]
-	ands r0, r1
-	movs r1, #0x1f
-	orrs r0, r1
-	strh r0, [r4, #0x3c]
-	movs r0, #0x20
-	ldrb r1, [r2]
-	orrs r0, r1
-	strb r0, [r2]
-	ldr r0, _0801496C @ =0x02022860
-	strh r3, [r0]
-	bl sub_08001034
-	movs r0, #2
-	rsbs r0, r0, #0
-	ldrb r1, [r4, #1]
-	ands r0, r1
-	movs r1, #3
-	rsbs r1, r1, #0
-	ands r0, r1
-	subs r1, #2
-	ands r0, r1
-	subs r1, #4
-	ands r0, r1
-	subs r1, #8
-	ands r0, r1
-	strb r0, [r4, #1]
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08014964: .4byte 0x03002790
-_08014968: .4byte 0x0000FFE0
-_0801496C: .4byte 0x02022860
-
-	thumb_func_start sub_08014970
-sub_08014970: @ 0x08014970
-	ldr r3, _080149AC @ =0x03002790
-	adds r2, r3, #0
-	adds r2, #0x3c
-	movs r0, #0x3f
-	ldrb r1, [r2]
-	ands r0, r1
-	movs r1, #0x80
-	orrs r0, r1
-	strb r0, [r2]
-	adds r0, r3, #0
-	adds r0, #0x44
-	movs r1, #0
-	strb r1, [r0]
-	adds r0, #1
-	strb r1, [r0]
-	adds r1, r3, #0
-	adds r1, #0x46
-	movs r0, #0x10
-	strb r0, [r1]
-	ldr r0, _080149B0 @ =0x0000FFE0
-	ldrh r1, [r3, #0x3c]
-	ands r0, r1
-	movs r1, #0x1f
-	orrs r0, r1
-	strh r0, [r3, #0x3c]
-	movs r0, #0x20
-	ldrb r1, [r2]
-	orrs r0, r1
-	strb r0, [r2]
-	bx lr
-	.align 2, 0
-_080149AC: .4byte 0x03002790
-_080149B0: .4byte 0x0000FFE0
-
-	thumb_func_start sub_080149B4
-sub_080149B4: @ 0x080149B4
-	push {r4, lr}
-	adds r2, r0, #0
-	adds r4, r1, #0
-	ldr r0, _080149CC @ =0x08C01CA4
-	adds r1, r2, #0
-	bl sub_080043D4
-	str r4, [r0, #0x58]
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080149CC: .4byte 0x08C01CA4
-
-	thumb_func_start sub_080149D0
-sub_080149D0: @ 0x080149D0
-	push {lr}
-	adds r1, r0, #0
-	ldr r0, [r1, #0x58]
-	cmp r0, #0
-	bne _080149E2
-	adds r0, r1, #0
-	bl sub_0800457C
-	b _080149E6
-_080149E2:
-	subs r0, #1
-	str r0, [r1, #0x58]
-_080149E6:
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_080149EC
-sub_080149EC: @ 0x080149EC
-	push {r4, r5, r6, r7, lr}
-	mov r7, r8
-	push {r7}
-	adds r4, r0, #0
-	adds r6, r1, #0
-	movs r5, #0
-	cmp r4, #0
-	bne _08014A14
-	ldr r0, _08014A10 @ =0x08C01CBC
-	ldrb r1, [r0]
-	strb r1, [r6]
-	adds r6, #1
-	ldrb r0, [r0, #1]
-	strb r0, [r6]
-	strb r4, [r6, #1]
-	movs r0, #1
-	b _08014AA0
-	.align 2, 0
-_08014A10: .4byte 0x08C01CBC
-_08014A14:
-	cmp r4, #0
-	bge _08014A26
-	ldr r0, _08014A30 @ =0x08C01CC0
-	ldrb r1, [r0]
-	strb r1, [r6]
-	ldrb r0, [r0, #1]
-	strb r0, [r6, #1]
-	rsbs r4, r4, #0
-	movs r5, #2
-_08014A26:
-	ldr r0, _08014A34 @ =0x0001869F
-	cmp r4, r0
-	ble _08014A38
-	adds r5, #0xa
-	b _08014A66
-	.align 2, 0
-_08014A30: .4byte 0x08C01CC0
-_08014A34: .4byte 0x0001869F
-_08014A38:
-	ldr r0, _08014A44 @ =0x0000270F
-	cmp r4, r0
-	ble _08014A48
-	adds r5, #8
-	b _08014A66
-	.align 2, 0
-_08014A44: .4byte 0x0000270F
-_08014A48:
-	ldr r0, _08014A54 @ =0x000003E7
-	cmp r4, r0
-	ble _08014A58
-	adds r5, #6
-	b _08014A66
-	.align 2, 0
-_08014A54: .4byte 0x000003E7
-_08014A58:
-	cmp r4, #0x63
-	ble _08014A60
-	adds r5, #4
-	b _08014A66
-_08014A60:
-	cmp r4, #9
-	ble _08014A66
-	adds r5, #2
-_08014A66:
-	mov r8, r5
-	cmp r4, #0
-	ble _08014A92
-	ldr r7, _08014AAC @ =0x08C01CBC
-_08014A6E:
-	adds r0, r4, #0
-	movs r1, #0xa
-	bl DivRem
-	adds r2, r6, r5
-	ldrb r1, [r7]
-	strb r1, [r2]
-	ldrb r1, [r7, #1]
-	adds r0, r1, r0
-	strb r0, [r2, #1]
-	adds r0, r4, #0
-	movs r1, #0xa
-	bl Div
-	adds r4, r0, #0
-	subs r5, #2
-	cmp r4, #0
-	bgt _08014A6E
-_08014A92:
-	mov r0, r8
-	adds r1, r6, r0
-	movs r0, #0
-	strb r0, [r1, #2]
-	mov r1, r8
-	asrs r0, r1, #1
-	adds r0, #1
-_08014AA0:
-	pop {r3}
-	mov r8, r3
-	pop {r4, r5, r6, r7}
-	pop {r1}
-	bx r1
-	.align 2, 0
-_08014AAC: .4byte 0x08C01CBC
-
-	thumb_func_start sub_08014AB0
-sub_08014AB0: @ 0x08014AB0
-	push {r4, r5, r6, lr}
-	mov r6, sb
-	mov r5, r8
-	push {r5, r6}
-	mov sb, r0
-	mov r8, r1
-	adds r4, r2, #0
-	adds r6, r3, #0
-	ldr r5, _08014B10 @ =0x03000430
-	adds r0, r5, #0
-	adds r1, r4, #0
-	bl sub_08005344
-	adds r0, r6, #0
-	bl sub_080054CC
-	lsls r4, r4, #3
-	subs r4, r4, r0
-	subs r4, #1
-	lsrs r0, r4, #0x1f
-	adds r4, r4, r0
-	asrs r4, r4, #1
-	adds r0, r5, #0
-	adds r1, r4, #0
-	bl sub_08005444
-	adds r0, r5, #0
-	mov r1, r8
-	bl sub_08005450
-	adds r0, r5, #0
-	adds r1, r6, #0
-	bl sub_080055DC
-	adds r0, r5, #0
-	mov r1, sb
-	bl sub_08005460
-	movs r0, #1
-	bl sub_08000FD4
-	adds r0, r5, #0
-	pop {r3, r4}
-	mov r8, r3
-	mov sb, r4
-	pop {r4, r5, r6}
-	pop {r1}
-	bx r1
-	.align 2, 0
-_08014B10: .4byte 0x03000430
-
-	thumb_func_start sub_08014B14
-sub_08014B14: @ 0x08014B14
-	push {r4, r5, r6, r7, lr}
-	adds r7, r0, #0
-	adds r6, r1, #0
-	adds r5, r2, #0
-	ldr r4, _08014B54 @ =0x03000430
-	adds r0, r5, #0
-	bl sub_080054CC
-	adds r1, r0, #7
-	cmp r1, #0
-	bge _08014B2C
-	adds r1, #7
-_08014B2C:
-	asrs r1, r1, #3
-	adds r0, r4, #0
-	bl sub_08005344
-	adds r0, r4, #0
-	adds r1, r6, #0
-	bl sub_08005450
-	adds r0, r4, #0
-	adds r1, r5, #0
-	bl sub_080055DC
-	adds r0, r4, #0
-	adds r1, r7, #0
-	bl sub_08005460
-	adds r0, r4, #0
-	pop {r4, r5, r6, r7}
-	pop {r1}
-	bx r1
-	.align 2, 0
-_08014B54: .4byte 0x03000430
-
-	thumb_func_start sub_08014B58
-sub_08014B58: @ 0x08014B58
-	push {lr}
-	ldr r0, _08014B64 @ =0x08C01CC4
-	bl sub_08004748
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08014B64: .4byte 0x08C01CC4
-
-	thumb_func_start sub_08014B68
-sub_08014B68: @ 0x08014B68
-	push {r4, r5, r6, lr}
-	mov r6, r8
-	push {r6}
-	adds r5, r0, #0
-	mov r8, r1
-	adds r4, r2, #0
-	adds r6, r3, #0
-	ldr r1, [sp, #0x14]
-	ldr r0, _08014BA0 @ =0x08C01CC4
-	bl Proc_Start
-	str r5, [r0, #0x2c]
-	movs r2, #0
-	mov r1, r8
-	strh r1, [r0, #0x30]
-	lsrs r1, r4, #0x1f
-	adds r4, r4, r1
-	asrs r4, r4, #1
-	strh r4, [r0, #0x32]
-	strh r6, [r0, #0x36]
-	strh r6, [r0, #0x34]
-	strh r2, [r0, #0x38]
-	strh r2, [r0, #0x3a]
-	pop {r3}
-	mov r8, r3
-	pop {r4, r5, r6}
-	pop {r1}
-	bx r1
-	.align 2, 0
-_08014BA0: .4byte 0x08C01CC4
-
-	thumb_func_start sub_08014BA4
-sub_08014BA4: @ 0x08014BA4
-	push {r4, lr}
-	sub sp, #4
-	ldr r4, [sp, #0xc]
-	str r4, [sp]
-	bl sub_08014B68
-	movs r1, #0
-	strh r1, [r0, #0x3a]
-	add sp, #4
-	pop {r4}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08014BBC
-sub_08014BBC: @ 0x08014BBC
-	push {r4, lr}
-	sub sp, #4
-	ldr r4, [sp, #0xc]
-	str r4, [sp]
-	bl sub_08014B68
-	movs r1, #1
-	strh r1, [r0, #0x3a]
-	add sp, #4
-	pop {r4}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08014BD4
-sub_08014BD4: @ 0x08014BD4
-	push {r4, r5, r6, lr}
-	adds r4, r0, #0
-	ldrh r0, [r4, #0x36]
-	adds r0, #1
-	strh r0, [r4, #0x36]
-	lsls r0, r0, #0x10
-	lsrs r0, r0, #0x10
-	ldrh r1, [r4, #0x34]
-	cmp r0, r1
-	blo _08014C30
-	movs r0, #0
-	strh r0, [r4, #0x36]
-	ldrh r0, [r4, #0x38]
-	ldrh r1, [r4, #0x32]
-	bl DivRem
-	adds r5, r0, #0
-	ldrh r0, [r4, #0x3a]
-	cmp r0, #0
-	beq _08014C02
-	ldrh r2, [r4, #0x32]
-	subs r0, r2, r5
-	subs r5, r0, #1
-_08014C02:
-	lsls r6, r5, #1
-	ldr r0, [r4, #0x2c]
-	adds r0, r0, r6
-	ldrh r1, [r4, #0x30]
-	ldrh r3, [r4, #0x32]
-	subs r2, r3, r5
-	lsls r2, r2, #1
-	bl sub_0800105C
-	cmp r5, #0
-	ble _08014C2A
-	ldr r0, [r4, #0x2c]
-	ldrh r2, [r4, #0x32]
-	lsls r1, r2, #1
-	ldrh r3, [r4, #0x30]
-	adds r1, r3, r1
-	subs r1, r1, r6
-	adds r2, r6, #0
-	bl sub_0800105C
-_08014C2A:
-	ldrh r0, [r4, #0x38]
-	adds r0, #1
-	strh r0, [r4, #0x38]
-_08014C30:
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08014C38
-sub_08014C38: @ 0x08014C38
-	push {r4, r5, r6, r7, lr}
-	mov r7, sl
-	mov r6, sb
-	mov r5, r8
-	push {r5, r6, r7}
-	mov sb, r0
-	mov sl, r1
-	ldr r0, [sp, #0x24]
-	lsls r3, r3, #0x10
-	lsrs r4, r3, #0x10
-	adds r3, r2, #0
-	adds r0, r3, r0
-	cmp r3, r0
-	bge _08014C90
-	mov r8, r0
-	mov r0, sl
-	lsls r0, r0, #1
-	mov ip, r0
-_08014C5C:
-	mov r1, sl
-	ldr r2, [sp, #0x20]
-	adds r0, r1, r2
-	adds r6, r3, #1
-	cmp r1, r0
-	bge _08014C8A
-	adds r5, r0, #0
-	lsls r0, r3, #6
-	add r0, sb
-	mov r7, ip
-	adds r2, r7, r0
-_08014C72:
-	cmp r1, #0x1f
-	bhi _08014C7C
-	cmp r3, #0x1f
-	bhi _08014C7C
-	strh r4, [r2]
-_08014C7C:
-	adds r2, #2
-	adds r1, #1
-	adds r0, r4, #1
-	lsls r0, r0, #0x10
-	lsrs r4, r0, #0x10
-	cmp r1, r5
-	blt _08014C72
-_08014C8A:
-	adds r3, r6, #0
-	cmp r3, r8
-	blt _08014C5C
-_08014C90:
-	pop {r3, r4, r5}
-	mov r8, r3
-	mov sb, r4
-	mov sl, r5
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08014CA0
-sub_08014CA0: @ 0x08014CA0
-	push {r4, r5, r6, r7, lr}
-	mov r7, sl
-	mov r6, sb
-	mov r5, r8
-	push {r5, r6, r7}
-	sub sp, #8
-	str r0, [sp]
-	adds r7, r1, #0
-	mov sl, r2
-	ldr r0, [sp, #0x28]
-	mov ip, r0
-	ldr r0, [sp, #0x34]
-	lsls r3, r3, #0x10
-	lsrs r3, r3, #0x10
-	mov sb, r3
-	ldr r1, [sp, #0x30]
-	str r1, [sp, #4]
-	lsls r0, r0, #0x18
-	cmp r0, #0
-	beq _08014D20
-	movs r5, #0
-	ldr r2, [sp, #0x2c]
-	cmp r5, r2
-	bge _08014D68
-_08014CD0:
-	movs r2, #0
-	adds r6, r5, #1
-	cmp r2, ip
-	bge _08014D16
-	lsls r3, r5, #6
-	movs r0, #0x80
-	lsls r0, r0, #3
-	mov r8, r0
-_08014CE0:
-	adds r0, r7, r2
-	adds r4, r2, #1
-	cmp r0, #0x1f
-	bhi _08014D10
-	mov r2, sl
-	adds r1, r2, r5
-	cmp r1, #0x1f
-	bhi _08014D10
-	lsls r1, r1, #6
-	lsls r0, r0, #1
-	ldr r2, [sp]
-	adds r0, r0, r2
-	adds r1, r1, r0
-	mov r2, ip
-	subs r0, r2, r4
-	lsls r0, r0, #1
-	ldr r2, [sp, #4]
-	adds r0, r0, r2
-	adds r0, r3, r0
-	ldrh r0, [r0]
-	add r0, sb
-	mov r2, r8
-	eors r0, r2
-	strh r0, [r1]
-_08014D10:
-	adds r2, r4, #0
-	cmp r2, ip
-	blt _08014CE0
-_08014D16:
-	adds r5, r6, #0
-	ldr r0, [sp, #0x2c]
-	cmp r5, r0
-	blt _08014CD0
-	b _08014D68
-_08014D20:
-	movs r5, #0
-	ldr r1, [sp, #0x2c]
-	cmp r5, r1
-	bge _08014D68
-	lsls r2, r7, #1
-	mov r8, r2
-_08014D2C:
-	movs r2, #0
-	adds r6, r5, #1
-	cmp r2, ip
-	bge _08014D60
-	lsls r0, r5, #6
-	ldr r1, [sp, #4]
-	adds r4, r1, r0
-	ldr r3, [sp]
-	add r3, r8
-_08014D3E:
-	adds r0, r7, r2
-	cmp r0, #0x1f
-	bhi _08014D56
-	mov r1, sl
-	adds r0, r1, r5
-	cmp r0, #0x1f
-	bhi _08014D56
-	lsls r0, r0, #6
-	adds r0, r0, r3
-	ldrh r1, [r4]
-	add r1, sb
-	strh r1, [r0]
-_08014D56:
-	adds r4, #2
-	adds r3, #2
-	adds r2, #1
-	cmp r2, ip
-	blt _08014D3E
-_08014D60:
-	adds r5, r6, #0
-	ldr r2, [sp, #0x2c]
-	cmp r5, r2
-	blt _08014D2C
-_08014D68:
-	add sp, #8
-	pop {r3, r4, r5}
-	mov r8, r3
-	mov sb, r4
-	mov sl, r5
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08014D78
-sub_08014D78: @ 0x08014D78
-	push {r4, r5, r6, r7, lr}
-	mov r7, sl
-	mov r6, sb
-	mov r5, r8
-	push {r5, r6, r7}
-	sub sp, #8
-	str r0, [sp]
-	mov sb, r1
-	str r2, [sp, #4]
-	ldr r7, [sp, #0x28]
-	ldr r5, [sp, #0x34]
-	lsls r3, r3, #0x10
-	lsrs r3, r3, #0x10
-	mov sl, r3
-	ldr r0, [sp, #0x30]
-	mov r8, r0
-	movs r0, #0x20
-	adds r1, r7, #0
-	bl Div
-	adds r4, r0, #0
-	adds r0, r5, #0
-	adds r1, r4, #0
-	bl Div
-	adds r6, r0, #0
-	adds r0, r5, #0
-	adds r1, r4, #0
-	bl DivRem
-	adds r1, r7, #0
-	muls r1, r0, r1
-	lsls r1, r1, #1
-	add r1, r8
-	ldr r2, [sp, #0x2c]
-	adds r0, r6, #0
-	muls r0, r2, r0
-	lsls r0, r0, #6
-	adds r1, r1, r0
-	mov r8, r1
-	movs r5, #0
-	cmp r5, r2
-	bge _08014E12
-	mov r0, sb
-	lsls r0, r0, #1
-	mov ip, r0
-_08014DD4:
-	movs r4, #0
-	adds r6, r5, #1
-	cmp r4, r7
-	bge _08014E0A
-	lsls r0, r5, #6
-	mov r1, r8
-	adds r3, r1, r0
-	ldr r2, [sp]
-	add r2, ip
-_08014DE6:
-	mov r1, sb
-	adds r0, r1, r4
-	cmp r0, #0x1f
-	bhi _08014E00
-	ldr r1, [sp, #4]
-	adds r0, r1, r5
-	cmp r0, #0x1f
-	bhi _08014E00
-	lsls r0, r0, #6
-	adds r0, r0, r2
-	ldrh r1, [r3]
-	add r1, sl
-	strh r1, [r0]
-_08014E00:
-	adds r3, #2
-	adds r2, #2
-	adds r4, #1
-	cmp r4, r7
-	blt _08014DE6
-_08014E0A:
-	adds r5, r6, #0
-	ldr r2, [sp, #0x2c]
-	cmp r5, r2
-	blt _08014DD4
-_08014E12:
-	add sp, #8
-	pop {r3, r4, r5}
-	mov r8, r3
-	mov sb, r4
-	mov sl, r5
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08014E24
-sub_08014E24: @ 0x08014E24
-	push {r4, r5, r6, r7, lr}
-	mov r7, sl
-	mov r6, sb
-	mov r5, r8
-	push {r5, r6, r7}
-	sub sp, #0x14
-	str r0, [sp]
-	mov sl, r1
-	str r2, [sp, #4]
-	ldr r0, [sp, #0x34]
-	mov r8, r0
-	ldr r4, [sp, #0x40]
-	lsls r3, r3, #0x10
-	lsrs r3, r3, #0x10
-	str r3, [sp, #8]
-	ldr r1, [sp, #0x3c]
-	ldrb r2, [r1]
-	adds r2, #1
-	mov sb, r2
-	adds r1, #2
-	str r1, [sp, #0xc]
-	mov r0, sb
-	mov r1, r8
-	bl Div
-	adds r5, r0, #0
-	adds r0, r4, #0
-	adds r1, r5, #0
-	bl Div
-	adds r1, r5, #0
-	muls r1, r0, r1
-	subs r4, r4, r1
-	mov r1, r8
-	muls r1, r4, r1
-	lsls r1, r1, #1
-	ldr r6, [sp, #0xc]
-	adds r1, r6, r1
-	ldr r7, [sp, #0x38]
-	muls r0, r7, r0
-	lsls r0, r0, #6
-	adds r1, r1, r0
-	str r1, [sp, #0xc]
-	movs r5, #0
-	cmp r5, r7
-	bge _08014ED4
-	mov r0, sl
-	lsls r0, r0, #1
-	mov ip, r0
-_08014E86:
-	movs r4, #0
-	adds r1, r5, #1
-	str r1, [sp, #0x10]
-	cmp r4, r8
-	bge _08014ECC
-	ldr r2, [sp, #0x38]
-	subs r0, r2, r5
-	subs r0, #1
-	mov r6, sb
-	muls r6, r0, r6
-	adds r0, r6, #0
-	lsls r0, r0, #1
-	ldr r7, [sp, #0xc]
-	adds r3, r7, r0
-	ldr r2, [sp]
-	add r2, ip
-_08014EA6:
-	mov r1, sl
-	adds r0, r1, r4
-	cmp r0, #0x1f
-	bhi _08014EC2
-	ldr r6, [sp, #4]
-	adds r0, r6, r5
-	cmp r0, #0x1f
-	bhi _08014EC2
-	lsls r0, r0, #6
-	adds r0, r0, r2
-	ldrh r7, [r3]
-	ldr r6, [sp, #8]
-	adds r1, r7, r6
-	strh r1, [r0]
-_08014EC2:
-	adds r3, #2
-	adds r2, #2
-	adds r4, #1
-	cmp r4, r8
-	blt _08014EA6
-_08014ECC:
-	ldr r5, [sp, #0x10]
-	ldr r7, [sp, #0x38]
-	cmp r5, r7
-	blt _08014E86
-_08014ED4:
-	add sp, #0x14
-	pop {r3, r4, r5}
-	mov r8, r3
-	mov sb, r4
-	mov sl, r5
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08014EE4
-sub_08014EE4: @ 0x08014EE4
-	push {r4, r5, r6, r7, lr}
-	mov r7, sb
-	mov r6, r8
-	push {r6, r7}
-	mov r8, r0
-	adds r5, r1, #0
-	mov ip, r2
-	ldr r0, [sp, #0x1c]
-	lsls r0, r0, #0x10
-	lsrs r6, r0, #0x10
-	adds r2, r3, #2
-	movs r1, #0xff
-	ldr r0, [r3]
-	ldrb r3, [r3]
-	mov sb, r3
-	lsrs r3, r0, #8
-	ands r3, r1
-	lsls r1, r3, #0x10
-	asrs r0, r1, #0x10
-	cmp r0, #0
-	blt _08014F52
-_08014F0E:
-	asrs r0, r1, #0x10
-	add r0, ip
-	lsls r4, r3, #0x10
-	cmp r0, #0x1f
-	bhi _08014F46
-	lsls r0, r0, #5
-	adds r0, r5, r0
-	lsls r0, r0, #1
-	mov r3, r8
-	adds r1, r3, r0
-	mov r7, sb
-	lsls r3, r7, #0x10
-	asrs r0, r3, #0x10
-	cmp r0, #0
-	blt _08014F46
-_08014F2C:
-	asrs r3, r3, #0x10
-	adds r0, r5, r3
-	cmp r0, #0x1f
-	bhi _08014F3A
-	ldrh r7, [r2]
-	adds r0, r7, r6
-	strh r0, [r1]
-_08014F3A:
-	subs r0, r3, #1
-	adds r2, #2
-	adds r1, #2
-	lsls r3, r0, #0x10
-	cmp r3, #0
-	bge _08014F2C
-_08014F46:
-	ldr r1, _08014F60 @ =0xFFFF0000
-	adds r0, r4, r1
-	lsrs r3, r0, #0x10
-	lsls r1, r3, #0x10
-	cmp r1, #0
-	bge _08014F0E
-_08014F52:
-	pop {r3, r4}
-	mov r8, r3
-	mov sb, r4
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08014F60: .4byte 0xFFFF0000
-
-	thumb_func_start sub_08014F64
-sub_08014F64: @ 0x08014F64
-	push {r4, lr}
-	adds r4, r0, #0
-	ldr r0, [r4, #0x34]
-	subs r0, #1
-	str r0, [r4, #0x34]
-	movs r1, #1
-	rsbs r1, r1, #0
-	cmp r0, r1
-	bne _08014F82
-	ldr r0, [r4, #0x2c]
-	bl _call_via_r0
-	adds r0, r4, #0
-	bl sub_0800457C
-_08014F82:
-	pop {r4}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08014F88
-sub_08014F88: @ 0x08014F88
-	push {r4, lr}
-	adds r4, r0, #0
-	ldr r0, [r4, #0x34]
-	subs r0, #1
-	str r0, [r4, #0x34]
-	movs r1, #1
-	rsbs r1, r1, #0
-	cmp r0, r1
-	bne _08014FA8
-	ldr r1, [r4, #0x2c]
-	ldr r0, [r4, #0x30]
-	bl _call_via_r1
-	adds r0, r4, #0
-	bl sub_0800457C
-_08014FA8:
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08014FB0
-sub_08014FB0: @ 0x08014FB0
-	push {r4, r5, lr}
-	adds r4, r0, #0
-	adds r5, r1, #0
-	ldr r0, _08014FC8 @ =0x08C01CCC
-	movs r1, #3
-	bl Proc_Start
-	str r4, [r0, #0x2c]
-	str r5, [r0, #0x34]
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08014FC8: .4byte 0x08C01CCC
-
-	thumb_func_start sub_08014FCC
-sub_08014FCC: @ 0x08014FCC
-	push {r4, r5, r6, lr}
-	adds r4, r0, #0
-	adds r5, r1, #0
-	adds r6, r2, #0
-	ldr r0, _08014FE8 @ =0x08C01CDC
-	movs r1, #3
-	bl Proc_Start
-	str r4, [r0, #0x2c]
-	str r5, [r0, #0x30]
-	str r6, [r0, #0x34]
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08014FE8: .4byte 0x08C01CDC
-
-	thumb_func_start sub_08014FEC
-sub_08014FEC: @ 0x08014FEC
-	cmp r1, #0
-	ble _08014FFC
-	movs r2, #0
-_08014FF2:
-	strb r2, [r0]
-	adds r0, #1
-	subs r1, #1
-	cmp r1, #0
-	bgt _08014FF2
-_08014FFC:
-	bx lr
-	.align 2, 0
-
-	thumb_func_start sub_08015000
-sub_08015000: @ 0x08015000
-	cmp r1, #0
-	ble _0801500E
-_08015004:
-	strb r2, [r0]
-	adds r0, #1
-	subs r1, #1
-	cmp r1, #0
-	bgt _08015004
-_0801500E:
-	bx lr
-
-	thumb_func_start sub_08015010
-sub_08015010: @ 0x08015010
-	cmp r1, #0
-	ble _0801501E
-_08015014:
-	strh r2, [r0]
-	adds r0, #2
-	subs r1, #1
-	cmp r1, #0
-	bgt _08015014
-_0801501E:
-	bx lr
-
-	thumb_func_start sub_08015020
-sub_08015020: @ 0x08015020
-	push {r4, lr}
-	adds r1, r0, #0
-	ldr r0, _08015040 @ =0x08C01DAC
-	bl sub_080043D4
-	adds r4, r0, #0
-	bl sub_080157A4
-	lsls r0, r0, #0x18
-	lsrs r0, r0, #0x18
-	adds r4, #0x64
-	strh r0, [r4]
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08015040: .4byte 0x08C01DAC
-
-	thumb_func_start sub_08015044
-sub_08015044: @ 0x08015044
-	push {r4, lr}
-	adds r4, r0, #0
-	bl sub_080157A4
-	lsls r0, r0, #0x18
-	lsrs r0, r0, #0x18
-	adds r1, r4, #0
-	adds r1, #0x64
-	movs r2, #0
-	ldrsh r1, [r1, r2]
-	cmp r0, r1
-	bne _08015062
-	adds r0, r4, #0
-	bl sub_0800457C
-_08015062:
-	pop {r4}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08015068
-sub_08015068: @ 0x08015068
-	push {r4, lr}
-	adds r4, r0, #0
-	adds r3, r2, #0
-	movs r0, #0x1f
-	ands r0, r3
-	cmp r0, #0
-	beq _08015086
-	lsrs r2, r3, #0x1f
-	adds r2, r3, r2
-	lsls r2, r2, #0xa
-	lsrs r2, r2, #0xb
-	adds r0, r4, #0
-	bl CpuSet
-	b _08015098
-_08015086:
-	adds r2, r3, #0
-	cmp r2, #0
-	bge _0801508E
-	adds r2, #3
-_0801508E:
-	lsls r2, r2, #9
-	lsrs r2, r2, #0xb
-	adds r0, r4, #0
-	bl CpuFastSet
-_08015098:
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_080150A0
-sub_080150A0: @ 0x080150A0
-	push {r4, r5, r6, r7, lr}
-	adds r6, r0, #0
-	adds r5, r1, #0
-	lsls r7, r2, #5
-	cmp r3, #0
-	ble _080150C6
-	adds r4, r3, #0
-_080150AE:
-	adds r0, r6, #0
-	adds r1, r5, #0
-	adds r2, r7, #0
-	bl sub_08015068
-	adds r6, r6, r7
-	movs r0, #0x80
-	lsls r0, r0, #3
-	adds r5, r5, r0
-	subs r4, #1
-	cmp r4, #0
-	bne _080150AE
-_080150C6:
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_080150CC
-sub_080150CC: @ 0x080150CC
-	push {r4, r5, lr}
-	adds r4, r0, #0
-	lsls r3, r3, #0x10
-	lsrs r3, r3, #0x10
-	cmp r2, #0
-	ble _080150E8
-_080150D8:
-	ldrh r5, [r4]
-	adds r0, r5, r3
-	strh r0, [r1]
-	adds r4, #2
-	adds r1, #2
-	subs r2, #2
-	cmp r2, #0
-	bgt _080150D8
-_080150E8:
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_080150F0
-sub_080150F0: @ 0x080150F0
-	cmp r0, #1
-	beq _08015118
-	cmp r0, #1
-	bgt _080150FE
-	cmp r0, #0
-	beq _08015108
-	b _08015148
-_080150FE:
-	cmp r0, #2
-	beq _08015128
-	cmp r0, #3
-	beq _08015138
-	b _08015148
-_08015108:
-	lsls r0, r2, #5
-	adds r0, r0, r1
-	lsls r0, r0, #1
-	ldr r1, _08015114 @ =0x02022C60
-	adds r0, r0, r1
-	b _0801514A
-	.align 2, 0
-_08015114: .4byte 0x02022C60
-_08015118:
-	lsls r0, r2, #5
-	adds r0, r0, r1
-	lsls r0, r0, #1
-	ldr r1, _08015124 @ =0x02023460
-	adds r0, r0, r1
-	b _0801514A
-	.align 2, 0
-_08015124: .4byte 0x02023460
-_08015128:
-	lsls r0, r2, #5
-	adds r0, r0, r1
-	lsls r0, r0, #1
-	ldr r1, _08015134 @ =0x02023C60
-	adds r0, r0, r1
-	b _0801514A
-	.align 2, 0
-_08015134: .4byte 0x02023C60
-_08015138:
-	lsls r0, r2, #5
-	adds r0, r0, r1
-	lsls r0, r0, #1
-	ldr r1, _08015144 @ =0x02024460
-	adds r0, r0, r1
-	b _0801514A
-	.align 2, 0
-_08015144: .4byte 0x02024460
-_08015148:
-	movs r0, #0
-_0801514A:
-	bx lr
-
-	thumb_func_start sub_0801514C
-sub_0801514C: @ 0x0801514C
-	push {r4, r5, lr}
-	ldr r4, _080151D0 @ =0x03002790
-	movs r5, #0x80
-	adds r0, r5, #0
-	ldrb r1, [r4, #0xc]
-	ands r0, r1
-	cmp r0, #0
-	bne _08015170
-	movs r0, #0
-	bl sub_08001370
-	movs r1, #0xc0
-	lsls r1, r1, #0x13
-	adds r0, r0, r1
-	movs r1, #0x10
-	movs r2, #0
-	bl sub_08015010
-_08015170:
-	adds r0, r5, #0
-	ldrb r1, [r4, #0x10]
-	ands r0, r1
-	cmp r0, #0
-	bne _0801518E
-	movs r0, #1
-	bl sub_08001370
-	movs r1, #0xc0
-	lsls r1, r1, #0x13
-	adds r0, r0, r1
-	movs r1, #0x10
-	movs r2, #0
-	bl sub_08015010
-_0801518E:
-	adds r0, r5, #0
-	ldrb r1, [r4, #0x14]
-	ands r0, r1
-	cmp r0, #0
-	bne _080151AC
-	movs r0, #2
-	bl sub_08001370
-	movs r1, #0xc0
-	lsls r1, r1, #0x13
-	adds r0, r0, r1
-	movs r1, #0x10
-	movs r2, #0
-	bl sub_08015010
-_080151AC:
-	adds r0, r5, #0
-	ldrb r4, [r4, #0x18]
-	ands r0, r4
-	cmp r0, #0
-	bne _080151CA
-	movs r0, #3
-	bl sub_08001370
-	movs r1, #0xc0
-	lsls r1, r1, #0x13
-	adds r0, r0, r1
-	movs r1, #0x10
-	movs r2, #0
-	bl sub_08015010
-_080151CA:
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080151D0: .4byte 0x03002790
-
-	thumb_func_start sub_080151D4
-sub_080151D4: @ 0x080151D4
-	push {lr}
-	adds r1, r0, #0
-	cmp r1, #0
-	bge _080151E2
-	movs r0, #0x60
-	rsbs r0, r0, #0
-	b _080151F8
-_080151E2:
-	cmp r1, #0xef
-	bgt _080151F6
-	lsls r0, r1, #1
-	adds r0, r0, r1
-	lsls r0, r0, #6
-	movs r1, #0xf0
-	bl Div
-	subs r0, #0x60
-	b _080151F8
-_080151F6:
-	movs r0, #0x5f
-_080151F8:
-	pop {r1}
-	bx r1
-
-	thumb_func_start sub_080151FC
-sub_080151FC: @ 0x080151FC
-	push {r4, r5, r6, lr}
-	adds r4, r0, #0
-	adds r6, r1, #0
-	ldr r0, _0801524C @ =0x0202BBF4
-	adds r0, #0x41
-	ldrb r0, [r0]
-	lsls r0, r0, #0x1e
-	cmp r0, #0
-	blt _08015216
-	lsls r0, r4, #0x10
-	lsrs r0, r0, #0x10
-	bl m4aSongNumStart
-_08015216:
-	ldr r2, _08015250 @ =0x086EA858
-	ldr r0, _08015254 @ =0x086EA8D0
-	lsls r1, r4, #3
-	adds r1, r1, r0
-	ldrh r3, [r1, #4]
-	lsls r0, r3, #1
-	adds r0, r0, r3
-	lsls r0, r0, #2
-	adds r0, r0, r2
-	ldr r4, [r0]
-	adds r0, r4, #0
-	bl m4aMPlayImmInit
-	ldr r5, _08015258 @ =0x0000FFFF
-	adds r0, r6, #0
-	bl sub_080151D4
-	adds r2, r0, #0
-	lsls r2, r2, #0x18
-	asrs r2, r2, #0x18
-	adds r0, r4, #0
-	adds r1, r5, #0
-	bl MPlayPanpotControl
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_0801524C: .4byte 0x0202BBF4
-_08015250: .4byte 0x086EA858
-_08015254: .4byte 0x086EA8D0
-_08015258: .4byte 0x0000FFFF
-
-	thumb_func_start sub_0801525C
-sub_0801525C: @ 0x0801525C
-	push {lr}
-	adds r3, r0, #0
-	adds r2, r1, #0
-	ldr r0, _08015270 @ =sub_08015274
-	adds r1, r3, #0
-	bl sub_08014FCC
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08015270: .4byte sub_08015274
-
-	thumb_func_start sub_08015274
-sub_08015274: @ 0x08015274
-	push {lr}
-	adds r1, r0, #0
-	ldr r0, _08015290 @ =0x0202BBF4
-	adds r0, #0x41
-	ldrb r0, [r0]
-	lsls r0, r0, #0x1e
-	cmp r0, #0
-	blt _0801528C
-	lsls r0, r1, #0x10
-	lsrs r0, r0, #0x10
-	bl m4aSongNumStart
-_0801528C:
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08015290: .4byte 0x0202BBF4
-
-	thumb_func_start sub_08015294
-sub_08015294: @ 0x08015294
-	push {lr}
-	lsls r0, r0, #0x10
-	asrs r0, r0, #0x10
-	movs r1, #0
-	bl sub_0800376C
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_080152A4
-sub_080152A4: @ 0x080152A4
-	push {lr}
-	lsls r0, r0, #0x10
-	asrs r0, r0, #0x10
-	bl sub_080034C8
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_080152B4
-sub_080152B4: @ 0x080152B4
-	push {r4, r5, r6, r7, lr}
-	lsls r0, r0, #5
-	ldr r1, _08015308 @ =0x02022860
-	movs r2, #0x1f
-	mov ip, r2
-	movs r7, #0xf8
-	lsls r7, r7, #2
-	movs r6, #0xf8
-	lsls r6, r6, #7
-	adds r4, r0, r1
-	movs r5, #0xf
-_080152CA:
-	ldrh r1, [r4]
-	movs r0, #0x1f
-	ands r0, r1
-	lsrs r0, r0, #2
-	lsls r2, r0, #1
-	adds r2, r2, r0
-	adds r0, r7, #0
-	ands r0, r1
-	lsrs r0, r0, #2
-	lsls r3, r0, #1
-	adds r3, r3, r0
-	adds r0, r6, #0
-	ands r0, r1
-	lsrs r0, r0, #2
-	lsls r1, r0, #1
-	adds r1, r1, r0
-	mov r0, ip
-	ands r2, r0
-	ands r3, r7
-	orrs r2, r3
-	ands r1, r6
-	orrs r2, r1
-	strh r2, [r4]
-	adds r4, #2
-	subs r5, #1
-	cmp r5, #0
-	bge _080152CA
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08015308: .4byte 0x02022860
-
-	thumb_func_start sub_0801530C
-sub_0801530C: @ 0x0801530C
-	adds r3, r0, #0
-	cmp r2, #0
-	beq _08015320
-_08015312:
-	ldrb r0, [r3]
-	strb r0, [r1]
-	adds r1, #1
-	adds r3, #1
-	subs r2, #1
-	cmp r2, #0
-	bne _08015312
-_08015320:
-	bx lr
-	.align 2, 0
-
-	thumb_func_start sub_08015324
-sub_08015324: @ 0x08015324
-	push {r4, r5, r6, lr}
-	mov r6, sb
-	mov r5, r8
-	push {r5, r6}
-	adds r6, r0, #0
-	mov sb, r1
-	adds r5, r2, #0
-	mov r8, r3
-	ldr r4, [sp, #0x18]
-	mov r0, r8
-	bl sub_080054CC
-	adds r1, r0, #0
-	lsls r4, r4, #3
-	subs r4, r4, r1
-	asrs r1, r4, #1
-	adds r0, r6, #0
-	bl sub_08005444
-	adds r0, r6, #0
-	mov r1, r8
-	bl sub_080055DC
-	lsls r5, r5, #5
-	add r5, sb
-	lsls r5, r5, #1
-	ldr r0, _08015370 @ =0x02022C60
-	adds r5, r5, r0
-	adds r0, r6, #0
-	adds r1, r5, #0
-	bl sub_08005460
-	pop {r3, r4}
-	mov r8, r3
-	mov sb, r4
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08015370: .4byte 0x02022C60
-
-	thumb_func_start sub_08015374
-sub_08015374: @ 0x08015374
-	push {r4, r5, r6, lr}
-	ldr r6, [r0]
-	ldr r3, [r1]
-	muls r3, r6, r3
-	ldr r5, [r0, #4]
-	ldr r4, [r1, #0xc]
-	muls r4, r5, r4
-	adds r3, r3, r4
-	ldr r4, [r0, #8]
-	ldr r0, [r1, #0x18]
-	muls r0, r4, r0
-	adds r3, r3, r0
-	asrs r3, r3, #0xc
-	str r3, [r2]
-	ldr r0, [r1, #4]
-	muls r0, r6, r0
-	ldr r3, [r1, #0x10]
-	muls r3, r5, r3
-	adds r0, r0, r3
-	ldr r3, [r1, #0x1c]
-	muls r3, r4, r3
-	adds r0, r0, r3
-	asrs r0, r0, #0xc
-	str r0, [r2, #4]
-	ldr r0, [r1, #8]
-	muls r0, r6, r0
-	ldr r3, [r1, #0x14]
-	muls r3, r5, r3
-	adds r0, r0, r3
-	ldr r1, [r1, #0x20]
-	muls r1, r4, r1
-	adds r0, r0, r1
-	asrs r0, r0, #0xc
-	str r0, [r2, #8]
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_080153C0
-sub_080153C0: @ 0x080153C0
-	push {r4, r5, r6, lr}
-	sub sp, #0x30
-	adds r3, r0, #0
-	adds r4, r1, #0
-	adds r6, r2, #0
-	cmp r3, r6
-	beq _080153D2
-	cmp r4, r6
-	bne _080153D6
-_080153D2:
-	mov r5, sp
-	b _080153D8
-_080153D6:
-	adds r5, r6, #0
-_080153D8:
-	ldr r1, [r3]
-	ldr r0, [r4]
-	muls r0, r1, r0
-	ldr r2, [r3, #4]
-	ldr r1, [r4, #0xc]
-	muls r1, r2, r1
-	adds r0, r0, r1
-	ldr r2, [r3, #8]
-	ldr r1, [r4, #0x18]
-	muls r1, r2, r1
-	adds r0, r0, r1
-	asrs r0, r0, #0xc
-	str r0, [r5]
-	ldr r1, [r3]
-	ldr r0, [r4, #4]
-	muls r0, r1, r0
-	ldr r2, [r3, #4]
-	ldr r1, [r4, #0x10]
-	muls r1, r2, r1
-	adds r0, r0, r1
-	ldr r2, [r3, #8]
-	ldr r1, [r4, #0x1c]
-	muls r1, r2, r1
-	adds r0, r0, r1
-	asrs r0, r0, #0xc
-	str r0, [r5, #4]
-	ldr r1, [r3]
-	ldr r0, [r4, #8]
-	muls r0, r1, r0
-	ldr r2, [r3, #4]
-	ldr r1, [r4, #0x14]
-	muls r1, r2, r1
-	adds r0, r0, r1
-	ldr r2, [r3, #8]
-	ldr r1, [r4, #0x20]
-	muls r1, r2, r1
-	adds r0, r0, r1
-	asrs r0, r0, #0xc
-	str r0, [r5, #8]
-	ldr r1, [r3, #0xc]
-	ldr r0, [r4]
-	muls r0, r1, r0
-	ldr r2, [r3, #0x10]
-	ldr r1, [r4, #0xc]
-	muls r1, r2, r1
-	adds r0, r0, r1
-	ldr r2, [r3, #0x14]
-	ldr r1, [r4, #0x18]
-	muls r1, r2, r1
-	adds r0, r0, r1
-	asrs r0, r0, #0xc
-	str r0, [r5, #0xc]
-	ldr r1, [r3, #0xc]
-	ldr r0, [r4, #4]
-	muls r0, r1, r0
-	ldr r2, [r3, #0x10]
-	ldr r1, [r4, #0x10]
-	muls r1, r2, r1
-	adds r0, r0, r1
-	ldr r2, [r3, #0x14]
-	ldr r1, [r4, #0x1c]
-	muls r1, r2, r1
-	adds r0, r0, r1
-	asrs r0, r0, #0xc
-	str r0, [r5, #0x10]
-	ldr r1, [r3, #0xc]
-	ldr r0, [r4, #8]
-	muls r0, r1, r0
-	ldr r2, [r3, #0x10]
-	ldr r1, [r4, #0x14]
-	muls r1, r2, r1
-	adds r0, r0, r1
-	ldr r2, [r3, #0x14]
-	ldr r1, [r4, #0x20]
-	muls r1, r2, r1
-	adds r0, r0, r1
-	asrs r0, r0, #0xc
-	str r0, [r5, #0x14]
-	ldr r1, [r3, #0x18]
-	ldr r0, [r4]
-	muls r0, r1, r0
-	ldr r2, [r3, #0x1c]
-	ldr r1, [r4, #0xc]
-	muls r1, r2, r1
-	adds r0, r0, r1
-	ldr r2, [r3, #0x20]
-	ldr r1, [r4, #0x18]
-	muls r1, r2, r1
-	adds r0, r0, r1
-	asrs r0, r0, #0xc
-	str r0, [r5, #0x18]
-	ldr r1, [r3, #0x18]
-	ldr r0, [r4, #4]
-	muls r0, r1, r0
-	ldr r2, [r3, #0x1c]
-	ldr r1, [r4, #0x10]
-	muls r1, r2, r1
-	adds r0, r0, r1
-	ldr r2, [r3, #0x20]
-	ldr r1, [r4, #0x1c]
-	muls r1, r2, r1
-	adds r0, r0, r1
-	asrs r0, r0, #0xc
-	str r0, [r5, #0x1c]
-	ldr r1, [r3, #0x18]
-	ldr r0, [r4, #8]
-	muls r0, r1, r0
-	ldr r2, [r3, #0x1c]
-	ldr r1, [r4, #0x14]
-	muls r1, r2, r1
-	adds r0, r0, r1
-	ldr r2, [r3, #0x20]
-	ldr r1, [r4, #0x20]
-	muls r1, r2, r1
-	adds r0, r0, r1
-	asrs r0, r0, #0xc
-	str r0, [r5, #0x20]
-	ldr r1, [r3]
-	ldr r0, [r4, #0x24]
-	muls r0, r1, r0
-	ldr r2, [r3, #0xc]
-	ldr r1, [r4, #0x28]
-	muls r1, r2, r1
-	adds r0, r0, r1
-	ldr r2, [r3, #0x18]
-	ldr r1, [r4, #0x2c]
-	muls r1, r2, r1
-	adds r0, r0, r1
-	asrs r0, r0, #0xc
-	ldr r1, [r3, #0x24]
-	adds r0, r0, r1
-	str r0, [r5, #0x24]
-	ldr r1, [r3, #4]
-	ldr r0, [r4, #0x24]
-	muls r0, r1, r0
-	ldr r2, [r3, #0x10]
-	ldr r1, [r4, #0x28]
-	muls r1, r2, r1
-	adds r0, r0, r1
-	ldr r2, [r3, #0x1c]
-	ldr r1, [r4, #0x2c]
-	muls r1, r2, r1
-	adds r0, r0, r1
-	asrs r0, r0, #0xc
-	ldr r1, [r3, #0x28]
-	adds r0, r0, r1
-	str r0, [r5, #0x28]
-	ldr r1, [r3, #8]
-	ldr r0, [r4, #0x24]
-	muls r0, r1, r0
-	ldr r2, [r3, #0x14]
-	ldr r1, [r4, #0x28]
-	muls r1, r2, r1
-	adds r0, r0, r1
-	ldr r2, [r3, #0x20]
-	ldr r1, [r4, #0x2c]
-	muls r1, r2, r1
-	adds r0, r0, r1
-	asrs r0, r0, #0xc
-	ldr r1, [r3, #0x2c]
-	adds r0, r0, r1
-	str r0, [r5, #0x2c]
-	cmp r5, sp
-	bne _08015528
-	mov r0, sp
-	adds r1, r6, #0
-	bl sub_08015550
-_08015528:
-	add sp, #0x30
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08015530
-sub_08015530: @ 0x08015530
-	movs r2, #0x80
-	lsls r2, r2, #5
-	str r2, [r0]
-	movs r1, #0
-	str r1, [r0, #4]
-	str r1, [r0, #8]
-	str r1, [r0, #0xc]
-	str r2, [r0, #0x10]
-	str r1, [r0, #0x14]
-	str r1, [r0, #0x18]
-	str r1, [r0, #0x1c]
-	str r2, [r0, #0x20]
-	str r1, [r0, #0x24]
-	str r1, [r0, #0x28]
-	str r1, [r0, #0x2c]
-	bx lr
-
-	thumb_func_start sub_08015550
-sub_08015550: @ 0x08015550
-	ldr r2, [r0]
-	str r2, [r1]
-	ldr r2, [r0, #4]
-	str r2, [r1, #4]
-	ldr r2, [r0, #8]
-	str r2, [r1, #8]
-	ldr r2, [r0, #0xc]
-	str r2, [r1, #0xc]
-	ldr r2, [r0, #0x10]
-	str r2, [r1, #0x10]
-	ldr r2, [r0, #0x14]
-	str r2, [r1, #0x14]
-	ldr r2, [r0, #0x18]
-	str r2, [r1, #0x18]
-	ldr r2, [r0, #0x1c]
-	str r2, [r1, #0x1c]
-	ldr r2, [r0, #0x20]
-	str r2, [r1, #0x20]
-	ldr r2, [r0, #0x24]
-	str r2, [r1, #0x24]
-	ldr r2, [r0, #0x28]
-	str r2, [r1, #0x28]
-	ldr r0, [r0, #0x2c]
-	str r0, [r1, #0x2c]
-	bx lr
-	.align 2, 0
-
-	thumb_func_start sub_08015584
-sub_08015584: @ 0x08015584
-	push {r4, lr}
-	ldr r3, _080155CC @ =0x080C0E98
-	lsls r1, r1, #0x10
-	movs r2, #0xff
-	lsls r2, r2, #0x10
-	ands r2, r1
-	asrs r2, r2, #0x10
-	adds r1, r2, #0
-	adds r1, #0x40
-	lsls r1, r1, #1
-	adds r1, r1, r3
-	ldrh r4, [r1]
-	lsls r2, r2, #1
-	adds r2, r2, r3
-	ldrh r2, [r2]
-	movs r1, #0x80
-	lsls r1, r1, #5
-	str r1, [r0]
-	movs r3, #0
-	str r3, [r0, #4]
-	str r3, [r0, #8]
-	str r3, [r0, #0xc]
-	lsls r4, r4, #0x10
-	asrs r4, r4, #0x10
-	str r4, [r0, #0x10]
-	lsls r2, r2, #0x10
-	asrs r2, r2, #0x10
-	rsbs r1, r2, #0
-	str r1, [r0, #0x14]
-	str r3, [r0, #0x18]
-	str r2, [r0, #0x1c]
-	str r4, [r0, #0x20]
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080155CC: .4byte 0x080C0E98
-
-	thumb_func_start sub_080155D0
-sub_080155D0: @ 0x080155D0
-	push {r4, lr}
-	ldr r3, _08015614 @ =0x080C0E98
-	lsls r1, r1, #0x10
-	movs r2, #0xff
-	lsls r2, r2, #0x10
-	ands r2, r1
-	asrs r2, r2, #0x10
-	adds r1, r2, #0
-	adds r1, #0x40
-	lsls r1, r1, #1
-	adds r1, r1, r3
-	lsls r2, r2, #1
-	adds r2, r2, r3
-	ldrh r2, [r2]
-	movs r3, #0
-	ldrsh r4, [r1, r3]
-	str r4, [r0]
-	movs r3, #0
-	str r3, [r0, #4]
-	lsls r2, r2, #0x10
-	asrs r2, r2, #0x10
-	rsbs r1, r2, #0
-	str r1, [r0, #8]
-	str r3, [r0, #0xc]
-	movs r1, #0x80
-	lsls r1, r1, #5
-	str r1, [r0, #0x10]
-	str r3, [r0, #0x14]
-	str r2, [r0, #0x18]
-	str r3, [r0, #0x1c]
-	str r4, [r0, #0x20]
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08015614: .4byte 0x080C0E98
-
-	thumb_func_start sub_08015618
-sub_08015618: @ 0x08015618
-	push {r4, lr}
-	ldr r3, _0801565C @ =0x080C0E98
-	lsls r1, r1, #0x10
-	movs r2, #0xff
-	lsls r2, r2, #0x10
-	ands r2, r1
-	asrs r2, r2, #0x10
-	adds r1, r2, #0
-	adds r1, #0x40
-	lsls r1, r1, #1
-	adds r1, r1, r3
-	lsls r2, r2, #1
-	adds r2, r2, r3
-	ldrh r2, [r2]
-	movs r4, #0
-	ldrsh r3, [r1, r4]
-	str r3, [r0]
-	lsls r2, r2, #0x10
-	asrs r2, r2, #0x10
-	rsbs r1, r2, #0
-	str r1, [r0, #4]
-	movs r1, #0
-	str r1, [r0, #8]
-	str r2, [r0, #0xc]
-	str r3, [r0, #0x10]
-	str r1, [r0, #0x14]
-	str r1, [r0, #0x18]
-	str r1, [r0, #0x1c]
-	movs r1, #0x80
-	lsls r1, r1, #5
-	str r1, [r0, #0x20]
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_0801565C: .4byte 0x080C0E98
-
-	thumb_func_start nullsub_36
-nullsub_36: @ 0x08015660
-	bx lr
-	.align 2, 0
-
-	thumb_func_start sub_08015664
-sub_08015664: @ 0x08015664
-	push {r4, lr}
-	adds r4, r0, #0
-	ldr r2, [r4]
-	ldr r0, [r1]
-	muls r0, r2, r0
-	ldr r3, [r4, #4]
-	ldr r2, [r1, #4]
-	muls r2, r3, r2
-	adds r0, r0, r2
-	ldr r2, [r4, #8]
-	ldr r1, [r1, #8]
-	muls r1, r2, r1
-	adds r0, r0, r1
-	asrs r0, r0, #0xc
-	pop {r4}
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_08015688
-sub_08015688: @ 0x08015688
-	push {r4, r5, r6, lr}
-	ldr r6, [r0, #4]
-	ldr r3, [r1, #8]
-	muls r3, r6, r3
-	ldr r5, [r0, #8]
-	ldr r4, [r1, #4]
-	muls r4, r5, r4
-	subs r3, r3, r4
-	asrs r3, r3, #0xc
-	str r3, [r2]
-	ldr r3, [r1]
-	muls r3, r5, r3
-	ldr r4, [r0]
-	ldr r0, [r1, #8]
-	muls r0, r4, r0
-	subs r3, r3, r0
-	asrs r3, r3, #0xc
-	str r3, [r2, #4]
-	ldr r0, [r1, #4]
-	muls r0, r4, r0
-	ldr r1, [r1]
-	muls r1, r6, r1
-	subs r0, r0, r1
-	asrs r0, r0, #0xc
-	str r0, [r2, #8]
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_080156C0
-sub_080156C0: @ 0x080156C0
-	muls r0, r3, r0
-	muls r1, r2, r1
-	subs r0, r0, r1
-	bx lr
-
-	thumb_func_start OnVBlank
-OnVBlank: @ 0x080156C8
-	push {lr}
-	ldr r1, _0801570C @ =0x03007FF8
-	movs r0, #1
-	strh r0, [r1]
-	bl sub_08000F20
-	bl SoundVSync_rev01
-	ldr r0, _08015710 @ =0x02026A28
-	ldr r0, [r0]
-	bl sub_0800456C
-	bl sub_08003214
-	ldr r1, _08015714 @ =0x0202BBB4
-	movs r0, #0
-	ldrsb r0, [r1, r0]
-	cmp r0, #0
-	beq _08015702
-	movs r0, #0
-	strb r0, [r1]
-	bl sub_08001188
-	bl sub_080016C4
-	bl sub_08003054
-	bl sub_080031BC
-_08015702:
-	bl m4aSoundMain
-	pop {r0}
-	bx r0
-	.align 2, 0
-_0801570C: .4byte 0x03007FF8
-_08015710: .4byte 0x02026A28
-_08015714: .4byte 0x0202BBB4
-
-	thumb_func_start OnGameLoopMain
-OnGameLoopMain: @ 0x08015718
-	push {r4, lr}
-	ldr r0, _08015774 @ =0x08BBFC7C
-	ldr r0, [r0]
-	bl sub_08001BA0
-	bl sub_08006840
-	ldr r4, _08015778 @ =0x02026A28
-	ldr r0, [r4, #4]
-	bl sub_0800456C
-	bl sub_080157A4
-	lsls r0, r0, #0x18
-	cmp r0, #0
-	bne _0801573E
-	ldr r0, [r4, #8]
-	bl sub_0800456C
-_0801573E:
-	ldr r0, [r4, #0xc]
-	bl sub_0800456C
-	ldr r0, [r4, #0x14]
-	bl sub_0800456C
-	movs r0, #0
-	bl sub_080068F4
-	ldr r0, [r4, #0x10]
-	bl sub_0800456C
-	movs r0, #0xd
-	bl sub_080068F4
-	ldr r1, _0801577C @ =0x0202BBB4
-	movs r0, #1
-	strb r0, [r1]
-	ldr r0, _08015780 @ =0x04000006
-	ldrh r0, [r0]
-	strh r0, [r1, #6]
-	bl VBlankIntrWait
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08015774: .4byte 0x08BBFC7C
-_08015778: .4byte 0x02026A28
-_0801577C: .4byte 0x0202BBB4
-_08015780: .4byte 0x04000006
-
-	thumb_func_start sub_08015784
-sub_08015784: @ 0x08015784
-	ldr r1, _08015790 @ =0x0202BBB4
-	ldrb r0, [r1, #1]
-	adds r0, #1
-	strb r0, [r1, #1]
-	bx lr
-	.align 2, 0
-_08015790: .4byte 0x0202BBB4
-
-	thumb_func_start sub_08015794
-sub_08015794: @ 0x08015794
-	ldr r1, _080157A0 @ =0x0202BBB4
-	ldrb r0, [r1, #1]
-	subs r0, #1
-	strb r0, [r1, #1]
-	bx lr
-	.align 2, 0
-_080157A0: .4byte 0x0202BBB4
-
-	thumb_func_start sub_080157A4
-sub_080157A4: @ 0x080157A4
-	ldr r0, _080157AC @ =0x0202BBB4
-	ldrb r0, [r0, #1]
-	bx lr
-	.align 2, 0
-_080157AC: .4byte 0x0202BBB4
-
-	thumb_func_start sub_080157B0
-sub_080157B0: @ 0x080157B0
-	push {lr}
-	ldr r2, _080157C4 @ =0x0202BBF4
-	ldrb r0, [r2, #0xf]
-	cmp r0, #0x40
-	beq _080157DA
-	cmp r0, #0x40
-	bgt _080157C8
-	cmp r0, #0
-	beq _080157CE
-	b _080157EE
-	.align 2, 0
-_080157C4: .4byte 0x0202BBF4
-_080157C8:
-	cmp r0, #0x80
-	beq _080157D4
-	b _080157EE
-_080157CE:
-	movs r0, #0x80
-	strb r0, [r2, #0xf]
-	b _080157EE
-_080157D4:
-	movs r0, #0x40
-	strb r0, [r2, #0xf]
-	b _080157EE
-_080157DA:
-	movs r0, #0
-	strb r0, [r2, #0xf]
-	ldrh r1, [r2, #0x10]
-	ldr r0, _080157F4 @ =0x000003E6
-	cmp r1, r0
-	bhi _080157EA
-	adds r0, r1, #1
-	strh r0, [r2, #0x10]
-_080157EA:
-	bl sub_08026D24
-_080157EE:
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080157F4: .4byte 0x000003E6
-
-	thumb_func_start sub_080157F8
-sub_080157F8: @ 0x080157F8
-	push {lr}
-	ldr r0, _08015814 @ =0x0202BBF4
-	ldrb r0, [r0, #0xe]
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-	bl sub_08031AEC
-	ldr r0, [r0, #0x38]
-	bl sub_0800AE98
-	movs r0, #0
-	pop {r1}
-	bx r1
-	.align 2, 0
-_08015814: .4byte 0x0202BBF4
-
-	thumb_func_start sub_08015818
-sub_08015818: @ 0x08015818
-	push {lr}
-	bl ClearActiveFactionGrayedStates
-	bl sub_08025BB0
-	bl sub_080157B0
-	bl sub_08079158
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-	cmp r0, #1
-	beq _08015836
-	movs r0, #1
-	b _0801583C
-_08015836:
-	bl sub_08079188
-	movs r0, #0
-_0801583C:
-	pop {r1}
-	bx r1
-
-	thumb_func_start sub_08015840
-sub_08015840: @ 0x08015840
-	push {lr}
-	bl sub_080798D4
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-	cmp r0, #1
-	beq _08015852
-	movs r0, #1
-	b _08015858
-_08015852:
-	bl sub_08079894
-	movs r0, #0
-_08015858:
-	pop {r1}
-	bx r1
-
-	thumb_func_start sub_0801585C
-sub_0801585C: @ 0x0801585C
-	push {r4, lr}
-	adds r4, r0, #0
-	ldr r0, _08015874 @ =0x0202BBF4
-	ldrb r0, [r0, #0xf]
-	cmp r0, #0x40
-	beq _08015898
-	cmp r0, #0x40
-	bgt _08015878
-	cmp r0, #0
-	beq _0801587E
-	b _080158A0
-	.align 2, 0
-_08015874: .4byte 0x0202BBF4
-_08015878:
-	cmp r0, #0x80
-	beq _08015888
-	b _080158A0
-_0801587E:
-	ldr r0, _08015884 @ =0x08C02630
-	b _0801588A
-	.align 2, 0
-_08015884: .4byte 0x08C02630
-_08015888:
-	ldr r0, _08015894 @ =0x08C06154
-_0801588A:
-	adds r1, r4, #0
-	bl sub_080043D4
-	b _080158A0
-	.align 2, 0
-_08015894: .4byte 0x08C06154
-_08015898:
-	ldr r0, _080158AC @ =0x08C06154
-	adds r1, r4, #0
-	bl sub_080043D4
-_080158A0:
-	adds r0, r4, #0
-	bl sub_0800457C
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080158AC: .4byte 0x08C06154
-
-	thumb_func_start sub_080158B0
-sub_080158B0: @ 0x080158B0
-	push {r4, lr}
-	adds r4, r0, #0
-	ldr r0, _080158D0 @ =0x08C02630
-	adds r1, r4, #0
-	bl sub_080043D4
-	movs r1, #7
-	bl sub_080045FC
-	adds r0, r4, #0
-	bl sub_0800457C
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080158D0: .4byte 0x08C02630
-
-	thumb_func_start sub_080158D4
-sub_080158D4: @ 0x080158D4
-	push {lr}
-	adds r1, r0, #0
-	ldr r0, _080158F0 @ =0x0202BBF4
-	ldrb r0, [r0, #0xf]
-	cmp r0, #0x40
-	bne _080158F8
-	ldr r0, _080158F4 @ =0x08C03834
-	bl sub_080043D4
-	bl sub_0802C70C
-	movs r0, #0
-	b _080158FA
-	.align 2, 0
-_080158F0: .4byte 0x0202BBF4
-_080158F4: .4byte 0x08C03834
-_080158F8:
-	movs r0, #1
-_080158FA:
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_08015900
-sub_08015900: @ 0x08015900
-	push {lr}
-	ldr r1, _08015914 @ =0x0203A858
-	movs r0, #9
-	strb r0, [r1, #0x16]
-	movs r0, #3
-	bl WriteSuspendSave
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08015914: .4byte 0x0203A858
-
-	thumb_func_start sub_08015918
-sub_08015918: @ 0x08015918
-	push {r4, lr}
-	adds r4, r0, #0
-	ldr r0, _0801593C @ =0x0202BBF4
-	ldrb r0, [r0, #0xe]
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-	bl sub_08031A5C
-	ldrb r0, [r0, #0xd]
-	cmp r0, #0
-	bne _08015936
-	adds r0, r4, #0
-	movs r1, #9
-	bl sub_080045FC
-_08015936:
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_0801593C: .4byte 0x0202BBF4
-
-	thumb_func_start sub_08015940
-sub_08015940: @ 0x08015940
-	push {lr}
-	adds r1, r0, #0
-	ldr r0, _08015970 @ =0x0202BBF4
-	ldrb r0, [r0, #0xe]
-	cmp r0, #0x2f
-	bne _08015978
-	ldr r2, _08015974 @ =0x03002790
-	adds r1, r2, #0
-	adds r1, #0x3c
-	movs r0, #0xc0
-	ldrb r3, [r1]
-	orrs r0, r3
-	strb r0, [r1]
-	adds r0, r2, #0
-	adds r0, #0x44
-	movs r1, #0
-	strb r1, [r0]
-	adds r0, #1
-	strb r1, [r0]
-	adds r1, r2, #0
-	adds r1, #0x46
-	movs r0, #0x10
-	strb r0, [r1]
-	b _0801597E
-	.align 2, 0
-_08015970: .4byte 0x0202BBF4
-_08015974: .4byte 0x03002790
-_08015978:
-	ldr r0, _08015984 @ =0x08C02BF0
-	bl sub_080043D4
-_0801597E:
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08015984: .4byte 0x08C02BF0
-
-	thumb_func_start sub_08015988
-sub_08015988: @ 0x08015988
-	push {lr}
-	bl sub_0807B2A8
-	movs r0, #0x91
-	bl sub_0807A0E0
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08015998
-sub_08015998: @ 0x08015998
-	ldr r0, _080159D0 @ =0x0202BBF4
-	ldrb r0, [r0, #0x15]
-	cmp r0, #7
-	bne _080159D8
-	ldr r3, _080159D4 @ =0x03002790
-	movs r2, #4
-	rsbs r2, r2, #0
-	adds r0, r2, #0
-	ldrb r1, [r3, #0xc]
-	ands r0, r1
-	strb r0, [r3, #0xc]
-	adds r0, r2, #0
-	ldrb r1, [r3, #0x10]
-	ands r0, r1
-	movs r1, #1
-	orrs r0, r1
-	strb r0, [r3, #0x10]
-	adds r0, r2, #0
-	ldrb r1, [r3, #0x14]
-	ands r0, r1
-	movs r1, #2
-	orrs r0, r1
-	strb r0, [r3, #0x14]
-	ldrb r0, [r3, #0x18]
-	ands r2, r0
-	orrs r2, r1
-	strb r2, [r3, #0x18]
-	b _08015A04
-	.align 2, 0
-_080159D0: .4byte 0x0202BBF4
-_080159D4: .4byte 0x03002790
-_080159D8:
-	ldr r3, _08015A08 @ =0x03002790
-	movs r1, #4
-	rsbs r1, r1, #0
-	adds r0, r1, #0
-	ldrb r2, [r3, #0xc]
-	ands r0, r2
-	strb r0, [r3, #0xc]
-	adds r0, r1, #0
-	ldrb r2, [r3, #0x10]
-	ands r0, r2
-	movs r2, #1
-	orrs r0, r2
-	strb r0, [r3, #0x10]
-	ldrb r0, [r3, #0x14]
-	ands r1, r0
-	movs r0, #2
-	orrs r1, r0
-	strb r1, [r3, #0x14]
-	movs r0, #3
-	ldrb r1, [r3, #0x18]
-	orrs r0, r1
-	strb r0, [r3, #0x18]
-_08015A04:
-	bx lr
-	.align 2, 0
-_08015A08: .4byte 0x03002790
-
-	thumb_func_start sub_08015A0C
-sub_08015A0C: @ 0x08015A0C
-	push {r4, lr}
-	ldr r0, _08015A38 @ =0x0818F9F0
-	ldr r4, _08015A3C @ =0x02020140
-	adds r1, r4, #0
-	bl sub_08013688
-	ldr r1, _08015A40 @ =0x06010000
-	adds r0, r4, #0
-	movs r2, #0x12
-	movs r3, #4
-	bl sub_08013758
-	ldr r0, _08015A44 @ =0x0818FE70
-	movs r1, #0x80
-	lsls r1, r1, #2
-	movs r2, #0x40
-	bl sub_0800105C
-	pop {r4}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08015A38: .4byte 0x0818F9F0
-_08015A3C: .4byte 0x02020140
-_08015A40: .4byte 0x06010000
-_08015A44: .4byte 0x0818FE70
-
-	thumb_func_start sub_08015A48
-sub_08015A48: @ 0x08015A48
-	push {lr}
-	bl sub_08005280
-	bl sub_0804A9F8
-	bl sub_080069C4
-	bl sub_08004BC4
-	movs r0, #4
-	bl sub_08004C08
-	bl sub_08015A0C
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08015A68
-sub_08015A68: @ 0x08015A68
-	push {r4, r5, r6, r7, lr}
-	lsls r0, r0, #0x10
-	lsrs r1, r0, #0x10
-	mov ip, r1
-	lsrs r7, r0, #0x14
-	movs r0, #0xf
-	ands r7, r0
-	ldr r3, _08015B68 @ =0x0202BBB4
-	ldr r4, _08015B6C @ =0x08C01FE4
-	lsls r2, r7, #1
-	adds r0, r2, r4
-	movs r1, #0
-	ldrsb r1, [r0, r1]
-	ldrh r0, [r3, #0x14]
-	adds r1, r0, r1
-	lsls r1, r1, #0x10
-	adds r0, r4, #1
-	adds r2, r2, r0
-	movs r0, #0
-	ldrsb r0, [r2, r0]
-	ldrh r2, [r3, #0x16]
-	adds r0, r2, r0
-	lsls r0, r0, #0x10
-	lsrs r6, r1, #0x10
-	orrs r6, r0
-	movs r0, #2
-	ldrb r1, [r3, #4]
-	ands r0, r1
-	adds r5, r3, #0
-	cmp r0, #0
-	beq _08015AE6
-	movs r2, #0x16
-	ldrsh r0, [r5, r2]
-	ldr r1, _08015B70 @ =0x0202E3E0
-	ldr r2, [r1]
-	lsls r0, r0, #2
-	adds r0, r0, r2
-	movs r3, #0x14
-	ldrsh r1, [r5, r3]
-	ldr r0, [r0]
-	adds r0, r0, r1
-	ldrb r0, [r0]
-	cmp r0, #0x77
-	bhi _08015AE6
-	asrs r0, r6, #0x10
-	lsls r0, r0, #2
-	adds r0, r0, r2
-	lsls r1, r6, #0x10
-	asrs r1, r1, #0x10
-	ldr r0, [r0]
-	adds r0, r0, r1
-	ldrb r0, [r0]
-	cmp r0, #0x77
-	bls _08015AE6
-	movs r0, #0xf0
-	ldr r1, _08015B74 @ =0x08BBFC7C
-	ldr r2, [r1]
-	mov r1, ip
-	ands r1, r0
-	ldrh r2, [r2, #8]
-	ands r0, r2
-	cmp r1, r0
-	bne _08015B8A
-_08015AE6:
-	lsls r0, r6, #0x10
-	asrs r1, r0, #0x10
-	cmp r1, #0
-	blt _08015B10
-	ldr r0, _08015B78 @ =0x0202E3D4
-	movs r2, #0
-	ldrsh r0, [r0, r2]
-	cmp r1, r0
-	bge _08015B10
-	lsls r0, r7, #1
-	adds r0, r0, r4
-	ldrb r0, [r0]
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-	lsls r0, r0, #4
-	ldrh r3, [r5, #0x1c]
-	adds r0, r3, r0
-	strh r0, [r5, #0x1c]
-	ldrh r0, [r5, #0x14]
-	strh r0, [r5, #0x18]
-	strh r6, [r5, #0x14]
-_08015B10:
-	asrs r2, r6, #0x10
-	adds r1, r2, #0
-	cmp r1, #0
-	blt _08015B3C
-	ldr r0, _08015B78 @ =0x0202E3D4
-	movs r3, #2
-	ldrsh r0, [r0, r3]
-	cmp r1, r0
-	bge _08015B3C
-	lsls r0, r7, #1
-	adds r1, r4, #1
-	adds r0, r0, r1
-	ldrb r0, [r0]
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-	lsls r0, r0, #4
-	ldrh r1, [r5, #0x1e]
-	adds r0, r1, r0
-	strh r0, [r5, #0x1e]
-	ldrh r0, [r5, #0x16]
-	strh r0, [r5, #0x1a]
-	strh r2, [r5, #0x16]
-_08015B3C:
-	ldrb r1, [r5, #4]
-	movs r0, #4
-	ands r0, r1
-	cmp r0, #0
-	bne _08015B84
-	ldr r1, [r5, #0x14]
-	ldr r0, [r5, #0x18]
-	cmp r1, r0
-	beq _08015B8A
-	ldr r0, _08015B7C @ =0x0202BBF4
-	adds r0, #0x41
-	ldrb r0, [r0]
-	lsls r0, r0, #0x1e
-	cmp r0, #0
-	blt _08015B60
-	ldr r0, _08015B80 @ =0x00000385
-	bl m4aSongNumStart
-_08015B60:
-	movs r0, #4
-	ldrb r2, [r5, #4]
-	orrs r0, r2
-	b _08015B88
-	.align 2, 0
-_08015B68: .4byte 0x0202BBB4
-_08015B6C: .4byte 0x08C01FE4
-_08015B70: .4byte 0x0202E3E0
-_08015B74: .4byte 0x08BBFC7C
-_08015B78: .4byte 0x0202E3D4
-_08015B7C: .4byte 0x0202BBF4
-_08015B80: .4byte 0x00000385
-_08015B84:
-	movs r0, #0xfb
-	ands r0, r1
-_08015B88:
-	strb r0, [r5, #4]
-_08015B8A:
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08015B90
-sub_08015B90: @ 0x08015B90
-	push {r4, r5, lr}
-	adds r4, r0, #0
-	ldr r2, _08015BE0 @ =0x0202BBB4
-	ldrh r3, [r2, #0x20]
-	movs r0, #0x20
-	ldrsh r1, [r2, r0]
-	movs r5, #0x1c
-	ldrsh r0, [r2, r5]
-	cmp r1, r0
-	bge _08015BA8
-	adds r0, r3, r4
-	strh r0, [r2, #0x20]
-_08015BA8:
-	ldrh r3, [r2, #0x20]
-	movs r0, #0x20
-	ldrsh r1, [r2, r0]
-	movs r5, #0x1c
-	ldrsh r0, [r2, r5]
-	cmp r1, r0
-	ble _08015BBA
-	subs r0, r3, r4
-	strh r0, [r2, #0x20]
-_08015BBA:
-	ldrh r3, [r2, #0x22]
-	movs r1, #0x22
-	ldrsh r0, [r2, r1]
-	movs r5, #0x1e
-	ldrsh r1, [r2, r5]
-	cmp r0, r1
-	bge _08015BCC
-	adds r0, r3, r4
-	strh r0, [r2, #0x22]
-_08015BCC:
-	ldrh r3, [r2, #0x22]
-	movs r5, #0x22
-	ldrsh r0, [r2, r5]
-	cmp r0, r1
-	ble _08015BDA
-	subs r0, r3, r4
-	strh r0, [r2, #0x22]
-_08015BDA:
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08015BE0: .4byte 0x0202BBB4
-
-	thumb_func_start sub_08015BE4
-sub_08015BE4: @ 0x08015BE4
-	push {r4, r5, r6, lr}
-	adds r4, r0, #0
-	movs r6, #0
-	ldr r2, _08015C0C @ =0x0202BBB4
-	movs r0, #0x20
-	ldrsh r1, [r2, r0]
-	movs r3, #0x22
-	ldrsh r5, [r2, r3]
-	movs r3, #0xc
-	ldrsh r0, [r2, r3]
-	adds r0, #0x30
-	cmp r0, r1
-	ble _08015C28
-	adds r0, r1, #0
-	subs r0, #0x30
-	cmp r0, #0
-	bge _08015C10
-	strh r6, [r2, #0xc]
-	b _08015C28
-	.align 2, 0
-_08015C0C: .4byte 0x0202BBB4
-_08015C10:
-	movs r6, #1
-	ldrh r3, [r2, #0xc]
-	subs r0, r3, r4
-	strh r0, [r2, #0xc]
-	rsbs r0, r4, #0
-	adds r3, r2, #0
-	adds r3, #0x36
-	strb r0, [r3]
-	movs r0, #0xf
-	ldrh r3, [r2, #0xc]
-	ands r0, r3
-	strh r0, [r2, #0x32]
-_08015C28:
-	movs r3, #0xc
-	ldrsh r0, [r2, r3]
-	adds r0, #0xb0
-	cmp r0, r1
-	bge _08015C58
-	subs r1, #0xb0
-	movs r3, #0x28
-	ldrsh r0, [r2, r3]
-	cmp r1, r0
-	ble _08015C42
-	ldrh r0, [r2, #0x28]
-	strh r0, [r2, #0xc]
-	b _08015C58
-_08015C42:
-	movs r6, #1
-	ldrh r1, [r2, #0xc]
-	adds r0, r1, r4
-	strh r0, [r2, #0xc]
-	adds r0, r2, #0
-	adds r0, #0x36
-	strb r4, [r0]
-	movs r0, #0xf
-	ldrh r3, [r2, #0xc]
-	ands r0, r3
-	strh r0, [r2, #0x32]
-_08015C58:
-	movs r1, #0xe
-	ldrsh r0, [r2, r1]
-	adds r0, #0x20
-	cmp r0, r5
-	ble _08015C88
-	adds r0, r5, #0
-	subs r0, #0x20
-	cmp r0, #0
-	bge _08015C70
-	movs r0, #0
-	strh r0, [r2, #0xe]
-	b _08015C88
-_08015C70:
-	movs r6, #1
-	ldrh r3, [r2, #0xe]
-	subs r0, r3, r4
-	strh r0, [r2, #0xe]
-	rsbs r0, r4, #0
-	adds r1, r2, #0
-	adds r1, #0x37
-	strb r0, [r1]
-	movs r0, #0xf
-	ldrh r1, [r2, #0xe]
-	ands r0, r1
-	strh r0, [r2, #0x34]
-_08015C88:
-	movs r3, #0xe
-	ldrsh r0, [r2, r3]
-	adds r0, #0x70
-	cmp r0, r5
-	bge _08015CBA
-	adds r1, r5, #0
-	subs r1, #0x70
-	movs r3, #0x2a
-	ldrsh r0, [r2, r3]
-	cmp r1, r0
-	ble _08015CA4
-	ldrh r0, [r2, #0x2a]
-	strh r0, [r2, #0xe]
-	b _08015CBA
-_08015CA4:
-	movs r6, #1
-	ldrh r1, [r2, #0xe]
-	adds r0, r1, r4
-	strh r0, [r2, #0xe]
-	adds r0, r2, #0
-	adds r0, #0x37
-	strb r4, [r0]
-	movs r0, #0xf
-	ldrh r3, [r2, #0xe]
-	ands r0, r3
-	strh r0, [r2, #0x34]
-_08015CBA:
-	cmp r6, #0
-	bne _08015D08
-	adds r3, r2, #0
-	ldrh r1, [r3, #0x32]
-	movs r4, #0x32
-	ldrsh r0, [r3, r4]
-	cmp r0, #0
-	beq _08015CE4
-	adds r4, r3, #0
-	adds r4, #0x36
-	movs r0, #0
-	ldrsb r0, [r4, r0]
-	adds r0, r1, r0
-	movs r1, #0xf
-	ands r0, r1
-	strh r0, [r3, #0x32]
-	movs r0, #0
-	ldrsb r0, [r4, r0]
-	ldrh r1, [r3, #0xc]
-	adds r0, r1, r0
-	strh r0, [r3, #0xc]
-_08015CE4:
-	ldrh r1, [r2, #0x34]
-	movs r3, #0x34
-	ldrsh r0, [r2, r3]
-	cmp r0, #0
-	beq _08015D08
-	adds r3, r2, #0
-	adds r3, #0x37
-	movs r0, #0
-	ldrsb r0, [r3, r0]
-	adds r0, r1, r0
-	movs r1, #0xf
-	ands r0, r1
-	strh r0, [r2, #0x34]
-	movs r0, #0
-	ldrsb r0, [r3, r0]
-	ldrh r4, [r2, #0xe]
-	adds r0, r4, r0
-	strh r0, [r2, #0xe]
-_08015D08:
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08015D10
-sub_08015D10: @ 0x08015D10
-	push {r4, lr}
-	adds r3, r0, #0
-	ldr r0, _08015D50 @ =0x0202BBB4
-	movs r1, #0xc
-	ldrsh r2, [r0, r1]
-	adds r1, r2, #0
-	adds r1, #0x30
-	adds r4, r0, #0
-	cmp r1, r3
-	ble _08015D2E
-	adds r2, r3, #0
-	subs r2, #0x30
-	cmp r2, #0
-	bge _08015D2E
-	movs r2, #0
-_08015D2E:
-	movs r1, #0xc
-	ldrsh r0, [r4, r1]
-	adds r0, #0xb0
-	cmp r0, r3
-	bge _08015D46
-	movs r1, #0x28
-	ldrsh r0, [r4, r1]
-	adds r2, r3, #0
-	subs r2, #0xb0
-	cmp r2, r0
-	ble _08015D46
-	adds r2, r0, #0
-_08015D46:
-	lsls r0, r2, #0x10
-	lsrs r0, r0, #0x10
-	pop {r4}
-	pop {r1}
-	bx r1
-	.align 2, 0
-_08015D50: .4byte 0x0202BBB4
-
-	thumb_func_start sub_08015D54
-sub_08015D54: @ 0x08015D54
-	push {r4, lr}
-	adds r3, r0, #0
-	ldr r0, _08015D94 @ =0x0202BBB4
-	movs r1, #0xe
-	ldrsh r2, [r0, r1]
-	adds r1, r2, #0
-	adds r1, #0x20
-	adds r4, r0, #0
-	cmp r1, r3
-	ble _08015D72
-	adds r2, r3, #0
-	subs r2, #0x20
-	cmp r2, #0
-	bge _08015D72
-	movs r2, #0
-_08015D72:
-	movs r1, #0xe
-	ldrsh r0, [r4, r1]
-	adds r0, #0x70
-	cmp r0, r3
-	bge _08015D8A
-	movs r1, #0x2a
-	ldrsh r0, [r4, r1]
-	adds r2, r3, #0
-	subs r2, #0x70
-	cmp r2, r0
-	ble _08015D8A
-	adds r2, r0, #0
-_08015D8A:
-	lsls r0, r2, #0x10
-	lsrs r0, r0, #0x10
-	pop {r4}
-	pop {r1}
-	bx r1
-	.align 2, 0
-_08015D94: .4byte 0x0202BBB4
-
-	thumb_func_start sub_08015D98
-sub_08015D98: @ 0x08015D98
-	adds r1, r0, #0
-	subs r1, #0x78
-	cmp r1, #0
-	bge _08015DA2
-	movs r1, #0
-_08015DA2:
-	ldr r0, _08015DBC @ =0x0202BBB4
-	movs r2, #0x28
-	ldrsh r0, [r0, r2]
-	cmp r1, r0
-	ble _08015DAE
-	adds r1, r0, #0
-_08015DAE:
-	movs r2, #0x10
-	rsbs r2, r2, #0
-	adds r0, r2, #0
-	ands r1, r0
-	lsls r0, r1, #0x10
-	lsrs r0, r0, #0x10
-	bx lr
-	.align 2, 0
-_08015DBC: .4byte 0x0202BBB4
-
-	thumb_func_start sub_08015DC0
-sub_08015DC0: @ 0x08015DC0
-	adds r1, r0, #0
-	subs r1, #0x50
-	cmp r1, #0
-	bge _08015DCA
-	movs r1, #0
-_08015DCA:
-	ldr r0, _08015DE4 @ =0x0202BBB4
-	movs r2, #0x2a
-	ldrsh r0, [r0, r2]
-	cmp r1, r0
-	ble _08015DD6
-	adds r1, r0, #0
-_08015DD6:
-	movs r2, #0x10
-	rsbs r2, r2, #0
-	adds r0, r2, #0
-	ands r1, r0
-	lsls r0, r1, #0x10
-	lsrs r0, r0, #0x10
-	bx lr
-	.align 2, 0
-_08015DE4: .4byte 0x0202BBB4
-
-	thumb_func_start sub_08015DE8
-sub_08015DE8: @ 0x08015DE8
-	push {r4, r5, r6, r7, lr}
-	mov r7, sb
-	mov r6, r8
-	push {r6, r7}
-	sub sp, #4
-	adds r6, r0, #0
-	adds r7, r1, #0
-	adds r5, r2, #0
-	movs r0, #0
-	mov sb, r0
-	mov r8, r0
-	bl sub_08000EEC
-	lsrs r4, r0, #1
-	movs r0, #0xf
-	ands r4, r0
-	cmp r5, #4
-	bhi _08015EA2
-	lsls r0, r5, #2
-	ldr r1, _08015E18 @ =_08015E1C
-	adds r0, r0, r1
-	ldr r0, [r0]
-	mov pc, r0
-	.align 2, 0
-_08015E18: .4byte _08015E1C
-_08015E1C: @ jump table
-	.4byte _08015E30 @ case 0
-	.4byte _08015E30 @ case 1
-	.4byte _08015E40 @ case 2
-	.4byte _08015E88 @ case 3
-	.4byte _08015E98 @ case 4
-_08015E30:
-	movs r1, #2
-	mov sb, r1
-	ldr r1, _08015E3C @ =0x08C0206C
-	lsls r0, r4, #2
-	adds r0, r0, r1
-	b _08015E9E
-	.align 2, 0
-_08015E3C: .4byte 0x08C0206C
-_08015E40:
-	bl sub_08000EEC
-	subs r0, #1
-	ldr r5, _08015E7C @ =0x0202BC40
-	ldr r1, [r5]
-	cmp r0, r1
-	bne _08015E60
-	ldr r0, _08015E80 @ =0x0202BC3C
-	movs r2, #0
-	ldrsh r1, [r0, r2]
-	adds r1, r6, r1
-	asrs r6, r1, #1
-	movs r1, #2
-	ldrsh r0, [r0, r1]
-	adds r0, r7, r0
-	asrs r7, r0, #1
-_08015E60:
-	movs r2, #0x24
-	mov sb, r2
-	ldr r1, _08015E84 @ =0x08C0206C
-	lsls r0, r4, #2
-	adds r0, r0, r1
-	ldr r0, [r0]
-	mov r8, r0
-	ldr r0, _08015E80 @ =0x0202BC3C
-	strh r6, [r0]
-	strh r7, [r0, #2]
-	bl sub_08000EEC
-	str r0, [r5]
-	b _08015EA2
-	.align 2, 0
-_08015E7C: .4byte 0x0202BC40
-_08015E80: .4byte 0x0202BC3C
-_08015E84: .4byte 0x08C0206C
-_08015E88:
-	movs r0, #2
-	mov sb, r0
-	ldr r1, _08015E94 @ =0x08C02052
-	mov r8, r1
-	b _08015EA2
-	.align 2, 0
-_08015E94: .4byte 0x08C02052
-_08015E98:
-	movs r2, #0x24
-	mov sb, r2
-	ldr r0, _08015ED0 @ =0x08C0206C
-_08015E9E:
-	ldr r0, [r0]
-	mov r8, r0
-_08015EA2:
-	ldr r0, _08015ED4 @ =0x0202BBB4
-	movs r2, #0xc
-	ldrsh r1, [r0, r2]
-	subs r6, r6, r1
-	movs r1, #0xe
-	ldrsh r0, [r0, r1]
-	subs r7, r7, r0
-	mov r2, sb
-	str r2, [sp]
-	movs r0, #4
-	adds r1, r6, #0
-	adds r2, r7, #0
-	mov r3, r8
-	bl sub_08006884
-	add sp, #4
-	pop {r3, r4}
-	mov r8, r3
-	mov sb, r4
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08015ED0: .4byte 0x08C0206C
-_08015ED4: .4byte 0x0202BBB4
-
-	thumb_func_start sub_08015ED8
-sub_08015ED8: @ 0x08015ED8
-	push {r4, r5, lr}
-	sub sp, #4
-	adds r4, r0, #0
-	adds r5, r1, #0
-	bl sub_08000EEC
-	lsrs r0, r0, #1
-	movs r1, #0xf
-	ands r0, r1
-	movs r2, #2
-	ldr r1, _08015F08 @ =0x08C0206C
-	lsls r0, r0, #2
-	adds r0, r0, r1
-	ldr r3, [r0]
-	str r2, [sp]
-	movs r0, #4
-	adds r1, r4, #0
-	adds r2, r5, #0
-	bl sub_08006884
-	add sp, #4
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08015F08: .4byte 0x08C0206C
-
-	thumb_func_start sub_08015F0C
-sub_08015F0C: @ 0x08015F0C
-	ldr r2, _08015F20 @ =0x0202BBB4
-	strh r0, [r2, #0x14]
-	strh r1, [r2, #0x16]
-	lsls r0, r0, #4
-	strh r0, [r2, #0x1c]
-	lsls r1, r1, #4
-	strh r1, [r2, #0x1e]
-	strh r0, [r2, #0x20]
-	strh r1, [r2, #0x22]
-	bx lr
-	.align 2, 0
-_08015F20: .4byte 0x0202BBB4
-
-	thumb_func_start sub_08015F24
-sub_08015F24: @ 0x08015F24
-	push {r4, r5, r6, lr}
-	sub sp, #4
-	adds r5, r0, #0
-	adds r6, r1, #0
-	lsls r4, r2, #0x18
-	lsrs r4, r4, #0x18
-	bl sub_08000EEC
-	lsrs r0, r0, #3
-	movs r1, #3
-	bl __umodsi3
-	cmp r4, #0
-	beq _08015F48
-	ldr r1, _08015F44 @ =0x08C020E8
-	b _08015F4A
-	.align 2, 0
-_08015F44: .4byte 0x08C020E8
-_08015F48:
-	ldr r1, _08015F68 @ =0x08C020DC
-_08015F4A:
-	lsls r0, r0, #2
-	adds r0, r0, r1
-	ldr r3, [r0]
-	movs r0, #0
-	str r0, [sp]
-	movs r0, #4
-	adds r1, r5, #0
-	adds r2, r6, #0
-	bl sub_08006884
-	add sp, #4
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08015F68: .4byte 0x08C020DC
-
-	thumb_func_start sub_08015F6C
-sub_08015F6C: @ 0x08015F6C
-	push {r4, r5, r6, lr}
-	mov ip, r0
-	movs r5, #1
-	movs r1, #0x2c
-	ldrsh r2, [r0, r1]
-	movs r3, #0x30
-	ldrsh r0, [r0, r3]
-	subs r1, r2, r0
-	cmp r1, #0
-	bge _08015F82
-	subs r1, r0, r2
-_08015F82:
-	mov r4, ip
-	movs r0, #0x2e
-	ldrsh r3, [r4, r0]
-	movs r2, #0x32
-	ldrsh r0, [r4, r2]
-	subs r2, r3, r0
-	cmp r2, #0
-	bge _08015F94
-	subs r2, r0, r3
-_08015F94:
-	cmp r1, r2
-	ble _08015FA4
-	mov r0, ip
-	adds r0, #0x40
-	strb r5, [r0]
-	mov r3, ip
-	strh r1, [r3, #0x38]
-	b _08015FB0
-_08015FA4:
-	mov r1, ip
-	adds r1, #0x40
-	movs r0, #0
-	strb r0, [r1]
-	mov r4, ip
-	strh r2, [r4, #0x38]
-_08015FB0:
-	mov r0, ip
-	movs r1, #0x38
-	ldrsh r3, [r0, r1]
-	movs r4, #0
-	lsls r0, r5, #0x18
-	asrs r0, r0, #0x19
-	subs r0, r3, r0
-	ldr r6, _08015FC8 @ =0x0202BC44
-	cmp r0, #0
-	bge _08015FCC
-	strb r3, [r6]
-	b _08015FF2
-	.align 2, 0
-_08015FC8: .4byte 0x0202BC44
-_08015FCC:
-	lsls r1, r5, #0x18
-	asrs r2, r1, #0x18
-	asrs r1, r1, #0x19
-	subs r3, r3, r1
-	adds r0, r4, r6
-	strb r1, [r0]
-	cmp r2, #0xf
-	bgt _08015FE2
-	adds r0, r2, #1
-	lsls r0, r0, #0x18
-	lsrs r5, r0, #0x18
-_08015FE2:
-	adds r4, #1
-	lsls r0, r5, #0x18
-	asrs r0, r0, #0x19
-	subs r0, r3, r0
-	cmp r0, #0
-	bge _08015FCC
-	adds r0, r4, r6
-	strb r3, [r0]
-_08015FF2:
-	mov r2, ip
-	str r4, [r2, #0x3c]
-	ldrh r0, [r2, #0x38]
-	strh r0, [r2, #0x3a]
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08016000
-sub_08016000: @ 0x08016000
-	push {r4, r5, lr}
-	adds r5, r0, #0
-	ldr r1, [r5, #0x3c]
-	cmp r1, #0
-	bne _08016020
-	ldr r0, _0801601C @ =0x0202BBB4
-	ldrh r1, [r0, #0xc]
-	strh r1, [r5, #0x2c]
-	ldrh r0, [r0, #0xe]
-	strh r0, [r5, #0x2e]
-	adds r0, r5, #0
-	bl sub_08004460
-	b _08016072
-	.align 2, 0
-_0801601C: .4byte 0x0202BBB4
-_08016020:
-	ldr r0, _08016078 @ =0x0202BC44
-	adds r0, r1, r0
-	ldrb r0, [r0]
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-	ldrh r2, [r5, #0x3a]
-	subs r0, r2, r0
-	strh r0, [r5, #0x3a]
-	subs r0, r1, #1
-	str r0, [r5, #0x3c]
-	ldr r4, _0801607C @ =0x0202BBB4
-	movs r1, #0x30
-	ldrsh r0, [r5, r1]
-	movs r2, #0x2c
-	ldrsh r1, [r5, r2]
-	subs r0, r0, r1
-	movs r2, #0x3a
-	ldrsh r1, [r5, r2]
-	muls r0, r1, r0
-	movs r2, #0x38
-	ldrsh r1, [r5, r2]
-	bl __divsi3
-	ldrh r1, [r5, #0x2c]
-	adds r0, r1, r0
-	strh r0, [r4, #0xc]
-	movs r2, #0x32
-	ldrsh r0, [r5, r2]
-	movs r2, #0x2e
-	ldrsh r1, [r5, r2]
-	subs r0, r0, r1
-	movs r2, #0x3a
-	ldrsh r1, [r5, r2]
-	muls r0, r1, r0
-	movs r2, #0x38
-	ldrsh r1, [r5, r2]
-	bl __divsi3
-	ldrh r5, [r5, #0x2e]
-	adds r0, r5, r0
-	strh r0, [r4, #0xe]
-_08016072:
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08016078: .4byte 0x0202BC44
-_0801607C: .4byte 0x0202BBB4
-
-	thumb_func_start sub_08016080
-sub_08016080: @ 0x08016080
-	push {r4, r5, lr}
-	adds r4, r2, #0
-	subs r0, #7
-	str r0, [r4]
-	subs r1, #5
-	str r1, [r3]
-	ldr r0, [r4]
-	cmp r0, #0
-	bge _08016096
-	movs r0, #0
-	str r0, [r4]
-_08016096:
-	ldr r0, [r3]
-	cmp r0, #0
-	bge _080160A0
-	movs r0, #0
-	str r0, [r3]
-_080160A0:
-	ldr r1, [r4]
-	adds r1, #8
-	ldr r5, _080160D0 @ =0x0202E3D4
-	movs r0, #0
-	ldrsh r2, [r5, r0]
-	subs r0, r2, #1
-	cmp r1, r0
-	ble _080160B4
-	subs r0, #0xe
-	str r0, [r4]
-_080160B4:
-	ldr r0, [r3]
-	adds r0, #4
-	movs r1, #2
-	ldrsh r2, [r5, r1]
-	subs r1, r2, #1
-	cmp r0, r1
-	ble _080160C8
-	adds r0, r2, #0
-	subs r0, #0xa
-	str r0, [r3]
-_080160C8:
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080160D0: .4byte 0x0202E3D4
-
-	thumb_func_start sub_080160D4
-sub_080160D4: @ 0x080160D4
-	push {r4, r5, r6, r7, lr}
-	sub sp, #8
-	adds r5, r0, #0
-	adds r6, r1, #0
-	adds r7, r2, #0
-	add r3, sp, #4
-	adds r0, r6, #0
-	adds r1, r7, #0
-	mov r2, sp
-	bl sub_08016080
-	ldr r1, [sp]
-	lsls r1, r1, #4
-	str r1, [sp]
-	ldr r0, [sp, #4]
-	lsls r2, r0, #4
-	str r2, [sp, #4]
-	ldr r3, _08016118 @ =0x0202BBB4
-	movs r4, #0xc
-	ldrsh r0, [r3, r4]
-	cmp r1, r0
-	bne _08016108
-	movs r1, #0xe
-	ldrsh r0, [r3, r1]
-	cmp r2, r0
-	beq _08016114
-_08016108:
-	ldr r4, _0801611C @ =0x08C020F4
-	adds r0, r4, #0
-	bl sub_08004584
-	cmp r0, #0
-	beq _08016120
-_08016114:
-	movs r0, #0
-	b _08016150
-	.align 2, 0
-_08016118: .4byte 0x0202BBB4
-_0801611C: .4byte 0x08C020F4
-_08016120:
-	cmp r5, #0
-	beq _0801612E
-	adds r0, r4, #0
-	adds r1, r5, #0
-	bl sub_080043D4
-	b _08016136
-_0801612E:
-	adds r0, r4, #0
-	movs r1, #3
-	bl Proc_Start
-_08016136:
-	adds r2, r0, #0
-	ldr r1, _08016158 @ =0x0202BBB4
-	ldrh r0, [r1, #0xc]
-	strh r0, [r2, #0x30]
-	ldrh r0, [r1, #0xe]
-	strh r0, [r2, #0x32]
-	ldr r0, [sp]
-	strh r0, [r2, #0x2c]
-	ldr r0, [sp, #4]
-	strh r0, [r2, #0x2e]
-	strh r6, [r2, #0x34]
-	strh r7, [r2, #0x36]
-	movs r0, #1
-_08016150:
-	add sp, #8
-	pop {r4, r5, r6, r7}
-	pop {r1}
-	bx r1
-	.align 2, 0
-_08016158: .4byte 0x0202BBB4
-
-	thumb_func_start sub_0801615C
-sub_0801615C: @ 0x0801615C
-	push {r4, r5, r6, r7, lr}
-	mov r7, sb
-	mov r6, r8
-	push {r6, r7}
-	adds r5, r0, #0
-	mov r8, r1
-	mov sb, r2
-	lsls r0, r1, #4
-	bl sub_08015D10
-	lsls r0, r0, #0x10
-	lsrs r7, r0, #0x10
-	mov r1, sb
-	lsls r0, r1, #4
-	bl sub_08015D54
-	lsls r0, r0, #0x10
-	lsrs r6, r0, #0x10
-	ldr r1, _080161A4 @ =0x0202BBB4
-	movs r2, #0xc
-	ldrsh r0, [r1, r2]
-	cmp r7, r0
-	bne _08016192
-	movs r2, #0xe
-	ldrsh r0, [r1, r2]
-	cmp r6, r0
-	beq _0801619E
-_08016192:
-	ldr r4, _080161A8 @ =0x08C020F4
-	adds r0, r4, #0
-	bl sub_08004584
-	cmp r0, #0
-	beq _080161AC
-_0801619E:
-	movs r0, #0
-	b _080161DC
-	.align 2, 0
-_080161A4: .4byte 0x0202BBB4
-_080161A8: .4byte 0x08C020F4
-_080161AC:
-	cmp r5, #0
-	beq _080161BA
-	adds r0, r4, #0
-	adds r1, r5, #0
-	bl sub_080043D4
-	b _080161C2
-_080161BA:
-	adds r0, r4, #0
-	movs r1, #3
-	bl Proc_Start
-_080161C2:
-	adds r2, r0, #0
-	ldr r0, _080161E8 @ =0x0202BBB4
-	ldrh r1, [r0, #0xc]
-	strh r1, [r2, #0x30]
-	ldrh r0, [r0, #0xe]
-	strh r0, [r2, #0x32]
-	strh r7, [r2, #0x2c]
-	strh r6, [r2, #0x2e]
-	mov r0, r8
-	strh r0, [r2, #0x34]
-	mov r1, sb
-	strh r1, [r2, #0x36]
-	movs r0, #1
-_080161DC:
-	pop {r3, r4}
-	mov r8, r3
-	mov sb, r4
-	pop {r4, r5, r6, r7}
-	pop {r1}
-	bx r1
-	.align 2, 0
-_080161E8: .4byte 0x0202BBB4
-
-	thumb_func_start sub_080161EC
-sub_080161EC: @ 0x080161EC
-	push {r4, r5, lr}
-	adds r5, r1, #0
-	lsls r0, r0, #4
-	bl sub_08015D10
-	adds r4, r0, #0
-	lsls r4, r4, #0x10
-	lsrs r4, r4, #0x10
-	lsls r5, r5, #4
-	adds r0, r5, #0
-	bl sub_08015D54
-	lsls r0, r0, #0x10
-	lsrs r2, r0, #0x10
-	ldr r1, _08016220 @ =0x0202BBB4
-	movs r3, #0xc
-	ldrsh r0, [r1, r3]
-	cmp r4, r0
-	bne _08016224
-	movs r3, #0xe
-	ldrsh r0, [r1, r3]
-	cmp r2, r0
-	bne _08016224
-	movs r0, #0
-	b _08016226
-	.align 2, 0
-_08016220: .4byte 0x0202BBB4
-_08016224:
-	movs r0, #1
-_08016226:
-	pop {r4, r5}
-	pop {r1}
-	bx r1
-
-	thumb_func_start sub_0801622C
-sub_0801622C: @ 0x0801622C
-	push {r4, r5, lr}
-	adds r5, r0, #0
-	ldr r0, _08016250 @ =0x0202BBB4
-	movs r2, #0xe
-	ldrsh r1, [r0, r2]
-	movs r2, #0x2a
-	ldrsh r0, [r0, r2]
-	cmp r1, r0
-	ble _0801624A
-	ldr r4, _08016254 @ =0x08C020F4
-	adds r0, r4, #0
-	bl sub_08004584
-	cmp r0, #0
-	beq _08016258
-_0801624A:
-	movs r0, #0
-	b _08016284
-	.align 2, 0
-_08016250: .4byte 0x0202BBB4
-_08016254: .4byte 0x08C020F4
-_08016258:
-	cmp r5, #0
-	beq _08016266
-	adds r0, r4, #0
-	adds r1, r5, #0
-	bl sub_080043D4
-	b _0801626E
-_08016266:
-	adds r0, r4, #0
-	movs r1, #3
-	bl Proc_Start
-_0801626E:
-	adds r2, r0, #0
-	ldr r1, _0801628C @ =0x0202BBB4
-	ldrh r0, [r1, #0xc]
-	strh r0, [r2, #0x30]
-	ldrh r0, [r1, #0xe]
-	strh r0, [r2, #0x32]
-	ldrh r0, [r1, #0xc]
-	strh r0, [r2, #0x2c]
-	ldrh r0, [r1, #0x2a]
-	strh r0, [r2, #0x2e]
-	movs r0, #1
-_08016284:
-	pop {r4, r5}
-	pop {r1}
-	bx r1
-	.align 2, 0
-_0801628C: .4byte 0x0202BBB4
-
-	thumb_func_start sub_08016290
-sub_08016290: @ 0x08016290
-	push {r4, r5, r6, r7, lr}
-	adds r7, r0, #0
-	movs r1, #0x2c
-	ldrsh r0, [r7, r1]
-	movs r2, #0x30
-	ldrsh r1, [r7, r2]
-	subs r0, r0, r1
-	ldr r4, [r7, #0x34]
-	muls r0, r4, r0
-	ldr r5, [r7, #0x38]
-	adds r1, r5, #0
-	bl __divsi3
-	adds r6, r0, #0
-	movs r1, #0x2e
-	ldrsh r0, [r7, r1]
-	movs r2, #0x32
-	ldrsh r1, [r7, r2]
-	subs r0, r0, r1
-	muls r0, r4, r0
-	adds r1, r5, #0
-	bl __divsi3
-	adds r1, r0, #0
-	adds r0, r6, #0
-	movs r2, #0
-	bl sub_08015DE8
-	ldr r0, [r7, #0x34]
-	subs r0, #1
-	str r0, [r7, #0x34]
-	cmp r0, #0
-	bge _080162D8
-	adds r0, r7, #0
-	bl sub_0800457C
-_080162D8:
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_080162E0
-sub_080162E0: @ 0x080162E0
-	push {r4, r5, r6, lr}
-	adds r4, r0, #0
-	adds r5, r1, #0
-	adds r6, r2, #0
-	ldr r0, _08016310 @ =0x08C0211C
-	movs r1, #3
-	bl Proc_Start
-	ldr r2, _08016314 @ =0x0202BBB4
-	ldrh r3, [r2, #0x14]
-	lsls r1, r3, #4
-	strh r1, [r0, #0x2c]
-	ldrh r2, [r2, #0x16]
-	lsls r1, r2, #4
-	strh r1, [r0, #0x2e]
-	lsls r4, r4, #4
-	strh r4, [r0, #0x30]
-	lsls r5, r5, #4
-	strh r5, [r0, #0x32]
-	str r6, [r0, #0x38]
-	str r6, [r0, #0x34]
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08016310: .4byte 0x08C0211C
-_08016314: .4byte 0x0202BBB4
-
-	thumb_func_start sub_08016318
-sub_08016318: @ 0x08016318
-	push {r4, r5, r6, r7, lr}
-	ldr r0, _0801634C @ =0x0202BBF4
-	movs r1, #0
-	ldrb r0, [r0, #0x1b]
-	cmp r0, #3
-	bne _08016326
-	movs r1, #3
-_08016326:
-	adds r4, r1, #0
-	movs r0, #4
-	bl sub_0807A0C8
-	lsls r0, r0, #0x18
-	movs r1, #6
-	cmp r0, #0
-	bne _08016338
-	adds r1, r4, #0
-_08016338:
-	adds r7, r1, #0
-	movs r0, #4
-	bl sub_0807A0C8
-	lsls r0, r0, #0x18
-	cmp r0, #0
-	bne _08016350
-	adds r1, r4, #1
-	b _08016352
-	.align 2, 0
-_0801634C: .4byte 0x0202BBF4
-_08016350:
-	movs r1, #7
-_08016352:
-	adds r6, r1, #0
-	movs r0, #4
-	bl sub_0807A0C8
-	lsls r0, r0, #0x18
-	cmp r0, #0
-	bne _08016364
-	adds r4, #2
-	b _08016366
-_08016364:
-	movs r4, #6
-_08016366:
-	ldr r5, _08016378 @ =0x0202BBF4
-	ldrb r0, [r5, #0xf]
-	cmp r0, #0x40
-	beq _08016392
-	cmp r0, #0x40
-	bgt _0801637C
-	cmp r0, #0
-	beq _080163A4
-	b _080163F4
-	.align 2, 0
-_08016378: .4byte 0x0202BBF4
-_0801637C:
-	cmp r0, #0x80
-	bne _080163F4
-	movs r0, #0xe
-	ldrsb r0, [r5, r0]
-	bl sub_08031A5C
-	lsls r1, r6, #1
-	adds r0, #0x16
-	adds r0, r0, r1
-	ldrh r0, [r0]
-	b _080163F4
-_08016392:
-	movs r0, #0xe
-	ldrsb r0, [r5, r0]
-	bl sub_08031A5C
-	lsls r1, r4, #1
-	adds r0, #0x16
-	adds r0, r0, r1
-	ldrh r0, [r0]
-	b _080163F4
-_080163A4:
-	movs r0, #0xe
-	ldrsb r0, [r5, r0]
-	bl sub_08031A5C
-	adds r0, #0x86
-	ldrb r0, [r0]
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-	cmp r0, #0
-	beq _080163E0
-	ldr r1, _080163DC @ =0x0001000C
-	movs r0, #0x80
-	bl sub_08023D00
-	adds r4, r0, #0
-	movs r0, #0xe
-	ldrsb r0, [r5, r0]
-	bl sub_08031A5C
-	adds r0, #0x86
-	ldrb r0, [r0]
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-	cmp r4, r0
-	bgt _080163E0
-	movs r0, #9
-	b _080163F4
-	.align 2, 0
-_080163DC: .4byte 0x0001000C
-_080163E0:
-	ldr r0, _080163FC @ =0x0202BBF4
-	ldrb r0, [r0, #0xe]
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-	bl sub_08031A5C
-	lsls r1, r7, #1
-	adds r0, #0x16
-	adds r0, r0, r1
-	ldrh r0, [r0]
-_080163F4:
-	pop {r4, r5, r6, r7}
-	pop {r1}
-	bx r1
-	.align 2, 0
-_080163FC: .4byte 0x0202BBF4
-
-	thumb_func_start sub_08016400
-sub_08016400: @ 0x08016400
-	push {lr}
-	bl sub_08016318
-	movs r1, #0
-	bl sub_0800376C
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08016410
-sub_08016410: @ 0x08016410
-	push {r4, r5, r6, lr}
-	sub sp, #4
-	adds r5, r0, #0
-	movs r0, #0x30
-	ldrsh r1, [r5, r0]
-	movs r4, #0x2c
-	ldrsh r2, [r5, r4]
-	ldr r3, [r5, #0x3c]
-	movs r6, #0x3a
-	ldrsh r0, [r5, r6]
-	str r0, [sp]
-	movs r0, #0
-	bl sub_08013508
-	adds r4, r0, #0
-	movs r0, #0x32
-	ldrsh r1, [r5, r0]
-	movs r6, #0x2e
-	ldrsh r2, [r5, r6]
-	ldr r3, [r5, #0x3c]
-	movs r6, #0x3a
-	ldrsh r0, [r5, r6]
-	str r0, [sp]
-	movs r0, #0
-	bl sub_08013508
-	ldr r1, _08016468 @ =0x0202BBB4
-	strh r4, [r1, #0xc]
-	strh r0, [r1, #0xe]
-	ldr r0, [r5, #0x3c]
-	adds r0, #1
-	str r0, [r5, #0x3c]
-	movs r2, #0x3a
-	ldrsh r1, [r5, r2]
-	cmp r0, r1
-	blt _0801645E
-	adds r0, r5, #0
-	bl sub_08004460
-_0801645E:
-	add sp, #4
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_08016468: .4byte 0x0202BBB4
-
-	thumb_func_start nullsub_37
-nullsub_37: @ 0x0801646C
-	bx lr
-	.align 2, 0
-
-	thumb_func_start sub_08016470
-sub_08016470: @ 0x08016470
-	push {r4, r5, r6, r7, lr}
-	adds r4, r0, #0
-	adds r5, r1, #0
-	adds r6, r2, #0
-	adds r7, r3, #0
-	cmp r4, #0
-	beq _0801648C
-	ldr r0, _08016488 @ =0x08C0212C
-	adds r1, r4, #0
-	bl sub_080043D4
-	b _08016494
-	.align 2, 0
-_08016488: .4byte 0x08C0212C
-_0801648C:
-	ldr r0, _080164B4 @ =0x08C0212C
-	movs r1, #3
-	bl Proc_Start
-_08016494:
-	adds r3, r0, #0
-	ldr r1, _080164B8 @ =0x0202BBB4
-	ldrh r0, [r1, #0xc]
-	movs r2, #0
-	strh r0, [r3, #0x30]
-	ldrh r0, [r1, #0xe]
-	strh r0, [r3, #0x32]
-	lsls r0, r5, #4
-	strh r0, [r3, #0x2c]
-	lsls r0, r6, #4
-	strh r0, [r3, #0x2e]
-	strh r7, [r3, #0x3a]
-	str r2, [r3, #0x3c]
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080164B4: .4byte 0x08C0212C
-_080164B8: .4byte 0x0202BBB4
-
-	thumb_func_start sub_080164BC
-sub_080164BC: @ 0x080164BC
-	adds r1, r0, #0
-	cmp r1, #0
-	beq _080164D6
-	movs r0, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _080164DC @ =0x08C51538
-	adds r1, r1, r0
-	ldr r0, [r1, #0xc]
-	cmp r0, #0
-	bne _080164E0
-_080164D6:
-	movs r0, #0
-	b _080164E6
-	.align 2, 0
-_080164DC: .4byte 0x08C51538
-_080164E0:
-	ldrb r0, [r0]
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-_080164E6:
-	bx lr
-
-	thumb_func_start sub_080164E8
-sub_080164E8: @ 0x080164E8
-	adds r1, r0, #0
-	cmp r1, #0
-	beq _08016502
-	movs r0, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08016508 @ =0x08C51538
-	adds r1, r1, r0
-	ldr r0, [r1, #0xc]
-	cmp r0, #0
-	bne _0801650C
-_08016502:
-	movs r0, #0
-	b _08016512
-	.align 2, 0
-_08016508: .4byte 0x08C51538
-_0801650C:
-	ldrb r0, [r0, #1]
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-_08016512:
-	bx lr
-
-	thumb_func_start sub_08016514
-sub_08016514: @ 0x08016514
-	adds r1, r0, #0
-	cmp r1, #0
-	beq _0801652E
-	movs r0, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08016534 @ =0x08C51538
-	adds r1, r1, r0
-	ldr r0, [r1, #0xc]
-	cmp r0, #0
-	bne _08016538
-_0801652E:
-	movs r0, #0
-	b _0801653E
-	.align 2, 0
-_08016534: .4byte 0x08C51538
-_08016538:
-	ldrb r0, [r0, #2]
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-_0801653E:
-	bx lr
-
-	thumb_func_start sub_08016540
-sub_08016540: @ 0x08016540
-	adds r1, r0, #0
-	cmp r1, #0
-	beq _0801655A
-	movs r0, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08016560 @ =0x08C51538
-	adds r1, r1, r0
-	ldr r0, [r1, #0xc]
-	cmp r0, #0
-	bne _08016564
-_0801655A:
-	movs r0, #0
-	b _0801656A
-	.align 2, 0
-_08016560: .4byte 0x08C51538
-_08016564:
-	ldrb r0, [r0, #3]
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-_0801656A:
-	bx lr
-
-	thumb_func_start sub_0801656C
-sub_0801656C: @ 0x0801656C
-	adds r1, r0, #0
-	cmp r1, #0
-	beq _08016586
-	movs r0, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _0801658C @ =0x08C51538
-	adds r1, r1, r0
-	ldr r0, [r1, #0xc]
-	cmp r0, #0
-	bne _08016590
-_08016586:
-	movs r0, #0
-	b _08016596
-	.align 2, 0
-_0801658C: .4byte 0x08C51538
-_08016590:
-	ldrb r0, [r0, #4]
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-_08016596:
-	bx lr
-
-	thumb_func_start sub_08016598
-sub_08016598: @ 0x08016598
-	adds r1, r0, #0
-	cmp r1, #0
-	beq _080165B2
-	movs r0, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _080165B8 @ =0x08C51538
-	adds r1, r1, r0
-	ldr r0, [r1, #0xc]
-	cmp r0, #0
-	bne _080165BC
-_080165B2:
-	movs r0, #0
-	b _080165C2
-	.align 2, 0
-_080165B8: .4byte 0x08C51538
-_080165BC:
-	ldrb r0, [r0, #5]
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-_080165C2:
-	bx lr
-
-	thumb_func_start sub_080165C4
-sub_080165C4: @ 0x080165C4
-	adds r1, r0, #0
-	cmp r1, #0
-	beq _080165DE
-	movs r0, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _080165E4 @ =0x08C51538
-	adds r1, r1, r0
-	ldr r0, [r1, #0xc]
-	cmp r0, #0
-	bne _080165E8
-_080165DE:
-	movs r0, #0
-	b _080165EE
-	.align 2, 0
-_080165E4: .4byte 0x08C51538
-_080165E8:
-	ldrb r0, [r0, #6]
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-_080165EE:
-	bx lr
-
-	thumb_func_start sub_080165F0
-sub_080165F0: @ 0x080165F0
-	adds r2, r0, #0
-	movs r0, #0xff
-	ands r2, r0
-	lsls r0, r2, #3
-	adds r0, r0, r2
-	lsls r0, r0, #2
-	ldr r1, _0801661C @ =0x08C51538
-	adds r3, r0, r1
-	ldr r1, [r3, #8]
-	movs r0, #8
-	ands r1, r0
-	movs r0, #0xff
-	cmp r1, #0
-	bne _0801660E
-	ldrb r0, [r3, #0x14]
-_0801660E:
-	cmp r1, #0
-	beq _08016614
-	movs r0, #0
-_08016614:
-	lsls r0, r0, #8
-	adds r0, r0, r2
-	bx lr
-	.align 2, 0
-_0801661C: .4byte 0x08C51538
-
-	thumb_func_start sub_08016620
-sub_08016620: @ 0x08016620
-	push {r4, r5, lr}
-	adds r4, r0, #0
-	adds r5, r1, #0
-	cmp r5, #0
-	bne _0801662C
-	b _080167C2
-_0801662C:
-	movs r1, #0xff
-	ands r1, r5
-	lsls r0, r1, #3
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	ldr r1, _0801677C @ =0x08C51538
-	adds r0, r0, r1
-	ldr r2, [r0, #8]
-	movs r0, #1
-	ands r0, r2
-	adds r3, r1, #0
-	cmp r0, #0
-	bne _08016648
-	b _080167C2
-_08016648:
-	ldr r0, _08016780 @ =0x003D3C00
-	ands r0, r2
-	cmp r0, #0
-	bne _08016652
-	b _0801679C
-_08016652:
-	movs r0, #0x80
-	lsls r0, r0, #4
-	ands r2, r0
-	cmp r2, #0
-	beq _08016672
-	ldr r0, [r4]
-	ldr r1, [r4, #4]
-	ldr r0, [r0, #0x28]
-	ldr r1, [r1, #0x28]
-	orrs r0, r1
-	movs r1, #0x80
-	lsls r1, r1, #9
-	ands r0, r1
-	cmp r0, #0
-	bne _08016672
-	b _080167C2
-_08016672:
-	movs r1, #0xff
-	ands r1, r5
-	lsls r0, r1, #3
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	adds r0, r0, r3
-	ldr r0, [r0, #8]
-	movs r1, #0x80
-	lsls r1, r1, #0xb
-	ands r0, r1
-	cmp r0, #0
-	beq _080166A0
-	ldr r0, [r4]
-	ldr r1, [r4, #4]
-	ldr r0, [r0, #0x28]
-	ldr r1, [r1, #0x28]
-	orrs r0, r1
-	movs r1, #0x80
-	lsls r1, r1, #0x15
-	ands r0, r1
-	cmp r0, #0
-	bne _080166A0
-	b _080167C2
-_080166A0:
-	movs r1, #0xff
-	ands r1, r5
-	lsls r0, r1, #3
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	adds r0, r0, r3
-	ldr r0, [r0, #8]
-	movs r1, #0x80
-	lsls r1, r1, #0xc
-	ands r0, r1
-	cmp r0, #0
-	beq _080166CC
-	ldr r0, [r4]
-	ldr r1, [r4, #4]
-	ldr r0, [r0, #0x28]
-	ldr r1, [r1, #0x28]
-	orrs r0, r1
-	movs r1, #0x80
-	lsls r1, r1, #0x16
-	ands r0, r1
-	cmp r0, #0
-	beq _080167C2
-_080166CC:
-	movs r1, #0xff
-	ands r1, r5
-	lsls r0, r1, #3
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	adds r0, r0, r3
-	ldr r0, [r0, #8]
-	movs r1, #0x80
-	lsls r1, r1, #0xd
-	ands r0, r1
-	cmp r0, #0
-	beq _080166F8
-	ldr r0, [r4]
-	ldr r1, [r4, #4]
-	ldr r0, [r0, #0x28]
-	ldr r1, [r1, #0x28]
-	orrs r0, r1
-	movs r1, #0x80
-	lsls r1, r1, #0x17
-	ands r0, r1
-	cmp r0, #0
-	beq _080167C2
-_080166F8:
-	movs r1, #0xff
-	ands r1, r5
-	lsls r0, r1, #3
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	adds r0, r0, r3
-	ldr r0, [r0, #8]
-	movs r1, #0x80
-	lsls r1, r1, #0xe
-	ands r0, r1
-	cmp r0, #0
-	beq _0801671E
-	ldr r0, [r4]
-	ldr r1, [r4, #4]
-	ldr r0, [r0, #0x28]
-	ldr r1, [r1, #0x28]
-	orrs r0, r1
-	cmp r0, #0
-	bge _080167C2
-_0801671E:
-	movs r1, #0xff
-	ands r1, r5
-	lsls r0, r1, #3
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	adds r0, r0, r3
-	ldr r0, [r0, #8]
-	movs r1, #0x80
-	lsls r1, r1, #5
-	ands r0, r1
-	cmp r0, #0
-	beq _0801674A
-	ldr r0, [r4]
-	ldr r1, [r4, #4]
-	ldr r0, [r0, #0x28]
-	ldr r1, [r1, #0x28]
-	orrs r0, r1
-	movs r1, #0x80
-	lsls r1, r1, #0xa
-	ands r0, r1
-	cmp r0, #0
-	beq _080167C2
-_0801674A:
-	movs r0, #0xff
-	ands r0, r5
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	adds r1, r1, r3
-	ldr r1, [r1, #8]
-	movs r0, #0x80
-	lsls r0, r0, #3
-	ands r0, r1
-	cmp r0, #0
-	beq _08016784
-	ldr r0, [r4]
-	ldr r1, [r4, #4]
-	ldr r0, [r0, #0x28]
-	ldr r1, [r1, #0x28]
-	orrs r0, r1
-	movs r1, #0x80
-	lsls r1, r1, #0xb
-	ands r0, r1
-	cmp r0, #0
-	beq _080167C2
-	movs r0, #1
-	b _080167F4
-	.align 2, 0
-_0801677C: .4byte 0x08C51538
-_08016780: .4byte 0x003D3C00
-_08016784:
-	movs r0, #0x80
-	lsls r0, r0, #9
-	ands r1, r0
-	cmp r1, #0
-	beq _0801679C
-	adds r0, r4, #0
-	adds r1, r5, #0
-	bl sub_080175CC
-	lsls r0, r0, #0x18
-	cmp r0, #0
-	beq _080167C2
-_0801679C:
-	adds r1, r4, #0
-	adds r1, #0x30
-	movs r0, #0xf
-	ldrb r1, [r1]
-	ands r0, r1
-	ldr r3, _080167C8 @ =0x08C51538
-	cmp r0, #3
-	bne _080167CC
-	movs r1, #0xff
-	ands r1, r5
-	lsls r0, r1, #3
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	adds r0, r0, r3
-	ldr r0, [r0, #8]
-	movs r1, #2
-	ands r0, r1
-	cmp r0, #0
-	beq _080167CC
-_080167C2:
-	movs r0, #0
-	b _080167F4
-	.align 2, 0
-_080167C8: .4byte 0x08C51538
-_080167CC:
-	movs r1, #0xff
-	ands r1, r5
-	lsls r0, r1, #3
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	adds r0, r0, r3
-	ldrb r2, [r0, #0x1c]
-	movs r1, #0xff
-	cmp r5, #0
-	beq _080167E2
-	ldrb r1, [r0, #7]
-_080167E2:
-	adds r0, r4, #0
-	adds r0, #0x28
-	adds r0, r0, r1
-	movs r1, #0
-	ldrb r0, [r0]
-	cmp r0, r2
-	blt _080167F2
-	movs r1, #1
-_080167F2:
-	adds r0, r1, #0
-_080167F4:
-	pop {r4, r5}
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_080167FC
-sub_080167FC: @ 0x080167FC
-	push {r4, r5, lr}
-	adds r5, r0, #0
-	adds r4, r1, #0
-	cmp r4, #0
-	beq _08016832
-	movs r1, #0xff
-	ands r1, r4
-	lsls r0, r1, #3
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	ldr r1, _08016838 @ =0x08C51538
-	adds r0, r0, r1
-	ldr r1, [r0, #8]
-	movs r0, #1
-	ands r0, r1
-	cmp r0, #0
-	beq _08016832
-	movs r0, #2
-	ands r1, r0
-	cmp r1, #0
-	beq _0801683C
-	adds r0, r5, #0
-	bl IsUnitMagicSealed
-	lsls r0, r0, #0x18
-	cmp r0, #0
-	beq _0801683C
-_08016832:
-	movs r0, #0
-	b _08016848
-	.align 2, 0
-_08016838: .4byte 0x08C51538
-_0801683C:
-	adds r0, r5, #0
-	adds r1, r4, #0
-	bl sub_08016620
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-_08016848:
-	pop {r4, r5}
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_08016850
-sub_08016850: @ 0x08016850
-	adds r3, r0, #0
-	cmp r1, #0
-	beq _08016884
-	movs r0, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08016888 @ =0x08C51538
-	adds r2, r1, r0
-	ldr r0, [r2, #8]
-	movs r1, #4
-	ands r0, r1
-	cmp r0, #0
-	beq _08016884
-	adds r0, r3, #0
-	adds r0, #0x30
-	movs r1, #0xf
-	ldrb r0, [r0]
-	ands r1, r0
-	cmp r1, #2
-	beq _08016884
-	cmp r1, #4
-	beq _08016884
-	cmp r1, #3
-	bne _0801688C
-_08016884:
-	movs r0, #0
-	b _080168A2
-	.align 2, 0
-_08016888: .4byte 0x08C51538
-_0801688C:
-	adds r0, r3, #0
-	adds r0, #0x28
-	ldrb r1, [r2, #7]
-	adds r0, r1, r0
-	movs r1, #0
-	ldrb r0, [r0]
-	ldrb r2, [r2, #0x1c]
-	cmp r0, r2
-	blt _080168A0
-	movs r1, #1
-_080168A0:
-	adds r0, r1, #0
-_080168A2:
-	bx lr
-
-	thumb_func_start sub_080168A4
-sub_080168A4: @ 0x080168A4
-	push {r4, r5, lr}
-	adds r5, r0, #0
-	adds r4, r1, #0
-	cmp r4, #0
-	beq _080168E4
-	movs r1, #0xff
-	ands r1, r4
-	lsls r0, r1, #3
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	ldr r1, _080168E0 @ =0x08C51538
-	adds r0, r0, r1
-	ldr r0, [r0, #8]
-	movs r1, #4
-	ands r0, r1
-	cmp r0, #0
-	beq _080168E4
-	adds r0, r5, #0
-	bl IsUnitMagicSealed
-	lsls r0, r0, #0x18
-	cmp r0, #0
-	bne _080168E4
-	adds r0, r5, #0
-	adds r1, r4, #0
-	bl sub_08016850
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-	b _080168E6
-	.align 2, 0
-_080168E0: .4byte 0x08C51538
-_080168E4:
-	movs r0, #0
-_080168E6:
-	pop {r4, r5}
-	pop {r1}
-	bx r1
-
-	thumb_func_start sub_080168EC
-sub_080168EC: @ 0x080168EC
-	push {r4, r5, r6, r7, lr}
-	mov r7, r8
-	push {r7}
-	adds r5, r0, #0
-	adds r6, r1, #0
-	adds r7, r3, #0
-	movs r3, #0
-	lsls r2, r2, #0x18
-	asrs r2, r2, #0x18
-	mov r8, r2
-	cmp r2, #0
-	bne _08016906
-	movs r3, #1
-_08016906:
-	adds r0, r5, #0
-	movs r1, #0
-	adds r2, r3, #0
-	bl sub_08005458
-	movs r0, #0xff
-	ands r0, r6
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08016968 @ =0x08C51538
-	adds r4, r1, r0
-	ldrh r0, [r4]
-	bl sub_08013318
-	bl sub_08013488
-	adds r1, r0, #0
-	adds r0, r5, #0
-	bl sub_080055DC
-	adds r1, r7, #4
-	adds r0, r5, #0
-	bl sub_08005460
-	adds r3, r7, #0
-	adds r3, #0x16
-	movs r5, #1
-	mov r0, r8
-	cmp r0, #0
-	beq _08016946
-	movs r5, #2
-_08016946:
-	ldr r0, [r4, #8]
-	movs r1, #8
-	ands r0, r1
-	asrs r2, r6, #8
-	cmp r0, #0
-	beq _08016954
-	movs r2, #0xff
-_08016954:
-	adds r0, r3, #0
-	adds r1, r5, #0
-	bl sub_08006074
-	cmp r6, #0
-	bne _0801696C
-	movs r1, #1
-	rsbs r1, r1, #0
-	b _0801696E
-	.align 2, 0
-_08016968: .4byte 0x08C51538
-_0801696C:
-	ldrb r1, [r4, #0x1d]
-_0801696E:
-	movs r2, #0x80
-	lsls r2, r2, #7
-	adds r0, r7, #0
-	bl sub_08004D04
-	pop {r3}
-	mov r8, r3
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08016984
-sub_08016984: @ 0x08016984
-	push {r4, r5, r6, r7, lr}
-	mov r7, r8
-	push {r7}
-	adds r4, r0, #0
-	mov r8, r1
-	adds r7, r3, #0
-	movs r3, #0
-	lsls r2, r2, #0x18
-	asrs r6, r2, #0x18
-	cmp r6, #0
-	bne _0801699C
-	movs r3, #1
-_0801699C:
-	adds r0, r4, #0
-	movs r1, #0
-	adds r2, r3, #0
-	bl sub_08005458
-	movs r0, #0xff
-	mov r1, r8
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08016A30 @ =0x08C51538
-	adds r5, r1, r0
-	ldrh r0, [r5]
-	bl sub_08013318
-	bl sub_08013488
-	adds r1, r0, #0
-	adds r0, r4, #0
-	bl sub_080055DC
-	adds r1, r7, #4
-	adds r0, r4, #0
-	bl sub_08005460
-	movs r3, #0x14
-	adds r3, r3, r7
-	mov ip, r3
-	movs r1, #1
-	cmp r6, #0
-	beq _080169DE
-	movs r1, #2
-_080169DE:
-	ldr r0, [r5, #8]
-	movs r4, #8
-	ands r0, r4
-	mov r3, r8
-	asrs r2, r3, #8
-	cmp r0, #0
-	beq _080169EE
-	movs r2, #0xff
-_080169EE:
-	mov r0, ip
-	bl sub_08006074
-	adds r3, r7, #0
-	adds r3, #0x1a
-	movs r1, #1
-	cmp r6, #0
-	beq _08016A00
-	movs r1, #2
-_08016A00:
-	ldr r0, [r5, #8]
-	ands r0, r4
-	movs r2, #0xff
-	cmp r0, #0
-	bne _08016A0C
-	ldrb r2, [r5, #0x14]
-_08016A0C:
-	adds r0, r3, #0
-	bl sub_08006074
-	adds r0, r7, #0
-	adds r0, #0x16
-	movs r1, #0
-	cmp r6, #0
-	bne _08016A1E
-	movs r1, #1
-_08016A1E:
-	movs r2, #0x16
-	bl sub_08005FEC
-	mov r0, r8
-	cmp r0, #0
-	bne _08016A34
-	movs r1, #1
-	rsbs r1, r1, #0
-	b _08016A36
-	.align 2, 0
-_08016A30: .4byte 0x08C51538
-_08016A34:
-	ldrb r1, [r5, #0x1d]
-_08016A36:
-	movs r2, #0x80
-	lsls r2, r2, #7
-	adds r0, r7, #0
-	bl sub_08004D04
-	pop {r3}
-	mov r8, r3
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08016A4C
-sub_08016A4C: @ 0x08016A4C
-	push {r4, r5, r6, r7, lr}
-	mov r7, r8
-	push {r7}
-	adds r4, r0, #0
-	adds r6, r1, #0
-	adds r7, r2, #0
-	movs r1, #0
-	bl sub_08005444
-	movs r0, #0xff
-	ands r0, r6
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08016AB4 @ =0x08C51538
-	adds r5, r1, r0
-	ldrh r0, [r5]
-	bl sub_08013318
-	bl sub_08013488
-	adds r1, r0, #0
-	adds r0, r4, #0
-	bl sub_080055DC
-	adds r1, r7, #4
-	adds r0, r4, #0
-	bl sub_08005460
-	movs r0, #0x16
-	adds r0, r0, r7
-	mov r8, r0
-	adds r0, r4, #0
-	bl sub_08005454
-	adds r3, r0, #0
-	ldr r0, [r5, #8]
-	movs r1, #8
-	ands r0, r1
-	asrs r2, r6, #8
-	cmp r0, #0
-	beq _08016AA2
-	movs r2, #0xff
-_08016AA2:
-	mov r0, r8
-	adds r1, r3, #0
-	bl sub_08006074
-	cmp r6, #0
-	bne _08016AB8
-	movs r1, #1
-	rsbs r1, r1, #0
-	b _08016ABA
-	.align 2, 0
-_08016AB4: .4byte 0x08C51538
-_08016AB8:
-	ldrb r1, [r5, #0x1d]
-_08016ABA:
-	movs r2, #0x80
-	lsls r2, r2, #7
-	adds r0, r7, #0
-	bl sub_08004D04
-	pop {r3}
-	mov r8, r3
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start sub_08016AD0
-sub_08016AD0: @ 0x08016AD0
-	push {r4, r5, r6, r7, lr}
-	mov r7, sb
-	mov r6, r8
-	push {r6, r7}
-	mov r8, r0
-	mov sb, r1
-	adds r5, r2, #0
-	adds r7, r3, #0
-	bl sub_080053B0
-	adds r4, r5, #0
-	mov r0, r8
-	adds r1, r4, #0
-	bl sub_08005450
-	movs r0, #0xff
-	mov r1, sb
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08016B74 @ =0x08C51538
-	adds r6, r1, r0
-	ldrh r0, [r6]
-	bl sub_08013318
-	bl sub_08013488
-	adds r1, r0, #0
-	mov r0, r8
-	bl sub_080055DC
-	movs r4, #0
-	cmp r5, #1
-	bne _08016B18
-	movs r4, #1
-_08016B18:
-	adds r0, r7, #0
-	adds r0, #0x18
-	adds r1, r4, #0
-	movs r2, #0x16
-	bl sub_08005FEC
-	movs r4, #1
-	cmp r5, #1
-	beq _08016B2C
-	movs r4, #2
-_08016B2C:
-	adds r1, r7, #0
-	adds r1, #0x16
-	ldr r0, [r6, #8]
-	movs r5, #8
-	ands r0, r5
-	mov r3, sb
-	asrs r2, r3, #8
-	cmp r0, #0
-	beq _08016B40
-	movs r2, #0xff
-_08016B40:
-	adds r0, r1, #0
-	adds r1, r4, #0
-	bl sub_08006074
-	adds r1, r7, #0
-	adds r1, #0x1c
-	ldr r0, [r6, #8]
-	ands r0, r5
-	movs r2, #0xff
-	cmp r0, #0
-	bne _08016B58
-	ldrb r2, [r6, #0x14]
-_08016B58:
-	adds r0, r1, #0
-	adds r1, r4, #0
-	bl sub_08006074
-	adds r1, r7, #4
-	mov r0, r8
-	bl sub_08005460
-	mov r0, sb
-	cmp r0, #0
-	bne _08016B78
-	movs r1, #1
-	rsbs r1, r1, #0
-	b _08016B7A
-	.align 2, 0
-_08016B74: .4byte 0x08C51538
-_08016B78:
-	ldrb r1, [r6, #0x1d]
-_08016B7A:
-	movs r2, #0x80
-	lsls r2, r2, #7
-	adds r0, r7, #0
-	bl sub_08004D04
-	pop {r3, r4}
-	mov r8, r3
-	mov sb, r4
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08016B90
-sub_08016B90: @ 0x08016B90
-	adds r2, r0, #0
-	movs r1, #0xff
-	ands r1, r2
-	lsls r0, r1, #3
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	ldr r1, _08016BB8 @ =0x08C51538
-	adds r0, r0, r1
-	ldr r0, [r0, #8]
-	movs r1, #8
-	ands r0, r1
-	cmp r0, #0
-	bne _08016BB2
-	ldr r0, _08016BBC @ =0xFFFFFF00
-	adds r2, r2, r0
-	cmp r2, #0xff
-	ble _08016BC0
-_08016BB2:
-	lsls r0, r2, #0x10
-	lsrs r0, r0, #0x10
-	b _08016BC2
-	.align 2, 0
-_08016BB8: .4byte 0x08C51538
-_08016BBC: .4byte 0xFFFFFF00
-_08016BC0:
-	movs r0, #0
-_08016BC2:
-	bx lr
-
-	thumb_func_start sub_08016BC4
-sub_08016BC4: @ 0x08016BC4
-	push {r4, r5, r6, lr}
-	adds r6, r0, #0
-	movs r5, #0
-_08016BCA:
-	lsls r1, r5, #1
-	adds r0, r6, #0
-	adds r0, #0x1e
-	adds r4, r0, r1
-	ldrh r1, [r4]
-	adds r0, r6, #0
-	bl sub_08016620
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-	cmp r0, #1
-	bne _08016BE6
-	ldrh r0, [r4]
-	b _08016BEE
-_08016BE6:
-	adds r5, #1
-	cmp r5, #4
-	ble _08016BCA
-	movs r0, #0
-_08016BEE:
-	pop {r4, r5, r6}
-	pop {r1}
-	bx r1
-
-	thumb_func_start sub_08016BF4
-sub_08016BF4: @ 0x08016BF4
-	push {r4, r5, lr}
-	adds r5, r0, #0
-	movs r4, #0
-_08016BFA:
-	lsls r1, r4, #1
-	adds r0, r5, #0
-	adds r0, #0x1e
-	adds r0, r0, r1
-	ldrh r1, [r0]
-	adds r0, r5, #0
-	bl sub_080167FC
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-	cmp r0, #1
-	bne _08016C16
-	adds r0, r4, #0
-	b _08016C20
-_08016C16:
-	adds r4, #1
-	cmp r4, #4
-	ble _08016BFA
-	movs r0, #1
-	rsbs r0, r0, #0
-_08016C20:
-	pop {r4, r5}
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_08016C28
-sub_08016C28: @ 0x08016C28
-	adds r3, r1, #0
-	movs r1, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08016C4C @ =0x08C51538
-	adds r1, r1, r0
-	ldrb r0, [r1, #0x19]
-	lsrs r1, r0, #4
-	movs r2, #0xf
-	ands r2, r0
-	cmp r1, r3
-	bgt _08016C50
-	cmp r3, r2
-	bgt _08016C50
-	movs r0, #1
-	b _08016C52
-	.align 2, 0
-_08016C4C: .4byte 0x08C51538
-_08016C50:
-	movs r0, #0
-_08016C52:
-	bx lr
-
-	thumb_func_start sub_08016C54
-sub_08016C54: @ 0x08016C54
-	push {r4, r5, lr}
-	adds r3, r0, #0
-	lsls r4, r1, #1
-	adds r0, #0x1e
-	adds r0, r0, r4
-	ldrh r5, [r0]
-	adds r2, r1, #0
-	cmp r2, #0
-	beq _08016C78
-	adds r0, r4, #0
-	adds r0, #0x1c
-	adds r1, r0, r3
-_08016C6C:
-	ldrh r0, [r1]
-	strh r0, [r1, #2]
-	subs r1, #2
-	subs r2, #1
-	cmp r2, #0
-	bne _08016C6C
-_08016C78:
-	strh r5, [r3, #0x1e]
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08016C80
-sub_08016C80: @ 0x08016C80
-	push {r4, r5, r6, r7, lr}
-	adds r7, r1, #0
-	lsls r0, r0, #0x10
-	lsrs r4, r0, #0x10
-	ldr r0, [r7, #4]
-	ldrb r3, [r0, #4]
-	movs r1, #0xff
-	ands r1, r4
-	lsls r0, r1, #3
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	ldr r1, _08016CA4 @ =0x08C51538
-	adds r0, r0, r1
-	ldr r2, [r0, #0x10]
-	adds r5, r1, #0
-	cmp r2, #0
-	beq _08016D04
-	b _08016CB0
-	.align 2, 0
-_08016CA4: .4byte 0x08C51538
-_08016CA8:
-	ldrb r0, [r2]
-	cmp r0, r3
-	beq _08016CB8
-	adds r2, #1
-_08016CB0:
-	ldrb r0, [r2]
-	cmp r0, #0
-	bne _08016CA8
-	b _08016D04
-_08016CB8:
-	movs r1, #0xff
-	ands r1, r4
-	lsls r0, r1, #3
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	adds r0, r0, r5
-	ldr r1, [r0, #0x10]
-	ldr r0, _08016D00 @ =0x08D5FB8A
-	cmp r1, r0
-	bne _08016CFA
-	movs r3, #0
-	movs r6, #0xff
-	adds r2, r7, #0
-	adds r2, #0x1e
-	movs r4, #4
-_08016CD6:
-	adds r0, r6, #0
-	ldrh r1, [r2]
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	adds r1, r1, r5
-	ldr r0, [r1, #8]
-	orrs r3, r0
-	adds r2, #2
-	subs r4, #1
-	cmp r4, #0
-	bge _08016CD6
-	movs r0, #0x80
-	lsls r0, r0, #7
-	ands r3, r0
-	cmp r3, #0
-	bne _08016D04
-_08016CFA:
-	movs r0, #1
-	b _08016D06
-	.align 2, 0
-_08016D00: .4byte 0x08D5FB8A
-_08016D04:
-	movs r0, #0
-_08016D06:
-	pop {r4, r5, r6, r7}
-	pop {r1}
-	bx r1
-
-	thumb_func_start sub_08016D0C
-sub_08016D0C: @ 0x08016D0C
-	push {r4, r5, lr}
-	sub sp, #0x28
-	mov r2, sp
-	ldr r1, _08016D4C @ =0x081C9108
-	ldm r1!, {r3, r4, r5}
-	stm r2!, {r3, r4, r5}
-	ldm r1!, {r3, r4, r5}
-	stm r2!, {r3, r4, r5}
-	ldm r1!, {r3, r4, r5}
-	stm r2!, {r3, r4, r5}
-	ldr r1, [r1]
-	str r1, [r2]
-	movs r1, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08016D50 @ =0x08C51538
-	adds r1, r1, r0
-	ldrb r0, [r1, #0x19]
-	adds r1, r0, #0
-	cmp r0, #0x22
-	beq _08016D86
-	cmp r0, #0x22
-	bgt _08016D5E
-	cmp r0, #0x11
-	beq _08016D7A
-	cmp r0, #0x11
-	bgt _08016D54
-	cmp r0, #0x10
-	beq _08016D76
-	b _08016D9A
-	.align 2, 0
-_08016D4C: .4byte 0x081C9108
-_08016D50: .4byte 0x08C51538
-_08016D54:
-	cmp r0, #0x12
-	beq _08016D7E
-	cmp r0, #0x13
-	beq _08016D82
-	b _08016D9A
-_08016D5E:
-	cmp r0, #0x3a
-	beq _08016D8E
-	cmp r0, #0x3a
-	bgt _08016D6C
-	cmp r0, #0x23
-	beq _08016D8A
-	b _08016D9A
-_08016D6C:
-	cmp r1, #0x3f
-	beq _08016D92
-	cmp r1, #0xff
-	beq _08016D96
-	b _08016D9A
-_08016D76:
-	ldr r0, [sp]
-	b _08016D9C
-_08016D7A:
-	ldr r0, [sp, #4]
-	b _08016D9C
-_08016D7E:
-	ldr r0, [sp, #8]
-	b _08016D9C
-_08016D82:
-	ldr r0, [sp, #0xc]
-	b _08016D9C
-_08016D86:
-	ldr r0, [sp, #0x10]
-	b _08016D9C
-_08016D8A:
-	ldr r0, [sp, #0x14]
-	b _08016D9C
-_08016D8E:
-	ldr r0, [sp, #0x18]
-	b _08016D9C
-_08016D92:
-	ldr r0, [sp, #0x1c]
-	b _08016D9C
-_08016D96:
-	ldr r0, [sp, #0x20]
-	b _08016D9C
-_08016D9A:
-	ldr r0, [sp, #0x24]
-_08016D9C:
-	add sp, #0x28
-	pop {r4, r5}
-	pop {r1}
-	bx r1
-
-	thumb_func_start sub_08016DA4
-sub_08016DA4: @ 0x08016DA4
-	cmp r0, #0
-	bgt _08016DAC
-	movs r0, #0
-	b _08016DD6
-_08016DAC:
-	cmp r0, #0x1e
-	bgt _08016DB4
-	movs r0, #1
-	b _08016DD6
-_08016DB4:
-	cmp r0, #0x46
-	bgt _08016DBC
-	movs r0, #2
-	b _08016DD6
-_08016DBC:
-	cmp r0, #0x78
-	bgt _08016DC4
-	movs r0, #3
-	b _08016DD6
-_08016DC4:
-	cmp r0, #0xb4
-	bgt _08016DCC
-	movs r0, #4
-	b _08016DD6
-_08016DCC:
-	cmp r0, #0xfa
-	ble _08016DD4
-	movs r0, #6
-	b _08016DD6
-_08016DD4:
-	movs r0, #5
-_08016DD6:
-	bx lr
-
-	thumb_func_start sub_08016DD8
-sub_08016DD8: @ 0x08016DD8
-	push {r4, r5, lr}
-	sub sp, #0x20
-	mov r2, sp
-	ldr r1, _08016E14 @ =0x081C9150
-	ldm r1!, {r3, r4, r5}
-	stm r2!, {r3, r4, r5}
-	ldm r1!, {r3, r4, r5}
-	stm r2!, {r3, r4, r5}
-	ldm r1!, {r3, r4}
-	stm r2!, {r3, r4}
-	movs r1, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08016E18 @ =0x08C51538
-	adds r1, r1, r0
-	ldrb r4, [r1, #0x1c]
-	ldr r0, [r1, #8]
-	ldr r1, _08016E1C @ =0x003D3C00
-	ands r0, r1
-	cmp r0, #0
-	beq _08016E20
-	adds r0, r4, #0
-	bl sub_08016DA4
-	cmp r0, #0
-	bne _08016E20
-	movs r4, #7
-	b _08016E28
-	.align 2, 0
-_08016E14: .4byte 0x081C9150
-_08016E18: .4byte 0x08C51538
-_08016E1C: .4byte 0x003D3C00
-_08016E20:
-	adds r0, r4, #0
-	bl sub_08016DA4
-	adds r4, r0, #0
-_08016E28:
-	lsls r0, r4, #2
-	add r0, sp
-	ldr r0, [r0]
-	add sp, #0x20
-	pop {r4, r5}
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_08016E38
-sub_08016E38: @ 0x08016E38
-	push {r4, lr}
-	sub sp, #8
-	adds r4, r0, #0
-	ldr r1, _08016E5C @ =0x081C9170
-	mov r0, sp
-	movs r2, #7
-	bl memcpy
-	adds r0, r4, #0
-	bl sub_08016DA4
-	add r0, sp
-	ldrb r0, [r0]
-	add sp, #8
-	pop {r4}
-	pop {r1}
-	bx r1
-	.align 2, 0
-_08016E5C: .4byte 0x081C9170
-
-	thumb_func_start sub_08016E60
-sub_08016E60: @ 0x08016E60
-	push {r4, r5, lr}
-	sub sp, #0x2c
-	mov r2, sp
-	ldr r1, _08016E88 @ =0x081C91A4
-	ldm r1!, {r3, r4, r5}
-	stm r2!, {r3, r4, r5}
-	ldm r1!, {r3, r4, r5}
-	stm r2!, {r3, r4, r5}
-	ldm r1!, {r3, r4, r5}
-	stm r2!, {r3, r4, r5}
-	ldm r1!, {r3, r4}
-	stm r2!, {r3, r4}
-	lsls r0, r0, #2
-	add r0, sp
-	ldr r0, [r0]
-	add sp, #0x2c
-	pop {r4, r5}
-	pop {r1}
-	bx r1
-	.align 2, 0
-_08016E88: .4byte 0x081C91A4
-
-	thumb_func_start sub_08016E8C
-sub_08016E8C: @ 0x08016E8C
-	push {r4, r5, r6, lr}
-	adds r5, r0, #0
-	adds r4, r1, #0
-	adds r6, r2, #0
-	bl sub_08016DA4
-	cmp r0, #6
-	bhi _08016EFE
-	lsls r0, r0, #2
-	ldr r1, _08016EA8 @ =_08016EAC
-	adds r0, r0, r1
-	ldr r0, [r0]
-	mov pc, r0
-	.align 2, 0
-_08016EA8: .4byte _08016EAC
-_08016EAC: @ jump table
-	.4byte _08016EF8 @ case 0
-	.4byte _08016EC8 @ case 1
-	.4byte _08016ED0 @ case 2
-	.4byte _08016EDA @ case 3
-	.4byte _08016EE4 @ case 4
-	.4byte _08016EEE @ case 5
-	.4byte _08016EF8 @ case 6
-_08016EC8:
-	subs r0, r5, #1
-	str r0, [r4]
-	movs r0, #0x1e
-	b _08016EFC
-_08016ED0:
-	adds r0, r5, #0
-	subs r0, #0x1f
-	str r0, [r4]
-	movs r0, #0x28
-	b _08016EFC
-_08016EDA:
-	adds r0, r5, #0
-	subs r0, #0x47
-	str r0, [r4]
-	movs r0, #0x32
-	b _08016EFC
-_08016EE4:
-	adds r0, r5, #0
-	subs r0, #0x79
-	str r0, [r4]
-	movs r0, #0x3c
-	b _08016EFC
-_08016EEE:
-	adds r0, r5, #0
-	subs r0, #0xb5
-	str r0, [r4]
-	movs r0, #0x46
-	b _08016EFC
-_08016EF8:
-	movs r0, #0
-	str r0, [r4]
-_08016EFC:
-	str r0, [r6]
-_08016EFE:
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-
-	thumb_func_start sub_08016F04
-sub_08016F04: @ 0x08016F04
-	push {r4, r5, lr}
-	adds r3, r0, #0
-	adds r2, r1, #0
-	movs r5, #0xff
-	ands r5, r2
-	lsls r0, r5, #3
-	adds r0, r0, r5
-	lsls r0, r0, #2
-	ldr r1, _08016F2C @ =0x08C51538
-	adds r4, r0, r1
-	ldr r1, [r4, #8]
-	movs r0, #1
-	ands r0, r1
-	cmp r0, #0
-	beq _08016F30
-	adds r0, r3, #0
-	adds r1, r2, #0
-	bl sub_08016620
-	b _08016F40
-	.align 2, 0
-_08016F2C: .4byte 0x08C51538
-_08016F30:
-	movs r0, #4
-	ands r1, r0
-	cmp r1, #0
-	beq _08016F46
-	adds r0, r3, #0
-	adds r1, r2, #0
-	bl sub_08016850
-_08016F40:
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-	b _08016F7A
-_08016F46:
-	ldrb r0, [r4, #0x1e]
-	cmp r0, #0
-	beq _08016F78
-	adds r0, r3, #0
-	adds r0, #0x30
-	movs r1, #0xf
-	ldrb r0, [r0]
-	ands r1, r0
-	cmp r1, #2
-	beq _08016F74
-	cmp r1, #4
-	beq _08016F74
-	ldr r0, [r3]
-	ldr r1, [r3, #4]
-	ldr r0, [r0, #0x28]
-	ldr r1, [r1, #0x28]
-	orrs r0, r1
-	movs r1, #8
-	ands r0, r1
-	cmp r0, #0
-	bne _08016F78
-	cmp r5, #0x6a
-	bne _08016F78
-_08016F74:
-	movs r0, #0
-	b _08016F7A
-_08016F78:
-	movs r0, #1
-_08016F7A:
-	pop {r4, r5}
-	pop {r1}
-	bx r1
-
-	thumb_func_start sub_08016F80
-sub_08016F80: @ 0x08016F80
-	push {lr}
-	adds r3, r0, #0
-	adds r2, r1, #0
-	movs r1, #0xff
-	ands r1, r2
-	lsls r0, r1, #3
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	ldr r1, _08016FA8 @ =0x08C51538
-	adds r0, r0, r1
-	ldr r0, [r0, #8]
-	movs r1, #1
-	ands r0, r1
-	cmp r0, #0
-	bne _08016FAC
-	adds r0, r3, #0
-	adds r1, r2, #0
-	bl sub_08027158
-	b _08016FB4
-	.align 2, 0
-_08016FA8: .4byte 0x08C51538
-_08016FAC:
-	adds r0, r3, #0
-	adds r1, r2, #0
-	bl sub_08016620
-_08016FB4:
-	lsls r0, r0, #0x18
-	asrs r0, r0, #0x18
-	pop {r1}
-	bx r1
-
-	thumb_func_start sub_08016FBC
-sub_08016FBC: @ 0x08016FBC
-	push {r4, lr}
-	adds r3, r0, #0
-	adds r2, r1, #0
-	movs r4, #0
-	movs r0, #0xff
-	ands r0, r2
-	subs r0, #0x4a
-	cmp r0, #0x50
-	bls _08016FD0
-	b _0801712E
-_08016FD0:
-	lsls r0, r0, #2
-	ldr r1, _08016FDC @ =_08016FE0
-	adds r0, r0, r1
-	ldr r0, [r0]
-	mov pc, r0
-	.align 2, 0
-_08016FDC: .4byte _08016FE0
-_08016FE0: @ jump table
-	.4byte _08017124 @ case 0
-	.4byte _08017128 @ case 1
-	.4byte _0801712C @ case 2
-	.4byte _08017124 @ case 3
-	.4byte _08017124 @ case 4
-	.4byte _0801712E @ case 5
-	.4byte _0801712E @ case 6
-	.4byte _0801712E @ case 7
-	.4byte _0801712E @ case 8
-	.4byte _0801712E @ case 9
-	.4byte _0801712E @ case 10
-	.4byte _0801712E @ case 11
-	.4byte _0801712E @ case 12
-	.4byte _0801712E @ case 13
-	.4byte _0801712E @ case 14
-	.4byte _0801712E @ case 15
-	.4byte _0801712E @ case 16
-	.4byte _0801712E @ case 17
-	.4byte _0801712E @ case 18
-	.4byte _0801712E @ case 19
-	.4byte _0801712E @ case 20
-	.4byte _0801712E @ case 21
-	.4byte _0801712E @ case 22
-	.4byte _0801712E @ case 23
-	.4byte _0801712E @ case 24
-	.4byte _0801712E @ case 25
-	.4byte _0801712E @ case 26
-	.4byte _0801712E @ case 27
-	.4byte _0801712E @ case 28
-	.4byte _0801712E @ case 29
-	.4byte _0801712E @ case 30
-	.4byte _0801712E @ case 31
-	.4byte _0801712E @ case 32
-	.4byte _08017124 @ case 33
-	.4byte _0801712C @ case 34
-	.4byte _0801712E @ case 35
-	.4byte _0801712E @ case 36
-	.4byte _0801712E @ case 37
-	.4byte _0801712E @ case 38
-	.4byte _0801712E @ case 39
-	.4byte _0801712E @ case 40
-	.4byte _0801712E @ case 41
-	.4byte _0801712E @ case 42
-	.4byte _0801712E @ case 43
-	.4byte _0801712E @ case 44
-	.4byte _0801712E @ case 45
-	.4byte _0801712E @ case 46
-	.4byte _0801712E @ case 47
-	.4byte _0801712E @ case 48
-	.4byte _0801712E @ case 49
-	.4byte _0801712E @ case 50
-	.4byte _0801712E @ case 51
-	.4byte _0801712E @ case 52
-	.4byte _0801712E @ case 53
-	.4byte _0801712E @ case 54
-	.4byte _0801712E @ case 55
-	.4byte _0801712E @ case 56
-	.4byte _0801712E @ case 57
-	.4byte _0801712E @ case 58
-	.4byte _0801712E @ case 59
-	.4byte _0801712E @ case 60
-	.4byte _0801712E @ case 61
-	.4byte _0801712E @ case 62
-	.4byte _0801712E @ case 63
-	.4byte _0801712E @ case 64
-	.4byte _0801712E @ case 65
-	.4byte _0801712E @ case 66
-	.4byte _0801712E @ case 67
-	.4byte _0801712E @ case 68
-	.4byte _0801712E @ case 69
-	.4byte _0801712E @ case 70
-	.4byte _0801712E @ case 71
-	.4byte _0801712E @ case 72
-	.4byte _0801712E @ case 73
-	.4byte _0801712E @ case 74
-	.4byte _0801712E @ case 75
-	.4byte _0801712E @ case 76
-	.4byte _0801712E @ case 77
-	.4byte _0801712E @ case 78
-	.4byte _0801712E @ case 79
-	.4byte _08017124 @ case 80
-_08017124:
-	movs r4, #0xa
-	b _0801712E
-_08017128:
-	movs r4, #0x14
-	b _0801712E
-_0801712C:
-	movs r4, #0x50
-_0801712E:
-	movs r1, #0xff
-	ands r1, r2
-	lsls r0, r1, #3
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	ldr r1, _0801715C @ =0x08C51538
-	adds r0, r0, r1
-	ldr r0, [r0, #8]
-	movs r1, #4
-	ands r0, r1
-	cmp r0, #0
-	beq _08017154
-	adds r0, r3, #0
-	bl sub_08018EC0
-	adds r4, r4, r0
-	cmp r4, #0x50
-	ble _08017154
-	movs r4, #0x50
-_08017154:
-	adds r0, r4, #0
-	pop {r4}
-	pop {r1}
-	bx r1
-	.align 2, 0
-_0801715C: .4byte 0x08C51538
-
-	thumb_func_start sub_08017160
-sub_08017160: @ 0x08017160
-	push {r4, r5, lr}
-	movs r3, #0
-	movs r4, #0xff
-	adds r2, r0, #0
-	adds r2, #0x1e
-_0801716A:
-	adds r0, r4, #0
-	ldrh r5, [r2]
-	ands r0, r5
-	cmp r0, r1
-	bne _08017178
-	adds r0, r3, #0
-	b _08017184
-_08017178:
-	adds r2, #2
-	adds r3, #1
-	cmp r3, #4
-	ble _0801716A
-	movs r0, #1
-	rsbs r0, r0, #0
-_08017184:
-	pop {r4, r5}
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_0801718C
-sub_0801718C: @ 0x0801718C
-	adds r1, r0, #0
-	cmp r1, #0
-	bne _08017196
-	movs r1, #0xff
-	b _080171A6
-_08017196:
-	movs r0, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _080171B0 @ =0x08C51538
-	adds r1, r1, r0
-	ldrb r1, [r1, #7]
-_080171A6:
-	movs r0, #0
-	cmp r1, #9
-	bne _080171AE
-	movs r0, #1
-_080171AE:
-	bx lr
-	.align 2, 0
-_080171B0: .4byte 0x08C51538
-
-	thumb_func_start sub_080171B4
-sub_080171B4: @ 0x080171B4
-	push {r4, lr}
-	adds r4, r0, #0
-	cmp r4, #0
-	beq _08017200
-	movs r0, #0xff
-	ands r0, r4
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _080171FC @ =0x08C51538
-	adds r1, r1, r0
-	ldr r2, [r1, #8]
-	movs r0, #5
-	ands r0, r2
-	cmp r0, #0
-	beq _08017200
-	movs r0, #0xc1
-	lsls r0, r0, #3
-	ands r0, r2
-	cmp r0, #0
-	bne _08017200
-	movs r3, #8
-	ands r3, r2
-	asrs r0, r4, #8
-	cmp r3, #0
-	beq _080171EA
-	movs r0, #0xff
-_080171EA:
-	movs r2, #0xff
-	cmp r3, #0
-	bne _080171F2
-	ldrb r2, [r1, #0x14]
-_080171F2:
-	cmp r0, r2
-	beq _08017200
-	movs r0, #1
-	b _08017202
-	.align 2, 0
-_080171FC: .4byte 0x08C51538
-_08017200:
-	movs r0, #0
-_08017202:
-	pop {r4}
-	pop {r1}
-	bx r1
-
-	thumb_func_start sub_08017208
-sub_08017208: @ 0x08017208
-	movs r1, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08017228 @ =0x08C51538
-	adds r1, r1, r0
-	ldrb r0, [r1, #0x19]
-	subs r0, #0x11
-	cmp r0, #0x2e
-	bhi _0801730C
-	lsls r0, r0, #2
-	ldr r1, _0801722C @ =_08017230
-	adds r0, r0, r1
-	ldr r0, [r0]
-	mov pc, r0
-	.align 2, 0
-_08017228: .4byte 0x08C51538
-_0801722C: .4byte _08017230
-_08017230: @ jump table
-	.4byte _080172EC @ case 0
-	.4byte _080172F0 @ case 1
-	.4byte _080172F4 @ case 2
-	.4byte _0801730C @ case 3
-	.4byte _0801730C @ case 4
-	.4byte _0801730C @ case 5
-	.4byte _0801730C @ case 6
-	.4byte _0801730C @ case 7
-	.4byte _0801730C @ case 8
-	.4byte _0801730C @ case 9
-	.4byte _0801730C @ case 10
-	.4byte _0801730C @ case 11
-	.4byte _0801730C @ case 12
-	.4byte _0801730C @ case 13
-	.4byte _0801730C @ case 14
-	.4byte _0801730C @ case 15
-	.4byte _0801730C @ case 16
-	.4byte _080172F8 @ case 17
-	.4byte _080172FC @ case 18
-	.4byte _0801730C @ case 19
-	.4byte _0801730C @ case 20
-	.4byte _0801730C @ case 21
-	.4byte _0801730C @ case 22
-	.4byte _0801730C @ case 23
-	.4byte _0801730C @ case 24
-	.4byte _0801730C @ case 25
-	.4byte _0801730C @ case 26
-	.4byte _0801730C @ case 27
-	.4byte _0801730C @ case 28
-	.4byte _0801730C @ case 29
-	.4byte _0801730C @ case 30
-	.4byte _0801730C @ case 31
-	.4byte _0801730C @ case 32
-	.4byte _0801730C @ case 33
-	.4byte _08017300 @ case 34
-	.4byte _0801730C @ case 35
-	.4byte _0801730C @ case 36
-	.4byte _0801730C @ case 37
-	.4byte _0801730C @ case 38
-	.4byte _0801730C @ case 39
-	.4byte _0801730C @ case 40
-	.4byte _08017304 @ case 41
-	.4byte _0801730C @ case 42
-	.4byte _0801730C @ case 43
-	.4byte _0801730C @ case 44
-	.4byte _0801730C @ case 45
-	.4byte _08017308 @ case 46
-_080172EC:
-	movs r0, #1
-	b _0801730E
-_080172F0:
-	movs r0, #3
-	b _0801730E
-_080172F4:
-	movs r0, #7
-	b _0801730E
-_080172F8:
-	movs r0, #2
-	b _0801730E
-_080172FC:
-	movs r0, #6
-	b _0801730E
-_08017300:
-	movs r0, #4
-	b _0801730E
-_08017304:
-	movs r0, #0xc
-	b _0801730E
-_08017308:
-	movs r0, #0x14
-	b _0801730E
-_0801730C:
-	movs r0, #0
-_0801730E:
-	bx lr
-
-	thumb_func_start sub_08017310
-sub_08017310: @ 0x08017310
-	push {r4, r5, r6, r7, lr}
-	adds r6, r0, #0
-	movs r7, #0
-	cmp r1, #0
-	blt _08017328
-	lsls r1, r1, #1
-	adds r0, #0x1e
-	adds r0, r0, r1
-	ldrh r0, [r0]
-	bl sub_08017208
-	b _0801735C
-_08017328:
-	movs r5, #0
-	ldrh r4, [r6, #0x1e]
-	cmp r4, #0
-	beq _0801735A
-_08017330:
-	adds r0, r6, #0
-	adds r1, r4, #0
-	bl sub_08016620
-	lsls r0, r0, #0x18
-	cmp r0, #0
-	beq _08017346
-	adds r0, r4, #0
-	bl sub_08017208
-	orrs r7, r0
-_08017346:
-	adds r5, #1
-	cmp r5, #4
-	bgt _0801735A
-	lsls r1, r5, #1
-	adds r0, r6, #0
-	adds r0, #0x1e
-	adds r0, r0, r1
-	ldrh r4, [r0]
-	cmp r4, #0
-	bne _08017330
-_0801735A:
-	adds r0, r7, #0
-_0801735C:
-	pop {r4, r5, r6, r7}
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_08017364
-sub_08017364: @ 0x08017364
-	push {r4, r5, r6, r7, lr}
-	adds r5, r0, #0
-	movs r6, #0
-	cmp r1, #0
-	blt _080173A8
-	lsls r0, r1, #1
-	adds r1, r5, #0
-	adds r1, #0x1e
-	adds r1, r1, r0
-	ldrh r4, [r1]
-	adds r0, r5, #0
-	adds r1, r4, #0
-	bl sub_08027158
-	lsls r0, r0, #0x18
-	cmp r0, #0
-	beq _08017416
-	movs r0, #0xff
-	ands r0, r4
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _080173A4 @ =0x08C51538
-	adds r1, r1, r0
-	movs r6, #0xf
-	ldrb r1, [r1, #0x19]
-	ands r6, r1
-	cmp r6, #0
-	bne _080173F2
-	movs r6, #0x63
-	b _080173F2
-	.align 2, 0
-_080173A4: .4byte 0x08C51538
-_080173A8:
-	movs r7, #0
-	ldrh r4, [r5, #0x1e]
-	cmp r4, #0
-	beq _080173F2
-_080173B0:
-	adds r0, r5, #0
-	adds r1, r4, #0
-	bl sub_08027158
-	lsls r0, r0, #0x18
-	cmp r0, #0
-	beq _080173DE
-	movs r0, #0xff
-	ands r0, r4
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08017400 @ =0x08C51538
-	adds r1, r1, r0
-	movs r4, #0xf
-	ldrb r1, [r1, #0x19]
-	ands r4, r1
-	cmp r4, #0
-	bne _080173D8
-	movs r4, #0x63
-_080173D8:
-	cmp r6, r4
-	bge _080173DE
-	adds r6, r4, #0
-_080173DE:
-	adds r7, #1
-	cmp r7, #4
-	bgt _080173F2
-	lsls r1, r7, #1
-	adds r0, r5, #0
-	adds r0, #0x1e
-	adds r0, r0, r1
-	ldrh r4, [r0]
-	cmp r4, #0
-	bne _080173B0
-_080173F2:
-	cmp r6, #2
-	beq _0801740E
-	cmp r6, #2
-	bgt _08017404
-	cmp r6, #1
-	beq _0801740A
-	b _08017416
-	.align 2, 0
-_08017400: .4byte 0x08C51538
-_08017404:
-	cmp r6, #0x63
-	beq _08017412
-	b _08017416
-_0801740A:
-	movs r0, #1
-	b _08017418
-_0801740E:
-	movs r0, #3
-	b _08017418
-_08017412:
-	movs r0, #0x20
-	b _08017418
-_08017416:
-	movs r0, #0
-_08017418:
-	pop {r4, r5, r6, r7}
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_08017420
-sub_08017420: @ 0x08017420
-	push {r4, r5, r6, r7, lr}
-	adds r7, r0, #0
-	movs r6, #0
-	movs r5, #0
-	ldrh r4, [r7, #0x1e]
-	cmp r4, #0
-	beq _08017470
-_0801742E:
-	adds r0, r7, #0
-	adds r1, r4, #0
-	bl sub_08016850
-	lsls r0, r0, #0x18
-	cmp r0, #0
-	beq _0801745C
-	movs r0, #0xff
-	ands r0, r4
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08017480 @ =0x08C51538
-	adds r1, r1, r0
-	movs r4, #0xf
-	ldrb r1, [r1, #0x19]
-	ands r4, r1
-	cmp r4, #0
-	bne _08017456
-	movs r4, #0x63
-_08017456:
-	cmp r6, r4
-	bge _0801745C
-	adds r6, r4, #0
-_0801745C:
-	adds r5, #1
-	cmp r5, #4
-	bgt _08017470
-	lsls r1, r5, #1
-	adds r0, r7, #0
-	adds r0, #0x1e
-	adds r0, r0, r1
-	ldrh r4, [r0]
-	cmp r4, #0
-	bne _0801742E
-_08017470:
-	cmp r6, #2
-	beq _0801748E
-	cmp r6, #2
-	bgt _08017484
-	cmp r6, #1
-	beq _0801748A
-	b _08017496
-	.align 2, 0
-_08017480: .4byte 0x08C51538
-_08017484:
-	cmp r6, #0x63
-	beq _08017492
-	b _08017496
-_0801748A:
-	movs r0, #1
-	b _08017498
-_0801748E:
-	movs r0, #3
-	b _08017498
-_08017492:
-	movs r0, #0x20
-	b _08017498
-_08017496:
-	movs r0, #0
-_08017498:
-	pop {r4, r5, r6, r7}
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_080174A0
-sub_080174A0: @ 0x080174A0
-	push {r4, r5, r6, r7, lr}
-	movs r6, #0
-	bl sub_0802EBCC
-	adds r3, r0, #0
-	movs r5, #0
-	ldrh r0, [r3]
-	cmp r0, #0
-	beq _080174EA
-	ldr r7, _080174D0 @ =0x08C51538
-_080174B4:
-	ldrh r4, [r3]
-	ldrb r1, [r3]
-	lsls r0, r1, #3
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	adds r2, r0, r7
-	ldr r0, [r2, #8]
-	movs r1, #8
-	ands r0, r1
-	cmp r0, #0
-	beq _080174D4
-	ldrh r0, [r2, #0x1a]
-	b _080174DA
-	.align 2, 0
-_080174D0: .4byte 0x08C51538
-_080174D4:
-	asrs r0, r4, #8
-	ldrh r2, [r2, #0x1a]
-	muls r0, r2, r0
-_080174DA:
-	adds r6, r6, r0
-	adds r3, #2
-	adds r5, #1
-	cmp r5, #0x63
-	bgt _080174EA
-	ldrh r0, [r3]
-	cmp r0, #0
-	bne _080174B4
-_080174EA:
-	adds r0, r6, #0
-	pop {r4, r5, r6, r7}
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_080174F4
-sub_080174F4: @ 0x080174F4
-	push {r4, r5, r6, r7, lr}
-	movs r5, #0
-	movs r4, #1
-_080174FA:
-	adds r0, r4, #0
-	bl sub_080190F4
-	mov ip, r0
-	adds r6, r4, #1
-	cmp r0, #0
-	beq _08017564
-	ldr r0, [r0]
-	cmp r0, #0
-	beq _08017564
-	mov r1, ip
-	ldr r0, [r1, #0xc]
-	ldr r1, _08017540 @ =0x00010004
-	ands r0, r1
-	cmp r0, #0
-	bne _08017564
-	movs r4, #0
-	mov r0, ip
-	ldrh r3, [r0, #0x1e]
-	cmp r3, #0
-	beq _08017564
-	ldr r7, _08017544 @ =0x08C51538
-_08017526:
-	movs r1, #0xff
-	ands r1, r3
-	lsls r0, r1, #3
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	adds r2, r0, r7
-	ldr r0, [r2, #8]
-	movs r1, #8
-	ands r0, r1
-	cmp r0, #0
-	beq _08017548
-	ldrh r0, [r2, #0x1a]
-	b _0801754E
-	.align 2, 0
-_08017540: .4byte 0x00010004
-_08017544: .4byte 0x08C51538
-_08017548:
-	asrs r0, r3, #8
-	ldrh r2, [r2, #0x1a]
-	muls r0, r2, r0
-_0801754E:
-	adds r5, r5, r0
-	adds r4, #1
-	cmp r4, #4
-	bgt _08017564
-	lsls r1, r4, #1
-	mov r0, ip
-	adds r0, #0x1e
-	adds r0, r0, r1
-	ldrh r3, [r0]
-	cmp r3, #0
-	bne _08017526
-_08017564:
-	adds r4, r6, #0
-	cmp r4, #0x3f
-	ble _080174FA
-	adds r0, r5, #0
-	pop {r4, r5, r6, r7}
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start sub_08017574
-sub_08017574: @ 0x08017574
-	push {r4, lr}
-	bl sub_080174A0
-	adds r4, r0, #0
-	bl sub_080174F4
-	adds r4, r4, r0
-	bl sub_08023D90
-	adds r4, r4, r0
-	ldr r0, _08017598 @ =0x0098967F
-	cmp r4, r0
-	ble _08017590
-	adds r4, r0, #0
-_08017590:
-	adds r0, r4, #0
-	pop {r4}
-	pop {r1}
-	bx r1
-	.align 2, 0
-_08017598: .4byte 0x0098967F
-
-	thumb_func_start sub_0801759C
-sub_0801759C: @ 0x0801759C
-	adds r2, r0, #0
-	lsls r1, r1, #0x18
-	lsrs r3, r1, #0x18
-	cmp r2, #0
-	bne _080175AA
-	movs r1, #0xff
-	b _080175BA
-_080175AA:
-	movs r0, #0xff
-	ands r0, r2
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _080175C4 @ =0x08C51538
-	adds r1, r1, r0
-	ldrb r1, [r1, #7]
-_080175BA:
-	ldr r0, _080175C8 @ =0x0202BBF4
-	adds r0, #0x1c
-	adds r0, r1, r0
-	strb r3, [r0]
-	bx lr
-	.align 2, 0
-_080175C4: .4byte 0x08C51538
-_080175C8: .4byte 0x0202BBF4
-
-	thumb_func_start sub_080175CC
-sub_080175CC: @ 0x080175CC
-	adds r3, r0, #0
-	cmp r1, #0
-	bne _080175D6
-	movs r1, #0xff
-	b _080175E6
-_080175D6:
-	movs r0, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08017600 @ =0x08C51538
-	adds r1, r1, r0
-	ldrb r1, [r1, #7]
-_080175E6:
-	ldr r0, _08017604 @ =0x0202BBF4
-	adds r0, #0x1c
-	adds r0, r1, r0
-	movs r2, #0
-	ldr r1, [r3]
-	ldrb r0, [r0]
-	ldrb r1, [r1, #4]
-	cmp r0, r1
-	bne _080175FA
-	movs r2, #1
-_080175FA:
-	adds r0, r2, #0
-	bx lr
-	.align 2, 0
-_08017600: .4byte 0x08C51538
-_08017604: .4byte 0x0202BBF4
-
-	thumb_func_start GetItemIndex
-GetItemIndex: @ 0x08017608
-	adds r1, r0, #0
-	movs r0, #0xff
-	ands r0, r1
-	bx lr
-
-	thumb_func_start sub_08017610
-sub_08017610: @ 0x08017610
-	push {lr}
-	movs r1, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08017630 @ =0x08C51538
-	adds r1, r1, r0
-	ldrh r0, [r1]
-	bl sub_08013318
-	bl sub_08013488
-	pop {r1}
-	bx r1
-	.align 2, 0
-_08017630: .4byte 0x08C51538
-
-	thumb_func_start sub_08017634
-sub_08017634: @ 0x08017634
-	movs r1, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08017648 @ =0x08C51538
-	adds r1, r1, r0
-	ldrh r0, [r1, #2]
-	bx lr
-	.align 2, 0
-_08017648: .4byte 0x08C51538
-
-	thumb_func_start sub_0801764C
-sub_0801764C: @ 0x0801764C
-	movs r1, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08017660 @ =0x08C51538
-	adds r1, r1, r0
-	ldrh r0, [r1, #4]
-	bx lr
-	.align 2, 0
-_08017660: .4byte 0x08C51538
-
-	thumb_func_start sub_08017664
-sub_08017664: @ 0x08017664
-	cmp r0, #0
-	beq _08017680
-	movs r1, #0xff
-	ands r1, r0
-	lsls r0, r1, #3
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	ldr r1, _0801767C @ =0x08C51538
-	adds r0, r0, r1
-	ldrb r0, [r0, #7]
-	b _08017682
-	.align 2, 0
-_0801767C: .4byte 0x08C51538
-_08017680:
-	movs r0, #0xff
-_08017682:
-	bx lr
-
-	thumb_func_start sub_08017684
-sub_08017684: @ 0x08017684
-	movs r1, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08017698 @ =0x08C51538
-	adds r1, r1, r0
-	ldr r0, [r1, #8]
-	bx lr
-	.align 2, 0
-_08017698: .4byte 0x08C51538
-
-	thumb_func_start sub_0801769C
-sub_0801769C: @ 0x0801769C
-	adds r2, r0, #0
-	movs r1, #0xff
-	ands r1, r2
-	lsls r0, r1, #3
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	ldr r1, _080176BC @ =0x08C51538
-	adds r0, r0, r1
-	ldr r0, [r0, #8]
-	movs r1, #8
-	ands r0, r1
-	cmp r0, #0
-	bne _080176C0
-	asrs r0, r2, #8
-	b _080176C2
-	.align 2, 0
-_080176BC: .4byte 0x08C51538
-_080176C0:
-	movs r0, #0xff
-_080176C2:
-	bx lr
-
-	thumb_func_start sub_080176C4
-sub_080176C4: @ 0x080176C4
-	movs r1, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _080176E0 @ =0x08C51538
-	adds r2, r1, r0
-	ldr r0, [r2, #8]
-	movs r1, #8
-	ands r0, r1
-	cmp r0, #0
-	bne _080176E4
-	ldrb r0, [r2, #0x14]
-	b _080176E6
-	.align 2, 0
-_080176E0: .4byte 0x08C51538
-_080176E4:
-	movs r0, #0xff
-_080176E6:
-	bx lr
-
-	thumb_func_start sub_080176E8
-sub_080176E8: @ 0x080176E8
-	movs r1, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _080176FC @ =0x08C51538
-	adds r1, r1, r0
-	ldrb r0, [r1, #0x15]
-	bx lr
-	.align 2, 0
-_080176FC: .4byte 0x08C51538
-
-	thumb_func_start sub_08017700
-sub_08017700: @ 0x08017700
-	movs r1, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08017714 @ =0x08C51538
-	adds r1, r1, r0
-	ldrb r0, [r1, #0x16]
-	bx lr
-	.align 2, 0
-_08017714: .4byte 0x08C51538
-
-	thumb_func_start sub_08017718
-sub_08017718: @ 0x08017718
-	movs r1, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _0801772C @ =0x08C51538
-	adds r1, r1, r0
-	ldrb r0, [r1, #0x17]
-	bx lr
-	.align 2, 0
-_0801772C: .4byte 0x08C51538
-
-	thumb_func_start sub_08017730
-sub_08017730: @ 0x08017730
-	movs r1, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08017744 @ =0x08C51538
-	adds r1, r1, r0
-	ldrb r0, [r1, #0x18]
-	bx lr
-	.align 2, 0
-_08017744: .4byte 0x08C51538
-
-	thumb_func_start sub_08017748
-sub_08017748: @ 0x08017748
-	adds r3, r0, #0
-	movs r0, #0xff
-	ands r0, r3
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08017768 @ =0x08C51538
-	adds r2, r1, r0
-	ldr r0, [r2, #8]
-	movs r1, #8
-	ands r0, r1
-	cmp r0, #0
-	beq _0801776C
-	ldrh r0, [r2, #0x1a]
-	b _08017772
-	.align 2, 0
-_08017768: .4byte 0x08C51538
-_0801776C:
-	asrs r0, r3, #8
-	ldrh r2, [r2, #0x1a]
-	muls r0, r2, r0
-_08017772:
-	bx lr
-
-	thumb_func_start sub_08017774
-sub_08017774: @ 0x08017774
-	movs r1, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08017788 @ =0x08C51538
-	adds r1, r1, r0
-	ldrb r1, [r1, #0x19]
-	lsrs r0, r1, #4
-	bx lr
-	.align 2, 0
-_08017788: .4byte 0x08C51538
-
-	thumb_func_start sub_0801778C
-sub_0801778C: @ 0x0801778C
-	movs r1, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _080177A4 @ =0x08C51538
-	adds r1, r1, r0
-	movs r0, #0xf
-	ldrb r1, [r1, #0x19]
-	ands r0, r1
-	bx lr
-	.align 2, 0
-_080177A4: .4byte 0x08C51538
-
-	thumb_func_start sub_080177A8
-sub_080177A8: @ 0x080177A8
-	movs r1, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _080177BC @ =0x08C51538
-	adds r1, r1, r0
-	ldrb r0, [r1, #0x19]
-	bx lr
-	.align 2, 0
-_080177BC: .4byte 0x08C51538
-
-	thumb_func_start sub_080177C0
-sub_080177C0: @ 0x080177C0
-	movs r1, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _080177D4 @ =0x08C51538
-	adds r1, r1, r0
-	ldrb r0, [r1, #0x1c]
-	bx lr
-	.align 2, 0
-_080177D4: .4byte 0x08C51538
-
-	thumb_func_start sub_080177D8
-sub_080177D8: @ 0x080177D8
-	movs r1, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _080177EC @ =0x08C51538
-	adds r1, r1, r0
-	ldr r0, [r1, #0x10]
-	bx lr
-	.align 2, 0
-_080177EC: .4byte 0x08C51538
-
-	thumb_func_start sub_080177F0
-sub_080177F0: @ 0x080177F0
-	movs r1, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08017804 @ =0x08C51538
-	adds r1, r1, r0
-	ldr r0, [r1, #0xc]
-	bx lr
-	.align 2, 0
-_08017804: .4byte 0x08C51538
-
-	thumb_func_start sub_08017808
-sub_08017808: @ 0x08017808
-	cmp r0, #0
-	beq _08017824
-	movs r1, #0xff
-	ands r1, r0
-	lsls r0, r1, #3
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	ldr r1, _08017820 @ =0x08C51538
-	adds r0, r0, r1
-	ldrb r0, [r0, #0x1d]
-	b _08017828
-	.align 2, 0
-_08017820: .4byte 0x08C51538
-_08017824:
-	movs r0, #1
-	rsbs r0, r0, #0
-_08017828:
-	bx lr
-	.align 2, 0
-
-	thumb_func_start sub_0801782C
-sub_0801782C: @ 0x0801782C
-	movs r1, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08017840 @ =0x08C51538
-	adds r1, r1, r0
-	ldrb r0, [r1, #0x1f]
-	bx lr
-	.align 2, 0
-_08017840: .4byte 0x08C51538
-
-	thumb_func_start sub_08017844
-sub_08017844: @ 0x08017844
-	movs r1, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08017858 @ =0x08C51538
-	adds r1, r1, r0
-	ldrb r0, [r1, #0x1e]
-	bx lr
-	.align 2, 0
-_08017858: .4byte 0x08C51538
-
-	thumb_func_start sub_0801785C
-sub_0801785C: @ 0x0801785C
-	movs r1, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08017870 @ =0x08C51538
-	adds r1, r1, r0
-	ldrh r0, [r1, #0x1a]
-	bx lr
-	.align 2, 0
-_08017870: .4byte 0x08C51538
-
-	thumb_func_start sub_08017874
-sub_08017874: @ 0x08017874
-	movs r1, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _08017898 @ =0x08C51538
-	adds r2, r1, r0
-	ldr r0, [r2, #8]
-	movs r1, #8
-	ands r0, r1
-	movs r1, #0xff
-	cmp r0, #0
-	bne _08017890
-	ldrb r1, [r2, #0x14]
-_08017890:
-	ldrh r2, [r2, #0x1a]
-	adds r0, r2, #0
-	muls r0, r1, r0
-	bx lr
-	.align 2, 0
-_08017898: .4byte 0x08C51538
-
-	thumb_func_start sub_0801789C
-sub_0801789C: @ 0x0801789C
-	movs r1, #0xff
-	ands r0, r1
-	lsls r1, r0, #3
-	adds r1, r1, r0
-	lsls r1, r1, #2
-	ldr r0, _080178B0 @ =0x08C51538
-	adds r1, r1, r0
-	adds r1, #0x20
-	ldrb r0, [r1]
-	bx lr
-	.align 2, 0
-_080178B0: .4byte 0x08C51538
-
-	thumb_func_start sub_080178B4
-sub_080178B4: @ 0x080178B4
-	adds r1, r0, #0
-	lsls r0, r1, #3
-	adds r0, r0, r1
-	lsls r0, r0, #2
-	ldr r1, _080178C4 @ =0x08C51538
-	adds r0, r0, r1
-	bx lr
-	.align 2, 0
-_080178C4: .4byte 0x08C51538
diff --git a/asm/evt-utils.s b/asm/evt-utils.s
new file mode 100644
index 0000000..e040b14
--- /dev/null
+++ b/asm/evt-utils.s
@@ -0,0 +1,4150 @@
+	.include "macro.inc"
+
+	.syntax unified
+
+	thumb_func_start sub_08010630
+sub_08010630: @ 0x08010630
+	push {r4, r5, r6, r7, lr}
+	mov r7, sl
+	mov r6, sb
+	mov r5, r8
+	push {r5, r6, r7}
+	sub sp, #8
+	adds r6, r0, #0
+	ldr r2, [r6, #0x38]
+	movs r1, #0x80
+	lsls r1, r1, #3
+	adds r0, r2, r1
+	ldr r4, _08010748 @ =0x0001FFFF
+	ands r0, r4
+	lsrs r0, r0, #5
+	str r0, [sp, #4]
+	ldr r1, [r6, #0x3c]
+	adds r0, r1, #1
+	movs r3, #0xf
+	ands r0, r3
+	lsls r0, r0, #0xc
+	ldr r5, [sp, #4]
+	orrs r5, r0
+	str r5, [sp, #4]
+	ands r2, r4
+	lsrs r7, r2, #5
+	ands r1, r3
+	lsls r1, r1, #0xc
+	orrs r7, r1
+	ldr r1, [r6, #0x30]
+	adds r4, r6, #0
+	adds r4, #0x48
+	ldr r2, [r6, #0x34]
+	ldrh r0, [r4]
+	adds r2, r0, r2
+	ldr r5, _0801074C @ =0x08BFF798
+	str r7, [sp]
+	movs r0, #4
+	adds r3, r5, #0
+	bl sub_080068C4
+	ldr r0, [r6, #0x44]
+	subs r0, #2
+	lsls r0, r0, #3
+	ldr r1, [r6, #0x30]
+	adds r1, r1, r0
+	ldr r2, [r6, #0x34]
+	ldrh r3, [r4]
+	adds r2, r3, r2
+	adds r0, r7, #4
+	str r0, [sp]
+	movs r0, #4
+	adds r3, r5, #0
+	bl sub_080068C4
+	ldr r1, [r6, #0x30]
+	ldrh r0, [r4]
+	adds r0, #0x18
+	ldr r2, [r6, #0x34]
+	adds r2, r2, r0
+	adds r0, r7, #0
+	adds r0, #0xd
+	str r0, [sp]
+	movs r0, #4
+	adds r3, r5, #0
+	bl sub_080068C4
+	ldr r0, [r6, #0x44]
+	subs r0, #2
+	lsls r0, r0, #3
+	ldr r1, [r6, #0x30]
+	adds r1, r1, r0
+	ldrh r0, [r4]
+	adds r0, #0x18
+	ldr r2, [r6, #0x34]
+	adds r2, r2, r0
+	adds r0, r7, #0
+	adds r0, #0x11
+	str r0, [sp]
+	movs r0, #4
+	adds r3, r5, #0
+	bl sub_080068C4
+	ldr r1, [r6, #0x30]
+	ldrh r0, [r4]
+	adds r0, #8
+	ldr r2, [r6, #0x34]
+	adds r2, r2, r0
+	ldr r5, _08010750 @ =0x08BFF760
+	adds r0, r7, #6
+	str r0, [sp]
+	movs r0, #4
+	adds r3, r5, #0
+	bl sub_080068C4
+	ldr r1, [r6, #0x30]
+	ldrh r0, [r4]
+	adds r0, #0x10
+	ldr r2, [r6, #0x34]
+	adds r2, r2, r0
+	adds r0, r7, #0
+	adds r0, #0xb
+	str r0, [sp]
+	movs r0, #4
+	adds r3, r5, #0
+	bl sub_080068C4
+	ldr r0, [r6, #0x44]
+	subs r0, #1
+	lsls r0, r0, #3
+	ldr r1, [r6, #0x30]
+	adds r1, r1, r0
+	ldrh r0, [r4]
+	adds r0, #8
+	ldr r2, [r6, #0x34]
+	adds r2, r2, r0
+	adds r0, r7, #0
+	adds r0, #0xa
+	str r0, [sp]
+	movs r0, #4
+	adds r3, r5, #0
+	bl sub_080068C4
+	ldr r0, [r6, #0x44]
+	subs r0, #1
+	lsls r0, r0, #3
+	ldr r1, [r6, #0x30]
+	adds r1, r1, r0
+	ldrh r0, [r4]
+	adds r0, #0x10
+	ldr r2, [r6, #0x34]
+	adds r2, r2, r0
+	adds r0, r7, #0
+	adds r0, #0xc
+	str r0, [sp]
+	movs r0, #4
+	adds r3, r5, #0
+	bl sub_080068C4
+	movs r5, #2
+	b _08010772
+	.align 2, 0
+_08010748: .4byte 0x0001FFFF
+_0801074C: .4byte 0x08BFF798
+_08010750: .4byte 0x08BFF760
+_08010754:
+	lsls r0, r5, #3
+	ldr r1, [r6, #0x30]
+	adds r1, r1, r0
+	adds r0, r6, #0
+	adds r0, #0x48
+	ldr r2, [r6, #0x34]
+	ldrh r0, [r0]
+	adds r2, r0, r2
+	adds r0, r7, #2
+	str r0, [sp]
+	movs r0, #4
+	ldr r3, _080107B0 @ =0x08BFF798
+	bl sub_080068C4
+	adds r5, #2
+_08010772:
+	ldr r0, [r6, #0x44]
+	subs r0, #2
+	cmp r5, r0
+	blt _08010754
+	ldr r0, [r6, #0x44]
+	subs r0, #1
+	movs r1, #0x48
+	adds r1, r1, r6
+	mov sl, r1
+	cmp r5, r0
+	bge _080107AC
+_08010788:
+	lsls r0, r5, #3
+	ldr r1, [r6, #0x30]
+	adds r1, r1, r0
+	ldr r2, [r6, #0x34]
+	mov r3, sl
+	ldrh r3, [r3]
+	adds r2, r3, r2
+	adds r0, r7, #2
+	str r0, [sp]
+	movs r0, #4
+	ldr r3, _080107B4 @ =0x08BFF760
+	bl sub_080068C4
+	adds r5, #1
+	ldr r0, [r6, #0x44]
+	subs r0, #1
+	cmp r5, r0
+	blt _08010788
+_080107AC:
+	movs r5, #2
+	b _080107D8
+	.align 2, 0
+_080107B0: .4byte 0x08BFF798
+_080107B4: .4byte 0x08BFF760
+_080107B8:
+	lsls r0, r5, #3
+	ldr r1, [r6, #0x30]
+	adds r1, r1, r0
+	mov r2, sl
+	ldrh r0, [r2]
+	adds r0, #0x18
+	ldr r2, [r6, #0x34]
+	adds r2, r2, r0
+	adds r0, r7, #0
+	adds r0, #0xf
+	str r0, [sp]
+	movs r0, #4
+	ldr r3, _080108B8 @ =0x08BFF798
+	bl sub_080068C4
+	adds r5, #2
+_080107D8:
+	ldr r0, [r6, #0x44]
+	subs r0, #2
+	cmp r5, r0
+	blt _080107B8
+	movs r5, #1
+	ldr r0, [r6, #0x44]
+	subs r0, #2
+	cmp r5, r0
+	bge _08010832
+	mov sb, sl
+	movs r3, #8
+	adds r3, r3, r7
+	mov r8, r3
+_080107F2:
+	lsls r4, r5, #3
+	ldr r1, [r6, #0x30]
+	adds r1, r1, r4
+	mov r2, sb
+	ldrh r0, [r2]
+	adds r0, #8
+	ldr r2, [r6, #0x34]
+	adds r2, r2, r0
+	mov r3, r8
+	str r3, [sp]
+	movs r0, #4
+	ldr r3, _080108B8 @ =0x08BFF798
+	bl sub_080068C4
+	ldr r1, [r6, #0x30]
+	adds r1, r1, r4
+	mov r2, sb
+	ldrh r0, [r2]
+	adds r0, #0x10
+	ldr r2, [r6, #0x34]
+	adds r2, r2, r0
+	mov r3, r8
+	str r3, [sp]
+	movs r0, #4
+	ldr r3, _080108B8 @ =0x08BFF798
+	bl sub_080068C4
+	adds r5, #2
+	ldr r0, [r6, #0x44]
+	subs r0, #2
+	cmp r5, r0
+	blt _080107F2
+_08010832:
+	ldr r0, [r6, #0x44]
+	subs r0, #1
+	cmp r5, r0
+	bge _0801087E
+	mov r8, sl
+	ldr r0, _080108BC @ =0x08BFF760
+	mov sb, r0
+	adds r7, #8
+_08010842:
+	lsls r4, r5, #3
+	ldr r1, [r6, #0x30]
+	adds r1, r1, r4
+	mov r2, r8
+	ldrh r0, [r2]
+	adds r0, #8
+	ldr r2, [r6, #0x34]
+	adds r2, r2, r0
+	str r7, [sp]
+	movs r0, #4
+	mov r3, sb
+	bl sub_080068C4
+	ldr r1, [r6, #0x30]
+	adds r1, r1, r4
+	mov r3, r8
+	ldrh r0, [r3]
+	adds r0, #0x10
+	ldr r2, [r6, #0x34]
+	adds r2, r2, r0
+	str r7, [sp]
+	movs r0, #4
+	mov r3, sb
+	bl sub_080068C4
+	adds r5, #1
+	ldr r0, [r6, #0x44]
+	subs r0, #1
+	cmp r5, r0
+	blt _08010842
+_0801087E:
+	ldr r4, [sp, #4]
+	movs r7, #8
+	movs r5, #2
+_08010884:
+	ldr r1, [r6, #0x30]
+	adds r1, r1, r7
+	mov r2, sl
+	ldrh r0, [r2]
+	adds r0, #8
+	ldr r2, [r6, #0x34]
+	adds r2, r2, r0
+	str r4, [sp]
+	movs r0, #0
+	ldr r3, _080108C0 @ =0x08BFF7A8
+	bl sub_080068C4
+	adds r4, #4
+	adds r7, #0x20
+	subs r5, #1
+	cmp r5, #0
+	bge _08010884
+	add sp, #8
+	pop {r3, r4, r5}
+	mov r8, r3
+	mov sb, r4
+	mov sl, r5
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080108B8: .4byte 0x08BFF798
+_080108BC: .4byte 0x08BFF760
+_080108C0: .4byte 0x08BFF7A8
+
+	thumb_func_start nullsub_32
+nullsub_32: @ 0x080108C4
+	bx lr
+	.align 2, 0
+
+	thumb_func_start sub_080108C8
+sub_080108C8: @ 0x080108C8
+	adds r2, r0, #0
+	lsls r1, r1, #0x18
+	lsrs r0, r1, #0x18
+	cmp r2, #0
+	beq _080108EC
+	lsls r0, r0, #0x18
+	asrs r1, r0, #0x18
+	cmp r1, #0
+	beq _080108E6
+	adds r1, r2, #0
+	adds r1, #0x48
+	movs r0, #0x80
+	lsls r0, r0, #3
+	strh r0, [r1]
+	b _080108EC
+_080108E6:
+	adds r0, r2, #0
+	adds r0, #0x48
+	strh r1, [r0]
+_080108EC:
+	bx lr
+	.align 2, 0
+
+	thumb_func_start sub_080108F0
+sub_080108F0: @ 0x080108F0
+	push {lr}
+	adds r0, #0x4c
+	movs r3, #0
+	movs r1, #0
+	strh r1, [r0]
+	ldr r0, _0801095C @ =0x03002790
+	mov ip, r0
+	mov r2, ip
+	adds r2, #0x3c
+	movs r0, #0x3f
+	ldrb r1, [r2]
+	ands r0, r1
+	movs r1, #0x40
+	orrs r0, r1
+	strb r0, [r2]
+	mov r0, ip
+	adds r0, #0x44
+	strb r3, [r0]
+	mov r1, ip
+	adds r1, #0x45
+	movs r0, #0x10
+	strb r0, [r1]
+	mov r0, ip
+	adds r0, #0x46
+	strb r3, [r0]
+	ldr r0, _08010960 @ =0x0000FFE0
+	mov r3, ip
+	ldrh r3, [r3, #0x3c]
+	ands r0, r3
+	ldr r1, _08010964 @ =0x0000E0FF
+	ands r0, r1
+	movs r3, #0xf8
+	lsls r3, r3, #5
+	adds r1, r3, #0
+	orrs r0, r1
+	mov r1, ip
+	strh r0, [r1, #0x3c]
+	movs r0, #0x20
+	ldrb r1, [r2]
+	orrs r1, r0
+	strb r1, [r2]
+	mov r1, ip
+	adds r1, #0x3d
+	ldrb r2, [r1]
+	orrs r0, r2
+	strb r0, [r1]
+	ldr r0, _08010968 @ =0x08C01124
+	bl sub_08004584
+	movs r1, #1
+	bl sub_080108C8
+	pop {r0}
+	bx r0
+	.align 2, 0
+_0801095C: .4byte 0x03002790
+_08010960: .4byte 0x0000FFE0
+_08010964: .4byte 0x0000E0FF
+_08010968: .4byte 0x08C01124
+
+	thumb_func_start sub_0801096C
+sub_0801096C: @ 0x0801096C
+	push {r4, r5, r6, r7, lr}
+	mov r7, sl
+	mov r6, sb
+	mov r5, r8
+	push {r5, r6, r7}
+	adds r3, r0, #0
+	adds r0, #0x4c
+	ldrh r1, [r0]
+	adds r1, #1
+	movs r6, #0
+	strh r1, [r0]
+	movs r1, #0
+	ldrsh r4, [r0, r1]
+	ldr r2, _080109EC @ =0x03002790
+	adds r5, r2, #0
+	adds r5, #0x3c
+	movs r0, #0x3f
+	mov sl, r0
+	ldrb r1, [r5]
+	ands r0, r1
+	movs r1, #0x40
+	orrs r0, r1
+	strb r0, [r5]
+	movs r0, #0x44
+	adds r0, r0, r2
+	mov sb, r0
+	strb r4, [r0]
+	movs r0, #0x10
+	subs r0, r0, r4
+	movs r1, #0x45
+	adds r1, r1, r2
+	mov r8, r1
+	strb r0, [r1]
+	adds r7, r2, #0
+	adds r7, #0x46
+	strb r6, [r7]
+	cmp r4, #0x10
+	bne _080109DC
+	adds r0, r3, #0
+	bl sub_0800457C
+	mov r0, sl
+	ldrb r1, [r5]
+	ands r0, r1
+	strb r0, [r5]
+	mov r0, sb
+	strb r4, [r0]
+	mov r1, r8
+	strb r6, [r1]
+	strb r6, [r7]
+	ldr r0, _080109F0 @ =0x08C01124
+	bl sub_08004584
+	movs r1, #0
+	bl sub_080108C8
+_080109DC:
+	pop {r3, r4, r5}
+	mov r8, r3
+	mov sb, r4
+	mov sl, r5
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080109EC: .4byte 0x03002790
+_080109F0: .4byte 0x08C01124
+
+	thumb_func_start sub_080109F4
+sub_080109F4: @ 0x080109F4
+	push {lr}
+	adds r0, #0x4c
+	movs r3, #0
+	movs r1, #0
+	strh r1, [r0]
+	ldr r0, _08010A60 @ =0x03002790
+	mov ip, r0
+	mov r2, ip
+	adds r2, #0x3c
+	movs r0, #0x3f
+	ldrb r1, [r2]
+	ands r0, r1
+	movs r1, #0x40
+	orrs r0, r1
+	strb r0, [r2]
+	mov r1, ip
+	adds r1, #0x44
+	movs r0, #0x10
+	strb r0, [r1]
+	mov r0, ip
+	adds r0, #0x45
+	strb r3, [r0]
+	adds r0, #1
+	strb r3, [r0]
+	ldr r0, _08010A64 @ =0x0000FFE0
+	mov r3, ip
+	ldrh r3, [r3, #0x3c]
+	ands r0, r3
+	ldr r1, _08010A68 @ =0x0000E0FF
+	ands r0, r1
+	movs r3, #0xf8
+	lsls r3, r3, #5
+	adds r1, r3, #0
+	orrs r0, r1
+	mov r1, ip
+	strh r0, [r1, #0x3c]
+	movs r0, #0x20
+	ldrb r1, [r2]
+	orrs r1, r0
+	strb r1, [r2]
+	mov r1, ip
+	adds r1, #0x3d
+	ldrb r2, [r1]
+	orrs r0, r2
+	strb r0, [r1]
+	ldr r0, _08010A6C @ =0x08C01124
+	bl sub_08004584
+	movs r1, #1
+	bl sub_080108C8
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08010A60: .4byte 0x03002790
+_08010A64: .4byte 0x0000FFE0
+_08010A68: .4byte 0x0000E0FF
+_08010A6C: .4byte 0x08C01124
+
+	thumb_func_start sub_08010A70
+sub_08010A70: @ 0x08010A70
+	push {r4, r5, lr}
+	adds r5, r0, #0
+	adds r0, #0x4c
+	ldrh r1, [r0]
+	adds r1, #1
+	movs r4, #0
+	strh r1, [r0]
+	movs r1, #0
+	ldrsh r3, [r0, r1]
+	ldr r0, _08010AC4 @ =0x03002790
+	mov ip, r0
+	mov r2, ip
+	adds r2, #0x3c
+	movs r0, #0x3f
+	ldrb r1, [r2]
+	ands r0, r1
+	movs r1, #0x40
+	orrs r0, r1
+	strb r0, [r2]
+	movs r0, #0x10
+	subs r0, r0, r3
+	mov r1, ip
+	adds r1, #0x44
+	strb r0, [r1]
+	mov r0, ip
+	adds r0, #0x45
+	strb r3, [r0]
+	adds r0, #1
+	strb r4, [r0]
+	cmp r3, #0x10
+	bne _08010ABE
+	ldr r0, _08010AC8 @ =0x08C01124
+	bl sub_08004584
+	bl sub_08004460
+	adds r0, r5, #0
+	bl sub_0800457C
+_08010ABE:
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08010AC4: .4byte 0x03002790
+_08010AC8: .4byte 0x08C01124
+
+	thumb_func_start sub_08010ACC
+sub_08010ACC: @ 0x08010ACC
+	ldr r3, _08010AF0 @ =0x03002790
+	adds r1, r3, #0
+	adds r1, #0x3c
+	movs r0, #0x3f
+	ldrb r2, [r1]
+	ands r0, r2
+	strb r0, [r1]
+	adds r1, #8
+	movs r2, #0
+	movs r0, #0x10
+	strb r0, [r1]
+	adds r0, r3, #0
+	adds r0, #0x45
+	strb r2, [r0]
+	adds r0, #1
+	strb r2, [r0]
+	bx lr
+	.align 2, 0
+_08010AF0: .4byte 0x03002790
+
+	thumb_func_start sub_08010AF4
+sub_08010AF4: @ 0x08010AF4
+	push {r4, r5, r6, r7, lr}
+	mov r7, sl
+	mov r6, sb
+	mov r5, r8
+	push {r5, r6, r7}
+	sub sp, #0x24
+	mov r8, r0
+	mov sb, r1
+	adds r4, r2, #0
+	adds r5, r3, #0
+	movs r6, #0
+	ldr r0, _08010BD8 @ =0x08C01124
+	ldr r1, [sp, #0x48]
+	bl Proc_Start
+	adds r7, r0, #0
+	adds r0, r4, #0
+	bl sub_08013318
+	mov sl, r0
+	mov r0, r8
+	str r0, [r7, #0x30]
+	mov r2, sb
+	str r2, [r7, #0x34]
+	str r5, [r7, #0x38]
+	ldr r0, [sp, #0x44]
+	str r0, [r7, #0x3c]
+	str r4, [r7, #0x40]
+	adds r0, r7, #0
+	adds r0, #0x48
+	strh r6, [r0]
+	ldr r0, _08010BDC @ =0x08C01144
+	ldr r1, [sp, #0x48]
+	bl sub_080043D4
+	ldr r0, _08010BE0 @ =0x08452C74
+	ldr r1, [r7, #0x3c]
+	adds r1, #0x10
+	lsls r1, r1, #5
+	movs r2, #0x20
+	bl sub_0800105C
+	ldr r0, _08010BE4 @ =0x081901C8
+	ldr r1, [r7, #0x3c]
+	adds r1, #0x11
+	lsls r1, r1, #5
+	movs r2, #0x20
+	bl sub_0800105C
+	ldr r0, _08010BE8 @ =0x08452AD4
+	ldr r1, [r7, #0x38]
+	ldr r2, _08010BEC @ =0x06010000
+	adds r1, r1, r2
+	bl sub_08013688
+	mov r0, sl
+	bl sub_080054CC
+	adds r6, r0, #0
+	adds r4, r6, #0
+	cmp r6, #0
+	bge _08010B72
+	adds r4, r6, #7
+_08010B72:
+	asrs r4, r4, #3
+	adds r6, r4, #5
+	str r6, [r7, #0x44]
+	ldr r1, [r7, #0x38]
+	ldr r0, _08010BF0 @ =0x06010400
+	adds r1, r1, r0
+	ldr r2, [r7, #0x3c]
+	adds r2, #0x12
+	mov r0, sp
+	bl sub_08005ACC
+	mov r0, sp
+	bl sub_08005320
+	mov r2, sp
+	adds r2, #0x18
+	str r2, [sp, #0x20]
+	adds r0, r2, #0
+	bl sub_08005B08
+	ldr r0, [sp, #0x20]
+	movs r1, #0
+	bl sub_08005B8C
+	movs r0, #0
+	bl sub_080052E0
+	adds r4, #3
+	lsls r4, r4, #3
+	adds r0, r4, #0
+	mov r1, sl
+	bl sub_08005564
+	adds r1, r0, #0
+	ldr r0, [sp, #0x20]
+	movs r2, #0
+	mov r3, sl
+	bl sub_080059DC
+	movs r0, #0
+	bl sub_08005320
+	add sp, #0x24
+	pop {r3, r4, r5}
+	mov r8, r3
+	mov sb, r4
+	mov sl, r5
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08010BD8: .4byte 0x08C01124
+_08010BDC: .4byte 0x08C01144
+_08010BE0: .4byte 0x08452C74
+_08010BE4: .4byte 0x081901C8
+_08010BE8: .4byte 0x08452AD4
+_08010BEC: .4byte 0x06010000
+_08010BF0: .4byte 0x06010400
+
+	thumb_func_start sub_08010BF4
+sub_08010BF4: @ 0x08010BF4
+	push {r4, r5, lr}
+	sub sp, #8
+	adds r2, r0, #0
+	ldr r0, [r2, #0x30]
+	ldr r5, [r0, #4]
+	ldr r1, [r0, #8]
+	movs r0, #0x80
+	lsls r0, r0, #8
+	ands r0, r1
+	cmp r0, #0
+	bne _08010C14
+	ldr r4, _08010C10 @ =0x0000FFFF
+	ands r4, r1
+	b _08010C18
+	.align 2, 0
+_08010C10: .4byte 0x0000FFFF
+_08010C14:
+	movs r4, #1
+	rsbs r4, r4, #0
+_08010C18:
+	ldr r0, [r2, #0x30]
+	ldrh r3, [r0, #0xa]
+	movs r0, #0x80
+	lsls r0, r0, #8
+	ands r0, r3
+	movs r1, #1
+	rsbs r1, r1, #0
+	cmp r0, #0
+	bne _08010C2C
+	adds r1, r3, #0
+_08010C2C:
+	adds r3, r2, #0
+	adds r3, #0x5e
+	movs r0, #4
+	ldrh r3, [r3]
+	ands r0, r3
+	cmp r0, #0
+	bne _08010C50
+	movs r3, #0xa0
+	lsls r3, r3, #7
+	movs r0, #9
+	str r0, [sp]
+	str r2, [sp, #4]
+	adds r0, r4, #0
+	adds r2, r5, #0
+	bl sub_08010AF4
+	movs r0, #2
+	b _08010C52
+_08010C50:
+	movs r0, #0
+_08010C52:
+	add sp, #8
+	pop {r4, r5}
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_08010C5C
+sub_08010C5C: @ 0x08010C5C
+	push {lr}
+	adds r1, r0, #0
+	adds r2, r1, #0
+	adds r2, #0x5e
+	movs r0, #4
+	ldrh r2, [r2]
+	ands r0, r2
+	cmp r0, #0
+	beq _08010C80
+	ldr r0, _08010C7C @ =0x08C01124
+	bl sub_08004584
+	bl sub_08004460
+	movs r0, #0
+	b _08010CA8
+	.align 2, 0
+_08010C7C: .4byte 0x08C01124
+_08010C80:
+	adds r0, r1, #0
+	adds r0, #0x4d
+	ldrb r0, [r0]
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+	cmp r0, #0
+	beq _08010CA0
+	ldr r0, _08010C9C @ =0x08C01124
+	bl sub_08004584
+	bl sub_08004460
+	b _08010CA6
+	.align 2, 0
+_08010C9C: .4byte 0x08C01124
+_08010CA0:
+	ldr r0, _08010CAC @ =0x08C0115C
+	bl sub_080043D4
+_08010CA6:
+	movs r0, #2
+_08010CA8:
+	pop {r1}
+	bx r1
+	.align 2, 0
+_08010CAC: .4byte 0x08C0115C
+
+	thumb_func_start sub_08010CB0
+sub_08010CB0: @ 0x08010CB0
+	push {r4, r5, r6, r7, lr}
+	adds r5, r0, #0
+	ldr r4, _08010D60 @ =0x03002790
+	movs r6, #1
+	ldrb r0, [r4, #1]
+	orrs r0, r6
+	movs r7, #2
+	orrs r0, r7
+	movs r1, #5
+	rsbs r1, r1, #0
+	ands r0, r1
+	movs r1, #8
+	orrs r0, r1
+	movs r1, #0x10
+	orrs r0, r1
+	strb r0, [r4, #1]
+	adds r3, r4, #0
+	adds r3, #0x3c
+	movs r0, #0x3f
+	ldrb r1, [r3]
+	ands r0, r1
+	movs r1, #0x40
+	orrs r0, r1
+	strb r0, [r3]
+	adds r1, r4, #0
+	adds r1, #0x44
+	movs r2, #0
+	movs r0, #0x10
+	strb r0, [r1]
+	adds r0, r4, #0
+	adds r0, #0x45
+	strb r2, [r0]
+	adds r0, #1
+	strb r2, [r0]
+	ldr r0, _08010D64 @ =0x0000FFE0
+	ldrh r2, [r4, #0x3c]
+	ands r0, r2
+	movs r1, #4
+	orrs r0, r1
+	ldr r1, _08010D68 @ =0x0000E0FF
+	ands r0, r1
+	movs r2, #0x80
+	lsls r2, r2, #4
+	adds r1, r2, #0
+	orrs r0, r1
+	strh r0, [r4, #0x3c]
+	movs r0, #0x20
+	ldrb r1, [r3]
+	orrs r1, r0
+	strb r1, [r3]
+	adds r1, r4, #0
+	adds r1, #0x3d
+	ldrb r2, [r1]
+	orrs r0, r2
+	strb r0, [r1]
+	movs r0, #2
+	movs r1, #0
+	movs r2, #0
+	bl sub_08001D64
+	ldr r0, [r5, #0x34]
+	movs r1, #0x80
+	lsls r1, r1, #1
+	ands r0, r1
+	cmp r0, #0
+	bne _08010D6C
+	movs r1, #4
+	rsbs r1, r1, #0
+	adds r0, r1, #0
+	ldrb r2, [r4, #0xc]
+	ands r0, r2
+	strb r0, [r4, #0xc]
+	adds r0, r1, #0
+	ldrb r2, [r4, #0x10]
+	ands r0, r2
+	orrs r0, r6
+	strb r0, [r4, #0x10]
+	ldrb r0, [r4, #0x14]
+	ands r1, r0
+	orrs r1, r7
+	strb r1, [r4, #0x14]
+	movs r0, #3
+	ldrb r1, [r4, #0x18]
+	orrs r0, r1
+	strb r0, [r4, #0x18]
+	movs r0, #8
+	b _08010D6E
+	.align 2, 0
+_08010D60: .4byte 0x03002790
+_08010D64: .4byte 0x0000FFE0
+_08010D68: .4byte 0x0000E0FF
+_08010D6C:
+	movs r0, #6
+_08010D6E:
+	str r0, [r5, #0x44]
+	movs r0, #0
+	str r0, [r5, #0x30]
+	ldr r0, _08010D84 @ =0x08BFFF78
+	bl sub_08004584
+	str r0, [r5, #0x40]
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08010D84: .4byte 0x08BFFF78
+
+	thumb_func_start sub_08010D88
+sub_08010D88: @ 0x08010D88
+	push {r4, r5, lr}
+	adds r4, r0, #0
+	ldr r0, _08010DF0 @ =0x06008000
+	ldr r1, _08010DF4 @ =0x06001000
+	movs r2, #0xa0
+	lsls r2, r2, #5
+	bl CpuFastSet
+	ldr r0, _08010DF8 @ =0x02022960
+	ldr r2, _08010DFC @ =0xFFFFFF00
+	adds r1, r0, r2
+	ldr r2, [r4, #0x44]
+	lsls r2, r2, #3
+	ldr r3, _08010E00 @ =0x001FFFFF
+	ands r2, r3
+	bl CpuFastSet
+	ldr r5, _08010E04 @ =0x00008080
+	adds r4, r5, #0
+	ldr r3, _08010E08 @ =0x02024460
+	ldr r2, _08010E0C @ =0x02023C60
+	movs r1, #0x80
+	lsls r1, r1, #3
+_08010DB6:
+	ldrh r5, [r3]
+	adds r0, r4, r5
+	strh r0, [r2]
+	adds r3, #2
+	adds r2, #2
+	subs r1, #1
+	cmp r1, #0
+
+	thumb_func_start sub_08010DC4
+sub_08010DC4: @ 0x08010DC4
+	bne _08010DB6
+	movs r0, #4
+	bl sub_08000FD4
+	bl sub_08001034
+	ldr r2, _08010E10 @ =0x03002790
+	movs r0, #1
+	ldrb r1, [r2, #1]
+	orrs r0, r1
+	movs r1, #2
+	orrs r0, r1
+	movs r1, #4
+	orrs r0, r1
+	movs r1, #8
+	orrs r0, r1
+	movs r1, #0x10
+	orrs r0, r1
+	strb r0, [r2, #1]
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08010DF0: .4byte 0x06008000
+_08010DF4: .4byte 0x06001000
+_08010DF8: .4byte 0x02022960
+_08010DFC: .4byte 0xFFFFFF00
+_08010E00: .4byte 0x001FFFFF
+_08010E04: .4byte 0x00008080
+_08010E08: .4byte 0x02024460
+_08010E0C: .4byte 0x02023C60
+_08010E10: .4byte 0x03002790
+
+	thumb_func_start sub_08010E14
+sub_08010E14: @ 0x08010E14
+	push {r4, r5, lr}
+	sub sp, #4
+	adds r5, r0, #0
+	adds r0, #0x3c
+	ldrb r0, [r0]
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+	cmp r0, #0
+	beq _08010E7C
+	ldr r4, _08010E70 @ =0x08C00798
+	ldr r1, [r5, #0x2c]
+	lsls r0, r1, #1
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	adds r0, r0, r4
+	ldr r0, [r0]
+	ldr r1, _08010E74 @ =0x06008000
+	bl sub_08013688
+	ldr r0, _08010E78 @ =0x02024460
+	ldr r2, [r5, #0x2c]
+	lsls r1, r2, #1
+	adds r1, r1, r2
+	lsls r1, r1, #2
+	adds r2, r4, #4
+	adds r1, r1, r2
+	ldr r1, [r1]
+	movs r2, #0x80
+	lsls r2, r2, #8
+	bl sub_080C0C28
+	ldr r1, [r5, #0x2c]
+	lsls r0, r1, #1
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	adds r4, #8
+	adds r0, r0, r4
+	ldr r0, [r0]
+	movs r1, #0x80
+	lsls r1, r1, #1
+	ldr r2, [r5, #0x44]
+	lsls r2, r2, #5
+	bl sub_0800105C
+	b _08010E8E
+	.align 2, 0
+_08010E70: .4byte 0x08C00798
+_08010E74: .4byte 0x06008000
+_08010E78: .4byte 0x02024460
+_08010E7C:
+	ldr r0, _08010E9C @ =0x02024460
+	movs r1, #0x80
+	lsls r1, r1, #8
+	ldr r3, [r5, #0x44]
+	ldr r2, [r5, #0x2c]
+	str r2, [sp]
+	movs r2, #8
+	bl sub_080B7980
+_08010E8E:
+	movs r0, #8
+	bl sub_08000FD4
+	add sp, #4
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08010E9C: .4byte 0x02024460
+
+	thumb_func_start sub_08010EA0
+sub_08010EA0: @ 0x08010EA0
+	push {r4, lr}
+	adds r4, r0, #0
+	ldr r2, [r4, #0x30]
+	ldr r0, [r4, #0x38]
+	adds r2, r2, r0
+	str r2, [r4, #0x30]
+	asrs r2, r2, #4
+	ldr r0, _08010EE8 @ =0x03002790
+	mov ip, r0
+	mov r3, ip
+	adds r3, #0x3c
+	movs r0, #0x3f
+	ldrb r1, [r3]
+	ands r0, r1
+	movs r1, #0x40
+	orrs r0, r1
+	strb r0, [r3]
+	movs r0, #0x10
+	subs r0, r0, r2
+	mov r1, ip
+	adds r1, #0x44
+	movs r3, #0
+	strb r0, [r1]
+	mov r0, ip
+	adds r0, #0x45
+	strb r2, [r0]
+	adds r0, #1
+	strb r3, [r0]
+	cmp r2, #0x10
+	bne _08010EE2
+	adds r0, r4, #0
+	bl sub_0800457C
+_08010EE2:
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08010EE8: .4byte 0x03002790
+
+	thumb_func_start sub_08010EEC
+sub_08010EEC: @ 0x08010EEC
+	push {r4, lr}
+	adds r4, r0, #0
+	movs r0, #3
+	movs r1, #0
+	movs r2, #0
+	bl sub_08001D64
+	ldr r0, _08010F40 @ =0x02023C60
+	movs r1, #0
+	bl sub_080017E8
+	movs r0, #4
+	bl sub_08000FD4
+	ldr r3, _08010F44 @ =0x03002790
+	adds r1, r3, #0
+	adds r1, #0x3c
+	movs r0, #0x3f
+	ldrb r2, [r1]
+	ands r0, r2
+	strb r0, [r1]
+	adds r1, #8
+	movs r2, #0
+	movs r0, #0x10
+	strb r0, [r1]
+	adds r0, r3, #0
+	adds r0, #0x45
+	strb r2, [r0]
+	adds r0, #1
+	strb r2, [r0]
+	ldr r0, [r4, #0x34]
+	movs r1, #0x80
+	lsls r1, r1, #1
+	ands r0, r1
+	cmp r0, #0
+	bne _08010F38
+	bl sub_08015998
+_08010F38:
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08010F40: .4byte 0x02023C60
+_08010F44: .4byte 0x03002790
+
+	thumb_func_start sub_08010F48
+sub_08010F48: @ 0x08010F48
+	push {r4, r5, r6, lr}
+	adds r6, r0, #0
+	adds r4, r1, #0
+	adds r5, r2, #0
+	adds r1, r3, #0
+	lsls r4, r4, #0x18
+	lsrs r4, r4, #0x18
+	ldr r0, _08010F70 @ =0x08C0117C
+	bl sub_080043D4
+	str r5, [r0, #0x2c]
+	str r6, [r0, #0x34]
+	movs r1, #0xff
+	ands r1, r6
+	str r1, [r0, #0x38]
+	adds r0, #0x3c
+	strb r4, [r0]
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08010F70: .4byte 0x08C0117C
+
+	thumb_func_start sub_08010F74
+sub_08010F74: @ 0x08010F74
+	push {r4, r5, r6, r7, lr}
+	adds r5, r0, #0
+	ldr r7, _08011028 @ =0x03002790
+	movs r6, #1
+	ldrb r0, [r7, #1]
+	orrs r0, r6
+	movs r1, #2
+	orrs r0, r1
+	movs r1, #5
+	rsbs r1, r1, #0
+	ands r0, r1
+	movs r1, #8
+	orrs r0, r1
+	movs r1, #0x10
+	orrs r0, r1
+	strb r0, [r7, #1]
+	adds r2, r7, #0
+	adds r2, #0x3c
+	movs r0, #0x3f
+	ldrb r1, [r2]
+	ands r0, r1
+	movs r1, #0x40
+	orrs r0, r1
+	strb r0, [r2]
+	adds r0, r7, #0
+	adds r0, #0x44
+	movs r4, #0
+	strb r4, [r0]
+	adds r1, r7, #0
+	adds r1, #0x45
+	movs r0, #0x10
+	strb r0, [r1]
+	adds r0, r7, #0
+	adds r0, #0x46
+	strb r4, [r0]
+	ldr r0, _0801102C @ =0x0000FFE0
+	ldrh r3, [r7, #0x3c]
+	ands r0, r3
+	movs r1, #4
+	orrs r0, r1
+	ldr r1, _08011030 @ =0x0000E0FF
+	ands r0, r1
+	movs r3, #0xc0
+	lsls r3, r3, #5
+	adds r1, r3, #0
+	orrs r0, r1
+	strh r0, [r7, #0x3c]
+	movs r0, #0x20
+	ldrb r1, [r2]
+	orrs r1, r0
+	strb r1, [r2]
+	adds r1, r7, #0
+	adds r1, #0x3d
+	ldrb r2, [r1]
+	orrs r0, r2
+	strb r0, [r1]
+	movs r0, #2
+	movs r1, #0
+	movs r2, #0
+	bl sub_08001D64
+	movs r1, #4
+	rsbs r1, r1, #0
+	adds r0, r1, #0
+	ldrb r3, [r7, #0xc]
+	ands r0, r3
+	strb r0, [r7, #0xc]
+	adds r0, r1, #0
+	ldrb r2, [r7, #0x10]
+	ands r0, r2
+	orrs r0, r6
+	strb r0, [r7, #0x10]
+	ldrb r3, [r7, #0x14]
+	ands r1, r3
+	strb r1, [r7, #0x14]
+	movs r0, #3
+	ldrb r1, [r7, #0x18]
+	orrs r0, r1
+	strb r0, [r7, #0x18]
+	movs r0, #6
+	str r0, [r5, #0x44]
+	str r4, [r5, #0x30]
+	ldr r0, _08011034 @ =0x08BFFF78
+	bl sub_08004584
+	str r0, [r5, #0x40]
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08011028: .4byte 0x03002790
+_0801102C: .4byte 0x0000FFE0
+_08011030: .4byte 0x0000E0FF
+_08011034: .4byte 0x08BFFF78
+
+	thumb_func_start sub_08011038
+sub_08011038: @ 0x08011038
+	push {r4, r5, lr}
+	sub sp, #4
+	adds r5, r0, #0
+	adds r0, #0x3c
+	ldrb r0, [r0]
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+	cmp r0, #0
+	beq _0801109C
+	ldr r4, _08011090 @ =0x08C00798
+	ldr r1, [r5, #0x2c]
+	lsls r0, r1, #1
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	adds r0, r0, r4
+	ldr r0, [r0]
+	ldr r1, _08011094 @ =0x06001000
+	bl sub_08013688
+	ldr r0, _08011098 @ =0x02023C60
+	ldr r2, [r5, #0x2c]
+	lsls r1, r2, #1
+	adds r1, r1, r2
+	lsls r1, r1, #2
+	adds r2, r4, #4
+	adds r1, r1, r2
+	ldr r1, [r1]
+	movs r2, #0x80
+	bl sub_080C0C28
+	ldr r1, [r5, #0x2c]
+	lsls r0, r1, #1
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	adds r4, #8
+	adds r0, r0, r4
+	ldr r0, [r0]
+	ldr r2, [r5, #0x44]
+	lsls r2, r2, #5
+	movs r1, #0
+	bl sub_0800105C
+	b _080110AE
+	.align 2, 0
+_08011090: .4byte 0x08C00798
+_08011094: .4byte 0x06001000
+_08011098: .4byte 0x02023C60
+_0801109C:
+	ldr r0, _080110DC @ =0x02023C60
+	movs r1, #0x80
+	lsls r1, r1, #5
+	ldr r3, [r5, #0x44]
+	ldr r2, [r5, #0x2c]
+	str r2, [sp]
+	movs r2, #0
+	bl sub_080B7980
+_080110AE:
+	movs r0, #4
+	bl sub_08000FD4
+	bl sub_08001034
+	ldr r2, _080110E0 @ =0x03002790
+	movs r0, #1
+	ldrb r1, [r2, #1]
+	orrs r0, r1
+	movs r1, #2
+	orrs r0, r1
+	movs r1, #4
+	orrs r0, r1
+	movs r1, #8
+	orrs r0, r1
+	movs r1, #0x10
+	orrs r0, r1
+	strb r0, [r2, #1]
+	add sp, #4
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080110DC: .4byte 0x02023C60
+_080110E0: .4byte 0x03002790
+
+	thumb_func_start sub_080110E4
+sub_080110E4: @ 0x080110E4
+	push {r4, lr}
+	adds r4, r0, #0
+	ldr r2, [r4, #0x30]
+	ldr r0, [r4, #0x38]
+	adds r2, r2, r0
+	str r2, [r4, #0x30]
+	asrs r2, r2, #4
+	ldr r0, _0801112C @ =0x03002790
+	mov ip, r0
+	mov r3, ip
+	adds r3, #0x3c
+	movs r0, #0x3f
+	ldrb r1, [r3]
+	ands r0, r1
+	movs r1, #0x40
+	orrs r0, r1
+	strb r0, [r3]
+	mov r0, ip
+	adds r0, #0x44
+	movs r1, #0
+	strb r2, [r0]
+	movs r0, #0x10
+	subs r0, r0, r2
+	adds r3, #9
+	strb r0, [r3]
+	mov r0, ip
+	adds r0, #0x46
+	strb r1, [r0]
+	cmp r2, #0x10
+	bne _08011126
+	adds r0, r4, #0
+	bl sub_0800457C
+_08011126:
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_0801112C: .4byte 0x03002790
+
+	thumb_func_start sub_08011130
+sub_08011130: @ 0x08011130
+	push {r4, r5, lr}
+	adds r4, r0, #0
+	bl sub_0802D874
+	bl sub_0806D51C
+	movs r0, #3
+	movs r1, #0
+	movs r2, #0
+	bl sub_08001D64
+	ldr r0, _08011190 @ =0x06001000
+	ldr r1, _08011194 @ =0x06008000
+	movs r2, #0xa0
+	lsls r2, r2, #5
+	bl CpuFastSet
+	ldr r0, _08011198 @ =0x02022860
+	movs r2, #0x80
+	lsls r2, r2, #1
+	adds r1, r0, r2
+	ldr r2, [r4, #0x44]
+	lsls r2, r2, #3
+	ldr r3, _0801119C @ =0x001FFFFF
+	ands r2, r3
+	bl CpuFastSet
+	movs r5, #0xff
+	lsls r5, r5, #7
+	adds r4, r5, #0
+	ldr r3, _080111A0 @ =0x02023C60
+	ldr r2, _080111A4 @ =0x02024460
+	movs r1, #0x80
+	lsls r1, r1, #3
+_08011174:
+	ldrh r5, [r3]
+	adds r0, r4, r5
+	strh r0, [r2]
+	adds r3, #2
+	adds r2, #2
+	subs r1, #1
+	cmp r1, #0
+	bne _08011174
+	movs r0, #8
+	bl sub_08000FD4
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08011190: .4byte 0x06001000
+_08011194: .4byte 0x06008000
+_08011198: .4byte 0x02022860
+_0801119C: .4byte 0x001FFFFF
+_080111A0: .4byte 0x02023C60
+_080111A4: .4byte 0x02024460
+
+	thumb_func_start sub_080111A8
+sub_080111A8: @ 0x080111A8
+	push {lr}
+	ldr r0, _080111E0 @ =0x02023C60
+	movs r1, #0
+	bl sub_080017E8
+	movs r0, #4
+	bl sub_08000FD4
+	ldr r3, _080111E4 @ =0x03002790
+	adds r1, r3, #0
+	adds r1, #0x3c
+	movs r0, #0x3f
+	ldrb r2, [r1]
+	ands r0, r2
+	strb r0, [r1]
+	adds r1, #8
+	movs r2, #0
+	movs r0, #0x10
+	strb r0, [r1]
+	adds r0, r3, #0
+	adds r0, #0x45
+	strb r2, [r0]
+	adds r0, #1
+	strb r2, [r0]
+	bl sub_08015998
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080111E0: .4byte 0x02023C60
+_080111E4: .4byte 0x03002790
+
+	thumb_func_start sub_080111E8
+sub_080111E8: @ 0x080111E8
+	push {r4, r5, r6, lr}
+	adds r6, r0, #0
+	adds r4, r1, #0
+	adds r5, r2, #0
+	adds r1, r3, #0
+	lsls r4, r4, #0x18
+	lsrs r4, r4, #0x18
+	ldr r0, _08011210 @ =0x08C011CC
+	bl sub_080043D4
+	str r5, [r0, #0x2c]
+	str r6, [r0, #0x34]
+	movs r1, #0xff
+	ands r1, r6
+	str r1, [r0, #0x38]
+	adds r0, #0x3c
+	strb r4, [r0]
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08011210: .4byte 0x08C011CC
+
+	thumb_func_start sub_08011214
+sub_08011214: @ 0x08011214
+	push {r4, lr}
+	adds r3, r0, #0
+	ldr r0, [r3, #0x30]
+	ldr r2, [r0, #4]
+	ldr r4, [r0, #8]
+	adds r1, r3, #0
+	adds r1, #0x5e
+	movs r0, #4
+	ldrh r1, [r1]
+	ands r0, r1
+	cmp r0, #0
+	bne _0801123E
+	adds r0, r3, #0
+	adds r0, #0x4c
+	strb r2, [r0]
+	adds r0, r4, #0
+	movs r1, #1
+	bl sub_08010F48
+	movs r0, #2
+	b _08011240
+_0801123E:
+	movs r0, #0
+_08011240:
+	pop {r4}
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_08011248
+sub_08011248: @ 0x08011248
+	push {r4, r5, r6, lr}
+	adds r3, r0, #0
+	ldr r0, [r3, #0x30]
+	ldr r6, [r0, #4]
+	ldr r4, [r0, #8]
+	adds r1, r3, #0
+	adds r1, #0x5e
+	movs r0, #4
+	ldrh r1, [r1]
+	ands r0, r1
+	cmp r0, #0
+	beq _08011264
+	movs r0, #0
+	b _08011292
+_08011264:
+	adds r0, r3, #0
+	adds r0, #0x4c
+	movs r2, #0
+	ldrsb r2, [r0, r2]
+	movs r1, #1
+	rsbs r1, r1, #0
+	adds r5, r0, #0
+	cmp r2, r1
+	bne _08011282
+	adds r0, r4, #0
+	movs r1, #0
+	adds r2, r6, #0
+	bl sub_080111E8
+	b _0801128C
+_08011282:
+	adds r0, r4, #0
+	movs r1, #0
+	adds r2, r6, #0
+	bl sub_08010F48
+_0801128C:
+	movs r0, #0x61
+	strb r0, [r5]
+	movs r0, #2
+_08011292:
+	pop {r4, r5, r6}
+	pop {r1}
+	bx r1
+
+	thumb_func_start sub_08011298
+sub_08011298: @ 0x08011298
+	push {r4, r5, r6, r7, lr}
+	adds r5, r0, #0
+	ldr r7, _0801134C @ =0x03002790
+	movs r6, #1
+	ldrb r0, [r7, #1]
+	orrs r0, r6
+	movs r1, #2
+	orrs r0, r1
+	movs r1, #5
+	rsbs r1, r1, #0
+	ands r0, r1
+	movs r1, #8
+	orrs r0, r1
+	movs r1, #0x10
+	orrs r0, r1
+	strb r0, [r7, #1]
+	adds r2, r7, #0
+	adds r2, #0x3c
+	movs r0, #0x3f
+	ldrb r1, [r2]
+	ands r0, r1
+	movs r1, #0x40
+	orrs r0, r1
+	strb r0, [r2]
+	adds r0, r7, #0
+	adds r0, #0x44
+	movs r4, #0
+	strb r4, [r0]
+	adds r1, r7, #0
+	adds r1, #0x45
+	movs r0, #0x10
+	strb r0, [r1]
+	adds r0, r7, #0
+	adds r0, #0x46
+	strb r4, [r0]
+	ldr r0, _08011350 @ =0x0000FFE0
+	ldrh r3, [r7, #0x3c]
+	ands r0, r3
+	movs r1, #4
+	orrs r0, r1
+	ldr r1, _08011354 @ =0x0000E0FF
+	ands r0, r1
+	movs r3, #0xc0
+	lsls r3, r3, #5
+	adds r1, r3, #0
+	orrs r0, r1
+	strh r0, [r7, #0x3c]
+	movs r0, #0x20
+	ldrb r1, [r2]
+	orrs r1, r0
+	strb r1, [r2]
+	adds r1, r7, #0
+	adds r1, #0x3d
+	ldrb r2, [r1]
+	orrs r0, r2
+	strb r0, [r1]
+	movs r0, #2
+	movs r1, #0
+	movs r2, #0
+	bl sub_08001D64
+	movs r1, #4
+	rsbs r1, r1, #0
+	adds r0, r1, #0
+	ldrb r3, [r7, #0xc]
+	ands r0, r3
+	strb r0, [r7, #0xc]
+	adds r0, r1, #0
+	ldrb r2, [r7, #0x10]
+	ands r0, r2
+	orrs r0, r6
+	strb r0, [r7, #0x10]
+	ldrb r3, [r7, #0x14]
+	ands r1, r3
+	strb r1, [r7, #0x14]
+	movs r0, #3
+	ldrb r1, [r7, #0x18]
+	orrs r0, r1
+	strb r0, [r7, #0x18]
+	movs r0, #6
+	str r0, [r5, #0x44]
+	str r4, [r5, #0x30]
+	ldr r0, _08011358 @ =0x08BFFF78
+	bl sub_08004584
+	str r0, [r5, #0x40]
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_0801134C: .4byte 0x03002790
+_08011350: .4byte 0x0000FFE0
+_08011354: .4byte 0x0000E0FF
+_08011358: .4byte 0x08BFFF78
+
+	thumb_func_start sub_0801135C
+sub_0801135C: @ 0x0801135C
+	push {r4, r5, lr}
+	adds r4, r0, #0
+	ldr r0, _080113E8 @ =0x06008000
+	ldr r1, _080113EC @ =0x06001000
+	movs r2, #0xa0
+	lsls r2, r2, #5
+	bl CpuFastSet
+	ldr r0, _080113F0 @ =0x02022960
+	ldr r2, _080113F4 @ =0xFFFFFF00
+	adds r1, r0, r2
+	ldr r2, [r4, #0x44]
+	lsls r2, r2, #3
+	ldr r3, _080113F8 @ =0x001FFFFF
+	ands r2, r3
+	bl CpuFastSet
+	ldr r5, _080113FC @ =0x00008080
+	adds r3, r5, #0
+	ldr r2, _08011400 @ =0x02024460
+	ldr r1, _08011404 @ =0x02023C60
+	movs r4, #0x80
+	lsls r4, r4, #3
+_0801138A:
+	ldrh r5, [r2]
+	adds r0, r3, r5
+	strh r0, [r1]
+	adds r2, #2
+	adds r1, #2
+	subs r4, #1
+	cmp r4, #0
+	bne _0801138A
+	movs r0, #4
+	bl sub_08000FD4
+	bl sub_08001034
+	ldr r3, _08011408 @ =0x03002790
+	movs r0, #1
+	ldrb r1, [r3, #1]
+	orrs r0, r1
+	movs r1, #2
+	orrs r0, r1
+	movs r1, #4
+	orrs r0, r1
+	movs r1, #8
+	orrs r0, r1
+	movs r1, #0x10
+	orrs r0, r1
+	strb r0, [r3, #1]
+	adds r2, r3, #0
+	adds r2, #0x3c
+	movs r0, #0x3f
+	ldrb r5, [r2]
+	ands r0, r5
+	movs r1, #0x40
+	orrs r0, r1
+	strb r0, [r2]
+	adds r1, r3, #0
+	adds r1, #0x44
+	movs r0, #0x10
+	strb r0, [r1]
+	adds r0, r3, #0
+	adds r0, #0x45
+	strb r4, [r0]
+	adds r0, #1
+	strb r4, [r0]
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080113E8: .4byte 0x06008000
+_080113EC: .4byte 0x06001000
+_080113F0: .4byte 0x02022960
+_080113F4: .4byte 0xFFFFFF00
+_080113F8: .4byte 0x001FFFFF
+_080113FC: .4byte 0x00008080
+_08011400: .4byte 0x02024460
+_08011404: .4byte 0x02023C60
+_08011408: .4byte 0x03002790
+
+	thumb_func_start sub_0801140C
+sub_0801140C: @ 0x0801140C
+	push {r4, r5, lr}
+	adds r5, r0, #0
+	ldr r4, _08011454 @ =gPlaySt
+	movs r0, #0xe
+	ldrsb r0, [r4, r0]
+	bl sub_080195BC
+	ldrb r0, [r4, #0x15]
+	bl sub_0802D8E4
+	bl sub_080198EC
+	bl sub_08025BB0
+	bl sub_08025124
+	ldr r0, [r5, #0x34]
+	movs r1, #0x80
+	lsls r1, r1, #2
+	ands r0, r1
+	cmp r0, #0
+	beq _0801143C
+	bl sub_0802516C
+_0801143C:
+	bl sub_08025A0C
+	bl sub_0802D8A8
+	bl sub_0806D52C
+	movs r0, #8
+	bl sub_08000FD4
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08011454: .4byte gPlaySt
+
+	thumb_func_start sub_08011458
+sub_08011458: @ 0x08011458
+	push {r4, lr}
+	adds r4, r0, #0
+	ldr r2, [r4, #0x30]
+	ldr r0, [r4, #0x38]
+	adds r2, r2, r0
+	str r2, [r4, #0x30]
+	asrs r2, r2, #4
+	ldr r0, _080114A0 @ =0x03002790
+	mov ip, r0
+	mov r3, ip
+	adds r3, #0x3c
+	movs r0, #0x3f
+	ldrb r1, [r3]
+	ands r0, r1
+	movs r1, #0x40
+	orrs r0, r1
+	strb r0, [r3]
+	movs r0, #0x10
+	subs r0, r0, r2
+	mov r1, ip
+	adds r1, #0x44
+	movs r3, #0
+	strb r0, [r1]
+	mov r0, ip
+	adds r0, #0x45
+	strb r2, [r0]
+	adds r0, #1
+	strb r3, [r0]
+	cmp r2, #0x10
+	bne _0801149A
+	adds r0, r4, #0
+	bl sub_0800457C
+_0801149A:
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080114A0: .4byte 0x03002790
+
+	thumb_func_start sub_080114A4
+sub_080114A4: @ 0x080114A4
+	push {lr}
+	ldr r0, _080114E4 @ =0x02023C60
+	movs r1, #0
+	bl sub_080017E8
+	movs r0, #4
+	bl sub_08000FD4
+	ldr r3, _080114E8 @ =0x03002790
+	adds r1, r3, #0
+	adds r1, #0x3c
+	movs r0, #0x3f
+	ldrb r2, [r1]
+	ands r0, r2
+	strb r0, [r1]
+	adds r1, #8
+	movs r2, #0
+	movs r0, #0x10
+	strb r0, [r1]
+	adds r0, r3, #0
+	adds r0, #0x45
+	strb r2, [r0]
+	adds r0, #1
+	strb r2, [r0]
+	bl sub_08015998
+	bl sub_08015A48
+	bl sub_08005904
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080114E4: .4byte 0x02023C60
+_080114E8: .4byte 0x03002790
+
+	thumb_func_start sub_080114EC
+sub_080114EC: @ 0x080114EC
+	push {r4, lr}
+	adds r4, r0, #0
+	ldr r0, _08011504 @ =0x08C01224
+	bl sub_080043D4
+	str r4, [r0, #0x34]
+	movs r1, #0xff
+	ands r1, r4
+	str r1, [r0, #0x38]
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08011504: .4byte 0x08C01224
+
+	thumb_func_start sub_08011508
+sub_08011508: @ 0x08011508
+	push {r4, r5, r6, lr}
+	adds r5, r0, #0
+	ldr r0, [r5, #0x30]
+	ldr r2, [r0, #4]
+	adds r1, r5, #0
+	adds r1, #0x5e
+	movs r0, #4
+	ldrh r1, [r1]
+	ands r0, r1
+	lsls r0, r0, #0x10
+	lsrs r6, r0, #0x10
+	cmp r6, #0
+	beq _08011548
+	adds r4, r5, #0
+	adds r4, #0x4c
+	ldrb r2, [r4]
+	movs r1, #0
+	ldrsb r1, [r4, r1]
+	movs r0, #1
+	rsbs r0, r0, #0
+	cmp r1, r0
+	beq _08011544
+	movs r0, #0xff
+	strb r0, [r4]
+	bl sub_0802E834
+	bl sub_0802D8A8
+	bl sub_0806D52C
+_08011544:
+	movs r0, #0
+	b _08011560
+_08011548:
+	adds r4, r5, #0
+	adds r4, #0x4c
+	adds r0, r2, #0
+	adds r1, r5, #0
+	bl sub_080114EC
+	movs r0, #0xff
+	strb r0, [r4]
+	adds r0, r5, #0
+	adds r0, #0x4d
+	strb r6, [r0]
+	movs r0, #2
+_08011560:
+	pop {r4, r5, r6}
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_08011568
+sub_08011568: @ 0x08011568
+	push {r4, r5, r6, lr}
+	sub sp, #8
+	adds r6, r0, #0
+	ldr r3, _08011604 @ =0x03002790
+	adds r2, r3, #0
+	adds r2, #0x3c
+	movs r0, #0x3f
+	ldrb r1, [r2]
+	ands r0, r1
+	movs r1, #0x40
+	orrs r0, r1
+	strb r0, [r2]
+	adds r0, r3, #0
+	adds r0, #0x44
+	movs r5, #0
+	strb r5, [r0]
+	adds r1, r3, #0
+	adds r1, #0x45
+	movs r0, #0x10
+	strb r0, [r1]
+	adds r0, r3, #0
+	adds r0, #0x46
+	strb r5, [r0]
+	ldr r0, _08011608 @ =0x0000FFE0
+	ldrh r2, [r3, #0x3c]
+	ands r0, r2
+	movs r1, #4
+	orrs r0, r1
+	ldr r1, _0801160C @ =0x0000E0FF
+	ands r0, r1
+	movs r2, #0xc0
+	lsls r2, r2, #5
+	adds r1, r2, #0
+	orrs r0, r1
+	strh r0, [r3, #0x3c]
+	ldr r0, _08011610 @ =0x08198D98
+	ldr r1, _08011614 @ =0x06001000
+	bl sub_08013688
+	ldr r4, _08011618 @ =0x08199250
+	movs r1, #0xf0
+	lsls r1, r1, #1
+	adds r0, r4, #0
+	movs r2, #0x20
+	bl sub_0800105C
+	ldr r0, _0801161C @ =0x02023C60
+	ldr r1, _08011620 @ =0x08199290
+	ldr r2, _08011624 @ =0x0000F080
+	bl sub_080C0C28
+	movs r0, #4
+	bl sub_08000FD4
+	adds r1, r4, #0
+	adds r1, #0x20
+	movs r0, #1
+	str r0, [sp]
+	str r6, [sp, #4]
+	adds r0, r4, #0
+	movs r2, #0x20
+	movs r3, #0xf
+	bl sub_080AB7F4
+	str r5, [r6, #0x30]
+	movs r0, #0x20
+	str r0, [r6, #0x34]
+	str r5, [r6, #0x3c]
+	str r5, [r6, #0x40]
+	movs r0, #2
+	movs r1, #0
+	movs r2, #0
+	bl sub_08001D64
+	add sp, #8
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08011604: .4byte 0x03002790
+_08011608: .4byte 0x0000FFE0
+_0801160C: .4byte 0x0000E0FF
+_08011610: .4byte 0x08198D98
+_08011614: .4byte 0x06001000
+_08011618: .4byte 0x08199250
+_0801161C: .4byte 0x02023C60
+_08011620: .4byte 0x08199290
+_08011624: .4byte 0x0000F080
+
+	thumb_func_start sub_08011628
+sub_08011628: @ 0x08011628
+	push {r4, r5, lr}
+	adds r4, r0, #0
+	ldr r0, [r4, #0x30]
+	adds r0, #1
+	str r0, [r4, #0x30]
+	asrs r5, r0, #1
+	ldr r3, _080116A4 @ =0x03002790
+	adds r2, r3, #0
+	adds r2, #0x3c
+	movs r0, #0x3f
+	ldrb r1, [r2]
+	ands r0, r1
+	movs r1, #0x40
+	orrs r0, r1
+	strb r0, [r2]
+	adds r0, r3, #0
+	adds r0, #0x44
+	movs r2, #0
+	strb r5, [r0]
+	movs r0, #0x10
+	subs r0, r0, r5
+	cmp r0, #0xd
+	bge _08011658
+	movs r0, #0xd
+_08011658:
+	adds r1, r3, #0
+	adds r1, #0x45
+	strb r0, [r1]
+	adds r0, r3, #0
+	adds r0, #0x46
+	strb r2, [r0]
+	cmp r5, #0x10
+	bne _08011670
+	str r2, [r4, #0x30]
+	adds r0, r4, #0
+	bl sub_0800457C
+_08011670:
+	ldr r3, [r4, #0x34]
+	adds r3, #1
+	str r3, [r4, #0x34]
+	lsls r0, r3, #1
+	adds r0, r0, r3
+	ldr r1, [r4, #0x3c]
+	adds r1, r1, r0
+	str r1, [r4, #0x3c]
+	ldr r2, [r4, #0x40]
+	adds r2, r2, r3
+	str r2, [r4, #0x40]
+	asrs r1, r1, #5
+	rsbs r1, r1, #0
+	lsls r1, r1, #0x10
+	lsrs r1, r1, #0x10
+	asrs r2, r2, #5
+	rsbs r2, r2, #0
+	lsls r2, r2, #0x10
+	lsrs r2, r2, #0x10
+	movs r0, #2
+	bl sub_08001D64
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080116A4: .4byte 0x03002790
+
+	thumb_func_start sub_080116A8
+sub_080116A8: @ 0x080116A8
+	push {r4, lr}
+	adds r4, r0, #0
+	ldr r0, [r4, #0x30]
+	adds r0, #1
+	str r0, [r4, #0x30]
+	ldr r1, [r4, #0x2c]
+	cmp r0, r1
+	blt _080116C2
+	movs r0, #0
+	str r0, [r4, #0x30]
+	adds r0, r4, #0
+	bl sub_0800457C
+_080116C2:
+	ldr r3, [r4, #0x34]
+	lsls r0, r3, #1
+	adds r0, r0, r3
+	ldr r1, [r4, #0x3c]
+	adds r1, r1, r0
+	str r1, [r4, #0x3c]
+	ldr r2, [r4, #0x40]
+	adds r2, r2, r3
+	str r2, [r4, #0x40]
+	asrs r1, r1, #5
+	rsbs r1, r1, #0
+	lsls r1, r1, #0x10
+	lsrs r1, r1, #0x10
+	asrs r2, r2, #5
+	rsbs r2, r2, #0
+	lsls r2, r2, #0x10
+	lsrs r2, r2, #0x10
+	movs r0, #2
+	bl sub_08001D64
+	pop {r4}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_080116F0
+sub_080116F0: @ 0x080116F0
+	push {r4, r5, lr}
+	adds r4, r0, #0
+	ldr r0, [r4, #0x30]
+	adds r0, #1
+	str r0, [r4, #0x30]
+	asrs r5, r0, #3
+	ldr r3, _08011768 @ =0x03002790
+	adds r2, r3, #0
+	adds r2, #0x3c
+	movs r0, #0x3f
+	ldrb r1, [r2]
+	ands r0, r1
+	movs r1, #0x40
+	orrs r0, r1
+	strb r0, [r2]
+	movs r0, #0x10
+	subs r0, r0, r5
+	adds r1, r3, #0
+	adds r1, #0x44
+	strb r0, [r1]
+	adds r0, r5, #0
+	adds r0, #0xd
+	cmp r0, #0x10
+	ble _08011722
+	movs r0, #0x10
+_08011722:
+	adds r1, r3, #0
+	adds r1, #0x45
+	strb r0, [r1]
+	adds r1, #1
+	movs r0, #0
+	strb r0, [r1]
+	ldr r3, [r4, #0x34]
+	lsls r0, r3, #1
+	adds r0, r0, r3
+	ldr r1, [r4, #0x3c]
+	adds r1, r1, r0
+	str r1, [r4, #0x3c]
+	ldr r2, [r4, #0x40]
+	adds r2, r2, r3
+	str r2, [r4, #0x40]
+	asrs r1, r1, #5
+	rsbs r1, r1, #0
+	lsls r1, r1, #0x10
+	lsrs r1, r1, #0x10
+	asrs r2, r2, #5
+	rsbs r2, r2, #0
+	lsls r2, r2, #0x10
+	lsrs r2, r2, #0x10
+	movs r0, #2
+	bl sub_08001D64
+	cmp r5, #0x10
+	bne _08011760
+	adds r0, r4, #0
+	bl sub_0800457C
+_08011760:
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08011768: .4byte 0x03002790
+
+	thumb_func_start sub_0801176C
+sub_0801176C: @ 0x0801176C
+	push {lr}
+	ldr r0, _080117A4 @ =0x02023C60
+	movs r1, #0
+	bl sub_080017E8
+	movs r0, #4
+	bl sub_08000FD4
+	ldr r2, _080117A8 @ =0x03002790
+	adds r1, r2, #0
+	adds r1, #0x3c
+	movs r0, #0x3f
+	ldrb r3, [r1]
+	ands r0, r3
+	strb r0, [r1]
+	adds r0, r2, #0
+	adds r0, #0x44
+	movs r1, #0
+	strb r1, [r0]
+	adds r3, r2, #0
+	adds r3, #0x45
+	movs r0, #0x10
+	strb r0, [r3]
+	adds r0, r2, #0
+	adds r0, #0x46
+	strb r1, [r0]
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080117A4: .4byte 0x02023C60
+_080117A8: .4byte 0x03002790
+
+	thumb_func_start sub_080117AC
+sub_080117AC: @ 0x080117AC
+	push {r4, lr}
+	adds r1, r0, #0
+	ldr r0, [r1, #0x30]
+	ldr r4, [r0, #4]
+	adds r2, r1, #0
+	adds r2, #0x5e
+	movs r0, #4
+	ldrh r2, [r2]
+	ands r0, r2
+	cmp r0, #0
+	bne _080117D4
+	ldr r0, _080117D0 @ =0x08C0127C
+	bl sub_080043D4
+	str r4, [r0, #0x2c]
+	movs r0, #2
+	b _080117D6
+	.align 2, 0
+_080117D0: .4byte 0x08C0127C
+_080117D4:
+	movs r0, #0
+_080117D6:
+	pop {r4}
+	pop {r1}
+	bx r1
+
+	thumb_func_start sub_080117DC
+sub_080117DC: @ 0x080117DC
+	push {r4, r5, r6, lr}
+	sub sp, #0x14
+	adds r5, r0, #0
+	ldr r6, _08011894 @ =0x03002790
+	adds r2, r6, #0
+	adds r2, #0x3c
+	movs r0, #0x3f
+	ldrb r1, [r2]
+	ands r0, r1
+	movs r1, #0x40
+	orrs r0, r1
+	strb r0, [r2]
+	adds r0, r6, #0
+	adds r0, #0x44
+	movs r4, #0
+	strb r4, [r0]
+	adds r1, r6, #0
+	adds r1, #0x45
+	movs r0, #0x10
+	strb r0, [r1]
+	adds r0, r6, #0
+	adds r0, #0x46
+	strb r4, [r0]
+	ldr r0, _08011898 @ =0x0000FFE0
+	ldrh r2, [r6, #0x3c]
+	ands r0, r2
+	movs r1, #4
+	orrs r0, r1
+	ldr r1, _0801189C @ =0x0000E0FF
+	ands r0, r1
+	movs r2, #0xf8
+	lsls r2, r2, #5
+	adds r1, r2, #0
+	orrs r0, r1
+	strh r0, [r6, #0x3c]
+	bl sub_0807702C
+	movs r0, #0
+	movs r1, #0
+	bl sub_080780E0
+	movs r0, #0
+	bl sub_08002DF0
+	ldr r0, _080118A0 @ =sub_08078098
+	bl sub_08002DF0
+	movs r1, #4
+	rsbs r1, r1, #0
+	adds r0, r1, #0
+	ldrb r2, [r6, #0xc]
+	ands r0, r2
+	strb r0, [r6, #0xc]
+	adds r0, r1, #0
+	ldrb r2, [r6, #0x10]
+	ands r0, r2
+	movs r2, #1
+	orrs r0, r2
+	strb r0, [r6, #0x10]
+	ldrb r0, [r6, #0x14]
+	ands r1, r0
+	orrs r1, r2
+	strb r1, [r6, #0x14]
+	movs r0, #3
+	ldrb r1, [r6, #0x18]
+	orrs r0, r1
+	strb r0, [r6, #0x18]
+	movs r0, #7
+	bl sub_08000FD4
+	str r4, [r5, #0x30]
+	ldr r0, _080118A4 @ =0x08DBA258
+	movs r1, #0x80
+	lsls r1, r1, #5
+	str r1, [sp]
+	movs r1, #0xa0
+	lsls r1, r1, #6
+	str r1, [sp, #4]
+	movs r1, #0xe
+	str r1, [sp, #8]
+	str r4, [sp, #0xc]
+	str r5, [sp, #0x10]
+	movs r1, #2
+	movs r2, #0
+	movs r3, #0
+	bl sub_080AB654
+	add sp, #0x14
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08011894: .4byte 0x03002790
+_08011898: .4byte 0x0000FFE0
+_0801189C: .4byte 0x0000E0FF
+_080118A0: .4byte sub_08078098
+_080118A4: .4byte 0x08DBA258
+
+	thumb_func_start sub_080118A8
+sub_080118A8: @ 0x080118A8
+	push {r4, r5, lr}
+	adds r5, r0, #0
+	ldr r0, [r5, #0x30]
+	adds r0, #1
+	str r0, [r5, #0x30]
+	asrs r4, r0, #1
+	ldr r2, _080118D8 @ =0x03002790
+	adds r3, r2, #0
+	adds r3, #0x3c
+	movs r0, #0x3f
+	ldrb r1, [r3]
+	ands r0, r1
+	movs r1, #0x40
+	orrs r0, r1
+	strb r0, [r3]
+	adds r0, r2, #0
+	adds r0, #0x44
+	strb r4, [r0]
+	adds r3, r2, #0
+	cmp r4, #6
+	bgt _080118DC
+	movs r0, #0x10
+	subs r1, r0, r4
+	b _080118DE
+	.align 2, 0
+_080118D8: .4byte 0x03002790
+_080118DC:
+	movs r1, #0xa
+_080118DE:
+	adds r0, r3, #0
+	adds r0, #0x45
+	movs r3, #0
+	strb r1, [r0]
+	adds r0, r2, #0
+	adds r0, #0x46
+	strb r3, [r0]
+	cmp r4, #0x10
+	bne _080118F8
+	str r3, [r5, #0x30]
+	adds r0, r5, #0
+	bl sub_0800457C
+_080118F8:
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08011900
+sub_08011900: @ 0x08011900
+	push {r4, r5, lr}
+	adds r5, r0, #0
+	ldr r0, [r5, #0x30]
+	adds r0, #1
+	str r0, [r5, #0x30]
+	asrs r4, r0, #1
+	ldr r3, _08011950 @ =0x03002790
+	adds r2, r3, #0
+	adds r2, #0x3c
+	movs r0, #0x3f
+	ldrb r1, [r2]
+	ands r0, r1
+	movs r1, #0x40
+	orrs r0, r1
+	strb r0, [r2]
+	movs r0, #0x10
+	subs r0, r0, r4
+	adds r1, r3, #0
+	adds r1, #0x44
+	strb r0, [r1]
+	adds r0, r4, #0
+	adds r0, #0xa
+	cmp r0, #0x10
+	ble _08011932
+	movs r0, #0x10
+_08011932:
+	adds r1, r3, #0
+	adds r1, #0x45
+	strb r0, [r1]
+	adds r1, #1
+	movs r0, #0
+	strb r0, [r1]
+	cmp r4, #0x10
+	bne _08011948
+	adds r0, r5, #0
+	bl sub_0800457C
+_08011948:
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08011950: .4byte 0x03002790
+
+	thumb_func_start sub_08011954
+sub_08011954: @ 0x08011954
+	push {lr}
+	ldr r0, _080119BC @ =0x02023C60
+	movs r1, #0
+	bl sub_080017E8
+	movs r0, #4
+	bl sub_08000FD4
+	movs r0, #0
+	bl sub_08002DF0
+	ldr r3, _080119C0 @ =0x03002790
+	adds r1, r3, #0
+	adds r1, #0x3c
+	movs r0, #0x3f
+	ldrb r2, [r1]
+	ands r0, r2
+	strb r0, [r1]
+	adds r0, r3, #0
+	adds r0, #0x44
+	movs r1, #0
+	strb r1, [r0]
+	adds r2, r3, #0
+	adds r2, #0x45
+	movs r0, #0x10
+	strb r0, [r2]
+	adds r0, r3, #0
+	adds r0, #0x46
+	strb r1, [r0]
+	subs r1, #4
+	adds r0, r1, #0
+	ldrb r2, [r3, #0xc]
+	ands r0, r2
+	strb r0, [r3, #0xc]
+	adds r0, r1, #0
+	ldrb r2, [r3, #0x10]
+	ands r0, r2
+	movs r2, #1
+	orrs r0, r2
+	strb r0, [r3, #0x10]
+	ldrb r0, [r3, #0x14]
+	ands r1, r0
+	movs r0, #2
+	orrs r1, r0
+	strb r1, [r3, #0x14]
+	movs r0, #3
+	ldrb r1, [r3, #0x18]
+	orrs r0, r1
+	strb r0, [r3, #0x18]
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080119BC: .4byte 0x02023C60
+_080119C0: .4byte 0x03002790
+
+	thumb_func_start sub_080119C4
+sub_080119C4: @ 0x080119C4
+	push {lr}
+	adds r1, r0, #0
+	adds r2, r1, #0
+	adds r2, #0x5e
+	movs r0, #4
+	ldrh r2, [r2]
+	ands r0, r2
+	cmp r0, #0
+	bne _080119E4
+	ldr r0, _080119E0 @ =0x08C012BC
+	bl sub_080043D4
+	movs r0, #2
+	b _080119E6
+	.align 2, 0
+_080119E0: .4byte 0x08C012BC
+_080119E4:
+	movs r0, #0
+_080119E6:
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_080119EC
+sub_080119EC: @ 0x080119EC
+	push {lr}
+	adds r0, #0x5e
+	movs r1, #4
+	ldrh r0, [r0]
+	ands r1, r0
+	cmp r1, #0
+	bne _08011A10
+	ldr r0, _08011A0C @ =0x08C012BC
+	bl sub_08004584
+	movs r1, #0
+	bl sub_080045FC
+	movs r0, #2
+	b _08011A1C
+	.align 2, 0
+_08011A0C: .4byte 0x08C012BC
+_08011A10:
+	ldr r0, _08011A20 @ =0x08C012BC
+	bl sub_08004584
+	bl sub_08004460
+	movs r0, #0
+_08011A1C:
+	pop {r1}
+	bx r1
+	.align 2, 0
+_08011A20: .4byte 0x08C012BC
+
+	thumb_func_start sub_08011A24
+sub_08011A24: @ 0x08011A24
+	push {r4, r5, lr}
+	sub sp, #0x14
+	ldr r5, _08011AB8 @ =0x03002790
+	movs r2, #4
+	rsbs r2, r2, #0
+	adds r1, r2, #0
+	ldrb r3, [r5, #0xc]
+	ands r1, r3
+	strb r1, [r5, #0xc]
+	adds r1, r2, #0
+	ldrb r3, [r5, #0x10]
+	ands r1, r3
+	movs r3, #1
+	orrs r1, r3
+	strb r1, [r5, #0x10]
+	ldrb r1, [r5, #0x14]
+	ands r2, r1
+	strb r2, [r5, #0x14]
+	movs r1, #3
+	ldrb r2, [r5, #0x18]
+	orrs r1, r2
+	strb r1, [r5, #0x18]
+	adds r3, r5, #0
+	adds r3, #0x3c
+	movs r1, #0x3f
+	ldrb r2, [r3]
+	ands r1, r2
+	movs r2, #0x40
+	orrs r1, r2
+	strb r1, [r3]
+	adds r2, r5, #0
+	adds r2, #0x44
+	movs r4, #0
+	movs r1, #0x10
+	strb r1, [r2]
+	adds r2, #1
+	strb r1, [r2]
+	adds r1, r5, #0
+	adds r1, #0x46
+	strb r4, [r1]
+	ldr r1, _08011ABC @ =0x0000FFE0
+	ldrh r3, [r5, #0x3c]
+	ands r1, r3
+	movs r2, #4
+	orrs r1, r2
+	ldr r2, _08011AC0 @ =0x0000E0FF
+	ands r1, r2
+	movs r3, #0xc0
+	lsls r3, r3, #5
+	adds r2, r3, #0
+	orrs r1, r2
+	strh r1, [r5, #0x3c]
+	str r4, [r0, #0x30]
+	ldr r5, _08011AC4 @ =0x08C012FC
+	ldr r2, [r0, #0x3c]
+	adds r2, #0x54
+	ldr r3, [r0, #0x40]
+	str r4, [sp]
+	movs r1, #0x80
+	lsls r1, r1, #6
+	str r1, [sp, #4]
+	movs r1, #0xf
+	str r1, [sp, #8]
+	str r4, [sp, #0xc]
+	str r0, [sp, #0x10]
+	adds r0, r5, #0
+	movs r1, #2
+	bl sub_080AB654
+	add sp, #0x14
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08011AB8: .4byte 0x03002790
+_08011ABC: .4byte 0x0000FFE0
+_08011AC0: .4byte 0x0000E0FF
+_08011AC4: .4byte 0x08C012FC
+
+	thumb_func_start sub_08011AC8
+sub_08011AC8: @ 0x08011AC8
+	push {lr}
+	ldr r2, _08011AF8 @ =0x03002790
+	adds r1, r2, #0
+	adds r1, #0x3c
+	movs r0, #0x3f
+	ldrb r3, [r1]
+	ands r0, r3
+	strb r0, [r1]
+	adds r0, r2, #0
+	adds r0, #0x44
+	movs r1, #0
+	strb r1, [r0]
+	adds r3, r2, #0
+	adds r3, #0x45
+	movs r0, #0x10
+	strb r0, [r3]
+	adds r0, r2, #0
+	adds r0, #0x46
+	strb r1, [r0]
+	bl sub_08015998
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08011AF8: .4byte 0x03002790
+
+	thumb_func_start sub_08011AFC
+sub_08011AFC: @ 0x08011AFC
+	push {r4, r5, lr}
+	adds r1, r0, #0
+	ldr r0, [r1, #0x30]
+	ldr r4, [r0, #4]
+	ldr r5, [r0, #8]
+	adds r2, r1, #0
+	adds r2, #0x5e
+	movs r0, #4
+	ldrh r2, [r2]
+	ands r0, r2
+	cmp r0, #0
+	bne _08011B28
+	ldr r0, _08011B24 @ =0x08C013C8
+	bl sub_080043D4
+	str r4, [r0, #0x3c]
+	str r5, [r0, #0x40]
+	movs r0, #2
+	b _08011B2A
+	.align 2, 0
+_08011B24: .4byte 0x08C013C8
+_08011B28:
+	movs r0, #0
+_08011B2A:
+	pop {r4, r5}
+	pop {r1}
+	bx r1
+
+	thumb_func_start sub_08011B30
+sub_08011B30: @ 0x08011B30
+	push {lr}
+	ldr r0, _08011B40 @ =0x08C013C8
+	bl sub_08004584
+	cmp r0, #0
+	bne _08011B44
+	movs r0, #0
+	b _08011B46
+	.align 2, 0
+_08011B40: .4byte 0x08C013C8
+_08011B44:
+	movs r0, #1
+_08011B46:
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_08011B4C
+sub_08011B4C: @ 0x08011B4C
+	push {r4, lr}
+	movs r3, #0
+	str r3, [r0, #0x30]
+	ldr r0, _08011BC8 @ =0x03002790
+	mov ip, r0
+	movs r1, #4
+	rsbs r1, r1, #0
+	adds r0, r1, #0
+	mov r2, ip
+	ldrb r2, [r2, #0xc]
+	ands r0, r2
+	mov r4, ip
+	strb r0, [r4, #0xc]
+	adds r0, r1, #0
+	ldrb r2, [r4, #0x10]
+	ands r0, r2
+	movs r2, #1
+	orrs r0, r2
+	strb r0, [r4, #0x10]
+	ldrb r4, [r4, #0x14]
+	ands r1, r4
+	mov r0, ip
+	strb r1, [r0, #0x14]
+	movs r0, #3
+	mov r1, ip
+	ldrb r1, [r1, #0x18]
+	orrs r0, r1
+	mov r2, ip
+	strb r0, [r2, #0x18]
+	adds r2, #0x3c
+	movs r0, #0x3f
+	ldrb r4, [r2]
+	ands r0, r4
+	movs r1, #0x40
+	orrs r0, r1
+	strb r0, [r2]
+	mov r0, ip
+	adds r0, #0x44
+	movs r1, #0x10
+	strb r1, [r0]
+	adds r0, #1
+	strb r1, [r0]
+	adds r0, #1
+	strb r3, [r0]
+	ldr r0, _08011BCC @ =0x0000FFE0
+	mov r1, ip
+	ldrh r1, [r1, #0x3c]
+	ands r0, r1
+	movs r1, #4
+	orrs r0, r1
+	ldr r1, _08011BD0 @ =0x0000E0FF
+	ands r0, r1
+	movs r2, #0xc0
+	lsls r2, r2, #5
+	adds r1, r2, #0
+	orrs r0, r1
+	mov r4, ip
+	strh r0, [r4, #0x3c]
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08011BC8: .4byte 0x03002790
+_08011BCC: .4byte 0x0000FFE0
+_08011BD0: .4byte 0x0000E0FF
+
+	thumb_func_start sub_08011BD4
+sub_08011BD4: @ 0x08011BD4
+	push {r4, lr}
+	adds r4, r0, #0
+	ldr r0, [r4, #0x30]
+	adds r0, #1
+	str r0, [r4, #0x30]
+	movs r2, #0x80
+	lsls r2, r2, #1
+	subs r2, r2, r0
+	ldr r3, _08011C04 @ =0xFFFFBFFF
+	adds r0, r2, #0
+	adds r1, r2, #0
+	bl sub_08013C48
+	ldr r0, [r4, #0x30]
+	cmp r0, #0x40
+	bne _08011BFE
+	movs r0, #0
+	str r0, [r4, #0x30]
+	adds r0, r4, #0
+	bl sub_0800457C
+_08011BFE:
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08011C04: .4byte 0xFFFFBFFF
+
+	thumb_func_start sub_08011C08
+sub_08011C08: @ 0x08011C08
+	push {r4, lr}
+	adds r4, r0, #0
+	ldr r2, [r4, #0x30]
+	adds r0, r2, #1
+	str r0, [r4, #0x30]
+	adds r2, #0xc1
+	ldr r3, _08011C34 @ =0xFFFFBFFF
+	adds r0, r2, #0
+	adds r1, r2, #0
+	bl sub_08013C48
+	ldr r0, [r4, #0x30]
+	cmp r0, #0x40
+	bne _08011C2E
+	movs r0, #0
+	str r0, [r4, #0x30]
+	adds r0, r4, #0
+	bl sub_0800457C
+_08011C2E:
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08011C34: .4byte 0xFFFFBFFF
+
+	thumb_func_start sub_08011C38
+sub_08011C38: @ 0x08011C38
+	push {r4, lr}
+	adds r4, r0, #0
+	ldr r0, [r4, #0x30]
+	adds r0, #1
+	str r0, [r4, #0x30]
+	movs r1, #0xfa
+	lsls r1, r1, #2
+	cmp r0, r1
+	bne _08011C56
+	movs r0, #0
+	bl sub_080AB634
+	adds r0, r4, #0
+	bl sub_0800457C
+_08011C56:
+	pop {r4}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08011C5C
+sub_08011C5C: @ 0x08011C5C
+	push {r4, r5, r6, lr}
+	sub sp, #8
+	adds r6, r0, #0
+	ldr r0, _08011CA8 @ =0x081AC808
+	ldr r1, _08011CAC @ =0x06010800
+	bl sub_08013688
+	ldr r0, _08011CB0 @ =0x081ACA20
+	movs r1, #0xa8
+	lsls r1, r1, #2
+	movs r2, #0x20
+	bl sub_0800105C
+	movs r4, #0
+_08011C78:
+	movs r5, #0
+	str r5, [sp]
+	movs r0, #4
+	str r0, [sp, #4]
+	ldr r0, _08011CB4 @ =0x081ACA40
+	movs r1, #0xc0
+	lsls r1, r1, #1
+	movs r2, #0
+	ldr r3, _08011CB8 @ =0x00005040
+	bl sub_08012AF0
+	lsls r2, r4, #2
+	adds r1, r6, #0
+	adds r1, #0x44
+	adds r1, r1, r2
+	str r0, [r1]
+	adds r4, #1
+	cmp r4, #7
+	ble _08011C78
+	str r5, [r6, #0x30]
+	add sp, #8
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08011CA8: .4byte 0x081AC808
+_08011CAC: .4byte 0x06010800
+_08011CB0: .4byte 0x081ACA20
+_08011CB4: .4byte 0x081ACA40
+_08011CB8: .4byte 0x00005040
+
+	thumb_func_start sub_08011CBC
+sub_08011CBC: @ 0x08011CBC
+	push {r4, r5, r6, r7, lr}
+	mov r7, sl
+	mov r6, sb
+	mov r5, r8
+	push {r5, r6, r7}
+	sub sp, #0xc
+	adds r6, r0, #0
+	ldr r4, [r6, #0x30]
+	adds r4, #1
+	str r4, [r6, #0x30]
+	ldr r0, [r6, #0x3c]
+	lsls r0, r0, #4
+	ldr r2, _08011DC4 @ =0x0202BBB4
+	movs r3, #0xc
+	ldrsh r1, [r2, r3]
+	subs r0, r0, r1
+	adds r0, #8
+	str r0, [sp, #8]
+	ldr r0, _08011DC8 @ =0x000001FF
+	ldr r1, [sp, #8]
+	ands r1, r0
+	str r1, [sp, #8]
+	ldr r0, [r6, #0x40]
+	lsls r0, r0, #4
+	movs r3, #0xe
+	ldrsh r1, [r2, r3]
+	subs r0, r0, r1
+	adds r0, #8
+	mov sl, r0
+	movs r0, #0xff
+	mov r1, sl
+	ands r1, r0
+	mov sl, r1
+	movs r2, #0xa0
+	subs r4, r2, r4
+	lsls r0, r4, #4
+	subs r0, r0, r4
+	lsls r0, r0, #3
+	muls r0, r4, r0
+	movs r5, #0xc8
+	lsls r5, r5, #7
+	adds r1, r5, #0
+	bl __divsi3
+	adds r7, r0, #0
+	lsls r0, r4, #8
+	muls r0, r4, r0
+	adds r1, r5, #0
+	bl __divsi3
+	movs r1, #0x88
+	lsls r1, r1, #1
+	movs r5, #0
+	ldr r3, _08011DCC @ =0x080C0E98
+	mov sb, r3
+	movs r2, #0xff
+	mov r8, r2
+	subs r4, r1, r0
+_08011D30:
+	adds r2, r4, #0
+	mov r3, r8
+	ands r2, r3
+	adds r0, r2, #0
+	adds r0, #0x40
+	lsls r0, r0, #1
+	add r0, sb
+	movs r1, #0
+	ldrsh r0, [r0, r1]
+	muls r0, r7, r0
+	asrs r0, r0, #0xc
+	movs r1, #0x78
+	subs r1, r1, r0
+	lsls r2, r2, #1
+	add r2, sb
+	movs r3, #0
+	ldrsh r0, [r2, r3]
+	muls r0, r7, r0
+	asrs r0, r0, #0xc
+	movs r2, #0x50
+	subs r2, r2, r0
+	lsls r3, r5, #2
+	adds r0, r6, #0
+	adds r0, #0x44
+	adds r0, r0, r3
+	ldr r0, [r0]
+	ldr r3, _08011DC8 @ =0x000001FF
+	ands r1, r3
+	mov r3, r8
+	ands r2, r3
+	movs r3, #0x80
+	lsls r3, r3, #3
+	adds r2, r2, r3
+	movs r3, #1
+	rsbs r3, r3, #0
+	bl sub_08012B70
+	adds r4, #0x20
+	adds r5, #1
+	cmp r5, #7
+	ble _08011D30
+	movs r0, #0xa0
+	movs r1, #3
+	bl __divsi3
+	ldr r1, [r6, #0x30]
+	cmp r1, r0
+	bne _08011DA8
+	ldr r0, _08011DD0 @ =0x081ACA40
+	movs r2, #0x80
+	lsls r2, r2, #3
+	add r2, sl
+	ldr r3, _08011DD4 @ =0x00005040
+	movs r1, #1
+	str r1, [sp]
+	movs r1, #4
+	str r1, [sp, #4]
+	ldr r1, [sp, #8]
+	bl sub_08012AF0
+_08011DA8:
+	ldr r0, [r6, #0x30]
+	cmp r0, #0xa0
+	bne _08011DB4
+	adds r0, r6, #0
+	bl sub_0800457C
+_08011DB4:
+	add sp, #0xc
+	pop {r3, r4, r5}
+	mov r8, r3
+	mov sb, r4
+	mov sl, r5
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08011DC4: .4byte 0x0202BBB4
+_08011DC8: .4byte 0x000001FF
+_08011DCC: .4byte 0x080C0E98
+_08011DD0: .4byte 0x081ACA40
+_08011DD4: .4byte 0x00005040
+
+	thumb_func_start sub_08011DD8
+sub_08011DD8: @ 0x08011DD8
+	push {r4, r5, lr}
+	adds r5, r0, #0
+	adds r5, #0x44
+	movs r4, #7
+_08011DE0:
+	ldm r5!, {r0}
+	bl EndSpriteAnimProc
+	subs r4, #1
+	cmp r4, #0
+	bge _08011DE0
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08011DF4
+sub_08011DF4: @ 0x08011DF4
+	push {r4, r5, r6, lr}
+	sub sp, #0x14
+	adds r5, r0, #0
+	ldr r2, [r5, #0x3c]
+	lsls r2, r2, #4
+	ldr r4, _08011E40 @ =0x0202BBB4
+	movs r1, #0xc
+	ldrsh r0, [r4, r1]
+	subs r2, r2, r0
+	subs r2, #0x28
+	movs r1, #0xff
+	ands r2, r1
+	ldr r3, [r5, #0x40]
+	lsls r3, r3, #4
+	movs r6, #0xe
+	ldrsh r0, [r4, r6]
+	subs r3, r3, r0
+	subs r3, #0x28
+	ands r3, r1
+	ldr r0, _08011E44 @ =0x08C013F0
+	movs r4, #0
+	str r4, [sp]
+	movs r1, #0x80
+	lsls r1, r1, #6
+	str r1, [sp, #4]
+	movs r1, #0xf
+	str r1, [sp, #8]
+	str r4, [sp, #0xc]
+	str r5, [sp, #0x10]
+	movs r1, #2
+	bl sub_080AB654
+	str r4, [r5, #0x30]
+	add sp, #0x14
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08011E40: .4byte 0x0202BBB4
+_08011E44: .4byte 0x08C013F0
+
+	thumb_func_start sub_08011E48
+sub_08011E48: @ 0x08011E48
+	push {r4, r5, lr}
+	sub sp, #0x10
+	adds r4, r0, #0
+	ldr r0, [r4, #0x30]
+	adds r0, #1
+	str r0, [r4, #0x30]
+	movs r5, #0
+	cmp r0, #0x14
+	bne _08011E70
+	ldr r2, [r4, #0x3c]
+	ldr r3, [r4, #0x40]
+	str r2, [sp]
+	str r3, [sp, #4]
+	movs r0, #1
+	str r0, [sp, #8]
+	str r5, [sp, #0xc]
+	movs r0, #0xdc
+	movs r1, #0x40
+	bl sub_080123C8
+_08011E70:
+	ldr r0, [r4, #0x30]
+	cmp r0, #0x28
+	bne _08011E84
+	str r5, [r4, #0x30]
+	movs r0, #0
+	bl sub_080AB634
+	adds r0, r4, #0
+	bl sub_0800457C
+_08011E84:
+	add sp, #0x10
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08011E8C
+sub_08011E8C: @ 0x08011E8C
+	push {lr}
+	ldr r2, _08011EBC @ =0x03002790
+	adds r1, r2, #0
+	adds r1, #0x3c
+	movs r0, #0x3f
+	ldrb r3, [r1]
+	ands r0, r3
+	strb r0, [r1]
+	adds r0, r2, #0
+	adds r0, #0x44
+	movs r1, #0
+	strb r1, [r0]
+	adds r3, r2, #0
+	adds r3, #0x45
+	movs r0, #0x10
+	strb r0, [r3]
+	adds r0, r2, #0
+	adds r0, #0x46
+	strb r1, [r0]
+	bl sub_08015998
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08011EBC: .4byte 0x03002790
+
+	thumb_func_start sub_08011EC0
+sub_08011EC0: @ 0x08011EC0
+	push {r4, r5, lr}
+	sub sp, #0x10
+	adds r1, r0, #0
+	ldr r0, [r1, #0x30]
+	ldr r4, [r0, #4]
+	ldr r5, [r0, #8]
+	adds r2, r1, #0
+	adds r2, #0x5e
+	movs r0, #4
+	ldrh r2, [r2]
+	ands r0, r2
+	cmp r0, #0
+	bne _08011EEC
+	ldr r0, _08011EE8 @ =0x08C015DC
+	bl sub_080043D4
+	str r4, [r0, #0x3c]
+	str r5, [r0, #0x40]
+	movs r0, #2
+	b _08011F06
+	.align 2, 0
+_08011EE8: .4byte 0x08C015DC
+_08011EEC:
+	str r4, [sp]
+	str r5, [sp, #4]
+	movs r0, #1
+	str r0, [sp, #8]
+	movs r0, #0
+	str r0, [sp, #0xc]
+	movs r0, #0xdc
+	movs r1, #0x54
+	adds r2, r4, #0
+	adds r3, r5, #0
+	bl sub_080123C8
+	movs r0, #0
+_08011F06:
+	add sp, #0x10
+	pop {r4, r5}
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_08011F10
+sub_08011F10: @ 0x08011F10
+	push {lr}
+	movs r1, #0
+	str r1, [r0, #0x3c]
+	bl sub_08013BCC
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08011F20
+sub_08011F20: @ 0x08011F20
+	push {r4, r5, lr}
+	adds r4, r0, #0
+	ldr r1, [r4, #0x3c]
+	ldr r0, [r4, #0x34]
+	adds r2, r1, r0
+	str r2, [r4, #0x3c]
+	cmp r2, #0xff
+	bgt _08011F5C
+	movs r0, #0x80
+	lsls r0, r0, #1
+	subs r0, r0, r2
+	lsls r3, r0, #8
+	ldr r0, [r4, #0x40]
+	muls r0, r2, r0
+	adds r0, r3, r0
+	cmp r0, #0
+	bge _08011F44
+	adds r0, #0xff
+_08011F44:
+	asrs r5, r0, #8
+	ldr r0, [r4, #0x48]
+	muls r0, r2, r0
+	adds r1, r3, r0
+	cmp r1, #0
+	bge _08011F52
+	adds r1, #0xff
+_08011F52:
+	asrs r1, r1, #8
+	ldr r0, [r4, #0x44]
+	muls r0, r2, r0
+	adds r0, r3, r0
+	b _08011F8C
+_08011F5C:
+	movs r0, #0x80
+	lsls r0, r0, #2
+	subs r3, r0, r2
+	ldr r0, [r4, #0x40]
+	adds r1, r0, #0
+	muls r1, r3, r1
+	ldr r5, _08011FBC @ =0xFFFFFF00
+	adds r0, r2, r5
+	lsls r2, r0, #8
+	adds r0, r1, r2
+	cmp r0, #0
+	bge _08011F76
+	adds r0, #0xff
+_08011F76:
+	asrs r5, r0, #8
+	ldr r0, [r4, #0x48]
+	muls r0, r3, r0
+	adds r0, r0, r2
+	cmp r0, #0
+	bge _08011F84
+	adds r0, #0xff
+_08011F84:
+	asrs r1, r0, #8
+	ldr r0, [r4, #0x44]
+	muls r0, r3, r0
+	adds r0, r0, r2
+_08011F8C:
+	cmp r0, #0
+	bge _08011F92
+	adds r0, #0xff
+_08011F92:
+	asrs r2, r0, #8
+	ldr r3, [r4, #0x30]
+	adds r0, r5, #0
+	bl sub_08013C48
+	ldr r1, [r4, #0x3c]
+	movs r0, #0x80
+	lsls r0, r0, #1
+	cmp r1, r0
+	bne _08011FC0
+	ldr r0, [r4, #0x2c]
+	subs r0, #1
+	str r0, [r4, #0x2c]
+	cmp r0, #0
+	bgt _08011FCC
+	movs r0, #0
+	str r0, [r4, #0x3c]
+	adds r0, r4, #0
+	bl sub_0800457C
+	b _08011FCC
+	.align 2, 0
+_08011FBC: .4byte 0xFFFFFF00
+_08011FC0:
+	movs r0, #0x80
+	lsls r0, r0, #2
+	cmp r1, r0
+	bne _08011FCC
+	movs r0, #0
+	str r0, [r4, #0x3c]
+_08011FCC:
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08011FD4
+sub_08011FD4: @ 0x08011FD4
+	push {r4, r5, r6, r7, lr}
+	adds r4, r0, #0
+	ldr r1, [r4, #0x3c]
+	ldr r0, [r4, #0x38]
+	adds r1, r1, r0
+	str r1, [r4, #0x3c]
+	movs r7, #0x80
+	lsls r7, r7, #1
+	subs r2, r7, r1
+	ldr r0, [r4, #0x40]
+	muls r0, r2, r0
+	lsls r1, r1, #8
+	adds r0, r0, r1
+	cmp r0, #0
+	bge _08011FF4
+	adds r0, #0xff
+_08011FF4:
+	asrs r6, r0, #8
+	ldr r0, [r4, #0x48]
+	muls r0, r2, r0
+	adds r0, r0, r1
+	cmp r0, #0
+	bge _08012002
+	adds r0, #0xff
+_08012002:
+	asrs r5, r0, #8
+	ldr r0, [r4, #0x44]
+	muls r0, r2, r0
+	adds r0, r0, r1
+	cmp r0, #0
+	bge _08012010
+	adds r0, #0xff
+_08012010:
+	asrs r2, r0, #8
+	ldr r3, [r4, #0x30]
+	adds r0, r6, #0
+	adds r1, r5, #0
+	bl sub_08013C48
+	ldr r0, [r4, #0x3c]
+	cmp r0, r7
+	bne _08012028
+	adds r0, r4, #0
+	bl sub_0800457C
+_08012028:
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08012030
+sub_08012030: @ 0x08012030
+	push {r4, r5, r6, r7, lr}
+	mov r7, r8
+	push {r7}
+	mov r8, r0
+	adds r4, r1, #0
+	adds r5, r2, #0
+	adds r6, r3, #0
+	ldr r7, [sp, #0x18]
+	ldr r1, [sp, #0x24]
+	ldr r0, _08012068 @ =0x08C0162C
+	bl sub_080043D4
+	str r4, [r0, #0x2c]
+	mov r1, r8
+	str r1, [r0, #0x30]
+	str r5, [r0, #0x34]
+	str r6, [r0, #0x38]
+	str r7, [r0, #0x40]
+	ldr r1, [sp, #0x1c]
+	str r1, [r0, #0x48]
+	ldr r1, [sp, #0x20]
+	str r1, [r0, #0x44]
+	pop {r3}
+	mov r8, r3
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08012068: .4byte 0x08C0162C
+
+	thumb_func_start sub_0801206C
+sub_0801206C: @ 0x0801206C
+	push {r4, r5, r6, r7, lr}
+	mov r7, r8
+	push {r7}
+	sub sp, #0x10
+	adds r7, r0, #0
+	ldr r0, [r7, #0x30]
+	ldr r1, [r0, #4]
+	mov ip, r1
+	ldr r1, [r0, #8]
+	mov r8, r1
+	ldr r1, [r0, #0xc]
+	movs r2, #0xff
+	adds r6, r1, #0
+	ands r6, r2
+	lsrs r5, r1, #0x10
+	ands r5, r2
+	ldr r0, [r0, #0x10]
+	ldr r1, _080120C4 @ =0x000003FF
+	adds r4, r0, #0
+	ands r4, r1
+	lsrs r3, r0, #0xa
+	ands r3, r1
+	lsrs r2, r0, #0x14
+	ands r2, r1
+	adds r1, r7, #0
+	adds r1, #0x5e
+	movs r0, #4
+	ldrh r1, [r1]
+	ands r0, r1
+	cmp r0, #0
+	bne _080120C8
+	str r4, [sp]
+	str r3, [sp, #4]
+	str r2, [sp, #8]
+	str r7, [sp, #0xc]
+	mov r0, ip
+	mov r1, r8
+	adds r2, r6, #0
+	adds r3, r5, #0
+	bl sub_08012030
+	movs r0, #2
+	b _080120CA
+	.align 2, 0
+_080120C4: .4byte 0x000003FF
+_080120C8:
+	movs r0, #0
+_080120CA:
+	add sp, #0x10
+	pop {r3}
+	mov r8, r3
+	pop {r4, r5, r6, r7}
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_080120D8
+sub_080120D8: @ 0x080120D8
+	movs r1, #0
+	str r1, [r0, #0x38]
+	bx lr
+	.align 2, 0
+
+	thumb_func_start sub_080120E0
+sub_080120E0: @ 0x080120E0
+	push {r4, r5, r6, lr}
+	adds r4, r0, #0
+	ldr r0, [r4, #0x38]
+	ldr r1, [r4, #0x34]
+	adds r0, r0, r1
+	str r0, [r4, #0x38]
+	cmp r0, #0xff
+	ble _080120FC
+	adds r0, r4, #0
+	bl sub_0800457C
+	movs r0, #0x80
+	lsls r0, r0, #1
+	str r0, [r4, #0x38]
+_080120FC:
+	ldr r2, [r4, #0x38]
+	movs r0, #0x80
+	lsls r0, r0, #1
+	subs r3, r0, r2
+	ldr r0, [r4, #0x3c]
+	adds r1, r0, #0
+	muls r1, r3, r1
+	ldr r0, [r4, #0x48]
+	muls r0, r2, r0
+	adds r0, r1, r0
+	cmp r0, #0
+	bge _08012116
+	adds r0, #0xff
+_08012116:
+	asrs r6, r0, #8
+	ldr r0, [r4, #0x40]
+	adds r1, r0, #0
+	muls r1, r3, r1
+	ldr r0, [r4, #0x4c]
+	muls r0, r2, r0
+	adds r1, r1, r0
+	cmp r1, #0
+	bge _0801212A
+	adds r1, #0xff
+_0801212A:
+	asrs r5, r1, #8
+	ldr r0, [r4, #0x44]
+	adds r1, r0, #0
+	muls r1, r3, r1
+	ldr r0, [r4, #0x50]
+	muls r0, r2, r0
+	adds r0, r1, r0
+	cmp r0, #0
+	bge _0801213E
+	adds r0, #0xff
+_0801213E:
+	asrs r2, r0, #8
+	ldr r3, [r4, #0x30]
+	adds r0, r6, #0
+	adds r1, r5, #0
+	bl sub_08013C48
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08012150
+sub_08012150: @ 0x08012150
+	push {r4, r5, r6, r7, lr}
+	mov r7, r8
+	push {r7}
+	mov r8, r0
+	adds r4, r1, #0
+	adds r6, r2, #0
+	adds r7, r3, #0
+	ldr r1, [sp, #0x1c]
+	ldr r0, _080121A0 @ =0x08C01654
+	bl sub_080043D4
+	adds r5, r0, #0
+	movs r0, #0xff
+	ands r0, r4
+	cmp r0, #0x80
+	bne _08012174
+	movs r0, #0x80
+	lsls r0, r0, #1
+_08012174:
+	str r0, [r5, #0x34]
+	bl sub_08013BA0
+	str r0, [r5, #0x3c]
+	bl sub_08013BAC
+	str r0, [r5, #0x40]
+	bl sub_08013BBC
+	str r0, [r5, #0x44]
+	mov r0, r8
+	str r0, [r5, #0x30]
+	str r6, [r5, #0x48]
+	str r7, [r5, #0x4c]
+	ldr r0, [sp, #0x18]
+	str r0, [r5, #0x50]
+	pop {r3}
+	mov r8, r3
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080121A0: .4byte 0x08C01654
+
+	thumb_func_start sub_080121A4
+sub_080121A4: @ 0x080121A4
+	push {r4, r5, r6, r7, lr}
+	sub sp, #8
+	adds r5, r0, #0
+	ldr r0, [r5, #0x30]
+	ldr r6, [r0, #4]
+	ldr r7, [r0, #8]
+	ldr r0, [r0, #0xc]
+	ldr r1, _080121E0 @ =0x000003FF
+	adds r4, r0, #0
+	ands r4, r1
+	lsrs r3, r0, #0xa
+	ands r3, r1
+	lsrs r2, r0, #0x14
+	ands r2, r1
+	adds r1, r5, #0
+	adds r1, #0x5e
+	movs r0, #4
+	ldrh r1, [r1]
+	ands r0, r1
+	cmp r0, #0
+	bne _080121E4
+	str r2, [sp]
+	str r5, [sp, #4]
+	adds r0, r6, #0
+	adds r1, r7, #0
+	adds r2, r4, #0
+	bl sub_08012150
+	movs r0, #2
+	b _080121E6
+	.align 2, 0
+_080121E0: .4byte 0x000003FF
+_080121E4:
+	movs r0, #0
+_080121E6:
+	add sp, #8
+	pop {r4, r5, r6, r7}
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_080121F0
+sub_080121F0: @ 0x080121F0
+	push {lr}
+	bl sub_08013BCC
+	movs r0, #2
+	pop {r1}
+	bx r1
+
+	thumb_func_start sub_080121FC
+sub_080121FC: @ 0x080121FC
+	push {lr}
+	movs r2, #0x80
+	lsls r2, r2, #1
+	movs r3, #1
+	rsbs r3, r3, #0
+	adds r0, r2, #0
+	adds r1, r2, #0
+	bl sub_08013C48
+	movs r0, #2
+	pop {r1}
+	bx r1
+
+	thumb_func_start sub_08012214
+sub_08012214: @ 0x08012214
+	push {r4, r5, r6, lr}
+	mov r6, r8
+	push {r6}
+	sub sp, #0x18
+	mov r8, r0
+	ldr r1, _08012274 @ =0x0202BBB4
+	movs r2, #0xc
+	ldrsh r0, [r1, r2]
+	mov r5, r8
+	ldr r3, [r5, #0x2c]
+	subs r3, r3, r0
+	adds r3, #8
+	movs r2, #0xe
+	ldrsh r0, [r1, r2]
+	ldr r4, [r5, #0x30]
+	subs r4, r4, r0
+	adds r4, #8
+	ldr r6, [r5, #0x38]
+	ldr r0, [r6, #4]
+	ldr r1, [r6]
+	ldr r2, [r6, #8]
+	ldr r5, _08012278 @ =0x000001FF
+	ands r3, r5
+	movs r5, #0xff
+	ands r4, r5
+	ldrh r5, [r6, #0xc]
+	adds r4, r5, r4
+	str r4, [sp]
+	movs r4, #0
+	str r4, [sp, #4]
+	ldrb r4, [r6, #0x10]
+	str r4, [sp, #8]
+	ldrb r4, [r6, #0x11]
+	str r4, [sp, #0xc]
+	ldrh r4, [r6, #0xe]
+	str r4, [sp, #0x10]
+	movs r4, #4
+	str r4, [sp, #0x14]
+	bl sub_080AB840
+	mov r1, r8
+	str r0, [r1, #0x34]
+	add sp, #0x18
+	pop {r3}
+	mov r8, r3
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08012274: .4byte 0x0202BBB4
+_08012278: .4byte 0x000001FF
+
+	thumb_func_start sub_0801227C
+sub_0801227C: @ 0x0801227C
+	push {r4, r5, r6, lr}
+	adds r4, r0, #0
+	ldr r6, [r4, #0x34]
+	ldr r5, [r6]
+	cmp r5, #0
+	beq _080122BC
+	ldr r2, _080122B4 @ =0x0202BBB4
+	movs r1, #0xc
+	ldrsh r0, [r2, r1]
+	ldr r1, [r4, #0x2c]
+	subs r1, r1, r0
+	adds r1, #8
+	movs r3, #0xe
+	ldrsh r0, [r2, r3]
+	ldr r2, [r4, #0x30]
+	subs r2, r2, r0
+	adds r2, #8
+	ldr r0, _080122B8 @ =0x000001FF
+	ands r1, r0
+	movs r0, #0xff
+	ands r2, r0
+	movs r3, #1
+	rsbs r3, r3, #0
+	adds r0, r6, #0
+	bl sub_08012B70
+	b _080122C4
+	.align 2, 0
+_080122B4: .4byte 0x0202BBB4
+_080122B8: .4byte 0x000001FF
+_080122BC:
+	adds r0, r4, #0
+	bl sub_0800457C
+	str r5, [r4, #0x34]
+_080122C4:
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_080122CC
+sub_080122CC: @ 0x080122CC
+	push {lr}
+	ldr r0, [r0, #0x34]
+	cmp r0, #0
+	beq _080122D8
+	bl EndSpriteAnimProc
+_080122D8:
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_080122DC
+sub_080122DC: @ 0x080122DC
+	push {r4, r5, r6, lr}
+	adds r1, r0, #0
+	ldr r0, [r1, #0x30]
+	ldr r6, [r0, #4]
+	ldr r2, [r0, #8]
+	movs r0, #0x80
+	lsls r0, r0, #8
+	ands r0, r2
+	cmp r0, #0
+	bne _080122FC
+	ldr r4, _080122F8 @ =0x0000FFFF
+	ands r4, r2
+	b _08012300
+	.align 2, 0
+_080122F8: .4byte 0x0000FFFF
+_080122FC:
+	movs r4, #1
+	rsbs r4, r4, #0
+_08012300:
+	ldr r0, [r1, #0x30]
+	ldrh r2, [r0, #0xa]
+	movs r0, #0x80
+	lsls r0, r0, #8
+	ands r0, r2
+	movs r5, #1
+	rsbs r5, r5, #0
+	cmp r0, #0
+	bne _08012314
+	adds r5, r2, #0
+_08012314:
+	adds r2, r1, #0
+	adds r2, #0x5e
+	movs r0, #4
+	ldrh r2, [r2]
+	ands r0, r2
+	cmp r0, #0
+	beq _08012326
+	movs r0, #0
+	b _08012332
+_08012326:
+	ldr r0, _08012338 @ =0x08C01674
+	bl Proc_Start
+	str r4, [r0, #0x2c]
+	str r5, [r0, #0x30]
+	str r6, [r0, #0x38]
+_08012332:
+	pop {r4, r5, r6}
+	pop {r1}
+	bx r1
+	.align 2, 0
+_08012338: .4byte 0x08C01674
+
+	thumb_func_start sub_0801233C
+sub_0801233C: @ 0x0801233C
+	push {lr}
+	ldr r0, _0801234C @ =0x08C01674
+	bl sub_08004584
+	bl sub_08004460
+	pop {r1}
+	bx r1
+	.align 2, 0
+_0801234C: .4byte 0x08C01674
+
+	thumb_func_start sub_08012350
+sub_08012350: @ 0x08012350
+	push {lr}
+	ldr r0, _0801236C @ =0x08C01674
+	bl sub_08004584
+	cmp r0, #0
+	beq _08012370
+	ldr r0, [r0, #0x34]
+	cmp r0, #0
+	beq _08012368
+	ldr r0, [r0]
+	cmp r0, #0
+	bne _08012370
+_08012368:
+	movs r0, #0
+	b _08012372
+	.align 2, 0
+_0801236C: .4byte 0x08C01674
+_08012370:
+	movs r0, #1
+_08012372:
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_08012378
+sub_08012378: @ 0x08012378
+	push {r4, r5, r6, r7, lr}
+	sub sp, #8
+	adds r5, r0, #0
+	ldr r0, [r5, #0x30]
+	ldr r6, [r0, #4]
+	ldr r7, [r0, #8]
+	ldr r4, [r0, #0xc]
+	adds r1, r5, #0
+	adds r1, #0x5e
+	movs r0, #4
+	ldrh r1, [r1]
+	ands r0, r1
+	cmp r0, #0
+	beq _08012398
+	movs r0, #0
+	b _080123B2
+_08012398:
+	movs r1, #0xff
+	adds r2, r4, #0
+	ands r2, r1
+	asrs r3, r4, #0x10
+	ands r3, r1
+	asrs r0, r4, #0x18
+	ands r0, r1
+	str r0, [sp]
+	str r5, [sp, #4]
+	adds r0, r6, #0
+	adds r1, r7, #0
+	bl sub_080AB7F4
+_080123B2:
+	add sp, #8
+	pop {r4, r5, r6, r7}
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_080123BC
+sub_080123BC: @ 0x080123BC
+	push {lr}
+	bl sub_080AB82C
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_080123C8
+sub_080123C8: @ 0x080123C8
+	push {r4, r5, r6, r7, lr}
+	mov r7, sl
+	mov r6, sb
+	mov r5, r8
+	push {r5, r6, r7}
+	sub sp, #4
+	adds r6, r0, #0
+	mov r8, r1
+	mov sb, r2
+	mov sl, r3
+	ldr r7, [sp, #0x24]
+	ldr r5, [sp, #0x2c]
+	movs r0, #0
+	str r0, [sp]
+	ldr r4, _08012438 @ =0x030040F0
+	ldr r2, _0801243C @ =0x01000004
+	mov r0, sp
+	adds r1, r4, #0
+	bl CpuFastSet
+	movs r0, #3
+	ands r5, r0
+	lsls r5, r5, #1
+	movs r0, #7
+	rsbs r0, r0, #0
+	ldrb r1, [r4, #3]
+	ands r0, r1
+	orrs r0, r5
+	movs r1, #7
+	ands r0, r1
+	movs r1, #8
+	orrs r0, r1
+	strb r0, [r4, #3]
+	strb r6, [r4]
+	mov r0, r8
+	strb r0, [r4, #1]
+	mov r1, sb
+	strb r1, [r4, #4]
+	mov r0, sl
+	strb r0, [r4, #5]
+	strb r7, [r4, #6]
+	add r1, sp, #0x28
+	ldrb r1, [r1]
+	strb r1, [r4, #7]
+	adds r0, r4, #0
+	ldr r1, [sp, #0x30]
+	bl sub_0800A614
+	add sp, #4
+	pop {r3, r4, r5}
+	mov r8, r3
+	mov sb, r4
+	mov sl, r5
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08012438: .4byte 0x030040F0
+_0801243C: .4byte 0x01000004
+
+	thumb_func_start sub_08012440
+sub_08012440: @ 0x08012440
+	push {r4, r5, r6, lr}
+	sub sp, #4
+	adds r4, r0, #0
+	adds r6, r1, #0
+	movs r0, #0
+	str r0, [sp]
+	ldr r5, _08012490 @ =0x030040F0
+	ldr r2, _08012494 @ =0x01000004
+	mov r0, sp
+	adds r1, r5, #0
+	bl CpuFastSet
+	ldrb r2, [r4, #3]
+	movs r1, #6
+	ands r1, r2
+	movs r0, #7
+	rsbs r0, r0, #0
+	ldrb r3, [r5, #3]
+	ands r0, r3
+	orrs r0, r1
+	lsrs r2, r2, #3
+	lsls r2, r2, #3
+	movs r1, #7
+	ands r0, r1
+	orrs r0, r2
+	strb r0, [r5, #3]
+	ldrb r0, [r4]
+	strb r0, [r5]
+	ldrb r0, [r4, #1]
+	strb r0, [r5, #1]
+	cmp r6, #0
+	beq _08012498
+	ldrb r0, [r4, #4]
+	strb r0, [r5, #4]
+	ldrb r0, [r4, #5]
+	strb r0, [r5, #5]
+	ldrb r1, [r4, #6]
+	ldrb r2, [r4, #7]
+	b _080124A2
+	.align 2, 0
+_08012490: .4byte 0x030040F0
+_08012494: .4byte 0x01000004
+_08012498:
+	ldrb r1, [r4, #6]
+	strb r1, [r5, #4]
+	ldrb r0, [r4, #7]
+	strb r0, [r5, #5]
+	adds r2, r0, #0
+_080124A2:
+	ldr r0, _080124B8 @ =0x030040F0
+	strb r1, [r0, #6]
+	strb r2, [r0, #7]
+	adds r1, r6, #0
+	bl sub_0800A614
+	add sp, #4
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080124B8: .4byte 0x030040F0
+
+	thumb_func_start sub_080124BC
+sub_080124BC: @ 0x080124BC
+	push {r4, r5, r6, r7, lr}
+	mov r7, sl
+	mov r6, sb
+	mov r5, r8
+	push {r5, r6, r7}
+	sub sp, #0x10
+	adds r7, r0, #0
+	ldr r1, [r7, #0x54]
+	ldrb r0, [r1]
+	cmp r0, #0
+	bne _080124DA
+	adds r0, r7, #0
+	bl sub_08004460
+	b _08012582
+_080124DA:
+	ldrb r4, [r1, #6]
+	str r4, [r7, #0x2c]
+	ldrb r3, [r1, #7]
+	str r3, [r7, #0x30]
+	ldr r6, _08012594 @ =0x0202E3D8
+	ldr r1, [r6]
+	lsls r0, r3, #2
+	adds r0, r0, r1
+	ldr r0, [r0]
+	adds r0, r0, r4
+	ldrb r0, [r0]
+	cmp r0, #0
+	beq _08012578
+	movs r0, #0xff
+	mov sb, r0
+	movs r1, #1
+	rsbs r1, r1, #0
+	mov sl, r1
+	mov r2, sl
+	str r2, [sp]
+	ldr r2, _08012598 @ =0x08C52B94
+	adds r0, r4, #0
+	adds r1, r3, #0
+	bl sub_0801A060
+	movs r5, #0
+	ldr r0, _0801259C @ =0x0202E3D4
+	movs r3, #2
+	ldrsh r1, [r0, r3]
+	cmp r5, r1
+	bge _08012570
+	movs r3, #0
+	ldrsh r2, [r0, r3]
+	str r2, [sp, #8]
+	str r1, [sp, #4]
+_08012520:
+	movs r3, #0
+	adds r6, r5, #1
+	mov ip, r6
+	ldr r0, [sp, #8]
+	cmp r3, r0
+	bge _08012568
+	ldr r1, _080125A0 @ =0x0202E3E0
+	ldr r0, [r1]
+	lsls r1, r5, #2
+	adds r0, r1, r0
+	ldr r0, [r0]
+	str r0, [sp, #0xc]
+	ldr r2, _0801259C @ =0x0202E3D4
+	movs r6, #0
+	ldrsh r4, [r2, r6]
+	ldr r0, _08012594 @ =0x0202E3D8
+	mov r8, r0
+_08012542:
+	ldr r2, [sp, #0xc]
+	adds r0, r2, r3
+	ldrb r2, [r0]
+	cmp sb, r2
+	ble _08012562
+	mov r6, r8
+	ldr r0, [r6]
+	adds r0, r1, r0
+	ldr r0, [r0]
+	adds r0, r0, r3
+	ldrb r0, [r0]
+	cmp r0, #0
+	bne _08012562
+	mov sb, r2
+	str r3, [sp]
+	mov sl, r5
+_08012562:
+	adds r3, #1
+	cmp r3, r4
+	blt _08012542
+_08012568:
+	mov r5, ip
+	ldr r0, [sp, #4]
+	cmp r5, r0
+	blt _08012520
+_08012570:
+	ldr r1, [sp]
+	str r1, [r7, #0x2c]
+	mov r2, sl
+	str r2, [r7, #0x30]
+_08012578:
+	ldr r1, [r7, #0x2c]
+	ldr r2, [r7, #0x30]
+	adds r0, r7, #0
+	bl sub_0801615C
+_08012582:
+	add sp, #0x10
+	pop {r3, r4, r5}
+	mov r8, r3
+	mov sb, r4
+	mov sl, r5
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08012594: .4byte 0x0202E3D8
+_08012598: .4byte 0x08C52B94
+_0801259C: .4byte 0x0202E3D4
+_080125A0: .4byte 0x0202E3E0
+
+	thumb_func_start sub_080125A4
+sub_080125A4: @ 0x080125A4
+	push {r4, r5, r6, lr}
+	sub sp, #0x14
+	adds r4, r0, #0
+	ldr r5, [r4, #0x54]
+	ldr r1, [r4, #0x2c]
+	ldr r2, [r4, #0x30]
+	movs r0, #1
+	str r0, [sp]
+	adds r0, r4, #0
+	movs r3, #1
+	bl sub_08020E5C
+	add r1, sp, #4
+	adds r0, r5, #0
+	ldm r0!, {r2, r3, r6}
+	stm r1!, {r2, r3, r6}
+	ldr r0, [r0]
+	str r0, [r1]
+	add r2, sp, #4
+	adds r1, r2, #0
+	ldr r0, [r4, #0x2c]
+	strb r0, [r1, #6]
+	strb r0, [r2, #4]
+	ldr r0, [r4, #0x30]
+	strb r0, [r1, #7]
+	strb r0, [r2, #5]
+	adds r0, r1, #0
+	bl LoadUnit
+	adds r5, #0x10
+	str r5, [r4, #0x54]
+	add sp, #0x14
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_080125EC
+sub_080125EC: @ 0x080125EC
+	push {r4, lr}
+	adds r4, r0, #0
+	ldr r0, _08012638 @ =0x0202E3F0
+	ldr r0, [r0]
+	movs r1, #0
+	bl BmMapFillg
+	ldr r0, _0801263C @ =0x08C0169C
+	adds r1, r4, #0
+	bl sub_080043D4
+	adds r2, r0, #0
+	ldr r0, [r4, #0x30]
+	ldr r0, [r0, #4]
+	str r0, [r2, #0x54]
+	movs r3, #0
+	adds r0, r4, #0
+	adds r0, #0x4d
+	ldrb r0, [r0]
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+	cmp r0, #0
+	bne _08012628
+	adds r1, r4, #0
+	adds r1, #0x5e
+	movs r0, #4
+	ldrh r1, [r1]
+	ands r0, r1
+	cmp r0, #0
+	beq _0801262A
+_08012628:
+	movs r3, #1
+_0801262A:
+	adds r0, r2, #0
+	adds r0, #0x64
+	strh r3, [r0]
+	movs r0, #2
+	pop {r4}
+	pop {r1}
+	bx r1
+	.align 2, 0
+_08012638: .4byte 0x0202E3F0
+_0801263C: .4byte 0x08C0169C
diff --git a/asm/fe7.s b/asm/fe7.s
index 2908829..e2e96e9 100644
--- a/asm/fe7.s
+++ b/asm/fe7.s
@@ -139,7 +139,7 @@ InitChapterMap: @ 0x08019170
 	bl sub_08019654
 	bl sub_0802C100
 	bl sub_08019714
-	ldr r0, _08019268 @ =0x0202BBF4
+	ldr r0, _08019268 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	cmp r0, #0x26
 	bne _08019220
@@ -165,7 +165,7 @@ _08019258: .4byte 0x0202FB1C
 _0801925C: .4byte 0x0202E3EC
 _08019260: .4byte 0x020302D4
 _08019264: .4byte 0x0202E3F0
-_08019268: .4byte 0x0202BBF4
+_08019268: .4byte gPlaySt
 
 	thumb_func_start InitChapterPreviewMap
 InitChapterPreviewMap: @ 0x0801926C
@@ -405,7 +405,7 @@ _0801941A:
 sub_08019428: @ 0x08019428
 	push {lr}
 	ldr r0, _0801944C @ =0x02001000
-	ldr r1, _08019450 @ =0x0202BBF4
+	ldr r1, _08019450 @ =gPlaySt
 	ldrb r1, [r1, #0xe]
 	lsls r1, r1, #0x18
 	asrs r1, r1, #0x18
@@ -418,7 +418,7 @@ sub_08019428: @ 0x08019428
 	bx r0
 	.align 2, 0
 _0801944C: .4byte 0x02001000
-_08019450: .4byte 0x0202BBF4
+_08019450: .4byte gPlaySt
 
 	thumb_func_start BmMapInit
 BmMapInit: @ 0x08019454
@@ -658,7 +658,7 @@ _08019620: .4byte 0x0600C000
 sub_08019624: @ 0x08019624
 	push {r4, lr}
 	ldr r4, _0801964C @ =0x08D648F4
-	ldr r0, _08019650 @ =0x0202BBF4
+	ldr r0, _08019650 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -676,7 +676,7 @@ sub_08019624: @ 0x08019624
 	bx r0
 	.align 2, 0
 _0801964C: .4byte 0x08D648F4
-_08019650: .4byte 0x0202BBF4
+_08019650: .4byte gPlaySt
 
 	thumb_func_start sub_08019654
 sub_08019654: @ 0x08019654
@@ -1489,7 +1489,7 @@ _08019C54:
 	ldr r0, [r1]
 	adds r0, r0, r2
 	strb r7, [r0]
-	ldr r0, _08019D3C @ =0x0202BBF4
+	ldr r0, _08019D3C @ =gPlaySt
 	ldrb r0, [r0, #0xd]
 	cmp r0, #0
 	beq _08019CA8
@@ -1508,7 +1508,7 @@ _08019CA8:
 	adds r7, #1
 	cmp r7, #0x7f
 	ble _08019C54
-	ldr r0, _08019D3C @ =0x0202BBF4
+	ldr r0, _08019D3C @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	cmp r0, #0x80
 	beq _08019D80
@@ -1545,7 +1545,7 @@ _08019CB8:
 	rsbs r3, r3, #0
 	bl sub_0801A6B4
 _08019CF8:
-	ldr r0, _08019D3C @ =0x0202BBF4
+	ldr r0, _08019D3C @ =gPlaySt
 	ldrb r0, [r0, #0xd]
 	movs r2, #0x11
 	ldrsb r2, [r6, r2]
@@ -1579,7 +1579,7 @@ _08019CF8:
 	b _08019D6E
 	.align 2, 0
 _08019D38: .4byte 0x0202E3D8
-_08019D3C: .4byte 0x0202BBF4
+_08019D3C: .4byte gPlaySt
 _08019D40: .4byte 0x0202E3E8
 _08019D44: .4byte 0x0202E3EC
 _08019D48:
@@ -1644,7 +1644,7 @@ _08019D82:
 	rsbs r3, r3, #0
 	bl sub_0801A6B4
 _08019DC2:
-	ldr r0, _08019DF0 @ =0x0202BBF4
+	ldr r0, _08019DF0 @ =gPlaySt
 	ldrb r0, [r0, #0xd]
 	movs r2, #0x11
 	ldrsb r2, [r6, r2]
@@ -1667,7 +1667,7 @@ _08019DC2:
 	orrs r0, r1
 	b _08019DFE
 	.align 2, 0
-_08019DF0: .4byte 0x0202BBF4
+_08019DF0: .4byte gPlaySt
 _08019DF4: .4byte 0x0202E3E8
 _08019DF8:
 	ldr r0, [r6, #0xc]
@@ -1699,7 +1699,7 @@ _08019E20: .4byte 0x0202E3D8
 sub_08019E24: @ 0x08019E24
 	push {r4, lr}
 	movs r0, #0
-	bl sub_0802C7D8
+	bl GetTrap
 	adds r4, r0, #0
 	b _08019E44
 _08019E30:
@@ -1725,7 +1725,7 @@ _08019E44:
 sub_08019E50: @ 0x08019E50
 	push {r4, r5, lr}
 	movs r0, #0
-	bl sub_0802C7D8
+	bl GetTrap
 	adds r2, r0, #0
 	ldrb r0, [r2, #2]
 	cmp r0, #0
@@ -1781,7 +1781,7 @@ sub_08019EA4: @ 0x08019EA4
 	ldr r0, _08019EE8 @ =0x0202E3E8
 	ldr r2, [r0]
 	movs r1, #0
-	ldr r0, _08019EEC @ =0x0202BBF4
+	ldr r0, _08019EEC @ =gPlaySt
 	ldrb r0, [r0, #0xd]
 	cmp r0, #0
 	bne _08019ECA
@@ -1798,7 +1798,7 @@ _08019ECA:
 _08019EE0: .4byte 0x0202E3D8
 _08019EE4: .4byte 0x0202E3EC
 _08019EE8: .4byte 0x0202E3E8
-_08019EEC: .4byte 0x0202BBF4
+_08019EEC: .4byte gPlaySt
 
 	thumb_func_start sub_08019EF0
 sub_08019EF0: @ 0x08019EF0
@@ -4573,7 +4573,7 @@ _0801B41C:
 	cmp r0, #0
 	beq _0801B508
 _0801B444:
-	ldr r0, _0801B4D4 @ =0x0202BBF4
+	ldr r0, _0801B4D4 @ =gPlaySt
 	ldrb r0, [r0, #0xd]
 	cmp r0, #0
 	beq _0801B466
@@ -4644,7 +4644,7 @@ _0801B4BE:
 	bl sub_0801B1F0
 	b _0801B4F2
 	.align 2, 0
-_0801B4D4: .4byte 0x0202BBF4
+_0801B4D4: .4byte gPlaySt
 _0801B4D8: .4byte 0x0202E3E8
 _0801B4DC: .4byte 0x0202E3D8
 _0801B4E0: .4byte 0x0202E3F0
@@ -4843,7 +4843,7 @@ nullsub_38: @ 0x0801B62C
 sub_0801B630: @ 0x0801B630
 	push {lr}
 	adds r2, r0, #0
-	ldr r0, _0801B64C @ =0x08BBFC7C
+	ldr r0, _0801B64C @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #4
 	ldrh r1, [r1, #8]
@@ -4856,7 +4856,7 @@ _0801B648:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0801B64C: .4byte 0x08BBFC7C
+_0801B64C: .4byte gpKeySt
 
 	thumb_func_start sub_0801B650
 sub_0801B650: @ 0x0801B650
@@ -4965,7 +4965,7 @@ _0801B714: .4byte 0x08C04B94
 sub_0801B718: @ 0x0801B718
 	push {r4, r5, lr}
 	adds r2, r1, #0
-	ldr r3, _0801B798 @ =0x08BBFC7C
+	ldr r3, _0801B798 @ =gpKeySt
 	ldr r1, [r3]
 	movs r0, #0x10
 	ldrh r1, [r1, #6]
@@ -5029,7 +5029,7 @@ _0801B790:
 	pop {r1}
 	bx r1
 	.align 2, 0
-_0801B798: .4byte 0x08BBFC7C
+_0801B798: .4byte gpKeySt
 _0801B79C: .4byte 0x02022D2E
 _0801B7A0: .4byte 0x081C9238
 
@@ -5038,7 +5038,7 @@ sub_0801B7A4: @ 0x0801B7A4
 	push {r4, lr}
 	adds r4, r1, #0
 	bl sub_0802E87C
-	ldr r1, _0801B7C4 @ =0x0202BBF4
+	ldr r1, _0801B7C4 @ =gPlaySt
 	adds r4, #0x3c
 	ldrb r0, [r4]
 	strb r0, [r1, #0xe]
@@ -5049,7 +5049,7 @@ sub_0801B7A4: @ 0x0801B7A4
 	pop {r1}
 	bx r1
 	.align 2, 0
-_0801B7C4: .4byte 0x0202BBF4
+_0801B7C4: .4byte gPlaySt
 
 	thumb_func_start sub_0801B7C8
 sub_0801B7C8: @ 0x0801B7C8
@@ -5119,7 +5119,7 @@ _0801B848: .4byte 0x02022C60
 sub_0801B84C: @ 0x0801B84C
 	push {r4, r5, r6, r7, lr}
 	adds r6, r1, #0
-	ldr r2, _0801B8F0 @ =0x08BBFC7C
+	ldr r2, _0801B8F0 @ =gpKeySt
 	ldr r1, [r2]
 	movs r0, #0x10
 	ldrh r1, [r1, #6]
@@ -5202,7 +5202,7 @@ _0801B8E8:
 	pop {r1}
 	bx r1
 	.align 2, 0
-_0801B8F0: .4byte 0x08BBFC7C
+_0801B8F0: .4byte gpKeySt
 _0801B8F4: .4byte 0x08DAE514
 _0801B8F8: .4byte 0x02022C60
 
@@ -5213,7 +5213,7 @@ sub_0801B8FC: @ 0x0801B8FC
 	ldr r0, _0801B92C @ =0x08DAEB64
 	cmp r2, r0
 	bne _0801B934
-	ldr r0, _0801B930 @ =0x0202BBF4
+	ldr r0, _0801B930 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -5232,7 +5232,7 @@ sub_0801B8FC: @ 0x0801B8FC
 	.align 2, 0
 _0801B928: .4byte 0x08DAE514
 _0801B92C: .4byte 0x08DAEB64
-_0801B930: .4byte 0x0202BBF4
+_0801B930: .4byte gPlaySt
 _0801B934:
 	adds r0, r1, #0
 	adds r0, #0x3c
@@ -5325,7 +5325,7 @@ sub_0801B9E4: @ 0x0801B9E4
 	ldr r0, _0801BA28 @ =0x08C025F8
 	bl sub_08004584
 	adds r2, r0, #0
-	ldr r0, _0801BA2C @ =0x08BBFC7C
+	ldr r0, _0801BA2C @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x31
 	ldrh r1, [r1, #8]
@@ -5352,7 +5352,7 @@ _0801BA1E:
 	bx r1
 	.align 2, 0
 _0801BA28: .4byte 0x08C025F8
-_0801BA2C: .4byte 0x08BBFC7C
+_0801BA2C: .4byte gpKeySt
 
 	thumb_func_start sub_0801BA30
 sub_0801BA30: @ 0x0801BA30
@@ -5421,7 +5421,7 @@ sub_0801BAB4: @ 0x0801BAB4
 	push {r4, r5, r6, lr}
 	adds r5, r0, #0
 	adds r6, r1, #0
-	ldr r0, _0801BAF4 @ =0x08BBFC7C
+	ldr r0, _0801BAF4 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x31
 	ldrh r1, [r1, #8]
@@ -5448,7 +5448,7 @@ sub_0801BAB4: @ 0x0801BAB4
 	ldr r0, [r0]
 	mov pc, r0
 	.align 2, 0
-_0801BAF4: .4byte 0x08BBFC7C
+_0801BAF4: .4byte gpKeySt
 _0801BAF8: .4byte 0x08C025F8
 _0801BAFC: .4byte _0801BB00
 _0801BB00: @ jump table
@@ -5549,7 +5549,7 @@ sub_0801BBC4: @ 0x0801BBC4
 	sub sp, #0x64
 	adds r6, r0, #0
 	adds r7, r1, #0
-	ldr r4, _0801BC40 @ =0x08BBFC7C
+	ldr r4, _0801BC40 @ =gpKeySt
 	ldr r1, [r4]
 	movs r0, #0x30
 	ldrh r1, [r1, #6]
@@ -5568,7 +5568,7 @@ sub_0801BBC4: @ 0x0801BBC4
 	blt _0801BBF2
 	subs r5, #1
 _0801BBF2:
-	ldr r0, _0801BC40 @ =0x08BBFC7C
+	ldr r0, _0801BC40 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x10
 	ldrh r1, [r1, #6]
@@ -5610,7 +5610,7 @@ _0801BC30:
 	ands r0, r2
 	b _0801BC4C
 	.align 2, 0
-_0801BC40: .4byte 0x08BBFC7C
+_0801BC40: .4byte gpKeySt
 _0801BC44:
 	mov r1, sp
 	movs r0, #1
@@ -5652,7 +5652,7 @@ _0801BC80: .4byte 0x08C04B04
 sub_0801BC84: @ 0x0801BC84
 	push {lr}
 	bl sub_080A0E48
-	ldr r0, _0801BCAC @ =0x0202BBF4
+	ldr r0, _0801BCAC @ =gPlaySt
 	movs r1, #0xef
 	ldrb r2, [r0, #0x14]
 	ands r1, r2
@@ -5665,7 +5665,7 @@ sub_0801BC84: @ 0x0801BC84
 	pop {r1}
 	bx r1
 	.align 2, 0
-_0801BCAC: .4byte 0x0202BBF4
+_0801BCAC: .4byte gPlaySt
 
 	thumb_func_start sub_0801BCB0
 sub_0801BCB0: @ 0x0801BCB0
@@ -5839,7 +5839,7 @@ sub_0801BE04: @ 0x0801BE04
 	asrs r0, r0, #0x18
 	adds r7, r0, #0
 	adds r7, #0xa
-	ldr r1, _0801BE48 @ =0x08BBFC7C
+	ldr r1, _0801BE48 @ =gpKeySt
 	ldr r3, [r1]
 	movs r5, #0x10
 	adds r0, r5, #0
@@ -5858,7 +5858,7 @@ sub_0801BE04: @ 0x0801BE04
 	adds r0, r2, #1
 	b _0801BE58
 	.align 2, 0
-_0801BE48: .4byte 0x08BBFC7C
+_0801BE48: .4byte gpKeySt
 _0801BE4C:
 	adds r0, r5, #0
 	ldrh r3, [r3, #8]
@@ -5925,7 +5925,7 @@ _0801BEBC:
 	ands r0, r1
 	cmp r0, #0
 	beq _0801BEF0
-	ldr r1, _0801BEE8 @ =0x0202BBF4
+	ldr r1, _0801BEE8 @ =gPlaySt
 	movs r0, #3
 	strb r0, [r1, #0x1b]
 	ldr r0, _0801BEEC @ =0x0843F084
@@ -5937,10 +5937,10 @@ _0801BEBC:
 	.align 2, 0
 _0801BEE0: .4byte 0x02022C60
 _0801BEE4: .4byte 0x081C9238
-_0801BEE8: .4byte 0x0202BBF4
+_0801BEE8: .4byte gPlaySt
 _0801BEEC: .4byte 0x0843F084
 _0801BEF0:
-	ldr r1, _0801BF1C @ =0x0202BBF4
+	ldr r1, _0801BF1C @ =gPlaySt
 	movs r0, #2
 	strb r0, [r1, #0x1b]
 	ldr r0, _0801BF20 @ =0x081CDA18
@@ -5953,7 +5953,7 @@ _0801BF02:
 	ldrsb r0, [r5, r0]
 	cmp r0, #0xb
 	bgt _0801BF10
-	ldr r1, _0801BF1C @ =0x0202BBF4
+	ldr r1, _0801BF1C @ =gPlaySt
 	movs r0, #1
 	strb r0, [r1, #0x1b]
 _0801BF10:
@@ -5963,7 +5963,7 @@ _0801BF10:
 	pop {r1}
 	bx r1
 	.align 2, 0
-_0801BF1C: .4byte 0x0202BBF4
+_0801BF1C: .4byte gPlaySt
 _0801BF20: .4byte 0x081CDA18
 
 	thumb_func_start sub_0801BF24
@@ -5973,7 +5973,7 @@ sub_0801BF24: @ 0x0801BF24
 	bl sub_08000EEC
 	bl RandInit
 	bl InitUnits
-	ldr r0, _0801BF50 @ =0x08BBFC7C
+	ldr r0, _0801BF50 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x80
 	lsls r0, r0, #2
@@ -5987,7 +5987,7 @@ sub_0801BF24: @ 0x0801BF24
 	bl sub_080A1050
 	b _0801BF5E
 	.align 2, 0
-_0801BF50: .4byte 0x08BBFC7C
+_0801BF50: .4byte gpKeySt
 _0801BF54:
 	movs r0, #0
 	movs r1, #0
@@ -5997,7 +5997,7 @@ _0801BF5E:
 	ldr r0, _0801BF88 @ =0x00000569
 	bl sub_08013318
 	bl sub_0802EBB8
-	ldr r1, _0801BF8C @ =0x0202BBF4
+	ldr r1, _0801BF8C @ =gPlaySt
 	adds r0, r4, #0
 	adds r0, #0x3c
 	ldrb r0, [r0]
@@ -6012,7 +6012,7 @@ _0801BF5E:
 	bx r1
 	.align 2, 0
 _0801BF88: .4byte 0x00000569
-_0801BF8C: .4byte 0x0202BBF4
+_0801BF8C: .4byte gPlaySt
 
 	thumb_func_start sub_0801BF90
 sub_0801BF90: @ 0x0801BF90
@@ -6187,7 +6187,7 @@ sub_0801C094: @ 0x0801C094
 	movs r1, #8
 	movs r2, #0
 	bl sub_080059DC
-	ldr r1, _0801C100 @ =0x0202BBF4
+	ldr r1, _0801C100 @ =gPlaySt
 	ldrb r2, [r1, #0xd]
 	rsbs r0, r2, #0
 	orrs r0, r2
@@ -6219,7 +6219,7 @@ sub_0801C094: @ 0x0801C094
 	.align 2, 0
 _0801C0F8: .4byte 0x081C92DC
 _0801C0FC: .4byte 0x081C92E4
-_0801C100: .4byte 0x0202BBF4
+_0801C100: .4byte gPlaySt
 _0801C104: .4byte 0x02022C60
 
 	thumb_func_start sub_0801C108
@@ -6231,14 +6231,14 @@ sub_0801C108: @ 0x0801C108
 	lsls r0, r0, #0x18
 	cmp r0, #0
 	bne _0801C156
-	ldr r0, _0801C140 @ =0x08BBFC7C
+	ldr r0, _0801C140 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x31
 	ldrh r1, [r1, #8]
 	ands r0, r1
 	cmp r0, #0
 	beq _0801C156
-	ldr r1, _0801C144 @ =0x0202BBF4
+	ldr r1, _0801C144 @ =gPlaySt
 	ldrb r0, [r1, #0xd]
 	cmp r0, #0
 	bne _0801C148
@@ -6249,8 +6249,8 @@ sub_0801C108: @ 0x0801C108
 	bl sub_0801DEFC
 	b _0801C14E
 	.align 2, 0
-_0801C140: .4byte 0x08BBFC7C
-_0801C144: .4byte 0x0202BBF4
+_0801C140: .4byte gpKeySt
+_0801C144: .4byte gPlaySt
 _0801C148:
 	movs r0, #0
 	bl sub_0801DEFC
@@ -6304,16 +6304,16 @@ sub_0801C180: @ 0x0801C180
 	asrs r0, r0, #0x18
 	cmp r0, #0
 	beq _0801C1B0
-	ldr r0, _0801C1AC @ =0x0202BBF4
+	ldr r0, _0801C1AC @ =gPlaySt
 	adds r0, #0x43
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1d
 	b _0801C1B8
 	.align 2, 0
 _0801C1A8: .4byte 0x081C9304
-_0801C1AC: .4byte 0x0202BBF4
+_0801C1AC: .4byte gPlaySt
 _0801C1B0:
-	ldr r0, _0801C214 @ =0x0202BBF4
+	ldr r0, _0801C214 @ =gPlaySt
 	adds r0, #0x42
 	ldrh r0, [r0]
 	lsls r0, r0, #0x17
@@ -6361,7 +6361,7 @@ _0801C1D6:
 	pop {r1}
 	bx r1
 	.align 2, 0
-_0801C214: .4byte 0x0202BBF4
+_0801C214: .4byte gPlaySt
 _0801C218: .4byte 0x081C9318
 _0801C21C: .4byte 0x081C9310
 _0801C220: .4byte 0x02022C60
@@ -6371,7 +6371,7 @@ sub_0801C224: @ 0x0801C224
 	push {r4, r5, r6, lr}
 	adds r6, r0, #0
 	adds r5, r1, #0
-	ldr r2, _0801C254 @ =0x08BBFC7C
+	ldr r2, _0801C254 @ =gpKeySt
 	ldr r1, [r2]
 	movs r0, #0x31
 	ldrh r1, [r1, #8]
@@ -6385,17 +6385,17 @@ sub_0801C224: @ 0x0801C224
 	adds r4, r0, #0
 	cmp r1, #0
 	beq _0801C25C
-	ldr r1, _0801C258 @ =0x0202BBF4
+	ldr r1, _0801C258 @ =gPlaySt
 	adds r0, r1, #0
 	adds r0, #0x43
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1d
 	b _0801C266
 	.align 2, 0
-_0801C254: .4byte 0x08BBFC7C
-_0801C258: .4byte 0x0202BBF4
+_0801C254: .4byte gpKeySt
+_0801C258: .4byte gPlaySt
 _0801C25C:
-	ldr r1, _0801C2AC @ =0x0202BBF4
+	ldr r1, _0801C2AC @ =gPlaySt
 	adds r0, r1, #0
 	adds r0, #0x42
 	ldrh r0, [r0]
@@ -6441,7 +6441,7 @@ _0801C28C:
 	strb r0, [r2]
 	b _0801C2C4
 	.align 2, 0
-_0801C2AC: .4byte 0x0202BBF4
+_0801C2AC: .4byte gPlaySt
 _0801C2B0:
 	adds r2, r1, #0
 	adds r2, #0x42
@@ -6505,7 +6505,7 @@ sub_0801C2F4: @ 0x0801C2F4
 	movs r2, #1
 	movs r3, #0
 	bl sub_080C0C30
-	ldr r6, _0801C3F0 @ =0x0202BBF4
+	ldr r6, _0801C3F0 @ =gPlaySt
 	adds r7, r6, #0
 	adds r7, #0x2b
 	movs r0, #1
@@ -6595,7 +6595,7 @@ _0801C396:
 	.align 2, 0
 _0801C3E8: .4byte 0x081C9334
 _0801C3EC: .4byte 0x02022C60
-_0801C3F0: .4byte 0x0202BBF4
+_0801C3F0: .4byte gPlaySt
 _0801C3F4: .4byte 0x081C8FCC
 _0801C3F8:
 	adds r4, r5, #0
@@ -6634,7 +6634,7 @@ sub_0801C43C: @ 0x0801C43C
 	push {r4, r5, r6, r7, lr}
 	adds r5, r0, #0
 	adds r6, r1, #0
-	ldr r1, _0801C508 @ =0x08BBFC7C
+	ldr r1, _0801C508 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r2, [r0, #6]
 	movs r0, #0xcd
@@ -6647,7 +6647,7 @@ sub_0801C43C: @ 0x0801C43C
 	ands r0, r2
 	cmp r0, #0
 	beq _0801C480
-	ldr r3, _0801C50C @ =0x0202BBF4
+	ldr r3, _0801C50C @ =gPlaySt
 	ldrh r2, [r3, #0x2c]
 	lsls r0, r2, #0x13
 	lsrs r0, r0, #0x17
@@ -6673,7 +6673,7 @@ _0801C480:
 	ands r0, r1
 	cmp r0, #0
 	beq _0801C4AC
-	ldr r3, _0801C50C @ =0x0202BBF4
+	ldr r3, _0801C50C @ =gPlaySt
 	ldrh r2, [r3, #0x2c]
 	lsls r0, r2, #0x13
 	lsrs r0, r0, #0x17
@@ -6698,7 +6698,7 @@ _0801C4AC:
 	ands r0, r1
 	cmp r0, #0
 	beq _0801C4C8
-	ldr r1, _0801C50C @ =0x0202BBF4
+	ldr r1, _0801C50C @ =gPlaySt
 	adds r1, #0x2b
 	movs r0, #2
 	rsbs r0, r0, #0
@@ -6713,7 +6713,7 @@ _0801C4C8:
 	ands r0, r3
 	cmp r0, #0
 	beq _0801C4E2
-	ldr r1, _0801C50C @ =0x0202BBF4
+	ldr r1, _0801C50C @ =gPlaySt
 	adds r1, #0x2b
 	movs r0, #1
 	ldrb r7, [r1]
@@ -6725,7 +6725,7 @@ _0801C4E2:
 	ands r0, r2
 	cmp r0, #0
 	beq _0801C542
-	ldr r0, _0801C50C @ =0x0202BBF4
+	ldr r0, _0801C50C @ =gPlaySt
 	adds r4, r0, #0
 	adds r4, #0x2b
 	ldrb r2, [r4]
@@ -6739,8 +6739,8 @@ _0801C4E2:
 	orrs r0, r1
 	b _0801C540
 	.align 2, 0
-_0801C508: .4byte 0x08BBFC7C
-_0801C50C: .4byte 0x0202BBF4
+_0801C508: .4byte gpKeySt
+_0801C50C: .4byte gPlaySt
 _0801C510: .4byte 0x000001FF
 _0801C514: .4byte 0xFFFFE00F
 _0801C518:
@@ -6811,7 +6811,7 @@ _0801C580: .4byte 0x0203A858
 	thumb_func_start sub_0801C584
 sub_0801C584: @ 0x0801C584
 	push {lr}
-	ldr r1, _0801C5B8 @ =0x08BBFC7C
+	ldr r1, _0801C5B8 @ =gpKeySt
 	ldr r2, [r1]
 	movs r0, #2
 	ldrh r3, [r2, #4]
@@ -6833,7 +6833,7 @@ sub_0801C584: @ 0x0801C584
 	bl sub_08015BE4
 	b _0801C5D8
 	.align 2, 0
-_0801C5B8: .4byte 0x08BBFC7C
+_0801C5B8: .4byte gpKeySt
 _0801C5BC: .4byte 0x0202BBB4
 _0801C5C0: .4byte 0x00070007
 _0801C5C4:
@@ -6854,7 +6854,7 @@ _0801C5D8:
 	ands r0, r1
 	cmp r0, #0
 	beq _0801C5F6
-	ldr r0, _0801C600 @ =0x08BBFC7C
+	ldr r0, _0801C600 @ =gpKeySt
 	ldr r1, [r0]
 	ldr r0, _0801C604 @ =0x0000FCF4
 	ldrh r3, [r1, #8]
@@ -6865,7 +6865,7 @@ _0801C5F6:
 	bx r0
 	.align 2, 0
 _0801C5FC: .4byte 0x0202BBB4
-_0801C600: .4byte 0x08BBFC7C
+_0801C600: .4byte gpKeySt
 _0801C604: .4byte 0x0000FCF4
 
 	thumb_func_start sub_0801C608
@@ -6892,7 +6892,7 @@ sub_0801C624: @ 0x0801C624
 	push {r4, r5, r6, lr}
 	adds r6, r0, #0
 	bl sub_0801C584
-	ldr r4, _0801C660 @ =0x08BBFC7C
+	ldr r4, _0801C660 @ =gpKeySt
 	ldr r1, [r4]
 	movs r0, #0x80
 	lsls r0, r0, #2
@@ -6906,7 +6906,7 @@ sub_0801C624: @ 0x0801C624
 	movs r3, #0x16
 	ldrsh r1, [r1, r3]
 	bl sub_0801D758
-	ldr r0, _0801C668 @ =0x0202BBF4
+	ldr r0, _0801C668 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -6918,9 +6918,9 @@ _0801C658:
 	bl m4aSongNumStart
 	b _0801C89C
 	.align 2, 0
-_0801C660: .4byte 0x08BBFC7C
+_0801C660: .4byte gpKeySt
 _0801C664: .4byte 0x0202BBB4
-_0801C668: .4byte 0x0202BBF4
+_0801C668: .4byte gPlaySt
 _0801C66C: .4byte 0x0000038B
 _0801C670:
 	bl sub_0801DA38
@@ -6986,7 +6986,7 @@ _0801C696:
 _0801C6F8: .4byte 0x0202BBB4
 _0801C6FC: .4byte 0x0202E3D8
 _0801C700:
-	ldr r0, _0801C740 @ =0x08BBFC7C
+	ldr r0, _0801C740 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #1
 	ldrh r1, [r1, #8]
@@ -7016,7 +7016,7 @@ _0801C700:
 	beq _0801C7B8
 	b _0801C7D0
 	.align 2, 0
-_0801C740: .4byte 0x08BBFC7C
+_0801C740: .4byte gpKeySt
 _0801C744: .4byte 0x0202BBB4
 _0801C748: .4byte 0x0202E3D8
 _0801C74C:
@@ -7027,7 +7027,7 @@ _0801C74C:
 	cmp r0, #0
 	bne _0801C7D0
 	bl sub_0808667C
-	ldr r0, _0801C790 @ =0x0202BBF4
+	ldr r0, _0801C790 @ =gPlaySt
 	ldrh r1, [r5, #0x14]
 	strb r1, [r0, #0x12]
 	ldrh r1, [r5, #0x16]
@@ -7050,7 +7050,7 @@ _0801C776:
 	bl sub_08079890
 	b _0801C88A
 	.align 2, 0
-_0801C790: .4byte 0x0202BBF4
+_0801C790: .4byte gPlaySt
 _0801C794: .4byte 0x08C04DB0
 _0801C798:
 	adds r0, r4, #0
@@ -7077,7 +7077,7 @@ _0801C7B8:
 	bl sub_080045FC
 	b _0801C89C
 _0801C7D0:
-	ldr r1, _0801C830 @ =0x08BBFC7C
+	ldr r1, _0801C830 @ =gpKeySt
 	ldr r2, [r1]
 	movs r0, #4
 	ldrh r3, [r2, #8]
@@ -7087,7 +7087,7 @@ _0801C7D0:
 	ldrh r2, [r2, #4]
 	cmp r2, #4
 	bne _0801C840
-	ldr r2, _0801C834 @ =0x0202BBF4
+	ldr r2, _0801C834 @ =gPlaySt
 	ldrb r0, [r2, #0x1b]
 	cmp r0, #1
 	bne _0801C840
@@ -7121,8 +7121,8 @@ _0801C822:
 	bl sub_08032CA0
 	b _0801C88A
 	.align 2, 0
-_0801C830: .4byte 0x08BBFC7C
-_0801C834: .4byte 0x0202BBF4
+_0801C830: .4byte gpKeySt
+_0801C834: .4byte gPlaySt
 _0801C838: .4byte 0x0202BBB4
 _0801C83C: .4byte 0x0202E3D8
 _0801C840:
@@ -7287,7 +7287,7 @@ sub_0801C980: @ 0x0801C980
 	movs r0, #0xc0
 	ldrb r1, [r2, #0xb]
 	ands r0, r1
-	ldr r1, _0801CA10 @ =0x0202BBF4
+	ldr r1, _0801CA10 @ =gPlaySt
 	ldrb r1, [r1, #0xf]
 	cmp r0, r1
 	bne _0801C9BC
@@ -7330,7 +7330,7 @@ _0801C9BC:
 	bne _0801CA1C
 	movs r0, #0
 	bl sub_080303BC
-	ldr r0, _0801CA10 @ =0x0202BBF4
+	ldr r0, _0801CA10 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -7341,7 +7341,7 @@ _0801C9BC:
 	b _0801CA22
 	.align 2, 0
 _0801CA0C: .4byte 0x030045B0
-_0801CA10: .4byte 0x0202BBF4
+_0801CA10: .4byte gPlaySt
 _0801CA14: .4byte 0x0202BBB4
 _0801CA18: .4byte 0x00000389
 _0801CA1C:
@@ -7355,7 +7355,7 @@ _0801CA22:
 	thumb_func_start sub_0801CA28
 sub_0801CA28: @ 0x0801CA28
 	push {lr}
-	ldr r0, _0801CA54 @ =0x0202BBF4
+	ldr r0, _0801CA54 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -7376,7 +7376,7 @@ _0801CA3E:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0801CA54: .4byte 0x0202BBF4
+_0801CA54: .4byte gPlaySt
 _0801CA58: .4byte 0x0202BBB4
 _0801CA5C: .4byte 0x030045B0
 
@@ -7396,7 +7396,7 @@ sub_0801CA60: @ 0x0801CA60
 	movs r1, #1
 	rsbs r1, r1, #0
 	bl BmMapFillg
-	ldr r0, _0801CABC @ =0x0202BBF4
+	ldr r0, _0801CABC @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -7423,7 +7423,7 @@ _0801CA94:
 	.align 2, 0
 _0801CAB4: .4byte 0x0202BBB4
 _0801CAB8: .4byte 0x0202E3E0
-_0801CABC: .4byte 0x0202BBF4
+_0801CABC: .4byte gPlaySt
 _0801CAC0:
 	movs r0, #3
 	bl sub_0801D6A4
@@ -7438,7 +7438,7 @@ sub_0801CACC: @ 0x0801CACC
 	adds r5, r0, #0
 	movs r4, #0xff
 	bl sub_0801C584
-	ldr r0, _0801CAF4 @ =0x08BBFC7C
+	ldr r0, _0801CAF4 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #1
 	ldrh r1, [r1, #8]
@@ -7452,7 +7452,7 @@ sub_0801CACC: @ 0x0801CACC
 	bl GetCombinedEnemyWeaponUsabilityBits
 	b _0801CB26
 	.align 2, 0
-_0801CAF4: .4byte 0x08BBFC7C
+_0801CAF4: .4byte gpKeySt
 _0801CAF8: .4byte 0x030045B0
 _0801CAFC:
 	bl sub_0807982C
@@ -7493,7 +7493,7 @@ _0801CB30:
 	beq _0801CB92
 	movs r4, #1
 _0801CB48:
-	ldr r0, _0801CB70 @ =0x08BBFC7C
+	ldr r0, _0801CB70 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #2
@@ -7512,7 +7512,7 @@ _0801CB48:
 	b _0801CB92
 	.align 2, 0
 _0801CB6C: .4byte 0x0202BBB4
-_0801CB70: .4byte 0x08BBFC7C
+_0801CB70: .4byte gpKeySt
 _0801CB74: .4byte 0x030045B0
 _0801CB78:
 	movs r0, #0x80
@@ -7550,7 +7550,7 @@ _0801CBA8: @ jump table
 	.4byte _0801CD78 @ case 5
 	.4byte _0801CD48 @ case 6
 _0801CBC4:
-	ldr r0, _0801CBDC @ =0x0202BBF4
+	ldr r0, _0801CBDC @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -7563,7 +7563,7 @@ _0801CBD2:
 	bl m4aSongNumStart
 	b _0801CD78
 	.align 2, 0
-_0801CBDC: .4byte 0x0202BBF4
+_0801CBDC: .4byte gPlaySt
 _0801CBE0:
 	ldr r0, _0801CBFC @ =0x0202BD48
 	movs r2, #0
@@ -7616,7 +7616,7 @@ _0801CC3E:
 	bl sub_0801D6D8
 	bl sub_08019EA4
 	bl sub_08025BB0
-	ldr r0, _0801CC7C @ =0x0202BBF4
+	ldr r0, _0801CC7C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -7633,7 +7633,7 @@ _0801CC66:
 _0801CC70: .4byte 0x030045B0
 _0801CC74: .4byte 0x0202BD48
 _0801CC78: .4byte 0x0202BBB4
-_0801CC7C: .4byte 0x0202BBF4
+_0801CC7C: .4byte gPlaySt
 _0801CC80: .4byte 0x0000038B
 _0801CC84:
 	ldr r0, _0801CCEC @ =0x08BFFF78
@@ -7703,7 +7703,7 @@ _0801CD00:
 	movs r2, #2
 	ldrsh r1, [r4, r2]
 	bl sub_08015F0C
-	ldr r0, _0801CD40 @ =0x0202BBF4
+	ldr r0, _0801CD40 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -7715,7 +7715,7 @@ _0801CD00:
 	.align 2, 0
 _0801CD38: .4byte 0x030045B0
 _0801CD3C: .4byte 0x0202BD48
-_0801CD40: .4byte 0x0202BBF4
+_0801CD40: .4byte gPlaySt
 _0801CD44: .4byte 0x0000038B
 _0801CD48:
 	ldr r4, _0801CD6C @ =0x0202BBB4
@@ -8040,7 +8040,7 @@ _0801CFF8:
 	ldr r0, [r5]
 	bl sub_0806C2DC
 	bl sub_0806C7CC
-	ldr r0, _0801D03C @ =0x0202BBF4
+	ldr r0, _0801D03C @ =gPlaySt
 	ldrb r0, [r0, #0xd]
 	cmp r0, #0
 	beq _0801D040
@@ -8050,7 +8050,7 @@ _0801CFF8:
 	b _0801D048
 	.align 2, 0
 _0801D038: .4byte 0x0202E3E4
-_0801D03C: .4byte 0x0202BBF4
+_0801D03C: .4byte gPlaySt
 _0801D040:
 	adds r0, r6, #0
 	movs r1, #1
@@ -8106,7 +8106,7 @@ _0801D090: .4byte 0x030045B0
 sub_0801D094: @ 0x0801D094
 	push {r4, r5, lr}
 	adds r5, r0, #0
-	ldr r0, _0801D0C4 @ =0x0202BBF4
+	ldr r0, _0801D0C4 @ =gPlaySt
 	ldrb r0, [r0, #0xd]
 	cmp r0, #0
 	beq _0801D0CC
@@ -8122,7 +8122,7 @@ sub_0801D094: @ 0x0801D094
 	bl sub_08025BB0
 	b _0801D0DE
 	.align 2, 0
-_0801D0C4: .4byte 0x0202BBF4
+_0801D0C4: .4byte gPlaySt
 _0801D0C8: .4byte 0x0203A858
 _0801D0CC:
 	ldr r1, _0801D110 @ =0x0203A858
@@ -8140,7 +8140,7 @@ _0801D0DE:
 	lsls r1, r1, #0x18
 	asrs r1, r1, #0x18
 	bl sub_08015F0C
-	ldr r2, _0801D118 @ =0x0202BBF4
+	ldr r2, _0801D118 @ =gPlaySt
 	ldr r1, _0801D11C @ =0x0202BBB4
 	ldrh r0, [r1, #0x14]
 	strb r0, [r2, #0x12]
@@ -8157,7 +8157,7 @@ _0801D0DE:
 	.align 2, 0
 _0801D110: .4byte 0x0203A858
 _0801D114: .4byte 0x030045B0
-_0801D118: .4byte 0x0202BBF4
+_0801D118: .4byte gPlaySt
 _0801D11C: .4byte 0x0202BBB4
 _0801D120:
 	bl sub_0807977C
@@ -8184,7 +8184,7 @@ _0801D14C:
 	thumb_func_start sub_0801D154
 sub_0801D154: @ 0x0801D154
 	push {lr}
-	ldr r0, _0801D17C @ =0x0202BBF4
+	ldr r0, _0801D17C @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	cmp r0, #0
 	bne _0801D178
@@ -8200,7 +8200,7 @@ _0801D178:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0801D17C: .4byte 0x0202BBF4
+_0801D17C: .4byte gPlaySt
 _0801D180: .4byte 0x0203A858
 
 	thumb_func_start sub_0801D184
@@ -8318,7 +8318,7 @@ _0801D26C: .4byte 0x0202BBB4
 sub_0801D270: @ 0x0801D270
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _0801D29C @ =0x0202BBF4
+	ldr r0, _0801D29C @ =gPlaySt
 	ldrb r2, [r0, #0xf]
 	cmp r4, #0
 	beq _0801D2AA
@@ -8337,7 +8337,7 @@ sub_0801D270: @ 0x0801D270
 	movs r0, #4
 	b _0801D2F2
 	.align 2, 0
-_0801D29C: .4byte 0x0202BBF4
+_0801D29C: .4byte gPlaySt
 _0801D2A0: .4byte 0x0202BBB4
 _0801D2A4:
 	movs r2, #0
@@ -9002,7 +9002,7 @@ _0801D7AC: .4byte 0x0202E3D8
 sub_0801D7B0: @ 0x0801D7B0
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r1, _0801D7DC @ =0x0202BBF4
+	ldr r1, _0801D7DC @ =gPlaySt
 	adds r0, r1, #0
 	adds r0, #0x41
 	ldrb r0, [r0]
@@ -9021,7 +9021,7 @@ _0801D7D4:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0801D7DC: .4byte 0x0202BBF4
+_0801D7DC: .4byte gPlaySt
 
 	thumb_func_start sub_0801D7E0
 sub_0801D7E0: @ 0x0801D7E0
@@ -9353,7 +9353,7 @@ sub_0801DA50: @ 0x0801DA50
 	push {r4, r5, r6, lr}
 	adds r5, r0, #0
 	adds r6, r1, #0
-	ldr r4, _0801DA90 @ =0x0202BBF4
+	ldr r4, _0801DA90 @ =gPlaySt
 	ldrh r0, [r4, #0x10]
 	cmp r0, #1
 	bne _0801DA6E
@@ -9381,7 +9381,7 @@ _0801DA6E:
 	ldrsb r0, [r1, r0]
 	b _0801DA9A
 	.align 2, 0
-_0801DA90: .4byte 0x0202BBF4
+_0801DA90: .4byte gPlaySt
 _0801DA94:
 	ldrb r0, [r4, #0x12]
 	str r0, [r5]
@@ -9398,12 +9398,12 @@ sub_0801DAA4: @ 0x0801DAA4
 	push {r4, r5, r6, lr}
 	adds r6, r0, #0
 	adds r5, r1, #0
-	ldr r0, _0801DAB4 @ =0x0202BBF4
+	ldr r0, _0801DAB4 @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	adds r4, r0, #1
 	b _0801DAF8
 	.align 2, 0
-_0801DAB4: .4byte 0x0202BBF4
+_0801DAB4: .4byte gPlaySt
 _0801DAB8:
 	adds r0, r4, #0
 	bl sub_080190F4
@@ -9435,7 +9435,7 @@ _0801DAB8:
 	bne _0801DAFE
 _0801DAF2:
 	adds r4, #1
-	ldr r0, _0801DB08 @ =0x0202BBF4
+	ldr r0, _0801DB08 @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 _0801DAF8:
 	adds r0, #0x40
@@ -9447,7 +9447,7 @@ _0801DAFE:
 	bx r0
 	.align 2, 0
 _0801DB04: .4byte 0x00000201
-_0801DB08: .4byte 0x0202BBF4
+_0801DB08: .4byte gPlaySt
 
 	thumb_func_start sub_0801DB0C
 sub_0801DB0C: @ 0x0801DB0C
@@ -9458,7 +9458,7 @@ sub_0801DB0C: @ 0x0801DB0C
 	rsbs r0, r0, #0
 	str r0, [sp]
 	str r0, [sp, #4]
-	ldr r4, _0801DB30 @ =0x0202BBF4
+	ldr r4, _0801DB30 @ =gPlaySt
 	ldrb r0, [r4, #0xf]
 	bl sub_08023C9C
 	cmp r0, #0
@@ -9467,7 +9467,7 @@ sub_0801DB0C: @ 0x0801DB0C
 	bl sub_08004460
 	b _0801DB76
 	.align 2, 0
-_0801DB30: .4byte 0x0202BBF4
+_0801DB30: .4byte gPlaySt
 _0801DB34:
 	ldrb r0, [r4, #0xf]
 	cmp r0, #0x40
@@ -9916,7 +9916,7 @@ sub_0801DEB0: @ 0x0801DEB0
 	movs r0, #0
 	b _0801DEE4
 _0801DEBE:
-	ldr r0, _0801DEEC @ =0x08BBFC7C
+	ldr r0, _0801DEEC @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0
 	strh r0, [r1, #8]
@@ -9939,7 +9939,7 @@ _0801DEE4:
 	pop {r1}
 	bx r1
 	.align 2, 0
-_0801DEEC: .4byte 0x08BBFC7C
+_0801DEEC: .4byte gpKeySt
 _0801DEF0: .4byte 0x0203A858
 _0801DEF4: .4byte 0x030045B0
 _0801DEF8: .4byte 0x0202BBB4
@@ -9950,7 +9950,7 @@ sub_0801DEFC: @ 0x0801DEFC
 	adds r4, r0, #0
 	cmp r4, #0
 	bge _0801DF12
-	ldr r0, _0801DF34 @ =0x0202BBF4
+	ldr r0, _0801DF34 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -9958,7 +9958,7 @@ sub_0801DEFC: @ 0x0801DEFC
 	ldrb r4, [r0, #0xc]
 _0801DF12:
 	bl sub_0801996C
-	ldr r0, _0801DF34 @ =0x0202BBF4
+	ldr r0, _0801DF34 @ =gPlaySt
 	strb r4, [r0, #0xd]
 	bl sub_08019EA4
 	bl sub_08025BB0
@@ -9969,7 +9969,7 @@ _0801DF12:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0801DF34: .4byte 0x0202BBF4
+_0801DF34: .4byte gPlaySt
 
 	thumb_func_start sub_0801DF38
 sub_0801DF38: @ 0x0801DF38
@@ -9977,14 +9977,14 @@ sub_0801DF38: @ 0x0801DF38
 	adds r1, r0, #0
 	cmp r1, #0
 	bge _0801DF4E
-	ldr r0, _0801DF64 @ =0x0202BBF4
+	ldr r0, _0801DF64 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
 	bl sub_08031A5C
 	ldrb r1, [r0, #0xc]
 _0801DF4E:
-	ldr r0, _0801DF64 @ =0x0202BBF4
+	ldr r0, _0801DF64 @ =gPlaySt
 	strb r1, [r0, #0xd]
 	bl sub_08019EA4
 	bl sub_08025BB0
@@ -9992,7 +9992,7 @@ _0801DF4E:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0801DF64: .4byte 0x0202BBF4
+_0801DF64: .4byte gPlaySt
 
 	thumb_func_start sub_0801DF68
 sub_0801DF68: @ 0x0801DF68
@@ -10027,7 +10027,7 @@ sub_0801DF68: @ 0x0801DF68
 	adds r1, r5, #0
 	movs r2, #1
 	bl sub_0801B57C
-	ldr r0, _0801E03C @ =0x0202BBF4
+	ldr r0, _0801E03C @ =gPlaySt
 	ldrb r0, [r0, #0xd]
 	cmp r0, #0
 	bne _0801E04C
@@ -10099,7 +10099,7 @@ _0801E02A:
 	.align 2, 0
 _0801E034: .4byte 0x0202E3E0
 _0801E038: .4byte 0x0202E3E4
-_0801E03C: .4byte 0x0202BBF4
+_0801E03C: .4byte gPlaySt
 _0801E040: .4byte 0x0202E3D4
 _0801E044: .4byte 0x0202E3DC
 _0801E048: .4byte 0x0202E3D8
@@ -10436,7 +10436,7 @@ sub_0801E2A0: @ 0x0801E2A0
 	movs r0, #3
 	strb r0, [r5]
 	adds r0, r6, #0
-	bl sub_08016BF4
+	bl GetUnitEquippedWeaponSlot
 	adds r1, r4, #0
 	adds r1, #0x33
 	strb r0, [r1]
@@ -11238,7 +11238,7 @@ sub_0801E94C: @ 0x0801E94C
 	movs r0, #4
 	bl sub_080034C8
 _0801E964:
-	ldr r0, _0801E984 @ =0x0202BBF4
+	ldr r0, _0801E984 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -11255,7 +11255,7 @@ _0801E976:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0801E984: .4byte 0x0202BBF4
+_0801E984: .4byte gPlaySt
 _0801E988: .4byte 0x00000393
 
 	thumb_func_start sub_0801E98C
@@ -11745,7 +11745,7 @@ _0801ED2C: .4byte 0x0202BBB4
 sub_0801ED30: @ 0x0801ED30
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _0801ED4C @ =0x0202BBF4
+	ldr r0, _0801ED4C @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	bl sub_08023C9C
 	cmp r0, #0
@@ -11757,7 +11757,7 @@ _0801ED46:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0801ED4C: .4byte 0x0202BBF4
+_0801ED4C: .4byte gPlaySt
 
 	thumb_func_start sub_0801ED50
 sub_0801ED50: @ 0x0801ED50
@@ -11777,7 +11777,7 @@ sub_0801ED50: @ 0x0801ED50
 	movs r1, #0
 	movs r2, #0
 	bl sub_08001D64
-	ldr r0, _0801ED94 @ =0x0202BBF4
+	ldr r0, _0801ED94 @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	cmp r0, #0x40
 	beq _0801EDD8
@@ -11789,7 +11789,7 @@ sub_0801ED50: @ 0x0801ED50
 	.align 2, 0
 _0801ED8C: .4byte 0x08191074
 _0801ED90: .4byte 0x06002000
-_0801ED94: .4byte 0x0202BBF4
+_0801ED94: .4byte gPlaySt
 _0801ED98:
 	cmp r0, #0x80
 	beq _0801EDB8
@@ -12500,7 +12500,7 @@ sub_0801F350: @ 0x0801F350
 	bl sub_080043D4
 	adds r5, r0, #0
 	adds r0, r4, #0
-	bl sub_0802C7D8
+	bl GetTrap
 	adds r1, r0, #0
 	movs r0, #1
 	ldrb r2, [r1, #3]
@@ -12640,7 +12640,7 @@ sub_0801F454: @ 0x0801F454
 	lsls r0, r0, #0x10
 	cmp r0, #0
 	blt _0801F476
-	ldr r0, _0801F480 @ =0x08BBFC7C
+	ldr r0, _0801F480 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #3
 	ldrh r1, [r1, #8]
@@ -12654,7 +12654,7 @@ _0801F47C:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0801F480: .4byte 0x08BBFC7C
+_0801F480: .4byte gpKeySt
 
 	thumb_func_start sub_0801F484
 sub_0801F484: @ 0x0801F484
@@ -12993,7 +12993,7 @@ sub_0801F748: @ 0x0801F748
 sub_0801F758: @ 0x0801F758
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _0801F7AC @ =0x08BBFC7C
+	ldr r0, _0801F7AC @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0xb
 	ldrh r1, [r1, #8]
@@ -13035,7 +13035,7 @@ _0801F7A6:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0801F7AC: .4byte 0x08BBFC7C
+_0801F7AC: .4byte gpKeySt
 
 	thumb_func_start sub_0801F7B0
 sub_0801F7B0: @ 0x0801F7B0
@@ -13426,7 +13426,7 @@ sub_0801F9D8: @ 0x0801F9D8
 	bl sub_08082E9C
 	movs r4, #0x80
 	lsls r4, r4, #1
-	ldr r0, _0801FB70 @ =0x0202BBF4
+	ldr r0, _0801FB70 @ =gPlaySt
 	bl sub_08082F30
 	adds r1, r0, #0
 	adds r0, r4, #0
@@ -13491,7 +13491,7 @@ _0801FB60: .4byte 0x02023460
 _0801FB64: .4byte 0x02023C60
 _0801FB68: .4byte 0x02024460
 _0801FB6C: .4byte 0x03002790
-_0801FB70: .4byte 0x0202BBF4
+_0801FB70: .4byte gPlaySt
 _0801FB74: .4byte 0x00000246
 _0801FB78: .4byte 0x08406218
 _0801FB7C: .4byte 0x0600A000
@@ -13647,7 +13647,7 @@ sub_0801FC6C: @ 0x0801FC6C
 	adds r1, r2, #0
 	orrs r0, r1
 	strh r0, [r3, #0x3c]
-	ldr r0, _0801FCCC @ =0x0202BBF4
+	ldr r0, _0801FCCC @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -13662,7 +13662,7 @@ _0801FCBC:
 _0801FCC0: .4byte 0x03002790
 _0801FCC4: .4byte 0x0000FFE0
 _0801FCC8: .4byte 0x0000E0FF
-_0801FCCC: .4byte 0x0202BBF4
+_0801FCCC: .4byte gPlaySt
 
 	thumb_func_start sub_0801FCD0
 sub_0801FCD0: @ 0x0801FCD0
@@ -13771,7 +13771,7 @@ sub_0801FD78: @ 0x0801FD78
 	movs r1, #0x10
 	orrs r0, r1
 	strb r0, [r2, #1]
-	ldr r0, _0801FDB4 @ =0x0202BBF4
+	ldr r0, _0801FDB4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -13784,7 +13784,7 @@ _0801FDAC:
 	bx r0
 	.align 2, 0
 _0801FDB0: .4byte 0x03002790
-_0801FDB4: .4byte 0x0202BBF4
+_0801FDB4: .4byte gPlaySt
 
 	thumb_func_start sub_0801FDB8
 sub_0801FDB8: @ 0x0801FDB8
@@ -14046,7 +14046,7 @@ sub_0801FFA8: @ 0x0801FFA8
 	movs r0, #0
 	bl sub_08002A44
 	bl sub_08015A48
-	ldr r0, _0801FFCC @ =0x0202BBF4
+	ldr r0, _0801FFCC @ =gPlaySt
 	ldrb r0, [r0, #0x15]
 	bl sub_0802D8E4
 	bl sub_08025BB0
@@ -14055,7 +14055,7 @@ sub_0801FFA8: @ 0x0801FFA8
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0801FFCC: .4byte 0x0202BBF4
+_0801FFCC: .4byte gPlaySt
 
 	thumb_func_start sub_0801FFD0
 sub_0801FFD0: @ 0x0801FFD0
@@ -14125,7 +14125,7 @@ sub_0801FFE0: @ 0x0801FFE0
 	movs r0, #4
 	bl sub_08000FD4
 	bl sub_0802E310
-	ldr r4, _080200C4 @ =0x0202BBF4
+	ldr r4, _080200C4 @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r4, r0]
 	bl sub_080195BC
@@ -14168,7 +14168,7 @@ _080200B4: .4byte 0x03002790
 _080200B8: .4byte 0x0000FFE0
 _080200BC: .4byte 0x0000E0FF
 _080200C0: .4byte 0x02023C60
-_080200C4: .4byte 0x0202BBF4
+_080200C4: .4byte gPlaySt
 _080200C8: .4byte 0x0202BBB4
 
 	thumb_func_start sub_080200CC
@@ -14208,7 +14208,7 @@ sub_080200CC: @ 0x080200CC
 	adds r4, #0x4c
 	movs r0, #0x1e
 	strh r0, [r4]
-	ldr r0, _08020140 @ =0x0202BBF4
+	ldr r0, _08020140 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -14223,7 +14223,7 @@ _08020136:
 	bx r0
 	.align 2, 0
 _0802013C: .4byte 0x02022920
-_08020140: .4byte 0x0202BBF4
+_08020140: .4byte gPlaySt
 
 	thumb_func_start sub_08020144
 sub_08020144: @ 0x08020144
@@ -14237,7 +14237,7 @@ sub_08020144: @ 0x08020144
 	b _08020294
 _08020156:
 	bl sub_080C0C38
-	ldr r4, _080201E4 @ =0x0202BBF4
+	ldr r4, _080201E4 @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r4, r0]
 	bl sub_08031A5C
@@ -14304,7 +14304,7 @@ _080201BA:
 	adds r5, r3, #0
 	b _08020236
 	.align 2, 0
-_080201E4: .4byte 0x0202BBF4
+_080201E4: .4byte gPlaySt
 _080201E8: .4byte 0x0000FFFF
 _080201EC: .4byte 0x03002790
 _080201F0:
@@ -14351,7 +14351,7 @@ _08020236:
 	asrs r0, r0, #0x10
 	cmp r0, #0x18
 	bne _08020282
-	ldr r4, _080202A0 @ =0x0202BBF4
+	ldr r4, _080202A0 @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r4, r0]
 	bl sub_08031A5C
@@ -14395,7 +14395,7 @@ _08020294:
 	bx r0
 	.align 2, 0
 _0802029C: .4byte 0x03002790
-_080202A0: .4byte 0x0202BBF4
+_080202A0: .4byte gPlaySt
 _080202A4: .4byte 0x0000FFFF
 
 	thumb_func_start sub_080202A8
@@ -14593,7 +14593,7 @@ sub_080203D0: @ 0x080203D0
 	adds r4, #0x4c
 	movs r0, #0xe
 	strh r0, [r4]
-	ldr r4, _08020470 @ =0x0202BBF4
+	ldr r4, _08020470 @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r4, r0]
 	bl sub_08031A5C
@@ -14629,7 +14629,7 @@ _08020466:
 	bx r0
 	.align 2, 0
 _0802046C: .4byte 0x02022920
-_08020470: .4byte 0x0202BBF4
+_08020470: .4byte gPlaySt
 _08020474: .4byte 0x0000FFFF
 
 	thumb_func_start sub_08020478
@@ -14637,7 +14637,7 @@ sub_08020478: @ 0x08020478
 	push {r4, r5, lr}
 	adds r4, r0, #0
 	bl sub_080C0C38
-	ldr r5, _080204CC @ =0x0202BBF4
+	ldr r5, _080204CC @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r5, r0]
 	bl sub_08031A5C
@@ -14673,7 +14673,7 @@ _08020494:
 	strb r0, [r2, #1]
 	b _080204DC
 	.align 2, 0
-_080204CC: .4byte 0x0202BBF4
+_080204CC: .4byte gPlaySt
 _080204D0: .4byte 0x03002790
 _080204D4:
 	bl sub_08001034
@@ -14752,7 +14752,7 @@ sub_08020540: @ 0x08020540
 	cmp r1, #0
 	bne _08020574
 	bl sub_080C0C38
-	ldr r0, _0802057C @ =0x0202BBF4
+	ldr r0, _0802057C @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -14770,7 +14770,7 @@ _08020574:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0802057C: .4byte 0x0202BBF4
+_0802057C: .4byte gPlaySt
 
 	thumb_func_start sub_08020580
 sub_08020580: @ 0x08020580
@@ -15085,7 +15085,7 @@ sub_080207FC: @ 0x080207FC
 	movs r1, #0x63
 	bl sub_080045FC
 _08020818:
-	ldr r0, _08020834 @ =0x08BBFC7C
+	ldr r0, _08020834 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0xb
 	ldrh r1, [r1, #8]
@@ -15100,7 +15100,7 @@ _0802082E:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08020834: .4byte 0x08BBFC7C
+_08020834: .4byte gpKeySt
 
 	thumb_func_start sub_08020838
 sub_08020838: @ 0x08020838
@@ -15238,7 +15238,7 @@ _0802092E:
 	bl sub_080017E8
 	movs r0, #1
 	bl sub_08000FD4
-	ldr r0, _080209C0 @ =0x0202BBF4
+	ldr r0, _080209C0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -15290,7 +15290,7 @@ _080209B0: .4byte 0x08196DAC
 _080209B4: .4byte 0x08196DCC
 _080209B8: .4byte 0x0200323C
 _080209BC: .4byte 0x02022C60
-_080209C0: .4byte 0x0202BBF4
+_080209C0: .4byte gPlaySt
 _080209C4: .4byte 0x03002790
 _080209C8: .4byte 0x0000FFE0
 _080209CC: .4byte 0x0000E0FF
@@ -15685,7 +15685,7 @@ _08020CDA:
 	bl sub_080017E8
 	movs r0, #1
 	bl sub_08000FD4
-	ldr r0, _08020D80 @ =0x0202BBF4
+	ldr r0, _08020D80 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -15748,7 +15748,7 @@ _08020D70: .4byte 0x08198AE4
 _08020D74: .4byte 0x08198B04
 _08020D78: .4byte 0x0200323C
 _08020D7C: .4byte 0x02022C60
-_08020D80: .4byte 0x0202BBF4
+_08020D80: .4byte gPlaySt
 _08020D84: .4byte 0x03002790
 _08020D88: .4byte 0x0000FFE0
 _08020D8C: .4byte 0x0000E0FF
@@ -15773,7 +15773,7 @@ _08020DA2:
 	adds r2, #0x4c
 	cmp r0, #0
 	beq _08020DC6
-	ldr r0, _08020DF4 @ =0x08BBFC7C
+	ldr r0, _08020DF4 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #1
 	ldrh r1, [r1, #4]
@@ -15804,7 +15804,7 @@ _08020DC6:
 	.align 2, 0
 _08020DEC: .4byte 0x08C02ECC
 _08020DF0: .4byte 0x08C02E88
-_08020DF4: .4byte 0x08BBFC7C
+_08020DF4: .4byte gpKeySt
 _08020DF8:
 	lsls r0, r6, #0x10
 	asrs r0, r0, #0x10
@@ -15834,7 +15834,7 @@ _08020E28: .4byte 0x02022C60
 	thumb_func_start sub_08020E2C
 sub_08020E2C: @ 0x08020E2C
 	push {lr}
-	ldr r0, _08020E54 @ =0x0202BBF4
+	ldr r0, _08020E54 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -15851,7 +15851,7 @@ _08020E40:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08020E54: .4byte 0x0202BBF4
+_08020E54: .4byte gPlaySt
 _08020E58: .4byte 0x02022C60
 
 	thumb_func_start sub_08020E5C
@@ -16998,7 +16998,7 @@ _0802174C: .4byte 0x08C02FC8
 	thumb_func_start sub_08021750
 sub_08021750: @ 0x08021750
 	push {lr}
-	ldr r0, _08021768 @ =0x0202BBF4
+	ldr r0, _08021768 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -17010,7 +17010,7 @@ _08021764:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08021768: .4byte 0x0202BBF4
+_08021768: .4byte gPlaySt
 _0802176C: .4byte 0x000002F9
 
 	thumb_func_start sub_08021770
@@ -17303,7 +17303,7 @@ sub_080219B8: @ 0x080219B8
 
 	thumb_func_start sub_080219BC
 sub_080219BC: @ 0x080219BC
-	ldr r1, _080219CC @ =0x0202BBF4
+	ldr r1, _080219CC @ =gPlaySt
 	movs r0, #8
 	ldrb r1, [r1, #0x14]
 	ands r0, r1
@@ -17312,7 +17312,7 @@ sub_080219BC: @ 0x080219BC
 	movs r0, #1
 	b _080219D2
 	.align 2, 0
-_080219CC: .4byte 0x0202BBF4
+_080219CC: .4byte gPlaySt
 _080219D0:
 	movs r0, #2
 _080219D2:
@@ -19485,7 +19485,7 @@ _08022AD4:
 	adds r1, r1, r2
 	ldrh r1, [r1]
 	bl sub_08027584
-	ldr r0, _08022B20 @ =0x0202BBF4
+	ldr r0, _08022B20 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -19506,7 +19506,7 @@ _08022B10:
 	.align 2, 0
 _08022B18: .4byte 0x030045B0
 _08022B1C: .4byte 0x0203A858
-_08022B20: .4byte 0x0202BBF4
+_08022B20: .4byte gPlaySt
 _08022B24: .4byte 0x0000038A
 
 	thumb_func_start sub_08022B28
@@ -21938,7 +21938,7 @@ _08023D5E:
 
 	thumb_func_start sub_08023D64
 sub_08023D64: @ 0x08023D64
-	ldr r1, _08023D74 @ =0x0202BBF4
+	ldr r1, _08023D74 @ =gPlaySt
 	movs r0, #0x80
 	ldrb r1, [r1, #0xf]
 	ands r0, r1
@@ -21946,11 +21946,11 @@ sub_08023D64: @ 0x08023D64
 	lsrs r0, r0, #0x18
 	bx lr
 	.align 2, 0
-_08023D74: .4byte 0x0202BBF4
+_08023D74: .4byte gPlaySt
 
 	thumb_func_start sub_08023D78
 sub_08023D78: @ 0x08023D78
-	ldr r1, _08023D8C @ =0x0202BBF4
+	ldr r1, _08023D8C @ =gPlaySt
 	movs r2, #0x80
 	movs r0, #0x80
 	ldrb r1, [r1, #0xf]
@@ -21960,19 +21960,19 @@ sub_08023D78: @ 0x08023D78
 	lsrs r0, r0, #0x18
 	bx lr
 	.align 2, 0
-_08023D8C: .4byte 0x0202BBF4
+_08023D8C: .4byte gPlaySt
 
 	thumb_func_start sub_08023D90
 sub_08023D90: @ 0x08023D90
-	ldr r0, _08023D98 @ =0x0202BBF4
+	ldr r0, _08023D98 @ =gPlaySt
 	ldr r0, [r0, #8]
 	bx lr
 	.align 2, 0
-_08023D98: .4byte 0x0202BBF4
+_08023D98: .4byte gPlaySt
 
 	thumb_func_start SetPartyGoldAmount
 SetPartyGoldAmount: @ 0x08023D9C
-	ldr r2, _08023DAC @ =0x0202BBF4
+	ldr r2, _08023DAC @ =gPlaySt
 	str r0, [r2, #8]
 	ldr r1, _08023DB0 @ =0x000F423F
 	cmp r0, r1
@@ -21981,12 +21981,12 @@ SetPartyGoldAmount: @ 0x08023D9C
 _08023DA8:
 	bx lr
 	.align 2, 0
-_08023DAC: .4byte 0x0202BBF4
+_08023DAC: .4byte gPlaySt
 _08023DB0: .4byte 0x000F423F
 
 	thumb_func_start sub_08023DB4
 sub_08023DB4: @ 0x08023DB4
-	ldr r2, _08023DC8 @ =0x0202BBF4
+	ldr r2, _08023DC8 @ =gPlaySt
 	ldr r1, [r2, #8]
 	adds r1, r1, r0
 	str r1, [r2, #8]
@@ -21997,7 +21997,7 @@ sub_08023DB4: @ 0x08023DB4
 _08023DC4:
 	bx lr
 	.align 2, 0
-_08023DC8: .4byte 0x0202BBF4
+_08023DC8: .4byte gPlaySt
 _08023DCC: .4byte 0x000F423F
 
 	thumb_func_start sub_08023DD0
@@ -22280,7 +22280,7 @@ _08023FE8: .4byte 0x02033E3C
 sub_08023FEC: @ 0x08023FEC
 	push {r4, r5, r6, lr}
 	movs r0, #0
-	bl sub_0802C7D8
+	bl GetTrap
 	adds r4, r0, #0
 	ldrb r0, [r4, #2]
 	cmp r0, #0
@@ -24260,7 +24260,7 @@ sub_08024F6C: @ 0x08024F6C
 	ldrb r0, [r0]
 	cmp r0, #0
 	bne _08024FD4
-	ldr r0, _08024FE0 @ =0x0202BBF4
+	ldr r0, _08024FE0 @ =gPlaySt
 	ldrb r0, [r0, #0xd]
 	cmp r0, #0
 	beq _08024F9C
@@ -24305,7 +24305,7 @@ _08024FD4:
 	bx r0
 	.align 2, 0
 _08024FDC: .4byte 0x0202E3D8
-_08024FE0: .4byte 0x0202BBF4
+_08024FE0: .4byte gPlaySt
 _08024FE4: .4byte 0x0202E3E8
 _08024FE8: .4byte 0x02033E3C
 _08024FEC: .4byte 0x0202E3DC
@@ -25931,7 +25931,7 @@ _08025C7A:
 	cmp r7, #0xc5
 	ble _08025BD0
 	movs r0, #0
-	bl sub_0802C7D8
+	bl GetTrap
 	adds r4, r0, #0
 	ldrb r0, [r4, #2]
 	cmp r0, #0
@@ -26278,7 +26278,7 @@ _08025F24: .4byte 0x08BFF770
 	thumb_func_start sub_08025F28
 sub_08025F28: @ 0x08025F28
 	push {r4, r5, lr}
-	ldr r4, _08025FC4 @ =0x0202BBF4
+	ldr r4, _08025FC4 @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r4, r0]
 	bl sub_08031A5C
@@ -26354,7 +26354,7 @@ _08025FBE:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08025FC4: .4byte 0x0202BBF4
+_08025FC4: .4byte gPlaySt
 _08025FC8: .4byte 0x0202E3E8
 _08025FCC: .4byte 0x0202E3DC
 _08025FD0: .4byte 0x0202BBB4
@@ -26374,7 +26374,7 @@ sub_08025FE0: @ 0x08025FE0
 	mov r0, sp
 	movs r2, #6
 	bl memcpy
-	ldr r0, _080260BC @ =0x0202BBF4
+	ldr r0, _080260BC @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -26466,7 +26466,7 @@ _080260AC:
 	mov pc, r0
 	.align 2, 0
 _080260B8: .4byte 0x081C9474
-_080260BC: .4byte 0x0202BBF4
+_080260BC: .4byte gPlaySt
 _080260C0: .4byte _080260C4
 _080260C4: @ jump table
 	.4byte _080260E4 @ case 0
@@ -27874,7 +27874,7 @@ sub_08026B70: @ 0x08026B70
 	mov r7, r8
 	push {r7}
 	adds r2, r0, #0
-	ldr r0, _08026BC8 @ =0x0202BBF4
+	ldr r0, _08026BC8 @ =gPlaySt
 	mov r8, r0
 	ldrb r3, [r0, #0x1b]
 	cmp r3, #1
@@ -27915,7 +27915,7 @@ _08026BBC:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08026BC8: .4byte 0x0202BBF4
+_08026BC8: .4byte gPlaySt
 _08026BCC: .4byte 0x08C03440
 
 	thumb_func_start sub_08026BD0
@@ -27927,7 +27927,7 @@ sub_08026BD0: @ 0x08026BD0
 	ldrb r3, [r2]
 	adds r3, #1
 	strb r3, [r2]
-	ldr r3, _08026C00 @ =0x0202BBF4
+	ldr r3, _08026C00 @ =gPlaySt
 	ldrh r2, [r3, #0x16]
 	adds r2, #1
 	strh r2, [r3, #0x16]
@@ -27943,14 +27943,14 @@ sub_08026BD0: @ 0x08026BD0
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08026C00: .4byte 0x0202BBF4
+_08026C00: .4byte gPlaySt
 
 	thumb_func_start sub_08026C04
 sub_08026C04: @ 0x08026C04
 	push {r4, r5, r6, r7, lr}
 	adds r5, r0, #0
 	adds r6, r1, #0
-	ldr r0, _08026C68 @ =0x0202BBF4
+	ldr r0, _08026C68 @ =gPlaySt
 	ldrb r1, [r0, #0x14]
 	movs r0, #0x80
 	ands r0, r1
@@ -27993,7 +27993,7 @@ _08026C62:
 	movs r0, #0
 	b _08026C7A
 	.align 2, 0
-_08026C68: .4byte 0x0202BBF4
+_08026C68: .4byte gPlaySt
 _08026C6C: .4byte 0x08C03440
 _08026C70:
 	movs r1, #0
@@ -28108,7 +28108,7 @@ sub_08026D24: @ 0x08026D24
 	mov r7, sb
 	mov r6, r8
 	push {r6, r7}
-	ldr r1, _08026DC4 @ =0x0202BBF4
+	ldr r1, _08026DC4 @ =gPlaySt
 	ldrh r0, [r1, #0x10]
 	cmp r0, #1
 	beq _08026E10
@@ -28183,7 +28183,7 @@ _08026DB0:
 	adds r0, r1, r2
 	b _08026DD0
 	.align 2, 0
-_08026DC4: .4byte 0x0202BBF4
+_08026DC4: .4byte gPlaySt
 _08026DC8: .4byte 0x0001000C
 _08026DCC:
 	subs r0, r0, r3
@@ -28900,14 +28900,14 @@ _08027390:
 	.align 2, 0
 _08027394: .4byte sub_0802507C
 _08027398:
-	ldr r1, _080273A4 @ =0x0202BBF4
+	ldr r1, _080273A4 @ =gPlaySt
 	ldrb r2, [r1, #0xd]
 	rsbs r0, r2, #0
 	orrs r0, r2
 	lsrs r0, r0, #0x1f
 	b _080273CE
 	.align 2, 0
-_080273A4: .4byte 0x0202BBF4
+_080273A4: .4byte gPlaySt
 _080273A8:
 	ldr r1, _080273B8 @ =sub_080250E0
 _080273AA:
@@ -29326,7 +29326,7 @@ _080277A6:
 	thumb_func_start sub_080277A8
 sub_080277A8: @ 0x080277A8
 	adds r1, r0, #0
-	ldr r0, _080277C4 @ =0x0202BBF4
+	ldr r0, _080277C4 @ =gPlaySt
 	ldrb r0, [r0, #0xd]
 	cmp r0, #0
 	beq _080277C8
@@ -29339,7 +29339,7 @@ sub_080277A8: @ 0x080277A8
 	movs r0, #1
 	b _080277CA
 	.align 2, 0
-_080277C4: .4byte 0x0202BBF4
+_080277C4: .4byte gPlaySt
 _080277C8:
 	movs r0, #0
 _080277CA:
@@ -29563,7 +29563,7 @@ _080279B0:
 	.align 2, 0
 _080279B4: .4byte 0x08D5FBB5
 _080279B8:
-	ldr r0, _080279C8 @ =0x0202BBF4
+	ldr r0, _080279C8 @ =gPlaySt
 	ldr r4, _080279CC @ =0x08D5FBCE
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #3
@@ -29571,7 +29571,7 @@ _080279B8:
 	ldr r4, _080279D0 @ =0x08D5FBD9
 	b _080279E2
 	.align 2, 0
-_080279C8: .4byte 0x0202BBF4
+_080279C8: .4byte gPlaySt
 _080279CC: .4byte 0x08D5FBCE
 _080279D0: .4byte 0x08D5FBD9
 _080279D4:
@@ -29867,7 +29867,7 @@ sub_08027BA4: @ 0x08027BA4
 	bl sub_08015F0C
 	ldr r0, _08027C54 @ =0x08191D7C
 	movs r1, #0
-	bl sub_08012658
+	bl StartSpriteAnim
 	adds r4, r0, #0
 	mov r0, r8
 	strh r0, [r4, #0x22]
@@ -29912,7 +29912,7 @@ sub_08027C58: @ 0x08027C58
 	orrs r0, r1
 	lsrs r6, r0, #0x1f
 	bl sub_0801C584
-	ldr r0, _08027CD8 @ =0x08BBFC7C
+	ldr r0, _08027CD8 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #1
 	ldrh r1, [r1, #8]
@@ -29936,7 +29936,7 @@ sub_08027C58: @ 0x08027C58
 	bl sub_080017E8
 	movs r0, #4
 	bl sub_08000FD4
-	ldr r0, _08027CE8 @ =0x0202BBF4
+	ldr r0, _08027CE8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -29948,14 +29948,14 @@ sub_08027C58: @ 0x08027C58
 	.align 2, 0
 _08027CD0: .4byte 0x0202BBB4
 _08027CD4: .4byte 0x0202E3E0
-_08027CD8: .4byte 0x08BBFC7C
+_08027CD8: .4byte gpKeySt
 _08027CDC: .4byte 0x0203A858
 _08027CE0: .4byte 0x030045B0
 _08027CE4: .4byte 0x02023C60
-_08027CE8: .4byte 0x0202BBF4
+_08027CE8: .4byte gPlaySt
 _08027CEC: .4byte 0x0000038A
 _08027CF0:
-	ldr r0, _08027D84 @ =0x0202BBF4
+	ldr r0, _08027D84 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -29965,7 +29965,7 @@ _08027CF0:
 	lsls r0, r0, #2
 	bl m4aSongNumStart
 _08027D04:
-	ldr r0, _08027D88 @ =0x08BBFC7C
+	ldr r0, _08027D88 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #2
 	ldrh r1, [r1, #8]
@@ -29980,7 +29980,7 @@ _08027D04:
 	bl sub_080017E8
 	movs r0, #4
 	bl sub_08000FD4
-	ldr r0, _08027D84 @ =0x0202BBF4
+	ldr r0, _08027D84 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -30027,8 +30027,8 @@ _08027D7C:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08027D84: .4byte 0x0202BBF4
-_08027D88: .4byte 0x08BBFC7C
+_08027D84: .4byte gPlaySt
+_08027D88: .4byte gpKeySt
 _08027D8C: .4byte 0x02023C60
 _08027D90: .4byte 0x0000038B
 _08027D94: .4byte 0x0202BBB4
@@ -30132,7 +30132,7 @@ sub_08027E44: @ 0x08027E44
 	adds r1, r0, #0
 	adds r0, r4, #0
 	bl sub_08032A90
-	ldr r0, _08027E98 @ =0x0202BBF4
+	ldr r0, _08027E98 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -30149,7 +30149,7 @@ _08027E88: .4byte 0x0202E3E0
 _08027E8C: .4byte 0x08C04E94
 _08027E90: .4byte sub_08027E1C
 _08027E94: .4byte 0x000006F9
-_08027E98: .4byte 0x0202BBF4
+_08027E98: .4byte gPlaySt
 _08027E9C: .4byte 0x0000038A
 
 	thumb_func_start sub_08027EA0
@@ -30187,7 +30187,7 @@ sub_08027EBC: @ 0x08027EBC
 	adds r1, r0, #0
 	adds r0, r4, #0
 	bl sub_08032A90
-	ldr r0, _08027F0C @ =0x0202BBF4
+	ldr r0, _08027F0C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -30203,7 +30203,7 @@ _08027EFA:
 _08027F00: .4byte 0x0202E3E0
 _08027F04: .4byte 0x08C04E74
 _08027F08: .4byte sub_08027EA0
-_08027F0C: .4byte 0x0202BBF4
+_08027F0C: .4byte gPlaySt
 _08027F10: .4byte 0x0000038A
 
 	thumb_func_start sub_08027F14
@@ -30264,7 +30264,7 @@ sub_08027F74: @ 0x08027F74
 	adds r1, r0, #0
 	adds r0, r4, #0
 	bl sub_08032A90
-	ldr r0, _08027FC0 @ =0x0202BBF4
+	ldr r0, _08027FC0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -30280,7 +30280,7 @@ _08027FAE:
 _08027FB4: .4byte 0x0202E3E0
 _08027FB8: .4byte 0x08C04F14
 _08027FBC: .4byte 0x000006FC
-_08027FC0: .4byte 0x0202BBF4
+_08027FC0: .4byte gPlaySt
 _08027FC4: .4byte 0x0000038A
 
 	thumb_func_start sub_08027FC8
@@ -30792,7 +30792,7 @@ sub_080283AC: @ 0x080283AC
 	adds r0, r0, r2
 	ldrb r4, [r0]
 	bl sub_0801C584
-	ldr r0, _08028414 @ =0x08BBFC7C
+	ldr r0, _08028414 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #1
 	ldrh r1, [r1, #8]
@@ -30801,7 +30801,7 @@ sub_080283AC: @ 0x080283AC
 	beq _0802843C
 	cmp r4, #0
 	beq _08028428
-	ldr r0, _08028418 @ =0x0202BBF4
+	ldr r0, _08028418 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -30824,13 +30824,13 @@ _080283F0:
 	.align 2, 0
 _0802840C: .4byte 0x0202BBB4
 _08028410: .4byte 0x0202E3E4
-_08028414: .4byte 0x08BBFC7C
-_08028418: .4byte 0x0202BBF4
+_08028414: .4byte gpKeySt
+_08028418: .4byte gPlaySt
 _0802841C: .4byte 0x0000038A
 _08028420: .4byte 0x0203A858
 _08028424: .4byte 0x030045B0
 _08028428:
-	ldr r0, _08028488 @ =0x0202BBF4
+	ldr r0, _08028488 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -30840,7 +30840,7 @@ _08028428:
 	lsls r0, r0, #2
 	bl m4aSongNumStart
 _0802843C:
-	ldr r0, _0802848C @ =0x08BBFC7C
+	ldr r0, _0802848C @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #2
 	ldrh r1, [r1, #8]
@@ -30855,7 +30855,7 @@ _0802843C:
 	adds r0, r6, #0
 	movs r1, #0x63
 	bl sub_080045FC
-	ldr r0, _08028488 @ =0x0202BBF4
+	ldr r0, _08028488 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -30876,8 +30876,8 @@ _08028482:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08028488: .4byte 0x0202BBF4
-_0802848C: .4byte 0x08BBFC7C
+_08028488: .4byte gPlaySt
+_0802848C: .4byte gpKeySt
 _08028490: .4byte 0x02023C60
 _08028494: .4byte 0x0000038B
 _08028498: .4byte 0x0202BBB4
@@ -30888,7 +30888,7 @@ sub_0802849C: @ 0x0802849C
 	ldr r0, _080284BC @ =0x08C034D0
 	movs r1, #3
 	bl Proc_Start
-	ldr r0, _080284C0 @ =0x0202BBF4
+	ldr r0, _080284C0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -30901,7 +30901,7 @@ _080284B8:
 	bx r0
 	.align 2, 0
 _080284BC: .4byte 0x08C034D0
-_080284C0: .4byte 0x0202BBF4
+_080284C0: .4byte gPlaySt
 _080284C4: .4byte 0x0000038A
 
 	thumb_func_start sub_080284C8
@@ -31778,7 +31778,7 @@ sub_08028C08: @ 0x08028C08
 	cmp r2, r0
 	bne _08028C24
 	adds r0, r5, #0
-	bl sub_08016BF4
+	bl GetUnitEquippedWeaponSlot
 	adds r2, r0, #0
 _08028C24:
 	ldr r0, [r5, #0xc]
@@ -32107,7 +32107,7 @@ sub_08028EA0: @ 0x08028EA0
 	ands r0, r1
 	cmp r0, #0
 	beq _08028EBA
-	ldr r0, _08028F10 @ =0x0202BBF4
+	ldr r0, _08028F10 @ =gPlaySt
 	ldrb r0, [r0, #0x15]
 	cmp r0, #0
 	beq _08028F02
@@ -32154,7 +32154,7 @@ _08028F02:
 	bx r0
 	.align 2, 0
 _08028F0C: .4byte 0x0203A3D4
-_08028F10: .4byte 0x0202BBF4
+_08028F10: .4byte gPlaySt
 
 	thumb_func_start sub_08028F14
 sub_08028F14: @ 0x08028F14
@@ -32347,7 +32347,7 @@ sub_08029040: @ 0x08029040
 	adds r7, r4, #0
 	adds r7, #0x60
 	strh r6, [r7]
-	ldr r5, _080290EC @ =0x0202BBF4
+	ldr r5, _080290EC @ =gPlaySt
 	adds r0, r5, #0
 	adds r0, #0x2b
 	ldrb r3, [r0]
@@ -32409,7 +32409,7 @@ _080290E4:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080290EC: .4byte 0x0202BBF4
+_080290EC: .4byte gPlaySt
 _080290F0: .4byte 0x0202BBB4
 _080290F4: .4byte 0x081C8FCC
 
@@ -32432,7 +32432,7 @@ sub_080290F8: @ 0x080290F8
 	adds r7, r4, #0
 	adds r7, #0x62
 	strh r6, [r7]
-	ldr r5, _080291A4 @ =0x0202BBF4
+	ldr r5, _080291A4 @ =gPlaySt
 	adds r0, r5, #0
 	adds r0, #0x2b
 	ldrb r3, [r0]
@@ -32503,7 +32503,7 @@ _0802919C:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080291A4: .4byte 0x0202BBF4
+_080291A4: .4byte gPlaySt
 _080291A8: .4byte 0x0202BBB4
 _080291AC: .4byte 0x081C8FCC
 
@@ -32591,7 +32591,7 @@ sub_08029224: @ 0x08029224
 	adds r7, r4, #0
 	adds r7, #0x6a
 	strh r5, [r7]
-	ldr r2, _08029298 @ =0x0202BBF4
+	ldr r2, _08029298 @ =gPlaySt
 	adds r1, r2, #0
 	adds r1, #0x2b
 	movs r0, #1
@@ -32638,7 +32638,7 @@ _08029292:
 	movs r4, #0
 	b _080292A2
 	.align 2, 0
-_08029298: .4byte 0x0202BBF4
+_08029298: .4byte gPlaySt
 _0802929C: .4byte 0x0202BBB4
 _080292A0:
 	adds r4, #1
@@ -33680,7 +33680,7 @@ sub_08029A1C: @ 0x08029A1C
 	cmp r0, #0
 	beq _08029A7E
 _08029A3A:
-	ldr r1, _08029A8C @ =0x0202BBF4
+	ldr r1, _08029A8C @ =gPlaySt
 	movs r0, #0x80
 	ldrb r1, [r1, #0x14]
 	ands r0, r1
@@ -33717,7 +33717,7 @@ _08029A7E:
 	.align 2, 0
 _08029A84: .4byte 0x0203A3EC
 _08029A88: .4byte 0x0203A46C
-_08029A8C: .4byte 0x0202BBF4
+_08029A8C: .4byte gPlaySt
 
 	thumb_func_start sub_08029A90
 sub_08029A90: @ 0x08029A90
@@ -34425,7 +34425,7 @@ sub_08029FAC: @ 0x08029FAC
 	ldrsb r0, [r7, r0]
 	cmp r0, #0
 	beq _0802A008
-	ldr r1, _0802A010 @ =0x0202BBF4
+	ldr r1, _0802A010 @ =gPlaySt
 	movs r0, #0x80
 	ldrb r1, [r1, #0x14]
 	ands r0, r1
@@ -34465,7 +34465,7 @@ _0802A008:
 	rsbs r0, r0, #0
 	b _0802A090
 	.align 2, 0
-_0802A010: .4byte 0x0202BBF4
+_0802A010: .4byte gPlaySt
 _0802A014: .4byte 0x0202BBB4
 _0802A018: .4byte 0x0203A3D4
 _0802A01C:
@@ -34479,7 +34479,7 @@ _0802A01C:
 	adds r0, r7, #0
 	adds r0, #0x48
 	ldrh r0, [r0]
-	bl sub_0801789C
+	bl GetItemAwardedExp
 	adds r1, r7, #0
 	adds r1, #0x7b
 	ldrb r1, [r1]
@@ -34728,7 +34728,7 @@ sub_0802A1E8: @ 0x0802A1E8
 	bl sub_0801769C
 	adds r5, r0, #0
 	ldrb r0, [r4, #0x1c]
-	bl sub_0802C7D8
+	bl GetTrap
 	strb r5, [r0, #6]
 _0802A20C:
 	pop {r4, r5}
@@ -34906,7 +34906,7 @@ sub_0802A324: @ 0x0802A324
 	b _0802A3BA
 _0802A336:
 	movs r6, #0x14
-	ldr r1, _0802A360 @ =0x0202BBF4
+	ldr r1, _0802A360 @ =gPlaySt
 	ldrb r0, [r1, #0x1b]
 	cmp r0, #1
 	beq _0802A34A
@@ -34925,7 +34925,7 @@ _0802A34A:
 	subs r6, r6, r0
 	b _0802A39E
 	.align 2, 0
-_0802A360: .4byte 0x0202BBF4
+_0802A360: .4byte gPlaySt
 _0802A364:
 	adds r0, r5, #0
 	bl sub_0802A27C
@@ -35034,7 +35034,7 @@ _0802A424:
 	thumb_func_start sub_0802A42C
 sub_0802A42C: @ 0x0802A42C
 	push {r4, lr}
-	ldr r1, _0802A474 @ =0x0202BBF4
+	ldr r1, _0802A474 @ =gPlaySt
 	movs r0, #0x80
 	ldrb r1, [r1, #0x14]
 	ands r0, r1
@@ -35069,7 +35069,7 @@ _0802A45A:
 	bl sub_08029B10
 	b _0802A4A2
 	.align 2, 0
-_0802A474: .4byte 0x0202BBF4
+_0802A474: .4byte gPlaySt
 _0802A478: .4byte 0x0203A3EC
 _0802A47C:
 	adds r0, r4, #0
@@ -35163,7 +35163,7 @@ sub_0802A50C: @ 0x0802A50C
 	lsls r0, r0, #0x18
 	cmp r0, #0
 	beq _0802A546
-	ldr r1, _0802A550 @ =0x0202BBF4
+	ldr r1, _0802A550 @ =gPlaySt
 	movs r0, #0x80
 	ldrb r1, [r1, #0x14]
 	ands r0, r1
@@ -35184,7 +35184,7 @@ _0802A546:
 	bx r0
 	.align 2, 0
 _0802A54C: .4byte 0x0203A3EC
-_0802A550: .4byte 0x0202BBF4
+_0802A550: .4byte gPlaySt
 
 	thumb_func_start sub_0802A554
 sub_0802A554: @ 0x0802A554
@@ -35196,7 +35196,7 @@ sub_0802A554: @ 0x0802A554
 	cmp r0, #0
 	bne _0802A5A2
 	adds r0, r5, #0
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	strh r0, [r4]
 	lsls r0, r0, #0x10
 	cmp r0, #0
@@ -35435,7 +35435,7 @@ sub_0802A704: @ 0x0802A704
 	movs r0, #1
 	bl sub_08019108
 	str r0, [r4, #4]
-	ldr r0, _0802A760 @ =0x0202BBF4
+	ldr r0, _0802A760 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -35468,7 +35468,7 @@ sub_0802A704: @ 0x0802A704
 	b _0802A782
 	.align 2, 0
 _0802A75C: .4byte 0x0203A46C
-_0802A760: .4byte 0x0202BBF4
+_0802A760: .4byte gPlaySt
 _0802A764: .4byte 0x0203A858
 _0802A768: .4byte 0x0202E3DC
 _0802A76C:
@@ -35561,7 +35561,7 @@ _0802A7EA:
 	ldrb r0, [r0]
 	cmp r0, #0x33
 	bne _0802A82A
-	ldr r0, _0802A858 @ =0x0202BBF4
+	ldr r0, _0802A858 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -35587,7 +35587,7 @@ _0802A84C:
 	bx r0
 	.align 2, 0
 _0802A854: .4byte 0x0202E3DC
-_0802A858: .4byte 0x0202BBF4
+_0802A858: .4byte gPlaySt
 _0802A85C: .4byte 0x000002D7
 
 	thumb_func_start sub_0802A860
@@ -35656,7 +35656,7 @@ _0802A8DC:
 	thumb_func_start sub_0802A8E0
 sub_0802A8E0: @ 0x0802A8E0
 	push {lr}
-	ldr r0, _0802A914 @ =0x0202BBF4
+	ldr r0, _0802A914 @ =gPlaySt
 	adds r0, #0x42
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1d
@@ -35681,7 +35681,7 @@ sub_0802A8E0: @ 0x0802A8E0
 	adds r0, r3, #0
 	b _0802A936
 	.align 2, 0
-_0802A914: .4byte 0x0202BBF4
+_0802A914: .4byte gPlaySt
 _0802A918: .4byte 0x0203A3EC
 _0802A91C: .4byte 0x0203A46C
 _0802A920:
@@ -37050,7 +37050,7 @@ sub_0802B390: @ 0x0802B390
 	push {r4, r5, r6, r7, lr}
 	adds r5, r0, #0
 	movs r7, #0
-	ldr r0, _0802B4CC @ =0x08BBFC7C
+	ldr r0, _0802B4CC @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x20
 	ldrh r1, [r1, #6]
@@ -37076,7 +37076,7 @@ _0802B3C4:
 	strb r7, [r6]
 	strb r1, [r4]
 	movs r7, #1
-	ldr r0, _0802B4D0 @ =0x0202BBF4
+	ldr r0, _0802B4D0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -37085,7 +37085,7 @@ _0802B3C4:
 	ldr r0, _0802B4D4 @ =0x00000387
 	bl m4aSongNumStart
 _0802B3DC:
-	ldr r0, _0802B4CC @ =0x08BBFC7C
+	ldr r0, _0802B4CC @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x10
 	ldrh r1, [r1, #6]
@@ -37110,7 +37110,7 @@ _0802B3DC:
 	strb r0, [r6]
 	strb r1, [r4]
 	movs r7, #1
-	ldr r0, _0802B4D0 @ =0x0202BBF4
+	ldr r0, _0802B4D0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -37119,7 +37119,7 @@ _0802B3DC:
 	ldr r0, _0802B4D4 @ =0x00000387
 	bl m4aSongNumStart
 _0802B422:
-	ldr r0, _0802B4CC @ =0x08BBFC7C
+	ldr r0, _0802B4CC @ =gpKeySt
 	ldr r1, [r0]
 	ldrh r2, [r1, #6]
 	movs r0, #0x40
@@ -37147,7 +37147,7 @@ _0802B452:
 	subs r0, #1
 	strb r0, [r4]
 	movs r7, #1
-	ldr r0, _0802B4D0 @ =0x0202BBF4
+	ldr r0, _0802B4D0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -37156,7 +37156,7 @@ _0802B452:
 	ldr r0, _0802B4D8 @ =0x00000386
 	bl m4aSongNumStart
 _0802B46C:
-	ldr r0, _0802B4CC @ =0x08BBFC7C
+	ldr r0, _0802B4CC @ =gpKeySt
 	ldr r4, [r0]
 	ldrh r1, [r4, #6]
 	mov ip, r1
@@ -37192,7 +37192,7 @@ _0802B4AA:
 	adds r0, #1
 	strb r0, [r2]
 	movs r7, #1
-	ldr r0, _0802B4D0 @ =0x0202BBF4
+	ldr r0, _0802B4D0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -37206,8 +37206,8 @@ _0802B4C4:
 	pop {r1}
 	bx r1
 	.align 2, 0
-_0802B4CC: .4byte 0x08BBFC7C
-_0802B4D0: .4byte 0x0202BBF4
+_0802B4CC: .4byte gpKeySt
+_0802B4D0: .4byte gPlaySt
 _0802B4D4: .4byte 0x00000387
 _0802B4D8: .4byte 0x00000386
 
@@ -37386,7 +37386,7 @@ _0802B620:
 	ldrsh r1, [r1, r5]
 	lsls r1, r1, #3
 	bl sub_0804A740
-	ldr r0, _0802B67C @ =0x08BBFC7C
+	ldr r0, _0802B67C @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #1
@@ -37396,7 +37396,7 @@ _0802B620:
 	adds r0, r4, #0
 	movs r1, #1
 	bl sub_080045FC
-	ldr r0, _0802B680 @ =0x0202BBF4
+	ldr r0, _0802B680 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -37407,8 +37407,8 @@ _0802B620:
 	b _0802B6C6
 	.align 2, 0
 _0802B678: .4byte 0x08C03574
-_0802B67C: .4byte 0x08BBFC7C
-_0802B680: .4byte 0x0202BBF4
+_0802B67C: .4byte gpKeySt
+_0802B680: .4byte gPlaySt
 _0802B684: .4byte 0x0000038A
 _0802B688:
 	movs r0, #2
@@ -37418,7 +37418,7 @@ _0802B688:
 	adds r0, r4, #0
 	movs r1, #2
 	bl sub_080045FC
-	ldr r0, _0802B6AC @ =0x0202BBF4
+	ldr r0, _0802B6AC @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -37428,7 +37428,7 @@ _0802B688:
 	bl m4aSongNumStart
 	b _0802B6C6
 	.align 2, 0
-_0802B6AC: .4byte 0x0202BBF4
+_0802B6AC: .4byte gPlaySt
 _0802B6B0: .4byte 0x0000038B
 _0802B6B4:
 	movs r0, #0x80
@@ -37589,7 +37589,7 @@ _0802B79C:
 	ldrsh r1, [r1, r3]
 	lsls r1, r1, #3
 	bl sub_0804A7EC
-	ldr r0, _0802B818 @ =0x08BBFC7C
+	ldr r0, _0802B818 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #1
@@ -37598,7 +37598,7 @@ _0802B79C:
 	beq _0802B824
 	adds r0, r5, #0
 	bl sub_0802B4DC
-	ldr r0, _0802B81C @ =0x0202BBF4
+	ldr r0, _0802B81C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -37608,15 +37608,15 @@ _0802B79C:
 	b _0802B83A
 	.align 2, 0
 _0802B814: .4byte 0x08C03574
-_0802B818: .4byte 0x08BBFC7C
-_0802B81C: .4byte 0x0202BBF4
+_0802B818: .4byte gpKeySt
+_0802B81C: .4byte gPlaySt
 _0802B820: .4byte 0x0000038A
 _0802B824:
 	movs r0, #2
 	ands r0, r1
 	cmp r0, #0
 	beq _0802B850
-	ldr r0, _0802B848 @ =0x0202BBF4
+	ldr r0, _0802B848 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -37630,7 +37630,7 @@ _0802B83E:
 	bl sub_0800457C
 	b _0802B862
 	.align 2, 0
-_0802B848: .4byte 0x0202BBF4
+_0802B848: .4byte gPlaySt
 _0802B84C: .4byte 0x0000038B
 _0802B850:
 	movs r0, #0x80
@@ -37810,7 +37810,7 @@ _0802B97A:
 	lsls r1, r1, #3
 	adds r2, r6, #0
 	bl sub_080826EC
-	ldr r0, _0802B9BC @ =0x08BBFC7C
+	ldr r0, _0802B9BC @ =gpKeySt
 	ldr r1, [r0]
 	ldr r0, _0802B9C0 @ =0x0000FEFD
 	ldrh r6, [r1, #8]
@@ -37822,7 +37822,7 @@ _0802B9B2:
 	bx r0
 	.align 2, 0
 _0802B9B8: .4byte 0x08C03574
-_0802B9BC: .4byte 0x08BBFC7C
+_0802B9BC: .4byte gpKeySt
 _0802B9C0: .4byte 0x0000FEFD
 
 	thumb_func_start sub_0802B9C4
@@ -37867,7 +37867,7 @@ sub_0802B9C4: @ 0x0802B9C4
 	lsls r1, r1, #3
 	bl sub_080826EC
 _0802BA16:
-	ldr r0, _0802BA94 @ =0x08BBFC7C
+	ldr r0, _0802BA94 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x81
 	lsls r0, r0, #1
@@ -37928,7 +37928,7 @@ _0802BA82:
 	bx r0
 	.align 2, 0
 _0802BA90: .4byte 0x08C03574
-_0802BA94: .4byte 0x08BBFC7C
+_0802BA94: .4byte gpKeySt
 
 	thumb_func_start sub_0802BA98
 sub_0802BA98: @ 0x0802BA98
@@ -38336,7 +38336,7 @@ sub_0802BD6C: @ 0x0802BD6C
 	ldrb r0, [r0]
 	cmp r0, #4
 	beq _0802BD84
-	ldr r0, _0802BDA0 @ =0x08BBFC7C
+	ldr r0, _0802BDA0 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r0, [r0, #8]
 	cmp r0, #0
@@ -38358,7 +38358,7 @@ _0802BD94:
 	ldr r0, [r0]
 	mov pc, r0
 	.align 2, 0
-_0802BDA0: .4byte 0x08BBFC7C
+_0802BDA0: .4byte gpKeySt
 _0802BDA4: .4byte 0x0203A510
 _0802BDA8: .4byte _0802BDAC
 _0802BDAC: @ jump table
@@ -38370,7 +38370,7 @@ _0802BDAC: @ jump table
 	.4byte _0802BF00 @ case 5
 	.4byte _0802BEC0 @ case 6
 _0802BDC8:
-	ldr r0, _0802BDE4 @ =0x08BBFC7C
+	ldr r0, _0802BDE4 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x10
 	ldrh r1, [r1, #8]
@@ -38383,9 +38383,9 @@ _0802BDC8:
 	bl sub_0802BD30
 	b _0802BF00
 	.align 2, 0
-_0802BDE4: .4byte 0x08BBFC7C
+_0802BDE4: .4byte gpKeySt
 _0802BDE8:
-	ldr r0, _0802BE08 @ =0x0202BBF4
+	ldr r0, _0802BE08 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -38401,9 +38401,9 @@ _0802BDFC:
 	movs r0, #1
 	b _0802BF02
 	.align 2, 0
-_0802BE08: .4byte 0x0202BBF4
+_0802BE08: .4byte gPlaySt
 _0802BE0C:
-	ldr r0, _0802BE58 @ =0x08BBFC7C
+	ldr r0, _0802BE58 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #0x91
@@ -38439,9 +38439,9 @@ _0802BE0C:
 	bl sub_0802BBA8
 	b _0802BF00
 	.align 2, 0
-_0802BE58: .4byte 0x08BBFC7C
+_0802BE58: .4byte gpKeySt
 _0802BE5C:
-	ldr r0, _0802BE7C @ =0x0202BBF4
+	ldr r0, _0802BE7C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -38456,9 +38456,9 @@ _0802BE70:
 	movs r0, #1
 	b _0802BF02
 	.align 2, 0
-_0802BE7C: .4byte 0x0202BBF4
+_0802BE7C: .4byte gPlaySt
 _0802BE80:
-	ldr r0, _0802BE98 @ =0x08BBFC7C
+	ldr r0, _0802BE98 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #1
 	ldrh r1, [r1, #8]
@@ -38469,9 +38469,9 @@ _0802BE80:
 	bl sub_0802BD58
 	b _0802BF00
 	.align 2, 0
-_0802BE98: .4byte 0x08BBFC7C
+_0802BE98: .4byte gpKeySt
 _0802BE9C:
-	ldr r0, _0802BEBC @ =0x0202BBF4
+	ldr r0, _0802BEBC @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -38486,9 +38486,9 @@ _0802BEB0:
 	movs r0, #1
 	b _0802BF02
 	.align 2, 0
-_0802BEBC: .4byte 0x0202BBF4
+_0802BEBC: .4byte gPlaySt
 _0802BEC0:
-	ldr r0, _0802BED8 @ =0x08BBFC7C
+	ldr r0, _0802BED8 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #2
 	ldrh r1, [r1, #8]
@@ -38499,9 +38499,9 @@ _0802BEC0:
 	bl sub_08001CA8
 	b _0802BF00
 	.align 2, 0
-_0802BED8: .4byte 0x08BBFC7C
+_0802BED8: .4byte gpKeySt
 _0802BEDC:
-	ldr r0, _0802BEFC @ =0x0202BBF4
+	ldr r0, _0802BEFC @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -38516,7 +38516,7 @@ _0802BEF0:
 	movs r0, #1
 	b _0802BF02
 	.align 2, 0
-_0802BEFC: .4byte 0x0202BBF4
+_0802BEFC: .4byte gPlaySt
 _0802BF00:
 	movs r0, #0
 _0802BF02:
@@ -38787,7 +38787,7 @@ _0802C0B4:
 	ldrb r0, [r0]
 	cmp r0, #0x1b
 	beq _0802C0EC
-	ldr r0, _0802C0DC @ =0x0202BBF4
+	ldr r0, _0802C0DC @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -38800,7 +38800,7 @@ _0802C0B4:
 	bl sub_0802BF8C
 	b _0802C0EC
 	.align 2, 0
-_0802C0DC: .4byte 0x0202BBF4
+_0802C0DC: .4byte gPlaySt
 _0802C0E0:
 	adds r0, r4, #0
 	adds r1, r5, #0
@@ -38912,7 +38912,7 @@ _0802C18C:
 sub_0802C190: @ 0x0802C190
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _0802C1A8 @ =0x0202BBF4
+	ldr r0, _0802C1A8 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -38922,7 +38922,7 @@ sub_0802C190: @ 0x0802C190
 	bne _0802C1BA
 	b _0802C1C2
 	.align 2, 0
-_0802C1A8: .4byte 0x0202BBF4
+_0802C1A8: .4byte gPlaySt
 _0802C1AC:
 	adds r0, r1, #0
 	b _0802C1C4
@@ -38952,7 +38952,7 @@ sub_0802C1CC: @ 0x0802C1CC
 	adds r4, r1, #0
 	movs r6, #1
 	rsbs r6, r6, #0
-	ldr r0, _0802C1EC @ =0x0202BBF4
+	ldr r0, _0802C1EC @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -38962,7 +38962,7 @@ sub_0802C1CC: @ 0x0802C1CC
 	beq _0802C21E
 	b _0802C216
 	.align 2, 0
-_0802C1EC: .4byte 0x0202BBF4
+_0802C1EC: .4byte gPlaySt
 _0802C1F0:
 	ldrb r0, [r1, #1]
 	cmp r5, r0
@@ -39095,8 +39095,8 @@ _0802C2C6:
 	bx r0
 	.align 2, 0
 
-	thumb_func_start sub_0802C2D4
-sub_0802C2D4: @ 0x0802C2D4
+	thumb_func_start UnitHideIfUnderRoof
+UnitHideIfUnderRoof: @ 0x0802C2D4
 	adds r2, r0, #0
 	movs r0, #0x11
 	ldrsb r0, [r2, r0]
@@ -39608,7 +39608,7 @@ _0802C65C:
 	thumb_func_start sub_0802C664
 sub_0802C664: @ 0x0802C664
 	push {r4, r5, lr}
-	ldr r4, _0802C67C @ =0x0202BBF4
+	ldr r4, _0802C67C @ =gPlaySt
 	ldrb r5, [r4, #0xf]
 	movs r0, #0x80
 	strb r0, [r4, #0xf]
@@ -39618,7 +39618,7 @@ sub_0802C664: @ 0x0802C664
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0802C67C: .4byte 0x0202BBF4
+_0802C67C: .4byte gPlaySt
 
 	thumb_func_start sub_0802C680
 sub_0802C680: @ 0x0802C680
@@ -39811,8 +39811,8 @@ _0802C7C8:
 _0802C7D0: .4byte 0x0203A514
 _0802C7D4: .4byte 0x0202E3DC
 
-	thumb_func_start sub_0802C7D8
-sub_0802C7D8: @ 0x0802C7D8
+	thumb_func_start GetTrap
+GetTrap: @ 0x0802C7D8
 	lsls r0, r0, #3
 	ldr r1, _0802C7E0 @ =0x0203A514
 	adds r0, r0, r1
@@ -40513,7 +40513,7 @@ sub_0802CD94: @ 0x0802CD94
 	adds r0, #0x1e
 	adds r0, r0, r1
 	ldrh r0, [r0]
-	bl sub_080165F0
+	bl MakeNewItem
 	ldrb r4, [r4, #0x15]
 	lsls r1, r4, #1
 	adds r5, #0x1e
@@ -40780,7 +40780,7 @@ sub_0802CFE4: @ 0x0802CFE4
 	adds r0, r5, #0
 	adds r1, r4, #0
 	bl sub_080796CC
-	ldr r0, _0802D064 @ =0x0202BBF4
+	ldr r0, _0802D064 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -40798,7 +40798,7 @@ _0802D052:
 	bx r0
 	.align 2, 0
 _0802D060: .4byte 0x0203A858
-_0802D064: .4byte 0x0202BBF4
+_0802D064: .4byte gPlaySt
 _0802D068: .4byte 0x0203A46C
 
 	thumb_func_start sub_0802D06C
@@ -40830,7 +40830,7 @@ sub_0802D06C: @ 0x0802D06C
 	strh r0, [r3]
 _0802D09E:
 	adds r0, r6, #0
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	ldr r4, _0802D118 @ =0x0203A3EC
 	ldr r5, _0802D11C @ =0x0203A46C
 	adds r1, r5, #0
@@ -41151,7 +41151,7 @@ sub_0802D320: @ 0x0802D320
 	ldrb r1, [r4, #0x12]
 	bl sub_0802D1E8
 	adds r5, r0, #0
-	ldr r0, _0802D380 @ =0x0202BBF4
+	ldr r0, _0802D380 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -41175,7 +41175,7 @@ _0802D35A:
 	.align 2, 0
 _0802D378: .4byte 0x0203A858
 _0802D37C: .4byte 0x0203A46C
-_0802D380: .4byte 0x0202BBF4
+_0802D380: .4byte gPlaySt
 _0802D384: .4byte 0x0000037A
 
 	thumb_func_start sub_0802D388
@@ -41314,7 +41314,7 @@ _0802D49C:
 	bl sub_080190F4
 	adds r1, r5, #0
 	movs r2, #1
-	bl GetUnitStatusName
+	bl SetUnitStatusExt
 	ldr r1, _0802D4C8 @ =0x0203A3D4
 	movs r0, #0x80
 	lsls r0, r0, #2
@@ -41658,7 +41658,7 @@ sub_0802D7E4: @ 0x0802D7E4
 	movs r0, #0
 	strh r0, [r4, #0x34]
 	strh r0, [r4, #0x36]
-	ldr r5, _0802D820 @ =0x0202BBF4
+	ldr r5, _0802D820 @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r5, r0]
 	bl sub_08031A5C
@@ -41682,7 +41682,7 @@ sub_0802D7E4: @ 0x0802D7E4
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0802D820: .4byte 0x0202BBF4
+_0802D820: .4byte gPlaySt
 _0802D824: .4byte 0x08D648F4
 
 	thumb_func_start sub_0802D828
@@ -41822,7 +41822,7 @@ _0802D92A:
 	thumb_func_start sub_0802D930
 sub_0802D930: @ 0x0802D930
 	push {lr}
-	ldr r0, _0802D944 @ =0x0202BBF4
+	ldr r0, _0802D944 @ =gPlaySt
 	ldrb r0, [r0, #0x15]
 	bl sub_0802D8E4
 	movs r0, #0
@@ -41830,7 +41830,7 @@ sub_0802D930: @ 0x0802D930
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0802D944: .4byte 0x0202BBF4
+_0802D944: .4byte gPlaySt
 
 	thumb_func_start sub_0802D948
 sub_0802D948: @ 0x0802D948
@@ -41840,7 +41840,7 @@ sub_0802D948: @ 0x0802D948
 	ldr r0, _0802D9B0 @ =0x081C9808
 	ldm r0!, {r2, r3, r4}
 	stm r1!, {r2, r3, r4}
-	ldr r0, _0802D9B4 @ =0x0202BBF4
+	ldr r0, _0802D9B4 @ =gPlaySt
 	ldrb r0, [r0, #0x15]
 	bl sub_0802D8E4
 	movs r6, #0
@@ -41886,7 +41886,7 @@ _0802D962:
 	bx r0
 	.align 2, 0
 _0802D9B0: .4byte 0x081C9808
-_0802D9B4: .4byte 0x0202BBF4
+_0802D9B4: .4byte gPlaySt
 _0802D9B8: .4byte 0x081C97A8
 _0802D9BC: .4byte 0x020027DC
 
@@ -41990,7 +41990,7 @@ _0802DA7C: .4byte 0x08BFF760
 	thumb_func_start sub_0802DA80
 sub_0802DA80: @ 0x0802DA80
 	push {r4, r5, r6, r7, lr}
-	ldr r0, _0802DAD8 @ =0x0202BBF4
+	ldr r0, _0802DAD8 @ =gPlaySt
 	ldrb r0, [r0, #0x15]
 	bl sub_0802D8E4
 	movs r6, #0
@@ -42031,7 +42031,7 @@ _0802DA90:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0802DAD8: .4byte 0x0202BBF4
+_0802DAD8: .4byte gPlaySt
 _0802DADC: .4byte 0x081C97A8
 _0802DAE0: .4byte 0x020027DC
 
@@ -42101,7 +42101,7 @@ _0802DB60: .4byte 0x08C054C4
 	thumb_func_start sub_0802DB64
 sub_0802DB64: @ 0x0802DB64
 	push {r4, r5, r6, lr}
-	ldr r0, _0802DBC0 @ =0x0202BBF4
+	ldr r0, _0802DBC0 @ =gPlaySt
 	ldrb r0, [r0, #0x15]
 	bl sub_0802D8E4
 	ldr r0, _0802DBC4 @ =0x08194FAC
@@ -42140,7 +42140,7 @@ _0802DB8A:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0802DBC0: .4byte 0x0202BBF4
+_0802DBC0: .4byte gPlaySt
 _0802DBC4: .4byte 0x08194FAC
 _0802DBC8: .4byte 0x02020140
 _0802DBCC: .4byte 0x06010380
@@ -42202,7 +42202,7 @@ sub_0802DC30: @ 0x0802DC30
 	movs r0, #1
 	strb r0, [r4, #6]
 	strb r0, [r4, #7]
-	ldr r0, _0802DC9C @ =0x0202BBF4
+	ldr r0, _0802DC9C @ =gPlaySt
 	ldrb r0, [r0, #0x15]
 	bl sub_0802D8E4
 	ldr r0, _0802DCA0 @ =0x08195034
@@ -42241,7 +42241,7 @@ _0802DC6C:
 	beq _0802DCCA
 	b _0802DCDA
 	.align 2, 0
-_0802DC9C: .4byte 0x0202BBF4
+_0802DC9C: .4byte gPlaySt
 _0802DCA0: .4byte 0x08195034
 _0802DCA4: .4byte 0x02020140
 _0802DCA8: .4byte 0x06010300
@@ -42599,7 +42599,7 @@ _0802DF50: .4byte sub_0802DE00
 	thumb_func_start sub_0802DF54
 sub_0802DF54: @ 0x0802DF54
 	push {r4, r5, r6, lr}
-	ldr r0, _0802DFA0 @ =0x0202BBF4
+	ldr r0, _0802DFA0 @ =gPlaySt
 	ldrb r0, [r0, #0x15]
 	bl sub_0802D8E4
 	ldr r0, _0802DFA4 @ =0x081950CC
@@ -42633,7 +42633,7 @@ _0802DF78:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0802DFA0: .4byte 0x0202BBF4
+_0802DFA0: .4byte gPlaySt
 _0802DFA4: .4byte 0x081950CC
 _0802DFA8: .4byte 0x06010300
 _0802DFAC: .4byte 0x0819510C
@@ -42961,7 +42961,7 @@ _0802E21C: .4byte 0x0000AC12
 	thumb_func_start sub_0802E220
 sub_0802E220: @ 0x0802E220
 	push {lr}
-	ldr r0, _0802E234 @ =0x0202BBF4
+	ldr r0, _0802E234 @ =gPlaySt
 	ldrb r0, [r0, #0x15]
 	cmp r0, #7
 	bhi _0802E28A
@@ -42971,7 +42971,7 @@ sub_0802E220: @ 0x0802E220
 	ldr r0, [r0]
 	mov pc, r0
 	.align 2, 0
-_0802E234: .4byte 0x0202BBF4
+_0802E234: .4byte gPlaySt
 _0802E238: .4byte _0802E23C
 _0802E23C: @ jump table
 	.4byte _0802E25C @ case 0
@@ -43013,7 +43013,7 @@ _0802E28A:
 	thumb_func_start sub_0802E290
 sub_0802E290: @ 0x0802E290
 	push {lr}
-	ldr r0, _0802E2A8 @ =0x0202BBF4
+	ldr r0, _0802E2A8 @ =gPlaySt
 	ldrb r0, [r0, #0x15]
 	subs r0, #1
 	cmp r0, #6
@@ -43024,7 +43024,7 @@ sub_0802E290: @ 0x0802E290
 	ldr r0, [r0]
 	mov pc, r0
 	.align 2, 0
-_0802E2A8: .4byte 0x0202BBF4
+_0802E2A8: .4byte gPlaySt
 _0802E2AC: .4byte _0802E2B0
 _0802E2B0: @ jump table
 	.4byte _0802E2CC @ case 0
@@ -43061,7 +43061,7 @@ _0802E2F4:
 	thumb_func_start sub_0802E2F8
 sub_0802E2F8: @ 0x0802E2F8
 	push {lr}
-	ldr r0, _0802E30C @ =0x0202BBF4
+	ldr r0, _0802E30C @ =gPlaySt
 	ldrb r0, [r0, #0x15]
 	cmp r0, #7
 	bne _0802E306
@@ -43070,7 +43070,7 @@ _0802E306:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0802E30C: .4byte 0x0202BBF4
+_0802E30C: .4byte gPlaySt
 
 	thumb_func_start sub_0802E310
 sub_0802E310: @ 0x0802E310
@@ -43096,7 +43096,7 @@ sub_0802E32C: @ 0x0802E32C
 	adds r4, r0, #0
 	cmp r4, #0
 	beq _0802E354
-	ldr r0, _0802E360 @ =0x0202BBF4
+	ldr r0, _0802E360 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -43114,20 +43114,20 @@ _0802E354:
 	bx r0
 	.align 2, 0
 _0802E35C: .4byte 0x08C05414
-_0802E360: .4byte 0x0202BBF4
+_0802E360: .4byte gPlaySt
 _0802E364: .4byte 0x08D648F4
 
 	thumb_func_start sub_0802E368
 sub_0802E368: @ 0x0802E368
 	push {lr}
-	ldr r1, _0802E37C @ =0x0202BBF4
+	ldr r1, _0802E37C @ =gPlaySt
 	strb r0, [r1, #0x15]
 	bl sub_0802D8E4
 	bl sub_0802E220
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0802E37C: .4byte 0x0202BBF4
+_0802E37C: .4byte gPlaySt
 
 	thumb_func_start sub_0802E380
 sub_0802E380: @ 0x0802E380
@@ -43137,7 +43137,7 @@ sub_0802E380: @ 0x0802E380
 	mov r0, sp
 	movs r2, #4
 	bl memcpy
-	ldr r0, _0802E3A8 @ =0x0202BBF4
+	ldr r0, _0802E3A8 @ =gPlaySt
 	adds r0, #0x40
 	ldrb r0, [r0]
 	lsls r0, r0, #0x19
@@ -43149,7 +43149,7 @@ sub_0802E380: @ 0x0802E380
 	bx r1
 	.align 2, 0
 _0802E3A4: .4byte 0x081C9814
-_0802E3A8: .4byte 0x0202BBF4
+_0802E3A8: .4byte gPlaySt
 
 	thumb_func_start sub_0802E3AC
 sub_0802E3AC: @ 0x0802E3AC
@@ -43161,7 +43161,7 @@ sub_0802E3AC: @ 0x0802E3AC
 	movs r0, #1
 	b _0802E3DA
 _0802E3BC:
-	ldr r1, _0802E3D4 @ =0x0202BBF4
+	ldr r1, _0802E3D4 @ =gPlaySt
 	movs r0, #0x80
 	ldrb r2, [r1, #0x14]
 	ands r0, r2
@@ -43174,7 +43174,7 @@ _0802E3BC:
 	lsrs r0, r0, #0x1f
 	b _0802E3DA
 	.align 2, 0
-_0802E3D4: .4byte 0x0202BBF4
+_0802E3D4: .4byte gPlaySt
 _0802E3D8:
 	movs r0, #0
 _0802E3DA:
@@ -43194,7 +43194,7 @@ sub_0802E3E0: @ 0x0802E3E0
 	mov r0, sp
 	movs r4, #0
 	strh r4, [r0]
-	ldr r7, _0802E4AC @ =0x0202BBF4
+	ldr r7, _0802E4AC @ =gPlaySt
 	ldr r2, _0802E4B0 @ =0x01000024
 	adds r1, r7, #0
 	bl CpuSet
@@ -43286,7 +43286,7 @@ _0802E40C:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0802E4AC: .4byte 0x0202BBF4
+_0802E4AC: .4byte gPlaySt
 _0802E4B0: .4byte 0x01000024
 _0802E4B4: .4byte 0x0202BC34
 _0802E4B8: .4byte 0xFFFFFE7F
@@ -43332,7 +43332,7 @@ sub_0802E4E8: @ 0x0802E4E8
 	bl sub_08079FDC
 	bl sub_08025184
 	bl sub_0802BF08
-	ldr r4, _0802E5A4 @ =0x0202BBF4
+	ldr r4, _0802E5A4 @ =gPlaySt
 	movs r5, #0
 	movs r0, #0x40
 	strb r0, [r4, #0xf]
@@ -43389,7 +43389,7 @@ sub_0802E4E8: @ 0x0802E4E8
 	.align 2, 0
 _0802E59C: .4byte OnGameLoopMain
 _0802E5A0: .4byte OnVBlank
-_0802E5A4: .4byte 0x0202BBF4
+_0802E5A4: .4byte gPlaySt
 _0802E5A8: .4byte 0x02022860
 _0802E5AC: .4byte 0x030027CC
 _0802E5B0: .4byte 0x0000FFE0
@@ -43407,7 +43407,7 @@ sub_0802E5B4: @ 0x0802E5B4
 	bl sub_08025124
 	bl sub_08025184
 	bl sub_0802BF08
-	ldr r4, _0802E640 @ =0x0202BBF4
+	ldr r4, _0802E640 @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r4, r0]
 	bl sub_08031A5C
@@ -43448,7 +43448,7 @@ sub_0802E5B4: @ 0x0802E5B4
 	.align 2, 0
 _0802E638: .4byte OnGameLoopMain
 _0802E63C: .4byte OnVBlank
-_0802E640: .4byte 0x0202BBF4
+_0802E640: .4byte gPlaySt
 _0802E644: .4byte 0x08C05464
 _0802E648: .4byte 0x02022860
 _0802E64C: .4byte 0x03002790
@@ -43457,7 +43457,7 @@ _0802E64C: .4byte 0x03002790
 sub_0802E650: @ 0x0802E650
 	push {r4, r5, lr}
 	adds r5, r0, #0
-	ldr r4, _0802E6D0 @ =0x0202BBF4
+	ldr r4, _0802E6D0 @ =gPlaySt
 	ldrb r0, [r4, #0xe]
 	cmp r0, #0x30
 	bne _0802E660
@@ -43507,7 +43507,7 @@ _0802E660:
 	ldr r0, [r0]
 	mov pc, r0
 	.align 2, 0
-_0802E6D0: .4byte 0x0202BBF4
+_0802E6D0: .4byte gPlaySt
 _0802E6D4: .4byte OnGameLoopMain
 _0802E6D8: .4byte OnVBlank
 _0802E6DC: .4byte 0x0202BBB4
@@ -43639,7 +43639,7 @@ _0802E800: .4byte 0x08C05540
 	thumb_func_start sub_0802E804
 sub_0802E804: @ 0x0802E804
 	push {r4, lr}
-	ldr r4, _0802E830 @ =0x0202BBF4
+	ldr r4, _0802E830 @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r4, r0]
 	bl sub_080195BC
@@ -43654,7 +43654,7 @@ sub_0802E804: @ 0x0802E804
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0802E830: .4byte 0x0202BBF4
+_0802E830: .4byte gPlaySt
 
 	thumb_func_start sub_0802E834
 sub_0802E834: @ 0x0802E834
@@ -43728,7 +43728,7 @@ _0802E8BC:
 	adds r4, #1
 	cmp r4, #0xbf
 	ble _0802E8A4
-	ldr r0, _0802E938 @ =0x0202BBF4
+	ldr r0, _0802E938 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	cmp r0, #0x2f
 	beq _0802E940
@@ -43787,7 +43787,7 @@ _0802E930:
 	ble _0802E8CC
 	b _0802E9B2
 	.align 2, 0
-_0802E938: .4byte 0x0202BBF4
+_0802E938: .4byte gPlaySt
 _0802E93C: .4byte 0x0631E004
 _0802E940:
 	movs r6, #1
@@ -43847,7 +43847,7 @@ _0802E9AC:
 	cmp r6, #0x3f
 	ble _0802E942
 _0802E9B2:
-	ldr r1, _0802E9C8 @ =0x0202BBF4
+	ldr r1, _0802E9C8 @ =gPlaySt
 	movs r0, #0xef
 	ldrb r2, [r1, #0x14]
 	ands r0, r2
@@ -43857,7 +43857,7 @@ _0802E9B2:
 	bx r0
 	.align 2, 0
 _0802E9C4: .4byte 0x0631E00C
-_0802E9C8: .4byte 0x0202BBF4
+_0802E9C8: .4byte gPlaySt
 
 	thumb_func_start sub_0802E9CC
 sub_0802E9CC: @ 0x0802E9CC
@@ -44061,7 +44061,7 @@ _0802EB78: .4byte 0x03002790
 	thumb_func_start sub_0802EB7C
 sub_0802EB7C: @ 0x0802EB7C
 	push {r4, lr}
-	ldr r4, _0802EB9C @ =0x0202BBF4
+	ldr r4, _0802EB9C @ =gPlaySt
 	adds r0, r4, #0
 	bl sub_080A05A0
 	bl sub_080B7880
@@ -44074,7 +44074,7 @@ sub_0802EB7C: @ 0x0802EB7C
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0802EB9C: .4byte 0x0202BBF4
+_0802EB9C: .4byte gPlaySt
 
 	thumb_func_start sub_0802EBA0
 sub_0802EBA0: @ 0x0802EBA0
@@ -44306,7 +44306,7 @@ _0802ED28:
 	thumb_func_start sub_0802ED30
 sub_0802ED30: @ 0x0802ED30
 	push {r4, lr}
-	ldr r4, _0802ED54 @ =0x0202BBF4
+	ldr r4, _0802ED54 @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r4, r0]
 	bl sub_08031A5C
@@ -44324,7 +44324,7 @@ _0802ED46:
 	movs r0, #1
 	b _0802ED5A
 	.align 2, 0
-_0802ED54: .4byte 0x0202BBF4
+_0802ED54: .4byte gPlaySt
 _0802ED58:
 	movs r0, #0
 _0802ED5A:
@@ -44908,7 +44908,7 @@ sub_0802F154: @ 0x0802F154
 	bl UnitLoadStatsFromChracter
 	movs r4, #8
 	ldrsb r4, [r6, r4]
-	ldr r1, _0802F1D8 @ =0x0202BBF4
+	ldr r1, _0802F1D8 @ =gPlaySt
 	movs r0, #0x40
 	ldrb r1, [r1, #0x14]
 	ands r0, r1
@@ -44921,7 +44921,7 @@ sub_0802F154: @ 0x0802F154
 	.align 2, 0
 _0802F1D0: .4byte 0x0203A810
 _0802F1D4: .4byte 0x0203A7F0
-_0802F1D8: .4byte 0x0202BBF4
+_0802F1D8: .4byte gPlaySt
 _0802F1DC:
 	lsls r0, r4, #1
 	adds r0, r0, r4
@@ -44986,12 +44986,12 @@ sub_0802F240: @ 0x0802F240
 	ldrb r0, [r4, #0xd]
 	add r0, sp
 	ldrb r0, [r0]
-	bl sub_080165F0
+	bl MakeNewItem
 	strh r0, [r4, #0x1a]
 	ldrb r0, [r4, #0xe]
 	add r0, sp
 	ldrb r0, [r0]
-	bl sub_080165F0
+	bl MakeNewItem
 	strh r0, [r4, #0x1c]
 	movs r0, #1
 	strb r0, [r4, #0xc]
@@ -45039,7 +45039,7 @@ _0802F2AC:
 	ldrb r0, [r4]
 	cmp r0, #0
 	beq _0802F2CA
-	bl sub_080165F0
+	bl MakeNewItem
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
 	b _0802F2D6
@@ -45546,7 +45546,7 @@ _0802F670:
 	mov r2, sp
 	adds r0, r2, r1
 	ldrb r0, [r0]
-	bl sub_080165F0
+	bl MakeNewItem
 	strh r0, [r4]
 	b _0802F696
 	.align 2, 0
@@ -46279,7 +46279,7 @@ sub_0802FC20: @ 0x0802FC20
 	bl GetUnitSMSId
 	bl sub_08025278
 	bl sub_08025A0C
-	ldr r0, _0802FCD0 @ =0x0202BBF4
+	ldr r0, _0802FCD0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -46294,7 +46294,7 @@ _0802FCC2:
 	.align 2, 0
 _0802FCC8: .4byte 0x08C055F4
 _0802FCCC: .4byte 0x0000FFFB
-_0802FCD0: .4byte 0x0202BBF4
+_0802FCD0: .4byte gPlaySt
 
 	thumb_func_start sub_0802FCD4
 sub_0802FCD4: @ 0x0802FCD4
@@ -47734,9 +47734,9 @@ sub_080307D4: @ 0x080307D4
 	bx r0
 	.align 2, 0
 
-	thumb_func_start sub_080307E4
-sub_080307E4: @ 0x080307E4
-	ldr r0, _080307F8 @ =0x0202BBF4
+	thumb_func_start GetPlayerLeaderUnitId
+GetPlayerLeaderUnitId: @ 0x080307E4
+	ldr r0, _080307F8 @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #2
 	beq _08030806
@@ -47746,7 +47746,7 @@ sub_080307E4: @ 0x080307E4
 	beq _08030802
 	b _0803080E
 	.align 2, 0
-_080307F8: .4byte 0x0202BBF4
+_080307F8: .4byte gPlaySt
 _080307FC:
 	cmp r0, #3
 	beq _0803080A
@@ -47889,7 +47889,7 @@ sub_080308E8: @ 0x080308E8
 	rsbs r1, r1, #0
 	ands r0, r1
 	str r0, [r4, #0xc]
-	ldr r5, _08030944 @ =0x0202BBF4
+	ldr r5, _08030944 @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r5, r0]
 	bl sub_08031A5C
@@ -47923,7 +47923,7 @@ _0803093C:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08030944: .4byte 0x0202BBF4
+_08030944: .4byte gPlaySt
 
 	thumb_func_start sub_08030948
 sub_08030948: @ 0x08030948
@@ -47992,7 +47992,7 @@ _080309B8: .4byte 0x08C04B94
 sub_080309BC: @ 0x080309BC
 	push {r4, r5, r6, lr}
 	adds r6, r0, #0
-	ldr r4, _08030A00 @ =0x0202BBF4
+	ldr r4, _08030A00 @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r4, r0]
 	bl sub_08031A5C
@@ -48024,7 +48024,7 @@ _080309EC:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08030A00: .4byte 0x0202BBF4
+_08030A00: .4byte gPlaySt
 
 	thumb_func_start sub_08030A04
 sub_08030A04: @ 0x08030A04
@@ -48250,7 +48250,7 @@ sub_08030B88: @ 0x08030B88
 	movs r0, #8
 	movs r2, #0
 	bl sub_08090800
-	ldr r1, _08030C4C @ =0x0202BBF4
+	ldr r1, _08030C4C @ =gPlaySt
 	movs r0, #0x80
 	ldrb r1, [r1, #0x14]
 	ands r0, r1
@@ -48291,7 +48291,7 @@ _08030C3C: .4byte 0x00001142
 _08030C40: .4byte 0x00000389
 _08030C44: .4byte sub_08030948
 _08030C48: .4byte 0x00000387
-_08030C4C: .4byte 0x0202BBF4
+_08030C4C: .4byte gPlaySt
 _08030C50: .4byte sub_08030988
 _08030C54: .4byte 0x00001134
 _08030C58: .4byte 0x00000383
@@ -48397,7 +48397,7 @@ _08030D04: .4byte 0x0202E3D4
 sub_08030D08: @ 0x08030D08
 	push {r4, r5, lr}
 	adds r3, r0, #0
-	ldr r0, _08030D50 @ =0x08BBFC7C
+	ldr r0, _08030D50 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0xb
 	ldrh r1, [r1, #8]
@@ -48431,7 +48431,7 @@ _08030D22:
 	bl sub_080045FC
 	b _08030D7C
 	.align 2, 0
-_08030D50: .4byte 0x08BBFC7C
+_08030D50: .4byte gpKeySt
 _08030D54:
 	ldr r2, [r3, #0x34]
 	adds r2, r4, r2
@@ -48463,7 +48463,7 @@ _08030D84: .4byte 0x0202BBB4
 sub_08030D88: @ 0x08030D88
 	push {r4, r5, r6, lr}
 	adds r4, r0, #0
-	ldr r5, _08030DA4 @ =0x0202BBF4
+	ldr r5, _08030DA4 @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r5, r0]
 	bl sub_08031A5C
@@ -48474,7 +48474,7 @@ sub_08030D88: @ 0x08030D88
 	bl sub_08004460
 	b _08030DF2
 	.align 2, 0
-_08030DA4: .4byte 0x0202BBF4
+_08030DA4: .4byte gPlaySt
 _08030DA8:
 	bl IsUnitSlotAvailable
 	movs r6, #0x10
@@ -48516,7 +48516,7 @@ _08030DF8: .4byte 0x0202BBB4
 	thumb_func_start sub_08030DFC
 sub_08030DFC: @ 0x08030DFC
 	push {r4, lr}
-	bl sub_080307E4
+	bl GetPlayerLeaderUnitId
 	bl GetUnitFromCharId
 	adds r1, r0, #0
 	cmp r1, #0
@@ -48590,7 +48590,7 @@ sub_08030E80: @ 0x08030E80
 	beq _08030E94
 	b _080310E0
 _08030E94:
-	ldr r1, _08030ECC @ =0x08BBFC7C
+	ldr r1, _08030ECC @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r2, [r0, #8]
 	movs r0, #0x80
@@ -48605,7 +48605,7 @@ _08030E94:
 	movs r3, #0x16
 	ldrsh r1, [r1, r3]
 	bl sub_0801D758
-	ldr r0, _08030ED4 @ =0x0202BBF4
+	ldr r0, _08030ED4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -48617,9 +48617,9 @@ _08030EC2:
 	bl m4aSongNumStart
 	b _080310E0
 	.align 2, 0
-_08030ECC: .4byte 0x08BBFC7C
+_08030ECC: .4byte gpKeySt
 _08030ED0: .4byte 0x0202BBB4
-_08030ED4: .4byte 0x0202BBF4
+_08030ED4: .4byte gPlaySt
 _08030ED8: .4byte 0x0000038B
 _08030EDC:
 	movs r0, #0x80
@@ -48673,7 +48673,7 @@ _08030F40:
 	cmp r0, #0
 	beq _08030F74
 	bl sub_0808667C
-	ldr r4, _08030F6C @ =0x0202BBF4
+	ldr r4, _08030F6C @ =gPlaySt
 	ldr r1, _08030F70 @ =0x0202BBB4
 	ldrh r0, [r1, #0x14]
 	strb r0, [r4, #0x12]
@@ -48687,7 +48687,7 @@ _08030F40:
 	lsls r0, r4, #0x1e
 	b _0803103C
 	.align 2, 0
-_08030F6C: .4byte 0x0202BBF4
+_08030F6C: .4byte gPlaySt
 _08030F70: .4byte 0x0202BBB4
 _08030F74:
 	movs r0, #1
@@ -48732,7 +48732,7 @@ _08030FBC: @ jump table
 	.4byte _08031078 @ case 4
 _08030FD0:
 	bl sub_0808667C
-	ldr r3, _0803101C @ =0x0202BBF4
+	ldr r3, _0803101C @ =gPlaySt
 	ldr r2, _08031020 @ =0x0202BBB4
 	ldrh r0, [r2, #0x14]
 	strb r0, [r3, #0x12]
@@ -48767,7 +48767,7 @@ _08031010:
 	bl sub_080045FC
 	b _080310F0
 	.align 2, 0
-_0803101C: .4byte 0x0202BBF4
+_0803101C: .4byte gPlaySt
 _08031020: .4byte 0x0202BBB4
 _08031024: .4byte 0x0202E3DC
 _08031028: .4byte 0x0000038A
@@ -48775,7 +48775,7 @@ _0803102C:
 	adds r0, r5, #0
 	movs r1, #0
 	bl sub_080045FC
-	ldr r0, _08031048 @ =0x0202BBF4
+	ldr r0, _08031048 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -48786,7 +48786,7 @@ _0803103C:
 	bl m4aSongNumStart
 	b _080310F0
 	.align 2, 0
-_08031048: .4byte 0x0202BBF4
+_08031048: .4byte gPlaySt
 _0803104C: .4byte 0x00000389
 _08031050:
 	adds r0, r4, #0
@@ -48811,7 +48811,7 @@ _08031078:
 	ldr r0, [r5, #0x58]
 	cmp r0, #2
 	bne _08031098
-	ldr r0, _08031094 @ =0x0202BBF4
+	ldr r0, _08031094 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -48822,7 +48822,7 @@ _08031078:
 	bl m4aSongNumStart
 	b _080310F0
 	.align 2, 0
-_08031094: .4byte 0x0202BBF4
+_08031094: .4byte gPlaySt
 _08031098:
 	adds r0, r4, #0
 	bl UnitBeginAction
@@ -48841,7 +48841,7 @@ _080310AC:
 	.align 2, 0
 _080310B8: .4byte 0x030045B0
 _080310BC:
-	ldr r0, _080310DC @ =0x08BBFC7C
+	ldr r0, _080310DC @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #8
 	ldrh r1, [r1, #8]
@@ -48855,7 +48855,7 @@ _080310BC:
 	bl sub_080045FC
 	b _080310F0
 	.align 2, 0
-_080310DC: .4byte 0x08BBFC7C
+_080310DC: .4byte gpKeySt
 _080310E0:
 	ldr r1, _080310F8 @ =0x0202BBB4
 	movs r2, #0x20
@@ -48890,7 +48890,7 @@ sub_08031114: @ 0x08031114
 	adds r5, r0, #0
 	ldr r0, _08031180 @ =0x08191D7C
 	movs r1, #0
-	bl sub_08012658
+	bl StartSpriteAnim
 	adds r4, r0, #0
 	movs r0, #0
 	strh r0, [r4, #0x22]
@@ -48922,7 +48922,7 @@ sub_08031114: @ 0x08031114
 	ldrsb r2, [r0, r2]
 	adds r0, r5, #0
 	bl sub_0801615C
-	ldr r0, _08031190 @ =0x0202BBF4
+	ldr r0, _08031190 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -48939,7 +48939,7 @@ _08031180: .4byte 0x08191D7C
 _08031184: .4byte 0x0202BBB4
 _08031188: .4byte 0x000006F4
 _0803118C: .4byte 0x030045B0
-_08031190: .4byte 0x0202BBF4
+_08031190: .4byte gPlaySt
 _08031194: .4byte 0x00000389
 
 	thumb_func_start sub_08031198
@@ -49000,7 +49000,7 @@ _080311D0:
 	adds r1, r5, #0
 	bl sub_08006884
 _0803120C:
-	ldr r0, _08031240 @ =0x08BBFC7C
+	ldr r0, _08031240 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #1
@@ -49020,9 +49020,9 @@ _08031230: .4byte 0x0202BBB4
 _08031234: .4byte 0x0202E3E4
 _08031238: .4byte 0x0202E3D8
 _0803123C: .4byte 0x08BFF768
-_08031240: .4byte 0x08BBFC7C
+_08031240: .4byte gpKeySt
 _08031244:
-	ldr r0, _0803125C @ =0x0202BBF4
+	ldr r0, _0803125C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -49033,7 +49033,7 @@ _08031244:
 	bl m4aSongNumStart
 	b _080312DA
 	.align 2, 0
-_0803125C: .4byte 0x0202BBF4
+_0803125C: .4byte gPlaySt
 _08031260:
 	movs r0, #2
 	ands r0, r1
@@ -49045,7 +49045,7 @@ _08031260:
 	movs r1, #4
 	bl sub_080045FC
 	bl sub_08032CCC
-	ldr r0, _08031290 @ =0x0202BBF4
+	ldr r0, _08031290 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -49055,7 +49055,7 @@ _08031260:
 	bl m4aSongNumStart
 	b _080312DA
 	.align 2, 0
-_08031290: .4byte 0x0202BBF4
+_08031290: .4byte gPlaySt
 _08031294: .4byte 0x0000038B
 _08031298:
 	lsls r0, r7, #0x18
@@ -49174,7 +49174,7 @@ _08031360:
 	adds r1, r4, #0
 	bl sub_0801E804
 _08031380:
-	ldr r0, _08031398 @ =0x0202BBF4
+	ldr r0, _08031398 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -49187,13 +49187,13 @@ _08031392:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08031398: .4byte 0x0202BBF4
+_08031398: .4byte gPlaySt
 _0803139C: .4byte 0x00000381
 
 	thumb_func_start sub_080313A0
 sub_080313A0: @ 0x080313A0
 	push {lr}
-	ldr r0, _080313B4 @ =0x0202BBF4
+	ldr r0, _080313B4 @ =gPlaySt
 	ldrb r0, [r0, #0xd]
 	cmp r0, #0
 	beq _080313AE
@@ -49202,12 +49202,12 @@ _080313AE:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080313B4: .4byte 0x0202BBF4
+_080313B4: .4byte gPlaySt
 
 	thumb_func_start sub_080313B8
 sub_080313B8: @ 0x080313B8
 	push {lr}
-	ldr r0, _080313D0 @ =0x0202BBF4
+	ldr r0, _080313D0 @ =gPlaySt
 	ldrb r0, [r0, #0xd]
 	cmp r0, #0
 	beq _080313CC
@@ -49218,7 +49218,7 @@ _080313CC:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080313D0: .4byte 0x0202BBF4
+_080313D0: .4byte gPlaySt
 
 	thumb_func_start sub_080313D4
 sub_080313D4: @ 0x080313D4
@@ -49235,7 +49235,7 @@ _080313E4: .4byte 0x08DAF4B8
 sub_080313E8: @ 0x080313E8
 	push {lr}
 	sub sp, #0x1c
-	ldr r0, _08031420 @ =0x0202BBF4
+	ldr r0, _08031420 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -49259,7 +49259,7 @@ sub_080313E8: @ 0x080313E8
 	beq _08031432
 	b _0803143A
 	.align 2, 0
-_08031420: .4byte 0x0202BBF4
+_08031420: .4byte gPlaySt
 _08031424: .4byte 0x0202BBB4
 _08031428:
 	ldr r1, [sp, #4]
@@ -49280,7 +49280,7 @@ sub_08031440: @ 0x08031440
 	push {r4, r5, lr}
 	adds r5, r0, #0
 	bl sub_0801C584
-	ldr r0, _0803149C @ =0x08BBFC7C
+	ldr r0, _0803149C @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #3
@@ -49303,7 +49303,7 @@ sub_08031440: @ 0x08031440
 	bl sub_0801D6D8
 	bl sub_08019EA4
 	bl sub_08025BB0
-	ldr r0, _080314A8 @ =0x0202BBF4
+	ldr r0, _080314A8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -49317,10 +49317,10 @@ _08031490:
 	bl sub_080045FC
 	b _0803155A
 	.align 2, 0
-_0803149C: .4byte 0x08BBFC7C
+_0803149C: .4byte gpKeySt
 _080314A0: .4byte 0x030045B0
 _080314A4: .4byte 0x0202BBB4
-_080314A8: .4byte 0x0202BBF4
+_080314A8: .4byte gPlaySt
 _080314AC: .4byte 0x0000038B
 _080314B0:
 	movs r0, #0x80
@@ -49362,7 +49362,7 @@ _080314E2:
 	movs r1, #6
 	bl sub_080045FC
 _08031504:
-	ldr r0, _08031570 @ =0x08BBFC7C
+	ldr r0, _08031570 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x80
 	lsls r0, r0, #2
@@ -49386,7 +49386,7 @@ _08031504:
 	movs r2, #2
 	ldrsh r1, [r4, r2]
 	bl sub_08015F0C
-	ldr r0, _08031574 @ =0x0202BBF4
+	ldr r0, _08031574 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -49411,8 +49411,8 @@ _08031560: .4byte 0x0202BBB4
 _08031564: .4byte 0x0202E3D8
 _08031568: .4byte 0x0202BD48
 _0803156C: .4byte 0x030045B0
-_08031570: .4byte 0x08BBFC7C
-_08031574: .4byte 0x0202BBF4
+_08031570: .4byte gpKeySt
+_08031574: .4byte gPlaySt
 _08031578: .4byte 0x0000038B
 
 	thumb_func_start sub_0803157C
@@ -49539,7 +49539,7 @@ sub_08031648: @ 0x08031648
 	thumb_func_start sub_08031664
 sub_08031664: @ 0x08031664
 	push {r4, lr}
-	ldr r1, _080316B8 @ =0x0202BBF4
+	ldr r1, _080316B8 @ =gPlaySt
 	movs r0, #0x80
 	ldrb r1, [r1, #0x14]
 	ands r0, r1
@@ -49580,7 +49580,7 @@ _080316B2:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080316B8: .4byte 0x0202BBF4
+_080316B8: .4byte gPlaySt
 _080316BC: .4byte 0x0202BBB4
 _080316C0: .4byte 0x02020140
 _080316C4: .4byte 0x0001000C
@@ -49632,7 +49632,7 @@ _0803170A:
 	ldrb r3, [r2, #4]
 	ands r0, r3
 	strb r0, [r2, #4]
-	ldr r0, _0803173C @ =0x0202BBF4
+	ldr r0, _0803173C @ =gPlaySt
 	ldrb r2, [r0, #0x14]
 	ands r1, r2
 	strb r1, [r0, #0x14]
@@ -49642,7 +49642,7 @@ _0803170A:
 	.align 2, 0
 _08031734: .4byte 0x08C0571C
 _08031738: .4byte 0x0202BBB4
-_0803173C: .4byte 0x0202BBF4
+_0803173C: .4byte gPlaySt
 
 	thumb_func_start sub_08031740
 sub_08031740: @ 0x08031740
@@ -50182,7 +50182,7 @@ _08031B3A:
 	thumb_func_start sub_08031B40
 sub_08031B40: @ 0x08031B40
 	movs r1, #0
-	ldr r0, _08031B50 @ =0x0202BBF4
+	ldr r0, _08031B50 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	cmp r0, #0x43
 	bne _08031B4C
@@ -50191,11 +50191,11 @@ _08031B4C:
 	adds r0, r1, #0
 	bx lr
 	.align 2, 0
-_08031B50: .4byte 0x0202BBF4
+_08031B50: .4byte gPlaySt
 
 	thumb_func_start sub_08031B54
 sub_08031B54: @ 0x08031B54
-	ldr r1, _08031B68 @ =0x0202BBF4
+	ldr r1, _08031B68 @ =gPlaySt
 	movs r0, #0x40
 	ldrb r1, [r1, #0x14]
 	ands r0, r1
@@ -50205,7 +50205,7 @@ sub_08031B54: @ 0x08031B54
 	lsrs r0, r0, #0x1f
 	bx lr
 	.align 2, 0
-_08031B68: .4byte 0x0202BBF4
+_08031B68: .4byte gPlaySt
 
 	thumb_func_start sub_08031B6C
 sub_08031B6C: @ 0x08031B6C
@@ -52058,7 +52058,7 @@ sub_08032A90: @ 0x08032A90
 	push {r4, lr}
 	adds r2, r0, #0
 	adds r4, r1, #0
-	ldr r0, _08032AC4 @ =0x0202BBF4
+	ldr r0, _08032AC4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsrs r0, r0, #7
@@ -52079,7 +52079,7 @@ _08032ABC:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08032AC4: .4byte 0x0202BBF4
+_08032AC4: .4byte gPlaySt
 _08032AC8: .4byte 0x08C05CD0
 _08032ACC: .4byte 0x0202BBB4
 
@@ -52104,7 +52104,7 @@ sub_08032AD0: @ 0x08032AD0
 	ldr r0, _08032B40 @ =0x08C05CA0
 	movs r1, #3
 	bl Proc_Start
-	ldr r4, _08032B44 @ =0x0202BBF4
+	ldr r4, _08032B44 @ =gPlaySt
 	adds r0, r4, #0
 	adds r0, #0x41
 	ldrb r0, [r0]
@@ -52137,7 +52137,7 @@ _08032B34: .4byte 0x0841DBCC
 _08032B38: .4byte 0x06015000
 _08032B3C: .4byte 0x0841DE88
 _08032B40: .4byte 0x08C05CA0
-_08032B44: .4byte 0x0202BBF4
+_08032B44: .4byte gPlaySt
 _08032B48: .4byte 0x0000038A
 
 	thumb_func_start sub_08032B4C
@@ -52148,7 +52148,7 @@ sub_08032B4C: @ 0x08032B4C
 	sub sp, #4
 	adds r6, r0, #0
 	movs r1, #0
-	ldr r0, _08032BF0 @ =0x0202BBF4
+	ldr r0, _08032BF0 @ =gPlaySt
 	adds r0, #0x42
 	mov r8, r0
 	ldrb r2, [r0]
@@ -52220,7 +52220,7 @@ _08032B68:
 	bl sub_08006884
 	b _08032C2E
 	.align 2, 0
-_08032BF0: .4byte 0x0202BBF4
+_08032BF0: .4byte gPlaySt
 _08032BF4: .4byte 0x08BFF7A8
 _08032BF8: .4byte 0x08BFF768
 _08032BFC: .4byte 0x08BFF780
@@ -52287,7 +52287,7 @@ _08032C76:
 	ldrh r1, [r1]
 	cmp r1, #0x1e
 	bne _08032C90
-	ldr r0, _08032C9C @ =0x08BBFC7C
+	ldr r0, _08032C9C @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #4
 	ldrh r1, [r1, #4]
@@ -52302,7 +52302,7 @@ _08032C90:
 	bx r0
 	.align 2, 0
 _08032C98: .4byte 0x08C05D08
-_08032C9C: .4byte 0x08BBFC7C
+_08032C9C: .4byte gpKeySt
 
 	thumb_func_start sub_08032CA0
 sub_08032CA0: @ 0x08032CA0
@@ -52413,7 +52413,7 @@ sub_08032D68: @ 0x08032D68
 	bl sub_08018E60
 	cmp r0, #0
 	bne _08032D7E
-	ldr r0, _08032D84 @ =0x0202BBF4
+	ldr r0, _08032D84 @ =gPlaySt
 	ldrb r0, [r0, #0xd]
 	cmp r0, #0
 	beq _08032D7E
@@ -52422,7 +52422,7 @@ _08032D7E:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08032D84: .4byte 0x0202BBF4
+_08032D84: .4byte gPlaySt
 
 	thumb_func_start sub_08032D88
 sub_08032D88: @ 0x08032D88
@@ -53144,7 +53144,7 @@ sub_08033304: @ 0x08033304
 	ldr r0, _08033330 @ =0x08C05E30
 	adds r1, r2, #0
 	bl sub_080043D4
-	ldr r0, _08033334 @ =0x0202BBF4
+	ldr r0, _08033334 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -53156,7 +53156,7 @@ sub_08033304: @ 0x08033304
 	.align 2, 0
 _0803332C: .4byte 0x030045B0
 _08033330: .4byte 0x08C05E30
-_08033334: .4byte 0x0202BBF4
+_08033334: .4byte gPlaySt
 _08033338:
 	ldr r0, _08033344 @ =0x08C05E30
 	movs r1, #3
@@ -53171,7 +53171,7 @@ _08033344: .4byte 0x08C05E30
 sub_08033348: @ 0x08033348
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _08033364 @ =0x0202BBF4
+	ldr r0, _08033364 @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	bl sub_08024774
 	bl sub_0804B950
@@ -53181,7 +53181,7 @@ sub_08033348: @ 0x08033348
 	bl sub_08004460
 	b _08033370
 	.align 2, 0
-_08033364: .4byte 0x0202BBF4
+_08033364: .4byte gPlaySt
 _08033368:
 	adds r1, r4, #0
 	adds r1, #0x4c
@@ -53221,7 +53221,7 @@ sub_08033378: @ 0x08033378
 	.align 2, 0
 _080333B0: .4byte 0x0203A858
 _080333B4:
-	ldr r0, _080333E0 @ =0x0202BBF4
+	ldr r0, _080333E0 @ =gPlaySt
 	ldrb r0, [r0, #0xd]
 	cmp r0, #0
 	beq _080333E8
@@ -53243,7 +53243,7 @@ _080333B4:
 	bl sub_080045FC
 	b _080333FA
 	.align 2, 0
-_080333E0: .4byte 0x0202BBF4
+_080333E0: .4byte gPlaySt
 _080333E4: .4byte 0x0202E3E8
 _080333E8:
 	adds r0, r6, #0
@@ -53375,7 +53375,7 @@ _080334D0:
 sub_080334E0: @ 0x080334E0
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _08033504 @ =0x0202BBF4
+	ldr r0, _08033504 @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	bl sub_08024848
 	movs r0, #4
@@ -53387,7 +53387,7 @@ sub_080334E0: @ 0x080334E0
 	bl sub_08004460
 	b _08033510
 	.align 2, 0
-_08033504: .4byte 0x0202BBF4
+_08033504: .4byte gPlaySt
 _08033508:
 	adds r1, r4, #0
 	adds r1, #0x4c
@@ -53585,7 +53585,7 @@ _0803368C:
 	ldrsb r0, [r5, r0]
 	cmp r0, #0
 	beq _080336DA
-	ldr r0, _080336C0 @ =0x0202BBF4
+	ldr r0, _080336C0 @ =gPlaySt
 	ldrb r0, [r0, #0xd]
 	cmp r0, #0
 	beq _080336C8
@@ -53607,7 +53607,7 @@ _0803368C:
 	bl sub_080045FC
 	b _080336DA
 	.align 2, 0
-_080336C0: .4byte 0x0202BBF4
+_080336C0: .4byte gPlaySt
 _080336C4: .4byte 0x0202E3E8
 _080336C8:
 	adds r0, r6, #0
@@ -55475,7 +55475,7 @@ _080345CE:
 	thumb_func_start sub_080345D4
 sub_080345D4: @ 0x080345D4
 	push {r4, lr}
-	ldr r0, _080345EC @ =0x0202BBF4
+	ldr r0, _080345EC @ =gPlaySt
 	adds r4, r0, #0
 	adds r4, #0x42
 	ldrb r1, [r4]
@@ -55486,7 +55486,7 @@ sub_080345D4: @ 0x080345D4
 	bl sub_08005308
 	b _08034630
 	.align 2, 0
-_080345EC: .4byte 0x0202BBF4
+_080345EC: .4byte gPlaySt
 _080345F0:
 	ldr r0, _08034614 @ =0x08C06030
 	movs r1, #3
@@ -55963,7 +55963,7 @@ _08034964:
 	ldrsb r1, [r5, r1]
 	bl sub_0802BF30
 	bl sub_0802BFD0
-	ldr r0, _080349A0 @ =0x0202BBF4
+	ldr r0, _080349A0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -55983,7 +55983,7 @@ _08034986:
 	bl sub_0801F484
 	b _080349E8
 	.align 2, 0
-_080349A0: .4byte 0x0202BBF4
+_080349A0: .4byte gPlaySt
 _080349A4:
 	movs r0, #0x10
 	ldrsb r0, [r5, r0]
@@ -55991,7 +55991,7 @@ _080349A4:
 	ldrsb r1, [r5, r1]
 	bl sub_0802BF30
 	bl sub_0802BFD0
-	ldr r0, _080349F0 @ =0x0202BBF4
+	ldr r0, _080349F0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -56009,7 +56009,7 @@ _080349C6:
 	adds r1, r4, #0
 	bl sub_0801F484
 	movs r0, #0x79
-	bl sub_080165F0
+	bl MakeNewItem
 	adds r1, r0, #0
 	adds r0, r5, #0
 	bl UnitAddItem
@@ -56019,7 +56019,7 @@ _080349E8:
 	pop {r1}
 	bx r1
 	.align 2, 0
-_080349F0: .4byte 0x0202BBF4
+_080349F0: .4byte gPlaySt
 _080349F4: .4byte 0x000006E9
 
 	thumb_func_start sub_080349F8
@@ -56329,7 +56329,7 @@ sub_08034C18: @ 0x08034C18
 	movs r6, #0
 	strb r0, [r4, #3]
 	adds r0, r5, #0
-	bl sub_080165F0
+	bl MakeNewItem
 	bl sub_0801769C
 	strb r0, [r4, #6]
 	strb r6, [r4, #5]
@@ -56358,7 +56358,7 @@ sub_08034C48: @ 0x08034C48
 	orrs r0, r1
 	str r0, [r5, #0xc]
 	movs r0, #0
-	bl sub_0802C7D8
+	bl GetTrap
 	subs r4, r4, r0
 	asrs r4, r4, #3
 	strb r4, [r5, #0x1c]
@@ -56378,7 +56378,7 @@ sub_08034C80: @ 0x08034C80
 	cmp r0, #0
 	beq _08034CB0
 	ldrb r0, [r4, #0x1c]
-	bl sub_0802C7D8
+	bl GetTrap
 	ldr r1, [r4, #0xc]
 	ldr r2, _08034CB8 @ =0xFFFFF7FF
 	ands r1, r2
@@ -56503,7 +56503,7 @@ sub_08034D3C: @ 0x08034D3C
 
 	thumb_func_start sub_08034D44
 sub_08034D44: @ 0x08034D44
-	ldr r1, _08034D54 @ =0x0202BBF4
+	ldr r1, _08034D54 @ =gPlaySt
 	movs r0, #0x40
 	ldrb r1, [r1, #0x14]
 	ands r0, r1
@@ -56512,7 +56512,7 @@ sub_08034D44: @ 0x08034D44
 	movs r0, #9
 	b _08034D5A
 	.align 2, 0
-_08034D54: .4byte 0x0202BBF4
+_08034D54: .4byte gPlaySt
 _08034D58:
 	movs r0, #0x13
 _08034D5A:
@@ -56543,7 +56543,7 @@ _08034D7A:
 _08034D7E:
 	movs r2, #0
 _08034D80:
-	ldr r0, _08034D94 @ =0x0202BBF4
+	ldr r0, _08034D94 @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #2
 	beq _08034DA2
@@ -56553,7 +56553,7 @@ _08034D80:
 	beq _08034D9E
 	b _08034DAA
 	.align 2, 0
-_08034D94: .4byte 0x0202BBF4
+_08034D94: .4byte gPlaySt
 _08034D98:
 	cmp r0, #3
 	beq _08034DA6
@@ -56595,7 +56595,7 @@ sub_08034DB8: @ 0x08034DB8
 	adds r0, #0x78
 	strb r1, [r0]
 	ldr r5, _08034E18 @ =0x081D92F4
-	ldr r4, _08034E1C @ =0x0202BBF4
+	ldr r4, _08034E1C @ =gPlaySt
 	movs r3, #0
 	movs r1, #7
 	adds r0, #0x15
@@ -56627,7 +56627,7 @@ _08034DDE:
 	.align 2, 0
 _08034E14: .4byte 0x0203A8E8
 _08034E18: .4byte 0x081D92F4
-_08034E1C: .4byte 0x0202BBF4
+_08034E1C: .4byte gPlaySt
 _08034E20: .4byte 0x08C061A8
 
 	thumb_func_start sub_08034E24
@@ -56644,7 +56644,7 @@ sub_08034E24: @ 0x08034E24
 	strb r1, [r2]
 	adds r1, r0, #0
 	ldr r5, _08034E78 @ =0x081D92F4
-	ldr r4, _08034E7C @ =0x0202BBF4
+	ldr r4, _08034E7C @ =gPlaySt
 	movs r0, #0
 	movs r3, #7
 	adds r2, r1, #0
@@ -56673,7 +56673,7 @@ _08034E46:
 	.align 2, 0
 _08034E74: .4byte 0x0203A8E8
 _08034E78: .4byte 0x081D92F4
-_08034E7C: .4byte 0x0202BBF4
+_08034E7C: .4byte gPlaySt
 _08034E80: .4byte 0x08C061C0
 
 	thumb_func_start sub_08034E84
@@ -56715,7 +56715,7 @@ sub_08034EBC: @ 0x08034EBC
 	sub sp, #0xc
 	mov r8, r0
 	movs r5, #0
-	ldr r0, _08034F48 @ =0x0202BBF4
+	ldr r0, _08034F48 @ =gPlaySt
 	ldrb r2, [r0, #0xf]
 	mov r1, sp
 	ldr r0, _08034F4C @ =0x081D8EEC
@@ -56782,7 +56782,7 @@ _08034F3C:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08034F48: .4byte 0x0202BBF4
+_08034F48: .4byte gPlaySt
 _08034F4C: .4byte 0x081D8EEC
 _08034F50: .4byte 0x00000427
 _08034F54: .4byte 0x0203A8E8
@@ -56981,7 +56981,7 @@ sub_080350BC: @ 0x080350BC
 	push {r7}
 	sub sp, #0xc
 	movs r5, #0
-	ldr r0, _08035148 @ =0x0202BBF4
+	ldr r0, _08035148 @ =gPlaySt
 	ldrb r2, [r0, #0xf]
 	ldr r0, _0803514C @ =0x08C061A4
 	ldr r0, [r0]
@@ -57047,7 +57047,7 @@ _08035138:
 	pop {r1}
 	bx r1
 	.align 2, 0
-_08035148: .4byte 0x0202BBF4
+_08035148: .4byte gPlaySt
 _0803514C: .4byte 0x08C061A4
 _08035150: .4byte 0x081D8EEC
 _08035154: .4byte 0x00000427
@@ -57603,7 +57603,7 @@ sub_08035578: @ 0x08035578
 	ldr r1, [r4, #0x30]
 	ldr r2, [r4, #0x58]
 	bl sub_08015DE8
-	ldr r0, _080355B8 @ =0x08BBFC7C
+	ldr r0, _080355B8 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #9
 	ldrh r1, [r1, #4]
@@ -57630,7 +57630,7 @@ _080355AC:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080355B8: .4byte 0x08BBFC7C
+_080355B8: .4byte gpKeySt
 
 	thumb_func_start sub_080355BC
 sub_080355BC: @ 0x080355BC
@@ -57677,7 +57677,7 @@ sub_080355FC: @ 0x080355FC
 	movs r0, #1
 	mov r1, ip
 	strb r0, [r1]
-	ldr r1, _08035658 @ =0x0202BBF4
+	ldr r1, _08035658 @ =gPlaySt
 	ldrb r0, [r1, #0xd]
 	cmp r0, #0
 	beq _0803567E
@@ -57716,7 +57716,7 @@ _0803564E:
 	bl sub_0801615C
 	b _08035690
 	.align 2, 0
-_08035658: .4byte 0x0202BBF4
+_08035658: .4byte gPlaySt
 _0803565C: .4byte 0x030045B0
 _08035660: .4byte 0x0202E3E8
 _08035664: .4byte 0x0203A978
@@ -57999,7 +57999,7 @@ _080358BC:
 	lsls r1, r1, #0x18
 	asrs r1, r1, #0x18
 	bl sub_080793E4
-	ldr r0, _080358F0 @ =0x0202BBF4
+	ldr r0, _080358F0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -58019,7 +58019,7 @@ _080358E8:
 	pop {r1}
 	bx r1
 	.align 2, 0
-_080358F0: .4byte 0x0202BBF4
+_080358F0: .4byte gPlaySt
 _080358F4: .4byte 0x08C062F0
 
 	thumb_func_start sub_080358F8
@@ -62119,8 +62119,8 @@ _080377F8: .4byte 0x0202E3E0
 _080377FC: .4byte 0x0202E3D4
 _08037800: .4byte 0x0202E3D8
 
-	thumb_func_start sub_08037804
-sub_08037804: @ 0x08037804
+	thumb_func_start CharStoreAI
+CharStoreAI: @ 0x08037804
 	adds r3, r0, #0
 	ldrb r0, [r1, #0xc]
 	adds r2, r3, #0
@@ -66027,7 +66027,7 @@ _0803961C: .4byte 0x030013C0
 
 	thumb_func_start sub_08039620
 sub_08039620: @ 0x08039620
-	ldr r1, _08039630 @ =0x0202BBF4
+	ldr r1, _08039630 @ =gPlaySt
 	ldr r0, _08039634 @ =0x030013C0
 	ldr r0, [r0]
 	ldrb r0, [r0, #4]
@@ -66035,7 +66035,7 @@ sub_08039620: @ 0x08039620
 	muls r0, r1, r0
 	bx lr
 	.align 2, 0
-_08039630: .4byte 0x0202BBF4
+_08039630: .4byte gPlaySt
 _08039634: .4byte 0x030013C0
 
 	thumb_func_start sub_08039638
@@ -66218,7 +66218,7 @@ _08039784:
 	adds r5, r3, r0
 _08039788:
 	adds r0, r2, #0
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r4, r0, #0x10
 	cmp r4, #0
@@ -66766,7 +66766,7 @@ _08039BA6:
 sub_08039BB8: @ 0x08039BB8
 	push {r4, r5, r6, lr}
 	sub sp, #0xc
-	ldr r0, _08039C08 @ =0x0202BBF4
+	ldr r0, _08039C08 @ =gPlaySt
 	ldrb r2, [r0, #0xf]
 	mov r1, sp
 	ldr r0, _08039C0C @ =0x081D93FC
@@ -66805,7 +66805,7 @@ _08039BFE:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08039C08: .4byte 0x0202BBF4
+_08039C08: .4byte gPlaySt
 _08039C0C: .4byte 0x081D93FC
 
 	thumb_func_start sub_08039C10
@@ -67056,7 +67056,7 @@ sub_08039DF0: @ 0x08039DF0
 	push {r4, r5, r6, lr}
 	movs r1, #0
 	movs r5, #0
-	ldr r0, _08039E10 @ =0x0202BBF4
+	ldr r0, _08039E10 @ =gPlaySt
 	movs r2, #0xe
 	ldrsb r2, [r0, r2]
 	movs r4, #0xff
@@ -67069,7 +67069,7 @@ sub_08039DF0: @ 0x08039DF0
 	beq _08039E1A
 	b _08039E30
 	.align 2, 0
-_08039E10: .4byte 0x0202BBF4
+_08039E10: .4byte gPlaySt
 _08039E14:
 	cmp r0, #0x80
 	beq _08039E1E
@@ -67609,7 +67609,7 @@ sub_0803A1FC: @ 0x0803A1FC
 	push {r4, r5, r6, lr}
 	adds r5, r0, #0
 	adds r6, r1, #0
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	adds r4, r0, #0
 	lsls r4, r4, #0x10
 	lsrs r4, r4, #0x10
@@ -67890,7 +67890,7 @@ sub_0803A414: @ 0x0803A414
 	mov sl, r1
 	ldr r0, _0803A438 @ =0x030045B0
 	ldr r0, [r0]
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r7, r0, #0x10
 	cmp r7, #0
@@ -67901,7 +67901,7 @@ _0803A438: .4byte 0x030045B0
 _0803A43C:
 	ldr r0, _0803A468 @ =0x030045B0
 	ldr r0, [r0]
-	bl sub_08016BF4
+	bl GetUnitEquippedWeaponSlot
 	lsls r0, r0, #0x18
 	lsrs r0, r0, #0x18
 	mov r1, sb
@@ -68076,7 +68076,7 @@ sub_0803A574: @ 0x0803A574
 	muls r1, r2, r1
 	lsls r1, r1, #0x10
 	lsrs r5, r1, #0x14
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r2, r0, #0x10
 	mov r3, r8
@@ -68238,7 +68238,7 @@ sub_0803A6B8: @ 0x0803A6B8
 	lsls r1, r1, #0x10
 	lsrs r1, r1, #0x14
 	str r1, [sp, #4]
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
 	mov sl, r0
@@ -68594,7 +68594,7 @@ sub_0803A98C: @ 0x0803A98C
 	sub sp, #8
 	ldr r4, _0803A9BC @ =0x030045B0
 	ldr r0, [r4]
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r1, r0, #0x10
 	cmp r1, #0
@@ -70497,7 +70497,7 @@ _0803B86C:
 	lsls r0, r0, #0x18
 	lsrs r4, r0, #0x18
 	adds r0, r5, #0
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
 	cmp r0, #0
@@ -73197,7 +73197,7 @@ sub_0803CDC0: @ 0x0803CDC0
 	stm r1!, {r3, r4, r5}
 	ldr r0, [r0]
 	str r0, [r1]
-	ldr r0, _0803CDF4 @ =0x0202BBF4
+	ldr r0, _0803CDF4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -73214,7 +73214,7 @@ _0803CDE8:
 	bx r0
 	.align 2, 0
 _0803CDF0: .4byte 0x081D9490
-_0803CDF4: .4byte 0x0202BBF4
+_0803CDF4: .4byte gPlaySt
 
 	thumb_func_start sub_0803CDF8
 sub_0803CDF8: @ 0x0803CDF8
@@ -75933,7 +75933,7 @@ sub_0803E248: @ 0x0803E248
 	mov r0, sp
 	movs r2, #8
 	bl memcpy
-	ldr r0, _0803E27C @ =0x0202BBF4
+	ldr r0, _0803E27C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -75950,7 +75950,7 @@ _0803E26E:
 	bx r0
 	.align 2, 0
 _0803E278: .4byte 0x081DAE86
-_0803E27C: .4byte 0x0202BBF4
+_0803E27C: .4byte gPlaySt
 
 	thumb_func_start sub_0803E280
 sub_0803E280: @ 0x0803E280
@@ -75974,7 +75974,7 @@ _0803E2A0: .4byte 0x0203D9F4
 sub_0803E2A4: @ 0x0803E2A4
 	push {r4, r5, r6, lr}
 	adds r5, r0, #0
-	ldr r0, _0803E2C8 @ =0x08BBFC7C
+	ldr r0, _0803E2C8 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r4, [r0, #8]
 	adds r3, r4, #0
@@ -75991,7 +75991,7 @@ sub_0803E2A4: @ 0x0803E2A4
 	str r3, [r0]
 	b _0803E328
 	.align 2, 0
-_0803E2C8: .4byte 0x08BBFC7C
+_0803E2C8: .4byte gpKeySt
 _0803E2CC: .4byte 0x0203DC30
 _0803E2D0: .4byte 0x030013F4
 _0803E2D4:
@@ -77056,7 +77056,7 @@ sub_0803EB44: @ 0x0803EB44
 	lsrs r5, r2, #0x18
 	lsls r3, r3, #0x18
 	lsrs r6, r3, #0x18
-	ldr r1, _0803EBA4 @ =0x08BBFC7C
+	ldr r1, _0803EBA4 @ =gpKeySt
 	ldr r2, [r1]
 	ldrh r3, [r2, #6]
 	movs r0, #0x40
@@ -77100,7 +77100,7 @@ _0803EB9E:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0803EBA4: .4byte 0x08BBFC7C
+_0803EBA4: .4byte gpKeySt
 
 	thumb_func_start sub_0803EBA8
 sub_0803EBA8: @ 0x0803EBA8
@@ -77163,7 +77163,7 @@ sub_0803EBA8: @ 0x0803EBA8
 	movs r1, #1
 	bl sub_0803E13C
 _0803EC26:
-	ldr r0, _0803EC7C @ =0x08BBFC7C
+	ldr r0, _0803EC7C @ =gpKeySt
 	ldr r1, [r0]
 	adds r0, r7, #0
 	ldrh r1, [r1, #8]
@@ -77203,7 +77203,7 @@ _0803EC26:
 	.align 2, 0
 _0803EC74: .4byte 0x08C07F80
 _0803EC78: .4byte 0x0203D908
-_0803EC7C: .4byte 0x08BBFC7C
+_0803EC7C: .4byte gpKeySt
 _0803EC80:
 	movs r0, #2
 	bl sub_0803E248
@@ -77231,7 +77231,7 @@ _0803EC96:
 	bl sub_080045FC
 	b _0803ED14
 _0803ECB8:
-	ldr r5, _0803ED24 @ =0x08BBFC7C
+	ldr r5, _0803ED24 @ =gpKeySt
 	ldr r1, [r5]
 	movs r0, #2
 	ldrh r1, [r1, #8]
@@ -77260,7 +77260,7 @@ _0803ECDA:
 	asrs r0, r0, #0x18
 	cmp r0, #0
 	beq _0803ED14
-	ldr r0, _0803ED2C @ =0x0202BBF4
+	ldr r0, _0803ED2C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -77284,9 +77284,9 @@ _0803ED14:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0803ED24: .4byte 0x08BBFC7C
+_0803ED24: .4byte gpKeySt
 _0803ED28: .4byte 0x0203D908
-_0803ED2C: .4byte 0x0202BBF4
+_0803ED2C: .4byte gPlaySt
 _0803ED30: .4byte 0x0000038A
 
 	thumb_func_start sub_0803ED34
@@ -77502,7 +77502,7 @@ _0803EECE:
 	adds r1, #0x28
 	movs r0, #0x50
 	bl sub_0804A740
-	ldr r0, _0803EF0C @ =0x08BBFC7C
+	ldr r0, _0803EF0C @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #1
 	ldrh r1, [r1, #8]
@@ -77526,7 +77526,7 @@ _0803EF00:
 	ldr r0, [r0]
 	mov pc, r0
 	.align 2, 0
-_0803EF0C: .4byte 0x08BBFC7C
+_0803EF0C: .4byte gpKeySt
 _0803EF10: .4byte _0803EF14
 _0803EF14: @ jump table
 	.4byte _0803EF34 @ case 0
@@ -77628,16 +77628,16 @@ _0803EFC0:
 	ldr r0, [r7, #0x38]
 	cmp r1, r0
 	bge _0803F004
-	ldr r0, _0803F000 @ =0x08BBFC7C
+	ldr r0, _0803F000 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x80
 	ldrh r2, [r1, #6]
 	orrs r0, r2
 	b _0803F00E
 	.align 2, 0
-_0803F000: .4byte 0x08BBFC7C
+_0803F000: .4byte gpKeySt
 _0803F004:
-	ldr r0, _0803F018 @ =0x08BBFC7C
+	ldr r0, _0803F018 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x40
 	ldrh r3, [r1, #6]
@@ -77648,7 +77648,7 @@ _0803F00E:
 	strb r0, [r4]
 	b _0803F106
 	.align 2, 0
-_0803F018: .4byte 0x08BBFC7C
+_0803F018: .4byte gpKeySt
 _0803F01C:
 	movs r0, #2
 	bl sub_0803E248
@@ -77760,7 +77760,7 @@ _0803F0FA:
 	movs r1, #6
 	bl sub_080045FC
 _0803F106:
-	ldr r0, _0803F13C @ =0x08BBFC7C
+	ldr r0, _0803F13C @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #2
 	ldrh r1, [r1, #8]
@@ -77783,7 +77783,7 @@ _0803F106:
 _0803F130: .4byte 0x0203DA60
 _0803F134: .4byte 0x0203DC34
 _0803F138: .4byte 0x0203D908
-_0803F13C: .4byte 0x08BBFC7C
+_0803F13C: .4byte gpKeySt
 _0803F140:
 	cmp r0, #8
 	beq _0803F14E
@@ -77798,7 +77798,7 @@ _0803F14E:
 	movs r1, #6
 	bl sub_080045FC
 _0803F15A:
-	ldr r0, _0803F204 @ =0x08BBFC7C
+	ldr r0, _0803F204 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #8
 	ldrh r1, [r1, #8]
@@ -77812,7 +77812,7 @@ _0803F15A:
 	asrs r0, r0, #0x18
 	cmp r0, #0
 	beq _0803F196
-	ldr r0, _0803F208 @ =0x0202BBF4
+	ldr r0, _0803F208 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -77828,7 +77828,7 @@ _0803F188:
 	movs r1, #9
 	bl sub_080045FC
 _0803F196:
-	ldr r0, _0803F204 @ =0x08BBFC7C
+	ldr r0, _0803F204 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x40
 	ldrh r1, [r1, #6]
@@ -77881,8 +77881,8 @@ _0803F1CC:
 	bl sub_08049438
 	b _0803F21E
 	.align 2, 0
-_0803F204: .4byte 0x08BBFC7C
-_0803F208: .4byte 0x0202BBF4
+_0803F204: .4byte gpKeySt
+_0803F208: .4byte gPlaySt
 _0803F20C: .4byte 0x0000038A
 _0803F210: .4byte 0x0203D908
 _0803F214:
@@ -77892,7 +77892,7 @@ _0803F214:
 	subs r0, #1
 	str r0, [r7, #0x40]
 _0803F21E:
-	ldr r0, _0803F298 @ =0x08BBFC7C
+	ldr r0, _0803F298 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x80
 	ldrh r1, [r1, #6]
@@ -77950,7 +77950,7 @@ _0803F25C:
 	bl sub_08049438
 	b _0803F2A8
 	.align 2, 0
-_0803F298: .4byte 0x08BBFC7C
+_0803F298: .4byte gpKeySt
 _0803F29C:
 	subs r0, r1, #1
 	ldr r1, [r7, #0x40]
@@ -78187,7 +78187,7 @@ sub_0803F454: @ 0x0803F454
 	adds r1, #0x18
 	movs r0, #0x60
 	bl sub_08049A44
-	ldr r0, _0803F4F8 @ =0x08BBFC7C
+	ldr r0, _0803F4F8 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x20
 	ldrh r1, [r1, #8]
@@ -78204,7 +78204,7 @@ sub_0803F454: @ 0x0803F454
 	movs r0, #3
 	bl sub_0803E248
 _0803F486:
-	ldr r0, _0803F4F8 @ =0x08BBFC7C
+	ldr r0, _0803F4F8 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x10
 	ldrh r1, [r1, #8]
@@ -78230,7 +78230,7 @@ _0803F4A8:
 	lsls r1, r1, #3
 	adds r1, #0x20
 	bl sub_0804A740
-	ldr r0, _0803F4F8 @ =0x08BBFC7C
+	ldr r0, _0803F4F8 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #2
@@ -78256,7 +78256,7 @@ _0803F4A8:
 	bl sub_0800457C
 	b _0803F548
 	.align 2, 0
-_0803F4F8: .4byte 0x08BBFC7C
+_0803F4F8: .4byte gpKeySt
 _0803F4FC: .4byte 0x02022C7E
 _0803F500:
 	movs r0, #1
@@ -79239,7 +79239,7 @@ sub_0803FCAC: @ 0x0803FCAC
 	push {r4, r5, r6, r7, lr}
 	adds r5, r0, #0
 	adds r6, r1, #0
-	ldr r4, _0803FD2C @ =0x08BBFC7C
+	ldr r4, _0803FD2C @ =gpKeySt
 	ldr r1, [r4]
 	movs r0, #0x40
 	ldrh r1, [r1, #6]
@@ -79301,7 +79301,7 @@ _0803FD0C:
 	ldr r0, [r0]
 	mov pc, r0
 	.align 2, 0
-_0803FD2C: .4byte 0x08BBFC7C
+_0803FD2C: .4byte gpKeySt
 _0803FD30: .4byte _0803FD34
 _0803FD34: @ jump table
 	.4byte _0803FD54 @ case 0
@@ -79403,7 +79403,7 @@ _0803FDFC:
 	movs r0, #0
 	bl sub_0803E248
 _0803FE02:
-	ldr r0, _0803FE1C @ =0x08BBFC7C
+	ldr r0, _0803FE1C @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x80
 	lsls r0, r0, #1
@@ -79417,7 +79417,7 @@ _0803FE02:
 	adds r4, r0, #0
 	b _0803FE32
 	.align 2, 0
-_0803FE1C: .4byte 0x08BBFC7C
+_0803FE1C: .4byte gpKeySt
 _0803FE20:
 	ldrb r2, [r4]
 	adds r0, r5, #0
@@ -79440,7 +79440,7 @@ _0803FE32:
 	cmp r7, r0
 	bne _0803FE20
 _0803FE4A:
-	ldr r4, _0803FEEC @ =0x08BBFC7C
+	ldr r4, _0803FEEC @ =gpKeySt
 	ldr r1, [r4]
 	movs r0, #0x80
 	lsls r0, r0, #2
@@ -79521,7 +79521,7 @@ _0803FEE0:
 	bl sub_080045FC
 	b _0803FF28
 	.align 2, 0
-_0803FEEC: .4byte 0x08BBFC7C
+_0803FEEC: .4byte gpKeySt
 _0803FEF0: .4byte 0x00FF00FF
 _0803FEF4:
 	movs r0, #2
@@ -79825,7 +79825,7 @@ sub_08040148: @ 0x08040148
 	movs r0, #0x40
 	movs r1, #0x58
 	bl sub_08049A44
-	ldr r0, _080401D8 @ =0x08BBFC7C
+	ldr r0, _080401D8 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x20
 	ldrh r1, [r1, #8]
@@ -79842,7 +79842,7 @@ sub_08040148: @ 0x08040148
 	movs r0, #3
 	bl sub_0803E248
 _08040176:
-	ldr r0, _080401D8 @ =0x08BBFC7C
+	ldr r0, _080401D8 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x10
 	ldrh r1, [r1, #8]
@@ -79866,7 +79866,7 @@ _08040198:
 	adds r0, #0x50
 	movs r1, #0x60
 	bl sub_0804A740
-	ldr r0, _080401D8 @ =0x08BBFC7C
+	ldr r0, _080401D8 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #2
@@ -79886,7 +79886,7 @@ _08040198:
 	bl sub_0800457C
 	b _08040226
 	.align 2, 0
-_080401D8: .4byte 0x08BBFC7C
+_080401D8: .4byte gpKeySt
 _080401DC: .4byte 0x02022F76
 _080401E0:
 	movs r0, #1
@@ -80751,7 +80751,7 @@ sub_080408F8: @ 0x080408F8
 	push {r4, lr}
 	adds r4, r0, #0
 	bl sub_080498BC
-	ldr r0, _08040934 @ =0x08BBFC7C
+	ldr r0, _08040934 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #1
 	ldrh r1, [r1, #8]
@@ -80777,7 +80777,7 @@ _0804092E:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08040934: .4byte 0x08BBFC7C
+_08040934: .4byte gpKeySt
 _08040938: .4byte 0x086EA858
 _0804093C: .4byte 0x086EA8D0
 _08040940: .4byte 0x0000040C
@@ -80799,7 +80799,7 @@ _08040958:
 	movs r2, #0
 	bl sub_08003788
 _08040962:
-	ldr r0, _08040978 @ =0x0202BBF4
+	ldr r0, _08040978 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -80811,7 +80811,7 @@ _08040974:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08040978: .4byte 0x0202BBF4
+_08040978: .4byte gPlaySt
 
 	thumb_func_start sub_0804097C
 sub_0804097C: @ 0x0804097C
@@ -81581,7 +81581,7 @@ sub_08040FC0: @ 0x08040FC0
 	bl sub_08004584
 	cmp r0, #0
 	beq _0804100C
-	ldr r0, _08041008 @ =0x08BBFC7C
+	ldr r0, _08041008 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #2
 	ldrh r1, [r1, #8]
@@ -81597,7 +81597,7 @@ _08040FF2:
 	.align 2, 0
 _08041000: .4byte 0x0203DC0C
 _08041004: .4byte 0x08C07DF8
-_08041008: .4byte 0x08BBFC7C
+_08041008: .4byte gpKeySt
 _0804100C:
 	bl sub_08048300
 	ldr r2, _08041054 @ =0x08C07DAC
@@ -81683,7 +81683,7 @@ _08041098:
 	movs r1, #1
 	bl sub_0803E13C
 _080410C0:
-	ldr r0, _08041120 @ =0x08BBFC7C
+	ldr r0, _08041120 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #8
 	ldrh r1, [r1, #8]
@@ -81728,7 +81728,7 @@ _080410DE:
 	b _0804119E
 	.align 2, 0
 _0804111C: .4byte 0x000003CD
-_08041120: .4byte 0x08BBFC7C
+_08041120: .4byte gpKeySt
 _08041124: .4byte 0x08C07DAC
 _08041128: .4byte 0x0203D908
 _0804112C:
@@ -82105,7 +82105,7 @@ sub_080413FC: @ 0x080413FC
 	strb r0, [r5]
 	ldrb r0, [r4]
 	str r0, [r7, #0x38]
-	ldr r0, _0804147C @ =0x0202BBF4
+	ldr r0, _0804147C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -82134,7 +82134,7 @@ _08041450:
 	b _08041490
 	.align 2, 0
 _08041478: .4byte 0x0203D908
-_0804147C: .4byte 0x0202BBF4
+_0804147C: .4byte gPlaySt
 _08041480: .4byte 0x08C07DAC
 _08041484: .4byte 0x000003D3
 _08041488:
@@ -82160,7 +82160,7 @@ _080414AC: .4byte 0x0203DC74
 	thumb_func_start sub_080414B0
 sub_080414B0: @ 0x080414B0
 	push {lr}
-	ldr r0, _080414C8 @ =0x0202BBF4
+	ldr r0, _080414C8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -82172,7 +82172,7 @@ _080414C4:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080414C8: .4byte 0x0202BBF4
+_080414C8: .4byte gPlaySt
 
 	thumb_func_start sub_080414CC
 sub_080414CC: @ 0x080414CC
@@ -82319,7 +82319,7 @@ sub_080415D4: @ 0x080415D4
 	ldrsh r0, [r0, r1]
 	cmp r0, #0
 	bne _08041604
-	ldr r0, _08041740 @ =0x0202BBF4
+	ldr r0, _08041740 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -82483,7 +82483,7 @@ _0804172E:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08041740: .4byte 0x0202BBF4
+_08041740: .4byte gPlaySt
 _08041744: .4byte 0x08C08368
 _08041748: .4byte 0x0203D908
 _0804174C: .4byte 0x08C07DAC
@@ -82499,7 +82499,7 @@ sub_08041758: @ 0x08041758
 	ldrsh r0, [r0, r1]
 	cmp r0, #0
 	bne _08041778
-	ldr r0, _080417EC @ =0x0202BBF4
+	ldr r0, _080417EC @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -82565,7 +82565,7 @@ _080417E4:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080417EC: .4byte 0x0202BBF4
+_080417EC: .4byte gPlaySt
 _080417F0: .4byte 0x0203DC0C
 _080417F4: .4byte 0x030046BC
 _080417F8: .4byte 0x08C07DAC
@@ -83097,7 +83097,7 @@ sub_08041C74: @ 0x08041C74
 	lsrs r6, r2, #0x18
 	lsls r0, r0, #0x18
 	lsrs r7, r0, #0x18
-	ldr r1, _08041CFC @ =0x08BBFC7C
+	ldr r1, _08041CFC @ =gpKeySt
 	ldr r3, [r1]
 	ldrh r2, [r3, #6]
 	movs r0, #0x40
@@ -83160,7 +83160,7 @@ _08041CF6:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08041CFC: .4byte 0x08BBFC7C
+_08041CFC: .4byte gpKeySt
 
 	thumb_func_start sub_08041D00
 sub_08041D00: @ 0x08041D00
@@ -83191,7 +83191,7 @@ sub_08041D00: @ 0x08041D00
 	movs r0, #3
 	bl sub_0803E248
 _08041D3A:
-	ldr r4, _08041D78 @ =0x08BBFC7C
+	ldr r4, _08041D78 @ =gpKeySt
 	ldr r1, [r4]
 	movs r0, #1
 	ldrh r1, [r1, #8]
@@ -83220,7 +83220,7 @@ _08041D6E:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08041D78: .4byte 0x08BBFC7C
+_08041D78: .4byte gpKeySt
 
 	thumb_func_start sub_08041D7C
 sub_08041D7C: @ 0x08041D7C
@@ -83228,7 +83228,7 @@ sub_08041D7C: @ 0x08041D7C
 	adds r4, r0, #0
 	ldr r0, [r4, #0x48]
 	bl ReadGameSave
-	ldr r1, _08041DBC @ =0x0202BBF4
+	ldr r1, _08041DBC @ =gPlaySt
 	movs r0, #0xdf
 	ldrb r2, [r1, #0x14]
 	ands r0, r2
@@ -83252,7 +83252,7 @@ sub_08041D7C: @ 0x08041D7C
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08041DBC: .4byte 0x0202BBF4
+_08041DBC: .4byte gPlaySt
 _08041DC0: .4byte 0x0203D908
 
 	thumb_func_start sub_08041DC4
@@ -83804,7 +83804,7 @@ _0804224E:
 	bl sub_08049438
 	b _08042316
 _0804226A:
-	ldr r0, _0804231C @ =0x08BBFC7C
+	ldr r0, _0804231C @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x40
 	ldrh r1, [r1, #6]
@@ -83837,7 +83837,7 @@ _0804226A:
 	movs r0, #0xa
 	bl sub_08049438
 _080422B0:
-	ldr r0, _0804231C @ =0x08BBFC7C
+	ldr r0, _0804231C @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x80
 	ldrh r1, [r1, #6]
@@ -83873,7 +83873,7 @@ _080422B0:
 	movs r0, #0xa
 	bl sub_08049438
 _080422FC:
-	ldr r0, _0804231C @ =0x08BBFC7C
+	ldr r0, _0804231C @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #2
 	ldrh r1, [r1, #8]
@@ -83889,7 +83889,7 @@ _08042316:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0804231C: .4byte 0x08BBFC7C
+_0804231C: .4byte gpKeySt
 
 	thumb_func_start sub_08042320
 sub_08042320: @ 0x08042320
@@ -84265,7 +84265,7 @@ _0804264E:
 sub_08042658: @ 0x08042658
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _0804267C @ =0x08BBFC7C
+	ldr r0, _0804267C @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #1
 	ldrh r1, [r1, #8]
@@ -84281,7 +84281,7 @@ _08042676:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0804267C: .4byte 0x08BBFC7C
+_0804267C: .4byte gpKeySt
 
 	thumb_func_start sub_08042680
 sub_08042680: @ 0x08042680
@@ -84610,7 +84610,7 @@ sub_08042944: @ 0x08042944
 	adds r6, r0, #0
 	movs r4, #0
 	movs r7, #0
-	ldr r5, _08042A60 @ =0x08BBFC7C
+	ldr r5, _08042A60 @ =gpKeySt
 	ldr r1, [r5]
 	movs r0, #2
 	ldrh r1, [r1, #8]
@@ -84639,7 +84639,7 @@ _0804296E:
 	str r0, [r6, #0x30]
 	movs r4, #1
 _0804298C:
-	ldr r2, _08042A60 @ =0x08BBFC7C
+	ldr r2, _08042A60 @ =gpKeySt
 	ldr r1, [r2]
 	movs r0, #0x80
 	ldrh r1, [r1, #6]
@@ -84745,7 +84745,7 @@ _08042A58:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08042A60: .4byte 0x08BBFC7C
+_08042A60: .4byte gpKeySt
 _08042A64: .4byte 0x0203D9F4
 _08042A68: .4byte 0x081DAFC4
 
@@ -85350,7 +85350,7 @@ sub_08042F5C: @ 0x08042F5C
 	ldr r0, [r5, #0x48]
 	cmp r0, #1
 	bne _08042FDC
-	ldr r0, _08043054 @ =0x08BBFC7C
+	ldr r0, _08043054 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x20
 	ldrh r1, [r1, #8]
@@ -85379,7 +85379,7 @@ _08042F8E:
 	movs r0, #3
 	bl sub_0803E248
 _08042FA6:
-	ldr r0, _08043054 @ =0x08BBFC7C
+	ldr r0, _08043054 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x10
 	ldrh r1, [r1, #8]
@@ -85404,7 +85404,7 @@ _08042FA6:
 	movs r0, #3
 	bl sub_0803E248
 _08042FDC:
-	ldr r1, _08043054 @ =0x08BBFC7C
+	ldr r1, _08043054 @ =gpKeySt
 	ldr r2, [r1]
 	ldrh r3, [r2, #6]
 	movs r0, #0x40
@@ -85470,7 +85470,7 @@ _0804304A:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08043054: .4byte 0x08BBFC7C
+_08043054: .4byte gpKeySt
 _08043058: .4byte 0x0203D908
 
 	thumb_func_start sub_0804305C
@@ -85549,7 +85549,7 @@ _0804308C:
 	ldr r0, [r4, #0x48]
 	bl sub_08048778
 _08043106:
-	ldr r5, _08043164 @ =0x08BBFC7C
+	ldr r5, _08043164 @ =gpKeySt
 	ldr r1, [r5]
 	movs r0, #1
 	ldrh r1, [r1, #8]
@@ -85590,7 +85590,7 @@ _08043154: .4byte 0x08C07EB0
 _08043158: .4byte 0x0203D908
 _0804315C: .4byte 0x08C08B00
 _08043160: .4byte 0x081DB07C
-_08043164: .4byte 0x08BBFC7C
+_08043164: .4byte gpKeySt
 
 	thumb_func_start sub_08043168
 sub_08043168: @ 0x08043168
@@ -85761,7 +85761,7 @@ _080432B4:
 	bl sub_0803DEA4
 	bl sub_080456C8
 	bl sub_0802D840
-	ldr r1, _08043304 @ =0x0202BBF4
+	ldr r1, _08043304 @ =gPlaySt
 	movs r0, #0xdf
 	ldrb r2, [r1, #0x14]
 	ands r0, r2
@@ -85785,7 +85785,7 @@ _080432B4:
 _080432F8: .4byte 0x0203DA48
 _080432FC: .4byte 0x06001800
 _08043300: .4byte 0x0203D908
-_08043304: .4byte 0x0202BBF4
+_08043304: .4byte gPlaySt
 _08043308: .4byte 0x08C08924
 _0804330C: .4byte 0x08C025F8
 
@@ -85823,7 +85823,7 @@ sub_08043330: @ 0x08043330
 	strb r0, [r1, #5]
 	strb r0, [r1, #3]
 	strb r0, [r1, #1]
-	ldr r1, _08043388 @ =0x0202BBF4
+	ldr r1, _08043388 @ =gPlaySt
 	adds r1, #0x41
 	subs r0, #0xd
 	ldrb r2, [r1]
@@ -85846,7 +85846,7 @@ sub_08043330: @ 0x08043330
 _0804337C: .4byte 0x0203DA48
 _08043380: .4byte 0x06001800
 _08043384: .4byte 0x0203D908
-_08043388: .4byte 0x0202BBF4
+_08043388: .4byte gPlaySt
 _0804338C: .4byte 0x08C080F8
 
 	thumb_func_start sub_08043390
@@ -85859,7 +85859,7 @@ sub_08043390: @ 0x08043390
 	bl sub_08004584
 	cmp r0, #0
 	beq _080433C0
-	ldr r0, _080433BC @ =0x08BBFC7C
+	ldr r0, _080433BC @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #2
 	ldrh r1, [r1, #8]
@@ -85871,7 +85871,7 @@ sub_08043390: @ 0x08043390
 	b _08043458
 	.align 2, 0
 _080433B8: .4byte 0x08C07DF8
-_080433BC: .4byte 0x08BBFC7C
+_080433BC: .4byte gpKeySt
 _080433C0:
 	ldr r0, _080433E0 @ =0x08C07DAC
 	ldr r2, [r0]
@@ -86157,7 +86157,7 @@ sub_080435D0: @ 0x080435D0
 	ldrb r0, [r0]
 	cmp r1, r0
 	bhs _08043628
-	ldr r0, _08043630 @ =0x0202BBF4
+	ldr r0, _08043630 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -86195,7 +86195,7 @@ _08043628:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08043630: .4byte 0x0202BBF4
+_08043630: .4byte gPlaySt
 _08043634: .4byte 0x0203D96C
 _08043638: .4byte 0x081DB0A4
 _0804363C: .4byte 0x0202303C
@@ -86211,7 +86211,7 @@ sub_08043640: @ 0x08043640
 	ldrb r0, [r0]
 	cmp r1, r0
 	bhs _08043698
-	ldr r0, _080436A0 @ =0x0202BBF4
+	ldr r0, _080436A0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -86249,7 +86249,7 @@ _08043698:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080436A0: .4byte 0x0202BBF4
+_080436A0: .4byte gPlaySt
 _080436A4: .4byte 0x0203D96C
 _080436A8: .4byte 0x081DB0AC
 _080436AC: .4byte 0x0202303C
@@ -86316,7 +86316,7 @@ sub_08043728: @ 0x08043728
 	movs r0, #1
 	b _0804376A
 _08043738:
-	ldr r0, _08043770 @ =0x0202BBF4
+	ldr r0, _08043770 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -86344,7 +86344,7 @@ _0804376A:
 	pop {r1}
 	bx r1
 	.align 2, 0
-_08043770: .4byte 0x0202BBF4
+_08043770: .4byte gPlaySt
 _08043774: .4byte 0x08C07DAC
 _08043778: .4byte 0x02000000
 _0804377C: .4byte 0x0E007400
@@ -86892,7 +86892,7 @@ _08043C12:
 	adds r6, r0, #0
 	cmp r1, #0
 	bne _08043C48
-	ldr r0, _08043C44 @ =0x08BBFC7C
+	ldr r0, _08043C44 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #2
 	ldrh r1, [r1, #8]
@@ -86906,7 +86906,7 @@ _08043C12:
 	bl sub_080045FC
 	b _08043CB2
 	.align 2, 0
-_08043C44: .4byte 0x08BBFC7C
+_08043C44: .4byte gpKeySt
 _08043C48:
 	adds r4, r6, #0
 	movs r0, #0
@@ -87231,7 +87231,7 @@ sub_08043EDC: @ 0x08043EDC
 	push {r4, r5, r6, lr}
 	adds r5, r0, #0
 	ldr r4, [r5, #0x54]
-	ldr r0, _08043F50 @ =0x08BBFC7C
+	ldr r0, _08043F50 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x40
 	ldrh r1, [r1, #8]
@@ -87246,7 +87246,7 @@ sub_08043EDC: @ 0x08043EDC
 	movs r0, #3
 	bl sub_0803E248
 _08043F00:
-	ldr r0, _08043F50 @ =0x08BBFC7C
+	ldr r0, _08043F50 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x80
 	ldrh r1, [r1, #8]
@@ -87261,7 +87261,7 @@ _08043F00:
 	movs r0, #3
 	bl sub_0803E248
 _08043F1E:
-	ldr r0, _08043F50 @ =0x08BBFC7C
+	ldr r0, _08043F50 @ =gpKeySt
 	ldr r1, [r0]
 	movs r6, #1
 	adds r0, r6, #0
@@ -87285,7 +87285,7 @@ _08043F1E:
 	bl sub_0800457C
 	b _08043F5E
 	.align 2, 0
-_08043F50: .4byte 0x08BBFC7C
+_08043F50: .4byte gpKeySt
 _08043F54: .4byte 0x02000C04
 _08043F58:
 	movs r0, #0
@@ -88283,7 +88283,7 @@ sub_08044750: @ 0x08044750
 	adds r0, #0x28
 	movs r1, #0x60
 	bl sub_0804A740
-	ldr r0, _080447AC @ =0x08BBFC7C
+	ldr r0, _080447AC @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r6, #2
@@ -88297,7 +88297,7 @@ sub_08044750: @ 0x08044750
 	b _08044812
 	.align 2, 0
 _080447A8: .4byte 0x08C08D18
-_080447AC: .4byte 0x08BBFC7C
+_080447AC: .4byte gpKeySt
 _080447B0:
 	movs r0, #0x20
 	ands r0, r1
@@ -88311,7 +88311,7 @@ _080447B0:
 	movs r0, #3
 	bl sub_0803E248
 _080447C8:
-	ldr r0, _0804482C @ =0x08BBFC7C
+	ldr r0, _0804482C @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x10
 	ldrh r1, [r1, #8]
@@ -88330,7 +88330,7 @@ _080447C8:
 	movs r0, #3
 	bl sub_0803E248
 _080447EE:
-	ldr r0, _0804482C @ =0x08BBFC7C
+	ldr r0, _0804482C @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #1
 	ldrh r1, [r1, #8]
@@ -88359,7 +88359,7 @@ _08044812:
 	bl sub_0800457C
 	b _08044872
 	.align 2, 0
-_0804482C: .4byte 0x08BBFC7C
+_0804482C: .4byte gpKeySt
 _08044830: .4byte 0x020236A4
 _08044834:
 	movs r0, #2
@@ -88401,7 +88401,7 @@ _08044888: .4byte 0x00001189
 sub_0804488C: @ 0x0804488C
 	push {lr}
 	adds r2, r0, #0
-	ldr r0, _080448A8 @ =0x08BBFC7C
+	ldr r0, _080448A8 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #9
 	ldrh r1, [r1, #8]
@@ -88414,7 +88414,7 @@ _080448A4:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080448A8: .4byte 0x08BBFC7C
+_080448A8: .4byte gpKeySt
 
 	thumb_func_start sub_080448AC
 sub_080448AC: @ 0x080448AC
@@ -89147,7 +89147,7 @@ sub_08044E2C: @ 0x08044E2C
 	ldrb r0, [r0, #6]
 	cmp r1, r0
 	bne _08044E86
-	ldr r0, _08044EBC @ =0x0202BBF4
+	ldr r0, _08044EBC @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -89182,7 +89182,7 @@ _08044EAE:
 	bx r0
 	.align 2, 0
 _08044EB8: .4byte 0x08C07DAC
-_08044EBC: .4byte 0x0202BBF4
+_08044EBC: .4byte gPlaySt
 _08044EC0: .4byte 0x0203DC74
 
 	thumb_func_start sub_08044EC4
@@ -90227,7 +90227,7 @@ sub_080456C8: @ 0x080456C8
 	orrs r0, r1
 	strb r0, [r4, #4]
 	bl sub_0802BF08
-	ldr r4, _08045728 @ =0x0202BBF4
+	ldr r4, _08045728 @ =gPlaySt
 	movs r0, #0x40
 	strb r0, [r4, #0xf]
 	movs r0, #0x42
@@ -90252,7 +90252,7 @@ sub_080456C8: @ 0x080456C8
 	.align 2, 0
 _08045720: .4byte 0x0202BBB4
 _08045724: .4byte 0x01000020
-_08045728: .4byte 0x0202BBF4
+_08045728: .4byte gPlaySt
 
 	thumb_func_start sub_0804572C
 sub_0804572C: @ 0x0804572C
@@ -90263,7 +90263,7 @@ sub_0804572C: @ 0x0804572C
 	ldr r0, _0804575C @ =0x0202E3E8
 	ldr r2, [r0]
 	movs r1, #0
-	ldr r0, _08045760 @ =0x0202BBF4
+	ldr r0, _08045760 @ =gPlaySt
 	ldrb r0, [r0, #0xd]
 	cmp r0, #0
 	bne _0804574A
@@ -90277,7 +90277,7 @@ _0804574A:
 	bx r0
 	.align 2, 0
 _0804575C: .4byte 0x0202E3E8
-_08045760: .4byte 0x0202BBF4
+_08045760: .4byte gPlaySt
 
 	thumb_func_start sub_08045764
 sub_08045764: @ 0x08045764
@@ -90350,7 +90350,7 @@ _080457E8: .4byte 0x0203DC74
 	thumb_func_start sub_080457EC
 sub_080457EC: @ 0x080457EC
 	push {r4, r5, lr}
-	ldr r1, _08045844 @ =0x0202BBF4
+	ldr r1, _08045844 @ =gPlaySt
 	movs r0, #0x42
 	adds r0, r0, r1
 	mov ip, r0
@@ -90393,7 +90393,7 @@ sub_080457EC: @ 0x080457EC
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08045844: .4byte 0x0202BBF4
+_08045844: .4byte gPlaySt
 
 	thumb_func_start sub_08045848
 sub_08045848: @ 0x08045848
@@ -90459,7 +90459,7 @@ _08045880:
 	bl Proc_Start
 	bl sub_0802D840
 	bl sub_080457EC
-	ldr r1, _08045910 @ =0x0202BBF4
+	ldr r1, _08045910 @ =gPlaySt
 	movs r0, #0xbf
 	ldrb r2, [r1, #0x14]
 	ands r0, r2
@@ -90475,7 +90475,7 @@ _08045900: .4byte 0x03001400
 _08045904: .4byte 0x03001414
 _08045908: .4byte 0x0202BBB4
 _0804590C: .4byte 0x08C05464
-_08045910: .4byte 0x0202BBF4
+_08045910: .4byte gPlaySt
 
 	thumb_func_start sub_08045914
 sub_08045914: @ 0x08045914
@@ -90515,7 +90515,7 @@ _0804595C: .4byte 0x03001420
 sub_08045960: @ 0x08045960
 	push {lr}
 	adds r2, r0, #0
-	ldr r0, _08045980 @ =0x08BBFC7C
+	ldr r0, _08045980 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x80
 	lsls r0, r0, #2
@@ -90529,7 +90529,7 @@ _0804597A:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08045980: .4byte 0x08BBFC7C
+_08045980: .4byte gpKeySt
 
 	thumb_func_start sub_08045984
 sub_08045984: @ 0x08045984
@@ -90545,17 +90545,17 @@ sub_08045984: @ 0x08045984
 	.align 2, 0
 _08045998: .4byte 0x0203D908
 _0804599C:
-	ldr r0, _080459A8 @ =0x0202BBF4
+	ldr r0, _080459A8 @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	cmp r0, #0
 	beq _080459BE
 	ldr r0, _080459AC @ =0x08C09354
 	b _080459C0
 	.align 2, 0
-_080459A8: .4byte 0x0202BBF4
+_080459A8: .4byte gPlaySt
 _080459AC: .4byte 0x08C09354
 _080459B0:
-	ldr r0, _080459C8 @ =0x0202BBF4
+	ldr r0, _080459C8 @ =gPlaySt
 	ldr r1, _080459CC @ =0x08C07DAC
 	ldr r1, [r1]
 	ldrb r0, [r0, #0xf]
@@ -90569,7 +90569,7 @@ _080459C0:
 	bl sub_080043D4
 	b _080459DC
 	.align 2, 0
-_080459C8: .4byte 0x0202BBF4
+_080459C8: .4byte gPlaySt
 _080459CC: .4byte 0x08C07DAC
 _080459D0: .4byte 0x08C090B4
 _080459D4:
@@ -90622,12 +90622,12 @@ _08045A18:
 	.align 2, 0
 _08045A2C: .4byte 0x0203DC74
 _08045A30:
-	ldr r0, _08045A38 @ =0x0202BBF4
+	ldr r0, _08045A38 @ =gPlaySt
 	strb r2, [r0, #0xf]
 	ldr r2, _08045A3C @ =0x03001400
 	b _08045A42
 	.align 2, 0
-_08045A38: .4byte 0x0202BBF4
+_08045A38: .4byte gPlaySt
 _08045A3C: .4byte 0x03001400
 _08045A40:
 	adds r1, #1
@@ -91049,7 +91049,7 @@ sub_08045D44: @ 0x08045D44
 	ldrb r1, [r0, #2]
 	mov sl, r1
 	bl sub_08045C34
-	ldr r4, _08045E34 @ =0x08BBFC7C
+	ldr r4, _08045E34 @ =gpKeySt
 	ldr r0, [r4]
 	ldrh r0, [r0, #6]
 	movs r1, #0
@@ -91089,7 +91089,7 @@ sub_08045D44: @ 0x08045D44
 	asrs r5, r0, #0x18
 	cmp r5, #1
 	bne _08045E54
-	ldr r0, _08045E48 @ =0x0202BBF4
+	ldr r0, _08045E48 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -91138,16 +91138,16 @@ _08045DD0:
 	.align 2, 0
 _08045E2C: .4byte 0x081DB178
 _08045E30: .4byte 0x0203DC74
-_08045E34: .4byte 0x08BBFC7C
+_08045E34: .4byte gpKeySt
 _08045E38: .4byte 0x0202BD44
 _08045E3C: .4byte 0x03001400
 _08045E40: .4byte 0x030045B0
 _08045E44: .4byte 0x08C07DAC
-_08045E48: .4byte 0x0202BBF4
+_08045E48: .4byte gPlaySt
 _08045E4C: .4byte 0x00000389
 _08045E50: .4byte 0x03001420
 _08045E54:
-	ldr r0, _08045E98 @ =0x0202BBF4
+	ldr r0, _08045E98 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -91157,7 +91157,7 @@ _08045E54:
 	lsls r0, r0, #2
 	bl m4aSongNumStart
 _08045E68:
-	ldr r2, _08045E9C @ =0x08BBFC7C
+	ldr r2, _08045E9C @ =gpKeySt
 	ldr r1, [r2]
 	movs r0, #0x80
 	lsls r0, r0, #1
@@ -91179,8 +91179,8 @@ _08045E68:
 	bl sub_080045FC
 	b _08045F46
 	.align 2, 0
-_08045E98: .4byte 0x0202BBF4
-_08045E9C: .4byte 0x08BBFC7C
+_08045E98: .4byte gPlaySt
+_08045E9C: .4byte gpKeySt
 _08045EA0: .4byte 0x030045B0
 _08045EA4:
 	ldr r1, [r2]
@@ -91190,7 +91190,7 @@ _08045EA4:
 	cmp r0, #0
 	beq _08045EE0
 	bl sub_08044AF8
-	ldr r0, _08045ED8 @ =0x0202BBF4
+	ldr r0, _08045ED8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -91207,7 +91207,7 @@ _08045ECE:
 	bl sub_080045FC
 	b _08045F46
 	.align 2, 0
-_08045ED8: .4byte 0x0202BBF4
+_08045ED8: .4byte gPlaySt
 _08045EDC: .4byte 0x08C0907C
 _08045EE0:
 	ldr r0, _08045F58 @ =0x030045B0
@@ -91249,7 +91249,7 @@ _08045F16:
 	ldrb r0, [r0, #2]
 	cmp sl, r0
 	beq _08045F46
-	ldr r0, _08045F68 @ =0x0202BBF4
+	ldr r0, _08045F68 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -91271,7 +91271,7 @@ _08045F58: .4byte 0x030045B0
 _08045F5C: .4byte 0x03001418
 _08045F60: .4byte 0x03001414
 _08045F64: .4byte 0x0203DC74
-_08045F68: .4byte 0x0202BBF4
+_08045F68: .4byte gPlaySt
 _08045F6C: .4byte 0x00000385
 
 	thumb_func_start sub_08045F70
@@ -91294,7 +91294,7 @@ sub_08045F7C: @ 0x08045F7C
 	ldr r6, _08046058 @ =0x0203DC74
 	ldrb r0, [r6, #2]
 	str r0, [sp, #4]
-	ldr r1, _0804605C @ =0x08BBFC7C
+	ldr r1, _0804605C @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r0, [r0, #6]
 	movs r1, #1
@@ -91344,14 +91344,14 @@ _08045FE8:
 	adds r1, r4, #0
 	movs r2, #0
 	bl sub_08015DE8
-	ldr r2, _0804605C @ =0x08BBFC7C
+	ldr r2, _0804605C @ =gpKeySt
 	ldr r0, [r2]
 	ldrh r1, [r0, #8]
 	movs r0, #1
 	ands r0, r1
 	cmp r0, #0
 	beq _0804607C
-	ldr r0, _08046074 @ =0x0202BBF4
+	ldr r0, _08046074 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -91386,20 +91386,20 @@ _0804601E:
 	b _08046130
 	.align 2, 0
 _08046058: .4byte 0x0203DC74
-_0804605C: .4byte 0x08BBFC7C
+_0804605C: .4byte gpKeySt
 _08046060: .4byte 0x0202BD44
 _08046064: .4byte 0x03001400
 _08046068: .4byte 0x030045B0
 _0804606C: .4byte 0x03001418
 _08046070: .4byte 0x03001414
-_08046074: .4byte 0x0202BBF4
+_08046074: .4byte gPlaySt
 _08046078: .4byte 0x00000389
 _0804607C:
 	movs r0, #2
 	ands r0, r1
 	cmp r0, #0
 	beq _080460E8
-	ldr r0, _080460DC @ =0x0202BBF4
+	ldr r0, _080460DC @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -91438,7 +91438,7 @@ _08046096:
 	bl sub_080045FC
 	b _08046130
 	.align 2, 0
-_080460DC: .4byte 0x0202BBF4
+_080460DC: .4byte gPlaySt
 _080460E0: .4byte 0x0000038B
 _080460E4: .4byte 0x03001420
 _080460E8:
@@ -91468,7 +91468,7 @@ _08046114:
 	ldrb r0, [r0, #2]
 	cmp r2, r0
 	beq _08046130
-	ldr r0, _08046144 @ =0x0202BBF4
+	ldr r0, _08046144 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -91487,7 +91487,7 @@ _08046130:
 	bx r0
 	.align 2, 0
 _08046140: .4byte 0x0203DC74
-_08046144: .4byte 0x0202BBF4
+_08046144: .4byte gPlaySt
 _08046148: .4byte 0x00000385
 
 	thumb_func_start sub_0804614C
@@ -91623,7 +91623,7 @@ _0804625C:
 	adds r0, r1, r0
 	ldrb r0, [r0]
 	bl sub_080190F4
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r5, r0, #0x10
 	cmp r5, #0
@@ -91783,14 +91783,14 @@ _080463A2:
 sub_080463B4: @ 0x080463B4
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _080463E4 @ =0x08BBFC7C
+	ldr r0, _080463E4 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #1
 	ands r0, r1
 	cmp r0, #0
 	beq _080463F0
-	ldr r0, _080463E8 @ =0x0202BBF4
+	ldr r0, _080463E8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -91804,15 +91804,15 @@ _080463D8:
 	bl sub_0800457C
 	b _08046416
 	.align 2, 0
-_080463E4: .4byte 0x08BBFC7C
-_080463E8: .4byte 0x0202BBF4
+_080463E4: .4byte gpKeySt
+_080463E8: .4byte gPlaySt
 _080463EC: .4byte 0x0000038A
 _080463F0:
 	movs r0, #2
 	ands r0, r1
 	cmp r0, #0
 	beq _08046416
-	ldr r0, _0804641C @ =0x0202BBF4
+	ldr r0, _0804641C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -91830,7 +91830,7 @@ _08046416:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0804641C: .4byte 0x0202BBF4
+_0804641C: .4byte gPlaySt
 _08046420: .4byte 0x0000038B
 
 	thumb_func_start sub_08046424
@@ -92579,7 +92579,7 @@ _08046A46:
 	bl sub_0800457C
 	b _08046A64
 _08046A56:
-	ldr r0, _08046A70 @ =0x0202BBF4
+	ldr r0, _08046A70 @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	bl sub_08045324
 	mov r0, r8
@@ -92591,7 +92591,7 @@ _08046A64:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08046A70: .4byte 0x0202BBF4
+_08046A70: .4byte gPlaySt
 
 	thumb_func_start sub_08046A74
 sub_08046A74: @ 0x08046A74
@@ -92608,7 +92608,7 @@ sub_08046A74: @ 0x08046A74
 	thumb_func_start sub_08046A90
 sub_08046A90: @ 0x08046A90
 	push {lr}
-	ldr r0, _08046ABC @ =0x08BBFC7C
+	ldr r0, _08046ABC @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #2
 	ldrh r1, [r1, #8]
@@ -92630,7 +92630,7 @@ _08046AB8:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08046ABC: .4byte 0x08BBFC7C
+_08046ABC: .4byte gpKeySt
 _08046AC0: .4byte 0x030046BC
 _08046AC4: .4byte 0x08C07DAC
 
@@ -93105,7 +93105,7 @@ sub_08046E5C: @ 0x08046E5C
 	push {r4, r5, lr}
 	adds r5, r0, #0
 	adds r4, r1, #0
-	ldr r0, _08046E9C @ =0x08BBFC7C
+	ldr r0, _08046E9C @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #8
 	ldrh r1, [r1, #4]
@@ -93114,7 +93114,7 @@ sub_08046E5C: @ 0x08046E5C
 	beq _08046EA8
 	bl sub_08044AF8
 	str r4, [r5, #0x58]
-	ldr r0, _08046EA0 @ =0x0202BBF4
+	ldr r0, _08046EA0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -93132,8 +93132,8 @@ _08046E90:
 	movs r0, #1
 	b _08046EAA
 	.align 2, 0
-_08046E9C: .4byte 0x08BBFC7C
-_08046EA0: .4byte 0x0202BBF4
+_08046E9C: .4byte gpKeySt
+_08046EA0: .4byte gPlaySt
 _08046EA4: .4byte 0x08C0907C
 _08046EA8:
 	movs r0, #0
@@ -93169,7 +93169,7 @@ _08046EC8:
 	ldrb r0, [r0]
 	cmp r0, #0
 	beq _08046EFC
-	ldr r0, _08046F14 @ =0x0202BBF4
+	ldr r0, _08046F14 @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	cmp r0, r4
 	beq _08046EFC
@@ -93192,13 +93192,13 @@ _08046F08:
 	bx r0
 	.align 2, 0
 _08046F10: .4byte 0x0203DC74
-_08046F14: .4byte 0x0202BBF4
+_08046F14: .4byte gPlaySt
 
 	thumb_func_start sub_08046F18
 sub_08046F18: @ 0x08046F18
 	push {r4, lr}
 	adds r0, r1, #0
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
 	adds r4, r0, #0
@@ -93249,7 +93249,7 @@ _08046F74:
 	adds r0, #0x7d
 	movs r1, #0xe
 	strb r1, [r0]
-	ldr r0, _080470B8 @ =0x0202BBF4
+	ldr r0, _080470B8 @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	lsls r0, r0, #6
 	str r0, [sp, #0x14]
@@ -93409,7 +93409,7 @@ _0804705E:
 	b _080470D2
 	.align 2, 0
 _080470B4: .4byte 0x0203A8E8
-_080470B8: .4byte 0x0202BBF4
+_080470B8: .4byte gPlaySt
 _080470BC: .4byte 0x0202BD44
 _080470C0: .4byte 0x030045B0
 _080470C4: .4byte 0x00010004
@@ -93773,7 +93773,7 @@ sub_08047374: @ 0x08047374
 _0804738C: .4byte 0x0203DC74
 _08047390:
 	bl sub_0806D4A4
-	ldr r0, _080473A8 @ =0x0202BBF4
+	ldr r0, _080473A8 @ =gPlaySt
 	ldrb r1, [r0, #0xf]
 	movs r0, #6
 	movs r2, #0
@@ -93783,7 +93783,7 @@ _080473A2:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080473A8: .4byte 0x0202BBF4
+_080473A8: .4byte gPlaySt
 
 	thumb_func_start sub_080473AC
 sub_080473AC: @ 0x080473AC
@@ -93800,7 +93800,7 @@ sub_080473AC: @ 0x080473AC
 _080473C0: .4byte 0x0203DC74
 _080473C4:
 	bl sub_0806D4A4
-	ldr r0, _080473DC @ =0x0202BBF4
+	ldr r0, _080473DC @ =gPlaySt
 	ldrb r1, [r0, #0xf]
 	movs r0, #7
 	movs r2, #0
@@ -93810,7 +93810,7 @@ _080473D6:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080473DC: .4byte 0x0202BBF4
+_080473DC: .4byte gPlaySt
 
 	thumb_func_start sub_080473E0
 sub_080473E0: @ 0x080473E0
@@ -93867,7 +93867,7 @@ _0804743C:
 	adds r0, r2, #0
 	adds r0, #0xf
 	adds r1, r1, r0
-	ldr r3, _080474A4 @ =0x0202BBF4
+	ldr r3, _080474A4 @ =gPlaySt
 	ldrb r0, [r3, #0xf]
 	strb r0, [r1]
 	ldrb r0, [r2, #0xe]
@@ -93911,7 +93911,7 @@ _0804748E:
 	b _080474B6
 	.align 2, 0
 _080474A0: .4byte 0x0203DC74
-_080474A4: .4byte 0x0202BBF4
+_080474A4: .4byte gPlaySt
 _080474A8:
 	ldrb r0, [r3, #0xf]
 	bl sub_08045324
@@ -93968,7 +93968,7 @@ sub_080474F8: @ 0x080474F8
 	adds r0, r2, #0
 	adds r0, #0xf
 	adds r1, r1, r0
-	ldr r3, _0804756C @ =0x0202BBF4
+	ldr r3, _0804756C @ =gPlaySt
 	ldrb r0, [r3, #0xf]
 	strb r0, [r1]
 	ldrb r0, [r2, #0xe]
@@ -94012,7 +94012,7 @@ _08047550:
 	.align 2, 0
 _08047564: .4byte 0x0203DC74
 _08047568: .4byte 0x0203D908
-_0804756C: .4byte 0x0202BBF4
+_0804756C: .4byte gPlaySt
 _08047570:
 	ldrb r0, [r3, #0xf]
 	bl sub_08045324
@@ -94047,7 +94047,7 @@ sub_080475A8: @ 0x080475A8
 	push {r4, lr}
 	movs r3, #0
 	str r3, [r0, #0x58]
-	ldr r2, _080475C8 @ =0x0202BBF4
+	ldr r2, _080475C8 @ =gPlaySt
 	ldrb r4, [r2, #0xf]
 	lsls r1, r4, #6
 	str r1, [r0, #0x5c]
@@ -94060,7 +94060,7 @@ sub_080475A8: @ 0x080475A8
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080475C8: .4byte 0x0202BBF4
+_080475C8: .4byte gPlaySt
 _080475CC: .4byte 0x0203DC74
 
 	thumb_func_start sub_080475D0
@@ -95268,7 +95268,7 @@ sub_08047ED0: @ 0x08047ED0
 	ldr r1, [r4, #0x30]
 	movs r0, #0xd
 	strh r0, [r1, #0x1e]
-	ldr r0, _08047F50 @ =0x0202BBF4
+	ldr r0, _08047F50 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -95283,7 +95283,7 @@ _08047F40:
 	.align 2, 0
 _08047F48: .4byte 0x08D64F84
 _08047F4C: .4byte 0x03002790
-_08047F50: .4byte 0x0202BBF4
+_08047F50: .4byte gPlaySt
 
 	thumb_func_start sub_08047F54
 sub_08047F54: @ 0x08047F54
@@ -98010,7 +98010,7 @@ sub_08049490: @ 0x08049490
 	ldr r0, _080494AC @ =0x081CF61C
 	ldr r1, _080494B0 @ =0x06002000
 	bl sub_08013688
-	ldr r0, _080494B4 @ =0x0202BBF4
+	ldr r0, _080494B4 @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	cmp r0, #1
 	beq _080494DC
@@ -98022,7 +98022,7 @@ sub_08049490: @ 0x08049490
 	.align 2, 0
 _080494AC: .4byte 0x081CF61C
 _080494B0: .4byte 0x06002000
-_080494B4: .4byte 0x0202BBF4
+_080494B4: .4byte gPlaySt
 _080494B8:
 	cmp r0, #2
 	beq _080494F4
@@ -98073,7 +98073,7 @@ _08049514:
 	bl sub_0800105C
 _08049526:
 	ldr r2, _08049544 @ =0x03001448
-	ldr r1, _08049548 @ =0x0202BBF4
+	ldr r1, _08049548 @ =gPlaySt
 	ldrb r0, [r1, #0xf]
 	str r0, [r2]
 	movs r0, #0
@@ -98085,12 +98085,12 @@ _08049538: .4byte 0x081CF168
 _0804953C: .4byte 0x06002800
 _08049540: .4byte 0x081CF7DC
 _08049544: .4byte 0x03001448
-_08049548: .4byte 0x0202BBF4
+_08049548: .4byte gPlaySt
 
 	thumb_func_start sub_0804954C
 sub_0804954C: @ 0x0804954C
 	push {r4, lr}
-	ldr r1, _080495BC @ =0x0202BBF4
+	ldr r1, _080495BC @ =gPlaySt
 	ldr r0, _080495C0 @ =0x03001448
 	ldr r0, [r0]
 	movs r2, #0
@@ -98145,7 +98145,7 @@ sub_0804954C: @ 0x0804954C
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080495BC: .4byte 0x0202BBF4
+_080495BC: .4byte gPlaySt
 _080495C0: .4byte 0x03001448
 _080495C4: .4byte 0x03002790
 
@@ -99847,7 +99847,7 @@ sub_0804A27C: @ 0x0804A27C
 	movs r3, #1
 _0804A286:
 	ldr r2, _0804A2A4 @ =0x08C09B84
-	ldr r1, _0804A2A8 @ =0x0202BBF4
+	ldr r1, _0804A2A8 @ =gPlaySt
 	adds r1, #0x41
 	movs r0, #0xc
 	ldrb r1, [r1]
@@ -99861,7 +99861,7 @@ _0804A286:
 	bx r0
 	.align 2, 0
 _0804A2A4: .4byte 0x08C09B84
-_0804A2A8: .4byte 0x0202BBF4
+_0804A2A8: .4byte gPlaySt
 
 	thumb_func_start sub_0804A2AC
 sub_0804A2AC: @ 0x0804A2AC
@@ -99873,7 +99873,7 @@ sub_0804A2AC: @ 0x0804A2AC
 	lsls r3, r3, #0x13
 _0804A2B8:
 	ldr r2, _0804A2D4 @ =0x08C09B94
-	ldr r1, _0804A2D8 @ =0x0202BBF4
+	ldr r1, _0804A2D8 @ =gPlaySt
 	adds r1, #0x41
 	movs r0, #0xc
 	ldrb r1, [r1]
@@ -99886,7 +99886,7 @@ _0804A2B8:
 	bx r0
 	.align 2, 0
 _0804A2D4: .4byte 0x08C09B94
-_0804A2D8: .4byte 0x0202BBF4
+_0804A2D8: .4byte gPlaySt
 
 	thumb_func_start sub_0804A2DC
 sub_0804A2DC: @ 0x0804A2DC
@@ -99897,7 +99897,7 @@ sub_0804A2DC: @ 0x0804A2DC
 	movs r3, #6
 _0804A2E6:
 	ldr r2, _0804A304 @ =0x08C09BA4
-	ldr r1, _0804A308 @ =0x0202BBF4
+	ldr r1, _0804A308 @ =gPlaySt
 	adds r1, #0x41
 	movs r0, #0xc
 	ldrb r1, [r1]
@@ -99911,7 +99911,7 @@ _0804A2E6:
 	bx r0
 	.align 2, 0
 _0804A304: .4byte 0x08C09BA4
-_0804A308: .4byte 0x0202BBF4
+_0804A308: .4byte gPlaySt
 
 	thumb_func_start sub_0804A30C
 sub_0804A30C: @ 0x0804A30C
@@ -99919,7 +99919,7 @@ sub_0804A30C: @ 0x0804A30C
 	adds r5, r0, #0
 	cmp r5, #0
 	bge _0804A31E
-	ldr r0, _0804A354 @ =0x0202BBF4
+	ldr r0, _0804A354 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1c
@@ -99948,7 +99948,7 @@ _0804A31E:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0804A354: .4byte 0x0202BBF4
+_0804A354: .4byte gPlaySt
 _0804A358: .4byte 0x08C09B94
 _0804A35C: .4byte 0x02022240
 
@@ -100913,7 +100913,7 @@ sub_0804AA68: @ 0x0804AA68
 	movs r1, #0
 	movs r2, #0
 	bl sub_08001D64
-	ldr r0, _0804AAC8 @ =0x0202BBF4
+	ldr r0, _0804AAC8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -100934,7 +100934,7 @@ _0804AAB2:
 	movs r0, #0
 	b _0804AAE4
 	.align 2, 0
-_0804AAC8: .4byte 0x0202BBF4
+_0804AAC8: .4byte gPlaySt
 _0804AACC: .4byte 0x08C09BF4
 _0804AAD0:
 	bl sub_08015784
@@ -101078,7 +101078,7 @@ _0804ABB2:
 	adds r1, #0x2f
 	strb r0, [r1]
 _0804ABE6:
-	ldr r0, _0804AC08 @ =0x08BBFC7C
+	ldr r0, _0804AC08 @ =gpKeySt
 	ldr r0, [r0]
 	strh r2, [r0, #8]
 	adds r0, r5, #0
@@ -101093,7 +101093,7 @@ _0804ABE6:
 	.align 2, 0
 _0804AC00: .4byte 0x08C09BF4
 _0804AC04: .4byte 0x08C09C34
-_0804AC08: .4byte 0x08BBFC7C
+_0804AC08: .4byte gpKeySt
 
 	thumb_func_start sub_0804AC0C
 sub_0804AC0C: @ 0x0804AC0C
@@ -101408,7 +101408,7 @@ _0804AE6A:
 	ands r0, r4
 	cmp r0, #0
 	beq _0804AE84
-	ldr r0, _0804AF0C @ =0x0202BBF4
+	ldr r0, _0804AF0C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -101421,7 +101421,7 @@ _0804AE84:
 	ands r0, r4
 	cmp r0, #0
 	beq _0804AE9E
-	ldr r0, _0804AF0C @ =0x0202BBF4
+	ldr r0, _0804AF0C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -101484,7 +101484,7 @@ _0804AF02:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0804AF0C: .4byte 0x0202BBF4
+_0804AF0C: .4byte gPlaySt
 _0804AF10: .4byte 0x0000038A
 _0804AF14: .4byte 0x0000038B
 
@@ -101498,7 +101498,7 @@ sub_0804AF18: @ 0x0804AF18
 	adds r1, r6, #0
 	adds r1, #0x62
 	strb r0, [r1]
-	ldr r1, _0804AFF0 @ =0x08BBFC7C
+	ldr r1, _0804AFF0 @ =gpKeySt
 	ldr r3, [r1]
 	ldrh r4, [r3, #6]
 	movs r0, #0x40
@@ -101560,7 +101560,7 @@ _0804AF7E:
 	adds r0, r6, #0
 	movs r2, #1
 	bl sub_0804ADBC
-	ldr r0, _0804AFF4 @ =0x0202BBF4
+	ldr r0, _0804AFF4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -101600,8 +101600,8 @@ _0804AFE8:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0804AFF0: .4byte 0x08BBFC7C
-_0804AFF4: .4byte 0x0202BBF4
+_0804AFF0: .4byte gpKeySt
+_0804AFF4: .4byte gPlaySt
 _0804AFF8: .4byte 0x00000386
 
 	thumb_func_start sub_0804AFFC
@@ -101626,7 +101626,7 @@ sub_0804AFFC: @ 0x0804AFFC
 	lsls r0, r0, #0x18
 	lsrs r6, r0, #0x18
 _0804B024:
-	ldr r0, _0804B048 @ =0x08BBFC7C
+	ldr r0, _0804B048 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #1
@@ -101643,7 +101643,7 @@ _0804B024:
 	ldr r2, [r7, #0x14]
 	b _0804B058
 	.align 2, 0
-_0804B048: .4byte 0x08BBFC7C
+_0804B048: .4byte gpKeySt
 _0804B04C:
 	movs r0, #2
 	ands r0, r1
@@ -101798,7 +101798,7 @@ sub_0804B130: @ 0x0804B130
 	ldr r0, [sp]
 	ldr r1, [sp, #4]
 	bl sub_0804A740
-	ldr r0, _0804B178 @ =0x08BBFC7C
+	ldr r0, _0804B178 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x81
 	lsls r0, r0, #1
@@ -101812,7 +101812,7 @@ sub_0804B130: @ 0x0804B130
 	bl sub_08004634
 	b _0804B1A6
 	.align 2, 0
-_0804B178: .4byte 0x08BBFC7C
+_0804B178: .4byte gpKeySt
 _0804B17C: .4byte 0x08C09BDC
 _0804B180:
 	adds r1, r5, #0
@@ -101866,7 +101866,7 @@ sub_0804B1C0: @ 0x0804B1C0
 	ldr r0, [sp]
 	ldr r1, [sp, #4]
 	bl sub_0804A7EC
-	ldr r0, _0804B208 @ =0x08BBFC7C
+	ldr r0, _0804B208 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x81
 	lsls r0, r0, #1
@@ -101884,7 +101884,7 @@ _0804B1FE:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0804B208: .4byte 0x08BBFC7C
+_0804B208: .4byte gpKeySt
 _0804B20C: .4byte 0x08C09BDC
 
 	thumb_func_start sub_0804B210
@@ -101926,7 +101926,7 @@ sub_0804B244: @ 0x0804B244
 	ldr r0, [sp]
 	ldr r1, [sp, #4]
 	bl sub_0804A7EC
-	ldr r0, _0804B284 @ =0x08BBFC7C
+	ldr r0, _0804B284 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #3
 	ldrh r1, [r1, #8]
@@ -101942,7 +101942,7 @@ _0804B27C:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0804B284: .4byte 0x08BBFC7C
+_0804B284: .4byte gpKeySt
 _0804B288: .4byte 0x08C09BDC
 
 	thumb_func_start sub_0804B28C
@@ -102416,7 +102416,7 @@ _0804B5CE:
 	ands r0, r5
 	cmp r0, #0
 	beq _0804B5E8
-	ldr r0, _0804B658 @ =0x0202BBF4
+	ldr r0, _0804B658 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -102429,7 +102429,7 @@ _0804B5E8:
 	ands r0, r5
 	cmp r0, #0
 	beq _0804B602
-	ldr r0, _0804B658 @ =0x0202BBF4
+	ldr r0, _0804B658 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -102479,7 +102479,7 @@ _0804B64E:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0804B658: .4byte 0x0202BBF4
+_0804B658: .4byte gPlaySt
 _0804B65C: .4byte 0x0000038A
 _0804B660: .4byte 0x0000038B
 
@@ -102523,7 +102523,7 @@ _0804B6A6:
 	adds r0, r5, #0
 	bl _call_via_r2
 _0804B6B6:
-	ldr r0, _0804B6C8 @ =0x08BBFC7C
+	ldr r0, _0804B6C8 @ =gpKeySt
 	ldr r0, [r0]
 	strh r6, [r0, #8]
 	adds r0, r5, #0
@@ -102532,7 +102532,7 @@ _0804B6B6:
 	bx r1
 	.align 2, 0
 _0804B6C4: .4byte 0x08C09C80
-_0804B6C8: .4byte 0x08BBFC7C
+_0804B6C8: .4byte gpKeySt
 
 	thumb_func_start sub_0804B6CC
 sub_0804B6CC: @ 0x0804B6CC
@@ -102577,7 +102577,7 @@ sub_0804B710: @ 0x0804B710
 	push {r4, lr}
 	adds r4, r0, #0
 	ldr r3, [r4, #0x30]
-	ldr r2, _0804B780 @ =0x08BBFC7C
+	ldr r2, _0804B780 @ =gpKeySt
 	ldr r1, [r2]
 	movs r0, #0x60
 	ldrh r1, [r1, #6]
@@ -102620,7 +102620,7 @@ _0804B758:
 	adds r0, r4, #0
 	bl _call_via_r2
 _0804B768:
-	ldr r0, _0804B784 @ =0x0202BBF4
+	ldr r0, _0804B784 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -102633,8 +102633,8 @@ _0804B77A:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0804B780: .4byte 0x08BBFC7C
-_0804B784: .4byte 0x0202BBF4
+_0804B780: .4byte gpKeySt
+_0804B784: .4byte gPlaySt
 _0804B788: .4byte 0x00000387
 
 	thumb_func_start sub_0804B78C
@@ -102642,7 +102642,7 @@ sub_0804B78C: @ 0x0804B78C
 	push {r4, lr}
 	adds r2, r0, #0
 	movs r4, #0
-	ldr r0, _0804B7AC @ =0x08BBFC7C
+	ldr r0, _0804B7AC @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #1
@@ -102656,7 +102656,7 @@ sub_0804B78C: @ 0x0804B78C
 	ldr r3, [r0, #0x14]
 	b _0804B7CC
 	.align 2, 0
-_0804B7AC: .4byte 0x08BBFC7C
+_0804B7AC: .4byte gpKeySt
 _0804B7B0:
 	movs r0, #2
 	ands r0, r1
@@ -103037,7 +103037,7 @@ _0804BA5C: .4byte 0x0203DFE0
 	thumb_func_start sub_0804BA60
 sub_0804BA60: @ 0x0804BA60
 	push {lr}
-	ldr r0, _0804BA78 @ =0x08BBFC7C
+	ldr r0, _0804BA78 @ =gpKeySt
 	ldr r0, [r0]
 	bl sub_08001BA0
 	ldr r0, _0804BA7C @ =0x0200001C
@@ -103047,7 +103047,7 @@ sub_0804BA60: @ 0x0804BA60
 	bl sub_0804BB04
 	b _0804BA8C
 	.align 2, 0
-_0804BA78: .4byte 0x08BBFC7C
+_0804BA78: .4byte gpKeySt
 _0804BA7C: .4byte 0x0200001C
 _0804BA80:
 	ldr r0, _0804BAA0 @ =0x02000020
@@ -103776,7 +103776,7 @@ sub_0804C034: @ 0x0804C034
 	push {r4, r5, r6, lr}
 	adds r6, r0, #0
 	movs r4, #0
-	ldr r0, _0804C064 @ =0x08BBFC7C
+	ldr r0, _0804C064 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #2
 	ldrh r1, [r1, #4]
@@ -103799,7 +103799,7 @@ _0804C050:
 	beq _0804C118
 	b _0804C11A
 	.align 2, 0
-_0804C064: .4byte 0x08BBFC7C
+_0804C064: .4byte gpKeySt
 _0804C068: .4byte 0x0203E004
 _0804C06C:
 	cmp r0, #0
@@ -106942,7 +106942,7 @@ _0804D90C:
 _0804D91E:
 	mov ip, r0
 _0804D920:
-	ldr r0, _0804D99C @ =0x0202BBF4
+	ldr r0, _0804D99C @ =gPlaySt
 	ldrb r0, [r0, #0x15]
 	ldr r0, _0804D9A0 @ =0x0200004C
 	ldr r1, [r5, #0x10]
@@ -107001,7 +107001,7 @@ _0804D920:
 _0804D990: .4byte 0x0200003C
 _0804D994: .4byte 0x02014DC8
 _0804D998: .4byte 0xFFFFF800
-_0804D99C: .4byte 0x0202BBF4
+_0804D99C: .4byte gPlaySt
 _0804D9A0: .4byte 0x0200004C
 _0804D9A4: .4byte 0x02000044
 _0804D9A8: .4byte 0x08C0A5E8
@@ -112557,7 +112557,7 @@ sub_080506E0: @ 0x080506E0
 	ldrsh r0, [r1, r2]
 	cmp r0, #0
 	bne _08050708
-	ldr r0, _08050704 @ =0x0202BBF4
+	ldr r0, _08050704 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -112566,7 +112566,7 @@ sub_080506E0: @ 0x080506E0
 	b _08050712
 	.align 2, 0
 _08050700: .4byte 0x0203DFE2
-_08050704: .4byte 0x0202BBF4
+_08050704: .4byte gPlaySt
 _08050708:
 	movs r2, #0
 	ldrsh r0, [r1, r2]
@@ -114011,7 +114011,7 @@ _08051210: .4byte sub_08051214
 	thumb_func_start sub_08051214
 sub_08051214: @ 0x08051214
 	push {r4, lr}
-	ldr r0, _08051278 @ =0x08BBFC7C
+	ldr r0, _08051278 @ =gpKeySt
 	ldr r0, [r0]
 	bl sub_08001BA0
 	bl sub_08006840
@@ -114048,7 +114048,7 @@ _0805123A:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08051278: .4byte 0x08BBFC7C
+_08051278: .4byte gpKeySt
 _0805127C: .4byte 0x02026A28
 _08051280: .4byte 0x0202BBB4
 _08051284: .4byte 0x04000006
@@ -114636,7 +114636,7 @@ _08051736:
 	.align 2, 0
 _08051740: .4byte 0x0203DFE2
 _08051744:
-	ldr r0, _08051770 @ =0x0202BBF4
+	ldr r0, _08051770 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -114655,7 +114655,7 @@ _0805176A:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08051770: .4byte 0x0202BBF4
+_08051770: .4byte gPlaySt
 
 	thumb_func_start sub_08051774
 sub_08051774: @ 0x08051774
@@ -116916,7 +116916,7 @@ _08052928:
 	cmp r7, #0
 	beq _0805296A
 	ldrb r4, [r2]
-	ldr r0, _08052A34 @ =0x0202BBF4
+	ldr r0, _08052A34 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -116930,7 +116930,7 @@ _0805296A:
 	cmp r4, #0
 	beq _08052988
 	ldrb r4, [r6]
-	ldr r0, _08052A34 @ =0x0202BBF4
+	ldr r0, _08052A34 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -116952,7 +116952,7 @@ _08052988:
 	strh r0, [r1, #2]
 	cmp r7, #0
 	beq _080529B6
-	ldr r0, _08052A34 @ =0x0202BBF4
+	ldr r0, _08052A34 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -116967,7 +116967,7 @@ _080529B6:
 	beq _080529D6
 	mov r3, sb
 	ldrh r4, [r3, #2]
-	ldr r0, _08052A34 @ =0x0202BBF4
+	ldr r0, _08052A34 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -117002,7 +117002,7 @@ _080529EE:
 	ldrh r0, [r1, #2]
 	strh r0, [r1]
 _08052A06:
-	ldr r0, _08052A34 @ =0x0202BBF4
+	ldr r0, _08052A34 @ =gPlaySt
 	ldrb r0, [r0, #0x15]
 	cmp r0, #2
 	bgt _08052A44
@@ -117019,7 +117019,7 @@ _08052A24: .4byte 0x0203E080
 _08052A28: .4byte 0x0203E0B0
 _08052A2C: .4byte 0x0203E000
 _08052A30: .4byte 0x0000FFFF
-_08052A34: .4byte 0x0202BBF4
+_08052A34: .4byte gPlaySt
 _08052A38: .4byte 0x0202BBB4
 _08052A3C: .4byte 0x0203E004
 _08052A40: .4byte 0x0203DFE6
@@ -117556,7 +117556,7 @@ _08052E52:
 	bl sub_0804B97C
 	cmp r0, #1
 	beq _08052E66
-	ldr r0, _08052E74 @ =0x0202BBF4
+	ldr r0, _08052E74 @ =gPlaySt
 	adds r0, #0x40
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1f
@@ -117569,7 +117569,7 @@ _08052E66:
 	.align 2, 0
 _08052E6C: .4byte 0x0203E088
 _08052E70: .4byte 0x081E07EC
-_08052E74: .4byte 0x0202BBF4
+_08052E74: .4byte gPlaySt
 _08052E78: .4byte 0x0203E0C0
 _08052E7C:
 	ldr r1, _08052EA4 @ =0x0203E0C0
@@ -117600,7 +117600,7 @@ _08052EB4:
 	ldr r0, _0805300C @ =0x0203E0B0
 	ldrh r4, [r0, #2]
 _08052EB8:
-	ldr r0, _08053010 @ =0x0202BBF4
+	ldr r0, _08053010 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -117775,7 +117775,7 @@ _08053008:
 	b _0805302E
 	.align 2, 0
 _0805300C: .4byte 0x0203E0B0
-_08053010: .4byte 0x0202BBF4
+_08053010: .4byte gPlaySt
 _08053014: .4byte 0x0203DFE2
 _08053018: .4byte 0x0203E004
 _0805301C: .4byte 0x0203DFE8
@@ -154651,7 +154651,7 @@ sub_08065CC8: @ 0x08065CC8
 	ldrsh r0, [r4, r1]
 	cmp r0, #0
 	bne _08065CE6
-	ldr r0, _08065D1C @ =0x0202BBF4
+	ldr r0, _08065D1C @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -154684,7 +154684,7 @@ _08065D14:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08065D1C: .4byte 0x0202BBF4
+_08065D1C: .4byte gPlaySt
 
 	thumb_func_start sub_08065D20
 sub_08065D20: @ 0x08065D20
@@ -158960,7 +158960,7 @@ sub_08067DB4: @ 0x08067DB4
 	bl sub_08067EBC
 	adds r0, r5, #0
 	bl sub_080033EC
-	ldr r0, _08067DF8 @ =0x0202BBF4
+	ldr r0, _08067DF8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -158972,7 +158972,7 @@ sub_08067DB4: @ 0x08067DB4
 	b _08067E0A
 	.align 2, 0
 _08067DF4: .4byte 0x0202BBB4
-_08067DF8: .4byte 0x0202BBF4
+_08067DF8: .4byte gPlaySt
 _08067DFC:
 	ldr r0, _08067E10 @ =0x08C4A2B4
 	movs r1, #3
@@ -159008,7 +159008,7 @@ _08067E2E:
 	bl sub_08067EBC
 	ldr r0, [r4, #0x44]
 	bl sub_080033EC
-	ldr r0, _08067E64 @ =0x0202BBF4
+	ldr r0, _08067E64 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -159026,7 +159026,7 @@ _08067E5C:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08067E64: .4byte 0x0202BBF4
+_08067E64: .4byte gPlaySt
 
 	thumb_func_start sub_08067E68
 sub_08067E68: @ 0x08067E68
@@ -160048,7 +160048,7 @@ _080686C4:
 	rsbs r1, r0, #0
 	orrs r1, r0
 	lsrs r4, r1, #0x1f
-	ldr r0, _08068744 @ =0x0202BBF4
+	ldr r0, _08068744 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	cmp r0, #0x3f
 	beq _080686DA
@@ -160112,7 +160112,7 @@ _08068734:
 	b _080688BA
 	.align 2, 0
 _08068740: .4byte 0x0203DFE8
-_08068744: .4byte 0x0202BBF4
+_08068744: .4byte gPlaySt
 _08068748:
 	cmp r0, #0x86
 	bne _08068768
@@ -160174,7 +160174,7 @@ _080687AC:
 	ands r0, r1
 	cmp r0, #0
 	beq _080687D6
-	ldr r0, _080687E8 @ =0x0202BBF4
+	ldr r0, _080687E8 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -160194,7 +160194,7 @@ _080687D6:
 	bl sub_08067E78
 	b _080688BA
 	.align 2, 0
-_080687E8: .4byte 0x0202BBF4
+_080687E8: .4byte gPlaySt
 _080687EC:
 	movs r4, #0
 	ldr r0, [r6, #4]
@@ -164813,7 +164813,7 @@ _0806AD20:
 	mov sb, r0
 _0806AD28:
 	adds r0, r1, #0
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r4, r0, #0x10
 	cmp r4, #0
@@ -164871,7 +164871,7 @@ _0806AD8C:
 	mov sl, r0
 _0806AD94:
 	adds r0, r1, #0
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r4, r0, #0x10
 	cmp r4, #0
@@ -164935,7 +164935,7 @@ _0806AE0C:
 	mov sb, r0
 _0806AE14:
 	adds r0, r1, #0
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r4, r0, #0x10
 	cmp r4, #0
@@ -164974,7 +164974,7 @@ _0806AE54:
 	mov sl, r0
 _0806AE5C:
 	adds r0, r1, #0
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r4, r0, #0x10
 	cmp r4, #0
@@ -167551,7 +167551,7 @@ sub_0806C2DC: @ 0x0806C2DC
 	ldr r0, [r7]
 	ldrb r1, [r0, #0x1c]
 	adds r0, r1, #0
-	bl sub_0802C7D8
+	bl GetTrap
 	adds r1, r0, #0
 	ldrb r0, [r1, #3]
 	cmp r0, #0x35
@@ -168033,7 +168033,7 @@ _0806C52C:
 	adds r1, r0, #0
 	adds r0, r1, #0
 	movs r1, #0xa
-	bl sub_08012658
+	bl StartSpriteAnim
 	str r0, [r7, #0x10]
 	ldr r1, [r7, #0x10]
 	adds r0, r1, #0
@@ -168931,7 +168931,7 @@ sub_0806CD2C: @ 0x0806CD2C
 	ldr r1, _0806CDA0 @ =0x083F641C
 	adds r0, r1, #0
 	movs r1, #2
-	bl sub_08012658
+	bl StartSpriteAnim
 	str r0, [r7, #0xc]
 	ldr r0, [r7, #0xc]
 	ldrh r1, [r0, #0x22]
@@ -168981,7 +168981,7 @@ sub_0806CDA8: @ 0x0806CDA8
 	sub sp, #8
 	add r7, sp, #4
 	str r0, [r7]
-	ldr r1, _0806CE5C @ =0x0202BBF4
+	ldr r1, _0806CE5C @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -169063,7 +169063,7 @@ _0806CDC8:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0806CE5C: .4byte 0x0202BBF4
+_0806CE5C: .4byte gPlaySt
 _0806CE60: .4byte 0x00000397
 _0806CE64: .4byte 0x080C0E98
 
@@ -170739,7 +170739,7 @@ _0806DAB2:
 	beq _0806DAC4
 	b _0806DB28
 _0806DAC4:
-	ldr r0, _0806DB20 @ =0x0202BBF4
+	ldr r0, _0806DB20 @ =gPlaySt
 	ldrb r1, [r0, #0xd]
 	cmp r1, #0
 	beq _0806DB28
@@ -170785,7 +170785,7 @@ _0806DAC4:
 	bne _0806DB28
 	b _0806DB64
 	.align 2, 0
-_0806DB20: .4byte 0x0202BBF4
+_0806DB20: .4byte gPlaySt
 _0806DB24: .4byte 0x0202E3E8
 _0806DB28:
 	ldr r1, [r7]
@@ -170895,7 +170895,7 @@ _0806DBD4:
 	str r0, [r7, #8]
 	b _0806DC2E
 _0806DBF2:
-	ldr r1, _0806DC20 @ =0x0202BBF4
+	ldr r1, _0806DC20 @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x40
 	ldrb r0, [r1]
@@ -170903,7 +170903,7 @@ _0806DBF2:
 	lsrs r0, r1, #0x1f
 	cmp r0, #0
 	bne _0806DC28
-	ldr r1, _0806DC24 @ =0x08BBFC7C
+	ldr r1, _0806DC24 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #4]
 	movs r2, #1
@@ -170920,8 +170920,8 @@ _0806DBF2:
 _0806DC1E:
 	b _0806DC2E
 	.align 2, 0
-_0806DC20: .4byte 0x0202BBF4
-_0806DC24: .4byte 0x08BBFC7C
+_0806DC20: .4byte gPlaySt
+_0806DC24: .4byte gpKeySt
 _0806DC28:
 	ldr r0, [r7, #4]
 	lsls r1, r0, #2
@@ -170943,7 +170943,7 @@ _0806DC44:
 	bl sub_0802E3AC
 	cmp r0, #0
 	bne _0806DC6C
-	ldr r1, _0806DC68 @ =0x08BBFC7C
+	ldr r1, _0806DC68 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #4]
 	movs r2, #1
@@ -170957,9 +170957,9 @@ _0806DC44:
 	movs r0, #0x80
 	b _0806DCAE
 	.align 2, 0
-_0806DC68: .4byte 0x08BBFC7C
+_0806DC68: .4byte gpKeySt
 _0806DC6C:
-	ldr r1, _0806DCA0 @ =0x0202BBF4
+	ldr r1, _0806DCA0 @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x40
 	ldrb r0, [r1]
@@ -170985,7 +170985,7 @@ _0806DC6C:
 	adds r0, r1, #0
 	b _0806DCAE
 	.align 2, 0
-_0806DCA0: .4byte 0x0202BBF4
+_0806DCA0: .4byte gPlaySt
 _0806DCA4: .4byte 0x08D64F7C
 _0806DCA8:
 	b _0806DCAE
@@ -171238,7 +171238,7 @@ sub_0806DD98: @ 0x0806DD98
 	orrs r1, r3
 	adds r2, r1, #0
 	strh r2, [r0, #0x1e]
-	ldr r1, _0806DEC0 @ =0x0202BBF4
+	ldr r1, _0806DEC0 @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -171273,7 +171273,7 @@ _0806DEB0:
 	.align 2, 0
 _0806DEB8: .4byte 0x08D64F84
 _0806DEBC: .4byte 0x03002790
-_0806DEC0: .4byte 0x0202BBF4
+_0806DEC0: .4byte gPlaySt
 
 	thumb_func_start sub_0806DEC4
 sub_0806DEC4: @ 0x0806DEC4
@@ -171483,7 +171483,7 @@ sub_0806DFF0: @ 0x0806DFF0
 	ands r1, r2
 	adds r2, r1, #0
 	strh r2, [r0, #0x1a]
-	ldr r1, _0806E078 @ =0x0202BBF4
+	ldr r1, _0806E078 @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -171500,7 +171500,7 @@ _0806E06C:
 	bx r0
 	.align 2, 0
 _0806E074: .4byte 0x08D64F9C
-_0806E078: .4byte 0x0202BBF4
+_0806E078: .4byte gPlaySt
 
 	thumb_func_start sub_0806E07C
 sub_0806E07C: @ 0x0806E07C
@@ -171762,7 +171762,7 @@ sub_0806E204: @ 0x0806E204
 	ands r1, r2
 	adds r2, r1, #0
 	strh r2, [r0, #0x1a]
-	ldr r1, _0806E29C @ =0x0202BBF4
+	ldr r1, _0806E29C @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -171779,7 +171779,7 @@ _0806E290:
 	bx r0
 	.align 2, 0
 _0806E298: .4byte 0x08D64FEC
-_0806E29C: .4byte 0x0202BBF4
+_0806E29C: .4byte gPlaySt
 
 	thumb_func_start sub_0806E2A0
 sub_0806E2A0: @ 0x0806E2A0
@@ -173997,7 +173997,7 @@ _0806F304:
 sub_0806F30C: @ 0x0806F30C
 	push {r7, lr}
 	mov r7, sp
-	ldr r1, _0806F32C @ =0x0202BBF4
+	ldr r1, _0806F32C @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -174012,7 +174012,7 @@ _0806F326:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0806F32C: .4byte 0x0202BBF4
+_0806F32C: .4byte gPlaySt
 
 	thumb_func_start sub_0806F330
 sub_0806F330: @ 0x0806F330
@@ -175904,7 +175904,7 @@ _08070168:
 	lsrs r0, r1, #0x10
 	cmp r0, #0
 	bne _080701C2
-	ldr r1, _0807021C @ =0x0202BBF4
+	ldr r1, _0807021C @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -175961,7 +175961,7 @@ _08070210:
 	b _08070110
 	.align 2, 0
 _08070218: .4byte 0x0203E0D4
-_0807021C: .4byte 0x0202BBF4
+_0807021C: .4byte gPlaySt
 _08070220: .4byte 0x00000395
 _08070224:
 	adds r0, r7, #0
@@ -176721,7 +176721,7 @@ sub_08070828: @ 0x08070828
 	sub sp, #4
 	mov r7, sp
 	str r0, [r7]
-	ldr r1, _08070854 @ =0x0202BBF4
+	ldr r1, _08070854 @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -176739,7 +176739,7 @@ _0807084A:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08070854: .4byte 0x0202BBF4
+_08070854: .4byte gPlaySt
 
 	thumb_func_start sub_08070858
 sub_08070858: @ 0x08070858
@@ -178135,7 +178135,7 @@ sub_0807134C: @ 0x0807134C
 	movs r3, #0
 	ldrsh r0, [r1, r3]
 	str r0, [r7, #8]
-	ldr r1, _08071390 @ =0x08BBFC7C
+	ldr r1, _08071390 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #8]
 	movs r2, #8
@@ -178153,12 +178153,12 @@ sub_0807134C: @ 0x0807134C
 	bne _08071394
 	b _08071860
 	.align 2, 0
-_08071390: .4byte 0x08BBFC7C
+_08071390: .4byte gpKeySt
 _08071394:
 	ldr r0, [r7]
 	bl sub_0800457C
 _0807139A:
-	ldr r1, _080713B8 @ =0x08BBFC7C
+	ldr r1, _080713B8 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #4]
 	movs r2, #0x80
@@ -178174,12 +178174,12 @@ _0807139A:
 	str r0, [r7, #0xc]
 	b _080713C0
 	.align 2, 0
-_080713B8: .4byte 0x08BBFC7C
+_080713B8: .4byte gpKeySt
 _080713BC:
 	movs r0, #1
 	str r0, [r7, #0xc]
 _080713C0:
-	ldr r1, _080714D8 @ =0x08BBFC7C
+	ldr r1, _080714D8 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #6]
 	movs r2, #1
@@ -178320,7 +178320,7 @@ _080713D8:
 	strh r2, [r0]
 	b _08071534
 	.align 2, 0
-_080714D8: .4byte 0x08BBFC7C
+_080714D8: .4byte gpKeySt
 _080714DC: .4byte 0x08D65878
 _080714E0: .4byte 0x08D65800
 _080714E4:
@@ -178365,7 +178365,7 @@ _080714E4:
 	adds r1, r2, #0
 	strh r1, [r0]
 _08071534:
-	ldr r1, _08071658 @ =0x08BBFC7C
+	ldr r1, _08071658 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #6]
 	movs r2, #2
@@ -178510,7 +178510,7 @@ _0807154C:
 	.align 2, 0
 _08071650: .4byte 0x08D65878
 _08071654: .4byte 0x08D65800
-_08071658: .4byte 0x08BBFC7C
+_08071658: .4byte gpKeySt
 _0807165C:
 	ldr r1, _08071868 @ =0x08D65878
 	ldr r0, [r1]
@@ -178551,7 +178551,7 @@ _0807165C:
 	adds r2, r1, #0
 	strh r2, [r0]
 _080716A8:
-	ldr r1, _08071870 @ =0x08BBFC7C
+	ldr r1, _08071870 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #6]
 	movs r2, #0x20
@@ -178610,7 +178610,7 @@ _080716EE:
 	adds r2, r1, #0
 	strh r2, [r0]
 _0807171A:
-	ldr r1, _08071870 @ =0x08BBFC7C
+	ldr r1, _08071870 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #6]
 	movs r2, #0x10
@@ -178669,7 +178669,7 @@ _08071760:
 	adds r2, r1, #0
 	strh r2, [r0]
 _0807178C:
-	ldr r1, _08071870 @ =0x08BBFC7C
+	ldr r1, _08071870 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #6]
 	movs r2, #0x40
@@ -178703,7 +178703,7 @@ _0807178C:
 	adds r2, r1, #0
 	strh r2, [r0]
 _080717CE:
-	ldr r1, _08071870 @ =0x08BBFC7C
+	ldr r1, _08071870 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #6]
 	movs r2, #0x80
@@ -178737,7 +178737,7 @@ _080717CE:
 	adds r2, r1, #0
 	strh r2, [r0]
 _08071810:
-	ldr r1, _08071870 @ =0x08BBFC7C
+	ldr r1, _08071870 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #6]
 	movs r2, #0xf0
@@ -178753,7 +178753,7 @@ _08071810:
 	movs r2, #1
 	bl sub_08070B10
 _08071830:
-	ldr r1, _08071870 @ =0x08BBFC7C
+	ldr r1, _08071870 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #6]
 	movs r2, #0xf3
@@ -178784,7 +178784,7 @@ _08071860:
 	.align 2, 0
 _08071868: .4byte 0x08D65878
 _0807186C: .4byte 0x08D65800
-_08071870: .4byte 0x08BBFC7C
+_08071870: .4byte gpKeySt
 
 	thumb_func_start sub_08071874
 sub_08071874: @ 0x08071874
@@ -181874,7 +181874,7 @@ sub_080730DC: @ 0x080730DC
 	sub sp, #0xc
 	add r7, sp, #8
 	str r0, [r7]
-	ldr r1, _080731D8 @ =0x0202BBF4
+	ldr r1, _080731D8 @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -181986,7 +181986,7 @@ _080730FA:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080731D8: .4byte 0x0202BBF4
+_080731D8: .4byte gPlaySt
 _080731DC: .4byte 0x083FD7F4
 _080731E0: .4byte 0x06013800
 _080731E4: .4byte 0x083FDAAC
@@ -182112,7 +182112,7 @@ _08073280:
 	bls _080732EE
 	ldr r0, [r7]
 	bl sub_0800457C
-	bl sub_08012B98
+	bl EndEachSpriteAnimProc
 _080732EE:
 	add sp, #0x10
 	pop {r7}
@@ -185308,7 +185308,7 @@ sub_08074C5C: @ 0x08074C5C
 	sub sp, #4
 	mov r7, sp
 	str r0, [r7]
-	bl sub_08012B98
+	bl EndEachSpriteAnimProc
 	add sp, #4
 	pop {r7}
 	pop {r0}
@@ -186590,7 +186590,7 @@ _080755FE:
 	adds r1, r5, #0
 	adds r2, r6, #0
 	bl sub_08074D50
-	ldr r1, _080756C8 @ =0x0202BBF4
+	ldr r1, _080756C8 @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -186635,7 +186635,7 @@ _080756BA:
 	bx r0
 	.align 2, 0
 _080756C4: .4byte 0x08D65CF4
-_080756C8: .4byte 0x0202BBF4
+_080756C8: .4byte gPlaySt
 _080756CC: .4byte 0x00000396
 
 	thumb_func_start sub_080756D0
@@ -186812,7 +186812,7 @@ _0807580E:
 	movs r4, #2
 	str r4, [sp, #4]
 	bl sub_08012AF0
-	ldr r1, _0807585C @ =0x0202BBF4
+	ldr r1, _0807585C @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -186835,7 +186835,7 @@ _0807584C: .4byte 0x083F9ECC
 _08075850: .4byte 0x0203E0D4
 _08075854: .4byte 0x0202BBB4
 _08075858: .4byte 0x083F2F90
-_0807585C: .4byte 0x0202BBF4
+_0807585C: .4byte gPlaySt
 _08075860: .4byte 0x0000037B
 
 	thumb_func_start sub_08075864
@@ -186844,7 +186844,7 @@ sub_08075864: @ 0x08075864
 	sub sp, #4
 	mov r7, sp
 	str r0, [r7]
-	bl sub_08012B98
+	bl EndEachSpriteAnimProc
 	add sp, #4
 	pop {r7}
 	pop {r0}
@@ -189353,7 +189353,7 @@ sub_08076B84: @ 0x08076B84
 	sub sp, #4
 	mov r7, sp
 	str r0, [r7]
-	ldr r1, _08076C34 @ =0x0202BBF4
+	ldr r1, _08076C34 @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -189437,7 +189437,7 @@ _08076BA2:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08076C34: .4byte 0x0202BBF4
+_08076C34: .4byte gPlaySt
 _08076C38: .4byte 0x0203E0D4
 _08076C3C: .4byte 0x0203A46C
 
@@ -189772,7 +189772,7 @@ sub_08076EA8: @ 0x08076EA8
 	sub sp, #4
 	mov r7, sp
 	str r0, [r7]
-	ldr r1, _08076F28 @ =0x0202BBF4
+	ldr r1, _08076F28 @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -189832,7 +189832,7 @@ _08076EC6:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08076F28: .4byte 0x0202BBF4
+_08076F28: .4byte gPlaySt
 _08076F2C: .4byte 0x0203E0D4
 _08076F30: .4byte 0x0202BBB4
 
@@ -193550,15 +193550,15 @@ _08078AFC: @ jump table
 	.4byte _08078B50 @ case 3
 	.4byte _08078B68 @ case 4
 _08078B10:
-	ldr r1, _08078B1C @ =0x0202BBF4
+	ldr r1, _08078B1C @ =gPlaySt
 	ldrb r0, [r1, #0x1b]
 	cmp r0, #2
 	bne _08078BBC
 	b _08078B28
 	.align 2, 0
-_08078B1C: .4byte 0x0202BBF4
+_08078B1C: .4byte gPlaySt
 _08078B20:
-	ldr r1, _08078B34 @ =0x0202BBF4
+	ldr r1, _08078B34 @ =gPlaySt
 	ldrb r2, [r1, #0x1b]
 	cmp r2, #3
 	bne _08078BBC
@@ -193570,9 +193570,9 @@ _08078B28:
 	beq _08078B74
 	b _08078BBC
 	.align 2, 0
-_08078B34: .4byte 0x0202BBF4
+_08078B34: .4byte gPlaySt
 _08078B38:
-	ldr r1, _08078B4C @ =0x0202BBF4
+	ldr r1, _08078B4C @ =gPlaySt
 	movs r0, #0x40
 	ldrb r2, [r1, #0x14]
 	ands r0, r2
@@ -193583,9 +193583,9 @@ _08078B38:
 	beq _08078B74
 	b _08078BBC
 	.align 2, 0
-_08078B4C: .4byte 0x0202BBF4
+_08078B4C: .4byte gPlaySt
 _08078B50:
-	ldr r1, _08078B64 @ =0x0202BBF4
+	ldr r1, _08078B64 @ =gPlaySt
 	movs r0, #0x40
 	ldrb r2, [r1, #0x14]
 	ands r0, r2
@@ -193596,9 +193596,9 @@ _08078B50:
 	beq _08078B74
 	b _08078BBC
 	.align 2, 0
-_08078B64: .4byte 0x0202BBF4
+_08078B64: .4byte gPlaySt
 _08078B68:
-	ldr r1, _08078B94 @ =0x0202BBF4
+	ldr r1, _08078B94 @ =gPlaySt
 	movs r0, #0x40
 	ldrb r1, [r1, #0x14]
 	ands r0, r1
@@ -193613,7 +193613,7 @@ _08078B74:
 _08078B80:
 	cmp r5, #0
 	bne _08078B98
-	ldr r0, _08078B94 @ =0x0202BBF4
+	ldr r0, _08078B94 @ =gPlaySt
 	ldrh r1, [r0, #0x10]
 	cmp r1, r6
 	bne _08078BBC
@@ -193622,9 +193622,9 @@ _08078B80:
 	bne _08078BBC
 	b _08078BAA
 	.align 2, 0
-_08078B94: .4byte 0x0202BBF4
+_08078B94: .4byte gPlaySt
 _08078B98:
-	ldr r1, _08078BB8 @ =0x0202BBF4
+	ldr r1, _08078BB8 @ =gPlaySt
 	ldrh r0, [r1, #0x10]
 	cmp r0, r6
 	blt _08078BBC
@@ -193642,7 +193642,7 @@ _08078BAA:
 	movs r0, #1
 	b _08078BBE
 	.align 2, 0
-_08078BB8: .4byte 0x0202BBF4
+_08078BB8: .4byte gPlaySt
 _08078BBC:
 	movs r0, #0
 _08078BBE:
@@ -193678,21 +193678,21 @@ _08078BEE:
 	beq _08078C14
 	b _08078C20
 _08078BF4:
-	ldr r0, _08078C00 @ =0x0202BBF4
+	ldr r0, _08078C00 @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #2
 	beq _08078C20
 	b _08078C3E
 	.align 2, 0
-_08078C00: .4byte 0x0202BBF4
+_08078C00: .4byte gPlaySt
 _08078C04:
-	ldr r0, _08078C10 @ =0x0202BBF4
+	ldr r0, _08078C10 @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #3
 	beq _08078C20
 	b _08078C3E
 	.align 2, 0
-_08078C10: .4byte 0x0202BBF4
+_08078C10: .4byte gPlaySt
 _08078C14:
 	lsrs r0, r0, #0x10
 	bl sub_0807A0C8
@@ -194051,7 +194051,7 @@ _08078E7E:
 sub_08078E84: @ 0x08078E84
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _08078EA4 @ =0x0202BBF4
+	ldr r0, _08078EA4 @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #2
 	bne _08078EA8
@@ -194064,7 +194064,7 @@ sub_08078E84: @ 0x08078E84
 	bl sub_08078E20
 	b _08078EAA
 	.align 2, 0
-_08078EA4: .4byte 0x0202BBF4
+_08078EA4: .4byte gPlaySt
 _08078EA8:
 	movs r0, #0
 _08078EAA:
@@ -194076,7 +194076,7 @@ _08078EAA:
 sub_08078EB0: @ 0x08078EB0
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _08078ED0 @ =0x0202BBF4
+	ldr r0, _08078ED0 @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #3
 	bne _08078ED4
@@ -194089,7 +194089,7 @@ sub_08078EB0: @ 0x08078EB0
 	bl sub_08078E20
 	b _08078ED6
 	.align 2, 0
-_08078ED0: .4byte 0x0202BBF4
+_08078ED0: .4byte gPlaySt
 _08078ED4:
 	movs r0, #0
 _08078ED6:
@@ -194234,7 +194234,7 @@ _08078FB8:
 	thumb_func_start sub_08078FC4
 sub_08078FC4: @ 0x08078FC4
 	push {lr}
-	ldr r0, _08078FE4 @ =0x0202BBF4
+	ldr r0, _08078FE4 @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	cmp r0, #0x80
 	bne _08078FE8
@@ -194249,7 +194249,7 @@ sub_08078FC4: @ 0x08078FC4
 	movs r0, #1
 	b _08078FEA
 	.align 2, 0
-_08078FE4: .4byte 0x0202BBF4
+_08078FE4: .4byte gPlaySt
 _08078FE8:
 	movs r0, #0
 _08078FEA:
@@ -194260,7 +194260,7 @@ _08078FEA:
 	thumb_func_start sub_08078FF0
 sub_08078FF0: @ 0x08078FF0
 	push {lr}
-	ldr r0, _08079034 @ =0x0202BBF4
+	ldr r0, _08079034 @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	cmp r0, #0x80
 	bne _08079030
@@ -194292,7 +194292,7 @@ _08079030:
 	movs r0, #0
 	b _0807903A
 	.align 2, 0
-_08079034: .4byte 0x0202BBF4
+_08079034: .4byte gPlaySt
 _08079038:
 	movs r0, #1
 _0807903A:
@@ -194317,7 +194317,7 @@ sub_08079040: @ 0x08079040
 	thumb_func_start sub_08079058
 sub_08079058: @ 0x08079058
 	push {lr}
-	ldr r0, _08079074 @ =0x0202BBF4
+	ldr r0, _08079074 @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	cmp r0, #0x80
 	bne _08079078
@@ -194330,7 +194330,7 @@ sub_08079058: @ 0x08079058
 	asrs r0, r0, #0x18
 	b _0807907A
 	.align 2, 0
-_08079074: .4byte 0x0202BBF4
+_08079074: .4byte gPlaySt
 _08079078:
 	movs r0, #0
 _0807907A:
@@ -194341,7 +194341,7 @@ _0807907A:
 	thumb_func_start sub_08079080
 sub_08079080: @ 0x08079080
 	push {lr}
-	ldr r0, _0807909C @ =0x0202BBF4
+	ldr r0, _0807909C @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	cmp r0, #0x80
 	bne _080790A0
@@ -194354,7 +194354,7 @@ sub_08079080: @ 0x08079080
 	asrs r0, r0, #0x18
 	b _080790A2
 	.align 2, 0
-_0807909C: .4byte 0x0202BBF4
+_0807909C: .4byte gPlaySt
 _080790A0:
 	movs r0, #0
 _080790A2:
@@ -194365,7 +194365,7 @@ _080790A2:
 	thumb_func_start sub_080790A8
 sub_080790A8: @ 0x080790A8
 	push {lr}
-	ldr r0, _080790C4 @ =0x0202BBF4
+	ldr r0, _080790C4 @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	cmp r0, #0x80
 	bne _080790C8
@@ -194378,7 +194378,7 @@ sub_080790A8: @ 0x080790A8
 	asrs r0, r0, #0x18
 	b _080790CA
 	.align 2, 0
-_080790C4: .4byte 0x0202BBF4
+_080790C4: .4byte gPlaySt
 _080790C8:
 	movs r0, #0
 _080790CA:
@@ -194389,7 +194389,7 @@ _080790CA:
 	thumb_func_start sub_080790D0
 sub_080790D0: @ 0x080790D0
 	push {lr}
-	ldr r0, _080790EC @ =0x0202BBF4
+	ldr r0, _080790EC @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	cmp r0, #0x80
 	bne _080790F0
@@ -194402,7 +194402,7 @@ sub_080790D0: @ 0x080790D0
 	asrs r0, r0, #0x18
 	b _080790F2
 	.align 2, 0
-_080790EC: .4byte 0x0202BBF4
+_080790EC: .4byte gPlaySt
 _080790F0:
 	movs r0, #0
 _080790F2:
@@ -194467,7 +194467,7 @@ _0807914C:
 sub_08079158: @ 0x08079158
 	push {lr}
 	sub sp, #0x1c
-	ldr r0, _0807917C @ =0x0202BBF4
+	ldr r0, _0807917C @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -194481,7 +194481,7 @@ sub_08079158: @ 0x08079158
 	movs r0, #0
 	b _08079182
 	.align 2, 0
-_0807917C: .4byte 0x0202BBF4
+_0807917C: .4byte gPlaySt
 _08079180:
 	movs r0, #1
 _08079182:
@@ -194493,7 +194493,7 @@ _08079182:
 sub_08079188: @ 0x08079188
 	push {lr}
 	sub sp, #0x1c
-	ldr r0, _080791B0 @ =0x0202BBF4
+	ldr r0, _080791B0 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -194508,7 +194508,7 @@ sub_08079188: @ 0x08079188
 	bl sub_080788D0
 	b _080791BA
 	.align 2, 0
-_080791B0: .4byte 0x0202BBF4
+_080791B0: .4byte gPlaySt
 _080791B4:
 	mov r0, sp
 	bl sub_080788D0
@@ -194533,7 +194533,7 @@ sub_080791CC: @ 0x080791CC
 	lsrs r4, r4, #0x18
 	lsls r5, r5, #0x18
 	lsrs r5, r5, #0x18
-	ldr r0, _08079200 @ =0x0202BBF4
+	ldr r0, _08079200 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -194549,7 +194549,7 @@ sub_080791CC: @ 0x080791CC
 	movs r0, #0
 	b _08079206
 	.align 2, 0
-_08079200: .4byte 0x0202BBF4
+_08079200: .4byte gPlaySt
 _08079204:
 	movs r0, #1
 _08079206:
@@ -194569,7 +194569,7 @@ sub_08079210: @ 0x08079210
 	lsrs r4, r4, #0x18
 	lsls r5, r5, #0x18
 	lsrs r5, r5, #0x18
-	ldr r0, _0807924C @ =0x0202BBF4
+	ldr r0, _0807924C @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -194590,7 +194590,7 @@ _08079244:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0807924C: .4byte 0x0202BBF4
+_0807924C: .4byte gPlaySt
 
 	thumb_func_start sub_08079250
 sub_08079250: @ 0x08079250
@@ -194793,7 +194793,7 @@ sub_080793A0: @ 0x080793A0
 	lsrs r4, r4, #0x18
 	lsls r5, r5, #0x18
 	lsrs r5, r5, #0x18
-	ldr r0, _080793D4 @ =0x0202BBF4
+	ldr r0, _080793D4 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -194809,7 +194809,7 @@ sub_080793A0: @ 0x080793A0
 	ldr r0, [sp, #0xc]
 	b _080793DA
 	.align 2, 0
-_080793D4: .4byte 0x0202BBF4
+_080793D4: .4byte gPlaySt
 _080793D8:
 	movs r0, #0
 _080793DA:
@@ -194829,7 +194829,7 @@ sub_080793E4: @ 0x080793E4
 	lsrs r4, r4, #0x18
 	lsls r5, r5, #0x18
 	lsrs r5, r5, #0x18
-	ldr r0, _08079428 @ =0x0202BBF4
+	ldr r0, _08079428 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -194855,7 +194855,7 @@ _0807941C:
 	ldr r0, [r0]
 	mov pc, r0
 	.align 2, 0
-_08079428: .4byte 0x0202BBF4
+_08079428: .4byte gPlaySt
 _0807942C: .4byte _08079430
 _08079430: @ jump table
 	.4byte _080795C0 @ case 0
@@ -195297,7 +195297,7 @@ sub_0807978C: @ 0x0807978C
 sub_08079798: @ 0x08079798
 	push {lr}
 	sub sp, #0x1c
-	ldr r0, _080797CC @ =0x0202BBF4
+	ldr r0, _080797CC @ =gPlaySt
 	movs r1, #0xe
 	ldrsb r1, [r0, r1]
 	lsls r1, r1, #0x10
@@ -195321,14 +195321,14 @@ _080797C4:
 	pop {r1}
 	bx r1
 	.align 2, 0
-_080797CC: .4byte 0x0202BBF4
+_080797CC: .4byte gPlaySt
 _080797D0: .4byte 0x08D6696C
 
 	thumb_func_start sub_080797D4
 sub_080797D4: @ 0x080797D4
 	push {r4, lr}
 	sub sp, #0x1c
-	ldr r0, _08079818 @ =0x0202BBF4
+	ldr r0, _08079818 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -195357,7 +195357,7 @@ sub_080797D4: @ 0x080797D4
 	movs r0, #1
 	b _08079822
 	.align 2, 0
-_08079818: .4byte 0x0202BBF4
+_08079818: .4byte gPlaySt
 _0807981C: .4byte 0x08D6696C
 _08079820:
 	movs r0, #0
@@ -195372,7 +195372,7 @@ _08079822:
 sub_0807982C: @ 0x0807982C
 	push {lr}
 	sub sp, #0x1c
-	ldr r0, _0807986C @ =0x0202BBF4
+	ldr r0, _0807986C @ =gPlaySt
 	movs r2, #0xe
 	ldrsb r2, [r0, r2]
 	lsls r2, r2, #0x10
@@ -195400,7 +195400,7 @@ sub_0807982C: @ 0x0807982C
 	movs r0, #1
 	b _0807987C
 	.align 2, 0
-_0807986C: .4byte 0x0202BBF4
+_0807986C: .4byte gPlaySt
 _08079870: .4byte 0x08D6696C
 _08079874:
 	mov r0, sp
@@ -195437,7 +195437,7 @@ sub_08079890: @ 0x08079890
 sub_08079894: @ 0x08079894
 	push {lr}
 	sub sp, #0x1c
-	ldr r0, _080798CC @ =0x0202BBF4
+	ldr r0, _080798CC @ =gPlaySt
 	movs r2, #0xe
 	ldrsb r2, [r0, r2]
 	lsls r2, r2, #0x10
@@ -195462,14 +195462,14 @@ _080798C2:
 	pop {r1}
 	bx r1
 	.align 2, 0
-_080798CC: .4byte 0x0202BBF4
+_080798CC: .4byte gPlaySt
 _080798D0: .4byte 0x08D6696C
 
 	thumb_func_start sub_080798D4
 sub_080798D4: @ 0x080798D4
 	push {lr}
 	sub sp, #0x1c
-	ldr r0, _08079900 @ =0x0202BBF4
+	ldr r0, _08079900 @ =gPlaySt
 	movs r2, #0xe
 	ldrsb r2, [r0, r2]
 	lsls r2, r2, #0x10
@@ -195489,7 +195489,7 @@ sub_080798D4: @ 0x080798D4
 	movs r0, #1
 	b _0807990A
 	.align 2, 0
-_08079900: .4byte 0x0202BBF4
+_08079900: .4byte gPlaySt
 _08079904: .4byte 0x08D6696C
 _08079908:
 	movs r0, #0
@@ -195502,7 +195502,7 @@ _0807990A:
 sub_08079910: @ 0x08079910
 	push {lr}
 	sub sp, #0x1c
-	ldr r0, _08079940 @ =0x0202BBF4
+	ldr r0, _08079940 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -195523,7 +195523,7 @@ sub_08079910: @ 0x08079910
 	movs r0, #0
 	b _0807994A
 	.align 2, 0
-_08079940: .4byte 0x0202BBF4
+_08079940: .4byte gPlaySt
 _08079944: .4byte 0x030045B0
 _08079948:
 	movs r0, #1
@@ -195536,7 +195536,7 @@ _0807994A:
 sub_08079950: @ 0x08079950
 	push {lr}
 	sub sp, #0x1c
-	ldr r0, _08079988 @ =0x0202BBF4
+	ldr r0, _08079988 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -195561,7 +195561,7 @@ _08079982:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08079988: .4byte 0x0202BBF4
+_08079988: .4byte gPlaySt
 _0807998C: .4byte 0x030045B0
 
 	thumb_func_start sub_08079990
@@ -195594,7 +195594,7 @@ _080799BC:
 	thumb_func_start sub_080799C0
 sub_080799C0: @ 0x080799C0
 	push {r4, lr}
-	ldr r4, _080799D8 @ =0x0202BBF4
+	ldr r4, _080799D8 @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r4, r0]
 	bl sub_08031AEC
@@ -195604,7 +195604,7 @@ sub_080799C0: @ 0x080799C0
 	ldr r0, [r0, #0x10]
 	b _080799DE
 	.align 2, 0
-_080799D8: .4byte 0x0202BBF4
+_080799D8: .4byte gPlaySt
 _080799DC:
 	ldr r0, [r0, #0x14]
 _080799DE:
@@ -195616,7 +195616,7 @@ _080799DE:
 sub_080799E4: @ 0x080799E4
 	push {r4, r5, lr}
 	sub sp, #0x1c
-	ldr r5, _08079A18 @ =0x0202BBF4
+	ldr r5, _08079A18 @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r5, r0]
 	bl sub_08031AEC
@@ -195639,7 +195639,7 @@ _08079A02:
 	ldr r0, [r4, #0x24]
 	b _08079A2C
 	.align 2, 0
-_08079A18: .4byte 0x0202BBF4
+_08079A18: .4byte gPlaySt
 _08079A1C:
 	ldr r0, [r4, #0x20]
 	b _08079A2C
@@ -195652,12 +195652,12 @@ _08079A20:
 	ldr r0, [r4, #0x1c]
 _08079A2C:
 	str r0, [sp, #4]
-	bl sub_08017B24
+	bl LoadUnits
 	b _08079A3C
 _08079A34:
 	ldr r0, [r4, #0x18]
 	str r0, [sp, #4]
-	bl sub_08017B24
+	bl LoadUnits
 _08079A3C:
 	bl sub_0807A198
 	bl sub_08019EA4
@@ -195670,7 +195670,7 @@ _08079A3C:
 	thumb_func_start sub_08079A50
 sub_08079A50: @ 0x08079A50
 	push {r4, lr}
-	ldr r4, _08079A74 @ =0x0202BBF4
+	ldr r4, _08079A74 @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r4, r0]
 	bl sub_08031AEC
@@ -195686,7 +195686,7 @@ sub_08079A50: @ 0x08079A50
 	ldr r0, [r1, #0x34]
 	b _08079A8C
 	.align 2, 0
-_08079A74: .4byte 0x0202BBF4
+_08079A74: .4byte gPlaySt
 _08079A78:
 	ldr r0, [r1, #0x30]
 	b _08079A8C
@@ -195714,7 +195714,7 @@ sub_08079A94: @ 0x08079A94
 	lsls r1, r1, #0x18
 	lsrs r4, r1, #0x18
 	ldr r3, _08079AB0 @ =0x08D66CE0
-	ldr r1, _08079AB4 @ =0x0202BBF4
+	ldr r1, _08079AB4 @ =gPlaySt
 	movs r0, #0x80
 	ldrb r2, [r1, #0x14]
 	ands r0, r2
@@ -195723,7 +195723,7 @@ sub_08079A94: @ 0x08079A94
 	b _08079AE6
 	.align 2, 0
 _08079AB0: .4byte 0x08D66CE0
-_08079AB4: .4byte 0x0202BBF4
+_08079AB4: .4byte gPlaySt
 _08079AB8:
 	adds r0, r3, #0
 	b _08079AE8
@@ -195780,7 +195780,7 @@ _08079AFA:
 	ldrb r1, [r4, #1]
 	cmp r1, #0x45
 	beq _08079B20
-	ldr r0, _08079B24 @ =0x0202BBF4
+	ldr r0, _08079B24 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -195791,7 +195791,7 @@ _08079B20:
 	adds r0, r4, #0
 	b _08079B32
 	.align 2, 0
-_08079B24: .4byte 0x0202BBF4
+_08079B24: .4byte gPlaySt
 _08079B28:
 	adds r4, #0xc
 _08079B2A:
@@ -195823,7 +195823,7 @@ _08079B42:
 	ldrb r1, [r4, #1]
 	cmp r1, #0x45
 	beq _08079B68
-	ldr r0, _08079B6C @ =0x0202BBF4
+	ldr r0, _08079B6C @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -195834,7 +195834,7 @@ _08079B68:
 	adds r0, r4, #0
 	b _08079B7A
 	.align 2, 0
-_08079B6C: .4byte 0x0202BBF4
+_08079B6C: .4byte gPlaySt
 _08079B70:
 	adds r4, #0x10
 _08079B72:
@@ -195866,7 +195866,7 @@ _08079B8A:
 	ldrb r1, [r4, #1]
 	cmp r1, #0x45
 	beq _08079BB0
-	ldr r0, _08079BB4 @ =0x0202BBF4
+	ldr r0, _08079BB4 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -195877,7 +195877,7 @@ _08079BB0:
 	adds r0, r4, #0
 	b _08079BC2
 	.align 2, 0
-_08079BB4: .4byte 0x0202BBF4
+_08079BB4: .4byte gPlaySt
 _08079BB8:
 	adds r4, #0xc
 _08079BBA:
@@ -196035,7 +196035,7 @@ sub_08079CE4: @ 0x08079CE4
 	bl sub_08079B38
 	cmp r0, #0
 	bne _08079D1C
-	ldr r6, _08079D24 @ =0x0202BBF4
+	ldr r6, _08079D24 @ =gPlaySt
 	ldr r1, _08079D28 @ =0x08D6716C
 	ldrb r0, [r6, #0x1b]
 	cmp r0, #1
@@ -196058,7 +196058,7 @@ _08079D1C:
 	b _08079D32
 	.align 2, 0
 _08079D20: .4byte 0x08D6722C
-_08079D24: .4byte 0x0202BBF4
+_08079D24: .4byte gPlaySt
 _08079D28: .4byte 0x08D6716C
 _08079D2C: .4byte 0x08D670AC
 _08079D30:
@@ -196164,7 +196164,7 @@ sub_08079DF4: @ 0x08079DF4
 	push {r4, r5, r6, lr}
 	lsls r0, r0, #0x18
 	lsrs r5, r0, #0x18
-	ldr r6, _08079E44 @ =0x0202BBF4
+	ldr r6, _08079E44 @ =gPlaySt
 	ldr r1, _08079E48 @ =0x08D6716C
 	ldrb r0, [r6, #0x1b]
 	cmp r0, #1
@@ -196198,7 +196198,7 @@ _08079E1C:
 	strb r0, [r1]
 	b _08079ECC
 	.align 2, 0
-_08079E44: .4byte 0x0202BBF4
+_08079E44: .4byte gPlaySt
 _08079E48: .4byte 0x08D6716C
 _08079E4C: .4byte 0x08D670AC
 _08079E50:
@@ -196273,7 +196273,7 @@ sub_08079ED4: @ 0x08079ED4
 	movs r0, #0x2b
 	movs r1, #0
 	bl sub_0800376C
-	ldr r0, _08079EFC @ =0x0202BBF4
+	ldr r0, _08079EFC @ =gPlaySt
 	adds r0, #0x41
 	movs r1, #1
 	ldrb r2, [r0]
@@ -196284,7 +196284,7 @@ sub_08079ED4: @ 0x08079ED4
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08079EFC: .4byte 0x0202BBF4
+_08079EFC: .4byte gPlaySt
 _08079F00: .4byte 0x08D6F71C
 
 	thumb_func_start sub_08079F04
@@ -196638,7 +196638,7 @@ sub_0807A108: @ 0x0807A108
 
 	thumb_func_start sub_0807A10C
 sub_0807A10C: @ 0x0807A10C
-	ldr r1, _0807A11C @ =0x0202BBF4
+	ldr r1, _0807A11C @ =gPlaySt
 	movs r0, #0x40
 	ldrb r1, [r1, #0x14]
 	ands r0, r1
@@ -196647,7 +196647,7 @@ sub_0807A10C: @ 0x0807A10C
 	movs r0, #0
 	b _0807A122
 	.align 2, 0
-_0807A11C: .4byte 0x0202BBF4
+_0807A11C: .4byte gPlaySt
 _0807A120:
 	movs r0, #1
 _0807A122:
@@ -196709,7 +196709,7 @@ _0807A17A:
 	ldrb r1, [r2]
 	cmp r1, #0
 	bne _0807A170
-	ldr r0, _0807A194 @ =0x0202BBF4
+	ldr r0, _0807A194 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -196719,12 +196719,12 @@ _0807A18E:
 	pop {r1}
 	bx r1
 	.align 2, 0
-_0807A194: .4byte 0x0202BBF4
+_0807A194: .4byte gPlaySt
 
 	thumb_func_start sub_0807A198
 sub_0807A198: @ 0x0807A198
 	push {r4, r5, lr}
-	ldr r1, _0807A1E0 @ =0x0202BBF4
+	ldr r1, _0807A1E0 @ =gPlaySt
 	movs r0, #0x40
 	ldrb r2, [r1, #0x14]
 	ands r0, r2
@@ -196759,7 +196759,7 @@ _0807A1D8:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0807A1E0: .4byte 0x0202BBF4
+_0807A1E0: .4byte gPlaySt
 
 	thumb_func_start sub_0807A1E4
 sub_0807A1E4: @ 0x0807A1E4
@@ -196789,7 +196789,7 @@ _0807A204:
 	thumb_func_start sub_0807A208
 sub_0807A208: @ 0x0807A208
 	push {lr}
-	ldr r0, _0807A228 @ =0x0202BBF4
+	ldr r0, _0807A228 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -196801,13 +196801,13 @@ sub_0807A208: @ 0x0807A208
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0807A228: .4byte 0x0202BBF4
+_0807A228: .4byte gPlaySt
 
 	thumb_func_start sub_0807A22C
 sub_0807A22C: @ 0x0807A22C
 	push {r4, lr}
 	movs r4, #0
-	ldr r1, _0807A25C @ =0x0202BBF4
+	ldr r1, _0807A25C @ =gPlaySt
 	movs r0, #0x40
 	ldrb r1, [r1, #0x14]
 	ands r0, r1
@@ -196829,7 +196829,7 @@ _0807A254:
 	pop {r1}
 	bx r1
 	.align 2, 0
-_0807A25C: .4byte 0x0202BBF4
+_0807A25C: .4byte gPlaySt
 
 	thumb_func_start sub_0807A260
 sub_0807A260: @ 0x0807A260
@@ -197334,7 +197334,7 @@ sub_0807A564: @ 0x0807A564
 sub_0807A568: @ 0x0807A568
 	push {lr}
 	bl sub_0808667C
-	ldr r0, _0807A58C @ =0x0202BBF4
+	ldr r0, _0807A58C @ =gPlaySt
 	movs r1, #2
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #2
@@ -197348,7 +197348,7 @@ _0807A57A:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0807A58C: .4byte 0x0202BBF4
+_0807A58C: .4byte gPlaySt
 
 	thumb_func_start sub_0807A590
 sub_0807A590: @ 0x0807A590
@@ -197434,7 +197434,7 @@ _0807A61A:
 sub_0807A620: @ 0x0807A620
 	push {r4, lr}
 	movs r0, #0
-	bl sub_0802C7D8
+	bl GetTrap
 	adds r4, r0, #0
 	b _0807A63A
 _0807A62C:
@@ -197464,7 +197464,7 @@ sub_0807A648: @ 0x0807A648
 
 	thumb_func_start sub_0807A654
 sub_0807A654: @ 0x0807A654
-	ldr r0, _0807A668 @ =0x08BBFC7C
+	ldr r0, _0807A668 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #1
 	ldrh r1, [r1, #8]
@@ -197474,7 +197474,7 @@ sub_0807A654: @ 0x0807A654
 	movs r0, #1
 	b _0807A66E
 	.align 2, 0
-_0807A668: .4byte 0x08BBFC7C
+_0807A668: .4byte gpKeySt
 _0807A66C:
 	movs r0, #0
 _0807A66E:
@@ -197490,7 +197490,7 @@ sub_0807A670: @ 0x0807A670
 
 	thumb_func_start sub_0807A67C
 sub_0807A67C: @ 0x0807A67C
-	ldr r0, _0807A690 @ =0x08BBFC7C
+	ldr r0, _0807A690 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #1
 	ldrh r1, [r1, #8]
@@ -197500,7 +197500,7 @@ sub_0807A67C: @ 0x0807A67C
 	movs r0, #0
 	b _0807A696
 	.align 2, 0
-_0807A690: .4byte 0x08BBFC7C
+_0807A690: .4byte gpKeySt
 _0807A694:
 	movs r0, #1
 _0807A696:
@@ -198522,7 +198522,7 @@ _0807AD18:
 	thumb_func_start sub_0807AD28
 sub_0807AD28: @ 0x0807AD28
 	movs r1, #0
-	ldr r0, _0807AD38 @ =0x0202BBF4
+	ldr r0, _0807AD38 @ =gPlaySt
 	ldrh r0, [r0, #0x10]
 	cmp r0, #0x14
 	bls _0807AD34
@@ -198531,12 +198531,12 @@ _0807AD34:
 	adds r0, r1, #0
 	bx lr
 	.align 2, 0
-_0807AD38: .4byte 0x0202BBF4
+_0807AD38: .4byte gPlaySt
 
 	thumb_func_start sub_0807AD3C
 sub_0807AD3C: @ 0x0807AD3C
 	movs r1, #0
-	ldr r0, _0807AD4C @ =0x0202BBF4
+	ldr r0, _0807AD4C @ =gPlaySt
 	ldrh r0, [r0, #0x10]
 	cmp r0, #0x19
 	bls _0807AD48
@@ -198545,12 +198545,12 @@ _0807AD48:
 	adds r0, r1, #0
 	bx lr
 	.align 2, 0
-_0807AD4C: .4byte 0x0202BBF4
+_0807AD4C: .4byte gPlaySt
 
 	thumb_func_start sub_0807AD50
 sub_0807AD50: @ 0x0807AD50
 	movs r1, #0
-	ldr r0, _0807AD60 @ =0x0202BBF4
+	ldr r0, _0807AD60 @ =gPlaySt
 	ldrh r0, [r0, #0x10]
 	cmp r0, #0x1e
 	bls _0807AD5C
@@ -198559,12 +198559,12 @@ _0807AD5C:
 	adds r0, r1, #0
 	bx lr
 	.align 2, 0
-_0807AD60: .4byte 0x0202BBF4
+_0807AD60: .4byte gPlaySt
 
 	thumb_func_start sub_0807AD64
 sub_0807AD64: @ 0x0807AD64
 	movs r1, #0
-	ldr r0, _0807AD74 @ =0x0202BBF4
+	ldr r0, _0807AD74 @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	cmp r0, #0
 	bne _0807AD70
@@ -198573,12 +198573,12 @@ _0807AD70:
 	adds r0, r1, #0
 	bx lr
 	.align 2, 0
-_0807AD74: .4byte 0x0202BBF4
+_0807AD74: .4byte gPlaySt
 
 	thumb_func_start sub_0807AD78
 sub_0807AD78: @ 0x0807AD78
 	movs r1, #0
-	ldr r0, _0807AD88 @ =0x0202BBF4
+	ldr r0, _0807AD88 @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	cmp r0, #0x80
 	bne _0807AD84
@@ -198587,7 +198587,7 @@ _0807AD84:
 	adds r0, r1, #0
 	bx lr
 	.align 2, 0
-_0807AD88: .4byte 0x0202BBF4
+_0807AD88: .4byte gPlaySt
 
 	thumb_func_start sub_0807AD8C
 sub_0807AD8C: @ 0x0807AD8C
@@ -198684,25 +198684,25 @@ _0807AE26:
 
 	thumb_func_start sub_0807AE2C
 sub_0807AE2C: @ 0x0807AE2C
-	ldr r0, _0807AE38 @ =0x0202BBF4
+	ldr r0, _0807AE38 @ =gPlaySt
 	adds r0, #0x2b
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1f
 	lsrs r0, r0, #0x1f
 	bx lr
 	.align 2, 0
-_0807AE38: .4byte 0x0202BBF4
+_0807AE38: .4byte gPlaySt
 
 	thumb_func_start sub_0807AE3C
 sub_0807AE3C: @ 0x0807AE3C
-	ldr r0, _0807AE48 @ =0x0202BBF4
+	ldr r0, _0807AE48 @ =gPlaySt
 	adds r0, #0x2c
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1f
 	lsrs r0, r0, #0x1f
 	bx lr
 	.align 2, 0
-_0807AE48: .4byte 0x0202BBF4
+_0807AE48: .4byte gPlaySt
 
 	thumb_func_start sub_0807AE4C
 sub_0807AE4C: @ 0x0807AE4C
@@ -198716,14 +198716,14 @@ sub_0807AE4C: @ 0x0807AE4C
 
 	thumb_func_start sub_0807AE5C
 sub_0807AE5C: @ 0x0807AE5C
-	ldr r0, _0807AE68 @ =0x0202BBF4
+	ldr r0, _0807AE68 @ =gPlaySt
 	adds r0, #0x42
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1a
 	lsrs r0, r0, #0x1f
 	bx lr
 	.align 2, 0
-_0807AE68: .4byte 0x0202BBF4
+_0807AE68: .4byte gPlaySt
 
 	thumb_func_start sub_0807AE6C
 sub_0807AE6C: @ 0x0807AE6C
@@ -198755,7 +198755,7 @@ _0807AE90:
 	thumb_func_start sub_0807AE94
 sub_0807AE94: @ 0x0807AE94
 	movs r1, #0
-	ldr r0, _0807AEA4 @ =0x0202BBF4
+	ldr r0, _0807AEA4 @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #3
 	bne _0807AEA0
@@ -198764,7 +198764,7 @@ _0807AEA0:
 	adds r0, r1, #0
 	bx lr
 	.align 2, 0
-_0807AEA4: .4byte 0x0202BBF4
+_0807AEA4: .4byte gPlaySt
 
 	thumb_func_start sub_0807AEA8
 sub_0807AEA8: @ 0x0807AEA8
@@ -198791,7 +198791,7 @@ sub_0807AEC4: @ 0x0807AEC4
 	thumb_func_start sub_0807AEC8
 sub_0807AEC8: @ 0x0807AEC8
 	push {lr}
-	ldr r1, _0807AEEC @ =0x0202BBF4
+	ldr r1, _0807AEEC @ =gPlaySt
 	movs r0, #8
 	ldrb r2, [r1, #0x14]
 	ands r0, r2
@@ -198810,11 +198810,11 @@ _0807AEE8:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0807AEEC: .4byte 0x0202BBF4
+_0807AEEC: .4byte gPlaySt
 
 	thumb_func_start sub_0807AEF0
 sub_0807AEF0: @ 0x0807AEF0
-	ldr r0, _0807AF08 @ =0x0202BBF4
+	ldr r0, _0807AF08 @ =gPlaySt
 	ldrb r1, [r0, #0x14]
 	movs r0, #0x80
 	ands r0, r1
@@ -198827,7 +198827,7 @@ sub_0807AEF0: @ 0x0807AEF0
 	movs r0, #0
 	b _0807AF0E
 	.align 2, 0
-_0807AF08: .4byte 0x0202BBF4
+_0807AF08: .4byte gPlaySt
 _0807AF0C:
 	movs r0, #1
 _0807AF0E:
@@ -199203,7 +199203,7 @@ sub_0807B1E0: @ 0x0807B1E0
 	lsls r0, r0, #0x18
 	cmp r0, #0
 	bne _0807B21A
-	ldr r0, _0807B220 @ =0x08BBFC7C
+	ldr r0, _0807B220 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x80
 	lsls r0, r0, #1
@@ -199221,7 +199221,7 @@ _0807B21A:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0807B220: .4byte 0x08BBFC7C
+_0807B220: .4byte gpKeySt
 _0807B224: .4byte 0x08D6F7B4
 
 	thumb_func_start sub_0807B228
@@ -199246,7 +199246,7 @@ _0807B248: .4byte 0x08D6F7D4
 	thumb_func_start sub_0807B24C
 sub_0807B24C: @ 0x0807B24C
 	push {r4, r5, r6, r7, lr}
-	bl sub_080307E4
+	bl GetPlayerLeaderUnitId
 	bl GetUnitFromCharId
 	adds r5, r0, #0
 	movs r7, #0x10
@@ -199826,7 +199826,7 @@ sub_0807B684: @ 0x0807B684
 _0807B69C:
 	movs r1, #0
 	bl sub_080045FC
-	ldr r0, _0807B6C0 @ =0x0202BBF4
+	ldr r0, _0807B6C0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -199840,7 +199840,7 @@ _0807B6B4:
 	bx r0
 	.align 2, 0
 _0807B6BC: .4byte 0x08D6F81C
-_0807B6C0: .4byte 0x0202BBF4
+_0807B6C0: .4byte gPlaySt
 _0807B6C4: .4byte 0x0000026A
 
 	thumb_func_start sub_0807B6C8
@@ -199852,7 +199852,7 @@ sub_0807B6C8: @ 0x0807B6C8
 	bl sub_08004584
 	cmp r0, #0
 	bne _0807B6F2
-	ldr r0, _0807B704 @ =0x0202BBF4
+	ldr r0, _0807B704 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -199872,7 +199872,7 @@ _0807B6F2:
 	bx r0
 	.align 2, 0
 _0807B700: .4byte 0x08D6F7EC
-_0807B704: .4byte 0x0202BBF4
+_0807B704: .4byte gPlaySt
 _0807B708: .4byte 0x0000026A
 
 	thumb_func_start sub_0807B70C
@@ -199884,7 +199884,7 @@ sub_0807B70C: @ 0x0807B70C
 	bl sub_08004584
 	cmp r0, #0
 	bne _0807B736
-	ldr r0, _0807B748 @ =0x0202BBF4
+	ldr r0, _0807B748 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -199904,7 +199904,7 @@ _0807B736:
 	bx r0
 	.align 2, 0
 _0807B744: .4byte 0x08D6F7EC
-_0807B748: .4byte 0x0202BBF4
+_0807B748: .4byte gPlaySt
 _0807B74C: .4byte 0x0000026A
 
 	thumb_func_start sub_0807B750
@@ -200063,7 +200063,7 @@ sub_0807B878: @ 0x0807B878
 	adds r1, r0, #0
 	ldr r0, _0807B898 @ =0x08D6F834
 	bl Proc_Start
-	ldr r0, _0807B89C @ =0x0202BBF4
+	ldr r0, _0807B89C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -200076,7 +200076,7 @@ _0807B894:
 	bx r0
 	.align 2, 0
 _0807B898: .4byte 0x08D6F834
-_0807B89C: .4byte 0x0202BBF4
+_0807B89C: .4byte gPlaySt
 _0807B8A0: .4byte 0x0000026A
 
 	thumb_func_start sub_0807B8A4
@@ -200711,7 +200711,7 @@ sub_0807BDC8: @ 0x0807BDC8
 	ands r1, r0
 	cmp r1, #0
 	bne _0807BDF4
-	ldr r0, _0807BDF8 @ =0x0202BBF4
+	ldr r0, _0807BDF8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -200723,7 +200723,7 @@ _0807BDF4:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0807BDF8: .4byte 0x0202BBF4
+_0807BDF8: .4byte gPlaySt
 
 	thumb_func_start sub_0807BDFC
 sub_0807BDFC: @ 0x0807BDFC
@@ -201085,7 +201085,7 @@ _0807C0D2:
 	bl sub_0807CDD4
 	str r6, [r4, #0xc]
 _0807C0E6:
-	ldr r0, _0807C104 @ =0x0202BBF4
+	ldr r0, _0807C104 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -201100,7 +201100,7 @@ _0807C0F8:
 	bx r0
 	.align 2, 0
 _0807C100: .4byte 0x02022C00
-_0807C104: .4byte 0x0202BBF4
+_0807C104: .4byte gPlaySt
 
 	thumb_func_start sub_0807C108
 sub_0807C108: @ 0x0807C108
@@ -201259,7 +201259,7 @@ sub_0807C228: @ 0x0807C228
 	ldr r0, [r4, #0x54]
 	cmp r0, #1
 	bne _0807C25C
-	ldr r0, _0807C288 @ =0x0202BBF4
+	ldr r0, _0807C288 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -201282,7 +201282,7 @@ _0807C25C:
 	ands r0, r1
 	cmp r0, #0
 	bne _0807C27E
-	ldr r0, _0807C288 @ =0x0202BBF4
+	ldr r0, _0807C288 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -201296,7 +201296,7 @@ _0807C27E:
 	pop {r1}
 	bx r1
 	.align 2, 0
-_0807C288: .4byte 0x0202BBF4
+_0807C288: .4byte gPlaySt
 
 	thumb_func_start sub_0807C28C
 sub_0807C28C: @ 0x0807C28C
@@ -201730,7 +201730,7 @@ _0807C5F6:
 	ldrh r4, [r4]
 	cmp r4, #0x10
 	bne _0807C60E
-	ldr r0, _0807C650 @ =0x0202BBF4
+	ldr r0, _0807C650 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -201769,7 +201769,7 @@ _0807C644:
 	bx r0
 	.align 2, 0
 _0807C64C: .4byte 0x03002790
-_0807C650: .4byte 0x0202BBF4
+_0807C650: .4byte gPlaySt
 _0807C654: .4byte 0x02022C60
 
 	thumb_func_start sub_0807C658
@@ -203212,7 +203212,7 @@ sub_0807D140: @ 0x0807D140
 	movs r2, #0
 	movs r3, #0
 	bl sub_080AB654
-	ldr r0, _0807D220 @ =0x0202BBF4
+	ldr r0, _0807D220 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -203231,7 +203231,7 @@ _0807D210: .4byte 0x0000FFE0
 _0807D214: .4byte 0x0000E0FF
 _0807D218: .4byte sub_08078098
 _0807D21C: .4byte 0x08DBABD0
-_0807D220: .4byte 0x0202BBF4
+_0807D220: .4byte gPlaySt
 _0807D224: .4byte 0x000002FA
 
 	thumb_func_start sub_0807D228
@@ -203461,7 +203461,7 @@ _0807D3DA:
 sub_0807D3E0: @ 0x0807D3E0
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _0807D3F8 @ =0x0202BBF4
+	ldr r0, _0807D3F8 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -203471,7 +203471,7 @@ sub_0807D3E0: @ 0x0807D3E0
 	beq _0807D40A
 	b _0807D416
 	.align 2, 0
-_0807D3F8: .4byte 0x0202BBF4
+_0807D3F8: .4byte gPlaySt
 _0807D3FC:
 	movs r0, #0x6a
 	bl sub_0807A0C8
@@ -203542,7 +203542,7 @@ sub_0807D478: @ 0x0807D478
 	movs r1, #2
 	movs r2, #1
 	bl sub_08007C88
-	ldr r4, _0807D4AC @ =0x0202BBF4
+	ldr r4, _0807D4AC @ =gPlaySt
 	ldrb r0, [r4, #0x1b]
 	cmp r0, #2
 	bne _0807D496
@@ -203563,7 +203563,7 @@ _0807D4A6:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0807D4AC: .4byte 0x0202BBF4
+_0807D4AC: .4byte gPlaySt
 _0807D4B0: .4byte 0x00000FBA
 _0807D4B4: .4byte 0x00000FBB
 
@@ -203646,7 +203646,7 @@ sub_0807D534: @ 0x0807D534
 	movs r0, #0x10
 	strb r0, [r1]
 	bl sub_08015A0C
-	ldr r1, _0807D594 @ =0x0202BBF4
+	ldr r1, _0807D594 @ =gPlaySt
 	movs r0, #0x80
 	ldrb r1, [r1, #0x14]
 	ands r0, r1
@@ -203668,7 +203668,7 @@ _0807D58A:
 	bx r0
 	.align 2, 0
 _0807D590: .4byte 0x03002790
-_0807D594: .4byte 0x0202BBF4
+_0807D594: .4byte gPlaySt
 _0807D598: .4byte 0x08D6FC14
 
 	thumb_func_start sub_0807D59C
@@ -203700,7 +203700,7 @@ sub_0807D5B0: @ 0x0807D5B0
 	movs r2, #0x11
 	movs r3, #4
 	bl sub_0804A4CC
-	ldr r0, _0807D650 @ =0x0202BBF4
+	ldr r0, _0807D650 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -203756,7 +203756,7 @@ _0807D5E8:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0807D650: .4byte 0x0202BBF4
+_0807D650: .4byte gPlaySt
 _0807D654: .4byte 0x0000037B
 _0807D658: .4byte 0x02022EA2
 _0807D65C: .4byte 0x084033A0
@@ -203775,7 +203775,7 @@ sub_0807D668: @ 0x0807D668
 	lsls r0, r0, #0x10
 	cmp r0, #0
 	beq _0807D68A
-	ldr r0, _0807D694 @ =0x08BBFC7C
+	ldr r0, _0807D694 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #3
 	ldrh r1, [r1, #8]
@@ -203789,7 +203789,7 @@ _0807D690:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0807D694: .4byte 0x08BBFC7C
+_0807D694: .4byte gpKeySt
 
 	thumb_func_start sub_0807D698
 sub_0807D698: @ 0x0807D698
@@ -203921,7 +203921,7 @@ sub_0807D6E0: @ 0x0807D6E0
 	strb r2, [r1, #0xa]
 	ldr r0, _0807D7C4 @ =sub_08077FB4
 	bl sub_08002DF0
-	ldr r0, _0807D7C8 @ =0x0202BBF4
+	ldr r0, _0807D7C8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -203941,7 +203941,7 @@ _0807D7AE:
 _0807D7BC: .4byte 0x030027CC
 _0807D7C0: .4byte 0x0000FFE0
 _0807D7C4: .4byte sub_08077FB4
-_0807D7C8: .4byte 0x0202BBF4
+_0807D7C8: .4byte gPlaySt
 _0807D7CC: .4byte 0x00000269
 
 	thumb_func_start sub_0807D7D0
@@ -204444,7 +204444,7 @@ _0807DB70:
 	bl GetUnitFromCharId
 	adds r4, r0, #0
 	adds r0, r5, #0
-	bl sub_080165F0
+	bl MakeNewItem
 	adds r1, r0, #0
 	adds r0, r4, #0
 	bl UnitAddItem
@@ -204495,7 +204495,7 @@ sub_0807DBC8: @ 0x0807DBC8
 	bl GetUnitFromCharId
 	adds r4, r0, #0
 	movs r0, #0x3e
-	bl sub_080165F0
+	bl MakeNewItem
 	adds r1, r0, #0
 	adds r0, r4, #0
 	bl UnitAddItem
@@ -204503,7 +204503,7 @@ sub_0807DBC8: @ 0x0807DBC8
 	bl GetUnitFromCharId
 	adds r4, r0, #0
 	movs r0, #0x6b
-	bl sub_080165F0
+	bl MakeNewItem
 	adds r1, r0, #0
 	adds r0, r4, #0
 	bl UnitAddItem
@@ -204511,7 +204511,7 @@ sub_0807DBC8: @ 0x0807DBC8
 	bl GetUnitFromCharId
 	adds r4, r0, #0
 	movs r0, #0x16
-	bl sub_080165F0
+	bl MakeNewItem
 	adds r1, r0, #0
 	adds r0, r4, #0
 	bl UnitAddItem
@@ -204519,7 +204519,7 @@ sub_0807DBC8: @ 0x0807DBC8
 	bl GetUnitFromCharId
 	adds r4, r0, #0
 	movs r0, #0x6b
-	bl sub_080165F0
+	bl MakeNewItem
 	adds r1, r0, #0
 	adds r0, r4, #0
 	bl UnitAddItem
@@ -204527,7 +204527,7 @@ sub_0807DBC8: @ 0x0807DBC8
 	bl GetUnitFromCharId
 	adds r4, r0, #0
 	movs r0, #0x16
-	bl sub_080165F0
+	bl MakeNewItem
 	adds r1, r0, #0
 	adds r0, r4, #0
 	bl UnitAddItem
@@ -204535,7 +204535,7 @@ sub_0807DBC8: @ 0x0807DBC8
 	bl GetUnitFromCharId
 	adds r4, r0, #0
 	movs r0, #0x6b
-	bl sub_080165F0
+	bl MakeNewItem
 	adds r1, r0, #0
 	adds r0, r4, #0
 	bl UnitAddItem
@@ -204543,7 +204543,7 @@ sub_0807DBC8: @ 0x0807DBC8
 	bl GetUnitFromCharId
 	adds r4, r0, #0
 	movs r0, #0x1c
-	bl sub_080165F0
+	bl MakeNewItem
 	adds r1, r0, #0
 	adds r0, r4, #0
 	bl UnitAddItem
@@ -204551,7 +204551,7 @@ sub_0807DBC8: @ 0x0807DBC8
 	bl GetUnitFromCharId
 	adds r4, r0, #0
 	movs r0, #0x6b
-	bl sub_080165F0
+	bl MakeNewItem
 	adds r1, r0, #0
 	adds r0, r4, #0
 	bl UnitAddItem
@@ -204829,7 +204829,7 @@ sub_0807DE6C: @ 0x0807DE6C
 	bl GetUnitFromCharId
 	movs r1, #6
 	movs r2, #2
-	bl GetUnitStatusName
+	bl SetUnitStatusExt
 	pop {r0}
 	bx r0
 
@@ -204865,7 +204865,7 @@ sub_0807DEA4: @ 0x0807DEA4
 	thumb_func_start sub_0807DEC0
 sub_0807DEC0: @ 0x0807DEC0
 	push {lr}
-	ldr r0, _0807DEEC @ =0x0202BBF4
+	ldr r0, _0807DEEC @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	cmp r0, #0
 	bne _0807DEE8
@@ -204886,7 +204886,7 @@ _0807DEE8:
 	movs r0, #0
 	b _0807DEF6
 	.align 2, 0
-_0807DEEC: .4byte 0x0202BBF4
+_0807DEEC: .4byte gPlaySt
 _0807DEF0: .4byte 0x030045B0
 _0807DEF4:
 	movs r0, #1
@@ -205523,7 +205523,7 @@ sub_0807E378: @ 0x0807E378
 	movs r2, #0xc
 	ldrsh r1, [r1, r2]
 	str r1, [r0, #0x2c]
-	ldr r0, _0807E3B4 @ =0x0202BBF4
+	ldr r0, _0807E3B4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -205537,7 +205537,7 @@ _0807E3A8:
 	.align 2, 0
 _0807E3AC: .4byte 0x08D837E8
 _0807E3B0: .4byte 0x0202BBB4
-_0807E3B4: .4byte 0x0202BBF4
+_0807E3B4: .4byte gPlaySt
 _0807E3B8: .4byte 0x0000026A
 
 	thumb_func_start sub_0807E3BC
@@ -205747,13 +205747,13 @@ sub_0807E540: @ 0x0807E540
 	ldr r0, _0807E564 @ =0x0203A3EC
 	ldr r0, [r0]
 	ldrb r4, [r0, #4]
-	bl sub_080307E4
+	bl GetPlayerLeaderUnitId
 	cmp r4, r0
 	beq _0807E56C
 	ldr r0, _0807E568 @ =0x0203A46C
 	ldr r0, [r0]
 	ldrb r4, [r0, #4]
-	bl sub_080307E4
+	bl GetPlayerLeaderUnitId
 	cmp r4, r0
 	beq _0807E56C
 	movs r0, #0
@@ -205994,7 +205994,7 @@ sub_0807E71C: @ 0x0807E71C
 	cmp r0, #0
 	beq _0807E730
 	bl sub_08026A24
-	bl sub_08012B98
+	bl EndEachSpriteAnimProc
 _0807E730:
 	pop {r0}
 	bx r0
@@ -206338,7 +206338,7 @@ sub_0807E9A4: @ 0x0807E9A4
 	bl GetUnitFromCharId
 	adds r4, r0, #0
 	movs r0, #0x8c
-	bl sub_080165F0
+	bl MakeNewItem
 	adds r1, r0, #0
 	adds r0, r4, #0
 	bl UnitAddItem
@@ -206587,7 +206587,7 @@ sub_0807EB80: @ 0x0807EB80
 	thumb_func_start sub_0807EB9C
 sub_0807EB9C: @ 0x0807EB9C
 	push {lr}
-	ldr r0, _0807EBC0 @ =0x0202BBF4
+	ldr r0, _0807EBC0 @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #3
 	bne _0807EBC4
@@ -206603,7 +206603,7 @@ sub_0807EB9C: @ 0x0807EB9C
 	movs r0, #1
 	b _0807EBC6
 	.align 2, 0
-_0807EBC0: .4byte 0x0202BBF4
+_0807EBC0: .4byte gPlaySt
 _0807EBC4:
 	movs r0, #0
 _0807EBC6:
@@ -206692,7 +206692,7 @@ sub_0807EC58: @ 0x0807EC58
 	ldr r0, _0807EC7C @ =0x084033F4
 	ldm r0!, {r3, r4, r5}
 	stm r1!, {r3, r4, r5}
-	ldr r0, _0807EC80 @ =0x0202BBF4
+	ldr r0, _0807EC80 @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #3
 	bne _0807EC84
@@ -206704,7 +206704,7 @@ sub_0807EC58: @ 0x0807EC58
 	b _0807EC8E
 	.align 2, 0
 _0807EC7C: .4byte 0x084033F4
-_0807EC80: .4byte 0x0202BBF4
+_0807EC80: .4byte gPlaySt
 _0807EC84:
 	movs r0, #1
 	str r0, [sp, #0x10]
@@ -206805,7 +206805,7 @@ sub_0807ECD4: @ 0x0807ECD4
 	movs r0, #0x26
 	movs r1, #0
 	bl sub_080123C8
-	ldr r1, _0807ED88 @ =0x0202BBF4
+	ldr r1, _0807ED88 @ =gPlaySt
 	adds r1, #0x2b
 	movs r4, #1
 	adds r0, r4, #0
@@ -206839,7 +206839,7 @@ _0807ED7C:
 	bx r0
 	.align 2, 0
 _0807ED84: .4byte 0x08403400
-_0807ED88: .4byte 0x0202BBF4
+_0807ED88: .4byte gPlaySt
 
 	thumb_func_start sub_0807ED8C
 sub_0807ED8C: @ 0x0807ED8C
@@ -207031,7 +207031,7 @@ sub_0807EED8: @ 0x0807EED8
 	ands r0, r1
 	cmp r0, #0
 	bne _0807EF52
-	ldr r0, _0807EF10 @ =0x0202BBF4
+	ldr r0, _0807EF10 @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #3
 	bne _0807EF14
@@ -207043,7 +207043,7 @@ sub_0807EED8: @ 0x0807EED8
 	b _0807EF1E
 	.align 2, 0
 _0807EF0C: .4byte 0x08403428
-_0807EF10: .4byte 0x0202BBF4
+_0807EF10: .4byte gPlaySt
 _0807EF14:
 	movs r0, #1
 	str r0, [sp, #0x10]
@@ -207411,7 +207411,7 @@ _0807F240:
 	ldr r0, [r4]
 	cmp r0, #0
 	beq _0807F24A
-	bl sub_08012B8C
+	bl EndSpriteAnimProc
 _0807F24A:
 	adds r4, #4
 	subs r5, #1
@@ -207618,7 +207618,7 @@ _0807F3AC:
 	lsls r0, r0, #0x18
 	cmp r0, #0
 	bne _0807F3DE
-	ldr r0, _0807F3F8 @ =0x0202BBF4
+	ldr r0, _0807F3F8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -207639,7 +207639,7 @@ _0807F3DE:
 	.align 2, 0
 _0807F3F0: .4byte 0x0202BBB4
 _0807F3F4: .4byte 0x000001FF
-_0807F3F8: .4byte 0x0202BBF4
+_0807F3F8: .4byte gPlaySt
 
 	thumb_func_start sub_0807F3FC
 sub_0807F3FC: @ 0x0807F3FC
@@ -207828,7 +207828,7 @@ sub_0807F550: @ 0x0807F550
 	ldr r0, [r5]
 	cmp r0, #0
 	beq _0807F580
-	bl sub_08012B8C
+	bl EndSpriteAnimProc
 	lsls r1, r6, #1
 	adds r0, r4, #0
 	adds r0, #0x38
@@ -208088,7 +208088,7 @@ sub_0807F738: @ 0x0807F738
 sub_0807F758: @ 0x0807F758
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _0807F784 @ =0x0202BBF4
+	ldr r0, _0807F784 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -208107,14 +208107,14 @@ _0807F76E:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0807F784: .4byte 0x0202BBF4
+_0807F784: .4byte gPlaySt
 _0807F788: .4byte 0x000002FB
 
 	thumb_func_start sub_0807F78C
 sub_0807F78C: @ 0x0807F78C
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _0807F7B8 @ =0x0202BBF4
+	ldr r0, _0807F7B8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -208133,7 +208133,7 @@ _0807F7A4:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0807F7B8: .4byte 0x0202BBF4
+_0807F7B8: .4byte gPlaySt
 
 	thumb_func_start sub_0807F7BC
 sub_0807F7BC: @ 0x0807F7BC
@@ -208453,7 +208453,7 @@ sub_0807F9EC: @ 0x0807F9EC
 	bl sub_0807F590
 	adds r5, #0x4c
 	strh r4, [r5]
-	ldr r0, _0807FA60 @ =0x0202BBF4
+	ldr r0, _0807FA60 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -208469,7 +208469,7 @@ _0807FA4C:
 _0807FA54: .4byte 0x03002790
 _0807FA58: .4byte 0x0000FFE0
 _0807FA5C: .4byte 0x0000E0FF
-_0807FA60: .4byte 0x0202BBF4
+_0807FA60: .4byte gPlaySt
 
 	thumb_func_start sub_0807FA64
 sub_0807FA64: @ 0x0807FA64
@@ -208586,7 +208586,7 @@ sub_0807FB34: @ 0x0807FB34
 
 	thumb_func_start sub_0807FB40
 sub_0807FB40: @ 0x0807FB40
-	ldr r0, _0807FB50 @ =0x08BBFC7C
+	ldr r0, _0807FB50 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #8
 	ldrb r1, [r1, #4]
@@ -208595,11 +208595,11 @@ sub_0807FB40: @ 0x0807FB40
 	asrs r0, r0, #0x18
 	bx lr
 	.align 2, 0
-_0807FB50: .4byte 0x08BBFC7C
+_0807FB50: .4byte gpKeySt
 
 	thumb_func_start sub_0807FB54
 sub_0807FB54: @ 0x0807FB54
-	ldr r0, _0807FB64 @ =0x08BBFC7C
+	ldr r0, _0807FB64 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #4
 	ldrb r1, [r1, #4]
@@ -208608,7 +208608,7 @@ sub_0807FB54: @ 0x0807FB54
 	asrs r0, r0, #0x18
 	bx lr
 	.align 2, 0
-_0807FB64: .4byte 0x08BBFC7C
+_0807FB64: .4byte gpKeySt
 
 	thumb_func_start sub_0807FB68
 sub_0807FB68: @ 0x0807FB68
@@ -208617,7 +208617,7 @@ sub_0807FB68: @ 0x0807FB68
 
 	thumb_func_start sub_0807FB6C
 sub_0807FB6C: @ 0x0807FB6C
-	ldr r0, _0807FB7C @ =0x08BBFC7C
+	ldr r0, _0807FB7C @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #2
 	ldrb r1, [r1, #4]
@@ -208626,7 +208626,7 @@ sub_0807FB6C: @ 0x0807FB6C
 	asrs r0, r0, #0x18
 	bx lr
 	.align 2, 0
-_0807FB7C: .4byte 0x08BBFC7C
+_0807FB7C: .4byte gpKeySt
 
 	thumb_func_start sub_0807FB80
 sub_0807FB80: @ 0x0807FB80
@@ -208684,7 +208684,7 @@ _0807FBE4: .4byte 0x0000FFFF
 
 	thumb_func_start sub_0807FBE8
 sub_0807FBE8: @ 0x0807FBE8
-	ldr r0, _0807FBFC @ =0x08BBFC7C
+	ldr r0, _0807FBFC @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #1
 	ldrh r1, [r1, #8]
@@ -208694,7 +208694,7 @@ sub_0807FBE8: @ 0x0807FBE8
 	movs r0, #1
 	b _0807FC02
 	.align 2, 0
-_0807FBFC: .4byte 0x08BBFC7C
+_0807FBFC: .4byte gpKeySt
 _0807FC00:
 	movs r0, #0
 _0807FC02:
@@ -208772,7 +208772,7 @@ _0807FC6E:
 	thumb_func_start sub_0807FC74
 sub_0807FC74: @ 0x0807FC74
 	movs r1, #0
-	ldr r0, _0807FC84 @ =0x0202BBF4
+	ldr r0, _0807FC84 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	cmp r0, #4
 	bne _0807FC80
@@ -208781,12 +208781,12 @@ _0807FC80:
 	adds r0, r1, #0
 	bx lr
 	.align 2, 0
-_0807FC84: .4byte 0x0202BBF4
+_0807FC84: .4byte gPlaySt
 
 	thumb_func_start sub_0807FC88
 sub_0807FC88: @ 0x0807FC88
 	movs r1, #0
-	ldr r0, _0807FC98 @ =0x0202BBF4
+	ldr r0, _0807FC98 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	cmp r0, #5
 	bne _0807FC94
@@ -208795,12 +208795,12 @@ _0807FC94:
 	adds r0, r1, #0
 	bx lr
 	.align 2, 0
-_0807FC98: .4byte 0x0202BBF4
+_0807FC98: .4byte gPlaySt
 
 	thumb_func_start sub_0807FC9C
 sub_0807FC9C: @ 0x0807FC9C
 	movs r1, #0
-	ldr r0, _0807FCAC @ =0x0202BBF4
+	ldr r0, _0807FCAC @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	cmp r0, #6
 	bne _0807FCA8
@@ -208809,12 +208809,12 @@ _0807FCA8:
 	adds r0, r1, #0
 	bx lr
 	.align 2, 0
-_0807FCAC: .4byte 0x0202BBF4
+_0807FCAC: .4byte gPlaySt
 
 	thumb_func_start sub_0807FCB0
 sub_0807FCB0: @ 0x0807FCB0
 	movs r1, #0
-	ldr r0, _0807FCC0 @ =0x0202BBF4
+	ldr r0, _0807FCC0 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	cmp r0, #0x26
 	bne _0807FCBC
@@ -208823,7 +208823,7 @@ _0807FCBC:
 	adds r0, r1, #0
 	bx lr
 	.align 2, 0
-_0807FCC0: .4byte 0x0202BBF4
+_0807FCC0: .4byte gPlaySt
 
 	thumb_func_start sub_0807FCC4
 sub_0807FCC4: @ 0x0807FCC4
@@ -208954,7 +208954,7 @@ sub_0807FD9C: @ 0x0807FD9C
 	push {r7}
 	movs r7, #0
 	movs r6, #1
-	ldr r0, _0807FDE4 @ =0x0202BBF4
+	ldr r0, _0807FDE4 @ =gPlaySt
 	bl sub_080A05A0
 	bl sub_080B7880
 	bl sub_080A0054
@@ -208981,7 +208981,7 @@ _0807FDBA:
 	ldr r0, [r4]
 	b _0807FE52
 	.align 2, 0
-_0807FDE4: .4byte 0x0202BBF4
+_0807FDE4: .4byte gPlaySt
 _0807FDE8: .4byte 0x08D68388
 _0807FDEC:
 	ldrb r0, [r5, #1]
@@ -209050,7 +209050,7 @@ _0807FE64:
 	cmp r5, #0x3f
 	ble _0807FDBA
 	bl ClearPidStats_ret
-	ldr r1, _0807FE88 @ =0x0202BBF4
+	ldr r1, _0807FE88 @ =gPlaySt
 	movs r0, #0xc
 	strb r0, [r1, #0xe]
 	bl sub_0802E8A0
@@ -209061,12 +209061,12 @@ _0807FE64:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0807FE88: .4byte 0x0202BBF4
+_0807FE88: .4byte gPlaySt
 
 	thumb_func_start sub_0807FE8C
 sub_0807FE8C: @ 0x0807FE8C
 	push {r4, lr}
-	ldr r4, _0807FE9C @ =0x0202BBF4
+	ldr r4, _0807FE9C @ =gPlaySt
 	ldrb r0, [r4, #0x1b]
 	cmp r0, #2
 	beq _0807FEA0
@@ -209074,7 +209074,7 @@ sub_0807FE8C: @ 0x0807FE8C
 	beq _0807FEAA
 	b _0807FEB4
 	.align 2, 0
-_0807FE9C: .4byte 0x0202BBF4
+_0807FE9C: .4byte gPlaySt
 _0807FEA0:
 	movs r0, #0xc
 	bl sub_08013214
@@ -210352,7 +210352,7 @@ sub_08080848: @ 0x08080848
 	bl sub_080017E8
 	ldr r4, [r7, #0xc]
 	adds r0, r4, #0
-	bl sub_08016BF4
+	bl GetUnitEquippedWeaponSlot
 	adds r1, r0, #0
 	lsls r1, r1, #0x18
 	asrs r1, r1, #0x18
@@ -210500,7 +210500,7 @@ sub_080809AC: @ 0x080809AC
 	ands r0, r1
 	cmp r0, #0
 	bne _08080A6A
-	ldr r0, _08080A78 @ =0x0202BBF4
+	ldr r0, _08080A78 @ =gPlaySt
 	ldrb r1, [r0, #0x14]
 	movs r0, #8
 	ands r0, r1
@@ -210576,7 +210576,7 @@ _08080A6A:
 	.align 2, 0
 _08080A70: .4byte 0x0200310C
 _08080A74: .4byte 0x0202BBB4
-_08080A78: .4byte 0x0202BBF4
+_08080A78: .4byte gPlaySt
 _08080A7C: .4byte 0x0841CD78
 _08080A80: .4byte 0x0841CD7C
 _08080A84: .4byte 0x0841CD80
@@ -211076,7 +211076,7 @@ _08080E9A:
 _08080EC2:
 	ldr r7, _08080F94 @ =0x0200310C
 	ldr r0, [r7, #0xc]
-	bl sub_08016BF4
+	bl GetUnitEquippedWeaponSlot
 	adds r4, r0, #0
 	movs r5, #0
 	cmp r4, #0
@@ -211766,7 +211766,7 @@ sub_08081458: @ 0x08081458
 	adds r4, r0, #0
 	cmp r4, #0
 	bne _080814A8
-	ldr r0, _080814B8 @ =0x0202BBF4
+	ldr r0, _080814B8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -211799,7 +211799,7 @@ _080814A8:
 	bx r0
 	.align 2, 0
 _080814B4: .4byte 0x08D8A368
-_080814B8: .4byte 0x0202BBF4
+_080814B8: .4byte gPlaySt
 _080814BC: .4byte 0x0000038F
 _080814C0: .4byte 0x0200310C
 
@@ -212173,7 +212173,7 @@ sub_0808178C: @ 0x0808178C
 	adds r2, #0x4a
 	strh r1, [r2]
 	str r5, [r0, #0x38]
-	ldr r0, _080817C4 @ =0x0202BBF4
+	ldr r0, _080817C4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -212187,7 +212187,7 @@ _080817B8:
 	bx r0
 	.align 2, 0
 _080817C0: .4byte 0x08D8A380
-_080817C4: .4byte 0x0202BBF4
+_080817C4: .4byte gPlaySt
 
 	thumb_func_start sub_080817C8
 sub_080817C8: @ 0x080817C8
@@ -213141,7 +213141,7 @@ _08081FD4: .4byte 0x02023CF8
 sub_08081FD8: @ 0x08081FD8
 	push {r4, r5, r6, lr}
 	adds r5, r0, #0
-	ldr r1, _08082060 @ =0x08BBFC7C
+	ldr r1, _08082060 @ =gpKeySt
 	ldr r2, [r1]
 	movs r0, #2
 	ldrh r3, [r2, #8]
@@ -213193,7 +213193,7 @@ sub_08081FD8: @ 0x08081FD8
 	bl sub_08001034
 	adds r0, r5, #0
 	bl sub_0800457C
-	ldr r0, _08082070 @ =0x0202BBF4
+	ldr r0, _08082070 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -213205,11 +213205,11 @@ _08082056:
 	bl m4aSongNumStart
 	b _0808215C
 	.align 2, 0
-_08082060: .4byte 0x08BBFC7C
+_08082060: .4byte gpKeySt
 _08082064: .4byte 0x03002790
 _08082068: .4byte 0x0000FFE0
 _0808206C: .4byte 0x02022860
-_08082070: .4byte 0x0202BBF4
+_08082070: .4byte gPlaySt
 _08082074: .4byte 0x0000038B
 _08082078:
 	ldrh r1, [r2, #6]
@@ -213333,7 +213333,7 @@ _08082164: .4byte 0x0200310C
 	thumb_func_start sub_08082168
 sub_08082168: @ 0x08082168
 	push {r4, lr}
-	ldr r3, _08082194 @ =0x0202BBF4
+	ldr r3, _08082194 @ =gPlaySt
 	movs r1, #0xfc
 	ldrb r0, [r3, #0x14]
 	ands r1, r0
@@ -213353,7 +213353,7 @@ sub_08082168: @ 0x08082168
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08082194: .4byte 0x0202BBF4
+_08082194: .4byte gPlaySt
 _08082198: .4byte 0x0200310C
 _0808219C: .4byte 0x0203E648
 
@@ -213412,7 +213412,7 @@ sub_080821F8: @ 0x080821F8
 	movs r3, #0
 	strh r3, [r2, #4]
 	strh r3, [r2, #6]
-	ldr r4, _08082244 @ =0x0202BBF4
+	ldr r4, _08082244 @ =gPlaySt
 	movs r1, #3
 	ldrb r7, [r4, #0x14]
 	ands r1, r7
@@ -213440,7 +213440,7 @@ _08082230:
 	bx r0
 	.align 2, 0
 _08082240: .4byte 0x0200310C
-_08082244: .4byte 0x0202BBF4
+_08082244: .4byte gPlaySt
 _08082248: .4byte 0x0000038A
 _0808224C: .4byte 0x08D8A530
 
@@ -213891,7 +213891,7 @@ _08082596:
 	ldrb r0, [r0]
 	cmp r0, #0
 	bne _080825B4
-	ldr r0, _080825C0 @ =0x0202BBF4
+	ldr r0, _080825C0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -213906,7 +213906,7 @@ _080825B4:
 	bx r0
 	.align 2, 0
 _080825BC: .4byte 0x08D8A660
-_080825C0: .4byte 0x0202BBF4
+_080825C0: .4byte gPlaySt
 
 	thumb_func_start sub_080825C4
 sub_080825C4: @ 0x080825C4
@@ -213949,7 +213949,7 @@ _08082602:
 	ldrb r0, [r0]
 	cmp r0, #0
 	bne _08082630
-	ldr r0, _0808263C @ =0x0202BBF4
+	ldr r0, _0808263C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -213971,7 +213971,7 @@ _08082630:
 	bx r0
 	.align 2, 0
 _08082638: .4byte 0x08D8A660
-_0808263C: .4byte 0x0202BBF4
+_0808263C: .4byte gPlaySt
 _08082640: .4byte 0x00000391
 
 	thumb_func_start sub_08082644
@@ -214342,7 +214342,7 @@ sub_08082914: @ 0x08082914
 	ldrb r2, [r2, #0x11]
 	adds r1, r2, r1
 	bl sub_0804A740
-	ldr r6, _080829B0 @ =0x08BBFC7C
+	ldr r6, _080829B0 @ =gpKeySt
 	ldr r1, [r6]
 	movs r0, #0x40
 	ldrh r1, [r1, #6]
@@ -214402,11 +214402,11 @@ _08082996:
 	b _080829D2
 	.align 2, 0
 _080829AC: .4byte 0x0203E66C
-_080829B0: .4byte 0x08BBFC7C
+_080829B0: .4byte gpKeySt
 _080829B4:
 	cmp r4, #0
 	beq _080829D2
-	ldr r0, _080829D8 @ =0x0202BBF4
+	ldr r0, _080829D8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -214423,7 +214423,7 @@ _080829D2:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080829D8: .4byte 0x0202BBF4
+_080829D8: .4byte gPlaySt
 _080829DC: .4byte 0x00000387
 
 	thumb_func_start sub_080829E0
@@ -214508,7 +214508,7 @@ _08082A6E:
 	movs r4, #0x60
 	b _08082A88
 _08082A76:
-	ldr r0, _08082A9C @ =0x0202BBF4
+	ldr r0, _08082A9C @ =gPlaySt
 	adds r0, #0x2b
 	movs r1, #1
 	ldrb r0, [r0]
@@ -214529,7 +214529,7 @@ _08082A8A:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08082A9C: .4byte 0x0202BBF4
+_08082A9C: .4byte gPlaySt
 
 	thumb_func_start sub_08082AA0
 sub_08082AA0: @ 0x08082AA0
@@ -214830,7 +214830,7 @@ _08082C9E:
 sub_08082CA4: @ 0x08082CA4
 	push {lr}
 	adds r2, r0, #0
-	ldr r0, _08082CC4 @ =0x08BBFC7C
+	ldr r0, _08082CC4 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x81
 	lsls r0, r0, #1
@@ -214844,7 +214844,7 @@ _08082CBE:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08082CC4: .4byte 0x08BBFC7C
+_08082CC4: .4byte gpKeySt
 
 	thumb_func_start sub_08082CC8
 sub_08082CC8: @ 0x08082CC8
@@ -215722,7 +215722,7 @@ _080833B0: .4byte 0x0841D06C
 	thumb_func_start sub_080833B4
 sub_080833B4: @ 0x080833B4
 	push {r4, lr}
-	ldr r1, _080833EC @ =0x0202BBF4
+	ldr r1, _080833EC @ =gPlaySt
 	adds r1, #0x2b
 	movs r0, #1
 	ldrb r1, [r1]
@@ -215747,7 +215747,7 @@ sub_080833B4: @ 0x080833B4
 	bl sub_080059DC
 	b _0808340C
 	.align 2, 0
-_080833EC: .4byte 0x0202BBF4
+_080833EC: .4byte gPlaySt
 _080833F0: .4byte 0x0203E690
 _080833F4: .4byte 0x0841D098
 _080833F8: .4byte 0x0841D0A0
@@ -215769,7 +215769,7 @@ _08083418: .4byte 0x0841D0B0
 	thumb_func_start sub_0808341C
 sub_0808341C: @ 0x0808341C
 	push {r4, r5, r6, r7, lr}
-	ldr r7, _08083464 @ =0x0202BBF4
+	ldr r7, _08083464 @ =gPlaySt
 	adds r5, r7, #0
 	adds r5, #0x2b
 	movs r0, #1
@@ -215801,7 +215801,7 @@ sub_0808341C: @ 0x0808341C
 	bl sub_080059DC
 	b _080834C8
 	.align 2, 0
-_08083464: .4byte 0x0202BBF4
+_08083464: .4byte gPlaySt
 _08083468: .4byte 0x0203E690
 _0808346C: .4byte 0x0841D0BC
 _08083470: .4byte 0x0841D0C0
@@ -216146,7 +216146,7 @@ sub_0808368C: @ 0x0808368C
 	adds r0, r4, #0
 	adds r0, #0x5e
 	strh r5, [r0]
-	ldr r0, _0808373C @ =0x0202BBF4
+	ldr r0, _0808373C @ =gPlaySt
 	adds r0, #0x40
 	ldrb r0, [r0]
 	lsls r0, r0, #0x19
@@ -216161,7 +216161,7 @@ sub_0808368C: @ 0x0808368C
 	.align 2, 0
 _08083734: .4byte 0x0203E678
 _08083738: .4byte 0x08D8AF34
-_0808373C: .4byte 0x0202BBF4
+_0808373C: .4byte gPlaySt
 _08083740:
 	cmp r2, #2
 	beq _0808375A
@@ -216347,7 +216347,7 @@ sub_08083880: @ 0x08083880
 	movs r1, #3
 	bl Proc_Start
 	adds r5, r0, #0
-	ldr r0, _080838C8 @ =0x0202BBF4
+	ldr r0, _080838C8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -216366,7 +216366,7 @@ _080838B2:
 	b _080838E8
 	.align 2, 0
 _080838C4: .4byte 0x08D8AF84
-_080838C8: .4byte 0x0202BBF4
+_080838C8: .4byte gPlaySt
 _080838CC:
 	ldrh r0, [r5, #0x30]
 	strh r0, [r5, #0x38]
@@ -216430,7 +216430,7 @@ _0808394C: .4byte 0x0203E6C8
 	thumb_func_start sub_08083950
 sub_08083950: @ 0x08083950
 	push {lr}
-	ldr r0, _08083974 @ =0x0202BBF4
+	ldr r0, _08083974 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -216445,7 +216445,7 @@ _08083964:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08083974: .4byte 0x0202BBF4
+_08083974: .4byte gPlaySt
 _08083978: .4byte 0x00000391
 _0808397C: .4byte 0x08D8AF84
 
@@ -216473,7 +216473,7 @@ _08083998:
 sub_080839A4: @ 0x080839A4
 	push {lr}
 	adds r2, r0, #0
-	ldr r0, _080839C0 @ =0x08BBFC7C
+	ldr r0, _080839C0 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #1
 	ldrh r1, [r1, #8]
@@ -216486,7 +216486,7 @@ _080839BC:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080839C0: .4byte 0x08BBFC7C
+_080839C0: .4byte gpKeySt
 
 	thumb_func_start sub_080839C4
 sub_080839C4: @ 0x080839C4
@@ -216696,7 +216696,7 @@ _08083B22:
 sub_08083B28: @ 0x08083B28
 	push {lr}
 	adds r2, r0, #0
-	ldr r0, _08083B44 @ =0x08BBFC7C
+	ldr r0, _08083B44 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #1
 	ldrh r1, [r1, #8]
@@ -216709,7 +216709,7 @@ _08083B40:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08083B44: .4byte 0x08BBFC7C
+_08083B44: .4byte gpKeySt
 
 	thumb_func_start sub_08083B48
 sub_08083B48: @ 0x08083B48
@@ -216996,7 +216996,7 @@ _08083D60:
 	ands r1, r0
 	cmp r1, #0
 	beq _08083D90
-	ldr r0, _08083DA4 @ =0x0202BBF4
+	ldr r0, _08083DA4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -217012,7 +217012,7 @@ _08083D90:
 _08083D98: .4byte 0x0203E6E4
 _08083D9C: .4byte 0x081901C8
 _08083DA0: .4byte 0x0203E6CC
-_08083DA4: .4byte 0x0202BBF4
+_08083DA4: .4byte gPlaySt
 _08083DA8: .4byte 0x000002E6
 
 	thumb_func_start sub_08083DAC
@@ -217137,7 +217137,7 @@ sub_08083E78: @ 0x08083E78
 	ands r1, r0
 	cmp r1, #0
 	bne _08083E9E
-	ldr r0, _08083EA4 @ =0x08BBFC7C
+	ldr r0, _08083EA4 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0xa
 	ldrh r1, [r1, #8]
@@ -217152,7 +217152,7 @@ _08083E9E:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08083EA4: .4byte 0x08BBFC7C
+_08083EA4: .4byte gpKeySt
 
 	thumb_func_start sub_08083EA8
 sub_08083EA8: @ 0x08083EA8
@@ -217162,7 +217162,7 @@ sub_08083EA8: @ 0x08083EA8
 	ands r1, r0
 	cmp r1, #0
 	beq _08083EC8
-	ldr r0, _08083ED8 @ =0x0202BBF4
+	ldr r0, _08083ED8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -217177,7 +217177,7 @@ _08083EC8:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08083ED8: .4byte 0x0202BBF4
+_08083ED8: .4byte gPlaySt
 _08083EDC: .4byte 0x000002E7
 
 	thumb_func_start sub_08083EE0
@@ -218247,7 +218247,7 @@ sub_080846E4: @ 0x080846E4
 	movs r2, #0
 	ldrsh r1, [r0, r2]
 	mov r8, r1
-	ldr r0, _08084718 @ =0x08BBFC7C
+	ldr r0, _08084718 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0xf3
 	ldrh r1, [r1, #8]
@@ -218263,7 +218263,7 @@ sub_080846E4: @ 0x080846E4
 	mov r8, r3
 	b _08084780
 	.align 2, 0
-_08084718: .4byte 0x08BBFC7C
+_08084718: .4byte gpKeySt
 _0808471C:
 	bl sub_08084640
 	ldr r0, _0808473C @ =0x08D8AFEC
@@ -218825,7 +218825,7 @@ _08084C90:
 	ands r1, r0
 	cmp r1, #0
 	beq _08084CB8
-	ldr r0, _08084CB0 @ =0x0202BBF4
+	ldr r0, _08084CB0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -218835,10 +218835,10 @@ _08084C90:
 	bl m4aSongNumStart
 	b _08084CCA
 	.align 2, 0
-_08084CB0: .4byte 0x0202BBF4
+_08084CB0: .4byte gPlaySt
 _08084CB4: .4byte 0x000002E5
 _08084CB8:
-	ldr r0, _08084CE4 @ =0x0202BBF4
+	ldr r0, _08084CE4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -218862,7 +218862,7 @@ _08084CD8:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08084CE4: .4byte 0x0202BBF4
+_08084CE4: .4byte gPlaySt
 _08084CE8: .4byte 0x0000038E
 
 	thumb_func_start sub_08084CEC
@@ -221936,7 +221936,7 @@ sub_080864DC: @ 0x080864DC
 	movs r1, #2
 	bl sub_08004C20
 	bl sub_08005308
-	ldr r4, _08086604 @ =0x0202BBF4
+	ldr r4, _08086604 @ =gPlaySt
 	adds r0, r4, #0
 	adds r0, #0x40
 	ldrb r0, [r0]
@@ -221968,7 +221968,7 @@ _080865F4: .4byte 0x06015C00
 _080865F8: .4byte 0x06002EA0
 _080865FC: .4byte 0x06015D40
 _08086600: .4byte 0x02022860
-_08086604: .4byte 0x0202BBF4
+_08086604: .4byte gPlaySt
 _08086608: .4byte 0x08D8B1A0
 _0808660C: .4byte 0x0202BBB4
 _08086610: .4byte 0x08D8B338
@@ -221983,7 +221983,7 @@ _08086614:
 	movs r1, #3
 	bl Proc_Start
 _08086628:
-	ldr r0, _0808665C @ =0x0202BBF4
+	ldr r0, _0808665C @ =gPlaySt
 	adds r4, r0, #0
 	adds r4, #0x40
 	ldrb r1, [r4]
@@ -222009,7 +222009,7 @@ _08086652:
 	bx r0
 	.align 2, 0
 _08086658: .4byte 0x08D8B2D8
-_0808665C: .4byte 0x0202BBF4
+_0808665C: .4byte gPlaySt
 _08086660: .4byte 0x08D8B200
 _08086664: .4byte 0x08D8B288
 
@@ -222220,7 +222220,7 @@ sub_080867D8: @ 0x080867D8
 	bl sub_080053B0
 	adds r0, r4, #0
 	bl sub_080053B0
-	ldr r6, _08086860 @ =0x0202BBF4
+	ldr r6, _08086860 @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r6, r0]
 	bl sub_08031A5C
@@ -222251,7 +222251,7 @@ _08086854:
 	ldr r0, [r0]
 	mov pc, r0
 	.align 2, 0
-_08086860: .4byte 0x0202BBF4
+_08086860: .4byte gPlaySt
 _08086864: .4byte _08086868
 _08086868: @ jump table
 	.4byte _0808687C @ case 0
@@ -222272,7 +222272,7 @@ _08086884:
 	movs r1, #0x14
 	movs r2, #0
 	bl sub_080059DC
-	ldr r0, _080868B0 @ =0x0202BBF4
+	ldr r0, _080868B0 @ =gPlaySt
 	ldrb r0, [r0, #0xd]
 	cmp r0, #0
 	beq _080868B8
@@ -222284,7 +222284,7 @@ _08086884:
 	b _08086948
 	.align 2, 0
 _080868AC: .4byte 0x0841D0CC
-_080868B0: .4byte 0x0202BBF4
+_080868B0: .4byte gPlaySt
 _080868B4: .4byte 0x0841D0D4
 _080868B8:
 	movs r0, #0x80
@@ -222296,7 +222296,7 @@ _080868B8:
 	bl sub_08005A00
 	b _08086948
 _080868CC:
-	ldr r5, _08086900 @ =0x0202BBF4
+	ldr r5, _08086900 @ =gPlaySt
 	ldrh r4, [r5, #0x10]
 	movs r0, #0xe
 	ldrsb r0, [r5, r0]
@@ -222319,7 +222319,7 @@ _080868CC:
 	bl sub_080059DC
 	b _08086948
 	.align 2, 0
-_08086900: .4byte 0x0202BBF4
+_08086900: .4byte gPlaySt
 _08086904: .4byte 0x0841D0DC
 _08086908:
 	adds r4, r7, #0
@@ -223221,7 +223221,7 @@ _08087024: .4byte 0x03007FF8
 	thumb_func_start sub_08087028
 sub_08087028: @ 0x08087028
 	push {r4, lr}
-	ldr r4, _08087050 @ =0x08BBFC7C
+	ldr r4, _08087050 @ =gpKeySt
 	ldr r0, [r4]
 	bl sub_08001BA0
 	ldr r1, [r4]
@@ -223238,7 +223238,7 @@ _08087044:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08087050: .4byte 0x08BBFC7C
+_08087050: .4byte gpKeySt
 
 	thumb_func_start sub_08087054
 sub_08087054: @ 0x08087054
@@ -223370,7 +223370,7 @@ sub_080870E8: @ 0x080870E8
 	adds r2, r5, #0
 	bl CpuFastSet
 	bl sub_08087054
-	ldr r0, _080871A4 @ =0x0202BBF4
+	ldr r0, _080871A4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -223389,7 +223389,7 @@ _08087188:
 _08087198: .4byte 0x03002790
 _0808719C: .4byte 0x01000008
 _080871A0: .4byte 0x06008000
-_080871A4: .4byte 0x0202BBF4
+_080871A4: .4byte gPlaySt
 _080871A8: .4byte sub_08087028
 
 	thumb_func_start sub_080871AC
@@ -224210,7 +224210,7 @@ sub_08087864: @ 0x08087864
 	bl sub_080C0C30
 	adds r0, r4, #0
 	adds r0, #0x18
-	ldr r1, _080878A4 @ =0x0202BBF4
+	ldr r1, _080878A4 @ =gPlaySt
 	ldrh r2, [r1, #0x10]
 	movs r1, #2
 	bl sub_08006068
@@ -224227,7 +224227,7 @@ sub_08087864: @ 0x08087864
 	bx r0
 	.align 2, 0
 _080878A0: .4byte 0x02022FA0
-_080878A4: .4byte 0x0202BBF4
+_080878A4: .4byte gPlaySt
 
 	thumb_func_start sub_080878A8
 sub_080878A8: @ 0x080878A8
@@ -224255,7 +224255,7 @@ sub_080878A8: @ 0x080878A8
 	adds r0, r4, #0
 	movs r1, #2
 	bl sub_08006068
-	ldr r0, _0808790C @ =0x0202BBF4
+	ldr r0, _0808790C @ =gPlaySt
 	ldrb r0, [r0, #0xd]
 	cmp r0, #0
 	beq _08087910
@@ -224273,7 +224273,7 @@ sub_080878A8: @ 0x080878A8
 	.align 2, 0
 _08087904: .4byte 0x08D8B428
 _08087908: .4byte 0x02023608
-_0808790C: .4byte 0x0202BBF4
+_0808790C: .4byte gPlaySt
 _08087910:
 	adds r0, r4, #0
 	adds r0, #0xc
@@ -224287,7 +224287,7 @@ _08087920:
 	adds r7, #0x2c
 	movs r0, #1
 	strb r0, [r7]
-	ldr r0, _0808799C @ =0x0202BBF4
+	ldr r0, _0808799C @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -224338,7 +224338,7 @@ _0808797E:
 	bl sub_08005460
 	b _080879B0
 	.align 2, 0
-_0808799C: .4byte 0x0202BBF4
+_0808799C: .4byte gPlaySt
 _080879A0: .4byte 0x020040BC
 _080879A4: .4byte 0x02022E64
 _080879A8:
@@ -224380,7 +224380,7 @@ sub_080879E4: @ 0x080879E4
 	adds r4, #0x3e
 	movs r0, #0
 	strb r0, [r4]
-	ldr r1, _08087A14 @ =0x08BBFC7C
+	ldr r1, _08087A14 @ =gpKeySt
 	ldr r6, [r1]
 	ldrh r2, [r6, #8]
 	movs r0, #0x80
@@ -224394,7 +224394,7 @@ sub_080879E4: @ 0x080879E4
 	bl sub_080871E4
 	b _08087AF2
 	.align 2, 0
-_08087A14: .4byte 0x08BBFC7C
+_08087A14: .4byte gpKeySt
 _08087A18:
 	movs r0, #1
 	ands r0, r2
@@ -224422,7 +224422,7 @@ _08087A18:
 	movs r0, #1
 	strb r0, [r1]
 _08087A4C:
-	ldr r0, _08087A68 @ =0x0202BBF4
+	ldr r0, _08087A68 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -224436,7 +224436,7 @@ _08087A5E:
 	bl sub_080045FC
 	b _08087AF2
 	.align 2, 0
-_08087A68: .4byte 0x0202BBF4
+_08087A68: .4byte gPlaySt
 _08087A6C: .4byte 0x0000038A
 _08087A70:
 	movs r0, #2
@@ -224446,7 +224446,7 @@ _08087A70:
 	adds r0, r5, #0
 	movs r1, #1
 	bl sub_080045FC
-	ldr r0, _08087A94 @ =0x0202BBF4
+	ldr r0, _08087A94 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -224456,7 +224456,7 @@ _08087A70:
 	bl m4aSongNumStart
 	b _08087AF2
 	.align 2, 0
-_08087A94: .4byte 0x0202BBF4
+_08087A94: .4byte gPlaySt
 _08087A98: .4byte 0x0000038B
 _08087A9C:
 	movs r0, #0x20
@@ -224487,7 +224487,7 @@ _08087ACA:
 	ldrb r0, [r4]
 	cmp r0, r7
 	beq _08087AF2
-	ldr r0, _08087AF8 @ =0x0202BBF4
+	ldr r0, _08087AF8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -224508,7 +224508,7 @@ _08087AF2:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08087AF8: .4byte 0x0202BBF4
+_08087AF8: .4byte gPlaySt
 _08087AFC: .4byte 0x00000386
 
 	thumb_func_start sub_08087B00
@@ -224667,7 +224667,7 @@ _08087C12:
 	bl sub_08082DB8
 	movs r4, #0xb8
 	lsls r4, r4, #4
-	ldr r0, _08087C68 @ =0x0202BBF4
+	ldr r0, _08087C68 @ =gPlaySt
 	bl sub_08082F30
 	adds r1, r0, #0
 	adds r0, r4, #0
@@ -224684,7 +224684,7 @@ _08087C58: .4byte 0x06016000
 _08087C5C: .4byte 0x00000405
 _08087C60: .4byte 0x00000404
 _08087C64: .4byte 0x0000044E
-_08087C68: .4byte 0x0202BBF4
+_08087C68: .4byte gPlaySt
 
 	thumb_func_start sub_08087C6C
 sub_08087C6C: @ 0x08087C6C
@@ -225698,7 +225698,7 @@ _080884A2:
 sub_080884A8: @ 0x080884A8
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _080884DC @ =0x08BBFC7C
+	ldr r0, _080884DC @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0xa
 	ldrh r1, [r1, #8]
@@ -225720,7 +225720,7 @@ _080884D6:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080884DC: .4byte 0x08BBFC7C
+_080884DC: .4byte gpKeySt
 
 	thumb_func_start sub_080884E0
 sub_080884E0: @ 0x080884E0
@@ -226776,7 +226776,7 @@ sub_08088D08: @ 0x08088D08
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
 	mov sl, r0
-	ldr r0, _08088D44 @ =0x08BBFC7C
+	ldr r0, _08088D44 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0xf3
 	ldrh r1, [r1, #8]
@@ -226792,7 +226792,7 @@ sub_08088D08: @ 0x08088D08
 	mov sl, r0
 	b _08088D74
 	.align 2, 0
-_08088D44: .4byte 0x08BBFC7C
+_08088D44: .4byte gpKeySt
 _08088D48:
 	adds r1, r6, #0
 	adds r1, #0x5f
@@ -227321,7 +227321,7 @@ _0808924C:
 	ands r1, r0
 	cmp r1, #0
 	bne _0808926A
-	ldr r0, _08089294 @ =0x0202BBF4
+	ldr r0, _08089294 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -227351,7 +227351,7 @@ _08089282:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08089294: .4byte 0x0202BBF4
+_08089294: .4byte gPlaySt
 _08089298: .4byte 0x0000038E
 
 	thumb_func_start sub_0808929C
@@ -227560,7 +227560,7 @@ _08089408:
 sub_0808940C: @ 0x0808940C
 	push {r4, r5, r6, lr}
 	adds r4, r0, #0
-	ldr r1, _08089438 @ =0x08BBFC7C
+	ldr r1, _08089438 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r2, [r0, #8]
 	movs r0, #2
@@ -227568,7 +227568,7 @@ sub_0808940C: @ 0x0808940C
 	adds r5, r1, #0
 	cmp r0, #0
 	beq _08089444
-	ldr r0, _0808943C @ =0x0202BBF4
+	ldr r0, _0808943C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -227580,8 +227580,8 @@ _08089432:
 	movs r0, #0
 	b _08089464
 	.align 2, 0
-_08089438: .4byte 0x08BBFC7C
-_0808943C: .4byte 0x0202BBF4
+_08089438: .4byte gpKeySt
+_0808943C: .4byte gPlaySt
 _08089440: .4byte 0x0000038B
 _08089444:
 	movs r6, #1
@@ -227589,7 +227589,7 @@ _08089444:
 	ands r0, r2
 	cmp r0, #0
 	beq _08089478
-	ldr r0, _08089470 @ =0x0202BBF4
+	ldr r0, _08089470 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -227606,7 +227606,7 @@ _08089464:
 	bl sub_0800457C
 	b _080894DE
 	.align 2, 0
-_08089470: .4byte 0x0202BBF4
+_08089470: .4byte gPlaySt
 _08089474: .4byte 0x0000038A
 _08089478:
 	movs r0, #0x20
@@ -227616,7 +227616,7 @@ _08089478:
 	ldrh r2, [r4, #0x2a]
 	cmp r2, #2
 	bne _0808949A
-	ldr r0, _080894E4 @ =0x0202BBF4
+	ldr r0, _080894E4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -227636,7 +227636,7 @@ _0808949A:
 	ldrh r0, [r4, #0x2a]
 	cmp r0, #1
 	bne _080894C2
-	ldr r0, _080894E4 @ =0x0202BBF4
+	ldr r0, _080894E4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -227666,7 +227666,7 @@ _080894DE:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080894E4: .4byte 0x0202BBF4
+_080894E4: .4byte gPlaySt
 _080894E8: .4byte 0x00000387
 
 	thumb_func_start sub_080894EC
@@ -227982,13 +227982,13 @@ _08089740:
 _08089752:
 	ldr r0, [r4]
 	ldr r0, [r0]
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	cmp r0, #0
 	beq _08089772
 	ldr r0, [r4]
 	ldr r0, [r0]
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
 	bl sub_08017808
@@ -228468,7 +228468,7 @@ _08089AF2:
 	ldr r0, [r0]
 	adds r1, r4, #0
 	bl sub_080821F8
-	ldr r1, _08089B30 @ =0x0202BBF4
+	ldr r1, _08089B30 @ =gPlaySt
 	adds r0, r4, #0
 	adds r0, #0x34
 	ldrb r0, [r0]
@@ -228487,7 +228487,7 @@ _08089AF2:
 	bx r0
 	.align 2, 0
 _08089B2C: .4byte 0x0200CBF0
-_08089B30: .4byte 0x0202BBF4
+_08089B30: .4byte gPlaySt
 
 	thumb_func_start sub_08089B34
 sub_08089B34: @ 0x08089B34
@@ -229081,7 +229081,7 @@ sub_08089FCC: @ 0x08089FCC
 	ldrb r0, [r0]
 	cmp r0, #1
 	bne _0808A028
-	ldr r0, _0808A024 @ =0x0202BBF4
+	ldr r0, _0808A024 @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	adds r5, r0, #1
 	adds r0, #0x40
@@ -229106,7 +229106,7 @@ _08089FEC:
 	bl sub_08089EBC
 _0808A012:
 	adds r5, #1
-	ldr r0, _0808A024 @ =0x0202BBF4
+	ldr r0, _0808A024 @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	adds r0, #0x40
 	cmp r5, r0
@@ -229114,14 +229114,14 @@ _0808A012:
 	b _0808A064
 	.align 2, 0
 _0808A020: .4byte 0x0200E668
-_0808A024: .4byte 0x0202BBF4
+_0808A024: .4byte gPlaySt
 _0808A028:
-	ldr r0, _0808A030 @ =0x0202BBF4
+	ldr r0, _0808A030 @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	adds r4, r0, #1
 	b _0808A05E
 	.align 2, 0
-_0808A030: .4byte 0x0202BBF4
+_0808A030: .4byte gPlaySt
 _0808A034:
 	adds r0, r4, #0
 	bl sub_080190F4
@@ -229141,7 +229141,7 @@ _0808A034:
 	bl sub_08089EBC
 _0808A058:
 	adds r4, #1
-	ldr r0, _0808A070 @ =0x0202BBF4
+	ldr r0, _0808A070 @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 _0808A05E:
 	adds r0, #0x40
@@ -229153,7 +229153,7 @@ _0808A064:
 	bx r0
 	.align 2, 0
 _0808A06C: .4byte 0x0001000C
-_0808A070: .4byte 0x0202BBF4
+_0808A070: .4byte gPlaySt
 
 	thumb_func_start sub_0808A074
 sub_0808A074: @ 0x0808A074
@@ -229289,7 +229289,7 @@ sub_0808A0F4: @ 0x0808A0F4
 	cmp r0, #1
 	bne _0808A200
 _0808A188:
-	ldr r4, _0808A1E4 @ =0x0202BBF4
+	ldr r4, _0808A1E4 @ =gPlaySt
 	ldrb r1, [r4, #0x1a]
 	mov r3, r8
 	adds r3, #0x34
@@ -229334,7 +229334,7 @@ _0808A1AC:
 _0808A1D8: .4byte 0x03002790
 _0808A1DC: .4byte 0x02022BC0
 _0808A1E0: .4byte 0x01000008
-_0808A1E4: .4byte 0x0202BBF4
+_0808A1E4: .4byte gPlaySt
 _0808A1E8:
 	mov r6, sl
 	strb r1, [r6]
@@ -229785,7 +229785,7 @@ _0808A5B8:
 	ldrb r0, [r6]
 	adds r0, #1
 	strb r0, [r6]
-	ldr r0, _0808A5DC @ =0x0202BBF4
+	ldr r0, _0808A5DC @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -229797,10 +229797,10 @@ _0808A5B8:
 	.align 2, 0
 _0808A5D4: .4byte 0x02022C60
 _0808A5D8: .4byte 0x0200E668
-_0808A5DC: .4byte 0x0202BBF4
+_0808A5DC: .4byte gPlaySt
 _0808A5E0: .4byte 0x0000038A
 _0808A5E4:
-	ldr r0, _0808A600 @ =0x0202BBF4
+	ldr r0, _0808A600 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -229815,7 +229815,7 @@ _0808A5F8:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0808A600: .4byte 0x0202BBF4
+_0808A600: .4byte gPlaySt
 
 	thumb_func_start sub_0808A604
 sub_0808A604: @ 0x0808A604
@@ -229868,7 +229868,7 @@ _0808A660:
 	ldrb r0, [r6]
 	subs r0, #1
 	strb r0, [r6]
-	ldr r0, _0808A684 @ =0x0202BBF4
+	ldr r0, _0808A684 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -229880,10 +229880,10 @@ _0808A660:
 	.align 2, 0
 _0808A67C: .4byte 0x02022C60
 _0808A680: .4byte 0x0200E668
-_0808A684: .4byte 0x0202BBF4
+_0808A684: .4byte gPlaySt
 _0808A688: .4byte 0x0000038B
 _0808A68C:
-	ldr r0, _0808A6A8 @ =0x0202BBF4
+	ldr r0, _0808A6A8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -229898,7 +229898,7 @@ _0808A6A0:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0808A6A8: .4byte 0x0202BBF4
+_0808A6A8: .4byte gPlaySt
 
 	thumb_func_start sub_0808A6AC
 sub_0808A6AC: @ 0x0808A6AC
@@ -229983,7 +229983,7 @@ sub_0808A730: @ 0x0808A730
 	ands r0, r1
 	cmp r0, #0
 	beq _0808A764
-	ldr r0, _0808A760 @ =0x0202BBF4
+	ldr r0, _0808A760 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -229994,7 +229994,7 @@ sub_0808A730: @ 0x0808A730
 	bl m4aSongNumStart
 	b _0808A7BE
 	.align 2, 0
-_0808A760: .4byte 0x0202BBF4
+_0808A760: .4byte gPlaySt
 _0808A764:
 	ldr r4, [r6, #0xc]
 	movs r5, #0xc0
@@ -230014,7 +230014,7 @@ _0808A764:
 	ands r1, r5
 	cmp r1, #0
 	beq _0808A7AC
-	ldr r0, _0808A7A4 @ =0x0202BBF4
+	ldr r0, _0808A7A4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -230025,10 +230025,10 @@ _0808A764:
 	b _0808A7BE
 	.align 2, 0
 _0808A7A0: .4byte 0xFFFF3FFF
-_0808A7A4: .4byte 0x0202BBF4
+_0808A7A4: .4byte gPlaySt
 _0808A7A8: .4byte 0x0000038A
 _0808A7AC:
-	ldr r0, _0808A7C4 @ =0x0202BBF4
+	ldr r0, _0808A7C4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -230041,7 +230041,7 @@ _0808A7BE:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0808A7C4: .4byte 0x0202BBF4
+_0808A7C4: .4byte gPlaySt
 _0808A7C8: .4byte 0x0000038B
 
 	thumb_func_start sub_0808A7CC
@@ -230052,7 +230052,7 @@ sub_0808A7CC: @ 0x0808A7CC
 	push {r6, r7}
 	sub sp, #4
 	adds r5, r0, #0
-	ldr r2, _0808A7F4 @ =0x08BBFC7C
+	ldr r2, _0808A7F4 @ =gpKeySt
 	ldr r1, [r2]
 	movs r0, #0x80
 	lsls r0, r0, #2
@@ -230066,7 +230066,7 @@ sub_0808A7CC: @ 0x0808A7CC
 	movs r0, #2
 	b _0808A7FE
 	.align 2, 0
-_0808A7F4: .4byte 0x08BBFC7C
+_0808A7F4: .4byte gpKeySt
 _0808A7F8:
 	adds r1, r5, #0
 	adds r1, #0x31
@@ -230128,7 +230128,7 @@ _0808A850:
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
 	bl sub_080807D8
-	ldr r0, _0808A888 @ =0x0202BBF4
+	ldr r0, _0808A888 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -230142,7 +230142,7 @@ _0808A87C:
 	b _0808AB62
 	.align 2, 0
 _0808A884: .4byte 0x0200CBF0
-_0808A888: .4byte 0x0202BBF4
+_0808A888: .4byte gPlaySt
 _0808A88C: .4byte 0x0000038A
 _0808A890:
 	ldrh r1, [r3, #6]
@@ -230204,7 +230204,7 @@ _0808A8F0:
 	adds r0, r5, #0
 	adds r0, #0x2d
 	strb r6, [r0]
-	ldr r0, _0808A920 @ =0x0202BBF4
+	ldr r0, _0808A920 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -230216,7 +230216,7 @@ _0808A916:
 	bl m4aSongNumStart
 	b _0808AB62
 	.align 2, 0
-_0808A920: .4byte 0x0202BBF4
+_0808A920: .4byte gPlaySt
 _0808A924: .4byte 0x0000038F
 _0808A928:
 	movs r6, #0x10
@@ -230277,7 +230277,7 @@ _0808A98A:
 	adds r0, r5, #0
 	adds r0, #0x2d
 	strb r7, [r0]
-	ldr r0, _0808A9B8 @ =0x0202BBF4
+	ldr r0, _0808A9B8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -230291,7 +230291,7 @@ _0808A9AC:
 	bl sub_080045FC
 	b _0808AB62
 	.align 2, 0
-_0808A9B8: .4byte 0x0202BBF4
+_0808A9B8: .4byte gPlaySt
 _0808A9BC: .4byte 0x0000038F
 _0808A9C0:
 	movs r7, #0x40
@@ -230322,7 +230322,7 @@ _0808A9E0:
 	bne _0808A9F4
 	b _0808AB62
 _0808A9F4:
-	ldr r0, _0808AA10 @ =0x0202BBF4
+	ldr r0, _0808AA10 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -230337,12 +230337,12 @@ _0808AA06:
 	strb r0, [r1]
 	b _0808AB62
 	.align 2, 0
-_0808AA10: .4byte 0x0202BBF4
+_0808AA10: .4byte gPlaySt
 _0808AA14: .4byte 0x00000386
 _0808AA18:
 	subs r0, #1
 	strb r0, [r6]
-	ldr r0, _0808AA98 @ =0x0202BBF4
+	ldr r0, _0808AA98 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -230403,7 +230403,7 @@ _0808AA50:
 	bne _0808AB62
 	b _0808AB5E
 	.align 2, 0
-_0808AA98: .4byte 0x0202BBF4
+_0808AA98: .4byte gPlaySt
 _0808AA9C: .4byte 0x00000386
 _0808AAA0: .4byte 0x02022C60
 _0808AAA4:
@@ -230441,7 +230441,7 @@ _0808AAD0:
 	bge _0808AB62
 	adds r0, r1, #1
 	strb r0, [r6]
-	ldr r0, _0808AB50 @ =0x0202BBF4
+	ldr r0, _0808AB50 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -230492,7 +230492,7 @@ _0808AAF6:
 	b _0808AB62
 	.align 2, 0
 _0808AB4C: .4byte 0x0200E668
-_0808AB50: .4byte 0x0202BBF4
+_0808AB50: .4byte gPlaySt
 _0808AB54: .4byte 0x00000386
 _0808AB58: .4byte 0x02022C60
 _0808AB5C:
@@ -230522,7 +230522,7 @@ sub_0808AB70: @ 0x0808AB70
 	adds r4, r7, #0
 	adds r4, #0x2b
 	ldrb r0, [r4]
-	ldr r2, _0808ABA4 @ =0x08BBFC7C
+	ldr r2, _0808ABA4 @ =gpKeySt
 	cmp r0, #0
 	beq _0808ABA8
 	ldr r1, [r2]
@@ -230537,7 +230537,7 @@ sub_0808AB70: @ 0x0808AB70
 	strb r0, [r4]
 	b _0808AE50
 	.align 2, 0
-_0808ABA4: .4byte 0x08BBFC7C
+_0808ABA4: .4byte gpKeySt
 _0808ABA8:
 	ldr r1, [r2]
 	movs r0, #1
@@ -230558,7 +230558,7 @@ _0808ABA8:
 	adds r2, #0x2a
 	movs r0, #1
 	strb r0, [r2]
-	ldr r0, _0808AC30 @ =0x0202BBF4
+	ldr r0, _0808AC30 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -230607,7 +230607,7 @@ _0808ABE2:
 	movs r4, #0
 	b _0808AC54
 	.align 2, 0
-_0808AC30: .4byte 0x0202BBF4
+_0808AC30: .4byte gPlaySt
 _0808AC34: .4byte 0x0000038A
 _0808AC38: .4byte 0x08D8BB00
 _0808AC3C:
@@ -230666,7 +230666,7 @@ _0808AC94:
 	ldrb r4, [r0]
 	cmp r4, #0
 	bne _0808ACD4
-	ldr r0, _0808ACCC @ =0x0202BBF4
+	ldr r0, _0808ACCC @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -230684,7 +230684,7 @@ _0808ACBC:
 	strb r4, [r0]
 	b _0808AE50
 	.align 2, 0
-_0808ACCC: .4byte 0x0202BBF4
+_0808ACCC: .4byte gPlaySt
 _0808ACD0: .4byte 0x00000386
 _0808ACD4:
 	ldr r1, [r2]
@@ -230718,7 +230718,7 @@ _0808AD02:
 	bne _0808AD0E
 	b _0808AE50
 _0808AD0E:
-	ldr r0, _0808AD5C @ =0x0202BBF4
+	ldr r0, _0808AD5C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -230759,7 +230759,7 @@ _0808AD56:
 	strb r4, [r6]
 	b _0808ADD8
 	.align 2, 0
-_0808AD5C: .4byte 0x0202BBF4
+_0808AD5C: .4byte gPlaySt
 _0808AD60: .4byte 0x0000038F
 _0808AD64: .4byte 0x08D8BB00
 _0808AD68:
@@ -230807,7 +230807,7 @@ _0808ADA4:
 	cmp r0, #3
 	beq _0808AE50
 	strb r4, [r2]
-	ldr r0, _0808ADE8 @ =0x0202BBF4
+	ldr r0, _0808ADE8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -230828,12 +230828,12 @@ _0808ADD8:
 	b _0808AE50
 	.align 2, 0
 _0808ADE4: .4byte 0x08D8BB00
-_0808ADE8: .4byte 0x0202BBF4
+_0808ADE8: .4byte gPlaySt
 _0808ADEC: .4byte 0x0000038F
 _0808ADF0:
 	strb r3, [r2]
 _0808ADF2:
-	ldr r0, _0808AE08 @ =0x0202BBF4
+	ldr r0, _0808AE08 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -230843,7 +230843,7 @@ _0808ADF2:
 	bl m4aSongNumStart
 	b _0808AE50
 	.align 2, 0
-_0808AE08: .4byte 0x0202BBF4
+_0808AE08: .4byte gPlaySt
 _0808AE0C: .4byte 0x00000387
 _0808AE10:
 	movs r0, #0x80
@@ -230967,7 +230967,7 @@ _0808AECC:
 	ldrh r0, [r4, #0x3e]
 	bl sub_08089720
 _0808AEFC:
-	ldr r0, _0808AF68 @ =0x08BBFC7C
+	ldr r0, _0808AF68 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #2
 	ldrh r1, [r1, #8]
@@ -230979,7 +230979,7 @@ _0808AEFC:
 	ldrb r0, [r5]
 	cmp r0, #0
 	bne _0808AF38
-	ldr r0, _0808AF6C @ =0x0202BBF4
+	ldr r0, _0808AF6C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -231021,8 +231021,8 @@ _0808AF60:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0808AF68: .4byte 0x08BBFC7C
-_0808AF6C: .4byte 0x0202BBF4
+_0808AF68: .4byte gpKeySt
+_0808AF6C: .4byte gPlaySt
 _0808AF70: .4byte 0x0000038B
 _0808AF74: .4byte 0x08D8BB00
 
@@ -231047,7 +231047,7 @@ sub_0808AF78: @ 0x0808AF78
 	bl sub_0808E694
 	bl sub_0808954C
 _0808AFA0:
-	ldr r2, _0808B024 @ =0x0202BBF4
+	ldr r2, _0808B024 @ =gPlaySt
 	adds r0, r4, #0
 	adds r0, #0x34
 	ldrb r0, [r0]
@@ -231106,7 +231106,7 @@ _0808AFDA:
 	bx r0
 	.align 2, 0
 _0808B020: .4byte 0x0200CBF0
-_0808B024: .4byte 0x0202BBF4
+_0808B024: .4byte gPlaySt
 _0808B028: .4byte 0x02022C60
 _0808B02C: .4byte 0x02023460
 _0808B030: .4byte 0x02023C60
@@ -232084,7 +232084,7 @@ _0808B7A0:
 	mov r1, r8
 	ldr r0, [r1]
 	ldr r0, [r0]
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	str r6, [sp, #0x4c]
 	cmp r0, #0
@@ -232108,7 +232108,7 @@ _0808B81C:
 	mov r3, r8
 	ldr r0, [r3]
 	ldr r0, [r0]
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
 	bl sub_08017610
@@ -232126,7 +232126,7 @@ _0808B81C:
 	mov r1, r8
 	ldr r0, [r1]
 	ldr r0, [r0]
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
 	bl sub_08017808
@@ -232138,7 +232138,7 @@ _0808B81C:
 	mov r2, r8
 	ldr r0, [r2]
 	ldr r0, [r0]
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
 	bl sub_08017808
@@ -232452,7 +232452,7 @@ _0808BAF2:
 	adds r7, r4, r0
 	ldr r0, [r7]
 	ldr r0, [r0]
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r3, r0, #0x10
 	str r4, [sp, #0x4c]
@@ -232481,7 +232481,7 @@ _0808BB34: .4byte 0x0842CE1C
 _0808BB38:
 	ldr r0, [r7]
 	ldr r0, [r0]
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
 	bl sub_08017610
@@ -232504,7 +232504,7 @@ _0808BB38:
 	adds r4, #0x10
 	ldr r0, [r7]
 	ldr r0, [r0]
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
 	bl sub_08017808
@@ -232515,7 +232515,7 @@ _0808BB38:
 	bl sub_08004D04
 	ldr r0, [r7]
 	ldr r0, [r0]
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
 	bl sub_08017808
@@ -235198,7 +235198,7 @@ _0808D0A2:
 	adds r0, r0, r5
 	ldr r0, [r0]
 	ldr r0, [r0]
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
 	bl GetItemIndex
@@ -235268,14 +235268,14 @@ _0808D128:
 	adds r7, r0, r1
 	ldr r0, [r7]
 	ldr r0, [r0]
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	adds r4, r0, #0
 	lsls r0, r6, #2
 	mov r2, sl
 	adds r6, r0, r2
 	ldr r0, [r6]
 	ldr r0, [r0]
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r4, r4, #0x10
 	lsls r0, r0, #0x10
 	cmp r4, r0
@@ -235329,7 +235329,7 @@ _0808D1A4:
 	adds r0, r0, r5
 	ldr r0, [r0]
 	ldr r0, [r0]
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
 	bl GetItemIndex
@@ -235396,14 +235396,14 @@ _0808D220:
 	adds r7, r0, r1
 	ldr r0, [r7]
 	ldr r0, [r0]
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	adds r4, r0, #0
 	lsls r0, r6, #2
 	mov r2, sl
 	adds r6, r0, r2
 	ldr r0, [r6]
 	ldr r0, [r0]
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r4, r4, #0x10
 	lsls r0, r0, #0x10
 	cmp r4, r0
@@ -237727,7 +237727,7 @@ sub_0808E344: @ 0x0808E344
 	.align 2, 0
 _0808E364: .4byte 0x08D8C0B8
 _0808E368:
-	ldr r0, _0808E37C @ =0x0202BBF4
+	ldr r0, _0808E37C @ =gPlaySt
 	ldrb r1, [r0, #0xe]
 	cmp r1, #0x2e
 	bne _0808E380
@@ -237737,7 +237737,7 @@ _0808E368:
 	lsls r0, r0, #2
 	b _0808E3A4
 	.align 2, 0
-_0808E37C: .4byte 0x0202BBF4
+_0808E37C: .4byte gPlaySt
 _0808E380:
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #1
@@ -237837,7 +237837,7 @@ sub_0808E404: @ 0x0808E404
 	adds r2, r2, r1
 	adds r1, r2, #0
 	bl sub_08013688
-	ldr r1, _0808E450 @ =0x0202BBF4
+	ldr r1, _0808E450 @ =gPlaySt
 	adds r1, #0x41
 	movs r0, #0xc
 	ldrb r1, [r1]
@@ -237855,7 +237855,7 @@ sub_0808E404: @ 0x0808E404
 	.align 2, 0
 _0808E448: .4byte 0x0842CF1C
 _0808E44C: .4byte 0x0841EF4C
-_0808E450: .4byte 0x0202BBF4
+_0808E450: .4byte gPlaySt
 
 	thumb_func_start sub_0808E454
 sub_0808E454: @ 0x0808E454
@@ -237950,7 +237950,7 @@ sub_0808E4FC: @ 0x0808E4FC
 	push {lr}
 	movs r1, #0xc
 	bl sub_080045FC
-	ldr r0, _0808E51C @ =0x0202BBF4
+	ldr r0, _0808E51C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -237962,14 +237962,14 @@ _0808E516:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0808E51C: .4byte 0x0202BBF4
+_0808E51C: .4byte gPlaySt
 _0808E520: .4byte 0x0000038A
 
 	thumb_func_start sub_0808E524
 sub_0808E524: @ 0x0808E524
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _0808E550 @ =0x0202BBF4
+	ldr r0, _0808E550 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -237989,7 +237989,7 @@ _0808E53A:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0808E550: .4byte 0x0202BBF4
+_0808E550: .4byte gPlaySt
 _0808E554: .4byte 0x0000038A
 
 	thumb_func_start sub_0808E558
@@ -238214,7 +238214,7 @@ sub_0808E6A4: @ 0x0808E6A4
 	lsls r0, r0, #0x18
 	cmp r0, #0
 	bne _0808E78A
-	ldr r0, _0808E6C4 @ =0x0202BBF4
+	ldr r0, _0808E6C4 @ =gPlaySt
 	ldrb r1, [r0, #0x1b]
 	cmp r1, #2
 	beq _0808E6D6
@@ -238224,7 +238224,7 @@ sub_0808E6A4: @ 0x0808E6A4
 	beq _0808E6CE
 	b _0808E6E0
 	.align 2, 0
-_0808E6C4: .4byte 0x0202BBF4
+_0808E6C4: .4byte gPlaySt
 _0808E6C8:
 	cmp r1, #3
 	beq _0808E6DC
@@ -238359,7 +238359,7 @@ _0808E7D0: .4byte 0x00010004
 	thumb_func_start sub_0808E7D4
 sub_0808E7D4: @ 0x0808E7D4
 	adds r1, r0, #0
-	ldr r0, _0808E7F0 @ =0x0202BBF4
+	ldr r0, _0808E7F0 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -238373,7 +238373,7 @@ sub_0808E7D4: @ 0x0808E7D4
 	beq _0808E800
 	b _0808E818
 	.align 2, 0
-_0808E7F0: .4byte 0x0202BBF4
+_0808E7F0: .4byte gPlaySt
 _0808E7F4:
 	ldr r0, [r1]
 	ldrb r0, [r0, #4]
@@ -238438,7 +238438,7 @@ sub_0808E84C: @ 0x0808E84C
 	adds r1, r0, #0
 	adds r1, #0x2f
 	strb r6, [r1]
-	ldr r2, _0808E87C @ =0x0202BBF4
+	ldr r2, _0808E87C @ =gPlaySt
 	movs r0, #0x80
 	ldrb r3, [r2, #0x14]
 	ands r0, r3
@@ -238455,7 +238455,7 @@ sub_0808E84C: @ 0x0808E84C
 	bl sub_08090800
 	b _0808E8B8
 	.align 2, 0
-_0808E87C: .4byte 0x0202BBF4
+_0808E87C: .4byte gPlaySt
 _0808E880: .4byte sub_0808E4FC
 _0808E884: .4byte 0x0000113A
 _0808E888:
@@ -238494,14 +238494,14 @@ _0808E8C4: .4byte 0x0000113A
 
 	thumb_func_start sub_0808E8C8
 sub_0808E8C8: @ 0x0808E8C8
-	ldr r0, _0808E8D4 @ =0x0202BBF4
+	ldr r0, _0808E8D4 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	cmp r0, #0x2e
 	beq _0808E8D8
 	movs r0, #1
 	b _0808E8DA
 	.align 2, 0
-_0808E8D4: .4byte 0x0202BBF4
+_0808E8D4: .4byte gPlaySt
 _0808E8D8:
 	movs r0, #0
 _0808E8DA:
@@ -238559,7 +238559,7 @@ _0808E948:
 	movs r2, #1
 	bl sub_08090800
 _0808E956:
-	ldr r1, _0808E980 @ =0x0202BBF4
+	ldr r1, _0808E980 @ =gPlaySt
 	movs r0, #0x80
 	ldrb r1, [r1, #0x14]
 	ands r0, r1
@@ -238577,7 +238577,7 @@ _0808E956:
 	.align 2, 0
 _0808E978: .4byte sub_0808E5B4
 _0808E97C: .4byte 0x00001135
-_0808E980: .4byte 0x0202BBF4
+_0808E980: .4byte gPlaySt
 _0808E984: .4byte sub_0808E524
 _0808E988: .4byte 0x00001134
 _0808E98C:
@@ -239166,7 +239166,7 @@ sub_0808EDD0: @ 0x0808EDD0
 	adds r0, r5, #0
 	movs r1, #0
 	bl sub_08005B8C
-	ldr r0, _0808EE50 @ =0x0202BBF4
+	ldr r0, _0808EE50 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -239192,7 +239192,7 @@ sub_0808EDD0: @ 0x0808EDD0
 	.align 2, 0
 _0808EE48: .4byte 0x06010000
 _0808EE4C: .4byte 0x081901C8
-_0808EE50: .4byte 0x0202BBF4
+_0808EE50: .4byte gPlaySt
 
 	thumb_func_start sub_0808EE54
 sub_0808EE54: @ 0x0808EE54
@@ -239866,7 +239866,7 @@ sub_0808F3BC: @ 0x0808F3BC
 	mov r8, r2
 	cmp r2, #0
 	beq _0808F418
-	ldr r0, _0808F414 @ =0x08BBFC7C
+	ldr r0, _0808F414 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x81
 	lsls r0, r0, #1
@@ -239880,16 +239880,16 @@ sub_0808F3BC: @ 0x0808F3BC
 	b _0808F5B2
 	.align 2, 0
 _0808F410: .4byte 0x0842CF2C
-_0808F414: .4byte 0x08BBFC7C
+_0808F414: .4byte gpKeySt
 _0808F418:
-	ldr r0, _0808F46C @ =0x08BBFC7C
+	ldr r0, _0808F46C @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #1
 	ands r0, r1
 	cmp r0, #0
 	beq _0808F478
-	ldr r0, _0808F470 @ =0x0202BBF4
+	ldr r0, _0808F470 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -239923,8 +239923,8 @@ _0808F45A:
 	bl sub_080045FC
 	b _0808F5B2
 	.align 2, 0
-_0808F46C: .4byte 0x08BBFC7C
-_0808F470: .4byte 0x0202BBF4
+_0808F46C: .4byte gpKeySt
+_0808F470: .4byte gPlaySt
 _0808F474: .4byte 0x0000038A
 _0808F478:
 	movs r0, #0x80
@@ -239962,7 +239962,7 @@ _0808F4A4:
 	movs r0, #1
 	movs r1, #4
 	bl sub_08090930
-	ldr r0, _0808F4E8 @ =0x0202BBF4
+	ldr r0, _0808F4E8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -239977,10 +239977,10 @@ _0808F4D8:
 	.align 2, 0
 _0808F4E0: .4byte 0x02023578
 _0808F4E4: .4byte 0x0841D614
-_0808F4E8: .4byte 0x0202BBF4
+_0808F4E8: .4byte gPlaySt
 _0808F4EC: .4byte 0x0000038B
 _0808F4F0:
-	ldr r0, _0808F54C @ =0x08BBFC7C
+	ldr r0, _0808F54C @ =gpKeySt
 	ldr r1, [r0]
 	movs r2, #0x40
 	adds r0, r2, #0
@@ -240006,7 +240006,7 @@ _0808F51E:
 	subs r0, #1
 	strb r0, [r5]
 _0808F522:
-	ldr r7, _0808F54C @ =0x08BBFC7C
+	ldr r7, _0808F54C @ =gpKeySt
 	ldr r1, [r7]
 	movs r0, #0x80
 	mov r8, r0
@@ -240026,7 +240026,7 @@ _0808F522:
 	adds r0, #1
 	b _0808F55E
 	.align 2, 0
-_0808F54C: .4byte 0x08BBFC7C
+_0808F54C: .4byte gpKeySt
 _0808F550:
 	ldr r1, [r7]
 	mov r0, r8
@@ -240068,7 +240068,7 @@ _0808F592:
 	adds r1, r7, #0
 	movs r2, #7
 	bl sub_080AA3F8
-	ldr r0, _0808F5C4 @ =0x0202BBF4
+	ldr r0, _0808F5C4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -240086,7 +240086,7 @@ _0808F5B2:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0808F5C4: .4byte 0x0202BBF4
+_0808F5C4: .4byte gPlaySt
 _0808F5C8: .4byte 0x00000386
 
 	thumb_func_start sub_0808F5CC
@@ -240432,7 +240432,7 @@ _0808F870:
 	lsls r0, r0, #0x18
 	cmp r0, #0
 	bne _0808F8C2
-	ldr r4, _0808F8CC @ =0x0202BBF4
+	ldr r4, _0808F8CC @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r4, r0]
 	bl sub_08031A5C
@@ -240476,7 +240476,7 @@ _0808F8C4:
 	pop {r1}
 	bx r1
 	.align 2, 0
-_0808F8CC: .4byte 0x0202BBF4
+_0808F8CC: .4byte gPlaySt
 
 	thumb_func_start sub_0808F8D0
 sub_0808F8D0: @ 0x0808F8D0
@@ -240510,7 +240510,7 @@ _0808F8EC:
 	ldrh r0, [r2]
 	cmp r0, #1
 	bne _0808F928
-	ldr r0, _0808F934 @ =0x08BBFC7C
+	ldr r0, _0808F934 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #8
 	ldrh r1, [r1, #8]
@@ -240529,7 +240529,7 @@ _0808F928:
 	bx r0
 	.align 2, 0
 _0808F930: .4byte 0x08BFF7A8
-_0808F934: .4byte 0x08BBFC7C
+_0808F934: .4byte gpKeySt
 
 	thumb_func_start sub_0808F938
 sub_0808F938: @ 0x0808F938
@@ -240568,7 +240568,7 @@ _0808F968:
 	thumb_func_start sub_0808F970
 sub_0808F970: @ 0x0808F970
 	push {r4, lr}
-	ldr r4, _0808F9D4 @ =0x0202BBF4
+	ldr r4, _0808F9D4 @ =gPlaySt
 	movs r0, #0x80
 	ldrb r1, [r4, #0x14]
 	ands r0, r1
@@ -240614,7 +240614,7 @@ _0808F9A8:
 	movs r0, #1
 	b _0808F9DA
 	.align 2, 0
-_0808F9D4: .4byte 0x0202BBF4
+_0808F9D4: .4byte gPlaySt
 _0808F9D8:
 	movs r0, #0
 _0808F9DA:
@@ -240631,7 +240631,7 @@ sub_0808F9E0: @ 0x0808F9E0
 	adds r6, r0, #0
 	movs r5, #0
 	str r5, [r6, #0x58]
-	ldr r4, _0808FA04 @ =0x0202BBF4
+	ldr r4, _0808FA04 @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r4, r0]
 	cmp r0, #0x11
@@ -240642,7 +240642,7 @@ sub_0808F9E0: @ 0x0808F9E0
 	beq _0808FA0E
 	b _0808FA68
 	.align 2, 0
-_0808FA04: .4byte 0x0202BBF4
+_0808FA04: .4byte gPlaySt
 _0808FA08:
 	cmp r0, #0x14
 	beq _0808FA54
@@ -240739,7 +240739,7 @@ _0808FA86:
 	ldrb r1, [r3, #0x18]
 	orrs r0, r1
 	strb r0, [r3, #0x18]
-	ldr r4, _0808FC34 @ =0x0202BBF4
+	ldr r4, _0808FC34 @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r4, r0]
 	bl sub_08031A5C
@@ -240884,7 +240884,7 @@ _0808FBA0:
 	lsls r0, r0, #7
 	movs r1, #4
 	bl sub_0808EDD0
-	ldr r0, _0808FC34 @ =0x0202BBF4
+	ldr r0, _0808FC34 @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #1
 	bne _0808FC80
@@ -240895,7 +240895,7 @@ _0808FBA0:
 	b _0808FC88
 	.align 2, 0
 _0808FC30: .4byte 0x03002790
-_0808FC34: .4byte 0x0202BBF4
+_0808FC34: .4byte gPlaySt
 _0808FC38: .4byte 0x00001131
 _0808FC3C: .4byte 0x02023DA6
 _0808FC40: .4byte 0x00001132
@@ -241223,7 +241223,7 @@ sub_0808FEE0: @ 0x0808FEE0
 	push {lr}
 	bl sub_080886CC
 	bl sub_0800EC08
-	bl sub_08012B98
+	bl EndEachSpriteAnimProc
 	bl sub_08091104
 	ldr r3, _0808FF50 @ =0x03002790
 	movs r1, #4
@@ -241411,7 +241411,7 @@ sub_0809005C: @ 0x0809005C
 	adds r4, r0, #0
 	bl sub_080886CC
 	bl sub_0800EC08
-	bl sub_08012B98
+	bl EndEachSpriteAnimProc
 	bl sub_08091104
 	ldr r3, _080900DC @ =0x03002790
 	movs r1, #4
@@ -241773,7 +241773,7 @@ _08090330:
 	movs r1, #0x78
 	bl sub_08012AF0
 	str r0, [r5, #0x38]
-	ldr r4, _08090384 @ =0x0202BBF4
+	ldr r4, _08090384 @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r4, r0]
 	bl sub_08031A5C
@@ -241803,7 +241803,7 @@ _08090368:
 	bx r0
 	.align 2, 0
 _08090380: .4byte 0x0841ECD0
-_08090384: .4byte 0x0202BBF4
+_08090384: .4byte gPlaySt
 
 	thumb_func_start sub_08090388
 sub_08090388: @ 0x08090388
@@ -241821,7 +241821,7 @@ sub_08090388: @ 0x08090388
 sub_0809039C: @ 0x0809039C
 	push {lr}
 	ldr r0, [r0, #0x38]
-	bl sub_08012B8C
+	bl EndSpriteAnimProc
 	pop {r0}
 	bx r0
 
@@ -242028,7 +242028,7 @@ sub_080904D8: @ 0x080904D8
 	ldrsb r0, [r6, r0]
 	cmp r0, #0
 	beq _0809054C
-	ldr r2, _08090548 @ =0x08BBFC7C
+	ldr r2, _08090548 @ =gpKeySt
 	ldr r1, [r2]
 	movs r0, #0x81
 	lsls r0, r0, #1
@@ -242044,9 +242044,9 @@ _0809053E:
 	strb r0, [r6]
 	b _0809070C
 	.align 2, 0
-_08090548: .4byte 0x08BBFC7C
+_08090548: .4byte gpKeySt
 _0809054C:
-	ldr r1, _08090574 @ =0x08BBFC7C
+	ldr r1, _08090574 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r3, [r0, #8]
 	movs r0, #0x80
@@ -242066,7 +242066,7 @@ _08090564:
 	strb r0, [r6]
 	b _0809070C
 	.align 2, 0
-_08090574: .4byte 0x08BBFC7C
+_08090574: .4byte gpKeySt
 _08090578:
 	movs r6, #1
 	adds r0, r6, #0
@@ -242089,7 +242089,7 @@ _08090578:
 	ldr r0, [r4, #0x14]
 	ldr r1, [r5, #0x2c]
 	bl _call_via_r1
-	ldr r0, _080905BC @ =0x0202BBF4
+	ldr r0, _080905BC @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -242101,7 +242101,7 @@ _080905B4:
 	bl m4aSongNumStart
 	b _0809070C
 	.align 2, 0
-_080905BC: .4byte 0x0202BBF4
+_080905BC: .4byte gPlaySt
 _080905C0: .4byte 0x0000038A
 _080905C4:
 	movs r0, #2
@@ -242121,7 +242121,7 @@ _080905D4:
 	adds r0, r4, #0
 	movs r1, #0
 	bl sub_080045FC
-	ldr r0, _08090600 @ =0x0202BBF4
+	ldr r0, _08090600 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -242133,7 +242133,7 @@ _080905F6:
 	bl m4aSongNumStart
 	b _0809070C
 	.align 2, 0
-_08090600: .4byte 0x0202BBF4
+_08090600: .4byte gPlaySt
 _08090604: .4byte 0x0000038B
 _08090608:
 	movs r0, #8
@@ -242148,7 +242148,7 @@ _08090608:
 	lsls r0, r0, #0x18
 	cmp r0, #0
 	beq _08090648
-	ldr r0, _08090640 @ =0x0202BBF4
+	ldr r0, _08090640 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -242162,10 +242162,10 @@ _08090634:
 	bl sub_080045FC
 	b _0809070C
 	.align 2, 0
-_08090640: .4byte 0x0202BBF4
+_08090640: .4byte gPlaySt
 _08090644: .4byte 0x0000038A
 _08090648:
-	ldr r0, _08090660 @ =0x0202BBF4
+	ldr r0, _08090660 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -242176,7 +242176,7 @@ _08090648:
 	bl m4aSongNumStart
 	b _0809070C
 	.align 2, 0
-_08090660: .4byte 0x0202BBF4
+_08090660: .4byte gPlaySt
 _08090664:
 	ldr r3, [r1]
 	movs r6, #0x40
@@ -242231,7 +242231,7 @@ _080906BE:
 	ldrb r0, [r5]
 	cmp sb, r0
 	beq _0809070C
-	ldr r0, _08090718 @ =0x0202BBF4
+	ldr r0, _08090718 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -242274,7 +242274,7 @@ _0809070C:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08090718: .4byte 0x0202BBF4
+_08090718: .4byte gPlaySt
 _0809071C: .4byte 0x00000386
 
 	thumb_func_start sub_08090720
@@ -244302,7 +244302,7 @@ _0809163A:
 sub_0809163C: @ 0x0809163C
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _08091660 @ =0x08BBFC7C
+	ldr r0, _08091660 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0xf3
 	ldrh r1, [r1, #8]
@@ -244317,7 +244317,7 @@ _08091658:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08091660: .4byte 0x08BBFC7C
+_08091660: .4byte gpKeySt
 
 	thumb_func_start sub_08091664
 sub_08091664: @ 0x08091664
@@ -245847,7 +245847,7 @@ sub_0809228C: @ 0x0809228C
 	adds r2, r2, r1
 	adds r1, r2, #0
 	bl sub_08013688
-	ldr r1, _080922D8 @ =0x0202BBF4
+	ldr r1, _080922D8 @ =gPlaySt
 	adds r1, #0x41
 	movs r0, #0xc
 	ldrb r1, [r1]
@@ -245865,7 +245865,7 @@ sub_0809228C: @ 0x0809228C
 	.align 2, 0
 _080922D0: .4byte 0x0842CF94
 _080922D4: .4byte 0x0841EF4C
-_080922D8: .4byte 0x0202BBF4
+_080922D8: .4byte gPlaySt
 
 	thumb_func_start sub_080922DC
 sub_080922DC: @ 0x080922DC
@@ -246008,7 +246008,7 @@ sub_08092420: @ 0x08092420
 	mov r2, r8
 	adds r2, #0x29
 	ldrb r7, [r2]
-	ldr r0, _080924FC @ =0x08BBFC7C
+	ldr r0, _080924FC @ =gpKeySt
 	ldr r1, [r0]
 	ldrh r5, [r1, #6]
 	mov r3, r8
@@ -246109,7 +246109,7 @@ _080924C4:
 	adds r1, #4
 	b _08092514
 	.align 2, 0
-_080924FC: .4byte 0x08BBFC7C
+_080924FC: .4byte gpKeySt
 _08092500:
 	mov r1, r8
 	ldrh r0, [r1, #0x32]
@@ -246151,7 +246151,7 @@ _08092522:
 	movs r2, #7
 	bl sub_080AA3F8
 _08092552:
-	ldr r0, _08092568 @ =0x0202BBF4
+	ldr r0, _08092568 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -246163,7 +246163,7 @@ _08092564:
 	movs r0, #1
 	b _08092572
 	.align 2, 0
-_08092568: .4byte 0x0202BBF4
+_08092568: .4byte gPlaySt
 _0809256C: .4byte 0x00000385
 _08092570:
 	movs r0, #0
@@ -246359,7 +246359,7 @@ sub_080926F0: @ 0x080926F0
 	beq _08092702
 	b _0809281E
 _08092702:
-	ldr r0, _0809271C @ =0x08BBFC7C
+	ldr r0, _0809271C @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #0x80
@@ -246371,7 +246371,7 @@ _08092702:
 	bl sub_0800457C
 	b _08092824
 	.align 2, 0
-_0809271C: .4byte 0x08BBFC7C
+_0809271C: .4byte gpKeySt
 _08092720:
 	movs r0, #1
 	ands r0, r1
@@ -246427,7 +246427,7 @@ _0809275A:
 	adds r0, r6, #0
 	movs r1, #2
 	bl sub_080045FC
-	ldr r0, _080927A8 @ =0x0202BBF4
+	ldr r0, _080927A8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -246437,7 +246437,7 @@ _0809275A:
 	bl m4aSongNumStart
 	b _08092824
 	.align 2, 0
-_080927A8: .4byte 0x0202BBF4
+_080927A8: .4byte gPlaySt
 _080927AC: .4byte 0x0000038A
 _080927B0:
 	movs r0, #2
@@ -246447,7 +246447,7 @@ _080927B0:
 	adds r0, r6, #0
 	movs r1, #0xc
 	bl sub_080045FC
-	ldr r0, _080927D4 @ =0x0202BBF4
+	ldr r0, _080927D4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -246457,7 +246457,7 @@ _080927B0:
 	bl m4aSongNumStart
 	b _08092824
 	.align 2, 0
-_080927D4: .4byte 0x0202BBF4
+_080927D4: .4byte gPlaySt
 _080927D8: .4byte 0x0000038B
 _080927DC:
 	adds r0, r6, #0
@@ -246850,7 +246850,7 @@ sub_08092B30: @ 0x08092B30
 	beq _08092B46
 	b _08092D50
 _08092B46:
-	ldr r0, _08092B78 @ =0x08BBFC7C
+	ldr r0, _08092B78 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #0x80
@@ -246875,7 +246875,7 @@ _08092B46:
 	bl sub_0808266C
 	b _08092E70
 	.align 2, 0
-_08092B78: .4byte 0x08BBFC7C
+_08092B78: .4byte gpKeySt
 _08092B7C: .4byte 0x08D8C9A8
 _08092B80:
 	movs r0, #1
@@ -247027,7 +247027,7 @@ _08092C78:
 	movs r0, #1
 	bl sub_08000FD4
 _08092CC8:
-	ldr r0, _08092CE8 @ =0x0202BBF4
+	ldr r0, _08092CE8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -247041,10 +247041,10 @@ _08092CD6:
 	.align 2, 0
 _08092CE0: .4byte 0x02022EC4
 _08092CE4: .4byte 0x02012A20
-_08092CE8: .4byte 0x0202BBF4
+_08092CE8: .4byte gPlaySt
 _08092CEC: .4byte 0x0000038A
 _08092CF0:
-	ldr r0, _08092D08 @ =0x0202BBF4
+	ldr r0, _08092D08 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -247057,7 +247057,7 @@ _08092CFE:
 	bl m4aSongNumStart
 	b _08092E70
 	.align 2, 0
-_08092D08: .4byte 0x0202BBF4
+_08092D08: .4byte gPlaySt
 _08092D0C:
 	movs r0, #2
 	ands r0, r1
@@ -247073,7 +247073,7 @@ _08092D0C:
 	strb r0, [r2]
 	movs r0, #0
 	bl sub_080A998C
-	ldr r0, _08092D48 @ =0x0202BBF4
+	ldr r0, _08092D48 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -247087,10 +247087,10 @@ _08092D3C:
 	bl sub_080045FC
 	b _08092E70
 	.align 2, 0
-_08092D48: .4byte 0x0202BBF4
+_08092D48: .4byte gPlaySt
 _08092D4C: .4byte 0x0000038B
 _08092D50:
-	ldr r0, _08092D8C @ =0x08BBFC7C
+	ldr r0, _08092D8C @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x81
 	lsls r0, r0, #1
@@ -247102,7 +247102,7 @@ _08092D50:
 	movs r0, #0xff
 	strb r0, [r4]
 _08092D68:
-	ldr r1, _08092D8C @ =0x08BBFC7C
+	ldr r1, _08092D8C @ =gpKeySt
 	ldr r3, [r1]
 	movs r6, #0x20
 	adds r0, r6, #0
@@ -247120,7 +247120,7 @@ _08092D68:
 	subs r0, r2, #1
 	b _08092D9C
 	.align 2, 0
-_08092D8C: .4byte 0x08BBFC7C
+_08092D8C: .4byte gpKeySt
 _08092D90:
 	adds r0, r6, #0
 	ldrh r3, [r3, #8]
@@ -247202,7 +247202,7 @@ _08092E14:
 	ldrb r0, [r4]
 	cmp r7, r0
 	beq _08092E70
-	ldr r0, _08092E78 @ =0x0202BBF4
+	ldr r0, _08092E78 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -247248,7 +247248,7 @@ _08092E70:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08092E78: .4byte 0x0202BBF4
+_08092E78: .4byte gPlaySt
 _08092E7C: .4byte 0x00000385
 _08092E80: .4byte 0x08D8C9A8
 
@@ -247434,7 +247434,7 @@ sub_08093014: @ 0x08093014
 	beq _08093026
 	b _0809314C
 _08093026:
-	ldr r0, _08093040 @ =0x08BBFC7C
+	ldr r0, _08093040 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #0x80
@@ -247446,7 +247446,7 @@ _08093026:
 	bl sub_0800457C
 	b _08093152
 	.align 2, 0
-_08093040: .4byte 0x08BBFC7C
+_08093040: .4byte gpKeySt
 _08093044:
 	movs r0, #1
 	ands r0, r1
@@ -247475,7 +247475,7 @@ _0809307A:
 	adds r0, r6, #0
 	movs r1, #6
 	bl sub_080045FC
-	ldr r0, _08093098 @ =0x0202BBF4
+	ldr r0, _08093098 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -247485,10 +247485,10 @@ _0809307A:
 	bl m4aSongNumStart
 	b _08093152
 	.align 2, 0
-_08093098: .4byte 0x0202BBF4
+_08093098: .4byte gPlaySt
 _0809309C: .4byte 0x0000038A
 _080930A0:
-	ldr r0, _080930B8 @ =0x0202BBF4
+	ldr r0, _080930B8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -247499,7 +247499,7 @@ _080930A0:
 	bl m4aSongNumStart
 	b _08093152
 	.align 2, 0
-_080930B8: .4byte 0x0202BBF4
+_080930B8: .4byte gPlaySt
 _080930BC:
 	movs r0, #2
 	ands r0, r1
@@ -247510,7 +247510,7 @@ _080930BC:
 	adds r0, r6, #0
 	movs r1, #2
 	bl sub_080045FC
-	ldr r0, _080930E8 @ =0x0202BBF4
+	ldr r0, _080930E8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -247520,7 +247520,7 @@ _080930BC:
 	bl m4aSongNumStart
 	b _08093152
 	.align 2, 0
-_080930E8: .4byte 0x0202BBF4
+_080930E8: .4byte gPlaySt
 _080930EC: .4byte 0x0000038B
 _080930F0:
 	adds r0, r6, #0
@@ -249246,7 +249246,7 @@ sub_08093E9C: @ 0x08093E9C
 	ldr r0, [r2]
 	ldrb r0, [r0, #4]
 	bl sub_0808E5DC
-	ldr r0, _08093EE8 @ =0x0202BBF4
+	ldr r0, _08093EE8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -249262,10 +249262,10 @@ _08093EDA:
 	movs r0, #1
 	b _08093F06
 	.align 2, 0
-_08093EE8: .4byte 0x0202BBF4
+_08093EE8: .4byte gPlaySt
 _08093EEC: .4byte 0x0000038A
 _08093EF0:
-	ldr r0, _08093F0C @ =0x0202BBF4
+	ldr r0, _08093F0C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -249281,7 +249281,7 @@ _08093F06:
 	pop {r1}
 	bx r1
 	.align 2, 0
-_08093F0C: .4byte 0x0202BBF4
+_08093F0C: .4byte gPlaySt
 
 	thumb_func_start sub_08093F10
 sub_08093F10: @ 0x08093F10
@@ -249306,7 +249306,7 @@ sub_08093F10: @ 0x08093F10
 	ldr r0, [r4]
 	ldrb r0, [r0, #4]
 	bl sub_0808E604
-	ldr r0, _08093F60 @ =0x0202BBF4
+	ldr r0, _08093F60 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -249322,10 +249322,10 @@ _08093F50:
 	movs r0, #1
 	b _08093F7E
 	.align 2, 0
-_08093F60: .4byte 0x0202BBF4
+_08093F60: .4byte gPlaySt
 _08093F64: .4byte 0x0000038B
 _08093F68:
-	ldr r0, _08093F84 @ =0x0202BBF4
+	ldr r0, _08093F84 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -249341,7 +249341,7 @@ _08093F7E:
 	pop {r1}
 	bx r1
 	.align 2, 0
-_08093F84: .4byte 0x0202BBF4
+_08093F84: .4byte gPlaySt
 
 	thumb_func_start sub_08093F88
 sub_08093F88: @ 0x08093F88
@@ -249436,7 +249436,7 @@ sub_0809402C: @ 0x0809402C
 	asrs r6, r0, #0x18
 	cmp r6, #0
 	bne _08094078
-	ldr r0, _08094080 @ =0x0202BBF4
+	ldr r0, _08094080 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -249466,7 +249466,7 @@ _08094078:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08094080: .4byte 0x0202BBF4
+_08094080: .4byte gPlaySt
 _08094084: .4byte 0x02012B40
 _08094088: .4byte 0x02023062
 
@@ -249843,7 +249843,7 @@ sub_08094398: @ 0x08094398
 	beq _080943A6
 	b _080945BA
 _080943A6:
-	ldr r3, _080943F4 @ =0x08BBFC7C
+	ldr r3, _080943F4 @ =gpKeySt
 	ldr r1, [r3]
 	ldrh r6, [r1, #6]
 	adds r2, r5, #0
@@ -249871,7 +249871,7 @@ _080943C6:
 	ldrb r0, [r0]
 	cmp r0, #0
 	bne _080943FC
-	ldr r0, _080943F8 @ =0x0202BBF4
+	ldr r0, _080943F8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -249884,10 +249884,10 @@ _080943EA:
 	bl m4aSongNumStart
 	b _08094634
 	.align 2, 0
-_080943F4: .4byte 0x08BBFC7C
-_080943F8: .4byte 0x0202BBF4
+_080943F4: .4byte gpKeySt
+_080943F8: .4byte gPlaySt
 _080943FC:
-	ldr r0, _08094418 @ =0x0202BBF4
+	ldr r0, _08094418 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -249901,14 +249901,14 @@ _0809440E:
 	bl sub_080045FC
 	b _08094634
 	.align 2, 0
-_08094418: .4byte 0x0202BBF4
+_08094418: .4byte gPlaySt
 _0809441C: .4byte 0x0000038A
 _08094420:
 	adds r0, r4, #0
 	ands r0, r1
 	cmp r0, #0
 	beq _0809444C
-	ldr r0, _08094444 @ =0x0202BBF4
+	ldr r0, _08094444 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -249922,7 +249922,7 @@ _0809443A:
 	bl sub_080045FC
 	b _08094634
 	.align 2, 0
-_08094444: .4byte 0x0202BBF4
+_08094444: .4byte gPlaySt
 _08094448: .4byte 0x0000038A
 _0809444C:
 	movs r0, #0x80
@@ -249956,7 +249956,7 @@ _08094482:
 	ands r0, r1
 	cmp r0, #0
 	beq _080944B0
-	ldr r0, _080944A8 @ =0x0202BBF4
+	ldr r0, _080944A8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -249970,7 +249970,7 @@ _0809449C:
 	bl sub_080045FC
 	b _08094634
 	.align 2, 0
-_080944A8: .4byte 0x0202BBF4
+_080944A8: .4byte gPlaySt
 _080944AC: .4byte 0x0000038B
 _080944B0:
 	movs r0, #0x20
@@ -250040,7 +250040,7 @@ _08094522:
 	movs r1, #1
 	adds r2, r5, #0
 	bl sub_080A9D28
-	ldr r0, _08094584 @ =0x0202BBF4
+	ldr r0, _08094584 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -250076,7 +250076,7 @@ _08094568:
 	b _080945B2
 	.align 2, 0
 _08094580: .4byte sub_08093CC0
-_08094584: .4byte 0x0202BBF4
+_08094584: .4byte gPlaySt
 _08094588: .4byte 0x00000385
 _0809458C:
 	ldrh r1, [r5, #0x2e]
@@ -250289,14 +250289,14 @@ sub_080946E8: @ 0x080946E8
 sub_08094714: @ 0x08094714
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _08094768 @ =0x08BBFC7C
+	ldr r0, _08094768 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #1
 	ldrh r1, [r1, #8]
 	ands r0, r1
 	cmp r0, #0
 	beq _0809473A
-	ldr r0, _0809476C @ =0x0202BBF4
+	ldr r0, _0809476C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -250306,14 +250306,14 @@ sub_08094714: @ 0x08094714
 	lsls r0, r0, #2
 	bl m4aSongNumStart
 _0809473A:
-	ldr r0, _08094768 @ =0x08BBFC7C
+	ldr r0, _08094768 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x40
 	ldrh r1, [r1, #6]
 	ands r0, r1
 	cmp r0, #0
 	beq _08094760
-	ldr r0, _0809476C @ =0x0202BBF4
+	ldr r0, _0809476C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -250329,8 +250329,8 @@ _08094760:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08094768: .4byte 0x08BBFC7C
-_0809476C: .4byte 0x0202BBF4
+_08094768: .4byte gpKeySt
+_0809476C: .4byte gPlaySt
 _08094770: .4byte 0x00000385
 
 	thumb_func_start sub_08094774
@@ -250521,7 +250521,7 @@ sub_080948A0: @ 0x080948A0
 sub_080948CC: @ 0x080948CC
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _08094930 @ =0x08BBFC7C
+	ldr r0, _08094930 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #6]
 	movs r0, #0x20
@@ -250572,12 +250572,12 @@ _0809491E:
 	subs r0, #8
 	b _08094936
 	.align 2, 0
-_08094930: .4byte 0x08BBFC7C
+_08094930: .4byte gpKeySt
 _08094934:
 	subs r0, r2, #1
 _08094936:
 	str r0, [r4, #0x34]
-	ldr r0, _0809494C @ =0x0202BBF4
+	ldr r0, _0809494C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -250588,7 +250588,7 @@ _08094946:
 	ldr r0, _08094950 @ =0x00000387
 	b _08094AA4
 	.align 2, 0
-_0809494C: .4byte 0x0202BBF4
+_0809494C: .4byte gPlaySt
 _08094950: .4byte 0x00000387
 _08094954:
 	movs r0, #0x10
@@ -250642,7 +250642,7 @@ _080949AC:
 	adds r0, r2, #7
 _080949AE:
 	str r0, [r4, #0x34]
-	ldr r0, _080949C0 @ =0x0202BBF4
+	ldr r0, _080949C0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -250651,7 +250651,7 @@ _080949AE:
 	ldr r0, _080949C4 @ =0x00000387
 	b _08094AA4
 	.align 2, 0
-_080949C0: .4byte 0x0202BBF4
+_080949C0: .4byte gPlaySt
 _080949C4: .4byte 0x00000387
 _080949C8:
 	movs r0, #0x40
@@ -250694,7 +250694,7 @@ _08094A04:
 	str r0, [r4, #0x34]
 	b _08094A96
 _08094A14:
-	ldr r0, _08094A30 @ =0x08BBFC7C
+	ldr r0, _08094A30 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x40
 	ldrh r1, [r1, #8]
@@ -250708,7 +250708,7 @@ _08094A14:
 	str r0, [r4, #0x34]
 	b _08094A96
 	.align 2, 0
-_08094A30: .4byte 0x08BBFC7C
+_08094A30: .4byte gpKeySt
 _08094A34:
 	movs r0, #0x80
 	ands r0, r1
@@ -250751,7 +250751,7 @@ _08094A70:
 	str r0, [r4, #0x34]
 	b _08094A96
 _08094A82:
-	ldr r0, _08094AAC @ =0x08BBFC7C
+	ldr r0, _08094AAC @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x80
 	ldrh r1, [r1, #8]
@@ -250762,7 +250762,7 @@ _08094A82:
 	ands r2, r0
 	str r2, [r4, #0x34]
 _08094A96:
-	ldr r0, _08094AB0 @ =0x0202BBF4
+	ldr r0, _08094AB0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -250775,8 +250775,8 @@ _08094AA8:
 	movs r0, #1
 	b _08094ABA
 	.align 2, 0
-_08094AAC: .4byte 0x08BBFC7C
-_08094AB0: .4byte 0x0202BBF4
+_08094AAC: .4byte gpKeySt
+_08094AB0: .4byte gPlaySt
 _08094AB4: .4byte 0x00000386
 _08094AB8:
 	movs r0, #0
@@ -251259,7 +251259,7 @@ sub_08094EC0: @ 0x08094EC0
 	ldr r2, [r6, #0x3c]
 	cmp r2, #0xff
 	beq _08094EEC
-	ldr r0, _08094EE8 @ =0x08BBFC7C
+	ldr r0, _08094EE8 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x81
 	lsls r0, r0, #1
@@ -251273,9 +251273,9 @@ _08094EE0:
 	movs r0, #0xff
 	b _080951B4
 	.align 2, 0
-_08094EE8: .4byte 0x08BBFC7C
+_08094EE8: .4byte gpKeySt
 _08094EEC:
-	ldr r0, _08094F28 @ =0x08BBFC7C
+	ldr r0, _08094F28 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #0x80
@@ -251307,7 +251307,7 @@ _08094F1C:
 	lsls r1, r4, #4
 	b _080951AC
 	.align 2, 0
-_08094F28: .4byte 0x08BBFC7C
+_08094F28: .4byte gpKeySt
 _08094F2C:
 	ldr r4, [r6, #0x38]
 	cmp r4, #0xff
@@ -251413,7 +251413,7 @@ _08094FEC:
 _08095000:
 	str r0, [r6, #0x38]
 _08095002:
-	ldr r0, _08095040 @ =0x0202BBF4
+	ldr r0, _08095040 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -251443,7 +251443,7 @@ _08095014:
 	bl sub_080AA3F8
 	b _080951B6
 	.align 2, 0
-_08095040: .4byte 0x0202BBF4
+_08095040: .4byte gPlaySt
 _08095044: .4byte 0x0000038A
 _08095048:
 	movs r0, #2
@@ -251467,7 +251467,7 @@ _08095052:
 	lsls r3, r3, #4
 	movs r2, #0xb
 	bl sub_080AA3F8
-	ldr r0, _0809508C @ =0x0202BBF4
+	ldr r0, _0809508C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -251480,7 +251480,7 @@ _08095084:
 	bl sub_080A998C
 	b _080951B6
 	.align 2, 0
-_0809508C: .4byte 0x0202BBF4
+_0809508C: .4byte gPlaySt
 _08095090: .4byte 0x0000038B
 _08095094:
 	movs r2, #1
@@ -251542,7 +251542,7 @@ _080950EC:
 	lsls r3, r3, #4
 	movs r2, #0xb
 	bl sub_080AA3F8
-	ldr r0, _08095120 @ =0x0202BBF4
+	ldr r0, _08095120 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -251552,7 +251552,7 @@ _080950EC:
 	bl m4aSongNumStart
 	b _080951B6
 	.align 2, 0
-_08095120: .4byte 0x0202BBF4
+_08095120: .4byte gPlaySt
 _08095124: .4byte 0x0000038A
 _08095128:
 	movs r0, #2
@@ -251561,7 +251561,7 @@ _08095128:
 	beq _08095154
 	adds r0, r6, #0
 	bl sub_0800457C
-	ldr r0, _0809514C @ =0x0202BBF4
+	ldr r0, _0809514C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -251571,7 +251571,7 @@ _08095128:
 	bl m4aSongNumStart
 	b _080951B6
 	.align 2, 0
-_0809514C: .4byte 0x0202BBF4
+_0809514C: .4byte gPlaySt
 _08095150: .4byte 0x0000038B
 _08095154:
 	adds r0, r6, #0
@@ -251682,7 +251682,7 @@ _08095218: .4byte 0x08D8CF74
 sub_0809521C: @ 0x0809521C
 	push {r4, r5, r6, r7, lr}
 	adds r4, r0, #0
-	ldr r5, _08095248 @ =0x08BBFC7C
+	ldr r5, _08095248 @ =gpKeySt
 	ldr r0, [r5]
 	ldrh r1, [r0, #6]
 	movs r7, #0x40
@@ -251702,7 +251702,7 @@ sub_0809521C: @ 0x0809521C
 	str r0, [r4, #0x30]
 	b _0809528A
 	.align 2, 0
-_08095248: .4byte 0x08BBFC7C
+_08095248: .4byte gpKeySt
 _0809524C:
 	ldr r1, [r5]
 	adds r0, r7, #0
@@ -251737,7 +251737,7 @@ _0809527C:
 	beq _080952A8
 	str r6, [r4, #0x30]
 _0809528A:
-	ldr r0, _080952A0 @ =0x0202BBF4
+	ldr r0, _080952A0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -251749,7 +251749,7 @@ _0809529C:
 	movs r0, #1
 	b _080952AA
 	.align 2, 0
-_080952A0: .4byte 0x0202BBF4
+_080952A0: .4byte gPlaySt
 _080952A4: .4byte 0x00000386
 _080952A8:
 	movs r0, #0
@@ -252767,7 +252767,7 @@ sub_08095B64: @ 0x08095B64
 	ldr r0, [r4, #0x38]
 	cmp r0, #0xff
 	beq _08095B8C
-	ldr r0, _08095B88 @ =0x08BBFC7C
+	ldr r0, _08095B88 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x81
 	lsls r0, r0, #1
@@ -252779,9 +252779,9 @@ sub_08095B64: @ 0x08095B64
 	movs r0, #0xff
 	b _08095C88
 	.align 2, 0
-_08095B88: .4byte 0x08BBFC7C
+_08095B88: .4byte gpKeySt
 _08095B8C:
-	ldr r0, _08095BEC @ =0x08BBFC7C
+	ldr r0, _08095BEC @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #0x80
@@ -252813,7 +252813,7 @@ _08095B8C:
 	movs r3, #0
 	bl sub_080A98DC
 	str r5, [r4, #0x3c]
-	ldr r0, _08095BF0 @ =0x0202BBF4
+	ldr r0, _08095BF0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -252827,11 +252827,11 @@ _08095BE2:
 	bl sub_080045FC
 	b _08095C8A
 	.align 2, 0
-_08095BEC: .4byte 0x08BBFC7C
-_08095BF0: .4byte 0x0202BBF4
+_08095BEC: .4byte gpKeySt
+_08095BF0: .4byte gPlaySt
 _08095BF4: .4byte 0x0000038A
 _08095BF8:
-	ldr r0, _08095C10 @ =0x0202BBF4
+	ldr r0, _08095C10 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -252842,7 +252842,7 @@ _08095BF8:
 	bl m4aSongNumStart
 	b _08095C8A
 	.align 2, 0
-_08095C10: .4byte 0x0202BBF4
+_08095C10: .4byte gPlaySt
 _08095C14:
 	movs r0, #2
 	ands r0, r1
@@ -252851,7 +252851,7 @@ _08095C14:
 	adds r0, r4, #0
 	movs r1, #5
 	bl sub_080045FC
-	ldr r0, _08095C38 @ =0x0202BBF4
+	ldr r0, _08095C38 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -252861,7 +252861,7 @@ _08095C14:
 	bl m4aSongNumStart
 	b _08095C8A
 	.align 2, 0
-_08095C38: .4byte 0x0202BBF4
+_08095C38: .4byte gPlaySt
 _08095C3C: .4byte 0x0000038B
 _08095C40:
 	adds r0, r4, #0
@@ -253011,7 +253011,7 @@ sub_08095D58: @ 0x08095D58
 	movs r2, #0xb
 	movs r3, #4
 	bl sub_080935C4
-	ldr r5, _08095DB4 @ =0x08BBFC7C
+	ldr r5, _08095DB4 @ =gpKeySt
 	ldr r1, [r5]
 	ldrh r3, [r1, #8]
 	movs r0, #2
@@ -253029,7 +253029,7 @@ sub_08095D58: @ 0x08095D58
 	movs r0, #0
 	bl sub_080A998C
 	bl sub_08095D1C
-	ldr r0, _08095DB8 @ =0x0202BBF4
+	ldr r0, _08095DB8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -253040,8 +253040,8 @@ sub_08095D58: @ 0x08095D58
 	b _08095E26
 	.align 2, 0
 _08095DB0: .4byte 0x0000A580
-_08095DB4: .4byte 0x08BBFC7C
-_08095DB8: .4byte 0x0202BBF4
+_08095DB4: .4byte gpKeySt
+_08095DB8: .4byte gPlaySt
 _08095DBC: .4byte 0x0000038B
 _08095DC0:
 	movs r6, #1
@@ -253054,7 +253054,7 @@ _08095DC0:
 	cmp r0, #0
 	bne _08095DFC
 	bl sub_080AA440
-	ldr r0, _08095DF4 @ =0x0202BBF4
+	ldr r0, _08095DF4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -253068,7 +253068,7 @@ _08095DEA:
 	bl sub_080045FC
 	b _08095E7A
 	.align 2, 0
-_08095DF4: .4byte 0x0202BBF4
+_08095DF4: .4byte gPlaySt
 _08095DF8: .4byte 0x0000038A
 _08095DFC:
 	ldr r1, [r4, #0x30]
@@ -253079,7 +253079,7 @@ _08095DFC:
 	movs r0, #0x10
 	movs r2, #0xb
 	bl sub_080AA3F8
-	ldr r0, _08095E30 @ =0x0202BBF4
+	ldr r0, _08095E30 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -253095,7 +253095,7 @@ _08095E26:
 	bl sub_0800457C
 	b _08095E7A
 	.align 2, 0
-_08095E30: .4byte 0x0202BBF4
+_08095E30: .4byte gPlaySt
 _08095E34: .4byte 0x0000038B
 _08095E38:
 	movs r0, #0x20
@@ -253123,7 +253123,7 @@ _08095E52:
 	movs r1, #0x78
 	movs r2, #0
 	bl sub_080AA3F8
-	ldr r0, _08095E84 @ =0x0202BBF4
+	ldr r0, _08095E84 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -253137,7 +253137,7 @@ _08095E7A:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08095E84: .4byte 0x0202BBF4
+_08095E84: .4byte gPlaySt
 _08095E88: .4byte 0x00000387
 
 	thumb_func_start sub_08095E8C
@@ -253215,7 +253215,7 @@ _08095EB4: @ jump table
 	.4byte _08095F9E @ case 50
 	.4byte _08095F84 @ case 51
 _08095F84:
-	ldr r0, _08095FA4 @ =0x0202BBF4
+	ldr r0, _08095FA4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -253232,7 +253232,7 @@ _08095F9E:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08095FA4: .4byte 0x0202BBF4
+_08095FA4: .4byte gPlaySt
 _08095FA8: .4byte 0x0000038A
 
 	thumb_func_start sub_08095FAC
@@ -253646,7 +253646,7 @@ _08096302:
 	ble _080962D4
 	movs r0, #0x78
 	str r0, [r7, #0x2c]
-	ldr r0, _08096328 @ =0x0202BBF4
+	ldr r0, _08096328 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -253660,7 +253660,7 @@ _0809631E:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08096328: .4byte 0x0202BBF4
+_08096328: .4byte gPlaySt
 _0809632C: .4byte 0x0000037A
 
 	thumb_func_start sub_08096330
@@ -253680,7 +253680,7 @@ sub_08096330: @ 0x08096330
 	str r0, [r5, #0x2c]
 	cmp r0, #0
 	beq _0809635E
-	ldr r0, _08096370 @ =0x08BBFC7C
+	ldr r0, _08096370 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #3
 	ldrh r1, [r1, #8]
@@ -253697,7 +253697,7 @@ _08096364:
 	bx r0
 	.align 2, 0
 _0809636C: .4byte 0x0000A580
-_08096370: .4byte 0x08BBFC7C
+_08096370: .4byte gpKeySt
 
 	thumb_func_start sub_08096374
 sub_08096374: @ 0x08096374
@@ -254938,7 +254938,7 @@ sub_08096DEC: @ 0x08096DEC
 	beq _08096DFE
 	b _08096F58
 _08096DFE:
-	ldr r1, _08096E1C @ =0x08BBFC7C
+	ldr r1, _08096E1C @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r3, [r0, #8]
 	movs r7, #1
@@ -254955,7 +254955,7 @@ _08096E12:
 	beq _08096E8C
 	b _0809700C
 	.align 2, 0
-_08096E1C: .4byte 0x08BBFC7C
+_08096E1C: .4byte gpKeySt
 _08096E20:
 	bl sub_0809158C
 	lsls r0, r0, #0x18
@@ -254982,7 +254982,7 @@ _08096E20:
 	movs r0, #1
 	adds r1, r5, #0
 	bl sub_08096430
-	ldr r0, _08096E84 @ =0x0202BBF4
+	ldr r0, _08096E84 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -254998,7 +254998,7 @@ _08096E72:
 	.align 2, 0
 _08096E7C: .4byte sub_080968E8
 _08096E80: .4byte sub_08096938
-_08096E84: .4byte 0x0202BBF4
+_08096E84: .4byte gPlaySt
 _08096E88: .4byte 0x0000038A
 _08096E8C:
 	ldr r0, [r5, #0x2c]
@@ -255021,7 +255021,7 @@ _08096E8C:
 	movs r0, #2
 	adds r1, r5, #0
 	bl sub_08096430
-	ldr r0, _08096EE4 @ =0x0202BBF4
+	ldr r0, _08096EE4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -255037,10 +255037,10 @@ _08096ED2:
 	.align 2, 0
 _08096EDC: .4byte sub_080968E8
 _08096EE0: .4byte sub_08096970
-_08096EE4: .4byte 0x0202BBF4
+_08096EE4: .4byte gPlaySt
 _08096EE8: .4byte 0x0000038A
 _08096EEC:
-	ldr r0, _08096F04 @ =0x0202BBF4
+	ldr r0, _08096F04 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -255053,7 +255053,7 @@ _08096EFA:
 	bl m4aSongNumStart
 	b _0809700C
 	.align 2, 0
-_08096F04: .4byte 0x0202BBF4
+_08096F04: .4byte gPlaySt
 _08096F08:
 	movs r0, #2
 	ands r0, r3
@@ -255062,7 +255062,7 @@ _08096F08:
 	adds r0, r5, #0
 	movs r1, #8
 	bl sub_080045FC
-	ldr r0, _08096F2C @ =0x0202BBF4
+	ldr r0, _08096F2C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -255072,7 +255072,7 @@ _08096F08:
 	bl m4aSongNumStart
 	b _0809700C
 	.align 2, 0
-_08096F2C: .4byte 0x0202BBF4
+_08096F2C: .4byte gPlaySt
 _08096F30: .4byte 0x0000038B
 _08096F34:
 	movs r0, #0x80
@@ -255093,7 +255093,7 @@ _08096F34:
 	.align 2, 0
 _08096F54: .4byte 0x08D8D118
 _08096F58:
-	ldr r2, _08096F74 @ =0x08BBFC7C
+	ldr r2, _08096F74 @ =gpKeySt
 	ldr r1, [r2]
 	movs r0, #0x81
 	lsls r0, r0, #1
@@ -255106,7 +255106,7 @@ _08096F58:
 	strh r0, [r5, #0x38]
 	b _0809700C
 	.align 2, 0
-_08096F74: .4byte 0x08BBFC7C
+_08096F74: .4byte gpKeySt
 _08096F78:
 	ldr r3, [r2]
 	movs r1, #0x40
@@ -255157,7 +255157,7 @@ _08096FC8:
 	ldrb r0, [r4]
 	cmp r6, r0
 	beq _0809700C
-	ldr r0, _08097014 @ =0x0202BBF4
+	ldr r0, _08097014 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -255191,7 +255191,7 @@ _0809700C:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08097014: .4byte 0x0202BBF4
+_08097014: .4byte gPlaySt
 _08097018: .4byte 0x00000386
 _0809701C: .4byte 0x08D8D118
 
@@ -255705,7 +255705,7 @@ sub_080973EC: @ 0x080973EC
 	cmp r0, #0
 	bne _08097428
 _08097408:
-	ldr r0, _08097424 @ =0x0202BBF4
+	ldr r0, _08097424 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -255719,7 +255719,7 @@ _08097416:
 	b _0809753A
 	.align 2, 0
 _08097420: .4byte 0x02012466
-_08097424: .4byte 0x0202BBF4
+_08097424: .4byte gPlaySt
 _08097428:
 	movs r5, #0
 	strh r5, [r7, #0x38]
@@ -255810,7 +255810,7 @@ _08097428:
 	adds r0, r7, #0
 	movs r1, #1
 	bl sub_080045FC
-	ldr r0, _08097520 @ =0x0202BBF4
+	ldr r0, _08097520 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -255826,10 +255826,10 @@ _08097510: .4byte 0x02012B78
 _08097514: .4byte 0x02023C7E
 _08097518: .4byte sub_080973E0
 _0809751C: .4byte 0x0203A858
-_08097520: .4byte 0x0202BBF4
+_08097520: .4byte gPlaySt
 _08097524: .4byte 0x0000038B
 _08097528:
-	ldr r0, _08097544 @ =0x0202BBF4
+	ldr r0, _08097544 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -255844,7 +255844,7 @@ _0809753A:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08097544: .4byte 0x0202BBF4
+_08097544: .4byte gPlaySt
 _08097548: .4byte 0x0000038A
 
 	thumb_func_start sub_0809754C
@@ -255882,7 +255882,7 @@ _08097580:
 	cmp r0, #0xff
 	bne _0809762C
 _0809758A:
-	ldr r1, _080975C4 @ =0x08BBFC7C
+	ldr r1, _080975C4 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r3, [r0, #8]
 	movs r0, #0x80
@@ -255911,11 +255911,11 @@ _0809758A:
 	strh r0, [r4, #0x38]
 	b _080978CA
 	.align 2, 0
-_080975C4: .4byte 0x08BBFC7C
+_080975C4: .4byte gpKeySt
 _080975C8: .4byte 0x02012466
 _080975CC: .4byte 0x020117E4
 _080975D0:
-	ldr r0, _080975E8 @ =0x0202BBF4
+	ldr r0, _080975E8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -255928,7 +255928,7 @@ _080975DE:
 	bl m4aSongNumStart
 	b _080978CA
 	.align 2, 0
-_080975E8: .4byte 0x0202BBF4
+_080975E8: .4byte gPlaySt
 _080975EC:
 	movs r0, #1
 	ands r0, r3
@@ -255945,7 +255945,7 @@ _080975FC:
 	adds r0, r4, #0
 	movs r1, #1
 	bl sub_080045FC
-	ldr r0, _08097624 @ =0x0202BBF4
+	ldr r0, _08097624 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -255958,10 +255958,10 @@ _0809761E:
 	strh r0, [r4, #0x38]
 	b _080978CA
 	.align 2, 0
-_08097624: .4byte 0x0202BBF4
+_08097624: .4byte gPlaySt
 _08097628: .4byte 0x0000038B
 _0809762C:
-	ldr r2, _08097648 @ =0x08BBFC7C
+	ldr r2, _08097648 @ =gpKeySt
 	ldr r1, [r2]
 	movs r0, #0x81
 	lsls r0, r0, #1
@@ -255975,7 +255975,7 @@ _0809762C:
 	strh r1, [r4, #0x38]
 	b _080978CA
 	.align 2, 0
-_08097648: .4byte 0x08BBFC7C
+_08097648: .4byte gpKeySt
 _0809764C:
 	mov r3, r8
 	ldr r2, [r3]
@@ -255988,7 +255988,7 @@ _0809764C:
 	beq _08097698
 	movs r0, #0
 	bl sub_080A9CAC
-	ldr r0, _08097690 @ =0x0202BBF4
+	ldr r0, _08097690 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -256008,7 +256008,7 @@ _08097676:
 	bl sub_080970D4
 	b _080978CA
 	.align 2, 0
-_08097690: .4byte 0x0202BBF4
+_08097690: .4byte gPlaySt
 _08097694: .4byte 0x00000387
 _08097698:
 	movs r0, #0x10
@@ -256017,7 +256017,7 @@ _08097698:
 	beq _080976D8
 	movs r0, #1
 	bl sub_080A9CAC
-	ldr r0, _080976D0 @ =0x0202BBF4
+	ldr r0, _080976D0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -256036,7 +256036,7 @@ _080976B8:
 	bl sub_08097178
 	b _080978CA
 	.align 2, 0
-_080976D0: .4byte 0x0202BBF4
+_080976D0: .4byte gPlaySt
 _080976D4: .4byte 0x00000387
 _080976D8:
 	movs r0, #0x80
@@ -256184,7 +256184,7 @@ _080977D6:
 	adds r0, r0, r1
 	ldrh r0, [r0, #2]
 	mov sb, r0
-	ldr r0, _08097840 @ =0x0202BBF4
+	ldr r0, _08097840 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -256225,7 +256225,7 @@ _0809782E:
 	b _08097880
 	.align 2, 0
 _0809783C: .4byte 0x020117E4
-_08097840: .4byte 0x0202BBF4
+_08097840: .4byte gPlaySt
 _08097844: .4byte 0x00000386
 _08097848:
 	ldrb r1, [r7]
@@ -256306,7 +256306,7 @@ _080978CA:
 sub_080978D8: @ 0x080978D8
 	push {r4, r5, r6, r7, lr}
 	adds r4, r0, #0
-	ldr r6, _08097908 @ =0x08BBFC7C
+	ldr r6, _08097908 @ =gpKeySt
 	ldr r0, [r6]
 	ldrh r1, [r0, #6]
 	movs r7, #0x40
@@ -256328,7 +256328,7 @@ sub_080978D8: @ 0x080978D8
 	strb r0, [r2]
 	b _0809794E
 	.align 2, 0
-_08097908: .4byte 0x08BBFC7C
+_08097908: .4byte gpKeySt
 _0809790C:
 	ldr r1, [r6]
 	adds r0, r7, #0
@@ -256365,7 +256365,7 @@ _08097940:
 	beq _0809796C
 	strb r5, [r2]
 _0809794E:
-	ldr r0, _08097964 @ =0x0202BBF4
+	ldr r0, _08097964 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -256377,7 +256377,7 @@ _08097960:
 	movs r0, #1
 	b _0809796E
 	.align 2, 0
-_08097964: .4byte 0x0202BBF4
+_08097964: .4byte gPlaySt
 _08097968: .4byte 0x00000386
 _0809796C:
 	movs r0, #0
@@ -256480,7 +256480,7 @@ _08097A3A:
 	adds r0, r5, #0
 	movs r1, #1
 	bl sub_080045FC
-	ldr r0, _08097A6C @ =0x0202BBF4
+	ldr r0, _08097A6C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -256495,10 +256495,10 @@ _08097A5C: .4byte 0x02012B78
 _08097A60: .4byte 0x02023C7E
 _08097A64: .4byte sub_080973E0
 _08097A68: .4byte 0x0203A858
-_08097A6C: .4byte 0x0202BBF4
+_08097A6C: .4byte gPlaySt
 _08097A70: .4byte 0x0000038B
 _08097A74:
-	ldr r0, _08097AA8 @ =0x0202BBF4
+	ldr r0, _08097AA8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -256524,7 +256524,7 @@ _08097AA0:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08097AA8: .4byte 0x0202BBF4
+_08097AA8: .4byte gPlaySt
 _08097AAC: .4byte 0x0000038A
 
 	thumb_func_start sub_08097AB0
@@ -256534,7 +256534,7 @@ sub_08097AB0: @ 0x08097AB0
 	ldrh r0, [r4, #0x38]
 	cmp r0, #1
 	bne _08097AD8
-	ldr r0, _08097AD4 @ =0x08BBFC7C
+	ldr r0, _08097AD4 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x81
 	lsls r0, r0, #1
@@ -256547,9 +256547,9 @@ sub_08097AB0: @ 0x08097AB0
 	strh r0, [r4, #0x38]
 	b _08097BB6
 	.align 2, 0
-_08097AD4: .4byte 0x08BBFC7C
+_08097AD4: .4byte gpKeySt
 _08097AD8:
-	ldr r0, _08097B0C @ =0x08BBFC7C
+	ldr r0, _08097B0C @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #0x80
@@ -256575,7 +256575,7 @@ _08097AD8:
 	strh r0, [r4, #0x38]
 	b _08097BB6
 	.align 2, 0
-_08097B0C: .4byte 0x08BBFC7C
+_08097B0C: .4byte gpKeySt
 _08097B10:
 	movs r0, #1
 	ands r0, r1
@@ -256610,7 +256610,7 @@ _08097B48:
 	adds r0, r4, #0
 	movs r1, #1
 	bl sub_080045FC
-	ldr r0, _08097B6C @ =0x0202BBF4
+	ldr r0, _08097B6C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -256620,7 +256620,7 @@ _08097B48:
 	bl m4aSongNumStart
 	b _08097BB6
 	.align 2, 0
-_08097B6C: .4byte 0x0202BBF4
+_08097B6C: .4byte gPlaySt
 _08097B70: .4byte 0x0000038B
 _08097B74:
 	adds r0, r4, #0
@@ -257827,7 +257827,7 @@ sub_08098558: @ 0x08098558
 	cmp r0, #0
 	bne _08098598
 _08098576:
-	ldr r0, _08098594 @ =0x0202BBF4
+	ldr r0, _08098594 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -257841,7 +257841,7 @@ _08098584:
 	b _080986AA
 	.align 2, 0
 _08098590: .4byte 0x02012466
-_08098594: .4byte 0x0202BBF4
+_08098594: .4byte gPlaySt
 _08098598:
 	movs r4, #0
 	strh r4, [r6, #0x36]
@@ -257936,7 +257936,7 @@ _08098632:
 	adds r0, r6, #0
 	movs r1, #1
 	bl sub_080045FC
-	ldr r0, _08098690 @ =0x0202BBF4
+	ldr r0, _08098690 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -257951,10 +257951,10 @@ _08098680: .4byte 0x02022EA4
 _08098684: .4byte 0x02012B78
 _08098688: .4byte 0x02023C7E
 _0809868C: .4byte sub_08097D1C
-_08098690: .4byte 0x0202BBF4
+_08098690: .4byte gPlaySt
 _08098694: .4byte 0x0000038B
 _08098698:
-	ldr r0, _080986B8 @ =0x0202BBF4
+	ldr r0, _080986B8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -257970,7 +257970,7 @@ _080986AA:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080986B8: .4byte 0x0202BBF4
+_080986B8: .4byte gPlaySt
 _080986BC: .4byte 0x0000038A
 
 	thumb_func_start sub_080986C0
@@ -258086,7 +258086,7 @@ _08098788:
 	beq _08098794
 	b _08098890
 _08098794:
-	ldr r1, _080987D0 @ =0x08BBFC7C
+	ldr r1, _080987D0 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r3, [r0, #8]
 	movs r0, #0x80
@@ -258115,7 +258115,7 @@ _08098794:
 	strh r0, [r4, #0x36]
 	b _08098B52
 	.align 2, 0
-_080987D0: .4byte 0x08BBFC7C
+_080987D0: .4byte gpKeySt
 _080987D4: .4byte 0x02012466
 _080987D8: .4byte 0x020117E4
 _080987DC:
@@ -258128,7 +258128,7 @@ _080987DC:
 	cmp r0, #0
 	bne _0809880C
 _080987EC:
-	ldr r0, _08098808 @ =0x0202BBF4
+	ldr r0, _08098808 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -258142,7 +258142,7 @@ _080987FA:
 	b _08098B52
 	.align 2, 0
 _08098804: .4byte 0x02012466
-_08098808: .4byte 0x0202BBF4
+_08098808: .4byte gPlaySt
 _0809880C:
 	ldr r0, _08098834 @ =0x020117E4
 	mov r2, sb
@@ -258169,7 +258169,7 @@ _08098838:
 	movs r1, #6
 _0809883C:
 	bl sub_080045FC
-	ldr r0, _08098858 @ =0x0202BBF4
+	ldr r0, _08098858 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -258181,7 +258181,7 @@ _0809884E:
 	bl m4aSongNumStart
 	b _08098B52
 	.align 2, 0
-_08098858: .4byte 0x0202BBF4
+_08098858: .4byte gPlaySt
 _0809885C: .4byte 0x0000038A
 _08098860:
 	movs r0, #2
@@ -258191,7 +258191,7 @@ _08098860:
 	adds r0, r4, #0
 	movs r1, #8
 	bl sub_080045FC
-	ldr r0, _08098888 @ =0x0202BBF4
+	ldr r0, _08098888 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -258204,10 +258204,10 @@ _08098882:
 	strh r3, [r4, #0x36]
 	b _08098B52
 	.align 2, 0
-_08098888: .4byte 0x0202BBF4
+_08098888: .4byte gPlaySt
 _0809888C: .4byte 0x0000038B
 _08098890:
-	ldr r2, _080988AC @ =0x08BBFC7C
+	ldr r2, _080988AC @ =gpKeySt
 	ldr r1, [r2]
 	movs r0, #0x81
 	lsls r0, r0, #1
@@ -258221,7 +258221,7 @@ _08098890:
 	strh r0, [r4, #0x36]
 	b _08098B52
 	.align 2, 0
-_080988AC: .4byte 0x08BBFC7C
+_080988AC: .4byte gpKeySt
 _080988B0:
 	mov r1, r8
 	ldr r2, [r1]
@@ -258234,7 +258234,7 @@ _080988B0:
 	beq _080988FC
 	movs r0, #0
 	bl sub_080A9CAC
-	ldr r0, _080988F4 @ =0x0202BBF4
+	ldr r0, _080988F4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -258254,7 +258254,7 @@ _080988DA:
 	bl sub_080982D8
 	b _08098B52
 	.align 2, 0
-_080988F4: .4byte 0x0202BBF4
+_080988F4: .4byte gPlaySt
 _080988F8: .4byte 0x00000387
 _080988FC:
 	movs r0, #0x10
@@ -258263,7 +258263,7 @@ _080988FC:
 	beq _0809893C
 	movs r0, #1
 	bl sub_080A9CAC
-	ldr r0, _08098934 @ =0x0202BBF4
+	ldr r0, _08098934 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -258282,7 +258282,7 @@ _0809891C:
 	bl sub_08098384
 	b _08098B52
 	.align 2, 0
-_08098934: .4byte 0x0202BBF4
+_08098934: .4byte gPlaySt
 _08098938: .4byte 0x00000387
 _0809893C:
 	movs r0, #0x80
@@ -258433,7 +258433,7 @@ _08098A4A:
 	adds r0, r0, r5
 	ldrh r0, [r0, #2]
 	mov sl, r0
-	ldr r0, _08098AC8 @ =0x0202BBF4
+	ldr r0, _08098AC8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -258490,7 +258490,7 @@ _08098AB6:
 	b _08098B08
 	.align 2, 0
 _08098AC4: .4byte 0x020117E4
-_08098AC8: .4byte 0x0202BBF4
+_08098AC8: .4byte gPlaySt
 _08098ACC: .4byte 0x00000386
 _08098AD0:
 	ldrb r1, [r7]
@@ -258590,7 +258590,7 @@ _08098B7C:
 _08098B84:
 	cmp r1, #0
 	beq _08098C04
-	ldr r1, _08098BA8 @ =0x08BBFC7C
+	ldr r1, _08098BA8 @ =gpKeySt
 	ldr r5, [r1]
 	movs r6, #0x40
 	adds r0, r6, #0
@@ -258607,7 +258607,7 @@ _08098B84:
 	strb r0, [r2]
 	b _08098BB8
 	.align 2, 0
-_08098BA8: .4byte 0x08BBFC7C
+_08098BA8: .4byte gpKeySt
 _08098BAC:
 	adds r0, r6, #0
 	ldrh r5, [r5, #8]
@@ -258641,7 +258641,7 @@ _08098BDE:
 	ldrb r2, [r2]
 	cmp r7, r2
 	beq _08098C04
-	ldr r0, _08098BFC @ =0x0202BBF4
+	ldr r0, _08098BFC @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -258653,7 +258653,7 @@ _08098BF6:
 	movs r0, #1
 	b _08098C06
 	.align 2, 0
-_08098BFC: .4byte 0x0202BBF4
+_08098BFC: .4byte gPlaySt
 _08098C00: .4byte 0x00000386
 _08098C04:
 	movs r0, #0
@@ -258757,7 +258757,7 @@ _08098C90:
 	bl sub_080A9D28
 	movs r0, #4
 	bl sub_08000FD4
-	ldr r0, _08098CFC @ =0x0202BBF4
+	ldr r0, _08098CFC @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -258775,7 +258775,7 @@ _08098CEC: .4byte 0x02022EA4
 _08098CF0: .4byte 0x02012B78
 _08098CF4: .4byte 0x02023C7E
 _08098CF8: .4byte sub_08097D1C
-_08098CFC: .4byte 0x0202BBF4
+_08098CFC: .4byte gPlaySt
 _08098D00: .4byte 0x0000038A
 
 	thumb_func_start sub_08098D04
@@ -258785,7 +258785,7 @@ sub_08098D04: @ 0x08098D04
 	ldrh r0, [r5, #0x36]
 	cmp r0, #1
 	bne _08098D2C
-	ldr r0, _08098D28 @ =0x08BBFC7C
+	ldr r0, _08098D28 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x81
 	lsls r0, r0, #1
@@ -258798,9 +258798,9 @@ sub_08098D04: @ 0x08098D04
 	strh r0, [r5, #0x36]
 	b _08098E36
 	.align 2, 0
-_08098D28: .4byte 0x08BBFC7C
+_08098D28: .4byte gpKeySt
 _08098D2C:
-	ldr r0, _08098D60 @ =0x08BBFC7C
+	ldr r0, _08098D60 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #0x80
@@ -258826,7 +258826,7 @@ _08098D2C:
 	strh r0, [r5, #0x36]
 	b _08098E36
 	.align 2, 0
-_08098D60: .4byte 0x08BBFC7C
+_08098D60: .4byte gpKeySt
 _08098D64:
 	movs r0, #1
 	ands r0, r1
@@ -258879,7 +258879,7 @@ _08098DC4:
 	bl sub_080A998C
 	adds r0, r5, #0
 	bl sub_0800457C
-	ldr r0, _08098DEC @ =0x0202BBF4
+	ldr r0, _08098DEC @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -258889,7 +258889,7 @@ _08098DC4:
 	bl m4aSongNumStart
 	b _08098E36
 	.align 2, 0
-_08098DEC: .4byte 0x0202BBF4
+_08098DEC: .4byte gPlaySt
 _08098DF0: .4byte 0x0000038B
 _08098DF4:
 	adds r0, r5, #0
@@ -259621,7 +259621,7 @@ _08099434: .4byte sub_08099050
 sub_08099438: @ 0x08099438
 	push {r4, r5, r6, r7, lr}
 	adds r4, r0, #0
-	ldr r6, _08099468 @ =0x08BBFC7C
+	ldr r6, _08099468 @ =gpKeySt
 	ldr r0, [r6]
 	ldrh r1, [r0, #6]
 	movs r7, #0x40
@@ -259643,7 +259643,7 @@ sub_08099438: @ 0x08099438
 	strb r0, [r2]
 	b _080994AE
 	.align 2, 0
-_08099468: .4byte 0x08BBFC7C
+_08099468: .4byte gpKeySt
 _0809946C:
 	ldr r1, [r6]
 	adds r0, r7, #0
@@ -259680,7 +259680,7 @@ _080994A0:
 	beq _080994CC
 	strb r5, [r2]
 _080994AE:
-	ldr r0, _080994C4 @ =0x0202BBF4
+	ldr r0, _080994C4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -259692,7 +259692,7 @@ _080994C0:
 	movs r0, #1
 	b _080994CE
 	.align 2, 0
-_080994C4: .4byte 0x0202BBF4
+_080994C4: .4byte gPlaySt
 _080994C8: .4byte 0x00000386
 _080994CC:
 	movs r0, #0
@@ -259750,7 +259750,7 @@ sub_08099534: @ 0x08099534
 	ldrh r0, [r4, #0x34]
 	cmp r0, #1
 	bne _0809955C
-	ldr r0, _08099558 @ =0x08BBFC7C
+	ldr r0, _08099558 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x81
 	lsls r0, r0, #1
@@ -259763,9 +259763,9 @@ sub_08099534: @ 0x08099534
 	strh r0, [r4, #0x34]
 	b _08099682
 	.align 2, 0
-_08099558: .4byte 0x08BBFC7C
+_08099558: .4byte gpKeySt
 _0809955C:
-	ldr r0, _08099594 @ =0x08BBFC7C
+	ldr r0, _08099594 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #0x80
@@ -259793,7 +259793,7 @@ _08099582:
 	strh r0, [r4, #0x34]
 	b _08099682
 	.align 2, 0
-_08099594: .4byte 0x08BBFC7C
+_08099594: .4byte gpKeySt
 _08099598:
 	movs r0, #1
 	ands r0, r1
@@ -259833,7 +259833,7 @@ _080995E0:
 	adds r0, r4, #0
 	movs r1, #2
 	bl sub_080045FC
-	ldr r0, _080995FC @ =0x0202BBF4
+	ldr r0, _080995FC @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -259843,7 +259843,7 @@ _080995E0:
 	bl m4aSongNumStart
 	b _08099682
 	.align 2, 0
-_080995FC: .4byte 0x0202BBF4
+_080995FC: .4byte gPlaySt
 _08099600: .4byte 0x0000038A
 _08099604:
 	movs r0, #2
@@ -259853,7 +259853,7 @@ _08099604:
 	adds r0, r4, #0
 	movs r1, #3
 	bl sub_080045FC
-	ldr r0, _08099628 @ =0x0202BBF4
+	ldr r0, _08099628 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -259863,7 +259863,7 @@ _08099604:
 	bl m4aSongNumStart
 	b _08099682
 	.align 2, 0
-_08099628: .4byte 0x0202BBF4
+_08099628: .4byte gPlaySt
 _0809962C: .4byte 0x0000038B
 _08099630:
 	adds r0, r4, #0
@@ -259970,7 +259970,7 @@ sub_080996D4: @ 0x080996D4
 	strh r1, [r0]
 	ldr r0, [r4, #0x2c]
 	bl UnitRemoveInvalidItems
-	ldr r0, _08099740 @ =0x0202BBF4
+	ldr r0, _08099740 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -259994,7 +259994,7 @@ _0809971A:
 	bl sub_080045FC
 	b _0809975E
 	.align 2, 0
-_08099740: .4byte 0x0202BBF4
+_08099740: .4byte gPlaySt
 _08099744: .4byte 0x02022EA4
 _08099748: .4byte 0x02012B78
 _0809974C:
@@ -260019,7 +260019,7 @@ sub_08099764: @ 0x08099764
 	adds r4, r2, #0
 	adds r4, #0x31
 	ldrb r5, [r4]
-	ldr r6, _08099788 @ =0x08BBFC7C
+	ldr r6, _08099788 @ =gpKeySt
 	ldr r1, [r6]
 	ldrh r3, [r1, #8]
 	movs r0, #1
@@ -260032,7 +260032,7 @@ sub_08099764: @ 0x08099764
 	bl sub_080996D4
 	b _08099802
 	.align 2, 0
-_08099788: .4byte 0x08BBFC7C
+_08099788: .4byte gpKeySt
 _0809978C:
 	movs r0, #2
 	ands r0, r3
@@ -260044,7 +260044,7 @@ _08099798:
 	adds r0, r2, #0
 	movs r1, #1
 	bl sub_080045FC
-	ldr r0, _080997B4 @ =0x0202BBF4
+	ldr r0, _080997B4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -260054,7 +260054,7 @@ _08099798:
 	bl m4aSongNumStart
 	b _08099802
 	.align 2, 0
-_080997B4: .4byte 0x0202BBF4
+_080997B4: .4byte gPlaySt
 _080997B8: .4byte 0x0000038B
 _080997BC:
 	movs r0, #0x20
@@ -260076,7 +260076,7 @@ _080997D8:
 	ldrb r0, [r4]
 	cmp r5, r0
 	beq _08099802
-	ldr r0, _08099808 @ =0x0202BBF4
+	ldr r0, _08099808 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -260098,7 +260098,7 @@ _08099802:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08099808: .4byte 0x0202BBF4
+_08099808: .4byte gPlaySt
 _0809980C: .4byte 0x00000387
 
 	thumb_func_start sub_08099810
@@ -260289,7 +260289,7 @@ sub_0809997C: @ 0x0809997C
 	adds r3, r5, #0
 	adds r3, #0x29
 	ldrb r4, [r3]
-	ldr r2, _08099A0C @ =0x08BBFC7C
+	ldr r2, _08099A0C @ =gpKeySt
 	ldr r1, [r2]
 	movs r0, #0x20
 	ldrh r1, [r1, #6]
@@ -260348,7 +260348,7 @@ _080999EE:
 	ldrb r3, [r3]
 	cmp r4, r3
 	beq _08099A18
-	ldr r0, _08099A10 @ =0x0202BBF4
+	ldr r0, _08099A10 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -260360,8 +260360,8 @@ _08099A06:
 	movs r0, #1
 	b _08099A1A
 	.align 2, 0
-_08099A0C: .4byte 0x08BBFC7C
-_08099A10: .4byte 0x0202BBF4
+_08099A0C: .4byte gpKeySt
+_08099A10: .4byte gPlaySt
 _08099A14: .4byte 0x00000385
 _08099A18:
 	movs r0, #0
@@ -260374,7 +260374,7 @@ _08099A1A:
 sub_08099A20: @ 0x08099A20
 	push {r4, r5, r6, lr}
 	adds r4, r0, #0
-	ldr r0, _08099A54 @ =0x08BBFC7C
+	ldr r0, _08099A54 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r6, #1
@@ -260398,7 +260398,7 @@ sub_08099A20: @ 0x08099A20
 	beq _08099A62
 	b _08099A98
 	.align 2, 0
-_08099A54: .4byte 0x08BBFC7C
+_08099A54: .4byte gpKeySt
 _08099A58:
 	cmp r1, #2
 	beq _08099A68
@@ -260422,7 +260422,7 @@ _08099A74:
 	movs r1, #5
 _08099A78:
 	bl sub_080045FC
-	ldr r0, _08099A90 @ =0x0202BBF4
+	ldr r0, _08099A90 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -260432,10 +260432,10 @@ _08099A78:
 	bl m4aSongNumStart
 	b _08099B20
 	.align 2, 0
-_08099A90: .4byte 0x0202BBF4
+_08099A90: .4byte gPlaySt
 _08099A94: .4byte 0x0000038A
 _08099A98:
-	ldr r0, _08099AB0 @ =0x0202BBF4
+	ldr r0, _08099AB0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -260446,7 +260446,7 @@ _08099A98:
 	bl m4aSongNumStart
 	b _08099B20
 	.align 2, 0
-_08099AB0: .4byte 0x0202BBF4
+_08099AB0: .4byte gPlaySt
 _08099AB4:
 	movs r0, #2
 	ands r0, r1
@@ -260455,7 +260455,7 @@ _08099AB4:
 	adds r0, r4, #0
 	movs r1, #6
 	bl sub_080045FC
-	ldr r0, _08099AD8 @ =0x0202BBF4
+	ldr r0, _08099AD8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -260465,7 +260465,7 @@ _08099AB4:
 	bl m4aSongNumStart
 	b _08099B20
 	.align 2, 0
-_08099AD8: .4byte 0x0202BBF4
+_08099AD8: .4byte gPlaySt
 _08099ADC: .4byte 0x0000038B
 _08099AE0:
 	adds r0, r4, #0
@@ -260601,7 +260601,7 @@ _08099BD6:
 	asrs r0, r0, #0x18
 	b _08099BF2
 _08099BDC:
-	ldr r0, _08099BEC @ =0x0202BBF4
+	ldr r0, _08099BEC @ =gPlaySt
 	adds r0, #0x2b
 	ldrb r0, [r0]
 	ands r1, r0
@@ -260611,7 +260611,7 @@ _08099BE8:
 	movs r0, #1
 	b _08099BF2
 	.align 2, 0
-_08099BEC: .4byte 0x0202BBF4
+_08099BEC: .4byte gPlaySt
 _08099BF0:
 	movs r0, #0
 _08099BF2:
@@ -260622,7 +260622,7 @@ _08099BF2:
 	thumb_func_start sub_08099BF8
 sub_08099BF8: @ 0x08099BF8
 	push {lr}
-	ldr r0, _08099C10 @ =0x0202BBF4
+	ldr r0, _08099C10 @ =gPlaySt
 	ldrb r1, [r0, #0x1b]
 	cmp r1, #3
 	bne _08099C14
@@ -260633,7 +260633,7 @@ sub_08099BF8: @ 0x08099BF8
 	adds r0, #0x78
 	b _08099C20
 	.align 2, 0
-_08099C10: .4byte 0x0202BBF4
+_08099C10: .4byte gPlaySt
 _08099C14:
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
@@ -260649,7 +260649,7 @@ _08099C20:
 	thumb_func_start sub_08099C28
 sub_08099C28: @ 0x08099C28
 	push {lr}
-	ldr r0, _08099C40 @ =0x0202BBF4
+	ldr r0, _08099C40 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -260659,12 +260659,12 @@ sub_08099C28: @ 0x08099C28
 	pop {r1}
 	bx r1
 	.align 2, 0
-_08099C40: .4byte 0x0202BBF4
+_08099C40: .4byte gPlaySt
 
 	thumb_func_start sub_08099C44
 sub_08099C44: @ 0x08099C44
 	push {lr}
-	ldr r0, _08099C5C @ =0x0202BBF4
+	ldr r0, _08099C5C @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -260674,12 +260674,12 @@ sub_08099C44: @ 0x08099C44
 	pop {r1}
 	bx r1
 	.align 2, 0
-_08099C5C: .4byte 0x0202BBF4
+_08099C5C: .4byte gPlaySt
 
 	thumb_func_start sub_08099C60
 sub_08099C60: @ 0x08099C60
 	push {lr}
-	ldr r0, _08099C78 @ =0x0202BBF4
+	ldr r0, _08099C78 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -260689,12 +260689,12 @@ sub_08099C60: @ 0x08099C60
 	pop {r1}
 	bx r1
 	.align 2, 0
-_08099C78: .4byte 0x0202BBF4
+_08099C78: .4byte gPlaySt
 
 	thumb_func_start sub_08099C7C
 sub_08099C7C: @ 0x08099C7C
 	push {lr}
-	ldr r0, _08099C94 @ =0x0202BBF4
+	ldr r0, _08099C94 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -260704,7 +260704,7 @@ sub_08099C7C: @ 0x08099C7C
 	pop {r1}
 	bx r1
 	.align 2, 0
-_08099C94: .4byte 0x0202BBF4
+_08099C94: .4byte gPlaySt
 
 	thumb_func_start sub_08099C98
 sub_08099C98: @ 0x08099C98
@@ -260726,7 +260726,7 @@ _08099CB0:
 	thumb_func_start sub_08099CB4
 sub_08099CB4: @ 0x08099CB4
 	push {lr}
-	ldr r1, _08099CD0 @ =0x0202BBF4
+	ldr r1, _08099CD0 @ =gPlaySt
 	movs r0, #0x40
 	ldrb r1, [r1, #0x14]
 	ands r0, r1
@@ -260739,7 +260739,7 @@ _08099CCA:
 	movs r0, #0
 	b _08099CD6
 	.align 2, 0
-_08099CD0: .4byte 0x0202BBF4
+_08099CD0: .4byte gPlaySt
 _08099CD4:
 	movs r0, #1
 _08099CD6:
@@ -260773,7 +260773,7 @@ sub_08099CF0: @ 0x08099CF0
 
 	thumb_func_start sub_08099D00
 sub_08099D00: @ 0x08099D00
-	ldr r0, _08099D10 @ =0x0202BBF4
+	ldr r0, _08099D10 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -260782,7 +260782,7 @@ sub_08099D00: @ 0x08099D00
 	movs r0, #0
 	b _08099D16
 	.align 2, 0
-_08099D10: .4byte 0x0202BBF4
+_08099D10: .4byte gPlaySt
 _08099D14:
 	movs r0, #1
 _08099D16:
@@ -261352,7 +261352,7 @@ _0809A1AC:
 	movs r1, #8
 	bl sub_08005344
 	bl sub_08099FE8
-	ldr r0, _0809A1F8 @ =0x0202BBF4
+	ldr r0, _0809A1F8 @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #3
 	bne _0809A1FC
@@ -261370,7 +261370,7 @@ _0809A1E8: .4byte 0x0842B57C
 _0809A1EC: .4byte 0x03002790
 _0809A1F0: .4byte 0x020129A8
 _0809A1F4: .4byte 0x02012A90
-_0809A1F8: .4byte 0x0202BBF4
+_0809A1F8: .4byte gPlaySt
 _0809A1FC:
 	movs r0, #0
 	str r0, [sp]
@@ -261388,7 +261388,7 @@ _0809A20C:
 	thumb_func_start sub_0809A214
 sub_0809A214: @ 0x0809A214
 	adds r2, r0, #0
-	ldr r3, _0809A234 @ =0x0202BBF4
+	ldr r3, _0809A234 @ =gPlaySt
 	adds r1, r3, #0
 	adds r1, #0x2b
 	movs r0, #1
@@ -261404,7 +261404,7 @@ sub_0809A214: @ 0x0809A214
 	ldr r0, _0809A238 @ =0x00000F73
 	b _0809A262
 	.align 2, 0
-_0809A234: .4byte 0x0202BBF4
+_0809A234: .4byte gPlaySt
 _0809A238: .4byte 0x00000F73
 _0809A23C:
 	adds r1, r2, #0
@@ -261463,7 +261463,7 @@ sub_0809A294: @ 0x0809A294
 	bl sub_0800457C
 	b _0809A2D2
 _0809A2AA:
-	ldr r0, _0809A2D8 @ =0x08BBFC7C
+	ldr r0, _0809A2D8 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #8
 	ldrh r1, [r1, #8]
@@ -261473,7 +261473,7 @@ _0809A2AA:
 	adds r0, r4, #0
 	movs r1, #0
 	bl sub_080045FC
-	ldr r0, _0809A2DC @ =0x0202BBF4
+	ldr r0, _0809A2DC @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -261486,8 +261486,8 @@ _0809A2D2:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0809A2D8: .4byte 0x08BBFC7C
-_0809A2DC: .4byte 0x0202BBF4
+_0809A2D8: .4byte gpKeySt
+_0809A2DC: .4byte gPlaySt
 _0809A2E0: .4byte 0x0000038B
 
 	thumb_func_start sub_0809A2E4
@@ -261742,7 +261742,7 @@ _0809A4A8:
 	lsls r1, r1, #2
 	movs r2, #0x20
 	bl sub_0800105C
-	ldr r2, _0809A51C @ =0x0202BBF4
+	ldr r2, _0809A51C @ =gPlaySt
 	adds r2, #0x40
 	movs r0, #0x61
 	rsbs r0, r0, #0
@@ -261776,7 +261776,7 @@ _0809A4A8:
 _0809A510: .4byte 0x0842B374
 _0809A514: .4byte 0x06017000
 _0809A518: .4byte 0x0842B4BC
-_0809A51C: .4byte 0x0202BBF4
+_0809A51C: .4byte gPlaySt
 _0809A520: .4byte sub_0809A324
 _0809A524: .4byte 0x03002790
 
@@ -262636,7 +262636,7 @@ sub_0809AC5C: @ 0x0809AC5C
 	strb r5, [r0]
 	adds r0, #1
 	strb r5, [r0]
-	ldr r1, _0809ACA8 @ =0x08BBFC7C
+	ldr r1, _0809ACA8 @ =gpKeySt
 	ldr r2, [r1]
 	movs r0, #2
 	ldrh r3, [r2, #8]
@@ -262644,7 +262644,7 @@ sub_0809AC5C: @ 0x0809AC5C
 	adds r3, r1, #0
 	cmp r0, #0
 	beq _0809ACB4
-	ldr r0, _0809ACAC @ =0x0202BBF4
+	ldr r0, _0809ACAC @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -262665,8 +262665,8 @@ _0809AC8E:
 	bl sub_080045FC
 	b _0809AD4C
 	.align 2, 0
-_0809ACA8: .4byte 0x08BBFC7C
-_0809ACAC: .4byte 0x0202BBF4
+_0809ACA8: .4byte gpKeySt
+_0809ACAC: .4byte gPlaySt
 _0809ACB0: .4byte 0x0000038B
 _0809ACB4:
 	movs r0, #4
@@ -262689,7 +262689,7 @@ _0809ACB4:
 	lsrs r0, r0, #0x10
 	cmp r0, #0xb4
 	bls _0809AD06
-	ldr r0, _0809ACF8 @ =0x0202BBF4
+	ldr r0, _0809ACF8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -262703,7 +262703,7 @@ _0809ACEE:
 	bl sub_080045FC
 	b _0809AD4C
 	.align 2, 0
-_0809ACF8: .4byte 0x0202BBF4
+_0809ACF8: .4byte gPlaySt
 _0809ACFC: .4byte 0x0000038A
 _0809AD00:
 	adds r1, r4, #0
@@ -262877,7 +262877,7 @@ sub_0809ADDC: @ 0x0809ADDC
 	adds r1, r2, #0
 	orrs r0, r1
 	strh r0, [r4, #0x3c]
-	ldr r0, _0809AED8 @ =0x0202BBF4
+	ldr r0, _0809AED8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -262941,7 +262941,7 @@ _0809AE66:
 _0809AECC: .4byte 0x03002790
 _0809AED0: .4byte 0x0000FFE0
 _0809AED4: .4byte 0x0000E0FF
-_0809AED8: .4byte 0x0202BBF4
+_0809AED8: .4byte gPlaySt
 
 	thumb_func_start sub_0809AEDC
 sub_0809AEDC: @ 0x0809AEDC
@@ -263495,7 +263495,7 @@ sub_0809B2FC: @ 0x0809B2FC
 	sub sp, #0x20
 	adds r5, r0, #0
 	adds r4, r1, #0
-	ldr r0, _0809B374 @ =0x0202BBF4
+	ldr r0, _0809B374 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -263541,7 +263541,7 @@ sub_0809B2FC: @ 0x0809B2FC
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0809B374: .4byte 0x0202BBF4
+_0809B374: .4byte gPlaySt
 _0809B378: .4byte 0x06010000
 _0809B37C: .4byte 0x081901C8
 
@@ -263637,7 +263637,7 @@ sub_0809B380: @ 0x0809B380
 	lsls r0, r0, #7
 	movs r1, #1
 	bl sub_0809B2FC
-	ldr r4, _0809B4BC @ =0x0202BBF4
+	ldr r4, _0809B4BC @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r4, r0]
 	bl sub_08031A5C
@@ -263674,7 +263674,7 @@ _0809B478:
 _0809B4B0: .4byte 0x03002790
 _0809B4B4: .4byte 0x0000FFFC
 _0809B4B8: .4byte 0x02012A90
-_0809B4BC: .4byte 0x0202BBF4
+_0809B4BC: .4byte gPlaySt
 _0809B4C0: .4byte sub_0809B2BC
 _0809B4C4:
 	cmp r6, #0x4b
@@ -263781,7 +263781,7 @@ sub_0809B598: @ 0x0809B598
 	push {lr}
 	sub sp, #0x10
 	adds r2, r0, #0
-	ldr r1, _0809B5B0 @ =0x0202BBF4
+	ldr r1, _0809B5B0 @ =gPlaySt
 	adds r1, #0x2b
 	movs r0, #1
 	ldrb r1, [r1]
@@ -263791,7 +263791,7 @@ sub_0809B598: @ 0x0809B598
 	ldr r0, _0809B5B4 @ =0x00000FAD
 	b _0809B5BA
 	.align 2, 0
-_0809B5B0: .4byte 0x0202BBF4
+_0809B5B0: .4byte gPlaySt
 _0809B5B4: .4byte 0x00000FAD
 _0809B5B8:
 	ldr r0, _0809B5EC @ =0x00000FAE
@@ -263827,7 +263827,7 @@ sub_0809B5F8: @ 0x0809B5F8
 	push {lr}
 	sub sp, #0x10
 	adds r2, r0, #0
-	ldr r1, _0809B610 @ =0x0202BBF4
+	ldr r1, _0809B610 @ =gPlaySt
 	adds r1, #0x2b
 	movs r0, #1
 	ldrb r1, [r1]
@@ -263837,7 +263837,7 @@ sub_0809B5F8: @ 0x0809B5F8
 	ldr r0, _0809B614 @ =0x00000FAF
 	b _0809B61C
 	.align 2, 0
-_0809B610: .4byte 0x0202BBF4
+_0809B610: .4byte gPlaySt
 _0809B614: .4byte 0x00000FAF
 _0809B618:
 	movs r0, #0xfb
@@ -263890,7 +263890,7 @@ sub_0809B674: @ 0x0809B674
 	push {lr}
 	sub sp, #0x10
 	adds r2, r0, #0
-	ldr r1, _0809B68C @ =0x0202BBF4
+	ldr r1, _0809B68C @ =gPlaySt
 	adds r1, #0x2b
 	movs r0, #1
 	ldrb r1, [r1]
@@ -263900,7 +263900,7 @@ sub_0809B674: @ 0x0809B674
 	ldr r0, _0809B690 @ =0x00000FB1
 	b _0809B696
 	.align 2, 0
-_0809B68C: .4byte 0x0202BBF4
+_0809B68C: .4byte gPlaySt
 _0809B690: .4byte 0x00000FB1
 _0809B694:
 	ldr r0, _0809B6C8 @ =0x00000FB2
@@ -263995,7 +263995,7 @@ sub_0809B73C: @ 0x0809B73C
 	ble _0809B772
 	rsbs r0, r4, #0
 	bl sub_08023DB4
-	ldr r0, _0809B77C @ =0x0202BBF4
+	ldr r0, _0809B77C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -264009,7 +264009,7 @@ _0809B772:
 	bl sub_080045FC
 	b _0809B792
 	.align 2, 0
-_0809B77C: .4byte 0x0202BBF4
+_0809B77C: .4byte gPlaySt
 _0809B780:
 	adds r0, r5, #0
 	movs r1, #2
@@ -264156,7 +264156,7 @@ sub_0809B890: @ 0x0809B890
 	push {r4, r5, lr}
 	adds r4, r0, #0
 	ldr r3, _0809B8C8 @ =0x020229A2
-	ldr r5, _0809B8CC @ =0x0202BBF4
+	ldr r5, _0809B8CC @ =gPlaySt
 	adds r1, r4, #0
 	adds r1, #0x2c
 	movs r2, #0xe
@@ -264184,7 +264184,7 @@ _0809B8BE:
 	bx r0
 	.align 2, 0
 _0809B8C8: .4byte 0x020229A2
-_0809B8CC: .4byte 0x0202BBF4
+_0809B8CC: .4byte gPlaySt
 
 	thumb_func_start sub_0809B8D0
 sub_0809B8D0: @ 0x0809B8D0
@@ -265675,7 +265675,7 @@ _0809C45E:
 _0809C46E:
 	ldr r0, [r6, #0x38]
 	mov sl, r0
-	ldr r3, _0809C4B8 @ =0x08BBFC7C
+	ldr r3, _0809C4B8 @ =gpKeySt
 	ldr r1, [r3]
 	ldrh r5, [r1, #6]
 	adds r2, r6, #0
@@ -265710,7 +265710,7 @@ _0809C492:
 	strb r4, [r0]
 	b _0809C798
 	.align 2, 0
-_0809C4B8: .4byte 0x08BBFC7C
+_0809C4B8: .4byte gpKeySt
 _0809C4BC:
 	ldr r0, [r3]
 	ldrh r1, [r0, #8]
@@ -265764,7 +265764,7 @@ _0809C51C:
 	adds r0, r6, #0
 	movs r1, #2
 	bl sub_080045FC
-	ldr r0, _0809C544 @ =0x0202BBF4
+	ldr r0, _0809C544 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -265776,7 +265776,7 @@ _0809C53A:
 	bl m4aSongNumStart
 	b _0809C798
 	.align 2, 0
-_0809C544: .4byte 0x0202BBF4
+_0809C544: .4byte gPlaySt
 _0809C548: .4byte 0x0000038A
 _0809C54C:
 	movs r0, #2
@@ -265786,7 +265786,7 @@ _0809C54C:
 	adds r0, r6, #0
 	movs r1, #3
 	bl sub_080045FC
-	ldr r0, _0809C574 @ =0x0202BBF4
+	ldr r0, _0809C574 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -265798,7 +265798,7 @@ _0809C56A:
 	bl m4aSongNumStart
 	b _0809C798
 	.align 2, 0
-_0809C574: .4byte 0x0202BBF4
+_0809C574: .4byte gPlaySt
 _0809C578: .4byte 0x0000038B
 _0809C57C:
 	movs r0, #0x20
@@ -265876,7 +265876,7 @@ _0809C606:
 	movs r0, #0
 	mov r7, r8
 	strb r0, [r7]
-	ldr r0, _0809C648 @ =0x0202BBF4
+	ldr r0, _0809C648 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -265903,7 +265903,7 @@ _0809C634:
 	strb r0, [r1]
 	b _0809C69C
 	.align 2, 0
-_0809C648: .4byte 0x0202BBF4
+_0809C648: .4byte gPlaySt
 _0809C64C: .4byte 0x00000385
 _0809C650:
 	cmp r4, #0x2f
@@ -266045,7 +266045,7 @@ _0809C734:
 _0809C768: .4byte 0x08C4C158
 _0809C76C: .4byte 0x0000FFD8
 _0809C770:
-	ldr r0, _0809C7A8 @ =0x08BBFC7C
+	ldr r0, _0809C7A8 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #2
 	ldrh r1, [r1, #8]
@@ -266055,7 +266055,7 @@ _0809C770:
 	adds r0, r6, #0
 	movs r1, #3
 	bl sub_080045FC
-	ldr r0, _0809C7AC @ =0x0202BBF4
+	ldr r0, _0809C7AC @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -266072,8 +266072,8 @@ _0809C798:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0809C7A8: .4byte 0x08BBFC7C
-_0809C7AC: .4byte 0x0202BBF4
+_0809C7A8: .4byte gpKeySt
+_0809C7AC: .4byte gPlaySt
 _0809C7B0: .4byte 0x0000038B
 
 	thumb_func_start sub_0809C7B4
@@ -266402,7 +266402,7 @@ sub_0809C9F8: @ 0x0809C9F8
 	bl sub_08005998
 	subs r0, r7, #4
 	ldr r3, _0809CAF4 @ =0x081C8FCC
-	ldr r5, _0809CAF8 @ =0x0202BBF4
+	ldr r5, _0809CAF8 @ =gPlaySt
 	movs r1, #0x2b
 	adds r1, r1, r5
 	mov r8, r1
@@ -266481,13 +266481,13 @@ _0809CAE8: .4byte 0x020129A8
 _0809CAEC: .4byte 0x08190268
 _0809CAF0: .4byte 0x02023D80
 _0809CAF4: .4byte 0x081C8FCC
-_0809CAF8: .4byte 0x0202BBF4
+_0809CAF8: .4byte gPlaySt
 
 	thumb_func_start sub_0809CAFC
 sub_0809CAFC: @ 0x0809CAFC
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _0809CB20 @ =0x0202BBF4
+	ldr r0, _0809CB20 @ =gPlaySt
 	ldrh r0, [r0, #0x2c]
 	lsls r0, r0, #0x13
 	lsrs r0, r0, #0x17
@@ -266504,7 +266504,7 @@ _0809CB14:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0809CB20: .4byte 0x0202BBF4
+_0809CB20: .4byte gPlaySt
 
 	thumb_func_start sub_0809CB24
 sub_0809CB24: @ 0x0809CB24
@@ -266756,7 +266756,7 @@ _0809CD74: .4byte 0x00000FB3
 sub_0809CD78: @ 0x0809CD78
 	push {r4, lr}
 	adds r4, r0, #0
-	bl sub_08012B98
+	bl EndEachSpriteAnimProc
 	bl sub_080886CC
 	adds r0, r4, #0
 	bl sub_080AAC88
@@ -266806,7 +266806,7 @@ sub_0809CDD0: @ 0x0809CDD0
 	bl sub_0800457C
 	b _0809CE0C
 _0809CDE6:
-	ldr r0, _0809CE14 @ =0x08BBFC7C
+	ldr r0, _0809CE14 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #8
 	ldrh r1, [r1, #8]
@@ -266815,7 +266815,7 @@ _0809CDE6:
 	beq _0809CE0C
 	adds r0, r4, #0
 	bl sub_0800457C
-	ldr r0, _0809CE18 @ =0x0202BBF4
+	ldr r0, _0809CE18 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -266828,8 +266828,8 @@ _0809CE0C:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0809CE14: .4byte 0x08BBFC7C
-_0809CE18: .4byte 0x0202BBF4
+_0809CE14: .4byte gpKeySt
+_0809CE18: .4byte gPlaySt
 _0809CE1C: .4byte 0x0000038B
 
 	thumb_func_start sub_0809CE20
@@ -267913,7 +267913,7 @@ sub_0809D648: @ 0x0809D648
 	asrs r0, r0, #0x18
 	cmp r0, #0
 	bne _0809D714
-	ldr r2, _0809D7D0 @ =0x0202BBF4
+	ldr r2, _0809D7D0 @ =gPlaySt
 	adds r2, #0x40
 	movs r0, #0x61
 	rsbs r0, r0, #0
@@ -268041,7 +268041,7 @@ _0809D714:
 	b _0809D800
 	.align 2, 0
 _0809D7CC: .4byte 0x03002790
-_0809D7D0: .4byte 0x0202BBF4
+_0809D7D0: .4byte gPlaySt
 _0809D7D4: .4byte 0x0000FFE0
 _0809D7D8: .4byte 0x0000E0FF
 _0809D7DC: .4byte 0x02023460
@@ -268096,14 +268096,14 @@ sub_0809D850: @ 0x0809D850
 	mov r7, r8
 	push {r7}
 	adds r6, r0, #0
-	ldr r0, _0809D884 @ =0x08BBFC7C
+	ldr r0, _0809D884 @ =gpKeySt
 	ldr r1, [r0]
 	ldrh r3, [r1, #8]
 	movs r0, #2
 	ands r0, r3
 	cmp r0, #0
 	beq _0809D890
-	ldr r0, _0809D888 @ =0x0202BBF4
+	ldr r0, _0809D888 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -268117,8 +268117,8 @@ _0809D878:
 	bl sub_080045FC
 	b _0809DA00
 	.align 2, 0
-_0809D884: .4byte 0x08BBFC7C
-_0809D888: .4byte 0x0202BBF4
+_0809D884: .4byte gpKeySt
+_0809D888: .4byte gPlaySt
 _0809D88C: .4byte 0x0000038B
 _0809D890:
 	ldrh r2, [r1, #6]
@@ -268166,7 +268166,7 @@ _0809D8D6:
 	adds r5, r1, #0
 	cmp r0, #0
 	beq _0809D90C
-	ldr r0, _0809D904 @ =0x0202BBF4
+	ldr r0, _0809D904 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -268180,7 +268180,7 @@ _0809D8F8:
 	bl sub_080045FC
 	b _0809DA00
 	.align 2, 0
-_0809D904: .4byte 0x0202BBF4
+_0809D904: .4byte gPlaySt
 _0809D908: .4byte 0x0000038A
 _0809D90C:
 	movs r0, #0x20
@@ -268197,7 +268197,7 @@ _0809D90C:
 	adds r0, r0, r1
 	strb r0, [r5]
 _0809D926:
-	ldr r0, _0809D9D8 @ =0x08BBFC7C
+	ldr r0, _0809D9D8 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x10
 	ldrh r1, [r1, #6]
@@ -268226,7 +268226,7 @@ _0809D926:
 	adds r1, r1, r2
 	strb r1, [r5]
 _0809D960:
-	ldr r4, _0809D9D8 @ =0x08BBFC7C
+	ldr r4, _0809D9D8 @ =gpKeySt
 	ldr r1, [r4]
 	movs r0, #0x40
 	ldrh r1, [r1, #6]
@@ -268274,7 +268274,7 @@ _0809D9A0:
 	lsls r3, r3, #4
 	movs r2, #1
 	bl sub_080AA3F8
-	ldr r0, _0809D9DC @ =0x0202BBF4
+	ldr r0, _0809D9DC @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -268284,15 +268284,15 @@ _0809D9A0:
 	bl m4aSongNumStart
 	b _0809DA00
 	.align 2, 0
-_0809D9D8: .4byte 0x08BBFC7C
-_0809D9DC: .4byte 0x0202BBF4
+_0809D9D8: .4byte gpKeySt
+_0809D9DC: .4byte gPlaySt
 _0809D9E0: .4byte 0x00000385
 _0809D9E4:
 	movs r0, #1
 	ands r0, r3
 	cmp r0, #0
 	beq _0809DA00
-	ldr r0, _0809DA0C @ =0x0202BBF4
+	ldr r0, _0809DA0C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -268308,7 +268308,7 @@ _0809DA00:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_0809DA0C: .4byte 0x0202BBF4
+_0809DA0C: .4byte gPlaySt
 
 	thumb_func_start sub_0809DA10
 sub_0809DA10: @ 0x0809DA10
@@ -268459,7 +268459,7 @@ sub_0809DAD4: @ 0x0809DAD4
 	orrs r0, r1
 	strh r0, [r3, #0x3c]
 	bl sub_0809CE20
-	ldr r0, _0809DB70 @ =0x0202BBF4
+	ldr r0, _0809DB70 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -268475,7 +268475,7 @@ _0809DB5C:
 _0809DB64: .4byte 0x03002790
 _0809DB68: .4byte 0x0000FFE0
 _0809DB6C: .4byte 0x0000E0FF
-_0809DB70: .4byte 0x0202BBF4
+_0809DB70: .4byte gPlaySt
 
 	thumb_func_start sub_0809DB74
 sub_0809DB74: @ 0x0809DB74
@@ -272753,12 +272753,12 @@ _0809FC50: .4byte 0x0100004A
 
 	thumb_func_start sub_0809FC54
 sub_0809FC54: @ 0x0809FC54
-	ldr r0, _0809FC5C @ =0x0202BBF4
+	ldr r0, _0809FC5C @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	subs r0, #1
 	bx lr
 	.align 2, 0
-_0809FC5C: .4byte 0x0202BBF4
+_0809FC5C: .4byte gPlaySt
 
 	thumb_func_start sub_0809FC60
 sub_0809FC60: @ 0x0809FC60
@@ -273002,7 +273002,7 @@ sub_0809FDC4: @ 0x0809FDC4
 	ands r1, r2
 	orrs r1, r0
 	str r1, [r7, #8]
-	ldr r2, _0809FED8 @ =0x0202BBF4
+	ldr r2, _0809FED8 @ =gPlaySt
 	adds r0, r2, #0
 	adds r0, #0x2b
 	ldrb r0, [r0]
@@ -273081,7 +273081,7 @@ sub_0809FDC4: @ 0x0809FDC4
 	.align 2, 0
 _0809FED0: .4byte 0x0100000C
 _0809FED4: .4byte 0xFFE00000
-_0809FED8: .4byte 0x0202BBF4
+_0809FED8: .4byte gPlaySt
 _0809FEDC: .4byte 0xFFFF807F
 _0809FEE0: .4byte 0x000003FF
 _0809FEE4: .4byte 0xFFFE007F
@@ -273264,7 +273264,7 @@ sub_080A0054: @ 0x080A0054
 	sub sp, #0x30
 	bl sub_0809FC54
 	adds r6, r0, #0
-	ldr r0, _080A00A0 @ =0x0202BBF4
+	ldr r0, _080A00A0 @ =gPlaySt
 	ldrb r0, [r0, #0x14]
 	lsrs r4, r0, #6
 	movs r0, #1
@@ -273294,7 +273294,7 @@ _080A0096:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080A00A0: .4byte 0x0202BBF4
+_080A00A0: .4byte gPlaySt
 
 	thumb_func_start sub_080A00A4
 sub_080A00A4: @ 0x080A00A4
@@ -273732,7 +273732,7 @@ _080A03F4: .4byte 0x0203E774
 	thumb_func_start ClearPidStats_ret
 ClearPidStats_ret: @ 0x080A03F8
 	push {lr}
-	ldr r1, _080A0414 @ =0x0202BBF4
+	ldr r1, _080A0414 @ =gPlaySt
 	ldr r0, _080A0418 @ =0xFFFFE00F
 	ldrh r2, [r1, #0x2c]
 	ands r0, r2
@@ -273743,7 +273743,7 @@ ClearPidStats_ret: @ 0x080A03F8
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080A0414: .4byte 0x0202BBF4
+_080A0414: .4byte gPlaySt
 _080A0418: .4byte 0xFFFFE00F
 
 	thumb_func_start ClearPidStats
@@ -273756,7 +273756,7 @@ ClearPidStats: @ 0x080A041C
 	ldr r1, _080A045C @ =0x0203E778
 	ldr r2, _080A0460 @ =0x01000230
 	bl CpuSet
-	ldr r4, _080A0464 @ =0x0202BBF4
+	ldr r4, _080A0464 @ =gPlaySt
 	ldr r0, [r4, #0x38]
 	ldr r1, _080A0468 @ =0xF00000FF
 	ands r0, r1
@@ -273781,7 +273781,7 @@ ClearPidStats: @ 0x080A041C
 	.align 2, 0
 _080A045C: .4byte 0x0203E778
 _080A0460: .4byte 0x01000230
-_080A0464: .4byte 0x0202BBF4
+_080A0464: .4byte gPlaySt
 _080A0468: .4byte 0xF00000FF
 _080A046C: .4byte 0xFFF00000
 
@@ -274053,7 +274053,7 @@ _080A064C:
 	thumb_func_start sub_080A0654
 sub_080A0654: @ 0x080A0654
 	adds r1, r0, #0
-	ldr r0, _080A0668 @ =0x0202BBF4
+	ldr r0, _080A0668 @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #1
 	bne _080A066C
@@ -274063,7 +274063,7 @@ _080A0662:
 	movs r0, #1
 	b _080A067A
 	.align 2, 0
-_080A0668: .4byte 0x0202BBF4
+_080A0668: .4byte gPlaySt
 _080A066C:
 	cmp r0, #1
 	blt _080A0678
@@ -274281,7 +274281,7 @@ sub_080A07C8: @ 0x080A07C8
 	ldrb r0, [r0]
 	cmp r0, #1
 	beq _080A0898
-	ldr r7, _080A08AC @ =0x0202BBF4
+	ldr r7, _080A08AC @ =gPlaySt
 	ldrb r2, [r7, #0x14]
 	movs r0, #8
 	ands r0, r2
@@ -274353,7 +274353,7 @@ _080A0898:
 	.align 2, 0
 _080A08A4: .4byte 0x0203E768
 _080A08A8: .4byte 0x0202BBB4
-_080A08AC: .4byte 0x0202BBF4
+_080A08AC: .4byte gPlaySt
 _080A08B0: .4byte 0x000019DC
 
 	thumb_func_start sub_080A08B4
@@ -274376,7 +274376,7 @@ sub_080A08B4: @ 0x080A08B4
 	adds r3, r1, r0
 	cmp r3, #0
 	beq _080A091E
-	ldr r2, _080A0928 @ =0x0202BBF4
+	ldr r2, _080A0928 @ =gPlaySt
 	movs r1, #0xe
 	ldrsb r1, [r2, r1]
 	movs r0, #0x3f
@@ -274416,7 +274416,7 @@ _080A091E:
 	bx r0
 	.align 2, 0
 _080A0924: .4byte 0x0203E768
-_080A0928: .4byte 0x0202BBF4
+_080A0928: .4byte gPlaySt
 _080A092C: .4byte 0x000003FF
 _080A0930: .4byte 0xFF003FFF
 _080A0934: .4byte 0xFF803FFF
@@ -275111,28 +275111,28 @@ sub_080A0DFC: @ 0x080A0DFC
 	ands r1, r0
 	cmp r1, #0
 	bne _080A0E28
-	ldr r0, _080A0E1C @ =0x0202BBF4
+	ldr r0, _080A0E1C @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #2
 	bne _080A0E20
 	movs r0, #0
 	b _080A0E42
 	.align 2, 0
-_080A0E1C: .4byte 0x0202BBF4
+_080A0E1C: .4byte gPlaySt
 _080A0E20:
 	cmp r0, #3
 	bne _080A0E28
 	movs r0, #2
 	b _080A0E42
 _080A0E28:
-	ldr r0, _080A0E34 @ =0x0202BBF4
+	ldr r0, _080A0E34 @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #2
 	bne _080A0E38
 	movs r0, #1
 	b _080A0E42
 	.align 2, 0
-_080A0E34: .4byte 0x0202BBF4
+_080A0E34: .4byte gPlaySt
 _080A0E38:
 	cmp r0, #3
 	beq _080A0E40
@@ -275151,7 +275151,7 @@ sub_080A0E48: @ 0x080A0E48
 	sub sp, #0x64
 	bl sub_080A0DFC
 	adds r5, r0, #0
-	ldr r7, _080A0E94 @ =0x0202BBF4
+	ldr r7, _080A0E94 @ =gPlaySt
 	ldrb r0, [r7, #0x14]
 	lsrs r4, r0, #6
 	movs r0, #1
@@ -275182,7 +275182,7 @@ _080A0E74:
 	beq _080A0EA6
 	b _080A0ECE
 	.align 2, 0
-_080A0E94: .4byte 0x0202BBF4
+_080A0E94: .4byte gPlaySt
 _080A0E98:
 	cmp r5, #3
 	bgt _080A0ECE
@@ -275431,7 +275431,7 @@ sub_080A1050: @ 0x080A1050
 	adds r7, r0, #0
 	cmp r5, #0
 	bne _080A106C
-	ldr r0, _080A1180 @ =0x0202BBF4
+	ldr r0, _080A1180 @ =gPlaySt
 	ldrb r5, [r0, #0x1b]
 _080A106C:
 	movs r0, #0
@@ -275443,7 +275443,7 @@ _080A106C:
 	bl sub_0807A0A0
 	movs r0, #3
 	bl sub_080A1A60
-	ldr r4, _080A1180 @ =0x0202BBF4
+	ldr r4, _080A1180 @ =gPlaySt
 	adds r1, r4, #0
 	adds r1, #0x2c
 	movs r0, #2
@@ -275558,7 +275558,7 @@ _080A1132:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080A1180: .4byte 0x0202BBF4
+_080A1180: .4byte gPlaySt
 _080A1184: .4byte 0xFFFFE00F
 _080A1188: .4byte 0x01000008
 _080A118C: .4byte 0xFF801FFF
@@ -275579,7 +275579,7 @@ WriteGameSave: @ 0x080A119C
 	adds r7, r0, #0
 	movs r0, #3
 	bl sub_080A1A60
-	ldr r4, _080A126C @ =0x0202BBF4
+	ldr r4, _080A126C @ =gPlaySt
 	mov r0, sb
 	strb r0, [r4, #0xc]
 	bl sub_08000EEC
@@ -275659,7 +275659,7 @@ _080A11FC:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080A126C: .4byte 0x0202BBF4
+_080A126C: .4byte gPlaySt
 _080A1270: .4byte 0x0202BD4C
 _080A1274: .4byte 0x00011217
 
@@ -275682,7 +275682,7 @@ ReadGameSave: @ 0x080A1278
 	bl sub_080A1A60
 _080A129A:
 	ldr r0, _080A131C @ =0x03005D90
-	ldr r4, _080A1320 @ =0x0202BBF4
+	ldr r4, _080A1320 @ =gPlaySt
 	ldr r3, [r0]
 	adds r0, r7, #0
 	adds r1, r4, #0
@@ -275738,7 +275738,7 @@ _080A12C4:
 	.align 2, 0
 _080A1318: .4byte 0x0202BBB4
 _080A131C: .4byte 0x03005D90
-_080A1320: .4byte 0x0202BBF4
+_080A1320: .4byte gPlaySt
 _080A1324: .4byte 0x0202BD4C
 
 	thumb_func_start IsSaveValid
@@ -276726,7 +276726,7 @@ WriteSuspendSave: @ 0x080A1A88
 	beq _080A1AA2
 	b _080A1BA0
 _080A1AA2:
-	ldr r4, _080A1BB0 @ =0x0202BBF4
+	ldr r4, _080A1BB0 @ =gPlaySt
 	movs r0, #8
 	ldrb r1, [r4, #0x14]
 	ands r0, r1
@@ -276845,7 +276845,7 @@ _080A1BA0:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080A1BB0: .4byte 0x0202BBF4
+_080A1BB0: .4byte gPlaySt
 _080A1BB4: .4byte 0x0203A858
 _080A1BB8: .4byte 0x02020140
 _080A1BBC: .4byte 0x0202BD4C
@@ -276871,7 +276871,7 @@ ReadSuspendSave: @ 0x080A1BEC
 	bl GetSaveReadAddr
 	adds r6, r0, #0
 	ldr r5, _080A1CDC @ =0x03005D90
-	ldr r4, _080A1CE0 @ =0x0202BBF4
+	ldr r4, _080A1CE0 @ =gPlaySt
 	ldr r3, [r5]
 	adds r1, r4, #0
 	movs r2, #0x48
@@ -276957,7 +276957,7 @@ _080A1C64:
 	bl _call_via_r3
 	mov r0, sp
 	bl sub_0804B3D0
-	ldr r0, _080A1CE0 @ =0x0202BBF4
+	ldr r0, _080A1CE0 @ =gPlaySt
 	ldrb r0, [r0, #0xc]
 	bl sub_080A135C
 	bl sub_080A0F14
@@ -276968,7 +276968,7 @@ _080A1C64:
 	.align 2, 0
 _080A1CD8: .4byte 0x0203EC9C
 _080A1CDC: .4byte 0x03005D90
-_080A1CE0: .4byte 0x0202BBF4
+_080A1CE0: .4byte gPlaySt
 _080A1CE4: .4byte 0x0203A858
 _080A1CE8: .4byte 0x0202BD4C
 _080A1CEC: .4byte 0x00000AF4
@@ -277677,7 +277677,7 @@ WriteTraps: @ 0x080A226C
 	push {r4, lr}
 	adds r4, r0, #0
 	movs r0, #0
-	bl sub_0802C7D8
+	bl GetTrap
 	movs r2, #0x80
 	lsls r2, r2, #2
 	adds r1, r4, #0
@@ -277693,7 +277693,7 @@ ReadTraps: @ 0x080A2288
 	adds r5, r0, #0
 	ldr r4, _080A22A8 @ =0x03005D90
 	movs r0, #0
-	bl sub_0802C7D8
+	bl GetTrap
 	adds r1, r0, #0
 	movs r2, #0x80
 	lsls r2, r2, #2
@@ -277900,7 +277900,7 @@ _080A23D4:
 	lsls r0, r0, #0x10
 	lsrs r6, r0, #0x10
 	movs r0, #0
-	bl sub_0802C7D8
+	bl GetTrap
 	movs r1, #0x80
 	lsls r1, r1, #1
 	bl sub_080A2304
@@ -278653,7 +278653,7 @@ sub_080A29DC: @ 0x080A29DC
 	ldr r0, [r4, #0x18]
 	adds r0, r0, r1
 	str r0, [r4, #0x18]
-	ldr r2, _080A2A40 @ =0x0202BBF4
+	ldr r2, _080A2A40 @ =gPlaySt
 	ldrb r4, [r4, #0xf]
 	lsls r3, r4, #0xd
 	ldr r0, [r2, #0x2c]
@@ -278669,7 +278669,7 @@ _080A2A30: .4byte 0x08DAD294
 _080A2A34: .4byte 0x0203EE28
 _080A2A38: .4byte 0x50414D58
 _080A2A3C: .4byte 0x00020223
-_080A2A40: .4byte 0x0202BBF4
+_080A2A40: .4byte gPlaySt
 _080A2A44: .4byte 0xFF801FFF
 _080A2A48:
 	movs r0, #0
@@ -278841,13 +278841,13 @@ sub_080A2B50: @ 0x080A2B50
 	adds r0, r6, #0
 	bl sub_08013688
 	ldr r1, [r4]
-	ldr r0, _080A2BC4 @ =0x0202BBF4
+	ldr r0, _080A2BC4 @ =gPlaySt
 	str r0, [r1, #0x18]
 	ldr r0, _080A2BC8 @ =0x0202BBB4
 	str r0, [r1, #0x1c]
 	ldr r0, _080A2BCC @ =0x030045B0
 	str r0, [r1, #0x20]
-	ldr r0, _080A2BD0 @ =0x08C0216C
+	ldr r0, _080A2BD0 @ =gUnitLut
 	str r0, [r1, #0x24]
 	ldr r0, _080A2BD4 @ =0x0203A3EC
 	str r0, [r1, #0x28]
@@ -278856,7 +278856,7 @@ sub_080A2B50: @ 0x080A2B50
 	ldr r0, _080A2BDC @ =0x0203A4EC
 	str r0, [r1, #0x30]
 	movs r0, #0
-	bl sub_0802C7D8
+	bl GetTrap
 	ldr r1, [r4]
 	str r0, [r1, #0x34]
 	bl sub_0807A0F4
@@ -278872,10 +278872,10 @@ sub_080A2B50: @ 0x080A2B50
 _080A2BB8: .4byte 0x03005D90
 _080A2BBC: .4byte 0x02020140
 _080A2BC0: .4byte 0x08DAD298
-_080A2BC4: .4byte 0x0202BBF4
+_080A2BC4: .4byte gPlaySt
 _080A2BC8: .4byte 0x0202BBB4
 _080A2BCC: .4byte 0x030045B0
-_080A2BD0: .4byte 0x08C0216C
+_080A2BD0: .4byte gUnitLut
 _080A2BD4: .4byte 0x0203A3EC
 _080A2BD8: .4byte 0x0203A46C
 _080A2BDC: .4byte 0x0203A4EC
@@ -278921,7 +278921,7 @@ _080A2C0C: .4byte 0x0202E3EC
 sub_080A2C10: @ 0x080A2C10
 	push {r4, r5, lr}
 	bl sub_08000EEC
-	ldr r4, _080A2C58 @ =0x0202BBF4
+	ldr r4, _080A2C58 @ =gPlaySt
 	ldr r1, [r4, #4]
 	subs r0, r0, r1
 	movs r1, #0xb4
@@ -278954,7 +278954,7 @@ _080A2C2C:
 	pop {r1}
 	bx r1
 	.align 2, 0
-_080A2C58: .4byte 0x0202BBF4
+_080A2C58: .4byte gPlaySt
 _080A2C5C: .4byte 0x0000EA60
 _080A2C60: .4byte 0x0203EE44
 
@@ -280142,7 +280142,7 @@ _080A353C: .4byte 0x0202E3D4
 sub_080A3540: @ 0x080A3540
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _080A357C @ =0x0202BBF4
+	ldr r0, _080A357C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -280167,7 +280167,7 @@ _080A3558:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080A357C: .4byte 0x0202BBF4
+_080A357C: .4byte gPlaySt
 
 	thumb_func_start sub_080A3580
 sub_080A3580: @ 0x080A3580
@@ -280568,7 +280568,7 @@ _080A38A0: .4byte 0x080C0E98
 sub_080A38A4: @ 0x080A38A4
 	push {r4, r5, lr}
 	adds r4, r0, #0
-	ldr r0, _080A3908 @ =0x0202BBF4
+	ldr r0, _080A3908 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -280616,7 +280616,7 @@ _080A38BA:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080A3908: .4byte 0x0202BBF4
+_080A3908: .4byte gPlaySt
 _080A390C: .4byte 0x00000399
 _080A3910: .4byte 0x030027CC
 _080A3914: .4byte 0x0000FFE0
@@ -281127,7 +281127,7 @@ sub_080A3CF4: @ 0x080A3CF4
 	bne _080A3D7E
 	str r0, [r3, #0x2c]
 	str r0, [r3, #0x30]
-	ldr r2, _080A3DB8 @ =0x08BBFC7C
+	ldr r2, _080A3DB8 @ =gpKeySt
 	ldr r1, [r2]
 	movs r0, #0x20
 	ldrh r1, [r1, #4]
@@ -281213,7 +281213,7 @@ _080A3DA8:
 	bx r0
 	.align 2, 0
 _080A3DB4: .4byte 0x0202BBB4
-_080A3DB8: .4byte 0x08BBFC7C
+_080A3DB8: .4byte gpKeySt
 
 	thumb_func_start sub_080A3DBC
 sub_080A3DBC: @ 0x080A3DBC
@@ -281281,7 +281281,7 @@ sub_080A3E18: @ 0x080A3E18
 	bl sub_080A3C2C
 	adds r0, r4, #0
 	bl sub_080A3CF4
-	ldr r0, _080A3E7C @ =0x08BBFC7C
+	ldr r0, _080A3E7C @ =gpKeySt
 	ldr r0, [r0]
 	movs r3, #0xc0
 	lsls r3, r3, #2
@@ -281315,7 +281315,7 @@ sub_080A3E18: @ 0x080A3E18
 	strb r1, [r2, #0xa]
 	b _080A3EB8
 	.align 2, 0
-_080A3E7C: .4byte 0x08BBFC7C
+_080A3E7C: .4byte gpKeySt
 _080A3E80: .4byte 0x030027CC
 _080A3E84: .4byte 0x0000FFE0
 _080A3E88: .4byte 0x0000E0FF
@@ -281349,7 +281349,7 @@ _080A3EB8:
 	ands r0, r1
 	cmp r0, #0
 	bne _080A3ED8
-	ldr r0, _080A3EF4 @ =0x08BBFC7C
+	ldr r0, _080A3EF4 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0xa
 	ldrh r1, [r1, #8]
@@ -281368,7 +281368,7 @@ _080A3EE4: .4byte 0x0000FFE0
 _080A3EE8: .4byte 0x0000E0FF
 _080A3EEC: .4byte 0x0202BBB4
 _080A3EF0: .4byte 0x000F000F
-_080A3EF4: .4byte 0x08BBFC7C
+_080A3EF4: .4byte gpKeySt
 
 	thumb_func_start sub_080A3EF8
 sub_080A3EF8: @ 0x080A3EF8
@@ -281664,7 +281664,7 @@ _080A40FC:
 	adds r4, r1, #0
 	cmp r0, #0
 	bne _080A412C
-	ldr r1, _080A4128 @ =0x0202BBF4
+	ldr r1, _080A4128 @ =gPlaySt
 	adds r1, #0x2b
 	movs r0, #2
 	rsbs r0, r0, #0
@@ -281674,9 +281674,9 @@ _080A40FC:
 	movs r0, #1
 	b _080A418E
 	.align 2, 0
-_080A4128: .4byte 0x0202BBF4
+_080A4128: .4byte gPlaySt
 _080A412C:
-	ldr r2, _080A414C @ =0x0202BBF4
+	ldr r2, _080A414C @ =gPlaySt
 	adds r1, r2, #0
 	adds r1, #0x2b
 	movs r0, #1
@@ -281692,11 +281692,11 @@ _080A412C:
 	strb r1, [r0]
 	b _080A4154
 	.align 2, 0
-_080A414C: .4byte 0x0202BBF4
+_080A414C: .4byte gPlaySt
 _080A4150:
 	bl sub_0802EBB8
 _080A4154:
-	ldr r3, _080A4198 @ =0x0202BBF4
+	ldr r3, _080A4198 @ =gPlaySt
 	add r0, sp, #0x2c
 	ldrb r0, [r0]
 	lsls r1, r0, #0x1f
@@ -281731,7 +281731,7 @@ _080A418E:
 	pop {r1}
 	bx r1
 	.align 2, 0
-_080A4198: .4byte 0x0202BBF4
+_080A4198: .4byte gPlaySt
 
 	thumb_func_start sub_080A419C
 sub_080A419C: @ 0x080A419C
@@ -281743,7 +281743,7 @@ sub_080A419C: @ 0x080A419C
 	ldrb r0, [r5]
 	cmp r0, #8
 	bne _080A41CC
-	ldr r0, _080A41C8 @ =0x08BBFC7C
+	ldr r0, _080A41C8 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0xf9
 	lsls r0, r0, #1
@@ -281756,9 +281756,9 @@ sub_080A419C: @ 0x080A419C
 	strb r0, [r5]
 	b _080A4228
 	.align 2, 0
-_080A41C8: .4byte 0x08BBFC7C
+_080A41C8: .4byte gpKeySt
 _080A41CC:
-	ldr r0, _080A4200 @ =0x08BBFC7C
+	ldr r0, _080A4200 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x80
 	lsls r0, r0, #1
@@ -281772,7 +281772,7 @@ _080A41CC:
 	bl sub_080A40E8
 	cmp r0, #0
 	bne _080A4208
-	ldr r0, _080A4204 @ =0x0202BBF4
+	ldr r0, _080A4204 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -281783,8 +281783,8 @@ _080A41CC:
 	bl m4aSongNumStart
 	b _080A4228
 	.align 2, 0
-_080A4200: .4byte 0x08BBFC7C
-_080A4204: .4byte 0x0202BBF4
+_080A4200: .4byte gpKeySt
+_080A4204: .4byte gPlaySt
 _080A4208:
 	cmp r0, #0
 	blt _080A4228
@@ -282326,7 +282326,7 @@ sub_080A466C: @ 0x080A466C
 	adds r1, #0x2e
 	movs r0, #2
 	strb r0, [r1]
-	ldr r0, _080A469C @ =0x08BBFC7C
+	ldr r0, _080A469C @ =gpKeySt
 	ldr r3, [r0]
 	ldrh r1, [r3, #6]
 	movs r2, #0x40
@@ -282344,7 +282344,7 @@ sub_080A466C: @ 0x080A466C
 	subs r0, #1
 	b _080A46D2
 	.align 2, 0
-_080A469C: .4byte 0x08BBFC7C
+_080A469C: .4byte gpKeySt
 _080A46A0:
 	adds r0, r2, #0
 	ldrh r3, [r3, #8]
@@ -282374,7 +282374,7 @@ _080A46B4:
 	adds r0, r2, #1
 _080A46D2:
 	strb r0, [r1]
-	ldr r0, _080A46E8 @ =0x0202BBF4
+	ldr r0, _080A46E8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -282384,7 +282384,7 @@ _080A46D2:
 	bl m4aSongNumStart
 	b _080A470E
 	.align 2, 0
-_080A46E8: .4byte 0x0202BBF4
+_080A46E8: .4byte gPlaySt
 _080A46EC: .4byte 0x00000386
 _080A46F0:
 	adds r0, r6, #0
@@ -282393,7 +282393,7 @@ _080A46F0:
 	cmp r0, #0
 	beq _080A470E
 	strb r4, [r1]
-	ldr r0, _080A4768 @ =0x0202BBF4
+	ldr r0, _080A4768 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -282402,7 +282402,7 @@ _080A46F0:
 	ldr r0, _080A476C @ =0x00000386
 	bl m4aSongNumStart
 _080A470E:
-	ldr r0, _080A4770 @ =0x08BBFC7C
+	ldr r0, _080A4770 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #1
@@ -282423,7 +282423,7 @@ _080A471E:
 	adds r4, r5, #0
 	adds r4, #0x42
 	strh r0, [r4]
-	ldr r0, _080A4768 @ =0x0202BBF4
+	ldr r0, _080A4768 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -282448,9 +282448,9 @@ _080A475C:
 	ldr r0, [r0]
 	mov pc, r0
 	.align 2, 0
-_080A4768: .4byte 0x0202BBF4
+_080A4768: .4byte gPlaySt
 _080A476C: .4byte 0x00000386
-_080A4770: .4byte 0x08BBFC7C
+_080A4770: .4byte gpKeySt
 _080A4774: .4byte 0x0000038A
 _080A4778: .4byte _080A477C
 _080A477C: @ jump table
@@ -282577,7 +282577,7 @@ _080A48B0:
 	ands r0, r1
 	cmp r0, #0
 	beq _080A48DC
-	ldr r0, _080A48E4 @ =0x0202BBF4
+	ldr r0, _080A48E4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -282599,7 +282599,7 @@ _080A48DC:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080A48E4: .4byte 0x0202BBF4
+_080A48E4: .4byte gPlaySt
 _080A48E8: .4byte 0x0000038B
 
 	thumb_func_start sub_080A48EC
@@ -282644,7 +282644,7 @@ sub_080A4924: @ 0x080A4924
 	ldrb r1, [r5]
 	cmp r1, #0
 	bne _080A49D4
-	ldr r0, _080A495C @ =0x0202BBF4
+	ldr r0, _080A495C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -282666,7 +282666,7 @@ _080A4944:
 	beq _080A4978
 	b _080A49CC
 	.align 2, 0
-_080A495C: .4byte 0x0202BBF4
+_080A495C: .4byte gPlaySt
 _080A4960: .4byte 0x0000038A
 _080A4964:
 	cmp r0, #0x20
@@ -282767,7 +282767,7 @@ _080A4A12:
 	adds r1, #0x44
 	movs r0, #0xf0
 	strh r0, [r1]
-	ldr r0, _080A4A38 @ =0x0202BBF4
+	ldr r0, _080A4A38 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -282780,7 +282780,7 @@ _080A4A30:
 	bl sub_080A3FC8
 	b _080A4AF2
 	.align 2, 0
-_080A4A38: .4byte 0x0202BBF4
+_080A4A38: .4byte gPlaySt
 _080A4A3C: .4byte 0x0000038A
 _080A4A40:
 	cmp r1, #1
@@ -282799,7 +282799,7 @@ _080A4A4C:
 	movs r1, #6
 _080A4A5E:
 	bl sub_080045FC
-	ldr r0, _080A4A78 @ =0x0202BBF4
+	ldr r0, _080A4A78 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -282809,10 +282809,10 @@ _080A4A5E:
 	bl m4aSongNumStart
 	b _080A4AF2
 	.align 2, 0
-_080A4A78: .4byte 0x0202BBF4
+_080A4A78: .4byte gPlaySt
 _080A4A7C: .4byte 0x0000038A
 _080A4A80:
-	ldr r0, _080A4A94 @ =0x0202BBF4
+	ldr r0, _080A4A94 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -282822,7 +282822,7 @@ _080A4A80:
 	bl m4aSongNumStart
 	b _080A4AF2
 	.align 2, 0
-_080A4A94: .4byte 0x0202BBF4
+_080A4A94: .4byte gPlaySt
 _080A4A98: .4byte 0x0000038B
 _080A4A9C:
 	cmp r1, #1
@@ -282835,7 +282835,7 @@ _080A4AAA:
 	adds r0, r4, #0
 	movs r1, #6
 	bl sub_080045FC
-	ldr r0, _080A4AC8 @ =0x0202BBF4
+	ldr r0, _080A4AC8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -282846,7 +282846,7 @@ _080A4AAA:
 	bl m4aSongNumStart
 	b _080A4AF2
 	.align 2, 0
-_080A4AC8: .4byte 0x0202BBF4
+_080A4AC8: .4byte gPlaySt
 _080A4ACC:
 	adds r0, r4, #0
 	movs r1, #0x11
@@ -282857,7 +282857,7 @@ _080A4ACC:
 	ldrh r1, [r5]
 	orrs r0, r1
 	strh r0, [r5]
-	ldr r0, _080A4B08 @ =0x0202BBF4
+	ldr r0, _080A4B08 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -282876,7 +282876,7 @@ _080A4B00:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080A4B08: .4byte 0x0202BBF4
+_080A4B08: .4byte gPlaySt
 _080A4B0C: .4byte 0x0000038B
 
 	thumb_func_start sub_080A4B10
@@ -282900,7 +282900,7 @@ _080A4B2A:
 	adds r4, r0, #0
 	cmp r1, #0
 	bne _080A4B84
-	ldr r0, _080A4B4C @ =0x08BBFC7C
+	ldr r0, _080A4B4C @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #0x40
@@ -282912,7 +282912,7 @@ _080A4B2A:
 	adds r0, r5, #0
 	b _080A4B5C
 	.align 2, 0
-_080A4B4C: .4byte 0x08BBFC7C
+_080A4B4C: .4byte gpKeySt
 _080A4B50:
 	movs r0, #0x80
 	ands r0, r1
@@ -282925,7 +282925,7 @@ _080A4B5C:
 	lsls r0, r0, #0x18
 	cmp r0, #0
 	beq _080A4BE8
-	ldr r0, _080A4B7C @ =0x0202BBF4
+	ldr r0, _080A4B7C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -282935,10 +282935,10 @@ _080A4B5C:
 	bl m4aSongNumStart
 	b _080A4BE8
 	.align 2, 0
-_080A4B7C: .4byte 0x0202BBF4
+_080A4B7C: .4byte gPlaySt
 _080A4B80: .4byte 0x00000386
 _080A4B84:
-	ldr r0, _080A4BB4 @ =0x08BBFC7C
+	ldr r0, _080A4BB4 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r2, [r0, #8]
 	movs r0, #0x20
@@ -282949,7 +282949,7 @@ _080A4B84:
 	beq _080A4BE8
 	movs r0, #1
 	strb r0, [r4]
-	ldr r0, _080A4BB8 @ =0x0202BBF4
+	ldr r0, _080A4BB8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -282962,8 +282962,8 @@ _080A4BAC:
 	bl sub_080A4078
 	b _080A4BE8
 	.align 2, 0
-_080A4BB4: .4byte 0x08BBFC7C
-_080A4BB8: .4byte 0x0202BBF4
+_080A4BB4: .4byte gpKeySt
+_080A4BB8: .4byte gPlaySt
 _080A4BBC: .4byte 0x00000387
 _080A4BC0:
 	movs r0, #0x10
@@ -282974,7 +282974,7 @@ _080A4BC0:
 	beq _080A4BE8
 	movs r0, #2
 	strb r0, [r4]
-	ldr r0, _080A4C1C @ =0x0202BBF4
+	ldr r0, _080A4C1C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -282986,7 +282986,7 @@ _080A4BE2:
 	adds r0, r5, #0
 	bl sub_080A4078
 _080A4BE8:
-	ldr r0, _080A4C24 @ =0x08BBFC7C
+	ldr r0, _080A4C24 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r2, [r0, #8]
 	movs r1, #1
@@ -283012,9 +283012,9 @@ _080A4BE8:
 	beq _080A4C60
 	b _080A4D5C
 	.align 2, 0
-_080A4C1C: .4byte 0x0202BBF4
+_080A4C1C: .4byte gPlaySt
 _080A4C20: .4byte 0x00000387
-_080A4C24: .4byte 0x08BBFC7C
+_080A4C24: .4byte gpKeySt
 _080A4C28:
 	cmp r0, #4
 	beq _080A4CA0
@@ -283049,7 +283049,7 @@ _080A4C4E:
 	movs r0, #0xf0
 	strh r0, [r1]
 _080A4C60:
-	ldr r0, _080A4C7C @ =0x0202BBF4
+	ldr r0, _080A4C7C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -283062,7 +283062,7 @@ _080A4C72:
 	bl sub_080A3FC8
 	b _080A4D5C
 	.align 2, 0
-_080A4C7C: .4byte 0x0202BBF4
+_080A4C7C: .4byte gPlaySt
 _080A4C80: .4byte 0x0000038A
 _080A4C84:
 	adds r0, r5, #0
@@ -283070,7 +283070,7 @@ _080A4C84:
 	ldrb r0, [r0]
 	cmp r0, #0xff
 	beq _080A4CB0
-	ldr r0, _080A4CA8 @ =0x0202BBF4
+	ldr r0, _080A4CA8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -283083,7 +283083,7 @@ _080A4CA0:
 	bl sub_080A4924
 	b _080A4D5C
 	.align 2, 0
-_080A4CA8: .4byte 0x0202BBF4
+_080A4CA8: .4byte gPlaySt
 _080A4CAC: .4byte 0x0000038A
 _080A4CB0:
 	adds r0, r5, #0
@@ -283091,7 +283091,7 @@ _080A4CB0:
 	adds r0, r5, #0
 	movs r1, #6
 	bl sub_080045FC
-	ldr r0, _080A4CD4 @ =0x0202BBF4
+	ldr r0, _080A4CD4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -283102,7 +283102,7 @@ _080A4CB0:
 	bl m4aSongNumStart
 	b _080A4D5C
 	.align 2, 0
-_080A4CD4: .4byte 0x0202BBF4
+_080A4CD4: .4byte gPlaySt
 _080A4CD8:
 	movs r0, #2
 	ands r0, r2
@@ -283111,7 +283111,7 @@ _080A4CD8:
 	adds r0, r5, #0
 	adds r0, #0x29
 	strb r1, [r0]
-	ldr r0, _080A4D10 @ =0x0202BBF4
+	ldr r0, _080A4D10 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -283130,7 +283130,7 @@ _080A4CF8:
 	bl sub_080A4078
 	b _080A4D5C
 	.align 2, 0
-_080A4D10: .4byte 0x0202BBF4
+_080A4D10: .4byte gPlaySt
 _080A4D14: .4byte 0x0000038B
 _080A4D18:
 	adds r2, r5, #0
@@ -283330,7 +283330,7 @@ _080A4E6E:
 	adds r1, r7, #0
 	adds r1, #0x42
 	strh r0, [r1]
-	ldr r0, _080A4EB8 @ =0x0202BBF4
+	ldr r0, _080A4EB8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -283344,7 +283344,7 @@ _080A4EAE:
 	bl sub_080045FC
 	b _080A5044
 	.align 2, 0
-_080A4EB8: .4byte 0x0202BBF4
+_080A4EB8: .4byte gPlaySt
 _080A4EBC: .4byte 0x0000038B
 _080A4EC0:
 	adds r0, r7, #0
@@ -283787,7 +283787,7 @@ sub_080A5218: @ 0x080A5218
 	adds r1, #0x2e
 	movs r0, #0xa
 	strb r0, [r1]
-	ldr r0, _080A525C @ =0x08BBFC7C
+	ldr r0, _080A525C @ =gpKeySt
 	ldr r3, [r0]
 	ldrh r1, [r3, #6]
 	movs r6, #0x40
@@ -283813,7 +283813,7 @@ _080A5256:
 	strb r0, [r2]
 	b _080A528A
 	.align 2, 0
-_080A525C: .4byte 0x08BBFC7C
+_080A525C: .4byte gpKeySt
 _080A5260:
 	movs r6, #0x80
 	adds r0, r6, #0
@@ -283844,7 +283844,7 @@ _080A528A:
 	ldrb r0, [r5]
 	cmp r7, r0
 	beq _080A52A8
-	ldr r0, _080A52F8 @ =0x0202BBF4
+	ldr r0, _080A52F8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -283853,7 +283853,7 @@ _080A528A:
 	ldr r0, _080A52FC @ =0x00000386
 	bl m4aSongNumStart
 _080A52A8:
-	ldr r0, _080A5300 @ =0x08BBFC7C
+	ldr r0, _080A5300 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r2, [r0, #8]
 	movs r1, #1
@@ -283869,7 +283869,7 @@ _080A52A8:
 	adds r5, #0x35
 	movs r6, #0
 	strb r0, [r5]
-	ldr r0, _080A52F8 @ =0x0202BBF4
+	ldr r0, _080A52F8 @ =gPlaySt
 	adds r7, r0, #0
 	adds r7, #0x41
 	ldrb r1, [r7]
@@ -283893,9 +283893,9 @@ _080A52DE:
 	beq _080A5360
 	b _080A537A
 	.align 2, 0
-_080A52F8: .4byte 0x0202BBF4
+_080A52F8: .4byte gPlaySt
 _080A52FC: .4byte 0x00000386
-_080A5300: .4byte 0x08BBFC7C
+_080A5300: .4byte gpKeySt
 _080A5304: .4byte 0x0000038A
 _080A5308:
 	cmp r0, #0x20
@@ -283972,7 +283972,7 @@ _080A538A:
 	adds r0, r4, #0
 	movs r1, #9
 	bl sub_080045FC
-	ldr r0, _080A53BC @ =0x0202BBF4
+	ldr r0, _080A53BC @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -283986,7 +283986,7 @@ _080A53B2:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080A53BC: .4byte 0x0202BBF4
+_080A53BC: .4byte gPlaySt
 _080A53C0: .4byte 0x0000038B
 
 	thumb_func_start sub_080A53C4
@@ -284032,7 +284032,7 @@ _080A53FC:
 	ldrb r0, [r0]
 	cmp r4, r0
 	beq _080A5424
-	ldr r0, _080A541C @ =0x0202BBF4
+	ldr r0, _080A541C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -284042,7 +284042,7 @@ _080A53FC:
 	bl m4aSongNumStart
 	b _080A53DA
 	.align 2, 0
-_080A541C: .4byte 0x0202BBF4
+_080A541C: .4byte gPlaySt
 _080A5420: .4byte 0x00000386
 _080A5424:
 	movs r0, #0
@@ -284062,7 +284062,7 @@ sub_080A542C: @ 0x080A542C
 	ldr r1, [r4, #0x30]
 	ldr r2, [r4, #0x58]
 	bl sub_080827F4
-	ldr r0, _080A5460 @ =0x0202BBF4
+	ldr r0, _080A5460 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -284077,20 +284077,20 @@ _080A5456:
 	bx r0
 	.align 2, 0
 _080A545C: .4byte 0x06013800
-_080A5460: .4byte 0x0202BBF4
+_080A5460: .4byte gPlaySt
 
 	thumb_func_start sub_080A5464
 sub_080A5464: @ 0x080A5464
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _080A5498 @ =0x08BBFC7C
+	ldr r0, _080A5498 @ =gpKeySt
 	ldr r1, [r0]
 	ldr r0, _080A549C @ =0x00000103
 	ldrh r1, [r1, #8]
 	ands r0, r1
 	cmp r0, #0
 	beq _080A5492
-	ldr r0, _080A54A0 @ =0x0202BBF4
+	ldr r0, _080A54A0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -284107,9 +284107,9 @@ _080A5492:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080A5498: .4byte 0x08BBFC7C
+_080A5498: .4byte gpKeySt
 _080A549C: .4byte 0x00000103
-_080A54A0: .4byte 0x0202BBF4
+_080A54A0: .4byte gPlaySt
 _080A54A4: .4byte 0x00000391
 
 	thumb_func_start sub_080A54A8
@@ -284143,7 +284143,7 @@ sub_080A54C8: @ 0x080A54C8
 	ldrb r1, [r3]
 	cmp r1, #0
 	bne _080A550E
-	ldr r0, _080A54F8 @ =0x08BBFC7C
+	ldr r0, _080A54F8 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #0x40
@@ -284156,7 +284156,7 @@ sub_080A54C8: @ 0x080A54C8
 	bl sub_080A53C4
 	b _080A5566
 	.align 2, 0
-_080A54F8: .4byte 0x08BBFC7C
+_080A54F8: .4byte gpKeySt
 _080A54FC:
 	movs r0, #0x80
 	ands r0, r1
@@ -284167,7 +284167,7 @@ _080A54FC:
 	bl sub_080A53C4
 	b _080A5566
 _080A550E:
-	ldr r0, _080A5538 @ =0x08BBFC7C
+	ldr r0, _080A5538 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r2, [r0, #8]
 	movs r0, #0x20
@@ -284178,7 +284178,7 @@ _080A550E:
 	beq _080A5566
 	movs r0, #1
 	strb r0, [r3]
-	ldr r0, _080A553C @ =0x0202BBF4
+	ldr r0, _080A553C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -284188,8 +284188,8 @@ _080A550E:
 	bl m4aSongNumStart
 	b _080A5566
 	.align 2, 0
-_080A5538: .4byte 0x08BBFC7C
-_080A553C: .4byte 0x0202BBF4
+_080A5538: .4byte gpKeySt
+_080A553C: .4byte gPlaySt
 _080A5540: .4byte 0x00000387
 _080A5544:
 	movs r0, #0x10
@@ -284200,7 +284200,7 @@ _080A5544:
 	beq _080A5566
 	movs r0, #2
 	strb r0, [r3]
-	ldr r0, _080A55A8 @ =0x0202BBF4
+	ldr r0, _080A55A8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -284209,7 +284209,7 @@ _080A5544:
 	ldr r0, _080A55AC @ =0x00000387
 	bl m4aSongNumStart
 _080A5566:
-	ldr r0, _080A55B0 @ =0x08BBFC7C
+	ldr r0, _080A55B0 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r3, #1
@@ -284244,9 +284244,9 @@ _080A5586:
 	beq _080A55E0
 	b _080A560C
 	.align 2, 0
-_080A55A8: .4byte 0x0202BBF4
+_080A55A8: .4byte gPlaySt
 _080A55AC: .4byte 0x00000387
-_080A55B0: .4byte 0x08BBFC7C
+_080A55B0: .4byte gpKeySt
 _080A55B4:
 	ldr r2, _080A55BC @ =0x00000734
 	movs r0, #0x40
@@ -284277,7 +284277,7 @@ _080A55E0:
 	adds r0, r4, #0
 	movs r1, #0xe
 	bl sub_080045FC
-	ldr r0, _080A5604 @ =0x0202BBF4
+	ldr r0, _080A5604 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -284287,7 +284287,7 @@ _080A55E0:
 	bl m4aSongNumStart
 	b _080A567A
 	.align 2, 0
-_080A5604: .4byte 0x0202BBF4
+_080A5604: .4byte gPlaySt
 _080A5608: .4byte 0x0000038A
 _080A560C:
 	adds r0, r4, #0
@@ -284308,7 +284308,7 @@ _080A5628:
 	ands r0, r1
 	cmp r0, #0
 	beq _080A567A
-	ldr r0, _080A565C @ =0x0202BBF4
+	ldr r0, _080A565C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -284329,7 +284329,7 @@ _080A5642:
 	bl sub_080A4078
 	b _080A567A
 	.align 2, 0
-_080A565C: .4byte 0x0202BBF4
+_080A565C: .4byte gPlaySt
 _080A5660: .4byte 0x0000038B
 _080A5664:
 	ldr r0, _080A5680 @ =0x0843165C
@@ -284369,7 +284369,7 @@ sub_080A56A0: @ 0x080A56A0
 	ldr r0, [r4, #0x60]
 	cmp r0, #0
 	beq _080A56AE
-	bl sub_08012B8C
+	bl EndSpriteAnimProc
 _080A56AE:
 	ldr r0, [r4, #0x58]
 	bl sub_08004460
@@ -284477,7 +284477,7 @@ sub_080A577C: @ 0x080A577C
 	adds r5, r0, #0
 	movs r0, #8
 	bl sub_08013200
-	ldr r4, _080A57A4 @ =0x0202BBF4
+	ldr r4, _080A57A4 @ =gPlaySt
 	movs r0, #0x80
 	ldrb r1, [r4, #0x14]
 	orrs r0, r1
@@ -284491,7 +284491,7 @@ sub_080A577C: @ 0x080A577C
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080A57A4: .4byte 0x0202BBF4
+_080A57A4: .4byte gPlaySt
 
 	thumb_func_start sub_080A57A8
 sub_080A57A8: @ 0x080A57A8
@@ -284521,7 +284521,7 @@ sub_080A57BC: @ 0x080A57BC
 	ldr r0, [r4, #0x60]
 	cmp r0, #0
 	beq _080A57E4
-	bl sub_08012B8C
+	bl EndSpriteAnimProc
 _080A57E4:
 	adds r0, r4, #0
 	adds r0, #0x35
@@ -284893,7 +284893,7 @@ sub_080A5AA0: @ 0x080A5AA0
 	strh r1, [r3]
 	adds r0, #0x35
 	strb r2, [r0]
-	ldr r2, _080A5AD4 @ =0x0202BBF4
+	ldr r2, _080A5AD4 @ =gPlaySt
 	adds r2, #0x40
 	movs r0, #0x61
 	rsbs r0, r0, #0
@@ -284906,7 +284906,7 @@ sub_080A5AA0: @ 0x080A5AA0
 	bx r0
 	.align 2, 0
 _080A5AD0: .4byte 0x08DAD3A4
-_080A5AD4: .4byte 0x0202BBF4
+_080A5AD4: .4byte gPlaySt
 
 	thumb_func_start sub_080A5AD8
 sub_080A5AD8: @ 0x080A5AD8
@@ -285203,7 +285203,7 @@ sub_080A5D24: @ 0x080A5D24
 	movs r0, #0x40
 	movs r1, #0x30
 	bl sub_080827F4
-	ldr r0, _080A5D58 @ =0x0202BBF4
+	ldr r0, _080A5D58 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -285214,7 +285214,7 @@ sub_080A5D24: @ 0x080A5D24
 	b _080A5D68
 	.align 2, 0
 _080A5D54: .4byte 0x00000731
-_080A5D58: .4byte 0x0202BBF4
+_080A5D58: .4byte gPlaySt
 _080A5D5C: .4byte 0x0000037B
 _080A5D60:
 	adds r0, r1, #0
@@ -285238,7 +285238,7 @@ sub_080A5D6C: @ 0x080A5D6C
 	movs r0, #0x40
 	movs r1, #0x30
 	bl sub_080827F4
-	ldr r0, _080A5DA0 @ =0x0202BBF4
+	ldr r0, _080A5DA0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -285249,7 +285249,7 @@ sub_080A5D6C: @ 0x080A5D6C
 	b _080A5DB0
 	.align 2, 0
 _080A5D9C: .4byte 0x00000732
-_080A5DA0: .4byte 0x0202BBF4
+_080A5DA0: .4byte gPlaySt
 _080A5DA4: .4byte 0x0000037B
 _080A5DA8:
 	adds r0, r1, #0
@@ -285270,7 +285270,7 @@ sub_080A5DB4: @ 0x080A5DB4
 	ldrsh r0, [r1, r3]
 	cmp r0, #0x1e
 	ble _080A5DE4
-	ldr r0, _080A5DE0 @ =0x08BBFC7C
+	ldr r0, _080A5DE0 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0xb
 	ldrh r1, [r1, #8]
@@ -285282,7 +285282,7 @@ sub_080A5DB4: @ 0x080A5DB4
 	bl sub_0800457C
 	b _080A5DE8
 	.align 2, 0
-_080A5DE0: .4byte 0x08BBFC7C
+_080A5DE0: .4byte gpKeySt
 _080A5DE4:
 	adds r0, r2, #1
 	strh r0, [r1]
@@ -286505,7 +286505,7 @@ _080A66F4:
 	ldr r0, [r2, #0x60]
 	cmp r0, #0
 	beq _080A6788
-	bl sub_08012B8C
+	bl EndSpriteAnimProc
 	mov r2, r8
 	ldr r1, [r2, #0x14]
 	movs r0, #0
@@ -288231,7 +288231,7 @@ _080A7442:
 	movs r1, #0
 	movs r2, #4
 	bl sub_080059DC
-	ldr r4, _080A7508 @ =0x0202BBF4
+	ldr r4, _080A7508 @ =gPlaySt
 	adds r6, r4, #0
 	adds r6, #0x2b
 	ldrb r1, [r6]
@@ -288289,7 +288289,7 @@ _080A74F8: .4byte 0x0200006C
 _080A74FC: .4byte 0x06011000
 _080A7500: .4byte 0x08190268
 _080A7504: .4byte 0x02000084
-_080A7508: .4byte 0x0202BBF4
+_080A7508: .4byte gPlaySt
 _080A750C: .4byte 0x02022DBC
 _080A7510: .4byte 0x081C8FCC
 
@@ -288355,7 +288355,7 @@ sub_080A7584: @ 0x080A7584
 	ldr r0, _080A75BC @ =0x0000079D
 	bl sub_08013318
 	bl sub_0802EBB8
-	ldr r2, _080A75C0 @ =0x0202BBF4
+	ldr r2, _080A75C0 @ =gPlaySt
 	adds r3, r2, #0
 	adds r3, #0x2b
 	movs r0, #0xf
@@ -288375,7 +288375,7 @@ sub_080A7584: @ 0x080A7584
 	bx r0
 	.align 2, 0
 _080A75BC: .4byte 0x0000079D
-_080A75C0: .4byte 0x0202BBF4
+_080A75C0: .4byte gPlaySt
 
 	thumb_func_start sub_080A75C4
 sub_080A75C4: @ 0x080A75C4
@@ -288671,14 +288671,14 @@ sub_080A7834: @ 0x080A7834
 	asrs r0, r0, #0x18
 	cmp r0, #0
 	bne _080A78FE
-	ldr r0, _080A7878 @ =0x08BBFC7C
+	ldr r0, _080A7878 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #1
 	ands r0, r1
 	cmp r0, #0
 	beq _080A78BE
-	ldr r0, _080A787C @ =0x0202BBF4
+	ldr r0, _080A787C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -288696,8 +288696,8 @@ _080A7866:
 	beq _080A788E
 	b _080A79A4
 	.align 2, 0
-_080A7878: .4byte 0x08BBFC7C
-_080A787C: .4byte 0x0202BBF4
+_080A7878: .4byte gpKeySt
+_080A787C: .4byte gPlaySt
 _080A7880: .4byte 0x0000038A
 _080A7884:
 	cmp r0, #2
@@ -288736,7 +288736,7 @@ _080A78BE:
 	adds r0, r4, #0
 	movs r1, #1
 	bl sub_080045FC
-	ldr r0, _080A78E4 @ =0x0202BBF4
+	ldr r0, _080A78E4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -288746,7 +288746,7 @@ _080A78BE:
 	bl m4aSongNumStart
 	b _080A79A4
 	.align 2, 0
-_080A78E4: .4byte 0x0202BBF4
+_080A78E4: .4byte gPlaySt
 _080A78E8: .4byte 0x0000038A
 _080A78EC:
 	movs r0, #0x80
@@ -288758,7 +288758,7 @@ _080A78EC:
 	bl sub_080A7328
 	b _080A79A4
 _080A78FE:
-	ldr r0, _080A79AC @ =0x08BBFC7C
+	ldr r0, _080A79AC @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x81
 	lsls r0, r0, #1
@@ -288769,7 +288769,7 @@ _080A78FE:
 	adds r0, r4, #0
 	bl sub_080A7374
 _080A7914:
-	ldr r2, _080A79AC @ =0x08BBFC7C
+	ldr r2, _080A79AC @ =gpKeySt
 	ldr r1, [r2]
 	movs r0, #0x80
 	ldrh r1, [r1, #6]
@@ -288835,7 +288835,7 @@ _080A798A:
 	ldr r0, [r4, #0x2c]
 	adds r1, r4, #0
 	bl sub_080A73C4
-	ldr r0, _080A79B0 @ =0x0202BBF4
+	ldr r0, _080A79B0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -288848,8 +288848,8 @@ _080A79A4:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080A79AC: .4byte 0x08BBFC7C
-_080A79B0: .4byte 0x0202BBF4
+_080A79AC: .4byte gpKeySt
+_080A79B0: .4byte gPlaySt
 _080A79B4: .4byte 0x00000385
 
 	thumb_func_start sub_080A79B8
@@ -288866,7 +288866,7 @@ sub_080A79C8: @ 0x080A79C8
 	push {r4, lr}
 	sub sp, #8
 	adds r4, r0, #0
-	ldr r0, _080A79E0 @ =0x0202BBF4
+	ldr r0, _080A79E0 @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #1
 	bne _080A79E4
@@ -288875,7 +288875,7 @@ sub_080A79C8: @ 0x080A79C8
 	bl sub_080045FC
 	b _080A7A4A
 	.align 2, 0
-_080A79E0: .4byte 0x0202BBF4
+_080A79E0: .4byte gPlaySt
 _080A79E4:
 	movs r0, #0
 	bl sub_08002A44
@@ -288944,7 +288944,7 @@ sub_080A7A60: @ 0x080A7A60
 	cmp r0, #0
 	bne _080A7A8A
 _080A7A74:
-	ldr r1, _080A7A90 @ =0x0202BBF4
+	ldr r1, _080A7A90 @ =gPlaySt
 	adds r1, #0x2b
 	movs r0, #2
 	rsbs r0, r0, #0
@@ -288959,7 +288959,7 @@ _080A7A8A:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080A7A90: .4byte 0x0202BBF4
+_080A7A90: .4byte gPlaySt
 
 	thumb_func_start sub_080A7A94
 sub_080A7A94: @ 0x080A7A94
@@ -289052,7 +289052,7 @@ sub_080A7B2C: @ 0x080A7B2C
 	push {r4, r5, lr}
 	sub sp, #4
 	adds r4, r0, #0
-	ldr r0, _080A7BA8 @ =0x0202BBF4
+	ldr r0, _080A7BA8 @ =gPlaySt
 	adds r0, #0x2b
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1c
@@ -289103,7 +289103,7 @@ _080A7B7A:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080A7BA8: .4byte 0x0202BBF4
+_080A7BA8: .4byte gPlaySt
 _080A7BAC: .4byte 0x0200006C
 _080A7BB0: .4byte 0x0200008C
 
@@ -289131,14 +289131,14 @@ _080A7BC8:
 	subs r4, #1
 	cmp r4, #0
 	bge _080A7BC8
-	ldr r1, _080A7C80 @ =0x08BBFC7C
+	ldr r1, _080A7C80 @ =gpKeySt
 	ldr r3, [r1]
 	ldrh r2, [r3, #8]
 	movs r0, #1
 	ands r0, r2
 	cmp r0, #0
 	beq _080A7C9C
-	ldr r5, _080A7C84 @ =0x0202BBF4
+	ldr r5, _080A7C84 @ =gPlaySt
 	adds r0, r5, #0
 	adds r0, #0x41
 	ldrb r0, [r0]
@@ -289201,8 +289201,8 @@ _080A7C02:
 	.align 2, 0
 _080A7C78: .4byte 0x0000F4C0
 _080A7C7C: .4byte 0x08BFF7A8
-_080A7C80: .4byte 0x08BBFC7C
-_080A7C84: .4byte 0x0202BBF4
+_080A7C80: .4byte gpKeySt
+_080A7C84: .4byte gPlaySt
 _080A7C88: .4byte 0x0000038A
 _080A7C8C: .4byte 0x02022DBC
 _080A7C90: .4byte 0x081C8FCC
@@ -289213,7 +289213,7 @@ _080A7C9C:
 	ands r0, r2
 	cmp r0, #0
 	beq _080A7CC8
-	ldr r0, _080A7CC0 @ =0x0202BBF4
+	ldr r0, _080A7CC0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -289226,7 +289226,7 @@ _080A7CB6:
 	bl sub_0800457C
 	b _080A7D3C
 	.align 2, 0
-_080A7CC0: .4byte 0x0202BBF4
+_080A7CC0: .4byte gPlaySt
 _080A7CC4: .4byte 0x0000038B
 _080A7CC8:
 	movs r4, #0x20
@@ -289283,7 +289283,7 @@ _080A7D10:
 	movs r1, #0x60
 	movs r2, #2
 	bl sub_080AA3F8
-	ldr r0, _080A7D48 @ =0x0202BBF4
+	ldr r0, _080A7D48 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -289299,7 +289299,7 @@ _080A7D3C:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080A7D48: .4byte 0x0202BBF4
+_080A7D48: .4byte gPlaySt
 _080A7D4C: .4byte 0x00000385
 
 	thumb_func_start sub_080A7D50
@@ -289342,7 +289342,7 @@ sub_080A7D9C: @ 0x080A7D9C
 	push {r4, r5, r6, lr}
 	sub sp, #4
 	adds r4, r0, #0
-	ldr r0, _080A7E44 @ =0x0202BBF4
+	ldr r0, _080A7E44 @ =gPlaySt
 	adds r0, #0x2b
 	ldrb r0, [r0]
 	lsrs r0, r0, #4
@@ -289411,7 +289411,7 @@ _080A7E00:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080A7E44: .4byte 0x0202BBF4
+_080A7E44: .4byte gPlaySt
 _080A7E48: .4byte 0x0200006C
 
 	thumb_func_start sub_080A7E4C
@@ -289439,7 +289439,7 @@ _080A7E62:
 	subs r4, #1
 	cmp r4, #0
 	bge _080A7E62
-	ldr r1, _080A7F14 @ =0x08BBFC7C
+	ldr r1, _080A7F14 @ =gpKeySt
 	ldr r2, [r1]
 	ldrh r5, [r2, #8]
 	movs r0, #1
@@ -289447,7 +289447,7 @@ _080A7E62:
 	mov r8, r1
 	cmp r0, #0
 	beq _080A7F30
-	ldr r5, _080A7F18 @ =0x0202BBF4
+	ldr r5, _080A7F18 @ =gPlaySt
 	adds r0, r5, #0
 	adds r0, #0x41
 	ldrb r0, [r0]
@@ -289506,8 +289506,8 @@ _080A7E9E:
 	.align 2, 0
 _080A7F0C: .4byte 0x0000F4C0
 _080A7F10: .4byte 0x08BFF7B0
-_080A7F14: .4byte 0x08BBFC7C
-_080A7F18: .4byte 0x0202BBF4
+_080A7F14: .4byte gpKeySt
+_080A7F18: .4byte gPlaySt
 _080A7F1C: .4byte 0x0000038A
 _080A7F20: .4byte 0x02022DBC
 _080A7F24: .4byte 0x081C8FCC
@@ -289518,7 +289518,7 @@ _080A7F30:
 	ands r0, r5
 	cmp r0, #0
 	beq _080A7F5C
-	ldr r0, _080A7F54 @ =0x0202BBF4
+	ldr r0, _080A7F54 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -289531,7 +289531,7 @@ _080A7F4A:
 	bl sub_0800457C
 	b _080A8054
 	.align 2, 0
-_080A7F54: .4byte 0x0202BBF4
+_080A7F54: .4byte gPlaySt
 _080A7F58: .4byte 0x0000038B
 _080A7F5C:
 	movs r6, #0x40
@@ -289654,7 +289654,7 @@ _080A8014:
 	adds r0, r4, #0
 	movs r2, #1
 	bl sub_080AA3F8
-	ldr r0, _080A8064 @ =0x0202BBF4
+	ldr r0, _080A8064 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -289671,7 +289671,7 @@ _080A8054:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080A8064: .4byte 0x0202BBF4
+_080A8064: .4byte gPlaySt
 _080A8068: .4byte 0x00000385
 
 	thumb_func_start sub_080A806C
@@ -289714,7 +289714,7 @@ sub_080A80B8: @ 0x080A80B8
 	push {r4, r5, lr}
 	sub sp, #4
 	adds r4, r0, #0
-	ldr r0, _080A8134 @ =0x0202BBF4
+	ldr r0, _080A8134 @ =gPlaySt
 	adds r0, #0x2c
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1f
@@ -289765,7 +289765,7 @@ _080A8106:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080A8134: .4byte 0x0202BBF4
+_080A8134: .4byte gPlaySt
 _080A8138: .4byte 0x0200006C
 _080A813C: .4byte 0x0200008C
 
@@ -289793,7 +289793,7 @@ _080A8154:
 	subs r4, #1
 	cmp r4, #0
 	bge _080A8154
-	ldr r1, _080A81F0 @ =0x08BBFC7C
+	ldr r1, _080A81F0 @ =gpKeySt
 	ldr r3, [r1]
 	ldrh r2, [r3, #8]
 	movs r5, #1
@@ -289801,7 +289801,7 @@ _080A8154:
 	ands r0, r2
 	cmp r0, #0
 	beq _080A8204
-	ldr r5, _080A81F4 @ =0x0202BBF4
+	ldr r5, _080A81F4 @ =gPlaySt
 	adds r0, r5, #0
 	adds r0, #0x41
 	ldrb r0, [r0]
@@ -289849,8 +289849,8 @@ _080A8190:
 	.align 2, 0
 _080A81E8: .4byte 0x0000F4C0
 _080A81EC: .4byte 0x08BFF7A8
-_080A81F0: .4byte 0x08BBFC7C
-_080A81F4: .4byte 0x0202BBF4
+_080A81F0: .4byte gpKeySt
+_080A81F4: .4byte gPlaySt
 _080A81F8: .4byte 0x0000038A
 _080A81FC: .4byte 0x0200006C
 _080A8200: .4byte 0x06011000
@@ -289859,7 +289859,7 @@ _080A8204:
 	ands r0, r2
 	cmp r0, #0
 	beq _080A8230
-	ldr r0, _080A8228 @ =0x0202BBF4
+	ldr r0, _080A8228 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -289872,7 +289872,7 @@ _080A821E:
 	bl sub_0800457C
 	b _080A82A4
 	.align 2, 0
-_080A8228: .4byte 0x0202BBF4
+_080A8228: .4byte gPlaySt
 _080A822C: .4byte 0x0000038B
 _080A8230:
 	movs r4, #0x20
@@ -289928,7 +289928,7 @@ _080A8278:
 	movs r1, #0x60
 	movs r2, #1
 	bl sub_080AA3F8
-	ldr r0, _080A82B0 @ =0x0202BBF4
+	ldr r0, _080A82B0 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -289944,7 +289944,7 @@ _080A82A4:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080A82B0: .4byte 0x0202BBF4
+_080A82B0: .4byte gPlaySt
 _080A82B4: .4byte 0x00000385
 
 	thumb_func_start sub_080A82B8
@@ -291209,7 +291209,7 @@ sub_080A8B98: @ 0x080A8B98
 	bge _080A8D68
 	adds r2, r7, #0
 _080A8C92:
-	ldr r1, _080A8D04 @ =0x0202BBF4
+	ldr r1, _080A8D04 @ =gPlaySt
 	movs r0, #0x40
 	ldrb r1, [r1, #0x14]
 	ands r0, r1
@@ -291252,7 +291252,7 @@ _080A8CF4: .4byte 0x06010000
 _080A8CF8: .4byte 0x08436460
 _080A8CFC: .4byte 0x08DAE0DC
 _080A8D00: .4byte 0x08439414
-_080A8D04: .4byte 0x0202BBF4
+_080A8D04: .4byte gPlaySt
 _080A8D08:
 	adds r1, r6, #0
 	adds r1, #0x49
@@ -291694,7 +291694,7 @@ sub_080A9064: @ 0x080A9064
 sub_080A9090: @ 0x080A9090
 	push {r4, r5, r6, r7, lr}
 	adds r4, r0, #0
-	ldr r2, _080A90D0 @ =0x08BBFC7C
+	ldr r2, _080A90D0 @ =gpKeySt
 	ldr r1, [r2]
 	movs r0, #0x40
 	ldrh r1, [r1, #6]
@@ -291710,7 +291710,7 @@ sub_080A9090: @ 0x080A9090
 	ldrb r0, [r0]
 	cmp r0, #1
 	bne _080A90DC
-	ldr r0, _080A90D4 @ =0x0202BBF4
+	ldr r0, _080A90D4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -291724,8 +291724,8 @@ _080A90C6:
 	bl sub_080A9064
 	b _080A9322
 	.align 2, 0
-_080A90D0: .4byte 0x08BBFC7C
-_080A90D4: .4byte 0x0202BBF4
+_080A90D0: .4byte gpKeySt
+_080A90D4: .4byte gPlaySt
 _080A90D8: .4byte 0x00000386
 _080A90DC:
 	ldr r1, [r2]
@@ -291784,7 +291784,7 @@ _080A912E:
 	cmp r0, #0
 	bne _080A9164
 _080A9146:
-	ldr r0, _080A9160 @ =0x0202BBF4
+	ldr r0, _080A9160 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -291797,9 +291797,9 @@ _080A9154:
 	bl m4aSongNumStart
 	b _080A9322
 	.align 2, 0
-_080A9160: .4byte 0x0202BBF4
+_080A9160: .4byte gPlaySt
 _080A9164:
-	ldr r0, _080A9180 @ =0x0202BBF4
+	ldr r0, _080A9180 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -291813,7 +291813,7 @@ _080A9176:
 	bl sub_080A9064
 	b _080A9322
 	.align 2, 0
-_080A9180: .4byte 0x0202BBF4
+_080A9180: .4byte gPlaySt
 _080A9184: .4byte 0x00000386
 _080A9188:
 	ldr r1, [r2]
@@ -291840,7 +291840,7 @@ _080A91A2:
 	movs r0, #1
 _080A91B6:
 	bl sub_080A9CAC
-	ldr r0, _080A91D4 @ =0x0202BBF4
+	ldr r0, _080A91D4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -291853,7 +291853,7 @@ _080A91CC:
 	bl sub_080A9034
 	b _080A9322
 	.align 2, 0
-_080A91D4: .4byte 0x0202BBF4
+_080A91D4: .4byte gPlaySt
 _080A91D8: .4byte 0x00000387
 _080A91DC:
 	ldrh r1, [r1, #8]
@@ -291862,7 +291862,7 @@ _080A91DC:
 	cmp r0, #0
 	beq _080A929C
 	str r7, [r4, #0x2c]
-	ldr r6, _080A925C @ =0x0202BBF4
+	ldr r6, _080A925C @ =gPlaySt
 	adds r0, r6, #0
 	adds r0, #0x41
 	ldrb r0, [r0]
@@ -291921,7 +291921,7 @@ _080A9244:
 	strb r0, [r6, #0x14]
 	b _080A9296
 	.align 2, 0
-_080A925C: .4byte 0x0202BBF4
+_080A925C: .4byte gPlaySt
 _080A9260: .4byte 0x0000038A
 _080A9264: .4byte 0x0201E8D4
 _080A9268:
@@ -291963,7 +291963,7 @@ _080A929C:
 	cmp r1, #0
 	bne _080A92D6
 	str r1, [r4, #0x2c]
-	ldr r0, _080A9328 @ =0x0202BBF4
+	ldr r0, _080A9328 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -292021,7 +292021,7 @@ _080A9322:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080A9328: .4byte 0x0202BBF4
+_080A9328: .4byte gPlaySt
 _080A932C: .4byte 0x0000038B
 _080A9330: .4byte 0x000001FF
 _080A9334: .4byte 0x0201E8D4
@@ -294070,7 +294070,7 @@ sub_080AA278: @ 0x080AA278
 	lsls r4, r4, #2
 	adds r2, r2, r4
 	adds r2, r2, r1
-	ldr r1, _080AA33C @ =0x0202BBF4
+	ldr r1, _080AA33C @ =gPlaySt
 	adds r1, #0x41
 	ldrb r1, [r1]
 	lsls r1, r1, #0x1c
@@ -294153,7 +294153,7 @@ _080AA306:
 	bx r0
 	.align 2, 0
 _080AA338: .4byte 0x02022860
-_080AA33C: .4byte 0x0202BBF4
+_080AA33C: .4byte gPlaySt
 _080AA340: .4byte 0x08428A80
 _080AA344: .4byte 0x08BFF760
 
@@ -297183,7 +297183,7 @@ sub_080AB970: @ 0x080AB970
 	bl sub_08031A5C
 	adds r1, r0, #0
 	movs r2, #0
-	ldr r0, _080AB9D8 @ =0x0202BBF4
+	ldr r0, _080AB9D8 @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #3
 	bne _080AB9AA
@@ -297210,7 +297210,7 @@ _080AB9AA:
 	b _080ABA80
 	.align 2, 0
 _080AB9D4: .4byte 0x0843943C
-_080AB9D8: .4byte 0x0202BBF4
+_080AB9D8: .4byte gPlaySt
 _080AB9DC: .4byte 0x0000117D
 _080AB9E0: .4byte 0x00001182
 _080AB9E4:
@@ -297261,7 +297261,7 @@ _080ABA1C:
 	bl sub_08031A5C
 	adds r1, r0, #0
 	movs r2, #0
-	ldr r0, _080ABAA0 @ =0x0202BBF4
+	ldr r0, _080ABAA0 @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #3
 	bne _080ABA5E
@@ -297297,7 +297297,7 @@ _080ABA80:
 	.align 2, 0
 _080ABA98: .4byte 0x0000117A
 _080ABA9C: .4byte 0x0000117B
-_080ABAA0: .4byte 0x0202BBF4
+_080ABAA0: .4byte gPlaySt
 _080ABAA4: .4byte 0x0000117C
 _080ABAA8: .4byte 0x00001182
 
@@ -297372,7 +297372,7 @@ sub_080ABB08: @ 0x080ABB08
 sub_080ABB24: @ 0x080ABB24
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _080ABB4C @ =0x0202BBF4
+	ldr r0, _080ABB4C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -297390,13 +297390,13 @@ _080ABB3C:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080ABB4C: .4byte 0x0202BBF4
+_080ABB4C: .4byte gPlaySt
 
 	thumb_func_start sub_080ABB50
 sub_080ABB50: @ 0x080ABB50
 	push {lr}
 	adds r2, r0, #0
-	ldr r0, _080ABB84 @ =0x08BBFC7C
+	ldr r0, _080ABB84 @ =gpKeySt
 	ldr r1, [r0]
 	ldr r0, _080ABB88 @ =0x0000030B
 	ldrh r1, [r1, #8]
@@ -297405,7 +297405,7 @@ sub_080ABB50: @ 0x080ABB50
 	beq _080ABB7E
 	adds r0, r2, #0
 	bl sub_0800457C
-	ldr r0, _080ABB8C @ =0x0202BBF4
+	ldr r0, _080ABB8C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -297419,9 +297419,9 @@ _080ABB7E:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080ABB84: .4byte 0x08BBFC7C
+_080ABB84: .4byte gpKeySt
 _080ABB88: .4byte 0x0000030B
-_080ABB8C: .4byte 0x0202BBF4
+_080ABB8C: .4byte gPlaySt
 _080ABB90: .4byte 0x00000391
 
 	thumb_func_start sub_080ABB94
@@ -299388,7 +299388,7 @@ sub_080ACA44: @ 0x080ACA44
 	asrs r0, r0, #0x18
 	cmp r0, #0
 	bne _080ACB38
-	ldr r0, _080ACB20 @ =0x08BBFC7C
+	ldr r0, _080ACB20 @ =gpKeySt
 	ldr r1, [r0]
 	ldrh r2, [r1, #6]
 	adds r3, r4, #0
@@ -299493,7 +299493,7 @@ _080ACB16:
 	bl sub_080AC538
 	b _080ACB2A
 	.align 2, 0
-_080ACB20: .4byte 0x08BBFC7C
+_080ACB20: .4byte gpKeySt
 _080ACB24:
 	adds r0, r4, #0
 	bl sub_080AC4C0
@@ -299537,7 +299537,7 @@ _080ACB6A:
 	.align 2, 0
 _080ACB74: .4byte 0x0000FFFC
 _080ACB78:
-	ldr r0, _080ACB94 @ =0x08BBFC7C
+	ldr r0, _080ACB94 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #0x80
@@ -299550,7 +299550,7 @@ _080ACB78:
 	bl sub_080045FC
 	b _080ACC28
 	.align 2, 0
-_080ACB94: .4byte 0x08BBFC7C
+_080ACB94: .4byte gpKeySt
 _080ACB98:
 	movs r0, #2
 	ands r0, r1
@@ -299585,7 +299585,7 @@ _080ACBA8:
 	bl sub_080AD754
 	b _080ACC28
 _080ACBE0:
-	ldr r0, _080ACBF8 @ =0x0202BBF4
+	ldr r0, _080ACBF8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -299596,7 +299596,7 @@ _080ACBE0:
 	bl m4aSongNumStart
 	b _080ACC28
 	.align 2, 0
-_080ACBF8: .4byte 0x0202BBF4
+_080ACBF8: .4byte gPlaySt
 _080ACBFC:
 	movs r0, #4
 	ands r0, r1
@@ -299950,7 +299950,7 @@ _080ACEDE:
 sub_080ACEE4: @ 0x080ACEE4
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _080ACF04 @ =0x08BBFC7C
+	ldr r0, _080ACF04 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #5
@@ -299963,7 +299963,7 @@ sub_080ACEE4: @ 0x080ACEE4
 	bl sub_080AD754
 	b _080ACF4C
 	.align 2, 0
-_080ACF04: .4byte 0x08BBFC7C
+_080ACF04: .4byte gpKeySt
 _080ACF08:
 	movs r0, #0x20
 	ands r0, r1
@@ -300172,7 +300172,7 @@ sub_080AD058: @ 0x080AD058
 	.align 2, 0
 _080AD094: .4byte 0x08DAE514
 _080AD098:
-	ldr r0, _080AD0B0 @ =0x08BBFC7C
+	ldr r0, _080AD0B0 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #8]
 	movs r0, #0x10
@@ -300183,7 +300183,7 @@ _080AD098:
 	bl sub_080AC0AC
 	b _080AD0FA
 	.align 2, 0
-_080AD0B0: .4byte 0x08BBFC7C
+_080AD0B0: .4byte gpKeySt
 _080AD0B4:
 	movs r0, #0x20
 	ands r0, r1
@@ -301306,7 +301306,7 @@ _080AD9CC: .4byte 0x08DADD78
 	thumb_func_start sub_080AD9D0
 sub_080AD9D0: @ 0x080AD9D0
 	push {r4, r5, lr}
-	ldr r5, _080ADA38 @ =0x0202BBF4
+	ldr r5, _080ADA38 @ =gPlaySt
 	movs r2, #0x40
 	adds r0, r2, #0
 	ldrb r1, [r5, #0x14]
@@ -301354,7 +301354,7 @@ _080ADA00:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080ADA38: .4byte 0x0202BBF4
+_080ADA38: .4byte gPlaySt
 
 	thumb_func_start sub_080ADA3C
 sub_080ADA3C: @ 0x080ADA3C
@@ -301471,7 +301471,7 @@ _080ADB20:
 	beq _080ADB32
 	b _080ADB70
 _080ADB26:
-	ldr r0, _080ADB5C @ =0x0202BBF4
+	ldr r0, _080ADB5C @ =gPlaySt
 	adds r0, #0x2b
 	ldrb r0, [r0]
 	ands r1, r0
@@ -301499,7 +301499,7 @@ _080ADB32:
 	strb r6, [r0, #1]
 	b _080ADB6A
 	.align 2, 0
-_080ADB5C: .4byte 0x0202BBF4
+_080ADB5C: .4byte gPlaySt
 _080ADB60: .4byte 0x08DAEF68
 _080ADB64:
 	ldr r0, [r5]
@@ -301779,7 +301779,7 @@ sub_080ADD88: @ 0x080ADD88
 	adds r6, r0, #0
 	movs r4, #0
 	movs r7, #0
-	ldr r0, _080ADDEC @ =0x0202BBF4
+	ldr r0, _080ADDEC @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #2
 	bne _080ADD9E
@@ -301823,7 +301823,7 @@ _080ADDB0:
 	bl sub_08025278
 	b _080ADE12
 	.align 2, 0
-_080ADDEC: .4byte 0x0202BBF4
+_080ADDEC: .4byte gPlaySt
 _080ADDF0: .4byte 0x08DAEF74
 _080ADDF4: .4byte 0x00010004
 _080ADDF8:
@@ -302168,7 +302168,7 @@ sub_080AE0D4: @ 0x080AE0D4
 	beq _080AE0F4
 	b _080AE2DE
 _080AE0F4:
-	ldr r0, _080AE130 @ =0x08BBFC7C
+	ldr r0, _080AE130 @ =gpKeySt
 	ldr r2, [r0]
 	ldrh r1, [r2, #8]
 	movs r7, #1
@@ -302196,7 +302196,7 @@ _080AE0F4:
 	bl sub_080ABB94
 	b _080AE32A
 	.align 2, 0
-_080AE130: .4byte 0x08BBFC7C
+_080AE130: .4byte gpKeySt
 _080AE134: .4byte 0x08DAEF68
 _080AE138: .4byte 0x0000072F
 _080AE13C:
@@ -302227,7 +302227,7 @@ _080AE168:
 	adds r0, r5, #0
 	movs r1, #1
 	bl sub_080045FC
-	ldr r0, _080AE188 @ =0x0202BBF4
+	ldr r0, _080AE188 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -302239,7 +302239,7 @@ _080AE17E:
 	bl m4aSongNumStart
 	b _080AE32A
 	.align 2, 0
-_080AE188: .4byte 0x0202BBF4
+_080AE188: .4byte gPlaySt
 _080AE18C: .4byte 0x0000038A
 _080AE190:
 	ldrb r1, [r1, #2]
@@ -302268,7 +302268,7 @@ _080AE1AC:
 _080AE1C4: .4byte 0x00000BB8
 _080AE1C8: .4byte 0x00001388
 _080AE1CC:
-	ldr r0, _080AE1E4 @ =0x0202BBF4
+	ldr r0, _080AE1E4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -302281,7 +302281,7 @@ _080AE1DA:
 	bl m4aSongNumStart
 	b _080AE32A
 	.align 2, 0
-_080AE1E4: .4byte 0x0202BBF4
+_080AE1E4: .4byte gPlaySt
 _080AE1E8:
 	movs r0, #2
 	ands r0, r1
@@ -302289,7 +302289,7 @@ _080AE1E8:
 	beq _080AE214
 	adds r0, r5, #0
 	bl sub_0800457C
-	ldr r0, _080AE20C @ =0x0202BBF4
+	ldr r0, _080AE20C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -302301,7 +302301,7 @@ _080AE204:
 	bl m4aSongNumStart
 	b _080AE32A
 	.align 2, 0
-_080AE20C: .4byte 0x0202BBF4
+_080AE20C: .4byte gPlaySt
 _080AE210: .4byte 0x0000038B
 _080AE214:
 	ldrh r1, [r2, #6]
@@ -302327,7 +302327,7 @@ _080AE22A:
 	ldr r0, [r0]
 	cmp r4, r0
 	bge _080AE32A
-	ldr r0, _080AE278 @ =0x0202BBF4
+	ldr r0, _080AE278 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -302354,7 +302354,7 @@ _080AE250:
 	b _080AE2D0
 	.align 2, 0
 _080AE274: .4byte 0x08DAEF6C
-_080AE278: .4byte 0x0202BBF4
+_080AE278: .4byte gPlaySt
 _080AE27C: .4byte 0x00000386
 _080AE280:
 	adds r0, r5, #0
@@ -302788,12 +302788,12 @@ _080AE5D0:
 	cmp r0, #0x28
 	bne _080AE5F0
 	adds r0, r5, #0
-	bl sub_080165F0
+	bl MakeNewItem
 	bl AddItemToConvoy
 	b _080AE5FE
 _080AE5F0:
 	adds r0, r5, #0
-	bl sub_080165F0
+	bl MakeNewItem
 	adds r1, r0, #0
 	adds r0, r7, #0
 	bl UnitAddItem
@@ -302812,7 +302812,7 @@ sub_080AE608: @ 0x080AE608
 	adds r6, r5, #0
 	adds r6, #0x2a
 	ldrb r4, [r6]
-	ldr r0, _080AE638 @ =0x08BBFC7C
+	ldr r0, _080AE638 @ =gpKeySt
 	ldr r2, [r0]
 	ldrh r1, [r2, #8]
 	movs r0, #1
@@ -302829,7 +302829,7 @@ sub_080AE608: @ 0x080AE608
 	bl sub_080045FC
 	b _080AE6C6
 	.align 2, 0
-_080AE638: .4byte 0x08BBFC7C
+_080AE638: .4byte gpKeySt
 _080AE63C:
 	movs r1, #1
 	rsbs r1, r1, #0
@@ -302846,7 +302846,7 @@ _080AE64E:
 	beq _080AE678
 	adds r0, r5, #0
 	bl sub_0800457C
-	ldr r0, _080AE670 @ =0x0202BBF4
+	ldr r0, _080AE670 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -302856,7 +302856,7 @@ _080AE64E:
 	bl m4aSongNumStart
 	b _080AE6C6
 	.align 2, 0
-_080AE670: .4byte 0x0202BBF4
+_080AE670: .4byte gPlaySt
 _080AE674: .4byte 0x0000038B
 _080AE678:
 	ldrh r1, [r2, #6]
@@ -302882,7 +302882,7 @@ _080AE68E:
 	ldrb r0, [r0]
 	cmp r4, r0
 	bge _080AE6C6
-	ldr r0, _080AE6CC @ =0x0202BBF4
+	ldr r0, _080AE6CC @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -302904,7 +302904,7 @@ _080AE6C6:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080AE6CC: .4byte 0x0202BBF4
+_080AE6CC: .4byte gPlaySt
 _080AE6D0: .4byte 0x00000386
 
 	thumb_func_start sub_080AE6D4
@@ -303106,7 +303106,7 @@ _080AE898: .4byte 0x000010A7
 _080AE89C: .4byte 0x00000286
 _080AE8A0: .4byte 0x00000282
 _080AE8A4:
-	ldr r0, _080AE8B8 @ =0x0202BBF4
+	ldr r0, _080AE8B8 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -303116,10 +303116,10 @@ _080AE8A4:
 	bl m4aSongNumStart
 	b _080AE8D2
 	.align 2, 0
-_080AE8B8: .4byte 0x0202BBF4
+_080AE8B8: .4byte gPlaySt
 _080AE8BC: .4byte 0x0000037A
 _080AE8C0:
-	ldr r0, _080AE960 @ =0x0202BBF4
+	ldr r0, _080AE960 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -303197,7 +303197,7 @@ _080AE8D2:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080AE960: .4byte 0x0202BBF4
+_080AE960: .4byte gPlaySt
 _080AE964: .4byte 0x02023460
 _080AE968: .4byte 0x03002790
 _080AE96C: .4byte 0x0000FFFC
@@ -303211,7 +303211,7 @@ sub_080AE970: @ 0x080AE970
 	str r0, [r2, #0x30]
 	cmp r0, #0x1e
 	ble _080AE998
-	ldr r0, _080AE994 @ =0x08BBFC7C
+	ldr r0, _080AE994 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #3
 	ldrh r1, [r1, #8]
@@ -303222,7 +303222,7 @@ sub_080AE970: @ 0x080AE970
 	bl sub_0800457C
 	b _080AE9A4
 	.align 2, 0
-_080AE994: .4byte 0x08BBFC7C
+_080AE994: .4byte gpKeySt
 _080AE998:
 	ldr r0, [r2, #0x30]
 	cmp r0, #0x78
@@ -303298,7 +303298,7 @@ sub_080AEA24: @ 0x080AEA24
 	ldr r0, [r0]
 	movs r1, #0x32
 	ldrsh r2, [r0, r1]
-	ldr r1, _080AEA4C @ =0x0202BBF4
+	ldr r1, _080AEA4C @ =gPlaySt
 	movs r0, #0x40
 	ldrb r1, [r1, #0x14]
 	ands r0, r1
@@ -303313,7 +303313,7 @@ _080AEA3C:
 	.align 2, 0
 _080AEA44: .4byte 0x020144F4
 _080AEA48: .4byte 0x08DAF028
-_080AEA4C: .4byte 0x0202BBF4
+_080AEA4C: .4byte gPlaySt
 
 	thumb_func_start sub_080AEA50
 sub_080AEA50: @ 0x080AEA50
@@ -303864,7 +303864,7 @@ sub_080AEEB8: @ 0x080AEEB8
 	push {r5, r6, r7}
 	mov sl, r0
 	movs r5, #0
-	ldr r0, _080AF0C8 @ =0x0202BBF4
+	ldr r0, _080AF0C8 @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #1
 	beq _080AEED6
@@ -304093,7 +304093,7 @@ _080AF060:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080AF0C8: .4byte 0x0202BBF4
+_080AF0C8: .4byte gPlaySt
 _080AF0CC: .4byte 0x08DAF028
 _080AF0D0: .4byte 0x08DAF054
 _080AF0D4: .4byte 0x03002790
@@ -304202,7 +304202,7 @@ sub_080AF194: @ 0x080AF194
 	bl sub_080AEA60
 	lsls r0, r0, #0x18
 	lsrs r3, r0, #0x18
-	ldr r0, _080AF1F8 @ =0x08BBFC7C
+	ldr r0, _080AF1F8 @ =gpKeySt
 	ldr r0, [r0]
 	ldrh r1, [r0, #6]
 	movs r0, #0x30
@@ -304226,7 +304226,7 @@ sub_080AF194: @ 0x080AF194
 	.align 2, 0
 _080AF1F0: .4byte 0x08DAF028
 _080AF1F4: .4byte 0x08DAF054
-_080AF1F8: .4byte 0x08BBFC7C
+_080AF1F8: .4byte gpKeySt
 _080AF1FC:
 	ldr r2, _080AF268 @ =0x08DAF0C4
 	adds r4, r3, #1
@@ -304263,7 +304263,7 @@ _080AF226:
 	bl sub_080AECCC
 	movs r0, #5
 	bl sub_08000FD4
-	ldr r0, _080AF270 @ =0x0202BBF4
+	ldr r0, _080AF270 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -304281,7 +304281,7 @@ _080AF25A:
 	.align 2, 0
 _080AF268: .4byte 0x08DAF0C4
 _080AF26C: .4byte 0x08DAF3B0
-_080AF270: .4byte 0x0202BBF4
+_080AF270: .4byte gPlaySt
 _080AF274: .4byte 0x00000387
 
 	thumb_func_start sub_080AF278
@@ -304319,7 +304319,7 @@ _080AF294: @ jump table
 	.4byte _080AF3D0 @ case 15
 	.4byte _080AF3E0 @ case 16
 _080AF2D8:
-	ldr r0, _080AF2F0 @ =0x0202BBF4
+	ldr r0, _080AF2F0 @ =gPlaySt
 	adds r0, #0x42
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1d
@@ -304332,7 +304332,7 @@ _080AF2D8:
 	beq _080AF2FE
 	b _080AF30E
 	.align 2, 0
-_080AF2F0: .4byte 0x0202BBF4
+_080AF2F0: .4byte gPlaySt
 _080AF2F4:
 	cmp r0, #2
 	beq _080AF30A
@@ -304352,60 +304352,60 @@ _080AF30A:
 	movs r0, #3
 	b _080AF3EC
 _080AF30E:
-	ldr r0, _080AF318 @ =0x0202BBF4
+	ldr r0, _080AF318 @ =gPlaySt
 	adds r0, #0x40
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
 	b _080AF3E8
 	.align 2, 0
-_080AF318: .4byte 0x0202BBF4
+_080AF318: .4byte gPlaySt
 _080AF31C:
-	ldr r0, _080AF324 @ =0x0202BBF4
+	ldr r0, _080AF324 @ =gPlaySt
 	adds r0, #0x40
 	b _080AF378
 	.align 2, 0
-_080AF324: .4byte 0x0202BBF4
+_080AF324: .4byte gPlaySt
 _080AF328:
-	ldr r0, _080AF334 @ =0x0202BBF4
+	ldr r0, _080AF334 @ =gPlaySt
 	adds r0, #0x40
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1b
 	b _080AF3E8
 	.align 2, 0
-_080AF334: .4byte 0x0202BBF4
+_080AF334: .4byte gPlaySt
 _080AF338:
-	ldr r0, _080AF344 @ =0x0202BBF4
+	ldr r0, _080AF344 @ =gPlaySt
 	adds r0, #0x40
 	ldrb r0, [r0]
 	lsls r0, r0, #0x19
 	lsrs r2, r0, #0x1e
 	b _080AF3EA
 	.align 2, 0
-_080AF344: .4byte 0x0202BBF4
+_080AF344: .4byte gPlaySt
 _080AF348:
-	ldr r0, _080AF350 @ =0x0202BBF4
+	ldr r0, _080AF350 @ =gPlaySt
 	adds r0, #0x40
 	b _080AF398
 	.align 2, 0
-_080AF350: .4byte 0x0202BBF4
+_080AF350: .4byte gPlaySt
 _080AF354:
-	ldr r0, _080AF360 @ =0x0202BBF4
+	ldr r0, _080AF360 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1f
 	b _080AF3E8
 	.align 2, 0
-_080AF360: .4byte 0x0202BBF4
+_080AF360: .4byte gPlaySt
 _080AF364:
-	ldr r0, _080AF370 @ =0x0202BBF4
+	ldr r0, _080AF370 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
 	b _080AF3E8
 	.align 2, 0
-_080AF370: .4byte 0x0202BBF4
+_080AF370: .4byte gPlaySt
 _080AF374:
-	ldr r0, _080AF380 @ =0x0202BBF4
+	ldr r0, _080AF380 @ =gPlaySt
 	adds r0, #0x41
 _080AF378:
 	ldrb r0, [r0]
@@ -304413,57 +304413,57 @@ _080AF378:
 	lsrs r2, r0, #0x1e
 	b _080AF3EA
 	.align 2, 0
-_080AF380: .4byte 0x0202BBF4
+_080AF380: .4byte gPlaySt
 _080AF384:
-	ldr r0, _080AF390 @ =0x0202BBF4
+	ldr r0, _080AF390 @ =gPlaySt
 	adds r0, #0x42
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1b
 	lsrs r2, r0, #0x1e
 	b _080AF3EA
 	.align 2, 0
-_080AF390: .4byte 0x0202BBF4
+_080AF390: .4byte gPlaySt
 _080AF394:
-	ldr r0, _080AF3A0 @ =0x0202BBF4
+	ldr r0, _080AF3A0 @ =gPlaySt
 	adds r0, #0x41
 _080AF398:
 	ldrb r0, [r0]
 	lsrs r2, r0, #7
 	b _080AF3EA
 	.align 2, 0
-_080AF3A0: .4byte 0x0202BBF4
+_080AF3A0: .4byte gPlaySt
 _080AF3A4:
-	ldr r0, _080AF3AC @ =0x0202BBF4
+	ldr r0, _080AF3AC @ =gPlaySt
 	adds r0, #0x41
 	b _080AF3E4
 	.align 2, 0
-_080AF3AC: .4byte 0x0202BBF4
+_080AF3AC: .4byte gPlaySt
 _080AF3B0:
-	ldr r0, _080AF3BC @ =0x0202BBF4
+	ldr r0, _080AF3BC @ =gPlaySt
 	adds r0, #0x40
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1f
 	b _080AF3E8
 	.align 2, 0
-_080AF3BC: .4byte 0x0202BBF4
+_080AF3BC: .4byte gPlaySt
 _080AF3C0:
-	ldr r0, _080AF3CC @ =0x0202BBF4
+	ldr r0, _080AF3CC @ =gPlaySt
 	adds r0, #0x42
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1f
 	b _080AF3E8
 	.align 2, 0
-_080AF3CC: .4byte 0x0202BBF4
+_080AF3CC: .4byte gPlaySt
 _080AF3D0:
-	ldr r0, _080AF3DC @ =0x0202BBF4
+	ldr r0, _080AF3DC @ =gPlaySt
 	adds r0, #0x42
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1a
 	b _080AF3E8
 	.align 2, 0
-_080AF3DC: .4byte 0x0202BBF4
+_080AF3DC: .4byte gPlaySt
 _080AF3E0:
-	ldr r0, _080AF3F0 @ =0x0202BBF4
+	ldr r0, _080AF3F0 @ =gPlaySt
 	adds r0, #0x42
 _080AF3E4:
 	ldrb r0, [r0]
@@ -304475,7 +304475,7 @@ _080AF3EA:
 _080AF3EC:
 	bx lr
 	.align 2, 0
-_080AF3F0: .4byte 0x0202BBF4
+_080AF3F0: .4byte gPlaySt
 
 	thumb_func_start sub_080AF3F4
 sub_080AF3F4: @ 0x080AF3F4
@@ -304527,7 +304527,7 @@ _080AF462:
 	beq _080AF4A8
 	b _080AF4BC
 _080AF46C:
-	ldr r1, _080AF47C @ =0x0202BBF4
+	ldr r1, _080AF47C @ =gPlaySt
 	adds r1, #0x42
 	movs r0, #7
 	rsbs r0, r0, #0
@@ -304536,9 +304536,9 @@ _080AF46C:
 	strb r0, [r1]
 	b _080AF600
 	.align 2, 0
-_080AF47C: .4byte 0x0202BBF4
+_080AF47C: .4byte gPlaySt
 _080AF480:
-	ldr r1, _080AF490 @ =0x0202BBF4
+	ldr r1, _080AF490 @ =gPlaySt
 	adds r1, #0x42
 	movs r0, #6
 	ldrb r3, [r1]
@@ -304546,9 +304546,9 @@ _080AF480:
 	strb r0, [r1]
 	b _080AF600
 	.align 2, 0
-_080AF490: .4byte 0x0202BBF4
+_080AF490: .4byte gPlaySt
 _080AF494:
-	ldr r0, _080AF4A4 @ =0x0202BBF4
+	ldr r0, _080AF4A4 @ =gPlaySt
 	adds r0, #0x42
 	movs r1, #7
 	rsbs r1, r1, #0
@@ -304557,9 +304557,9 @@ _080AF494:
 	movs r2, #2
 	b _080AF590
 	.align 2, 0
-_080AF4A4: .4byte 0x0202BBF4
+_080AF4A4: .4byte gPlaySt
 _080AF4A8:
-	ldr r0, _080AF4B8 @ =0x0202BBF4
+	ldr r0, _080AF4B8 @ =gPlaySt
 	adds r0, #0x42
 	movs r1, #7
 	rsbs r1, r1, #0
@@ -304568,9 +304568,9 @@ _080AF4A8:
 	movs r2, #4
 	b _080AF590
 	.align 2, 0
-_080AF4B8: .4byte 0x0202BBF4
+_080AF4B8: .4byte gPlaySt
 _080AF4BC:
-	ldr r2, _080AF4D0 @ =0x0202BBF4
+	ldr r2, _080AF4D0 @ =gPlaySt
 	adds r2, #0x40
 	movs r0, #1
 	adds r1, r3, #0
@@ -304580,9 +304580,9 @@ _080AF4BC:
 	rsbs r0, r0, #0
 	b _080AF5F8
 	.align 2, 0
-_080AF4D0: .4byte 0x0202BBF4
+_080AF4D0: .4byte gPlaySt
 _080AF4D4:
-	ldr r2, _080AF4E8 @ =0x0202BBF4
+	ldr r2, _080AF4E8 @ =gPlaySt
 	adds r2, #0x40
 	movs r0, #3
 	adds r1, r3, #0
@@ -304592,9 +304592,9 @@ _080AF4D4:
 	rsbs r0, r0, #0
 	b _080AF5F8
 	.align 2, 0
-_080AF4E8: .4byte 0x0202BBF4
+_080AF4E8: .4byte gPlaySt
 _080AF4EC:
-	ldr r2, _080AF500 @ =0x0202BBF4
+	ldr r2, _080AF500 @ =gPlaySt
 	adds r2, #0x40
 	movs r0, #1
 	adds r1, r3, #0
@@ -304604,9 +304604,9 @@ _080AF4EC:
 	rsbs r0, r0, #0
 	b _080AF5F8
 	.align 2, 0
-_080AF500: .4byte 0x0202BBF4
+_080AF500: .4byte gPlaySt
 _080AF504:
-	ldr r2, _080AF518 @ =0x0202BBF4
+	ldr r2, _080AF518 @ =gPlaySt
 	adds r2, #0x40
 	movs r0, #3
 	adds r1, r3, #0
@@ -304616,15 +304616,15 @@ _080AF504:
 	rsbs r0, r0, #0
 	b _080AF5F8
 	.align 2, 0
-_080AF518: .4byte 0x0202BBF4
+_080AF518: .4byte gPlaySt
 _080AF51C:
-	ldr r0, _080AF524 @ =0x0202BBF4
+	ldr r0, _080AF524 @ =gPlaySt
 	adds r0, #0x40
 	b _080AF588
 	.align 2, 0
-_080AF524: .4byte 0x0202BBF4
+_080AF524: .4byte gPlaySt
 _080AF528:
-	ldr r2, _080AF538 @ =0x0202BBF4
+	ldr r2, _080AF538 @ =gPlaySt
 	adds r2, #0x41
 	movs r0, #1
 	adds r1, r3, #0
@@ -304633,9 +304633,9 @@ _080AF528:
 	rsbs r0, r0, #0
 	b _080AF5F8
 	.align 2, 0
-_080AF538: .4byte 0x0202BBF4
+_080AF538: .4byte gPlaySt
 _080AF53C:
-	ldr r2, _080AF550 @ =0x0202BBF4
+	ldr r2, _080AF550 @ =gPlaySt
 	adds r2, #0x41
 	movs r0, #1
 	adds r1, r3, #0
@@ -304645,9 +304645,9 @@ _080AF53C:
 	rsbs r0, r0, #0
 	b _080AF5F8
 	.align 2, 0
-_080AF550: .4byte 0x0202BBF4
+_080AF550: .4byte gPlaySt
 _080AF554:
-	ldr r2, _080AF568 @ =0x0202BBF4
+	ldr r2, _080AF568 @ =gPlaySt
 	adds r2, #0x41
 	movs r0, #3
 	adds r1, r3, #0
@@ -304657,9 +304657,9 @@ _080AF554:
 	rsbs r0, r0, #0
 	b _080AF5F8
 	.align 2, 0
-_080AF568: .4byte 0x0202BBF4
+_080AF568: .4byte gPlaySt
 _080AF56C:
-	ldr r2, _080AF580 @ =0x0202BBF4
+	ldr r2, _080AF580 @ =gPlaySt
 	adds r2, #0x42
 	movs r0, #3
 	adds r1, r3, #0
@@ -304669,9 +304669,9 @@ _080AF56C:
 	rsbs r0, r0, #0
 	b _080AF5F8
 	.align 2, 0
-_080AF580: .4byte 0x0202BBF4
+_080AF580: .4byte gPlaySt
 _080AF584:
-	ldr r0, _080AF598 @ =0x0202BBF4
+	ldr r0, _080AF598 @ =gPlaySt
 	adds r0, #0x41
 _080AF588:
 	lsls r2, r3, #7
@@ -304683,15 +304683,15 @@ _080AF590:
 	strb r1, [r0]
 	b _080AF600
 	.align 2, 0
-_080AF598: .4byte 0x0202BBF4
+_080AF598: .4byte gPlaySt
 _080AF59C:
-	ldr r2, _080AF5A4 @ =0x0202BBF4
+	ldr r2, _080AF5A4 @ =gPlaySt
 	adds r2, #0x41
 	b _080AF5EC
 	.align 2, 0
-_080AF5A4: .4byte 0x0202BBF4
+_080AF5A4: .4byte gPlaySt
 _080AF5A8:
-	ldr r2, _080AF5B8 @ =0x0202BBF4
+	ldr r2, _080AF5B8 @ =gPlaySt
 	adds r2, #0x40
 	movs r0, #1
 	adds r1, r3, #0
@@ -304700,9 +304700,9 @@ _080AF5A8:
 	rsbs r0, r0, #0
 	b _080AF5F8
 	.align 2, 0
-_080AF5B8: .4byte 0x0202BBF4
+_080AF5B8: .4byte gPlaySt
 _080AF5BC:
-	ldr r2, _080AF5CC @ =0x0202BBF4
+	ldr r2, _080AF5CC @ =gPlaySt
 	adds r2, #0x42
 	movs r0, #1
 	adds r1, r3, #0
@@ -304711,9 +304711,9 @@ _080AF5BC:
 	rsbs r0, r0, #0
 	b _080AF5F8
 	.align 2, 0
-_080AF5CC: .4byte 0x0202BBF4
+_080AF5CC: .4byte gPlaySt
 _080AF5D0:
-	ldr r2, _080AF5E4 @ =0x0202BBF4
+	ldr r2, _080AF5E4 @ =gPlaySt
 	adds r2, #0x42
 	movs r0, #1
 	adds r1, r3, #0
@@ -304723,9 +304723,9 @@ _080AF5D0:
 	rsbs r0, r0, #0
 	b _080AF5F8
 	.align 2, 0
-_080AF5E4: .4byte 0x0202BBF4
+_080AF5E4: .4byte gPlaySt
 _080AF5E8:
-	ldr r2, _080AF604 @ =0x0202BBF4
+	ldr r2, _080AF604 @ =gPlaySt
 	adds r2, #0x42
 _080AF5EC:
 	movs r0, #1
@@ -304742,7 +304742,7 @@ _080AF5F8:
 _080AF600:
 	bx lr
 	.align 2, 0
-_080AF604: .4byte 0x0202BBF4
+_080AF604: .4byte gPlaySt
 
 	thumb_func_start sub_080AF608
 sub_080AF608: @ 0x080AF608
@@ -304838,14 +304838,14 @@ _080AF6B0: @ jump table
 	.4byte _080AF8D0 @ case 5
 	.4byte _080AF8D0 @ case 6
 _080AF6CC:
-	ldr r0, _080AF6F0 @ =0x08BBFC7C
+	ldr r0, _080AF6F0 @ =gpKeySt
 	ldr r2, [r0]
 	ldrh r1, [r2, #8]
 	movs r0, #2
 	ands r0, r1
 	cmp r0, #0
 	beq _080AF6FC
-	ldr r0, _080AF6F4 @ =0x0202BBF4
+	ldr r0, _080AF6F4 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -304855,8 +304855,8 @@ _080AF6CC:
 	bl m4aSongNumStart
 	b _080AF752
 	.align 2, 0
-_080AF6F0: .4byte 0x08BBFC7C
-_080AF6F4: .4byte 0x0202BBF4
+_080AF6F0: .4byte gpKeySt
+_080AF6F4: .4byte gPlaySt
 _080AF6F8: .4byte 0x0000038B
 _080AF6FC:
 	movs r4, #1
@@ -304889,7 +304889,7 @@ _080AF728:
 	beq _080AF738
 	b _080AF8E4
 _080AF738:
-	ldr r0, _080AF764 @ =0x0202BBF4
+	ldr r0, _080AF764 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -304909,7 +304909,7 @@ _080AF752:
 	.align 2, 0
 _080AF75C: .4byte 0x08DAF054
 _080AF760: .4byte 0x08DAF028
-_080AF764: .4byte 0x0202BBF4
+_080AF764: .4byte gPlaySt
 _080AF768: .4byte 0x0000038A
 _080AF76C:
 	ldrh r1, [r2, #6]
@@ -305008,7 +305008,7 @@ _080AF81E:
 	bl Proc_Start
 	movs r0, #5
 	bl sub_08000FD4
-	ldr r0, _080AF848 @ =0x0202BBF4
+	ldr r0, _080AF848 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -305020,10 +305020,10 @@ _080AF81E:
 	.align 2, 0
 _080AF840: .4byte 0x08DAF028
 _080AF844: .4byte 0x08DAF3B0
-_080AF848: .4byte 0x0202BBF4
+_080AF848: .4byte gPlaySt
 _080AF84C: .4byte 0x00000386
 _080AF850:
-	ldr r0, _080AF8B0 @ =0x08BBFC7C
+	ldr r0, _080AF8B0 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0x30
 	ldrh r1, [r1, #8]
@@ -305069,7 +305069,7 @@ _080AF850:
 	bl _call_via_r1
 	b _080AF8E4
 	.align 2, 0
-_080AF8B0: .4byte 0x08BBFC7C
+_080AF8B0: .4byte gpKeySt
 _080AF8B4: .4byte 0x08DAF0C4
 _080AF8B8: .4byte 0x08DAF054
 _080AF8BC: .4byte 0x08DAF028
@@ -305719,7 +305719,7 @@ _080AFD80:
 	strb r0, [r6]
 	b _080AFDA2
 _080AFD8E:
-	ldr r0, _080AFDA8 @ =0x08BBFC7C
+	ldr r0, _080AFDA8 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0xb
 	ldrh r1, [r1, #4]
@@ -305733,7 +305733,7 @@ _080AFDA2:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080AFDA8: .4byte 0x08BBFC7C
+_080AFDA8: .4byte gpKeySt
 
 	thumb_func_start sub_080AFDAC
 sub_080AFDAC: @ 0x080AFDAC
@@ -308452,7 +308452,7 @@ _080B1300:
 	adds r1, #2
 	str r1, [r0]
 	adds r0, r2, #0
-	bl sub_080165F0
+	bl MakeNewItem
 	ldr r1, [r7, #0x10]
 	ldr r2, [r7, #0x18]
 	adds r3, r2, #0
@@ -309025,7 +309025,7 @@ _080B1768:
 	ldrb r0, [r1]
 	cmp r0, #0
 	beq _080B17AA
-	ldr r1, _080B17A4 @ =0x08BBFC7C
+	ldr r1, _080B17A4 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #8]
 	movs r2, #0x81
@@ -309049,11 +309049,11 @@ _080B1768:
 _080B17A0:
 	b _080B18CC
 	.align 2, 0
-_080B17A4: .4byte 0x08BBFC7C
+_080B17A4: .4byte gpKeySt
 _080B17A8:
 	b _080B1818
 _080B17AA:
-	ldr r1, _080B1814 @ =0x08BBFC7C
+	ldr r1, _080B1814 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #8]
 	movs r2, #0x80
@@ -309106,7 +309106,7 @@ _080B17AA:
 	bl sub_080826EC
 	b _080B18CC
 	.align 2, 0
-_080B1814: .4byte 0x08BBFC7C
+_080B1814: .4byte gpKeySt
 _080B1818:
 	ldr r1, [r7]
 	ldr r0, [r1, #0x2c]
@@ -309124,7 +309124,7 @@ _080B1818:
 	lsls r1, r0, #0x10
 	lsrs r0, r1, #0x10
 	str r0, [r7, #8]
-	ldr r1, _080B186C @ =0x08BBFC7C
+	ldr r1, _080B186C @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #8]
 	movs r2, #1
@@ -309147,7 +309147,7 @@ _080B1818:
 	bl sub_080045FC
 	b _080B1886
 	.align 2, 0
-_080B186C: .4byte 0x08BBFC7C
+_080B186C: .4byte gpKeySt
 _080B1870:
 	ldr r1, [r7, #8]
 	adds r0, r1, #0
@@ -309160,7 +309160,7 @@ _080B1870:
 _080B1886:
 	b _080B18CC
 _080B1888:
-	ldr r1, _080B18C0 @ =0x08BBFC7C
+	ldr r1, _080B18C0 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #8]
 	movs r2, #2
@@ -309171,7 +309171,7 @@ _080B1888:
 	lsrs r0, r1, #0x10
 	cmp r0, #0
 	beq _080B18CC
-	ldr r1, _080B18C4 @ =0x0202BBF4
+	ldr r1, _080B18C4 @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -309188,8 +309188,8 @@ _080B18B6:
 	bl sub_080045FC
 	b _080B18CC
 	.align 2, 0
-_080B18C0: .4byte 0x08BBFC7C
-_080B18C4: .4byte 0x0202BBF4
+_080B18C0: .4byte gpKeySt
+_080B18C4: .4byte gPlaySt
 _080B18C8: .4byte 0x0000038B
 _080B18CC:
 	add sp, #0xc
@@ -309597,7 +309597,7 @@ _080B1BBE:
 	ldrb r0, [r1]
 	cmp r0, #0
 	beq _080B1BFE
-	ldr r1, _080B1BF8 @ =0x08BBFC7C
+	ldr r1, _080B1BF8 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #8]
 	movs r2, #0x81
@@ -309621,11 +309621,11 @@ _080B1BBE:
 _080B1BF6:
 	b _080B1D3C
 	.align 2, 0
-_080B1BF8: .4byte 0x08BBFC7C
+_080B1BF8: .4byte gpKeySt
 _080B1BFC:
 	b _080B1C70
 _080B1BFE:
-	ldr r1, _080B1C6C @ =0x08BBFC7C
+	ldr r1, _080B1C6C @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #8]
 	movs r2, #0x80
@@ -309679,9 +309679,9 @@ _080B1BFE:
 	bl sub_080826EC
 	b _080B1D3C
 	.align 2, 0
-_080B1C6C: .4byte 0x08BBFC7C
+_080B1C6C: .4byte gpKeySt
 _080B1C70:
-	ldr r1, _080B1CBC @ =0x08BBFC7C
+	ldr r1, _080B1CBC @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #8]
 	movs r2, #1
@@ -309717,7 +309717,7 @@ _080B1C70:
 	bl sub_080045FC
 	b _080B1CF4
 	.align 2, 0
-_080B1CBC: .4byte 0x08BBFC7C
+_080B1CBC: .4byte gpKeySt
 _080B1CC0:
 	ldr r1, [r7]
 	ldr r0, [r1, #0x2c]
@@ -309744,7 +309744,7 @@ _080B1CC0:
 _080B1CF4:
 	b _080B1D3C
 _080B1CF6:
-	ldr r1, _080B1D30 @ =0x08BBFC7C
+	ldr r1, _080B1D30 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #8]
 	movs r2, #2
@@ -309755,7 +309755,7 @@ _080B1CF6:
 	lsrs r0, r1, #0x10
 	cmp r0, #0
 	beq _080B1D3C
-	ldr r1, _080B1D34 @ =0x0202BBF4
+	ldr r1, _080B1D34 @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -309772,8 +309772,8 @@ _080B1D24:
 	bl sub_080045FC
 	b _080B1D3C
 	.align 2, 0
-_080B1D30: .4byte 0x08BBFC7C
-_080B1D34: .4byte 0x0202BBF4
+_080B1D30: .4byte gpKeySt
+_080B1D34: .4byte gPlaySt
 _080B1D38: .4byte 0x0000038B
 _080B1D3C:
 	add sp, #8
@@ -310143,7 +310143,7 @@ _080B200C:
 	ldrb r0, [r1]
 	cmp r0, #0
 	beq _080B204E
-	ldr r1, _080B2048 @ =0x08BBFC7C
+	ldr r1, _080B2048 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #8]
 	movs r2, #0x81
@@ -310167,11 +310167,11 @@ _080B200C:
 _080B2044:
 	b _080B2100
 	.align 2, 0
-_080B2048: .4byte 0x08BBFC7C
+_080B2048: .4byte gpKeySt
 _080B204C:
 	b _080B20BC
 _080B204E:
-	ldr r1, _080B20B8 @ =0x08BBFC7C
+	ldr r1, _080B20B8 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #8]
 	movs r2, #0x80
@@ -310224,9 +310224,9 @@ _080B204E:
 	bl sub_080826EC
 	b _080B2100
 	.align 2, 0
-_080B20B8: .4byte 0x08BBFC7C
+_080B20B8: .4byte gpKeySt
 _080B20BC:
-	ldr r1, _080B20F4 @ =0x08BBFC7C
+	ldr r1, _080B20F4 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #8]
 	movs r2, #3
@@ -310237,7 +310237,7 @@ _080B20BC:
 	lsrs r0, r1, #0x10
 	cmp r0, #0
 	beq _080B2100
-	ldr r1, _080B20F8 @ =0x0202BBF4
+	ldr r1, _080B20F8 @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -310254,8 +310254,8 @@ _080B20EA:
 	bl sub_080045FC
 	b _080B2100
 	.align 2, 0
-_080B20F4: .4byte 0x08BBFC7C
-_080B20F8: .4byte 0x0202BBF4
+_080B20F4: .4byte gpKeySt
+_080B20F8: .4byte gPlaySt
 _080B20FC: .4byte 0x0000038B
 _080B2100:
 	add sp, #8
@@ -312002,7 +312002,7 @@ _080B2EDC:
 _080B2EEA:
 	ldr r0, [r7]
 	str r0, [r7, #0xc]
-	ldr r1, _080B2F34 @ =0x08BBFC7C
+	ldr r1, _080B2F34 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #6]
 	movs r2, #0x40
@@ -312022,7 +312022,7 @@ _080B2EEA:
 	ldrsb r1, [r0, r1]
 	cmp r1, #0
 	beq _080B2F32
-	ldr r1, _080B2F34 @ =0x08BBFC7C
+	ldr r1, _080B2F34 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #8]
 	movs r2, #0x40
@@ -312039,7 +312039,7 @@ _080B2EEA:
 _080B2F32:
 	b _080B2F3E
 	.align 2, 0
-_080B2F34: .4byte 0x08BBFC7C
+_080B2F34: .4byte gpKeySt
 _080B2F38:
 	ldr r0, [r7]
 	subs r1, r0, #1
@@ -312047,7 +312047,7 @@ _080B2F38:
 _080B2F3E:
 	b _080B2F92
 _080B2F40:
-	ldr r1, _080B2F88 @ =0x08BBFC7C
+	ldr r1, _080B2F88 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #6]
 	movs r2, #0x80
@@ -312069,7 +312069,7 @@ _080B2F40:
 	ldrsb r1, [r0, r1]
 	cmp r1, #0
 	beq _080B2F86
-	ldr r1, _080B2F88 @ =0x08BBFC7C
+	ldr r1, _080B2F88 @ =gpKeySt
 	ldr r0, [r1]
 	ldrh r1, [r0, #8]
 	movs r2, #0x80
@@ -312085,7 +312085,7 @@ _080B2F40:
 _080B2F86:
 	b _080B2F92
 	.align 2, 0
-_080B2F88: .4byte 0x08BBFC7C
+_080B2F88: .4byte gpKeySt
 _080B2F8C:
 	ldr r0, [r7]
 	adds r1, r0, #1
@@ -312095,7 +312095,7 @@ _080B2F92:
 	ldr r1, [r7]
 	cmp r0, r1
 	beq _080B2FB2
-	ldr r1, _080B2FB8 @ =0x0202BBF4
+	ldr r1, _080B2FB8 @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -312111,7 +312111,7 @@ _080B2FB2:
 	adds r0, r1, #0
 	b _080B2FC0
 	.align 2, 0
-_080B2FB8: .4byte 0x0202BBF4
+_080B2FB8: .4byte gPlaySt
 _080B2FBC: .4byte 0x00000386
 _080B2FC0:
 	add sp, #0x10
@@ -313398,7 +313398,7 @@ sub_080B3968: @ 0x080B3968
 	ldr r1, [r7, #4]
 	adds r0, r1, #0
 	bl SetPartyGoldAmount
-	ldr r1, _080B39B4 @ =0x0202BBF4
+	ldr r1, _080B39B4 @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -313419,7 +313419,7 @@ _080B399E:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080B39B4: .4byte 0x0202BBF4
+_080B39B4: .4byte gPlaySt
 _080B39B8: .4byte 0x02022E16
 
 	thumb_func_start sub_080B39BC
@@ -313643,7 +313643,7 @@ _080B3B68:
 	ldr r1, _080B3B90 @ =0x02022E16
 	adds r0, r1, #0
 	bl sub_080B26DC
-	ldr r1, _080B3B94 @ =0x0202BBF4
+	ldr r1, _080B3B94 @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -313660,7 +313660,7 @@ _080B3B86:
 	b _080B3B9C
 	.align 2, 0
 _080B3B90: .4byte 0x02022E16
-_080B3B94: .4byte 0x0202BBF4
+_080B3B94: .4byte gPlaySt
 _080B3B98:
 	b _080B3B9C
 _080B3B9A:
@@ -313812,7 +313812,7 @@ sub_080B3CD4: @ 0x080B3CD4
 	beq _080B3CE6
 	b _080B3D04
 _080B3CE6:
-	ldr r1, _080B3D00 @ =0x0202BBF4
+	ldr r1, _080B3D00 @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -313826,9 +313826,9 @@ _080B3CE6:
 _080B3CFE:
 	b _080B3D28
 	.align 2, 0
-_080B3D00: .4byte 0x0202BBF4
+_080B3D00: .4byte gPlaySt
 _080B3D04:
-	ldr r1, _080B3D24 @ =0x0202BBF4
+	ldr r1, _080B3D24 @ =gPlaySt
 	adds r0, r1, #0
 	adds r1, #0x41
 	ldrb r0, [r1]
@@ -313844,7 +313844,7 @@ _080B3D1C:
 	bl sub_08004460
 	b _080B3D28
 	.align 2, 0
-_080B3D24: .4byte 0x0202BBF4
+_080B3D24: .4byte gPlaySt
 _080B3D28:
 	add sp, #4
 	pop {r7}
@@ -315467,7 +315467,7 @@ sub_080B4934: @ 0x080B4934
 	ldr r0, [r5]
 	cmp r0, #0
 	beq _080B499E
-	bl sub_08012B8C
+	bl EndSpriteAnimProc
 	movs r0, #0
 	str r0, [r5]
 	adds r1, r4, #0
@@ -315543,7 +315543,7 @@ _080B49E0:
 	ldr r0, [r4]
 	cmp r0, #0
 	beq _080B49EC
-	bl sub_08012B8C
+	bl EndSpriteAnimProc
 	str r7, [r4]
 _080B49EC:
 	adds r4, #8
@@ -317742,7 +317742,7 @@ sub_080B5A48: @ 0x080B5A48
 	ldr r0, [r1]
 	cmp r0, #0
 	beq _080B5A6A
-	bl sub_08012B8C
+	bl EndSpriteAnimProc
 _080B5A6A:
 	ldr r0, [r5, #0x38]
 	adds r0, #0x30
@@ -317860,7 +317860,7 @@ sub_080B5B34: @ 0x080B5B34
 	ldr r0, [r1]
 	cmp r0, #0
 	beq _080B5B56
-	bl sub_08012B8C
+	bl EndSpriteAnimProc
 _080B5B56:
 	ldr r0, [r5, #0x3c]
 	adds r0, #0x30
@@ -318932,7 +318932,7 @@ sub_080B63AC: @ 0x080B63AC
 	bl sub_08004584
 	bl sub_08004460
 	bl sub_0800EC08
-	bl sub_08012B98
+	bl EndEachSpriteAnimProc
 	movs r0, #0
 	bl sub_08002A44
 	pop {r0}
@@ -318948,7 +318948,7 @@ sub_080B63DC: @ 0x080B63DC
 	ands r1, r0
 	cmp r1, #0
 	beq _080B63FA
-	ldr r0, _080B6400 @ =0x0202BBF4
+	ldr r0, _080B6400 @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -318960,13 +318960,13 @@ _080B63FA:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080B6400: .4byte 0x0202BBF4
+_080B6400: .4byte gPlaySt
 
 	thumb_func_start sub_080B6404
 sub_080B6404: @ 0x080B6404
 	push {r4, r5, lr}
 	ldr r5, _080B643C @ =0x08D64CE4
-	ldr r4, _080B6440 @ =0x0202BBF4
+	ldr r4, _080B6440 @ =gPlaySt
 	movs r0, #0xe
 	ldrsb r0, [r4, r0]
 	bl sub_08031A5C
@@ -318992,7 +318992,7 @@ _080B6436:
 	bx r0
 	.align 2, 0
 _080B643C: .4byte 0x08D64CE4
-_080B6440: .4byte 0x0202BBF4
+_080B6440: .4byte gPlaySt
 
 	thumb_func_start sub_080B6444
 sub_080B6444: @ 0x080B6444
@@ -320409,7 +320409,7 @@ sub_080B6E98: @ 0x080B6E98
 	bl sub_08002DF0
 	ldr r0, _080B6F90 @ =sub_080B6DEC
 	bl sub_08002DF0
-	ldr r0, _080B6F94 @ =0x0202BBF4
+	ldr r0, _080B6F94 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -320430,7 +320430,7 @@ _080B6F84: .4byte 0x030027CC
 _080B6F88: .4byte 0x0000FFE0
 _080B6F8C: .4byte 0x02000814
 _080B6F90: .4byte sub_080B6DEC
-_080B6F94: .4byte 0x0202BBF4
+_080B6F94: .4byte gPlaySt
 _080B6F98: .4byte 0x00000269
 
 	thumb_func_start sub_080B6F9C
@@ -320498,7 +320498,7 @@ _080B7014: .4byte 0x03002790
 	thumb_func_start sub_080B7018
 sub_080B7018: @ 0x080B7018
 	push {lr}
-	bl sub_08012B98
+	bl EndEachSpriteAnimProc
 	ldr r3, _080B706C @ =0x03002790
 	adds r2, r3, #0
 	adds r2, #0x3c
@@ -321124,7 +321124,7 @@ sub_080B7480: @ 0x080B7480
 sub_080B74C0: @ 0x080B74C0
 	push {r4, r5, lr}
 	sub sp, #0x10
-	ldr r0, _080B7538 @ =0x0202BBF4
+	ldr r0, _080B7538 @ =gPlaySt
 	ldrh r5, [r0, #0x10]
 	movs r1, #0xe
 	ldrsb r1, [r0, r1]
@@ -321181,7 +321181,7 @@ _080B752E:
 	pop {r1}
 	bx r1
 	.align 2, 0
-_080B7538: .4byte 0x0202BBF4
+_080B7538: .4byte gPlaySt
 _080B753C: .4byte 0x08D62110
 
 	thumb_func_start sub_080B7540
@@ -321311,7 +321311,7 @@ _080B7602:
 	ldrb r0, [r0, #5]
 	lsls r1, r0, #0x1a
 	lsrs r1, r1, #0x1a
-	ldr r0, _080B764C @ =0x0202BBF4
+	ldr r0, _080B764C @ =gPlaySt
 	ldrb r0, [r0, #0xe]
 	lsls r0, r0, #0x18
 	asrs r0, r0, #0x18
@@ -321329,7 +321329,7 @@ _080B7636:
 	bx r1
 	.align 2, 0
 _080B7648: .4byte 0x00010004
-_080B764C: .4byte 0x0202BBF4
+_080B764C: .4byte gPlaySt
 
 	thumb_func_start nullsub_90
 nullsub_90: @ 0x080B7650
@@ -321340,7 +321340,7 @@ nullsub_90: @ 0x080B7650
 sub_080B7654: @ 0x080B7654
 	push {r4, r5, r6, lr}
 	bl sub_08017574
-	ldr r1, _080B769C @ =0x0202BBF4
+	ldr r1, _080B769C @ =gPlaySt
 	ldr r5, [r1, #0x30]
 	subs r5, r0, r5
 	str r0, [r1, #0x30]
@@ -321371,7 +321371,7 @@ sub_080B7654: @ 0x080B7654
 	movs r0, #4
 	b _080B76C8
 	.align 2, 0
-_080B769C: .4byte 0x0202BBF4
+_080B769C: .4byte gPlaySt
 _080B76A0: .4byte 0x08D62110
 _080B76A4:
 	lsls r0, r1, #4
@@ -321420,7 +321420,7 @@ _080B76EC:
 	ble _080B76F2
 	adds r5, r7, #0
 _080B76F2:
-	ldr r6, _080B7708 @ =0x0202BBF4
+	ldr r6, _080B7708 @ =gPlaySt
 	ldr r0, [r6, #0x34]
 	mov r8, r0
 	lsls r0, r0, #0xc
@@ -321431,7 +321431,7 @@ _080B76F2:
 	b _080B7758
 	.align 2, 0
 _080B7704: .4byte 0x000FFFFF
-_080B7708: .4byte 0x0202BBF4
+_080B7708: .4byte gPlaySt
 _080B770C:
 	ldrh r1, [r6, #0x36]
 	lsrs r1, r1, #4
@@ -321528,7 +321528,7 @@ _080B77A8:
 	ble _080B77BE
 	adds r1, r4, #0
 _080B77BE:
-	ldr r3, _080B7874 @ =0x0202BBF4
+	ldr r3, _080B7874 @ =gPlaySt
 	ldr r2, [r3, #0x38]
 	lsls r0, r2, #4
 	lsrs r0, r0, #0xc
@@ -321615,7 +321615,7 @@ _080B7866:
 	bx r1
 	.align 2, 0
 _080B7870: .4byte 0x000FFFFF
-_080B7874: .4byte 0x0202BBF4
+_080B7874: .4byte gPlaySt
 _080B7878: .4byte 0xF00000FF
 _080B787C: .4byte 0x08D62110
 
@@ -321626,7 +321626,7 @@ sub_080B7880: @ 0x080B7880
 	bl GetNextChapterStatsSlot
 	cmp r0, #0
 	ble _080B794A
-	ldr r6, _080B7954 @ =0x0202BBF4
+	ldr r6, _080B7954 @ =gPlaySt
 	ldrb r0, [r6, #0x1b]
 	cmp r0, #3
 	bgt _080B7902
@@ -321681,7 +321681,7 @@ sub_080B7880: @ 0x080B7880
 	orrs r1, r0
 	strb r1, [r2]
 _080B7902:
-	ldr r5, _080B7954 @ =0x0202BBF4
+	ldr r5, _080B7954 @ =gPlaySt
 	adds r0, r5, #0
 	adds r0, #0x3e
 	ldrb r1, [r0]
@@ -321723,7 +321723,7 @@ _080B794A:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080B7954: .4byte 0x0202BBF4
+_080B7954: .4byte gPlaySt
 _080B7958: .4byte 0xFFFC7FFF
 _080B795C: .4byte 0xFFFFFE3F
 _080B7960: .4byte 0x000001FF
@@ -322299,7 +322299,7 @@ _080B7D88:
 	adds r0, r7, #0
 	bl sub_08031A5C
 	adds r2, r0, #0
-	ldr r0, _080B7DFC @ =0x0202BBF4
+	ldr r0, _080B7DFC @ =gPlaySt
 	movs r1, #0
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #3
@@ -322324,7 +322324,7 @@ _080B7DD0:
 	b _080B7D88
 	.align 2, 0
 _080B7DF8: .4byte 0x08DB7DC8
-_080B7DFC: .4byte 0x0202BBF4
+_080B7DFC: .4byte gPlaySt
 _080B7E00: .4byte 0x00001182
 _080B7E04:
 	ldr r0, [r4]
@@ -322416,7 +322416,7 @@ _080B7EB0:
 	ldr r0, [r5]
 	cmp r0, #0xcd
 	bne _080B7ECC
-	ldr r0, _080B7EC8 @ =0x0202BBF4
+	ldr r0, _080B7EC8 @ =gPlaySt
 	adds r0, #0x2c
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1f
@@ -322425,7 +322425,7 @@ _080B7EB0:
 	ldr r0, [r5, #8]
 	b _080B7EEA
 	.align 2, 0
-_080B7EC8: .4byte 0x0202BBF4
+_080B7EC8: .4byte gPlaySt
 _080B7ECC:
 	movs r0, #0
 	ldrsb r0, [r4, r0]
@@ -323339,7 +323339,7 @@ sub_080B85C0: @ 0x080B85C0
 	ldrsb r0, [r2, r0]
 	cmp r0, #0
 	beq _080B85EA
-	ldr r0, _080B85F0 @ =0x08BBFC7C
+	ldr r0, _080B85F0 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #8
 	ldrh r1, [r1, #8]
@@ -323355,7 +323355,7 @@ _080B85EA:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080B85F0: .4byte 0x08BBFC7C
+_080B85F0: .4byte gpKeySt
 
 	thumb_func_start sub_080B85F4
 sub_080B85F4: @ 0x080B85F4
@@ -323644,7 +323644,7 @@ sub_080B8808: @ 0x080B8808
 	adds r1, r2, #0
 	bl sub_080B7E60
 _080B884C:
-	ldr r0, _080B8878 @ =0x08BBFC7C
+	ldr r0, _080B8878 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #1
 	ldrh r1, [r1, #4]
@@ -323665,7 +323665,7 @@ _080B884C:
 	b _080B8888
 	.align 2, 0
 _080B8874: .4byte 0x02000888
-_080B8878: .4byte 0x08BBFC7C
+_080B8878: .4byte gpKeySt
 _080B887C:
 	adds r0, r6, #0
 	adds r0, #0x44
@@ -323967,7 +323967,7 @@ sub_080B8AB4: @ 0x080B8AB4
 	bl sub_0800457C
 	b _080B8AE6
 _080B8AD2:
-	ldr r0, _080B8AEC @ =0x08BBFC7C
+	ldr r0, _080B8AEC @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #8
 	ldrh r1, [r1, #8]
@@ -323980,7 +323980,7 @@ _080B8AE6:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080B8AEC: .4byte 0x08BBFC7C
+_080B8AEC: .4byte gpKeySt
 
 	thumb_func_start sub_080B8AF0
 sub_080B8AF0: @ 0x080B8AF0
@@ -324207,7 +324207,7 @@ _080B8C80:
 	adds r0, r6, #0
 	bl sub_08031A5C
 	adds r2, r0, #0
-	ldr r0, _080B8CE0 @ =0x0202BBF4
+	ldr r0, _080B8CE0 @ =gPlaySt
 	movs r1, #0
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #3
@@ -324235,7 +324235,7 @@ _080B8CAE:
 	mov pc, r0
 	.align 2, 0
 _080B8CDC: .4byte 0x08DB8118
-_080B8CE0: .4byte 0x0202BBF4
+_080B8CE0: .4byte gPlaySt
 _080B8CE4: .4byte _080B8CE8
 _080B8CE8: @ jump table
 	.4byte _080B8D00 @ case 0
@@ -324499,7 +324499,7 @@ sub_080B8ECC: @ 0x080B8ECC
 	adds r1, #0x40
 	ldr r2, _080B8F24 @ =0x01000010
 	bl CpuSet
-	ldr r0, _080B8F28 @ =0x0202BBF4
+	ldr r0, _080B8F28 @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #3
 	bne _080B8F30
@@ -324509,7 +324509,7 @@ sub_080B8ECC: @ 0x080B8ECC
 	.align 2, 0
 _080B8F20: .4byte 0x03002790
 _080B8F24: .4byte 0x01000010
-_080B8F28: .4byte 0x0202BBF4
+_080B8F28: .4byte gPlaySt
 _080B8F2C: .4byte 0x08DB85EC
 _080B8F30:
 	ldr r0, _080B8F44 @ =0x08DB85EC
@@ -324711,7 +324711,7 @@ _080B9090:
 	mov r0, ip
 	cmp r0, #0xcd
 	bne _080B90AC
-	ldr r1, _080B90A8 @ =0x0202BBF4
+	ldr r1, _080B90A8 @ =gPlaySt
 	adds r1, #0x2b
 	adds r0, r6, #0
 	ldrb r1, [r1]
@@ -324721,7 +324721,7 @@ _080B9090:
 	str r3, [r4, #0x38]
 	b _080B9124
 	.align 2, 0
-_080B90A8: .4byte 0x0202BBF4
+_080B90A8: .4byte gPlaySt
 _080B90AC:
 	ldrb r0, [r5, #1]
 	bl sub_080B8F84
@@ -325746,7 +325746,7 @@ _080B98EE:
 sub_080B98F8: @ 0x080B98F8
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _080B9924 @ =0x08BBFC7C
+	ldr r0, _080B9924 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #8
 	ldrh r1, [r1, #8]
@@ -325764,7 +325764,7 @@ sub_080B98F8: @ 0x080B98F8
 	bl sub_080045FC
 	b _080B99D0
 	.align 2, 0
-_080B9924: .4byte 0x08BBFC7C
+_080B9924: .4byte gpKeySt
 _080B9928:
 	ldr r0, [r4, #0x3c]
 	cmp r0, #0
@@ -325974,7 +325974,7 @@ sub_080B9AC4: @ 0x080B9AC4
 	ldr r0, [r2, #0x58]
 	adds r0, #1
 	str r0, [r2, #0x58]
-	ldr r0, _080B9AE4 @ =0x08BBFC7C
+	ldr r0, _080B9AE4 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #9
 	ldrh r3, [r1, #8]
@@ -325985,7 +325985,7 @@ sub_080B9AC4: @ 0x080B9AC4
 	bl sub_0800457C
 	b _080B9B18
 	.align 2, 0
-_080B9AE4: .4byte 0x08BBFC7C
+_080B9AE4: .4byte gpKeySt
 _080B9AE8:
 	movs r0, #4
 	ldrh r1, [r1, #4]
@@ -326544,7 +326544,7 @@ _080B9F64:
 	bl sub_08031A5C
 	adds r1, r0, #0
 	movs r2, #0
-	ldr r0, _080B9F98 @ =0x0202BBF4
+	ldr r0, _080B9F98 @ =gPlaySt
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #3
 	bne _080B9F7E
@@ -326564,7 +326564,7 @@ _080B9F7E:
 	beq _080B9FC8
 	b _080BA012
 	.align 2, 0
-_080B9F98: .4byte 0x0202BBF4
+_080B9F98: .4byte gPlaySt
 _080B9F9C:
 	mov r3, r8
 	cmp r3, #0x2f
@@ -326635,7 +326635,7 @@ _080BA012:
 	bl sub_08031A5C
 	adds r1, r0, #0
 	movs r2, #0
-	ldr r0, _080BA078 @ =0x0202BBF4
+	ldr r0, _080BA078 @ =gPlaySt
 	adds r6, r4, #0
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #3
@@ -326671,7 +326671,7 @@ _080BA068:
 	b _080BA0A8
 	.align 2, 0
 _080BA074: .4byte 0x02023460
-_080BA078: .4byte 0x0202BBF4
+_080BA078: .4byte gPlaySt
 _080BA07C: .4byte 0x0000117F
 _080BA080: .4byte 0x08DB8B60
 _080BA084:
@@ -326720,7 +326720,7 @@ _080BA0D8:
 	mov r0, r8
 	bl sub_08031A5C
 	adds r2, r0, #0
-	ldr r0, _080BA150 @ =0x0202BBF4
+	ldr r0, _080BA150 @ =gPlaySt
 	movs r1, #0
 	ldrb r0, [r0, #0x1b]
 	cmp r0, #3
@@ -326776,7 +326776,7 @@ _080BA140:
 	pop {r1}
 	bx r1
 	.align 2, 0
-_080BA150: .4byte 0x0202BBF4
+_080BA150: .4byte gPlaySt
 _080BA154: .4byte 0x08DB8B60
 _080BA158: .4byte 0x02023460
 
@@ -326847,7 +326847,7 @@ _080BA1D2:
 	adds r0, #1
 	strb r0, [r5]
 _080BA1DE:
-	ldr r0, _080BA200 @ =0x08BBFC7C
+	ldr r0, _080BA200 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #1
 	ldrh r1, [r1, #4]
@@ -326866,7 +326866,7 @@ _080BA1F4:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080BA200: .4byte 0x08BBFC7C
+_080BA200: .4byte gpKeySt
 
 	thumb_func_start sub_080BA204
 sub_080BA204: @ 0x080BA204
@@ -326892,7 +326892,7 @@ sub_080BA204: @ 0x080BA204
 	movs r1, #0x10
 	movs r2, #0x80
 	bl sub_080068C4
-	ldr r1, _080BA400 @ =0x0202BBF4
+	ldr r1, _080BA400 @ =gPlaySt
 	movs r0, #0x80
 	ldrb r1, [r1, #0x14]
 	ands r0, r1
@@ -327108,7 +327108,7 @@ _080BA354:
 _080BA3F4: .4byte 0x08DB8A2C
 _080BA3F8: .4byte 0x00009480
 _080BA3FC: .4byte 0x08DB8AA0
-_080BA400: .4byte 0x0202BBF4
+_080BA400: .4byte gPlaySt
 _080BA404: .4byte 0x08DB8A4C
 _080BA408: .4byte 0x00008480
 _080BA40C: .4byte 0x08DB8A5A
@@ -327421,7 +327421,7 @@ _080BA684:
 	bl sub_0800105C
 	movs r0, #0xf
 	bl sub_08000FD4
-	ldr r4, _080BA740 @ =0x0202BBF4
+	ldr r4, _080BA740 @ =gPlaySt
 	movs r0, #0x80
 	ldrb r6, [r4, #0x14]
 	ands r0, r6
@@ -327467,7 +327467,7 @@ _080BA730: .4byte 0x0861A360
 _080BA734: .4byte 0x0861A3E0
 _080BA738: .4byte 0x0861A380
 _080BA73C: .4byte 0x0861A3A0
-_080BA740: .4byte 0x0202BBF4
+_080BA740: .4byte gPlaySt
 _080BA744:
 	bl sub_080A05FC
 	add r1, sp, #8
@@ -327812,7 +327812,7 @@ _080BA9DA:
 	bne _080BAA48
 	movs r0, #0
 	str r0, [r4, #0x30]
-	ldr r1, _080BAA1C @ =0x0202BBF4
+	ldr r1, _080BAA1C @ =gPlaySt
 	movs r0, #0x80
 	ldrb r1, [r1, #0x14]
 	ands r0, r1
@@ -327826,7 +327826,7 @@ _080BA9DA:
 	b _080BAA2A
 	.align 2, 0
 _080BAA18: .4byte 0x0000011F
-_080BAA1C: .4byte 0x0202BBF4
+_080BAA1C: .4byte gPlaySt
 _080BAA20:
 	ldr r0, [r4, #0x2c]
 	adds r0, #0xa
@@ -327836,7 +327836,7 @@ _080BAA2A:
 	ldr r0, [r4, #0x2c]
 	adds r0, #1
 	str r0, [r4, #0x2c]
-	ldr r0, _080BAA50 @ =0x0202BBF4
+	ldr r0, _080BAA50 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -327852,13 +327852,13 @@ _080BAA48:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080BAA50: .4byte 0x0202BBF4
+_080BAA50: .4byte gPlaySt
 
 	thumb_func_start sub_080BAA54
 sub_080BAA54: @ 0x080BAA54
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _080BAA7C @ =0x08BBFC7C
+	ldr r0, _080BAA7C @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0xb
 	ldrh r1, [r1, #8]
@@ -327875,7 +327875,7 @@ _080BAA74:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080BAA7C: .4byte 0x08BBFC7C
+_080BAA7C: .4byte gpKeySt
 
 	thumb_func_start sub_080BAA80
 sub_080BAA80: @ 0x080BAA80
@@ -327889,7 +327889,7 @@ sub_080BAA80: @ 0x080BAA80
 sub_080BAA8C: @ 0x080BAA8C
 	push {lr}
 	adds r2, r0, #0
-	ldr r1, _080BAAA8 @ =0x0202BBF4
+	ldr r1, _080BAAA8 @ =gPlaySt
 	movs r0, #0x80
 	ldrb r1, [r1, #0x14]
 	ands r0, r1
@@ -327900,7 +327900,7 @@ sub_080BAA8C: @ 0x080BAA8C
 	bl sub_080045FC
 	b _080BAAB4
 	.align 2, 0
-_080BAAA8: .4byte 0x0202BBF4
+_080BAAA8: .4byte gPlaySt
 _080BAAAC:
 	adds r0, r2, #0
 	movs r1, #0
@@ -328207,7 +328207,7 @@ _080BACAA:
 	adds r0, #0x28
 	str r0, [r4, #0x30]
 _080BAD1E:
-	ldr r0, _080BAD48 @ =0x08BBFC7C
+	ldr r0, _080BAD48 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #8
 	ldrh r1, [r1, #8]
@@ -328225,7 +328225,7 @@ _080BAD1E:
 	.align 2, 0
 _080BAD40: .4byte 0x01000200
 _080BAD44: .4byte 0x02024460
-_080BAD48: .4byte 0x08BBFC7C
+_080BAD48: .4byte gpKeySt
 _080BAD4C:
 	ldr r0, [r4, #0x2c]
 	ldr r1, [r4, #0x3c]
@@ -328844,7 +328844,7 @@ sub_080BB210: @ 0x080BB210
 	strb r0, [r2, #1]
 	movs r0, #0xe
 	bl sub_08000FD4
-	ldr r0, _080BB298 @ =0x0202BBF4
+	ldr r0, _080BB298 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -328864,7 +328864,7 @@ _080BB27C:
 _080BB28C: .4byte sub_080BAED4
 _080BB290: .4byte 0x08DB9A84
 _080BB294: .4byte 0x03002790
-_080BB298: .4byte 0x0202BBF4
+_080BB298: .4byte gPlaySt
 
 	thumb_func_start sub_080BB29C
 sub_080BB29C: @ 0x080BB29C
@@ -329218,14 +329218,14 @@ sub_080BB528: @ 0x080BB528
 	lsls r1, r1, #2
 	movs r2, #2
 	bl sub_0800105C
-	ldr r0, _080BB588 @ =0x08BBFC7C
+	ldr r0, _080BB588 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #9
 	ldrh r1, [r1, #8]
 	ands r0, r1
 	cmp r0, #0
 	beq _080BB594
-	ldr r0, _080BB58C @ =0x0202BBF4
+	ldr r0, _080BB58C @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -329241,8 +329241,8 @@ _080BB576:
 	b _080BB5AA
 	.align 2, 0
 _080BB584: .4byte 0x086282F8
-_080BB588: .4byte 0x08BBFC7C
-_080BB58C: .4byte 0x0202BBF4
+_080BB588: .4byte gpKeySt
+_080BB58C: .4byte gPlaySt
 _080BB590: .4byte 0x0000038D
 _080BB594:
 	ldr r1, [r4, #0x54]
@@ -329269,11 +329269,11 @@ sub_080BB5B0: @ 0x080BB5B0
 	movs r4, #5
 _080BB5BE:
 	ldm r5!, {r0}
-	bl sub_08012B8C
+	bl EndSpriteAnimProc
 	subs r4, #1
 	cmp r4, #0
 	bge _080BB5BE
-	bl sub_08012B98
+	bl EndEachSpriteAnimProc
 	movs r0, #0
 	bl sub_08002DF0
 	pop {r4, r5}
@@ -331925,7 +331925,7 @@ sub_080BCB0C: @ 0x080BCB0C
 	strb r0, [r2, #1]
 	movs r0, #2
 	bl sub_080BAEFC
-	bl sub_08012B98
+	bl EndEachSpriteAnimProc
 	add sp, #4
 	pop {r0}
 	bx r0
@@ -332443,7 +332443,7 @@ _080BCF94: .4byte 0x02022860
 sub_080BCF98: @ 0x080BCF98
 	push {r4, lr}
 	adds r4, r0, #0
-	ldr r0, _080BCFC0 @ =0x08BBFC7C
+	ldr r0, _080BCFC0 @ =gpKeySt
 	ldr r1, [r0]
 	movs r0, #0xb
 	ldrh r1, [r1, #8]
@@ -332460,7 +332460,7 @@ _080BCFB8:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080BCFC0: .4byte 0x08BBFC7C
+_080BCFC0: .4byte gpKeySt
 
 	thumb_func_start sub_080BCFC4
 sub_080BCFC4: @ 0x080BCFC4
@@ -332934,7 +332934,7 @@ sub_080BD36C: @ 0x080BD36C
 	adds r4, r0, #0
 	movs r0, #8
 	bl sub_08003E68
-	ldr r0, _080BD398 @ =0x0202BBF4
+	ldr r0, _080BD398 @ =gPlaySt
 	adds r0, #0x41
 	ldrb r0, [r0]
 	lsls r0, r0, #0x1e
@@ -332950,7 +332950,7 @@ _080BD388:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080BD398: .4byte 0x0202BBF4
+_080BD398: .4byte gPlaySt
 _080BD39C: .4byte 0x08DB91C0
 
 	thumb_func_start sub_080BD3A0
@@ -334494,7 +334494,7 @@ _080BDED0:
 	bge _080BDF3C
 _080BDF2A:
 	adds r0, r7, #0
-	bl sub_08012B8C
+	bl EndSpriteAnimProc
 	movs r0, #0
 	mov r1, r8
 	str r0, [r1]
diff --git a/asm/game-ctrl.s b/asm/game-ctrl.s
new file mode 100644
index 0000000..bfe2950
--- /dev/null
+++ b/asm/game-ctrl.s
@@ -0,0 +1,1244 @@
+	.include "macro.inc"
+
+	.syntax unified
+
+	thumb_func_start sub_08012BC0
+sub_08012BC0: @ 0x08012BC0
+	push {r4, r5, r6, lr}
+	sub sp, #0x48
+	bl sub_080A0D74
+	lsls r1, r0, #4
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	adds r4, r1, r0
+	movs r5, #0
+	mov r6, sp
+_08012BD4:
+	adds r0, r5, #0
+	bl IsSaveValid
+	lsls r0, r0, #0x18
+	cmp r0, #0
+	beq _08012C02
+	adds r0, r5, #0
+	mov r1, sp
+	bl ReadGameSavePlaySt
+	movs r2, #0xe
+	ldrsb r2, [r6, r2]
+	ldrh r0, [r6, #0x2e]
+	lsls r1, r0, #0x14
+	lsrs r1, r1, #0x1b
+	lsls r0, r1, #4
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	adds r0, r0, r1
+	adds r2, r2, r0
+	cmp r4, r2
+	bge _08012C02
+	adds r4, r2, #0
+_08012C02:
+	adds r5, #1
+	cmp r5, #2
+	ble _08012BD4
+	cmp r4, #4
+	bgt _08012C10
+	movs r0, #0
+	b _08012C5A
+_08012C10:
+	cmp r4, #0xa
+	bgt _08012C18
+	movs r0, #1
+	b _08012C5A
+_08012C18:
+	cmp r4, #0x12
+	bgt _08012C20
+	movs r0, #2
+	b _08012C5A
+_08012C20:
+	cmp r4, #0x1a
+	bgt _08012C28
+	movs r0, #3
+	b _08012C5A
+_08012C28:
+	cmp r4, #0x44
+	bgt _08012C30
+	movs r0, #4
+	b _08012C5A
+_08012C30:
+	cmp r4, #0x49
+	bgt _08012C38
+	movs r0, #5
+	b _08012C5A
+_08012C38:
+	cmp r4, #0x4f
+	bgt _08012C40
+	movs r0, #6
+	b _08012C5A
+_08012C40:
+	cmp r4, #0x57
+	bgt _08012C48
+	movs r0, #7
+	b _08012C5A
+_08012C48:
+	cmp r4, #0x5f
+	bgt _08012C50
+	movs r0, #8
+	b _08012C5A
+_08012C50:
+	cmp r4, #0x89
+	ble _08012C58
+	movs r0, #0xa
+	b _08012C5A
+_08012C58:
+	movs r0, #9
+_08012C5A:
+	add sp, #0x48
+	pop {r4, r5, r6}
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_08012C64
+sub_08012C64: @ 0x08012C64
+	push {r4, lr}
+	adds r4, r0, #0
+	bl sub_08012BC0
+	lsls r0, r0, #0x18
+	lsrs r0, r0, #0x18
+	adds r1, r4, #0
+	bl sub_080AFE1C
+	movs r0, #0
+	pop {r4}
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_08012C80
+sub_08012C80: @ 0x08012C80
+	push {lr}
+	adds r2, r0, #0
+	ldr r0, _08012CA0 @ =gpKeySt
+	ldr r1, [r0]
+	movs r0, #0x85
+	lsls r0, r0, #2
+	ldrh r1, [r1, #4]
+	cmp r1, r0
+	bne _08012C9A
+	adds r0, r2, #0
+	movs r1, #0xf
+	bl sub_080045FC
+_08012C9A:
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08012CA0: .4byte gpKeySt
+
+	thumb_func_start sub_08012CA4
+sub_08012CA4: @ 0x08012CA4
+	push {lr}
+	movs r0, #0
+	bl sub_08002A44
+	bl sub_08015A48
+	ldr r2, _08012CD4 @ =gPlaySt
+	adds r2, #0x40
+	movs r0, #0x61
+	rsbs r0, r0, #0
+	ldrb r1, [r2]
+	ands r0, r1
+	movs r1, #0x20
+	orrs r0, r1
+	strb r0, [r2]
+	movs r2, #1
+	rsbs r2, r2, #0
+	movs r0, #3
+	movs r1, #0
+	bl sub_0808068C
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08012CD4: .4byte gPlaySt
+
+	thumb_func_start sub_08012CD8
+sub_08012CD8: @ 0x08012CD8
+	movs r1, #0x14
+	strh r1, [r0, #0x2e]
+	bx lr
+	.align 2, 0
+
+	thumb_func_start sub_08012CE0
+sub_08012CE0: @ 0x08012CE0
+	push {r4, lr}
+	adds r4, r0, #0
+	ldr r0, _08012CFC @ =gpKeySt
+	ldr r1, [r0]
+	movs r0, #8
+	ldrh r1, [r1, #4]
+	ands r0, r1
+	cmp r0, #0
+	bne _08012D00
+	adds r0, r4, #0
+	bl sub_0800457C
+	b _08012D44
+	.align 2, 0
+_08012CFC: .4byte gpKeySt
+_08012D00:
+	ldrh r0, [r4, #0x2e]
+	subs r0, #1
+	strh r0, [r4, #0x2e]
+	lsls r0, r0, #0x10
+	cmp r0, #0
+	bge _08012D44
+	movs r0, #3
+	bl IsValidSuspendSave
+	lsls r0, r0, #0x18
+	cmp r0, #0
+	beq _08012D28
+	movs r0, #3
+	bl ReadSuspendSave
+	adds r0, r4, #0
+	movs r1, #6
+	bl sub_080045FC
+	b _08012D44
+_08012D28:
+	movs r0, #0x5a
+	movs r1, #0
+	bl sub_08003684
+	movs r0, #0
+	movs r1, #0xc0
+	movs r2, #0x3c
+	movs r3, #0
+	bl sub_08003B4C
+	adds r0, r4, #0
+	movs r1, #4
+	bl sub_080045FC
+_08012D44:
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08012D4C
+sub_08012D4C: @ 0x08012D4C
+	push {lr}
+	adds r1, r0, #0
+	adds r1, #0x26
+	ldrb r1, [r1]
+	cmp r1, #0xb
+	beq _08012D5C
+	bl sub_08004460
+_08012D5C:
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08012D60
+sub_08012D60: @ 0x08012D60
+	push {lr}
+	sub sp, #4
+	movs r0, #0
+	str r0, [sp]
+	ldr r1, _08012D88 @ =0x02022860
+	ldr r2, _08012D8C @ =0x01000100
+	mov r0, sp
+	bl CpuFastSet
+	bl sub_08001034
+	ldr r0, _08012D90 @ =sub_08012D4C
+	bl sub_08004648
+	ldr r0, _08012D94 @ =OnGameLoopMain
+	bl SetMainUpdateRoutine
+	add sp, #4
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08012D88: .4byte 0x02022860
+_08012D8C: .4byte 0x01000100
+_08012D90: .4byte sub_08012D4C
+_08012D94: .4byte OnGameLoopMain
+
+	thumb_func_start sub_08012D98
+sub_08012D98: @ 0x08012D98
+	push {lr}
+	movs r0, #0x5a
+	movs r1, #0
+	bl sub_08003684
+	movs r0, #0
+	movs r1, #0xc0
+	movs r2, #0x3c
+	movs r3, #0
+	bl sub_08003B4C
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08012DB4
+sub_08012DB4: @ 0x08012DB4
+	push {lr}
+	movs r0, #0x80
+	lsls r0, r0, #1
+	movs r1, #0xc0
+	movs r2, #0x20
+	movs r3, #0
+	bl sub_08003B4C
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08012DC8
+sub_08012DC8: @ 0x08012DC8
+	push {r4, r5, lr}
+	adds r4, r0, #0
+	adds r0, #0x29
+	ldrb r1, [r0]
+	cmp r1, #1
+	beq _08012E02
+	cmp r1, #1
+	bgt _08012DDE
+	cmp r1, #0
+	beq _08012DF2
+	b _08012E38
+_08012DDE:
+	cmp r1, #2
+	beq _08012DE8
+	cmp r1, #3
+	beq _08012E30
+	b _08012E38
+_08012DE8:
+	adds r0, r4, #0
+	movs r1, #3
+	bl sub_080045FC
+	b _08012E38
+_08012DF2:
+	adds r0, r4, #0
+	movs r1, #4
+	bl sub_080045FC
+	adds r0, r4, #0
+	bl sub_08012DB4
+	b _08012E38
+_08012E02:
+	adds r0, r4, #0
+	adds r0, #0x2b
+	ldrb r2, [r0]
+	ands r1, r2
+	adds r5, r0, #0
+	cmp r1, #0
+	beq _08012E16
+	cmp r1, #1
+	beq _08012E20
+	b _08012E28
+_08012E16:
+	adds r0, r4, #0
+	movs r1, #1
+	bl sub_080045FC
+	b _08012E28
+_08012E20:
+	adds r0, r4, #0
+	movs r1, #0
+	bl sub_080045FC
+_08012E28:
+	ldrb r0, [r5]
+	adds r0, #1
+	strb r0, [r5]
+	b _08012E38
+_08012E30:
+	adds r0, r4, #0
+	movs r1, #0x15
+	bl sub_080045FC
+_08012E38:
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08012E40
+sub_08012E40: @ 0x08012E40
+	push {lr}
+	adds r1, r0, #0
+	adds r1, #0x29
+	ldrb r1, [r1]
+	cmp r1, #0
+	beq _08012E52
+	cmp r1, #1
+	beq _08012E5A
+	b _08012E60
+_08012E52:
+	movs r1, #3
+	bl sub_080045FC
+	b _08012E60
+_08012E5A:
+	movs r1, #0
+	bl sub_080045FC
+_08012E60:
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08012E64
+sub_08012E64: @ 0x08012E64
+	push {r4, lr}
+	adds r4, r0, #0
+	adds r0, #0x29
+	ldrb r0, [r0]
+	cmp r0, #8
+	bhi _08012F24
+	lsls r0, r0, #2
+	ldr r1, _08012E7C @ =_08012E80
+	adds r0, r0, r1
+	ldr r0, [r0]
+	mov pc, r0
+	.align 2, 0
+_08012E7C: .4byte _08012E80
+_08012E80: @ jump table
+	.4byte _08012EA4 @ case 0
+	.4byte _08012EA4 @ case 1
+	.4byte _08012EA4 @ case 2
+	.4byte _08012EA4 @ case 3
+	.4byte _08012EF4 @ case 4
+	.4byte _08012EFE @ case 5
+	.4byte _08012F08 @ case 6
+	.4byte _08012F12 @ case 7
+	.4byte _08012F1C @ case 8
+_08012EA4:
+	bl sub_080A0580
+	cmp r0, #0xb
+	bne _08012EB6
+	adds r0, r4, #0
+	movs r1, #0x14
+	bl sub_080045FC
+	b _08012F24
+_08012EB6:
+	bl sub_0802EBB0
+	ldrb r0, [r0]
+	cmp r0, #0
+	bne _08012EE6
+	ldr r1, _08012ED8 @ =gPlaySt
+	adds r1, #0x2b
+	movs r0, #1
+	ldrb r1, [r1]
+	ands r0, r1
+	cmp r0, #0
+	beq _08012EDC
+	adds r0, r4, #0
+	movs r1, #0x12
+	bl sub_080045FC
+	b _08012F24
+	.align 2, 0
+_08012ED8: .4byte gPlaySt
+_08012EDC:
+	ldr r0, _08012EF0 @ =0x00000569
+	bl sub_08013318
+	bl sub_0802EBB8
+_08012EE6:
+	adds r0, r4, #0
+	movs r1, #5
+	bl sub_080045FC
+	b _08012F24
+	.align 2, 0
+_08012EF0: .4byte 0x00000569
+_08012EF4:
+	adds r0, r4, #0
+	movs r1, #6
+	bl sub_080045FC
+	b _08012F24
+_08012EFE:
+	adds r0, r4, #0
+	movs r1, #0x16
+	bl sub_080045FC
+	b _08012F24
+_08012F08:
+	adds r0, r4, #0
+	movs r1, #0xa
+	bl sub_080045FC
+	b _08012F24
+_08012F12:
+	adds r0, r4, #0
+	movs r1, #0xb
+	bl sub_080045FC
+	b _08012F24
+_08012F1C:
+	adds r0, r4, #0
+	movs r1, #0xc
+	bl sub_080045FC
+_08012F24:
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08012F2C
+sub_08012F2C: @ 0x08012F2C
+	push {lr}
+	adds r1, r0, #0
+	adds r1, #0x29
+	ldrb r1, [r1]
+	cmp r1, #5
+	bne _08012F3E
+	movs r1, #3
+	bl sub_080045FC
+_08012F3E:
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08012F44
+sub_08012F44: @ 0x08012F44
+	push {lr}
+	movs r1, #3
+	bl sub_080045FC
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08012F50
+sub_08012F50: @ 0x08012F50
+	push {lr}
+	adds r1, r0, #0
+	adds r1, #0x29
+	ldrb r1, [r1]
+	cmp r1, #0
+	beq _08012F66
+	cmp r1, #1
+	bne _08012F66
+	movs r1, #0x10
+	bl sub_080045FC
+_08012F66:
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08012F6C
+sub_08012F6C: @ 0x08012F6C
+	push {r4, r5, lr}
+	adds r5, r0, #0
+	adds r0, #0x29
+	ldrb r0, [r0]
+	cmp r0, #5
+	bne _08012F82
+	adds r0, r5, #0
+	movs r1, #4
+	bl sub_080045FC
+	b _08012FA6
+_08012F82:
+	movs r0, #0
+	bl sub_0802E3E0
+	ldr r4, _08012FAC @ =gPlaySt
+	movs r0, #8
+	ldrb r1, [r4, #0x14]
+	orrs r0, r1
+	strb r0, [r4, #0x14]
+	bl sub_0807A0A0
+	bl sub_08079FDC
+	bl InitUnits
+	adds r0, r5, #0
+	adds r0, #0x2a
+	ldrb r0, [r0]
+	strb r0, [r4, #0xe]
+_08012FA6:
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08012FAC: .4byte gPlaySt
+
+	thumb_func_start sub_08012FB0
+sub_08012FB0: @ 0x08012FB0
+	push {lr}
+	bl sub_080A2BFC
+	bl ClearPidStats
+	bl sub_0802E8A0
+	ldr r1, _08012FC8 @ =gPlaySt
+	movs r0, #0x30
+	strb r0, [r1, #0xe]
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08012FC8: .4byte gPlaySt
+
+	thumb_func_start sub_08012FCC
+sub_08012FCC: @ 0x08012FCC
+	push {lr}
+	movs r0, #3
+	bl sub_080A1A60
+	ldr r1, _08012FE8 @ =gPlaySt
+	adds r1, #0x41
+	movs r0, #2
+	rsbs r0, r0, #0
+	ldrb r2, [r1]
+	ands r0, r2
+	strb r0, [r1]
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08012FE8: .4byte gPlaySt
+
+	thumb_func_start sub_08012FEC
+sub_08012FEC: @ 0x08012FEC
+	push {r4, lr}
+	adds r4, r0, #0
+	bl sub_0806D4A4
+	adds r0, r4, #0
+	adds r0, #0x29
+	ldrb r0, [r0]
+	cmp r0, #5
+	bhi _0801304A
+	lsls r0, r0, #2
+	ldr r1, _08013008 @ =_0801300C
+	adds r0, r0, r1
+	ldr r0, [r0]
+	mov pc, r0
+	.align 2, 0
+_08013008: .4byte _0801300C
+_0801300C: @ jump table
+	.4byte _08013024 @ case 0
+	.4byte _0801304A @ case 1
+	.4byte _0801302E @ case 2
+	.4byte _08013038 @ case 3
+	.4byte _08013042 @ case 4
+	.4byte _08013042 @ case 5
+_08013024:
+	adds r0, r4, #0
+	movs r1, #3
+	bl sub_080045FC
+	b _0801304A
+_0801302E:
+	adds r0, r4, #0
+	movs r1, #0xd
+	bl sub_080045FC
+	b _0801304A
+_08013038:
+	adds r0, r4, #0
+	movs r1, #0x13
+	bl sub_080045FC
+	b _0801304A
+_08013042:
+	adds r0, r4, #0
+	movs r1, #0xd
+	bl sub_080045FC
+_0801304A:
+	pop {r4}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08013050
+sub_08013050: @ 0x08013050
+	push {lr}
+	adds r2, r0, #0
+	ldr r1, _0801306C @ =gPlaySt
+	movs r0, #0x20
+	ldrb r1, [r1, #0x14]
+	ands r0, r1
+	cmp r0, #0
+	beq _08013068
+	adds r0, r2, #0
+	movs r1, #0xe
+	bl sub_080045FC
+_08013068:
+	pop {r0}
+	bx r0
+	.align 2, 0
+_0801306C: .4byte gPlaySt
+
+	thumb_func_start sub_08013070
+sub_08013070: @ 0x08013070
+	push {lr}
+	adds r2, r0, #0
+	ldr r1, _0801308C @ =gPlaySt
+	movs r0, #0x80
+	ldrb r1, [r1, #0x14]
+	ands r0, r1
+	cmp r0, #0
+	beq _08013090
+	adds r0, r2, #0
+	movs r1, #8
+	bl sub_080045FC
+	b _08013098
+	.align 2, 0
+_0801308C: .4byte gPlaySt
+_08013090:
+	adds r0, r2, #0
+	movs r1, #7
+	bl sub_080045FC
+_08013098:
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_0801309C
+sub_0801309C: @ 0x0801309C
+	push {r4, r5, lr}
+	adds r4, r0, #0
+	ldr r5, _080130BC @ =gPlaySt
+	adds r0, r5, #0
+	bl sub_080A05A0
+	bl sub_080B7880
+	adds r4, #0x2a
+	ldrb r0, [r4]
+	strb r0, [r5, #0xe]
+	bl sub_0802E8A0
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080130BC: .4byte gPlaySt
+
+	thumb_func_start sub_080130C0
+sub_080130C0: @ 0x080130C0
+	push {lr}
+	adds r1, r0, #0
+	ldr r0, _080130D8 @ =gPlaySt
+	ldrb r0, [r0, #0xe]
+	cmp r0, #0x2f
+	beq _080130D2
+	adds r0, r1, #0
+	bl sub_080A5AF8
+_080130D2:
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080130D8: .4byte gPlaySt
+
+	thumb_func_start sub_080130DC
+sub_080130DC: @ 0x080130DC
+	ldr r1, _080130E4 @ =gPlaySt
+	movs r0, #2
+	strb r0, [r1, #0x1b]
+	bx lr
+	.align 2, 0
+_080130E4: .4byte gPlaySt
+
+	thumb_func_start sub_080130E8
+sub_080130E8: @ 0x080130E8
+	ldr r3, _08013120 @ =0x03002790
+	adds r2, r3, #0
+	adds r2, #0x3c
+	movs r0, #0xc0
+	ldrb r1, [r2]
+	orrs r0, r1
+	strb r0, [r2]
+	adds r0, r3, #0
+	adds r0, #0x44
+	movs r1, #0
+	strb r1, [r0]
+	adds r0, #1
+	strb r1, [r0]
+	adds r1, r3, #0
+	adds r1, #0x46
+	movs r0, #0x10
+	strb r0, [r1]
+	ldr r0, _08013124 @ =0x0000FFE0
+	ldrh r1, [r3, #0x3c]
+	ands r0, r1
+	movs r1, #0x1f
+	orrs r0, r1
+	strh r0, [r3, #0x3c]
+	movs r0, #0x20
+	ldrb r1, [r2]
+	orrs r0, r1
+	strb r0, [r2]
+	bx lr
+	.align 2, 0
+_08013120: .4byte 0x03002790
+_08013124: .4byte 0x0000FFE0
+
+	thumb_func_start sub_08013128
+sub_08013128: @ 0x08013128
+	push {lr}
+	movs r0, #0
+	bl sub_08002A44
+	ldr r0, _08013140 @ =gPlaySt
+	ldrb r0, [r0, #0x1b]
+	cmp r0, #2
+	beq _08013144
+	cmp r0, #3
+	beq _08013150
+	b _08013156
+	.align 2, 0
+_08013140: .4byte gPlaySt
+_08013144:
+	ldr r0, _0801314C @ =0x08D8A0E0
+	bl sub_0800AE98
+	b _08013156
+	.align 2, 0
+_0801314C: .4byte 0x08D8A0E0
+_08013150:
+	ldr r0, _0801315C @ =0x08D8A114
+	bl sub_0800AE98
+_08013156:
+	pop {r0}
+	bx r0
+	.align 2, 0
+_0801315C: .4byte 0x08D8A114
+
+	thumb_func_start sub_08013160
+sub_08013160: @ 0x08013160
+	push {lr}
+	movs r0, #0
+	bl sub_08002A44
+	ldr r0, _08013178 @ =gPlaySt
+	ldrb r0, [r0, #0x1b]
+	cmp r0, #2
+	beq _0801317C
+	cmp r0, #3
+	beq _08013188
+	b _0801318E
+	.align 2, 0
+_08013178: .4byte gPlaySt
+_0801317C:
+	ldr r0, _08013184 @ =0x08D8A148
+	bl sub_0800AE98
+	b _0801318E
+	.align 2, 0
+_08013184: .4byte 0x08D8A148
+_08013188:
+	ldr r0, _08013194 @ =0x08D8A1B4
+	bl sub_0800AE98
+_0801318E:
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08013194: .4byte 0x08D8A1B4
+
+	thumb_func_start sub_08013198
+sub_08013198: @ 0x08013198
+	ldr r1, _080131A4 @ =gPlaySt
+	ldrb r1, [r1, #0xe]
+	adds r0, #0x30
+	strb r1, [r0]
+	bx lr
+	.align 2, 0
+_080131A4: .4byte gPlaySt
+
+	thumb_func_start sub_080131A8
+sub_080131A8: @ 0x080131A8
+	ldr r1, _080131B4 @ =gPlaySt
+	adds r0, #0x30
+	ldrb r0, [r0]
+	strb r0, [r1, #0xe]
+	bx lr
+	.align 2, 0
+_080131B4: .4byte gPlaySt
+
+	thumb_func_start StartGame
+StartGame: @ 0x080131B8
+	push {lr}
+	ldr r0, _080131E4 @ =OnGameLoopMain
+	bl SetMainUpdateRoutine
+	ldr r0, _080131E8 @ =OnVBlank
+	bl SetInterrupt_LCDVBlank
+	ldr r0, _080131EC @ =0x08C01744
+	movs r1, #3
+	bl Proc_Start
+	adds r2, r0, #0
+	adds r2, #0x29
+	movs r1, #0
+	strb r1, [r2]
+	adds r2, #1
+	strb r1, [r2]
+	adds r0, #0x2b
+	strb r1, [r0]
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080131E4: .4byte OnGameLoopMain
+_080131E8: .4byte OnVBlank
+_080131EC: .4byte 0x08C01744
+
+	thumb_func_start sub_080131F0
+sub_080131F0: @ 0x080131F0
+	push {lr}
+	ldr r0, _080131FC @ =0x08C01744
+	bl sub_08004584
+	pop {r1}
+	bx r1
+	.align 2, 0
+_080131FC: .4byte 0x08C01744
+
+	thumb_func_start sub_08013200
+sub_08013200: @ 0x08013200
+	push {r4, lr}
+	adds r4, r0, #0
+	bl sub_080131F0
+	adds r0, #0x29
+	strb r4, [r0]
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08013214
+sub_08013214: @ 0x08013214
+	push {r4, lr}
+	adds r4, r0, #0
+	bl sub_080131F0
+	adds r0, #0x2a
+	strb r4, [r0]
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08013228
+sub_08013228: @ 0x08013228
+	push {lr}
+	bl sub_080131F0
+	adds r1, r0, #0
+	adds r1, #0x2a
+	ldrb r2, [r1]
+	rsbs r0, r2, #0
+	orrs r0, r2
+	lsrs r0, r0, #0x1f
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_08013240
+sub_08013240: @ 0x08013240
+	push {r4, lr}
+	ldr r4, _08013260 @ =0x08C01744
+	adds r0, r4, #0
+	bl sub_08004748
+	adds r0, r4, #0
+	movs r1, #3
+	bl Proc_Start
+	movs r1, #5
+	bl sub_080045FC
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08013260: .4byte 0x08C01744
+
+	thumb_func_start sub_08013264
+sub_08013264: @ 0x08013264
+	push {r4, lr}
+	ldr r4, _08013284 @ =0x08C01744
+	adds r0, r4, #0
+	bl sub_08004748
+	adds r0, r4, #0
+	movs r1, #3
+	bl Proc_Start
+	movs r1, #6
+	bl sub_080045FC
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08013284: .4byte 0x08C01744
+
+	thumb_func_start sub_08013288
+sub_08013288: @ 0x08013288
+	push {r4, lr}
+	ldr r4, _080132A8 @ =0x08C01744
+	adds r0, r4, #0
+	bl sub_08004748
+	adds r0, r4, #0
+	movs r1, #3
+	bl Proc_Start
+	movs r1, #0xf
+	bl sub_080045FC
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080132A8: .4byte 0x08C01744
+
+	thumb_func_start sub_080132AC
+sub_080132AC: @ 0x080132AC
+	ldr r0, _080132C4 @ =gPlaySt
+	adds r0, #0x41
+	movs r1, #2
+	rsbs r1, r1, #0
+	ldrb r2, [r0]
+	ands r1, r2
+	movs r2, #3
+	rsbs r2, r2, #0
+	ands r1, r2
+	strb r1, [r0]
+	bx lr
+	.align 2, 0
+_080132C4: .4byte gPlaySt
+
+	thumb_func_start sub_080132C8
+sub_080132C8: @ 0x080132C8
+	push {r4, r5, lr}
+	ldr r1, _08013314 @ =gPlaySt
+	adds r2, r1, #0
+	adds r2, #0x42
+	movs r0, #7
+	rsbs r0, r0, #0
+	ldrb r3, [r2]
+	ands r0, r3
+	strb r0, [r2]
+	adds r5, r1, #0
+	adds r5, #0x40
+	movs r2, #0x61
+	rsbs r2, r2, #0
+	ldrb r0, [r5]
+	ands r2, r0
+	movs r0, #0x20
+	orrs r2, r0
+	movs r0, #0x7f
+	ands r2, r0
+	adds r3, r1, #0
+	adds r3, #0x41
+	movs r4, #2
+	rsbs r4, r4, #0
+	adds r0, r4, #0
+	ldrb r1, [r3]
+	ands r0, r1
+	movs r1, #2
+	orrs r0, r1
+	movs r1, #0xd
+	rsbs r1, r1, #0
+	ands r0, r1
+	strb r0, [r3]
+	ands r2, r4
+	strb r2, [r5]
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08013314: .4byte gPlaySt
+
+	thumb_func_start sub_08013318
+sub_08013318: @ 0x08013318
+	push {r4, r5, r6, lr}
+	adds r5, r0, #0
+	ldr r6, _0801333C @ =0x0202B5B0
+	ldr r0, [r6]
+	cmp r5, r0
+	beq _08013348
+	ldr r1, _08013340 @ =0x08BBB370
+	lsls r0, r5, #2
+	adds r0, r0, r1
+	ldr r0, [r0]
+	ldr r4, _08013344 @ =0x0202A5B0
+	adds r1, r4, #0
+	bl sub_08004240
+	str r5, [r6]
+	adds r0, r4, #0
+	b _0801334A
+	.align 2, 0
+_0801333C: .4byte 0x0202B5B0
+_08013340: .4byte 0x08BBB370
+_08013344: .4byte 0x0202A5B0
+_08013348:
+	ldr r0, _08013350 @ =0x0202A5B0
+_0801334A:
+	pop {r4, r5, r6}
+	pop {r1}
+	bx r1
+	.align 2, 0
+_08013350: .4byte 0x0202A5B0
+
+	thumb_func_start sub_08013354
+sub_08013354: @ 0x08013354
+	push {r4, lr}
+	adds r4, r1, #0
+	ldr r1, _08013370 @ =0x08BBB370
+	lsls r0, r0, #2
+	adds r0, r0, r1
+	ldr r0, [r0]
+	adds r1, r4, #0
+	bl sub_08004240
+	adds r0, r4, #0
+	pop {r4}
+	pop {r1}
+	bx r1
+	.align 2, 0
+_08013370: .4byte 0x08BBB370
+
+	thumb_func_start sub_08013374
+sub_08013374: @ 0x08013374
+	push {r4, r5, lr}
+	ldr r5, _0801338C @ =0x0202A9B0
+	movs r0, #0x80
+	lsls r0, r0, #3
+	adds r4, r5, r0
+	ldr r0, _08013390 @ =0xFFFFFC00
+	adds r1, r5, r0
+	adds r0, r5, #0
+	bl CopyString
+	b _0801346C
+	.align 2, 0
+_0801338C: .4byte 0x0202A9B0
+_08013390: .4byte 0xFFFFFC00
+_08013394:
+	adds r0, r1, #0
+	cmp r0, #0x1f
+	bhi _0801339E
+	strb r1, [r4]
+	b _0801343A
+_0801339E:
+	cmp r0, #0x80
+	beq _080133A8
+	strb r1, [r4]
+	adds r5, #1
+	b _08013434
+_080133A8:
+	adds r5, #1
+	ldrb r0, [r5]
+	subs r0, #0x12
+	cmp r0, #0x10
+	bhi _08013430
+	lsls r0, r0, #2
+	ldr r1, _080133BC @ =_080133C0
+	adds r0, r0, r1
+	ldr r0, [r0]
+	mov pc, r0
+	.align 2, 0
+_080133BC: .4byte _080133C0
+_080133C0: @ jump table
+	.4byte _08013404 @ case 0
+	.4byte _08013408 @ case 1
+	.4byte _0801340C @ case 2
+	.4byte _08013410 @ case 3
+	.4byte _08013430 @ case 4
+	.4byte _08013430 @ case 5
+	.4byte _08013430 @ case 6
+	.4byte _08013430 @ case 7
+	.4byte _08013430 @ case 8
+	.4byte _08013430 @ case 9
+	.4byte _08013430 @ case 10
+	.4byte _08013430 @ case 11
+	.4byte _08013430 @ case 12
+	.4byte _08013430 @ case 13
+	.4byte _08013414 @ case 14
+	.4byte _08013430 @ case 15
+	.4byte _0801341A @ case 16
+_08013404:
+	movs r1, #0
+	b _08013440
+_08013408:
+	movs r1, #1
+	b _08013440
+_0801340C:
+	movs r1, #2
+	b _08013440
+_08013410:
+	movs r1, #3
+	b _08013440
+_08013414:
+	bl sub_0802EBB0
+	b _08013422
+_0801341A:
+	ldr r0, _0801342C @ =0x0203A858
+	ldrh r0, [r0, #6]
+	bl sub_08017610
+_08013422:
+	adds r1, r0, #0
+	adds r0, r4, #0
+	bl CopyString
+	b _0801345A
+	.align 2, 0
+_0801342C: .4byte 0x0203A858
+_08013430:
+	movs r0, #0x80
+	strb r0, [r4]
+_08013434:
+	adds r4, #1
+	ldrb r0, [r5]
+	strb r0, [r4]
+_0801343A:
+	adds r5, #1
+	adds r4, #1
+	b _0801346C
+_08013440:
+	ldr r0, _08013480 @ =gPlaySt
+	adds r0, #0x1c
+	adds r0, r1, r0
+	ldrb r0, [r0]
+	bl sub_08019120
+	ldrh r0, [r0]
+	bl sub_08013318
+	adds r1, r0, #0
+	adds r0, r4, #0
+	bl CopyString
+_0801345A:
+	ldrb r0, [r4]
+	adds r1, r5, #1
+	cmp r0, #0
+	beq _0801346A
+_08013462:
+	adds r4, #1
+	ldrb r0, [r4]
+	cmp r0, #0
+	bne _08013462
+_0801346A:
+	adds r5, r1, #0
+_0801346C:
+	ldrb r1, [r5]
+	cmp r1, #0
+	bne _08013394
+	movs r0, #0
+	strb r0, [r4]
+	ldr r0, _08013484 @ =0x0202ADB0
+	pop {r4, r5}
+	pop {r1}
+	bx r1
+	.align 2, 0
+_08013480: .4byte gPlaySt
+_08013484: .4byte 0x0202ADB0
+
+	thumb_func_start sub_08013488
+sub_08013488: @ 0x08013488
+	push {r4, r5, lr}
+	ldr r5, _080134A0 @ =0x0202B3B0
+	movs r0, #0x80
+	lsls r0, r0, #1
+	adds r4, r5, r0
+	ldr r0, _080134A4 @ =0xFFFFF200
+	adds r1, r5, r0
+	adds r0, r5, #0
+	bl CopyString
+	b _080134F0
+	.align 2, 0
+_080134A0: .4byte 0x0202B3B0
+_080134A4: .4byte 0xFFFFF200
+_080134A8:
+	adds r0, r1, #0
+	cmp r0, #0x1f
+	bhi _080134B2
+	strb r1, [r4]
+	b _080134CC
+_080134B2:
+	cmp r0, #0x80
+	beq _080134BC
+	strb r1, [r4]
+	adds r5, #1
+	b _080134C6
+_080134BC:
+	adds r5, #1
+	ldrb r1, [r5]
+	cmp r1, #0x20
+	beq _080134D2
+	strb r0, [r4]
+_080134C6:
+	adds r4, #1
+	ldrb r0, [r5]
+	strb r0, [r4]
+_080134CC:
+	adds r5, #1
+	adds r4, #1
+	b _080134F0
+_080134D2:
+	bl sub_0802EBB0
+	adds r1, r0, #0
+	adds r0, r4, #0
+	bl CopyString
+	ldrb r0, [r4]
+	adds r1, r5, #1
+	cmp r0, #0
+	beq _080134EE
+_080134E6:
+	adds r4, #1
+	ldrb r0, [r4]
+	cmp r0, #0
+	bne _080134E6
+_080134EE:
+	adds r5, r1, #0
+_080134F0:
+	ldrb r1, [r5]
+	cmp r1, #0
+	bne _080134A8
+	movs r0, #0
+	strb r0, [r4]
+	ldr r0, _08013504 @ =0x0202B4B0
+	pop {r4, r5}
+	pop {r1}
+	bx r1
+	.align 2, 0
+_08013504: .4byte 0x0202B4B0
diff --git a/asm/item.s b/asm/item.s
new file mode 100644
index 0000000..ebc6a7f
--- /dev/null
+++ b/asm/item.s
@@ -0,0 +1,2775 @@
+	.include "macro.inc"
+
+	.syntax unified
+
+	thumb_func_start sub_08016470
+sub_08016470: @ 0x08016470
+	push {r4, r5, r6, r7, lr}
+	adds r4, r0, #0
+	adds r5, r1, #0
+	adds r6, r2, #0
+	adds r7, r3, #0
+	cmp r4, #0
+	beq _0801648C
+	ldr r0, _08016488 @ =0x08C0212C
+	adds r1, r4, #0
+	bl sub_080043D4
+	b _08016494
+	.align 2, 0
+_08016488: .4byte 0x08C0212C
+_0801648C:
+	ldr r0, _080164B4 @ =0x08C0212C
+	movs r1, #3
+	bl Proc_Start
+_08016494:
+	adds r3, r0, #0
+	ldr r1, _080164B8 @ =0x0202BBB4
+	ldrh r0, [r1, #0xc]
+	movs r2, #0
+	strh r0, [r3, #0x30]
+	ldrh r0, [r1, #0xe]
+	strh r0, [r3, #0x32]
+	lsls r0, r5, #4
+	strh r0, [r3, #0x2c]
+	lsls r0, r6, #4
+	strh r0, [r3, #0x2e]
+	strh r7, [r3, #0x3a]
+	str r2, [r3, #0x3c]
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080164B4: .4byte 0x08C0212C
+_080164B8: .4byte 0x0202BBB4
+
+	thumb_func_start GetItemHpBonus
+GetItemHpBonus: @ 0x080164BC
+	adds r1, r0, #0
+	cmp r1, #0
+	beq _080164D6
+	movs r0, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _080164DC @ =0x08C51538
+	adds r1, r1, r0
+	ldr r0, [r1, #0xc]
+	cmp r0, #0
+	bne _080164E0
+_080164D6:
+	movs r0, #0
+	b _080164E6
+	.align 2, 0
+_080164DC: .4byte 0x08C51538
+_080164E0:
+	ldrb r0, [r0]
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+_080164E6:
+	bx lr
+
+	thumb_func_start sub_080164E8
+sub_080164E8: @ 0x080164E8
+	adds r1, r0, #0
+	cmp r1, #0
+	beq _08016502
+	movs r0, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08016508 @ =0x08C51538
+	adds r1, r1, r0
+	ldr r0, [r1, #0xc]
+	cmp r0, #0
+	bne _0801650C
+_08016502:
+	movs r0, #0
+	b _08016512
+	.align 2, 0
+_08016508: .4byte 0x08C51538
+_0801650C:
+	ldrb r0, [r0, #1]
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+_08016512:
+	bx lr
+
+	thumb_func_start sub_08016514
+sub_08016514: @ 0x08016514
+	adds r1, r0, #0
+	cmp r1, #0
+	beq _0801652E
+	movs r0, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08016534 @ =0x08C51538
+	adds r1, r1, r0
+	ldr r0, [r1, #0xc]
+	cmp r0, #0
+	bne _08016538
+_0801652E:
+	movs r0, #0
+	b _0801653E
+	.align 2, 0
+_08016534: .4byte 0x08C51538
+_08016538:
+	ldrb r0, [r0, #2]
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+_0801653E:
+	bx lr
+
+	thumb_func_start sub_08016540
+sub_08016540: @ 0x08016540
+	adds r1, r0, #0
+	cmp r1, #0
+	beq _0801655A
+	movs r0, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08016560 @ =0x08C51538
+	adds r1, r1, r0
+	ldr r0, [r1, #0xc]
+	cmp r0, #0
+	bne _08016564
+_0801655A:
+	movs r0, #0
+	b _0801656A
+	.align 2, 0
+_08016560: .4byte 0x08C51538
+_08016564:
+	ldrb r0, [r0, #3]
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+_0801656A:
+	bx lr
+
+	thumb_func_start sub_0801656C
+sub_0801656C: @ 0x0801656C
+	adds r1, r0, #0
+	cmp r1, #0
+	beq _08016586
+	movs r0, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _0801658C @ =0x08C51538
+	adds r1, r1, r0
+	ldr r0, [r1, #0xc]
+	cmp r0, #0
+	bne _08016590
+_08016586:
+	movs r0, #0
+	b _08016596
+	.align 2, 0
+_0801658C: .4byte 0x08C51538
+_08016590:
+	ldrb r0, [r0, #4]
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+_08016596:
+	bx lr
+
+	thumb_func_start sub_08016598
+sub_08016598: @ 0x08016598
+	adds r1, r0, #0
+	cmp r1, #0
+	beq _080165B2
+	movs r0, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _080165B8 @ =0x08C51538
+	adds r1, r1, r0
+	ldr r0, [r1, #0xc]
+	cmp r0, #0
+	bne _080165BC
+_080165B2:
+	movs r0, #0
+	b _080165C2
+	.align 2, 0
+_080165B8: .4byte 0x08C51538
+_080165BC:
+	ldrb r0, [r0, #5]
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+_080165C2:
+	bx lr
+
+	thumb_func_start sub_080165C4
+sub_080165C4: @ 0x080165C4
+	adds r1, r0, #0
+	cmp r1, #0
+	beq _080165DE
+	movs r0, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _080165E4 @ =0x08C51538
+	adds r1, r1, r0
+	ldr r0, [r1, #0xc]
+	cmp r0, #0
+	bne _080165E8
+_080165DE:
+	movs r0, #0
+	b _080165EE
+	.align 2, 0
+_080165E4: .4byte 0x08C51538
+_080165E8:
+	ldrb r0, [r0, #6]
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+_080165EE:
+	bx lr
+
+	thumb_func_start MakeNewItem
+MakeNewItem: @ 0x080165F0
+	adds r2, r0, #0
+	movs r0, #0xff
+	ands r2, r0
+	lsls r0, r2, #3
+	adds r0, r0, r2
+	lsls r0, r0, #2
+	ldr r1, _0801661C @ =0x08C51538
+	adds r3, r0, r1
+	ldr r1, [r3, #8]
+	movs r0, #8
+	ands r1, r0
+	movs r0, #0xff
+	cmp r1, #0
+	bne _0801660E
+	ldrb r0, [r3, #0x14]
+_0801660E:
+	cmp r1, #0
+	beq _08016614
+	movs r0, #0
+_08016614:
+	lsls r0, r0, #8
+	adds r0, r0, r2
+	bx lr
+	.align 2, 0
+_0801661C: .4byte 0x08C51538
+
+	thumb_func_start sub_08016620
+sub_08016620: @ 0x08016620
+	push {r4, r5, lr}
+	adds r4, r0, #0
+	adds r5, r1, #0
+	cmp r5, #0
+	bne _0801662C
+	b _080167C2
+_0801662C:
+	movs r1, #0xff
+	ands r1, r5
+	lsls r0, r1, #3
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	ldr r1, _0801677C @ =0x08C51538
+	adds r0, r0, r1
+	ldr r2, [r0, #8]
+	movs r0, #1
+	ands r0, r2
+	adds r3, r1, #0
+	cmp r0, #0
+	bne _08016648
+	b _080167C2
+_08016648:
+	ldr r0, _08016780 @ =0x003D3C00
+	ands r0, r2
+	cmp r0, #0
+	bne _08016652
+	b _0801679C
+_08016652:
+	movs r0, #0x80
+	lsls r0, r0, #4
+	ands r2, r0
+	cmp r2, #0
+	beq _08016672
+	ldr r0, [r4]
+	ldr r1, [r4, #4]
+	ldr r0, [r0, #0x28]
+	ldr r1, [r1, #0x28]
+	orrs r0, r1
+	movs r1, #0x80
+	lsls r1, r1, #9
+	ands r0, r1
+	cmp r0, #0
+	bne _08016672
+	b _080167C2
+_08016672:
+	movs r1, #0xff
+	ands r1, r5
+	lsls r0, r1, #3
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	adds r0, r0, r3
+	ldr r0, [r0, #8]
+	movs r1, #0x80
+	lsls r1, r1, #0xb
+	ands r0, r1
+	cmp r0, #0
+	beq _080166A0
+	ldr r0, [r4]
+	ldr r1, [r4, #4]
+	ldr r0, [r0, #0x28]
+	ldr r1, [r1, #0x28]
+	orrs r0, r1
+	movs r1, #0x80
+	lsls r1, r1, #0x15
+	ands r0, r1
+	cmp r0, #0
+	bne _080166A0
+	b _080167C2
+_080166A0:
+	movs r1, #0xff
+	ands r1, r5
+	lsls r0, r1, #3
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	adds r0, r0, r3
+	ldr r0, [r0, #8]
+	movs r1, #0x80
+	lsls r1, r1, #0xc
+	ands r0, r1
+	cmp r0, #0
+	beq _080166CC
+	ldr r0, [r4]
+	ldr r1, [r4, #4]
+	ldr r0, [r0, #0x28]
+	ldr r1, [r1, #0x28]
+	orrs r0, r1
+	movs r1, #0x80
+	lsls r1, r1, #0x16
+	ands r0, r1
+	cmp r0, #0
+	beq _080167C2
+_080166CC:
+	movs r1, #0xff
+	ands r1, r5
+	lsls r0, r1, #3
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	adds r0, r0, r3
+	ldr r0, [r0, #8]
+	movs r1, #0x80
+	lsls r1, r1, #0xd
+	ands r0, r1
+	cmp r0, #0
+	beq _080166F8
+	ldr r0, [r4]
+	ldr r1, [r4, #4]
+	ldr r0, [r0, #0x28]
+	ldr r1, [r1, #0x28]
+	orrs r0, r1
+	movs r1, #0x80
+	lsls r1, r1, #0x17
+	ands r0, r1
+	cmp r0, #0
+	beq _080167C2
+_080166F8:
+	movs r1, #0xff
+	ands r1, r5
+	lsls r0, r1, #3
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	adds r0, r0, r3
+	ldr r0, [r0, #8]
+	movs r1, #0x80
+	lsls r1, r1, #0xe
+	ands r0, r1
+	cmp r0, #0
+	beq _0801671E
+	ldr r0, [r4]
+	ldr r1, [r4, #4]
+	ldr r0, [r0, #0x28]
+	ldr r1, [r1, #0x28]
+	orrs r0, r1
+	cmp r0, #0
+	bge _080167C2
+_0801671E:
+	movs r1, #0xff
+	ands r1, r5
+	lsls r0, r1, #3
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	adds r0, r0, r3
+	ldr r0, [r0, #8]
+	movs r1, #0x80
+	lsls r1, r1, #5
+	ands r0, r1
+	cmp r0, #0
+	beq _0801674A
+	ldr r0, [r4]
+	ldr r1, [r4, #4]
+	ldr r0, [r0, #0x28]
+	ldr r1, [r1, #0x28]
+	orrs r0, r1
+	movs r1, #0x80
+	lsls r1, r1, #0xa
+	ands r0, r1
+	cmp r0, #0
+	beq _080167C2
+_0801674A:
+	movs r0, #0xff
+	ands r0, r5
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	adds r1, r1, r3
+	ldr r1, [r1, #8]
+	movs r0, #0x80
+	lsls r0, r0, #3
+	ands r0, r1
+	cmp r0, #0
+	beq _08016784
+	ldr r0, [r4]
+	ldr r1, [r4, #4]
+	ldr r0, [r0, #0x28]
+	ldr r1, [r1, #0x28]
+	orrs r0, r1
+	movs r1, #0x80
+	lsls r1, r1, #0xb
+	ands r0, r1
+	cmp r0, #0
+	beq _080167C2
+	movs r0, #1
+	b _080167F4
+	.align 2, 0
+_0801677C: .4byte 0x08C51538
+_08016780: .4byte 0x003D3C00
+_08016784:
+	movs r0, #0x80
+	lsls r0, r0, #9
+	ands r1, r0
+	cmp r1, #0
+	beq _0801679C
+	adds r0, r4, #0
+	adds r1, r5, #0
+	bl sub_080175CC
+	lsls r0, r0, #0x18
+	cmp r0, #0
+	beq _080167C2
+_0801679C:
+	adds r1, r4, #0
+	adds r1, #0x30
+	movs r0, #0xf
+	ldrb r1, [r1]
+	ands r0, r1
+	ldr r3, _080167C8 @ =0x08C51538
+	cmp r0, #3
+	bne _080167CC
+	movs r1, #0xff
+	ands r1, r5
+	lsls r0, r1, #3
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	adds r0, r0, r3
+	ldr r0, [r0, #8]
+	movs r1, #2
+	ands r0, r1
+	cmp r0, #0
+	beq _080167CC
+_080167C2:
+	movs r0, #0
+	b _080167F4
+	.align 2, 0
+_080167C8: .4byte 0x08C51538
+_080167CC:
+	movs r1, #0xff
+	ands r1, r5
+	lsls r0, r1, #3
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	adds r0, r0, r3
+	ldrb r2, [r0, #0x1c]
+	movs r1, #0xff
+	cmp r5, #0
+	beq _080167E2
+	ldrb r1, [r0, #7]
+_080167E2:
+	adds r0, r4, #0
+	adds r0, #0x28
+	adds r0, r0, r1
+	movs r1, #0
+	ldrb r0, [r0]
+	cmp r0, r2
+	blt _080167F2
+	movs r1, #1
+_080167F2:
+	adds r0, r1, #0
+_080167F4:
+	pop {r4, r5}
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_080167FC
+sub_080167FC: @ 0x080167FC
+	push {r4, r5, lr}
+	adds r5, r0, #0
+	adds r4, r1, #0
+	cmp r4, #0
+	beq _08016832
+	movs r1, #0xff
+	ands r1, r4
+	lsls r0, r1, #3
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	ldr r1, _08016838 @ =0x08C51538
+	adds r0, r0, r1
+	ldr r1, [r0, #8]
+	movs r0, #1
+	ands r0, r1
+	cmp r0, #0
+	beq _08016832
+	movs r0, #2
+	ands r1, r0
+	cmp r1, #0
+	beq _0801683C
+	adds r0, r5, #0
+	bl IsUnitMagicSealed
+	lsls r0, r0, #0x18
+	cmp r0, #0
+	beq _0801683C
+_08016832:
+	movs r0, #0
+	b _08016848
+	.align 2, 0
+_08016838: .4byte 0x08C51538
+_0801683C:
+	adds r0, r5, #0
+	adds r1, r4, #0
+	bl sub_08016620
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+_08016848:
+	pop {r4, r5}
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_08016850
+sub_08016850: @ 0x08016850
+	adds r3, r0, #0
+	cmp r1, #0
+	beq _08016884
+	movs r0, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08016888 @ =0x08C51538
+	adds r2, r1, r0
+	ldr r0, [r2, #8]
+	movs r1, #4
+	ands r0, r1
+	cmp r0, #0
+	beq _08016884
+	adds r0, r3, #0
+	adds r0, #0x30
+	movs r1, #0xf
+	ldrb r0, [r0]
+	ands r1, r0
+	cmp r1, #2
+	beq _08016884
+	cmp r1, #4
+	beq _08016884
+	cmp r1, #3
+	bne _0801688C
+_08016884:
+	movs r0, #0
+	b _080168A2
+	.align 2, 0
+_08016888: .4byte 0x08C51538
+_0801688C:
+	adds r0, r3, #0
+	adds r0, #0x28
+	ldrb r1, [r2, #7]
+	adds r0, r1, r0
+	movs r1, #0
+	ldrb r0, [r0]
+	ldrb r2, [r2, #0x1c]
+	cmp r0, r2
+	blt _080168A0
+	movs r1, #1
+_080168A0:
+	adds r0, r1, #0
+_080168A2:
+	bx lr
+
+	thumb_func_start sub_080168A4
+sub_080168A4: @ 0x080168A4
+	push {r4, r5, lr}
+	adds r5, r0, #0
+	adds r4, r1, #0
+	cmp r4, #0
+	beq _080168E4
+	movs r1, #0xff
+	ands r1, r4
+	lsls r0, r1, #3
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	ldr r1, _080168E0 @ =0x08C51538
+	adds r0, r0, r1
+	ldr r0, [r0, #8]
+	movs r1, #4
+	ands r0, r1
+	cmp r0, #0
+	beq _080168E4
+	adds r0, r5, #0
+	bl IsUnitMagicSealed
+	lsls r0, r0, #0x18
+	cmp r0, #0
+	bne _080168E4
+	adds r0, r5, #0
+	adds r1, r4, #0
+	bl sub_08016850
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+	b _080168E6
+	.align 2, 0
+_080168E0: .4byte 0x08C51538
+_080168E4:
+	movs r0, #0
+_080168E6:
+	pop {r4, r5}
+	pop {r1}
+	bx r1
+
+	thumb_func_start sub_080168EC
+sub_080168EC: @ 0x080168EC
+	push {r4, r5, r6, r7, lr}
+	mov r7, r8
+	push {r7}
+	adds r5, r0, #0
+	adds r6, r1, #0
+	adds r7, r3, #0
+	movs r3, #0
+	lsls r2, r2, #0x18
+	asrs r2, r2, #0x18
+	mov r8, r2
+	cmp r2, #0
+	bne _08016906
+	movs r3, #1
+_08016906:
+	adds r0, r5, #0
+	movs r1, #0
+	adds r2, r3, #0
+	bl sub_08005458
+	movs r0, #0xff
+	ands r0, r6
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08016968 @ =0x08C51538
+	adds r4, r1, r0
+	ldrh r0, [r4]
+	bl sub_08013318
+	bl sub_08013488
+	adds r1, r0, #0
+	adds r0, r5, #0
+	bl sub_080055DC
+	adds r1, r7, #4
+	adds r0, r5, #0
+	bl sub_08005460
+	adds r3, r7, #0
+	adds r3, #0x16
+	movs r5, #1
+	mov r0, r8
+	cmp r0, #0
+	beq _08016946
+	movs r5, #2
+_08016946:
+	ldr r0, [r4, #8]
+	movs r1, #8
+	ands r0, r1
+	asrs r2, r6, #8
+	cmp r0, #0
+	beq _08016954
+	movs r2, #0xff
+_08016954:
+	adds r0, r3, #0
+	adds r1, r5, #0
+	bl sub_08006074
+	cmp r6, #0
+	bne _0801696C
+	movs r1, #1
+	rsbs r1, r1, #0
+	b _0801696E
+	.align 2, 0
+_08016968: .4byte 0x08C51538
+_0801696C:
+	ldrb r1, [r4, #0x1d]
+_0801696E:
+	movs r2, #0x80
+	lsls r2, r2, #7
+	adds r0, r7, #0
+	bl sub_08004D04
+	pop {r3}
+	mov r8, r3
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08016984
+sub_08016984: @ 0x08016984
+	push {r4, r5, r6, r7, lr}
+	mov r7, r8
+	push {r7}
+	adds r4, r0, #0
+	mov r8, r1
+	adds r7, r3, #0
+	movs r3, #0
+	lsls r2, r2, #0x18
+	asrs r6, r2, #0x18
+	cmp r6, #0
+	bne _0801699C
+	movs r3, #1
+_0801699C:
+	adds r0, r4, #0
+	movs r1, #0
+	adds r2, r3, #0
+	bl sub_08005458
+	movs r0, #0xff
+	mov r1, r8
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08016A30 @ =0x08C51538
+	adds r5, r1, r0
+	ldrh r0, [r5]
+	bl sub_08013318
+	bl sub_08013488
+	adds r1, r0, #0
+	adds r0, r4, #0
+	bl sub_080055DC
+	adds r1, r7, #4
+	adds r0, r4, #0
+	bl sub_08005460
+	movs r3, #0x14
+	adds r3, r3, r7
+	mov ip, r3
+	movs r1, #1
+	cmp r6, #0
+	beq _080169DE
+	movs r1, #2
+_080169DE:
+	ldr r0, [r5, #8]
+	movs r4, #8
+	ands r0, r4
+	mov r3, r8
+	asrs r2, r3, #8
+	cmp r0, #0
+	beq _080169EE
+	movs r2, #0xff
+_080169EE:
+	mov r0, ip
+	bl sub_08006074
+	adds r3, r7, #0
+	adds r3, #0x1a
+	movs r1, #1
+	cmp r6, #0
+	beq _08016A00
+	movs r1, #2
+_08016A00:
+	ldr r0, [r5, #8]
+	ands r0, r4
+	movs r2, #0xff
+	cmp r0, #0
+	bne _08016A0C
+	ldrb r2, [r5, #0x14]
+_08016A0C:
+	adds r0, r3, #0
+	bl sub_08006074
+	adds r0, r7, #0
+	adds r0, #0x16
+	movs r1, #0
+	cmp r6, #0
+	bne _08016A1E
+	movs r1, #1
+_08016A1E:
+	movs r2, #0x16
+	bl sub_08005FEC
+	mov r0, r8
+	cmp r0, #0
+	bne _08016A34
+	movs r1, #1
+	rsbs r1, r1, #0
+	b _08016A36
+	.align 2, 0
+_08016A30: .4byte 0x08C51538
+_08016A34:
+	ldrb r1, [r5, #0x1d]
+_08016A36:
+	movs r2, #0x80
+	lsls r2, r2, #7
+	adds r0, r7, #0
+	bl sub_08004D04
+	pop {r3}
+	mov r8, r3
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08016A4C
+sub_08016A4C: @ 0x08016A4C
+	push {r4, r5, r6, r7, lr}
+	mov r7, r8
+	push {r7}
+	adds r4, r0, #0
+	adds r6, r1, #0
+	adds r7, r2, #0
+	movs r1, #0
+	bl sub_08005444
+	movs r0, #0xff
+	ands r0, r6
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08016AB4 @ =0x08C51538
+	adds r5, r1, r0
+	ldrh r0, [r5]
+	bl sub_08013318
+	bl sub_08013488
+	adds r1, r0, #0
+	adds r0, r4, #0
+	bl sub_080055DC
+	adds r1, r7, #4
+	adds r0, r4, #0
+	bl sub_08005460
+	movs r0, #0x16
+	adds r0, r0, r7
+	mov r8, r0
+	adds r0, r4, #0
+	bl sub_08005454
+	adds r3, r0, #0
+	ldr r0, [r5, #8]
+	movs r1, #8
+	ands r0, r1
+	asrs r2, r6, #8
+	cmp r0, #0
+	beq _08016AA2
+	movs r2, #0xff
+_08016AA2:
+	mov r0, r8
+	adds r1, r3, #0
+	bl sub_08006074
+	cmp r6, #0
+	bne _08016AB8
+	movs r1, #1
+	rsbs r1, r1, #0
+	b _08016ABA
+	.align 2, 0
+_08016AB4: .4byte 0x08C51538
+_08016AB8:
+	ldrb r1, [r5, #0x1d]
+_08016ABA:
+	movs r2, #0x80
+	lsls r2, r2, #7
+	adds r0, r7, #0
+	bl sub_08004D04
+	pop {r3}
+	mov r8, r3
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08016AD0
+sub_08016AD0: @ 0x08016AD0
+	push {r4, r5, r6, r7, lr}
+	mov r7, sb
+	mov r6, r8
+	push {r6, r7}
+	mov r8, r0
+	mov sb, r1
+	adds r5, r2, #0
+	adds r7, r3, #0
+	bl sub_080053B0
+	adds r4, r5, #0
+	mov r0, r8
+	adds r1, r4, #0
+	bl sub_08005450
+	movs r0, #0xff
+	mov r1, sb
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08016B74 @ =0x08C51538
+	adds r6, r1, r0
+	ldrh r0, [r6]
+	bl sub_08013318
+	bl sub_08013488
+	adds r1, r0, #0
+	mov r0, r8
+	bl sub_080055DC
+	movs r4, #0
+	cmp r5, #1
+	bne _08016B18
+	movs r4, #1
+_08016B18:
+	adds r0, r7, #0
+	adds r0, #0x18
+	adds r1, r4, #0
+	movs r2, #0x16
+	bl sub_08005FEC
+	movs r4, #1
+	cmp r5, #1
+	beq _08016B2C
+	movs r4, #2
+_08016B2C:
+	adds r1, r7, #0
+	adds r1, #0x16
+	ldr r0, [r6, #8]
+	movs r5, #8
+	ands r0, r5
+	mov r3, sb
+	asrs r2, r3, #8
+	cmp r0, #0
+	beq _08016B40
+	movs r2, #0xff
+_08016B40:
+	adds r0, r1, #0
+	adds r1, r4, #0
+	bl sub_08006074
+	adds r1, r7, #0
+	adds r1, #0x1c
+	ldr r0, [r6, #8]
+	ands r0, r5
+	movs r2, #0xff
+	cmp r0, #0
+	bne _08016B58
+	ldrb r2, [r6, #0x14]
+_08016B58:
+	adds r0, r1, #0
+	adds r1, r4, #0
+	bl sub_08006074
+	adds r1, r7, #4
+	mov r0, r8
+	bl sub_08005460
+	mov r0, sb
+	cmp r0, #0
+	bne _08016B78
+	movs r1, #1
+	rsbs r1, r1, #0
+	b _08016B7A
+	.align 2, 0
+_08016B74: .4byte 0x08C51538
+_08016B78:
+	ldrb r1, [r6, #0x1d]
+_08016B7A:
+	movs r2, #0x80
+	lsls r2, r2, #7
+	adds r0, r7, #0
+	bl sub_08004D04
+	pop {r3, r4}
+	mov r8, r3
+	mov sb, r4
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08016B90
+sub_08016B90: @ 0x08016B90
+	adds r2, r0, #0
+	movs r1, #0xff
+	ands r1, r2
+	lsls r0, r1, #3
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	ldr r1, _08016BB8 @ =0x08C51538
+	adds r0, r0, r1
+	ldr r0, [r0, #8]
+	movs r1, #8
+	ands r0, r1
+	cmp r0, #0
+	bne _08016BB2
+	ldr r0, _08016BBC @ =0xFFFFFF00
+	adds r2, r2, r0
+	cmp r2, #0xff
+	ble _08016BC0
+_08016BB2:
+	lsls r0, r2, #0x10
+	lsrs r0, r0, #0x10
+	b _08016BC2
+	.align 2, 0
+_08016BB8: .4byte 0x08C51538
+_08016BBC: .4byte 0xFFFFFF00
+_08016BC0:
+	movs r0, #0
+_08016BC2:
+	bx lr
+
+	thumb_func_start GetUnitEquippedWeapon
+GetUnitEquippedWeapon: @ 0x08016BC4
+	push {r4, r5, r6, lr}
+	adds r6, r0, #0
+	movs r5, #0
+_08016BCA:
+	lsls r1, r5, #1
+	adds r0, r6, #0
+	adds r0, #0x1e
+	adds r4, r0, r1
+	ldrh r1, [r4]
+	adds r0, r6, #0
+	bl sub_08016620
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+	cmp r0, #1
+	bne _08016BE6
+	ldrh r0, [r4]
+	b _08016BEE
+_08016BE6:
+	adds r5, #1
+	cmp r5, #4
+	ble _08016BCA
+	movs r0, #0
+_08016BEE:
+	pop {r4, r5, r6}
+	pop {r1}
+	bx r1
+
+	thumb_func_start GetUnitEquippedWeaponSlot
+GetUnitEquippedWeaponSlot: @ 0x08016BF4
+	push {r4, r5, lr}
+	adds r5, r0, #0
+	movs r4, #0
+_08016BFA:
+	lsls r1, r4, #1
+	adds r0, r5, #0
+	adds r0, #0x1e
+	adds r0, r0, r1
+	ldrh r1, [r0]
+	adds r0, r5, #0
+	bl sub_080167FC
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+	cmp r0, #1
+	bne _08016C16
+	adds r0, r4, #0
+	b _08016C20
+_08016C16:
+	adds r4, #1
+	cmp r4, #4
+	ble _08016BFA
+	movs r0, #1
+	rsbs r0, r0, #0
+_08016C20:
+	pop {r4, r5}
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_08016C28
+sub_08016C28: @ 0x08016C28
+	adds r3, r1, #0
+	movs r1, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08016C4C @ =0x08C51538
+	adds r1, r1, r0
+	ldrb r0, [r1, #0x19]
+	lsrs r1, r0, #4
+	movs r2, #0xf
+	ands r2, r0
+	cmp r1, r3
+	bgt _08016C50
+	cmp r3, r2
+	bgt _08016C50
+	movs r0, #1
+	b _08016C52
+	.align 2, 0
+_08016C4C: .4byte 0x08C51538
+_08016C50:
+	movs r0, #0
+_08016C52:
+	bx lr
+
+	thumb_func_start sub_08016C54
+sub_08016C54: @ 0x08016C54
+	push {r4, r5, lr}
+	adds r3, r0, #0
+	lsls r4, r1, #1
+	adds r0, #0x1e
+	adds r0, r0, r4
+	ldrh r5, [r0]
+	adds r2, r1, #0
+	cmp r2, #0
+	beq _08016C78
+	adds r0, r4, #0
+	adds r0, #0x1c
+	adds r1, r0, r3
+_08016C6C:
+	ldrh r0, [r1]
+	strh r0, [r1, #2]
+	subs r1, #2
+	subs r2, #1
+	cmp r2, #0
+	bne _08016C6C
+_08016C78:
+	strh r5, [r3, #0x1e]
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08016C80
+sub_08016C80: @ 0x08016C80
+	push {r4, r5, r6, r7, lr}
+	adds r7, r1, #0
+	lsls r0, r0, #0x10
+	lsrs r4, r0, #0x10
+	ldr r0, [r7, #4]
+	ldrb r3, [r0, #4]
+	movs r1, #0xff
+	ands r1, r4
+	lsls r0, r1, #3
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	ldr r1, _08016CA4 @ =0x08C51538
+	adds r0, r0, r1
+	ldr r2, [r0, #0x10]
+	adds r5, r1, #0
+	cmp r2, #0
+	beq _08016D04
+	b _08016CB0
+	.align 2, 0
+_08016CA4: .4byte 0x08C51538
+_08016CA8:
+	ldrb r0, [r2]
+	cmp r0, r3
+	beq _08016CB8
+	adds r2, #1
+_08016CB0:
+	ldrb r0, [r2]
+	cmp r0, #0
+	bne _08016CA8
+	b _08016D04
+_08016CB8:
+	movs r1, #0xff
+	ands r1, r4
+	lsls r0, r1, #3
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	adds r0, r0, r5
+	ldr r1, [r0, #0x10]
+	ldr r0, _08016D00 @ =0x08D5FB8A
+	cmp r1, r0
+	bne _08016CFA
+	movs r3, #0
+	movs r6, #0xff
+	adds r2, r7, #0
+	adds r2, #0x1e
+	movs r4, #4
+_08016CD6:
+	adds r0, r6, #0
+	ldrh r1, [r2]
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	adds r1, r1, r5
+	ldr r0, [r1, #8]
+	orrs r3, r0
+	adds r2, #2
+	subs r4, #1
+	cmp r4, #0
+	bge _08016CD6
+	movs r0, #0x80
+	lsls r0, r0, #7
+	ands r3, r0
+	cmp r3, #0
+	bne _08016D04
+_08016CFA:
+	movs r0, #1
+	b _08016D06
+	.align 2, 0
+_08016D00: .4byte 0x08D5FB8A
+_08016D04:
+	movs r0, #0
+_08016D06:
+	pop {r4, r5, r6, r7}
+	pop {r1}
+	bx r1
+
+	thumb_func_start sub_08016D0C
+sub_08016D0C: @ 0x08016D0C
+	push {r4, r5, lr}
+	sub sp, #0x28
+	mov r2, sp
+	ldr r1, _08016D4C @ =0x081C9108
+	ldm r1!, {r3, r4, r5}
+	stm r2!, {r3, r4, r5}
+	ldm r1!, {r3, r4, r5}
+	stm r2!, {r3, r4, r5}
+	ldm r1!, {r3, r4, r5}
+	stm r2!, {r3, r4, r5}
+	ldr r1, [r1]
+	str r1, [r2]
+	movs r1, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08016D50 @ =0x08C51538
+	adds r1, r1, r0
+	ldrb r0, [r1, #0x19]
+	adds r1, r0, #0
+	cmp r0, #0x22
+	beq _08016D86
+	cmp r0, #0x22
+	bgt _08016D5E
+	cmp r0, #0x11
+	beq _08016D7A
+	cmp r0, #0x11
+	bgt _08016D54
+	cmp r0, #0x10
+	beq _08016D76
+	b _08016D9A
+	.align 2, 0
+_08016D4C: .4byte 0x081C9108
+_08016D50: .4byte 0x08C51538
+_08016D54:
+	cmp r0, #0x12
+	beq _08016D7E
+	cmp r0, #0x13
+	beq _08016D82
+	b _08016D9A
+_08016D5E:
+	cmp r0, #0x3a
+	beq _08016D8E
+	cmp r0, #0x3a
+	bgt _08016D6C
+	cmp r0, #0x23
+	beq _08016D8A
+	b _08016D9A
+_08016D6C:
+	cmp r1, #0x3f
+	beq _08016D92
+	cmp r1, #0xff
+	beq _08016D96
+	b _08016D9A
+_08016D76:
+	ldr r0, [sp]
+	b _08016D9C
+_08016D7A:
+	ldr r0, [sp, #4]
+	b _08016D9C
+_08016D7E:
+	ldr r0, [sp, #8]
+	b _08016D9C
+_08016D82:
+	ldr r0, [sp, #0xc]
+	b _08016D9C
+_08016D86:
+	ldr r0, [sp, #0x10]
+	b _08016D9C
+_08016D8A:
+	ldr r0, [sp, #0x14]
+	b _08016D9C
+_08016D8E:
+	ldr r0, [sp, #0x18]
+	b _08016D9C
+_08016D92:
+	ldr r0, [sp, #0x1c]
+	b _08016D9C
+_08016D96:
+	ldr r0, [sp, #0x20]
+	b _08016D9C
+_08016D9A:
+	ldr r0, [sp, #0x24]
+_08016D9C:
+	add sp, #0x28
+	pop {r4, r5}
+	pop {r1}
+	bx r1
+
+	thumb_func_start sub_08016DA4
+sub_08016DA4: @ 0x08016DA4
+	cmp r0, #0
+	bgt _08016DAC
+	movs r0, #0
+	b _08016DD6
+_08016DAC:
+	cmp r0, #0x1e
+	bgt _08016DB4
+	movs r0, #1
+	b _08016DD6
+_08016DB4:
+	cmp r0, #0x46
+	bgt _08016DBC
+	movs r0, #2
+	b _08016DD6
+_08016DBC:
+	cmp r0, #0x78
+	bgt _08016DC4
+	movs r0, #3
+	b _08016DD6
+_08016DC4:
+	cmp r0, #0xb4
+	bgt _08016DCC
+	movs r0, #4
+	b _08016DD6
+_08016DCC:
+	cmp r0, #0xfa
+	ble _08016DD4
+	movs r0, #6
+	b _08016DD6
+_08016DD4:
+	movs r0, #5
+_08016DD6:
+	bx lr
+
+	thumb_func_start sub_08016DD8
+sub_08016DD8: @ 0x08016DD8
+	push {r4, r5, lr}
+	sub sp, #0x20
+	mov r2, sp
+	ldr r1, _08016E14 @ =0x081C9150
+	ldm r1!, {r3, r4, r5}
+	stm r2!, {r3, r4, r5}
+	ldm r1!, {r3, r4, r5}
+	stm r2!, {r3, r4, r5}
+	ldm r1!, {r3, r4}
+	stm r2!, {r3, r4}
+	movs r1, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08016E18 @ =0x08C51538
+	adds r1, r1, r0
+	ldrb r4, [r1, #0x1c]
+	ldr r0, [r1, #8]
+	ldr r1, _08016E1C @ =0x003D3C00
+	ands r0, r1
+	cmp r0, #0
+	beq _08016E20
+	adds r0, r4, #0
+	bl sub_08016DA4
+	cmp r0, #0
+	bne _08016E20
+	movs r4, #7
+	b _08016E28
+	.align 2, 0
+_08016E14: .4byte 0x081C9150
+_08016E18: .4byte 0x08C51538
+_08016E1C: .4byte 0x003D3C00
+_08016E20:
+	adds r0, r4, #0
+	bl sub_08016DA4
+	adds r4, r0, #0
+_08016E28:
+	lsls r0, r4, #2
+	add r0, sp
+	ldr r0, [r0]
+	add sp, #0x20
+	pop {r4, r5}
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_08016E38
+sub_08016E38: @ 0x08016E38
+	push {r4, lr}
+	sub sp, #8
+	adds r4, r0, #0
+	ldr r1, _08016E5C @ =0x081C9170
+	mov r0, sp
+	movs r2, #7
+	bl memcpy
+	adds r0, r4, #0
+	bl sub_08016DA4
+	add r0, sp
+	ldrb r0, [r0]
+	add sp, #8
+	pop {r4}
+	pop {r1}
+	bx r1
+	.align 2, 0
+_08016E5C: .4byte 0x081C9170
+
+	thumb_func_start sub_08016E60
+sub_08016E60: @ 0x08016E60
+	push {r4, r5, lr}
+	sub sp, #0x2c
+	mov r2, sp
+	ldr r1, _08016E88 @ =0x081C91A4
+	ldm r1!, {r3, r4, r5}
+	stm r2!, {r3, r4, r5}
+	ldm r1!, {r3, r4, r5}
+	stm r2!, {r3, r4, r5}
+	ldm r1!, {r3, r4, r5}
+	stm r2!, {r3, r4, r5}
+	ldm r1!, {r3, r4}
+	stm r2!, {r3, r4}
+	lsls r0, r0, #2
+	add r0, sp
+	ldr r0, [r0]
+	add sp, #0x2c
+	pop {r4, r5}
+	pop {r1}
+	bx r1
+	.align 2, 0
+_08016E88: .4byte 0x081C91A4
+
+	thumb_func_start sub_08016E8C
+sub_08016E8C: @ 0x08016E8C
+	push {r4, r5, r6, lr}
+	adds r5, r0, #0
+	adds r4, r1, #0
+	adds r6, r2, #0
+	bl sub_08016DA4
+	cmp r0, #6
+	bhi _08016EFE
+	lsls r0, r0, #2
+	ldr r1, _08016EA8 @ =_08016EAC
+	adds r0, r0, r1
+	ldr r0, [r0]
+	mov pc, r0
+	.align 2, 0
+_08016EA8: .4byte _08016EAC
+_08016EAC: @ jump table
+	.4byte _08016EF8 @ case 0
+	.4byte _08016EC8 @ case 1
+	.4byte _08016ED0 @ case 2
+	.4byte _08016EDA @ case 3
+	.4byte _08016EE4 @ case 4
+	.4byte _08016EEE @ case 5
+	.4byte _08016EF8 @ case 6
+_08016EC8:
+	subs r0, r5, #1
+	str r0, [r4]
+	movs r0, #0x1e
+	b _08016EFC
+_08016ED0:
+	adds r0, r5, #0
+	subs r0, #0x1f
+	str r0, [r4]
+	movs r0, #0x28
+	b _08016EFC
+_08016EDA:
+	adds r0, r5, #0
+	subs r0, #0x47
+	str r0, [r4]
+	movs r0, #0x32
+	b _08016EFC
+_08016EE4:
+	adds r0, r5, #0
+	subs r0, #0x79
+	str r0, [r4]
+	movs r0, #0x3c
+	b _08016EFC
+_08016EEE:
+	adds r0, r5, #0
+	subs r0, #0xb5
+	str r0, [r4]
+	movs r0, #0x46
+	b _08016EFC
+_08016EF8:
+	movs r0, #0
+	str r0, [r4]
+_08016EFC:
+	str r0, [r6]
+_08016EFE:
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08016F04
+sub_08016F04: @ 0x08016F04
+	push {r4, r5, lr}
+	adds r3, r0, #0
+	adds r2, r1, #0
+	movs r5, #0xff
+	ands r5, r2
+	lsls r0, r5, #3
+	adds r0, r0, r5
+	lsls r0, r0, #2
+	ldr r1, _08016F2C @ =0x08C51538
+	adds r4, r0, r1
+	ldr r1, [r4, #8]
+	movs r0, #1
+	ands r0, r1
+	cmp r0, #0
+	beq _08016F30
+	adds r0, r3, #0
+	adds r1, r2, #0
+	bl sub_08016620
+	b _08016F40
+	.align 2, 0
+_08016F2C: .4byte 0x08C51538
+_08016F30:
+	movs r0, #4
+	ands r1, r0
+	cmp r1, #0
+	beq _08016F46
+	adds r0, r3, #0
+	adds r1, r2, #0
+	bl sub_08016850
+_08016F40:
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+	b _08016F7A
+_08016F46:
+	ldrb r0, [r4, #0x1e]
+	cmp r0, #0
+	beq _08016F78
+	adds r0, r3, #0
+	adds r0, #0x30
+	movs r1, #0xf
+	ldrb r0, [r0]
+	ands r1, r0
+	cmp r1, #2
+	beq _08016F74
+	cmp r1, #4
+	beq _08016F74
+	ldr r0, [r3]
+	ldr r1, [r3, #4]
+	ldr r0, [r0, #0x28]
+	ldr r1, [r1, #0x28]
+	orrs r0, r1
+	movs r1, #8
+	ands r0, r1
+	cmp r0, #0
+	bne _08016F78
+	cmp r5, #0x6a
+	bne _08016F78
+_08016F74:
+	movs r0, #0
+	b _08016F7A
+_08016F78:
+	movs r0, #1
+_08016F7A:
+	pop {r4, r5}
+	pop {r1}
+	bx r1
+
+	thumb_func_start sub_08016F80
+sub_08016F80: @ 0x08016F80
+	push {lr}
+	adds r3, r0, #0
+	adds r2, r1, #0
+	movs r1, #0xff
+	ands r1, r2
+	lsls r0, r1, #3
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	ldr r1, _08016FA8 @ =0x08C51538
+	adds r0, r0, r1
+	ldr r0, [r0, #8]
+	movs r1, #1
+	ands r0, r1
+	cmp r0, #0
+	bne _08016FAC
+	adds r0, r3, #0
+	adds r1, r2, #0
+	bl sub_08027158
+	b _08016FB4
+	.align 2, 0
+_08016FA8: .4byte 0x08C51538
+_08016FAC:
+	adds r0, r3, #0
+	adds r1, r2, #0
+	bl sub_08016620
+_08016FB4:
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+	pop {r1}
+	bx r1
+
+	thumb_func_start sub_08016FBC
+sub_08016FBC: @ 0x08016FBC
+	push {r4, lr}
+	adds r3, r0, #0
+	adds r2, r1, #0
+	movs r4, #0
+	movs r0, #0xff
+	ands r0, r2
+	subs r0, #0x4a
+	cmp r0, #0x50
+	bls _08016FD0
+	b _0801712E
+_08016FD0:
+	lsls r0, r0, #2
+	ldr r1, _08016FDC @ =_08016FE0
+	adds r0, r0, r1
+	ldr r0, [r0]
+	mov pc, r0
+	.align 2, 0
+_08016FDC: .4byte _08016FE0
+_08016FE0: @ jump table
+	.4byte _08017124 @ case 0
+	.4byte _08017128 @ case 1
+	.4byte _0801712C @ case 2
+	.4byte _08017124 @ case 3
+	.4byte _08017124 @ case 4
+	.4byte _0801712E @ case 5
+	.4byte _0801712E @ case 6
+	.4byte _0801712E @ case 7
+	.4byte _0801712E @ case 8
+	.4byte _0801712E @ case 9
+	.4byte _0801712E @ case 10
+	.4byte _0801712E @ case 11
+	.4byte _0801712E @ case 12
+	.4byte _0801712E @ case 13
+	.4byte _0801712E @ case 14
+	.4byte _0801712E @ case 15
+	.4byte _0801712E @ case 16
+	.4byte _0801712E @ case 17
+	.4byte _0801712E @ case 18
+	.4byte _0801712E @ case 19
+	.4byte _0801712E @ case 20
+	.4byte _0801712E @ case 21
+	.4byte _0801712E @ case 22
+	.4byte _0801712E @ case 23
+	.4byte _0801712E @ case 24
+	.4byte _0801712E @ case 25
+	.4byte _0801712E @ case 26
+	.4byte _0801712E @ case 27
+	.4byte _0801712E @ case 28
+	.4byte _0801712E @ case 29
+	.4byte _0801712E @ case 30
+	.4byte _0801712E @ case 31
+	.4byte _0801712E @ case 32
+	.4byte _08017124 @ case 33
+	.4byte _0801712C @ case 34
+	.4byte _0801712E @ case 35
+	.4byte _0801712E @ case 36
+	.4byte _0801712E @ case 37
+	.4byte _0801712E @ case 38
+	.4byte _0801712E @ case 39
+	.4byte _0801712E @ case 40
+	.4byte _0801712E @ case 41
+	.4byte _0801712E @ case 42
+	.4byte _0801712E @ case 43
+	.4byte _0801712E @ case 44
+	.4byte _0801712E @ case 45
+	.4byte _0801712E @ case 46
+	.4byte _0801712E @ case 47
+	.4byte _0801712E @ case 48
+	.4byte _0801712E @ case 49
+	.4byte _0801712E @ case 50
+	.4byte _0801712E @ case 51
+	.4byte _0801712E @ case 52
+	.4byte _0801712E @ case 53
+	.4byte _0801712E @ case 54
+	.4byte _0801712E @ case 55
+	.4byte _0801712E @ case 56
+	.4byte _0801712E @ case 57
+	.4byte _0801712E @ case 58
+	.4byte _0801712E @ case 59
+	.4byte _0801712E @ case 60
+	.4byte _0801712E @ case 61
+	.4byte _0801712E @ case 62
+	.4byte _0801712E @ case 63
+	.4byte _0801712E @ case 64
+	.4byte _0801712E @ case 65
+	.4byte _0801712E @ case 66
+	.4byte _0801712E @ case 67
+	.4byte _0801712E @ case 68
+	.4byte _0801712E @ case 69
+	.4byte _0801712E @ case 70
+	.4byte _0801712E @ case 71
+	.4byte _0801712E @ case 72
+	.4byte _0801712E @ case 73
+	.4byte _0801712E @ case 74
+	.4byte _0801712E @ case 75
+	.4byte _0801712E @ case 76
+	.4byte _0801712E @ case 77
+	.4byte _0801712E @ case 78
+	.4byte _0801712E @ case 79
+	.4byte _08017124 @ case 80
+_08017124:
+	movs r4, #0xa
+	b _0801712E
+_08017128:
+	movs r4, #0x14
+	b _0801712E
+_0801712C:
+	movs r4, #0x50
+_0801712E:
+	movs r1, #0xff
+	ands r1, r2
+	lsls r0, r1, #3
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	ldr r1, _0801715C @ =0x08C51538
+	adds r0, r0, r1
+	ldr r0, [r0, #8]
+	movs r1, #4
+	ands r0, r1
+	cmp r0, #0
+	beq _08017154
+	adds r0, r3, #0
+	bl sub_08018EC0
+	adds r4, r4, r0
+	cmp r4, #0x50
+	ble _08017154
+	movs r4, #0x50
+_08017154:
+	adds r0, r4, #0
+	pop {r4}
+	pop {r1}
+	bx r1
+	.align 2, 0
+_0801715C: .4byte 0x08C51538
+
+	thumb_func_start sub_08017160
+sub_08017160: @ 0x08017160
+	push {r4, r5, lr}
+	movs r3, #0
+	movs r4, #0xff
+	adds r2, r0, #0
+	adds r2, #0x1e
+_0801716A:
+	adds r0, r4, #0
+	ldrh r5, [r2]
+	ands r0, r5
+	cmp r0, r1
+	bne _08017178
+	adds r0, r3, #0
+	b _08017184
+_08017178:
+	adds r2, #2
+	adds r3, #1
+	cmp r3, #4
+	ble _0801716A
+	movs r0, #1
+	rsbs r0, r0, #0
+_08017184:
+	pop {r4, r5}
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_0801718C
+sub_0801718C: @ 0x0801718C
+	adds r1, r0, #0
+	cmp r1, #0
+	bne _08017196
+	movs r1, #0xff
+	b _080171A6
+_08017196:
+	movs r0, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _080171B0 @ =0x08C51538
+	adds r1, r1, r0
+	ldrb r1, [r1, #7]
+_080171A6:
+	movs r0, #0
+	cmp r1, #9
+	bne _080171AE
+	movs r0, #1
+_080171AE:
+	bx lr
+	.align 2, 0
+_080171B0: .4byte 0x08C51538
+
+	thumb_func_start sub_080171B4
+sub_080171B4: @ 0x080171B4
+	push {r4, lr}
+	adds r4, r0, #0
+	cmp r4, #0
+	beq _08017200
+	movs r0, #0xff
+	ands r0, r4
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _080171FC @ =0x08C51538
+	adds r1, r1, r0
+	ldr r2, [r1, #8]
+	movs r0, #5
+	ands r0, r2
+	cmp r0, #0
+	beq _08017200
+	movs r0, #0xc1
+	lsls r0, r0, #3
+	ands r0, r2
+	cmp r0, #0
+	bne _08017200
+	movs r3, #8
+	ands r3, r2
+	asrs r0, r4, #8
+	cmp r3, #0
+	beq _080171EA
+	movs r0, #0xff
+_080171EA:
+	movs r2, #0xff
+	cmp r3, #0
+	bne _080171F2
+	ldrb r2, [r1, #0x14]
+_080171F2:
+	cmp r0, r2
+	beq _08017200
+	movs r0, #1
+	b _08017202
+	.align 2, 0
+_080171FC: .4byte 0x08C51538
+_08017200:
+	movs r0, #0
+_08017202:
+	pop {r4}
+	pop {r1}
+	bx r1
+
+	thumb_func_start sub_08017208
+sub_08017208: @ 0x08017208
+	movs r1, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08017228 @ =0x08C51538
+	adds r1, r1, r0
+	ldrb r0, [r1, #0x19]
+	subs r0, #0x11
+	cmp r0, #0x2e
+	bhi _0801730C
+	lsls r0, r0, #2
+	ldr r1, _0801722C @ =_08017230
+	adds r0, r0, r1
+	ldr r0, [r0]
+	mov pc, r0
+	.align 2, 0
+_08017228: .4byte 0x08C51538
+_0801722C: .4byte _08017230
+_08017230: @ jump table
+	.4byte _080172EC @ case 0
+	.4byte _080172F0 @ case 1
+	.4byte _080172F4 @ case 2
+	.4byte _0801730C @ case 3
+	.4byte _0801730C @ case 4
+	.4byte _0801730C @ case 5
+	.4byte _0801730C @ case 6
+	.4byte _0801730C @ case 7
+	.4byte _0801730C @ case 8
+	.4byte _0801730C @ case 9
+	.4byte _0801730C @ case 10
+	.4byte _0801730C @ case 11
+	.4byte _0801730C @ case 12
+	.4byte _0801730C @ case 13
+	.4byte _0801730C @ case 14
+	.4byte _0801730C @ case 15
+	.4byte _0801730C @ case 16
+	.4byte _080172F8 @ case 17
+	.4byte _080172FC @ case 18
+	.4byte _0801730C @ case 19
+	.4byte _0801730C @ case 20
+	.4byte _0801730C @ case 21
+	.4byte _0801730C @ case 22
+	.4byte _0801730C @ case 23
+	.4byte _0801730C @ case 24
+	.4byte _0801730C @ case 25
+	.4byte _0801730C @ case 26
+	.4byte _0801730C @ case 27
+	.4byte _0801730C @ case 28
+	.4byte _0801730C @ case 29
+	.4byte _0801730C @ case 30
+	.4byte _0801730C @ case 31
+	.4byte _0801730C @ case 32
+	.4byte _0801730C @ case 33
+	.4byte _08017300 @ case 34
+	.4byte _0801730C @ case 35
+	.4byte _0801730C @ case 36
+	.4byte _0801730C @ case 37
+	.4byte _0801730C @ case 38
+	.4byte _0801730C @ case 39
+	.4byte _0801730C @ case 40
+	.4byte _08017304 @ case 41
+	.4byte _0801730C @ case 42
+	.4byte _0801730C @ case 43
+	.4byte _0801730C @ case 44
+	.4byte _0801730C @ case 45
+	.4byte _08017308 @ case 46
+_080172EC:
+	movs r0, #1
+	b _0801730E
+_080172F0:
+	movs r0, #3
+	b _0801730E
+_080172F4:
+	movs r0, #7
+	b _0801730E
+_080172F8:
+	movs r0, #2
+	b _0801730E
+_080172FC:
+	movs r0, #6
+	b _0801730E
+_08017300:
+	movs r0, #4
+	b _0801730E
+_08017304:
+	movs r0, #0xc
+	b _0801730E
+_08017308:
+	movs r0, #0x14
+	b _0801730E
+_0801730C:
+	movs r0, #0
+_0801730E:
+	bx lr
+
+	thumb_func_start sub_08017310
+sub_08017310: @ 0x08017310
+	push {r4, r5, r6, r7, lr}
+	adds r6, r0, #0
+	movs r7, #0
+	cmp r1, #0
+	blt _08017328
+	lsls r1, r1, #1
+	adds r0, #0x1e
+	adds r0, r0, r1
+	ldrh r0, [r0]
+	bl sub_08017208
+	b _0801735C
+_08017328:
+	movs r5, #0
+	ldrh r4, [r6, #0x1e]
+	cmp r4, #0
+	beq _0801735A
+_08017330:
+	adds r0, r6, #0
+	adds r1, r4, #0
+	bl sub_08016620
+	lsls r0, r0, #0x18
+	cmp r0, #0
+	beq _08017346
+	adds r0, r4, #0
+	bl sub_08017208
+	orrs r7, r0
+_08017346:
+	adds r5, #1
+	cmp r5, #4
+	bgt _0801735A
+	lsls r1, r5, #1
+	adds r0, r6, #0
+	adds r0, #0x1e
+	adds r0, r0, r1
+	ldrh r4, [r0]
+	cmp r4, #0
+	bne _08017330
+_0801735A:
+	adds r0, r7, #0
+_0801735C:
+	pop {r4, r5, r6, r7}
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_08017364
+sub_08017364: @ 0x08017364
+	push {r4, r5, r6, r7, lr}
+	adds r5, r0, #0
+	movs r6, #0
+	cmp r1, #0
+	blt _080173A8
+	lsls r0, r1, #1
+	adds r1, r5, #0
+	adds r1, #0x1e
+	adds r1, r1, r0
+	ldrh r4, [r1]
+	adds r0, r5, #0
+	adds r1, r4, #0
+	bl sub_08027158
+	lsls r0, r0, #0x18
+	cmp r0, #0
+	beq _08017416
+	movs r0, #0xff
+	ands r0, r4
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _080173A4 @ =0x08C51538
+	adds r1, r1, r0
+	movs r6, #0xf
+	ldrb r1, [r1, #0x19]
+	ands r6, r1
+	cmp r6, #0
+	bne _080173F2
+	movs r6, #0x63
+	b _080173F2
+	.align 2, 0
+_080173A4: .4byte 0x08C51538
+_080173A8:
+	movs r7, #0
+	ldrh r4, [r5, #0x1e]
+	cmp r4, #0
+	beq _080173F2
+_080173B0:
+	adds r0, r5, #0
+	adds r1, r4, #0
+	bl sub_08027158
+	lsls r0, r0, #0x18
+	cmp r0, #0
+	beq _080173DE
+	movs r0, #0xff
+	ands r0, r4
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08017400 @ =0x08C51538
+	adds r1, r1, r0
+	movs r4, #0xf
+	ldrb r1, [r1, #0x19]
+	ands r4, r1
+	cmp r4, #0
+	bne _080173D8
+	movs r4, #0x63
+_080173D8:
+	cmp r6, r4
+	bge _080173DE
+	adds r6, r4, #0
+_080173DE:
+	adds r7, #1
+	cmp r7, #4
+	bgt _080173F2
+	lsls r1, r7, #1
+	adds r0, r5, #0
+	adds r0, #0x1e
+	adds r0, r0, r1
+	ldrh r4, [r0]
+	cmp r4, #0
+	bne _080173B0
+_080173F2:
+	cmp r6, #2
+	beq _0801740E
+	cmp r6, #2
+	bgt _08017404
+	cmp r6, #1
+	beq _0801740A
+	b _08017416
+	.align 2, 0
+_08017400: .4byte 0x08C51538
+_08017404:
+	cmp r6, #0x63
+	beq _08017412
+	b _08017416
+_0801740A:
+	movs r0, #1
+	b _08017418
+_0801740E:
+	movs r0, #3
+	b _08017418
+_08017412:
+	movs r0, #0x20
+	b _08017418
+_08017416:
+	movs r0, #0
+_08017418:
+	pop {r4, r5, r6, r7}
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_08017420
+sub_08017420: @ 0x08017420
+	push {r4, r5, r6, r7, lr}
+	adds r7, r0, #0
+	movs r6, #0
+	movs r5, #0
+	ldrh r4, [r7, #0x1e]
+	cmp r4, #0
+	beq _08017470
+_0801742E:
+	adds r0, r7, #0
+	adds r1, r4, #0
+	bl sub_08016850
+	lsls r0, r0, #0x18
+	cmp r0, #0
+	beq _0801745C
+	movs r0, #0xff
+	ands r0, r4
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08017480 @ =0x08C51538
+	adds r1, r1, r0
+	movs r4, #0xf
+	ldrb r1, [r1, #0x19]
+	ands r4, r1
+	cmp r4, #0
+	bne _08017456
+	movs r4, #0x63
+_08017456:
+	cmp r6, r4
+	bge _0801745C
+	adds r6, r4, #0
+_0801745C:
+	adds r5, #1
+	cmp r5, #4
+	bgt _08017470
+	lsls r1, r5, #1
+	adds r0, r7, #0
+	adds r0, #0x1e
+	adds r0, r0, r1
+	ldrh r4, [r0]
+	cmp r4, #0
+	bne _0801742E
+_08017470:
+	cmp r6, #2
+	beq _0801748E
+	cmp r6, #2
+	bgt _08017484
+	cmp r6, #1
+	beq _0801748A
+	b _08017496
+	.align 2, 0
+_08017480: .4byte 0x08C51538
+_08017484:
+	cmp r6, #0x63
+	beq _08017492
+	b _08017496
+_0801748A:
+	movs r0, #1
+	b _08017498
+_0801748E:
+	movs r0, #3
+	b _08017498
+_08017492:
+	movs r0, #0x20
+	b _08017498
+_08017496:
+	movs r0, #0
+_08017498:
+	pop {r4, r5, r6, r7}
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_080174A0
+sub_080174A0: @ 0x080174A0
+	push {r4, r5, r6, r7, lr}
+	movs r6, #0
+	bl sub_0802EBCC
+	adds r3, r0, #0
+	movs r5, #0
+	ldrh r0, [r3]
+	cmp r0, #0
+	beq _080174EA
+	ldr r7, _080174D0 @ =0x08C51538
+_080174B4:
+	ldrh r4, [r3]
+	ldrb r1, [r3]
+	lsls r0, r1, #3
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	adds r2, r0, r7
+	ldr r0, [r2, #8]
+	movs r1, #8
+	ands r0, r1
+	cmp r0, #0
+	beq _080174D4
+	ldrh r0, [r2, #0x1a]
+	b _080174DA
+	.align 2, 0
+_080174D0: .4byte 0x08C51538
+_080174D4:
+	asrs r0, r4, #8
+	ldrh r2, [r2, #0x1a]
+	muls r0, r2, r0
+_080174DA:
+	adds r6, r6, r0
+	adds r3, #2
+	adds r5, #1
+	cmp r5, #0x63
+	bgt _080174EA
+	ldrh r0, [r3]
+	cmp r0, #0
+	bne _080174B4
+_080174EA:
+	adds r0, r6, #0
+	pop {r4, r5, r6, r7}
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_080174F4
+sub_080174F4: @ 0x080174F4
+	push {r4, r5, r6, r7, lr}
+	movs r5, #0
+	movs r4, #1
+_080174FA:
+	adds r0, r4, #0
+	bl sub_080190F4
+	mov ip, r0
+	adds r6, r4, #1
+	cmp r0, #0
+	beq _08017564
+	ldr r0, [r0]
+	cmp r0, #0
+	beq _08017564
+	mov r1, ip
+	ldr r0, [r1, #0xc]
+	ldr r1, _08017540 @ =0x00010004
+	ands r0, r1
+	cmp r0, #0
+	bne _08017564
+	movs r4, #0
+	mov r0, ip
+	ldrh r3, [r0, #0x1e]
+	cmp r3, #0
+	beq _08017564
+	ldr r7, _08017544 @ =0x08C51538
+_08017526:
+	movs r1, #0xff
+	ands r1, r3
+	lsls r0, r1, #3
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	adds r2, r0, r7
+	ldr r0, [r2, #8]
+	movs r1, #8
+	ands r0, r1
+	cmp r0, #0
+	beq _08017548
+	ldrh r0, [r2, #0x1a]
+	b _0801754E
+	.align 2, 0
+_08017540: .4byte 0x00010004
+_08017544: .4byte 0x08C51538
+_08017548:
+	asrs r0, r3, #8
+	ldrh r2, [r2, #0x1a]
+	muls r0, r2, r0
+_0801754E:
+	adds r5, r5, r0
+	adds r4, #1
+	cmp r4, #4
+	bgt _08017564
+	lsls r1, r4, #1
+	mov r0, ip
+	adds r0, #0x1e
+	adds r0, r0, r1
+	ldrh r3, [r0]
+	cmp r3, #0
+	bne _08017526
+_08017564:
+	adds r4, r6, #0
+	cmp r4, #0x3f
+	ble _080174FA
+	adds r0, r5, #0
+	pop {r4, r5, r6, r7}
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_08017574
+sub_08017574: @ 0x08017574
+	push {r4, lr}
+	bl sub_080174A0
+	adds r4, r0, #0
+	bl sub_080174F4
+	adds r4, r4, r0
+	bl sub_08023D90
+	adds r4, r4, r0
+	ldr r0, _08017598 @ =0x0098967F
+	cmp r4, r0
+	ble _08017590
+	adds r4, r0, #0
+_08017590:
+	adds r0, r4, #0
+	pop {r4}
+	pop {r1}
+	bx r1
+	.align 2, 0
+_08017598: .4byte 0x0098967F
+
+	thumb_func_start sub_0801759C
+sub_0801759C: @ 0x0801759C
+	adds r2, r0, #0
+	lsls r1, r1, #0x18
+	lsrs r3, r1, #0x18
+	cmp r2, #0
+	bne _080175AA
+	movs r1, #0xff
+	b _080175BA
+_080175AA:
+	movs r0, #0xff
+	ands r0, r2
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _080175C4 @ =0x08C51538
+	adds r1, r1, r0
+	ldrb r1, [r1, #7]
+_080175BA:
+	ldr r0, _080175C8 @ =gPlaySt
+	adds r0, #0x1c
+	adds r0, r1, r0
+	strb r3, [r0]
+	bx lr
+	.align 2, 0
+_080175C4: .4byte 0x08C51538
+_080175C8: .4byte gPlaySt
+
+	thumb_func_start sub_080175CC
+sub_080175CC: @ 0x080175CC
+	adds r3, r0, #0
+	cmp r1, #0
+	bne _080175D6
+	movs r1, #0xff
+	b _080175E6
+_080175D6:
+	movs r0, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08017600 @ =0x08C51538
+	adds r1, r1, r0
+	ldrb r1, [r1, #7]
+_080175E6:
+	ldr r0, _08017604 @ =gPlaySt
+	adds r0, #0x1c
+	adds r0, r1, r0
+	movs r2, #0
+	ldr r1, [r3]
+	ldrb r0, [r0]
+	ldrb r1, [r1, #4]
+	cmp r0, r1
+	bne _080175FA
+	movs r2, #1
+_080175FA:
+	adds r0, r2, #0
+	bx lr
+	.align 2, 0
+_08017600: .4byte 0x08C51538
+_08017604: .4byte gPlaySt
+
+	thumb_func_start GetItemIndex
+GetItemIndex: @ 0x08017608
+	adds r1, r0, #0
+	movs r0, #0xff
+	ands r0, r1
+	bx lr
+
+	thumb_func_start sub_08017610
+sub_08017610: @ 0x08017610
+	push {lr}
+	movs r1, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08017630 @ =0x08C51538
+	adds r1, r1, r0
+	ldrh r0, [r1]
+	bl sub_08013318
+	bl sub_08013488
+	pop {r1}
+	bx r1
+	.align 2, 0
+_08017630: .4byte 0x08C51538
+
+	thumb_func_start sub_08017634
+sub_08017634: @ 0x08017634
+	movs r1, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08017648 @ =0x08C51538
+	adds r1, r1, r0
+	ldrh r0, [r1, #2]
+	bx lr
+	.align 2, 0
+_08017648: .4byte 0x08C51538
+
+	thumb_func_start sub_0801764C
+sub_0801764C: @ 0x0801764C
+	movs r1, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08017660 @ =0x08C51538
+	adds r1, r1, r0
+	ldrh r0, [r1, #4]
+	bx lr
+	.align 2, 0
+_08017660: .4byte 0x08C51538
+
+	thumb_func_start sub_08017664
+sub_08017664: @ 0x08017664
+	cmp r0, #0
+	beq _08017680
+	movs r1, #0xff
+	ands r1, r0
+	lsls r0, r1, #3
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	ldr r1, _0801767C @ =0x08C51538
+	adds r0, r0, r1
+	ldrb r0, [r0, #7]
+	b _08017682
+	.align 2, 0
+_0801767C: .4byte 0x08C51538
+_08017680:
+	movs r0, #0xff
+_08017682:
+	bx lr
+
+	thumb_func_start sub_08017684
+sub_08017684: @ 0x08017684
+	movs r1, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08017698 @ =0x08C51538
+	adds r1, r1, r0
+	ldr r0, [r1, #8]
+	bx lr
+	.align 2, 0
+_08017698: .4byte 0x08C51538
+
+	thumb_func_start sub_0801769C
+sub_0801769C: @ 0x0801769C
+	adds r2, r0, #0
+	movs r1, #0xff
+	ands r1, r2
+	lsls r0, r1, #3
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	ldr r1, _080176BC @ =0x08C51538
+	adds r0, r0, r1
+	ldr r0, [r0, #8]
+	movs r1, #8
+	ands r0, r1
+	cmp r0, #0
+	bne _080176C0
+	asrs r0, r2, #8
+	b _080176C2
+	.align 2, 0
+_080176BC: .4byte 0x08C51538
+_080176C0:
+	movs r0, #0xff
+_080176C2:
+	bx lr
+
+	thumb_func_start sub_080176C4
+sub_080176C4: @ 0x080176C4
+	movs r1, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _080176E0 @ =0x08C51538
+	adds r2, r1, r0
+	ldr r0, [r2, #8]
+	movs r1, #8
+	ands r0, r1
+	cmp r0, #0
+	bne _080176E4
+	ldrb r0, [r2, #0x14]
+	b _080176E6
+	.align 2, 0
+_080176E0: .4byte 0x08C51538
+_080176E4:
+	movs r0, #0xff
+_080176E6:
+	bx lr
+
+	thumb_func_start sub_080176E8
+sub_080176E8: @ 0x080176E8
+	movs r1, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _080176FC @ =0x08C51538
+	adds r1, r1, r0
+	ldrb r0, [r1, #0x15]
+	bx lr
+	.align 2, 0
+_080176FC: .4byte 0x08C51538
+
+	thumb_func_start sub_08017700
+sub_08017700: @ 0x08017700
+	movs r1, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08017714 @ =0x08C51538
+	adds r1, r1, r0
+	ldrb r0, [r1, #0x16]
+	bx lr
+	.align 2, 0
+_08017714: .4byte 0x08C51538
+
+	thumb_func_start sub_08017718
+sub_08017718: @ 0x08017718
+	movs r1, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _0801772C @ =0x08C51538
+	adds r1, r1, r0
+	ldrb r0, [r1, #0x17]
+	bx lr
+	.align 2, 0
+_0801772C: .4byte 0x08C51538
+
+	thumb_func_start sub_08017730
+sub_08017730: @ 0x08017730
+	movs r1, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08017744 @ =0x08C51538
+	adds r1, r1, r0
+	ldrb r0, [r1, #0x18]
+	bx lr
+	.align 2, 0
+_08017744: .4byte 0x08C51538
+
+	thumb_func_start sub_08017748
+sub_08017748: @ 0x08017748
+	adds r3, r0, #0
+	movs r0, #0xff
+	ands r0, r3
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08017768 @ =0x08C51538
+	adds r2, r1, r0
+	ldr r0, [r2, #8]
+	movs r1, #8
+	ands r0, r1
+	cmp r0, #0
+	beq _0801776C
+	ldrh r0, [r2, #0x1a]
+	b _08017772
+	.align 2, 0
+_08017768: .4byte 0x08C51538
+_0801776C:
+	asrs r0, r3, #8
+	ldrh r2, [r2, #0x1a]
+	muls r0, r2, r0
+_08017772:
+	bx lr
+
+	thumb_func_start sub_08017774
+sub_08017774: @ 0x08017774
+	movs r1, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08017788 @ =0x08C51538
+	adds r1, r1, r0
+	ldrb r1, [r1, #0x19]
+	lsrs r0, r1, #4
+	bx lr
+	.align 2, 0
+_08017788: .4byte 0x08C51538
+
+	thumb_func_start sub_0801778C
+sub_0801778C: @ 0x0801778C
+	movs r1, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _080177A4 @ =0x08C51538
+	adds r1, r1, r0
+	movs r0, #0xf
+	ldrb r1, [r1, #0x19]
+	ands r0, r1
+	bx lr
+	.align 2, 0
+_080177A4: .4byte 0x08C51538
+
+	thumb_func_start sub_080177A8
+sub_080177A8: @ 0x080177A8
+	movs r1, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _080177BC @ =0x08C51538
+	adds r1, r1, r0
+	ldrb r0, [r1, #0x19]
+	bx lr
+	.align 2, 0
+_080177BC: .4byte 0x08C51538
+
+	thumb_func_start sub_080177C0
+sub_080177C0: @ 0x080177C0
+	movs r1, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _080177D4 @ =0x08C51538
+	adds r1, r1, r0
+	ldrb r0, [r1, #0x1c]
+	bx lr
+	.align 2, 0
+_080177D4: .4byte 0x08C51538
+
+	thumb_func_start sub_080177D8
+sub_080177D8: @ 0x080177D8
+	movs r1, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _080177EC @ =0x08C51538
+	adds r1, r1, r0
+	ldr r0, [r1, #0x10]
+	bx lr
+	.align 2, 0
+_080177EC: .4byte 0x08C51538
+
+	thumb_func_start sub_080177F0
+sub_080177F0: @ 0x080177F0
+	movs r1, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08017804 @ =0x08C51538
+	adds r1, r1, r0
+	ldr r0, [r1, #0xc]
+	bx lr
+	.align 2, 0
+_08017804: .4byte 0x08C51538
+
+	thumb_func_start sub_08017808
+sub_08017808: @ 0x08017808
+	cmp r0, #0
+	beq _08017824
+	movs r1, #0xff
+	ands r1, r0
+	lsls r0, r1, #3
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	ldr r1, _08017820 @ =0x08C51538
+	adds r0, r0, r1
+	ldrb r0, [r0, #0x1d]
+	b _08017828
+	.align 2, 0
+_08017820: .4byte 0x08C51538
+_08017824:
+	movs r0, #1
+	rsbs r0, r0, #0
+_08017828:
+	bx lr
+	.align 2, 0
+
+	thumb_func_start sub_0801782C
+sub_0801782C: @ 0x0801782C
+	movs r1, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08017840 @ =0x08C51538
+	adds r1, r1, r0
+	ldrb r0, [r1, #0x1f]
+	bx lr
+	.align 2, 0
+_08017840: .4byte 0x08C51538
+
+	thumb_func_start sub_08017844
+sub_08017844: @ 0x08017844
+	movs r1, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08017858 @ =0x08C51538
+	adds r1, r1, r0
+	ldrb r0, [r1, #0x1e]
+	bx lr
+	.align 2, 0
+_08017858: .4byte 0x08C51538
+
+	thumb_func_start sub_0801785C
+sub_0801785C: @ 0x0801785C
+	movs r1, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08017870 @ =0x08C51538
+	adds r1, r1, r0
+	ldrh r0, [r1, #0x1a]
+	bx lr
+	.align 2, 0
+_08017870: .4byte 0x08C51538
+
+	thumb_func_start sub_08017874
+sub_08017874: @ 0x08017874
+	movs r1, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _08017898 @ =0x08C51538
+	adds r2, r1, r0
+	ldr r0, [r2, #8]
+	movs r1, #8
+	ands r0, r1
+	movs r1, #0xff
+	cmp r0, #0
+	bne _08017890
+	ldrb r1, [r2, #0x14]
+_08017890:
+	ldrh r2, [r2, #0x1a]
+	adds r0, r2, #0
+	muls r0, r1, r0
+	bx lr
+	.align 2, 0
+_08017898: .4byte 0x08C51538
+
+	thumb_func_start GetItemAwardedExp
+GetItemAwardedExp: @ 0x0801789C
+	movs r1, #0xff
+	ands r0, r1
+	lsls r1, r0, #3
+	adds r1, r1, r0
+	lsls r1, r1, #2
+	ldr r0, _080178B0 @ =0x08C51538
+	adds r1, r1, r0
+	adds r1, #0x20
+	ldrb r0, [r1]
+	bx lr
+	.align 2, 0
+_080178B0: .4byte 0x08C51538
+
+	thumb_func_start GetItemData
+GetItemData: @ 0x080178B4
+	adds r1, r0, #0
+	lsls r0, r1, #3
+	adds r0, r0, r1
+	lsls r0, r0, #2
+	ldr r1, _080178C4 @ =0x08C51538
+	adds r0, r0, r1
+	bx lr
+	.align 2, 0
+_080178C4: .4byte 0x08C51538
diff --git a/asm/main.s b/asm/main.s
index 786634e..382d5d6 100644
--- a/asm/main.s
+++ b/asm/main.s
@@ -46,7 +46,7 @@ AgbMain: @ 0x08000A20
 	ldr r1, _08000AE4 @ =0x04000208
 	movs r0, #1
 	strh r0, [r1]
-	ldr r4, _08000AE8 @ =0x08BBFC7C
+	ldr r4, _08000AE8 @ =gpKeySt
 	ldr r0, [r4]
 	bl sub_08001C28
 	ldr r0, [r4]
@@ -54,7 +54,7 @@ AgbMain: @ 0x08000A20
 	bl sub_08004158
 	bl SramInit
 	bl Proc_Init
-	bl AP_ClearAll
+	bl InitSpriteAnims
 	bl MU_Init
 	ldr r0, _08000AEC @ =0x42D690E9
 	bl RandInitB
@@ -78,7 +78,7 @@ _08000AD8: .4byte 0x04000204
 _08000ADC: .4byte 0x000045B4
 _08000AE0: .4byte 0x04000004
 _08000AE4: .4byte 0x04000208
-_08000AE8: .4byte 0x08BBFC7C
+_08000AE8: .4byte gpKeySt
 _08000AEC: .4byte 0x42D690E9
 _08000AF0: .4byte OnVBlank
 
diff --git a/asm/sprite-anim.s b/asm/sprite-anim.s
new file mode 100644
index 0000000..7418402
--- /dev/null
+++ b/asm/sprite-anim.s
@@ -0,0 +1,766 @@
+	.include "macro.inc"
+
+	.syntax unified
+
+	thumb_func_start InitSpriteAnims
+InitSpriteAnims: @ 0x08012640
+	ldr r1, _08012654 @ =0x03000110
+	movs r2, #0
+	movs r3, #0xbe
+	lsls r3, r3, #2
+	adds r0, r1, r3
+_0801264A:
+	str r2, [r0]
+	subs r0, #0x28
+	cmp r0, r1
+	bge _0801264A
+	bx lr
+	.align 2, 0
+_08012654: .4byte 0x03000110
+
+	thumb_func_start StartSpriteAnim
+StartSpriteAnim: @ 0x08012658
+	push {r4, r5, r6, lr}
+	adds r6, r0, #0
+	lsls r1, r1, #0x10
+	lsrs r5, r1, #0x10
+	movs r0, #0
+	bl sub_08012AD0
+	adds r4, r0, #0
+	cmp r4, #0
+	beq _08012678
+	adds r1, r6, #0
+	adds r2, r5, #0
+	bl sub_08012A98
+	adds r0, r4, #0
+	b _0801267A
+_08012678:
+	movs r0, #0
+_0801267A:
+	pop {r4, r5, r6}
+	pop {r1}
+	bx r1
+
+	thumb_func_start sub_08012680
+sub_08012680: @ 0x08012680
+	adds r1, r0, #0
+	cmp r1, #0
+	beq _08012690
+	ldr r0, [r1]
+	cmp r0, #0
+	beq _08012690
+	movs r0, #0
+	str r0, [r1]
+_08012690:
+	bx lr
+	.align 2, 0
+
+	thumb_func_start sub_08012694
+sub_08012694: @ 0x08012694
+	push {r4, lr}
+	adds r4, r0, #0
+	cmp r4, #0
+	beq _080126A2
+	ldr r0, [r4]
+	cmp r0, #0
+	bne _080126A6
+_080126A2:
+	movs r0, #0
+	b _080126B6
+_080126A6:
+	adds r0, r4, #0
+	bl sub_080126BC
+	adds r0, r4, #0
+	bl sub_08012718
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+_080126B6:
+	pop {r4}
+	pop {r1}
+	bx r1
+
+	thumb_func_start sub_080126BC
+sub_080126BC: @ 0x080126BC
+	push {r4, r5, r6, lr}
+	sub sp, #4
+	adds r4, r0, #0
+	adds r5, r1, #0
+	adds r6, r2, #0
+	movs r2, #0
+	cmp r4, #0
+	beq _0801270E
+	ldr r0, [r4]
+	cmp r0, #0
+	beq _0801270E
+	ldr r0, [r4, #0x14]
+	cmp r0, #0
+	beq _080126E6
+	adds r0, r4, #0
+	bl sub_08012808
+	adds r0, r4, #0
+	adds r0, #0x21
+	ldrb r0, [r0]
+	lsls r2, r0, #9
+_080126E6:
+	ldrh r0, [r4, #0x1e]
+	orrs r2, r5
+	ldr r3, [r4, #0x10]
+	ldrh r1, [r4, #0x22]
+	str r1, [sp]
+	adds r1, r2, #0
+	adds r2, r6, #0
+	bl sub_080068C4
+	ldr r0, [r4, #0x24]
+	cmp r0, #0
+	beq _0801270E
+	adds r0, r4, #0
+	adds r0, #0x20
+	ldrb r0, [r0]
+	cmp r0, #0
+	beq _0801270E
+	adds r0, r4, #0
+	bl sub_08012944
+_0801270E:
+	add sp, #4
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08012718
+sub_08012718: @ 0x08012718
+	push {r4, lr}
+	adds r2, r0, #0
+	cmp r2, #0
+	beq _0801278A
+	ldr r0, [r2]
+	cmp r0, #0
+	beq _0801278A
+	ldrh r0, [r2, #0x1a]
+	cmp r0, #0
+	beq _08012740
+	ldrh r1, [r2, #0x18]
+	movs r3, #0x18
+	ldrsh r0, [r2, r3]
+	cmp r0, #0
+	beq _0801274E
+	subs r0, r1, #1
+	strh r0, [r2, #0x18]
+	lsls r0, r0, #0x10
+	cmp r0, #0
+	ble _08012744
+_08012740:
+	movs r0, #1
+	b _08012802
+_08012744:
+	movs r0, #0
+	strh r0, [r2, #0x18]
+	ldr r0, [r2, #0xc]
+	adds r0, #4
+	str r0, [r2, #0xc]
+_0801274E:
+	ldr r0, [r2, #0xc]
+	ldrh r1, [r0]
+	adds r4, r0, #0
+	cmp r1, #0
+	bne _0801278E
+	ldrh r1, [r4, #2]
+	cmp r1, #1
+	beq _08012784
+	cmp r1, #1
+	bgt _08012768
+	cmp r1, #0
+	beq _0801278A
+	b _0801278E
+_08012768:
+	ldr r0, _08012780 @ =0x0000FFFF
+	cmp r1, r0
+	bne _0801278E
+	ldr r0, [r2, #8]
+	str r0, [r2, #0xc]
+	adds r0, r2, #0
+	bl sub_08012718
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+	b _08012802
+	.align 2, 0
+_08012780: .4byte 0x0000FFFF
+_08012784:
+	adds r0, r2, #0
+	bl sub_08012680
+_0801278A:
+	movs r0, #0
+	b _08012802
+_0801278E:
+	ldrh r1, [r2, #0x1a]
+	ldrh r3, [r4]
+	adds r0, r1, #0
+	muls r0, r3, r0
+	ldrh r3, [r2, #0x1c]
+	adds r1, r3, r0
+	strh r1, [r2, #0x1c]
+	lsls r3, r1, #0x10
+	lsrs r0, r3, #0x10
+	cmp r0, #0xff
+	bhi _080127B4
+	movs r0, #1
+	strh r0, [r2, #0x18]
+	adds r0, r2, #0
+	bl sub_08012718
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+	b _08012802
+_080127B4:
+	lsrs r0, r3, #0x18
+	strh r0, [r2, #0x18]
+	movs r0, #0xff
+	ands r1, r0
+	strh r1, [r2, #0x1c]
+	ldr r1, [r2, #4]
+	ldrh r4, [r4, #2]
+	lsls r0, r4, #1
+	adds r0, r0, r1
+	ldrh r0, [r0]
+	lsrs r0, r0, #1
+	lsls r0, r0, #1
+	adds r3, r1, r0
+	str r3, [r2, #0x10]
+	ldrh r4, [r3]
+	movs r0, #0x80
+	lsls r0, r0, #8
+	ands r0, r4
+	lsls r0, r0, #0x10
+	lsrs r0, r0, #0x10
+	cmp r0, #0
+	beq _080127F8
+	str r3, [r2, #0x14]
+	ldr r1, _080127F4 @ =0x00007FFF
+	ands r1, r4
+	lsls r0, r1, #1
+	adds r0, r0, r1
+	lsls r0, r0, #1
+	adds r0, #2
+	adds r0, r3, r0
+	str r0, [r2, #0x10]
+	b _080127FA
+	.align 2, 0
+_080127F4: .4byte 0x00007FFF
+_080127F8:
+	str r0, [r2, #0x14]
+_080127FA:
+	adds r1, r2, #0
+	adds r1, #0x20
+	movs r0, #1
+	strb r0, [r1]
+_08012802:
+	pop {r4}
+	pop {r1}
+	bx r1
+
+	thumb_func_start sub_08012808
+sub_08012808: @ 0x08012808
+	push {r4, r5, r6, r7, lr}
+	mov r7, sl
+	mov r6, sb
+	mov r5, r8
+	push {r5, r6, r7}
+	sub sp, #0xc
+	str r0, [sp, #4]
+	cmp r0, #0
+	beq _080128D8
+	ldr r0, [r0]
+	cmp r0, #0
+	beq _080128D8
+	ldr r1, [sp, #4]
+	ldr r0, [r1, #0x14]
+	cmp r0, #0
+	beq _080128D8
+	ldr r2, _080128E8 @ =0x00007FFF
+	ldrh r1, [r0]
+	ands r1, r2
+	str r1, [sp, #8]
+	adds r7, r0, #2
+	movs r2, #0
+	mov r8, r2
+	cmp r8, r1
+	bge _080128D8
+	ldr r0, _080128EC @ =0x080C0E98
+	mov sb, r0
+	movs r1, #0xff
+	mov sl, r1
+_08012842:
+	mov r0, sl
+	ldrh r2, [r7]
+	ands r0, r2
+	adds r0, #0x40
+	lsls r0, r0, #1
+	add r0, sb
+	movs r1, #0
+	ldrsh r0, [r0, r1]
+	lsls r0, r0, #4
+	ldrh r1, [r7, #2]
+	bl Div
+	adds r6, r0, #0
+	lsls r6, r6, #0x10
+	asrs r6, r6, #0x10
+	mov r0, sl
+	ldrh r2, [r7]
+	ands r0, r2
+	lsls r0, r0, #1
+	add r0, sb
+	movs r1, #0
+	ldrsh r0, [r0, r1]
+	rsbs r0, r0, #0
+	lsls r0, r0, #4
+	ldrh r1, [r7, #4]
+	bl Div
+	adds r5, r0, #0
+	lsls r5, r5, #0x10
+	asrs r5, r5, #0x10
+	mov r0, sl
+	ldrh r2, [r7]
+	ands r0, r2
+	lsls r0, r0, #1
+	add r0, sb
+	movs r1, #0
+	ldrsh r0, [r0, r1]
+	lsls r0, r0, #4
+	ldrh r1, [r7, #2]
+	bl Div
+	adds r4, r0, #0
+	lsls r4, r4, #0x10
+	asrs r4, r4, #0x10
+	mov r0, sl
+	ldrh r2, [r7]
+	ands r0, r2
+	adds r0, #0x40
+	lsls r0, r0, #1
+	add r0, sb
+	movs r1, #0
+	ldrsh r0, [r0, r1]
+	lsls r0, r0, #4
+	ldrh r1, [r7, #4]
+	bl Div
+	lsls r0, r0, #0x10
+	asrs r0, r0, #0x10
+	ldr r1, [sp, #4]
+	adds r1, #0x21
+	ldrb r1, [r1]
+	add r1, r8
+	str r0, [sp]
+	adds r0, r1, #0
+	adds r1, r6, #0
+	adds r2, r5, #0
+	adds r3, r4, #0
+	bl sub_08003264
+	adds r7, #6
+	movs r2, #1
+	add r8, r2
+	ldr r0, [sp, #8]
+	cmp r8, r0
+	blt _08012842
+_080128D8:
+	add sp, #0xc
+	pop {r3, r4, r5}
+	mov r8, r3
+	mov sb, r4
+	mov sl, r5
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080128E8: .4byte 0x00007FFF
+_080128EC: .4byte 0x080C0E98
+
+	thumb_func_start sub_080128F0
+sub_080128F0: @ 0x080128F0
+	push {r4, lr}
+	adds r3, r0, #0
+	cmp r3, #0
+	beq _0801291C
+	ldr r2, [r3]
+	cmp r2, #0
+	beq _0801291C
+	ldrh r4, [r2, #2]
+	lsrs r0, r4, #1
+	lsls r0, r0, #1
+	adds r0, r2, r0
+	lsls r1, r1, #1
+	adds r1, r1, r0
+	ldrh r1, [r1]
+	lsrs r1, r1, #1
+	lsls r1, r1, #1
+	adds r0, r0, r1
+	str r0, [r3, #8]
+	str r0, [r3, #0xc]
+	adds r0, r3, #0
+	bl sub_08012A78
+_0801291C:
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08012924
+sub_08012924: @ 0x08012924
+	push {r4, lr}
+	adds r4, r0, #0
+	cmp r4, #0
+	beq _0801293E
+	ldr r0, [r4]
+	cmp r0, #0
+	beq _0801293E
+	adds r0, r4, #0
+	bl sub_08012A54
+	adds r0, r4, #0
+	bl sub_08012A78
+_0801293E:
+	pop {r4}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08012944
+sub_08012944: @ 0x08012944
+	push {r4, r5, r6, r7, lr}
+	mov r7, sl
+	mov r6, sb
+	mov r5, r8
+	push {r5, r6, r7}
+	sub sp, #4
+	adds r6, r0, #0
+	cmp r6, #0
+	beq _08012A3E
+	ldr r0, [r6]
+	cmp r0, #0
+	beq _08012A3E
+	ldr r0, [r6, #0x10]
+	ldrh r5, [r0]
+	adds r4, r0, #2
+	adds r2, r5, #0
+	lsls r1, r5, #1
+	adds r1, r1, r5
+	lsls r1, r1, #1
+	adds r1, #2
+	adds r0, r0, r1
+	mov sl, r0
+	movs r0, #0
+	mov r8, r0
+	subs r5, #1
+	adds r1, r6, #0
+	adds r1, #0x20
+	str r1, [sp]
+	cmp r2, #0
+	ble _08012A38
+	ldr r2, _080129F4 @ =0x08C01714
+	mov sb, r2
+	movs r7, #0xc0
+	lsls r7, r7, #8
+_08012988:
+	ldr r1, _080129F8 @ =0x000003FF
+	mov r3, sl
+	ldrh r3, [r3]
+	ands r1, r3
+	lsls r1, r1, #5
+	ldr r0, [r6, #0x24]
+	adds r0, r0, r1
+	ldr r1, _080129F8 @ =0x000003FF
+	ldrh r2, [r6, #0x22]
+	ands r1, r2
+	lsls r1, r1, #5
+	ldr r2, _080129FC @ =0x06010000
+	add r2, r8
+	adds r1, r1, r2
+	adds r3, r7, #0
+	ldrh r2, [r4]
+	ands r3, r2
+	lsrs r3, r3, #0xc
+	mov ip, r3
+	adds r2, r7, #0
+	ldrh r3, [r4, #2]
+	ands r2, r3
+	lsrs r2, r2, #0xe
+	add r2, ip
+	lsls r3, r2, #1
+	adds r2, r3, #0
+	add r2, sb
+	ldrb r2, [r2]
+	mov ip, r2
+	adds r3, #1
+	add r3, sb
+	ldrb r3, [r3]
+	bl sub_0801372C
+	ldr r1, _08012A00 @ =0x03002790
+	movs r0, #0x40
+	ldrb r1, [r1]
+	ands r0, r1
+	cmp r0, #0
+	bne _08012A04
+	adds r0, r7, #0
+	ldrh r3, [r4]
+	ands r0, r3
+	lsrs r0, r0, #0xc
+	adds r1, r7, #0
+	ldrh r2, [r4, #2]
+	ands r1, r2
+	lsrs r1, r1, #0xe
+	adds r0, r0, r1
+	lsls r0, r0, #1
+	add r0, sb
+	ldrb r0, [r0]
+	b _08012A26
+	.align 2, 0
+_080129F4: .4byte 0x08C01714
+_080129F8: .4byte 0x000003FF
+_080129FC: .4byte 0x06010000
+_08012A00: .4byte 0x03002790
+_08012A04:
+	adds r0, r7, #0
+	ldrh r3, [r4]
+	ands r0, r3
+	lsrs r0, r0, #0xc
+	adds r1, r7, #0
+	ldrh r2, [r4, #2]
+	ands r1, r2
+	lsrs r1, r1, #0xe
+	adds r0, r0, r1
+	lsls r0, r0, #1
+	add r0, sb
+	ldrb r1, [r0]
+	adds r3, r1, #0
+	muls r3, r1, r3
+	adds r0, r3, #0
+	ldr r2, _08012A50 @ =0x000003FF
+	ands r0, r2
+_08012A26:
+	lsls r0, r0, #5
+	add r8, r0
+	adds r4, #6
+	movs r3, #2
+	add sl, r3
+	adds r0, r5, #0
+	subs r5, #1
+	cmp r0, #0
+	bgt _08012988
+_08012A38:
+	movs r0, #0
+	ldr r1, [sp]
+	strb r0, [r1]
+_08012A3E:
+	add sp, #4
+	pop {r3, r4, r5}
+	mov r8, r3
+	mov sb, r4
+	mov sl, r5
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08012A50: .4byte 0x000003FF
+
+	thumb_func_start sub_08012A54
+sub_08012A54: @ 0x08012A54
+	str r1, [r0]
+	ldrh r3, [r1]
+	lsrs r2, r3, #1
+	lsls r2, r2, #1
+	adds r2, r1, r2
+	str r2, [r0, #4]
+	ldrh r3, [r1, #2]
+	lsrs r2, r3, #1
+	lsls r2, r2, #1
+	adds r1, r1, r2
+	ldrh r3, [r1]
+	lsrs r2, r3, #1
+	lsls r2, r2, #1
+	adds r1, r1, r2
+	str r1, [r0, #8]
+	str r1, [r0, #0xc]
+	bx lr
+	.align 2, 0
+
+	thumb_func_start sub_08012A78
+sub_08012A78: @ 0x08012A78
+	push {r4, r5, lr}
+	adds r4, r0, #0
+	movs r0, #0
+	ldrh r5, [r4, #0x1a]
+	strh r0, [r4, #0x18]
+	movs r0, #0x80
+	lsls r0, r0, #1
+	strh r0, [r4, #0x1a]
+	adds r0, r4, #0
+	bl sub_08012718
+	strh r5, [r4, #0x1a]
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08012A98
+sub_08012A98: @ 0x08012A98
+	push {r4, r5, lr}
+	adds r4, r0, #0
+	lsls r5, r2, #0x10
+	lsrs r5, r5, #0x10
+	bl sub_08012A54
+	movs r1, #0
+	str r1, [r4, #0x24]
+	movs r0, #0
+	strh r1, [r4, #0x22]
+	strh r1, [r4, #0x18]
+	strh r5, [r4, #0x1e]
+	str r1, [r4, #0x14]
+	adds r2, r4, #0
+	adds r2, #0x21
+	strb r0, [r2]
+	strh r1, [r4, #0x18]
+	movs r0, #0x80
+	lsls r0, r0, #1
+	strh r0, [r4, #0x1a]
+	strh r1, [r4, #0x1c]
+	adds r0, r4, #0
+	bl sub_08012718
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08012AD0
+sub_08012AD0: @ 0x08012AD0
+	adds r3, r0, #0
+	movs r2, #0
+	ldr r1, _08012AE0 @ =0x03000110
+_08012AD6:
+	ldr r0, [r1]
+	cmp r0, r3
+	bne _08012AE4
+	adds r0, r1, #0
+	b _08012AEE
+	.align 2, 0
+_08012AE0: .4byte 0x03000110
+_08012AE4:
+	adds r1, #0x28
+	adds r2, #1
+	cmp r2, #0x13
+	ble _08012AD6
+	movs r0, #0
+_08012AEE:
+	bx lr
+
+	thumb_func_start sub_08012AF0
+sub_08012AF0: @ 0x08012AF0
+	push {r4, r5, r6, lr}
+	mov r6, sb
+	mov r5, r8
+	push {r5, r6}
+	mov r8, r1
+	mov sb, r2
+	adds r6, r3, #0
+	ldr r5, [sp, #0x18]
+	ldr r1, [sp, #0x1c]
+	lsls r1, r1, #0x10
+	lsrs r1, r1, #0x10
+	bl StartSpriteAnim
+	adds r4, r0, #0
+	adds r1, r5, #0
+	bl sub_080128F0
+	strh r6, [r4, #0x22]
+	ldr r0, _08012B34 @ =0x08C016FC
+	movs r1, #3
+	bl Proc_Start
+	str r4, [r0, #0x50]
+	mov r1, r8
+	str r1, [r0, #0x54]
+	mov r1, sb
+	str r1, [r0, #0x58]
+	pop {r3, r4}
+	mov r8, r3
+	mov sb, r4
+	pop {r4, r5, r6}
+	pop {r1}
+	bx r1
+	.align 2, 0
+_08012B34: .4byte 0x08C016FC
+
+	thumb_func_start sub_08012B38
+sub_08012B38: @ 0x08012B38
+	push {r4, lr}
+	adds r4, r0, #0
+	ldr r0, [r4, #0x50]
+	ldr r1, [r4, #0x54]
+	ldr r2, [r4, #0x58]
+	bl sub_08012694
+	lsls r0, r0, #0x18
+	cmp r0, #0
+	bne _08012B5E
+	ldr r0, [r4, #0x50]
+	cmp r0, #0
+	beq _08012B58
+	ldr r0, [r0]
+	cmp r0, #0
+	bne _08012B5E
+_08012B58:
+	adds r0, r4, #0
+	bl sub_08004460
+_08012B5E:
+	pop {r4}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08012B64
+sub_08012B64: @ 0x08012B64
+	push {lr}
+	ldr r0, [r0, #0x50]
+	bl sub_08012680
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08012B70
+sub_08012B70: @ 0x08012B70
+	push {r4, lr}
+	adds r4, r0, #0
+	str r1, [r4, #0x54]
+	str r2, [r4, #0x58]
+	movs r0, #1
+	rsbs r0, r0, #0
+	cmp r3, r0
+	beq _08012B84
+	ldr r0, [r4, #0x50]
+	strh r3, [r0, #0x22]
+_08012B84:
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start EndSpriteAnimProc
+EndSpriteAnimProc: @ 0x08012B8C
+	push {lr}
+	bl sub_08004460
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start EndEachSpriteAnimProc
+EndEachSpriteAnimProc: @ 0x08012B98
+	push {lr}
+	ldr r0, _08012BA4 @ =0x08C016FC
+	bl sub_08004748
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08012BA4: .4byte 0x08C016FC
+
+	thumb_func_start SpriteAnimProcExists
+SpriteAnimProcExists: @ 0x08012BA8
+	push {lr}
+	ldr r0, _08012BBC @ =0x08C016FC
+	bl sub_08004584
+	cmp r0, #0
+	beq _08012BB6
+	movs r0, #1
+_08012BB6:
+	pop {r1}
+	bx r1
+	.align 2, 0
+_08012BBC: .4byte 0x08C016FC
diff --git a/asm/unit.s b/asm/unit.s
index 66a32fb..d413e2c 100644
--- a/asm/unit.s
+++ b/asm/unit.s
@@ -3,539 +3,6 @@
 	.include "macro.inc"
 	.syntax unified
 
-	thumb_func_start InitUnits
-InitUnits: @ 0x080178C8
-	push {r4, r5, r6, r7, lr}
-	movs r5, #0
-	ldr r7, _080178F4 @ =0x08C0216C
-	movs r6, #0xff
-_080178D0:
-	adds r0, r5, #0
-	ands r0, r6
-	lsls r0, r0, #2
-	adds r0, r0, r7
-	ldr r4, [r0]
-	cmp r4, #0
-	beq _080178E6
-	adds r0, r4, #0
-	bl ClearUnit
-	strb r5, [r4, #0xb]
-_080178E6:
-	adds r5, #1
-	cmp r5, #0xff
-	ble _080178D0
-	pop {r4, r5, r6, r7}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_080178F4: .4byte 0x08C0216C
-
-	thumb_func_start ClearUnit
-ClearUnit: @ 0x080178F8
-	push {r4, r5, lr}
-	sub sp, #4
-	adds r4, r0, #0
-	ldrb r5, [r4, #0xb]
-	mov r1, sp
-	movs r0, #0
-	strh r0, [r1]
-	ldr r2, _0801791C @ =0x01000024
-	mov r0, sp
-	adds r1, r4, #0
-	bl CpuSet
-	strb r5, [r4, #0xb]
-	add sp, #4
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-_0801791C: .4byte 0x01000024
-
-	thumb_func_start CopyUnit
-CopyUnit: @ 0x08017920
-	push {r4, r5, lr}
-	adds r2, r0, #0
-	adds r4, r1, #0
-	ldrb r5, [r4, #0xb]
-	adds r0, r4, #0
-	adds r1, r2, #0
-	movs r2, #0x48
-	bl memcpy
-	strb r5, [r4, #0xb]
-	pop {r4, r5}
-	pop {r0}
-	bx r0
-	.align 2, 0
-
-	thumb_func_start GetFreeUnit
-GetFreeUnit: @ 0x0801793C
-	push {r4, r5, lr}
-	adds r3, r0, #0
-	adds r3, #0x40
-	adds r2, r0, #1
-	cmp r2, r3
-	bge _0801796A
-	ldr r5, _08017960 @ =0x08C0216C
-	movs r4, #0xff
-_0801794C:
-	adds r0, r2, #0
-	ands r0, r4
-	lsls r0, r0, #2
-	adds r0, r0, r5
-	ldr r1, [r0]
-	ldr r0, [r1]
-	cmp r0, #0
-	bne _08017964
-	adds r0, r1, #0
-	b _0801796C
-	.align 2, 0
-_08017960: .4byte 0x08C0216C
-_08017964:
-	adds r2, #1
-	cmp r2, r3
-	blt _0801794C
-_0801796A:
-	movs r0, #0
-_0801796C:
-	pop {r4, r5}
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start GetFreeBlueUnit
-GetFreeBlueUnit: @ 0x08017974
-	push {r4, r5, lr}
-	movs r5, #0x40
-	ldrb r4, [r0]
-	bl sub_080307E4
-	movs r2, #1
-	ldr r4, _08017998 @ =0x08C0216C
-	movs r3, #0xff
-_08017984:
-	adds r0, r2, #0
-	ands r0, r3
-	lsls r0, r0, #2
-	adds r0, r0, r4
-	ldr r1, [r0]
-	ldr r0, [r1]
-	cmp r0, #0
-	bne _0801799C
-	adds r0, r1, #0
-	b _080179A4
-	.align 2, 0
-_08017998: .4byte 0x08C0216C
-_0801799C:
-	adds r2, #1
-	cmp r2, r5
-	blt _08017984
-	movs r0, #0
-_080179A4:
-	pop {r4, r5}
-	pop {r1}
-	bx r1
-	.align 2, 0
-
-	thumb_func_start GetUnitFogViewRange
-GetUnitFogViewRange: @ 0x080179AC
-	adds r2, r0, #0
-	ldr r0, _080179D4 @ =0x0202BBF4
-	ldrb r3, [r0, #0xd]
-	ldr r0, [r2]
-	ldr r1, [r2, #4]
-	ldr r0, [r0, #0x28]
-	ldr r1, [r1, #0x28]
-	orrs r0, r1
-	movs r1, #8
-	ands r0, r1
-	cmp r0, #0
-	beq _080179C6
-	adds r3, #5
-_080179C6:
-	adds r0, r2, #0
-	adds r0, #0x31
-	ldrb r0, [r0]
-	lsls r0, r0, #0x1c
-	lsrs r0, r0, #0x1c
-	adds r0, r3, r0
-	bx lr
-	.align 2, 0
-_080179D4: .4byte 0x0202BBF4
-
-	thumb_func_start SetUnitStatus
-SetUnitStatus: @ 0x080179D8
-	adds r2, r1, #0
-	cmp r2, #0
-	bne _080179E2
-	adds r0, #0x30
-	b _080179EC
-_080179E2:
-	adds r0, #0x30
-	movs r1, #0xf
-	ands r2, r1
-	movs r1, #0x50
-	orrs r2, r1
-_080179EC:
-	strb r2, [r0]
-	bx lr
-
-	thumb_func_start GetUnitStatusName
-GetUnitStatusName: @ 0x080179F0
-	adds r0, #0x30
-	movs r3, #0xf
-	lsls r2, r2, #4
-	ands r1, r3
-	orrs r2, r1
-	strb r2, [r0]
-	bx lr
-	.align 2, 0
-
-	thumb_func_start GetUnitSMSId
-GetUnitSMSId: @ 0x08017A00
-	push {lr}
-	adds r2, r0, #0
-	ldr r0, [r2, #0xc]
-	movs r1, #0x80
-	lsls r1, r1, #4
-	ands r0, r1
-	cmp r0, #0
-	bne _08017A16
-	ldr r0, [r2, #4]
-	ldrb r0, [r0, #6]
-	b _08017A40
-_08017A16:
-	ldrb r0, [r2, #0x1c]
-	bl sub_0802C7D8
-	ldrb r0, [r0, #3]
-	cmp r0, #0x35
-	beq _08017A36
-	cmp r0, #0x35
-	bgt _08017A2C
-	cmp r0, #0x34
-	beq _08017A32
-	b _08017A3E
-_08017A2C:
-	cmp r0, #0x36
-	beq _08017A3A
-	b _08017A3E
-_08017A32:
-	movs r0, #0x4f
-	b _08017A40
-_08017A36:
-	movs r0, #0x50
-	b _08017A40
-_08017A3A:
-	movs r0, #0x51
-	b _08017A40
-_08017A3E:
-	movs r0, #0
-_08017A40:
-	pop {r1}
-	bx r1
-
-	thumb_func_start UnitAddItem
-UnitAddItem: @ 0x08017A44
-	movs r3, #0
-	adds r2, r0, #0
-	adds r2, #0x1e
-_08017A4A:
-	ldrh r0, [r2]
-	cmp r0, #0
-	bne _08017A56
-	strh r1, [r2]
-	movs r0, #1
-	b _08017A60
-_08017A56:
-	adds r2, #2
-	adds r3, #1
-	cmp r3, #4
-	ble _08017A4A
-	movs r0, #0
-_08017A60:
-	bx lr
-	.align 2, 0
-
-	thumb_func_start UnitClearInventory
-UnitClearInventory: @ 0x08017A64
-	movs r2, #0
-	movs r1, #4
-	adds r0, #0x26
-_08017A6A:
-	strh r2, [r0]
-	subs r0, #2
-	subs r1, #1
-	cmp r1, #0
-	bge _08017A6A
-	bx lr
-	.align 2, 0
-
-	thumb_func_start UnitRemoveInvalidItems
-UnitRemoveInvalidItems: @ 0x08017A78
-	push {r4, r5, r6, lr}
-	sub sp, #0xc
-	mov r2, sp
-	movs r3, #0
-	adds r5, r0, #0
-	adds r5, #0x1e
-	adds r4, r5, #0
-	movs r6, #0
-_08017A88:
-	lsls r0, r3, #1
-	adds r1, r4, r0
-	ldrh r0, [r1]
-	cmp r0, #0
-	beq _08017A96
-	strh r0, [r2]
-	adds r2, #2
-_08017A96:
-	strh r6, [r1]
-	adds r0, r3, #1
-	lsls r0, r0, #0x10
-	lsrs r3, r0, #0x10
-	cmp r3, #4
-	bls _08017A88
-	movs r0, #0
-	strh r0, [r2]
-	movs r3, #0
-	adds r4, r5, #0
-_08017AAA:
-	lsls r2, r3, #1
-	mov r1, sp
-	adds r0, r1, r2
-	ldrh r1, [r0]
-	cmp r1, #0
-	beq _08017AC4
-	adds r0, r4, r2
-	strh r1, [r0]
-	adds r0, r3, #1
-	lsls r0, r0, #0x10
-	lsrs r3, r0, #0x10
-	cmp r3, #4
-	bls _08017AAA
-_08017AC4:
-	add sp, #0xc
-	pop {r4, r5, r6}
-	pop {r0}
-	bx r0
-
-	thumb_func_start GetUnitItemCount
-GetUnitItemCount: @ 0x08017ACC
-	movs r2, #4
-	adds r1, r0, #0
-	adds r1, #0x26
-_08017AD2:
-	ldrh r0, [r1]
-	cmp r0, #0
-	beq _08017ADC
-	adds r0, r2, #1
-	b _08017AE6
-_08017ADC:
-	subs r1, #2
-	subs r2, #1
-	cmp r2, #0
-	bge _08017AD2
-	movs r0, #0
-_08017AE6:
-	bx lr
-
-	thumb_func_start UnitHasItem
-UnitHasItem: @ 0x08017AE8
-	push {r4, r5, r6, lr}
-	adds r4, r0, #0
-	adds r5, r1, #0
-	adds r0, r5, #0
-	bl GetItemIndex
-	adds r5, r0, #0
-	movs r6, #0
-	ldrh r0, [r4, #0x1e]
-	cmp r0, #0
-	beq _08017B1C
-	adds r4, #0x1e
-_08017B00:
-	ldrh r0, [r4]
-	bl GetItemIndex
-	cmp r0, r5
-	bne _08017B0E
-	movs r0, #1
-	b _08017B1E
-_08017B0E:
-	adds r4, #2
-	adds r6, #1
-	cmp r6, #4
-	bgt _08017B1C
-	ldrh r0, [r4]
-	cmp r0, #0
-	bne _08017B00
-_08017B1C:
-	movs r0, #0
-_08017B1E:
-	pop {r4, r5, r6}
-	pop {r1}
-	bx r1
-
-	thumb_func_start sub_08017B24
-sub_08017B24: @ 0x08017B24
-	push {r4, r5, lr}
-	adds r4, r0, #0
-	movs r5, #0
-	b _08017B36
-_08017B2C:
-	adds r0, r4, #0
-	bl LoadUnit
-	adds r4, #0x10
-	adds r5, #1
-_08017B36:
-	ldrb r0, [r4]
-	cmp r0, #0
-	bne _08017B2C
-	adds r0, r5, #0
-	pop {r4, r5}
-	pop {r1}
-	bx r1
-
-	thumb_func_start sub_08017B44
-sub_08017B44: @ 0x08017B44
-	adds r2, r0, #0
-	movs r0, #0x14
-	ldrsb r0, [r2, r0]
-	cmp r0, #3
-	ble _08017B56
-	lsrs r1, r0, #0x1f
-	adds r0, r0, r1
-	asrs r0, r0, #1
-	strb r0, [r2, #0x14]
-_08017B56:
-	movs r0, #0x17
-	ldrsb r0, [r2, r0]
-	cmp r0, #3
-	ble _08017B66
-	lsrs r1, r0, #0x1f
-	adds r0, r0, r1
-	asrs r0, r0, #1
-	strb r0, [r2, #0x17]
-_08017B66:
-	movs r0, #0x18
-	ldrsb r0, [r2, r0]
-	cmp r0, #3
-	ble _08017B76
-	lsrs r1, r0, #0x1f
-	adds r0, r0, r1
-	asrs r0, r0, #1
-	strb r0, [r2, #0x18]
-_08017B76:
-	bx lr
-
-	thumb_func_start LoadUnit
-LoadUnit: @ 0x08017B78
-	push {r4, r5, lr}
-	adds r5, r0, #0
-	movs r4, #0
-	ldrb r1, [r5, #3]
-	lsls r0, r1, #0x1d
-	lsrs r0, r0, #0x1e
-	cmp r0, #1
-	beq _08017BA4
-	cmp r0, #1
-	bgt _08017B92
-	cmp r0, #0
-	beq _08017B98
-	b _08017BAC
-_08017B92:
-	cmp r0, #2
-	beq _08017BA0
-	b _08017BAC
-_08017B98:
-	adds r0, r5, #0
-	bl GetFreeBlueUnit
-	b _08017BAA
-_08017BA0:
-	movs r0, #0x80
-	b _08017BA6
-_08017BA4:
-	movs r0, #0x40
-_08017BA6:
-	bl GetFreeUnit
-_08017BAA:
-	adds r4, r0, #0
-_08017BAC:
-	cmp r4, #0
-	bne _08017BB4
-	movs r0, #0
-	b _08017C52
-_08017BB4:
-	adds r0, r4, #0
-	bl ClearUnit
-	adds r0, r4, #0
-	adds r1, r5, #0
-	bl UnitInitFromDefinition
-	ldr r1, [r4]
-	adds r0, r4, #0
-	bl UnitLoadStatsFromChracter
-	adds r0, r4, #0
-	bl sub_0802C2D4
-	movs r0, #1
-	ldrb r1, [r5, #3]
-	ands r0, r1
-	cmp r0, #0
-	beq _08017C0A
-	movs r0, #0xc0
-	ldrb r1, [r4, #0xb]
-	ands r0, r1
-	cmp r0, #0
-	bne _08017BF4
-	adds r0, r4, #0
-	bl UnitAutolevelRealistic
-	adds r0, r4, #0
-	adds r1, r5, #0
-	bl UnitAutolevelWExp
-	b _08017C0A
-_08017BF4:
-	adds r0, r4, #0
-	bl UnitAutolevel
-	adds r0, r4, #0
-	adds r1, r5, #0
-	bl UnitAutolevelWExp
-	ldrb r1, [r5, #2]
-	adds r0, r4, #0
-	adds r0, #0x38
-	strb r1, [r0]
-_08017C0A:
-	adds r0, r4, #0
-	bl FixROMUnitStructPtr
-	adds r0, r4, #0
-	bl UnitLoadSupports
-	ldr r0, [r4]
-	ldr r1, [r4, #4]
-	ldr r0, [r0, #0x28]
-	ldr r1, [r1, #0x28]
-	orrs r0, r1
-	movs r1, #0x80
-	lsls r1, r1, #0x14
-	ands r0, r1
-	cmp r0, #0
-	beq _08017C34
-	ldr r0, [r4, #0xc]
-	movs r1, #0x80
-	lsls r1, r1, #5
-	orrs r0, r1
-	str r0, [r4, #0xc]
-_08017C34:
-	adds r0, r4, #0
-	bl UnitCheckStatCaps
-	adds r0, r4, #0
-	bl sub_08016BC4
-	lsls r0, r0, #0x10
-	lsrs r0, r0, #0x10
-	bl sub_080164BC
-	movs r1, #0x12
-	ldrsb r1, [r4, r1]
-	adds r1, r1, r0
-	strb r1, [r4, #0x13]
-	adds r0, r4, #0
-_08017C52:
-	pop {r4, r5}
-	pop {r1}
-	bx r1
-
 	thumb_func_start UnitInitFromDefinition
 UnitInitFromDefinition: @ 0x08017C58
 	push {r4, r5, r6, r7, lr}
@@ -592,7 +59,7 @@ _08017C96:
 	adds r7, r4, #0
 _08017CB4:
 	ldrb r0, [r4]
-	bl sub_080165F0
+	bl MakeNewItem
 	adds r1, r0, #0
 	adds r0, r5, #0
 	bl UnitAddItem
@@ -606,7 +73,7 @@ _08017CB4:
 _08017CD0:
 	adds r0, r5, #0
 	adds r1, r6, #0
-	bl sub_08037804
+	bl CharStoreAI
 	pop {r4, r5, r6, r7}
 	pop {r0}
 	bx r0
@@ -628,7 +95,7 @@ UnitLoadItemsFromDefinition: @ 0x08017CE4
 	adds r6, r4, #0
 _08017CFC:
 	ldrb r0, [r4]
-	bl sub_080165F0
+	bl MakeNewItem
 	adds r1, r0, #0
 	adds r0, r5, #0
 	bl UnitAddItem
@@ -940,10 +407,10 @@ UnitApplyBonusLevels: @ 0x08017F3C
 	adds r0, r4, #0
 	bl UnitCheckStatCaps
 	adds r0, r4, #0
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
-	bl sub_080164BC
+	bl GetItemHpBonus
 	movs r1, #0x12
 	ldrsb r1, [r4, r1]
 	adds r1, r1, r0
@@ -1192,7 +659,7 @@ GetUnitFromCharId: @ 0x08018124
 	push {r4, r5, lr}
 	adds r3, r0, #0
 	movs r2, #1
-	ldr r5, _0801814C @ =0x08C0216C
+	ldr r5, _0801814C @ =gUnitLut
 	movs r4, #0xff
 _0801812E:
 	adds r0, r2, #0
@@ -1211,7 +678,7 @@ _0801812E:
 	adds r0, r1, #0
 	b _08018158
 	.align 2, 0
-_0801814C: .4byte 0x08C0216C
+_0801814C: .4byte gUnitLut
 _08018150:
 	adds r2, #1
 	cmp r2, #0xff
@@ -1232,7 +699,7 @@ GetUnitFromCharIdAndFaction: @ 0x08018160
 	adds r1, #1
 	cmp r1, r3
 	bge _0801819A
-	ldr r6, _08018190 @ =0x08C0216C
+	ldr r6, _08018190 @ =gUnitLut
 	movs r5, #0xff
 _08018172:
 	adds r0, r1, #0
@@ -1251,7 +718,7 @@ _08018172:
 	adds r0, r2, #0
 	b _0801819C
 	.align 2, 0
-_08018190: .4byte 0x08C0216C
+_08018190: .4byte gUnitLut
 _08018194:
 	adds r1, #1
 	cmp r1, r3
@@ -1318,7 +785,7 @@ UnitDrop: @ 0x080181F8
 	adds r5, r0, #0
 	adds r6, r1, #0
 	adds r7, r2, #0
-	ldr r1, _08018244 @ =0x08C0216C
+	ldr r1, _08018244 @ =gUnitLut
 	ldrb r2, [r5, #0x1b]
 	lsls r0, r2, #2
 	adds r0, r0, r1
@@ -1337,7 +804,7 @@ UnitDrop: @ 0x080181F8
 	movs r0, #0xc0
 	ldrb r1, [r2, #0xb]
 	ands r0, r1
-	ldr r1, _08018248 @ =0x0202BBF4
+	ldr r1, _08018248 @ =gPlaySt
 	ldrb r1, [r1, #0xf]
 	cmp r0, r1
 	bne _08018234
@@ -1354,15 +821,15 @@ _08018234:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08018244: .4byte 0x08C0216C
-_08018248: .4byte 0x0202BBF4
+_08018244: .4byte gUnitLut
+_08018248: .4byte gPlaySt
 
 	thumb_func_start UnitGive
 UnitGive: @ 0x0801824C
 	push {r4, r5, r6, lr}
 	adds r4, r0, #0
 	adds r6, r1, #0
-	ldr r1, _0801827C @ =0x08C0216C
+	ldr r1, _0801827C @ =gUnitLut
 	ldrb r2, [r4, #0x1b]
 	lsls r0, r2, #2
 	adds r0, r0, r1
@@ -1381,7 +848,7 @@ UnitGive: @ 0x0801824C
 	pop {r1}
 	bx r1
 	.align 2, 0
-_0801827C: .4byte 0x08C0216C
+_0801827C: .4byte gUnitLut
 
 	thumb_func_start UnitKill
 UnitKill: @ 0x08018280
@@ -1449,7 +916,7 @@ _080182EC:
 	ldrb r0, [r4, #0x1b]
 	cmp r0, #0
 	beq _08018308
-	ldr r1, _08018314 @ =0x08C0216C
+	ldr r1, _08018314 @ =gUnitLut
 	ldrb r2, [r4, #0x1b]
 	lsls r0, r2, #2
 	adds r0, r0, r1
@@ -1462,7 +929,7 @@ _08018308:
 	bx r0
 	.align 2, 0
 _08018310: .4byte 0xFFFFEFFF
-_08018314: .4byte 0x08C0216C
+_08018314: .4byte gUnitLut
 
 	thumb_func_start UnitFinalizeMovement
 UnitFinalizeMovement: @ 0x08018318
@@ -1473,7 +940,7 @@ UnitFinalizeMovement: @ 0x08018318
 	ands r0, r1
 	cmp r0, #0
 	beq _08018338
-	ldr r1, _08018358 @ =0x08C0216C
+	ldr r1, _08018358 @ =gUnitLut
 	ldrb r2, [r4, #0x1b]
 	lsls r0, r2, #2
 	adds r0, r0, r1
@@ -1490,7 +957,7 @@ _08018338:
 	cmp r0, #0
 	beq _08018352
 	ldrb r0, [r4, #0x1c]
-	bl sub_0802C7D8
+	bl GetTrap
 	ldrb r1, [r4, #0x10]
 	strb r1, [r0]
 	ldrb r1, [r4, #0x11]
@@ -1500,7 +967,7 @@ _08018352:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08018358: .4byte 0x08C0216C
+_08018358: .4byte gUnitLut
 
 	thumb_func_start UnitGetDeathDropLocation
 UnitGetDeathDropLocation: @ 0x0801835C
@@ -1515,7 +982,7 @@ UnitGetDeathDropLocation: @ 0x0801835C
 	str r2, [sp, #4]
 	ldr r0, _08018460 @ =0x0000270F
 	str r0, [sp, #8]
-	ldr r1, _08018464 @ =0x08C0216C
+	ldr r1, _08018464 @ =gUnitLut
 	movs r4, #0xff
 	mov r2, r8
 	ldrb r2, [r2, #0x1b]
@@ -1637,7 +1104,7 @@ _0801844E:
 	b _08018488
 	.align 2, 0
 _08018460: .4byte 0x0000270F
-_08018464: .4byte 0x08C0216C
+_08018464: .4byte gUnitLut
 _08018468: .4byte 0x08C52F22
 _0801846C: .4byte 0x030045B0
 _08018470: .4byte 0x0202E3D8
@@ -1836,20 +1303,20 @@ _080185EA:
 	movs r4, #0x13
 	ldrsb r4, [r5, r4]
 	adds r0, r5, #0
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
-	bl sub_080164BC
+	bl GetItemHpBonus
 	movs r1, #0x12
 	ldrsb r1, [r5, r1]
 	adds r1, r1, r0
 	cmp r4, r1
 	ble _08018630
 	adds r0, r5, #0
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
-	bl sub_080164BC
+	bl GetItemHpBonus
 	movs r1, #0x12
 	ldrsb r1, [r5, r1]
 	adds r1, r1, r0
@@ -1878,12 +1345,12 @@ _08018654: .4byte 0x0203A858
 	thumb_func_start ClearActiveFactionGrayedStates
 ClearActiveFactionGrayedStates: @ 0x08018658
 	push {r4, r5, r6, lr}
-	ldr r0, _080186E0 @ =0x0202BBF4
+	ldr r0, _080186E0 @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	cmp r0, #0
 	bne _080186A2
 	movs r4, #1
-	ldr r5, _080186E4 @ =0x08C0216C
+	ldr r5, _080186E4 @ =gUnitLut
 _08018666:
 	movs r0, #0xff
 	ands r0, r4
@@ -1916,13 +1383,13 @@ _0801869C:
 	cmp r4, #0x3f
 	ble _08018666
 _080186A2:
-	ldr r1, _080186E0 @ =0x0202BBF4
+	ldr r1, _080186E0 @ =gPlaySt
 	ldrb r0, [r1, #0xf]
 	adds r2, r0, #1
 	adds r0, #0x40
 	cmp r2, r0
 	bge _080186DA
-	ldr r6, _080186E4 @ =0x08C0216C
+	ldr r6, _080186E4 @ =gUnitLut
 	movs r5, #0xff
 	ldr r4, _080186EC @ =0xFFFFFBBD
 	adds r3, r1, #0
@@ -1951,8 +1418,8 @@ _080186DA:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080186E0: .4byte 0x0202BBF4
-_080186E4: .4byte 0x08C0216C
+_080186E0: .4byte gPlaySt
+_080186E4: .4byte gUnitLut
 _080186E8: .4byte 0x0001000E
 _080186EC: .4byte 0xFFFFFBBD
 
@@ -1965,14 +1432,14 @@ TickActiveFactionTurn: @ 0x080186F0
 	mov r8, r0
 	movs r1, #0
 	bl sub_0804B4C0
-	ldr r0, _08018708 @ =0x0202BBF4
+	ldr r0, _08018708 @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 	adds r5, r0, #1
 	b _080187AC
 	.align 2, 0
-_08018708: .4byte 0x0202BBF4
+_08018708: .4byte gPlaySt
 _0801870C:
-	ldr r1, _080187D8 @ =0x08C0216C
+	ldr r1, _080187D8 @ =gUnitLut
 	movs r0, #0xff
 	ands r0, r5
 	lsls r0, r0, #2
@@ -2052,7 +1519,7 @@ _08018772:
 	bl sub_0804B4D8
 _080187A6:
 	adds r5, #1
-	ldr r0, _080187E0 @ =0x0202BBF4
+	ldr r0, _080187E0 @ =gPlaySt
 	ldrb r0, [r0, #0xf]
 _080187AC:
 	adds r0, #0x40
@@ -2074,15 +1541,15 @@ _080187CE:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_080187D8: .4byte 0x08C0216C
+_080187D8: .4byte gUnitLut
 _080187DC: .4byte 0x0001002C
-_080187E0: .4byte 0x0202BBF4
+_080187E0: .4byte gPlaySt
 
 	thumb_func_start SetAllUnitNotBackSprite
 SetAllUnitNotBackSprite: @ 0x080187E4
 	push {r4, r5, lr}
 	movs r2, #1
-	ldr r5, _08018814 @ =0x08C0216C
+	ldr r5, _08018814 @ =gUnitLut
 	movs r4, #0xff
 	ldr r3, _08018818 @ =0xFFFFFEFF
 _080187EE:
@@ -2107,7 +1574,7 @@ _08018808:
 	pop {r0}
 	bx r0
 	.align 2, 0
-_08018814: .4byte 0x08C0216C
+_08018814: .4byte gUnitLut
 _08018818: .4byte 0xFFFFFEFF
 
 	thumb_func_start UnitUpdateUsedItem
@@ -2191,7 +1658,7 @@ _0801889C:
 GetUnitMagBy2Range: @ 0x080188A4
 	push {r4, lr}
 	adds r4, r0, #0
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
 	bl sub_080164E8
@@ -2398,7 +1865,7 @@ GetCombinedEnemyWeaponUsabilityBits: @ 0x08018A14
 	push {r4, r5, r6, lr}
 	movs r5, #0
 	movs r4, #0x81
-	ldr r6, _08018A48 @ =0x08C0216C
+	ldr r6, _08018A48 @ =gUnitLut
 _08018A1C:
 	movs r0, #0xff
 	ands r0, r4
@@ -2422,7 +1889,7 @@ _08018A38:
 	pop {r1}
 	bx r1
 	.align 2, 0
-_08018A48: .4byte 0x08C0216C
+_08018A48: .4byte gUnitLut
 
 	thumb_func_start CanUnitMove
 CanUnitMove: @ 0x08018A4C
@@ -2525,7 +1992,7 @@ IsPositionMagicSealed: @ 0x08018B0C
 	adds r5, r0, #0
 	adds r4, r1, #0
 	movs r3, #0x81
-	ldr r6, _08018B5C @ =0x08C0216C
+	ldr r6, _08018B5C @ =gUnitLut
 _08018B16:
 	movs r0, #0xff
 	ands r0, r3
@@ -2564,7 +2031,7 @@ _08018B48:
 	ble _08018B68
 	b _08018B6C
 	.align 2, 0
-_08018B5C: .4byte 0x08C0216C
+_08018B5C: .4byte gUnitLut
 _08018B60:
 	subs r0, r4, r2
 	adds r0, r1, r0
@@ -2640,7 +2107,7 @@ GetUnitMovementCost: @ 0x08018BC4
 	.align 2, 0
 _08018BD8: .4byte 0x08C52FA4
 _08018BDC:
-	ldr r0, _08018BF4 @ =0x0202BBF4
+	ldr r0, _08018BF4 @ =gPlaySt
 	ldrb r0, [r0, #0x15]
 	cmp r0, #1
 	blt _08018BFE
@@ -2652,7 +2119,7 @@ _08018BDC:
 	ldr r0, [r0, #0x3c]
 	b _08018C02
 	.align 2, 0
-_08018BF4: .4byte 0x0202BBF4
+_08018BF4: .4byte gPlaySt
 _08018BF8:
 	ldr r0, [r2, #4]
 	ldr r0, [r0, #0x40]
@@ -2685,7 +2152,7 @@ _08018C1C: .4byte 0x08C4F468
 UpdatePrevDeployStates: @ 0x08018C20
 	push {r4, r5, lr}
 	movs r4, #1
-	ldr r5, _08018C58 @ =0x08C0216C
+	ldr r5, _08018C58 @ =gUnitLut
 _08018C26:
 	movs r0, #0xff
 	ands r0, r4
@@ -2712,7 +2179,7 @@ _08018C26:
 	str r1, [r2, #0xc]
 	b _08018C62
 	.align 2, 0
-_08018C58: .4byte 0x08C0216C
+_08018C58: .4byte gUnitLut
 _08018C5C:
 	ldr r0, _08018C74 @ =0xFFEFFFFF
 	ands r1, r0
@@ -2732,7 +2199,7 @@ _08018C74: .4byte 0xFFEFFFFF
 LoadUnitPrepScreenPositions: @ 0x08018C78
 	push {r4, r5, r6, lr}
 	movs r4, #1
-	ldr r6, _08018CAC @ =0x08C0216C
+	ldr r6, _08018CAC @ =gUnitLut
 	ldr r5, _08018CB0 @ =0xFFEFFFFF
 _08018C80:
 	movs r0, #0xff
@@ -2758,7 +2225,7 @@ _08018C80:
 	str r1, [r2, #0xc]
 	b _08018CB8
 	.align 2, 0
-_08018CAC: .4byte 0x08C0216C
+_08018CAC: .4byte gUnitLut
 _08018CB0: .4byte 0xFFEFFFFF
 _08018CB4:
 	ands r1, r5
@@ -2775,8 +2242,8 @@ _08018CB8:
 ClearTemporaryUnits: @ 0x08018CC4
 	push {r4, r5, lr}
 	movs r3, #1
-	ldr r5, _08018CF4 @ =0x0202BBF4
-	ldr r4, _08018CF8 @ =0x08C0216C
+	ldr r5, _08018CF4 @ =gPlaySt
+	ldr r4, _08018CF8 @ =gUnitLut
 _08018CCC:
 	movs r0, #0xff
 	ands r0, r3
@@ -2798,8 +2265,8 @@ _08018CCC:
 	orrs r1, r0
 	b _08018D00
 	.align 2, 0
-_08018CF4: .4byte 0x0202BBF4
-_08018CF8: .4byte 0x08C0216C
+_08018CF4: .4byte gPlaySt
+_08018CF8: .4byte gUnitLut
 _08018CFC:
 	ldr r0, _08018D18 @ =0xFFDFFFFF
 	ands r1, r0
@@ -2832,7 +2299,7 @@ _08018D22:
 	cmp r0, #0
 	beq _08018D5E
 	movs r3, #1
-	ldr r5, _08018D6C @ =0x08C0216C
+	ldr r5, _08018D6C @ =gUnitLut
 	movs r4, #0xff
 _08018D38:
 	adds r0, r3, #0
@@ -2862,14 +2329,14 @@ _08018D5E:
 	bx r0
 	.align 2, 0
 _08018D68: .4byte 0xFBFFFFFF
-_08018D6C: .4byte 0x08C0216C
+_08018D6C: .4byte gUnitLut
 
 	thumb_func_start IsUnitSlotAvailable
 IsUnitSlotAvailable: @ 0x08018D70
 	push {r4, r5, r6, lr}
 	bl sub_0807B32C
 	movs r4, #1
-	ldr r5, _08018DA4 @ =0x08C0216C
+	ldr r5, _08018DA4 @ =gUnitLut
 _08018D7A:
 	movs r0, #0xff
 	ands r0, r4
@@ -2891,7 +2358,7 @@ _08018D7A:
 	bl ClearUnit
 	b _08018DE2
 	.align 2, 0
-_08018DA4: .4byte 0x08C0216C
+_08018DA4: .4byte gUnitLut
 _08018DA8:
 	movs r0, #0x80
 	lsls r0, r0, #0xe
@@ -2930,14 +2397,14 @@ _08018DE2:
 	adds r4, #1
 	cmp r4, #0x3f
 	ble _08018D7A
-	ldr r1, _08018E58 @ =0x0202BBF4
+	ldr r1, _08018E58 @ =gPlaySt
 	movs r0, #0x10
 	ldrb r1, [r1, #0x14]
 	ands r0, r1
 	cmp r0, #0
 	beq _08018E24
 	movs r3, #1
-	ldr r6, _08018E5C @ =0x08C0216C
+	ldr r6, _08018E5C @ =gUnitLut
 	movs r5, #0xff
 	movs r4, #0
 _08018DFC:
@@ -2964,7 +2431,7 @@ _08018E1E:
 	ble _08018DFC
 _08018E24:
 	movs r4, #0x41
-	ldr r5, _08018E5C @ =0x08C0216C
+	ldr r5, _08018E5C @ =gUnitLut
 _08018E28:
 	movs r0, #0xff
 	ands r0, r4
@@ -2988,8 +2455,8 @@ _08018E42:
 	bx r0
 	.align 2, 0
 _08018E54: .4byte 0xFFFEFFFF
-_08018E58: .4byte 0x0202BBF4
-_08018E5C: .4byte 0x08C0216C
+_08018E58: .4byte gPlaySt
+_08018E5C: .4byte gUnitLut
 
 	thumb_func_start sub_08018E60
 sub_08018E60: @ 0x08018E60
@@ -2997,20 +2464,20 @@ sub_08018E60: @ 0x08018E60
 	adds r5, r0, #0
 	movs r4, #0x13
 	ldrsb r4, [r5, r4]
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
-	bl sub_080164BC
+	bl GetItemHpBonus
 	movs r1, #0x12
 	ldrsb r1, [r5, r1]
 	adds r1, r1, r0
 	cmp r4, r1
 	ble _08018E94
 	adds r0, r5, #0
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
-	bl sub_080164BC
+	bl GetItemHpBonus
 	movs r1, #0x12
 	ldrsb r1, [r5, r1]
 	adds r1, r1, r0
@@ -3027,10 +2494,10 @@ _08018E94:
 sub_08018EA0: @ 0x08018EA0
 	push {r4, lr}
 	adds r4, r0, #0
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
-	bl sub_080164BC
+	bl GetItemHpBonus
 	adds r1, r0, #0
 	movs r0, #0x12
 	ldrsb r0, [r4, r0]
@@ -3044,7 +2511,7 @@ sub_08018EA0: @ 0x08018EA0
 sub_08018EC0: @ 0x08018EC0
 	push {r4, lr}
 	adds r4, r0, #0
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
 	bl sub_080164E8
@@ -3061,7 +2528,7 @@ sub_08018EC0: @ 0x08018EC0
 sub_08018EE0: @ 0x08018EE0
 	push {r4, lr}
 	adds r4, r0, #0
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r2, r0, #0x10
 	ldr r0, [r4, #0xc]
@@ -3095,7 +2562,7 @@ _08018F16:
 sub_08018F20: @ 0x08018F20
 	push {r4, lr}
 	adds r4, r0, #0
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r2, r0, #0x10
 	ldr r0, [r4, #0xc]
@@ -3129,7 +2596,7 @@ _08018F56:
 sub_08018F60: @ 0x08018F60
 	push {r4, lr}
 	adds r4, r0, #0
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
 	bl sub_0801656C
@@ -3146,7 +2613,7 @@ sub_08018F60: @ 0x08018F60
 sub_08018F80: @ 0x08018F80
 	push {r4, lr}
 	adds r4, r0, #0
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
 	bl sub_08016598
@@ -3167,7 +2634,7 @@ sub_08018F80: @ 0x08018F80
 sub_08018FA8: @ 0x08018FA8
 	push {r4, lr}
 	adds r4, r0, #0
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
 	bl sub_080165C4
@@ -3259,20 +2726,20 @@ sub_08019030: @ 0x08019030
 	strb r1, [r5, #0x13]
 	movs r4, #0x13
 	ldrsb r4, [r5, r4]
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
-	bl sub_080164BC
+	bl GetItemHpBonus
 	movs r1, #0x12
 	ldrsb r1, [r5, r1]
 	adds r1, r1, r0
 	cmp r4, r1
 	ble _08019066
 	adds r0, r5, #0
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
-	bl sub_080164BC
+	bl GetItemHpBonus
 	movs r1, #0x12
 	ldrsb r1, [r5, r1]
 	adds r1, r1, r0
@@ -3289,20 +2756,20 @@ sub_0801906C: @ 0x0801906C
 	movs r4, #0x13
 	ldrsb r4, [r5, r4]
 	adds r4, r4, r1
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
-	bl sub_080164BC
+	bl GetItemHpBonus
 	movs r1, #0x12
 	ldrsb r1, [r5, r1]
 	adds r1, r1, r0
 	cmp r4, r1
 	ble _080190A0
 	adds r0, r5, #0
-	bl sub_08016BC4
+	bl GetUnitEquippedWeapon
 	lsls r0, r0, #0x10
 	lsrs r0, r0, #0x10
-	bl sub_080164BC
+	bl GetItemHpBonus
 	movs r1, #0x12
 	ldrsb r1, [r5, r1]
 	adds r4, r1, r0
@@ -3324,7 +2791,7 @@ sub_080190B0: @ 0x080190B0
 	ldrb r0, [r2, #0x1b]
 	cmp r0, #0
 	beq _080190D4
-	ldr r1, _080190D0 @ =0x08C0216C
+	ldr r1, _080190D0 @ =gUnitLut
 	ldrb r2, [r2, #0x1b]
 	lsls r0, r2, #2
 	adds r0, r0, r1
@@ -3334,7 +2801,7 @@ sub_080190B0: @ 0x080190B0
 	bl sub_08013318
 	b _080190D8
 	.align 2, 0
-_080190D0: .4byte 0x08C0216C
+_080190D0: .4byte gUnitLut
 _080190D4:
 	ldr r0, _080190DC @ =0x08C02144
 	ldr r0, [r0]
@@ -3359,7 +2826,7 @@ _080190F0: .4byte 0x08C02144
 
 	thumb_func_start sub_080190F4
 sub_080190F4: @ 0x080190F4
-	ldr r2, _08019104 @ =0x08C0216C
+	ldr r2, _08019104 @ =gUnitLut
 	movs r1, #0xff
 	ands r1, r0
 	lsls r1, r1, #2
@@ -3367,4 +2834,4 @@ sub_080190F4: @ 0x080190F4
 	ldr r0, [r1]
 	bx lr
 	.align 2, 0
-_08019104: .4byte 0x08C0216C
+_08019104: .4byte gUnitLut
diff --git a/asm/utils.s b/asm/utils.s
new file mode 100644
index 0000000..6448b45
--- /dev/null
+++ b/asm/utils.s
@@ -0,0 +1,4784 @@
+	.include "macro.inc"
+
+	.syntax unified
+
+	thumb_func_start sub_08013508
+sub_08013508: @ 0x08013508
+	push {r4, r5, r6, lr}
+	adds r6, r1, #0
+	ldr r5, [sp, #0x10]
+	cmp r5, #0
+	bne _08013516
+	adds r0, r2, #0
+	b _080135CA
+_08013516:
+	cmp r0, #5
+	bhi _080135C8
+	lsls r0, r0, #2
+	ldr r1, _08013524 @ =_08013528
+	adds r0, r0, r1
+	ldr r0, [r0]
+	mov pc, r0
+	.align 2, 0
+_08013524: .4byte _08013528
+_08013528: @ jump table
+	.4byte _08013540 @ case 0
+	.4byte _0801354C @ case 1
+	.4byte _0801355C @ case 2
+	.4byte _08013570 @ case 3
+	.4byte _08013594 @ case 4
+	.4byte _080135A6 @ case 5
+_08013540:
+	subs r0, r2, r6
+	adds r2, r0, #0
+	muls r2, r3, r2
+	adds r0, r2, #0
+	adds r1, r5, #0
+	b _0801358C
+_0801354C:
+	adds r0, r3, #0
+	muls r0, r3, r0
+	subs r1, r2, r6
+	adds r2, r0, #0
+	muls r2, r1, r2
+	adds r1, r5, #0
+	muls r1, r5, r1
+	b _0801358A
+_0801355C:
+	adds r0, r3, #0
+	muls r0, r3, r0
+	adds r1, r0, #0
+	muls r1, r3, r1
+	subs r0, r2, r6
+	adds r2, r1, #0
+	muls r2, r0, r2
+	adds r0, r5, #0
+	muls r0, r5, r0
+	b _08013586
+_08013570:
+	adds r0, r3, #0
+	muls r0, r3, r0
+	muls r0, r3, r0
+	adds r1, r0, #0
+	muls r1, r3, r1
+	subs r0, r2, r6
+	adds r2, r1, #0
+	muls r2, r0, r2
+	adds r0, r5, #0
+	muls r0, r5, r0
+	muls r0, r5, r0
+_08013586:
+	adds r1, r0, #0
+	muls r1, r5, r1
+_0801358A:
+	adds r0, r2, #0
+_0801358C:
+	bl Div
+	adds r0, r6, r0
+	b _080135CA
+_08013594:
+	subs r1, r5, r3
+	adds r0, r1, #0
+	muls r0, r1, r0
+	subs r4, r2, r6
+	adds r2, r0, #0
+	muls r2, r4, r2
+	adds r1, r5, #0
+	muls r1, r5, r1
+	b _080135BC
+_080135A6:
+	subs r1, r5, r3
+	adds r0, r1, #0
+	muls r0, r1, r0
+	muls r0, r1, r0
+	subs r4, r2, r6
+	adds r2, r0, #0
+	muls r2, r4, r2
+	adds r0, r5, #0
+	muls r0, r5, r0
+	adds r1, r0, #0
+	muls r1, r5, r1
+_080135BC:
+	adds r0, r2, #0
+	bl Div
+	adds r4, r6, r4
+	subs r0, r4, r0
+	b _080135CA
+_080135C8:
+	movs r0, #0
+_080135CA:
+	pop {r4, r5, r6}
+	pop {r1}
+	bx r1
+
+	thumb_func_start nullsub_33
+nullsub_33: @ 0x080135D0
+	bx lr
+	.align 2, 0
+
+	thumb_func_start StringCompare
+StringCompare: @ 0x080135D4
+	push {r4, lr}
+	adds r4, r0, #0
+	b _080135E6
+_080135DA:
+	adds r1, #1
+	adds r4, #1
+	cmp r2, r3
+	beq _080135E6
+	movs r0, #0
+	b _080135F4
+_080135E6:
+	ldrb r2, [r4]
+	ldrb r3, [r1]
+	adds r0, r3, #0
+	orrs r0, r2
+	cmp r0, #0
+	bne _080135DA
+	movs r0, #1
+_080135F4:
+	pop {r4}
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start CopyString
+CopyString: @ 0x080135FC
+	adds r3, r0, #0
+	b _08013606
+_08013600:
+	strb r2, [r3]
+	adds r1, #1
+	adds r3, #1
+_08013606:
+	ldrb r2, [r1]
+	cmp r2, #0
+	bne _08013600
+	ldrb r0, [r1]
+	strb r0, [r3]
+	bx lr
+	.align 2, 0
+
+	thumb_func_start sub_08013614
+sub_08013614: @ 0x08013614
+	push {r4, r5, lr}
+	adds r4, r0, #0
+	adds r5, r1, #0
+	bl sub_080136C8
+	adds r2, r0, #0
+	subs r1, r2, #4
+	movs r0, #0x1f
+	ands r0, r1
+	cmp r0, #0
+	beq _0801363C
+	adds r0, r4, #4
+	lsrs r2, r1, #0x1f
+	adds r2, r1, r2
+	lsls r2, r2, #0xa
+	lsrs r2, r2, #0xb
+	adds r1, r5, #0
+	bl CpuSet
+	b _08013652
+_0801363C:
+	adds r3, r4, #4
+	adds r0, r1, #0
+	cmp r0, #0
+	bge _08013646
+	subs r0, r2, #1
+_08013646:
+	lsls r2, r0, #9
+	lsrs r2, r2, #0xb
+	adds r0, r3, #0
+	adds r1, r5, #0
+	bl CpuFastSet
+_08013652:
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08013658
+sub_08013658: @ 0x08013658
+	push {r4, r5, r6, lr}
+	adds r4, r0, #0
+	adds r5, r1, #0
+	ldr r6, _08013684 @ =0x02020140
+	adds r1, r6, #0
+	bl LZ77UnCompWram
+	adds r0, r4, #0
+	bl sub_080136C8
+	cmp r0, #0
+	bge _08013672
+	adds r0, #3
+_08013672:
+	lsls r2, r0, #9
+	lsrs r2, r2, #0xb
+	adds r0, r6, #0
+	adds r1, r5, #0
+	bl CpuFastSet
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08013684: .4byte 0x02020140
+
+	thumb_func_start sub_08013688
+sub_08013688: @ 0x08013688
+	push {r4, r5, lr}
+	adds r3, r0, #0
+	adds r4, r1, #0
+	movs r0, #0xfa
+	lsls r0, r0, #0x18
+	adds r1, r4, r0
+	ldr r0, _080136C0 @ =0x00017FFF
+	movs r2, #1
+	cmp r1, r0
+	bhi _0801369E
+	movs r2, #0
+_0801369E:
+	ldr r0, _080136C4 @ =0x08C01B84
+	movs r1, #0xf0
+	ldrb r5, [r3]
+	ands r1, r5
+	lsrs r1, r1, #3
+	adds r1, r2, r1
+	lsls r1, r1, #2
+	adds r1, r1, r0
+	ldr r2, [r1]
+	adds r0, r3, #0
+	adds r1, r4, #0
+	bl _call_via_r2
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080136C0: .4byte 0x00017FFF
+_080136C4: .4byte 0x08C01B84
+
+	thumb_func_start sub_080136C8
+sub_080136C8: @ 0x080136C8
+	ldr r0, [r0]
+	lsrs r0, r0, #8
+	bx lr
+	.align 2, 0
+
+	thumb_func_start sub_080136D0
+sub_080136D0: @ 0x080136D0
+	adds r3, r2, #0
+	str r3, [r0]
+	ldr r2, _080136E4 @ =0x0000FFE0
+	ands r1, r2
+	asrs r1, r1, #5
+	ands r2, r3
+	asrs r3, r2, #5
+	subs r1, r3, r1
+	str r1, [r0, #4]
+	bx lr
+	.align 2, 0
+_080136E4: .4byte 0x0000FFE0
+
+	thumb_func_start sub_080136E8
+sub_080136E8: @ 0x080136E8
+	push {r4, r5, lr}
+	adds r5, r0, #0
+	adds r4, r1, #0
+	ldr r1, [r5]
+	adds r0, r4, #0
+	bl sub_08013688
+	adds r0, r4, #0
+	bl sub_080136C8
+	ldr r1, [r5]
+	adds r1, r1, r0
+	str r1, [r5]
+	ldr r1, [r5, #4]
+	cmp r0, #0
+	bge _0801370A
+	adds r0, #0x1f
+_0801370A:
+	asrs r0, r0, #5
+	adds r0, r1, r0
+	str r0, [r5, #4]
+	adds r0, r1, #0
+	pop {r4, r5}
+	pop {r1}
+	bx r1
+
+	thumb_func_start sub_08013718
+sub_08013718: @ 0x08013718
+	lsls r3, r1, #5
+	ldr r2, [r0]
+	adds r2, r2, r3
+	str r2, [r0]
+	ldr r2, [r0, #4]
+	adds r1, r2, r1
+	str r1, [r0, #4]
+	adds r0, r2, #0
+	bx lr
+	.align 2, 0
+
+	thumb_func_start sub_0801372C
+sub_0801372C: @ 0x0801372C
+	push {r4, r5, r6, r7, lr}
+	adds r6, r0, #0
+	adds r5, r1, #0
+	lsls r7, r2, #5
+	cmp r3, #0
+	ble _08013752
+	adds r4, r3, #0
+_0801373A:
+	adds r0, r6, #0
+	adds r1, r5, #0
+	adds r2, r7, #0
+	bl sub_08002F54
+	adds r6, r6, r7
+	movs r0, #0x80
+	lsls r0, r0, #3
+	adds r5, r5, r0
+	subs r4, #1
+	cmp r4, #0
+	bne _0801373A
+_08013752:
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08013758
+sub_08013758: @ 0x08013758
+	push {r4, r5, r6, r7, lr}
+	adds r7, r0, #0
+	adds r6, r1, #0
+	lsls r4, r2, #5
+	cmp r3, #0
+	ble _08013788
+	adds r5, r3, #0
+_08013766:
+	adds r2, r4, #0
+	cmp r4, #0
+	bge _0801376E
+	adds r2, r4, #3
+_0801376E:
+	lsls r2, r2, #9
+	lsrs r2, r2, #0xb
+	adds r0, r7, #0
+	adds r1, r6, #0
+	bl CpuFastSet
+	adds r7, r7, r4
+	movs r0, #0x80
+	lsls r0, r0, #3
+	adds r6, r6, r0
+	subs r5, #1
+	cmp r5, #0
+	bne _08013766
+_08013788:
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08013790
+sub_08013790: @ 0x08013790
+	push {r4, r5, r6, r7, lr}
+	mov r7, sb
+	mov r6, r8
+	push {r6, r7}
+	adds r6, r0, #0
+	adds r5, r1, #0
+	adds r7, r2, #0
+	cmp r3, #0
+	ble _080137C0
+	lsls r0, r7, #6
+	mov sb, r0
+	adds r4, r3, #0
+	lsls r0, r7, #5
+	mov r8, r0
+_080137AC:
+	adds r0, r6, #0
+	adds r1, r5, #0
+	adds r2, r7, #0
+	bl sub_080137CC
+	add r6, sb
+	add r5, r8
+	subs r4, #1
+	cmp r4, #0
+	bne _080137AC
+_080137C0:
+	pop {r3, r4}
+	mov r8, r3
+	mov sb, r4
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_080137CC
+sub_080137CC: @ 0x080137CC
+	push {r4, r5, r6, r7, lr}
+	adds r6, r0, #0
+	adds r5, r1, #0
+	adds r7, r2, #0
+	cmp r7, #0
+	ble _080137EE
+	adds r4, r7, #0
+_080137DA:
+	adds r0, r6, #0
+	adds r1, r5, #0
+	adds r2, r7, #0
+	bl sub_080137F4
+	adds r6, #8
+	adds r5, #0x20
+	subs r4, #1
+	cmp r4, #0
+	bne _080137DA
+_080137EE:
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_080137F4
+sub_080137F4: @ 0x080137F4
+	push {r4, r5, lr}
+	adds r3, r0, #0
+	adds r4, r1, #0
+	movs r1, #7
+_080137FC:
+	ldrb r5, [r3, #7]
+	lsls r0, r5, #4
+	ldrb r5, [r3, #6]
+	orrs r0, r5
+	lsls r0, r0, #4
+	ldrb r5, [r3, #5]
+	orrs r0, r5
+	lsls r0, r0, #4
+	ldrb r5, [r3, #4]
+	orrs r0, r5
+	lsls r0, r0, #4
+	ldrb r5, [r3, #3]
+	orrs r0, r5
+	lsls r0, r0, #4
+	ldrb r5, [r3, #2]
+	orrs r0, r5
+	lsls r0, r0, #4
+	ldrb r5, [r3, #1]
+	orrs r0, r5
+	lsls r0, r0, #4
+	ldrb r5, [r3]
+	orrs r0, r5
+	stm r4!, {r0}
+	lsls r0, r2, #3
+	adds r3, r3, r0
+	subs r1, #1
+	cmp r1, #0
+	bge _080137FC
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_0801383C
+sub_0801383C: @ 0x0801383C
+	push {r4, r5, r6, lr}
+	adds r6, r0, #0
+	adds r4, r1, #0
+	adds r5, r2, #0
+	movs r0, #0
+	cmp r0, r3
+	bge _08013868
+_0801384A:
+	adds r2, r0, #1
+	cmp r5, #0
+	ble _08013862
+	lsls r0, r0, #6
+	adds r0, r0, r6
+	adds r1, r5, #0
+_08013856:
+	strh r4, [r0]
+	adds r4, #1
+	adds r0, #2
+	subs r1, #1
+	cmp r1, #0
+	bne _08013856
+_08013862:
+	adds r0, r2, #0
+	cmp r0, r3
+	blt _0801384A
+_08013868:
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08013870
+sub_08013870: @ 0x08013870
+	push {r4, r5, lr}
+	adds r4, r0, #0
+	adds r5, r2, #0
+	cmp r3, #0
+	ble _08013894
+	movs r2, #0
+_0801387C:
+	strh r2, [r0]
+	subs r0, #2
+	subs r3, #1
+	cmp r3, #0
+	bne _0801387C
+	b _08013894
+_08013888:
+	ldrb r2, [r1]
+	adds r0, r2, r5
+	subs r0, #0x30
+	strh r0, [r4]
+	subs r4, #2
+	subs r1, #1
+_08013894:
+	ldrb r0, [r1]
+	cmp r0, #0x20
+	bne _08013888
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_080138A0
+sub_080138A0: @ 0x080138A0
+	adds r0, #0x4c
+	strh r1, [r0]
+	bx lr
+	.align 2, 0
+
+	thumb_func_start sub_080138A8
+sub_080138A8: @ 0x080138A8
+	adds r0, #0x4c
+	ldrh r1, [r0]
+	adds r1, #1
+	ldr r2, _080138B8 @ =0x00007FFF
+	ands r1, r2
+	strh r1, [r0]
+	bx lr
+	.align 2, 0
+_080138B8: .4byte 0x00007FFF
+
+	thumb_func_start sub_080138BC
+sub_080138BC: @ 0x080138BC
+	adds r0, #0x4c
+	ldrh r1, [r0]
+	subs r1, #1
+	strh r1, [r0]
+	bx lr
+	.align 2, 0
+
+	thumb_func_start sub_080138C8
+sub_080138C8: @ 0x080138C8
+	push {r4, lr}
+	movs r1, #0x9f
+	movs r3, #0xf0
+	movs r4, #1
+	rsbs r4, r4, #0
+	adds r2, r4, #0
+_080138D4:
+	strh r3, [r0]
+	adds r0, #2
+	strh r2, [r0]
+	adds r0, #2
+	subs r1, #1
+	cmp r1, #0
+	bge _080138D4
+	pop {r4}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_080138E8
+sub_080138E8: @ 0x080138E8
+	push {r4, r5, r6, r7, lr}
+	mov r7, r8
+	push {r7}
+	mov r8, r0
+	adds r5, r1, #0
+	adds r4, r2, #0
+	ldr r6, [sp, #0x18]
+	cmp r4, r6
+	ble _08013906
+	adds r1, r3, #0
+	adds r3, r5, #0
+	adds r5, r1, #0
+	adds r1, r6, #0
+	adds r6, r4, #0
+	adds r4, r1, #0
+_08013906:
+	subs r0, r3, r5
+	lsls r0, r0, #0x10
+	subs r1, r6, r4
+	bl __divsi3
+	mov ip, r0
+	lsls r5, r5, #0x10
+	cmp r6, #0xa0
+	ble _0801391A
+	movs r6, #0xa0
+_0801391A:
+	cmp r4, #0
+	bge _0801392A
+	rsbs r0, r4, #0
+	mov r1, ip
+	muls r1, r0, r1
+	adds r0, r1, #0
+	adds r5, r5, r0
+	movs r4, #0
+_0801392A:
+	cmp r4, r6
+	bge _08013964
+	lsls r0, r4, #2
+	mov r2, r8
+	adds r1, r0, r2
+	adds r2, r1, #0
+_08013936:
+	asrs r3, r5, #0x10
+	cmp r3, #0xf0
+	ble _0801393E
+	movs r3, #0xf0
+_0801393E:
+	cmp r3, #0
+	bge _08013944
+	movs r3, #0
+_08013944:
+	movs r7, #0
+	ldrsh r0, [r1, r7]
+	cmp r0, r3
+	ble _0801394E
+	strh r3, [r1]
+_0801394E:
+	movs r7, #2
+	ldrsh r0, [r2, r7]
+	cmp r0, r3
+	bge _08013958
+	strh r3, [r2, #2]
+_08013958:
+	add r5, ip
+	adds r1, #4
+	adds r2, #4
+	adds r4, #1
+	cmp r4, r6
+	blt _08013936
+_08013964:
+	pop {r3}
+	mov r8, r3
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08013970
+sub_08013970: @ 0x08013970
+	push {r4, r5, r6, r7, lr}
+	mov r7, sl
+	mov r6, sb
+	mov r5, r8
+	push {r5, r6, r7}
+	sub sp, #0x1c
+	adds r6, r0, #0
+	str r6, [sp]
+	cmp r6, #0x50
+	ble _08013988
+	movs r0, #0x50
+	str r0, [sp]
+_08013988:
+	adds r2, r6, #0
+	movs r1, #0
+	mov sb, r1
+	cmp r2, #0
+	blt _08013A80
+	movs r3, #0
+	str r3, [sp, #4]
+	ldr r4, [sp]
+	lsls r0, r4, #2
+	ldr r7, _08013A94 @ =0x02020140
+	adds r0, r0, r7
+	mov sl, r0
+	str r0, [sp, #8]
+	rsbs r1, r2, #0
+	str r1, [sp, #0xc]
+	lsls r0, r2, #2
+	ldr r3, [sp, #8]
+	subs r3, r3, r0
+	str r3, [sp, #0x10]
+	ldr r4, [sp, #8]
+	adds r0, r0, r4
+	str r0, [sp, #0x14]
+_080139B4:
+	ldr r0, [sp]
+	add r0, sb
+	lsls r0, r0, #0x10
+	lsrs r0, r0, #0x10
+	str r0, [sp, #0x18]
+	cmp r0, #0x9f
+	bhi _080139C6
+	mov r7, sl
+	strh r2, [r7, #2]
+_080139C6:
+	ldr r0, [sp]
+	mov r1, sb
+	subs r0, r0, r1
+	mov r8, r0
+	lsls r0, r0, #0x10
+	lsrs r4, r0, #0x10
+	cmp r4, #0x9f
+	bhi _080139DA
+	ldr r3, [sp, #8]
+	strh r2, [r3, #2]
+_080139DA:
+	ldr r7, [sp]
+	adds r7, r7, r2
+	mov ip, r7
+	lsls r0, r7, #0x10
+	lsrs r3, r0, #0x10
+	cmp r3, #0x9f
+	bhi _080139EE
+	mov r1, sb
+	ldr r0, [sp, #0x14]
+	strh r1, [r0, #2]
+_080139EE:
+	ldr r7, [sp]
+	subs r5, r7, r2
+	lsls r0, r5, #0x10
+	lsrs r1, r0, #0x10
+	cmp r1, #0x9f
+	bhi _08013A00
+	mov r7, sb
+	ldr r0, [sp, #0x10]
+	strh r7, [r0, #2]
+_08013A00:
+	ldr r0, [sp, #0x18]
+	cmp r0, #0x9f
+	bhi _08013A0E
+	mov r7, sp
+	ldrh r0, [r7, #0xc]
+	mov r7, sl
+	strh r0, [r7]
+_08013A0E:
+	cmp r4, #0x9f
+	bhi _08013A20
+	mov r4, r8
+	lsls r0, r4, #2
+	ldr r7, _08013A94 @ =0x02020140
+	adds r0, r0, r7
+	mov r4, sp
+	ldrh r4, [r4, #0xc]
+	strh r4, [r0]
+_08013A20:
+	cmp r3, #0x9f
+	bhi _08013A32
+	mov r7, ip
+	lsls r0, r7, #2
+	ldr r3, _08013A94 @ =0x02020140
+	adds r0, r0, r3
+	mov r4, sp
+	ldrh r4, [r4, #4]
+	strh r4, [r0]
+_08013A32:
+	cmp r1, #0x9f
+	bhi _08013A42
+	lsls r0, r5, #2
+	ldr r7, _08013A94 @ =0x02020140
+	adds r0, r0, r7
+	mov r1, sp
+	ldrh r1, [r1, #4]
+	strh r1, [r0]
+_08013A42:
+	adds r1, r6, #1
+	mov r3, sb
+	lsls r0, r3, #1
+	subs r6, r1, r0
+	cmp r6, #0
+	bge _08013A68
+	subs r1, r2, #1
+	lsls r0, r1, #1
+	adds r6, r6, r0
+	ldr r4, [sp, #0xc]
+	adds r4, #1
+	str r4, [sp, #0xc]
+	ldr r7, [sp, #0x10]
+	adds r7, #4
+	str r7, [sp, #0x10]
+	ldr r0, [sp, #0x14]
+	subs r0, #4
+	str r0, [sp, #0x14]
+	adds r2, r1, #0
+_08013A68:
+	ldr r1, [sp, #4]
+	subs r1, #1
+	str r1, [sp, #4]
+	movs r3, #4
+	add sl, r3
+	ldr r4, [sp, #8]
+	subs r4, #4
+	str r4, [sp, #8]
+	movs r7, #1
+	add sb, r7
+	cmp r2, sb
+	bge _080139B4
+_08013A80:
+	ldr r0, _08013A94 @ =0x02020140
+	add sp, #0x1c
+	pop {r3, r4, r5}
+	mov r8, r3
+	mov sb, r4
+	mov sl, r5
+	pop {r4, r5, r6, r7}
+	pop {r1}
+	bx r1
+	.align 2, 0
+_08013A94: .4byte 0x02020140
+
+	thumb_func_start sub_08013A98
+sub_08013A98: @ 0x08013A98
+	push {r4, r5, r6, r7, lr}
+	adds r3, r0, #0
+	ldr r7, _08013AB4 @ =0x02020140
+	movs r6, #0
+	adds r5, r7, #0
+	ldr r4, _08013AB8 @ =0x02022860
+_08013AA4:
+	ldrh r1, [r4]
+	movs r0, #0x1f
+	ands r0, r1
+	cmp r0, r3
+	blt _08013ABC
+	subs r1, r1, r3
+	b _08013AC0
+	.align 2, 0
+_08013AB4: .4byte 0x02020140
+_08013AB8: .4byte 0x02022860
+_08013ABC:
+	ldr r0, _08013AD0 @ =0x0000FFE0
+	ands r1, r0
+_08013AC0:
+	movs r0, #0xf8
+	lsls r0, r0, #2
+	ands r0, r1
+	lsls r2, r3, #5
+	cmp r0, r2
+	blt _08013AD4
+	subs r1, r1, r2
+	b _08013AD8
+	.align 2, 0
+_08013AD0: .4byte 0x0000FFE0
+_08013AD4:
+	ldr r0, _08013AE8 @ =0x0000FC1F
+	ands r1, r0
+_08013AD8:
+	movs r0, #0xf8
+	lsls r0, r0, #7
+	ands r0, r1
+	lsls r2, r3, #0xa
+	cmp r0, r2
+	blt _08013AEC
+	subs r1, r1, r2
+	b _08013AF0
+	.align 2, 0
+_08013AE8: .4byte 0x0000FC1F
+_08013AEC:
+	ldr r0, _08013B18 @ =0x000003FF
+	ands r1, r0
+_08013AF0:
+	strh r1, [r5]
+	adds r5, #2
+	adds r4, #2
+	adds r6, #1
+	ldr r0, _08013B1C @ =0x000001FF
+	cmp r6, r0
+	ble _08013AA4
+	bl sub_08001048
+	movs r1, #0xa0
+	lsls r1, r1, #0x13
+	movs r2, #0x80
+	lsls r2, r2, #3
+	adds r0, r7, #0
+	bl sub_08002F54
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08013B18: .4byte 0x000003FF
+_08013B1C: .4byte 0x000001FF
+
+	thumb_func_start nullsub_34
+nullsub_34: @ 0x08013B20
+	bx lr
+	.align 2, 0
+
+	thumb_func_start sub_08013B24
+sub_08013B24: @ 0x08013B24
+	push {lr}
+	sub sp, #0x10
+	ldr r1, _08013B40 @ =0x0818F980
+	mov r0, sp
+	movs r2, #0xd
+	bl memcpy
+	mov r0, sp
+	bl sub_08013B24
+	add sp, #0x10
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08013B40: .4byte 0x0818F980
+
+	thumb_func_start sub_08013B44
+sub_08013B44: @ 0x08013B44
+	ldr r0, _08013B48 @ =0x0202B5B4
+	bx lr
+	.align 2, 0
+_08013B48: .4byte 0x0202B5B4
+
+	thumb_func_start sub_08013B4C
+sub_08013B4C: @ 0x08013B4C
+	push {r4, r5, lr}
+	adds r4, r1, #0
+	adds r5, r2, #0
+	bl sub_08013B68
+	adds r0, r4, #0
+	bl sub_08013B78
+	adds r0, r5, #0
+	bl sub_08013B8C
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08013B68
+sub_08013B68: @ 0x08013B68
+	push {r4, lr}
+	adds r4, r0, #0
+	bl sub_08013B44
+	strh r4, [r0, #0x2a]
+	pop {r4}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08013B78
+sub_08013B78: @ 0x08013B78
+	push {r4, lr}
+	adds r4, r0, #0
+	bl sub_08013B44
+	adds r0, #0x5a
+	strh r4, [r0]
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08013B8C
+sub_08013B8C: @ 0x08013B8C
+	push {r4, lr}
+	adds r4, r0, #0
+	bl sub_08013B44
+	adds r0, #0x8a
+	strh r4, [r0]
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08013BA0
+sub_08013BA0: @ 0x08013BA0
+	push {lr}
+	bl sub_08013B44
+	ldrh r0, [r0, #0x2a]
+	pop {r1}
+	bx r1
+
+	thumb_func_start sub_08013BAC
+sub_08013BAC: @ 0x08013BAC
+	push {lr}
+	bl sub_08013B44
+	adds r0, #0x5a
+	ldrh r0, [r0]
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_08013BBC
+sub_08013BBC: @ 0x08013BBC
+	push {lr}
+	bl sub_08013B44
+	adds r0, #0x8a
+	ldrh r0, [r0]
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_08013BCC
+sub_08013BCC: @ 0x08013BCC
+	push {r4, r5, lr}
+	bl sub_08013B44
+	ldr r3, _08013C14 @ =0x02022860
+	movs r1, #0
+_08013BD6:
+	adds r5, r0, #0
+	adds r5, #0x30
+	adds r4, r1, #1
+	adds r1, r0, #0
+	movs r2, #0xf
+_08013BE0:
+	ldrh r0, [r3]
+	strh r0, [r1]
+	adds r3, #2
+	adds r1, #2
+	subs r2, #1
+	cmp r2, #0
+	bge _08013BE0
+	adds r0, r5, #0
+	adds r1, r4, #0
+	cmp r1, #0x1f
+	ble _08013BD6
+	movs r4, #0x80
+	lsls r4, r4, #1
+	adds r0, r4, #0
+	bl sub_08013B68
+	adds r0, r4, #0
+	bl sub_08013B78
+	adds r0, r4, #0
+	bl sub_08013B8C
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08013C14: .4byte 0x02022860
+
+	thumb_func_start sub_08013C18
+sub_08013C18: @ 0x08013C18
+	push {r4, lr}
+	adds r4, r0, #0
+	bl sub_08013B44
+	lsls r2, r4, #5
+	ldr r1, _08013C44 @ =0x02022860
+	adds r2, r2, r1
+	lsls r1, r4, #1
+	adds r1, r1, r4
+	lsls r1, r1, #4
+	adds r1, r1, r0
+	movs r3, #0xf
+_08013C30:
+	ldrh r0, [r2]
+	strh r0, [r1]
+	adds r2, #2
+	adds r1, #2
+	subs r3, #1
+	cmp r3, #0
+	bge _08013C30
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08013C44: .4byte 0x02022860
+
+	thumb_func_start sub_08013C48
+sub_08013C48: @ 0x08013C48
+	push {r4, r5, r6, r7, lr}
+	mov r7, sl
+	mov r6, sb
+	mov r5, r8
+	push {r5, r6, r7}
+	sub sp, #4
+	adds r7, r0, #0
+	mov r8, r1
+	str r2, [sp]
+	mov sl, r3
+	bl sub_08013B68
+	mov r0, r8
+	bl sub_08013B78
+	ldr r0, [sp]
+	bl sub_08013B8C
+	bl sub_08013B44
+	mov sb, r0
+	movs r0, #0x80
+	lsls r0, r0, #1
+	cmp r7, r0
+	ble _08013CCC
+	ldr r0, _08013CC4 @ =0xFFFFFF00
+	adds r7, r7, r0
+	movs r5, #0
+	mov ip, r5
+_08013C82:
+	movs r0, #1
+	lsls r0, r5
+	mov r1, sl
+	ands r0, r1
+	cmp r0, #0
+	beq _08013CB8
+	movs r4, #0
+	movs r6, #0x1f
+	mov r3, ip
+	add r3, sb
+	lsls r0, r5, #5
+	ldr r1, _08013CC8 @ =0x02022860
+	adds r2, r0, r1
+_08013C9C:
+	adds r1, r6, #0
+	ldrh r0, [r3]
+	ands r1, r0
+	subs r0, r6, r1
+	muls r0, r7, r0
+	asrs r0, r0, #8
+	adds r1, r1, r0
+	ands r1, r6
+	strh r1, [r2]
+	adds r3, #2
+	adds r2, #2
+	adds r4, #1
+	cmp r4, #0xf
+	ble _08013C9C
+_08013CB8:
+	movs r1, #0x30
+	add ip, r1
+	adds r5, #1
+	cmp r5, #0x1f
+	ble _08013C82
+	b _08013D0C
+	.align 2, 0
+_08013CC4: .4byte 0xFFFFFF00
+_08013CC8: .4byte 0x02022860
+_08013CCC:
+	movs r5, #0
+	mov ip, r5
+_08013CD0:
+	movs r0, #1
+	lsls r0, r5
+	mov r6, sl
+	ands r0, r6
+	cmp r0, #0
+	beq _08013D02
+	movs r4, #0
+	movs r3, #0x1f
+	mov r2, ip
+	add r2, sb
+	lsls r0, r5, #5
+	ldr r6, _08013D68 @ =0x02022860
+	adds r1, r0, r6
+_08013CEA:
+	adds r0, r3, #0
+	ldrh r6, [r2]
+	ands r0, r6
+	muls r0, r7, r0
+	asrs r0, r0, #8
+	ands r0, r3
+	strh r0, [r1]
+	adds r2, #2
+	adds r1, #2
+	adds r4, #1
+	cmp r4, #0xf
+	ble _08013CEA
+_08013D02:
+	movs r0, #0x30
+	add ip, r0
+	adds r5, #1
+	cmp r5, #0x1f
+	ble _08013CD0
+_08013D0C:
+	movs r0, #0x80
+	lsls r0, r0, #1
+	cmp r8, r0
+	ble _08013D70
+	ldr r1, _08013D6C @ =0xFFFFFF00
+	add r8, r1
+	movs r5, #0
+	mov ip, r5
+_08013D1C:
+	movs r0, #1
+	lsls r0, r5
+	mov r6, sl
+	ands r0, r6
+	cmp r0, #0
+	beq _08013D5C
+	movs r4, #0
+	movs r6, #0xf8
+	lsls r6, r6, #2
+	mov r3, ip
+	add r3, sb
+	lsls r0, r5, #5
+	ldr r7, _08013D68 @ =0x02022860
+	adds r2, r0, r7
+_08013D38:
+	adds r0, r6, #0
+	ldrh r1, [r3]
+	ands r0, r1
+	subs r1, r6, r0
+	mov r7, r8
+	muls r7, r1, r7
+	adds r1, r7, #0
+	asrs r1, r1, #8
+	adds r0, r0, r1
+	ands r0, r6
+	ldrh r1, [r2]
+	orrs r0, r1
+	strh r0, [r2]
+	adds r3, #2
+	adds r2, #2
+	adds r4, #1
+	cmp r4, #0xf
+	ble _08013D38
+_08013D5C:
+	movs r6, #0x30
+	add ip, r6
+	adds r5, #1
+	cmp r5, #0x1f
+	ble _08013D1C
+	b _08013DB8
+	.align 2, 0
+_08013D68: .4byte 0x02022860
+_08013D6C: .4byte 0xFFFFFF00
+_08013D70:
+	movs r5, #0
+	movs r6, #0
+_08013D74:
+	movs r0, #1
+	lsls r0, r5
+	mov r7, sl
+	ands r0, r7
+	cmp r0, #0
+	beq _08013DB0
+	movs r4, #0
+	movs r3, #0xf8
+	lsls r3, r3, #2
+	mov r0, sb
+	adds r2, r6, r0
+	lsls r0, r5, #5
+	ldr r7, _08013E18 @ =0x02022860
+	adds r1, r0, r7
+_08013D90:
+	adds r0, r3, #0
+	ldrh r7, [r2]
+	ands r0, r7
+	mov r7, r8
+	muls r7, r0, r7
+	adds r0, r7, #0
+	asrs r0, r0, #8
+	ands r0, r3
+	ldrh r7, [r1]
+	orrs r0, r7
+	strh r0, [r1]
+	adds r2, #2
+	adds r1, #2
+	adds r4, #1
+	cmp r4, #0xf
+	ble _08013D90
+_08013DB0:
+	adds r6, #0x30
+	adds r5, #1
+	cmp r5, #0x1f
+	ble _08013D74
+_08013DB8:
+	movs r0, #0x80
+	lsls r0, r0, #1
+	ldr r1, [sp]
+	cmp r1, r0
+	ble _08013E20
+	ldr r5, _08013E1C @ =0xFFFFFF00
+	adds r1, r1, r5
+	str r1, [sp]
+	movs r5, #0
+_08013DCA:
+	movs r0, #1
+	lsls r0, r5
+	mov r6, sl
+	ands r0, r6
+	adds r7, r5, #1
+	cmp r0, #0
+	beq _08013E10
+	movs r4, #0
+	lsls r0, r5, #1
+	adds r0, r0, r5
+	lsls r0, r0, #4
+	movs r6, #0xf8
+	lsls r6, r6, #7
+	mov r1, sb
+	adds r3, r0, r1
+	lsls r0, r5, #5
+	ldr r5, _08013E18 @ =0x02022860
+	adds r2, r0, r5
+_08013DEE:
+	adds r0, r6, #0
+	ldrh r1, [r3]
+	ands r0, r1
+	subs r1, r6, r0
+	ldr r5, [sp]
+	muls r1, r5, r1
+	asrs r1, r1, #8
+	adds r0, r0, r1
+	ands r0, r6
+	ldrh r1, [r2]
+	orrs r0, r1
+	strh r0, [r2]
+	adds r3, #2
+	adds r2, #2
+	adds r4, #1
+	cmp r4, #0xf
+	ble _08013DEE
+_08013E10:
+	adds r5, r7, #0
+	cmp r5, #0x1f
+	ble _08013DCA
+	b _08013E6A
+	.align 2, 0
+_08013E18: .4byte 0x02022860
+_08013E1C: .4byte 0xFFFFFF00
+_08013E20:
+	movs r5, #0
+_08013E22:
+	movs r0, #1
+	lsls r0, r5
+	mov r6, sl
+	ands r0, r6
+	adds r7, r5, #1
+	cmp r0, #0
+	beq _08013E64
+	movs r4, #0
+	lsls r0, r5, #1
+	adds r0, r0, r5
+	lsls r0, r0, #4
+	movs r3, #0xf8
+	lsls r3, r3, #7
+	mov r1, sb
+	adds r2, r0, r1
+	lsls r0, r5, #5
+	ldr r5, _08013E80 @ =0x02022860
+	adds r1, r0, r5
+_08013E46:
+	adds r0, r3, #0
+	ldrh r6, [r2]
+	ands r0, r6
+	ldr r5, [sp]
+	muls r0, r5, r0
+	asrs r0, r0, #8
+	ands r0, r3
+	ldrh r6, [r1]
+	orrs r0, r6
+	strh r0, [r1]
+	adds r2, #2
+	adds r1, #2
+	adds r4, #1
+	cmp r4, #0xf
+	ble _08013E46
+_08013E64:
+	adds r5, r7, #0
+	cmp r5, #0x1f
+	ble _08013E22
+_08013E6A:
+	bl sub_08001034
+	add sp, #4
+	pop {r3, r4, r5}
+	mov r8, r3
+	mov sb, r4
+	mov sl, r5
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08013E80: .4byte 0x02022860
+
+	thumb_func_start sub_08013E84
+sub_08013E84: @ 0x08013E84
+	movs r1, #0
+	str r1, [r0, #0x44]
+	bx lr
+	.align 2, 0
+
+	thumb_func_start sub_08013E8C
+sub_08013E8C: @ 0x08013E8C
+	push {r4, r5, r6, r7, lr}
+	adds r4, r0, #0
+	ldr r1, [r4, #0x44]
+	ldr r0, [r4, #0x48]
+	adds r2, r1, r0
+	str r2, [r4, #0x44]
+	movs r7, #0x80
+	lsls r7, r7, #1
+	subs r3, r7, r2
+	ldr r0, [r4, #0x2c]
+	adds r1, r0, #0
+	muls r1, r3, r1
+	ldr r0, [r4, #0x38]
+	muls r0, r2, r0
+	adds r0, r1, r0
+	cmp r0, #0
+	bge _08013EB0
+	adds r0, #0xff
+_08013EB0:
+	asrs r6, r0, #8
+	ldr r0, [r4, #0x30]
+	adds r1, r0, #0
+	muls r1, r3, r1
+	ldr r0, [r4, #0x3c]
+	muls r0, r2, r0
+	adds r1, r1, r0
+	cmp r1, #0
+	bge _08013EC4
+	adds r1, #0xff
+_08013EC4:
+	asrs r5, r1, #8
+	ldr r0, [r4, #0x34]
+	adds r1, r0, #0
+	muls r1, r3, r1
+	ldr r0, [r4, #0x40]
+	muls r0, r2, r0
+	adds r1, r1, r0
+	cmp r1, #0
+	bge _08013ED8
+	adds r1, #0xff
+_08013ED8:
+	asrs r2, r1, #8
+	ldr r3, [r4, #0x4c]
+	adds r0, r6, #0
+	adds r1, r5, #0
+	bl sub_08013C48
+	ldr r0, [r4, #0x44]
+	cmp r0, r7
+	bne _08013EF0
+	adds r0, r4, #0
+	bl sub_0800457C
+_08013EF0:
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08013EF8
+sub_08013EF8: @ 0x08013EF8
+	push {r4, r5, r6, r7, lr}
+	mov r7, sb
+	mov r6, r8
+	push {r6, r7}
+	adds r5, r0, #0
+	adds r6, r1, #0
+	mov r8, r2
+	mov sb, r3
+	ldr r7, [sp, #0x1c]
+	ldr r4, [sp, #0x28]
+	ldr r1, [sp, #0x2c]
+	ldr r0, _08013F38 @ =0x08C01BA4
+	bl Proc_Start
+	str r5, [r0, #0x2c]
+	str r6, [r0, #0x30]
+	mov r1, r8
+	str r1, [r0, #0x34]
+	mov r1, sb
+	str r1, [r0, #0x38]
+	str r7, [r0, #0x3c]
+	ldr r1, [sp, #0x20]
+	str r1, [r0, #0x40]
+	str r4, [r0, #0x48]
+	ldr r1, [sp, #0x24]
+	str r1, [r0, #0x4c]
+	pop {r3, r4}
+	mov r8, r3
+	mov sb, r4
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08013F38: .4byte 0x08C01BA4
+
+	thumb_func_start sub_08013F3C
+sub_08013F3C: @ 0x08013F3C
+	push {lr}
+	ldr r0, _08013F4C @ =0x08C01BA4
+	bl sub_08004584
+	cmp r0, #0
+	bne _08013F50
+	movs r0, #0
+	b _08013F52
+	.align 2, 0
+_08013F4C: .4byte 0x08C01BA4
+_08013F50:
+	movs r0, #1
+_08013F52:
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_08013F58
+sub_08013F58: @ 0x08013F58
+	adds r2, r0, #0
+	adds r2, #0x64
+	movs r1, #0
+	strh r1, [r2]
+	adds r0, #0x66
+	movs r1, #0x5a
+	strh r1, [r0]
+	bx lr
+
+	thumb_func_start sub_08013F68
+sub_08013F68: @ 0x08013F68
+	push {r4, r5, lr}
+	adds r3, r0, #0
+	movs r4, #0
+	ldr r5, _08013FCC @ =gpKeySt
+	ldr r1, [r5]
+	movs r0, #1
+	ldrh r1, [r1, #8]
+	ands r0, r1
+	cmp r0, #0
+	beq _08013F86
+	adds r1, r3, #0
+	adds r1, #0x66
+	ldrh r0, [r1]
+	adds r0, #1
+	strh r0, [r1]
+_08013F86:
+	adds r1, r3, #0
+	adds r1, #0x64
+	ldrh r2, [r1]
+	adds r0, r2, #1
+	strh r0, [r1]
+	movs r0, #0xf
+	ands r0, r2
+	cmp r0, #0
+	bne _08013FC6
+	ldr r0, [r5]
+	ldrh r1, [r0, #4]
+	movs r0, #0x20
+	ands r0, r1
+	cmp r0, #0
+	beq _08013FAE
+	adds r0, r3, #0
+	adds r0, #0x66
+	movs r2, #0
+	ldrsh r0, [r0, r2]
+	rsbs r4, r0, #0
+_08013FAE:
+	movs r0, #0x10
+	ands r0, r1
+	cmp r0, #0
+	beq _08013FBE
+	adds r0, r3, #0
+	adds r0, #0x66
+	movs r1, #0
+	ldrsh r4, [r0, r1]
+_08013FBE:
+	movs r0, #0x9a
+	adds r1, r4, #0
+	bl sub_080151FC
+_08013FC6:
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08013FCC: .4byte gpKeySt
+
+	thumb_func_start sub_08013FD0
+sub_08013FD0: @ 0x08013FD0
+	push {lr}
+	ldr r0, _08013FE0 @ =0x08C01BC4
+	movs r1, #3
+	bl Proc_Start
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08013FE0: .4byte 0x08C01BC4
+
+	thumb_func_start nullsub_35
+nullsub_35: @ 0x08013FE4
+	bx lr
+	.align 2, 0
+
+	thumb_func_start sub_08013FE8
+sub_08013FE8: @ 0x08013FE8
+	push {r4, r5, lr}
+	adds r4, r0, #0
+	adds r5, r1, #0
+	adds r3, r2, #0
+	ldr r0, _08014000 @ =0x08C01CEC
+	adds r1, r4, #0
+	adds r2, r5, #0
+	bl sub_08014020
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08014000: .4byte 0x08C01CEC
+
+	thumb_func_start sub_08014004
+sub_08014004: @ 0x08014004
+	push {r4, r5, lr}
+	adds r4, r0, #0
+	adds r5, r1, #0
+	adds r3, r2, #0
+	ldr r0, _0801401C @ =0x08C01D0C
+	adds r1, r4, #0
+	adds r2, r5, #0
+	bl sub_08014020
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_0801401C: .4byte 0x08C01D0C
+
+	thumb_func_start sub_08014020
+sub_08014020: @ 0x08014020
+	push {r4, r5, r6, lr}
+	mov r6, sb
+	mov r5, r8
+	push {r5, r6}
+	mov sb, r0
+	adds r5, r1, #0
+	adds r6, r2, #0
+	adds r1, r3, #0
+	lsls r4, r5, #1
+	adds r4, r4, r5
+	lsls r4, r4, #4
+	ldr r0, _08014074 @ =0x0202B5B4
+	adds r4, r4, r0
+	ldr r0, _08014078 @ =0x08C01BDC
+	bl Proc_Start
+	mov r8, r0
+	lsls r5, r5, #5
+	ldr r0, _0801407C @ =0x02022860
+	adds r5, r5, r0
+	adds r0, r5, #0
+	adds r1, r4, #0
+	movs r2, #0x10
+	bl CpuSet
+	str r5, [r4, #0x24]
+	mov r0, sb
+	str r0, [r4, #0x20]
+	movs r0, #0
+	strh r0, [r4, #0x28]
+	strh r6, [r4, #0x2a]
+	adds r6, #1
+	strh r6, [r4, #0x2c]
+	mov r0, r8
+	str r4, [r0, #0x2c]
+	adds r0, r4, #0
+	pop {r3, r4}
+	mov r8, r3
+	mov sb, r4
+	pop {r4, r5, r6}
+	pop {r1}
+	bx r1
+	.align 2, 0
+_08014074: .4byte 0x0202B5B4
+_08014078: .4byte 0x08C01BDC
+_0801407C: .4byte 0x02022860
+
+	thumb_func_start sub_08014080
+sub_08014080: @ 0x08014080
+	push {lr}
+	ldr r0, _0801408C @ =0x08C01BDC
+	bl sub_08004748
+	pop {r0}
+	bx r0
+	.align 2, 0
+_0801408C: .4byte 0x08C01BDC
+
+	thumb_func_start sub_08014090
+sub_08014090: @ 0x08014090
+	strh r1, [r0, #0x2c]
+	bx lr
+
+	thumb_func_start sub_08014094
+sub_08014094: @ 0x08014094
+	push {r4, r5, r6, r7, lr}
+	mov r7, sl
+	mov r6, sb
+	mov r5, r8
+	push {r5, r6, r7}
+	sub sp, #0x10
+	adds r7, r0, #0
+	ldr r0, [r7, #0x2c]
+	mov sl, r0
+	ldr r1, [r0, #0x20]
+	str r1, [sp, #8]
+	ldr r1, [r0, #0x24]
+	ldrh r0, [r0, #0x28]
+	mov r2, sl
+	ldrh r2, [r2, #0x2c]
+	cmp r0, r2
+	beq _080140BE
+	mov r3, sl
+	ldrh r3, [r3, #0x2a]
+	cmp r0, r3
+	bls _080140C6
+_080140BE:
+	adds r0, r7, #0
+	bl sub_08004460
+	b _0801416C
+_080140C6:
+	movs r0, #0
+	str r0, [sp, #4]
+	str r1, [sp, #0xc]
+_080140CC:
+	ldr r1, [sp, #4]
+	lsls r2, r1, #1
+	mov r3, sl
+	adds r0, r2, r3
+	ldrh r0, [r0]
+	movs r1, #0x1f
+	ands r1, r0
+	movs r6, #0xf8
+	lsls r6, r6, #2
+	ands r6, r0
+	movs r3, #0xf8
+	lsls r3, r3, #7
+	mov sb, r3
+	ands r3, r0
+	mov sb, r3
+	ldr r0, [sp, #8]
+	adds r2, r2, r0
+	ldrh r0, [r2]
+	movs r2, #0x1f
+	ands r2, r0
+	movs r4, #0xf8
+	lsls r4, r4, #2
+	ands r4, r0
+	movs r3, #0xf8
+	lsls r3, r3, #7
+	mov r8, r3
+	ands r3, r0
+	mov r8, r3
+	ldr r0, [r7, #0x2c]
+	ldrh r3, [r0, #0x28]
+	ldrh r0, [r0, #0x2a]
+	str r0, [sp]
+	movs r0, #0
+	bl sub_08013508
+	adds r5, r0, #0
+	ldr r0, [r7, #0x2c]
+	ldrh r3, [r0, #0x28]
+	ldrh r0, [r0, #0x2a]
+	str r0, [sp]
+	movs r0, #0
+	adds r1, r6, #0
+	adds r2, r4, #0
+	bl sub_08013508
+	adds r4, r0, #0
+	ldr r0, [r7, #0x2c]
+	ldrh r3, [r0, #0x28]
+	ldrh r0, [r0, #0x2a]
+	str r0, [sp]
+	movs r0, #0
+	mov r1, sb
+	mov r2, r8
+	bl sub_08013508
+	movs r1, #0xf8
+	lsls r1, r1, #7
+	ands r0, r1
+	movs r2, #0xf8
+	lsls r2, r2, #2
+	ands r4, r2
+	orrs r0, r4
+	movs r3, #0x1f
+	ands r5, r3
+	orrs r0, r5
+	ldr r1, [sp, #0xc]
+	strh r0, [r1]
+	adds r1, #2
+	str r1, [sp, #0xc]
+	ldr r2, [sp, #4]
+	adds r2, #1
+	str r2, [sp, #4]
+	cmp r2, #0xf
+	ble _080140CC
+	bl sub_08001034
+	ldr r1, [r7, #0x2c]
+	ldrh r0, [r1, #0x28]
+	adds r0, #1
+	strh r0, [r1, #0x28]
+_0801416C:
+	add sp, #0x10
+	pop {r3, r4, r5}
+	mov r8, r3
+	mov sb, r4
+	mov sl, r5
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_0801417C
+sub_0801417C: @ 0x0801417C
+	push {lr}
+	adds r1, r0, #0
+	ldr r0, _08014194 @ =0x08C01CEC
+	lsls r1, r1, #5
+	ldr r2, _08014198 @ =0x02022860
+	adds r1, r1, r2
+	movs r2, #0x10
+	bl CpuSet
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08014194: .4byte 0x08C01CEC
+_08014198: .4byte 0x02022860
+
+	thumb_func_start sub_0801419C
+sub_0801419C: @ 0x0801419C
+	push {lr}
+	adds r1, r0, #0
+	ldr r0, _080141B4 @ =0x08C01D0C
+	lsls r1, r1, #5
+	ldr r2, _080141B8 @ =0x02022860
+	adds r1, r1, r2
+	movs r2, #0x10
+	bl CpuSet
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080141B4: .4byte 0x08C01D0C
+_080141B8: .4byte 0x02022860
+
+	thumb_func_start sub_080141BC
+sub_080141BC: @ 0x080141BC
+	push {r4, lr}
+	movs r4, #0
+_080141C0:
+	adds r0, r4, #0
+	bl sub_0801417C
+	adds r4, #1
+	cmp r4, #0x1f
+	ble _080141C0
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_080141D4
+sub_080141D4: @ 0x080141D4
+	push {r4, lr}
+	movs r4, #0
+_080141D8:
+	adds r0, r4, #0
+	bl sub_0801417C
+	adds r4, #1
+	cmp r4, #0x1f
+	ble _080141D8
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_080141EC
+sub_080141EC: @ 0x080141EC
+	push {r4, r5, r6, lr}
+	ldr r1, _0801425C @ =0x03002790
+	mov ip, r1
+	mov r2, ip
+	adds r2, #0x34
+	movs r3, #0x20
+	ldrb r1, [r2]
+	orrs r1, r3
+	strb r1, [r2]
+	adds r2, #1
+	ldrb r1, [r2]
+	orrs r1, r3
+	strb r1, [r2]
+	adds r2, #2
+	ldrb r1, [r2]
+	orrs r1, r3
+	strb r1, [r2]
+	subs r2, #1
+	ldrb r1, [r2]
+	orrs r1, r3
+	strb r1, [r2]
+	mov r4, ip
+	adds r4, #0x3c
+	movs r1, #0xc0
+	ldrb r2, [r4]
+	orrs r1, r2
+	strb r1, [r4]
+	mov r1, ip
+	adds r1, #0x44
+	movs r5, #0
+	strb r5, [r1]
+	adds r1, #1
+	strb r5, [r1]
+	adds r1, #1
+	strb r5, [r1]
+	ldr r1, _08014260 @ =0x0000FFE0
+	mov r6, ip
+	ldrh r6, [r6, #0x3c]
+	ands r1, r6
+	movs r2, #0x1f
+	orrs r1, r2
+	mov r2, ip
+	strh r1, [r2, #0x3c]
+	ldrb r6, [r4]
+	orrs r3, r6
+	strb r3, [r4]
+	adds r2, r0, #0
+	adds r2, #0x64
+	movs r1, #0x10
+	strh r1, [r2]
+	adds r0, #0x66
+	strh r5, [r0]
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_0801425C: .4byte 0x03002790
+_08014260: .4byte 0x0000FFE0
+
+	thumb_func_start sub_08014264
+sub_08014264: @ 0x08014264
+	push {lr}
+	adds r2, r0, #0
+	ldr r0, _0801427C @ =0x03002790
+	adds r3, r0, #0
+	adds r3, #0x46
+	ldrb r0, [r3]
+	cmp r0, #0x10
+	bne _08014280
+	adds r0, r2, #0
+	bl sub_08004460
+	b _080142A4
+	.align 2, 0
+_0801427C: .4byte 0x03002790
+_08014280:
+	adds r1, r2, #0
+	adds r1, #0x66
+	adds r0, r2, #0
+	adds r0, #0x64
+	ldrh r2, [r1]
+	ldrh r0, [r0]
+	adds r0, r2, r0
+	strh r0, [r1]
+	lsls r0, r0, #0x10
+	asrs r0, r0, #0x10
+	cmp r0, #0xff
+	ble _0801429E
+	movs r0, #0x80
+	lsls r0, r0, #1
+	strh r0, [r1]
+_0801429E:
+	ldrh r1, [r1]
+	lsrs r0, r1, #4
+	strb r0, [r3]
+_080142A4:
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_080142A8
+sub_080142A8: @ 0x080142A8
+	push {r4, r5, r6, lr}
+	ldr r1, _08014328 @ =0x03002790
+	mov ip, r1
+	mov r2, ip
+	adds r2, #0x34
+	movs r3, #0x20
+	ldrb r1, [r2]
+	orrs r1, r3
+	strb r1, [r2]
+	adds r2, #1
+	ldrb r1, [r2]
+	orrs r1, r3
+	strb r1, [r2]
+	adds r2, #2
+	ldrb r1, [r2]
+	orrs r1, r3
+	strb r1, [r2]
+	subs r2, #1
+	ldrb r1, [r2]
+	orrs r1, r3
+	strb r1, [r2]
+	mov r4, ip
+	adds r4, #0x3c
+	movs r1, #0xc0
+	ldrb r2, [r4]
+	orrs r1, r2
+	strb r1, [r4]
+	mov r1, ip
+	adds r1, #0x44
+	movs r2, #0
+	strb r2, [r1]
+	adds r1, #1
+	strb r2, [r1]
+	adds r1, #1
+	movs r5, #0x10
+	strb r5, [r1]
+	ldr r1, _0801432C @ =0x0000FFE0
+	mov r6, ip
+	ldrh r6, [r6, #0x3c]
+	ands r1, r6
+	movs r2, #0x1f
+	orrs r1, r2
+	ldr r2, _08014330 @ =0x0000E0FF
+	ands r1, r2
+	movs r6, #0xf8
+	lsls r6, r6, #5
+	adds r2, r6, #0
+	orrs r1, r2
+	mov r2, ip
+	strh r1, [r2, #0x3c]
+	ldrb r6, [r4]
+	orrs r3, r6
+	strb r3, [r4]
+	adds r1, r0, #0
+	adds r1, #0x64
+	strh r5, [r1]
+	adds r0, #0x66
+	movs r1, #0x80
+	lsls r1, r1, #1
+	strh r1, [r0]
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08014328: .4byte 0x03002790
+_0801432C: .4byte 0x0000FFE0
+_08014330: .4byte 0x0000E0FF
+
+	thumb_func_start sub_08014334
+sub_08014334: @ 0x08014334
+	push {lr}
+	adds r2, r0, #0
+	ldr r0, _0801434C @ =0x03002790
+	adds r3, r0, #0
+	adds r3, #0x46
+	ldrb r0, [r3]
+	cmp r0, #0
+	bne _08014350
+	adds r0, r2, #0
+	bl sub_08004460
+	b _08014370
+	.align 2, 0
+_0801434C: .4byte 0x03002790
+_08014350:
+	adds r1, r2, #0
+	adds r1, #0x66
+	adds r0, r2, #0
+	adds r0, #0x64
+	ldrh r2, [r1]
+	ldrh r0, [r0]
+	subs r0, r2, r0
+	strh r0, [r1]
+	lsls r0, r0, #0x10
+	cmp r0, #0
+	bgt _0801436A
+	movs r0, #0
+	strh r0, [r1]
+_0801436A:
+	ldrh r1, [r1]
+	lsrs r0, r1, #4
+	strb r0, [r3]
+_08014370:
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08014374
+sub_08014374: @ 0x08014374
+	push {lr}
+	bl sub_080141EC
+	ldr r3, _080143A0 @ =0x03002790
+	adds r2, r3, #0
+	adds r2, #0x3c
+	movs r0, #0x3f
+	ldrb r1, [r2]
+	ands r0, r1
+	movs r1, #0x80
+	orrs r0, r1
+	strb r0, [r2]
+	adds r0, r3, #0
+	adds r0, #0x44
+	movs r1, #0
+	strb r1, [r0]
+	adds r0, #1
+	strb r1, [r0]
+	adds r0, #1
+	strb r1, [r0]
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080143A0: .4byte 0x03002790
+
+	thumb_func_start sub_080143A4
+sub_080143A4: @ 0x080143A4
+	push {lr}
+	bl sub_080142A8
+	ldr r3, _080143D4 @ =0x03002790
+	adds r2, r3, #0
+	adds r2, #0x3c
+	movs r0, #0x3f
+	ldrb r1, [r2]
+	ands r0, r1
+	movs r1, #0x80
+	orrs r0, r1
+	strb r0, [r2]
+	adds r0, r3, #0
+	adds r0, #0x44
+	movs r1, #0
+	strb r1, [r0]
+	adds r0, #1
+	strb r1, [r0]
+	adds r1, r3, #0
+	adds r1, #0x46
+	movs r0, #0x10
+	strb r0, [r1]
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080143D4: .4byte 0x03002790
+
+	thumb_func_start sub_080143D8
+sub_080143D8: @ 0x080143D8
+	push {lr}
+	ldr r0, _08014408 @ =0x08C01C14
+	bl sub_08004584
+	cmp r0, #0
+	bne _08014418
+	ldr r0, _0801440C @ =0x08C01BF4
+	bl sub_08004584
+	cmp r0, #0
+	bne _08014418
+	ldr r0, _08014410 @ =0x08C01C54
+	bl sub_08004584
+	cmp r0, #0
+	bne _08014418
+	ldr r0, _08014414 @ =0x08C01C34
+	bl sub_08004584
+	cmp r0, #0
+	bne _08014418
+	movs r0, #0
+	b _0801441A
+	.align 2, 0
+_08014408: .4byte 0x08C01C14
+_0801440C: .4byte 0x08C01BF4
+_08014410: .4byte 0x08C01C54
+_08014414: .4byte 0x08C01C34
+_08014418:
+	movs r0, #1
+_0801441A:
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_08014420
+sub_08014420: @ 0x08014420
+	push {r4, lr}
+	adds r4, r0, #0
+	ldr r0, _08014438 @ =0x08C01BF4
+	movs r1, #3
+	bl Proc_Start
+	adds r0, #0x64
+	strh r4, [r0]
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08014438: .4byte 0x08C01BF4
+
+	thumb_func_start sub_0801443C
+sub_0801443C: @ 0x0801443C
+	push {r4, lr}
+	adds r4, r0, #0
+	ldr r0, _08014454 @ =0x08C01C14
+	movs r1, #3
+	bl Proc_Start
+	adds r0, #0x64
+	strh r4, [r0]
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08014454: .4byte 0x08C01C14
+
+	thumb_func_start sub_08014458
+sub_08014458: @ 0x08014458
+	push {r4, lr}
+	adds r4, r0, #0
+	ldr r0, _0801446C @ =0x08C01BF4
+	bl sub_080043D4
+	adds r0, #0x64
+	strh r4, [r0]
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_0801446C: .4byte 0x08C01BF4
+
+	thumb_func_start sub_08014470
+sub_08014470: @ 0x08014470
+	push {r4, lr}
+	adds r4, r0, #0
+	ldr r0, _08014484 @ =0x08C01C14
+	bl sub_080043D4
+	adds r0, #0x64
+	strh r4, [r0]
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08014484: .4byte 0x08C01C14
+
+	thumb_func_start sub_08014488
+sub_08014488: @ 0x08014488
+	push {r4, lr}
+	adds r4, r0, #0
+	ldr r0, _0801449C @ =0x08C01C34
+	bl sub_080043D4
+	adds r0, #0x64
+	strh r4, [r0]
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_0801449C: .4byte 0x08C01C34
+
+	thumb_func_start sub_080144A0
+sub_080144A0: @ 0x080144A0
+	push {r4, lr}
+	adds r4, r0, #0
+	ldr r0, _080144B4 @ =0x08C01C54
+	bl sub_080043D4
+	adds r0, #0x64
+	strh r4, [r0]
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080144B4: .4byte 0x08C01C54
+
+	thumb_func_start sub_080144B8
+sub_080144B8: @ 0x080144B8
+	push {lr}
+	movs r0, #0x10
+	bl sub_08014420
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_080144C4
+sub_080144C4: @ 0x080144C4
+	push {lr}
+	movs r0, #4
+	bl sub_08014420
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_080144D0
+sub_080144D0: @ 0x080144D0
+	push {lr}
+	movs r0, #0x40
+	bl sub_08014420
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_080144DC
+sub_080144DC: @ 0x080144DC
+	push {lr}
+	movs r0, #0x10
+	bl sub_0801443C
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_080144E8
+sub_080144E8: @ 0x080144E8
+	push {lr}
+	movs r0, #4
+	bl sub_0801443C
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_080144F4
+sub_080144F4: @ 0x080144F4
+	push {lr}
+	movs r0, #0x40
+	bl sub_0801443C
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08014500
+sub_08014500: @ 0x08014500
+	push {lr}
+	adds r1, r0, #0
+	movs r0, #0x10
+	bl sub_08014458
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08014510
+sub_08014510: @ 0x08014510
+	push {lr}
+	adds r1, r0, #0
+	movs r0, #4
+	bl sub_08014458
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08014520
+sub_08014520: @ 0x08014520
+	push {lr}
+	adds r1, r0, #0
+	movs r0, #0x40
+	bl sub_08014458
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08014530
+sub_08014530: @ 0x08014530
+	push {lr}
+	adds r1, r0, #0
+	movs r0, #0x10
+	bl sub_08014470
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08014540
+sub_08014540: @ 0x08014540
+	push {lr}
+	adds r1, r0, #0
+	movs r0, #4
+	bl sub_08014470
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08014550
+sub_08014550: @ 0x08014550
+	push {lr}
+	adds r1, r0, #0
+	movs r0, #0x40
+	bl sub_08014470
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08014560
+sub_08014560: @ 0x08014560
+	push {lr}
+	adds r1, r0, #0
+	movs r0, #4
+	bl sub_08014488
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08014570
+sub_08014570: @ 0x08014570
+	push {lr}
+	adds r1, r0, #0
+	movs r0, #4
+	bl sub_080144A0
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08014580
+sub_08014580: @ 0x08014580
+	push {lr}
+	adds r2, r0, #0
+	ldr r3, _08014594 @ =sub_08014900
+	movs r0, #1
+	movs r1, #4
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08014594: .4byte sub_08014900
+
+	thumb_func_start sub_08014598
+sub_08014598: @ 0x08014598
+	push {lr}
+	adds r2, r0, #0
+	ldr r3, _080145AC @ =sub_08014900
+	movs r0, #1
+	movs r1, #8
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080145AC: .4byte sub_08014900
+
+	thumb_func_start sub_080145B0
+sub_080145B0: @ 0x080145B0
+	push {lr}
+	adds r2, r0, #0
+	ldr r3, _080145C4 @ =sub_08014900
+	movs r0, #1
+	movs r1, #0x10
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080145C4: .4byte sub_08014900
+
+	thumb_func_start sub_080145C8
+sub_080145C8: @ 0x080145C8
+	push {lr}
+	adds r2, r0, #0
+	ldr r3, _080145DC @ =sub_08014900
+	movs r0, #1
+	movs r1, #0x20
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080145DC: .4byte sub_08014900
+
+	thumb_func_start sub_080145E0
+sub_080145E0: @ 0x080145E0
+	push {lr}
+	adds r2, r0, #0
+	ldr r3, _080145F4 @ =sub_08014900
+	movs r0, #1
+	movs r1, #0x40
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080145F4: .4byte sub_08014900
+
+	thumb_func_start sub_080145F8
+sub_080145F8: @ 0x080145F8
+	push {lr}
+	adds r2, r0, #0
+	movs r0, #0
+	movs r1, #8
+	movs r3, #0
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_0801460C
+sub_0801460C: @ 0x0801460C
+	push {lr}
+	adds r2, r0, #0
+	movs r0, #0
+	movs r1, #0x10
+	movs r3, #0
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08014620
+sub_08014620: @ 0x08014620
+	push {lr}
+	adds r2, r0, #0
+	movs r0, #0
+	movs r1, #0x20
+	movs r3, #0
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08014634
+sub_08014634: @ 0x08014634
+	push {lr}
+	adds r2, r0, #0
+	movs r0, #0
+	movs r1, #0x40
+	movs r3, #0
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08014648
+sub_08014648: @ 0x08014648
+	push {lr}
+	adds r2, r0, #0
+	ldr r3, _0801465C @ =sub_08014900
+	movs r0, #3
+	movs r1, #4
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+_0801465C: .4byte sub_08014900
+
+	thumb_func_start sub_08014660
+sub_08014660: @ 0x08014660
+	push {lr}
+	adds r2, r0, #0
+	ldr r3, _08014674 @ =sub_08014900
+	movs r0, #3
+	movs r1, #8
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08014674: .4byte sub_08014900
+
+	thumb_func_start sub_08014678
+sub_08014678: @ 0x08014678
+	push {lr}
+	adds r2, r0, #0
+	ldr r3, _0801468C @ =sub_08014900
+	movs r0, #3
+	movs r1, #0x10
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+_0801468C: .4byte sub_08014900
+
+	thumb_func_start sub_08014690
+sub_08014690: @ 0x08014690
+	push {lr}
+	adds r2, r0, #0
+	ldr r3, _080146A4 @ =sub_08014900
+	movs r0, #3
+	movs r1, #0x20
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080146A4: .4byte sub_08014900
+
+	thumb_func_start sub_080146A8
+sub_080146A8: @ 0x080146A8
+	push {lr}
+	adds r2, r0, #0
+	ldr r3, _080146BC @ =sub_08014900
+	movs r0, #3
+	movs r1, #0x40
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080146BC: .4byte sub_08014900
+
+	thumb_func_start sub_080146C0
+sub_080146C0: @ 0x080146C0
+	push {lr}
+	adds r2, r0, #0
+	movs r0, #2
+	movs r1, #4
+	movs r3, #0
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_080146D4
+sub_080146D4: @ 0x080146D4
+	push {lr}
+	adds r2, r0, #0
+	movs r0, #2
+	movs r1, #8
+	movs r3, #0
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_080146E8
+sub_080146E8: @ 0x080146E8
+	push {lr}
+	adds r2, r0, #0
+	movs r0, #2
+	movs r1, #8
+	movs r3, #0
+	bl sub_080147E8
+	bl sub_080148C0
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08014700
+sub_08014700: @ 0x08014700
+	push {lr}
+	adds r2, r0, #0
+	movs r0, #2
+	movs r1, #0x10
+	movs r3, #0
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08014714
+sub_08014714: @ 0x08014714
+	push {lr}
+	adds r2, r0, #0
+	movs r0, #2
+	movs r1, #0x20
+	movs r3, #0
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08014728
+sub_08014728: @ 0x08014728
+	push {lr}
+	adds r2, r0, #0
+	movs r0, #2
+	movs r1, #0x40
+	movs r3, #0
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_0801473C
+sub_0801473C: @ 0x0801473C
+	push {lr}
+	adds r2, r0, #0
+	movs r0, #6
+	movs r1, #0x10
+	movs r3, #0
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08014750
+sub_08014750: @ 0x08014750
+	push {lr}
+	adds r2, r0, #0
+	movs r0, #7
+	movs r1, #0x10
+	movs r3, #0
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08014764
+sub_08014764: @ 0x08014764
+	push {lr}
+	adds r2, r0, #0
+	movs r0, #6
+	movs r1, #8
+	movs r3, #0
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08014778
+sub_08014778: @ 0x08014778
+	push {lr}
+	adds r2, r0, #0
+	movs r0, #4
+	movs r1, #4
+	movs r3, #0
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_0801478C
+sub_0801478C: @ 0x0801478C
+	push {lr}
+	adds r2, r0, #0
+	movs r0, #4
+	movs r1, #8
+	movs r3, #0
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_080147A0
+sub_080147A0: @ 0x080147A0
+	push {lr}
+	adds r2, r0, #0
+	ldr r3, _080147B4 @ =sub_08014970
+	movs r0, #7
+	movs r1, #8
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080147B4: .4byte sub_08014970
+
+	thumb_func_start sub_080147B8
+sub_080147B8: @ 0x080147B8
+	push {r4, lr}
+	adds r4, r0, #0
+	bl sub_080143D8
+	lsls r0, r0, #0x18
+	cmp r0, #0
+	bne _080147CC
+	adds r0, r4, #0
+	bl sub_0800457C
+_080147CC:
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_080147D4
+sub_080147D4: @ 0x080147D4
+	push {lr}
+	adds r2, r0, #0
+	adds r3, r1, #0
+	movs r0, #3
+	movs r1, #0x40
+	bl sub_080147E8
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_080147E8
+sub_080147E8: @ 0x080147E8
+	push {r4, r5, r6, r7, lr}
+	adds r4, r1, #0
+	adds r1, r2, #0
+	adds r5, r3, #0
+	ldr r7, _0801482C @ =0x0818F990
+	lsls r2, r0, #1
+	adds r2, r2, r0
+	lsls r6, r2, #2
+	adds r0, r6, r7
+	ldr r2, [r0]
+	ldr r0, _08014830 @ =0x08C01C74
+	bl _call_via_r2
+	str r4, [r0, #0x54]
+	str r5, [r0, #0x4c]
+	asrs r4, r4, #4
+	cmp r4, #0
+	bne _0801480E
+	movs r4, #1
+_0801480E:
+	adds r0, r7, #4
+	adds r0, r6, r0
+	ldr r1, [r0]
+	adds r0, r7, #0
+	adds r0, #8
+	adds r0, r6, r0
+	ldr r0, [r0]
+	muls r0, r4, r0
+	lsls r0, r0, #0x18
+	asrs r0, r0, #0x18
+	bl _call_via_r1
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_0801482C: .4byte 0x0818F990
+_08014830: .4byte 0x08C01C74
+
+	thumb_func_start sub_08014834
+sub_08014834: @ 0x08014834
+	push {lr}
+	ldr r0, _08014840 @ =0x08C01C74
+	bl sub_08004748
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08014840: .4byte 0x08C01C74
+
+	thumb_func_start sub_08014844
+sub_08014844: @ 0x08014844
+	movs r1, #0
+	str r1, [r0, #0x58]
+	str r1, [r0, #0x5c]
+	str r1, [r0, #0x4c]
+	bx lr
+	.align 2, 0
+
+	thumb_func_start sub_08014850
+sub_08014850: @ 0x08014850
+	push {r4, lr}
+	adds r4, r0, #0
+	bl sub_08014874
+	lsls r0, r0, #0x18
+	cmp r0, #0
+	bne _0801486E
+	ldr r0, [r4, #0x4c]
+	cmp r0, #0
+	beq _08014868
+	bl _call_via_r0
+_08014868:
+	adds r0, r4, #0
+	bl sub_0800457C
+_0801486E:
+	pop {r4}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08014874
+sub_08014874: @ 0x08014874
+	push {r4, lr}
+	adds r4, r0, #0
+	ldr r0, [r4, #0x58]
+	ldr r2, [r4, #0x54]
+	adds r1, r0, r2
+	str r1, [r4, #0x58]
+	ldr r0, [r4, #0x5c]
+	adds r0, r0, r2
+	str r0, [r4, #0x5c]
+	cmp r1, #0xf
+	bgt _08014892
+	cmp r0, r2
+	beq _08014898
+_0801488E:
+	movs r0, #1
+	b _080148B0
+_08014892:
+	adds r0, r1, #0
+	subs r0, #0x10
+	str r0, [r4, #0x58]
+_08014898:
+	bl sub_080C0C38
+	ldr r1, _080148B8 @ =0x02022860
+	movs r0, #0
+	strh r0, [r1]
+	bl sub_08001034
+	ldr r1, [r4, #0x5c]
+	ldr r0, _080148BC @ =0x000001FF
+	cmp r1, r0
+	ble _0801488E
+	movs r0, #0
+_080148B0:
+	pop {r4}
+	pop {r1}
+	bx r1
+	.align 2, 0
+_080148B8: .4byte 0x02022860
+_080148BC: .4byte 0x000001FF
+
+	thumb_func_start sub_080148C0
+sub_080148C0: @ 0x080148C0
+	push {lr}
+	movs r0, #0x10
+	movs r1, #0x10
+	movs r2, #0
+	bl sub_08002310
+	bl sub_080148E4
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_080148D4
+sub_080148D4: @ 0x080148D4
+	push {lr}
+	movs r2, #0
+	bl sub_08002310
+	bl sub_080148E4
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_080148E4
+sub_080148E4: @ 0x080148E4
+	push {lr}
+	ldr r0, _080148FC @ =0x08C01C74
+	bl sub_08004584
+	adds r1, r0, #0
+	cmp r1, #0
+	beq _080148F6
+	movs r0, #0
+	str r0, [r1, #0x4c]
+_080148F6:
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080148FC: .4byte 0x08C01C74
+
+	thumb_func_start sub_08014900
+sub_08014900: @ 0x08014900
+	push {r4, lr}
+	ldr r4, _08014964 @ =0x03002790
+	adds r2, r4, #0
+	adds r2, #0x3c
+	movs r0, #0xc0
+	ldrb r1, [r2]
+	orrs r0, r1
+	strb r0, [r2]
+	adds r0, r4, #0
+	adds r0, #0x44
+	movs r3, #0
+	strb r3, [r0]
+	adds r0, #1
+	strb r3, [r0]
+	adds r1, r4, #0
+	adds r1, #0x46
+	movs r0, #0x10
+	strb r0, [r1]
+	ldr r0, _08014968 @ =0x0000FFE0
+	ldrh r1, [r4, #0x3c]
+	ands r0, r1
+	movs r1, #0x1f
+	orrs r0, r1
+	strh r0, [r4, #0x3c]
+	movs r0, #0x20
+	ldrb r1, [r2]
+	orrs r0, r1
+	strb r0, [r2]
+	ldr r0, _0801496C @ =0x02022860
+	strh r3, [r0]
+	bl sub_08001034
+	movs r0, #2
+	rsbs r0, r0, #0
+	ldrb r1, [r4, #1]
+	ands r0, r1
+	movs r1, #3
+	rsbs r1, r1, #0
+	ands r0, r1
+	subs r1, #2
+	ands r0, r1
+	subs r1, #4
+	ands r0, r1
+	subs r1, #8
+	ands r0, r1
+	strb r0, [r4, #1]
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08014964: .4byte 0x03002790
+_08014968: .4byte 0x0000FFE0
+_0801496C: .4byte 0x02022860
+
+	thumb_func_start sub_08014970
+sub_08014970: @ 0x08014970
+	ldr r3, _080149AC @ =0x03002790
+	adds r2, r3, #0
+	adds r2, #0x3c
+	movs r0, #0x3f
+	ldrb r1, [r2]
+	ands r0, r1
+	movs r1, #0x80
+	orrs r0, r1
+	strb r0, [r2]
+	adds r0, r3, #0
+	adds r0, #0x44
+	movs r1, #0
+	strb r1, [r0]
+	adds r0, #1
+	strb r1, [r0]
+	adds r1, r3, #0
+	adds r1, #0x46
+	movs r0, #0x10
+	strb r0, [r1]
+	ldr r0, _080149B0 @ =0x0000FFE0
+	ldrh r1, [r3, #0x3c]
+	ands r0, r1
+	movs r1, #0x1f
+	orrs r0, r1
+	strh r0, [r3, #0x3c]
+	movs r0, #0x20
+	ldrb r1, [r2]
+	orrs r0, r1
+	strb r0, [r2]
+	bx lr
+	.align 2, 0
+_080149AC: .4byte 0x03002790
+_080149B0: .4byte 0x0000FFE0
+
+	thumb_func_start sub_080149B4
+sub_080149B4: @ 0x080149B4
+	push {r4, lr}
+	adds r2, r0, #0
+	adds r4, r1, #0
+	ldr r0, _080149CC @ =0x08C01CA4
+	adds r1, r2, #0
+	bl sub_080043D4
+	str r4, [r0, #0x58]
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080149CC: .4byte 0x08C01CA4
+
+	thumb_func_start sub_080149D0
+sub_080149D0: @ 0x080149D0
+	push {lr}
+	adds r1, r0, #0
+	ldr r0, [r1, #0x58]
+	cmp r0, #0
+	bne _080149E2
+	adds r0, r1, #0
+	bl sub_0800457C
+	b _080149E6
+_080149E2:
+	subs r0, #1
+	str r0, [r1, #0x58]
+_080149E6:
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_080149EC
+sub_080149EC: @ 0x080149EC
+	push {r4, r5, r6, r7, lr}
+	mov r7, r8
+	push {r7}
+	adds r4, r0, #0
+	adds r6, r1, #0
+	movs r5, #0
+	cmp r4, #0
+	bne _08014A14
+	ldr r0, _08014A10 @ =0x08C01CBC
+	ldrb r1, [r0]
+	strb r1, [r6]
+	adds r6, #1
+	ldrb r0, [r0, #1]
+	strb r0, [r6]
+	strb r4, [r6, #1]
+	movs r0, #1
+	b _08014AA0
+	.align 2, 0
+_08014A10: .4byte 0x08C01CBC
+_08014A14:
+	cmp r4, #0
+	bge _08014A26
+	ldr r0, _08014A30 @ =0x08C01CC0
+	ldrb r1, [r0]
+	strb r1, [r6]
+	ldrb r0, [r0, #1]
+	strb r0, [r6, #1]
+	rsbs r4, r4, #0
+	movs r5, #2
+_08014A26:
+	ldr r0, _08014A34 @ =0x0001869F
+	cmp r4, r0
+	ble _08014A38
+	adds r5, #0xa
+	b _08014A66
+	.align 2, 0
+_08014A30: .4byte 0x08C01CC0
+_08014A34: .4byte 0x0001869F
+_08014A38:
+	ldr r0, _08014A44 @ =0x0000270F
+	cmp r4, r0
+	ble _08014A48
+	adds r5, #8
+	b _08014A66
+	.align 2, 0
+_08014A44: .4byte 0x0000270F
+_08014A48:
+	ldr r0, _08014A54 @ =0x000003E7
+	cmp r4, r0
+	ble _08014A58
+	adds r5, #6
+	b _08014A66
+	.align 2, 0
+_08014A54: .4byte 0x000003E7
+_08014A58:
+	cmp r4, #0x63
+	ble _08014A60
+	adds r5, #4
+	b _08014A66
+_08014A60:
+	cmp r4, #9
+	ble _08014A66
+	adds r5, #2
+_08014A66:
+	mov r8, r5
+	cmp r4, #0
+	ble _08014A92
+	ldr r7, _08014AAC @ =0x08C01CBC
+_08014A6E:
+	adds r0, r4, #0
+	movs r1, #0xa
+	bl DivRem
+	adds r2, r6, r5
+	ldrb r1, [r7]
+	strb r1, [r2]
+	ldrb r1, [r7, #1]
+	adds r0, r1, r0
+	strb r0, [r2, #1]
+	adds r0, r4, #0
+	movs r1, #0xa
+	bl Div
+	adds r4, r0, #0
+	subs r5, #2
+	cmp r4, #0
+	bgt _08014A6E
+_08014A92:
+	mov r0, r8
+	adds r1, r6, r0
+	movs r0, #0
+	strb r0, [r1, #2]
+	mov r1, r8
+	asrs r0, r1, #1
+	adds r0, #1
+_08014AA0:
+	pop {r3}
+	mov r8, r3
+	pop {r4, r5, r6, r7}
+	pop {r1}
+	bx r1
+	.align 2, 0
+_08014AAC: .4byte 0x08C01CBC
+
+	thumb_func_start sub_08014AB0
+sub_08014AB0: @ 0x08014AB0
+	push {r4, r5, r6, lr}
+	mov r6, sb
+	mov r5, r8
+	push {r5, r6}
+	mov sb, r0
+	mov r8, r1
+	adds r4, r2, #0
+	adds r6, r3, #0
+	ldr r5, _08014B10 @ =0x03000430
+	adds r0, r5, #0
+	adds r1, r4, #0
+	bl sub_08005344
+	adds r0, r6, #0
+	bl sub_080054CC
+	lsls r4, r4, #3
+	subs r4, r4, r0
+	subs r4, #1
+	lsrs r0, r4, #0x1f
+	adds r4, r4, r0
+	asrs r4, r4, #1
+	adds r0, r5, #0
+	adds r1, r4, #0
+	bl sub_08005444
+	adds r0, r5, #0
+	mov r1, r8
+	bl sub_08005450
+	adds r0, r5, #0
+	adds r1, r6, #0
+	bl sub_080055DC
+	adds r0, r5, #0
+	mov r1, sb
+	bl sub_08005460
+	movs r0, #1
+	bl sub_08000FD4
+	adds r0, r5, #0
+	pop {r3, r4}
+	mov r8, r3
+	mov sb, r4
+	pop {r4, r5, r6}
+	pop {r1}
+	bx r1
+	.align 2, 0
+_08014B10: .4byte 0x03000430
+
+	thumb_func_start sub_08014B14
+sub_08014B14: @ 0x08014B14
+	push {r4, r5, r6, r7, lr}
+	adds r7, r0, #0
+	adds r6, r1, #0
+	adds r5, r2, #0
+	ldr r4, _08014B54 @ =0x03000430
+	adds r0, r5, #0
+	bl sub_080054CC
+	adds r1, r0, #7
+	cmp r1, #0
+	bge _08014B2C
+	adds r1, #7
+_08014B2C:
+	asrs r1, r1, #3
+	adds r0, r4, #0
+	bl sub_08005344
+	adds r0, r4, #0
+	adds r1, r6, #0
+	bl sub_08005450
+	adds r0, r4, #0
+	adds r1, r5, #0
+	bl sub_080055DC
+	adds r0, r4, #0
+	adds r1, r7, #0
+	bl sub_08005460
+	adds r0, r4, #0
+	pop {r4, r5, r6, r7}
+	pop {r1}
+	bx r1
+	.align 2, 0
+_08014B54: .4byte 0x03000430
+
+	thumb_func_start sub_08014B58
+sub_08014B58: @ 0x08014B58
+	push {lr}
+	ldr r0, _08014B64 @ =0x08C01CC4
+	bl sub_08004748
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08014B64: .4byte 0x08C01CC4
+
+	thumb_func_start sub_08014B68
+sub_08014B68: @ 0x08014B68
+	push {r4, r5, r6, lr}
+	mov r6, r8
+	push {r6}
+	adds r5, r0, #0
+	mov r8, r1
+	adds r4, r2, #0
+	adds r6, r3, #0
+	ldr r1, [sp, #0x14]
+	ldr r0, _08014BA0 @ =0x08C01CC4
+	bl Proc_Start
+	str r5, [r0, #0x2c]
+	movs r2, #0
+	mov r1, r8
+	strh r1, [r0, #0x30]
+	lsrs r1, r4, #0x1f
+	adds r4, r4, r1
+	asrs r4, r4, #1
+	strh r4, [r0, #0x32]
+	strh r6, [r0, #0x36]
+	strh r6, [r0, #0x34]
+	strh r2, [r0, #0x38]
+	strh r2, [r0, #0x3a]
+	pop {r3}
+	mov r8, r3
+	pop {r4, r5, r6}
+	pop {r1}
+	bx r1
+	.align 2, 0
+_08014BA0: .4byte 0x08C01CC4
+
+	thumb_func_start sub_08014BA4
+sub_08014BA4: @ 0x08014BA4
+	push {r4, lr}
+	sub sp, #4
+	ldr r4, [sp, #0xc]
+	str r4, [sp]
+	bl sub_08014B68
+	movs r1, #0
+	strh r1, [r0, #0x3a]
+	add sp, #4
+	pop {r4}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08014BBC
+sub_08014BBC: @ 0x08014BBC
+	push {r4, lr}
+	sub sp, #4
+	ldr r4, [sp, #0xc]
+	str r4, [sp]
+	bl sub_08014B68
+	movs r1, #1
+	strh r1, [r0, #0x3a]
+	add sp, #4
+	pop {r4}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08014BD4
+sub_08014BD4: @ 0x08014BD4
+	push {r4, r5, r6, lr}
+	adds r4, r0, #0
+	ldrh r0, [r4, #0x36]
+	adds r0, #1
+	strh r0, [r4, #0x36]
+	lsls r0, r0, #0x10
+	lsrs r0, r0, #0x10
+	ldrh r1, [r4, #0x34]
+	cmp r0, r1
+	blo _08014C30
+	movs r0, #0
+	strh r0, [r4, #0x36]
+	ldrh r0, [r4, #0x38]
+	ldrh r1, [r4, #0x32]
+	bl DivRem
+	adds r5, r0, #0
+	ldrh r0, [r4, #0x3a]
+	cmp r0, #0
+	beq _08014C02
+	ldrh r2, [r4, #0x32]
+	subs r0, r2, r5
+	subs r5, r0, #1
+_08014C02:
+	lsls r6, r5, #1
+	ldr r0, [r4, #0x2c]
+	adds r0, r0, r6
+	ldrh r1, [r4, #0x30]
+	ldrh r3, [r4, #0x32]
+	subs r2, r3, r5
+	lsls r2, r2, #1
+	bl sub_0800105C
+	cmp r5, #0
+	ble _08014C2A
+	ldr r0, [r4, #0x2c]
+	ldrh r2, [r4, #0x32]
+	lsls r1, r2, #1
+	ldrh r3, [r4, #0x30]
+	adds r1, r3, r1
+	subs r1, r1, r6
+	adds r2, r6, #0
+	bl sub_0800105C
+_08014C2A:
+	ldrh r0, [r4, #0x38]
+	adds r0, #1
+	strh r0, [r4, #0x38]
+_08014C30:
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08014C38
+sub_08014C38: @ 0x08014C38
+	push {r4, r5, r6, r7, lr}
+	mov r7, sl
+	mov r6, sb
+	mov r5, r8
+	push {r5, r6, r7}
+	mov sb, r0
+	mov sl, r1
+	ldr r0, [sp, #0x24]
+	lsls r3, r3, #0x10
+	lsrs r4, r3, #0x10
+	adds r3, r2, #0
+	adds r0, r3, r0
+	cmp r3, r0
+	bge _08014C90
+	mov r8, r0
+	mov r0, sl
+	lsls r0, r0, #1
+	mov ip, r0
+_08014C5C:
+	mov r1, sl
+	ldr r2, [sp, #0x20]
+	adds r0, r1, r2
+	adds r6, r3, #1
+	cmp r1, r0
+	bge _08014C8A
+	adds r5, r0, #0
+	lsls r0, r3, #6
+	add r0, sb
+	mov r7, ip
+	adds r2, r7, r0
+_08014C72:
+	cmp r1, #0x1f
+	bhi _08014C7C
+	cmp r3, #0x1f
+	bhi _08014C7C
+	strh r4, [r2]
+_08014C7C:
+	adds r2, #2
+	adds r1, #1
+	adds r0, r4, #1
+	lsls r0, r0, #0x10
+	lsrs r4, r0, #0x10
+	cmp r1, r5
+	blt _08014C72
+_08014C8A:
+	adds r3, r6, #0
+	cmp r3, r8
+	blt _08014C5C
+_08014C90:
+	pop {r3, r4, r5}
+	mov r8, r3
+	mov sb, r4
+	mov sl, r5
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08014CA0
+sub_08014CA0: @ 0x08014CA0
+	push {r4, r5, r6, r7, lr}
+	mov r7, sl
+	mov r6, sb
+	mov r5, r8
+	push {r5, r6, r7}
+	sub sp, #8
+	str r0, [sp]
+	adds r7, r1, #0
+	mov sl, r2
+	ldr r0, [sp, #0x28]
+	mov ip, r0
+	ldr r0, [sp, #0x34]
+	lsls r3, r3, #0x10
+	lsrs r3, r3, #0x10
+	mov sb, r3
+	ldr r1, [sp, #0x30]
+	str r1, [sp, #4]
+	lsls r0, r0, #0x18
+	cmp r0, #0
+	beq _08014D20
+	movs r5, #0
+	ldr r2, [sp, #0x2c]
+	cmp r5, r2
+	bge _08014D68
+_08014CD0:
+	movs r2, #0
+	adds r6, r5, #1
+	cmp r2, ip
+	bge _08014D16
+	lsls r3, r5, #6
+	movs r0, #0x80
+	lsls r0, r0, #3
+	mov r8, r0
+_08014CE0:
+	adds r0, r7, r2
+	adds r4, r2, #1
+	cmp r0, #0x1f
+	bhi _08014D10
+	mov r2, sl
+	adds r1, r2, r5
+	cmp r1, #0x1f
+	bhi _08014D10
+	lsls r1, r1, #6
+	lsls r0, r0, #1
+	ldr r2, [sp]
+	adds r0, r0, r2
+	adds r1, r1, r0
+	mov r2, ip
+	subs r0, r2, r4
+	lsls r0, r0, #1
+	ldr r2, [sp, #4]
+	adds r0, r0, r2
+	adds r0, r3, r0
+	ldrh r0, [r0]
+	add r0, sb
+	mov r2, r8
+	eors r0, r2
+	strh r0, [r1]
+_08014D10:
+	adds r2, r4, #0
+	cmp r2, ip
+	blt _08014CE0
+_08014D16:
+	adds r5, r6, #0
+	ldr r0, [sp, #0x2c]
+	cmp r5, r0
+	blt _08014CD0
+	b _08014D68
+_08014D20:
+	movs r5, #0
+	ldr r1, [sp, #0x2c]
+	cmp r5, r1
+	bge _08014D68
+	lsls r2, r7, #1
+	mov r8, r2
+_08014D2C:
+	movs r2, #0
+	adds r6, r5, #1
+	cmp r2, ip
+	bge _08014D60
+	lsls r0, r5, #6
+	ldr r1, [sp, #4]
+	adds r4, r1, r0
+	ldr r3, [sp]
+	add r3, r8
+_08014D3E:
+	adds r0, r7, r2
+	cmp r0, #0x1f
+	bhi _08014D56
+	mov r1, sl
+	adds r0, r1, r5
+	cmp r0, #0x1f
+	bhi _08014D56
+	lsls r0, r0, #6
+	adds r0, r0, r3
+	ldrh r1, [r4]
+	add r1, sb
+	strh r1, [r0]
+_08014D56:
+	adds r4, #2
+	adds r3, #2
+	adds r2, #1
+	cmp r2, ip
+	blt _08014D3E
+_08014D60:
+	adds r5, r6, #0
+	ldr r2, [sp, #0x2c]
+	cmp r5, r2
+	blt _08014D2C
+_08014D68:
+	add sp, #8
+	pop {r3, r4, r5}
+	mov r8, r3
+	mov sb, r4
+	mov sl, r5
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08014D78
+sub_08014D78: @ 0x08014D78
+	push {r4, r5, r6, r7, lr}
+	mov r7, sl
+	mov r6, sb
+	mov r5, r8
+	push {r5, r6, r7}
+	sub sp, #8
+	str r0, [sp]
+	mov sb, r1
+	str r2, [sp, #4]
+	ldr r7, [sp, #0x28]
+	ldr r5, [sp, #0x34]
+	lsls r3, r3, #0x10
+	lsrs r3, r3, #0x10
+	mov sl, r3
+	ldr r0, [sp, #0x30]
+	mov r8, r0
+	movs r0, #0x20
+	adds r1, r7, #0
+	bl Div
+	adds r4, r0, #0
+	adds r0, r5, #0
+	adds r1, r4, #0
+	bl Div
+	adds r6, r0, #0
+	adds r0, r5, #0
+	adds r1, r4, #0
+	bl DivRem
+	adds r1, r7, #0
+	muls r1, r0, r1
+	lsls r1, r1, #1
+	add r1, r8
+	ldr r2, [sp, #0x2c]
+	adds r0, r6, #0
+	muls r0, r2, r0
+	lsls r0, r0, #6
+	adds r1, r1, r0
+	mov r8, r1
+	movs r5, #0
+	cmp r5, r2
+	bge _08014E12
+	mov r0, sb
+	lsls r0, r0, #1
+	mov ip, r0
+_08014DD4:
+	movs r4, #0
+	adds r6, r5, #1
+	cmp r4, r7
+	bge _08014E0A
+	lsls r0, r5, #6
+	mov r1, r8
+	adds r3, r1, r0
+	ldr r2, [sp]
+	add r2, ip
+_08014DE6:
+	mov r1, sb
+	adds r0, r1, r4
+	cmp r0, #0x1f
+	bhi _08014E00
+	ldr r1, [sp, #4]
+	adds r0, r1, r5
+	cmp r0, #0x1f
+	bhi _08014E00
+	lsls r0, r0, #6
+	adds r0, r0, r2
+	ldrh r1, [r3]
+	add r1, sl
+	strh r1, [r0]
+_08014E00:
+	adds r3, #2
+	adds r2, #2
+	adds r4, #1
+	cmp r4, r7
+	blt _08014DE6
+_08014E0A:
+	adds r5, r6, #0
+	ldr r2, [sp, #0x2c]
+	cmp r5, r2
+	blt _08014DD4
+_08014E12:
+	add sp, #8
+	pop {r3, r4, r5}
+	mov r8, r3
+	mov sb, r4
+	mov sl, r5
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08014E24
+sub_08014E24: @ 0x08014E24
+	push {r4, r5, r6, r7, lr}
+	mov r7, sl
+	mov r6, sb
+	mov r5, r8
+	push {r5, r6, r7}
+	sub sp, #0x14
+	str r0, [sp]
+	mov sl, r1
+	str r2, [sp, #4]
+	ldr r0, [sp, #0x34]
+	mov r8, r0
+	ldr r4, [sp, #0x40]
+	lsls r3, r3, #0x10
+	lsrs r3, r3, #0x10
+	str r3, [sp, #8]
+	ldr r1, [sp, #0x3c]
+	ldrb r2, [r1]
+	adds r2, #1
+	mov sb, r2
+	adds r1, #2
+	str r1, [sp, #0xc]
+	mov r0, sb
+	mov r1, r8
+	bl Div
+	adds r5, r0, #0
+	adds r0, r4, #0
+	adds r1, r5, #0
+	bl Div
+	adds r1, r5, #0
+	muls r1, r0, r1
+	subs r4, r4, r1
+	mov r1, r8
+	muls r1, r4, r1
+	lsls r1, r1, #1
+	ldr r6, [sp, #0xc]
+	adds r1, r6, r1
+	ldr r7, [sp, #0x38]
+	muls r0, r7, r0
+	lsls r0, r0, #6
+	adds r1, r1, r0
+	str r1, [sp, #0xc]
+	movs r5, #0
+	cmp r5, r7
+	bge _08014ED4
+	mov r0, sl
+	lsls r0, r0, #1
+	mov ip, r0
+_08014E86:
+	movs r4, #0
+	adds r1, r5, #1
+	str r1, [sp, #0x10]
+	cmp r4, r8
+	bge _08014ECC
+	ldr r2, [sp, #0x38]
+	subs r0, r2, r5
+	subs r0, #1
+	mov r6, sb
+	muls r6, r0, r6
+	adds r0, r6, #0
+	lsls r0, r0, #1
+	ldr r7, [sp, #0xc]
+	adds r3, r7, r0
+	ldr r2, [sp]
+	add r2, ip
+_08014EA6:
+	mov r1, sl
+	adds r0, r1, r4
+	cmp r0, #0x1f
+	bhi _08014EC2
+	ldr r6, [sp, #4]
+	adds r0, r6, r5
+	cmp r0, #0x1f
+	bhi _08014EC2
+	lsls r0, r0, #6
+	adds r0, r0, r2
+	ldrh r7, [r3]
+	ldr r6, [sp, #8]
+	adds r1, r7, r6
+	strh r1, [r0]
+_08014EC2:
+	adds r3, #2
+	adds r2, #2
+	adds r4, #1
+	cmp r4, r8
+	blt _08014EA6
+_08014ECC:
+	ldr r5, [sp, #0x10]
+	ldr r7, [sp, #0x38]
+	cmp r5, r7
+	blt _08014E86
+_08014ED4:
+	add sp, #0x14
+	pop {r3, r4, r5}
+	mov r8, r3
+	mov sb, r4
+	mov sl, r5
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08014EE4
+sub_08014EE4: @ 0x08014EE4
+	push {r4, r5, r6, r7, lr}
+	mov r7, sb
+	mov r6, r8
+	push {r6, r7}
+	mov r8, r0
+	adds r5, r1, #0
+	mov ip, r2
+	ldr r0, [sp, #0x1c]
+	lsls r0, r0, #0x10
+	lsrs r6, r0, #0x10
+	adds r2, r3, #2
+	movs r1, #0xff
+	ldr r0, [r3]
+	ldrb r3, [r3]
+	mov sb, r3
+	lsrs r3, r0, #8
+	ands r3, r1
+	lsls r1, r3, #0x10
+	asrs r0, r1, #0x10
+	cmp r0, #0
+	blt _08014F52
+_08014F0E:
+	asrs r0, r1, #0x10
+	add r0, ip
+	lsls r4, r3, #0x10
+	cmp r0, #0x1f
+	bhi _08014F46
+	lsls r0, r0, #5
+	adds r0, r5, r0
+	lsls r0, r0, #1
+	mov r3, r8
+	adds r1, r3, r0
+	mov r7, sb
+	lsls r3, r7, #0x10
+	asrs r0, r3, #0x10
+	cmp r0, #0
+	blt _08014F46
+_08014F2C:
+	asrs r3, r3, #0x10
+	adds r0, r5, r3
+	cmp r0, #0x1f
+	bhi _08014F3A
+	ldrh r7, [r2]
+	adds r0, r7, r6
+	strh r0, [r1]
+_08014F3A:
+	subs r0, r3, #1
+	adds r2, #2
+	adds r1, #2
+	lsls r3, r0, #0x10
+	cmp r3, #0
+	bge _08014F2C
+_08014F46:
+	ldr r1, _08014F60 @ =0xFFFF0000
+	adds r0, r4, r1
+	lsrs r3, r0, #0x10
+	lsls r1, r3, #0x10
+	cmp r1, #0
+	bge _08014F0E
+_08014F52:
+	pop {r3, r4}
+	mov r8, r3
+	mov sb, r4
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08014F60: .4byte 0xFFFF0000
+
+	thumb_func_start sub_08014F64
+sub_08014F64: @ 0x08014F64
+	push {r4, lr}
+	adds r4, r0, #0
+	ldr r0, [r4, #0x34]
+	subs r0, #1
+	str r0, [r4, #0x34]
+	movs r1, #1
+	rsbs r1, r1, #0
+	cmp r0, r1
+	bne _08014F82
+	ldr r0, [r4, #0x2c]
+	bl _call_via_r0
+	adds r0, r4, #0
+	bl sub_0800457C
+_08014F82:
+	pop {r4}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08014F88
+sub_08014F88: @ 0x08014F88
+	push {r4, lr}
+	adds r4, r0, #0
+	ldr r0, [r4, #0x34]
+	subs r0, #1
+	str r0, [r4, #0x34]
+	movs r1, #1
+	rsbs r1, r1, #0
+	cmp r0, r1
+	bne _08014FA8
+	ldr r1, [r4, #0x2c]
+	ldr r0, [r4, #0x30]
+	bl _call_via_r1
+	adds r0, r4, #0
+	bl sub_0800457C
+_08014FA8:
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_08014FB0
+sub_08014FB0: @ 0x08014FB0
+	push {r4, r5, lr}
+	adds r4, r0, #0
+	adds r5, r1, #0
+	ldr r0, _08014FC8 @ =0x08C01CCC
+	movs r1, #3
+	bl Proc_Start
+	str r4, [r0, #0x2c]
+	str r5, [r0, #0x34]
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08014FC8: .4byte 0x08C01CCC
+
+	thumb_func_start sub_08014FCC
+sub_08014FCC: @ 0x08014FCC
+	push {r4, r5, r6, lr}
+	adds r4, r0, #0
+	adds r5, r1, #0
+	adds r6, r2, #0
+	ldr r0, _08014FE8 @ =0x08C01CDC
+	movs r1, #3
+	bl Proc_Start
+	str r4, [r0, #0x2c]
+	str r5, [r0, #0x30]
+	str r6, [r0, #0x34]
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08014FE8: .4byte 0x08C01CDC
+
+	thumb_func_start sub_08014FEC
+sub_08014FEC: @ 0x08014FEC
+	cmp r1, #0
+	ble _08014FFC
+	movs r2, #0
+_08014FF2:
+	strb r2, [r0]
+	adds r0, #1
+	subs r1, #1
+	cmp r1, #0
+	bgt _08014FF2
+_08014FFC:
+	bx lr
+	.align 2, 0
+
+	thumb_func_start sub_08015000
+sub_08015000: @ 0x08015000
+	cmp r1, #0
+	ble _0801500E
+_08015004:
+	strb r2, [r0]
+	adds r0, #1
+	subs r1, #1
+	cmp r1, #0
+	bgt _08015004
+_0801500E:
+	bx lr
+
+	thumb_func_start sub_08015010
+sub_08015010: @ 0x08015010
+	cmp r1, #0
+	ble _0801501E
+_08015014:
+	strh r2, [r0]
+	adds r0, #2
+	subs r1, #1
+	cmp r1, #0
+	bgt _08015014
+_0801501E:
+	bx lr
+
+	thumb_func_start sub_08015020
+sub_08015020: @ 0x08015020
+	push {r4, lr}
+	adds r1, r0, #0
+	ldr r0, _08015040 @ =0x08C01DAC
+	bl sub_080043D4
+	adds r4, r0, #0
+	bl sub_080157A4
+	lsls r0, r0, #0x18
+	lsrs r0, r0, #0x18
+	adds r4, #0x64
+	strh r0, [r4]
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08015040: .4byte 0x08C01DAC
+
+	thumb_func_start sub_08015044
+sub_08015044: @ 0x08015044
+	push {r4, lr}
+	adds r4, r0, #0
+	bl sub_080157A4
+	lsls r0, r0, #0x18
+	lsrs r0, r0, #0x18
+	adds r1, r4, #0
+	adds r1, #0x64
+	movs r2, #0
+	ldrsh r1, [r1, r2]
+	cmp r0, r1
+	bne _08015062
+	adds r0, r4, #0
+	bl sub_0800457C
+_08015062:
+	pop {r4}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08015068
+sub_08015068: @ 0x08015068
+	push {r4, lr}
+	adds r4, r0, #0
+	adds r3, r2, #0
+	movs r0, #0x1f
+	ands r0, r3
+	cmp r0, #0
+	beq _08015086
+	lsrs r2, r3, #0x1f
+	adds r2, r3, r2
+	lsls r2, r2, #0xa
+	lsrs r2, r2, #0xb
+	adds r0, r4, #0
+	bl CpuSet
+	b _08015098
+_08015086:
+	adds r2, r3, #0
+	cmp r2, #0
+	bge _0801508E
+	adds r2, #3
+_0801508E:
+	lsls r2, r2, #9
+	lsrs r2, r2, #0xb
+	adds r0, r4, #0
+	bl CpuFastSet
+_08015098:
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_080150A0
+sub_080150A0: @ 0x080150A0
+	push {r4, r5, r6, r7, lr}
+	adds r6, r0, #0
+	adds r5, r1, #0
+	lsls r7, r2, #5
+	cmp r3, #0
+	ble _080150C6
+	adds r4, r3, #0
+_080150AE:
+	adds r0, r6, #0
+	adds r1, r5, #0
+	adds r2, r7, #0
+	bl sub_08015068
+	adds r6, r6, r7
+	movs r0, #0x80
+	lsls r0, r0, #3
+	adds r5, r5, r0
+	subs r4, #1
+	cmp r4, #0
+	bne _080150AE
+_080150C6:
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_080150CC
+sub_080150CC: @ 0x080150CC
+	push {r4, r5, lr}
+	adds r4, r0, #0
+	lsls r3, r3, #0x10
+	lsrs r3, r3, #0x10
+	cmp r2, #0
+	ble _080150E8
+_080150D8:
+	ldrh r5, [r4]
+	adds r0, r5, r3
+	strh r0, [r1]
+	adds r4, #2
+	adds r1, #2
+	subs r2, #2
+	cmp r2, #0
+	bgt _080150D8
+_080150E8:
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_080150F0
+sub_080150F0: @ 0x080150F0
+	cmp r0, #1
+	beq _08015118
+	cmp r0, #1
+	bgt _080150FE
+	cmp r0, #0
+	beq _08015108
+	b _08015148
+_080150FE:
+	cmp r0, #2
+	beq _08015128
+	cmp r0, #3
+	beq _08015138
+	b _08015148
+_08015108:
+	lsls r0, r2, #5
+	adds r0, r0, r1
+	lsls r0, r0, #1
+	ldr r1, _08015114 @ =0x02022C60
+	adds r0, r0, r1
+	b _0801514A
+	.align 2, 0
+_08015114: .4byte 0x02022C60
+_08015118:
+	lsls r0, r2, #5
+	adds r0, r0, r1
+	lsls r0, r0, #1
+	ldr r1, _08015124 @ =0x02023460
+	adds r0, r0, r1
+	b _0801514A
+	.align 2, 0
+_08015124: .4byte 0x02023460
+_08015128:
+	lsls r0, r2, #5
+	adds r0, r0, r1
+	lsls r0, r0, #1
+	ldr r1, _08015134 @ =0x02023C60
+	adds r0, r0, r1
+	b _0801514A
+	.align 2, 0
+_08015134: .4byte 0x02023C60
+_08015138:
+	lsls r0, r2, #5
+	adds r0, r0, r1
+	lsls r0, r0, #1
+	ldr r1, _08015144 @ =0x02024460
+	adds r0, r0, r1
+	b _0801514A
+	.align 2, 0
+_08015144: .4byte 0x02024460
+_08015148:
+	movs r0, #0
+_0801514A:
+	bx lr
+
+	thumb_func_start sub_0801514C
+sub_0801514C: @ 0x0801514C
+	push {r4, r5, lr}
+	ldr r4, _080151D0 @ =0x03002790
+	movs r5, #0x80
+	adds r0, r5, #0
+	ldrb r1, [r4, #0xc]
+	ands r0, r1
+	cmp r0, #0
+	bne _08015170
+	movs r0, #0
+	bl sub_08001370
+	movs r1, #0xc0
+	lsls r1, r1, #0x13
+	adds r0, r0, r1
+	movs r1, #0x10
+	movs r2, #0
+	bl sub_08015010
+_08015170:
+	adds r0, r5, #0
+	ldrb r1, [r4, #0x10]
+	ands r0, r1
+	cmp r0, #0
+	bne _0801518E
+	movs r0, #1
+	bl sub_08001370
+	movs r1, #0xc0
+	lsls r1, r1, #0x13
+	adds r0, r0, r1
+	movs r1, #0x10
+	movs r2, #0
+	bl sub_08015010
+_0801518E:
+	adds r0, r5, #0
+	ldrb r1, [r4, #0x14]
+	ands r0, r1
+	cmp r0, #0
+	bne _080151AC
+	movs r0, #2
+	bl sub_08001370
+	movs r1, #0xc0
+	lsls r1, r1, #0x13
+	adds r0, r0, r1
+	movs r1, #0x10
+	movs r2, #0
+	bl sub_08015010
+_080151AC:
+	adds r0, r5, #0
+	ldrb r4, [r4, #0x18]
+	ands r0, r4
+	cmp r0, #0
+	bne _080151CA
+	movs r0, #3
+	bl sub_08001370
+	movs r1, #0xc0
+	lsls r1, r1, #0x13
+	adds r0, r0, r1
+	movs r1, #0x10
+	movs r2, #0
+	bl sub_08015010
+_080151CA:
+	pop {r4, r5}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080151D0: .4byte 0x03002790
+
+	thumb_func_start sub_080151D4
+sub_080151D4: @ 0x080151D4
+	push {lr}
+	adds r1, r0, #0
+	cmp r1, #0
+	bge _080151E2
+	movs r0, #0x60
+	rsbs r0, r0, #0
+	b _080151F8
+_080151E2:
+	cmp r1, #0xef
+	bgt _080151F6
+	lsls r0, r1, #1
+	adds r0, r0, r1
+	lsls r0, r0, #6
+	movs r1, #0xf0
+	bl Div
+	subs r0, #0x60
+	b _080151F8
+_080151F6:
+	movs r0, #0x5f
+_080151F8:
+	pop {r1}
+	bx r1
+
+	thumb_func_start sub_080151FC
+sub_080151FC: @ 0x080151FC
+	push {r4, r5, r6, lr}
+	adds r4, r0, #0
+	adds r6, r1, #0
+	ldr r0, _0801524C @ =gPlaySt
+	adds r0, #0x41
+	ldrb r0, [r0]
+	lsls r0, r0, #0x1e
+	cmp r0, #0
+	blt _08015216
+	lsls r0, r4, #0x10
+	lsrs r0, r0, #0x10
+	bl m4aSongNumStart
+_08015216:
+	ldr r2, _08015250 @ =0x086EA858
+	ldr r0, _08015254 @ =0x086EA8D0
+	lsls r1, r4, #3
+	adds r1, r1, r0
+	ldrh r3, [r1, #4]
+	lsls r0, r3, #1
+	adds r0, r0, r3
+	lsls r0, r0, #2
+	adds r0, r0, r2
+	ldr r4, [r0]
+	adds r0, r4, #0
+	bl m4aMPlayImmInit
+	ldr r5, _08015258 @ =0x0000FFFF
+	adds r0, r6, #0
+	bl sub_080151D4
+	adds r2, r0, #0
+	lsls r2, r2, #0x18
+	asrs r2, r2, #0x18
+	adds r0, r4, #0
+	adds r1, r5, #0
+	bl MPlayPanpotControl
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_0801524C: .4byte gPlaySt
+_08015250: .4byte 0x086EA858
+_08015254: .4byte 0x086EA8D0
+_08015258: .4byte 0x0000FFFF
+
+	thumb_func_start sub_0801525C
+sub_0801525C: @ 0x0801525C
+	push {lr}
+	adds r3, r0, #0
+	adds r2, r1, #0
+	ldr r0, _08015270 @ =sub_08015274
+	adds r1, r3, #0
+	bl sub_08014FCC
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08015270: .4byte sub_08015274
+
+	thumb_func_start sub_08015274
+sub_08015274: @ 0x08015274
+	push {lr}
+	adds r1, r0, #0
+	ldr r0, _08015290 @ =gPlaySt
+	adds r0, #0x41
+	ldrb r0, [r0]
+	lsls r0, r0, #0x1e
+	cmp r0, #0
+	blt _0801528C
+	lsls r0, r1, #0x10
+	lsrs r0, r0, #0x10
+	bl m4aSongNumStart
+_0801528C:
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08015290: .4byte gPlaySt
+
+	thumb_func_start sub_08015294
+sub_08015294: @ 0x08015294
+	push {lr}
+	lsls r0, r0, #0x10
+	asrs r0, r0, #0x10
+	movs r1, #0
+	bl sub_0800376C
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_080152A4
+sub_080152A4: @ 0x080152A4
+	push {lr}
+	lsls r0, r0, #0x10
+	asrs r0, r0, #0x10
+	bl sub_080034C8
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_080152B4
+sub_080152B4: @ 0x080152B4
+	push {r4, r5, r6, r7, lr}
+	lsls r0, r0, #5
+	ldr r1, _08015308 @ =0x02022860
+	movs r2, #0x1f
+	mov ip, r2
+	movs r7, #0xf8
+	lsls r7, r7, #2
+	movs r6, #0xf8
+	lsls r6, r6, #7
+	adds r4, r0, r1
+	movs r5, #0xf
+_080152CA:
+	ldrh r1, [r4]
+	movs r0, #0x1f
+	ands r0, r1
+	lsrs r0, r0, #2
+	lsls r2, r0, #1
+	adds r2, r2, r0
+	adds r0, r7, #0
+	ands r0, r1
+	lsrs r0, r0, #2
+	lsls r3, r0, #1
+	adds r3, r3, r0
+	adds r0, r6, #0
+	ands r0, r1
+	lsrs r0, r0, #2
+	lsls r1, r0, #1
+	adds r1, r1, r0
+	mov r0, ip
+	ands r2, r0
+	ands r3, r7
+	orrs r2, r3
+	ands r1, r6
+	orrs r2, r1
+	strh r2, [r4]
+	adds r4, #2
+	subs r5, #1
+	cmp r5, #0
+	bge _080152CA
+	pop {r4, r5, r6, r7}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08015308: .4byte 0x02022860
+
+	thumb_func_start sub_0801530C
+sub_0801530C: @ 0x0801530C
+	adds r3, r0, #0
+	cmp r2, #0
+	beq _08015320
+_08015312:
+	ldrb r0, [r3]
+	strb r0, [r1]
+	adds r1, #1
+	adds r3, #1
+	subs r2, #1
+	cmp r2, #0
+	bne _08015312
+_08015320:
+	bx lr
+	.align 2, 0
+
+	thumb_func_start sub_08015324
+sub_08015324: @ 0x08015324
+	push {r4, r5, r6, lr}
+	mov r6, sb
+	mov r5, r8
+	push {r5, r6}
+	adds r6, r0, #0
+	mov sb, r1
+	adds r5, r2, #0
+	mov r8, r3
+	ldr r4, [sp, #0x18]
+	mov r0, r8
+	bl sub_080054CC
+	adds r1, r0, #0
+	lsls r4, r4, #3
+	subs r4, r4, r1
+	asrs r1, r4, #1
+	adds r0, r6, #0
+	bl sub_08005444
+	adds r0, r6, #0
+	mov r1, r8
+	bl sub_080055DC
+	lsls r5, r5, #5
+	add r5, sb
+	lsls r5, r5, #1
+	ldr r0, _08015370 @ =0x02022C60
+	adds r5, r5, r0
+	adds r0, r6, #0
+	adds r1, r5, #0
+	bl sub_08005460
+	pop {r3, r4}
+	mov r8, r3
+	mov sb, r4
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08015370: .4byte 0x02022C60
+
+	thumb_func_start sub_08015374
+sub_08015374: @ 0x08015374
+	push {r4, r5, r6, lr}
+	ldr r6, [r0]
+	ldr r3, [r1]
+	muls r3, r6, r3
+	ldr r5, [r0, #4]
+	ldr r4, [r1, #0xc]
+	muls r4, r5, r4
+	adds r3, r3, r4
+	ldr r4, [r0, #8]
+	ldr r0, [r1, #0x18]
+	muls r0, r4, r0
+	adds r3, r3, r0
+	asrs r3, r3, #0xc
+	str r3, [r2]
+	ldr r0, [r1, #4]
+	muls r0, r6, r0
+	ldr r3, [r1, #0x10]
+	muls r3, r5, r3
+	adds r0, r0, r3
+	ldr r3, [r1, #0x1c]
+	muls r3, r4, r3
+	adds r0, r0, r3
+	asrs r0, r0, #0xc
+	str r0, [r2, #4]
+	ldr r0, [r1, #8]
+	muls r0, r6, r0
+	ldr r3, [r1, #0x14]
+	muls r3, r5, r3
+	adds r0, r0, r3
+	ldr r1, [r1, #0x20]
+	muls r1, r4, r1
+	adds r0, r0, r1
+	asrs r0, r0, #0xc
+	str r0, [r2, #8]
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+	.align 2, 0
+
+	thumb_func_start sub_080153C0
+sub_080153C0: @ 0x080153C0
+	push {r4, r5, r6, lr}
+	sub sp, #0x30
+	adds r3, r0, #0
+	adds r4, r1, #0
+	adds r6, r2, #0
+	cmp r3, r6
+	beq _080153D2
+	cmp r4, r6
+	bne _080153D6
+_080153D2:
+	mov r5, sp
+	b _080153D8
+_080153D6:
+	adds r5, r6, #0
+_080153D8:
+	ldr r1, [r3]
+	ldr r0, [r4]
+	muls r0, r1, r0
+	ldr r2, [r3, #4]
+	ldr r1, [r4, #0xc]
+	muls r1, r2, r1
+	adds r0, r0, r1
+	ldr r2, [r3, #8]
+	ldr r1, [r4, #0x18]
+	muls r1, r2, r1
+	adds r0, r0, r1
+	asrs r0, r0, #0xc
+	str r0, [r5]
+	ldr r1, [r3]
+	ldr r0, [r4, #4]
+	muls r0, r1, r0
+	ldr r2, [r3, #4]
+	ldr r1, [r4, #0x10]
+	muls r1, r2, r1
+	adds r0, r0, r1
+	ldr r2, [r3, #8]
+	ldr r1, [r4, #0x1c]
+	muls r1, r2, r1
+	adds r0, r0, r1
+	asrs r0, r0, #0xc
+	str r0, [r5, #4]
+	ldr r1, [r3]
+	ldr r0, [r4, #8]
+	muls r0, r1, r0
+	ldr r2, [r3, #4]
+	ldr r1, [r4, #0x14]
+	muls r1, r2, r1
+	adds r0, r0, r1
+	ldr r2, [r3, #8]
+	ldr r1, [r4, #0x20]
+	muls r1, r2, r1
+	adds r0, r0, r1
+	asrs r0, r0, #0xc
+	str r0, [r5, #8]
+	ldr r1, [r3, #0xc]
+	ldr r0, [r4]
+	muls r0, r1, r0
+	ldr r2, [r3, #0x10]
+	ldr r1, [r4, #0xc]
+	muls r1, r2, r1
+	adds r0, r0, r1
+	ldr r2, [r3, #0x14]
+	ldr r1, [r4, #0x18]
+	muls r1, r2, r1
+	adds r0, r0, r1
+	asrs r0, r0, #0xc
+	str r0, [r5, #0xc]
+	ldr r1, [r3, #0xc]
+	ldr r0, [r4, #4]
+	muls r0, r1, r0
+	ldr r2, [r3, #0x10]
+	ldr r1, [r4, #0x10]
+	muls r1, r2, r1
+	adds r0, r0, r1
+	ldr r2, [r3, #0x14]
+	ldr r1, [r4, #0x1c]
+	muls r1, r2, r1
+	adds r0, r0, r1
+	asrs r0, r0, #0xc
+	str r0, [r5, #0x10]
+	ldr r1, [r3, #0xc]
+	ldr r0, [r4, #8]
+	muls r0, r1, r0
+	ldr r2, [r3, #0x10]
+	ldr r1, [r4, #0x14]
+	muls r1, r2, r1
+	adds r0, r0, r1
+	ldr r2, [r3, #0x14]
+	ldr r1, [r4, #0x20]
+	muls r1, r2, r1
+	adds r0, r0, r1
+	asrs r0, r0, #0xc
+	str r0, [r5, #0x14]
+	ldr r1, [r3, #0x18]
+	ldr r0, [r4]
+	muls r0, r1, r0
+	ldr r2, [r3, #0x1c]
+	ldr r1, [r4, #0xc]
+	muls r1, r2, r1
+	adds r0, r0, r1
+	ldr r2, [r3, #0x20]
+	ldr r1, [r4, #0x18]
+	muls r1, r2, r1
+	adds r0, r0, r1
+	asrs r0, r0, #0xc
+	str r0, [r5, #0x18]
+	ldr r1, [r3, #0x18]
+	ldr r0, [r4, #4]
+	muls r0, r1, r0
+	ldr r2, [r3, #0x1c]
+	ldr r1, [r4, #0x10]
+	muls r1, r2, r1
+	adds r0, r0, r1
+	ldr r2, [r3, #0x20]
+	ldr r1, [r4, #0x1c]
+	muls r1, r2, r1
+	adds r0, r0, r1
+	asrs r0, r0, #0xc
+	str r0, [r5, #0x1c]
+	ldr r1, [r3, #0x18]
+	ldr r0, [r4, #8]
+	muls r0, r1, r0
+	ldr r2, [r3, #0x1c]
+	ldr r1, [r4, #0x14]
+	muls r1, r2, r1
+	adds r0, r0, r1
+	ldr r2, [r3, #0x20]
+	ldr r1, [r4, #0x20]
+	muls r1, r2, r1
+	adds r0, r0, r1
+	asrs r0, r0, #0xc
+	str r0, [r5, #0x20]
+	ldr r1, [r3]
+	ldr r0, [r4, #0x24]
+	muls r0, r1, r0
+	ldr r2, [r3, #0xc]
+	ldr r1, [r4, #0x28]
+	muls r1, r2, r1
+	adds r0, r0, r1
+	ldr r2, [r3, #0x18]
+	ldr r1, [r4, #0x2c]
+	muls r1, r2, r1
+	adds r0, r0, r1
+	asrs r0, r0, #0xc
+	ldr r1, [r3, #0x24]
+	adds r0, r0, r1
+	str r0, [r5, #0x24]
+	ldr r1, [r3, #4]
+	ldr r0, [r4, #0x24]
+	muls r0, r1, r0
+	ldr r2, [r3, #0x10]
+	ldr r1, [r4, #0x28]
+	muls r1, r2, r1
+	adds r0, r0, r1
+	ldr r2, [r3, #0x1c]
+	ldr r1, [r4, #0x2c]
+	muls r1, r2, r1
+	adds r0, r0, r1
+	asrs r0, r0, #0xc
+	ldr r1, [r3, #0x28]
+	adds r0, r0, r1
+	str r0, [r5, #0x28]
+	ldr r1, [r3, #8]
+	ldr r0, [r4, #0x24]
+	muls r0, r1, r0
+	ldr r2, [r3, #0x14]
+	ldr r1, [r4, #0x28]
+	muls r1, r2, r1
+	adds r0, r0, r1
+	ldr r2, [r3, #0x20]
+	ldr r1, [r4, #0x2c]
+	muls r1, r2, r1
+	adds r0, r0, r1
+	asrs r0, r0, #0xc
+	ldr r1, [r3, #0x2c]
+	adds r0, r0, r1
+	str r0, [r5, #0x2c]
+	cmp r5, sp
+	bne _08015528
+	mov r0, sp
+	adds r1, r6, #0
+	bl sub_08015550
+_08015528:
+	add sp, #0x30
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_08015530
+sub_08015530: @ 0x08015530
+	movs r2, #0x80
+	lsls r2, r2, #5
+	str r2, [r0]
+	movs r1, #0
+	str r1, [r0, #4]
+	str r1, [r0, #8]
+	str r1, [r0, #0xc]
+	str r2, [r0, #0x10]
+	str r1, [r0, #0x14]
+	str r1, [r0, #0x18]
+	str r1, [r0, #0x1c]
+	str r2, [r0, #0x20]
+	str r1, [r0, #0x24]
+	str r1, [r0, #0x28]
+	str r1, [r0, #0x2c]
+	bx lr
+
+	thumb_func_start sub_08015550
+sub_08015550: @ 0x08015550
+	ldr r2, [r0]
+	str r2, [r1]
+	ldr r2, [r0, #4]
+	str r2, [r1, #4]
+	ldr r2, [r0, #8]
+	str r2, [r1, #8]
+	ldr r2, [r0, #0xc]
+	str r2, [r1, #0xc]
+	ldr r2, [r0, #0x10]
+	str r2, [r1, #0x10]
+	ldr r2, [r0, #0x14]
+	str r2, [r1, #0x14]
+	ldr r2, [r0, #0x18]
+	str r2, [r1, #0x18]
+	ldr r2, [r0, #0x1c]
+	str r2, [r1, #0x1c]
+	ldr r2, [r0, #0x20]
+	str r2, [r1, #0x20]
+	ldr r2, [r0, #0x24]
+	str r2, [r1, #0x24]
+	ldr r2, [r0, #0x28]
+	str r2, [r1, #0x28]
+	ldr r0, [r0, #0x2c]
+	str r0, [r1, #0x2c]
+	bx lr
+	.align 2, 0
+
+	thumb_func_start sub_08015584
+sub_08015584: @ 0x08015584
+	push {r4, lr}
+	ldr r3, _080155CC @ =0x080C0E98
+	lsls r1, r1, #0x10
+	movs r2, #0xff
+	lsls r2, r2, #0x10
+	ands r2, r1
+	asrs r2, r2, #0x10
+	adds r1, r2, #0
+	adds r1, #0x40
+	lsls r1, r1, #1
+	adds r1, r1, r3
+	ldrh r4, [r1]
+	lsls r2, r2, #1
+	adds r2, r2, r3
+	ldrh r2, [r2]
+	movs r1, #0x80
+	lsls r1, r1, #5
+	str r1, [r0]
+	movs r3, #0
+	str r3, [r0, #4]
+	str r3, [r0, #8]
+	str r3, [r0, #0xc]
+	lsls r4, r4, #0x10
+	asrs r4, r4, #0x10
+	str r4, [r0, #0x10]
+	lsls r2, r2, #0x10
+	asrs r2, r2, #0x10
+	rsbs r1, r2, #0
+	str r1, [r0, #0x14]
+	str r3, [r0, #0x18]
+	str r2, [r0, #0x1c]
+	str r4, [r0, #0x20]
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_080155CC: .4byte 0x080C0E98
+
+	thumb_func_start sub_080155D0
+sub_080155D0: @ 0x080155D0
+	push {r4, lr}
+	ldr r3, _08015614 @ =0x080C0E98
+	lsls r1, r1, #0x10
+	movs r2, #0xff
+	lsls r2, r2, #0x10
+	ands r2, r1
+	asrs r2, r2, #0x10
+	adds r1, r2, #0
+	adds r1, #0x40
+	lsls r1, r1, #1
+	adds r1, r1, r3
+	lsls r2, r2, #1
+	adds r2, r2, r3
+	ldrh r2, [r2]
+	movs r3, #0
+	ldrsh r4, [r1, r3]
+	str r4, [r0]
+	movs r3, #0
+	str r3, [r0, #4]
+	lsls r2, r2, #0x10
+	asrs r2, r2, #0x10
+	rsbs r1, r2, #0
+	str r1, [r0, #8]
+	str r3, [r0, #0xc]
+	movs r1, #0x80
+	lsls r1, r1, #5
+	str r1, [r0, #0x10]
+	str r3, [r0, #0x14]
+	str r2, [r0, #0x18]
+	str r3, [r0, #0x1c]
+	str r4, [r0, #0x20]
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_08015614: .4byte 0x080C0E98
+
+	thumb_func_start sub_08015618
+sub_08015618: @ 0x08015618
+	push {r4, lr}
+	ldr r3, _0801565C @ =0x080C0E98
+	lsls r1, r1, #0x10
+	movs r2, #0xff
+	lsls r2, r2, #0x10
+	ands r2, r1
+	asrs r2, r2, #0x10
+	adds r1, r2, #0
+	adds r1, #0x40
+	lsls r1, r1, #1
+	adds r1, r1, r3
+	lsls r2, r2, #1
+	adds r2, r2, r3
+	ldrh r2, [r2]
+	movs r4, #0
+	ldrsh r3, [r1, r4]
+	str r3, [r0]
+	lsls r2, r2, #0x10
+	asrs r2, r2, #0x10
+	rsbs r1, r2, #0
+	str r1, [r0, #4]
+	movs r1, #0
+	str r1, [r0, #8]
+	str r2, [r0, #0xc]
+	str r3, [r0, #0x10]
+	str r1, [r0, #0x14]
+	str r1, [r0, #0x18]
+	str r1, [r0, #0x1c]
+	movs r1, #0x80
+	lsls r1, r1, #5
+	str r1, [r0, #0x20]
+	pop {r4}
+	pop {r0}
+	bx r0
+	.align 2, 0
+_0801565C: .4byte 0x080C0E98
+
+	thumb_func_start nullsub_36
+nullsub_36: @ 0x08015660
+	bx lr
+	.align 2, 0
+
+	thumb_func_start sub_08015664
+sub_08015664: @ 0x08015664
+	push {r4, lr}
+	adds r4, r0, #0
+	ldr r2, [r4]
+	ldr r0, [r1]
+	muls r0, r2, r0
+	ldr r3, [r4, #4]
+	ldr r2, [r1, #4]
+	muls r2, r3, r2
+	adds r0, r0, r2
+	ldr r2, [r4, #8]
+	ldr r1, [r1, #8]
+	muls r1, r2, r1
+	adds r0, r0, r1
+	asrs r0, r0, #0xc
+	pop {r4}
+	pop {r1}
+	bx r1
+	.align 2, 0
+
+	thumb_func_start sub_08015688
+sub_08015688: @ 0x08015688
+	push {r4, r5, r6, lr}
+	ldr r6, [r0, #4]
+	ldr r3, [r1, #8]
+	muls r3, r6, r3
+	ldr r5, [r0, #8]
+	ldr r4, [r1, #4]
+	muls r4, r5, r4
+	subs r3, r3, r4
+	asrs r3, r3, #0xc
+	str r3, [r2]
+	ldr r3, [r1]
+	muls r3, r5, r3
+	ldr r4, [r0]
+	ldr r0, [r1, #8]
+	muls r0, r4, r0
+	subs r3, r3, r0
+	asrs r3, r3, #0xc
+	str r3, [r2, #4]
+	ldr r0, [r1, #4]
+	muls r0, r4, r0
+	ldr r1, [r1]
+	muls r1, r6, r1
+	subs r0, r0, r1
+	asrs r0, r0, #0xc
+	str r0, [r2, #8]
+	pop {r4, r5, r6}
+	pop {r0}
+	bx r0
+
+	thumb_func_start sub_080156C0
+sub_080156C0: @ 0x080156C0
+	muls r0, r3, r0
+	muls r1, r2, r1
+	subs r0, r0, r1
+	bx lr
diff --git a/data/data.s b/data/data.s
index 3760e92..9179ee0 100644
--- a/data/data.s
+++ b/data/data.s
@@ -1,3 +1,15 @@
 	.section .data
 
-	.incbin "FireEmblem7J.base.gba", 0x0C0CB8, (0x1000000 - 0x0C0CB8)
+	.incbin "FireEmblem7J.base.gba", 0x0C0CB8, (0xBBFC7C - 0x0C0CB8)
+
+	.global gpKeySt
+gpKeySt: @ 08BBFC7C
+	.word 0x02024C78
+
+	.incbin "FireEmblem7J.base.gba", 0xBBFC80, (0xC0216C - 0xBBFC80)
+
+	.global gUnitLut
+gUnitLut: @ 08C0216C
+	.incbin "FireEmblem7J.base.gba", 0xC0216C, 0x400
+
+	.incbin "FireEmblem7J.base.gba", 0xC0256C, (0x1000000 - 0xC0256C)
diff --git a/include/action.h b/include/action.h
deleted file mode 100644
index a02603c..0000000
--- a/include/action.h
+++ /dev/null
@@ -1,77 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-enum
-{
-    ACTION_NONE,
-    ACTION_WAIT = 0x01,
-    ACTION_COMBAT = 0x02,
-    ACTION_STAFF = 0x03,
-    ACTION_REFRESH = 0x04,
-    // 05?
-    ACTION_STEAL = 0x06,
-    ACTION_RESCUE = 0x07,
-    ACTION_DROP = 0x08,
-    ACTION_TAKE = 0x09,
-    ACTION_GIVE = 0x0A,
-    // 0B?
-    ACTION_TALK = 0x0C,
-    ACTION_SUPPORT = 0x0D,
-    ACTION_VISIT = 0x0E,
-    ACTION_SEIZE = 0x0F,
-    ACTION_DOOR = 0x10,
-    // 11?
-    ACTION_CHEST = 0x12,
-    // ACTION_SHOPPED,
-    // ACTION_ARENA,
-    ACTION_16 = 0x16,
-    ACTION_USEITEM = 0x17,
-    ACTION_TRADED = 0x18,
-    ACTION_TRADED_SUPPLY = 0x19,
-    ACTION_TRADED_NOCHANGES = 0x1A,
-    ACTION_TRAPPED = 0x1B,
-    ACTION_1C = 0x1C,
-};
-
-enum
-{
-    SUSPEND_POINT_PLAYER_PHASE,
-    SUSPEND_POINT_DURING_ACTION,
-    SUSPEND_POINT_AI_PHASE,
-    SUSPEND_POINT_BERSERK_PHASE,
-    SUSPEND_POINT_DURING_ARENA,
-    SUSPEND_POINT_5,
-    SUSPEND_POINT_6,
-    SUSPEND_POINT_7,
-    SUSPEND_POINT_8,
-    SUSPEND_POINT_CHANGE_PHASE,
-};
-
-struct Action
-{
-    /* 00 */ u16 action_rand_st[3];
-    /* 06 */ u16 arena_begin_rand_st[3];
-    /* 0C */ u8 instigator;
-    /* 0D */ u8 target;
-    /* 0E */ u8 x_move, y_move;
-    /* 10 */ u8 move_count;
-    /* 11 */ u8 id;
-    /* 12 */ u8 item_slot;
-    /* 13 */ u8 x_target, y_target;
-    /* 15 */ u8 extra;
-    /* 16 */ u8 suspend_point;
-};
-
-extern struct Action gAction;
-
-void SaveActionRand(void);
-void RestoreActionRand(void);
-bool DoAction(ProcPtr proc);
-
-void DropRescueOnDeath(ProcPtr parent, struct Unit * unit);
-void KillUnitOnCombatDeath(struct Unit * unit, struct Unit * opponent);
-void func_fe6_0802A6B4(struct Unit * unit);
-void func_fe6_0802A7F4(void);
-
-extern struct ProcScr CONST_DATA ProcScr_CombatAction[];
diff --git a/include/ai.h b/include/ai.h
deleted file mode 100644
index ee0bc39..0000000
--- a/include/ai.h
+++ /dev/null
@@ -1,139 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-enum
-{
-    AI_FLAGS_NONE = 0,
-
-    AI_FLAG_0 = (1 << 0),
-    AI_FLAG_STAY = (1 << 1),
-    AI_FLAG_BERSERKED = (1 << 2),
-};
-
-enum
-{
-    AI_UNIT_FLAG_SEEK_HEALING = (1 << 0),
-    AI_UNIT_FLAG_1 = (1 << 1),
-    AI_UNIT_FLAG_HEALER = (1 << 2),
-    AI_UNIT_FLAG_3 = (1 << 3),
-    AI_UNIT_FLAG_REPAIRER = (1 << 4),
-
-    AI_UNIT_FLAG_6 = (1 << 6),
-};
-
-enum
-{
-    // "ai3"
-
-    // 0~2 healing ai theshold select
-    AI_UNIT_CONFIG_HEALTHRESHOLD_SHIFT = 0,
-    AI_UNIT_CONFIG_HEALTHRESHOLD_BITS = 3,
-    AI_UNIT_CONFIG_HEALTHRESHOLD_MASK = ((1 << AI_UNIT_CONFIG_HEALTHRESHOLD_BITS) - 1) << AI_UNIT_CONFIG_HEALTHRESHOLD_SHIFT,
-
-    // 3~7 combat target decide weight set select
-    AI_UNIT_CONFIG_COMBATWEIGHT_SHIFT = 3,
-    AI_UNIT_CONFIG_COMBATWEIGHT_BITS = 5,
-    AI_UNIT_CONFIG_COMBATWEIGHT_MASK = ((1 << AI_UNIT_CONFIG_COMBATWEIGHT_BITS) - 1) << AI_UNIT_CONFIG_COMBATWEIGHT_SHIFT,
-
-    // "ai4"
-
-    // 8+
-
-    // 13
-    AI_UNIT_CONFIG_FLAG_STAY = 1 << 13,
-};
-
-enum
-{
-    AI_A_00 = 0x00,
-    AI_A_01 = 0x01,
-    AI_A_02 = 0x02,
-    AI_A_03 = 0x03,
-    AI_A_04 = 0x04,
-    AI_A_05 = 0x05,
-    AI_A_06 = 0x06,
-    AI_A_07 = 0x07,
-    AI_A_08 = 0x08,
-    AI_A_09 = 0x09,
-    AI_A_0A = 0x0A,
-    AI_A_0B = 0x0B,
-    AI_A_0C = 0x0C,
-    AI_A_0D = 0x0D,
-    AI_A_0E = 0x0E,
-    AI_A_0F = 0x0F,
-};
-
-enum
-{
-    AI_B_00 = 0x00,
-    AI_B_01 = 0x01,
-    AI_B_02 = 0x02,
-    AI_B_03 = 0x03,
-    AI_B_04 = 0x04,
-    AI_B_05 = 0x05,
-    AI_B_06 = 0x06,
-    AI_B_07 = 0x07,
-    AI_B_08 = 0x08,
-    AI_B_09 = 0x09,
-    AI_B_0A = 0x0A,
-    AI_B_0B = 0x0B,
-    AI_B_0C = 0x0C,
-    AI_B_0D = 0x0D,
-    AI_B_0E = 0x0E,
-    AI_B_0F = 0x0F,
-    AI_B_10 = 0x10,
-    AI_B_11 = 0x11,
-    AI_B_12 = 0x12,
-    AI_B_13 = 0x13,
-    AI_B_14 = 0x14,
-    AI_B_15 = 0x15,
-    AI_B_16 = 0x16,
-    AI_B_17 = 0x17,
-    AI_B_18 = 0x18,
-};
-
-enum
-{
-    AI_COMPARE_GT,
-    AI_COMPARE_GE,
-    AI_COMPARE_EQ,
-    AI_COMPARE_LE,
-    AI_COMPARE_LT,
-    AI_COMPARE_NE,
-};
-
-enum
-{
-    // Corresponds to entries in gAiJobRankLists
-
-    AI_JOBRANK_ROY,
-    AI_JOBRANK_SUPPORTERS,
-    AI_JOBRANK_HEALERS,
-    AI_JOBRANK_CIVILIANS,
-    AI_JOBRANK_MAGES,
-    AI_JOBRANK_FLYERS,
-    AI_JOBRANK_ARMORS,
-    AI_JOBRANK_CAVALIERS,
-    AI_JOBRANK_ARCHERS,
-};
-
-struct AiSt
-{
-    /* 00 */ u8 units[116]; // TODO: constant for max number of units?
-    /* 74 */ u8 * unit_it;
-    /* 78 */ u8 order_state;
-    /* 79 */ u8 decide_state;
-    /* 7A */ u8 danger_map_filled;
-    /* 7B */ u8 flags;
-    /* 7C */ u8 maximum_heal_percent;
-    /* 7D */ u8 combat_wgt_table_id;
-    /* 7E */ u8 unk_7E;
-    /* 7F */ u8 unk_7F;
-    /* 80 */ u32 special_item_flags;
-    /* 84 */ u8 unk_84;
-    /* 85 */ u8 best_blue_mov;
-    /* 86 */ u8 cmd_result[8];
-};
-
-extern struct AiSt EWRAM_DATA gAiSt;
diff --git a/include/ai_battle.h b/include/ai_battle.h
deleted file mode 100644
index 91f9a8f..0000000
--- a/include/ai_battle.h
+++ /dev/null
@@ -1,29 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "ai.h"
-
-struct AiCombatSimulationSt
-{
-    /* 00 */ u8 x_move, y_move;
-    /* 02 */ u8 target_id;
-    /* 04 */ u16 item_slot;
-    /* 08 */ u32 score;
-};
-
-bool AiAttemptOffensiveAction(bool (* is_enemy)(struct Unit * unit));
-bool AiAttemptCombatWithinMovement(bool (* is_enemy)(struct Unit * unit));
-void AiFillReversedAttackRangeMap(struct Unit * unit, u16 item);
-void AiFloodMovementAndRange(struct Unit * unit, u16 move, u16 item);
-bool AiAttemptBallistaCombat(bool (* is_enemy)(struct Unit * unit), struct AiCombatSimulationSt * st);
-bool AiAttemptStealActionWithinMovement(void);
-bool AiSimulateBestBattleAgainstTarget(struct AiCombatSimulationSt * st);
-bool AiSimulateBestBallistaBattleAgainstTarget(struct AiCombatSimulationSt * st, u16 item);
-u32 AiGetCombatPositionScore(int x, int y, struct AiCombatSimulationSt * st);
-bool AiIsBadFight(struct AiCombatSimulationSt * st);
-bool AiSimulateBattleAgainstTargetAtPosition(struct AiCombatSimulationSt * st);
-void AiComputeCombatScore(struct AiCombatSimulationSt * st);
-int AiGetInRangeCombatPositionScoreComponent(int x, int y, struct Unit * unit);
-int AiGetTerrainCombatPositionScoreComponent(int x, int y);
-int AiGetFriendZoneCombatPositionScoreComponent(int x, int y);
diff --git a/include/ai_data.h b/include/ai_data.h
deleted file mode 100644
index e05fc23..0000000
--- a/include/ai_data.h
+++ /dev/null
@@ -1,46 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "ai.h"
-#include "ai_script.h"
-
-struct AiCombatScoreCoefficients
-{
-    /* 00 */ u8 coef_damage_dealt;
-    /* 01 */ u8 coef_low_hp_opponent;
-    /* 02 */ u8 coef_friend_zone;
-    /* 03 */ u8 coef_job_rank_bonus;
-    /* 04 */ u8 coef_turn_number;
-    /* 05 */ u8 coef_damage_taken;
-    /* 06 */ u8 coef_danger;
-    /* 07 */ u8 coef_low_hp_self;
-    /* 08 */ u8 job_rank_bonuses[9];
-};
-
-struct AiEscapePt
-{
-    /* 00 */ u8 x, y;
-    /* 02 */ u8 facing;
-};
-
-struct AiHealThreshold
-{
-    u8 exit_threshold;
-    u8 enter_threshold;
-};
-
-extern u8 CONST_DATA gUnk_085C864C[];
-extern u8 CONST_DATA gUnk_085C864F[];
-extern struct AiScr CONST_DATA AiScr_FallbackA[];
-extern struct AiScr CONST_DATA AiScr_FallbackB[];
-extern u8 const * CONST_DATA gAiJobRankLists[];
-extern struct AiCombatScoreCoefficients const gAiCombatScoreCoefficientTable[];
-extern struct AiEscapePt const * CONST_DATA gUnk_085C86B8[];
-extern struct AiEscapePt const * CONST_DATA gUnk_085C876C[];
-extern struct AiHealThreshold CONST_DATA gUnk_085C8820[];
-extern u16 CONST_DATA gUnk_085C8834[];
-extern u32 const AiItemConfigTable[];
-extern struct AiScr const * const * CONST_DATA gAiScriptLutB[];
-extern struct AiScr const * const * CONST_DATA gAiScriptLutA[];
-extern struct Vec2i const * const * CONST_DATA gUnk_085C8878;
diff --git a/include/ai_decide.h b/include/ai_decide.h
deleted file mode 100644
index f885730..0000000
--- a/include/ai_decide.h
+++ /dev/null
@@ -1,52 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "proc.h"
-#include "ai.h"
-
-enum
-{
-    AI_ACTION_NONE, // move only
-    AI_ACTION_COMBAT,
-    AI_ACTION_ESCAPE,
-    AI_ACTION_STEAL,
-    AI_ACTION_PILLAGE,
-    AI_ACTION_STAFF,
-    AI_ACTION_USEITEM,
-    AI_ACTION_REFRESH,
-    AI_ACTION_TALK,
-};
-
-struct AiDecision
-{
-    /* 00 */ u8 action_id;
-
-    /* 01 */ u8 unit_id;
-    /* 02 */ u8 x_move;
-    /* 03 */ u8 y_move;
-    /* 04 */ u8 unk_04;
-    /* 05 */ u8 unk_05;
-    /* 06 */ u8 target_id;
-    /* 07 */ u8 item_slot;
-    /* 08 */ u8 x_target;
-    /* 09 */ u8 y_target;
-
-    /* 0A */ bool8 action_performed;
-};
-
-void AiClearDecision(void);
-void AiSetDecision(short x_move, short y_move, u8 action_id, u8 target_id, u8 item_slot, u8 x_target, u8 y_target);
-void AiUpdateDecision(u8 action_id, u8 target_id, u8 item_slot, u8 x_target, u8 y_target);
-
-void AiDecideAll(void);
-void AiDecideHealOrEscape(void);
-void AiDecideSpecialItems(void);
-void AiDecideScriptA(void);
-void AiDecideScriptB(void);
-
-extern struct AiDecision EWRAM_DATA gAiDecision;
-
-extern Func AiDecideFunc;
-
-extern struct ProcScr CONST_DATA ProcScr_AiDecide[];
diff --git a/include/ai_order.h b/include/ai_order.h
deleted file mode 100644
index c0f808f..0000000
--- a/include/ai_order.h
+++ /dev/null
@@ -1,14 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "proc.h"
-#include "ai.h"
-
-int GetUnitBattleAiScore(struct Unit * unit);
-int GetUnitAiScore(struct Unit * unit);
-int BuildAiUnitList(void);
-void SortAiUnitList(int count);
-
-extern struct ProcScr CONST_DATA ProcScr_AiOrder[];
-extern struct ProcScr CONST_DATA ProcScr_AiOrder_Berserk[];
diff --git a/include/ai_perform.h b/include/ai_perform.h
deleted file mode 100644
index 1e925dd..0000000
--- a/include/ai_perform.h
+++ /dev/null
@@ -1,11 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "proc.h"
-#include "ai.h"
-
-void AiStartActionCursor(int x, int y, int kind, ProcPtr parent);
-void AiEndMuAndRefreshUnits(void);
-
-extern struct ProcScr CONST_DATA ProcScr_AiPerform[];
diff --git a/include/ai_phase.h b/include/ai_phase.h
deleted file mode 100644
index 4b17aa5..0000000
--- a/include/ai_phase.h
+++ /dev/null
@@ -1,9 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "proc.h"
-#include "ai.h"
-
-extern struct ProcScr CONST_DATA ProcScr_AiPhase[];
-extern struct ProcScr CONST_DATA ProcScr_AiPhase_Berserk[];
diff --git a/include/ai_script.h b/include/ai_script.h
deleted file mode 100644
index e1adf5c..0000000
--- a/include/ai_script.h
+++ /dev/null
@@ -1,98 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "ai.h"
-
-enum
-{
-    AI_CMD_CONDITIONAL,
-    AI_CMD_CALL_FUNC,
-    AI_CMD_SET_AI,
-    AI_CMD_GOTO,
-    AI_CMD_ACTION_ON_PID,
-    AI_CMD_ACTION,
-    AI_CMD_NOP,
-    AI_CMD_ACTION_IN_PLACE,
-    AI_CMD_ACTION_ON_JID,
-    AI_CMD_STAFF_ACTION,
-    AI_CMD_STAFF_ACTION_2,
-    AI_CMD_STAFF_ACTION_3,
-    AI_CMD_MOVE_TOWARDS,
-    AI_CMD_MOVE_TOWARDS_PID,
-    AI_CMD_NOP_0E,
-    AI_CMD_MOVE_TOWARDS_JID,
-    AI_CMD_PILLAGE,
-    AI_CMD_MOVE_TO_SAFETY,
-    AI_CMD_MOVE_TO_ENEMY,
-    AI_CMD_MOVE_TO_ENEMY_2,
-    AI_CMD_NOP_14,
-    AI_CMD_NOP_15,
-    AI_CMD_MOVE_RANDOM,
-    AI_CMD_ESCAPE,
-    AI_CMD_NOP_18,
-    AI_CMD_MOVE_TO_TERRAIN,
-    AI_CMD_MOVE_TO_LISTED_TERRAIN,
-    AI_CMD_LABEL,
-
-    AI_CMD_COUNT,
-};
-
-struct AiScr
-{
-    /* 00 */ u8 cmd;
-    /* 01 */ u8 unk_01;
-    /* 02 */ u8 unk_02;
-    /* 03 */ u8 unk_03;
-    /* 04 */ u32 unk_04;
-    /* 08 */ void const * unk_08;
-    /* 0C */ void const * unk_0C;
-};
-
-typedef bool (* AiScrFunc)(void const * arg);
-
-bool AiTryExecScriptA(void);
-bool AiExecFallbackScriptA(void);
-bool AiTryExecScriptB(void);
-bool AiExecFallbackScriptB(void);
-
-bool AiIsUnitEnemy(struct Unit * unit);
-bool AiIsUnitNonActive(struct Unit * unit);
-bool AiIsUnitEnemyAndNotInScrList(struct Unit * unit);
-bool AiIsUnitEnemyOrInScrList(struct Unit * unit);
-bool AiIsUnitEnemyAndScrPid(struct Unit * unit);
-bool AiIsUnitEnemyAndScrJid(struct Unit * unit);
-
-void AiDoBerserkAction(void);
-void AiDoBerserkMove(void);
-
-#define AI_CONDITIONAL(target, cond, left, right) { AI_CMD_CONDITIONAL, (cond), -1, (target), (right), (left), NULL }
-#define AI_CALL_FUNC(func, argptr)       { AI_CMD_CALL_FUNC, 0, -1, 0, 0, (func), (argptr) }
-#define AI_SET_AI(ai_a, ai_b)              { AI_CMD_SET_AI, (ai_a), (ai_b), 0, 0, NULL, NULL }
-#define AI_GOTO(target)                  { AI_CMD_GOTO, 0, -1, (target), 0, NULL, NULL }
-#define AI_ACTION_ON_PID(chance, pid)    { AI_CMD_ACTION_ON_PID, (chance), -1, 0, (pid), NULL, NULL }
-#define AI_ACTION_IGNORING(chance, list) { AI_CMD_ACTION, (chance), -1, 0, 0, (list), NULL }
-#define AI_NOP                           { AI_CMD_NOP, 0, -1, 0, 0, NULL, NULL }
-#define AI_ACTION_IN_PLACE(chance)       { AI_CMD_ACTION_IN_PLACE, (chance), -1, 0, 0, NULL, NULL }
-#define AI_BAD_LABEL(id) /* bugged! */   { AI_CMD_STAFF_ACTION_3, (id), 0, 0, 0, NULL, NULL }
-#define AI_MOVE_TOWARDS(x, y)            { AI_CMD_MOVE_TOWARDS, (x), -1, (y), 0, NULL, NULL }
-#define AI_MOVE_TOWARDS_PID(pid)         { AI_CMD_MOVE_TOWARDS_PID, 0, -1, 0, (pid), NULL, NULL }
-#define AI_NOP_0E                        { AI_CMD_NOP_0E, 0, -1, 0, 0, NULL, NULL }
-#define AI_PILLAGE                       { AI_CMD_PILLAGE, 0, -1, 0, 0, NULL, NULL }
-#define AI_MOVE_TO_ENEMY_IGNORING(list)  { AI_CMD_MOVE_TO_ENEMY, 0, -1, 0, 0, (list), NULL }
-#define AI_MOVE_RANDOM                   { AI_CMD_MOVE_RANDOM, 0, -1, 0, 0, NULL, NULL }
-#define AI_ESCAPE                        { AI_CMD_ESCAPE, 0, -1, 0, 0, NULL, NULL }
-#define AI_MOVE_TO_LISTED_TERRAIN(list)  { AI_CMD_MOVE_TO_LISTED_TERRAIN, 0, -1, 0, 0, (list), NULL }
-#define AI_LABEL(id)                     { AI_CMD_LABEL, 0, -1, (id), 0, NULL, NULL }
-
-#define AI_GOTO_IFGT(target, left, right) AI_CONDITIONAL(target, AI_COMPARE_GT, left, right)
-#define AI_GOTO_IFGE(target, left, right) AI_CONDITIONAL(target, AI_COMPARE_GE, left, right)
-#define AI_GOTO_IFEQ(target, left, right) AI_CONDITIONAL(target, AI_COMPARE_EQ, left, right)
-#define AI_GOTO_IFLE(target, left, right) AI_CONDITIONAL(target, AI_COMPARE_LE, left, right)
-#define AI_GOTO_IFLT(target, left, right) AI_CONDITIONAL(target, AI_COMPARE_LT, left, right)
-#define AI_GOTO_IFNE(target, left, right) AI_CONDITIONAL(target, AI_COMPARE_NE, left, right)
-#define AI_SET_AI_A(ai_a) AI_SET_AI(ai_a, -1)
-#define AI_SET_AI_B(ai_b) AI_SET_AI(-1, ai_b)
-#define AI_GOTO_START AI_GOTO(0)
-#define AI_ACTION(chance) AI_ACTION_IGNORING(chance, NULL)
-#define AI_MOVE_TO_ENEMY  AI_MOVE_TO_ENEMY_IGNORING(NULL)
diff --git a/include/ai_unk.h b/include/ai_unk.h
deleted file mode 100644
index 168c169..0000000
--- a/include/ai_unk.h
+++ /dev/null
@@ -1,132 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-enum
-{
-    AI_EQUIP_FLAG_MELEE = 1 << 0,
-    AI_EQUIP_FLAG_RANGE = 1 << 1,
-    AI_EQUIP_FLAG_LOW_USES = 1 << 2,
-    AI_EQUIP_FLAG_STAFF = 1 << 3,
-
-#   define AI_EQUIP_FLAG_MIGHT(might) ((might) << 8)
-#   define AI_EQUIP_FLAG_MIGHT_MASK AI_EQUIP_FLAG_MIGHT(0xFF)
-};
-
-void AiRefreshDangerMap(void);
-void AiFillDangerMap(void);
-bool AiCheckDangerAt(int x, int y, fu8 threshold);
-bool AiTryGetNearestHealPoint(struct Vec2i * pos_out);
-void AiUpdateUnitsSeekHealing(void);
-bool AiUpdateUnitSeeksHealing(struct Unit * unit);
-bool AiTryHealSelf(void);
-bool AiTryMoveTowardsEscape(void);
-struct AiEscapePt const * AiGetNearestEscapePoint(void);
-bool AiCanEquip(void);
-bool AiEquipGetFlags(u16 * equip_flags_out);
-void AiEquipGetDanger(int x, int y, u16 * range_danger_out, u16 * melee_danger_out, u16 * combined_danger_out);
-void AiEquipBestMatch(int equip_flag, u16 const * equip_flags);
-void AiEquipBestConsideringDanger(fu16 range_danger, fu16 melee_danger, fu16 combined_danger, u16 const * equip_flags);
-void AiUpdateUnitFlagsFromStaff(fu16 item);
-bool AiIsWithinFlyingDistance(struct Unit * unit, int x, int y);
-int AiGetUnitAttackAndWeapon(struct Unit * unit, u16 * item_out);
-void AiTryRefreshOrStealAfterMove(void);
-void AiTryActionAfterMove(void);
-bool AiTryRefreshAt(int x, int y);
-bool AiTryStealAt(int x, int y);
-bool AiTryCombatAt(int x, int y);
-
-struct AiCountEnemiesInRangeArg
-{
-    /* 00 */ u8 move_coeff_q4;
-    /* 01 */ u8 attack_range; // move range if 0, attack range otherwise
-    /* 02 */ u8 result_slot;
-};
-
-struct UnkAiFuncArg_080334F4
-{
-    /* 00 */ u8 const * unk_00;
-    /* 04 */ u8 unk_04;
-    /* 05 */ u8 unk_05;
-};
-
-struct AiIsInAreaArg
-{
-    /* 00 */ u8 x1;
-    /* 01 */ u8 y1;
-    /* 02 */ u8 x2;
-    /* 03 */ u8 y2;
-};
-
-struct AiDecideTalkArg
-{
-    /* 00 */ u8 pid_a;
-    /* 01 */ u8 pid_b;
-};
-
-struct UnkAiFuncArg_08033B04
-{
-    /* 00 */ u8 action_random_threshold;
-    /* 01 */ u8 maximum_heal_percent;
-};
-
-struct UnkAiFuncArg_08033B50
-{
-    /* 00 */ u8 do_anything_threshold;
-    /* 01 */ u8 do_offensive_threshold;
-};
-
-bool AiFunc_CountEnemiesInRange_IsEnemyAt(int x, int y);
-bool AiFunc_CountEnemiesInRange(void const * arg);
-bool AiFunc_080334F4(void const * arg);
-bool AiFunc_GetCounter(void const * no_input);
-bool func_fe6_080336CC(void const * no_input);
-bool func_fe6_080336FC(void const * no_input);
-bool func_fe6_0803372C(struct Vec2i * pos_out);
-bool func_fe6_080337B4(void const * no_input);
-bool AiFunc_IsInArea(void const * arg);
-bool AiFunc_DecideTalk(void const * arg);
-bool func_fe6_08033898(void const * arg);
-bool func_fe6_0803395C(struct Unit * unit);
-bool func_fe6_08033998(void const * arg);
-bool AiIsUnitEnemyCmdResult(struct Unit * unit);
-bool AiIsUnitEnemyOnTheWayToCmdResult(struct Unit * unit);
-bool AiFunc_AttackCmdResult(void const * no_input);
-bool AiFunc_08033B04(void const * arg);
-bool AiFunc_08033B50(void const * arg);
-
-int AiGetStaffAttemptId(fu16 item);
-bool AiAttemptStaffAction(bool (* is_enemy)(struct Unit * unit));
-bool AiGetReachableAdjacentPosition(int x_center, int y_center, struct Vec2i * pos_out);
-void AiAttemptHealStaff(int slot, bool (* is_enemy)(struct Unit * unit));
-void AiAttemptRangedHealStaff(int slot, bool (* is_enemy)(struct Unit * unit));
-void AiAttemptFortifyStaff(int slot, bool (* is_enemy)(struct Unit * unit));
-void AiAttemptWarpStaff(int slot, bool (* is_enemy)(struct Unit * unit));
-void AiAttemptRestoreStaff(int slot, bool (* is_enemy)(struct Unit * unit));
-bool AiIsUnitArmed(struct Unit * unit);
-int AiGetSilenceStaffTargetScore(struct Unit * unit);
-void AiAttemptSilenceStaff(int slot, bool (* is_enemy)(struct Unit * unit));
-void AiAttemptOffensiveStaff(int slot, bool (* is_enemy)(struct Unit * unit));
-void AiAttemptBarrierStaff(int slot, bool (* is_enemy)(struct Unit * unit));
-bool AiGetGoodWarpPosition(struct Vec2i * pos);
-int AiGetConsumableAttemptId(fu16);
-bool AiAttemptConsumableAction(void);
-void AiAttemptDoorKey(int slot);
-void AiAttemptLockpick(int slot);
-void AiAttemptAntitoxin(int slot);
-fu8 AiGetRangeAt(int x, int y);
-bool AiFindGoodDoorKeyUsePosition(struct Unit * unit, struct Vec2i * pos_out);
-bool AiFindGoodChestKeyUsePosition(struct Unit * unit, struct Vec2i * pos_out);
-int AiFindGoodLockpickUsePosition(struct Unit * unit, int findpos_flags, struct Vec2i * pos_out);
-
-void AiSetWorkingMovTableIgnoringWalls(i8 const * mov_table);
-void AiSetWorkingMovTableIgnoringTerrain(i8 const * mov_table, int free_terrain);
-void AiMapFlood(struct Unit * unit);
-void AiMapFloodRange(struct Unit * unit);
-void AiMapFlood_NoWall(struct Unit * unit);
-void AiMapFlood_NoWall_Pass(struct Unit * unit);
-void AiMapFloodRange_NoDoors(struct Unit * unit);
-void AiMapFloodRange_NoDoors_Pass(struct Unit * unit);
-void AiMapFloodRange_UpToMove(struct Unit * unit);
-void AiUpdateStayFlag(struct Unit * unit);
-void AiMapFloodRangeFrom(int x, int y, struct Unit * unit);
diff --git a/include/ai_utility.h b/include/ai_utility.h
deleted file mode 100644
index 7ee8058..0000000
--- a/include/ai_utility.h
+++ /dev/null
@@ -1,59 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "unit.h"
-#include "ai.h"
-
-enum
-{
-    AI_FINDPOS_FLAG_CHECK_ENEMY          = (1 << 0),
-    AI_FINDPOS_FLAG_CHECK_NEARBY_ENEMIES = (1 << 1),
-    AI_FINDPOS_FLAG_NO_CHESTS            = (1 << 2),
-    AI_FINDPOS_FLAG_NO_DOORS             = (1 << 3),
-};
-
-bool AiCompare(u8 const * left, u8 cond, u32 right);
-bool AiFindTargetInReachByPid(int pid, struct Vec2i * pos_out);
-bool AiFindTargetInReachByJid(int jid, struct Vec2i * pos_out);
-bool AiFindTargetInReachByFunc(bool (* func)(struct Unit * unit), struct Vec2i * pos_out);
-void AiRandomMove(void);
-bool AiReachesByBirdsEyeDistance(struct Unit * unit, struct Unit * other, u16 item);
-bool AiCouldReachByBirdsEyeDistance(struct Unit * unit, struct Unit * other, u16 item);
-bool AiIsInShortList(u16 const * list, u16 item);
-bool AiIsInByteList(u8 const * list, u8 item);
-bool AiFindClosestTerrainPosition(u8 const * terrainList, int flags, struct Vec2i * pos_out);
-u8 AiGetPositionRange(int x, int y);
-bool AiFindClosestTerrainAdjacentPosition(u8 const * terrainList, int flags, struct Vec2i * pos_out);
-bool AiFindClosestUnlockPosition(int flags, struct Vec2i * pos_out);
-int AiCountUnitsInRange(void);
-int AiCountEnemyUnitsInRange(void);
-int AiCountAlliedUnitsInRange(void);
-int AiCountNearbyUnits(short x, short y);
-int AiCountNearbyEnemyUnits(short x, short y);
-int AiCountNearbyAlliedUnits(short x, short y);
-void AiMakeMoveRangeMapsForUnitAndWeapon(struct Unit * unit, u16 item);
-void AiMakeMoveRangeUnitPowerMaps(struct Unit * unit);
-void AiMakeMoveRangeMapsForUnitAndWeapon2(struct Unit * unit, u16 item);
-bool AiFindBestAdjacentPositionByFunc(int x, int y, u8 (* func)(int x, int y), struct Vec2i * pos_out);
-int AiGetItemStealRank(u16 item);
-i8 AiGetUnitStealItemSlot(struct Unit * unit);
-bool AiFindSafestReachableLocation(struct Unit * unit, struct Vec2i * pos_out);
-bool AiFindPillageLocation(struct Vec2i * pos_out, u8 * outItemSlot);
-bool AiGetChestUnlockItemSlot(u8 * out);
-void AiTryMoveTowards(short x, short y, u8 action, u8 maxDanger, u8 arg_4);
-bool AiGetUnitClosestValidPosition(struct Unit * unit, short x, short y, struct Vec2i * pos_out);
-u8 AiGetJobRank(u8 jid);
-bool AiUnitWithPidExists(u16 pid);
-bool AiIsWithinRectDistance(short x, short y, u8 x2, u8 y2, u8 maxDistance);
-bool AiLocationIsPillageTarget(u8 x, u8 y);
-void func_fe6_080308B0(void);
-void func_fe6_08030968(struct Unit * unit, u16 item);
-void func_fe6_08030994(struct Unit * unit, u16 item);
-void func_fe6_080309E0(struct Unit * unit);
-void UnitInitAiFromInfo(struct Unit * unit, struct UnitInfo const * info);
-bool AiFindGoodMovePositionWithinRange(struct Vec2i * pos_out);
-int func_fe6_08030B94(void);
-int func_fe6_08030BDC(void);
-bool AiUnitHasAnyStaff(struct Unit * unit);
-void AiStayAwareMapFlood_UpToMove(struct Unit * unit);
diff --git a/include/arena.h b/include/arena.h
deleted file mode 100644
index b8a5df2..0000000
--- a/include/arena.h
+++ /dev/null
@@ -1,46 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "unit.h"
-
-enum
-{
-    ARENA_RESULT_0,
-    ARENA_RESULT_1, // player victory?
-    ARENA_RESULT_2, // enemy victory?
-    ARENA_RESULT_3, // ???
-    ARENA_RESULT_4, // backed out?
-};
-
-struct ArenaSt
-{
-    /* 00 */ struct Unit * player;
-    /* 04 */ struct Unit * opponent;
-    /* 08 */ short matchup_gold_value;
-    /* 0A */ u8 result;
-    /* 0B */ u8 unk_0B;
-    /* 0C */ u8 range;
-    /* 0D */ u8 player_weapon_kind;
-    /* 0E */ u8 opponent_weapon_kind;
-    /* 0F */ u8 player_jid;
-    /* 10 */ u8 opponent_jid;
-    /* 11 */ u8 player_level;
-    /* 12 */ u8 opponent_level;
-    /* 13 */ i8 player_is_magic;
-    /* 14 */ i8 opponent_is_magic;
-    /* 16 */ u16 player_power_ranking;
-    /* 18 */ u16 opponent_power_ranking;
-    /* 1A */ u16 player_weapon;
-    /* 1C */ u16 opponent_weapon;
-};
-
-void ArenaBegin(struct Unit * unit);
-void ArenaResume(struct Unit * unit);
-int ArenaGetMatchupGoldValue(void);
-int ArenaGetResult(void);
-void ArenaSetResult(int result);
-void ArenaContinueBattle(void);
-bool ArenaIsUnitAllowed(struct Unit * unit);
-
-extern struct ArenaSt gArenaSt;
diff --git a/include/armfunc.h b/include/armfunc.h
deleted file mode 100644
index 473b150..0000000
--- a/include/armfunc.h
+++ /dev/null
@@ -1,51 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-extern u8 const ArmCodeStart[];
-extern u8 const ArmCodeEnd[];
-
-// armfunc
-void ColorFadeTick(void);
-void ClearOam(void * oam, int count);
-u32 Checksum32(void const * buf, int size);
-void TmApplyTsa(u16 * tm, u8 const * tsa, u16 tileref);
-void TmCopyRect(u16 const * src, u16 * dst, int width, int height);
-void TmFillRect(u16 * tm, int width, int height, u16 tileref);
-void DrawGlyph(u16 const * cvtLut, void * chr, u32 const * glyph, int offset);
-void DecodeString(char const * src, char * dst);
-void PutOamHi(int x, int y, u16 const * oam_list, int oam2);
-void PutOamLo(int x, int y, u16 const * oam_list, int oam2);
-void MapFloodCoreStep(int connect, int x, int y);
-void MapFloodCore(void);
-
-// ramfunc
-void InitRamFuncs(void);
-void DrawGlyphRam(u16 const * cvtLut, void * chr, u32 const * glyph, int offset);
-void DecodeStringRam(char const * src, char * dst);
-void PutOamHiRam(int x, int y, u16 const * oam_list, int oam2);
-void PutOamLoRam(int x, int y, u16 const * oam_list, int oam2);
-void MapFloodCoreStepRam(int connect, int x, int y);
-void MapFloodCoreRam(void);
-
-// linker stubs
-void ClearOam_thm(void * oam, int count);
-void TmApplyTsa_thm(u16 * tm, u8 const * tsa, u16 tileref);
-void TmFillRect_thm(u16 * tm, int width, int height, u16 tileref);
-void ColorFadeTick_thm(void);
-void TmCopyRect_thm(u16 const * src, u16 * dst, int width, int height);
-u32 Checksum32_thm(void const * buf, int size);
-
-// helper macros
-#define ColorFadeTick ColorFadeTick_thm
-#define ClearOam ClearOam_thm
-#define Checksum32 Checksum32_thm
-#define TmApplyTsa TmApplyTsa_thm
-#define TmCopyRect TmCopyRect_thm
-#define TmFillRect TmFillRect_thm
-#define DrawGlyph DrawGlyphRam
-#define DecodeString DecodeStringRam
-#define PutOamHi PutOamHiRam
-#define PutOamLo PutOamLoRam
-#define MapFloodCoreStep MapFloodCoreStepRam
-#define MapFloodCore MapFloodCoreRam
diff --git a/include/asm_gbaio.inc b/include/asm_gbaio.inc
deleted file mode 100644
index b30a9af..0000000
--- a/include/asm_gbaio.inc
+++ /dev/null
@@ -1,473 +0,0 @@
-@ TODO: clean up
-
-@-------------------------------------------------------------------------------
-@ Program Status Register
-@-------------------------------------------------------------------------------
-
-PSR_USR_MODE  		= 0x00000010
-PSR_FIQ_MODE  		= 0x00000011
-PSR_IRQ_MODE  		= 0x00000012
-PSR_SVC_MODE  		= 0x00000013
-PSR_ABT_MODE  		= 0x00000017
-PSR_UND_MODE  		= 0x0000001B
-PSR_SYS_MODE  		= 0x0000001F
-PSR_MODE_MASK 		= 0x0000001F
-PSR_THUMB_BIT     	= 0x00000020
-PSR_FIQ_DISABLE_BIT	= 0x00000040
-PSR_IRQ_DISABLE_BIT = 0x00000080
-
-
-@-------------------------------------------------------------------------------
-@ Memory
-@-------------------------------------------------------------------------------
-
-EWRAM_START = 0x02000000
-EWRAM_END   = EWRAM_START + 0x40000
-
-IWRAM_START = 0x03000000
-IWRAM_END   = IWRAM_START + 0x8000
-
-REG_BASE    = 0x04000000
-
-PLTT        = 0x05000000
-BG_PLTT     = PLTT
-OBJ_PLTT    = PLTT + 0x200
-
-VRAM        = 0x06000000
-BG_VRAM     = VRAM
-OBJ_VRAM0   = VRAM + 0x10000 @ text-mode BG
-OBJ_VRAM1   = VRAM + 0x14000 @ bitmap-mode BG
-
-OAM         = 0x07000000
-
-INTR_CHECK     = 0x3007FF8
-INTR_VECTOR    = 0x3007FFC
-
-ROM         = 0x08000000
-
-@-------------------------------------------------------------------------------
-@ I/O Register Offsets
-@-------------------------------------------------------------------------------
-
-REG_OFFSET_DISPCNT      = 0x0
-REG_OFFSET_DISPSTAT     = 0x4
-REG_OFFSET_VCOUNT       = 0x6
-REG_OFFSET_BG0CNT       = 0x8
-REG_OFFSET_BG1CNT       = 0xa
-REG_OFFSET_BG2CNT       = 0xc
-REG_OFFSET_BG3CNT       = 0xe
-REG_OFFSET_BG0HOFS      = 0x10
-REG_OFFSET_BG0VOFS      = 0x12
-REG_OFFSET_BG1HOFS      = 0x14
-REG_OFFSET_BG1VOFS      = 0x16
-REG_OFFSET_BG2HOFS      = 0x18
-REG_OFFSET_BG2VOFS      = 0x1a
-REG_OFFSET_BG3HOFS      = 0x1c
-REG_OFFSET_BG3VOFS      = 0x1e
-REG_OFFSET_BG2PA        = 0x20
-REG_OFFSET_BG2PB        = 0x22
-REG_OFFSET_BG2PC        = 0x24
-REG_OFFSET_BG2PD        = 0x26
-REG_OFFSET_BG2X_L       = 0x28
-REG_OFFSET_BG2X_H       = 0x2a
-REG_OFFSET_BG2Y_L       = 0x2c
-REG_OFFSET_BG2Y_H       = 0x2e
-REG_OFFSET_BG3PA        = 0x30
-REG_OFFSET_BG3PB        = 0x32
-REG_OFFSET_BG3PC        = 0x34
-REG_OFFSET_BG3PD        = 0x36
-REG_OFFSET_BG3X_L       = 0x38
-REG_OFFSET_BG3X_H       = 0x3a
-REG_OFFSET_BG3Y_L       = 0x3c
-REG_OFFSET_BG3Y_H       = 0x3e
-REG_OFFSET_WIN0H        = 0x40
-REG_OFFSET_WIN1H        = 0x42
-REG_OFFSET_WIN0V        = 0x44
-REG_OFFSET_WIN1V        = 0x46
-REG_OFFSET_WININ        = 0x48
-REG_OFFSET_WINOUT       = 0x4a
-REG_OFFSET_MOSAIC       = 0x4c
-REG_OFFSET_BLDCNT       = 0x50
-REG_OFFSET_BLDALPHA     = 0x52
-REG_OFFSET_BLDY         = 0x54
-
-REG_OFFSET_SOUND1CNT    = 0x60
-REG_OFFSET_SOUND1CNT_L  = 0x60
-REG_OFFSET_NR10         = 0x60
-REG_OFFSET_SOUND1CNT_H  = 0x62
-REG_OFFSET_NR11         = 0x62
-REG_OFFSET_NR12         = 0x63
-REG_OFFSET_SOUND1CNT_X  = 0x64
-REG_OFFSET_NR13         = 0x64
-REG_OFFSET_NR14         = 0x65
-REG_OFFSET_SOUND2CNT    = 0x68
-REG_OFFSET_SOUND2CNT_L  = 0x68
-REG_OFFSET_NR21         = 0x68
-REG_OFFSET_NR22         = 0x69
-REG_OFFSET_SOUND2CNT_H  = 0x6c
-REG_OFFSET_NR23         = 0x6c
-REG_OFFSET_NR24         = 0x6d
-REG_OFFSET_SOUND3CNT    = 0x70
-REG_OFFSET_SOUND3CNT_L  = 0x70
-REG_OFFSET_NR30         = 0x70
-REG_OFFSET_SOUND3CNT_H  = 0x72
-REG_OFFSET_NR31         = 0x72
-REG_OFFSET_NR32         = 0x73
-REG_OFFSET_SOUND3CNT_X  = 0x74
-REG_OFFSET_NR33         = 0x74
-REG_OFFSET_NR34         = 0x75
-REG_OFFSET_SOUND4CNT    = 0x78
-REG_OFFSET_SOUND4CNT_L  = 0x78
-REG_OFFSET_NR41         = 0x78
-REG_OFFSET_NR42         = 0x79
-REG_OFFSET_SOUND4CNT_H  = 0x7c
-REG_OFFSET_NR43         = 0x7c
-REG_OFFSET_NR44         = 0x7d
-REG_OFFSET_SOUNDCNT     = 0x80
-REG_OFFSET_SOUNDCNT_L   = 0x80
-REG_OFFSET_NR50         = 0x80
-REG_OFFSET_NR51         = 0x81
-REG_OFFSET_SOUNDCNT_H   = 0x82
-REG_OFFSET_SOUNDCNT_X   = 0x84
-REG_OFFSET_NR52         = 0x84
-REG_OFFSET_SOUNDBIAS    = 0x88
-REG_OFFSET_WAVE_RAM     = 0x90
-REG_OFFSET_WAVE_RAM0    = 0x90
-REG_OFFSET_WAVE_RAM0_L  = 0x90
-REG_OFFSET_WAVE_RAM0_H  = 0x92
-REG_OFFSET_WAVE_RAM1    = 0x94
-REG_OFFSET_WAVE_RAM1_L  = 0x94
-REG_OFFSET_WAVE_RAM1_H  = 0x96
-REG_OFFSET_WAVE_RAM2    = 0x98
-REG_OFFSET_WAVE_RAM2_L  = 0x98
-REG_OFFSET_WAVE_RAM2_H  = 0x9a
-REG_OFFSET_WAVE_RAM3    = 0x9c
-REG_OFFSET_WAVE_RAM3_L  = 0x9c
-REG_OFFSET_WAVE_RAM3_H  = 0x9e
-REG_OFFSET_FIFO         = 0xa0
-REG_OFFSET_FIFO_A       = 0xa0
-REG_OFFSET_FIFO_A_L     = 0xa0
-REG_OFFSET_FIFO_A_H     = 0xa2
-REG_OFFSET_FIFO_B       = 0xa4
-REG_OFFSET_FIFO_B_L     = 0xa4
-REG_OFFSET_FIFO_B_H     = 0xa6
-
-REG_OFFSET_DMA0         = 0xb0
-REG_OFFSET_DMA0SAD      = 0xb0
-REG_OFFSET_DMA0SAD_L    = 0xb0
-REG_OFFSET_DMA0SAD_H    = 0xb2
-REG_OFFSET_DMA0DAD      = 0xb4
-REG_OFFSET_DMA0DAD_L    = 0xb4
-REG_OFFSET_DMA0DAD_H    = 0xb6
-REG_OFFSET_DMA0CNT      = 0xb8
-REG_OFFSET_DMA0CNT_L    = 0xb8
-REG_OFFSET_DMA0CNT_H    = 0xba
-REG_OFFSET_DMA1         = 0xbc
-REG_OFFSET_DMA1SAD      = 0xbc
-REG_OFFSET_DMA1SAD_L    = 0xbc
-REG_OFFSET_DMA1SAD_H    = 0xbe
-REG_OFFSET_DMA1DAD      = 0xc0
-REG_OFFSET_DMA1DAD_L    = 0xc0
-REG_OFFSET_DMA1DAD_H    = 0xc2
-REG_OFFSET_DMA1CNT      = 0xc4
-REG_OFFSET_DMA1CNT_L    = 0xc4
-REG_OFFSET_DMA1CNT_H    = 0xc6
-REG_OFFSET_DMA2         = 0xc8
-REG_OFFSET_DMA2SAD      = 0xc8
-REG_OFFSET_DMA2SAD_L    = 0xc8
-REG_OFFSET_DMA2SAD_H    = 0xca
-REG_OFFSET_DMA2DAD      = 0xcc
-REG_OFFSET_DMA2DAD_L    = 0xcc
-REG_OFFSET_DMA2DAD_H    = 0xce
-REG_OFFSET_DMA2CNT      = 0xd0
-REG_OFFSET_DMA2CNT_L    = 0xd0
-REG_OFFSET_DMA2CNT_H    = 0xd2
-REG_OFFSET_DMA3         = 0xd4
-REG_OFFSET_DMA3SAD      = 0xd4
-REG_OFFSET_DMA3SAD_L    = 0xd4
-REG_OFFSET_DMA3SAD_H    = 0xd6
-REG_OFFSET_DMA3DAD      = 0xd8
-REG_OFFSET_DMA3DAD_L    = 0xd8
-REG_OFFSET_DMA3DAD_H    = 0xda
-REG_OFFSET_DMA3CNT      = 0xdc
-REG_OFFSET_DMA3CNT_L    = 0xdc
-REG_OFFSET_DMA3CNT_H    = 0xde
-
-REG_OFFSET_TM0CNT       = 0x100
-REG_OFFSET_TM0CNT_L     = 0x100
-REG_OFFSET_TM0CNT_H     = 0x102
-REG_OFFSET_TM1CNT       = 0x104
-REG_OFFSET_TM1CNT_L     = 0x104
-REG_OFFSET_TM1CNT_H     = 0x106
-REG_OFFSET_TM2CNT       = 0x108
-REG_OFFSET_TM2CNT_L     = 0x108
-REG_OFFSET_TM2CNT_H     = 0x10a
-REG_OFFSET_TM3CNT       = 0x10c
-REG_OFFSET_TM3CNT_L     = 0x10c
-REG_OFFSET_TM3CNT_H     = 0x10e
-
-REG_OFFSET_SIOCNT       = 0x128
-REG_OFFSET_SIODATA8     = 0x12a
-REG_OFFSET_SIODATA32    = 0x120
-REG_OFFSET_SIOMLT_SEND  = 0x12a
-REG_OFFSET_SIOMLT_RECV  = 0x120
-REG_OFFSET_SIOMULTI0    = 0x120
-REG_OFFSET_SIOMULTI1    = 0x122
-REG_OFFSET_SIOMULTI2    = 0x124
-REG_OFFSET_SIOMULTI3    = 0x126
-
-REG_OFFSET_KEYINPUT     = 0x130
-REG_OFFSET_KEYCNT       = 0x132
-
-REG_OFFSET_RCNT         = 0x134
-
-REG_OFFSET_JOYCNT       = 0x140
-REG_OFFSET_JOYSTAT      = 0x158
-REG_OFFSET_JOY_RECV     = 0x150
-REG_OFFSET_JOY_RECV_L   = 0x150
-REG_OFFSET_JOY_RECV_H   = 0x152
-REG_OFFSET_JOY_TRANS    = 0x154
-REG_OFFSET_JOY_TRANS_L  = 0x154
-REG_OFFSET_JOY_TRANS_H  = 0x156
-
-REG_OFFSET_IME          = 0x208
-REG_OFFSET_IE           = 0x200
-REG_OFFSET_IF           = 0x202
-
-REG_OFFSET_WAITCNT      = 0x204
-
-
-@-------------------------------------------------------------------------------
-@ I/O Register Addresses
-@-------------------------------------------------------------------------------
-
-REG_DISPCNT      = (REG_BASE + REG_OFFSET_DISPCNT)
-REG_DISPSTAT     = (REG_BASE + REG_OFFSET_DISPSTAT)
-REG_VCOUNT       = (REG_BASE + REG_OFFSET_VCOUNT)
-REG_BG0CNT       = (REG_BASE + REG_OFFSET_BG0CNT)
-REG_BG1CNT       = (REG_BASE + REG_OFFSET_BG1CNT)
-REG_BG2CNT       = (REG_BASE + REG_OFFSET_BG2CNT)
-REG_BG3CNT       = (REG_BASE + REG_OFFSET_BG3CNT)
-REG_BG0HOFS      = (REG_BASE + REG_OFFSET_BG0HOFS)
-REG_BG0VOFS      = (REG_BASE + REG_OFFSET_BG0VOFS)
-REG_BG1HOFS      = (REG_BASE + REG_OFFSET_BG1HOFS)
-REG_BG1VOFS      = (REG_BASE + REG_OFFSET_BG1VOFS)
-REG_BG2HOFS      = (REG_BASE + REG_OFFSET_BG2HOFS)
-REG_BG2VOFS      = (REG_BASE + REG_OFFSET_BG2VOFS)
-REG_BG3HOFS      = (REG_BASE + REG_OFFSET_BG3HOFS)
-REG_BG3VOFS      = (REG_BASE + REG_OFFSET_BG3VOFS)
-REG_BG2PA        = (REG_BASE + REG_OFFSET_BG2PA)
-REG_BG2PB        = (REG_BASE + REG_OFFSET_BG2PB)
-REG_BG2PC        = (REG_BASE + REG_OFFSET_BG2PC)
-REG_BG2PD        = (REG_BASE + REG_OFFSET_BG2PD)
-REG_BG2X_L       = (REG_BASE + REG_OFFSET_BG2X_L)
-REG_BG2X_H       = (REG_BASE + REG_OFFSET_BG2X_H)
-REG_BG2Y_L       = (REG_BASE + REG_OFFSET_BG2Y_L)
-REG_BG2Y_H       = (REG_BASE + REG_OFFSET_BG2Y_H)
-REG_BG3PA        = (REG_BASE + REG_OFFSET_BG3PA)
-REG_BG3PB        = (REG_BASE + REG_OFFSET_BG3PB)
-REG_BG3PC        = (REG_BASE + REG_OFFSET_BG3PC)
-REG_BG3PD        = (REG_BASE + REG_OFFSET_BG3PD)
-REG_BG3X_L       = (REG_BASE + REG_OFFSET_BG3X_L)
-REG_BG3X_H       = (REG_BASE + REG_OFFSET_BG3X_H)
-REG_BG3Y_L       = (REG_BASE + REG_OFFSET_BG3Y_L)
-REG_BG3Y_H       = (REG_BASE + REG_OFFSET_BG3Y_H)
-REG_WIN0H        = (REG_BASE + REG_OFFSET_WIN0H)
-REG_WIN1H        = (REG_BASE + REG_OFFSET_WIN1H)
-REG_WIN0V        = (REG_BASE + REG_OFFSET_WIN0V)
-REG_WIN1V        = (REG_BASE + REG_OFFSET_WIN1V)
-REG_WININ        = (REG_BASE + REG_OFFSET_WININ)
-REG_WINOUT       = (REG_BASE + REG_OFFSET_WINOUT)
-REG_MOSAIC       = (REG_BASE + REG_OFFSET_MOSAIC)
-REG_BLDCNT       = (REG_BASE + REG_OFFSET_BLDCNT)
-REG_BLDALPHA     = (REG_BASE + REG_OFFSET_BLDALPHA)
-REG_BLDY         = (REG_BASE + REG_OFFSET_BLDY)
-
-REG_SOUND_BASE   = (REG_BASE + REG_OFFSET_SOUND1CNT)
-REG_SOUND1CNT    = (REG_BASE + REG_OFFSET_SOUND1CNT)
-REG_SOUND1CNT_L  = (REG_BASE + REG_OFFSET_SOUND1CNT_L)
-REG_NR10         = (REG_BASE + REG_OFFSET_NR10)
-REG_SOUND1CNT_H  = (REG_BASE + REG_OFFSET_SOUND1CNT_H)
-REG_NR11         = (REG_BASE + REG_OFFSET_NR11)
-REG_NR12         = (REG_BASE + REG_OFFSET_NR12)
-REG_SOUND1CNT_X  = (REG_BASE + REG_OFFSET_SOUND1CNT_X)
-REG_NR13         = (REG_BASE + REG_OFFSET_NR13)
-REG_NR14         = (REG_BASE + REG_OFFSET_NR14)
-REG_SOUND2CNT    = (REG_BASE + REG_OFFSET_SOUND2CNT)
-REG_SOUND2CNT_L  = (REG_BASE + REG_OFFSET_SOUND2CNT_L)
-REG_NR21         = (REG_BASE + REG_OFFSET_NR21)
-REG_NR22         = (REG_BASE + REG_OFFSET_NR22)
-REG_SOUND2CNT_H  = (REG_BASE + REG_OFFSET_SOUND2CNT_H)
-REG_NR23         = (REG_BASE + REG_OFFSET_NR23)
-REG_NR24         = (REG_BASE + REG_OFFSET_NR24)
-REG_SOUND3CNT    = (REG_BASE + REG_OFFSET_SOUND3CNT)
-REG_SOUND3CNT_L  = (REG_BASE + REG_OFFSET_SOUND3CNT_L)
-REG_NR30         = (REG_BASE + REG_OFFSET_NR30)
-REG_SOUND3CNT_H  = (REG_BASE + REG_OFFSET_SOUND3CNT_H)
-REG_NR31         = (REG_BASE + REG_OFFSET_NR31)
-REG_NR32         = (REG_BASE + REG_OFFSET_NR32)
-REG_SOUND3CNT_X  = (REG_BASE + REG_OFFSET_SOUND3CNT_X)
-REG_NR33         = (REG_BASE + REG_OFFSET_NR33)
-REG_NR34         = (REG_BASE + REG_OFFSET_NR34)
-REG_SOUND4CNT    = (REG_BASE + REG_OFFSET_SOUND4CNT)
-REG_SOUND4CNT_L  = (REG_BASE + REG_OFFSET_SOUND4CNT_L)
-REG_NR41         = (REG_BASE + REG_OFFSET_NR41)
-REG_NR42         = (REG_BASE + REG_OFFSET_NR42)
-REG_SOUND4CNT_H  = (REG_BASE + REG_OFFSET_SOUND4CNT_H)
-REG_NR43         = (REG_BASE + REG_OFFSET_NR43)
-REG_NR44         = (REG_BASE + REG_OFFSET_NR44)
-REG_SOUNDCNT     = (REG_BASE + REG_OFFSET_SOUNDCNT)
-REG_SOUNDCNT_L   = (REG_BASE + REG_OFFSET_SOUNDCNT_L)
-REG_NR50         = (REG_BASE + REG_OFFSET_NR50)
-REG_NR51         = (REG_BASE + REG_OFFSET_NR51)
-REG_SOUNDCNT_H   = (REG_BASE + REG_OFFSET_SOUNDCNT_H)
-REG_SOUNDCNT_X   = (REG_BASE + REG_OFFSET_SOUNDCNT_X)
-REG_NR52         = (REG_BASE + REG_OFFSET_NR52)
-REG_SOUNDBIAS    = (REG_BASE + REG_OFFSET_SOUNDBIAS)
-REG_WAVE_RAM     = (REG_BASE + REG_OFFSET_WAVE_RAM)
-REG_WAVE_RAM0    = (REG_BASE + REG_OFFSET_WAVE_RAM0)
-REG_WAVE_RAM0_L  = (REG_BASE + REG_OFFSET_WAVE_RAM0_L)
-REG_WAVE_RAM0_H  = (REG_BASE + REG_OFFSET_WAVE_RAM0_H)
-REG_WAVE_RAM1    = (REG_BASE + REG_OFFSET_WAVE_RAM1)
-REG_WAVE_RAM1_L  = (REG_BASE + REG_OFFSET_WAVE_RAM1_L)
-REG_WAVE_RAM1_H  = (REG_BASE + REG_OFFSET_WAVE_RAM1_H)
-REG_WAVE_RAM2    = (REG_BASE + REG_OFFSET_WAVE_RAM2)
-REG_WAVE_RAM2_L  = (REG_BASE + REG_OFFSET_WAVE_RAM2_L)
-REG_WAVE_RAM2_H  = (REG_BASE + REG_OFFSET_WAVE_RAM2_H)
-REG_WAVE_RAM3    = (REG_BASE + REG_OFFSET_WAVE_RAM3)
-REG_WAVE_RAM3_L  = (REG_BASE + REG_OFFSET_WAVE_RAM3_L)
-REG_WAVE_RAM3_H  = (REG_BASE + REG_OFFSET_WAVE_RAM3_H)
-REG_FIFO         = (REG_BASE + REG_OFFSET_FIFO)
-REG_FIFO_A       = (REG_BASE + REG_OFFSET_FIFO_A)
-REG_FIFO_A_L     = (REG_BASE + REG_OFFSET_FIFO_A_L)
-REG_FIFO_A_H     = (REG_BASE + REG_OFFSET_FIFO_A_H)
-REG_FIFO_B       = (REG_BASE + REG_OFFSET_FIFO_B)
-REG_FIFO_B_L     = (REG_BASE + REG_OFFSET_FIFO_B_L)
-REG_FIFO_B_H     = (REG_BASE + REG_OFFSET_FIFO_B_H)
-
-REG_DMA0         = (REG_BASE + REG_OFFSET_DMA0)
-REG_DMA0SAD      = (REG_BASE + REG_OFFSET_DMA0SAD)
-REG_DMA0SAD_L    = (REG_BASE + REG_OFFSET_DMA0SAD_L)
-REG_DMA0SAD_H    = (REG_BASE + REG_OFFSET_DMA0SAD_H)
-REG_DMA0DAD      = (REG_BASE + REG_OFFSET_DMA0DAD)
-REG_DMA0DAD_L    = (REG_BASE + REG_OFFSET_DMA0DAD_L)
-REG_DMA0DAD_H    = (REG_BASE + REG_OFFSET_DMA0DAD_H)
-REG_DMA0CNT      = (REG_BASE + REG_OFFSET_DMA0CNT)
-REG_DMA0CNT_L    = (REG_BASE + REG_OFFSET_DMA0CNT_L)
-REG_DMA0CNT_H    = (REG_BASE + REG_OFFSET_DMA0CNT_H)
-REG_DMA1         = (REG_BASE + REG_OFFSET_DMA1)
-REG_DMA1SAD      = (REG_BASE + REG_OFFSET_DMA1SAD)
-REG_DMA1SAD_L    = (REG_BASE + REG_OFFSET_DMA1SAD_L)
-REG_DMA1SAD_H    = (REG_BASE + REG_OFFSET_DMA1SAD_H)
-REG_DMA1DAD      = (REG_BASE + REG_OFFSET_DMA1DAD)
-REG_DMA1DAD_L    = (REG_BASE + REG_OFFSET_DMA1DAD_L)
-REG_DMA1DAD_H    = (REG_BASE + REG_OFFSET_DMA1DAD_H)
-REG_DMA1CNT      = (REG_BASE + REG_OFFSET_DMA1CNT)
-REG_DMA1CNT_L    = (REG_BASE + REG_OFFSET_DMA1CNT_L)
-REG_DMA1CNT_H    = (REG_BASE + REG_OFFSET_DMA1CNT_H)
-REG_DMA2         = (REG_BASE + REG_OFFSET_DMA2)
-REG_DMA2SAD      = (REG_BASE + REG_OFFSET_DMA2SAD)
-REG_DMA2SAD_L    = (REG_BASE + REG_OFFSET_DMA2SAD_L)
-REG_DMA2SAD_H    = (REG_BASE + REG_OFFSET_DMA2SAD_H)
-REG_DMA2DAD      = (REG_BASE + REG_OFFSET_DMA2DAD)
-REG_DMA2DAD_L    = (REG_BASE + REG_OFFSET_DMA2DAD_L)
-REG_DMA2DAD_H    = (REG_BASE + REG_OFFSET_DMA2DAD_H)
-REG_DMA2CNT      = (REG_BASE + REG_OFFSET_DMA2CNT)
-REG_DMA2CNT_L    = (REG_BASE + REG_OFFSET_DMA2CNT_L)
-REG_DMA2CNT_H    = (REG_BASE + REG_OFFSET_DMA2CNT_H)
-REG_DMA3         = (REG_BASE + REG_OFFSET_DMA3)
-REG_DMA3SAD      = (REG_BASE + REG_OFFSET_DMA3SAD)
-REG_DMA3SAD_L    = (REG_BASE + REG_OFFSET_DMA3SAD_L)
-REG_DMA3SAD_H    = (REG_BASE + REG_OFFSET_DMA3SAD_H)
-REG_DMA3DAD      = (REG_BASE + REG_OFFSET_DMA3DAD)
-REG_DMA3DAD_L    = (REG_BASE + REG_OFFSET_DMA3DAD_L)
-REG_DMA3DAD_H    = (REG_BASE + REG_OFFSET_DMA3DAD_H)
-REG_DMA3CNT      = (REG_BASE + REG_OFFSET_DMA3CNT)
-REG_DMA3CNT_L    = (REG_BASE + REG_OFFSET_DMA3CNT_L)
-REG_DMA3CNT_H    = (REG_BASE + REG_OFFSET_DMA3CNT_H)
-
-REG_TM0CNT       = (REG_BASE + REG_OFFSET_TM0CNT)
-REG_TM0CNT_L     = (REG_BASE + REG_OFFSET_TM0CNT_L)
-REG_TM0CNT_H     = (REG_BASE + REG_OFFSET_TM0CNT_H)
-REG_TM1CNT       = (REG_BASE + REG_OFFSET_TM1CNT)
-REG_TM1CNT_L     = (REG_BASE + REG_OFFSET_TM1CNT_L)
-REG_TM1CNT_H     = (REG_BASE + REG_OFFSET_TM1CNT_H)
-REG_TM2CNT       = (REG_BASE + REG_OFFSET_TM2CNT)
-REG_TM2CNT_L     = (REG_BASE + REG_OFFSET_TM2CNT_L)
-REG_TM2CNT_H     = (REG_BASE + REG_OFFSET_TM2CNT_H)
-REG_TM3CNT       = (REG_BASE + REG_OFFSET_TM3CNT)
-REG_TM3CNT_L     = (REG_BASE + REG_OFFSET_TM3CNT_L)
-REG_TM3CNT_H     = (REG_BASE + REG_OFFSET_TM3CNT_H)
-
-REG_SIOCNT       = (REG_BASE + REG_OFFSET_SIOCNT)
-REG_SIODATA8     = (REG_BASE + REG_OFFSET_SIODATA8)
-REG_SIODATA32    = (REG_BASE + REG_OFFSET_SIODATA32)
-REG_SIOMLT_SEND  = (REG_BASE + REG_OFFSET_SIOMLT_SEND)
-REG_SIOMLT_RECV  = (REG_BASE + REG_OFFSET_SIOMLT_RECV)
-REG_SIOMULTI0    = (REG_BASE + REG_OFFSET_SIOMULTI0)
-REG_SIOMULTI1    = (REG_BASE + REG_OFFSET_SIOMULTI1)
-REG_SIOMULTI2    = (REG_BASE + REG_OFFSET_SIOMULTI2)
-REG_SIOMULTI3    = (REG_BASE + REG_OFFSET_SIOMULTI3)
-
-REG_KEYINPUT     = (REG_BASE + REG_OFFSET_KEYINPUT)
-REG_KEYCNT       = (REG_BASE + REG_OFFSET_KEYCNT)
-
-REG_RCNT         = (REG_BASE + REG_OFFSET_RCNT)
-
-REG_JOYCNT       = (REG_BASE + REG_OFFSET_JOYCNT)
-REG_JOYSTAT      = (REG_BASE + REG_OFFSET_JOYSTAT)
-REG_JOY_RECV     = (REG_BASE + REG_OFFSET_JOY_RECV)
-REG_JOY_RECV_L   = (REG_BASE + REG_OFFSET_JOY_RECV_L)
-REG_JOY_RECV_H   = (REG_BASE + REG_OFFSET_JOY_RECV_H)
-REG_JOY_TRANS    = (REG_BASE + REG_OFFSET_JOY_TRANS)
-REG_JOY_TRANS_L  = (REG_BASE + REG_OFFSET_JOY_TRANS_L)
-REG_JOY_TRANS_H  = (REG_BASE + REG_OFFSET_JOY_TRANS_H)
-
-REG_IME          = (REG_BASE + REG_OFFSET_IME)
-REG_IE           = (REG_BASE + REG_OFFSET_IE)
-REG_IF           = (REG_BASE + REG_OFFSET_IF)
-
-REG_WAITCNT      = (REG_BASE + REG_OFFSET_WAITCNT)
-
-@-------------------------------------------------------------------------------
-@ I/O Register Flags
-@-------------------------------------------------------------------------------
-
-@ DMA
-DMA_DEST_INC      = 0x0000
-DMA_DEST_DEC      = 0x0020
-DMA_DEST_FIXED    = 0x0040
-DMA_DEST_RELOAD   = 0x0060
-DMA_SRC_INC       = 0x0000
-DMA_SRC_DEC       = 0x0080
-DMA_SRC_FIXED     = 0x0100
-DMA_REPEAT        = 0x0200
-DMA_16BIT         = 0x0000
-DMA_32BIT         = 0x0400
-DMA_DREQ_ON       = 0x0800
-DMA_START_NOW     = 0x0000
-DMA_START_VBLANK  = 0x1000
-DMA_START_HBLANK  = 0x2000
-DMA_START_SPECIAL = 0x3000
-DMA_START_MASK    = 0x3000
-DMA_INTR_ENABLE   = 0x4000
-DMA_ENABLE        = 0x8000
-
-@ Interrupt Flags
-INTR_FLAG_VBLANK   = (1 <<  0)
-INTR_FLAG_HBLANK   = (1 <<  1)
-INTR_FLAG_VCOUNT   = (1 <<  2)
-INTR_FLAG_TIMER0   = (1 <<  3)
-INTR_FLAG_TIMER1   = (1 <<  4)
-INTR_FLAG_TIMER2   = (1 <<  5)
-INTR_FLAG_TIMER3   = (1 <<  6)
-INTR_FLAG_SERIAL   = (1 <<  7)
-INTR_FLAG_DMA0     = (1 <<  8)
-INTR_FLAG_DMA1     = (1 <<  9)
-INTR_FLAG_DMA2     = (1 << 10)
-INTR_FLAG_DMA3     = (1 << 11)
-INTR_FLAG_KEYPAD   = (1 << 12)
-INTR_FLAG_GAMEPAK  = (1 << 13)
-
-VCOUNT_VBLANK = 160
-TOTAL_SCANLINES = 228
diff --git a/include/asm_m4a.inc b/include/asm_m4a.inc
deleted file mode 100644
index 79062fc..0000000
--- a/include/asm_m4a.inc
+++ /dev/null
@@ -1,271 +0,0 @@
-    .equiv SOUND_INFO_PTR, 0x03007FF0
-
-    .equiv ID_NUMBER, 0x68736D53 @ lsB->msB: 'Smsh'
-
-    .equiv PCM_DMA_BUF_SIZE, 1584
-    .equiv MAX_DIRECTSOUND_CHANNELS, 12
-
-    .equiv C_V, 0x40
-
-    .equiv TONEDATA_TYPE_CGB, 0x07
-    .equiv TONEDATA_TYPE_FIX, 0x08
-    .equiv TONEDATA_TYPE_REV, 0x10
-    .equiv TONEDATA_TYPE_CMP, 0x20
-    .equiv TONEDATA_TYPE_SPL, 0x40 @ key split
-    .equiv TONEDATA_TYPE_RHY, 0x80 @ rhythm
-
-    .equiv TONEDATA_P_S_PAN,  0xc0
-
-    .equiv SOUND_CHANNEL_SF_START,       0x80
-    .equiv SOUND_CHANNEL_SF_STOP,        0x40
-    .equiv SOUND_CHANNEL_SF_SPECIAL,     0x20
-    .equiv SOUND_CHANNEL_SF_LOOP,        0x10
-    .equiv SOUND_CHANNEL_SF_IEC,         0x04
-    .equiv SOUND_CHANNEL_SF_ENV,         0x03
-    .equiv SOUND_CHANNEL_SF_ENV_ATTACK,  0x03
-    .equiv SOUND_CHANNEL_SF_ENV_DECAY,   0x02
-    .equiv SOUND_CHANNEL_SF_ENV_SUSTAIN, 0x01
-    .equiv SOUND_CHANNEL_SF_ENV_RELEASE, 0x00
-    .equiv SOUND_CHANNEL_SF_ON, (SOUND_CHANNEL_SF_START | SOUND_CHANNEL_SF_STOP | SOUND_CHANNEL_SF_IEC | SOUND_CHANNEL_SF_ENV)
-
-    .equiv CGB_CHANNEL_MO_PIT, 0x02
-    .equiv CGB_CHANNEL_MO_VOL, 0x01
-
-    .equiv WAVE_DATA_FLAG_LOOP, 0xC0
-
-    .equiv MPT_FLG_VOLSET, 0x01
-    .equiv MPT_FLG_VOLCHG, 0x03
-    .equiv MPT_FLG_PITSET, 0x04
-    .equiv MPT_FLG_PITCHG, 0x0C
-    .equiv MPT_FLG_START,  0x40
-    .equiv MPT_FLG_EXIST,  0x80
-
-    .macro struct_begin
-    .struct 0
-    .endm
-
-    .macro struct_field name, size
-\name:
-    .struct \name + \size
-    .endm
-
-    struct_begin
-    struct_field O_WaveData_kind, 2
-    struct_field O_WaveData_status, 1
-    struct_field O_WaveData_flags, 1
-    struct_field O_WaveData_freq, 4
-    struct_field O_WaveData_loop_start, 4
-    struct_field O_WaveData_size, 4
-    struct_field O_WaveData_data, 0
-    struct_field WaveData_size, 0
-
-    struct_begin
-    struct_field O_ToneData_type, 1
-    struct_field O_ToneData_key, 1
-    struct_field O_ToneData_length, 1
-    struct_field O_ToneData_pan_sweep, 1
-    struct_field O_ToneData_wav, 4
-    struct_field O_ToneData_attack, 1
-    struct_field O_ToneData_decay, 1
-    struct_field O_ToneData_sustain, 1
-    struct_field O_ToneData_release, 1
-    struct_field ToneData_size, 0
-
-    struct_begin
-    struct_field O_SoundInfo_ident, 4
-    struct_field O_SoundInfo_pcm_dma_counter, 1
-    struct_field O_SoundInfo_reverb, 1
-    struct_field O_SoundInfo_max_chans, 1
-    struct_field O_SoundInfo_master_volume, 1
-    struct_field O_SoundInfo_freq, 1
-    struct_field O_SoundInfo_mode, 1
-    struct_field O_SoundInfo_c15, 1
-    struct_field O_SoundInfo_pcm_dma_period, 1
-    struct_field O_SoundInfo_max_lines, 1
-    struct_field O_SoundInfo_gap, 3
-    struct_field O_SoundInfo_pcm_samples_per_vblank, 4
-    struct_field O_SoundInfo_pcm_freq, 4
-    struct_field O_SoundInfo_div_freq, 4
-    struct_field O_SoundInfo_cgb_chans, 4
-    struct_field O_SoundInfo_mplay_head_func, 4
-    struct_field O_SoundInfo_mplay_head, 4
-    struct_field O_SoundInfo_cgb_sound_func, 4
-    struct_field O_SoundInfo_cgb_osc_off_func, 4
-    struct_field O_SoundInfo_midi_to_cgb_func, 4
-    struct_field O_SoundInfo_mplay_jump_table, 4
-    struct_field O_SoundInfo_plynote_func, 4
-    struct_field O_SoundInfo_ext_vol_pit_func, 4
-    struct_field O_SoundInfo_gap2, 16
-    struct_field O_SoundInfo_chans, MAX_DIRECTSOUND_CHANNELS * 64
-    struct_field O_SoundInfo_pcm_buffer, PCM_DMA_BUF_SIZE * 2
-    struct_field SoundInfo_size, 0
-
-    struct_begin
-    struct_field O_SoundChannel_flags, 1
-    struct_field O_SoundChannel_type, 1
-    struct_field O_SoundChannel_volume_right, 1
-    struct_field O_SoundChannel_volume_left, 1
-    struct_field O_SoundChannel_attack, 1
-    struct_field O_SoundChannel_decay, 1
-    struct_field O_SoundChannel_sustain, 1
-    struct_field O_SoundChannel_release, 1
-    struct_field O_SoundChannel_key, 1
-    struct_field O_SoundChannel_envelope_volume, 1
-    struct_field O_SoundChannel_envelope_volume_right, 1
-    struct_field O_SoundChannel_envelope_volume_left, 1
-    struct_field O_SoundChannel_pseudo_echo_volume, 1
-    struct_field O_SoundChannel_pseudo_echo_length, 1
-    struct_field O_SoundChannel_dummy1, 1
-    struct_field O_SoundChannel_dummy2, 1
-    struct_field O_SoundChannel_gate_time, 1
-    struct_field O_SoundChannel_midi_key, 1
-    struct_field O_SoundChannel_velocity, 1
-    struct_field O_SoundChannel_priority, 1
-    struct_field O_SoundChannel_rhythm_pan, 1
-    struct_field O_SoundChannel_dummy3, 3
-    struct_field O_SoundChannel_count, 4
-    struct_field O_SoundChannel_fw, 4
-    struct_field O_SoundChannel_frequency, 4
-    struct_field O_SoundChannel_wav, 4
-    struct_field O_SoundChannel_current_ptr, 4
-    struct_field O_SoundChannel_track, 4
-    struct_field O_SoundChannel_prev_ptr, 4
-    struct_field O_SoundChannel_next_ptr, 4
-    struct_field O_SoundChannel_dummy4, 4
-    struct_field O_SoundChannel_xpi, 2
-    struct_field O_SoundChannel_xpc, 2
-    struct_field SoundChannel_size, 0
-
-    struct_begin
-    struct_field O_MusicPlayerTrack_flags, 1
-    struct_field O_MusicPlayerTrack_wait, 1
-    struct_field O_MusicPlayerTrack_patternLevel, 1
-    struct_field O_MusicPlayerTrack_repN, 1
-    struct_field O_MusicPlayerTrack_gate_time, 1
-    struct_field O_MusicPlayerTrack_key, 1
-    struct_field O_MusicPlayerTrack_velocity, 1
-    struct_field O_MusicPlayerTrack_running_status, 1
-    struct_field O_MusicPlayerTrack_key_m, 1
-    struct_field O_MusicPlayerTrack_pit_m, 1
-    struct_field O_MusicPlayerTrack_key_shift, 1
-    struct_field O_MusicPlayerTrack_key_shift_x, 1
-    struct_field O_MusicPlayerTrack_tune, 1
-    struct_field O_MusicPlayerTrack_pit_x, 1
-    struct_field O_MusicPlayerTrack_bend, 1
-    struct_field O_MusicPlayerTrack_bend_range, 1
-    struct_field O_MusicPlayerTrack_vol_mr, 1
-    struct_field O_MusicPlayerTrack_vol_ml, 1
-    struct_field O_MusicPlayerTrack_vol, 1
-    struct_field O_MusicPlayerTrack_vol_x, 1
-    struct_field O_MusicPlayerTrack_pan, 1
-    struct_field O_MusicPlayerTrack_panX, 1
-    struct_field O_MusicPlayerTrack_mod_m, 1
-    struct_field O_MusicPlayerTrack_mod, 1
-    struct_field O_MusicPlayerTrack_mod_t, 1
-    struct_field O_MusicPlayerTrack_lfo_speed, 1
-    struct_field O_MusicPlayerTrack_lfo_speed_c, 1
-    struct_field O_MusicPlayerTrack_lfo_delay, 1
-    struct_field O_MusicPlayerTrack_lfo_delay_c, 1
-    struct_field O_MusicPlayerTrack_priority, 1
-    struct_field O_MusicPlayerTrack_pseudo_echo_volume, 1
-    struct_field O_MusicPlayerTrack_pseudo_echo_length, 1
-    struct_field O_MusicPlayerTrack_chan, 4
-    struct_field O_MusicPlayerTrack_ToneData_type, 1
-    struct_field O_MusicPlayerTrack_ToneData_key, 1
-    struct_field O_MusicPlayerTrack_ToneData_length, 1
-    struct_field O_MusicPlayerTrack_ToneData_pan_sweep, 1
-    struct_field O_MusicPlayerTrack_ToneData_wav, 4
-    struct_field O_MusicPlayerTrack_ToneData_attack, 1
-    struct_field O_MusicPlayerTrack_ToneData_decay, 1
-    struct_field O_MusicPlayerTrack_ToneData_sustain, 1
-    struct_field O_MusicPlayerTrack_ToneData_release, 1
-    struct_field O_MusicPlayerTrack_gap, 10
-    struct_field O_MusicPlayerTrack_unk_3A, 2
-    struct_field O_MusicPlayerTrack_unk_3C, 4
-    struct_field O_MusicPlayerTrack_cmd_ptr, 4
-    struct_field O_MusicPlayerTrack_pattern_stack, 12
-    struct_field MusicPlayerTrack_size, 0
-
-    .equiv O_MusicPlayerTrack_ToneData_keySplitTable, O_MusicPlayerTrack_ToneData_attack
-
-    struct_begin
-    struct_field O_MusicPlayer_song, 4
-    struct_field O_MusicPlayer_status, 4
-    struct_field O_MusicPlayer_track_count, 1
-    struct_field O_MusicPlayer_priority, 1
-    struct_field O_MusicPlayer_cmd, 1
-    struct_field O_MusicPlayer_unk_B, 1
-    struct_field O_MusicPlayer_clock, 4
-    struct_field O_MusicPlayer_gap, 8
-    struct_field O_MusicPlayer_mem_acc_area, 4
-    struct_field O_MusicPlayer_tempo_d, 2
-    struct_field O_MusicPlayer_tempo_u, 2
-    struct_field O_MusicPlayer_tempo_i, 2
-    struct_field O_MusicPlayer_tempo_c, 2
-    struct_field O_MusicPlayer_fadeOI, 2
-    struct_field O_MusicPlayer_fade_oc, 2
-    struct_field O_MusicPlayer_fadeOV, 2
-    struct_field O_MusicPlayer_padding, 2
-    struct_field O_MusicPlayer_tracks, 4
-    struct_field O_MusicPlayer_tone, 4
-    struct_field O_MusicPlayer_ident, 4
-    struct_field O_MusicPlayer_next_func, 4
-    struct_field O_MusicPlayer_next, 4
-    struct_field MusicPlayer_size, 0
-
-    struct_begin
-    struct_field O_CgbChannel_flags, 1
-    struct_field O_CgbChannel_type, 1
-    struct_field O_CgbChannel_volume_right, 1
-    struct_field O_CgbChannel_volume_left, 1
-    struct_field O_CgbChannel_attack, 1
-    struct_field O_CgbChannel_decay, 1
-    struct_field O_CgbChannel_sustain, 1
-    struct_field O_CgbChannel_release, 1
-    struct_field O_CgbChannel_key, 1
-    struct_field O_CgbChannel_envelope_volume, 1
-    struct_field O_CgbChannel_envelope_goal, 1
-    struct_field O_CgbChannel_envelope_counter, 1
-    struct_field O_CgbChannel_pseudo_echo_volume, 1
-    struct_field O_CgbChannel_pseudo_echo_length, 1
-    struct_field O_CgbChannel_dummy1, 1
-    struct_field O_CgbChannel_dummy2, 1
-    struct_field O_CgbChannel_gate_time, 1
-    struct_field O_CgbChannel_midi_key, 1
-    struct_field O_CgbChannel_velocity, 1
-    struct_field O_CgbChannel_priority, 1
-    struct_field O_CgbChannel_rhythm_pan, 1
-    struct_field O_CgbChannel_dummy3, 3
-    struct_field O_CgbChannel_dummy5, 1
-    struct_field O_CgbChannel_sustain_goal, 1
-    struct_field O_CgbChannel_n4, 1
-    struct_field O_CgbChannel_pan, 1
-    struct_field O_CgbChannel_pan_mask, 1
-    struct_field O_CgbChannel_modify, 1
-    struct_field O_CgbChannel_length, 1
-    struct_field O_CgbChannel_sweep, 1
-    struct_field O_CgbChannel_frequency, 4
-    struct_field O_CgbChannel_wav, 4
-    struct_field O_CgbChannel_current_ptr, 4
-    struct_field O_CgbChannel_track, 4
-    struct_field O_CgbChannel_prev_channel_ptr, 4
-    struct_field O_CgbChannel_next_channel_ptr, 4
-    struct_field O_CgbChannel_dummy4, 8
-    struct_field CgbChannel_size, 0
-
-    .purgem struct_field
-    .purgem struct_begin
-
-    .macro song label:req, music_player:req, unknown:req
-    .4byte \label
-    .2byte \music_player
-    .2byte \unknown
-    .endm
-
-    .macro music_player info_struct:req, track_struct:req, num_tracks:req, unknown:req
-    .4byte \info_struct
-    .4byte \track_struct
-    .byte \num_tracks
-    .space 1  @ Padding
-    .2byte \unknown
-    .endm
diff --git a/include/asm_macros.inc b/include/asm_macros.inc
deleted file mode 100644
index c350cdf..0000000
--- a/include/asm_macros.inc
+++ /dev/null
@@ -1,9 +0,0 @@
-    .macro function name
-    .align 2, 0
-    .global \name
-    .type \name , function
-    .endm
-
-    .macro endfunction name
-    .size \name , . - \name
-    .endm
diff --git a/include/attributes.h b/include/attributes.h
deleted file mode 100644
index fa462bd..0000000
--- a/include/attributes.h
+++ /dev/null
@@ -1,24 +0,0 @@
-#pragma once
-
-#include <stddef.h>
-
-#define SECTION(name) __attribute__((section(name)))
-
-#define IWRAM_DATA        SECTION("iwram_data")
-#define EWRAM_DATA        SECTION("ewram_data")
-#define EWRAM_OVERLAY(id) SECTION("ewram_overlay_" # id)
-
-#define ALIGNED(n) __attribute__((aligned(n)))
-#define NAKEDFUNC __attribute__((naked))
-
-#if defined(MODERN) && MODERN
-#  define CONST_DATA const
-#  define COMMON_DATA(name) SECTION(".bss")
-#  define SHOULD_BE_STATIC static
-#  define SHOULD_BE_CONST const
-#else
-#  define CONST_DATA SECTION(".data")
-#  define COMMON_DATA(name) SECTION(".common." # name)
-#  define SHOULD_BE_STATIC
-#  define SHOULD_BE_CONST
-#endif
diff --git a/include/banim_ekrbattle.h b/include/banim_ekrbattle.h
deleted file mode 100644
index 9cd95e4..0000000
--- a/include/banim_ekrbattle.h
+++ /dev/null
@@ -1,32 +0,0 @@
-#pragma once
-
-#include "common.h"
-#include "banim_sprite.h"
-
-struct ProcEkrBattle {
-    PROC_HEADER;
-
-    /* 29 */ u8 unk29;
-    /* 2A */ STRUCT_PAD(0x2A, 0x2C);
-    /* 2C */ i16 timer;
-    /* 2E */ i16 end;
-    /* 30 */ STRUCT_PAD(0x30, 0x44);
-    /* 44 */ int side;
-    /* 48 */ int counter;
-    /* 4C */ STRUCT_PAD(0x4C, 0x54);
-    /* 54 */ int quote;
-    /* 58 */ int unk58;
-    /* 5C */ struct BaSprite *bas;
-};
-
-extern struct ProcEkrBattle * EWRAM_DATA gUnk_Banim_0200005C;
-
-extern int EWRAM_DATA gUnk_Banim_02000010;
-extern int EWRAM_DATA gUnk_Banim_02000014;
-extern int EWRAM_DATA gUnk_Banim_02000018;
-extern int EWRAM_DATA gUnk_Banim_0200001C;
-extern int EWRAM_DATA gUnk_Banim_0201771C;
-extern struct ProcScr CONST_DATA gUnk_085CB508[];
-extern struct ProcScr CONST_DATA gUnk_085CB528[];
-
-void func_fe6_08042660(void);
diff --git a/include/banim_sprite.h b/include/banim_sprite.h
deleted file mode 100644
index 36f8f42..0000000
--- a/include/banim_sprite.h
+++ /dev/null
@@ -1,121 +0,0 @@
-#pragma once
-
-#include "gba/gba.h"
-
-struct BaSprite
-{
-    /* 00 */ u16 flags;
-    /* 02 */ short xPosition;
-    /* 04 */ short yPosition;
-    /* 06 */ short timer;
-    /* 08 */ u16 oam2;
-    /* 0A */ u16 priority;
-    /* 0C */ u16 flags2;
-    /* 0E */ u16 nextRoundId;
-    /* 10 */ u16 flags3;
-    /* 12 */ u8 currentRoundType;
-    /* 13 */ u8 unk13;
-
-    // Command queue
-    /* 14 */ u8 cqSize;
-    /* 15 */ u8 cq[7];
-
-    /* 1C */ u32 oam01;
-
-    /* 20 */ u32 const * scrCur;
-    /* 24 */ u32 const * script;
-
-    /* 28 */ void const * imgSheet;
-    /* 2C */ void const * unk2C;
-    /* 30 */ void const * sprDataPool; // aka "OAM data"
-
-    /* 34 */ struct BaSprite * prev;
-    /* 38 */ struct BaSprite * next;
-
-    /* 3C */ void const * sprData;
-    /* 40 */ void const * unk40;
-    /* 44 */ void const * unk_44;
-};
-
-enum
-{
-    // Command Identifiers
-
-    // TODO: complete during battle anim decomp
-
-    BAS_CMD_NOP     = 0x00,
-    BAS_CMD_WAIT_01 = 0x01, // wait for hp depletion
-    BAS_CMD_WAIT_02 = 0x02, // wait for dodge start, then dodge
-    BAS_CMD_WAIT_03 = 0x03, // wait for attack start
-    BAS_CMD_WAIT_04 = 0x04,
-    BAS_CMD_WAIT_05 = 0x05, // wait for spell anim?
-    // TODO: more
-    BAS_CMD_WAIT_13 = 0x13, // unk
-    BAS_CMD_WAIT_18 = 0x18, // wait for dodge start, then forward dodge
-    BAS_CMD_WAIT_39 = 0x39, // unk
-};
-
-void BasUpdateAll(void);
-void BasInit(void);
-struct BaSprite * BasCreate2(void const * script);
-struct BaSprite * BasCreate(void const * script, u16 displayPriority);
-void BasSort(void);
-void BasRemove(struct BaSprite * BaSprite);
-void BasPutOam(struct BaSprite * BaSprite);
-
-#define BAS_IS_DISABLED(BaSprite) ((BaSprite)->flags == 0)
-
-/*
-
-    BATTLE ANIM INSTRUCTION FORMAT:
-
-    CallFunc(function):
-        +00bit | 28bit | function
-        +28bit | 4bit  | 1100b
-
-    GotoScript(script):
-        +00bit | 28bit | script
-        +28bit | 4bit  | 1101b
-
-    Stop:
-        +00bit | 24bit | -
-        +24bit | 8bit  | 10000000b
-
-    End:
-        +00bit | 24bit | -
-        +24bit | 8bit  | 10000001b
-
-    Loop:
-        +00bit | 24bit | -
-        +24bit | 8bit  | 10000010b
-
-    Wait(duration):
-        +00bit | 16bit | duration
-        +16bit | 8bit  | -
-        +24bit | 8bit  | 10000011b
-
-    Move(x_offset, y_offset):
-        +00bit | 8bit  | x_offset
-        +08bit | 8bit  | y_offset
-        +16bit | 8bit  | -
-        +24bit | 8bit  | 10000100b
-
-    Command(command):
-        +00bit | 8bit  | command
-        +08bit | 16bit | -
-        +24bit | 8bit  | 10000101b
-
-    Frame(delay, unk, sheet, sprOff):
-        +00bit | 16bit | delay
-        +16bit | 8bit  | unk
-        +24bit | 8bit  | 10000110b
-        +4byte | 4byte | sheet
-        +8byte | 8byte | sprOff
-
-    SetSpriteData(delay, address):
-        +00bit | 2bit  | delay (lo 2 bits)
-        +02bit | 26bit | address (minus lo 2 bits which are implied zeroes)
-        +28bit | 3bit  | delay (hi 3 bits)
-        +31bit | 1bit  | 0b
-
-*/
diff --git a/include/battle.h b/include/battle.h
deleted file mode 100644
index 1267d04..0000000
--- a/include/battle.h
+++ /dev/null
@@ -1,219 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "unit.h"
-
-enum
-{
-    // For use with BattleSt::flags
-
-    BATTLE_FLAG_REAL = (1 << 0),
-    BATTLE_FLAG_SIMULATE = (1 << 1),
-    BATTLE_FLAG_BIT2 = (1 << 2),
-    BATTLE_FLAG_BALLISTA = (1 << 3),
-    BATTLE_FLAG_BIT4 = (1 << 4),
-    BATTLE_FLAG_ARENA = (1 << 5),
-    BATTLE_FLAG_REFRESH = (1 << 6),
-    BATTLE_FLAG_MAPANIMS = (1 << 7),
-};
-
-enum
-{
-    BATTLE_HIT_ATTR_CRIT      = (1 << 0),
-    BATTLE_HIT_ATTR_MISS      = (1 << 1),
-    BATTLE_HIT_ATTR_FOLLOWUP  = (1 << 2),
-    BATTLE_HIT_ATTR_RETALIATE = (1 << 3),
-    BATTLE_HIT_ATTR_BRAVE     = (1 << 4),
-    BATTLE_HIT_ATTR_5         = (1 << 5), // unused?
-    BATTLE_HIT_ATTR_POISON    = (1 << 6),
-    BATTLE_HIT_ATTR_DEVIL     = (1 << 7),
-    BATTLE_HIT_ATTR_HPSTEAL   = (1 << 8),
-    BATTLE_HIT_ATTR_ECLIPSE   = (1 << 9),
-    BATTLE_HIT_ATTR_TATTACK   = (1 << 10), // triangle attack!
-};
-
-enum
-{
-    #define BATTLE_HIT_INFO_ACTOR(n) ((n) << 3)
-
-    BATTLE_HIT_INFO_BEGIN        = (1 << 0),
-    BATTLE_HIT_INFO_FINISHES     = (1 << 1),
-    BATTLE_HIT_INFO_KILLS_TARGET = (1 << 2),
-    BATTLE_HIT_INFO_ACTORB       = (1 << 3),
-    BATTLE_HIT_INFO_END          = (1 << 7),
-};
-
-struct BattleSt
-{
-    /* 00 */ u8 range;
-    /* 01 */ u8 flags;
-    /* 02 */ i16 damage;
-    /* 04 */ i16 attack;
-    /* 06 */ i16 defense;
-    /* 08 */ i16 hit;
-    /* 0A */ i16 crit;
-    /* 0C */ struct Unit * ta_unit_a;
-    /* 10 */ struct Unit * ta_unit_b;
-};
-
-struct BattleUnit
-{
-    /* 00 */ struct Unit unit;
-
-    /* 48 */ u16 weapon;
-    /* 4A */ u16 weapon_before;
-    /* 4C */ u16 weapon_attributes;
-    /* 4E */ u8 weapon_kind;
-    /* 4F */ u8 weapon_inventory_slot;
-    /* 50 */ bool8 has_inventory_weapon;
-
-    /* 51 */ i8 advantage_bonus_hit;
-    /* 52 */ i8 advantage_bonus_damage;
-
-    /* 53 */ u8 terrain;
-    /* 54 */ i8 terrain_defense;
-    /* 55 */ i8 terrain_avoid;
-    /* 56 */ i8 terrain_resistance;
-    /* 57 */ // pad?
-
-    /* 58 */ i16 battle_attack;
-    /* 5A */ i16 battle_defense;
-    /* 5C */ i16 battle_speed;
-    /* 5E */ i16 battle_hit;
-    /* 60 */ i16 battle_avoid;
-    /* 62 */ i16 battle_effective_hit;
-    /* 64 */ i16 battle_crit;
-    /* 66 */ i16 battle_dodge;
-    /* 68 */ i16 battle_effective_crit;
-
-    /* 6A */ i8 exp_gain;
-    /* 6B */ i8 output_status;
-    /* 6C */ i8 previous_level;
-    /* 6D */ i8 previous_exp;
-    /* 6E */ i8 previous_hp;
-
-    /* 6F */ i8 change_hp;
-    /* 70 */ i8 change_pow;
-    /* 71 */ i8 change_skl;
-    /* 72 */ i8 change_spd;
-    /* 73 */ i8 change_def;
-    /* 74 */ i8 change_res;
-    /* 75 */ i8 change_lck;
-    /* 76 */ i8 change_con;
-
-    /* 77 */ i8 wexp_gain;
-    /* 78 */ bool8 dealt_damage;
-    /* 79 */ bool8 weapon_broke;
-
-    /* 7A */ bool8 has_item_effect_target;
-    /* 7B */ /* pad */
-};
-
-struct BattleHit
-{
-    u16 attributes;
-    u8 info;
-    i8 damage;
-};
-
-void BattleGenerateSimulationInternal(struct Unit * instigator, struct Unit * target, int x, int y, int item_slot);
-void BattleGenerateRealInternal(struct Unit * instigator, struct Unit * target);
-void BattleApplyGameStateUpdates(void);
-void BattleGenerateSimulation(struct Unit * unit, struct Unit * target, int x, int y, int item_slot);
-void BattleGenerateReal(struct Unit * instigator, struct Unit * target);
-void BattleGenerateBallistaSimulation(struct Unit * unit, struct Unit * target, int x, int y);
-void BattleGenerateBallistaReal(struct Unit * instigator, struct Unit * target);
-void BattleGenerate(struct Unit * instigator, struct Unit * target);
-void BattleGenerateDisplayStats(struct Unit * unit, i8 item_slot);
-bool BattleRandRoll(u16 threshold, bool simResult);
-bool BattleRandRoll2Rn(u16 threshold, bool simResult);
-void InitBattleUnit(struct BattleUnit * bu, struct Unit * unit);
-void InitBattleUnitWithoutBonuses(struct BattleUnit * bu, struct Unit * unit);
-void SetBattleUnitTerrainBonuses(struct BattleUnit * bu, int terrain);
-void SetBattleUnitTerrainBonusesAuto(struct BattleUnit * bu);
-void SetBattleUnitWeapon(struct BattleUnit * bu, int item_slot);
-void SetBattleUnitWeaponBallista(struct BattleUnit * bu);
-void ComputeBattleUnitStats(struct BattleUnit * attacker, struct BattleUnit * defender);
-void ComputeBattleUnitEffectiveStats(struct BattleUnit * attacker, struct BattleUnit * defender);
-void ComputeBattleUnitSupportBonuses(struct BattleUnit * attacker, struct BattleUnit * defender);
-void ComputeBattleUnitDefense(struct BattleUnit * attacker, struct BattleUnit * defender);
-void ComputeBattleUnitBaseDefense(struct BattleUnit * bu);
-void ComputeBattleUnitAttack(struct BattleUnit * attacker, struct BattleUnit * defender);
-void ComputeBattleUnitSpeed(struct BattleUnit * attacker);
-void ComputeBattleUnitHitRate(struct BattleUnit * attacker);
-void ComputeBattleUnitAvoidRate(struct BattleUnit * attacker);
-void ComputeBattleUnitCritRate(struct BattleUnit * attacker);
-void ComputeBattleUnitDodgeRate(struct BattleUnit * attacker);
-void ComputeBattleUnitEffectiveHitRate(struct BattleUnit * attacker, struct BattleUnit * defender);
-void ComputeBattleUnitEffectiveCritRate(struct BattleUnit * attacker, struct BattleUnit * defender);
-void ComputeBattleUnitSpecialWeaponStats(struct BattleUnit * attacker, struct BattleUnit * defender);
-void ClearBattleHits(void);
-void BattleUnwind(void);
-void BattleGetBattleUnitOrder(struct BattleUnit ** attacker, struct BattleUnit ** defender);
-bool BattleGetFollowUpOrder(struct BattleUnit ** attacker, struct BattleUnit ** defender);
-bool BattleGenerateRoundHits(struct BattleUnit * attacker, struct BattleUnit * defender);
-int GetBattleUnitHitCount(struct BattleUnit * attacker);
-int BattleCheckBraveEffect(struct BattleUnit * attacker);
-bool BattleCheckTriangleAttack(struct BattleUnit * attacker, struct BattleUnit * defender);
-void BattleUpdateBattleStats(struct BattleUnit * attacker, struct BattleUnit * defender);
-void BattleGenerateHitAttributes(struct BattleUnit * attacker);
-void BattleGenerateHitTriangleAttack(struct BattleUnit * attacker, struct BattleUnit * defender);
-void BattleGenerateHitEffects(struct BattleUnit * attacker, struct BattleUnit * defender);
-bool BattleGenerateHit(struct BattleUnit * attacker, struct BattleUnit * defender);
-void BattleApplyExpGains(void);
-int GetStatIncrease(int growth);
-int GetAutoleveledStatIncrease(int growth, int levelCount);
-void CheckBattleUnitLevelUp(struct BattleUnit * bu);
-void UnitPromote(struct Unit * unit);
-void GenerateBattleUnitStatGainsComparatively(struct BattleUnit * bu, struct Unit * unit);
-void CheckBattleUnitStatCaps(struct Unit * unit, struct BattleUnit * bu);
-void BattleApplyUnitUpdates(void);
-int GetBattleUnitUpdatedWeaponExp(struct BattleUnit * bu);
-bool HasBattleUnitGainedWeaponLevel(struct BattleUnit * bu);
-void UpdateUnitFromBattle(struct Unit * unit, struct BattleUnit * bu);
-void UpdateUnitDuringBattle(struct Unit * unit, struct BattleUnit * bu);
-void BattleApplyBallistaUpdates(void);
-void func_fe6_08025780(void);
-int GetUnitExpLevel(struct Unit * unit);
-int GetUnitRoundExp(struct Unit * unit, struct Unit * other);
-int GetUnitPowerLevel(struct Unit * unit);
-int GetUnitClassKillExpBonus(struct Unit * unit, struct Unit * defeated);
-int GetUnitKillExpBonus(struct Unit * unit, struct Unit * other);
-int GetBattleUnitExpGain(struct BattleUnit * bu, struct BattleUnit * other);
-void BattleApplyItemExpGains(void);
-int GetBattleUnitStaffExp(struct BattleUnit * bu);
-void BattleApplyMiscActionExpGains(void);
-void BattleUnitTargetSetEquippedWeapon(struct BattleUnit * bu);
-void BattleUnitTargetCheckCanCounter(struct BattleUnit * bu);
-void BattleApplyReaverEffect(struct BattleUnit * attacker, struct BattleUnit * defender);
-void BattleApplyWeaponTriangleEffect(struct BattleUnit * instigator, struct BattleUnit * target);
-void BattleInitTargetCanCounter(void);
-void InitObstacleBattleUnit(void);
-void ComputeBattleObstacleStats(void);
-void UpdateObstacleFromBattle(struct BattleUnit * bu);
-void BeginBattleAnimations(void);
-int GetUnitSoloBattleAnimType(struct Unit * unit);
-int GetBattleAnimType(void);
-void BattlePrintDebugUnitInfo(struct BattleUnit * instigator, struct BattleUnit * target);
-void BattlePrintDebugHitInfo(void);
-void BattleInitItemEffect(struct Unit * instigator, int item_slot);
-void BattleInitItemEffectTarget(struct Unit * unit);
-void BattleApplyMiscAction(ProcPtr proc);
-void BattleApplyItemEffect(ProcPtr proc);
-int GetOffensiveStaffAccuracy(struct Unit * unit, struct Unit * target);
-void BattleGenerateArena(struct Unit * unit);
-bool BattleIsTriangleAttack(void);
-bool DidBattleUnitBreakWeapon(struct BattleUnit * bu);
-void BattleHitAdvance(void);
-void BattleHitTerminate(void);
-
-extern struct BattleSt gBattleSt;
-
-extern struct BattleUnit gBattleUnitA;
-extern struct BattleUnit gBattleUnitB;
-
-extern struct BattleHit gBattleHits[];
-extern struct BattleHit * gBattleHitIt;
-
-#define CanBattleUnitGainExp(bu) ((bu)->unit.exp != 0xFF)
diff --git a/include/battlepreview.h b/include/battlepreview.h
deleted file mode 100644
index f4d4411..0000000
--- a/include/battlepreview.h
+++ /dev/null
@@ -1,16 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "proc.h"
-#include "helpbox.h"
-
-void StartBattlePreview(struct MapSelectProc * proc);
-void UpdateBattlePreviewContents(void);
-void CloseBattlePreview(void);
-fu8 StartBattlePreviewHelpBox(struct MapSelectProc * proc, struct SelectTarget * target);
-
-void HelpBoxPopulateBattlePreviewAdvantageA(struct HelpBoxProc * proc);
-void HelpBoxPopulateBattlePreviewAdvantageB(struct HelpBoxProc * proc);
-
-extern struct ProcScr CONST_DATA ProcScr_BattlePreview[];
diff --git a/include/bm.h b/include/bm.h
index 4eca3ed..191fcee 100644
--- a/include/bm.h
+++ b/include/bm.h
@@ -1,10 +1,53 @@
 #pragma once
 
-#include "common.h"
-#include "proc.h"
+#include "global.h"
 
-enum
-{
+struct BmSt {
+    /* 00 */ s8  mainLoopEndedFlag;
+
+    /* 01 */ s8  gameLogicSemaphore;
+    /* 02 */ s8  gameGfxSemaphore;
+
+    /* 03 */ u8  _unk04;
+
+    /* 04 */ u8  gameStateBits;
+
+    /* 05 */ u8  _unk05;
+
+    /* 06 */ u16 prevVCount;
+
+    /* 08 */ u32 _unk08;
+
+    /* 0C */ struct Vec2 camera;
+    /* 10 */ struct Vec2 cameraPrevious;
+    /* 14 */ struct Vec2 playerCursor;
+    /* 18 */ struct Vec2 cursorPrevious;
+    /* 1C */ struct Vec2 cursorTarget;
+    /* 20 */ struct Vec2 playerCursorDisplay;
+    /* 24 */ struct Vec2u mapRenderOrigin;
+    /* 28 */ struct Vec2 cameraMax;
+
+    /* 2C */ u16 itemUnk2C;
+    /* 2E */ u16 itemUnk2E;
+
+    /* 30 */ u16 unk30;
+    /* 32 */ s16 unk32;
+    /* 34 */ s16 unk34;
+    /* 36 */ s8 unk36;
+    /* 37 */ s8 unk37;
+    /* 38 */ u8 altBlendACa;
+    /* 39 */ u8 altBlendACb;
+    /* 3A */ u8 altBlendBCa;
+    /* 3B */ u8 altBlendBCb;
+    /* 3C */ u8 just_resumed;
+    /* 3D */ u8 unk3D;
+    /* 3E */ u8 unk3E;
+    /* 3F */ s8 unk3F;
+};
+
+extern struct BmSt gBmSt;
+
+enum BmSt_gameStateBits {
     BM_FLAG_0 = (1 << 0),
     BM_FLAG_1 = (1 << 1),
     BM_FLAG_2 = (1 << 2),
@@ -14,20 +57,113 @@ enum
     BM_FLAG_LINKARENA = (1 << 6),
 };
 
-enum
-{
-    PARTIAL_ACTION_RESCUE_TRANSFER = (1 << 0),
-    PARTIAL_ACTION_TRADED = (1 << 1),
-    PARTIAL_ACTION_SUPPLY = (1 << 2),
+struct PlaySt {
+    /* 00 */ u32 time_saved;
+    /* 04 */ u32 time_chapter_started;
+
+    /* 08 */ u32 partyGoldAmount;
+    /* 0C */ u8  gameSaveSlot;
+
+    /* 0D */ u8  chapterVisionRange; // 0 means no fog
+    /* 0E */ s8  chapterIndex;
+
+    /* 0F */ u8  faction; // 0x00 = Player phase, 0x40 = NPC phase, 0x80 = Enemy phase (0xC0 = link arena 4th team?)
+
+    /* 10 */ u16 chapterTurnNumber;
+
+    /* 12 */ u8  xCursor, yCursor; // map cursor position
+
+    /* 14 */ u8  chapterStateBits; // +0x04 = postgame, +0x10 = in prep screen, +0x40 = difficult mode, +0x80 = link arena?
+    /* 15 */ u8  chapterWeatherId;
+    /* 16 */ u16 chapterTotalSupportGain;
+
+    /* 18 */ u8 playthroughIdentifier;
+    /* 19 */ u8 unk19;
+    /* 1A */ u8 lastUnitSortType;
+
+    /* 1B */ u8  chapterModeIndex; // 1 for tutorial (ch0-8), 2 for Eirika route, 3 for Ephraim route
+
+    // character identifiers indexed by weapon type.
+    // has to do with allowing unusable weapons to be used
+    /* 1C */ u8  unk1C[2];
+    /* 1E */ u8 unk1E;
+    /* 1F */ u8 unk1F;
+
+    /* 20 */ char playerName[0x2B - 0x20]; // unused outside of link arena (was tactician name in FE7); Size unknown
+
+    /* 2B */ u8 unk_2B_00 : 0x01;
+             u8 unk_2B_01 : 0x07;
+
+    u32 unk_2C_1:1;
+    u32 unk_2C_01 : 0x03;
+    u32 unk_2C_04 : 0x09;
+    u32 unk_2C_0D : 0x0A;
+    u32 unk_2C_2:5;
+    u32 unk_2C_3:4;
+
+    /* 30 */ int total_gold;
+
+    /* 34 */ u32 unk_34_00 : 0x14;
+             u32 unk_34_14 : 0x0C;
+
+    u32 unk_38_1:8;
+    u32 unk_38_2:20; // Used by bmdifficulty (Valni/Lagdou)
+    u32 unk_38_3:4;
+
+    /* 3C */ u32 unk_3C_00 : 6;
+    /* 3C */ u32 combatRank : 3;
+    /* 3D */ u32 expRank : 3;
+    /* 3D */ u32 unk_3D_04 : 3;
+    /* 3D */ u32 fundsRank : 3;
+    /* 3E */ u32 tacticsRank : 3;
+    /* 3E */ u32 survivalRank : 3;
+    /* 3F */ u32 unk_3F_00 : 8;
+
+    // option bits
+    u32 cfgUnitColor:1; // 1
+    u32 cfgDisableTerrainDisplay:1; // 1
+    u32 cfgUnitDisplayType:2; // 2
+    u32 cfgAutoCursor:1; // 1
+    u32 cfgTextSpeed:2;
+    u32 cfgGameSpeed:1; // 1
+    u32 cfgDisableBgm:1; // 1
+    u32 cfgDisableSoundEffects:1; // 1
+    u32 cfgWindowColor:2;
+    u32 unk41_5:1; // 1
+    u32 unk41_6:1; // unk
+    u32 cfgDisableAutoEndTurns:1; // 1
+    u32 cfgNoSubtitleHelp:1; // 1
+    u32 cfgDisableGoalDisplay:1; // unk
+    u32 cfgAnimationType:2; // 2
+    u32 cfgBattleForecastType:2; // 2
+    u32 cfgController:1; // 1
+    u32 cfgRankDisplay:1; // unk
+    u32 debugControlRed:2; // 2 (!)
+    u32 debugControlGreen:2; // 2
+    u32 unk43_4:5; // unk
+
+    u8  unk44[0x48 - 0x44];
+
+    u16 unk48;
+
+    u8 unk4A_1 : 1;
+    u8 unk4A_2 : 3;
+    u8 unk4A_5 : 4;
+    u8 unk4B;
 };
 
-enum
-{
+extern struct PlaySt gPlaySt;
+
+/**
+ * Use with PlaySt field chapterStateBits
+ */
+
+enum PlaySt_chapterStateBits {
     PLAY_FLAG_STATSCREENPAGE0 = (1 << 0),
     PLAY_FLAG_STATSCREENPAGE1 = (1 << 1),
-    PLAY_FLAG_2               = (1 << 2),
+    PLAY_FLAG_POSTGAME        = (1 << 2),
     PLAY_FLAG_TUTORIAL        = (1 << 3),
-    PLAY_FLAG_4               = (1 << 4),
+    PLAY_FLAG_PREPSCREEN      = (1 << 4),
     PLAY_FLAG_COMPLETE        = (1 << 5),
     PLAY_FLAG_HARD            = (1 << 6),
     PLAY_FLAG_7               = (1 << 7),
@@ -35,152 +171,3 @@ enum
     PLAY_FLAG_STATSCREENPAGE_SHIFT = 0,
     PLAY_FLAG_STATSCREENPAGE_MASK = PLAY_FLAG_STATSCREENPAGE0 | PLAY_FLAG_STATSCREENPAGE1,
 };
-
-enum
-{
-    WEATHER_NONE,
-
-    WEATHER_SNOW,
-    WEATHER_SNOWSTORM,
-    WEATHER_NIGHT,
-    WEATHER_RAIN,
-    WEATHER_FLAMES,
-    WEATHER_SANDSTORM,
-    WEATHER_CLOUDS,
-};
-
-enum
-{
-    MAP_CURSOR_DEFAULT,
-    MAP_CURSOR_REGULAR,
-    MAP_CURSOR_RED_MOVING,
-    MAP_CURSOR_STRETCHED,
-    MAP_CURSOR_RED_STATIC,
-};
-
-enum
-{
-    L_BMMAIN_INIT,
-    L_BMMAIN_CHANGEPHASE,
-    L_BMMAIN_2,
-    L_BMMAIN_DURINGPHASE,
-    L_BMMAIN_4,
-    L_BMMAIN_5,
-    L_BMMAIN_6,
-    L_BMMAIN_STARTPHASE,
-    L_BMMAIN_8,
-};
-
-struct BmSt
-{
-    /* 00 */ bool8 main_loop_ended;
-    /* 01 */ i8 lock;
-    /* 02 */ i8 lock_display;
-    /* 03 */ u8 pad_03;
-    /* 04 */ u8 flags;
-    /* 05 */ // pad
-    /* 06 */ u16 main_loop_end_scanline;
-    /* 08 */ int pad_08;
-    /* 0C */ struct Vec2i camera;
-    /* 10 */ struct Vec2i camera_previous;
-    /* 14 */ struct Vec2i cursor;
-    /* 18 */ struct Vec2i cursor_previous;
-    /* 1C */ struct Vec2i cursor_sprite_target;
-    /* 20 */ struct Vec2i cursor_sprite;
-    /* 24 */ struct Vec2i map_render_anchor;
-    /* 28 */ struct Vec2i camera_max;
-    /* 2C */ u16 inventory_item_overflow;
-    /* 2E */ u16 convoy_item_overflow;
-    /* 30 */ bool8 unk_30;
-    /* 31 */ bool8 unk_31;
-    /* 32 */ short unk_32;
-    /* 34 */ short unk_34;
-    /* 36 */ i8 unk_36;
-    /* 37 */ i8 unk_37;
-    /* 38 */ u8 alt_blend_a_ca;
-    /* 39 */ u8 alt_blend_a_cb;
-    /* 3A */ u8 alt_blend_b_ca;
-    /* 3B */ u8 alt_blend_b_cb;
-    /* 3C */ u8 just_resumed;
-    /* 3D */ u8 partial_actions_taken;
-    /* 3E */ u8 swap_action_range_count;
-    /* 3F */ i8 unk_3F;
-};
-
-struct PlaySt
-{
-    /* 00 */ u32 time_saved;
-    /* 04 */ u32 time_chapter_started;
-    /* 08 */ int gold; // TODO: is this u32 or i32?
-    /* 0C */ u8 save_id;
-    /* 0D */ u8 vision;
-    /* 0E */ i8 chapter;
-    /* 0F */ u8 faction;
-    /* 10 */ u16 turn;
-    /* 12 */ u8 x_cursor, y_cursor;
-    /* 14 */ u8 flags;
-    /* 15 */ u8 weather;
-    /* 16 */ u16 support_gain;
-    /* 18 */ u8 playthrough_id;
-    /* 19 */ u8 ending_id : 4;
-    /* 19 */ u8 unk_19_4 : 4;
-    /* 1A */ u8 last_sort_id;
-    /* 1B */ u8 unk_1B;
-
-    /* 1C */ // option bits
-    /* bit  0 */ u32 unk_1C_1 : 1;
-    /* bit  1 */ u32 config_terrain_mapui : 1; // TODO: constants
-    /* bit  2 */ u32 config_unit_mapui : 2; // TODO: constants
-    /* bit  4 */ u32 config_no_auto_cursor : 1;
-    /* bit  5 */ u32 config_talk_speed : 2;
-    /* bit  7 */ u32 config_walk_speed : 1;
-    /* bit  8 */ u32 config_bgm_disable : 1;
-    /* bit  9 */ u32 config_se_disable : 1;
-    /* bit 10 */ u32 config_window_theme : 2;
-    /* bit 12 */ u32 unk_1D_5 : 1;
-    /* bit 13 */ u32 unk_1D_6 : 1;
-    /* bit 14 */ u32 config_no_auto_end_turn : 1;
-    /* bit 15 */ u32 config_no_subtitle_help : 1;
-    /* bit 16 */ u32 config_battle_anim : 2;
-    /* bit 18 */ u32 config_battle_preview_kind : 2;
-    /* bit 20 */ u32 unk_1E_5 : 1;
-    /* bit 21 */ u32 unk_1E_6 : 1;
-    /* bit 22 */ u32 debug_control_red : 2;
-    /* bit 24 */ u32 debug_control_green : 2;
-    /* bit 26 */ u32 unk_1F_3 : 6;
-};
-
-void OnVBlank(void);
-void OnMain(void);
-void LockGame(void);
-void UnlockGame(void);
-u8 GetGameLock(void);
-void InitBmBgLayers(void);
-void ApplySystemObjectsGraphics(void);
-void ApplySystemGraphics(void);
-void HandleMapCursorInput(u16 keys);
-void HandleMoveMapCursor(int step);
-void HandleMoveCameraWithMapCursor(int step);
-u16 GetCameraAdjustedX(int x);
-u16 GetCameraAdjustedY(int y);
-u16 GetCameraCenteredX(int x);
-u16 GetCameraCenteredY(int y);
-void PutMapCursor(int x, int y, int kind);
-void SetMapCursorPosition(int x, int y);
-void PutSysArrow(int x, int y, u8 isDown);
-void PutSysAButton(int x, int y, int palid);
-bool CameraMoveWatchPosition(ProcPtr proc, int x, int y);
-bool IsCameraNotWatchingPosition(int x, int y);
-bool CameraMove_08016290(ProcPtr proc);
-void Unused_08016344(int x, int y, int duration);
-int GetActiveMapSong(void);
-void StartMapSongBgm(void);
-
-extern struct ProcScr CONST_DATA ProcScr_BmMain[];
-extern struct ProcScr CONST_DATA ProcScr_CamMove[];
-
-extern struct BmSt EWRAM_DATA gBmSt;
-extern struct PlaySt EWRAM_DATA gPlaySt;
-
-#define SCREEN_TILE_X(x_param) (((x_param) - (gBmSt.camera.x >> 4)) << 1)
-#define SCREEN_TILE_Y(y_param) (((y_param) - (gBmSt.camera.y >> 4)) << 1)
diff --git a/include/bmfx.h b/include/bmfx.h
deleted file mode 100644
index 695c316..0000000
--- a/include/bmfx.h
+++ /dev/null
@@ -1,37 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "proc.h"
-#include "unit.h"
-#include "menu.h"
-
-int func_fe6_0801C160(int xa, int ya, int xb, int yb);
-void StartRescueTransferAnim(struct Unit * unit, int facing, bool arg_2, ProcPtr parent);
-void StartRescueTransferAnimParentless(struct Unit * unit, int facing);
-void StartMapFade(bool locksGame);
-bool IsMapFadeActive(void);
-void HandleGiveUnitItem(struct Unit * unit, int item, ProcPtr parent);
-u32 DiscardItemMenu_InventoryEntry_Display(struct MenuProc * menu, struct MenuEntProc * ent);
-u32 DiscardItemMenu_ExtraEntry_Display(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 DiscardItemMenu_InventoryEntry_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 DiscardItemMenu_ExtraEntry_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-void SetFogVision(int vision);
-void func_fe6_0801C700(struct Unit * actor, struct Unit * target);
-void StartEquipInfoWindow(ProcPtr parent, struct Unit * unit, int x, int y);
-void UpdateEquipInfoWindow(int item_slot);
-void EndEquipInfoWindow(void);
-void func_fe6_0801CF10(ProcPtr parent, struct Unit * unit, int x, int y);
-void MakeActiveMuWatchPosition(int x, int y);
-void StartGasTrapAnim(ProcPtr parent, int x, int y, int facing);
-void StartFireTrapAnim(ProcPtr parent, int x, int y);
-void StartArrowTrapAnim(ProcPtr parent, int x);
-void func_fe6_0801D920(ProcPtr parent, int unused, int trapid);
-void StartPikeTrapAnim(ProcPtr parent, int x, int y, int facing);
-void func_fe6_0801DA54(ProcPtr parent, int icon, char const * str);
-void StartGameOverScreen(ProcPtr parent);
-
-extern struct ProcScr CONST_DATA ProcScr_InitPhaseCursor[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_085C5988[];
-extern struct ProcScr CONST_DATA ProcScr_PhaseIntro[];
-extern struct ProcScr CONST_DATA ProcScr_ChapterIntro[];
diff --git a/include/bmio.h b/include/bmio.h
deleted file mode 100644
index 56bc7a3..0000000
--- a/include/bmio.h
+++ /dev/null
@@ -1,19 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-void StartBmVSync(void);
-void EndBmVSync(void);
-void LockBmDisplay(void);
-void UnlockBmDisplay(void);
-void AllocWeatherParticles(int weather);
-void ApplyFlamesWeatherGradient(void);
-void WeatherInit(void);
-void WeatherVBlank(void);
-void WeatherUpdate(void);
-void DisableTilesetPalAnim(void);
-void EnableTilesetPalAnim(void);
-void SetWeather(int weather);
-
-extern struct ProcScr CONST_DATA ProcScr_BmVSync[];
-extern struct ProcScr CONST_DATA ProcScr_MapTask[];
diff --git a/include/chapter.h b/include/chapter.h
deleted file mode 100644
index 442c47a..0000000
--- a/include/chapter.h
+++ /dev/null
@@ -1,18 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-int GetTextPrintDelay(void);
-int IsFirstPlaythrough(void);
-void InitPlayConfig(int is_hard);
-void ResetBmSt(void);
-void StartChapter(struct GenericProc * parent);
-void func_fe6_08029084(void);
-void ResumeChapterFromSuspend(struct GenericProc * parent);
-void func_fe6_08029240(void);
-void func_fe6_080292B8(void);
-void InitBmDisplay(void);
-ProcPtr StartMapMain(struct GenericProc * parent);
-void EndMapMain(void);
-void CleanupUnitsBeforeChapter(void);
-void func_fe6_08029654(void);
diff --git a/include/chapterevents.h b/include/chapterevents.h
deleted file mode 100644
index 41c2879..0000000
--- a/include/chapterevents.h
+++ /dev/null
@@ -1,560 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "proc.h"
-#include "event.h"
-
-// TODO: move (eventfunctions)
-struct UnkTrapEnt
-{
-    int delay;
-    int interval;
-};
-
-extern struct BattleTalkEnt CONST_DATA gBattleDefeatTalkList[];
-
-extern u16 CONST_DATA ShopItems_Chapter2_Vendor[];
-extern u16 CONST_DATA ShopItems_Chapter2_Armory[];
-extern u16 CONST_DATA ShopItems_Chapter4_Vendor[];
-extern u16 CONST_DATA ShopItems_Chapter4_Armory[];
-extern u16 CONST_DATA ShopItems_Chapter5_Vendor[];
-extern u16 CONST_DATA ShopItems_Unk_0866A84E[];
-extern u16 CONST_DATA ShopItems_Unk_0866A85E[];
-extern u16 CONST_DATA ShopItems_Unk_0866A86C[];
-extern u16 CONST_DATA ShopItems_Unk_0866A87C[];
-extern u16 CONST_DATA ShopItems_Unk_0866A890[];
-extern u16 CONST_DATA ShopItems_Unk_0866A8A0[];
-extern u16 CONST_DATA ShopItems_Unk_0866A8B8[];
-extern u16 CONST_DATA ShopItems_Unk_0866A8CA[];
-extern u16 CONST_DATA ShopItems_Unk_0866A8E0[];
-extern u16 CONST_DATA ShopItems_Unk_0866A8F8[];
-extern u16 CONST_DATA ShopItems_Unk_0866A904[];
-extern u16 CONST_DATA ShopItems_Unk_0866A918[];
-extern u16 CONST_DATA ShopItems_Unk_0866A92A[];
-extern u16 CONST_DATA ShopItems_Unk_0866A93A[];
-extern u16 CONST_DATA ShopItems_Unk_0866A956[];
-extern u16 CONST_DATA ShopItems_Unk_0866A96A[];
-extern u16 CONST_DATA ShopItems_Unk_0866A98A[];
-extern u16 CONST_DATA ShopItems_Unk_0866A99E[];
-extern u16 CONST_DATA ShopItems_Unk_0866A9B0[];
-extern u16 CONST_DATA ShopItems_Unk_0866A9C8[];
-extern u16 CONST_DATA ShopItems_Unk_0866A9EC[];
-extern u16 CONST_DATA ShopItems_Unk_0866AA12[];
-extern u16 CONST_DATA ShopItems_Unk_0866AA2A[];
-extern u16 CONST_DATA ShopItems_Unk_0866AA3C[];
-extern u16 CONST_DATA ShopItems_Chapter10B_Armory[];
-extern u16 CONST_DATA ShopItems_Unk_0866AA64[];
-extern u16 CONST_DATA ShopItems_Unk_0866AA76[];
-extern u16 CONST_DATA ShopItems_Unk_0866AA98[];
-extern u16 CONST_DATA ShopItems_Unk_0866AAB0[];
-extern u16 CONST_DATA ShopItems_Unk_0866AAC4[];
-extern u16 CONST_DATA ShopItems_Unk_0866AAE4[];
-
-extern EventScr CONST_DATA EventScr_RoyDefeated[];
-extern EventScr CONST_DATA EventScr_CathTalk[];
-extern EventScr CONST_DATA EventScr_GameOver[];
-
-extern u16 CONST_DATA Sprite_0866ACCC[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_0866ACE8[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_0866AD00[];
-extern EventScr CONST_DATA EventScr_Unk_0866AD18[];
-extern EventScr CONST_DATA EventScr_Unk_0866AD78[];
-extern EventScr CONST_DATA EventScr_Unk_0866ADE4[];
-extern EventScr CONST_DATA EventScr_Unk_0866AE10[];
-extern EventScr CONST_DATA EventScr_Unk_0866AE60[];
-extern EventScr CONST_DATA EventScr_Unk_0866AE78[];
-extern EventScr CONST_DATA EventScr_Unk_0866AE90[];
-extern EventScr CONST_DATA gUnk_0866AEA8[];
-extern EventScr CONST_DATA gUnk_0866AEE0[];
-extern EventScr CONST_DATA gUnk_0866AF28[];
-extern EventScr CONST_DATA gUnk_0866AF5C[];
-extern EventScr CONST_DATA gUnk_0866AFEC[];
-extern EventScr CONST_DATA gUnk_0866B07C[];
-extern EventScr CONST_DATA gUnk_0866B10C[];
-extern EventScr CONST_DATA EventScr_Unk_0866B14C[];
-extern EventScr CONST_DATA EventScr_Unk_0866B2E4[];
-extern EventScr CONST_DATA EventScr_Unk_0866B2FC[];
-extern EventScr CONST_DATA EventScr_Unk_0866B350[];
-extern EventScr CONST_DATA EventScr_Unk_0866B5A0[];
-
-extern EventScr CONST_DATA EventScr_Chapter1_Opening[];
-extern EventScr CONST_DATA EventScr_Chapter1_FirstRedTurn[];
-extern EventScr CONST_DATA EventScr_Chapter1_UnusedTalk[];
-extern EventScr CONST_DATA EventScr_Chapter1_Village[];
-extern EventScr CONST_DATA EventScr_Chapter1_TopVillageDummy[];
-extern EventScr CONST_DATA EventScr_Chapter1_HouseA[];
-extern EventScr CONST_DATA EventScr_Chapter1_HouseB[];
-extern EventScr CONST_DATA EventScr_Chapter1_HouseC[];
-extern EventScr CONST_DATA EventScr_Chapter1_HouseUnused[];
-extern EventScr CONST_DATA EventScr_Chapter1_Victory[];
-
-extern u8 CONST_DATA MoveScr_Chapter2_ElenA[];
-extern u8 CONST_DATA MoveScr_Chapter2_ElenB[];
-extern EventScr CONST_DATA EventScr_Chapter2_Opening[];
-extern EventScr CONST_DATA EventScr_Chapter2_DieckComes[];
-extern EventScr CONST_DATA EventScr_Chapter2_DieckTalk[];
-extern EventScr CONST_DATA EventScr_Chapter2_VillageUnused[];
-extern EventScr CONST_DATA EventScr_Chapter2_Village[];
-extern EventScr CONST_DATA EventScr_Chapter2_HouseA[];
-extern EventScr CONST_DATA EventScr_Chapter2_HouseB[];
-extern EventScr CONST_DATA EventScr_Chapter2_HouseC[];
-extern EventScr CONST_DATA EventScr_Chapter2_Victory[];
-
-extern EventScr CONST_DATA EventScr_Chapter3_Opening[];
-extern EventScr CONST_DATA EventScr_Chapter3_OrphanageCutscene[];
-extern EventScr CONST_DATA EventScr_Chapter3_ZephielScene[];
-extern EventScr CONST_DATA EventScr_Chapter3_ChadLughTalk[];
-extern EventScr CONST_DATA EventScr_Chapter3_TopVillage[];
-extern EventScr CONST_DATA EventScr_Chapter3_BottomVillage[];
-extern EventScr CONST_DATA EventScr_Chapter3_Victory[];
-
-extern EventScr CONST_DATA EventScr_Chapter4_Opening[];
-extern EventScr CONST_DATA EventScr_Chapter4_IntroducePirates[];
-extern EventScr CONST_DATA EventScr_Chapter4_ForeshadowClarine[];
-extern EventScr CONST_DATA EventScr_Chapter4_ClarineComes[];
-extern EventScr CONST_DATA EventScr_Chapter4_RutgerComes[];
-extern EventScr CONST_DATA EventScr_Chapter4_ForeshadowRutger[];
-extern EventScr CONST_DATA EventScr_Chapter4_UnusedCavalierReinforcements[];
-extern EventScr CONST_DATA EventScr_Chapter4_RecruitClarine[];
-extern EventScr CONST_DATA EventScr_Chapter4_RefreshClarine[];
-extern EventScr CONST_DATA EventScr_Chapter4_RecruitRutger[];
-extern EventScr CONST_DATA EventScr_Chapter4_TopRightVillage[];
-extern EventScr CONST_DATA EventScr_Chapter4_NorthVillage[];
-extern EventScr CONST_DATA EventScr_Chapter4_SouthVillage[];
-extern EventScr CONST_DATA EventScr_Chapter4_HouseA[];
-extern EventScr CONST_DATA EventScr_Chapter4_HouseB[];
-extern EventScr CONST_DATA EventScr_Chapter4_HouseC[];
-extern EventScr CONST_DATA EventScr_Chapter4_Victory[];
-
-extern EventScr CONST_DATA EventScr_Chapter5_Opening[];
-extern EventScr CONST_DATA EventScr_Chapter5_SaulDorothyScene[];
-extern EventScr CONST_DATA EventScr_Chapter5_OpenBarrier[];
-extern EventScr CONST_DATA EventScr_Chapter5_Village[];
-extern EventScr CONST_DATA EventScr_Chapter5_HouseA[];
-extern EventScr CONST_DATA EventScr_Chapter5_HouseB[];
-extern EventScr CONST_DATA EventScr_Chapter5_HouseC[];
-extern EventScr CONST_DATA EventScr_Chapter5_Victory[];
-
-extern EventScr CONST_DATA EventScr_Unk_0866CB34[];
-extern EventScr CONST_DATA EventScr_Unk_0866CC5C[];
-extern EventScr CONST_DATA EventScr_Unk_0866CC9C[];
-extern EventScr CONST_DATA EventScr_Unk_0866CCDC[];
-extern EventScr CONST_DATA EventScr_Unk_0866CD08[];
-extern EventScr CONST_DATA EventScr_Unk_0866CD4C[];
-extern EventScr CONST_DATA EventScr_Unk_0866CD6C[];
-extern EventScr CONST_DATA EventScr_Unk_0866CD98[];
-extern EventScr CONST_DATA EventScr_Unk_0866CDB0[];
-extern EventScr CONST_DATA EventScr_Unk_0866CDC8[];
-
-extern u8 CONST_DATA MoveScr_Unk_0866CE60[];
-extern EventScr CONST_DATA EventScr_Unk_0866CE68[];
-extern EventScr CONST_DATA EventScr_Unk_0866CF6C[];
-extern EventScr CONST_DATA EventScr_Unk_0866CF90[];
-extern EventScr CONST_DATA EventScr_Unk_0866CFD4[];
-extern EventScr CONST_DATA EventScr_Unk_0866D068[];
-extern EventScr CONST_DATA EventScr_Unk_0866D0A8[];
-extern EventScr CONST_DATA EventScr_Unk_0866D0D0[];
-extern EventScr CONST_DATA EventScr_Unk_0866D0F8[];
-extern EventScr CONST_DATA EventScr_Unk_0866D124[];
-extern EventScr CONST_DATA EventScr_Unk_0866D150[];
-extern EventScr CONST_DATA EventScr_Unk_0866D17C[];
-extern EventScr CONST_DATA EventScr_Unk_0866D1A8[];
-extern EventScr CONST_DATA EventScr_Unk_0866D1D4[];
-extern EventScr CONST_DATA EventScr_Unk_0866D208[];
-extern EventScr CONST_DATA EventScr_Unk_0866D23C[];
-extern EventScr CONST_DATA EventScr_Unk_0866D258[];
-extern EventScr CONST_DATA EventScr_Unk_0866D2A0[];
-extern EventScr CONST_DATA EventScr_Unk_0866D2E8[];
-extern EventScr CONST_DATA EventScr_Unk_0866D330[];
-extern EventScr CONST_DATA EventScr_Unk_0866D378[];
-extern EventScr CONST_DATA EventScr_Unk_0866D3C0[];
-extern EventScr CONST_DATA EventScr_Unk_0866D408[];
-extern EventScr CONST_DATA EventScr_Unk_0866D450[];
-extern EventScr CONST_DATA EventScr_Unk_0866D498[];
-
-extern u8 CONST_DATA MoveScr_Unk_0866D4FC[];
-extern u8 CONST_DATA MoveScr_Unk_0866D50D[];
-extern EventScr CONST_DATA EventScr_Unk_0866D528[];
-extern EventScr CONST_DATA EventScr_Unk_0866D5E4[];
-extern EventScr CONST_DATA EventScr_Unk_0866D62C[];
-extern EventScr CONST_DATA EventScr_Unk_0866D658[];
-extern EventScr CONST_DATA EventScr_Unk_0866D6AC[];
-extern EventScr CONST_DATA EventScr_Unk_0866D6C0[];
-extern EventScr CONST_DATA EventScr_Unk_0866D6EC[];
-extern EventScr CONST_DATA EventScr_Unk_0866D700[];
-extern EventScr CONST_DATA EventScr_Unk_0866D714[];
-extern EventScr CONST_DATA EventScr_Unk_0866D728[];
-extern EventScr CONST_DATA EventScr_Unk_0866D764[];
-extern EventScr CONST_DATA EventScr_Unk_0866D7A0[];
-extern EventScr CONST_DATA EventScr_Unk_0866D7DC[];
-extern EventScr CONST_DATA EventScr_Unk_0866D818[];
-
-extern EventScr CONST_DATA EventScr_Unk_0866DB60[];
-extern EventScr CONST_DATA EventScr_Unk_0866DC2C[];
-extern EventScr CONST_DATA EventScr_Unk_0866DCF0[];
-extern EventScr CONST_DATA EventScr_Unk_0866DD04[];
-extern EventScr CONST_DATA EventScr_Unk_0866DD30[];
-extern EventScr CONST_DATA EventScr_Unk_0866DD5C[];
-extern EventScr CONST_DATA EventScr_Unk_0866DDA4[];
-extern EventScr CONST_DATA EventScr_Unk_0866DDF4[];
-extern EventScr CONST_DATA EventScr_Unk_0866DE44[];
-extern EventScr CONST_DATA EventScr_Unk_0866DE80[];
-extern EventScr CONST_DATA EventScr_Unk_0866DEBC[];
-extern EventScr CONST_DATA EventScr_Unk_0866DEF8[];
-extern EventScr CONST_DATA EventScr_Unk_0866DF34[];
-
-extern EventScr CONST_DATA EventScr_Unk_0866E00C[];
-extern EventScr CONST_DATA EventScr_Unk_0866E0AC[];
-extern EventScr CONST_DATA EventScr_Unk_0866E11C[];
-extern EventScr CONST_DATA EventScr_Unk_0866E178[];
-extern EventScr CONST_DATA EventScr_Unk_0866E1A4[];
-extern EventScr CONST_DATA EventScr_Unk_0866E1D0[];
-extern EventScr CONST_DATA EventScr_Unk_0866E1FC[];
-extern EventScr CONST_DATA EventScr_Unk_0866E228[];
-extern EventScr CONST_DATA EventScr_Unk_0866E270[];
-extern EventScr CONST_DATA EventScr_Unk_0866E2AC[];
-
-extern EventScr CONST_DATA EventScr_Unk_0866E314[];
-extern EventScr CONST_DATA EventScr_Unk_0866E418[];
-extern EventScr CONST_DATA EventScr_Unk_0866E488[];
-extern EventScr CONST_DATA EventScr_Unk_0866E4D4[];
-extern EventScr CONST_DATA EventScr_Unk_0866E544[];
-extern EventScr CONST_DATA EventScr_Unk_0866E5A0[];
-extern EventScr CONST_DATA EventScr_Unk_0866E5DC[];
-extern EventScr CONST_DATA EventScr_Unk_0866E64C[];
-extern EventScr CONST_DATA EventScr_Unk_0866E684[];
-extern EventScr CONST_DATA EventScr_Unk_0866E6EC[];
-extern EventScr CONST_DATA EventScr_Unk_0866E720[];
-extern EventScr CONST_DATA EventScr_Unk_0866E788[];
-extern EventScr CONST_DATA EventScr_Unk_0866E7BC[];
-extern EventScr CONST_DATA EventScr_Unk_0866E808[];
-extern EventScr CONST_DATA EventScr_Unk_0866E824[];
-extern EventScr CONST_DATA EventScr_Unk_0866E870[];
-extern EventScr CONST_DATA EventScr_Unk_0866E8B4[];
-extern EventScr CONST_DATA EventScr_Unk_0866E900[];
-extern EventScr CONST_DATA EventScr_Unk_0866E94C[];
-extern EventScr CONST_DATA EventScr_Unk_0866E984[];
-extern EventScr CONST_DATA EventScr_Unk_0866E9CC[];
-extern EventScr CONST_DATA EventScr_Unk_0866EA14[];
-extern EventScr CONST_DATA EventScr_Unk_0866EA5C[];
-extern EventScr CONST_DATA EventScr_Unk_0866EAA4[];
-extern EventScr CONST_DATA EventScr_Unk_0866EAEC[];
-extern EventScr CONST_DATA EventScr_Unk_0866EB34[];
-extern EventScr CONST_DATA EventScr_Unk_0866EB7C[];
-extern EventScr CONST_DATA EventScr_Unk_0866EBC4[];
-
-extern EventScr CONST_DATA EventScr_Unk_0866EDE8[];
-extern EventScr CONST_DATA EventScr_Unk_0866EF30[];
-extern EventScr CONST_DATA EventScr_Unk_0866EFF8[];
-extern EventScr CONST_DATA EventScr_Unk_0866F044[];
-extern EventScr CONST_DATA EventScr_Unk_0866F078[];
-extern EventScr CONST_DATA EventScr_Unk_0866F0DC[];
-extern EventScr CONST_DATA EventScr_Unk_0866F114[];
-extern EventScr CONST_DATA EventScr_Unk_0866F148[];
-extern EventScr CONST_DATA EventScr_Unk_0866F17C[];
-extern EventScr CONST_DATA EventScr_Unk_0866F198[];
-extern EventScr CONST_DATA EventScr_Unk_0866F1B4[];
-
-extern EventScr CONST_DATA EventScr_Unk_0866F2C4[];
-extern EventScr CONST_DATA EventScr_Unk_0866F3B0[];
-extern EventScr CONST_DATA EventScr_Unk_0866F428[];
-extern EventScr CONST_DATA EventScr_Unk_0866F454[];
-extern EventScr CONST_DATA EventScr_Unk_0866F4A4[];
-extern EventScr CONST_DATA EventScr_Unk_0866F5A8[];
-extern EventScr CONST_DATA EventScr_Unk_0866F628[];
-extern EventScr CONST_DATA EventScr_Unk_0866F6C4[];
-extern EventScr CONST_DATA EventScr_Unk_0866F710[];
-extern EventScr CONST_DATA EventScr_Unk_0866F7B0[];
-extern EventScr CONST_DATA EventScr_Unk_0866F888[];
-extern EventScr CONST_DATA EventScr_Unk_0866F8A8[];
-extern EventScr CONST_DATA EventScr_Unk_0866F8C8[];
-extern EventScr CONST_DATA EventScr_Unk_0866F944[];
-extern EventScr CONST_DATA EventScr_Unk_0866F9C0[];
-extern EventScr CONST_DATA EventScr_Unk_0866FA08[];
-extern EventScr CONST_DATA EventScr_Unk_0866FA50[];
-extern EventScr CONST_DATA EventScr_Unk_0866FA8C[];
-extern EventScr CONST_DATA EventScr_Unk_0866FAC8[];
-extern EventScr CONST_DATA EventScr_Unk_0866FB04[];
-
-extern EventScr CONST_DATA EventScr_Unk_0866FC0C[];
-extern EventScr CONST_DATA EventScr_Unk_0866FCD0[];
-extern EventScr CONST_DATA EventScr_Unk_0866FD28[];
-extern EventScr CONST_DATA EventScr_Unk_0866FDA4[];
-extern EventScr CONST_DATA EventScr_Unk_0866FDE0[];
-extern EventScr CONST_DATA EventScr_Unk_0866FE1C[];
-extern EventScr CONST_DATA EventScr_Unk_0866FE5C[];
-extern EventScr CONST_DATA EventScr_Unk_0866FE9C[];
-extern EventScr CONST_DATA EventScr_Unk_0866FEDC[];
-extern EventScr CONST_DATA EventScr_Unk_0866FF1C[];
-extern EventScr CONST_DATA EventScr_Unk_0866FF5C[];
-extern EventScr CONST_DATA EventScr_Unk_0866FF9C[];
-extern EventScr CONST_DATA EventScr_Unk_0866FFDC[];
-extern EventScr CONST_DATA EventScr_Unk_08670030[];
-
-extern EventScr CONST_DATA EventScr_Unk_08670108[];
-extern EventScr CONST_DATA EventScr_Unk_0867023C[];
-extern EventScr CONST_DATA EventScr_Unk_0867026C[];
-extern EventScr CONST_DATA EventScr_Unk_086702D4[];
-extern EventScr CONST_DATA EventScr_Unk_086702FC[];
-extern EventScr CONST_DATA EventScr_Unk_08670348[];
-extern EventScr CONST_DATA EventScr_Unk_08670394[];
-extern EventScr CONST_DATA EventScr_Unk_086703C0[];
-extern EventScr CONST_DATA EventScr_Unk_086703DC[];
-extern EventScr CONST_DATA EventScr_Unk_08670424[];
-extern EventScr CONST_DATA EventScr_Unk_0867046C[];
-extern EventScr CONST_DATA EventScr_Unk_086704A8[];
-extern EventScr CONST_DATA EventScr_Unk_086704E4[];
-
-extern EventScr CONST_DATA EventScr_Unk_086705D8[];
-extern EventScr CONST_DATA EventScr_Unk_0867074C[];
-extern EventScr CONST_DATA EventScr_Unk_08670800[];
-extern EventScr CONST_DATA EventScr_Unk_0867083C[];
-extern EventScr CONST_DATA EventScr_Unk_08670890[];
-extern EventScr CONST_DATA EventScr_Unk_08670A28[];
-extern EventScr CONST_DATA EventScr_Unk_08670A48[];
-extern EventScr CONST_DATA EventScr_Unk_08670A68[];
-extern EventScr CONST_DATA EventScr_Unk_08670A94[];
-extern EventScr CONST_DATA EventScr_Unk_08670AB4[];
-extern EventScr CONST_DATA EventScr_Unk_08670AD4[];
-extern EventScr CONST_DATA EventScr_Unk_08670AF4[];
-
-extern EventScr CONST_DATA EventScr_Unk_08670BF0[];
-extern EventScr CONST_DATA EventScr_Unk_08670D34[];
-extern EventScr CONST_DATA EventScr_Unk_08670D3C[];
-extern EventScr CONST_DATA EventScr_Unk_08670D44[];
-extern EventScr CONST_DATA EventScr_Unk_08670DB4[];
-extern EventScr CONST_DATA EventScr_Unk_08670DFC[];
-extern EventScr CONST_DATA EventScr_Unk_08670E38[];
-extern EventScr CONST_DATA EventScr_Unk_08670E74[];
-
-extern EventScr CONST_DATA EventScr_Unk_08670ECC[];
-extern EventScr CONST_DATA EventScr_Unk_08670F64[];
-extern EventScr CONST_DATA EventScr_Unk_08671114[];
-extern EventScr CONST_DATA EventScr_Unk_0867115C[];
-extern EventScr CONST_DATA EventScr_Unk_086711A4[];
-extern EventScr CONST_DATA EventScr_Unk_086711EC[];
-extern EventScr CONST_DATA EventScr_Unk_08671228[];
-extern EventScr CONST_DATA EventScr_Unk_08671264[];
-extern EventScr CONST_DATA EventScr_Unk_086712A0[];
-extern EventScr CONST_DATA EventScr_Unk_086712DC[];
-
-extern EventScr CONST_DATA EventScr_Unk_08671340[];
-extern EventScr CONST_DATA EventScr_Unk_086713D4[];
-extern EventScr CONST_DATA EventScr_Unk_08671434[];
-extern EventScr CONST_DATA EventScr_Unk_08671460[];
-extern EventScr CONST_DATA EventScr_Unk_086714A8[];
-extern EventScr CONST_DATA EventScr_Unk_086714F0[];
-extern EventScr CONST_DATA EventScr_Unk_0867152C[];
-extern EventScr CONST_DATA EventScr_Unk_08671568[];
-extern EventScr CONST_DATA EventScr_Unk_086715A4[];
-extern EventScr CONST_DATA EventScr_Unk_086715E0[];
-
-extern EventScr CONST_DATA EventScr_Unk_08671690[];
-extern EventScr CONST_DATA EventScr_Unk_086717A0[];
-extern EventScr CONST_DATA EventScr_Unk_08671800[];
-extern EventScr CONST_DATA EventScr_Unk_08671834[];
-extern EventScr CONST_DATA EventScr_Unk_086718B0[];
-extern EventScr CONST_DATA EventScr_Unk_086718EC[];
-extern EventScr CONST_DATA EventScr_Unk_08671928[];
-extern EventScr CONST_DATA EventScr_Unk_08671964[];
-extern EventScr CONST_DATA EventScr_Unk_08671980[];
-extern EventScr CONST_DATA EventScr_Unk_0867199C[];
-extern EventScr CONST_DATA EventScr_Unk_086719B8[];
-
-extern EventScr CONST_DATA EventScr_Unk_08671B48[];
-extern EventScr CONST_DATA EventScr_Unk_08671C4C[];
-extern EventScr CONST_DATA EventScr_Unk_08671CA8[];
-extern EventScr CONST_DATA EventScr_Unk_08671D34[];
-extern EventScr CONST_DATA EventScr_Unk_08671DC0[];
-extern EventScr CONST_DATA EventScr_Unk_08671DD4[];
-extern EventScr CONST_DATA EventScr_Unk_08671E6C[];
-extern EventScr CONST_DATA EventScr_Unk_08671EA0[];
-extern EventScr CONST_DATA EventScr_Unk_08671EC0[];
-extern EventScr CONST_DATA EventScr_Unk_08671EE0[];
-extern EventScr CONST_DATA EventScr_Unk_08671EF4[];
-extern EventScr CONST_DATA EventScr_Unk_08671F08[];
-extern EventScr CONST_DATA EventScr_Unk_08671F50[];
-
-extern EventScr CONST_DATA EventScr_Unk_086720EC[];
-extern EventScr CONST_DATA EventScr_Unk_086721F4[];
-extern EventScr CONST_DATA EventScr_Unk_08672260[];
-extern EventScr CONST_DATA EventScr_Unk_086722EC[];
-extern EventScr CONST_DATA EventScr_Unk_08672378[];
-extern EventScr CONST_DATA EventScr_Unk_08672430[];
-extern u8 CONST_DATA gUnk_08672458[];
-extern EventScr CONST_DATA EventScr_Unk_08672464[];
-
-extern EventScr CONST_DATA EventScr_Unk_08672560[];
-extern EventScr CONST_DATA EventScr_Unk_08672638[];
-extern EventScr CONST_DATA EventScr_Unk_08672684[];
-extern EventScr CONST_DATA EventScr_Unk_0867276C[];
-extern EventScr CONST_DATA EventScr_Unk_08672788[];
-extern EventScr CONST_DATA EventScr_Unk_086727A4[];
-extern EventScr CONST_DATA EventScr_Unk_086727C0[];
-
-extern EventScr CONST_DATA EventScr_Unk_08672818[];
-extern EventScr CONST_DATA EventScr_Unk_08672874[];
-extern EventScr CONST_DATA EventScr_Unk_08672890[];
-extern EventScr CONST_DATA EventScr_Unk_086728AC[];
-extern EventScr CONST_DATA EventScr_Unk_086728C8[];
-extern EventScr CONST_DATA EventScr_Unk_086728E4[];
-extern EventScr CONST_DATA EventScr_Unk_08672900[];
-extern EventScr CONST_DATA EventScr_Unk_0867291C[];
-extern EventScr CONST_DATA EventScr_Unk_0867296C[];
-extern EventScr CONST_DATA EventScr_Unk_086729BC[];
-extern EventScr CONST_DATA EventScr_Unk_08672A0C[];
-extern EventScr CONST_DATA EventScr_Unk_08672A5C[];
-extern EventScr CONST_DATA EventScr_Unk_08672AAC[];
-extern EventScr CONST_DATA EventScr_Unk_08672AFC[];
-extern EventScr CONST_DATA EventScr_Unk_08672B28[];
-
-extern EventScr CONST_DATA EventScr_Unk_08672BE4[];
-extern EventScr CONST_DATA EventScr_Unk_08672D10[];
-extern EventScr CONST_DATA EventScr_Unk_08672DB4[];
-extern EventScr CONST_DATA EventScr_Unk_08672DE0[];
-extern EventScr CONST_DATA EventScr_Unk_08672E0C[];
-
-extern EventScr CONST_DATA EventScr_Unk_08672E40[];
-extern EventScr CONST_DATA EventScr_Unk_08672ED8[];
-extern EventScr CONST_DATA EventScr_Unk_08672F64[];
-extern EventScr CONST_DATA EventScr_Unk_08672FB4[];
-extern EventScr CONST_DATA EventScr_Unk_08673000[];
-extern EventScr CONST_DATA EventScr_Chapter10B_KleinSquadArrives[];
-extern EventScr CONST_DATA EventScr_Chapter10B_TheaSquadArrives[];
-extern EventScr CONST_DATA EventScr_Unk_086730F4[];
-extern EventScr CONST_DATA EventScr_Unk_0867315C[];
-extern EventScr CONST_DATA EventScr_Unk_08673190[];
-extern EventScr CONST_DATA EventScr_Unk_086731F8[];
-extern EventScr CONST_DATA EventScr_Chapter10B_LilinaRecruitsGonzalez[];
-extern EventScr CONST_DATA EventScr_Chapter10B_TalkTheaShanna[];
-extern EventScr CONST_DATA EventScr_Chapter10B_RoyRecruitsKlein[];
-extern EventScr CONST_DATA EventScr_Chapter10B_ClarineRecruitsKlein[];
-extern EventScr CONST_DATA EventScr_Chapter10B_ShannaRecruitsThea[];
-extern EventScr CONST_DATA EventScr_Chapter10B_KleinRecruitsThea[];
-extern EventScr CONST_DATA EventScr_Chapter10B_TalkTheaShannaAfterKlein[];
-extern EventScr CONST_DATA EventScr_TalkKleinClarine[];
-extern EventScr CONST_DATA EventScr_Chapter10B_VillageA[];
-extern EventScr CONST_DATA EventScr_Chapter10B_VillageB[];
-extern EventScr CONST_DATA EventScr_Chapter10B_VillageC[];
-extern EventScr CONST_DATA EventScr_Chapter10B_VillageD[];
-extern EventScr CONST_DATA EventScr_Chapter10B_VillageE[];
-extern EventScr CONST_DATA EventScr_Chapter10B_VillageF[];
-extern EventScr CONST_DATA EventScr_Chapter10B_VillageG[];
-extern EventScr CONST_DATA EventScr_Chapter10B_Victory[];
-
-extern EventScr CONST_DATA EventScr_Unk_0867389C[];
-extern EventScr CONST_DATA EventScr_Unk_08673998[];
-extern EventScr CONST_DATA EventScr_Unk_086739C0[];
-extern EventScr CONST_DATA EventScr_Unk_08673A24[];
-extern EventScr CONST_DATA EventScr_Unk_08673A88[];
-extern EventScr CONST_DATA EventScr_Unk_08673AB0[];
-extern EventScr CONST_DATA EventScr_Unk_08673AD8[];
-extern EventScr CONST_DATA EventScr_Unk_08673B00[];
-extern EventScr CONST_DATA EventScr_Unk_08673B14[];
-extern EventScr CONST_DATA EventScr_Unk_08673B48[];
-extern EventScr CONST_DATA EventScr_Unk_08673B84[];
-extern EventScr CONST_DATA EventScr_Unk_08673BB0[];
-extern EventScr CONST_DATA EventScr_Unk_08673BF8[];
-
-extern EventScr CONST_DATA EventScr_Unk_08673CE8[];
-extern EventScr CONST_DATA EventScr_Unk_08673DBC[];
-extern EventScr CONST_DATA EventScr_Unk_08673DC4[];
-extern EventScr CONST_DATA EventScr_Unk_08673E0C[];
-extern EventScr CONST_DATA EventScr_Unk_08673E54[];
-extern EventScr CONST_DATA EventScr_Unk_08673E90[];
-extern EventScr CONST_DATA EventScr_Unk_08673ECC[];
-
-extern EventScr CONST_DATA EventScr_Unk_08673F24[];
-extern EventScr CONST_DATA EventScr_Unk_08673FB0[];
-extern EventScr CONST_DATA EventScr_Unk_08673FD4[];
-extern EventScr CONST_DATA EventScr_Unk_086741D8[];
-extern EventScr CONST_DATA EventScr_Unk_08674214[];
-extern EventScr CONST_DATA EventScr_Unk_08674250[];
-extern EventScr CONST_DATA EventScr_Unk_0867428C[];
-extern EventScr CONST_DATA EventScr_Unk_086742C8[];
-
-extern EventScr CONST_DATA EventScr_Unk_08674358[];
-extern EventScr CONST_DATA EventScr_Unk_086743E4[];
-extern EventScr CONST_DATA EventScr_Unk_08674430[];
-extern EventScr CONST_DATA EventScr_Unk_08674458[];
-extern EventScr CONST_DATA EventScr_Unk_086744C0[];
-extern EventScr CONST_DATA EventScr_Unk_086744F4[];
-extern EventScr CONST_DATA EventScr_Unk_08674564[];
-extern EventScr CONST_DATA EventScr_Unk_086745CC[];
-extern EventScr CONST_DATA EventScr_Unk_08674604[];
-extern EventScr CONST_DATA EventScr_Unk_0867464C[];
-extern EventScr CONST_DATA EventScr_Unk_08674694[];
-extern EventScr CONST_DATA EventScr_Unk_086746DC[];
-extern EventScr CONST_DATA EventScr_Unk_08674724[];
-extern EventScr CONST_DATA EventScr_Unk_0867476C[];
-
-extern EventScr CONST_DATA EventScr_Unk_086747D0[];
-extern EventScr CONST_DATA EventScr_Unk_08674880[];
-extern EventScr CONST_DATA EventScr_Unk_086748C8[];
-extern EventScr CONST_DATA EventScr_Unk_086748E8[];
-extern EventScr CONST_DATA EventScr_Unk_08674934[];
-extern EventScr CONST_DATA EventScr_Unk_08674970[];
-extern EventScr CONST_DATA EventScr_Unk_086749A4[];
-extern EventScr CONST_DATA EventScr_Unk_086749D8[];
-extern EventScr CONST_DATA EventScr_Unk_086749F4[];
-extern EventScr CONST_DATA EventScr_Unk_08674A10[];
-
-extern u8 CONST_DATA MoveScr_Unk_08674B10[];
-extern u8 CONST_DATA MoveScr_Unk_08674B22[];
-extern EventScr CONST_DATA EventScr_Unk_08674B2C[];
-extern EventScr CONST_DATA EventScr_Unk_08674BB0[];
-
-extern EventScr CONST_DATA EventScr_Unk_08674F00[];
-extern EventScr CONST_DATA EventScr_Unk_08674F84[];
-
-extern struct UnkTrapEnt CONST_DATA gUnk_0867507C[26];
-extern EventScr CONST_DATA EventScr_Unk_0867514C[];
-extern EventScr CONST_DATA EventScr_Unk_086751E8[];
-
-extern EventScr CONST_DATA EventScr_Unk_08675324[];
-extern EventScr CONST_DATA EventScr_Unk_086753E0[];
-extern EventScr CONST_DATA EventScr_Unk_08675410[];
-
-extern EventScr CONST_DATA EventScr_Unk_0867557C[];
-extern EventScr CONST_DATA EventScr_Unk_086756A8[];
-
-extern u32 CONST_DATA gUnk_08675750[6];
-extern EventScr CONST_DATA EventScr_Unk_08675768[];
-extern EventScr CONST_DATA EventScr_Unk_086758D4[];
-extern EventScr CONST_DATA EventScr_Unk_0867592C[];
-extern EventScr CONST_DATA EventScr_Unk_08675984[];
-extern EventScr CONST_DATA EventScr_Unk_086759DC[];
-extern EventScr CONST_DATA EventScr_Unk_08675A34[];
-extern EventScr CONST_DATA EventScr_Unk_08675A8C[];
-extern EventScr CONST_DATA EventScr_Unk_08675AE4[];
-
-extern u32 CONST_DATA gUnk_08675B90[6];
-extern EventScr CONST_DATA EventScr_Unk_08675BA8[];
-extern EventScr CONST_DATA EventScr_Unk_08675CF4[];
-extern EventScr CONST_DATA EventScr_Unk_08675D38[];
-extern EventScr CONST_DATA EventScr_Unk_08675D7C[];
-extern EventScr CONST_DATA EventScr_Unk_08675DC0[];
-extern EventScr CONST_DATA EventScr_Unk_08675E04[];
-extern EventScr CONST_DATA EventScr_Unk_08675E48[];
-extern EventScr CONST_DATA EventScr_Unk_08675E8C[];
-
-extern EventScr CONST_DATA EventScr_Unk_08675FF0[];
-extern EventScr CONST_DATA EventScr_Unk_08675FF8[];
-extern EventScr CONST_DATA EventScr_Unk_08676014[];
-
-extern EventScr CONST_DATA EventScr_Unk_08676030[];
-extern EventScr CONST_DATA EventScr_Unk_08676038[];
-extern EventScr CONST_DATA EventScr_Unk_0867605C[];
-
-extern EventScr CONST_DATA EventScr_Unk_08676080[];
-extern EventScr CONST_DATA EventScr_Unk_08676088[];
-extern EventScr CONST_DATA EventScr_Unk_086760AC[];
-
-extern EventScr CONST_DATA EventScr_Unk_086760FC[];
-extern EventScr CONST_DATA EventScr_Unk_08676104[];
-extern EventScr CONST_DATA EventScr_Unk_08676128[];
-
-extern EventScr CONST_DATA EventScr_TrialE_Opening[];
-extern EventScr CONST_DATA EventScr_TrialE_Victory[];
-extern EventScr CONST_DATA EventScr_TrialE_Failure[];
diff --git a/include/chapterinfo.h b/include/chapterinfo.h
deleted file mode 100644
index 43a06ce..0000000
--- a/include/chapterinfo.h
+++ /dev/null
@@ -1,24 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "event.h"
-#include "unit.h"
-#include "eventinfo.h"
-
-struct ChapterEventInfo
-{
-    /* 00 */ EventListScr const * event_list_turn;
-    /* 04 */ EventListScr const * event_list_talk;
-    /* 08 */ EventListScr const * event_list_tile;
-    /* 0C */ EventListScr const * event_list_move;
-    /* 10 */ struct UnitInfo const * units_red;
-    /* 14 */ struct UnitInfo const * units_blue;
-    /* 18 */ EventScr const * event_script_victory;
-};
-
-struct ChapterInfo const * GetChapterInfo(int chapter);
-u8 const * GetChapterMap(int chapter);
-struct MapChangeInfo const * GetChapterMapChanges(int chapter);
-struct ChapterEventInfo const * GetChapterEventInfo(int chapter);
-char const * GetChapterUnk_0802BBD0(int chapter);
diff --git a/include/chapterunits.h b/include/chapterunits.h
deleted file mode 100644
index cb72de7..0000000
--- a/include/chapterunits.h
+++ /dev/null
@@ -1,951 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "event.h"
-#include "unit.h"
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08679974[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08679994[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086799B4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086799D4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086799E4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08679A44[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08679A54[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08679A64[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08679A74[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08679974[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08679994[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086799B4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086799D4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086799E4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08679A44[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08679A54[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08679A64[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08679A74[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter1_BlueA[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter1_BlueB[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter1_Lance[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter1_RedDummy[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter1_RedA[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter1_RedB[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter1_RedC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter1_Pillager[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter1_BlueUnused[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter1_BlueA[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter1_BlueB[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter1_Lance[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter1_RedDummy[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter1_RedA[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter1_RedB[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter1_RedC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter1_Pillager[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter1_BlueUnused[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter2_Blue[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter2_Merlinus[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter2_RedDummy[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter2_RedA[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter2_RedB[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter2_RedC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter2_RedD[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter2_WardLot[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter2_DieckShanna[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter2_CutsceneMelady[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter2_Boss[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter2_OpeningSoldier[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter2_Elen[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter2_MixedUnused[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter2_Blue[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter2_Merlinus[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter2_RedDummy[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter2_RedA[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter2_RedB[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter2_RedC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter2_RedD[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter2_WardLot[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter2_DieckShanna[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter2_CutsceneMelady[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter2_Boss[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter2_OpeningSoldier[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter2_Elen[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter2_MixedUnused[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter3_Blue[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter3_Chad[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter3_Red[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter3_ZephielSquad[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter3_UnusedRedA[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter3_UnusedRedB[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter3_CavalierReinforcements[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter3_Lugh[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter3_CutsceneBishop[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter3_CutsceneChildren[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter3_Blue[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter3_Chad[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter3_Red[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter3_ZephielSquad[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter3_UnusedRedA[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter3_UnusedRedB[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter3_CavalierReinforcements[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter3_Lugh[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter3_CutsceneBishop[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter3_CutsceneChildren[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter4_Blue[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter4_NarcianOnly[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter4_Red[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter4_Pirates[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter4_CavalierReinforcements[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter4_Clarine[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter4_RutgerSquad[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chaper4_UnusedCavaliers[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chaper4_UnusedPegasi[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter4_Blue[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter4_NarcianOnly[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter4_Red[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter4_Pirates[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter4_CavalierReinforcements[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter4_Clarine[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter4_RutgerSquad[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chaper4_UnusedCavaliers[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chaper4_UnusedPegasi[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter5_Blue[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter5_Red[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter5_UnusedEmpty[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter5_BackFortBrigands[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter5_OpenBarrierReinforcements[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter5_FrontFortBrigands[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter5_SaulDorothy[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter5_UnusedSaulDorothy[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter5_Blue[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter5_Red[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter5_UnusedEmpty[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter5_BackFortBrigands[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter5_OpenBarrierReinforcements[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter5_FrontFortBrigands[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter5_SaulDorothy[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter5_UnusedSaulDorothy[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867AFA0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867B050[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867B080[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867B260[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867B2B0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867B300[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867B350[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867B3A0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867B3D0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867B3F0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867B440[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867B490[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867B4E0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867B520[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867AFA0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867B050[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867B080[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867B260[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867B2B0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867B300[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867B350[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867B3A0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867B3D0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867B3F0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867B440[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867B490[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867B4E0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867B520[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867B680[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867B760[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867B8D0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867B930[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867B960[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867B980[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867BA10[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867BA60[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867BA80[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867B680[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867B760[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867B8D0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867B930[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867B960[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867B980[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867BA10[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867BA60[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867BA80[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867BB5C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867BC2C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867BC4C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867BE2C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867BE5C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867BEAC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867BEFC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867BF3C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867BF7C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867BF9C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867BFDC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867BFFC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867C07C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867C09C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867C0BC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867C10C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867C15C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867C1AC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867C1EC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867C1FC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867BB5C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867BC2C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867BC4C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867BE2C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867BE5C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867BEAC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867BEFC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867BF3C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867BF7C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867BF9C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867BFDC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867BFFC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867C07C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867C09C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867C0BC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867C10C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867C15C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867C1AC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867C1EC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867C1FC[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867C3A4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867C484[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867C664[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867C6A4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867C6E4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867C714[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867C744[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867C3A4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867C484[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867C664[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867C6A4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867C6E4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867C714[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867C744[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867C898[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867C968[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867CAE8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867CB08[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867CB28[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867CB48[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867CB78[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867CBB8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867CBD8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867CBF8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867CC08[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867C898[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867C968[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867CAE8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867CB08[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867CB28[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867CB48[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867CB78[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867CBB8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867CBD8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867CBF8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867CC08[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867CDAC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867CE7C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867CE9C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D00C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D02C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D07C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D0BC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D0EC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D11C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D13C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D17C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D1CC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D20C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D24C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D27C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D2BC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D2EC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D30C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D32C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D34C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D36C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867CDAC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867CE7C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867CE9C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D00C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D02C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D07C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D0BC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D0EC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D11C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D13C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D17C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D1CC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D20C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D24C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D27C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D2BC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D2EC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D30C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D32C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D34C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D36C[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D538[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D618[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D7E8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D828[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D878[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D8C8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D8E8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D918[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867D938[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D538[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D618[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D7E8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D828[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D878[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D8C8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D8E8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D918[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867D938[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867DA14[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867DB04[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867DD84[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867DDA4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867DDF4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867DE34[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867DE84[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867DEC4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867DEE4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867DF04[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867DF24[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867DF44[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867DF74[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867DF94[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867DFB4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867DFD4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867DA14[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867DB04[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867DD84[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867DDA4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867DDF4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867DE34[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867DE84[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867DEC4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867DEE4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867DF04[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867DF24[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867DF44[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867DF74[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867DF94[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867DFB4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867DFD4[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867E13C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867E1FC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867E22C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867E42C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867E46C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867E49C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867E4DC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867E50C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867E55C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867E5AC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867E5FC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867E13C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867E1FC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867E22C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867E42C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867E46C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867E49C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867E4DC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867E50C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867E55C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867E5AC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867E5FC[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867E710[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867E7E0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867E800[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867E9F0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867EA60[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867EAB0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867EAF0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867E710[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867E7E0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867E800[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867E9F0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867EA60[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867EAB0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867EAF0[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867EBA4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867EC94[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867EEC4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867EF14[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867EF54[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867EF74[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867EFA4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867EFC4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867EFE4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867EFF4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867EBA4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867EC94[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867EEC4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867EF14[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867EF54[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867EF74[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867EFA4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867EFC4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867EFE4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867EFF4[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867F0E4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867F1D4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867F3A4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867F3D4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867F404[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867F424[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867F444[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867F4A4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867F4C4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867F4E4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867F504[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867F534[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867F0E4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867F1D4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867F3A4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867F3D4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867F404[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867F424[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867F444[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867F4A4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867F4C4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867F4E4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867F504[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867F534[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867F64C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867F74C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867F95C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867F98C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867F9BC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867F64C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867F74C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867F95C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867F98C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867F9BC[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867FA58[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867FB38[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867FB58[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867FDB8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867FDE8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867FA58[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867FB38[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867FB58[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867FDB8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867FDE8[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867FE94[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0867FF74[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086801E4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08680214[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08680254[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08680274[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867FE94[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0867FF74[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086801E4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08680214[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08680254[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08680274[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08680324[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08680454[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08680694[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08680744[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08680764[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08680784[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086807A4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086807F4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08680844[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08680894[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086808E4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08680934[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08680984[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086809D4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08680A24[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08680A74[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08680AC4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08680324[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08680454[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08680694[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08680744[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08680764[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08680784[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086807A4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086807F4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08680844[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08680894[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086808E4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08680934[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08680984[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086809D4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08680A24[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08680A74[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08680AC4[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08680C60[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08680D70[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08680FF0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086810A0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086810D0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08681120[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08681170[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086811C0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086811E0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08681200[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08681220[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08681240[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08681330[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08681350[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08680C60[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08680D70[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08680FF0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086810A0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086810D0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08681120[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08681170[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086811C0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086811E0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08681200[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08681220[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08681240[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08681330[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08681350[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086814B0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086815C0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08681860[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08681880[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086814B0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086815C0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08681860[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08681880[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086818F8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086819A8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08681B68[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08681B88[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08681BA8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08681BC8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08681BE8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08681C08[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08681C28[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086818F8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086819A8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08681B68[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08681B88[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08681BA8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08681BC8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08681BE8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08681C08[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08681C28[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08681D04[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08681DB4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08681DF4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08681E14[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08681E34[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08681E54[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08681E74[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08681E94[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08681D04[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08681DB4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08681DF4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08681E14[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08681E34[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08681E54[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08681E74[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08681E94[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter10B_Deploy[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter10B_Red[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086821DC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0868220C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0868223C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0868227C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter10B_KleinSquadA[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter10B_KleinSquadB[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter10B_TheaSquadA[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter10B_TheaSquadB[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0868238C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086823CC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter10B_CutsceneMelady[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter10B_CutsceneGalle[];
-extern struct UnitInfo CONST_DATA UnitInfo_Chapter10B_CutsceneThea[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0868245C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter10B_Deploy[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter10B_Red[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086821DC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0868220C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0868223C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0868227C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter10B_KleinSquadA[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter10B_KleinSquadB[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter10B_TheaSquadA[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter10B_TheaSquadB[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0868238C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086823CC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter10B_CutsceneMelady[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter10B_CutsceneGalle[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Chapter10B_CutsceneThea[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0868245C[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086825C4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086826A4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086826C4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08682824[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08682864[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086828B4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086828F4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08682924[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08682964[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086829B4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086829F4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08682A14[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08682A44[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08682A74[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08682AA4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08682AD4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08682AF4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086825C4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086826A4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086826C4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08682824[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08682864[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086828B4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086828F4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08682924[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08682964[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086829B4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086829F4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08682A14[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08682A44[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08682A74[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08682AA4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08682AD4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08682AF4[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08682C70[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08682D60[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08682F30[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08682F50[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08682F70[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08682FA0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08682FD0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08682FF0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08682C70[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08682D60[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08682F30[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08682F50[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08682F70[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08682FA0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08682FD0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08682FF0[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086830B8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086831B8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086833B8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086833F8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08683438[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08683458[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08683478[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08683498[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086834B8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086834D8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086834F8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08683518[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08683538[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08683558[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08683578[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08683598[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086835B8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086835D8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086835F8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08683618[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086830B8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086831B8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086833B8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086833F8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08683438[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08683458[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08683478[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08683498[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086834B8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086834D8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086834F8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08683518[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08683538[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08683558[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08683578[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08683598[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086835B8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086835D8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086835F8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08683618[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086837F0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086838F0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08683BC0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08683C10[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08683C40[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08683C70[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08683CC0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086837F0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086838F0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08683BC0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08683C10[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08683C40[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08683C70[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08683CC0[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08683DA4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08683E84[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08683EA4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08683ED4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08683EF4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08684114[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08684134[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08684154[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08683DA4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08683E84[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08683EA4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08683ED4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08683EF4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08684114[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08684134[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08684154[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0868424C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086842FC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086844FC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0868451C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0868459C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086845BC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086845DC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0868462C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0868467C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086846CC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0868470C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_0868471C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0868424C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086842FC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086844FC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0868451C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0868459C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086845BC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086845DC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0868462C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0868467C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086846CC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0868470C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_0868471C[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08684824[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086848B4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08684824[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086848B4[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08684A94[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08684B44[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08684A94[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08684B44[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08684D84[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08684E34[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08685034[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08685054[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08685074[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08684D84[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08684E34[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08685034[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08685054[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08685074[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08685100[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086851E0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08685100[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086851E0[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086854A0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08685590[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086857C0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08685800[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08685840[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08685880[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086858B0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086858F0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08685930[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08685970[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086859B0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086859F0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08685A30[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08685A70[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086854A0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08685590[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086857C0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08685800[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08685840[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08685880[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086858B0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086858F0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08685930[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08685970[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086859B0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086859F0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08685A30[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08685A70[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08685BC0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08685C70[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08685F50[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08685F70[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08685F90[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08685FB0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08685FD0[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08685FF0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08685BC0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08685C70[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08685F50[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08685F70[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08685F90[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08685FB0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08685FD0[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08685FF0[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086860B8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686168[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686318[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686358[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686398[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086863D8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086860B8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686168[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686318[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686358[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686398[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086863D8[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686498[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686548[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086866A8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086866C8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086866E8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686708[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686728[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686748[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686768[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686788[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086867A8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086867C8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086867E8[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686808[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686828[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686848[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686868[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686888[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086868A8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686498[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686548[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086866A8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086866C8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086866E8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686708[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686728[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686748[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686768[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686788[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086867A8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086867C8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086867E8[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686808[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686828[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686848[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686868[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686888[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086868A8[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686A4C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686AFC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686C9C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686CEC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686D3C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686D8C[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686DDC[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686E2C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686A4C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686AFC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686C9C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686CEC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686D3C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686D8C[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686DDC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686E2C[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686F24[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08686FD4[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08687184[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08687204[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_08687274[];
-extern struct UnitInfo CONST_DATA UnitInfo_Unk_086872E4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686F24[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08686FD4[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08687184[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08687204[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_08687274[];
-extern EventScr CONST_DATA EventScr_LoadUnits_Unk_086872E4[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_TrialE_Deploy[];
-extern struct UnitInfo CONST_DATA UnitInfo_TrialE_Red[];
-extern struct UnitInfo CONST_DATA UnitInfo_TrialE_Turn10Extra[];
-extern struct UnitInfo CONST_DATA UnitInfo_TrialE_Turn12Extra[];
-extern struct UnitInfo CONST_DATA UnitInfo_TrialE_Turn14Extra[];
-extern struct UnitInfo CONST_DATA UnitInfo_TrialE_Turn16Extra[];
-extern struct UnitInfo CONST_DATA UnitInfo_TrialE_Turn18Extra[];
-extern struct UnitInfo CONST_DATA UnitInfo_TrialE_Turn20Extra[];
-extern EventScr CONST_DATA EventScr_LoadUnits_TrialE_Deploy[];
-extern EventScr CONST_DATA EventScr_LoadUnits_TrialE_Red[];
-extern EventScr CONST_DATA EventScr_LoadUnits_TrialE_Turn10Extra[];
-extern EventScr CONST_DATA EventScr_LoadUnits_TrialE_Turn12Extra[];
-extern EventScr CONST_DATA EventScr_LoadUnits_TrialE_Turn14Extra[];
-extern EventScr CONST_DATA EventScr_LoadUnits_TrialE_Turn16Extra[];
-extern EventScr CONST_DATA EventScr_LoadUnits_TrialE_Turn18Extra[];
-extern EventScr CONST_DATA EventScr_LoadUnits_TrialE_Turn20Extra[];
-
-extern struct UnitInfo CONST_DATA UnitInfo_TrialBonusUnitA[];
-extern struct UnitInfo CONST_DATA UnitInfo_TrialBonusUnitB[];
-extern struct UnitInfo CONST_DATA UnitInfo_TrialBonusUnitC[];
-extern struct UnitInfo CONST_DATA UnitInfo_TrialBonusUnitD[];
-extern struct UnitInfo CONST_DATA UnitInfo_TrialBonusUnitE[];
-extern struct UnitInfo CONST_DATA UnitInfo_TrialBonusUnitF[];
-extern struct UnitInfo CONST_DATA UnitInfo_TrialBonusUnitG[];
-extern struct UnitInfo CONST_DATA UnitInfo_TrialBonusUnitH[];
-extern EventScr CONST_DATA EventScr_LoadUnits_TrialBonusUnitA[];
-extern EventScr CONST_DATA EventScr_LoadUnits_TrialBonusUnitB[];
-extern EventScr CONST_DATA EventScr_LoadUnits_TrialBonusUnitC[];
-extern EventScr CONST_DATA EventScr_LoadUnits_TrialBonusUnitD[];
-extern EventScr CONST_DATA EventScr_LoadUnits_TrialBonusUnitE[];
-extern EventScr CONST_DATA EventScr_LoadUnits_TrialBonusUnitF[];
-extern EventScr CONST_DATA EventScr_LoadUnits_TrialBonusUnitG[];
-extern EventScr CONST_DATA EventScr_LoadUnits_TrialBonusUnitH[];
diff --git a/include/common.h b/include/common.h
deleted file mode 100644
index 019095b..0000000
--- a/include/common.h
+++ /dev/null
@@ -1,52 +0,0 @@
-#pragma once
-
-#if defined(MODERN) && MODERN
-#  ifndef MODERN
-#    define MODERN
-#  endif
-#  ifdef NONMATCHING
-#    undef NONMATCHING
-#  endif // NONMATCHING
-#  ifdef BUGFIX
-#    undef BUGFIX
-#  endif // BUGFIX
-#  define NONMATCHING 1
-#  define BUGFIX 1
-#endif // MODERN
-
-#include <stdint.h>
-#include <stddef.h>
-
-#include "gba/gba.h"
-
-#include "attributes.h"
-#include "types.h"
-
-#include "unknown_types.h"
-#include "unknown_funcs.h"
-#include "unknown_objects.h"
-
-// use to pad a struct that contains unused space
-// TODO: use this everywere
-
-#if !MODERN
-#  define STRUCT_PAD(from, to) unsigned char _pad_ ## from[(to) - (from)]
-#else
-#  define STRUCT_PAD(from, to)
-#endif
-
-#define ARRAY_COUNT(array) (sizeof(array) / sizeof((array)[0]))
-
-#define ABS(val) ((val) >= 0 ? (val) : -(val))
-
-#define RECT_DISTANCE(xa, ya, xb, yb) (ABS((xa) - (xb)) + ABS((ya) - (yb)))
-
-// For translate-able strings.
-#define JTEXT(orig) (orig)
-#define TEXT(orig, english) (orig)
-
-#if defined(MODERN) && MODERN
-#  define STATIC_ASSERT(expr) _Static_assert(expr)
-#else
-#  define STATIC_ASSERT(expr)
-#endif
diff --git a/include/constants/banim_pal.h b/include/constants/banim_pal.h
deleted file mode 100644
index 0d02b8a..0000000
--- a/include/constants/banim_pal.h
+++ /dev/null
@@ -1,108 +0,0 @@
-#pragma once
-
-enum
-{
-    BANIM_PAL_DEFAULT,
-    BANIM_PAL_01 = 0x01,
-    BANIM_PAL_02 = 0x02,
-    BANIM_PAL_03 = 0x03,
-    BANIM_PAL_04 = 0x04,
-    BANIM_PAL_05 = 0x05,
-    BANIM_PAL_06 = 0x06,
-    BANIM_PAL_07 = 0x07,
-    BANIM_PAL_08 = 0x08,
-    BANIM_PAL_09 = 0x09,
-    BANIM_PAL_0A = 0x0A,
-    BANIM_PAL_0B = 0x0B,
-    BANIM_PAL_0C = 0x0C,
-    BANIM_PAL_0D = 0x0D,
-    BANIM_PAL_0E = 0x0E,
-    BANIM_PAL_0F = 0x0F,
-    BANIM_PAL_10 = 0x10,
-    BANIM_PAL_11 = 0x11,
-    BANIM_PAL_12 = 0x12,
-    BANIM_PAL_13 = 0x13,
-    BANIM_PAL_14 = 0x14,
-    BANIM_PAL_15 = 0x15,
-    BANIM_PAL_16 = 0x16,
-    BANIM_PAL_17 = 0x17,
-    BANIM_PAL_18 = 0x18,
-    BANIM_PAL_19 = 0x19,
-    BANIM_PAL_1A = 0x1A,
-    BANIM_PAL_1B = 0x1B,
-    BANIM_PAL_1C = 0x1C,
-    BANIM_PAL_1D = 0x1D,
-    BANIM_PAL_1E = 0x1E,
-    BANIM_PAL_1F = 0x1F,
-    BANIM_PAL_20 = 0x20,
-    BANIM_PAL_21 = 0x21,
-    BANIM_PAL_22 = 0x22,
-    BANIM_PAL_23 = 0x23,
-    BANIM_PAL_24 = 0x24,
-    BANIM_PAL_25 = 0x25,
-    BANIM_PAL_26 = 0x26,
-    BANIM_PAL_27 = 0x27,
-    BANIM_PAL_28 = 0x28,
-    BANIM_PAL_29 = 0x29,
-    BANIM_PAL_2A = 0x2A,
-    BANIM_PAL_2B = 0x2B,
-    BANIM_PAL_2C = 0x2C,
-    BANIM_PAL_2D = 0x2D,
-    BANIM_PAL_2E = 0x2E,
-    BANIM_PAL_2F = 0x2F,
-    BANIM_PAL_30 = 0x30,
-    BANIM_PAL_31 = 0x31,
-    BANIM_PAL_32 = 0x32,
-    BANIM_PAL_33 = 0x33,
-    BANIM_PAL_34 = 0x34,
-    BANIM_PAL_35 = 0x35,
-    BANIM_PAL_36 = 0x36,
-    BANIM_PAL_37 = 0x37,
-    BANIM_PAL_38 = 0x38,
-    BANIM_PAL_39 = 0x39,
-    BANIM_PAL_3A = 0x3A,
-    BANIM_PAL_3B = 0x3B,
-    BANIM_PAL_3C = 0x3C,
-    BANIM_PAL_3D = 0x3D,
-    BANIM_PAL_3E = 0x3E,
-    BANIM_PAL_3F = 0x3F,
-    BANIM_PAL_40 = 0x40,
-    BANIM_PAL_41 = 0x41,
-    BANIM_PAL_42 = 0x42,
-    BANIM_PAL_43 = 0x43,
-    BANIM_PAL_44 = 0x44,
-    BANIM_PAL_45 = 0x45,
-    BANIM_PAL_46 = 0x46,
-    BANIM_PAL_47 = 0x47,
-    BANIM_PAL_48 = 0x48,
-    BANIM_PAL_49 = 0x49,
-    BANIM_PAL_4A = 0x4A,
-    BANIM_PAL_4B = 0x4B,
-    BANIM_PAL_4C = 0x4C,
-    BANIM_PAL_4D = 0x4D,
-    BANIM_PAL_4E = 0x4E,
-    BANIM_PAL_4F = 0x4F,
-    BANIM_PAL_50 = 0x50,
-    BANIM_PAL_51 = 0x51,
-    BANIM_PAL_52 = 0x52,
-    BANIM_PAL_53 = 0x53,
-    BANIM_PAL_54 = 0x54,
-    BANIM_PAL_55 = 0x55,
-    BANIM_PAL_56 = 0x56,
-    BANIM_PAL_57 = 0x57,
-    BANIM_PAL_58 = 0x58,
-    BANIM_PAL_59 = 0x59,
-    BANIM_PAL_5A = 0x5A,
-    BANIM_PAL_5B = 0x5B,
-    BANIM_PAL_5C = 0x5C,
-    BANIM_PAL_5D = 0x5D,
-    BANIM_PAL_5E = 0x5E,
-    BANIM_PAL_5F = 0x5F,
-    BANIM_PAL_60 = 0x60,
-    BANIM_PAL_61 = 0x61,
-    BANIM_PAL_62 = 0x62,
-    BANIM_PAL_63 = 0x63,
-    BANIM_PAL_64 = 0x64,
-    BANIM_PAL_65 = 0x65,
-    BANIM_PAL_66 = 0x66,
-};
diff --git a/include/constants/chapters.h b/include/constants/chapters.h
deleted file mode 100644
index 3c017e3..0000000
--- a/include/constants/chapters.h
+++ /dev/null
@@ -1,52 +0,0 @@
-#pragma once
-
-enum
-{
-    CHAPTER_TUTORIAL = 0x00,
-    CHAPTER_1 = 0x01,
-    CHAPTER_2 = 0x02,
-    CHAPTER_3 = 0x03,
-    CHAPTER_4 = 0x04,
-    CHAPTER_5 = 0x05,
-    CHAPTER_6 = 0x06,
-    CHAPTER_7 = 0x07,
-    CHAPTER_8 = 0x08,
-    CHAPTER_9 = 0x09,
-    CHAPTER_10_A = 0x0A,
-    CHAPTER_11_A = 0x0B,
-    CHAPTER_12 = 0x0C,
-    CHAPTER_13 = 0x0D,
-    CHAPTER_14 = 0x0E,
-    CHAPTER_15 = 0x0F,
-    CHAPTER_16 = 0x10,
-    CHAPTER_17_I = 0x11,
-    CHAPTER_18_I = 0x12,
-    CHAPTER_19_I = 0x13,
-    CHAPTER_20_I = 0x14,
-    CHAPTER_21 = 0x15,
-    CHAPTER_22 = 0x16,
-    CHAPTER_23 = 0x17,
-    CHAPTER_24 = 0x18,
-    CHAPTER_FINAL = 0x19,
-    CHAPTER_10_B = 0x1A,
-    CHAPTER_11_B = 0x1B,
-    CHAPTER_17_S = 0x1C,
-    CHAPTER_18_S = 0x1D,
-    CHAPTER_19_S = 0x1E,
-    CHAPTER_20_S = 0x1F,
-    CHAPTER_8X = 0x20,
-    CHAPTER_12X = 0x21,
-    CHAPTER_14X = 0x22,
-    CHAPTER_16X = 0x23,
-    CHAPTER_20X_I = 0x24,
-    CHAPTER_20X_S = 0x25,
-    CHAPTER_21X = 0x26,
-    CHAPTER_MULTIARENA = 0x27,
-    CHAPTER_TRIAL_A = 0x28,
-    CHAPTER_TRIAL_B = 0x29,
-    CHAPTER_TRIAL_C = 0x2A,
-    CHAPTER_TRIAL_D = 0x2B,
-    CHAPTER_TRIAL_E = 0x2C,
-
-    CHAPTER_COUNT = 0x2D,
-};
diff --git a/include/constants/faces.h b/include/constants/faces.h
deleted file mode 100644
index 7e35ff6..0000000
--- a/include/constants/faces.h
+++ /dev/null
@@ -1,256 +0,0 @@
-#pragma once
-
-#include <stdint.h>
-
-enum
-{
-    FID_NONE = 0,
-    FID_01 = 0x01,
-    FID_02 = 0x02,
-    FID_03 = 0x03,
-    FID_04 = 0x04,
-    FID_05 = 0x05,
-    FID_06 = 0x06,
-    FID_07 = 0x07,
-    FID_08 = 0x08,
-    FID_09 = 0x09,
-    FID_0A = 0x0A,
-    FID_0B = 0x0B,
-    FID_0C = 0x0C,
-    FID_0D = 0x0D,
-    FID_0E = 0x0E,
-    FID_0F = 0x0F,
-    FID_10 = 0x10,
-    FID_11 = 0x11,
-    FID_12 = 0x12,
-    FID_13 = 0x13,
-    FID_14 = 0x14,
-    FID_15 = 0x15,
-    FID_16 = 0x16,
-    FID_17 = 0x17,
-    FID_18 = 0x18,
-    FID_19 = 0x19,
-    FID_1A = 0x1A,
-    FID_1B = 0x1B,
-    FID_1C = 0x1C,
-    FID_1D = 0x1D,
-    FID_1E = 0x1E,
-    FID_1F = 0x1F,
-    FID_20 = 0x20,
-    FID_21 = 0x21,
-    FID_22 = 0x22,
-    FID_23 = 0x23,
-    FID_24 = 0x24,
-    FID_25 = 0x25,
-    FID_26 = 0x26,
-    FID_27 = 0x27,
-    FID_28 = 0x28,
-    FID_29 = 0x29,
-    FID_2A = 0x2A,
-    FID_2B = 0x2B,
-    FID_2C = 0x2C,
-    FID_2D = 0x2D,
-    FID_2E = 0x2E,
-    FID_2F = 0x2F,
-    FID_30 = 0x30,
-    FID_31 = 0x31,
-    FID_32 = 0x32,
-    FID_33 = 0x33,
-    FID_34 = 0x34,
-    FID_35 = 0x35,
-    FID_36 = 0x36,
-    FID_37 = 0x37,
-    FID_38 = 0x38,
-    FID_39 = 0x39,
-    FID_3A = 0x3A,
-    FID_3B = 0x3B,
-    FID_3C = 0x3C,
-    FID_3D = 0x3D,
-    FID_3E = 0x3E,
-    FID_3F = 0x3F,
-    FID_40 = 0x40,
-    FID_41 = 0x41,
-    FID_42 = 0x42,
-    FID_43 = 0x43,
-    FID_44 = 0x44,
-    FID_45 = 0x45,
-    FID_46 = 0x46,
-    FID_47 = 0x47,
-    FID_48 = 0x48,
-    FID_49 = 0x49,
-    FID_4A = 0x4A,
-    FID_4B = 0x4B,
-    FID_4C = 0x4C,
-    FID_4D = 0x4D,
-    FID_4E = 0x4E,
-    FID_4F = 0x4F,
-    FID_50 = 0x50,
-    FID_51 = 0x51,
-    FID_52 = 0x52,
-    FID_53 = 0x53,
-    FID_54 = 0x54,
-    FID_55 = 0x55,
-    FID_56 = 0x56,
-    FID_57 = 0x57,
-    FID_58 = 0x58,
-    FID_59 = 0x59,
-    FID_5A = 0x5A,
-    FID_5B = 0x5B,
-    FID_5C = 0x5C,
-    FID_5D = 0x5D,
-    FID_5E = 0x5E,
-    FID_5F = 0x5F,
-    FID_60 = 0x60,
-    FID_61 = 0x61,
-    FID_62 = 0x62,
-    FID_63 = 0x63,
-    FID_64 = 0x64,
-    FID_65 = 0x65,
-    FID_66 = 0x66,
-    FID_67 = 0x67,
-    FID_68 = 0x68,
-    FID_69 = 0x69,
-    FID_6A = 0x6A,
-    FID_6B = 0x6B,
-    FID_6C = 0x6C,
-    FID_6D = 0x6D,
-    FID_6E = 0x6E,
-    FID_6F = 0x6F,
-    FID_70 = 0x70,
-    FID_71 = 0x71,
-    FID_72 = 0x72,
-    FID_73 = 0x73,
-    FID_74 = 0x74,
-    FID_75 = 0x75,
-    FID_76 = 0x76,
-    FID_77 = 0x77,
-    FID_78 = 0x78,
-    FID_79 = 0x79,
-    FID_7A = 0x7A,
-    FID_7B = 0x7B,
-    FID_7C = 0x7C,
-    FID_7D = 0x7D,
-    FID_7E = 0x7E,
-    FID_7F = 0x7F,
-    FID_80 = 0x80,
-    FID_81 = 0x81,
-    FID_82 = 0x82,
-    FID_83 = 0x83,
-    FID_84 = 0x84,
-    FID_85 = 0x85,
-    FID_86 = 0x86,
-    FID_87 = 0x87,
-    FID_88 = 0x88,
-    FID_89 = 0x89,
-    FID_8A = 0x8A,
-    FID_8B = 0x8B,
-    FID_8C = 0x8C,
-    FID_8D = 0x8D,
-    FID_8E = 0x8E,
-    FID_8F = 0x8F,
-    FID_90 = 0x90,
-    FID_91 = 0x91,
-    FID_92 = 0x92,
-    FID_93 = 0x93,
-    FID_94 = 0x94,
-    FID_95 = 0x95,
-    FID_96 = 0x96,
-    FID_97 = 0x97,
-    FID_98 = 0x98,
-    FID_99 = 0x99,
-    FID_9A = 0x9A,
-    FID_9B = 0x9B,
-    FID_9C = 0x9C,
-    FID_9D = 0x9D,
-    FID_9E = 0x9E,
-    FID_9F = 0x9F,
-    FID_A0 = 0xA0,
-    FID_A1 = 0xA1,
-    FID_A2 = 0xA2,
-    FID_A3 = 0xA3,
-    FID_A4 = 0xA4,
-    FID_A5 = 0xA5,
-    FID_A6 = 0xA6,
-    FID_A7 = 0xA7,
-    FID_A8 = 0xA8,
-    FID_A9 = 0xA9,
-    FID_AA = 0xAA,
-    FID_AB = 0xAB,
-    FID_AC = 0xAC,
-    FID_AD = 0xAD,
-    FID_AE = 0xAE,
-    FID_AF = 0xAF,
-    FID_B0 = 0xB0,
-    FID_B1 = 0xB1,
-    FID_B2 = 0xB2,
-    FID_B3 = 0xB3,
-    FID_B4 = 0xB4,
-    FID_B5 = 0xB5,
-    FID_B6 = 0xB6,
-    FID_B7 = 0xB7,
-    FID_B8 = 0xB8,
-    FID_B9 = 0xB9,
-    FID_BA = 0xBA,
-    FID_BB = 0xBB,
-    FID_BC = 0xBC,
-    FID_BD = 0xBD,
-    FID_BE = 0xBE,
-    FID_BF = 0xBF,
-    FID_C0 = 0xC0,
-    FID_C1 = 0xC1,
-    FID_C2 = 0xC2,
-    FID_C3 = 0xC3,
-    FID_C4 = 0xC4,
-    FID_C5 = 0xC5,
-    FID_C6 = 0xC6,
-    FID_C7 = 0xC7,
-    FID_C8 = 0xC8,
-    FID_C9 = 0xC9,
-    FID_CA = 0xCA,
-    FID_CB = 0xCB,
-    FID_CC = 0xCC,
-    FID_CD = 0xCD,
-    FID_CE = 0xCE,
-    FID_CF = 0xCF,
-    FID_D0 = 0xD0,
-    FID_D1 = 0xD1,
-    FID_D2 = 0xD2,
-    FID_D3 = 0xD3,
-    FID_D4 = 0xD4,
-    FID_D5 = 0xD5,
-    FID_D6 = 0xD6,
-    FID_D7 = 0xD7,
-    FID_D8 = 0xD8,
-    FID_D9 = 0xD9,
-    FID_DA = 0xDA,
-    FID_DB = 0xDB,
-    FID_DC = 0xDC,
-    FID_DD = 0xDD,
-    FID_DE = 0xDE,
-    FID_DF = 0xDF,
-    FID_E0 = 0xE0,
-    FID_E1 = 0xE1,
-    FID_E2 = 0xE2,
-    FID_E3 = 0xE3,
-    FID_E4 = 0xE4,
-    FID_E5 = 0xE5,
-    FID_E6 = 0xE6,
-
-    // these are only aliases for now to simplify data dump tools
-    // (because I am lazy)
-
-    FID_ROY = FID_02,
-    FID_CLARINE = FID_03,
-    FID_FAE = FID_04,
-};
-
-enum
-{
-    FID_FACTION_CHIBI = INT16_MAX - 0xFF,
-    FID_FACTION_CHIBI_1,
-    FID_FACTION_CHIBI_2,
-    FID_FACTION_CHIBI_3,
-    FID_FACTION_CHIBI_4,
-    FID_FACTION_CHIBI_5,
-    FID_FACTION_CHIBI_6,
-};
diff --git a/include/constants/flags.h b/include/constants/flags.h
deleted file mode 100644
index 07eacc7..0000000
--- a/include/constants/flags.h
+++ /dev/null
@@ -1,362 +0,0 @@
-#pragma once
-
-enum
-{
-    FLAG_1 = 1,
-    FLAG_2 = 2,
-    FLAG_3 = 3,
-    FLAG_CHAPTER_BASE,
-};
-
-enum
-{
-    FLAG_TUTORIAL_4 = FLAG_CHAPTER_BASE,
-    FLAG_TUTORIAL_5 = 5,
-    FLAG_TUTORIAL_6 = 6,
-    FLAG_TUTORIAL_7 = 7,
-    FLAG_TUTORIAL_8 = 8,
-    FLAG_TUTORIAL_9 = 9,
-    FLAG_TUTORIAL_10 = 10,
-    FLAG_TUTORIAL_11 = 11,
-
-    FLAG_TUTORIAL_13 = 13,
-    FLAG_TUTORIAL_14 = 14,
-    FLAG_TUTORIAL_15 = 15,
-    FLAG_TUTORIAL_16 = 16,
-
-    FLAG_TUTORIAL_18 = 18,
-    FLAG_TUTORIAL_19 = 19,
-    FLAG_TUTORIAL_20 = 20,
-    FLAG_TUTORIAL_21 = 21,
-    FLAG_TUTORIAL_22 = 22,
-
-    FLAG_TUTORIAL_24 = 24,
-    FLAG_TUTORIAL_25 = 25,
-    FLAG_TUTORIAL_26 = 26,
-};
-
-enum
-{
-    FLAG_CHAPTER1_TURN1 = FLAG_CHAPTER_BASE,
-    FLAG_CHAPTER1_VILLAGE = 6,
-    FLAG_CHAPTER1_TOPVILLAGE = 7,
-};
-
-enum
-{
-    FLAG_CHAPTER2_VILLAGE = 5,
-};
-
-enum
-{
-    FLAG_CHAPTER3_ORPHANAGECUTSCENE = FLAG_CHAPTER_BASE,
-    FLAG_CHAPTER3_CHADLUGHTALK = 5,
-    FLAG_CHAPTER3_GOTLUGH = 8,
-    FLAG_CHAPTER3_CAVALIERSPOSTLUGH = 12,
-};
-
-enum
-{
-    FLAG_CHAPTER4_CLARINE = 5,
-    FLAG_CHAPTER4_RUTGER = 6,
-    FLAG_CHAPTER4_REFRESHCLARINE = 7,
-    FLAG_CHAPTER4_VILLAGEA = 8,
-    FLAG_CHAPTER4_VILLAGEB = 9,
-    FLAG_CHAPTER4_VILLAGEC = 10,
-};
-
-enum
-{
-    FLAG_CHAPTER5_4 = FLAG_CHAPTER_BASE,
-    FLAG_CHAPTER5_BARRIER = 5,
-    FLAG_CHAPTER5_VILLAGE = 7,
-};
-
-enum
-{
-    FLAG_CHAPTER6_4 = FLAG_CHAPTER_BASE,
-    FLAG_CHAPTER6_5 = 5,
-    FLAG_CHAPTER6_6 = 6,
-    FLAG_CHAPTER6_7 = 7,
-    FLAG_CHAPTER6_8 = 8,
-    FLAG_CHAPTER6_9 = 9,
-    FLAG_CHAPTER6_10 = 10,
-    FLAG_CHAPTER6_11 = 11,
-    FLAG_CHAPTER6_12 = 12,
-    FLAG_CHAPTER6_13 = 13,
-    FLAG_CHAPTER6_14 = 14,
-    FLAG_CHAPTER6_15 = 15,
-    FLAG_CHAPTER6_16 = 16,
-};
-
-enum
-{
-    FLAG_CHAPTER7_5 = 5,
-    FLAG_CHAPTER7_6 = 6,
-    FLAG_CHAPTER7_7 = 7,
-    FLAG_CHAPTER7_8 = 8,
-    FLAG_CHAPTER7_9 = 9,
-    FLAG_CHAPTER7_14 = 14,
-};
-
-enum
-{
-    FLAG_CHAPTER8_5 = 5,
-    FLAG_CHAPTER8_6 = 6,
-    FLAG_CHAPTER8_7 = 7,
-    FLAG_CHAPTER8_8 = 8,
-    FLAG_CHAPTER8_9 = 9,
-    FLAG_CHAPTER8_14 = 14,
-    FLAG_CHAPTER8_15 = 15,
-};
-
-enum
-{
-    FLAG_CHAPTER9_5 = 5,
-    FLAG_CHAPTER9_6 = 6,
-    FLAG_CHAPTER9_7 = 7,
-    FLAG_CHAPTER9_8 = 8,
-};
-
-enum
-{
-    FLAG_CHAPTER10A_6 = 6,
-    FLAG_CHAPTER10A_7 = 7,
-    FLAG_CHAPTER10A_8 = 8,
-};
-
-enum
-{
-    FLAG_CHAPTER11A_4 = FLAG_CHAPTER_BASE,
-    FLAG_CHAPTER11A_5 = 5,
-    FLAG_CHAPTER11A_6 = 6,
-    FLAG_CHAPTER11A_7 = 7,
-    FLAG_CHAPTER11A_8 = 8,
-
-    FLAG_CHAPTER11A_10 = 10,
-
-    FLAG_CHAPTER11A_12 = 12,
-    FLAG_CHAPTER11A_13 = 13,
-    FLAG_CHAPTER11A_14 = 14,
-    FLAG_CHAPTER11A_15 = 15,
-    FLAG_CHAPTER11A_16 = 16,
-    FLAG_CHAPTER11A_17 = 17,
-    FLAG_CHAPTER11A_18 = 18,
-    FLAG_CHAPTER11A_19 = 19,
-    FLAG_CHAPTER11A_20 = 20,
-    FLAG_CHAPTER11A_21 = 21,
-    FLAG_CHAPTER11A_22 = 22,
-    FLAG_CHAPTER11A_23 = 23,
-};
-
-enum
-{
-    FLAG_CHAPTER10B_4 = FLAG_CHAPTER_BASE,
-    FLAG_CHAPTER10B_5 = 5,
-    FLAG_CHAPTER10B_6 = 6,
-    FLAG_CHAPTER10B_8 = 8,
-    FLAG_CHAPTER10B_10 = 10,
-    FLAG_CHAPTER10B_11 = 11,
-    FLAG_CHAPTER10B_12 = 12,
-    FLAG_CHAPTER10B_13 = 13,
-    FLAG_CHAPTER10B_14 = 14,
-    FLAG_CHAPTER10B_15 = 15,
-    FLAG_CHAPTER10B_16 = 16,
-    FLAG_CHAPTER10B_17 = 17,
-    FLAG_CHAPTER10B_18 = 18,
-};
-
-enum
-{
-    FLAG_CHAPTER11B_5 = 5,
-    FLAG_CHAPTER11B_6 = 6,
-    FLAG_CHAPTER11B_11 = 11,
-    FLAG_CHAPTER11B_12 = 12,
-    FLAG_CHAPTER11B_14 = 14,
-};
-
-enum
-{
-    FLAG_CHAPTER12_5 = 5,
-    FLAG_CHAPTER12_7 = 7,
-    FLAG_CHAPTER12_8 = 8,
-    FLAG_CHAPTER12_9 = 9,
-};
-
-enum
-{
-    FLAG_CHAPTER13_5 = 5,
-    FLAG_CHAPTER13_6 = 6,
-    FLAG_CHAPTER13_10 = 10,
-    FLAG_CHAPTER13_14 = 14,
-};
-
-enum
-{
-    FLAG_CHAPTER14_9 = 9,
-    FLAG_CHAPTER14_10 = 10,
-    FLAG_CHAPTER14_11 = 11,
-    FLAG_CHAPTER14_12 = 12,
-    FLAG_CHAPTER14_13 = 13,
-    FLAG_CHAPTER14_14 = 14,
-    FLAG_CHAPTER14_15 = 15,
-    FLAG_CHAPTER14_16 = 16,
-};
-
-enum
-{
-    FLAG_CHAPTER15_5 = 5,
-    FLAG_CHAPTER15_7 = 7,
-    FLAG_CHAPTER15_8 = 8,
-    FLAG_CHAPTER15_11 = 11,
-};
-
-enum
-{
-    FLAG_CHAPTER16_5 = 5,
-    FLAG_CHAPTER16_6 = 6,
-    FLAG_CHAPTER16_7 = 7,
-    FLAG_CHAPTER16_8 = 8,
-    FLAG_CHAPTER16_9 = 9,
-    FLAG_CHAPTER16_10 = 10,
-    FLAG_CHAPTER16_11 = 11,
-    FLAG_CHAPTER16_12 = 12,
-    FLAG_CHAPTER16_15 = 15,
-    FLAG_CHAPTER16_16 = 16,
-    FLAG_CHAPTER16_17 = 17,
-    FLAG_CHAPTER16_18 = 18,
-};
-
-enum
-{
-    FLAG_CHAPTER20I_5 = 5,
-    FLAG_CHAPTER20I_6 = 6,
-    FLAG_CHAPTER20I_7 = 7,
-    FLAG_CHAPTER20I_8 = 8,
-    FLAG_CHAPTER20I_9 = 9,
-    FLAG_CHAPTER20I_10 = 10,
-    FLAG_CHAPTER20I_13 = 13,
-};
-
-enum
-{
-    FLAG_CHAPTER18S_5 = 5,
-    FLAG_CHAPTER18S_6 = 6,
-};
-
-enum
-{
-    FLAG_CHAPTER19S_5 = 5,
-};
-
-enum
-{
-    FLAG_CHAPTER20S_5 = 5,
-    FLAG_CHAPTER20S_8 = 8,
-    FLAG_CHAPTER20S_9 = 9,
-    FLAG_CHAPTER20S_10 = 10,
-};
-
-enum
-{
-    FLAG_CHAPTER20XS_4 = FLAG_CHAPTER_BASE,
-    FLAG_CHAPTER20XS_5 = 5,
-    FLAG_CHAPTER20XS_6 = 6,
-    FLAG_CHAPTER20XS_7 = 7,
-    FLAG_CHAPTER20XS_8 = 8,
-    FLAG_CHAPTER20XS_9 = 9,
-    FLAG_CHAPTER20XS_10 = 10,
-    FLAG_CHAPTER20XS_11 = 11,
-    FLAG_CHAPTER20XS_12 = 12,
-    FLAG_CHAPTER20XS_13 = 13,
-    FLAG_CHAPTER20XS_14 = 14,
-    FLAG_CHAPTER20XS_15 = 15,
-};
-
-enum
-{
-    FLAG_CHAPTER21_4 = FLAG_CHAPTER_BASE,
-    FLAG_CHAPTER21_5 = 5,
-    FLAG_CHAPTER21_6 = 6,
-    FLAG_CHAPTER21_7 = 7,
-    FLAG_CHAPTER21_8 = 8,
-    FLAG_CHAPTER21_9 = 9,
-    FLAG_CHAPTER21_10 = 10,
-    FLAG_CHAPTER21_11 = 11,
-    FLAG_CHAPTER21_12 = 12,
-    FLAG_CHAPTER21_13 = 13,
-    FLAG_CHAPTER21_14 = 14,
-    FLAG_CHAPTER21_15 = 15,
-    FLAG_CHAPTER21_16 = 16,
-    FLAG_CHAPTER21_17 = 17,
-    FLAG_CHAPTER21_18 = 18,
-};
-
-enum
-{
-    FLAG_CHAPTER21X_8 = 8,
-    FLAG_CHAPTER21X_9 = 9,
-    FLAG_CHAPTER21X_10 = 10,
-    FLAG_CHAPTER21X_11 = 11,
-    FLAG_CHAPTER21X_12 = 12,
-    FLAG_CHAPTER21X_13 = 13,
-};
-
-enum
-{
-    FLAG_CHAPTER22_5 = 5,
-    FLAG_CHAPTER22_6 = 6,
-    FLAG_CHAPTER22_7 = 7,
-    FLAG_CHAPTER22_8 = 8,
-
-    FLAG_CHAPTER22_10 = 10,
-};
-
-enum
-{
-    FLAG_CHAPTER23_4 = FLAG_CHAPTER_BASE,
-    FLAG_CHAPTER23_5 = 5,
-    FLAG_CHAPTER23_6 = 6,
-    FLAG_CHAPTER23_7 = 7,
-};
-
-enum
-{
-    FLAG_CHAPTER24_4 = FLAG_CHAPTER_BASE,
-    FLAG_CHAPTER24_5 = 5,
-    FLAG_CHAPTER24_6 = 6,
-    FLAG_CHAPTER24_7 = 7,
-    FLAG_CHAPTER24_8 = 8,
-    FLAG_CHAPTER24_9 = 9,
-
-    FLAG_CHAPTER24_13 = 13,
-    FLAG_CHAPTER24_14 = 14,
-    FLAG_CHAPTER24_15 = 15,
-    FLAG_CHAPTER24_16 = 16,
-    FLAG_CHAPTER24_17 = 17,
-};
-
-enum
-{
-    FLAG_PERMANENT_BASE = 100,
-
-    FLAG_101 = 0x65,
-    FLAG_102 = 0x66,
-    FLAG_103 = 0x67,
-    FLAG_104 = 0x68,
-    FLAG_105 = 0x69,
-    FLAG_106 = 0x6A,
-    FLAG_107 = 0x6B,
-    FLAG_108 = 0x6C,
-
-    FLAG_110 = 0x6E,
-    FLAG_111 = 0x6F,
-    FLAG_112 = 0x70,
-    FLAG_113 = 0x71,
-    FLAG_114 = 0x72,
-
-    FLAG_118 = 0x76,
-    FLAG_119 = 0x77,
-
-    FLAG_123 = 0x7B,
-};
diff --git a/include/constants/icons.h b/include/constants/icons.h
deleted file mode 100644
index 101742a..0000000
--- a/include/constants/icons.h
+++ /dev/null
@@ -1,143 +0,0 @@
-#pragma once
-
-enum
-{
-    ICON_NONE = -1,
-
-    ICON_ITEM_00 = 0x00,
-    ICON_ITEM_01 = 0x01,
-    ICON_ITEM_02 = 0x02,
-    ICON_ITEM_03 = 0x03,
-    ICON_ITEM_04 = 0x04,
-    ICON_ITEM_05 = 0x05,
-    ICON_ITEM_06 = 0x06,
-    ICON_ITEM_07 = 0x07,
-    ICON_ITEM_08 = 0x08,
-    ICON_ITEM_09 = 0x09,
-    ICON_ITEM_0A = 0x0A,
-    ICON_ITEM_0B = 0x0B,
-    ICON_ITEM_0C = 0x0C,
-    ICON_ITEM_0D = 0x0D,
-    ICON_ITEM_0E = 0x0E,
-    ICON_ITEM_0F = 0x0F,
-    ICON_ITEM_10 = 0x10,
-    ICON_ITEM_11 = 0x11,
-    ICON_ITEM_12 = 0x12,
-    ICON_ITEM_13 = 0x13,
-    ICON_ITEM_14 = 0x14,
-    ICON_ITEM_15 = 0x15,
-    ICON_ITEM_16 = 0x16,
-    ICON_ITEM_17 = 0x17,
-    ICON_ITEM_18 = 0x18,
-    ICON_ITEM_19 = 0x19,
-    ICON_ITEM_1A = 0x1A,
-    ICON_ITEM_1B = 0x1B,
-    ICON_ITEM_1C = 0x1C,
-    ICON_ITEM_1D = 0x1D,
-    ICON_ITEM_1E = 0x1E,
-    ICON_ITEM_1F = 0x1F,
-    ICON_ITEM_20 = 0x20,
-    ICON_ITEM_21 = 0x21,
-    ICON_ITEM_22 = 0x22,
-    ICON_ITEM_23 = 0x23,
-    ICON_ITEM_24 = 0x24,
-    ICON_ITEM_25 = 0x25,
-    ICON_ITEM_26 = 0x26,
-    ICON_ITEM_27 = 0x27,
-    ICON_ITEM_28 = 0x28,
-    ICON_ITEM_29 = 0x29,
-    ICON_ITEM_2A = 0x2A,
-    ICON_ITEM_2B = 0x2B,
-    ICON_ITEM_8D = 0x8D,
-    ICON_ITEM_2C = 0x2C,
-    ICON_ITEM_2D = 0x2D,
-    ICON_ITEM_2E = 0x2E,
-    ICON_ITEM_2F = 0x2F,
-    ICON_ITEM_30 = 0x30,
-    ICON_ITEM_31 = 0x31,
-    ICON_ITEM_32 = 0x32,
-    ICON_ITEM_33 = 0x33,
-    ICON_ITEM_34 = 0x34,
-    ICON_ITEM_35 = 0x35,
-    ICON_ITEM_36 = 0x36,
-    ICON_ITEM_37 = 0x37,
-    ICON_ITEM_38 = 0x38,
-    ICON_ITEM_39 = 0x39,
-    ICON_ITEM_3A = 0x3A,
-    ICON_ITEM_3B = 0x3B,
-    ICON_ITEM_3C = 0x3C,
-    ICON_ITEM_3D = 0x3D,
-    ICON_ITEM_3E = 0x3E,
-    ICON_ITEM_3F = 0x3F,
-    ICON_ITEM_40 = 0x40,
-    ICON_ITEM_41 = 0x41,
-    ICON_ITEM_42 = 0x42,
-    ICON_ITEM_43 = 0x43,
-    ICON_ITEM_44 = 0x44,
-    ICON_ITEM_45 = 0x45,
-    ICON_ITEM_46 = 0x46,
-    ICON_ITEM_47 = 0x47,
-    ICON_ITEM_48 = 0x48,
-    ICON_ITEM_49 = 0x49,
-    ICON_ITEM_4A = 0x4A,
-    ICON_ITEM_4B = 0x4B,
-    ICON_ITEM_4C = 0x4C,
-    ICON_ITEM_4D = 0x4D,
-    ICON_ITEM_4E = 0x4E,
-    ICON_ITEM_4F = 0x4F,
-    ICON_ITEM_50 = 0x50,
-    ICON_ITEM_51 = 0x51,
-    ICON_ITEM_52 = 0x52,
-    ICON_ITEM_53 = 0x53,
-    ICON_ITEM_54 = 0x54,
-    ICON_ITEM_55 = 0x55,
-    ICON_ITEM_56 = 0x56,
-    ICON_ITEM_57 = 0x57,
-    ICON_ITEM_58 = 0x58,
-    ICON_ITEM_59 = 0x59,
-    ICON_ITEM_5A = 0x5A,
-    ICON_ITEM_5B = 0x5B,
-    ICON_ITEM_5C = 0x5C,
-    ICON_ITEM_5D = 0x5D,
-    ICON_ITEM_5E = 0x5E,
-    ICON_ITEM_5F = 0x5F,
-    ICON_ITEM_60 = 0x60,
-    ICON_ITEM_61 = 0x61,
-    ICON_ITEM_62 = 0x62,
-    ICON_ITEM_63 = 0x63,
-    ICON_ITEM_64 = 0x64,
-    ICON_ITEM_65 = 0x65,
-    ICON_ITEM_66 = 0x66,
-    ICON_ITEM_67 = 0x67,
-    ICON_ITEM_68 = 0x68,
-    ICON_ITEM_69 = 0x69,
-    ICON_ITEM_6A = 0x6A,
-    ICON_ITEM_6B = 0x6B,
-    ICON_ITEM_6C = 0x6C,
-    ICON_ITEM_6D = 0x6D,
-    ICON_ITEM_6E = 0x6E,
-    ICON_ITEM_6F = 0x6F,
-
-    ICON_ITEM_KIND_BASE = 0x70,
-
-    ICON_ITEM_78 = 0x78,
-    ICON_ITEM_79 = 0x79,
-
-    ICON_AFFINITY_BASE = 0x7A,
-
-    ICON_AID_MOUNT = 0x81,
-    ICON_AID_PEGASUS = 0x82,
-    ICON_AID_WYVERN = 0x83,
-    ICON_ITEM_84 = 0x84,
-    ICON_ITEM_85 = 0x85,
-    ICON_ITEM_86 = 0x86,
-    ICON_ITEM_88 = 0x88,
-    ICON_ITEM_87 = 0x87,
-    ICON_ITEM_8B = 0x8B,
-    ICON_ITEM_8A = 0x8A,
-    ICON_ITEM_89 = 0x89,
-    ICON_ITEM_8C = 0x8C,
-    ICON_ITEM_8E = 0x8E,
-    ICON_ITEM_8F = 0x8F,
-    ICON_ITEM_90 = 0x90,
-};
diff --git a/include/constants/iids.h b/include/constants/iids.h
deleted file mode 100644
index de223a7..0000000
--- a/include/constants/iids.h
+++ /dev/null
@@ -1,134 +0,0 @@
-#pragma once
-
-enum
-{
-    IID_IRONSWORD = 0x01,
-    IID_IRONBLADE = 0x02,
-    IID_STEELSWORD = 0x03,
-    IID_SILVERSWORD = 0x04,
-    IID_SLIMSWORD = 0x05,
-    IID_POISONSWORD = 0x06,
-    IID_BRAVESWORD = 0x07,
-    IID_LIGHTBRAND = 0x08,
-    IID_DURANDAL = 0x09,
-    IID_ARMORSLAYER = 0x0A,
-    IID_RAPIER = 0x0B,
-    IID_KILLINGEDGE = 0x0C,
-    IID_LANCEREAVER = 0x0D,
-    IID_WODAO = 0x0E,
-    IID_BINDINGBLADE = 0x0F,
-    IID_IRONLANCE = 0x10,
-    IID_STEELLANCE = 0x11,
-    IID_SILVERLANCE = 0x12,
-    IID_SLIMLANCE = 0x13,
-    IID_POISONLANCE = 0x14,
-    IID_BRAVELANCE = 0x15,
-    IID_JAVELIN = 0x16,
-    IID_MALTET = 0x17,
-    IID_HORSESLAYER = 0x18,
-    IID_KILLERLANCE = 0x19,
-    IID_AXEREAVER = 0x1A,
-    IID_IRONAXE = 0x1B,
-    IID_STEELAXE = 0x1C,
-    IID_SILVERAXE = 0x1D,
-    IID_POISONAXE = 0x1E,
-    IID_BRAVEAXE = 0x1F,
-    IID_HANDAXE = 0x20,
-    IID_ARMADS = 0x21,
-    IID_HAMMER = 0x22,
-    IID_KILLERAXE = 0x23,
-    IID_SWORDREAVER = 0x24,
-    IID_DEVILAXE = 0x25,
-    IID_HALBERD = 0x26,
-    IID_IRONBOW = 0x27,
-    IID_STEELBOW = 0x28,
-    IID_SILVERBOW = 0x29,
-    IID_POISONBOW = 0x2A,
-    IID_KILLERBOW = 0x2B,
-    IID_BRAVEBOW = 0x2C,
-    IID_SHORTBOW = 0x2D,
-    IID_LONGBOW = 0x2E,
-    IID_MULAGIR = 0x2F,
-    IID_BALLISTA = 0x30,
-    IID_LONGBALLISTA = 0x31,
-    IID_KILLERBALLISTA = 0x32,
-    IID_FIRE = 0x33,
-    IID_THUNDER = 0x34,
-    IID_FIMBULVETR = 0x35,
-    IID_ELFIRE = 0x36,
-    IID_AIRCALIBUR = 0x37,
-    IID_FENRIR = 0x38,
-    IID_BOLTING = 0x39,
-    IID_FORBLAZE = 0x3A,
-    IID_LIGHTNING = 0x3B,
-    IID_DIVINE = 0x3C,
-    IID_PURGE = 0x3D,
-    IID_AUREOLA = 0x3E,
-    IID_FLUX = 0x3F,
-    IID_NOSFERATU = 0x40,
-    IID_ECLIPSE = 0x41,
-    IID_APOCALYPSE = 0x42,
-    IID_HEALSTAFF = 0x43,
-    IID_MENDSTAFF = 0x44,
-    IID_RECOVERSTAFF = 0x45,
-    IID_PHYSICSTAFF = 0x46,
-    IID_FORTIFYSTAFF = 0x47,
-    IID_WARPSTAFF = 0x48,
-    IID_RESCUESTAFF = 0x49,
-    IID_RESTORESTAFF = 0x4A,
-    IID_SILENCESTAFF = 0x4B,
-    IID_SLEEPSTAFF = 0x4C,
-    IID_TORCHSTAFF = 0x4D,
-    IID_HAMMERNESTAFF = 0x4E,
-    IID_WATCHSTAFF = 0x4F,
-    IID_BERSERKSTAFF = 0x50,
-    IID_UNLOCKSTAFF = 0x51,
-    IID_BARRIERSTAFF = 0x52,
-    IID_FIRESTONE = 0x53,
-    IID_DIVINESTONE = 0x54,
-    IID_DEMONSTONE = 0x55,
-    IID_SECRETBOOK = 0x56,
-    IID_GODDESSICON = 0x57,
-    IID_SERAPHROBE = 0x58,
-    IID_DRACOSHIELD = 0x59,
-    IID_ENERGYRING = 0x5A,
-    IID_SPEEDWING = 0x5B,
-    IID_TALISMAN = 0x5C,
-    IID_BOOTS = 0x5D,
-    IID_BODYRING = 0x5E,
-    IID_HEROCREST = 0x5F,
-    IID_KNIGHTCREST = 0x60,
-    IID_ORIONSBOLT = 0x61,
-    IID_ELYSIANWHIP = 0x62,
-    IID_GUIDINGRING = 0x63,
-    IID_CHESTKEY = 0x64,
-    IID_DOORKEY = 0x65,
-    IID_BRIDGEKEY = 0x66,
-    IID_LOCKPICK = 0x67,
-    IID_VULNERARY = 0x68,
-    IID_ELIXIR = 0x69,
-    IID_PUREWATER = 0x6A,
-    IID_TORCH = 0x6B,
-    IID_ANTITOXIN = 0x6C,
-    IID_MEMBERCARD = 0x6D,
-    IID_SILVERCARD = 0x6E,
-    IID_GOLD = 0x6F,
-    IID_DARKBREATH = 0x70,
-    IID_ECKESACHS = 0x71,
-    IID_STEELBLADE = 0x72,
-    IID_SILVERBLADE = 0x73,
-    IID_ALSSWORD = 0x74,
-    IID_GANTSLANCE = 0x75,
-    IID_TINASSTAFF = 0x76,
-    IID_SAINTSSTAFF = 0x77,
-    IID_WYRMSLAYER = 0x78,
-    IID_WHITEGEM = 0x79,
-    IID_BLUEGEM = 0x7A,
-    IID_REDGEM = 0x7B,
-    IID_DELPHISHIELD = 0x7C,
-    IID_RUNESWORD = 0x7D,
-    IID_SPEAR = 0x7E,
-    IID_TOMAHAWK = 0x7F,
-
-    MAX_IIDS,
-};
diff --git a/include/constants/items.h b/include/constants/items.h
new file mode 100644
index 0000000..01ee874
--- /dev/null
+++ b/include/constants/items.h
@@ -0,0 +1,191 @@
+#pragma once
+
+enum {
+    ITEM_NONE              = 0x00,
+
+    // Swords
+    ITEM_SWORD_IRON        = 0x01,
+    ITEM_SWORD_SLIM        = 0x02,
+    ITEM_SWORD_STEEL       = 0x03,
+    ITEM_SWORD_SILVER      = 0x04,
+    ITEM_BLADE_IRON        = 0x05,
+    ITEM_BLADE_STEEL       = 0x06,
+    ITEM_BLADE_SILVER      = 0x07,
+    ITEM_SWORD_VENIN       = 0x08,
+    ITEM_SWORD_RAPIER      = 0x09,
+    ITEM_SWORD_MKATTI      = 0x0A,
+    ITEM_SWORD_BRAVE       = 0x0B,
+    ITEM_SWORD_SHAMSIR     = 0x0C,
+    ITEM_SWORD_KILLER      = 0x0D,
+    ITEM_SWORD_ARMORSLAYER = 0x0E,
+    ITEM_SWORD_WYRMSLAYER  = 0x0F,
+    ITEM_SWORD_LIGHTBRAND  = 0x10,
+    ITEM_SWORD_RUNESWORD   = 0x11,
+    ITEM_SWORD_LANCEREAVER = 0x12,
+    ITEM_SWORD_ZANBATO     = 0x13,
+
+    // Lances
+    ITEM_LANCE_IRON        = 0x14,
+    ITEM_LANCE_SLIM        = 0x15,
+    ITEM_LANCE_STEEL       = 0x16,
+    ITEM_LANCE_SILVER      = 0x17,
+    ITEM_LANCE_VENIN       = 0x18,
+    ITEM_LANCE_BRAVE       = 0x19,
+    ITEM_LANCE_KILLER      = 0x1A,
+    ITEM_LANCE_HORSESLAYER = 0x1B,
+    ITEM_LANCE_JAVELIN     = 0x1C,
+    ITEM_LANCE_SPEAR       = 0x1D,
+    ITEM_LANCE_AXEREAVER   = 0x1E,
+
+    // Axes
+    ITEM_AXE_IRON          = 0x1F,
+    ITEM_AXE_STEEL         = 0x20,
+    ITEM_AXE_SILVER        = 0x21,
+    ITEM_AXE_VENIN         = 0x22,
+    ITEM_AXE_BRAVE         = 0x23,
+    ITEM_AXE_KILLER        = 0x24,
+    ITEM_AXE_HALBERD       = 0x25,
+    ITEM_AXE_HAMMER        = 0x26,
+    ITEM_AXE_DEVIL         = 0x27,
+    ITEM_AXE_HANDAXE       = 0x28,
+    ITEM_AXE_TOMAHAWK      = 0x29,
+    ITEM_AXE_SWORDREAVER   = 0x2A,
+    ITEM_AXE_SWORDSLAYER   = 0x2B,
+
+    // Bows
+    ITEM_BOW_IRON          = 0x2C,
+    ITEM_BOW_STEEL         = 0x2D,
+    ITEM_BOW_SILVER        = 0x2E,
+    ITEM_BOW_VENIN         = 0x2F,
+    ITEM_BOW_KILLER        = 0x30,
+    ITEM_BOW_BRAVE         = 0x31,
+    ITEM_BOW_SHORTBOW      = 0x32,
+    ITEM_BOW_LONGBOW       = 0x33,
+
+    // Ballistas
+    ITEM_BALLISTA_REGULAR  = 0x34,
+    ITEM_BALLISTA_LONG     = 0x35,
+    ITEM_BALLISTA_KILLER   = 0x36,
+
+    // Anima tomes
+    ITEM_ANIMA_FIRE        = 0x37,
+    ITEM_ANIMA_THUNDER     = 0x38,
+    ITEM_ANIMA_ELFIRE      = 0x39,
+    ITEM_ANIMA_BOLTING     = 0x3A,
+    ITEM_ANIMA_FIMBULVETR  = 0x3B,
+    ITEM_ANIMA_FORBLAZE    = 0x3C,
+    ITEM_ANIMA_EXCALIBUR   = 0x3D,
+
+    // Light tomes
+    ITEM_LIGHT_LIGHTNING   = 0x3E,
+    ITEM_LIGHT_SHINE       = 0x3F,
+    ITEM_LIGHT_DIVINE      = 0x40,
+    ITEM_LIGHT_PURGE       = 0x41,
+    ITEM_LIGHT_AURA        = 0x42,
+    ITEM_LIGHT_LUCE        = 0x43,
+
+    // Dark tomes
+    ITEM_DARK_FLUX         = 0x44,
+    ITEM_DARK_LUNA         = 0x45,
+    ITEM_DARK_NOSFERATU    = 0x46,
+    ITEM_DARK_ECLIPSE      = 0x47,
+    ITEM_DARK_FENRIR       = 0x48,
+    ITEM_DARK_GLEIPNIR     = 0x49,
+
+    // Staves
+    ITEM_STAFF_HEAL        = 0x4A,
+    ITEM_STAFF_MEND        = 0x4B,
+    ITEM_STAFF_RECOVER     = 0x4C,
+    ITEM_STAFF_PHYSIC      = 0x4D,
+    ITEM_STAFF_FORTIFY     = 0x4E,
+    ITEM_STAFF_RESTORE     = 0x4F,
+    ITEM_STAFF_SILENCE     = 0x50,
+    ITEM_STAFF_SLEEP       = 0x51,
+    ITEM_STAFF_BERSERK     = 0x52,
+    ITEM_STAFF_WARP        = 0x53,
+    ITEM_STAFF_RESCUE      = 0x54,
+    ITEM_STAFF_TORCH       = 0x55,
+    ITEM_STAFF_REPAIR      = 0x56,
+    ITEM_STAFF_UNLOCK      = 0x57,
+    ITEM_STAFF_BARRIER     = 0x58,
+
+    // Random dragon axe
+    ITEM_AXE_DRAGON        = 0x59,
+
+    // Stat boosters
+    ITEM_BOOSTER_HP        = 0x5A,
+    ITEM_BOOSTER_POW       = 0x5B,
+    ITEM_BOOSTER_SKL       = 0x5C,
+    ITEM_BOOSTER_SPD       = 0x5D,
+    ITEM_BOOSTER_LCK       = 0x5E,
+    ITEM_BOOSTER_DEF       = 0x5F,
+    ITEM_BOOSTER_RES       = 0x60,
+    ITEM_BOOSTER_MOV       = 0x61,
+    ITEM_BOOSTER_CON       = 0x62,
+
+    // Promotion items
+    ITEM_HEROCREST         = 0x63,
+    ITEM_KNIGHTCREST       = 0x64,
+    ITEM_ORIONSBOLT        = 0x65,
+    ITEM_ELYSIANWHIP       = 0x66,
+    ITEM_GUIDINGRING       = 0x67,
+
+    // items
+    ITEM_CHESTKEY          = 0x68,
+    ITEM_DOORKEY           = 0x69,
+    ITEM_LOCKPICK          = 0x6A,
+    ITEM_VULNERARY         = 0x6B,
+    ITEM_ELIXIR            = 0x6C,
+    ITEM_PUREWATER         = 0x6D,
+    ITEM_ANTITOXIN         = 0x6E,
+    ITEM_TORCH             = 0x6F,
+    ITEM_DELPHISHIELD      = 0x70,
+    ITEM_MEMBERCARD        = 0x71,
+    ITEM_SILVERCARD        = 0x72,
+    ITEM_WHITEGEM          = 0x73,
+    ITEM_BLUEGEM           = 0x74,
+    ITEM_REDGEM            = 0x75,
+
+    // From here onwards organization is a myth
+    ITEM_GOLD              = 0x76,
+    ITEM_LANCE_REGINLEIF   = 0x77,
+    ITEM_CHESTKEY_BUNDLE   = 0x78,
+    ITEM_MINE              = 0x79,
+    ITEM_LIGHTRUNE         = 0x7A,
+    ITEM_HOPLON_SHIELD     = 0x7B,
+    ITEM_FILLAS_MIGHT      = 0x7C,
+    ITEM_NINISS_GRACE      = 0x7D,
+    ITEM_THORS_IRE         = 0x7E,
+    ITEM_SETS_LITANY       = 0x7F,
+    ITEM_EMBLEM_BLADE      = 0x80,
+    ITEM_EMBLEM_LANCE      = 0x81,
+    ITEM_EMBLEM_AXE        = 0x82,
+    ITEM_EMBLEM_BOW        = 0x83,
+    ITEM_SWORD_DURANDAL    = 0x83,
+    ITEM_AXE_ARMADS        = 0x85,
+    ITEM_LIGHT_AUREOLA     = 0x86,
+    ITEM_EARTH_SEAL        = 0x87,
+    ITEM_AFAS_DROPS        = 0x88,
+    ITEM_HEAVEN_SEAL       = 0x89,
+    ITEM_EMBLEM_SEAL       = 0x8A,
+    ITEM_FELL_CONTRACT     = 0x8B,
+    ITEM_SWORD_SOL_KATTI   = 0x8C,
+    ITEM_AXE_WOLF_BEIL     = 0x8D,
+    ITEM_DARK_ERESHKIGAL   = 0x8E,
+    ITEM_ANIMA_FLAMETONGUE = 0x8F,
+    ITEM_SWORD_REGAL_BLADE = 0x90,
+    ITEM_LANCE_REX_HASTA   = 0x91,
+    ITEM_AXE_BASILIKOS     = 0x92,
+    ITEM_BOW_RIENFLECHE    = 0x93,
+    ITEM_LANCE_HEAVYSPEAR  = 0x94,
+    ITEM_LANCE_SHORTSPEAR  = 0x95,
+    ITEM_OCEANSEAL         = 0x96,
+    ITEM_3000G             = 0x97,
+    ITEM_5000G             = 0x98,
+    ITEM_SWORD_WINDSWORD   = 0x99,
+    ITEM_VULNERARY_2       = 0x9A, // TODO: figure out what this really is
+    ITEM_VULNERARY_3       = 0x9B,
+    ITEM_VULNERARY_4       = 0x9C,
+    ITEM_DANCE             = 0x9D,
+    ITEM_PLAY              = 0x9E
+};
diff --git a/include/constants/jids.h b/include/constants/jids.h
deleted file mode 100644
index 4aba468..0000000
--- a/include/constants/jids.h
+++ /dev/null
@@ -1,85 +0,0 @@
-#pragma once
-
-enum
-{
-    JID_NONE,
-    JID_ROY,
-    JID_MERCENARY,
-    JID_MERCENARY_F,
-    JID_HERO,
-    JID_HERO_F,
-    JID_MYRMIDON,
-    JID_MYRMIDON_F,
-    JID_SWORDMASTER,
-    JID_SWORDMASTER_F,
-    JID_FIGHTER,
-    JID_WARRIOR,
-    JID_ARMOR,
-    JID_ARMOR_F,
-    JID_GENERAL,
-    JID_GENERAL_F,
-    JID_ARCHER,
-    JID_ARCHER_F,
-    JID_SNIPER,
-    JID_SNIPER_F,
-    JID_PRIEST,
-    JID_CLERIC,
-    JID_BISHOP,
-    JID_BISHOP_F,
-    JID_MAGE,
-    JID_MAGE_F,
-    JID_SAGE,
-    JID_SAGE_F,
-    JID_SHAMAN,
-    JID_SHAMAN_F,
-    JID_DRUID,
-    JID_DRUID_F,
-    JID_CAVALIER,
-    JID_CAVALIER_F,
-    JID_PALADIN,
-    JID_PALADIN_F,
-    JID_TROUBADOUR,
-    JID_VALKYRIE,
-    JID_NOMAD,
-    JID_NOMAD_F,
-    JID_NOMADTROOPER,
-    JID_NOMADTROOPER_F,
-    JID_PEGASUSKNIGHT,
-    JID_FALCONKNIGHT,
-    JID_WYVERNRIDER,
-    JID_WYVERNRIDER_F,
-    JID_WYVERNLORD,
-    JID_WYVERNLORD_F,
-    JID_SOLDIER,
-    JID_BRIGAND,
-    JID_PIRATE,
-    JID_BERSERKER,
-    JID_THIEF,
-    JID_THIEF_F,
-    JID_BARD,
-    JID_DANCER,
-    JID_MANAKETE,
-    JID_MANAKETE_F,
-    JID_FIREDRAGON,
-    JID_DIVINEDRAGON,
-    JID_DEMONDRAGON,
-    JID_KING,
-    JID_CIVILIAN,
-    JID_CIVILIAN_F,
-    JID_CHILD,
-    JID_CHILD_F,
-    JID_SUPPLY,
-    JID_ROY_PROMOTED,
-    JID_ARCHER_BALLISTA,
-    JID_ARCHER_LONGBALLISTA,
-    JID_ARCHER_KILLERBALLISTA,
-    JID_BALLISTA,
-    JID_LONGBALLISTA,
-    JID_KILLERBALLISTA,
-    JID_DISMOUNTED,
-    JID_DISMOUNTED_F,
-
-    MAX_JIDS,
-
-    JID_OBSTACLE = JID_ROY,
-};
diff --git a/include/constants/msg.h b/include/constants/msg.h
deleted file mode 100644
index fd2023a..0000000
--- a/include/constants/msg.h
+++ /dev/null
@@ -1,3351 +0,0 @@
-#pragma once
-
-// TODO: generate off tool
-
-enum
-{
-    MSG_000 = 0x000,
-    MSG_001 = 0x001,
-    MSG_002 = 0x002,
-    MSG_003 = 0x003,
-    MSG_004 = 0x004,
-    MSG_005 = 0x005,
-    MSG_006 = 0x006,
-    MSG_007 = 0x007,
-    MSG_008 = 0x008,
-    MSG_009 = 0x009,
-    MSG_00A = 0x00A,
-    MSG_00B = 0x00B,
-    MSG_00C = 0x00C,
-    MSG_00D = 0x00D,
-    MSG_00E = 0x00E,
-    MSG_00F = 0x00F,
-    MSG_010 = 0x010,
-    MSG_011 = 0x011,
-    MSG_012 = 0x012,
-    MSG_013 = 0x013,
-    MSG_014 = 0x014,
-    MSG_015 = 0x015,
-    MSG_016 = 0x016,
-    MSG_017 = 0x017,
-    MSG_018 = 0x018,
-    MSG_019 = 0x019,
-    MSG_01A = 0x01A,
-    MSG_01B = 0x01B,
-    MSG_01C = 0x01C,
-    MSG_01D = 0x01D,
-    MSG_01E = 0x01E,
-    MSG_01F = 0x01F,
-    MSG_020 = 0x020,
-    MSG_021 = 0x021,
-    MSG_022 = 0x022,
-    MSG_023 = 0x023,
-    MSG_024 = 0x024,
-    MSG_025 = 0x025,
-    MSG_026 = 0x026,
-    MSG_027 = 0x027,
-    MSG_028 = 0x028,
-    MSG_029 = 0x029,
-    MSG_02A = 0x02A,
-    MSG_02B = 0x02B,
-    MSG_02C = 0x02C,
-    MSG_02D = 0x02D,
-    MSG_02E = 0x02E,
-    MSG_02F = 0x02F,
-    MSG_030 = 0x030,
-    MSG_031 = 0x031,
-    MSG_032 = 0x032,
-    MSG_033 = 0x033,
-    MSG_034 = 0x034,
-    MSG_035 = 0x035,
-    MSG_036 = 0x036,
-    MSG_037 = 0x037,
-    MSG_038 = 0x038,
-    MSG_039 = 0x039,
-    MSG_03A = 0x03A,
-    MSG_03B = 0x03B,
-    MSG_03C = 0x03C,
-    MSG_03D = 0x03D,
-    MSG_03E = 0x03E,
-    MSG_03F = 0x03F,
-    MSG_040 = 0x040,
-    MSG_041 = 0x041,
-    MSG_042 = 0x042,
-    MSG_043 = 0x043,
-    MSG_044 = 0x044,
-    MSG_045 = 0x045,
-    MSG_046 = 0x046,
-    MSG_047 = 0x047,
-    MSG_048 = 0x048,
-    MSG_049 = 0x049,
-    MSG_04A = 0x04A,
-    MSG_04B = 0x04B,
-    MSG_04C = 0x04C,
-    MSG_04D = 0x04D,
-    MSG_04E = 0x04E,
-    MSG_04F = 0x04F,
-    MSG_050 = 0x050,
-    MSG_051 = 0x051,
-    MSG_052 = 0x052,
-    MSG_053 = 0x053,
-    MSG_054 = 0x054,
-    MSG_055 = 0x055,
-    MSG_056 = 0x056,
-    MSG_057 = 0x057,
-    MSG_058 = 0x058,
-    MSG_059 = 0x059,
-    MSG_05A = 0x05A,
-    MSG_05B = 0x05B,
-    MSG_05C = 0x05C,
-    MSG_05D = 0x05D,
-    MSG_05E = 0x05E,
-    MSG_05F = 0x05F,
-    MSG_060 = 0x060,
-    MSG_061 = 0x061,
-    MSG_062 = 0x062,
-    MSG_063 = 0x063,
-    MSG_064 = 0x064,
-    MSG_065 = 0x065,
-    MSG_066 = 0x066,
-    MSG_067 = 0x067,
-    MSG_068 = 0x068,
-    MSG_069 = 0x069,
-    MSG_06A = 0x06A,
-    MSG_06B = 0x06B,
-    MSG_06C = 0x06C,
-    MSG_06D = 0x06D,
-    MSG_06E = 0x06E,
-    MSG_06F = 0x06F,
-    MSG_070 = 0x070,
-    MSG_071 = 0x071,
-    MSG_072 = 0x072,
-    MSG_073 = 0x073,
-    MSG_074 = 0x074,
-    MSG_075 = 0x075,
-    MSG_076 = 0x076,
-    MSG_077 = 0x077,
-    MSG_078 = 0x078,
-    MSG_079 = 0x079,
-    MSG_07A = 0x07A,
-    MSG_07B = 0x07B,
-    MSG_07C = 0x07C,
-    MSG_07D = 0x07D,
-    MSG_07E = 0x07E,
-    MSG_07F = 0x07F,
-    MSG_080 = 0x080,
-    MSG_081 = 0x081,
-    MSG_082 = 0x082,
-    MSG_083 = 0x083,
-    MSG_084 = 0x084,
-    MSG_085 = 0x085,
-    MSG_086 = 0x086,
-    MSG_087 = 0x087,
-    MSG_088 = 0x088,
-    MSG_089 = 0x089,
-    MSG_08A = 0x08A,
-    MSG_08B = 0x08B,
-    MSG_08C = 0x08C,
-    MSG_08D = 0x08D,
-    MSG_08E = 0x08E,
-    MSG_08F = 0x08F,
-    MSG_090 = 0x090,
-    MSG_091 = 0x091,
-    MSG_092 = 0x092,
-    MSG_093 = 0x093,
-    MSG_094 = 0x094,
-    MSG_095 = 0x095,
-    MSG_096 = 0x096,
-    MSG_097 = 0x097,
-    MSG_098 = 0x098,
-    MSG_099 = 0x099,
-    MSG_09A = 0x09A,
-    MSG_09B = 0x09B,
-    MSG_09C = 0x09C,
-    MSG_09D = 0x09D,
-    MSG_09E = 0x09E,
-    MSG_09F = 0x09F,
-    MSG_0A0 = 0x0A0,
-    MSG_0A1 = 0x0A1,
-    MSG_0A2 = 0x0A2,
-    MSG_0A3 = 0x0A3,
-    MSG_0A4 = 0x0A4,
-    MSG_0A5 = 0x0A5,
-    MSG_0A6 = 0x0A6,
-    MSG_0A7 = 0x0A7,
-    MSG_0A8 = 0x0A8,
-    MSG_0A9 = 0x0A9,
-    MSG_0AA = 0x0AA,
-    MSG_0AB = 0x0AB,
-    MSG_0AC = 0x0AC,
-    MSG_0AD = 0x0AD,
-    MSG_0AE = 0x0AE,
-    MSG_0AF = 0x0AF,
-    MSG_0B0 = 0x0B0,
-    MSG_0B1 = 0x0B1,
-    MSG_0B2 = 0x0B2,
-    MSG_0B3 = 0x0B3,
-    MSG_0B4 = 0x0B4,
-    MSG_0B5 = 0x0B5,
-    MSG_0B6 = 0x0B6,
-    MSG_0B7 = 0x0B7,
-    MSG_0B8 = 0x0B8,
-    MSG_0B9 = 0x0B9,
-    MSG_0BA = 0x0BA,
-    MSG_0BB = 0x0BB,
-    MSG_0BC = 0x0BC,
-    MSG_0BD = 0x0BD,
-    MSG_0BE = 0x0BE,
-    MSG_0BF = 0x0BF,
-    MSG_0C0 = 0x0C0,
-    MSG_0C1 = 0x0C1,
-    MSG_0C2 = 0x0C2,
-    MSG_0C3 = 0x0C3,
-    MSG_0C4 = 0x0C4,
-    MSG_0C5 = 0x0C5,
-    MSG_0C6 = 0x0C6,
-    MSG_0C7 = 0x0C7,
-    MSG_0C8 = 0x0C8,
-    MSG_0C9 = 0x0C9,
-    MSG_0CA = 0x0CA,
-    MSG_0CB = 0x0CB,
-    MSG_0CC = 0x0CC,
-    MSG_0CD = 0x0CD,
-    MSG_0CE = 0x0CE,
-    MSG_0CF = 0x0CF,
-    MSG_0D0 = 0x0D0,
-    MSG_0D1 = 0x0D1,
-    MSG_0D2 = 0x0D2,
-    MSG_0D3 = 0x0D3,
-    MSG_0D4 = 0x0D4,
-    MSG_0D5 = 0x0D5,
-    MSG_0D6 = 0x0D6,
-    MSG_0D7 = 0x0D7,
-    MSG_0D8 = 0x0D8,
-    MSG_0D9 = 0x0D9,
-    MSG_0DA = 0x0DA,
-    MSG_0DB = 0x0DB,
-    MSG_0DC = 0x0DC,
-    MSG_0DD = 0x0DD,
-    MSG_0DE = 0x0DE,
-    MSG_0DF = 0x0DF,
-    MSG_0E0 = 0x0E0,
-    MSG_0E1 = 0x0E1,
-    MSG_0E2 = 0x0E2,
-    MSG_0E3 = 0x0E3,
-    MSG_0E4 = 0x0E4,
-    MSG_0E5 = 0x0E5,
-    MSG_0E6 = 0x0E6,
-    MSG_0E7 = 0x0E7,
-    MSG_0E8 = 0x0E8,
-    MSG_0E9 = 0x0E9,
-    MSG_0EA = 0x0EA,
-    MSG_0EB = 0x0EB,
-    MSG_0EC = 0x0EC,
-    MSG_0ED = 0x0ED,
-    MSG_0EE = 0x0EE,
-    MSG_0EF = 0x0EF,
-    MSG_0F0 = 0x0F0,
-    MSG_0F1 = 0x0F1,
-    MSG_0F2 = 0x0F2,
-    MSG_0F3 = 0x0F3,
-    MSG_0F4 = 0x0F4,
-    MSG_0F5 = 0x0F5,
-    MSG_0F6 = 0x0F6,
-    MSG_0F7 = 0x0F7,
-    MSG_0F8 = 0x0F8,
-    MSG_0F9 = 0x0F9,
-    MSG_0FA = 0x0FA,
-    MSG_0FB = 0x0FB,
-    MSG_0FC = 0x0FC,
-    MSG_0FD = 0x0FD,
-    MSG_0FE = 0x0FE,
-    MSG_0FF = 0x0FF,
-    MSG_100 = 0x100,
-    MSG_101 = 0x101,
-    MSG_102 = 0x102,
-    MSG_103 = 0x103,
-    MSG_104 = 0x104,
-    MSG_105 = 0x105,
-    MSG_106 = 0x106,
-    MSG_107 = 0x107,
-    MSG_108 = 0x108,
-    MSG_109 = 0x109,
-    MSG_10A = 0x10A,
-    MSG_10B = 0x10B,
-    MSG_10C = 0x10C,
-    MSG_10D = 0x10D,
-    MSG_10E = 0x10E,
-    MSG_10F = 0x10F,
-    MSG_110 = 0x110,
-    MSG_111 = 0x111,
-    MSG_112 = 0x112,
-    MSG_113 = 0x113,
-    MSG_114 = 0x114,
-    MSG_115 = 0x115,
-    MSG_116 = 0x116,
-    MSG_117 = 0x117,
-    MSG_118 = 0x118,
-    MSG_119 = 0x119,
-    MSG_11A = 0x11A,
-    MSG_11B = 0x11B,
-    MSG_11C = 0x11C,
-    MSG_11D = 0x11D,
-    MSG_11E = 0x11E,
-    MSG_11F = 0x11F,
-    MSG_120 = 0x120,
-    MSG_121 = 0x121,
-    MSG_122 = 0x122,
-    MSG_123 = 0x123,
-    MSG_124 = 0x124,
-    MSG_125 = 0x125,
-    MSG_126 = 0x126,
-    MSG_127 = 0x127,
-    MSG_128 = 0x128,
-    MSG_129 = 0x129,
-    MSG_12A = 0x12A,
-    MSG_12B = 0x12B,
-    MSG_12C = 0x12C,
-    MSG_12D = 0x12D,
-    MSG_12E = 0x12E,
-    MSG_12F = 0x12F,
-    MSG_130 = 0x130,
-    MSG_131 = 0x131,
-    MSG_132 = 0x132,
-    MSG_133 = 0x133,
-    MSG_134 = 0x134,
-    MSG_135 = 0x135,
-    MSG_136 = 0x136,
-    MSG_137 = 0x137,
-    MSG_138 = 0x138,
-    MSG_139 = 0x139,
-    MSG_13A = 0x13A,
-    MSG_13B = 0x13B,
-    MSG_13C = 0x13C,
-    MSG_13D = 0x13D,
-    MSG_13E = 0x13E,
-    MSG_13F = 0x13F,
-    MSG_140 = 0x140,
-    MSG_141 = 0x141,
-    MSG_142 = 0x142,
-    MSG_143 = 0x143,
-    MSG_144 = 0x144,
-    MSG_145 = 0x145,
-    MSG_146 = 0x146,
-    MSG_147 = 0x147,
-    MSG_148 = 0x148,
-    MSG_149 = 0x149,
-    MSG_14A = 0x14A,
-    MSG_14B = 0x14B,
-    MSG_14C = 0x14C,
-    MSG_14D = 0x14D,
-    MSG_14E = 0x14E,
-    MSG_14F = 0x14F,
-    MSG_150 = 0x150,
-    MSG_151 = 0x151,
-    MSG_152 = 0x152,
-    MSG_153 = 0x153,
-    MSG_154 = 0x154,
-    MSG_155 = 0x155,
-    MSG_156 = 0x156,
-    MSG_157 = 0x157,
-    MSG_158 = 0x158,
-    MSG_159 = 0x159,
-    MSG_15A = 0x15A,
-    MSG_15B = 0x15B,
-    MSG_15C = 0x15C,
-    MSG_15D = 0x15D,
-    MSG_15E = 0x15E,
-    MSG_15F = 0x15F,
-    MSG_160 = 0x160,
-    MSG_161 = 0x161,
-    MSG_162 = 0x162,
-    MSG_163 = 0x163,
-    MSG_164 = 0x164,
-    MSG_165 = 0x165,
-    MSG_166 = 0x166,
-    MSG_167 = 0x167,
-    MSG_168 = 0x168,
-    MSG_169 = 0x169,
-    MSG_16A = 0x16A,
-    MSG_16B = 0x16B,
-    MSG_16C = 0x16C,
-    MSG_16D = 0x16D,
-    MSG_16E = 0x16E,
-    MSG_16F = 0x16F,
-    MSG_170 = 0x170,
-    MSG_171 = 0x171,
-    MSG_172 = 0x172,
-    MSG_173 = 0x173,
-    MSG_174 = 0x174,
-    MSG_175 = 0x175,
-    MSG_176 = 0x176,
-    MSG_177 = 0x177,
-    MSG_178 = 0x178,
-    MSG_179 = 0x179,
-    MSG_17A = 0x17A,
-    MSG_17B = 0x17B,
-    MSG_17C = 0x17C,
-    MSG_17D = 0x17D,
-    MSG_17E = 0x17E,
-    MSG_17F = 0x17F,
-    MSG_180 = 0x180,
-    MSG_181 = 0x181,
-    MSG_182 = 0x182,
-    MSG_183 = 0x183,
-    MSG_184 = 0x184,
-    MSG_185 = 0x185,
-    MSG_186 = 0x186,
-    MSG_187 = 0x187,
-    MSG_188 = 0x188,
-    MSG_189 = 0x189,
-    MSG_18A = 0x18A,
-    MSG_18B = 0x18B,
-    MSG_18C = 0x18C,
-    MSG_18D = 0x18D,
-    MSG_18E = 0x18E,
-    MSG_18F = 0x18F,
-    MSG_190 = 0x190,
-    MSG_191 = 0x191,
-    MSG_192 = 0x192,
-    MSG_193 = 0x193,
-    MSG_194 = 0x194,
-    MSG_195 = 0x195,
-    MSG_196 = 0x196,
-    MSG_197 = 0x197,
-    MSG_198 = 0x198,
-    MSG_199 = 0x199,
-    MSG_19A = 0x19A,
-    MSG_19B = 0x19B,
-    MSG_19C = 0x19C,
-    MSG_19D = 0x19D,
-    MSG_19E = 0x19E,
-    MSG_19F = 0x19F,
-    MSG_1A0 = 0x1A0,
-    MSG_1A1 = 0x1A1,
-    MSG_1A2 = 0x1A2,
-    MSG_1A3 = 0x1A3,
-    MSG_1A4 = 0x1A4,
-    MSG_1A5 = 0x1A5,
-    MSG_1A6 = 0x1A6,
-    MSG_1A7 = 0x1A7,
-    MSG_1A8 = 0x1A8,
-    MSG_1A9 = 0x1A9,
-    MSG_1AA = 0x1AA,
-    MSG_1AB = 0x1AB,
-    MSG_1AC = 0x1AC,
-    MSG_1AD = 0x1AD,
-    MSG_1AE = 0x1AE,
-    MSG_1AF = 0x1AF,
-    MSG_1B0 = 0x1B0,
-    MSG_1B1 = 0x1B1,
-    MSG_1B2 = 0x1B2,
-    MSG_1B3 = 0x1B3,
-    MSG_1B4 = 0x1B4,
-    MSG_1B5 = 0x1B5,
-    MSG_1B6 = 0x1B6,
-    MSG_1B7 = 0x1B7,
-    MSG_1B8 = 0x1B8,
-    MSG_1B9 = 0x1B9,
-    MSG_1BA = 0x1BA,
-    MSG_1BB = 0x1BB,
-    MSG_1BC = 0x1BC,
-    MSG_1BD = 0x1BD,
-    MSG_1BE = 0x1BE,
-    MSG_1BF = 0x1BF,
-    MSG_1C0 = 0x1C0,
-    MSG_1C1 = 0x1C1,
-    MSG_1C2 = 0x1C2,
-    MSG_1C3 = 0x1C3,
-    MSG_1C4 = 0x1C4,
-    MSG_1C5 = 0x1C5,
-    MSG_1C6 = 0x1C6,
-    MSG_1C7 = 0x1C7,
-    MSG_1C8 = 0x1C8,
-    MSG_1C9 = 0x1C9,
-    MSG_1CA = 0x1CA,
-    MSG_1CB = 0x1CB,
-    MSG_1CC = 0x1CC,
-    MSG_1CD = 0x1CD,
-    MSG_1CE = 0x1CE,
-    MSG_1CF = 0x1CF,
-    MSG_1D0 = 0x1D0,
-    MSG_1D1 = 0x1D1,
-    MSG_1D2 = 0x1D2,
-    MSG_1D3 = 0x1D3,
-    MSG_1D4 = 0x1D4,
-    MSG_1D5 = 0x1D5,
-    MSG_1D6 = 0x1D6,
-    MSG_1D7 = 0x1D7,
-    MSG_1D8 = 0x1D8,
-    MSG_1D9 = 0x1D9,
-    MSG_1DA = 0x1DA,
-    MSG_1DB = 0x1DB,
-    MSG_1DC = 0x1DC,
-    MSG_1DD = 0x1DD,
-    MSG_1DE = 0x1DE,
-    MSG_1DF = 0x1DF,
-    MSG_1E0 = 0x1E0,
-    MSG_1E1 = 0x1E1,
-    MSG_1E2 = 0x1E2,
-    MSG_1E3 = 0x1E3,
-    MSG_1E4 = 0x1E4,
-    MSG_1E5 = 0x1E5,
-    MSG_1E6 = 0x1E6,
-    MSG_1E7 = 0x1E7,
-    MSG_1E8 = 0x1E8,
-    MSG_1E9 = 0x1E9,
-    MSG_1EA = 0x1EA,
-    MSG_1EB = 0x1EB,
-    MSG_1EC = 0x1EC,
-    MSG_1ED = 0x1ED,
-    MSG_1EE = 0x1EE,
-    MSG_1EF = 0x1EF,
-    MSG_1F0 = 0x1F0,
-    MSG_1F1 = 0x1F1,
-    MSG_1F2 = 0x1F2,
-    MSG_1F3 = 0x1F3,
-    MSG_1F4 = 0x1F4,
-    MSG_1F5 = 0x1F5,
-    MSG_1F6 = 0x1F6,
-    MSG_1F7 = 0x1F7,
-    MSG_1F8 = 0x1F8,
-    MSG_1F9 = 0x1F9,
-    MSG_1FA = 0x1FA,
-    MSG_1FB = 0x1FB,
-    MSG_1FC = 0x1FC,
-    MSG_1FD = 0x1FD,
-    MSG_1FE = 0x1FE,
-    MSG_1FF = 0x1FF,
-    MSG_200 = 0x200,
-    MSG_201 = 0x201,
-    MSG_202 = 0x202,
-    MSG_203 = 0x203,
-    MSG_204 = 0x204,
-    MSG_205 = 0x205,
-    MSG_206 = 0x206,
-    MSG_207 = 0x207,
-    MSG_208 = 0x208,
-    MSG_209 = 0x209,
-    MSG_20A = 0x20A,
-    MSG_20B = 0x20B,
-    MSG_20C = 0x20C,
-    MSG_20D = 0x20D,
-    MSG_20E = 0x20E,
-    MSG_20F = 0x20F,
-    MSG_210 = 0x210,
-    MSG_211 = 0x211,
-    MSG_212 = 0x212,
-    MSG_213 = 0x213,
-    MSG_214 = 0x214,
-    MSG_215 = 0x215,
-    MSG_216 = 0x216,
-    MSG_217 = 0x217,
-    MSG_218 = 0x218,
-    MSG_219 = 0x219,
-    MSG_21A = 0x21A,
-    MSG_21B = 0x21B,
-    MSG_21C = 0x21C,
-    MSG_21D = 0x21D,
-    MSG_21E = 0x21E,
-    MSG_21F = 0x21F,
-    MSG_220 = 0x220,
-    MSG_221 = 0x221,
-    MSG_222 = 0x222,
-    MSG_223 = 0x223,
-    MSG_224 = 0x224,
-    MSG_225 = 0x225,
-    MSG_226 = 0x226,
-    MSG_227 = 0x227,
-    MSG_228 = 0x228,
-    MSG_229 = 0x229,
-    MSG_22A = 0x22A,
-    MSG_22B = 0x22B,
-    MSG_22C = 0x22C,
-    MSG_22D = 0x22D,
-    MSG_22E = 0x22E,
-    MSG_22F = 0x22F,
-    MSG_230 = 0x230,
-    MSG_231 = 0x231,
-    MSG_232 = 0x232,
-    MSG_233 = 0x233,
-    MSG_234 = 0x234,
-    MSG_235 = 0x235,
-    MSG_236 = 0x236,
-    MSG_237 = 0x237,
-    MSG_238 = 0x238,
-    MSG_239 = 0x239,
-    MSG_23A = 0x23A,
-    MSG_23B = 0x23B,
-    MSG_23C = 0x23C,
-    MSG_23D = 0x23D,
-    MSG_23E = 0x23E,
-    MSG_23F = 0x23F,
-    MSG_240 = 0x240,
-    MSG_241 = 0x241,
-    MSG_242 = 0x242,
-    MSG_243 = 0x243,
-    MSG_244 = 0x244,
-    MSG_245 = 0x245,
-    MSG_246 = 0x246,
-    MSG_247 = 0x247,
-    MSG_248 = 0x248,
-    MSG_249 = 0x249,
-    MSG_24A = 0x24A,
-    MSG_24B = 0x24B,
-    MSG_24C = 0x24C,
-    MSG_24D = 0x24D,
-    MSG_24E = 0x24E,
-    MSG_24F = 0x24F,
-    MSG_250 = 0x250,
-    MSG_251 = 0x251,
-    MSG_252 = 0x252,
-    MSG_253 = 0x253,
-    MSG_254 = 0x254,
-    MSG_255 = 0x255,
-    MSG_256 = 0x256,
-    MSG_257 = 0x257,
-    MSG_258 = 0x258,
-    MSG_259 = 0x259,
-    MSG_25A = 0x25A,
-    MSG_25B = 0x25B,
-    MSG_25C = 0x25C,
-    MSG_25D = 0x25D,
-    MSG_25E = 0x25E,
-    MSG_25F = 0x25F,
-    MSG_260 = 0x260,
-    MSG_261 = 0x261,
-    MSG_262 = 0x262,
-    MSG_263 = 0x263,
-    MSG_264 = 0x264,
-    MSG_265 = 0x265,
-    MSG_266 = 0x266,
-    MSG_267 = 0x267,
-    MSG_268 = 0x268,
-    MSG_269 = 0x269,
-    MSG_26A = 0x26A,
-    MSG_26B = 0x26B,
-    MSG_26C = 0x26C,
-    MSG_26D = 0x26D,
-    MSG_26E = 0x26E,
-    MSG_26F = 0x26F,
-    MSG_270 = 0x270,
-    MSG_271 = 0x271,
-    MSG_272 = 0x272,
-    MSG_273 = 0x273,
-    MSG_274 = 0x274,
-    MSG_275 = 0x275,
-    MSG_276 = 0x276,
-    MSG_277 = 0x277,
-    MSG_278 = 0x278,
-    MSG_279 = 0x279,
-    MSG_27A = 0x27A,
-    MSG_27B = 0x27B,
-    MSG_27C = 0x27C,
-    MSG_27D = 0x27D,
-    MSG_27E = 0x27E,
-    MSG_27F = 0x27F,
-    MSG_280 = 0x280,
-    MSG_281 = 0x281,
-    MSG_282 = 0x282,
-    MSG_283 = 0x283,
-    MSG_284 = 0x284,
-    MSG_285 = 0x285,
-    MSG_286 = 0x286,
-    MSG_287 = 0x287,
-    MSG_288 = 0x288,
-    MSG_289 = 0x289,
-    MSG_28A = 0x28A,
-    MSG_28B = 0x28B,
-    MSG_28C = 0x28C,
-    MSG_28D = 0x28D,
-    MSG_28E = 0x28E,
-    MSG_28F = 0x28F,
-    MSG_290 = 0x290,
-    MSG_291 = 0x291,
-    MSG_292 = 0x292,
-    MSG_293 = 0x293,
-    MSG_294 = 0x294,
-    MSG_295 = 0x295,
-    MSG_296 = 0x296,
-    MSG_297 = 0x297,
-    MSG_298 = 0x298,
-    MSG_299 = 0x299,
-    MSG_29A = 0x29A,
-    MSG_29B = 0x29B,
-    MSG_29C = 0x29C,
-    MSG_29D = 0x29D,
-    MSG_29E = 0x29E,
-    MSG_29F = 0x29F,
-    MSG_2A0 = 0x2A0,
-    MSG_2A1 = 0x2A1,
-    MSG_2A2 = 0x2A2,
-    MSG_2A3 = 0x2A3,
-    MSG_2A4 = 0x2A4,
-    MSG_2A5 = 0x2A5,
-    MSG_2A6 = 0x2A6,
-    MSG_2A7 = 0x2A7,
-    MSG_2A8 = 0x2A8,
-    MSG_2A9 = 0x2A9,
-    MSG_2AA = 0x2AA,
-    MSG_2AB = 0x2AB,
-    MSG_2AC = 0x2AC,
-    MSG_2AD = 0x2AD,
-    MSG_2AE = 0x2AE,
-    MSG_2AF = 0x2AF,
-    MSG_2B0 = 0x2B0,
-    MSG_2B1 = 0x2B1,
-    MSG_2B2 = 0x2B2,
-    MSG_2B3 = 0x2B3,
-    MSG_2B4 = 0x2B4,
-    MSG_2B5 = 0x2B5,
-    MSG_2B6 = 0x2B6,
-    MSG_2B7 = 0x2B7,
-    MSG_2B8 = 0x2B8,
-    MSG_2B9 = 0x2B9,
-    MSG_2BA = 0x2BA,
-    MSG_2BB = 0x2BB,
-    MSG_2BC = 0x2BC,
-    MSG_2BD = 0x2BD,
-    MSG_2BE = 0x2BE,
-    MSG_2BF = 0x2BF,
-    MSG_2C0 = 0x2C0,
-    MSG_2C1 = 0x2C1,
-    MSG_2C2 = 0x2C2,
-    MSG_2C3 = 0x2C3,
-    MSG_2C4 = 0x2C4,
-    MSG_2C5 = 0x2C5,
-    MSG_2C6 = 0x2C6,
-    MSG_2C7 = 0x2C7,
-    MSG_2C8 = 0x2C8,
-    MSG_2C9 = 0x2C9,
-    MSG_2CA = 0x2CA,
-    MSG_2CB = 0x2CB,
-    MSG_2CC = 0x2CC,
-    MSG_2CD = 0x2CD,
-    MSG_2CE = 0x2CE,
-    MSG_2CF = 0x2CF,
-    MSG_2D0 = 0x2D0,
-    MSG_2D1 = 0x2D1,
-    MSG_2D2 = 0x2D2,
-    MSG_2D3 = 0x2D3,
-    MSG_2D4 = 0x2D4,
-    MSG_2D5 = 0x2D5,
-    MSG_2D6 = 0x2D6,
-    MSG_2D7 = 0x2D7,
-    MSG_2D8 = 0x2D8,
-    MSG_2D9 = 0x2D9,
-    MSG_2DA = 0x2DA,
-    MSG_2DB = 0x2DB,
-    MSG_2DC = 0x2DC,
-    MSG_2DD = 0x2DD,
-    MSG_2DE = 0x2DE,
-    MSG_2DF = 0x2DF,
-    MSG_2E0 = 0x2E0,
-    MSG_2E1 = 0x2E1,
-    MSG_2E2 = 0x2E2,
-    MSG_2E3 = 0x2E3,
-    MSG_2E4 = 0x2E4,
-    MSG_2E5 = 0x2E5,
-    MSG_2E6 = 0x2E6,
-    MSG_2E7 = 0x2E7,
-    MSG_2E8 = 0x2E8,
-    MSG_2E9 = 0x2E9,
-    MSG_2EA = 0x2EA,
-    MSG_2EB = 0x2EB,
-    MSG_2EC = 0x2EC,
-    MSG_2ED = 0x2ED,
-    MSG_2EE = 0x2EE,
-    MSG_2EF = 0x2EF,
-    MSG_2F0 = 0x2F0,
-    MSG_2F1 = 0x2F1,
-    MSG_2F2 = 0x2F2,
-    MSG_2F3 = 0x2F3,
-    MSG_2F4 = 0x2F4,
-    MSG_2F5 = 0x2F5,
-    MSG_2F6 = 0x2F6,
-    MSG_2F7 = 0x2F7,
-    MSG_2F8 = 0x2F8,
-    MSG_2F9 = 0x2F9,
-    MSG_2FA = 0x2FA,
-    MSG_2FB = 0x2FB,
-    MSG_2FC = 0x2FC,
-    MSG_2FD = 0x2FD,
-    MSG_2FE = 0x2FE,
-    MSG_2FF = 0x2FF,
-    MSG_300 = 0x300,
-    MSG_301 = 0x301,
-    MSG_302 = 0x302,
-    MSG_303 = 0x303,
-    MSG_304 = 0x304,
-    MSG_305 = 0x305,
-    MSG_306 = 0x306,
-    MSG_307 = 0x307,
-    MSG_308 = 0x308,
-    MSG_309 = 0x309,
-    MSG_30A = 0x30A,
-    MSG_30B = 0x30B,
-    MSG_30C = 0x30C,
-    MSG_30D = 0x30D,
-    MSG_30E = 0x30E,
-    MSG_30F = 0x30F,
-    MSG_310 = 0x310,
-    MSG_311 = 0x311,
-    MSG_312 = 0x312,
-    MSG_313 = 0x313,
-    MSG_314 = 0x314,
-    MSG_315 = 0x315,
-    MSG_316 = 0x316,
-    MSG_317 = 0x317,
-    MSG_318 = 0x318,
-    MSG_319 = 0x319,
-    MSG_31A = 0x31A,
-    MSG_31B = 0x31B,
-    MSG_31C = 0x31C,
-    MSG_31D = 0x31D,
-    MSG_31E = 0x31E,
-    MSG_31F = 0x31F,
-    MSG_320 = 0x320,
-    MSG_321 = 0x321,
-    MSG_322 = 0x322,
-    MSG_323 = 0x323,
-    MSG_324 = 0x324,
-    MSG_325 = 0x325,
-    MSG_326 = 0x326,
-    MSG_327 = 0x327,
-    MSG_328 = 0x328,
-    MSG_329 = 0x329,
-    MSG_32A = 0x32A,
-    MSG_32B = 0x32B,
-    MSG_32C = 0x32C,
-    MSG_32D = 0x32D,
-    MSG_32E = 0x32E,
-    MSG_32F = 0x32F,
-    MSG_330 = 0x330,
-    MSG_331 = 0x331,
-    MSG_332 = 0x332,
-    MSG_333 = 0x333,
-    MSG_334 = 0x334,
-    MSG_335 = 0x335,
-    MSG_336 = 0x336,
-    MSG_337 = 0x337,
-    MSG_338 = 0x338,
-    MSG_339 = 0x339,
-    MSG_33A = 0x33A,
-    MSG_33B = 0x33B,
-    MSG_33C = 0x33C,
-    MSG_33D = 0x33D,
-    MSG_33E = 0x33E,
-    MSG_33F = 0x33F,
-    MSG_340 = 0x340,
-    MSG_341 = 0x341,
-    MSG_342 = 0x342,
-    MSG_343 = 0x343,
-    MSG_344 = 0x344,
-    MSG_345 = 0x345,
-    MSG_346 = 0x346,
-    MSG_347 = 0x347,
-    MSG_348 = 0x348,
-    MSG_349 = 0x349,
-    MSG_34A = 0x34A,
-    MSG_34B = 0x34B,
-    MSG_34C = 0x34C,
-    MSG_34D = 0x34D,
-    MSG_34E = 0x34E,
-    MSG_34F = 0x34F,
-    MSG_350 = 0x350,
-    MSG_351 = 0x351,
-    MSG_352 = 0x352,
-    MSG_353 = 0x353,
-    MSG_354 = 0x354,
-    MSG_355 = 0x355,
-    MSG_356 = 0x356,
-    MSG_357 = 0x357,
-    MSG_358 = 0x358,
-    MSG_359 = 0x359,
-    MSG_35A = 0x35A,
-    MSG_35B = 0x35B,
-    MSG_35C = 0x35C,
-    MSG_35D = 0x35D,
-    MSG_35E = 0x35E,
-    MSG_35F = 0x35F,
-    MSG_360 = 0x360,
-    MSG_361 = 0x361,
-    MSG_362 = 0x362,
-    MSG_363 = 0x363,
-    MSG_364 = 0x364,
-    MSG_365 = 0x365,
-    MSG_366 = 0x366,
-    MSG_367 = 0x367,
-    MSG_368 = 0x368,
-    MSG_369 = 0x369,
-    MSG_36A = 0x36A,
-    MSG_36B = 0x36B,
-    MSG_36C = 0x36C,
-    MSG_36D = 0x36D,
-    MSG_36E = 0x36E,
-    MSG_36F = 0x36F,
-    MSG_370 = 0x370,
-    MSG_371 = 0x371,
-    MSG_372 = 0x372,
-    MSG_373 = 0x373,
-    MSG_374 = 0x374,
-    MSG_375 = 0x375,
-    MSG_376 = 0x376,
-    MSG_377 = 0x377,
-    MSG_378 = 0x378,
-    MSG_379 = 0x379,
-    MSG_37A = 0x37A,
-    MSG_37B = 0x37B,
-    MSG_37C = 0x37C,
-    MSG_37D = 0x37D,
-    MSG_37E = 0x37E,
-    MSG_37F = 0x37F,
-    MSG_380 = 0x380,
-    MSG_381 = 0x381,
-    MSG_382 = 0x382,
-    MSG_383 = 0x383,
-    MSG_384 = 0x384,
-    MSG_385 = 0x385,
-    MSG_386 = 0x386,
-    MSG_387 = 0x387,
-    MSG_388 = 0x388,
-    MSG_389 = 0x389,
-    MSG_38A = 0x38A,
-    MSG_38B = 0x38B,
-    MSG_38C = 0x38C,
-    MSG_38D = 0x38D,
-    MSG_38E = 0x38E,
-    MSG_38F = 0x38F,
-    MSG_390 = 0x390,
-    MSG_391 = 0x391,
-    MSG_392 = 0x392,
-    MSG_393 = 0x393,
-    MSG_394 = 0x394,
-    MSG_395 = 0x395,
-    MSG_396 = 0x396,
-    MSG_397 = 0x397,
-    MSG_398 = 0x398,
-    MSG_399 = 0x399,
-    MSG_39A = 0x39A,
-    MSG_39B = 0x39B,
-    MSG_39C = 0x39C,
-    MSG_39D = 0x39D,
-    MSG_39E = 0x39E,
-    MSG_39F = 0x39F,
-    MSG_3A0 = 0x3A0,
-    MSG_3A1 = 0x3A1,
-    MSG_3A2 = 0x3A2,
-    MSG_3A3 = 0x3A3,
-    MSG_3A4 = 0x3A4,
-    MSG_3A5 = 0x3A5,
-    MSG_3A6 = 0x3A6,
-    MSG_3A7 = 0x3A7,
-    MSG_3A8 = 0x3A8,
-    MSG_3A9 = 0x3A9,
-    MSG_3AA = 0x3AA,
-    MSG_3AB = 0x3AB,
-    MSG_3AC = 0x3AC,
-    MSG_3AD = 0x3AD,
-    MSG_3AE = 0x3AE,
-    MSG_3AF = 0x3AF,
-    MSG_3B0 = 0x3B0,
-    MSG_3B1 = 0x3B1,
-    MSG_3B2 = 0x3B2,
-    MSG_3B3 = 0x3B3,
-    MSG_3B4 = 0x3B4,
-    MSG_3B5 = 0x3B5,
-    MSG_3B6 = 0x3B6,
-    MSG_3B7 = 0x3B7,
-    MSG_3B8 = 0x3B8,
-    MSG_3B9 = 0x3B9,
-    MSG_3BA = 0x3BA,
-    MSG_3BB = 0x3BB,
-    MSG_3BC = 0x3BC,
-    MSG_3BD = 0x3BD,
-    MSG_3BE = 0x3BE,
-    MSG_3BF = 0x3BF,
-    MSG_3C0 = 0x3C0,
-    MSG_3C1 = 0x3C1,
-    MSG_3C2 = 0x3C2,
-    MSG_3C3 = 0x3C3,
-    MSG_3C4 = 0x3C4,
-    MSG_3C5 = 0x3C5,
-    MSG_3C6 = 0x3C6,
-    MSG_3C7 = 0x3C7,
-    MSG_3C8 = 0x3C8,
-    MSG_3C9 = 0x3C9,
-    MSG_3CA = 0x3CA,
-    MSG_3CB = 0x3CB,
-    MSG_3CC = 0x3CC,
-    MSG_3CD = 0x3CD,
-    MSG_3CE = 0x3CE,
-    MSG_3CF = 0x3CF,
-    MSG_3D0 = 0x3D0,
-    MSG_3D1 = 0x3D1,
-    MSG_3D2 = 0x3D2,
-    MSG_3D3 = 0x3D3,
-    MSG_3D4 = 0x3D4,
-    MSG_3D5 = 0x3D5,
-    MSG_3D6 = 0x3D6,
-    MSG_3D7 = 0x3D7,
-    MSG_3D8 = 0x3D8,
-    MSG_3D9 = 0x3D9,
-    MSG_3DA = 0x3DA,
-    MSG_3DB = 0x3DB,
-    MSG_3DC = 0x3DC,
-    MSG_3DD = 0x3DD,
-    MSG_3DE = 0x3DE,
-    MSG_3DF = 0x3DF,
-    MSG_3E0 = 0x3E0,
-    MSG_3E1 = 0x3E1,
-    MSG_3E2 = 0x3E2,
-    MSG_3E3 = 0x3E3,
-    MSG_3E4 = 0x3E4,
-    MSG_3E5 = 0x3E5,
-    MSG_3E6 = 0x3E6,
-    MSG_3E7 = 0x3E7,
-    MSG_3E8 = 0x3E8,
-    MSG_3E9 = 0x3E9,
-    MSG_3EA = 0x3EA,
-    MSG_3EB = 0x3EB,
-    MSG_3EC = 0x3EC,
-    MSG_3ED = 0x3ED,
-    MSG_3EE = 0x3EE,
-    MSG_3EF = 0x3EF,
-    MSG_3F0 = 0x3F0,
-    MSG_3F1 = 0x3F1,
-    MSG_3F2 = 0x3F2,
-    MSG_3F3 = 0x3F3,
-    MSG_3F4 = 0x3F4,
-    MSG_3F5 = 0x3F5,
-    MSG_3F6 = 0x3F6,
-    MSG_3F7 = 0x3F7,
-    MSG_3F8 = 0x3F8,
-    MSG_3F9 = 0x3F9,
-    MSG_3FA = 0x3FA,
-    MSG_3FB = 0x3FB,
-    MSG_3FC = 0x3FC,
-    MSG_3FD = 0x3FD,
-    MSG_3FE = 0x3FE,
-    MSG_3FF = 0x3FF,
-    MSG_400 = 0x400,
-    MSG_401 = 0x401,
-    MSG_402 = 0x402,
-    MSG_403 = 0x403,
-    MSG_404 = 0x404,
-    MSG_405 = 0x405,
-    MSG_406 = 0x406,
-    MSG_407 = 0x407,
-    MSG_408 = 0x408,
-    MSG_409 = 0x409,
-    MSG_40A = 0x40A,
-    MSG_40B = 0x40B,
-    MSG_40C = 0x40C,
-    MSG_40D = 0x40D,
-    MSG_40E = 0x40E,
-    MSG_40F = 0x40F,
-    MSG_410 = 0x410,
-    MSG_411 = 0x411,
-    MSG_412 = 0x412,
-    MSG_413 = 0x413,
-    MSG_414 = 0x414,
-    MSG_415 = 0x415,
-    MSG_416 = 0x416,
-    MSG_417 = 0x417,
-    MSG_418 = 0x418,
-    MSG_419 = 0x419,
-    MSG_41A = 0x41A,
-    MSG_41B = 0x41B,
-    MSG_41C = 0x41C,
-    MSG_41D = 0x41D,
-    MSG_41E = 0x41E,
-    MSG_41F = 0x41F,
-    MSG_420 = 0x420,
-    MSG_421 = 0x421,
-    MSG_422 = 0x422,
-    MSG_423 = 0x423,
-    MSG_424 = 0x424,
-    MSG_425 = 0x425,
-    MSG_426 = 0x426,
-    MSG_427 = 0x427,
-    MSG_428 = 0x428,
-    MSG_429 = 0x429,
-    MSG_42A = 0x42A,
-    MSG_42B = 0x42B,
-    MSG_42C = 0x42C,
-    MSG_42D = 0x42D,
-    MSG_42E = 0x42E,
-    MSG_42F = 0x42F,
-    MSG_430 = 0x430,
-    MSG_431 = 0x431,
-    MSG_432 = 0x432,
-    MSG_433 = 0x433,
-    MSG_434 = 0x434,
-    MSG_435 = 0x435,
-    MSG_436 = 0x436,
-    MSG_437 = 0x437,
-    MSG_438 = 0x438,
-    MSG_439 = 0x439,
-    MSG_43A = 0x43A,
-    MSG_43B = 0x43B,
-    MSG_43C = 0x43C,
-    MSG_43D = 0x43D,
-    MSG_43E = 0x43E,
-    MSG_43F = 0x43F,
-    MSG_440 = 0x440,
-    MSG_441 = 0x441,
-    MSG_442 = 0x442,
-    MSG_443 = 0x443,
-    MSG_444 = 0x444,
-    MSG_445 = 0x445,
-    MSG_446 = 0x446,
-    MSG_447 = 0x447,
-    MSG_448 = 0x448,
-    MSG_449 = 0x449,
-    MSG_44A = 0x44A,
-    MSG_44B = 0x44B,
-    MSG_44C = 0x44C,
-    MSG_44D = 0x44D,
-    MSG_44E = 0x44E,
-    MSG_44F = 0x44F,
-    MSG_450 = 0x450,
-    MSG_451 = 0x451,
-    MSG_452 = 0x452,
-    MSG_453 = 0x453,
-    MSG_454 = 0x454,
-    MSG_455 = 0x455,
-    MSG_456 = 0x456,
-    MSG_457 = 0x457,
-    MSG_458 = 0x458,
-    MSG_459 = 0x459,
-    MSG_45A = 0x45A,
-    MSG_45B = 0x45B,
-    MSG_45C = 0x45C,
-    MSG_45D = 0x45D,
-    MSG_45E = 0x45E,
-    MSG_45F = 0x45F,
-    MSG_460 = 0x460,
-    MSG_461 = 0x461,
-    MSG_462 = 0x462,
-    MSG_463 = 0x463,
-    MSG_464 = 0x464,
-    MSG_465 = 0x465,
-    MSG_466 = 0x466,
-    MSG_467 = 0x467,
-    MSG_468 = 0x468,
-    MSG_469 = 0x469,
-    MSG_46A = 0x46A,
-    MSG_46B = 0x46B,
-    MSG_46C = 0x46C,
-    MSG_46D = 0x46D,
-    MSG_46E = 0x46E,
-    MSG_46F = 0x46F,
-    MSG_470 = 0x470,
-    MSG_471 = 0x471,
-    MSG_472 = 0x472,
-    MSG_473 = 0x473,
-    MSG_474 = 0x474,
-    MSG_475 = 0x475,
-    MSG_476 = 0x476,
-    MSG_477 = 0x477,
-    MSG_478 = 0x478,
-    MSG_479 = 0x479,
-    MSG_47A = 0x47A,
-    MSG_47B = 0x47B,
-    MSG_47C = 0x47C,
-    MSG_47D = 0x47D,
-    MSG_47E = 0x47E,
-    MSG_47F = 0x47F,
-    MSG_480 = 0x480,
-    MSG_481 = 0x481,
-    MSG_482 = 0x482,
-    MSG_483 = 0x483,
-    MSG_484 = 0x484,
-    MSG_485 = 0x485,
-    MSG_486 = 0x486,
-    MSG_487 = 0x487,
-    MSG_488 = 0x488,
-    MSG_489 = 0x489,
-    MSG_48A = 0x48A,
-    MSG_48B = 0x48B,
-    MSG_48C = 0x48C,
-    MSG_48D = 0x48D,
-    MSG_48E = 0x48E,
-    MSG_48F = 0x48F,
-    MSG_490 = 0x490,
-    MSG_491 = 0x491,
-    MSG_492 = 0x492,
-    MSG_493 = 0x493,
-    MSG_494 = 0x494,
-    MSG_495 = 0x495,
-    MSG_496 = 0x496,
-    MSG_497 = 0x497,
-    MSG_498 = 0x498,
-    MSG_499 = 0x499,
-    MSG_49A = 0x49A,
-    MSG_49B = 0x49B,
-    MSG_49C = 0x49C,
-    MSG_49D = 0x49D,
-    MSG_49E = 0x49E,
-    MSG_49F = 0x49F,
-    MSG_4A0 = 0x4A0,
-    MSG_4A1 = 0x4A1,
-    MSG_4A2 = 0x4A2,
-    MSG_4A3 = 0x4A3,
-    MSG_4A4 = 0x4A4,
-    MSG_4A5 = 0x4A5,
-    MSG_4A6 = 0x4A6,
-    MSG_4A7 = 0x4A7,
-    MSG_4A8 = 0x4A8,
-    MSG_4A9 = 0x4A9,
-    MSG_4AA = 0x4AA,
-    MSG_4AB = 0x4AB,
-    MSG_4AC = 0x4AC,
-    MSG_4AD = 0x4AD,
-    MSG_4AE = 0x4AE,
-    MSG_4AF = 0x4AF,
-    MSG_4B0 = 0x4B0,
-    MSG_4B1 = 0x4B1,
-    MSG_4B2 = 0x4B2,
-    MSG_4B3 = 0x4B3,
-    MSG_4B4 = 0x4B4,
-    MSG_4B5 = 0x4B5,
-    MSG_4B6 = 0x4B6,
-    MSG_4B7 = 0x4B7,
-    MSG_4B8 = 0x4B8,
-    MSG_4B9 = 0x4B9,
-    MSG_4BA = 0x4BA,
-    MSG_4BB = 0x4BB,
-    MSG_4BC = 0x4BC,
-    MSG_4BD = 0x4BD,
-    MSG_4BE = 0x4BE,
-    MSG_4BF = 0x4BF,
-    MSG_4C0 = 0x4C0,
-    MSG_4C1 = 0x4C1,
-    MSG_4C2 = 0x4C2,
-    MSG_4C3 = 0x4C3,
-    MSG_4C4 = 0x4C4,
-    MSG_4C5 = 0x4C5,
-    MSG_4C6 = 0x4C6,
-    MSG_4C7 = 0x4C7,
-    MSG_4C8 = 0x4C8,
-    MSG_4C9 = 0x4C9,
-    MSG_4CA = 0x4CA,
-    MSG_4CB = 0x4CB,
-    MSG_4CC = 0x4CC,
-    MSG_4CD = 0x4CD,
-    MSG_4CE = 0x4CE,
-    MSG_4CF = 0x4CF,
-    MSG_4D0 = 0x4D0,
-    MSG_4D1 = 0x4D1,
-    MSG_4D2 = 0x4D2,
-    MSG_4D3 = 0x4D3,
-    MSG_4D4 = 0x4D4,
-    MSG_4D5 = 0x4D5,
-    MSG_4D6 = 0x4D6,
-    MSG_4D7 = 0x4D7,
-    MSG_4D8 = 0x4D8,
-    MSG_4D9 = 0x4D9,
-    MSG_4DA = 0x4DA,
-    MSG_4DB = 0x4DB,
-    MSG_4DC = 0x4DC,
-    MSG_4DD = 0x4DD,
-    MSG_4DE = 0x4DE,
-    MSG_4DF = 0x4DF,
-    MSG_4E0 = 0x4E0,
-    MSG_4E1 = 0x4E1,
-    MSG_4E2 = 0x4E2,
-    MSG_4E3 = 0x4E3,
-    MSG_4E4 = 0x4E4,
-    MSG_4E5 = 0x4E5,
-    MSG_4E6 = 0x4E6,
-    MSG_4E7 = 0x4E7,
-    MSG_4E8 = 0x4E8,
-    MSG_4E9 = 0x4E9,
-    MSG_4EA = 0x4EA,
-    MSG_4EB = 0x4EB,
-    MSG_4EC = 0x4EC,
-    MSG_4ED = 0x4ED,
-    MSG_4EE = 0x4EE,
-    MSG_4EF = 0x4EF,
-    MSG_4F0 = 0x4F0,
-    MSG_4F1 = 0x4F1,
-    MSG_4F2 = 0x4F2,
-    MSG_4F3 = 0x4F3,
-    MSG_4F4 = 0x4F4,
-    MSG_4F5 = 0x4F5,
-    MSG_4F6 = 0x4F6,
-    MSG_4F7 = 0x4F7,
-    MSG_4F8 = 0x4F8,
-    MSG_4F9 = 0x4F9,
-    MSG_4FA = 0x4FA,
-    MSG_4FB = 0x4FB,
-    MSG_4FC = 0x4FC,
-    MSG_4FD = 0x4FD,
-    MSG_4FE = 0x4FE,
-    MSG_4FF = 0x4FF,
-    MSG_500 = 0x500,
-    MSG_501 = 0x501,
-    MSG_502 = 0x502,
-    MSG_503 = 0x503,
-    MSG_504 = 0x504,
-    MSG_505 = 0x505,
-    MSG_506 = 0x506,
-    MSG_507 = 0x507,
-    MSG_508 = 0x508,
-    MSG_509 = 0x509,
-    MSG_50A = 0x50A,
-    MSG_50B = 0x50B,
-    MSG_50C = 0x50C,
-    MSG_50D = 0x50D,
-    MSG_50E = 0x50E,
-    MSG_50F = 0x50F,
-    MSG_510 = 0x510,
-    MSG_511 = 0x511,
-    MSG_512 = 0x512,
-    MSG_513 = 0x513,
-    MSG_514 = 0x514,
-    MSG_515 = 0x515,
-    MSG_516 = 0x516,
-    MSG_517 = 0x517,
-    MSG_518 = 0x518,
-    MSG_519 = 0x519,
-    MSG_51A = 0x51A,
-    MSG_51B = 0x51B,
-    MSG_51C = 0x51C,
-    MSG_51D = 0x51D,
-    MSG_51E = 0x51E,
-    MSG_51F = 0x51F,
-    MSG_520 = 0x520,
-    MSG_521 = 0x521,
-    MSG_522 = 0x522,
-    MSG_523 = 0x523,
-    MSG_524 = 0x524,
-    MSG_525 = 0x525,
-    MSG_526 = 0x526,
-    MSG_527 = 0x527,
-    MSG_528 = 0x528,
-    MSG_529 = 0x529,
-    MSG_52A = 0x52A,
-    MSG_52B = 0x52B,
-    MSG_52C = 0x52C,
-    MSG_52D = 0x52D,
-    MSG_52E = 0x52E,
-    MSG_52F = 0x52F,
-    MSG_530 = 0x530,
-    MSG_531 = 0x531,
-    MSG_532 = 0x532,
-    MSG_533 = 0x533,
-    MSG_534 = 0x534,
-    MSG_535 = 0x535,
-    MSG_536 = 0x536,
-    MSG_537 = 0x537,
-    MSG_538 = 0x538,
-    MSG_539 = 0x539,
-    MSG_53A = 0x53A,
-    MSG_53B = 0x53B,
-    MSG_53C = 0x53C,
-    MSG_53D = 0x53D,
-    MSG_53E = 0x53E,
-    MSG_53F = 0x53F,
-    MSG_540 = 0x540,
-    MSG_541 = 0x541,
-    MSG_542 = 0x542,
-    MSG_543 = 0x543,
-    MSG_544 = 0x544,
-    MSG_545 = 0x545,
-    MSG_546 = 0x546,
-    MSG_547 = 0x547,
-    MSG_548 = 0x548,
-    MSG_549 = 0x549,
-    MSG_54A = 0x54A,
-    MSG_54B = 0x54B,
-    MSG_54C = 0x54C,
-    MSG_54D = 0x54D,
-    MSG_54E = 0x54E,
-    MSG_54F = 0x54F,
-    MSG_550 = 0x550,
-    MSG_551 = 0x551,
-    MSG_552 = 0x552,
-    MSG_553 = 0x553,
-    MSG_554 = 0x554,
-    MSG_555 = 0x555,
-    MSG_556 = 0x556,
-    MSG_557 = 0x557,
-    MSG_558 = 0x558,
-    MSG_559 = 0x559,
-    MSG_55A = 0x55A,
-    MSG_55B = 0x55B,
-    MSG_55C = 0x55C,
-    MSG_55D = 0x55D,
-    MSG_55E = 0x55E,
-    MSG_55F = 0x55F,
-    MSG_560 = 0x560,
-    MSG_561 = 0x561,
-    MSG_562 = 0x562,
-    MSG_563 = 0x563,
-    MSG_564 = 0x564,
-    MSG_565 = 0x565,
-    MSG_566 = 0x566,
-    MSG_567 = 0x567,
-    MSG_568 = 0x568,
-    MSG_569 = 0x569,
-    MSG_56A = 0x56A,
-    MSG_56B = 0x56B,
-    MSG_56C = 0x56C,
-    MSG_56D = 0x56D,
-    MSG_56E = 0x56E,
-    MSG_56F = 0x56F,
-    MSG_570 = 0x570,
-    MSG_571 = 0x571,
-    MSG_572 = 0x572,
-    MSG_573 = 0x573,
-    MSG_574 = 0x574,
-    MSG_575 = 0x575,
-    MSG_576 = 0x576,
-    MSG_577 = 0x577,
-    MSG_578 = 0x578,
-    MSG_579 = 0x579,
-    MSG_57A = 0x57A,
-    MSG_57B = 0x57B,
-    MSG_57C = 0x57C,
-    MSG_57D = 0x57D,
-    MSG_57E = 0x57E,
-    MSG_57F = 0x57F,
-    MSG_580 = 0x580,
-    MSG_581 = 0x581,
-    MSG_582 = 0x582,
-    MSG_583 = 0x583,
-    MSG_584 = 0x584,
-    MSG_585 = 0x585,
-    MSG_586 = 0x586,
-    MSG_587 = 0x587,
-    MSG_588 = 0x588,
-    MSG_589 = 0x589,
-    MSG_58A = 0x58A,
-    MSG_58B = 0x58B,
-    MSG_58C = 0x58C,
-    MSG_58D = 0x58D,
-    MSG_58E = 0x58E,
-    MSG_58F = 0x58F,
-    MSG_590 = 0x590,
-    MSG_591 = 0x591,
-    MSG_592 = 0x592,
-    MSG_593 = 0x593,
-    MSG_594 = 0x594,
-    MSG_595 = 0x595,
-    MSG_596 = 0x596,
-    MSG_597 = 0x597,
-    MSG_598 = 0x598,
-    MSG_599 = 0x599,
-    MSG_59A = 0x59A,
-    MSG_59B = 0x59B,
-    MSG_59C = 0x59C,
-    MSG_59D = 0x59D,
-    MSG_59E = 0x59E,
-    MSG_59F = 0x59F,
-    MSG_5A0 = 0x5A0,
-    MSG_5A1 = 0x5A1,
-    MSG_5A2 = 0x5A2,
-    MSG_5A3 = 0x5A3,
-    MSG_5A4 = 0x5A4,
-    MSG_5A5 = 0x5A5,
-    MSG_5A6 = 0x5A6,
-    MSG_5A7 = 0x5A7,
-    MSG_5A8 = 0x5A8,
-    MSG_5A9 = 0x5A9,
-    MSG_5AA = 0x5AA,
-    MSG_5AB = 0x5AB,
-    MSG_5AC = 0x5AC,
-    MSG_5AD = 0x5AD,
-    MSG_5AE = 0x5AE,
-    MSG_5AF = 0x5AF,
-    MSG_5B0 = 0x5B0,
-    MSG_5B1 = 0x5B1,
-    MSG_5B2 = 0x5B2,
-    MSG_5B3 = 0x5B3,
-    MSG_5B4 = 0x5B4,
-    MSG_5B5 = 0x5B5,
-    MSG_5B6 = 0x5B6,
-    MSG_5B7 = 0x5B7,
-    MSG_5B8 = 0x5B8,
-    MSG_5B9 = 0x5B9,
-    MSG_5BA = 0x5BA,
-    MSG_5BB = 0x5BB,
-    MSG_5BC = 0x5BC,
-    MSG_5BD = 0x5BD,
-    MSG_5BE = 0x5BE,
-    MSG_5BF = 0x5BF,
-    MSG_5C0 = 0x5C0,
-    MSG_5C1 = 0x5C1,
-    MSG_5C2 = 0x5C2,
-    MSG_5C3 = 0x5C3,
-    MSG_5C4 = 0x5C4,
-    MSG_5C5 = 0x5C5,
-    MSG_5C6 = 0x5C6,
-    MSG_5C7 = 0x5C7,
-    MSG_5C8 = 0x5C8,
-    MSG_5C9 = 0x5C9,
-    MSG_5CA = 0x5CA,
-    MSG_5CB = 0x5CB,
-    MSG_5CC = 0x5CC,
-    MSG_5CD = 0x5CD,
-    MSG_5CE = 0x5CE,
-    MSG_5CF = 0x5CF,
-    MSG_5D0 = 0x5D0,
-    MSG_5D1 = 0x5D1,
-    MSG_5D2 = 0x5D2,
-    MSG_5D3 = 0x5D3,
-    MSG_5D4 = 0x5D4,
-    MSG_5D5 = 0x5D5,
-    MSG_5D6 = 0x5D6,
-    MSG_5D7 = 0x5D7,
-    MSG_5D8 = 0x5D8,
-    MSG_5D9 = 0x5D9,
-    MSG_5DA = 0x5DA,
-    MSG_5DB = 0x5DB,
-    MSG_5DC = 0x5DC,
-    MSG_5DD = 0x5DD,
-    MSG_5DE = 0x5DE,
-    MSG_5DF = 0x5DF,
-    MSG_5E0 = 0x5E0,
-    MSG_5E1 = 0x5E1,
-    MSG_5E2 = 0x5E2,
-    MSG_5E3 = 0x5E3,
-    MSG_5E4 = 0x5E4,
-    MSG_5E5 = 0x5E5,
-    MSG_5E6 = 0x5E6,
-    MSG_5E7 = 0x5E7,
-    MSG_5E8 = 0x5E8,
-    MSG_5E9 = 0x5E9,
-    MSG_5EA = 0x5EA,
-    MSG_5EB = 0x5EB,
-    MSG_5EC = 0x5EC,
-    MSG_5ED = 0x5ED,
-    MSG_5EE = 0x5EE,
-    MSG_5EF = 0x5EF,
-    MSG_5F0 = 0x5F0,
-    MSG_5F1 = 0x5F1,
-    MSG_5F2 = 0x5F2,
-    MSG_5F3 = 0x5F3,
-    MSG_5F4 = 0x5F4,
-    MSG_5F5 = 0x5F5,
-    MSG_5F6 = 0x5F6,
-    MSG_5F7 = 0x5F7,
-    MSG_5F8 = 0x5F8,
-    MSG_5F9 = 0x5F9,
-    MSG_5FA = 0x5FA,
-    MSG_5FB = 0x5FB,
-    MSG_5FC = 0x5FC,
-    MSG_5FD = 0x5FD,
-    MSG_5FE = 0x5FE,
-    MSG_5FF = 0x5FF,
-    MSG_600 = 0x600,
-    MSG_601 = 0x601,
-    MSG_602 = 0x602,
-    MSG_603 = 0x603,
-    MSG_604 = 0x604,
-    MSG_605 = 0x605,
-    MSG_606 = 0x606,
-    MSG_607 = 0x607,
-    MSG_608 = 0x608,
-    MSG_609 = 0x609,
-    MSG_60A = 0x60A,
-    MSG_60B = 0x60B,
-    MSG_60C = 0x60C,
-    MSG_60D = 0x60D,
-    MSG_60E = 0x60E,
-    MSG_60F = 0x60F,
-    MSG_610 = 0x610,
-    MSG_611 = 0x611,
-    MSG_612 = 0x612,
-    MSG_613 = 0x613,
-    MSG_614 = 0x614,
-    MSG_615 = 0x615,
-    MSG_616 = 0x616,
-    MSG_617 = 0x617,
-    MSG_618 = 0x618,
-    MSG_619 = 0x619,
-    MSG_61A = 0x61A,
-    MSG_61B = 0x61B,
-    MSG_61C = 0x61C,
-    MSG_61D = 0x61D,
-    MSG_61E = 0x61E,
-    MSG_61F = 0x61F,
-    MSG_620 = 0x620,
-    MSG_621 = 0x621,
-    MSG_622 = 0x622,
-    MSG_623 = 0x623,
-    MSG_624 = 0x624,
-    MSG_625 = 0x625,
-    MSG_626 = 0x626,
-    MSG_627 = 0x627,
-    MSG_628 = 0x628,
-    MSG_629 = 0x629,
-    MSG_62A = 0x62A,
-    MSG_62B = 0x62B,
-    MSG_62C = 0x62C,
-    MSG_62D = 0x62D,
-    MSG_62E = 0x62E,
-    MSG_62F = 0x62F,
-    MSG_630 = 0x630,
-    MSG_631 = 0x631,
-    MSG_632 = 0x632,
-    MSG_633 = 0x633,
-    MSG_634 = 0x634,
-    MSG_635 = 0x635,
-    MSG_636 = 0x636,
-    MSG_637 = 0x637,
-    MSG_638 = 0x638,
-    MSG_639 = 0x639,
-    MSG_63A = 0x63A,
-    MSG_63B = 0x63B,
-    MSG_63C = 0x63C,
-    MSG_63D = 0x63D,
-    MSG_63E = 0x63E,
-    MSG_63F = 0x63F,
-    MSG_640 = 0x640,
-    MSG_641 = 0x641,
-    MSG_642 = 0x642,
-    MSG_643 = 0x643,
-    MSG_644 = 0x644,
-    MSG_645 = 0x645,
-    MSG_646 = 0x646,
-    MSG_647 = 0x647,
-    MSG_648 = 0x648,
-    MSG_649 = 0x649,
-    MSG_64A = 0x64A,
-    MSG_64B = 0x64B,
-    MSG_64C = 0x64C,
-    MSG_64D = 0x64D,
-    MSG_64E = 0x64E,
-    MSG_64F = 0x64F,
-    MSG_650 = 0x650,
-    MSG_651 = 0x651,
-    MSG_652 = 0x652,
-    MSG_653 = 0x653,
-    MSG_654 = 0x654,
-    MSG_655 = 0x655,
-    MSG_656 = 0x656,
-    MSG_657 = 0x657,
-    MSG_658 = 0x658,
-    MSG_659 = 0x659,
-    MSG_65A = 0x65A,
-    MSG_65B = 0x65B,
-    MSG_65C = 0x65C,
-    MSG_65D = 0x65D,
-    MSG_65E = 0x65E,
-    MSG_65F = 0x65F,
-    MSG_660 = 0x660,
-    MSG_661 = 0x661,
-    MSG_662 = 0x662,
-    MSG_663 = 0x663,
-    MSG_664 = 0x664,
-    MSG_665 = 0x665,
-    MSG_666 = 0x666,
-    MSG_667 = 0x667,
-    MSG_668 = 0x668,
-    MSG_669 = 0x669,
-    MSG_66A = 0x66A,
-    MSG_66B = 0x66B,
-    MSG_66C = 0x66C,
-    MSG_66D = 0x66D,
-    MSG_66E = 0x66E,
-    MSG_66F = 0x66F,
-    MSG_670 = 0x670,
-    MSG_671 = 0x671,
-    MSG_672 = 0x672,
-    MSG_673 = 0x673,
-    MSG_674 = 0x674,
-    MSG_675 = 0x675,
-    MSG_676 = 0x676,
-    MSG_677 = 0x677,
-    MSG_678 = 0x678,
-    MSG_679 = 0x679,
-    MSG_67A = 0x67A,
-    MSG_67B = 0x67B,
-    MSG_67C = 0x67C,
-    MSG_67D = 0x67D,
-    MSG_67E = 0x67E,
-    MSG_67F = 0x67F,
-    MSG_680 = 0x680,
-    MSG_681 = 0x681,
-    MSG_682 = 0x682,
-    MSG_683 = 0x683,
-    MSG_684 = 0x684,
-    MSG_685 = 0x685,
-    MSG_686 = 0x686,
-    MSG_687 = 0x687,
-    MSG_688 = 0x688,
-    MSG_689 = 0x689,
-    MSG_68A = 0x68A,
-    MSG_68B = 0x68B,
-    MSG_68C = 0x68C,
-    MSG_68D = 0x68D,
-    MSG_68E = 0x68E,
-    MSG_68F = 0x68F,
-    MSG_690 = 0x690,
-    MSG_691 = 0x691,
-    MSG_692 = 0x692,
-    MSG_693 = 0x693,
-    MSG_694 = 0x694,
-    MSG_695 = 0x695,
-    MSG_696 = 0x696,
-    MSG_697 = 0x697,
-    MSG_698 = 0x698,
-    MSG_699 = 0x699,
-    MSG_69A = 0x69A,
-    MSG_69B = 0x69B,
-    MSG_69C = 0x69C,
-    MSG_69D = 0x69D,
-    MSG_69E = 0x69E,
-    MSG_69F = 0x69F,
-    MSG_6A0 = 0x6A0,
-    MSG_6A1 = 0x6A1,
-    MSG_6A2 = 0x6A2,
-    MSG_6A3 = 0x6A3,
-    MSG_6A4 = 0x6A4,
-    MSG_6A5 = 0x6A5,
-    MSG_6A6 = 0x6A6,
-    MSG_6A7 = 0x6A7,
-    MSG_6A8 = 0x6A8,
-    MSG_6A9 = 0x6A9,
-    MSG_6AA = 0x6AA,
-    MSG_6AB = 0x6AB,
-    MSG_6AC = 0x6AC,
-    MSG_6AD = 0x6AD,
-    MSG_6AE = 0x6AE,
-    MSG_6AF = 0x6AF,
-    MSG_6B0 = 0x6B0,
-    MSG_6B1 = 0x6B1,
-    MSG_6B2 = 0x6B2,
-    MSG_6B3 = 0x6B3,
-    MSG_6B4 = 0x6B4,
-    MSG_6B5 = 0x6B5,
-    MSG_6B6 = 0x6B6,
-    MSG_6B7 = 0x6B7,
-    MSG_6B8 = 0x6B8,
-    MSG_6B9 = 0x6B9,
-    MSG_6BA = 0x6BA,
-    MSG_6BB = 0x6BB,
-    MSG_6BC = 0x6BC,
-    MSG_6BD = 0x6BD,
-    MSG_6BE = 0x6BE,
-    MSG_6BF = 0x6BF,
-    MSG_6C0 = 0x6C0,
-    MSG_6C1 = 0x6C1,
-    MSG_6C2 = 0x6C2,
-    MSG_6C3 = 0x6C3,
-    MSG_6C4 = 0x6C4,
-    MSG_6C5 = 0x6C5,
-    MSG_6C6 = 0x6C6,
-    MSG_6C7 = 0x6C7,
-    MSG_6C8 = 0x6C8,
-    MSG_6C9 = 0x6C9,
-    MSG_6CA = 0x6CA,
-    MSG_6CB = 0x6CB,
-    MSG_6CC = 0x6CC,
-    MSG_6CD = 0x6CD,
-    MSG_6CE = 0x6CE,
-    MSG_6CF = 0x6CF,
-    MSG_6D0 = 0x6D0,
-    MSG_6D1 = 0x6D1,
-    MSG_6D2 = 0x6D2,
-    MSG_6D3 = 0x6D3,
-    MSG_6D4 = 0x6D4,
-    MSG_6D5 = 0x6D5,
-    MSG_6D6 = 0x6D6,
-    MSG_6D7 = 0x6D7,
-    MSG_6D8 = 0x6D8,
-    MSG_6D9 = 0x6D9,
-    MSG_6DA = 0x6DA,
-    MSG_6DB = 0x6DB,
-    MSG_6DC = 0x6DC,
-    MSG_6DD = 0x6DD,
-    MSG_6DE = 0x6DE,
-    MSG_6DF = 0x6DF,
-    MSG_6E0 = 0x6E0,
-    MSG_6E1 = 0x6E1,
-    MSG_6E2 = 0x6E2,
-    MSG_6E3 = 0x6E3,
-    MSG_6E4 = 0x6E4,
-    MSG_6E5 = 0x6E5,
-    MSG_6E6 = 0x6E6,
-    MSG_6E7 = 0x6E7,
-    MSG_6E8 = 0x6E8,
-    MSG_6E9 = 0x6E9,
-    MSG_6EA = 0x6EA,
-    MSG_6EB = 0x6EB,
-    MSG_6EC = 0x6EC,
-    MSG_6ED = 0x6ED,
-    MSG_6EE = 0x6EE,
-    MSG_6EF = 0x6EF,
-    MSG_6F0 = 0x6F0,
-    MSG_6F1 = 0x6F1,
-    MSG_6F2 = 0x6F2,
-    MSG_6F3 = 0x6F3,
-    MSG_6F4 = 0x6F4,
-    MSG_6F5 = 0x6F5,
-    MSG_6F6 = 0x6F6,
-    MSG_6F7 = 0x6F7,
-    MSG_6F8 = 0x6F8,
-    MSG_6F9 = 0x6F9,
-    MSG_6FA = 0x6FA,
-    MSG_6FB = 0x6FB,
-    MSG_6FC = 0x6FC,
-    MSG_6FD = 0x6FD,
-    MSG_6FE = 0x6FE,
-    MSG_6FF = 0x6FF,
-    MSG_700 = 0x700,
-    MSG_701 = 0x701,
-    MSG_702 = 0x702,
-    MSG_703 = 0x703,
-    MSG_704 = 0x704,
-    MSG_705 = 0x705,
-    MSG_706 = 0x706,
-    MSG_707 = 0x707,
-    MSG_708 = 0x708,
-    MSG_709 = 0x709,
-    MSG_70A = 0x70A,
-    MSG_70B = 0x70B,
-    MSG_70C = 0x70C,
-    MSG_70D = 0x70D,
-    MSG_70E = 0x70E,
-    MSG_70F = 0x70F,
-    MSG_710 = 0x710,
-    MSG_711 = 0x711,
-    MSG_712 = 0x712,
-    MSG_713 = 0x713,
-    MSG_714 = 0x714,
-    MSG_715 = 0x715,
-    MSG_716 = 0x716,
-    MSG_717 = 0x717,
-    MSG_718 = 0x718,
-    MSG_719 = 0x719,
-    MSG_71A = 0x71A,
-    MSG_71B = 0x71B,
-    MSG_71C = 0x71C,
-    MSG_71D = 0x71D,
-    MSG_71E = 0x71E,
-    MSG_71F = 0x71F,
-    MSG_720 = 0x720,
-    MSG_721 = 0x721,
-    MSG_722 = 0x722,
-    MSG_723 = 0x723,
-    MSG_724 = 0x724,
-    MSG_725 = 0x725,
-    MSG_726 = 0x726,
-    MSG_727 = 0x727,
-    MSG_728 = 0x728,
-    MSG_729 = 0x729,
-    MSG_72A = 0x72A,
-    MSG_72B = 0x72B,
-    MSG_72C = 0x72C,
-    MSG_72D = 0x72D,
-    MSG_72E = 0x72E,
-    MSG_72F = 0x72F,
-    MSG_730 = 0x730,
-    MSG_731 = 0x731,
-    MSG_732 = 0x732,
-    MSG_733 = 0x733,
-    MSG_734 = 0x734,
-    MSG_735 = 0x735,
-    MSG_736 = 0x736,
-    MSG_737 = 0x737,
-    MSG_738 = 0x738,
-    MSG_739 = 0x739,
-    MSG_73A = 0x73A,
-    MSG_73B = 0x73B,
-    MSG_73C = 0x73C,
-    MSG_73D = 0x73D,
-    MSG_73E = 0x73E,
-    MSG_73F = 0x73F,
-    MSG_740 = 0x740,
-    MSG_741 = 0x741,
-    MSG_742 = 0x742,
-    MSG_743 = 0x743,
-    MSG_744 = 0x744,
-    MSG_745 = 0x745,
-    MSG_746 = 0x746,
-    MSG_747 = 0x747,
-    MSG_748 = 0x748,
-    MSG_749 = 0x749,
-    MSG_74A = 0x74A,
-    MSG_74B = 0x74B,
-    MSG_74C = 0x74C,
-    MSG_74D = 0x74D,
-    MSG_74E = 0x74E,
-    MSG_74F = 0x74F,
-    MSG_750 = 0x750,
-    MSG_751 = 0x751,
-    MSG_752 = 0x752,
-    MSG_753 = 0x753,
-    MSG_754 = 0x754,
-    MSG_755 = 0x755,
-    MSG_756 = 0x756,
-    MSG_757 = 0x757,
-    MSG_758 = 0x758,
-    MSG_759 = 0x759,
-    MSG_75A = 0x75A,
-    MSG_75B = 0x75B,
-    MSG_75C = 0x75C,
-    MSG_75D = 0x75D,
-    MSG_75E = 0x75E,
-    MSG_75F = 0x75F,
-    MSG_760 = 0x760,
-    MSG_761 = 0x761,
-    MSG_762 = 0x762,
-    MSG_763 = 0x763,
-    MSG_764 = 0x764,
-    MSG_765 = 0x765,
-    MSG_766 = 0x766,
-    MSG_767 = 0x767,
-    MSG_768 = 0x768,
-    MSG_769 = 0x769,
-    MSG_76A = 0x76A,
-    MSG_76B = 0x76B,
-    MSG_76C = 0x76C,
-    MSG_76D = 0x76D,
-    MSG_76E = 0x76E,
-    MSG_76F = 0x76F,
-    MSG_770 = 0x770,
-    MSG_771 = 0x771,
-    MSG_772 = 0x772,
-    MSG_773 = 0x773,
-    MSG_774 = 0x774,
-    MSG_775 = 0x775,
-    MSG_776 = 0x776,
-    MSG_777 = 0x777,
-    MSG_778 = 0x778,
-    MSG_779 = 0x779,
-    MSG_77A = 0x77A,
-    MSG_77B = 0x77B,
-    MSG_77C = 0x77C,
-    MSG_77D = 0x77D,
-    MSG_77E = 0x77E,
-    MSG_77F = 0x77F,
-    MSG_780 = 0x780,
-    MSG_781 = 0x781,
-    MSG_782 = 0x782,
-    MSG_783 = 0x783,
-    MSG_784 = 0x784,
-    MSG_785 = 0x785,
-    MSG_786 = 0x786,
-    MSG_787 = 0x787,
-    MSG_788 = 0x788,
-    MSG_789 = 0x789,
-    MSG_78A = 0x78A,
-    MSG_78B = 0x78B,
-    MSG_78C = 0x78C,
-    MSG_78D = 0x78D,
-    MSG_78E = 0x78E,
-    MSG_78F = 0x78F,
-    MSG_790 = 0x790,
-    MSG_791 = 0x791,
-    MSG_792 = 0x792,
-    MSG_793 = 0x793,
-    MSG_794 = 0x794,
-    MSG_795 = 0x795,
-    MSG_796 = 0x796,
-    MSG_797 = 0x797,
-    MSG_798 = 0x798,
-    MSG_799 = 0x799,
-    MSG_79A = 0x79A,
-    MSG_79B = 0x79B,
-    MSG_79C = 0x79C,
-    MSG_79D = 0x79D,
-    MSG_79E = 0x79E,
-    MSG_79F = 0x79F,
-    MSG_7A0 = 0x7A0,
-    MSG_7A1 = 0x7A1,
-    MSG_7A2 = 0x7A2,
-    MSG_7A3 = 0x7A3,
-    MSG_7A4 = 0x7A4,
-    MSG_7A5 = 0x7A5,
-    MSG_7A6 = 0x7A6,
-    MSG_7A7 = 0x7A7,
-    MSG_7A8 = 0x7A8,
-    MSG_7A9 = 0x7A9,
-    MSG_7AA = 0x7AA,
-    MSG_7AB = 0x7AB,
-    MSG_7AC = 0x7AC,
-    MSG_7AD = 0x7AD,
-    MSG_7AE = 0x7AE,
-    MSG_7AF = 0x7AF,
-    MSG_7B0 = 0x7B0,
-    MSG_7B1 = 0x7B1,
-    MSG_7B2 = 0x7B2,
-    MSG_7B3 = 0x7B3,
-    MSG_7B4 = 0x7B4,
-    MSG_7B5 = 0x7B5,
-    MSG_7B6 = 0x7B6,
-    MSG_7B7 = 0x7B7,
-    MSG_7B8 = 0x7B8,
-    MSG_7B9 = 0x7B9,
-    MSG_7BA = 0x7BA,
-    MSG_7BB = 0x7BB,
-    MSG_7BC = 0x7BC,
-    MSG_7BD = 0x7BD,
-    MSG_7BE = 0x7BE,
-    MSG_7BF = 0x7BF,
-    MSG_7C0 = 0x7C0,
-    MSG_7C1 = 0x7C1,
-    MSG_7C2 = 0x7C2,
-    MSG_7C3 = 0x7C3,
-    MSG_7C4 = 0x7C4,
-    MSG_7C5 = 0x7C5,
-    MSG_7C6 = 0x7C6,
-    MSG_7C7 = 0x7C7,
-    MSG_7C8 = 0x7C8,
-    MSG_7C9 = 0x7C9,
-    MSG_7CA = 0x7CA,
-    MSG_7CB = 0x7CB,
-    MSG_7CC = 0x7CC,
-    MSG_7CD = 0x7CD,
-    MSG_7CE = 0x7CE,
-    MSG_7CF = 0x7CF,
-    MSG_7D0 = 0x7D0,
-    MSG_7D1 = 0x7D1,
-    MSG_7D2 = 0x7D2,
-    MSG_7D3 = 0x7D3,
-    MSG_7D4 = 0x7D4,
-    MSG_7D5 = 0x7D5,
-    MSG_7D6 = 0x7D6,
-    MSG_7D7 = 0x7D7,
-    MSG_7D8 = 0x7D8,
-    MSG_7D9 = 0x7D9,
-    MSG_7DA = 0x7DA,
-    MSG_7DB = 0x7DB,
-    MSG_7DC = 0x7DC,
-    MSG_7DD = 0x7DD,
-    MSG_7DE = 0x7DE,
-    MSG_7DF = 0x7DF,
-    MSG_7E0 = 0x7E0,
-    MSG_7E1 = 0x7E1,
-    MSG_7E2 = 0x7E2,
-    MSG_7E3 = 0x7E3,
-    MSG_7E4 = 0x7E4,
-    MSG_7E5 = 0x7E5,
-    MSG_7E6 = 0x7E6,
-    MSG_7E7 = 0x7E7,
-    MSG_7E8 = 0x7E8,
-    MSG_7E9 = 0x7E9,
-    MSG_7EA = 0x7EA,
-    MSG_7EB = 0x7EB,
-    MSG_7EC = 0x7EC,
-    MSG_7ED = 0x7ED,
-    MSG_7EE = 0x7EE,
-    MSG_7EF = 0x7EF,
-    MSG_7F0 = 0x7F0,
-    MSG_7F1 = 0x7F1,
-    MSG_7F2 = 0x7F2,
-    MSG_7F3 = 0x7F3,
-    MSG_7F4 = 0x7F4,
-    MSG_7F5 = 0x7F5,
-    MSG_7F6 = 0x7F6,
-    MSG_7F7 = 0x7F7,
-    MSG_7F8 = 0x7F8,
-    MSG_7F9 = 0x7F9,
-    MSG_7FA = 0x7FA,
-    MSG_7FB = 0x7FB,
-    MSG_7FC = 0x7FC,
-    MSG_7FD = 0x7FD,
-    MSG_7FE = 0x7FE,
-    MSG_7FF = 0x7FF,
-    MSG_800 = 0x800,
-    MSG_801 = 0x801,
-    MSG_802 = 0x802,
-    MSG_803 = 0x803,
-    MSG_804 = 0x804,
-    MSG_805 = 0x805,
-    MSG_806 = 0x806,
-    MSG_807 = 0x807,
-    MSG_808 = 0x808,
-    MSG_809 = 0x809,
-    MSG_80A = 0x80A,
-    MSG_80B = 0x80B,
-    MSG_80C = 0x80C,
-    MSG_80D = 0x80D,
-    MSG_80E = 0x80E,
-    MSG_80F = 0x80F,
-    MSG_810 = 0x810,
-    MSG_811 = 0x811,
-    MSG_812 = 0x812,
-    MSG_813 = 0x813,
-    MSG_814 = 0x814,
-    MSG_815 = 0x815,
-    MSG_816 = 0x816,
-    MSG_817 = 0x817,
-    MSG_818 = 0x818,
-    MSG_819 = 0x819,
-    MSG_81A = 0x81A,
-    MSG_81B = 0x81B,
-    MSG_81C = 0x81C,
-    MSG_81D = 0x81D,
-    MSG_81E = 0x81E,
-    MSG_81F = 0x81F,
-    MSG_820 = 0x820,
-    MSG_821 = 0x821,
-    MSG_822 = 0x822,
-    MSG_823 = 0x823,
-    MSG_824 = 0x824,
-    MSG_825 = 0x825,
-    MSG_826 = 0x826,
-    MSG_827 = 0x827,
-    MSG_828 = 0x828,
-    MSG_829 = 0x829,
-    MSG_82A = 0x82A,
-    MSG_82B = 0x82B,
-    MSG_82C = 0x82C,
-    MSG_82D = 0x82D,
-    MSG_82E = 0x82E,
-    MSG_82F = 0x82F,
-    MSG_830 = 0x830,
-    MSG_831 = 0x831,
-    MSG_832 = 0x832,
-    MSG_833 = 0x833,
-    MSG_834 = 0x834,
-    MSG_835 = 0x835,
-    MSG_836 = 0x836,
-    MSG_837 = 0x837,
-    MSG_838 = 0x838,
-    MSG_839 = 0x839,
-    MSG_83A = 0x83A,
-    MSG_83B = 0x83B,
-    MSG_83C = 0x83C,
-    MSG_83D = 0x83D,
-    MSG_83E = 0x83E,
-    MSG_83F = 0x83F,
-    MSG_840 = 0x840,
-    MSG_841 = 0x841,
-    MSG_842 = 0x842,
-    MSG_843 = 0x843,
-    MSG_844 = 0x844,
-    MSG_845 = 0x845,
-    MSG_846 = 0x846,
-    MSG_847 = 0x847,
-    MSG_848 = 0x848,
-    MSG_849 = 0x849,
-    MSG_84A = 0x84A,
-    MSG_84B = 0x84B,
-    MSG_84C = 0x84C,
-    MSG_84D = 0x84D,
-    MSG_84E = 0x84E,
-    MSG_84F = 0x84F,
-    MSG_850 = 0x850,
-    MSG_851 = 0x851,
-    MSG_852 = 0x852,
-    MSG_853 = 0x853,
-    MSG_854 = 0x854,
-    MSG_855 = 0x855,
-    MSG_856 = 0x856,
-    MSG_857 = 0x857,
-    MSG_858 = 0x858,
-    MSG_859 = 0x859,
-    MSG_85A = 0x85A,
-    MSG_85B = 0x85B,
-    MSG_85C = 0x85C,
-    MSG_85D = 0x85D,
-    MSG_85E = 0x85E,
-    MSG_85F = 0x85F,
-    MSG_860 = 0x860,
-    MSG_861 = 0x861,
-    MSG_862 = 0x862,
-    MSG_863 = 0x863,
-    MSG_864 = 0x864,
-    MSG_865 = 0x865,
-    MSG_866 = 0x866,
-    MSG_867 = 0x867,
-    MSG_868 = 0x868,
-    MSG_869 = 0x869,
-    MSG_86A = 0x86A,
-    MSG_86B = 0x86B,
-    MSG_86C = 0x86C,
-    MSG_86D = 0x86D,
-    MSG_86E = 0x86E,
-    MSG_86F = 0x86F,
-    MSG_870 = 0x870,
-    MSG_871 = 0x871,
-    MSG_872 = 0x872,
-    MSG_873 = 0x873,
-    MSG_874 = 0x874,
-    MSG_875 = 0x875,
-    MSG_876 = 0x876,
-    MSG_877 = 0x877,
-    MSG_878 = 0x878,
-    MSG_879 = 0x879,
-    MSG_87A = 0x87A,
-    MSG_87B = 0x87B,
-    MSG_87C = 0x87C,
-    MSG_87D = 0x87D,
-    MSG_87E = 0x87E,
-    MSG_87F = 0x87F,
-    MSG_880 = 0x880,
-    MSG_881 = 0x881,
-    MSG_882 = 0x882,
-    MSG_883 = 0x883,
-    MSG_884 = 0x884,
-    MSG_885 = 0x885,
-    MSG_886 = 0x886,
-    MSG_887 = 0x887,
-    MSG_888 = 0x888,
-    MSG_889 = 0x889,
-    MSG_88A = 0x88A,
-    MSG_88B = 0x88B,
-    MSG_88C = 0x88C,
-    MSG_88D = 0x88D,
-    MSG_88E = 0x88E,
-    MSG_88F = 0x88F,
-    MSG_890 = 0x890,
-    MSG_891 = 0x891,
-    MSG_892 = 0x892,
-    MSG_893 = 0x893,
-    MSG_894 = 0x894,
-    MSG_895 = 0x895,
-    MSG_896 = 0x896,
-    MSG_897 = 0x897,
-    MSG_898 = 0x898,
-    MSG_899 = 0x899,
-    MSG_89A = 0x89A,
-    MSG_89B = 0x89B,
-    MSG_89C = 0x89C,
-    MSG_89D = 0x89D,
-    MSG_89E = 0x89E,
-    MSG_89F = 0x89F,
-    MSG_8A0 = 0x8A0,
-    MSG_8A1 = 0x8A1,
-    MSG_8A2 = 0x8A2,
-    MSG_8A3 = 0x8A3,
-    MSG_8A4 = 0x8A4,
-    MSG_8A5 = 0x8A5,
-    MSG_8A6 = 0x8A6,
-    MSG_8A7 = 0x8A7,
-    MSG_8A8 = 0x8A8,
-    MSG_8A9 = 0x8A9,
-    MSG_8AA = 0x8AA,
-    MSG_8AB = 0x8AB,
-    MSG_8AC = 0x8AC,
-    MSG_8AD = 0x8AD,
-    MSG_8AE = 0x8AE,
-    MSG_8AF = 0x8AF,
-    MSG_8B0 = 0x8B0,
-    MSG_8B1 = 0x8B1,
-    MSG_8B2 = 0x8B2,
-    MSG_8B3 = 0x8B3,
-    MSG_8B4 = 0x8B4,
-    MSG_8B5 = 0x8B5,
-    MSG_8B6 = 0x8B6,
-    MSG_8B7 = 0x8B7,
-    MSG_8B8 = 0x8B8,
-    MSG_8B9 = 0x8B9,
-    MSG_8BA = 0x8BA,
-    MSG_8BB = 0x8BB,
-    MSG_8BC = 0x8BC,
-    MSG_8BD = 0x8BD,
-    MSG_8BE = 0x8BE,
-    MSG_8BF = 0x8BF,
-    MSG_8C0 = 0x8C0,
-    MSG_8C1 = 0x8C1,
-    MSG_8C2 = 0x8C2,
-    MSG_8C3 = 0x8C3,
-    MSG_8C4 = 0x8C4,
-    MSG_8C5 = 0x8C5,
-    MSG_8C6 = 0x8C6,
-    MSG_8C7 = 0x8C7,
-    MSG_8C8 = 0x8C8,
-    MSG_8C9 = 0x8C9,
-    MSG_8CA = 0x8CA,
-    MSG_8CB = 0x8CB,
-    MSG_8CC = 0x8CC,
-    MSG_8CD = 0x8CD,
-    MSG_8CE = 0x8CE,
-    MSG_8CF = 0x8CF,
-    MSG_8D0 = 0x8D0,
-    MSG_8D1 = 0x8D1,
-    MSG_8D2 = 0x8D2,
-    MSG_8D3 = 0x8D3,
-    MSG_8D4 = 0x8D4,
-    MSG_8D5 = 0x8D5,
-    MSG_8D6 = 0x8D6,
-    MSG_8D7 = 0x8D7,
-    MSG_8D8 = 0x8D8,
-    MSG_8D9 = 0x8D9,
-    MSG_8DA = 0x8DA,
-    MSG_8DB = 0x8DB,
-    MSG_8DC = 0x8DC,
-    MSG_8DD = 0x8DD,
-    MSG_8DE = 0x8DE,
-    MSG_8DF = 0x8DF,
-    MSG_8E0 = 0x8E0,
-    MSG_8E1 = 0x8E1,
-    MSG_8E2 = 0x8E2,
-    MSG_8E3 = 0x8E3,
-    MSG_8E4 = 0x8E4,
-    MSG_8E5 = 0x8E5,
-    MSG_8E6 = 0x8E6,
-    MSG_8E7 = 0x8E7,
-    MSG_8E8 = 0x8E8,
-    MSG_8E9 = 0x8E9,
-    MSG_8EA = 0x8EA,
-    MSG_8EB = 0x8EB,
-    MSG_8EC = 0x8EC,
-    MSG_8ED = 0x8ED,
-    MSG_8EE = 0x8EE,
-    MSG_8EF = 0x8EF,
-    MSG_8F0 = 0x8F0,
-    MSG_8F1 = 0x8F1,
-    MSG_8F2 = 0x8F2,
-    MSG_8F3 = 0x8F3,
-    MSG_8F4 = 0x8F4,
-    MSG_8F5 = 0x8F5,
-    MSG_8F6 = 0x8F6,
-    MSG_8F7 = 0x8F7,
-    MSG_8F8 = 0x8F8,
-    MSG_8F9 = 0x8F9,
-    MSG_8FA = 0x8FA,
-    MSG_8FB = 0x8FB,
-    MSG_8FC = 0x8FC,
-    MSG_8FD = 0x8FD,
-    MSG_8FE = 0x8FE,
-    MSG_8FF = 0x8FF,
-    MSG_900 = 0x900,
-    MSG_901 = 0x901,
-    MSG_902 = 0x902,
-    MSG_903 = 0x903,
-    MSG_904 = 0x904,
-    MSG_905 = 0x905,
-    MSG_906 = 0x906,
-    MSG_907 = 0x907,
-    MSG_908 = 0x908,
-    MSG_909 = 0x909,
-    MSG_90A = 0x90A,
-    MSG_90B = 0x90B,
-    MSG_90C = 0x90C,
-    MSG_90D = 0x90D,
-    MSG_90E = 0x90E,
-    MSG_90F = 0x90F,
-    MSG_910 = 0x910,
-    MSG_911 = 0x911,
-    MSG_912 = 0x912,
-    MSG_913 = 0x913,
-    MSG_914 = 0x914,
-    MSG_915 = 0x915,
-    MSG_916 = 0x916,
-    MSG_917 = 0x917,
-    MSG_918 = 0x918,
-    MSG_919 = 0x919,
-    MSG_91A = 0x91A,
-    MSG_91B = 0x91B,
-    MSG_91C = 0x91C,
-    MSG_91D = 0x91D,
-    MSG_91E = 0x91E,
-    MSG_91F = 0x91F,
-    MSG_920 = 0x920,
-    MSG_921 = 0x921,
-    MSG_922 = 0x922,
-    MSG_923 = 0x923,
-    MSG_924 = 0x924,
-    MSG_925 = 0x925,
-    MSG_926 = 0x926,
-    MSG_927 = 0x927,
-    MSG_928 = 0x928,
-    MSG_929 = 0x929,
-    MSG_92A = 0x92A,
-    MSG_92B = 0x92B,
-    MSG_92C = 0x92C,
-    MSG_92D = 0x92D,
-    MSG_92E = 0x92E,
-    MSG_92F = 0x92F,
-    MSG_930 = 0x930,
-    MSG_931 = 0x931,
-    MSG_932 = 0x932,
-    MSG_933 = 0x933,
-    MSG_934 = 0x934,
-    MSG_935 = 0x935,
-    MSG_936 = 0x936,
-    MSG_937 = 0x937,
-    MSG_938 = 0x938,
-    MSG_939 = 0x939,
-    MSG_93A = 0x93A,
-    MSG_93B = 0x93B,
-    MSG_93C = 0x93C,
-    MSG_93D = 0x93D,
-    MSG_93E = 0x93E,
-    MSG_93F = 0x93F,
-    MSG_940 = 0x940,
-    MSG_941 = 0x941,
-    MSG_942 = 0x942,
-    MSG_943 = 0x943,
-    MSG_944 = 0x944,
-    MSG_945 = 0x945,
-    MSG_946 = 0x946,
-    MSG_947 = 0x947,
-    MSG_948 = 0x948,
-    MSG_949 = 0x949,
-    MSG_94A = 0x94A,
-    MSG_94B = 0x94B,
-    MSG_94C = 0x94C,
-    MSG_94D = 0x94D,
-    MSG_94E = 0x94E,
-    MSG_94F = 0x94F,
-    MSG_950 = 0x950,
-    MSG_951 = 0x951,
-    MSG_952 = 0x952,
-    MSG_953 = 0x953,
-    MSG_954 = 0x954,
-    MSG_955 = 0x955,
-    MSG_956 = 0x956,
-    MSG_957 = 0x957,
-    MSG_958 = 0x958,
-    MSG_959 = 0x959,
-    MSG_95A = 0x95A,
-    MSG_95B = 0x95B,
-    MSG_95C = 0x95C,
-    MSG_95D = 0x95D,
-    MSG_95E = 0x95E,
-    MSG_95F = 0x95F,
-    MSG_960 = 0x960,
-    MSG_961 = 0x961,
-    MSG_962 = 0x962,
-    MSG_963 = 0x963,
-    MSG_964 = 0x964,
-    MSG_965 = 0x965,
-    MSG_966 = 0x966,
-    MSG_967 = 0x967,
-    MSG_968 = 0x968,
-    MSG_969 = 0x969,
-    MSG_96A = 0x96A,
-    MSG_96B = 0x96B,
-    MSG_96C = 0x96C,
-    MSG_96D = 0x96D,
-    MSG_96E = 0x96E,
-    MSG_96F = 0x96F,
-    MSG_970 = 0x970,
-    MSG_971 = 0x971,
-    MSG_972 = 0x972,
-    MSG_973 = 0x973,
-    MSG_974 = 0x974,
-    MSG_975 = 0x975,
-    MSG_976 = 0x976,
-    MSG_977 = 0x977,
-    MSG_978 = 0x978,
-    MSG_979 = 0x979,
-    MSG_97A = 0x97A,
-    MSG_97B = 0x97B,
-    MSG_97C = 0x97C,
-    MSG_97D = 0x97D,
-    MSG_97E = 0x97E,
-    MSG_97F = 0x97F,
-    MSG_980 = 0x980,
-    MSG_981 = 0x981,
-    MSG_982 = 0x982,
-    MSG_983 = 0x983,
-    MSG_984 = 0x984,
-    MSG_985 = 0x985,
-    MSG_986 = 0x986,
-    MSG_987 = 0x987,
-    MSG_988 = 0x988,
-    MSG_989 = 0x989,
-    MSG_98A = 0x98A,
-    MSG_98B = 0x98B,
-    MSG_98C = 0x98C,
-    MSG_98D = 0x98D,
-    MSG_98E = 0x98E,
-    MSG_98F = 0x98F,
-    MSG_990 = 0x990,
-    MSG_991 = 0x991,
-    MSG_992 = 0x992,
-    MSG_993 = 0x993,
-    MSG_994 = 0x994,
-    MSG_995 = 0x995,
-    MSG_996 = 0x996,
-    MSG_997 = 0x997,
-    MSG_998 = 0x998,
-    MSG_999 = 0x999,
-    MSG_99A = 0x99A,
-    MSG_99B = 0x99B,
-    MSG_99C = 0x99C,
-    MSG_99D = 0x99D,
-    MSG_99E = 0x99E,
-    MSG_99F = 0x99F,
-    MSG_9A0 = 0x9A0,
-    MSG_9A1 = 0x9A1,
-    MSG_9A2 = 0x9A2,
-    MSG_9A3 = 0x9A3,
-    MSG_9A4 = 0x9A4,
-    MSG_9A5 = 0x9A5,
-    MSG_9A6 = 0x9A6,
-    MSG_9A7 = 0x9A7,
-    MSG_9A8 = 0x9A8,
-    MSG_9A9 = 0x9A9,
-    MSG_9AA = 0x9AA,
-    MSG_9AB = 0x9AB,
-    MSG_9AC = 0x9AC,
-    MSG_9AD = 0x9AD,
-    MSG_9AE = 0x9AE,
-    MSG_9AF = 0x9AF,
-    MSG_9B0 = 0x9B0,
-    MSG_9B1 = 0x9B1,
-    MSG_9B2 = 0x9B2,
-    MSG_9B3 = 0x9B3,
-    MSG_9B4 = 0x9B4,
-    MSG_9B5 = 0x9B5,
-    MSG_9B6 = 0x9B6,
-    MSG_9B7 = 0x9B7,
-    MSG_9B8 = 0x9B8,
-    MSG_9B9 = 0x9B9,
-    MSG_9BA = 0x9BA,
-    MSG_9BB = 0x9BB,
-    MSG_9BC = 0x9BC,
-    MSG_9BD = 0x9BD,
-    MSG_9BE = 0x9BE,
-    MSG_9BF = 0x9BF,
-    MSG_9C0 = 0x9C0,
-    MSG_9C1 = 0x9C1,
-    MSG_9C2 = 0x9C2,
-    MSG_9C3 = 0x9C3,
-    MSG_9C4 = 0x9C4,
-    MSG_9C5 = 0x9C5,
-    MSG_9C6 = 0x9C6,
-    MSG_9C7 = 0x9C7,
-    MSG_9C8 = 0x9C8,
-    MSG_9C9 = 0x9C9,
-    MSG_9CA = 0x9CA,
-    MSG_9CB = 0x9CB,
-    MSG_9CC = 0x9CC,
-    MSG_9CD = 0x9CD,
-    MSG_9CE = 0x9CE,
-    MSG_9CF = 0x9CF,
-    MSG_9D0 = 0x9D0,
-    MSG_9D1 = 0x9D1,
-    MSG_9D2 = 0x9D2,
-    MSG_9D3 = 0x9D3,
-    MSG_9D4 = 0x9D4,
-    MSG_9D5 = 0x9D5,
-    MSG_9D6 = 0x9D6,
-    MSG_9D7 = 0x9D7,
-    MSG_9D8 = 0x9D8,
-    MSG_9D9 = 0x9D9,
-    MSG_9DA = 0x9DA,
-    MSG_9DB = 0x9DB,
-    MSG_9DC = 0x9DC,
-    MSG_9DD = 0x9DD,
-    MSG_9DE = 0x9DE,
-    MSG_9DF = 0x9DF,
-    MSG_9E0 = 0x9E0,
-    MSG_9E1 = 0x9E1,
-    MSG_9E2 = 0x9E2,
-    MSG_9E3 = 0x9E3,
-    MSG_9E4 = 0x9E4,
-    MSG_9E5 = 0x9E5,
-    MSG_9E6 = 0x9E6,
-    MSG_9E7 = 0x9E7,
-    MSG_9E8 = 0x9E8,
-    MSG_9E9 = 0x9E9,
-    MSG_9EA = 0x9EA,
-    MSG_9EB = 0x9EB,
-    MSG_9EC = 0x9EC,
-    MSG_9ED = 0x9ED,
-    MSG_9EE = 0x9EE,
-    MSG_9EF = 0x9EF,
-    MSG_9F0 = 0x9F0,
-    MSG_9F1 = 0x9F1,
-    MSG_9F2 = 0x9F2,
-    MSG_9F3 = 0x9F3,
-    MSG_9F4 = 0x9F4,
-    MSG_9F5 = 0x9F5,
-    MSG_9F6 = 0x9F6,
-    MSG_9F7 = 0x9F7,
-    MSG_9F8 = 0x9F8,
-    MSG_9F9 = 0x9F9,
-    MSG_9FA = 0x9FA,
-    MSG_9FB = 0x9FB,
-    MSG_9FC = 0x9FC,
-    MSG_9FD = 0x9FD,
-    MSG_9FE = 0x9FE,
-    MSG_9FF = 0x9FF,
-    MSG_A00 = 0xA00,
-    MSG_A01 = 0xA01,
-    MSG_A02 = 0xA02,
-    MSG_A03 = 0xA03,
-    MSG_A04 = 0xA04,
-    MSG_A05 = 0xA05,
-    MSG_A06 = 0xA06,
-    MSG_A07 = 0xA07,
-    MSG_A08 = 0xA08,
-    MSG_A09 = 0xA09,
-    MSG_A0A = 0xA0A,
-    MSG_A0B = 0xA0B,
-    MSG_A0C = 0xA0C,
-    MSG_A0D = 0xA0D,
-    MSG_A0E = 0xA0E,
-    MSG_A0F = 0xA0F,
-    MSG_A10 = 0xA10,
-    MSG_A11 = 0xA11,
-    MSG_A12 = 0xA12,
-    MSG_A13 = 0xA13,
-    MSG_A14 = 0xA14,
-    MSG_A15 = 0xA15,
-    MSG_A16 = 0xA16,
-    MSG_A17 = 0xA17,
-    MSG_A18 = 0xA18,
-    MSG_A19 = 0xA19,
-    MSG_A1A = 0xA1A,
-    MSG_A1B = 0xA1B,
-    MSG_A1C = 0xA1C,
-    MSG_A1D = 0xA1D,
-    MSG_A1E = 0xA1E,
-    MSG_A1F = 0xA1F,
-    MSG_A20 = 0xA20,
-    MSG_A21 = 0xA21,
-    MSG_A22 = 0xA22,
-    MSG_A23 = 0xA23,
-    MSG_A24 = 0xA24,
-    MSG_A25 = 0xA25,
-    MSG_A26 = 0xA26,
-    MSG_A27 = 0xA27,
-    MSG_A28 = 0xA28,
-    MSG_A29 = 0xA29,
-    MSG_A2A = 0xA2A,
-    MSG_A2B = 0xA2B,
-    MSG_A2C = 0xA2C,
-    MSG_A2D = 0xA2D,
-    MSG_A2E = 0xA2E,
-    MSG_A2F = 0xA2F,
-    MSG_A30 = 0xA30,
-    MSG_A31 = 0xA31,
-    MSG_A32 = 0xA32,
-    MSG_A33 = 0xA33,
-    MSG_A34 = 0xA34,
-    MSG_A35 = 0xA35,
-    MSG_A36 = 0xA36,
-    MSG_A37 = 0xA37,
-    MSG_A38 = 0xA38,
-    MSG_A39 = 0xA39,
-    MSG_A3A = 0xA3A,
-    MSG_A3B = 0xA3B,
-    MSG_A3C = 0xA3C,
-    MSG_A3D = 0xA3D,
-    MSG_A3E = 0xA3E,
-    MSG_A3F = 0xA3F,
-    MSG_A40 = 0xA40,
-    MSG_A41 = 0xA41,
-    MSG_A42 = 0xA42,
-    MSG_A43 = 0xA43,
-    MSG_A44 = 0xA44,
-    MSG_A45 = 0xA45,
-    MSG_A46 = 0xA46,
-    MSG_A47 = 0xA47,
-    MSG_A48 = 0xA48,
-    MSG_A49 = 0xA49,
-    MSG_A4A = 0xA4A,
-    MSG_A4B = 0xA4B,
-    MSG_A4C = 0xA4C,
-    MSG_A4D = 0xA4D,
-    MSG_A4E = 0xA4E,
-    MSG_A4F = 0xA4F,
-    MSG_A50 = 0xA50,
-    MSG_A51 = 0xA51,
-    MSG_A52 = 0xA52,
-    MSG_A53 = 0xA53,
-    MSG_A54 = 0xA54,
-    MSG_A55 = 0xA55,
-    MSG_A56 = 0xA56,
-    MSG_A57 = 0xA57,
-    MSG_A58 = 0xA58,
-    MSG_A59 = 0xA59,
-    MSG_A5A = 0xA5A,
-    MSG_A5B = 0xA5B,
-    MSG_A5C = 0xA5C,
-    MSG_A5D = 0xA5D,
-    MSG_A5E = 0xA5E,
-    MSG_A5F = 0xA5F,
-    MSG_A60 = 0xA60,
-    MSG_A61 = 0xA61,
-    MSG_A62 = 0xA62,
-    MSG_A63 = 0xA63,
-    MSG_A64 = 0xA64,
-    MSG_A65 = 0xA65,
-    MSG_A66 = 0xA66,
-    MSG_A67 = 0xA67,
-    MSG_A68 = 0xA68,
-    MSG_A69 = 0xA69,
-    MSG_A6A = 0xA6A,
-    MSG_A6B = 0xA6B,
-    MSG_A6C = 0xA6C,
-    MSG_A6D = 0xA6D,
-    MSG_A6E = 0xA6E,
-    MSG_A6F = 0xA6F,
-    MSG_A70 = 0xA70,
-    MSG_A71 = 0xA71,
-    MSG_A72 = 0xA72,
-    MSG_A73 = 0xA73,
-    MSG_A74 = 0xA74,
-    MSG_A75 = 0xA75,
-    MSG_A76 = 0xA76,
-    MSG_A77 = 0xA77,
-    MSG_A78 = 0xA78,
-    MSG_A79 = 0xA79,
-    MSG_A7A = 0xA7A,
-    MSG_A7B = 0xA7B,
-    MSG_A7C = 0xA7C,
-    MSG_A7D = 0xA7D,
-    MSG_A7E = 0xA7E,
-    MSG_A7F = 0xA7F,
-    MSG_A80 = 0xA80,
-    MSG_A81 = 0xA81,
-    MSG_A82 = 0xA82,
-    MSG_A83 = 0xA83,
-    MSG_A84 = 0xA84,
-    MSG_A85 = 0xA85,
-    MSG_A86 = 0xA86,
-    MSG_A87 = 0xA87,
-    MSG_A88 = 0xA88,
-    MSG_A89 = 0xA89,
-    MSG_A8A = 0xA8A,
-    MSG_A8B = 0xA8B,
-    MSG_A8C = 0xA8C,
-    MSG_A8D = 0xA8D,
-    MSG_A8E = 0xA8E,
-    MSG_A8F = 0xA8F,
-    MSG_A90 = 0xA90,
-    MSG_A91 = 0xA91,
-    MSG_A92 = 0xA92,
-    MSG_A93 = 0xA93,
-    MSG_A94 = 0xA94,
-    MSG_A95 = 0xA95,
-    MSG_A96 = 0xA96,
-    MSG_A97 = 0xA97,
-    MSG_A98 = 0xA98,
-    MSG_A99 = 0xA99,
-    MSG_A9A = 0xA9A,
-    MSG_A9B = 0xA9B,
-    MSG_A9C = 0xA9C,
-    MSG_A9D = 0xA9D,
-    MSG_A9E = 0xA9E,
-    MSG_A9F = 0xA9F,
-    MSG_AA0 = 0xAA0,
-    MSG_AA1 = 0xAA1,
-    MSG_AA2 = 0xAA2,
-    MSG_AA3 = 0xAA3,
-    MSG_AA4 = 0xAA4,
-    MSG_AA5 = 0xAA5,
-    MSG_AA6 = 0xAA6,
-    MSG_AA7 = 0xAA7,
-    MSG_AA8 = 0xAA8,
-    MSG_AA9 = 0xAA9,
-    MSG_AAA = 0xAAA,
-    MSG_AAB = 0xAAB,
-    MSG_AAC = 0xAAC,
-    MSG_AAD = 0xAAD,
-    MSG_AAE = 0xAAE,
-    MSG_AAF = 0xAAF,
-    MSG_AB0 = 0xAB0,
-    MSG_AB1 = 0xAB1,
-    MSG_AB2 = 0xAB2,
-    MSG_AB3 = 0xAB3,
-    MSG_AB4 = 0xAB4,
-    MSG_AB5 = 0xAB5,
-    MSG_AB6 = 0xAB6,
-    MSG_AB7 = 0xAB7,
-    MSG_AB8 = 0xAB8,
-    MSG_AB9 = 0xAB9,
-    MSG_ABA = 0xABA,
-    MSG_ABB = 0xABB,
-    MSG_ABC = 0xABC,
-    MSG_ABD = 0xABD,
-    MSG_ABE = 0xABE,
-    MSG_ABF = 0xABF,
-    MSG_AC0 = 0xAC0,
-    MSG_AC1 = 0xAC1,
-    MSG_AC2 = 0xAC2,
-    MSG_AC3 = 0xAC3,
-    MSG_AC4 = 0xAC4,
-    MSG_AC5 = 0xAC5,
-    MSG_AC6 = 0xAC6,
-    MSG_AC7 = 0xAC7,
-    MSG_AC8 = 0xAC8,
-    MSG_AC9 = 0xAC9,
-    MSG_ACA = 0xACA,
-    MSG_ACB = 0xACB,
-    MSG_ACC = 0xACC,
-    MSG_ACD = 0xACD,
-    MSG_ACE = 0xACE,
-    MSG_ACF = 0xACF,
-    MSG_AD0 = 0xAD0,
-    MSG_AD1 = 0xAD1,
-    MSG_AD2 = 0xAD2,
-    MSG_AD3 = 0xAD3,
-    MSG_AD4 = 0xAD4,
-    MSG_AD5 = 0xAD5,
-    MSG_AD6 = 0xAD6,
-    MSG_AD7 = 0xAD7,
-    MSG_AD8 = 0xAD8,
-    MSG_AD9 = 0xAD9,
-    MSG_ADA = 0xADA,
-    MSG_ADB = 0xADB,
-    MSG_ADC = 0xADC,
-    MSG_ADD = 0xADD,
-    MSG_ADE = 0xADE,
-    MSG_ADF = 0xADF,
-    MSG_AE0 = 0xAE0,
-    MSG_AE1 = 0xAE1,
-    MSG_AE2 = 0xAE2,
-    MSG_AE3 = 0xAE3,
-    MSG_AE4 = 0xAE4,
-    MSG_AE5 = 0xAE5,
-    MSG_AE6 = 0xAE6,
-    MSG_AE7 = 0xAE7,
-    MSG_AE8 = 0xAE8,
-    MSG_AE9 = 0xAE9,
-    MSG_AEA = 0xAEA,
-    MSG_AEB = 0xAEB,
-    MSG_AEC = 0xAEC,
-    MSG_AED = 0xAED,
-    MSG_AEE = 0xAEE,
-    MSG_AEF = 0xAEF,
-    MSG_AF0 = 0xAF0,
-    MSG_AF1 = 0xAF1,
-    MSG_AF2 = 0xAF2,
-    MSG_AF3 = 0xAF3,
-    MSG_AF4 = 0xAF4,
-    MSG_AF5 = 0xAF5,
-    MSG_AF6 = 0xAF6,
-    MSG_AF7 = 0xAF7,
-    MSG_AF8 = 0xAF8,
-    MSG_AF9 = 0xAF9,
-    MSG_AFA = 0xAFA,
-    MSG_AFB = 0xAFB,
-    MSG_AFC = 0xAFC,
-    MSG_AFD = 0xAFD,
-    MSG_AFE = 0xAFE,
-    MSG_AFF = 0xAFF,
-    MSG_B00 = 0xB00,
-    MSG_B01 = 0xB01,
-    MSG_B02 = 0xB02,
-    MSG_B03 = 0xB03,
-    MSG_B04 = 0xB04,
-    MSG_B05 = 0xB05,
-    MSG_B06 = 0xB06,
-    MSG_B07 = 0xB07,
-    MSG_B08 = 0xB08,
-    MSG_B09 = 0xB09,
-    MSG_B0A = 0xB0A,
-    MSG_B0B = 0xB0B,
-    MSG_B0C = 0xB0C,
-    MSG_B0D = 0xB0D,
-    MSG_B0E = 0xB0E,
-    MSG_B0F = 0xB0F,
-    MSG_B10 = 0xB10,
-    MSG_B11 = 0xB11,
-    MSG_B12 = 0xB12,
-    MSG_B13 = 0xB13,
-    MSG_B14 = 0xB14,
-    MSG_B15 = 0xB15,
-    MSG_B16 = 0xB16,
-    MSG_B17 = 0xB17,
-    MSG_B18 = 0xB18,
-    MSG_B19 = 0xB19,
-    MSG_B1A = 0xB1A,
-    MSG_B1B = 0xB1B,
-    MSG_B1C = 0xB1C,
-    MSG_B1D = 0xB1D,
-    MSG_B1E = 0xB1E,
-    MSG_B1F = 0xB1F,
-    MSG_B20 = 0xB20,
-    MSG_B21 = 0xB21,
-    MSG_B22 = 0xB22,
-    MSG_B23 = 0xB23,
-    MSG_B24 = 0xB24,
-    MSG_B25 = 0xB25,
-    MSG_B26 = 0xB26,
-    MSG_B27 = 0xB27,
-    MSG_B28 = 0xB28,
-    MSG_B29 = 0xB29,
-    MSG_B2A = 0xB2A,
-    MSG_B2B = 0xB2B,
-    MSG_B2C = 0xB2C,
-    MSG_B2D = 0xB2D,
-    MSG_B2E = 0xB2E,
-    MSG_B2F = 0xB2F,
-    MSG_B30 = 0xB30,
-    MSG_B31 = 0xB31,
-    MSG_B32 = 0xB32,
-    MSG_B33 = 0xB33,
-    MSG_B34 = 0xB34,
-    MSG_B35 = 0xB35,
-    MSG_B36 = 0xB36,
-    MSG_B37 = 0xB37,
-    MSG_B38 = 0xB38,
-    MSG_B39 = 0xB39,
-    MSG_B3A = 0xB3A,
-    MSG_B3B = 0xB3B,
-    MSG_B3C = 0xB3C,
-    MSG_B3D = 0xB3D,
-    MSG_B3E = 0xB3E,
-    MSG_B3F = 0xB3F,
-    MSG_B40 = 0xB40,
-    MSG_B41 = 0xB41,
-    MSG_B42 = 0xB42,
-    MSG_B43 = 0xB43,
-    MSG_B44 = 0xB44,
-    MSG_B45 = 0xB45,
-    MSG_B46 = 0xB46,
-    MSG_B47 = 0xB47,
-    MSG_B48 = 0xB48,
-    MSG_B49 = 0xB49,
-    MSG_B4A = 0xB4A,
-    MSG_B4B = 0xB4B,
-    MSG_B4C = 0xB4C,
-    MSG_B4D = 0xB4D,
-    MSG_B4E = 0xB4E,
-    MSG_B4F = 0xB4F,
-    MSG_B50 = 0xB50,
-    MSG_B51 = 0xB51,
-    MSG_B52 = 0xB52,
-    MSG_B53 = 0xB53,
-    MSG_B54 = 0xB54,
-    MSG_B55 = 0xB55,
-    MSG_B56 = 0xB56,
-    MSG_B57 = 0xB57,
-    MSG_B58 = 0xB58,
-    MSG_B59 = 0xB59,
-    MSG_B5A = 0xB5A,
-    MSG_B5B = 0xB5B,
-    MSG_B5C = 0xB5C,
-    MSG_B5D = 0xB5D,
-    MSG_B5E = 0xB5E,
-    MSG_B5F = 0xB5F,
-    MSG_B60 = 0xB60,
-    MSG_B61 = 0xB61,
-    MSG_B62 = 0xB62,
-    MSG_B63 = 0xB63,
-    MSG_B64 = 0xB64,
-    MSG_B65 = 0xB65,
-    MSG_B66 = 0xB66,
-    MSG_B67 = 0xB67,
-    MSG_B68 = 0xB68,
-    MSG_B69 = 0xB69,
-    MSG_B6A = 0xB6A,
-    MSG_B6B = 0xB6B,
-    MSG_B6C = 0xB6C,
-    MSG_B6D = 0xB6D,
-    MSG_B6E = 0xB6E,
-    MSG_B6F = 0xB6F,
-    MSG_B70 = 0xB70,
-    MSG_B71 = 0xB71,
-    MSG_B72 = 0xB72,
-    MSG_B73 = 0xB73,
-    MSG_B74 = 0xB74,
-    MSG_B75 = 0xB75,
-    MSG_B76 = 0xB76,
-    MSG_B77 = 0xB77,
-    MSG_B78 = 0xB78,
-    MSG_B79 = 0xB79,
-    MSG_B7A = 0xB7A,
-    MSG_B7B = 0xB7B,
-    MSG_B7C = 0xB7C,
-    MSG_B7D = 0xB7D,
-    MSG_B7E = 0xB7E,
-    MSG_B7F = 0xB7F,
-    MSG_B80 = 0xB80,
-    MSG_B81 = 0xB81,
-    MSG_B82 = 0xB82,
-    MSG_B83 = 0xB83,
-    MSG_B84 = 0xB84,
-    MSG_B85 = 0xB85,
-    MSG_B86 = 0xB86,
-    MSG_B87 = 0xB87,
-    MSG_B88 = 0xB88,
-    MSG_B89 = 0xB89,
-    MSG_B8A = 0xB8A,
-    MSG_B8B = 0xB8B,
-    MSG_B8C = 0xB8C,
-    MSG_B8D = 0xB8D,
-    MSG_B8E = 0xB8E,
-    MSG_B8F = 0xB8F,
-    MSG_B90 = 0xB90,
-    MSG_B91 = 0xB91,
-    MSG_B92 = 0xB92,
-    MSG_B93 = 0xB93,
-    MSG_B94 = 0xB94,
-    MSG_B95 = 0xB95,
-    MSG_B96 = 0xB96,
-    MSG_B97 = 0xB97,
-    MSG_B98 = 0xB98,
-    MSG_B99 = 0xB99,
-    MSG_B9A = 0xB9A,
-    MSG_B9B = 0xB9B,
-    MSG_B9C = 0xB9C,
-    MSG_B9D = 0xB9D,
-    MSG_B9E = 0xB9E,
-    MSG_B9F = 0xB9F,
-    MSG_BA0 = 0xBA0,
-    MSG_BA1 = 0xBA1,
-    MSG_BA2 = 0xBA2,
-    MSG_BA3 = 0xBA3,
-    MSG_BA4 = 0xBA4,
-    MSG_BA5 = 0xBA5,
-    MSG_BA6 = 0xBA6,
-    MSG_BA7 = 0xBA7,
-    MSG_BA8 = 0xBA8,
-    MSG_BA9 = 0xBA9,
-    MSG_BAA = 0xBAA,
-    MSG_BAB = 0xBAB,
-    MSG_BAC = 0xBAC,
-    MSG_BAD = 0xBAD,
-    MSG_BAE = 0xBAE,
-    MSG_BAF = 0xBAF,
-    MSG_BB0 = 0xBB0,
-    MSG_BB1 = 0xBB1,
-    MSG_BB2 = 0xBB2,
-    MSG_BB3 = 0xBB3,
-    MSG_BB4 = 0xBB4,
-    MSG_BB5 = 0xBB5,
-    MSG_BB6 = 0xBB6,
-    MSG_BB7 = 0xBB7,
-    MSG_BB8 = 0xBB8,
-    MSG_BB9 = 0xBB9,
-    MSG_BBA = 0xBBA,
-    MSG_BBB = 0xBBB,
-    MSG_BBC = 0xBBC,
-    MSG_BBD = 0xBBD,
-    MSG_BBE = 0xBBE,
-    MSG_BBF = 0xBBF,
-    MSG_BC0 = 0xBC0,
-    MSG_BC1 = 0xBC1,
-    MSG_BC2 = 0xBC2,
-    MSG_BC3 = 0xBC3,
-    MSG_BC4 = 0xBC4,
-    MSG_BC5 = 0xBC5,
-    MSG_BC6 = 0xBC6,
-    MSG_BC7 = 0xBC7,
-    MSG_BC8 = 0xBC8,
-    MSG_BC9 = 0xBC9,
-    MSG_BCA = 0xBCA,
-    MSG_BCB = 0xBCB,
-    MSG_BCC = 0xBCC,
-    MSG_BCD = 0xBCD,
-    MSG_BCE = 0xBCE,
-    MSG_BCF = 0xBCF,
-    MSG_BD0 = 0xBD0,
-    MSG_BD1 = 0xBD1,
-    MSG_BD2 = 0xBD2,
-    MSG_BD3 = 0xBD3,
-    MSG_BD4 = 0xBD4,
-    MSG_BD5 = 0xBD5,
-    MSG_BD6 = 0xBD6,
-    MSG_BD7 = 0xBD7,
-    MSG_BD8 = 0xBD8,
-    MSG_BD9 = 0xBD9,
-    MSG_BDA = 0xBDA,
-    MSG_BDB = 0xBDB,
-    MSG_BDC = 0xBDC,
-    MSG_BDD = 0xBDD,
-    MSG_BDE = 0xBDE,
-    MSG_BDF = 0xBDF,
-    MSG_BE0 = 0xBE0,
-    MSG_BE1 = 0xBE1,
-    MSG_BE2 = 0xBE2,
-    MSG_BE3 = 0xBE3,
-    MSG_BE4 = 0xBE4,
-    MSG_BE5 = 0xBE5,
-    MSG_BE6 = 0xBE6,
-    MSG_BE7 = 0xBE7,
-    MSG_BE8 = 0xBE8,
-    MSG_BE9 = 0xBE9,
-    MSG_BEA = 0xBEA,
-    MSG_BEB = 0xBEB,
-    MSG_BEC = 0xBEC,
-    MSG_BED = 0xBED,
-    MSG_BEE = 0xBEE,
-    MSG_BEF = 0xBEF,
-    MSG_BF0 = 0xBF0,
-    MSG_BF1 = 0xBF1,
-    MSG_BF2 = 0xBF2,
-    MSG_BF3 = 0xBF3,
-    MSG_BF4 = 0xBF4,
-    MSG_BF5 = 0xBF5,
-    MSG_BF6 = 0xBF6,
-    MSG_BF7 = 0xBF7,
-    MSG_BF8 = 0xBF8,
-    MSG_BF9 = 0xBF9,
-    MSG_BFA = 0xBFA,
-    MSG_BFB = 0xBFB,
-    MSG_BFC = 0xBFC,
-    MSG_BFD = 0xBFD,
-    MSG_BFE = 0xBFE,
-    MSG_BFF = 0xBFF,
-    MSG_C00 = 0xC00,
-    MSG_C01 = 0xC01,
-    MSG_C02 = 0xC02,
-    MSG_C03 = 0xC03,
-    MSG_C04 = 0xC04,
-    MSG_C05 = 0xC05,
-    MSG_C06 = 0xC06,
-    MSG_C07 = 0xC07,
-    MSG_C08 = 0xC08,
-    MSG_C09 = 0xC09,
-    MSG_C0A = 0xC0A,
-    MSG_C0B = 0xC0B,
-    MSG_C0C = 0xC0C,
-    MSG_C0D = 0xC0D,
-    MSG_C0E = 0xC0E,
-    MSG_C0F = 0xC0F,
-    MSG_C10 = 0xC10,
-    MSG_C11 = 0xC11,
-    MSG_C12 = 0xC12,
-    MSG_C13 = 0xC13,
-    MSG_C14 = 0xC14,
-    MSG_C15 = 0xC15,
-    MSG_C16 = 0xC16,
-    MSG_C17 = 0xC17,
-    MSG_C18 = 0xC18,
-    MSG_C19 = 0xC19,
-    MSG_C1A = 0xC1A,
-    MSG_C1B = 0xC1B,
-    MSG_C1C = 0xC1C,
-    MSG_C1D = 0xC1D,
-    MSG_C1E = 0xC1E,
-    MSG_C1F = 0xC1F,
-    MSG_C20 = 0xC20,
-    MSG_C21 = 0xC21,
-    MSG_C22 = 0xC22,
-    MSG_C23 = 0xC23,
-    MSG_C24 = 0xC24,
-    MSG_C25 = 0xC25,
-    MSG_C26 = 0xC26,
-    MSG_C27 = 0xC27,
-    MSG_C28 = 0xC28,
-    MSG_C29 = 0xC29,
-    MSG_C2A = 0xC2A,
-    MSG_C2B = 0xC2B,
-    MSG_C2C = 0xC2C,
-    MSG_C2D = 0xC2D,
-    MSG_C2E = 0xC2E,
-    MSG_C2F = 0xC2F,
-    MSG_C30 = 0xC30,
-    MSG_C31 = 0xC31,
-    MSG_C32 = 0xC32,
-    MSG_C33 = 0xC33,
-    MSG_C34 = 0xC34,
-    MSG_C35 = 0xC35,
-    MSG_C36 = 0xC36,
-    MSG_C37 = 0xC37,
-    MSG_C38 = 0xC38,
-    MSG_C39 = 0xC39,
-    MSG_C3A = 0xC3A,
-    MSG_C3B = 0xC3B,
-    MSG_C3C = 0xC3C,
-    MSG_C3D = 0xC3D,
-    MSG_C3E = 0xC3E,
-    MSG_C3F = 0xC3F,
-    MSG_C40 = 0xC40,
-    MSG_C41 = 0xC41,
-    MSG_C42 = 0xC42,
-    MSG_C43 = 0xC43,
-    MSG_C44 = 0xC44,
-    MSG_C45 = 0xC45,
-    MSG_C46 = 0xC46,
-    MSG_C47 = 0xC47,
-    MSG_C48 = 0xC48, // sio error?
-    MSG_C49 = 0xC49,
-    MSG_C4A = 0xC4A,
-    MSG_C4B = 0xC4B,
-    MSG_C4C = 0xC4C,
-    MSG_C4D = 0xC4D,
-    MSG_C4E = 0xC4E,
-    MSG_C4F = 0xC4F,
-    MSG_C50 = 0xC50,
-    MSG_C51 = 0xC51,
-    MSG_C52 = 0xC52,
-    MSG_C53 = 0xC53,
-    MSG_C54 = 0xC54,
-    MSG_C55 = 0xC55,
-    MSG_C56 = 0xC56,
-    MSG_C57 = 0xC57,
-    MSG_C58 = 0xC58,
-    MSG_C59 = 0xC59,
-    MSG_C5A = 0xC5A,
-    MSG_C5B = 0xC5B,
-    MSG_C5C = 0xC5C,
-    MSG_C5D = 0xC5D,
-    MSG_C5E = 0xC5E,
-    MSG_C5F = 0xC5F,
-    MSG_C60 = 0xC60,
-    MSG_C61 = 0xC61,
-    MSG_C62 = 0xC62,
-    MSG_C63 = 0xC63,
-    MSG_C64 = 0xC64,
-    MSG_C65 = 0xC65,
-    MSG_C66 = 0xC66,
-    MSG_C67 = 0xC67,
-    MSG_C68 = 0xC68,
-    MSG_C69 = 0xC69,
-    MSG_C6A = 0xC6A,
-    MSG_C6B = 0xC6B,
-    MSG_C6C = 0xC6C,
-    MSG_C6D = 0xC6D,
-    MSG_C6E = 0xC6E,
-    MSG_C6F = 0xC6F,
-    MSG_C70 = 0xC70,
-    MSG_C71 = 0xC71,
-    MSG_C72 = 0xC72,
-    MSG_C73 = 0xC73,
-    MSG_C74 = 0xC74,
-    MSG_C75 = 0xC75,
-    MSG_C76 = 0xC76,
-    MSG_C77 = 0xC77,
-    MSG_C78 = 0xC78,
-    MSG_C79 = 0xC79,
-    MSG_C7A = 0xC7A,
-    MSG_C7B = 0xC7B,
-    MSG_C7C = 0xC7C,
-    MSG_C7D = 0xC7D,
-    MSG_C7E = 0xC7E,
-    MSG_C7F = 0xC7F,
-    MSG_C80 = 0xC80,
-    MSG_C81 = 0xC81,
-    MSG_C82 = 0xC82,
-    MSG_C83 = 0xC83,
-    MSG_C84 = 0xC84,
-    MSG_C85 = 0xC85,
-    MSG_C86 = 0xC86,
-    MSG_C87 = 0xC87,
-    MSG_C88 = 0xC88,
-    MSG_C89 = 0xC89,
-    MSG_C8A = 0xC8A,
-    MSG_C8B = 0xC8B,
-    MSG_C8C = 0xC8C,
-    MSG_C8D = 0xC8D,
-    MSG_C8E = 0xC8E,
-    MSG_C8F = 0xC8F,
-    MSG_C90 = 0xC90,
-    MSG_C91 = 0xC91,
-    MSG_C92 = 0xC92,
-    MSG_C93 = 0xC93,
-    MSG_C94 = 0xC94,
-    MSG_C95 = 0xC95,
-    MSG_C96 = 0xC96,
-    MSG_C97 = 0xC97,
-    MSG_C98 = 0xC98,
-    MSG_C99 = 0xC99,
-    MSG_C9A = 0xC9A,
-    MSG_C9B = 0xC9B,
-    MSG_C9C = 0xC9C,
-    MSG_C9D = 0xC9D,
-    MSG_C9E = 0xC9E,
-    MSG_C9F = 0xC9F,
-    MSG_CA0 = 0xCA0,
-    MSG_CA1 = 0xCA1,
-    MSG_CA2 = 0xCA2,
-    MSG_CA3 = 0xCA3,
-    MSG_CA4 = 0xCA4,
-    MSG_CA5 = 0xCA5,
-    MSG_CA6 = 0xCA6,
-    MSG_CA7 = 0xCA7,
-    MSG_CA8 = 0xCA8,
-    MSG_CA9 = 0xCA9,
-    MSG_CAA = 0xCAA,
-    MSG_CAB = 0xCAB,
-    MSG_CAC = 0xCAC,
-    MSG_CAD = 0xCAD,
-    MSG_CAE = 0xCAE,
-    MSG_CAF = 0xCAF,
-    MSG_CB0 = 0xCB0,
-    MSG_CB1 = 0xCB1,
-    MSG_CB2 = 0xCB2,
-    MSG_CB3 = 0xCB3,
-    MSG_CB4 = 0xCB4,
-    MSG_CB5 = 0xCB5,
-    MSG_CB6 = 0xCB6,
-    MSG_CB7 = 0xCB7,
-    MSG_CB8 = 0xCB8,
-    MSG_CB9 = 0xCB9,
-    MSG_CBA = 0xCBA,
-    MSG_CBB = 0xCBB,
-    MSG_CBC = 0xCBC,
-    MSG_CBD = 0xCBD,
-    MSG_CBE = 0xCBE,
-    MSG_CBF = 0xCBF,
-    MSG_CC0 = 0xCC0,
-    MSG_CC1 = 0xCC1,
-    MSG_CC2 = 0xCC2,
-    MSG_CC3 = 0xCC3,
-    MSG_CC4 = 0xCC4,
-    MSG_CC5 = 0xCC5,
-    MSG_CC6 = 0xCC6,
-    MSG_CC7 = 0xCC7,
-    MSG_CC8 = 0xCC8,
-    MSG_CC9 = 0xCC9,
-    MSG_CCA = 0xCCA,
-    MSG_CCB = 0xCCB,
-    MSG_CCC = 0xCCC,
-    MSG_CCD = 0xCCD,
-    MSG_CCE = 0xCCE,
-    MSG_CCF = 0xCCF,
-    MSG_CD0 = 0xCD0,
-    MSG_CD1 = 0xCD1,
-    MSG_CD2 = 0xCD2,
-    MSG_CD3 = 0xCD3,
-    MSG_CD4 = 0xCD4,
-    MSG_CD5 = 0xCD5,
-    MSG_CD6 = 0xCD6,
-    MSG_CD7 = 0xCD7,
-    MSG_CD8 = 0xCD8,
-    MSG_CD9 = 0xCD9,
-    MSG_CDA = 0xCDA,
-    MSG_CDB = 0xCDB,
-    MSG_CDC = 0xCDC,
-    MSG_CDD = 0xCDD,
-    MSG_CDE = 0xCDE,
-    MSG_CDF = 0xCDF,
-    MSG_CE0 = 0xCE0,
-    MSG_CE1 = 0xCE1,
-    MSG_CE2 = 0xCE2,
-    MSG_CE3 = 0xCE3,
-    MSG_CE4 = 0xCE4,
-    MSG_CE5 = 0xCE5,
-    MSG_CE6 = 0xCE6,
-    MSG_CE7 = 0xCE7,
-    MSG_CE8 = 0xCE8,
-    MSG_CE9 = 0xCE9,
-    MSG_CEA = 0xCEA,
-    MSG_CEB = 0xCEB,
-    MSG_CEC = 0xCEC,
-    MSG_CED = 0xCED,
-    MSG_CEE = 0xCEE,
-    MSG_CEF = 0xCEF,
-    MSG_CF0 = 0xCF0,
-    MSG_CF1 = 0xCF1,
-    MSG_CF2 = 0xCF2,
-    MSG_CF3 = 0xCF3,
-    MSG_CF4 = 0xCF4,
-    MSG_CF5 = 0xCF5,
-    MSG_CF6 = 0xCF6,
-    MSG_CF7 = 0xCF7,
-    MSG_CF8 = 0xCF8,
-    MSG_CF9 = 0xCF9,
-    MSG_CFA = 0xCFA,
-    MSG_CFB = 0xCFB,
-    MSG_CFC = 0xCFC,
-    MSG_CFD = 0xCFD,
-    MSG_CFE = 0xCFE,
-    MSG_CFF = 0xCFF,
-    MSG_D00 = 0xD00,
-    MSG_D01 = 0xD01,
-    MSG_D02 = 0xD02,
-    MSG_D03 = 0xD03,
-    MSG_D04 = 0xD04,
-    MSG_D05 = 0xD05,
-    MSG_D06 = 0xD06,
-    MSG_D07 = 0xD07,
-    MSG_D08 = 0xD08,
-    MSG_D09 = 0xD09,
-    MSG_D0A = 0xD0A,
-    MSG_D0B = 0xD0B,
-    MSG_D0C = 0xD0C,
-    MSG_D0D = 0xD0D,
-
-    MSG_COUNT,
-};
diff --git a/include/constants/pids.h b/include/constants/pids.h
deleted file mode 100644
index 5c7e70f..0000000
--- a/include/constants/pids.h
+++ /dev/null
@@ -1,236 +0,0 @@
-#pragma once
-
-// will figure most of this out once chapter events are dumped
-
-enum
-{
-    PID_NONE = 0x00,
-    PID_ROY = 0x01,
-    PID_CLARINE = 0x02,
-    PID_FAE = 0x03,
-    PID_SIN = 0x04,
-    PID_SUE = 0x05,
-    PID_DAYAN = 0x06,
-    PID_DAYAN_ALT = 0x07,
-    PID_BARTHE = 0x08,
-    PID_BORS = 0x09,
-    PID_GWENDOLYN = 0x0A,
-    PID_DOUGLAS = 0x0B,
-    PID_DOUGLAS_ALT = 0x0C,
-    PID_WOLT = 0x0D,
-    PID_DOROTHY = 0x0E,
-    PID_KLEIN = 0x0F,
-    PID_SAUL = 0x10,
-    PID_ELEN = 0x11,
-    PID_YODER = 0x12,
-    PID_YODER_ALT = 0x13,
-    PID_CHAD = 0x14,
-    PID_KAREL = 0x15,
-    PID_FIR = 0x16,
-    PID_RUTGER = 0x17,
-    PID_DIECK = 0x18,
-    PID_OGIER = 0x19,
-    PID_GARRET = 0x1A,
-    PID_ALEN = 0x1B,
-    PID_LANCE = 0x1C,
-    PID_PERCEVAL = 0x1D,
-    PID_IGRENE = 0x1E,
-    PID_MARCUS = 0x1F,
-    PID_ASTOLFO = 0x20,
-    PID_WARD = 0x21,
-    PID_LOT = 0x22,
-    PID_BARTRE = 0x23,
-    PID_BARTRE_ALT = 0x24,
-    PID_LUGH = 0x25,
-    PID_LILINA = 0x26,
-    PID_HUGH = 0x27,
-    PID_NIIME = 0x28,
-    PID_NIIME_ALT = 0x29,
-    PID_RAIGH = 0x2A,
-    PID_LARUM = 0x2B,
-    PID_JUNO = 0x2C,
-    PID_JUNO_ALT = 0x2D,
-    PID_THEA = 0x2E,
-    PID_THEA_NPC = 0x2F,
-    PID_THEA_NPC_ALT = 0x30,
-    PID_SHANNA = 0x31,
-    PID_ZEISS = 0x32,
-    PID_GALLE = 0x33,
-    PID_ELFFIN = 0x34,
-    PID_CATH = 0x35,
-    PID_SOPHIA = 0x36,
-    PID_MELADY = 0x37,
-    PID_GONZALEZ = 0x38,
-    PID_GONZALEZ_ALT = 0x39,
-    PID_NOAH = 0x3A,
-    PID_TREC = 0x3B,
-    PID_ZELOT = 0x3C,
-    PID_ECHIDNA = 0x3D,
-    PID_ECHIDNA_ALT = 0x3E,
-    PID_CECILIA = 0x3F,
-    PID_GEESE = 0x40,
-    PID_GEESE_ALT = 0x41,
-    PID_MERLINUS = 0x42,
-    PID_ELIWOOD = 0x43,
-    PID_GUINIVERE = 0x44,
-    PID_CHAPTER1_BANDIT = 0x45,
-    PID_UNKNOWN_46 = 0x46,
-    PID_UNKNOWN_47 = 0x47,
-    PID_CHAPTER1_ARCHER = 0x48,
-    PID_UNKNOWN_49 = 0x49,
-    PID_CHAPTER1_4A = 0x4A,
-    PID_CHAPTER2_4B = 0x4B,
-    PID_UNKNOWN_4C = 0x4C,
-    PID_UNKNOWN_4D = 0x4D,
-    PID_UNKNOWN_4E = 0x4E,
-    PID_UNKNOWN_4F = 0x4F,
-    PID_UNKNOWN_50 = 0x50,
-    PID_UNKNOWN_51 = 0x51,
-    PID_UNKNOWN_52 = 0x52,
-    PID_UNKNOWN_53 = 0x53,
-    PID_UNKNOWN_54 = 0x54,
-    PID_UNKNOWN_55 = 0x55,
-    PID_UNKNOWN_56 = 0x56,
-    PID_UNKNOWN_57 = 0x57,
-    PID_UNKNOWN_58 = 0x58,
-    PID_NARCIAN = 0x59,
-    PID_UNKNOWN_5A = 0x5A,
-    PID_UNKNOWN_5B = 0x5B,
-    PID_UNKNOWN_5C = 0x5C,
-    PID_UNKNOWN_5D = 0x5D,
-    PID_UNKNOWN_5E = 0x5E,
-    PID_UNKNOWN_5F = 0x5F,
-    PID_UNKNOWN_60 = 0x60,
-    PID_UNKNOWN_61 = 0x61,
-    PID_MURDOCK = 0x62,
-    PID_BRUNNYA = 0x63,
-    PID_ZEPHIEL = 0x64,
-    PID_IDUNN = 0x65,
-    PID_IDUNN_DRAGON = 0x66,
-    PID_JAHN = 0x67,
-    PID_UNKNOWN_68 = 0x68,
-    PID_UNKNOWN_69 = 0x69,
-    PID_UNKNOWN_6A = 0x6A,
-    PID_UNKNOWN_6B = 0x6B,
-    PID_CHAPTER2_GENERIC = 0x6C,
-    PID_CHAPTER2_SOLDIER_JAVELIN = 0x6D,
-    PID_CHAPTER2_MERCENARY = 0x6E,
-    PID_CHAPTER3_BERN = 0x6F,
-    PID_CHAPTER3_LANCER = 0x70,
-    PID_CHAPTER4_LAUS = 0x71,
-    PID_CHAPTER4_PIRATE = 0x72,
-    PID_CHAPTER5_BANDIT = 0x73,
-    PID_UNKNOWN_74 = 0x74,
-    PID_UNKNOWN_75 = 0x75,
-    PID_UNKNOWN_76 = 0x76,
-    PID_UNKNOWN_77 = 0x77,
-    PID_UNKNOWN_78 = 0x78,
-    PID_UNKNOWN_79 = 0x79,
-    PID_UNKNOWN_7A = 0x7A,
-    PID_UNKNOWN_7B = 0x7B,
-    PID_UNKNOWN_7C = 0x7C,
-    PID_UNKNOWN_7D = 0x7D,
-    PID_UNKNOWN_7E = 0x7E,
-    PID_UNKNOWN_7F = 0x7F,
-    PID_UNKNOWN_80 = 0x80,
-    PID_UNKNOWN_81 = 0x81,
-    PID_UNKNOWN_82 = 0x82,
-    PID_UNKNOWN_83 = 0x83,
-    PID_UNKNOWN_84 = 0x84,
-    PID_UNKNOWN_85 = 0x85,
-    PID_UNKNOWN_86 = 0x86,
-    PID_UNKNOWN_87 = 0x87,
-    PID_UNKNOWN_88 = 0x88,
-    PID_UNKNOWN_89 = 0x89,
-    PID_UNKNOWN_8A = 0x8A,
-    PID_UNKNOWN_8B = 0x8B,
-    PID_UNKNOWN_8C = 0x8C,
-    PID_UNKNOWN_8D = 0x8D,
-    PID_UNKNOWN_8E = 0x8E,
-    PID_UNKNOWN_8F = 0x8F,
-    PID_UNKNOWN_90 = 0x90,
-    PID_UNKNOWN_91 = 0x91,
-    PID_UNKNOWN_92 = 0x92,
-    PID_UNKNOWN_93 = 0x93,
-    PID_UNKNOWN_94 = 0x94,
-    PID_UNKNOWN_95 = 0x95,
-    PID_UNKNOWN_96 = 0x96,
-    PID_UNKNOWN_97 = 0x97,
-    PID_UNKNOWN_98 = 0x98,
-    PID_UNKNOWN_99 = 0x99,
-    PID_UNKNOWN_9A = 0x9A,
-    PID_UNKNOWN_9B = 0x9B,
-    PID_UNKNOWN_9C = 0x9C,
-    PID_UNKNOWN_9D = 0x9D,
-    PID_UNKNOWN_9E = 0x9E,
-    PID_UNKNOWN_9F = 0x9F,
-    PID_UNKNOWN_A0 = 0xA0,
-    PID_UNKNOWN_A1 = 0xA1,
-    PID_UNKNOWN_A2 = 0xA2,
-    PID_UNKNOWN_A3 = 0xA3,
-    PID_CITIZEN_A4 = 0xA4,
-    PID_UNKNOWN_A5 = 0xA5,
-    PID_UNKNOWN_A6 = 0xA6,
-    PID_UNKNOWN_A7 = 0xA7,
-    PID_UNKNOWN_A8 = 0xA8,
-    PID_UNKNOWN_A9 = 0xA9,
-    PID_UNKNOWN_AA = 0xAA,
-    PID_UNKNOWN_AB = 0xAB,
-    PID_UNKNOWN_AC = 0xAC,
-    PID_UNKNOWN_AD = 0xAD,
-    PID_UNKNOWN_AE = 0xAE,
-    PID_UNKNOWN_AF = 0xAF,
-    PID_COMMON_MANAKETE = 0xB0,
-    PID_UNKNOWN_B1 = 0xB1,
-    PID_UNKNOWN_B2 = 0xB2,
-    PID_UNKNOWN_B3 = 0xB3,
-    PID_UNKNOWN_B4 = 0xB4,
-    PID_UNKNOWN_B5 = 0xB5,
-    PID_UNKNOWN_B6 = 0xB6,
-    PID_UNKNOWN_B7 = 0xB7,
-    PID_UNKNOWN_B8 = 0xB8,
-    PID_UNKNOWN_B9 = 0xB9,
-    PID_UNKNOWN_BA = 0xBA,
-    PID_UNKNOWN_BB = 0xBB,
-    PID_UNKNOWN_BC = 0xBC,
-    PID_UNKNOWN_BD = 0xBD,
-    PID_UNKNOWN_BE = 0xBE,
-    PID_UNKNOWN_BF = 0xBF,
-    PID_UNKNOWN_C0 = 0xC0,
-    PID_UNKNOWN_C1 = 0xC1,
-    PID_UNKNOWN_C2 = 0xC2,
-    PID_UNKNOWN_C3 = 0xC3,
-    PID_UNKNOWN_C4 = 0xC4,
-    PID_UNKNOWN_C5 = 0xC5,
-    PID_UNKNOWN_C6 = 0xC6,
-    PID_UNKNOWN_C7 = 0xC7,
-    PID_UNKNOWN_C8 = 0xC8,
-    PID_UNKNOWN_C9 = 0xC9,
-    PID_UNKNOWN_CA = 0xCA,
-    PID_UNKNOWN_CB = 0xCB,
-    PID_UNKNOWN_CC = 0xCC,
-    PID_CITIZEN_CD = 0xCD,
-    PID_UNKNOWN_CE = 0xCE,
-    PID_HECTOR = 0xCF,
-    PID_BORS_TUTORIAL = 0xD0,
-    PID_TUTORIAL_SOLDIER = 0xD1,
-    PID_TUTORIAL_ARCHER = 0xD2,
-    PID_UNKNOWN_D3 = 0xD3,
-    PID_UNKNOWN_D4 = 0xD4,
-    PID_UNKNOWN_D5 = 0xD5,
-    PID_UNKNOWN_D6 = 0xD6,
-    PID_UNKNOWN_D7 = 0xD7,
-    PID_KLEIN_SQUAD = 0xD8,
-    PID_THEA_SQUAD = 0xD9,
-    PID_UNKNOWN_DA = 0xDA,
-    PID_UNKNOWN_DB = 0xDB,
-    PID_UNKNOWN_DC = 0xDC,
-    PID_UNKNOWN_DD = 0xDD,
-    PID_UNKNOWN_DE = 0xDE,
-    PID_UNKNOWN_DF = 0xDF,
-    PID_CHAPTER1_PILLAGER = 0xE0,
-    PID_ARENA_OPPONENT = 0xE1,
-    PID_WALL = 0xE2,
-
-    MAX_PIDS,
-};
diff --git a/include/constants/songs.h b/include/constants/songs.h
deleted file mode 100644
index 9ee92d2..0000000
--- a/include/constants/songs.h
+++ /dev/null
@@ -1,118 +0,0 @@
-#pragma once
-
-enum
-{
-    SONG_02 = 0x02,
-    SONG_03 = 0x03,
-    SONG_04 = 0x04,
-    SONG_05 = 0x05,
-    SONG_06 = 0x06,
-    SONG_09 = 0x09,
-    SONG_0A = 0x0A,
-    SONG_0C = 0x0C,
-    SONG_0E = 0x0E,
-    SONG_0F = 0x0F,
-    SONG_11 = 0x11,
-    SONG_12 = 0x12,
-    SONG_13 = 0x13,
-    SONG_14 = 0x14,
-    SONG_22 = 0x22,
-    SONG_23 = 0x23,
-    SONG_24 = 0x24,
-    SONG_25 = 0x25,
-    SONG_26 = 0x26,
-    SONG_27 = 0x27,
-    SONG_28 = 0x28,
-    SONG_29 = 0x29,
-    SONG_2A = 0x2A,
-    SONG_2B = 0x2B,
-    SONG_2C = 0x2C,
-    SONG_31 = 0x31,
-    SONG_32 = 0x32,
-    SONG_33 = 0x33,
-    SONG_34 = 0x34,
-    SONG_37 = 0x37,
-    SONG_3B = 0x3B,
-    SONG_3C = 0x3C,
-    SONG_3D = 0x3D,
-    SONG_3E = 0x3E,
-    SONG_3F = 0x3F,
-    SONG_43 = 0x43,
-    SONG_45 = 0x45,
-    SONG_5A = 0x5A,
-    SONG_5B = 0x5B,
-    SONG_5C = 0x5C,
-    SONG_61 = 0x61,
-    SONG_65 = 0x65,
-    SONG_66 = 0x66,
-    SONG_67 = 0x67, // change selection in menu/help box
-    SONG_68 = 0x68,
-    SONG_69 = 0x69,
-    SONG_6A = 0x6A,
-    SONG_6B = 0x6B,
-    SONG_6C = 0x6C,
-    SONG_6E = 0x6E,
-    SONG_6F = 0x6F, // stat screen page slide
-    SONG_70 = 0x70, // help box open
-    SONG_71 = 0x71, // help box close
-    SONG_73 = 0x73,
-    SONG_74 = 0x74, // exp bar thingy
-    SONG_75 = 0x75,
-    SONG_76 = 0x76,
-    SONG_77 = 0x77,
-    SONG_7A = 0x7A,
-    SONG_7B = 0x7B, // sioerror
-    SONG_82 = 0x82, // manim
-    SONG_83 = 0x83, // manim
-    SONG_84 = 0x84, // manim
-    SONG_85 = 0x85, // manim
-    SONG_86 = 0x86,
-    SONG_87 = 0x87,
-    SONG_88 = 0x88, // manim
-    SONG_89 = 0x89,
-    SONG_8A = 0x8A, // manim
-    SONG_8B = 0x8B, // manim
-    SONG_8C = 0x8C,
-    SONG_8D = 0x8D, // manim (unlock?)
-    SONG_90 = 0x90,
-    SONG_91 = 0x91,
-    SONG_96 = 0x96,
-    SONG_97 = 0x97,
-    SONG_9A = 0x9A,
-    SONG_9B = 0x9B,
-    SONG_9C = 0x9C,
-    SONG_A0 = 0xA0,
-    SONG_A4 = 0xA4,
-    SONG_A5 = 0xA5,
-    SONG_A6 = 0xA6,
-    SONG_A8 = 0xA8, // dance sfx
-    SONG_A9 = 0xA9, // play (bard) sfx
-    SONG_AA = 0xAA,
-    SONG_AB = 0xAB,
-    SONG_AC = 0xAC,
-    SONG_AF = 0xAF, // obstacle destroy (end)
-    SONG_B0 = 0xB0, // obstacle destroy (mid)
-    SONG_B1 = 0xB1,
-    SONG_B3 = 0xB3,
-    SONG_B4 = 0xB4, // manim
-    SONG_B5 = 0xB5, // manim
-    SONG_B6 = 0xB6,
-    SONG_B7 = 0xB7, // manim poison
-    SONG_BA = 0xBA,
-    SONG_BC = 0xBC,
-    SONG_BD = 0xBD,
-    SONG_BE = 0xBE,
-    SONG_BF = 0xBF,
-    SONG_C4 = 0xC4,
-    SONG_C6 = 0xC6,
-    SONG_C8 = 0xC8, // stat screen unit slide, also miss
-    SONG_D2 = 0xD2,
-    SONG_D5 = 0xD5,
-    SONG_D6 = 0xD6,
-    SONG_D8 = 0xD8, // crit?
-    SONG_EC = 0xEC, // no damage
-    SONG_FD = 0xFD, // manim
-    SONG_10F = 0x10F,
-    SONG_269 = 0x269,
-    SONG_26A = 0x26A,
-};
diff --git a/include/constants/terrains.h b/include/constants/terrains.h
index 1650217..2915cdc 100644
--- a/include/constants/terrains.h
+++ b/include/constants/terrains.h
@@ -1,12 +1,8 @@
 #pragma once
 
-enum
-{
+enum {
     // Terrain identifiers
 
-    // I'm going by the FE8 in-game names + some old FE7 nmm for this
-    // TODO: figure out in better details
-
     TERRAIN_TILE_00    = 0x00,
     TERRAIN_PLAINS     = 0x01,
     TERRAIN_ROAD       = 0x02,
diff --git a/include/constants/unitsprites.h b/include/constants/unitsprites.h
deleted file mode 100644
index 47b23e4..0000000
--- a/include/constants/unitsprites.h
+++ /dev/null
@@ -1,78 +0,0 @@
-#pragma once
-
-enum
-{
-    // map sprite ids
-
-    UNITSPRITE_ROY = 0x00,
-    UNITSPRITE_MERCENARY = 0x01,
-    UNITSPRITE_MERCENARY_F = 0x02,
-    UNITSPRITE_HERO = 0x03,
-    UNITSPRITE_HERO_F = 0x04,
-    UNITSPRITE_MYRMIDON = 0x05,
-    UNITSPRITE_MYRMIDON_F = 0x06,
-    UNITSPRITE_SWORDMASTER = 0x07,
-    UNITSPRITE_SWORDMASTER_F = 0x08,
-    UNITSPRITE_FIGHTER = 0x09,
-    UNITSPRITE_WARRIOR = 0x0A,
-    UNITSPRITE_ARMOR = 0x0B,
-    UNITSPRITE_GENERAL = 0x0C,
-    UNITSPRITE_ARCHER = 0x0D,
-    UNITSPRITE_ARCHER_F = 0x0E,
-    UNITSPRITE_SNIPER = 0x0F,
-    UNITSPRITE_SNIPER_F = 0x10,
-    UNITSPRITE_PRIEST = 0x11,
-    UNITSPRITE_CLERIC = 0x12,
-    UNITSPRITE_BISHOP = 0x13,
-    UNITSPRITE_BISHOP_F = 0x14,
-    UNITSPRITE_MAGE = 0x15,
-    UNITSPRITE_MAGE_F = 0x16,
-    UNITSPRITE_SAGE = 0x17,
-    UNITSPRITE_SAGE_F = 0x18,
-    UNITSPRITE_SHAMAN = 0x19,
-    UNITSPRITE_SHAMAN_F = 0x1A,
-    UNITSPRITE_DRUID = 0x1B,
-    UNITSPRITE_DRUID_F = 0x1C,
-    UNITSPRITE_CAVALIER = 0x1D,
-    UNITSPRITE_CAVALIER_F = 0x1E,
-    UNITSPRITE_PALADIN = 0x1F,
-    UNITSPRITE_PALADIN_F = 0x20,
-    UNITSPRITE_TROUBADOUR = 0x21,
-    UNITSPRITE_VALKYRIE = 0x22,
-    UNITSPRITE_NOMAD = 0x23,
-    UNITSPRITE_NOMAD_F = 0x24,
-    UNITSPRITE_NOMADTROOPER = 0x25,
-    UNITSPRITE_NOMADTROOPER_F = 0x26,
-    UNITSPRITE_PEGASUSKNIGHT = 0x27,
-    UNITSPRITE_FALCONKNIGHT = 0x28,
-    UNITSPRITE_WYVERNRIDER = 0x29,
-    UNITSPRITE_WYVERNLORD = 0x2A,
-    UNITSPRITE_SOLDIER = 0x2B,
-    UNITSPRITE_BRIGAND = 0x2C,
-    UNITSPRITE_PIRATE = 0x2D,
-    UNITSPRITE_BERSERKER = 0x2E,
-    UNITSPRITE_THIEF = 0x2F,
-    UNITSPRITE_THIEF_F = 0x30,
-    UNITSPRITE_BARD = 0x31,
-    UNITSPRITE_DANCER = 0x32,
-    UNITSPRITE_MANAKETE = 0x33,
-    UNITSPRITE_FAE = 0x34,
-    UNITSPRITE_FIREDRAGON = 0x35,
-    UNITSPRITE_DIVINEDRAGON = 0x36,
-    UNITSPRITE_DEMONDRAGON = 0x37,
-    UNITSPRITE_KING = 0x38,
-    UNITSPRITE_CIVILIAN = 0x39,
-    UNITSPRITE_CIVILIAN_F = 0x3A,
-    UNITSPRITE_CHILD = 0x3B,
-    UNITSPRITE_CHILD_F = 0x3C,
-    UNITSPRITE_SUPPLY = 0x3D,
-    UNITSPRITE_ROY_PROMOTED = 0x3E,
-    UNITSPRITE_ARCHER_BALLISTA = 0x3F,
-    UNITSPRITE_ARCHER_LONGBALLISTA = 0x40,
-    UNITSPRITE_ARCHER_KILLERBALLISTA = 0x41,
-    UNITSPRITE_BALLISTA = 0x42,
-    UNITSPRITE_LONGBALLISTA = 0x43,
-    UNITSPRITE_KILLERBALLISTA = 0x44,
-    UNITSPRITE_DISMOUNTED = 0x45,
-    UNITSPRITE_DISMOUNTED_F = 0x46,
-};
diff --git a/include/constants/videoalloc_banim.h b/include/constants/videoalloc_banim.h
deleted file mode 100644
index 0dacc25..0000000
--- a/include/constants/videoalloc_banim.h
+++ /dev/null
@@ -1,13 +0,0 @@
-#pragma once
-
-#include "constants/videoalloc_global.h"
-
-enum
-{
-    OBJCHR_BANIM_FACE = 0x40,
-};
-
-enum
-{
-    OBJPAL_BANIM_FACE = 3,
-};
diff --git a/include/constants/videoalloc_global.h b/include/constants/videoalloc_global.h
deleted file mode 100644
index 10c1e39..0000000
--- a/include/constants/videoalloc_global.h
+++ /dev/null
@@ -1,208 +0,0 @@
-#pragma once
-
-#include "gba/gba.h"
-
-// TODO: move elsewhere
-#define CHR_SIZE 0x20
-#define CHR_LINE 0x20
-
-enum
-{
-    BGCHR_WINDOWFRAME = 0,
-
-    BGCHR_TEXT_DEFAULT = 0x80,
-
-    BGCHR_0_TEXT_POPUP = 0x100,
-    BGCHR_DEBUGTEXT_DEFAULT = 0x2C0,
-
-    BGCHR_LIMITVIEW = 0x280,
-
-    BGCHR_ICON_BEGIN = 0x280,
-    BGCHR_ICON_END   = 0x300,
-
-    BGCHR_STATUSHEAL = 0x280,
-
-    BGCHR_TILESET_A = 0x400,
-    BGCHR_TILESET_B = 0x600,
-
-    BGCHR_PHASE_CHANGE_SQUARES = 0x100,
-    BGCHR_PHASE_CHANGE_NAME = 0x140,
-
-    BGCHR_CHAPTERINTRO_80 = 0x80,
-    BGCHR_CHAPTERINTRO_100 = 0x100,
-    BGCHR_CHAPTERINTRO_MOTIF = 0x400,
-    BGCHR_CHAPTERINTRO_FOG = 0x500,
-
-    BGCHR_GAMEOVER_TEXT = 0x80,
-    BGCHR_GAMEOVER_100 = 0x100,
-
-    BGCHR_STEALSELECT_FACE = 0x200,
-
-    BGCHR_BATTLEPREVIEW_FRAME = 0x200,
-
-    BGCHR_MANIM_INFOFRAME = 1,
-    BGCHR_MANIM_140 = 0x140,
-    BGCHR_MANIM_200 = 0x200,
-
-    BGCHR_STATSCREEN_EQUIPMENTLABEL = 0x270,
-
-    BGCHR_STATSCREEN_EQUIPSTATFRAME = 0x60, // chr bank @ 8000
-    BGCHR_STATSCREEN_FACE = 0xE0, // chr bank @ 8000
-    BGCHR_STATSCREEN_BACKMURAL = 0x180, // chr bank @ 8000
-
-    BGCHR_MAPUI_CHIBI = 0x0F0,
-    BGCHR_MAPUI_100 = 0x100,
-    BGCHR_MAPUI_128 = 0x128,
-    BGCHR_MAPUI_140 = 0x140,
-
-    BGCHR_STATUSSCREEN_280 = 0x280,
-    BGCHR_B_STATUSSCREEN_280 = 0x280,
-    BGCHR_B_STATUSSCREEN_380 = 0x380,
-    BGCHR_B_STATUSSCREEN_3C0 = 0x3C0,
-};
-
-enum
-{
-    BGPAL_TEXT_DEFAULT    = 0,
-    BGPAL_WINDOWFRAME     = 1,
-    BGPAL_TALK            = 2,
-    BGPAL_TALK_BUBBLE     = 3,
-    BGPAL_ICONS           = 4, // .. 5
-    BGPAL_TILESET         = 6, // .. 15
-
-    BGPAL_DEBUGTEXT       = 0,
-
-    BGPAL_EQUIP_INFO_ICON = 3,
-
-    BGPAL_STATUSHEAL = 3,
-
-    BGPAL_BATTLEPREVIEW_ICONALT = 3,
-
-    BGPAL_LIMITVIEW = 4, // .. 5
-
-    BGPAL_PHASE_CHANGE = 5,
-
-    BGPAL_CHAPTERINTRO_0 = 0,
-    BGPAL_CHAPTERINTRO_1 = 1,
-    BGPAL_CHAPTERINTRO_FOG = 4,
-    BGPAL_CHAPTERINTRO_MOTIF = 5,
-
-    BGPAL_GAMEOVER_TEXT = 0,
-    BGPAL_GAMEOVER_4 = 4,
-
-    BGPAL_STEALSELECT_FACE = 5,
-
-    BGPAL_BATTLEPREVIEW_FRAME = 1, // .. 2
-
-    BGPAL_UI_STATBAR = 6,
-
-    BGPAL_MANIM_INFOFRAME = 1, // .. 2
-    BGPAL_MANIM_4 = 4,
-    BGPAL_MANIM_INFO = 5,
-
-    BGPAL_MURALBACKGROUND = 14, // .. 15
-
-    BGPAL_STATSCREEN_6 = 6,
-    BGPAL_STATSCREEN_EQUIPSTATFRAME = 7,
-    BGPAL_STATSCREEN_FACE = 13,
-
-    BGPAL_MAPUI_0 = BGPAL_TEXT_DEFAULT,
-    BGPAL_MAPUI_2 = 2,
-    BGPAL_MAPUI_3 = 3,
-    BGPAL_MAPUI_CHIBI = 4,
-
-    BGPAL_STATUSSCREEN_TALKTEXT = 1,
-    BGPAL_STATUSSCREEN_2 = 2,
-    BGPAL_STATUSSCREEN_4 = 4,
-    BGPAL_STATUSSCREEN_5 = 5,
-};
-
-enum
-{
-    OBJCHR_SYSTEM_OBJECTS = 0x000,
-
-    OBJCHR_CLOUDS = 0x012,
-    OBJCHR_SNOWSTORM_PARTICLE = 0x018,
-    OBJCHR_SANDSTORM_PARTICLE = 0x01C,
-
-    OBJCHR_MAPSPRITES = 0x80,
-
-    OBJCHR_DEBUGTEXT_DEFAULT = 0x180,
-
-    OBJCHR_MU_180 = 0x180,
-
-    OBJCHR_MANIM_180 = 0x180,
-    OBJCHR_MANIM_1C0 = 0x1C0,
-
-    OBJCHR_TRAPFX = 0x240,
-
-    OBJCHR_TRADEMENU_240 = 0x240,
-
-    OBJCHR_SUBTITLEHELP_TEXT = 0x240,
-
-    OBJCHR_BATTLEPREVIEW_MULTIPLIERS = 0x2E8,
-
-    OBJCHR_MOVEPATH = 0x2F0,
-
-    OBJCHR_FACE_DEFAULT2 = 0x1E0,
-    OBJCHR_FACE_DEFAULT1 = 0x268,
-    OBJCHR_FACE_DEFAULT0 = 0x2F0,
-    OBJCHR_FACE_DEFAULT3 = 0x378,
-
-    OBJCHR_MU_BASE = 0x380,
-
-    OBJCHR_STATSCREEN_240 = 0x240,
-
-    OBJCHR_HELPBOX_180 = 0x180,
-
-    OBJCHR_MAPUI_NUMBERS = 0x2E0,
-};
-
-enum
-{
-    OBJPAL_SYSTEM_OBJECTS = 0,
-
-    OBJPAL_1 = 1,
-
-    OBJPAL_TRAPFX = 2,
-
-    OBJPAL_STATUSHEAL_UNITSPRITE = 2,
-
-    OBJPAL_BATTLEPREVIEW_MULTIPLIERS = 2,
-
-    OBJPAL_MOVEPATH = 3,
-
-    OBJPAL_SUBTITLEHELP_TEXT = 4,
-
-    OBJPAL_MU_FADE = 5,
-
-    OBJPAL_FACE_DEFAULT0 = 6,
-    OBJPAL_FACE_DEFAULT1 = 7,
-    OBJPAL_FACE_DEFAULT2 = 8,
-    OBJPAL_FACE_DEFAULT3 = 9,
-
-    OBJPAL_TRADEMENU_8 = 8,
-
-    OBJPAL_MANIM_3 = 3,
-    OBJPAL_MANIM_4 = 4,
-    OBJPAL_MANIM_SPECIALMU = 8, // .. 9
-
-    OBJPAL_7 = 7,
-    OBJPAL_10 = 10,
-
-    OBJPAL_UNITSPRITE_PURPLE = 11,
-
-    OBJPAL_MAPSPRITES = 12,
-    OBJPAL_UNITSPRITE_BLUE = OBJPAL_MAPSPRITES + 0,
-    OBJPAL_UNITSPRITE_RED = OBJPAL_MAPSPRITES + 1,
-    OBJPAL_UNITSPRITE_GREEN = OBJPAL_MAPSPRITES + 2,
-    OBJPAL_UNITSPRITE_GRAY = OBJPAL_MAPSPRITES + 3,
-
-    OBJPAL_STATSCREEN_WINDOWFRAME = 2,
-    OBJPAL_STATSCREEN_PAGENAME = 3,
-    OBJPAL_STATSCREEN_SPRITES = 4,
-
-    OBJPAL_HELPBOX_5 = 5,
-
-    OBJPAL_MAPUI_8 = 8,
-};
diff --git a/include/constants/videoalloc_wm.h b/include/constants/videoalloc_wm.h
deleted file mode 100644
index 6aac26a..0000000
--- a/include/constants/videoalloc_wm.h
+++ /dev/null
@@ -1,20 +0,0 @@
-#pragma once
-
-#include "constants/videoalloc_global.h"
-
-enum
-{
-    OBJCHR_WM_FACE_A = 0x200,
-    OBJCHR_WM_FACE_B = 0x288,
-
-    OBJCHR_WM_TEXT = 0x340,
-};
-
-enum
-{
-    OBJPAL_WM_TEXTBOX = 9,
-    OBJPAL_WM_TEXT    = 13,
-
-    OBJPAL_WM_FACE_A = 14,
-    OBJPAL_WM_FACE_B = 15,
-};
diff --git a/include/debugmenu.h b/include/debugmenu.h
deleted file mode 100644
index bfacaab..0000000
--- a/include/debugmenu.h
+++ /dev/null
@@ -1,48 +0,0 @@
-#pragma once
-
-#include "common.h"
-#include "proc.h"
-#include "menu.h"
-
-void func_fe6_0801A5AC(void);
-void PutDebugTextFrame(int x, int y, int width, char const * str);
-fu8 func_fe6_0801A674(struct MenuProc * menu);
-fu8 func_fe6_0801A698(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 func_fe6_0801A724(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 func_fe6_0801A748(struct MenuProc * menu, struct MenuEntProc * ent);
-u32 func_fe6_0801A760(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 func_fe6_0801A7D4(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 func_fe6_0801A81C(struct MenuProc * menu, struct MenuEntProc * ent);
-u32 func_fe6_0801A820(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 func_fe6_0801A89C(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 func_fe6_0801A940(struct MenuProc * menu, struct MenuEntProc * ent);
-u32 func_fe6_0801A944(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 func_fe6_0801A9A8(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 func_fe6_0801AA70(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 func_fe6_0801AA74(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 func_fe6_0801AA8C(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 func_fe6_0801AABC(struct MenuProc * menu);
-void func_fe6_0801AAE0(void);
-fu8 func_fe6_0801AB64(struct MenuProc * menu);
-fu8 func_fe6_0801ABE8(struct MenuProc * menu);
-fu8 func_fe6_0801AC2C(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 func_fe6_0801ACD8(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 func_fe6_0801AD14(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 func_fe6_0801AD28(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 func_fe6_0801AD3C(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 func_fe6_0801AD4C(struct MenuEntInfo const * info, int id);
-fu8 func_fe6_0801AD50(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 func_fe6_0801AD6C(struct MenuEntInfo const * info, int id);
-fu8 func_fe6_0801AD84(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 func_fe6_0801ADB4(struct MenuEntInfo const * info, int id);
-fu8 func_fe6_0801ADCC(struct MenuProc * menu, struct MenuEntProc * ent);
-u32 func_fe6_0801ADEC(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 func_fe6_0801AE60(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 func_fe6_0801AEB8(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 func_fe6_0801AEBC(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 func_fe6_0801AEC8(struct MenuProc * menu, struct MenuEntProc * ent);
-u32 DebugCpControlMenu_Entry_Display(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 DebugCpControlMenu_Entry_Idle(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 func_fe6_0801B018(struct MenuProc * menu, struct MenuEntProc * ent);
-
-extern struct ProcScr CONST_DATA ProcScr_DebugMonitor[];
diff --git a/include/debugtext.h b/include/debugtext.h
deleted file mode 100644
index ba1133e..0000000
--- a/include/debugtext.h
+++ /dev/null
@@ -1,27 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-void DebugInitBg(int bg, int vramOffset);
-void DebugPutStr(u16 * tm, char const * str);
-void DebugPutFmt(u16 * tm, char const * fmt, ...);
-
-void GenNumberStr(int number);
-void GenNumberOrBlankStr(int number);
-void GenNumberHexStr(int number);
-
-void DebugScreenInit(void);
-void DebugPrintFmt(char const * fmt, ...);
-void DebugPrintNumber(int number, int length);
-void DebugPrintNumberHex(int number, int length);
-void DebugPrintStr(char const * str);
-void DebugPutScreen(void);
-bool DebugUpdateScreen(u16 held, u16 pressed);
-
-void DebugInitObj(int offset, int palid);
-void DebugPutObjStr(int x, int y, char const * str);
-void DebugPutObjNumber(int x, int y, int number, int length);
-void DebugPutObjNumberHex(int x, int y, int number, int length);
-
-// 8 characters + '\0'. least significant digit always at + 7
-extern char EWRAM_DATA gNumberStr[9];
diff --git a/include/event.h b/include/event.h
deleted file mode 100644
index 19161a1..0000000
--- a/include/event.h
+++ /dev/null
@@ -1,149 +0,0 @@
-#pragma once
-
-#include "common.h"
-#include "proc.h"
-
-#include "unit.h"
-
-typedef uptr EventScr;
-
-enum
-{
-    POPUP_CMD_END,
-    POPUP_CMD_SPACE,
-    POPUP_CMD_ITEM_NAME,
-    POPUP_CMD_UNIT_NAME,
-    POPUP_CMD_MSG,
-    POPUP_CMD_STR,
-    POPUP_CMD_COLOR,
-    POPUP_CMD_ICON_ITEM,
-    POPUP_CMD_ICON_IKIND,
-    POPUP_CMD_NUMBER,
-    POPUP_CMD_SONG,
-};
-
-enum
-{
-    BACKGROUND_0,
-    BACKGROUND_1,
-    BACKGROUND_2,
-    BACKGROUND_3,
-    BACKGROUND_4,
-    BACKGROUND_5,
-    BACKGROUND_6,
-    BACKGROUND_7,
-    BACKGROUND_8,
-    BACKGROUND_9,
-    BACKGROUND_10,
-    BACKGROUND_11,
-    BACKGROUND_12,
-    BACKGROUND_13,
-    BACKGROUND_14,
-    BACKGROUND_15,
-    BACKGROUND_16,
-    BACKGROUND_17,
-    BACKGROUND_18,
-    BACKGROUND_19,
-    BACKGROUND_20,
-};
-
-enum
-{
-    EVENT_FLAG_UNITCAM = 1 << 0,
-    EVENT_FLAG_TEXTSKIPPED = 1 << 1,
-    EVENT_FLAG_SKIPPED = 1 << 2,
-    EVENT_FLAG_DISABLESKIP = 1 << 3,
-    EVENT_FLAG_DISABLETEXTSKIP = 1 << 4,
-    EVENT_FLAG_ENDMAPMAIN = 1 << 5,
-    EVENT_FLAG_NOAUTOCLEAR = 1 << 6,
-};
-
-struct PopupInfo
-{
-    /* 00 */ u8 cmd;
-    /* 04 */ int arg;
-};
-
-struct EventProc
-{
-    /* 00 */ PROC_HEADER;
-
-    /* 2C */ EventScr const * script_start;
-    /* 30 */ EventScr const * script;
-    /* 34 */ void (* on_skip)(void);
-    /* 38 */ void (* on_idle)(struct EventProc * proc);
-    /* 3C */ struct UnitInfo const * unit_info;
-    /* 40 */ i32 msg_param;
-    /* 44 */ i8 background;
-    /* 45 */ bool8 no_map;
-    /* 46 */ u8 flags;
-    /* 47 */ // pad
-    /* 48 */ u16 sleep_duration;
-    /* 4A */ i16 cmd_short;
-    /* 4C */ u8 cmd_byte;
-    /* 4D */ // pad
-    /* 50 */ i32 money_param;
-    /* 54 */ u16 iid_param;
-    /* 56 */ u8 pid_param;
-    /* 57 */ u8 map_change_param;
-};
-
-void SetPopupUnit(struct Unit * unit);
-void SetPopupItem(u16 item);
-void SetPopupNumber(int number);
-ProcPtr StartPopup(struct PopupInfo const * info, int duration, int window_kind, ProcPtr parent);
-ProcPtr StartPopupExt(struct PopupInfo const * info, int duration, int window_kind, int iconChr, int iconPal, ProcPtr parent);
-void EndPopup(void);
-void DisableEventSkip(void);
-ProcPtr StartEvent(EventScr const * script);
-ProcPtr StartEventLocking(EventScr const * script, ProcPtr parent);
-void DisplayBackground(int background);
-void DisplayBackgroundNoClear(int background);
-void TryMoveUnit(struct Unit * unit, int x, int y, i8 moveClosest);
-bool TryMoveUnitDisplayed(ProcPtr proc, struct Unit * unit, int x, int y);
-int GetNextAvailableBlueUnitId(int start);
-bool UnitInfoRequiresNoMovement(struct UnitInfo const * info);
-int EventGotoLabel(ProcPtr proc, int label);
-int EventEndBattleMap(ProcPtr proc);
-void ClearTalk(void);
-void func_fe6_08011F4C(void);
-void func_fe6_08011F64(void);
-bool IsEventRunning(void);
-bool IsEventProcRunning(void);
-void KillTalkAndEvent(void);
-void SetFightEventFaceConfig(void);
-ProcPtr StartTalkEvent(int msgid);
-ProcPtr StartTalkSupportEvent(int msgid);
-void StartWeaponBrokePopup(u16 item, ProcPtr parent);
-void StartPopup_08012070(u16 item, ProcPtr parent);
-void StartWeaponLevelGainedPopup(u16 item, ProcPtr parent);
-void StartPopup_080120D0(int amount, ProcPtr parent);
-void StartPopup_08012120(u16 item, ProcPtr parent);
-void StartStoleItemPopup(u16 item, ProcPtr parent);
-void StartSupportLevelGaindPopup(ProcPtr parent);
-void StartGiveItem(struct Unit * unit, u16 iid, ProcPtr parent);
-void StartGiveItemEvent(u16 iid);
-void StartGiveItemToEvent(u16 pid, u16 iid);
-void StartGiveMoneyEvent(int amount);
-void StartMapChangeEvent(u8 id);
-void StartChestItemEvent(u16 iid, u8 id);
-void StartChestMoneyEvent(int amount, u8 id);
-void SetEventTalkSkipped(void);
-int GetPlayerDeployCount(void);
-void InitPlayerDeployUnits(void);
-void InitPlayerDeployUnitPositions(void);
-void func_fe6_08012780(void);
-void func_fe6_08012798(void);
-void func_fe6_080127B0(void);
-
-#define POPUP_END { POPUP_CMD_END, 0 }
-#define POPUP_SPACE(len) { POPUP_CMD_SPACE, (len) }
-#define POPUP_ITEM_NAME { POPUP_CMD_ITEM_NAME, 0 }
-#define POPUP_UNIT_NAME { POPUP_CMD_UNIT_NAME, 0 }
-#define POPUP_MSG(msg) { POPUP_CMD_MSG, (msg) }
-#define POPUP_STR(str) { POPUP_CMD_STR, (int) (char const *) (str) }
-#define POPUP_COLOR(color) { POPUP_CMD_COLOR, (color) }
-#define POPUP_ICON_ITEM { POPUP_CMD_ICON_ITEM, 0 }
-#define POPUP_ICON_IKIND { POPUP_CMD_ICON_IKIND, 0 }
-#define POPUP_NUMBER { POPUP_CMD_NUMBER, 0 }
-#define POPUP_SONG(song) { POPUP_CMD_SONG, (song) }
diff --git a/include/eventfunctions.h b/include/eventfunctions.h
deleted file mode 100644
index 1192b7d..0000000
--- a/include/eventfunctions.h
+++ /dev/null
@@ -1,295 +0,0 @@
-#pragma once
-
-// NOTE: this may end up getting merged with chapterevents
-
-#include "common.h"
-
-#include "proc.h"
-#include "event.h"
-#include "eventinfo.h"
-
-enum
-{
-    ENDING_0,
-    ENDING_1,
-    ENDING_2,
-};
-
-struct TutorialEventProcA
-{
-    /* 00 */ PROC_HEADER;
-    /* 29 */ STRUCT_PAD(0x29, 0x64);
-    /* 64 */ i16 unk_64;
-    /* 66 */ i16 unk_66;
-};
-
-struct TutorialEventProcB
-{
-    /* 00 */ PROC_HEADER;
-    /* 29 */ STRUCT_PAD(0x29, 0x64);
-    /* 64 */ i16 unk_64;
-};
-
-bool IsHard(void);
-// GetHardModeBonusLevelsByPid
-void ApplyAllHardModeBonusLevels(void);
-bool func_fe6_0806BB34(struct EventInfo * info);
-bool func_fe6_0806BB68(struct EventInfo * info);
-bool func_fe6_0806BB9C(struct EventInfo * info);
-bool func_fe6_0806BBD0(struct EventInfo * info);
-// func_fe6_0806BBF8
-bool func_fe6_0806BC20(struct EventInfo * info);
-bool func_fe6_0806BC5C(struct EventInfo * info);
-bool func_fe6_0806BCA4(struct EventInfo * info);
-bool func_fe6_0806BCEC(struct EventInfo * info);
-bool func_fe6_0806BD34(struct EventInfo * info);
-bool func_fe6_0806BD7C(struct EventInfo * info);
-bool func_fe6_0806BDC4(struct EventInfo * info);
-bool Chapter10B_CheckTalkShannaThea(struct EventInfo * info);
-bool Chapter10B_CheckTalkShannaTheaAfterKlein(struct EventInfo * info);
-bool Chapter10B_CheckShannaRecruitsThea(struct EventInfo * info);
-// func_fe6_0806BE90
-// func_fe6_0806BEB8
-bool func_fe6_0806BEEC(struct EventInfo * info);
-bool func_fe6_0806BF14(struct EventInfo * info);
-bool IsGuinivereAround(void);
-// func_fe6_0806BF70
-// func_fe6_0806BF7C
-// func_fe6_0806BF98
-// func_fe6_0806BFA4
-void RemoveFog(void);
-void AddFiveThousandGold(void);
-// RemoveGold
-// WeakenUnitStats
-// WeakenUnitStatsByPid
-// IsPidBlueDeployed
-bool IsLilinaBlueDeployed(void);
-bool IsMarcusBlueDeployed(void);
-bool IsMerlinusBlueDeployed(void);
-bool IsJunoBlueDeployed(void);
-bool IsZelotBlueDeployed(void);
-bool IsSinBlueDeployed(void);
-bool IsDayanBlueDeployed(void);
-bool IsSueBlueDeployed(void);
-bool IsMeladyBlueDeployed(void);
-bool IsZeissBlueDeployed(void);
-bool IsPercivalBlueDeployed(void);
-// IsPidBlue
-bool IsBorsBlue(void);
-bool IsLilinaBlue(void);
-bool IsElenBlue(void);
-// IsRaighBlue
-bool IsSueBlue(void);
-// IsCathBlue
-bool IsMeladyBlue(void);
-bool IsZeissBlue(void);
-bool IsSophiaBlue(void);
-bool IsJunoBlue(void);
-bool IsZelotBlue(void);
-bool IsElffinBlue(void);
-// IsFaeBlue
-bool IsSinBlue(void);
-bool IsDayanBlue(void);
-bool IsKleinBlue(void);
-bool IsTheaBlue(void);
-bool IsDouglasBlue(void);
-// func_fe6_0806C2C4
-bool func_fe6_0806C2F8(void);
-bool IsPidNonBlue(fu8 pid);
-// IsTheaNonBlue
-bool func_fe6_0806C35C(void);
-bool IsKleinNonBlue(void);
-bool IsCathNonBlue(void);
-bool IsHughNonBlue(void);
-bool IsGalleNonBlue(void);
-bool func_fe6_0806C3AC(void);
-bool func_fe6_0806C3BC(void);
-bool IsDouglasNonBlue(void);
-bool IsPercevalNonBlue(void);
-bool func_fe6_0806C3EC(void);
-bool func_fe6_0806C3FC(void);
-bool func_fe6_0806C40C(void);
-// func_fe6_0806C41C
-// func_fe6_0806C460
-bool IsPastTurn20(void);
-bool IsPastTurn25(void);
-bool IsPastTurn30(void);
-bool IsBluePhase(void);
-bool IsRedPhase(void);
-bool IsActiveUnitMale(void);
-bool func_fe6_0806C524(void);
-bool func_fe6_0806C540(void);
-bool func_fe6_0806C55C(void);
-bool func_fe6_0806C578(void);
-bool func_fe6_0806C594(void);
-bool AreWeGoingToSacae(void);
-void func_fe6_0806C608(void);
-bool func_fe6_0806C62C(void);
-void func_fe6_0806C64C(void);
-void func_fe6_0806C670(void);
-bool func_fe6_0806C68C(void);
-void func_fe6_0806C69C(void);
-void func_fe6_0806C6B0(void);
-void func_fe6_0806C718(void);
-void func_fe6_0806C734(void);
-void func_fe6_0806C750(void);
-// func_fe6_0806C76C
-void func_fe6_0806C7BC(struct TutorialEventProcA * proc);
-void func_fe6_0806C7E0(struct TutorialEventProcA * proc);
-void func_fe6_0806C948(struct TutorialEventProcB * proc);
-void func_fe6_0806C950(struct TutorialEventProcB * proc);
-// func_fe6_0806C998
-bool func_fe6_0806C9F8(void);
-void func_fe6_0806CA1C(void);
-void func_fe6_0806CA30(void);
-void func_fe6_0806CA44(void);
-void func_fe6_0806CA58(void);
-void func_fe6_0806CA6C(void);
-void func_fe6_0806CA84(void);
-void func_fe6_0806CA98(void);
-void func_fe6_0806CAAC(void);
-void func_fe6_0806CAC4(void);
-void func_fe6_0806CAD8(void);
-void func_fe6_0806CAEC(void);
-void func_fe6_0806CB00(void);
-void func_fe6_0806CB18(void);
-// func_fe6_0806CB2C
-void func_fe6_0806CB40(void);
-void func_fe6_0806CB54(void);
-void func_fe6_0806CB6C(void);
-void func_fe6_0806CB80(void);
-void func_fe6_0806CB94(void);
-void func_fe6_0806CBA8(void);
-void func_fe6_0806CBBC(void);
-bool IsActiveUnitRoy(void);
-bool IsActiveUnitWolt(void);
-bool IsActiveUnitLilina(void);
-// IsActiveUnitAlen
-bool func_fe6_0806CC68(void);
-bool IsCombatAction(void);
-bool func_fe6_0806CC94(void);
-// func_fe6_0806CCC0
-void func_fe6_0806CCC4(void);
-bool IsAnyTutorialUnitDamaged(void);
-bool IsAnyTutorialUnitPastColumn16(void);
-bool IsBossDefeated(void);
-// IsPastTurn1
-bool func_fe6_0806CDC0(void);
-bool func_fe6_0806CE18(void);
-bool func_fe6_0806CE34(void);
-bool func_fe6_0806CE50(void);
-bool func_fe6_0806CE80(void);
-bool func_fe6_0806CEAC(void);
-void RefreshClarine(void);
-bool func_fe6_0806CEF0(void);
-bool func_fe6_0806CF3C(void);
-void Chapter8_WeakenNorthWestWall(void);
-// func_fe6_0806CFA0
-void func_fe6_0806CFB8(void);
-void func_fe6_0806CFD0(void);
-// func_fe6_0806CFE8
-void func_fe6_0806D000(void);
-void func_fe6_0806D01C(void);
-bool func_fe6_0806D028(void);
-void func_fe6_0806D064(void);
-void func_fe6_0806D0E4(void);
-// func_fe6_0806D0FC
-bool func_fe6_0806D150(void);
-void func_fe6_0806D17C(void);
-void func_fe6_0806D194(void);
-void func_fe6_0806D1AC(void);
-void func_fe6_0806D1D4(void);
-bool func_fe6_0806D1FC(struct EventProc * proc);
-bool func_fe6_0806D35C(void);
-bool func_fe6_0806D398(void);
-bool func_fe6_0806D3B4(void);
-void func_fe6_0806D3E0(void);
-void func_fe6_0806D41C(void);
-void func_fe6_0806D55C(void);
-void func_fe6_0806D568(void);
-void func_fe6_0806D620(void);
-void func_fe6_0806D648(void);
-void func_fe6_0806D6B4(void);
-void func_fe6_0806D6D8(void);
-void func_fe6_0806D77C(void);
-// func_fe6_0806D7C8
-// func_fe6_0806D7E4
-// func_fe6_0806D7F4
-// func_fe6_0806D808
-// func_fe6_0806D81C
-// func_fe6_0806D82C
-// func_fe6_0806D850
-// func_fe6_0806D868
-// func_fe6_0806D894
-// func_fe6_0806D8B0
-// func_fe6_0806D9B4
-// func_fe6_0806D9F4
-// func_fe6_0806DA54
-// func_fe6_0806DA90
-// func_fe6_0806DAA0
-// func_fe6_0806DAB0
-// func_fe6_0806DAC0
-// func_fe6_0806DAD0
-// func_fe6_0806DAF0
-void func_fe6_0806DB00(int arg_0, ProcPtr proc);
-// func_fe6_0806DB2C
-// func_fe6_0806DB38
-// func_fe6_0806DB58
-// func_fe6_0806DB88
-// func_fe6_0806DBA0
-// func_fe6_0806DBA8
-// func_fe6_0806DC24
-// func_fe6_0806DC38
-// func_fe6_0806DC48
-// func_fe6_0806DC50
-// func_fe6_0806DC90
-// func_fe6_0806DCA4
-// func_fe6_0806DD08
-// func_fe6_0806DD84
-// func_fe6_0806DD98
-// func_fe6_0806DDC4
-// func_fe6_0806DDCC
-void func_fe6_0806DDD4(void);
-// func_fe6_0806DDE0
-void func_fe6_0806DE00(void);
-void func_fe6_0806DE20(void);
-// func_fe6_0806DE40
-// func_fe6_0806DE5C
-// func_fe6_0806DE78
-// func_fe6_0806DEA0
-// func_fe6_0806DEB4
-// func_fe6_0806DEC4
-// func_fe6_0806DEF8
-// func_fe6_0806DF18
-// func_fe6_0806DF3C
-// func_fe6_0806DF94
-// func_fe6_0806DFAC
-// func_fe6_0806DFC4
-// func_fe6_0806DFD0
-// func_fe6_0806DFD8
-// func_fe6_0806E004
-// func_fe6_0806E040
-// func_fe6_0806E04C
-// func_fe6_0806E060
-// func_fe6_0806E074
-// func_fe6_0806E0B8
-// func_fe6_0806E178
-// func_fe6_0806E240
-void func_fe6_0806E278(void);
-void UpdateEndingId(void);
-fu8 GetEndingId(void);
-void StartGameEndingScene(ProcPtr parent);
-// func_fe6_0806E32C
-// func_fe6_0806E36C
-// func_fe6_0806E430
-// func_fe6_0806E50C
-// func_fe6_0806E520
-void func_fe6_0806E684(int arg_0, int arg_1);
-// func_fe6_0806E714
-// func_fe6_0806E730
-// func_fe6_0806E73C
-// func_fe6_0806E7A0
-// func_fe6_0806E7BC
-// func_fe6_0806E7D8
-// func_fe6_0806E7F4
-// func_fe6_0806E810
diff --git a/include/eventinfo.h b/include/eventinfo.h
deleted file mode 100644
index 189b2c3..0000000
--- a/include/eventinfo.h
+++ /dev/null
@@ -1,173 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "event.h"
-
-#include "constants/flags.h"
-
-enum { EVENT_NOSCRIPT = 1 };
-
-enum { MAX_CHAPTER_FLAGS = 32 };
-enum { MAX_PERMANENT_FLAGS = 40 };
-
-enum
-{
-    TILE_COMMAND_NONE,
-
-    TILE_COMMAND_VISIT    = 0x0E,
-    TILE_COMMAND_SEIZE    = 0x0F,
-    TILE_COMMAND_DOOR     = 0x10,
-    TILE_COMMAND_BRIDGE   = 0x11,
-    TILE_COMMAND_CHEST    = 0x12,
-    TILE_COMMAND_ARMORY   = 0x13,
-    TILE_COMMAND_VENDOR   = 0x14,
-    TILE_COMMAND_SECRET   = 0x15,
-    TILE_COMMAND_SHOP_UNK = 0x16,
-
-    TILE_COMMAND_PILLAGE  = 0x1D,
-};
-
-typedef uptr EventListScr;
-
-struct EventInfo
-{
-    /* 00 */ EventListScr const * list_script;
-    /* 04 */ void const * script; // could be EventScr, could be item list, could be "1"...
-    /* 08 */ u32 flag;
-    /* 0C */ u32 tile_command;
-    /* 10 */ u32 given_money;
-    /* 14 */ u32 given_iid;
-    /* 18 */ i8 x_location;
-    /* 19 */ i8 y_location;
-    /* 1A */ u8 pid_a;
-    /* 1B */ u8 pid_b;
-};
-
-struct SupportTalkEnt
-{
-    /* +00 */ u8 pid_a, pid_b;
-    /* +02 */ // pad
-    /* +04 */ u32 msg_talk_c;
-    /* +08 */ u32 msg_talk_b;
-    /* +0C */ u32 msg_talk_a;
-};
-
-struct BattleTalkExtEnt
-{
-    /* 00 */ u8 pid_a;
-    /* 01 */ u8 pid_b;
-    /* 02 */ u8 chapter;
-    /* 03 */ // pad
-    /* 04 */ u32 msg;
-    /* 08 */ u32 flag;
-};
-
-struct BattleTalkEnt
-{
-    /* 00 */ u8 pid;
-    /* 01 */ u8 chapter;
-    /* 02 */ // pad
-    /* 04 */ u32 msg;
-    /* 08 */ u32 flag;
-    /* 0C */ u32 unk_0C;
-};
-
-void StartEventFromInfo(struct EventInfo const * info);
-struct EventInfo * SearchAvailableEvent(struct EventInfo * info);
-struct EventInfo * SearchNextAvailableEvent(struct EventInfo * info);
-int EvtListCmd_End(struct EventInfo * info);
-int EvtListCmd_Flag(struct EventInfo * info);
-int EvtListCmd_Turn(struct EventInfo * info);
-int EvtListCmd_TurnHard(struct EventInfo * info);
-int EvtListCmd_Talk(struct EventInfo * info);
-int EvtListCmd_Tile(struct EventInfo * info);
-int EvtListCmd_TileWithMapChange(struct EventInfo * info);
-int EvtListCmd_ItemChest(struct EventInfo * info);
-int EvtListCmd_Door(struct EventInfo * info);
-int EvtListCmd_Drawbridge(struct EventInfo * info);
-int EvtListCmd_Shop(struct EventInfo * info);
-int EvtListCmd_Area(struct EventInfo * info);
-int EvtListCmd_AreaHard(struct EventInfo * info);
-int EvtListCmd_Func(struct EventInfo * info);
-bool EventInfoCheckTalk(struct EventInfo * info, fu8 pid_a, fu8 pid_b);
-int CheckActiveUnitArea(int x1, int y1, int x2, int y2);
-bool CheckAnyBlueUnitArea(int x1, int y1, int x2, int y2);
-bool func_fe6_0806AD48(struct EventInfo * info);
-bool func_fe6_0806AD74(struct EventInfo * info);
-bool func_fe6_0806ADC4(struct EventInfo * info);
-bool func_fe6_0806ADDC(struct EventInfo * info);
-bool func_fe6_0806AE04(struct EventInfo * info);
-bool func_fe6_0806AE2C(struct EventInfo * info);
-bool func_fe6_0806AE54(struct EventInfo * info);
-bool func_fe6_0806AE7C(int x1, int y1, int x2, int y2);
-bool CheckAvailableTurnEvent(void);
-void StartAvailableTurnEvents(void);
-bool CheckAvailableTalkEvent(fu8 pid_a, fu8 pid_b);
-void StartAvailableTalkEvent(fu8 pid_a, fu8 pid_b);
-void StartAvailableSupportEvent(fu8 pid_a, fu8 pid_b, int support_level);
-int GetAvailableTileEventCommand(fi8 x, fi8 y);
-void StartAvailableTileEvent(fi8 x, fi8 y);
-void StartAvailableTileEvent_Unused(fi8 x, fi8 y);
-bool CheckAvailableVisitTileEvent(fi8 x, fi8 y);
-void StartAvailableVisitTileEvent(fi8 x, fi8 y);
-bool CheckAvailableShopTileEvent(fi8 x, fi8 y);
-void StartAvailableShopTileEvent(fi8 x, fi8 y);
-bool CheckAvailableChestTileEvent(fi8 x, fi8 y);
-void StartAvailableChestTileEvent(fi8 x, fi8 y);
-bool CheckAvailableDoorTileEvent(fi8 x, fi8 y);
-void StartAvailableDoorTileEvent(fi8 x, fi8 y);
-bool CheckAvailableBridgeTileEvent(fi8 x, fi8 y);
-void StartAvailableBridgeTileEvent(fi8 x, fi8 y);
-bool CheckAvailableVictoryEvent(void);
-void StartAvailableVictoryEvent(void);
-bool StartAvailableMoveSelectEvent(void);
-bool CheckAvailableActionSelectEvent(void);
-bool StartAvailableActionSelectEvent(void);
-bool CheckAvailableMoveSelectConfirmEvent(void);
-bool StartAvailableMoveSelectConfirmEvent(void);
-bool StartAvailableAttackMenuEvent(void);
-bool StartAvailableAttackMenuItemEvent(void);
-bool StartAvailableMapMenuEvent(void);
-bool CheckAvailableMoveEvent(void);
-void StartAvailableMoveEvent(void);
-bool CheckChapterVictory(void);
-void StartChapterVictoryEvent(void);
-void CreateInitialRedUnits(void);
-struct UnitInfo const * GetDeployUnitInfoList(void);
-struct BattleTalkEnt const * GetAvailableBattleTalkExt(fu8 pid_a, fu8 pid_b);
-struct BattleTalkEnt const * GetAvailableBattleTalk(fu8 pid, struct BattleTalkEnt const * it);
-bool CheckBattleTalk(fu8 pid_a, fu8 pid_b);
-void StartBattleTalk(fu8 pid_a, fu8 pid_b);
-bool CheckBattleDefeatTalk(fu8 pid);
-void StartBattleDefeatTalk(fu8 pid);
-bool func_fe6_0806B898(void);
-void func_fe6_0806B89C(void);
-void func_fe6_0806B8A0(void);
-bool func_fe6_0806B8A4(void);
-void func_fe6_0806B8A8(void);
-bool func_fe6_0806B8AC(void);
-bool func_fe6_0806B8B0(void);
-void func_fe6_0806B8B4(void);
-void func_fe6_0806B8B8(void);
-void func_fe6_0806B8BC(void);
-void func_fe6_0806B8C0(void);
-void func_fe6_0806B8C4(void);
-void SetChapterFlag(int flag);
-bool CheckChapterFlag(int flag);
-void ClearChapterFlag(int flag);
-void ResetChapterFlags(void);
-void SetPermanentFlag(int flag);
-bool CheckPermanentFlag(int flag);
-void ClearPermanentFlag(int flag);
-void ResetPermanentFlags(void);
-void SetFlag(int flag);
-bool CheckFlag(int flag);
-void ClearFlag(int flag);
-u8 * GetPermanentFlagBits(void);
-int GetPermanentFlagBitsSize(void);
-u8 * GetChapterFlagBits(void);
-int GetChapterFlagBitsSize(void);
-
-extern u8 gChapterFlagBits[(MAX_CHAPTER_FLAGS + CHAR_BIT - 1) / CHAR_BIT];
-extern u8 gPermanentFlagBits[(MAX_PERMANENT_FLAGS + CHAR_BIT - 1) / CHAR_BIT];
diff --git a/include/eventscript.h b/include/eventscript.h
deleted file mode 100644
index 2e5711b..0000000
--- a/include/eventscript.h
+++ /dev/null
@@ -1,412 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-// Event command ids
-
-enum
-{
-    EVT_CMD_END,
-    EVT_CMD_KILL,
-    EVT_CMD_SLEEP,
-    EVT_CMD_BACKGROUND,
-    EVT_CMD_BACKGROUNDMORE,
-    EVT_CMD_CLEARTALK,
-    EVT_CMD_CLEARSKIP,
-    EVT_CMD_TALK,
-    EVT_CMD_TALKMORE,
-    EVT_CMD_TALKAUTO,
-    EVT_CMD_TALKCONT,
-    EVT_CMD_CAMERA_POS,
-    EVT_CMD_CAMERA_PID,
-    EVT_CMD_MOVE_POS,
-    EVT_CMD_MOVE_POS_MANUAL,
-    EVT_CMD_MOVE_PID,
-    EVT_CMD_MOVE_PID_MANUAL,
-    EVT_CMD_MOVE_PID_NEXTTO,
-    EVT_CMD_LOADUNITS,
-    EVT_CMD_LOADUNITS_PARTY,
-    EVT_CMD_MOVEWAIT,
-    EVT_CMD_UNITCAM_ON,
-    EVT_CMD_UNITCAM_OFF,
-    EVT_CMD_FUNC,
-    EVT_CMD_FUNC_UNTIL,
-    EVT_CMD_FUNC_WHILE,
-    EVT_CMD_STOP,
-    EVT_CMD_LABEL,
-    EVT_CMD_GOTO,
-    EVT_CMD_GOTO_IFN_ALIVE,
-    EVT_CMD_GOTO_IFN_INTEAM,
-    EVT_CMD_GOTO_IFY_FUNC,
-    EVT_CMD_GOTO_IFN_FUNC,
-    EVT_CMD_GOTO_IFY_SKIPPED,
-    EVT_CMD_GOTO_IFY_FLAG,
-    EVT_CMD_GOTO_IFN_FLAG,
-    EVT_CMD_GOTO_IFY_ACTIVE,
-    EVT_CMD_JUMP,
-    EVT_CMD_ITEM,
-    EVT_CMD_ITEM_PID,
-    EVT_CMD_MONEY,
-    EVT_CMD_MAPCHANGE,
-    EVT_CMD_MAPCHANGE_POS,
-    EVT_CMD_FACTION,
-    EVT_CMD_FLASHCURSOR_POS,
-    EVT_CMD_FLASHCURSOR_PID,
-    EVT_CMD_CURSOR,
-    EVT_CMD_CLEARCURSOR,
-    EVT_CMD_REMOVEUNIT,
-    EVT_CMD_REMOVEUNIT_DISPLAYED,
-    EVT_CMD_SETAI_PID,
-    EVT_CMD_SETAI_POS,
-    EVT_CMD_SETFLAG,
-    EVT_CMD_CLEARFLAG,
-    EVT_CMD_BGM,
-    EVT_CMD_BGM_OVERRIDE,
-    EVT_CMD_BGM_RESTORE,
-    EVT_CMD_BGM_FADEOUT,
-    EVT_CMD_BGM_LOWER_ON,
-    EVT_CMD_BGM_LOWER_OFF,
-    EVT_CMD_SE,
-    EVT_CMD_CHAPTER,
-    EVT_CMD_GAMEEND,
-    EVT_CMD_SETMAP,
-    EVT_CMD_NOSKIP,
-    EVT_CMD_NOSKIP_NOTEXTSKIP,
-    EVT_CMD_YESSKIP,
-    EVT_CMD_FADE_TOBLACK,
-    EVT_CMD_FADE_FROMBLACK,
-    EVT_CMD_FADE_TOWHITE,
-    EVT_CMD_FADE_FROMWHITE,
-    EVT_CMD_EXIT_MAP,
-    EVT_CMD_ENTER_MAP,
-    EVT_CMD_FIGHTSCR,
-    EVT_CMD_NOCLEARTALK,
-    EVT_CMD_FUNC_ONSKIP,
-    EVT_CMD_WEATHER,
-    EVT_CMD_WM_START,
-    EVT_CMD_WM_END,
-    EVT_CMD_WM_ZOOMTO,
-    EVT_CMD_WM_ZOOMBACK,
-    EVT_CMD_WM_PUTFACE,
-    EVT_CMD_WM_REMOVEFACE,
-    EVT_CMD_WM_MOVEFACE,
-    EVT_CMD_WM_NOP54,
-    EVT_CMD_WM_NOP55,
-    EVT_CMD_WM_TALK,
-    EVT_CMD_WM_TALKBOX_BOTTOM,
-    EVT_CMD_WM_TALKBOX_TOP,
-    EVT_CMD_WM_TALKBOX_REMOVE,
-    EVT_CMD_WM_ARROW,
-    EVT_CMD_WM_HIGHLIGHT,
-    EVT_CMD_WM_HIGHLIGHT_REMOVE,
-    EVT_CMD_WM_HIGHLIGHT_REMOVEBOTH,
-    EVT_CMD_WM_DOT,
-    EVT_CMD_WM_DOT_REMOVE,
-    EVT_CMD_WM_FLAG,
-    EVT_CMD_WM_FLAG_REMOVE,
-    EVT_CMD_WM_MAPTEXT,
-    EVT_CMD_WM_MAPTEXT_REMOVE,
-};
-
-// Event command macros
-// EventScr const EventScr_<Name>[] = { /* to be used here */ };
-
-#define _EvtParams2(x, y) ((((y) & 0xFFFF) << 16) + ((x) & 0xFFFF))
-#define _EvtParams4(a, b, c, d) ((((d) & 0xFF) << 24) + (((c) & 0xFF) << 16) + (((b) & 0xFF) << 8) + ((a) & 0xFF))
-
-#define EvtEnd \
-    EVT_CMD_END,
-
-#define EvtKill \
-    EVT_CMD_KILL,
-
-#define EvtSleep(duration) \
-    EVT_CMD_SLEEP, (duration),
-
-#define EvtBackground(background) \
-    EVT_CMD_BACKGROUND, (background),
-
-#define EvtBackgroundMore(background) \
-    EVT_CMD_BACKGROUNDMORE, (background),
-
-#define EvtClearTalk \
-    EVT_CMD_CLEARTALK,
-
-#define EvtClearSkip \
-    EVT_CMD_CLEARSKIP,
-
-#define EvtTalk(msgid) \
-    EVT_CMD_TALK, (msgid),
-
-#define EvtTalkMore(msgid) \
-    EVT_CMD_TALKMORE, (msgid),
-
-#define EvtTalkAuto \
-    EVT_CMD_TALKAUTO,
-
-#define EvtTalkContinue \
-    EVT_CMD_TALKCONT,
-
-#define EvtCamera(x, y) \
-    EVT_CMD_CAMERA_POS, _EvtParams2(x, y),
-
-#define EvtCameraUnit(pid) \
-    EVT_CMD_CAMERA_PID, (pid),
-
-#define EvtMove(x, y, x_to, y_to) \
-    EVT_CMD_MOVE_POS, _EvtParams2(x, y), _EvtParams2(x_to, y_to),
-
-#define EvtMoveScript(x, y, movescript) \
-    EVT_CMD_MOVE_POS_MANUAL, _EvtParams2(x, y), (EventScr) (movescript),
-
-#define EvtMoveUnit(pid, x_to, y_to) \
-    EVT_CMD_MOVE_PID, (pid), _EvtParams2(x_to, y_to),
-
-#define EvtMoveUnitScript(pid, movescript) \
-    EVT_CMD_MOVE_PID_MANUAL, (pid), (EventScr) (movescript),
-
-#define EvtMoveUnitNextTo(pid, pid_to) \
-    EVT_CMD_MOVE_PID_NEXTTO, (pid), (pid_to),
-
-#define EvtLoadUnits(info) \
-    EVT_CMD_LOADUNITS, (EventScr) (info),
-
-#define EvtLoadUnitsParty(info) \
-    EVT_CMD_LOADUNITS_PARTY, (EventScr) (info),
-
-#define EvtMoveWait \
-    EVT_CMD_MOVEWAIT,
-
-#define EvtUnitCameraOn \
-    EVT_CMD_UNITCAM_ON,
-
-#define EvtUnitCameraOff \
-    EVT_CMD_UNITCAM_OFF,
-
-#define EvtFunc(func) \
-    EVT_CMD_FUNC, (EventScr) (func),
-
-#define EvtFuncUntil(func) \
-    EVT_CMD_FUNC_UNTIL, (EventScr) (func),
-
-#define EvtFuncWhile(func) \
-    EVT_CMD_FUNC_WHILE, (EventScr) (func),
-
-#define EvtStop \
-    EVT_CMD_STOP,
-
-#define EvtLabel(id) \
-    EVT_CMD_LABEL, (id),
-
-#define EvtGoto(id) \
-    EVT_CMD_GOTO, (id),
-
-#define EvtGotoIfNotAlive(id, pid) \
-    EVT_CMD_GOTO_IFN_ALIVE, (id), (pid),
-
-#define EvtGotoIfNotInTeam(id, pid) \
-    EVT_CMD_GOTO_IFN_INTEAM, (id), (pid),
-
-#define EvtGotoIfFunc(id, func) \
-    EVT_CMD_GOTO_IFY_FUNC, (id), (EventScr) (func),
-
-#define EvtGotoIfNotFunc(id, func) \
-    EVT_CMD_GOTO_IFN_FUNC, (id), (EventScr) (func),
-
-#define EvtGotoIfSkipped(id) \
-    EVT_CMD_GOTO_IFY_SKIPPED, (id),
-
-#define EvtGotoIfFlag(id, flag) \
-    EVT_CMD_GOTO_IFY_FLAG, (id), (flag),
-
-#define EvtGotoIfNotFlag(id, flag) \
-    EVT_CMD_GOTO_IFN_FLAG, (id), (flag),
-
-#define EvtGotoIfActive(id, pid) \
-    EVT_CMD_GOTO_IFY_ACTIVE, (id), (pid),
-
-#define EvtJump(script) \
-    EVT_CMD_JUMP, (EventScr) (script),
-
-#define EvtGiveItem(iid) \
-    EVT_CMD_ITEM, (iid),
-
-#define EvtGiveItemTo(iid, pid) \
-    EVT_CMD_ITEM_PID, (pid), (iid),
-
-#define EvtGiveMoney(amount) \
-    EVT_CMD_MONEY, (amount),
-
-#define EvtMapChange(id) \
-    EVT_CMD_MAPCHANGE, (id),
-
-#define EvtMapChangePosition(x, y) \
-    EVT_CMD_MAPCHANGE_POS, _EvtParams4(x, y, 0, 0),
-
-#define EvtChangeFaction(pid, faction) \
-    EVT_CMD_FACTION, (pid), (faction),
-
-#define EvtFlashCursor(x, y) \
-    EVT_CMD_FLASHCURSOR_POS, _EvtParams2(x, y),
-
-#define EvtFlashCursorUnit(pid) \
-    EVT_CMD_FLASHCURSOR_PID, (pid),
-
-#define EvtPutCursor(x, y) \
-    EVT_CMD_CURSOR, _EvtParams2(x, y),
-
-#define EvtRemoveCursor \
-    EVT_CMD_CLEARCURSOR,
-
-#define EvtRemoveUnit(pid) \
-    EVT_CMD_REMOVEUNIT, (pid),
-
-#define EvtRemoveUnitDisplayed(pid) \
-    EVT_CMD_REMOVEUNIT_DISPLAYED, (pid),
-
-#define EvtSetAi(pid, ai_a, ai_b, ai_c) \
-    EVT_CMD_SETAI_PID, (pid), _EvtParams4(ai_a, ai_b, ai_c, 0),
-
-#define EvtSetAiPosition(x, y, ai_a, ai_b, ai_c) \
-    EVT_CMD_SETAI_POS, _EvtParams2(x, y), _EvtParams4(ai_a, ai_b, ai_c, 0),
-
-#define EvtSetFlag(flag) \
-    EVT_CMD_SETFLAG, (flag),
-
-#define EvtClearFlag(flag) \
-    EVT_CMD_CLEARFLAG, (flag),
-
-#define EvtSetBgm(song) \
-    EVT_CMD_BGM, (song),
-
-#define EvtOverrideBgm(song) \
-    EVT_CMD_BGM_OVERRIDE, (song),
-
-#define EvtRestoreBgm \
-    EVT_CMD_BGM_RESTORE,
-
-#define EvtFadeBgmOut(fade_speed) \
-    EVT_CMD_BGM_FADEOUT, (fade_speed),
-
-#define EvtLowerBgmVolume \
-    EVT_CMD_BGM_LOWER_ON,
-
-#define EvtRaiseBgmVolume \
-    EVT_CMD_BGM_LOWER_OFF,
-
-#define EvtPlaySe(song) \
-    EVT_CMD_SE, (song),
-
-#define EvtNextChapter(chapter) \
-    EVT_CMD_CHAPTER, (chapter),
-
-#define EvtGameEnd \
-    EVT_CMD_GAMEEND,
-
-#define EvtSetMap(chapter, camx, camy) \
-    EVT_CMD_SETMAP, (chapter), (camx), (camy),
-
-#define EvtNoSkip \
-    EVT_CMD_NOSKIP,
-
-#define EvtNoSkipNoTextSkip \
-    EVT_CMD_NOSKIP_NOTEXTSKIP,
-
-#define EvtYesSkip \
-    EVT_CMD_YESSKIP,
-
-#define EvtFadeToBlack(speed) \
-    EVT_CMD_FADE_TOBLACK, (speed),
-
-#define EvtFadeFromBlack(speed) \
-    EVT_CMD_FADE_FROMBLACK, (speed),
-
-#define EvtFadeToWhite(speed) \
-    EVT_CMD_FADE_TOWHITE, (speed),
-
-#define EvtFadeFromWhite(speed) \
-    EVT_CMD_FADE_FROMWHITE, (speed),
-
-#define EvtExitMap \
-    EVT_CMD_EXIT_MAP,
-
-#define EvtEnterMap \
-    EVT_CMD_ENTER_MAP,
-
-#define EvtFightScript(attacker_pid, defender_pid, battle_hits, is_ballista) \
-    EVT_CMD_FIGHTSCR, (attacker_pid), (defender_pid), (EventScr) (battle_hits), (is_ballista),
-
-#define EvtDisableAutoClear \
-    EVT_CMD_NOCLEARTALK,
-
-#define EvtFuncOnSkip(func) \
-    EVT_CMD_FUNC_ONSKIP, (EventScr) (func),
-
-#define EvtWeather(weather) \
-    EVT_CMD_WEATHER, (weather),
-
-// aliases
-#define EvtPlaySE(song) EvtPlaySe(song)
-
-// Helper event macros
-// EventScr const EventScr_<Name>[] = { /* to be used here */ };
-
-enum
-{
-    EVT_LIST_CMD_END,
-    EVT_LIST_CMD_FLAG,
-    EVT_LIST_CMD_TURN,
-    EVT_LIST_CMD_TURN_HARD,
-    EVT_LIST_CMD_TALK,
-    EVT_LIST_CMD_TILE,
-    EVT_LIST_CMD_TILE_MAPCHANGE,
-    EVT_LIST_CMD_CHEST,
-    EVT_LIST_CMD_DOOR,
-    EVT_LIST_CMD_DRAWBRIDGE,
-    EVT_LIST_CMD_SHOP,
-    EVT_LIST_CMD_AREA,
-    EVT_LIST_CMD_AREA_HARD,
-    EVT_LIST_CMD_FUNC,
-};
-
-#define EvtListEnd \
-    _EvtParams2(EVT_LIST_CMD_END, 0),
-
-#define EvtListFlag(ent_flag, ent_script, flag) \
-    _EvtParams2(EVT_LIST_CMD_FLAG, (ent_flag)), (EventListScr) (ent_script), (flag),
-
-#define EvtListTurn(ent_flag, ent_script, turn, turn_max, faction) \
-    _EvtParams2(EVT_LIST_CMD_TURN, (ent_flag)), (EventListScr) (ent_script), _EvtParams4((turn), (turn_max), (faction), 0),
-
-#define EvtListTurnHard(ent_flag, ent_script, turn, turn_max, faction) \
-    _EvtParams2(EVT_LIST_CMD_TURN_HARD, (ent_flag)), (EventListScr) (ent_script), _EvtParams4((turn), (turn_max), (faction), 0),
-
-#define EvtListTalk(ent_flag, ent_script, pid_a, pid_b) \
-    _EvtParams2(EVT_LIST_CMD_TALK, (ent_flag)), (EventListScr) (ent_script), _EvtParams4((pid_a), (pid_b), 0, 0),
-
-#define EvtListTile(ent_flag, ent_script, x, y, tile_command) \
-    _EvtParams2(EVT_LIST_CMD_TILE, (ent_flag)), (EventListScr) (ent_script), _EvtParams4((x), (y), (tile_command), 0),
-
-#define EvtListTileMapChange(ent_flag, ent_script, x, y, tile_command) \
-    _EvtParams2(EVT_LIST_CMD_TILE_MAPCHANGE, (ent_flag)), (EventListScr) (ent_script), _EvtParams4((x), (y), (tile_command), 0),
-
-#define EvtListChest(ent_flag, iid, money, x, y, tile_command) \
-    _EvtParams2(EVT_LIST_CMD_CHEST, (ent_flag)), _EvtParams2((iid), (money)), _EvtParams4((x), (y), (tile_command), 0),
-
-#define EvtListDoor(ent_flag, ent_script, x, y, tile_command) \
-    _EvtParams2(EVT_LIST_CMD_DOOR, (ent_flag)), (EventListScr) (ent_script), _EvtParams4((x), (y), (tile_command), 0),
-
-#define EvtListDrawbridge(ent_flag, ent_script, x, y, tile_command) \
-    _EvtParams2(EVT_LIST_CMD_DRAWBRIDGE, (ent_flag)), (EventListScr) (ent_script), _EvtParams4((x), (y), (tile_command), 0),
-
-#define EvtListShop(ent_flag, item_list, x, y, tile_command) \
-    _EvtParams2(EVT_LIST_CMD_SHOP, (ent_flag)), (EventListScr) (item_list), _EvtParams4((x), (y), (tile_command), 0),
-
-#define EvtListArea(ent_flag, ent_script, x1, y1, x2, y2) \
-    _EvtParams2(EVT_LIST_CMD_AREA, (ent_flag)), (EventListScr) (ent_script), _EvtParams4((x1), (y1), (x2), (y2)),
-
-#define EvtListAreaHard(ent_flag, ent_script, x1, y1, x2, y2) \
-    _EvtParams2(EVT_LIST_CMD_AREA_HARD, (ent_flag)), (EventListScr) (ent_script), _EvtParams4((x1), (y1), (x2), (y2)),
-
-#define EvtListFunc(ent_flag, ent_script, func) \
-    _EvtParams2(EVT_LIST_CMD_FUNC, (ent_flag)), (EventListScr) (ent_script), (EventListScr) (func),
diff --git a/include/face.h b/include/face.h
deleted file mode 100644
index a687905..0000000
--- a/include/face.h
+++ /dev/null
@@ -1,103 +0,0 @@
-#pragma once
-
-#include "gba/gba.h"
-
-#include "proc.h"
-
-struct FaceInfo
-{
-    /* 00 */ u8 const * img;
-    /* 04 */ u8 const * img_chibi;
-    /* 08 */ u16 const * pal;
-    /* 0C */ u8 x_mouth, y_mouth;
-    /* 0E */ u8 unk_0E;
-};
-
-struct FaceVramEnt
-{
-    /* 00 */ u32 chr_off;
-    /* 04 */ u16 palid;
-};
-
-struct FaceProc
-{
-    /* 00 */ PROC_HEADER;
-
-    /* 29 */ // pad
-    /* 2A */ u16 disp;
-    /* 2C */ i8 slot;
-    /* 2D */ i8 sprite_layer;
-    /* 2E */ short x_disp;
-    /* 30 */ short y_disp;
-    /* 32 */ short x_offset_mouth;
-    /* 34 */ short y_offset_mouth;
-    /* 36 */ i8 talk_frame;
-    /* 37 */ i8 talk_frame_clock;
-    /* 38 */ u16 oam2;
-    /* 3A */ // pad
-    /* 3C */ u16 const * sprite;
-    /* 40 */ u8 fid;
-};
-
-enum
-{
-    FACE_64x80,
-    FACE_64x80_FLIPPED,
-    FACE_96x80,
-    FACE_96x80_FLIPPED,
-    FACE_64x72,
-    FACE_64x72_FLIPPED,
-};
-
-enum
-{
-    FACE_HLAYER_DEFAULT,
-
-    // why shifts?
-    FACE_HLAYER_0 = 1 << 0,
-    FACE_HLAYER_1 = 1 << 1,
-    FACE_HLAYER_2 = 1 << 2,
-    FACE_HLAYER_3 = 1 << 3,
-};
-
-#define FACE_DISP_FLIPPED (1 << 0)
-#define FACE_DISP_KIND(kind) ((kind) & 7)
-#define FACE_DISP_KIND_MASK FACE_DISP_KIND(-1)
-#define FACE_DISP_SMILE (1 << 3)
-#define FACE_DISP_TALK_1 (1 << 4)
-#define FACE_DISP_TALK_2 (1 << 5)
-#define FACE_DISP_HLAYER(layer) (((layer) & 0xF) << 6)
-#define FACE_DISP_HLAYER_MASK FACE_DISP_HLAYER(-1)
-#define FACE_DISP_BLEND (1 << 10)
-
-enum { FACE_SLOT_COUNT = 4 };
-
-extern struct FaceProc * gFaces[FACE_SLOT_COUNT]; // COMMON
-
-extern struct ProcScr CONST_DATA ProcScr_Face[];
-
-struct FaceInfo const * GetFaceInfo(int fid);
-int GetFace_Unk(int fid);
-void InitFaces(void);
-void SetFaceConfig(struct FaceVramEnt const * config);
-int GetFreeFaceSlot(void);
-struct FaceProc * StartFaceAuto(int fid, int x, int y, int disp);
-struct FaceProc * StartFace(int slot, int fid, int x, int y, int disp);
-void EndFace(struct FaceProc * proc);
-void EndFaceById(int slot);
-u32 SetFaceDisp(struct FaceProc * proc, u32 disp);
-u32 SetFaceDispById(int slot, u32 disp);
-u32 GetFaceDisp(struct FaceProc * proc);
-u32 GetFaceDispById(int slot);
-void FaceRefreshSprite(struct FaceProc * proc);
-void UnpackFaceGraphics(int fid, int chr, int pal);
-void PutFullFaceTm(u16 * tm, int unused_1, int unused_2, int tileref, bool is_flipped);
-void func_fe6_08008874(u16 * tm, int tileref);
-void UnpackFaceChibiGraphics(int fid, int chr, int pal);
-void PutFaceChibi(int fid, u16 * tm, int chr, int pal, bool is_flipped);
-void UnpackFaceChibiSprGraphics(int fid, int chr, int pal);
-void StartFaceChibiStr(int x, int y, int fid, int chr, int pal, bool is_flipped, ProcPtr parent);
-void EndFaceChibiSpr(void);
-void PutFace80x72(u16 * tm, int fid, int chr, int pal);
-void StartFaceFadeIn(struct FaceProc * proc);
-void StartFaceFadeOut(struct FaceProc * proc);
diff --git a/include/faction.h b/include/faction.h
deleted file mode 100644
index 413fffa..0000000
--- a/include/faction.h
+++ /dev/null
@@ -1,26 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-enum
-{
-    FACTION_BLUE   = 0x00,
-    FACTION_RED    = 0x80,
-    FACTION_GREEN  = 0x40,
-    FACTION_PURPLE = 0xC0,
-};
-
-enum
-{
-    FACTION_ID_BLUE = 0,
-    FACTION_ID_GREEN = 1,
-    FACTION_ID_RED = 2,
-    FACTION_ID_PURPLE = 3,
-};
-
-int CountFactionMoveableUnits(int faction);
-int CountFactionUnitsWithoutFlags(int faction, int prohibited_flags);
-bool AreUnitIdsAllied(int uidA, int uidB);
-bool AreUnitIdsSameFaction(int uidA, int uidB);
-int GetActiveFactionAlliance(void);
-int GetActiveFactionOpposingAlliance(void);
diff --git a/include/gamecontroller.h b/include/gamecontroller.h
deleted file mode 100644
index 7ef6811..0000000
--- a/include/gamecontroller.h
+++ /dev/null
@@ -1,48 +0,0 @@
-#pragma once
-
-#include "common.h"
-#include "proc.h"
-
-enum
-{
-    GAME_ACTION_0,
-    GAME_ACTION_1,
-    GAME_ACTION_2,
-    GAME_ACTION_3,
-    GAME_ACTION_4,
-    GAME_ACTION_5,
-    GAME_ACTION_6,
-    GAME_ACTION_7,
-    GAME_ACTION_8,
-};
-
-enum
-{
-    L_GAMECTRL_OPENINGSEQ,
-    L_GAMECTRL_CLASSDEMO,
-    L_GAMECTRL_SCENEDEMO,
-    L_GAMECTRL_TITLE,
-    L_GAMECTRL_MAINMENU,
-    L_GAMECTRL_CHAPTER,
-    L_GAMECTRL_LOADSUSPEND,
-    L_GAMECTRL_POSTCHAPTER,
-    L_GAMECTRL_POSTTRIAL,
-    L_GAMECTRL_TUTORIAL,
-    L_GAMECTRL_LINK,
-    L_GAMECTRL_TRIAL,
-    L_GAMECTRL_PREENDING,
-    L_GAMECTRL_ENDING,
-    L_GAMECTRL_SRAMRESET,
-};
-
-void CleanupGame(ProcPtr proc);
-void StartGame(void);
-void SetNextGameAction(int action);
-void SetNextChapter(int chapter);
-bool HasNextChapter(void);
-void RestartGameAndChapter(void);
-void RestartGameAndLoadSuspend(void);
-void ForceEnableSounds(void);
-void func_fe6_08013A64(void);
-
-extern struct ProcScr CONST_DATA ProcScr_GameController[];
diff --git a/include/gamedata.h b/include/gamedata.h
deleted file mode 100644
index dc262b1..0000000
--- a/include/gamedata.h
+++ /dev/null
@@ -1,193 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "item.h"
-#include "unit.h"
-#include "support.h"
-
-extern struct PInfo CONST_DATA PInfoTable[];
-extern struct JInfo CONST_DATA JInfoTable[];
-extern struct IInfo CONST_DATA IInfoTable[];
-
-extern i8 CONST_DATA MoveTable_BigFootie[];
-extern i8 CONST_DATA MoveTable_Footie[];
-extern i8 CONST_DATA MoveTable_Armor[];
-extern i8 CONST_DATA MoveTable_Fighter[];
-extern i8 CONST_DATA MoveTable_Berserker[];
-extern i8 CONST_DATA MoveTable_Brigand[];
-extern i8 CONST_DATA MoveTable_Pirate[];
-extern i8 CONST_DATA MoveTable_Thief[];
-extern i8 CONST_DATA MoveTable_Mages[];
-extern i8 CONST_DATA MoveTable_Civilian[];
-extern i8 CONST_DATA MoveTable_Horsie[];
-extern i8 CONST_DATA MoveTable_BigHorsie[];
-extern i8 CONST_DATA MoveTable_Nomad[];
-extern i8 CONST_DATA MoveTable_NomadTrooper[];
-extern i8 CONST_DATA MoveTable_Flying[];
-extern i8 CONST_DATA MoveTable_Dragon[];
-
-extern i8 CONST_DATA TerrainAvoTable_Default[];
-extern i8 CONST_DATA TerrainDefTable_Default[];
-extern i8 CONST_DATA TerrainResTable_Default[];
-extern i8 CONST_DATA TerrainAvoTable_Flying[];
-extern i8 CONST_DATA TerrainDefTable_Flying[];
-extern i8 CONST_DATA TerrainResTable_Flying[];
-
-extern i8 CONST_DATA gUnk_Jinfo44_Brigand[];
-extern i8 CONST_DATA gUnk_Jinfo44_Pirate[];
-extern i8 CONST_DATA gUnk_Jinfo44_Berserker[];
-extern i8 CONST_DATA gUnk_Jinfo44_Priests[];
-extern i8 CONST_DATA gUnk_Jinfo44_King[];
-
-extern i8 CONST_DATA TerrainHealAmountTable[];
-extern i8 CONST_DATA TerrainHealsStatusTable[];
-
-extern char const * CONST_DATA TerrainNameStringTable[];
-
-extern u8 CONST_DATA JList_HorseEffectiveness[];
-extern u8 CONST_DATA JList_ArmorEffectiveness[];
-extern u8 CONST_DATA JList_RapierEffectiveness[];
-extern u8 CONST_DATA JList_DragonEffectiveness[];
-extern u8 CONST_DATA JList_WyrmEffectiveness[];
-extern u8 CONST_DATA JList_BowEffectiveness[];
-extern u8 CONST_DATA JList_HeroCrestPromotes[];
-extern u8 CONST_DATA JList_KnightCrestPromotes[];
-extern u8 CONST_DATA JList_OrionBoltPromotes[];
-extern u8 CONST_DATA JList_ElysianWhipPromotes[];
-extern u8 CONST_DATA JList_GuidingRingPromotes[];
-
-extern struct SupportInfo CONST_DATA SupportInfo_Roy;
-extern struct SupportInfo CONST_DATA SupportInfo_Clarine;
-extern struct SupportInfo CONST_DATA SupportInfo_Fae;
-extern struct SupportInfo CONST_DATA SupportInfo_Sin;
-extern struct SupportInfo CONST_DATA SupportInfo_Sue;
-extern struct SupportInfo CONST_DATA SupportInfo_Dayan;
-extern struct SupportInfo CONST_DATA SupportInfo_Barthe;
-extern struct SupportInfo CONST_DATA SupportInfo_Bors;
-extern struct SupportInfo CONST_DATA SupportInfo_Gwendolyn;
-extern struct SupportInfo CONST_DATA SupportInfo_Douglas;
-extern struct SupportInfo CONST_DATA SupportInfo_Wolt;
-extern struct SupportInfo CONST_DATA SupportInfo_Dorothy;
-extern struct SupportInfo CONST_DATA SupportInfo_Klein;
-extern struct SupportInfo CONST_DATA SupportInfo_Saul;
-extern struct SupportInfo CONST_DATA SupportInfo_Elen;
-extern struct SupportInfo CONST_DATA SupportInfo_Yoder;
-extern struct SupportInfo CONST_DATA SupportInfo_Chad;
-extern struct SupportInfo CONST_DATA SupportInfo_Karel;
-extern struct SupportInfo CONST_DATA SupportInfo_Fir;
-extern struct SupportInfo CONST_DATA SupportInfo_Rutger;
-extern struct SupportInfo CONST_DATA SupportInfo_Dieck;
-extern struct SupportInfo CONST_DATA SupportInfo_Ogier;
-extern struct SupportInfo CONST_DATA SupportInfo_Garret;
-extern struct SupportInfo CONST_DATA SupportInfo_Alen;
-extern struct SupportInfo CONST_DATA SupportInfo_Lance;
-extern struct SupportInfo CONST_DATA SupportInfo_Perceval;
-extern struct SupportInfo CONST_DATA SupportInfo_Igrene;
-extern struct SupportInfo CONST_DATA SupportInfo_Marcus;
-extern struct SupportInfo CONST_DATA SupportInfo_Astolfo;
-extern struct SupportInfo CONST_DATA SupportInfo_Ward;
-extern struct SupportInfo CONST_DATA SupportInfo_Lot;
-extern struct SupportInfo CONST_DATA SupportInfo_Bartre;
-extern struct SupportInfo CONST_DATA SupportInfo_Lugh;
-extern struct SupportInfo CONST_DATA SupportInfo_Lilina;
-extern struct SupportInfo CONST_DATA SupportInfo_Hugh;
-extern struct SupportInfo CONST_DATA SupportInfo_Niime;
-extern struct SupportInfo CONST_DATA SupportInfo_Raigh;
-extern struct SupportInfo CONST_DATA SupportInfo_Larum;
-extern struct SupportInfo CONST_DATA SupportInfo_Juno;
-extern struct SupportInfo CONST_DATA SupportInfo_Thea;
-extern struct SupportInfo CONST_DATA SupportInfo_Shanna;
-extern struct SupportInfo CONST_DATA SupportInfo_Zeiss;
-extern struct SupportInfo CONST_DATA SupportInfo_Elffin;
-extern struct SupportInfo CONST_DATA SupportInfo_Cath;
-extern struct SupportInfo CONST_DATA SupportInfo_Sophia;
-extern struct SupportInfo CONST_DATA SupportInfo_Melady;
-extern struct SupportInfo CONST_DATA SupportInfo_Gonzalez;
-extern struct SupportInfo CONST_DATA SupportInfo_Noah;
-extern struct SupportInfo CONST_DATA SupportInfo_Trec;
-extern struct SupportInfo CONST_DATA SupportInfo_Zelot;
-extern struct SupportInfo CONST_DATA SupportInfo_Echidna;
-extern struct SupportInfo CONST_DATA SupportInfo_Cecilia;
-extern struct SupportInfo CONST_DATA SupportInfo_Geese;
-
-extern struct ItemBonuses CONST_DATA ItemBonuses_Durandal;
-extern struct ItemBonuses CONST_DATA ItemBonuses_BindingBlade;
-extern struct ItemBonuses CONST_DATA ItemBonuses_Maltet;
-extern struct ItemBonuses CONST_DATA ItemBonuses_Armads;
-extern struct ItemBonuses CONST_DATA ItemBonuses_Mulagir;
-extern struct ItemBonuses CONST_DATA ItemBonuses_Forblaze;
-extern struct ItemBonuses CONST_DATA ItemBonuses_Aureola;
-extern struct ItemBonuses CONST_DATA ItemBonuses_Apocalypse;
-extern struct ItemBonuses CONST_DATA ItemBonuses_Firestone;
-extern struct ItemBonuses CONST_DATA ItemBonuses_Divinestone;
-extern struct ItemBonuses CONST_DATA ItemBonuses_Demonstone;
-extern struct ItemBonuses CONST_DATA ItemBonuses_SecretBook;
-extern struct ItemBonuses CONST_DATA ItemBonuses_GoddessIcon;
-extern struct ItemBonuses CONST_DATA ItemBonuses_SeraphRobe;
-extern struct ItemBonuses CONST_DATA ItemBonuses_Dracoshield;
-extern struct ItemBonuses CONST_DATA ItemBonuses_EnergyRing;
-extern struct ItemBonuses CONST_DATA ItemBonuses_Speedwing;
-extern struct ItemBonuses CONST_DATA ItemBonuses_Talisman;
-extern struct ItemBonuses CONST_DATA ItemBonuses_Boots;
-extern struct ItemBonuses CONST_DATA ItemBonuses_BodyRing;
-
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Roy[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Mercenary[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Hero[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Hero_F[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Myrmidon[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Myrmidon_F[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Swordmaster[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Swordmaster_F[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Fighter[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Warrior[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Armor[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Armor_F[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_General[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_General_F[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Archer[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Archer_F[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Sniper[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Sniper_F[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Priest[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Cleric[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Bishop[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Bishop_F[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Mage[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Mage_F[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Sage[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Sage_F[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Shaman[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Shaman_F[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Druid[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Druid_F[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Cavalier[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Paladin[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Troubadour[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Valkyrie[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Nomad[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Nomad_F[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Nomadtrooper[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Nomadtrooper_F[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Pegasusknight[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Falconknight[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Wyvernrider[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Wyvernrider_F[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Wyvernlord[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Wyvernlord_F[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Soldier[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Brigand[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Pirate[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Berserker[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Thief[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Thief_F[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Bard[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Dancer[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Manakete[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Manakete_F[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Firedragon[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Divinedragon[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Demondragon[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_King[];
-extern struct BanimInfoEnt CONST_DATA BanimInfo_Roy_Promoted[];
diff --git a/include/gba/defines.h b/include/gba/defines.h
index f92ed1d..4d425b3 100644
--- a/include/gba/defines.h
+++ b/include/gba/defines.h
@@ -3,6 +3,14 @@
 
 #include <stddef.h>
 
+#define TRUE  1
+#define FALSE 0
+
+#define IWRAM_DATA __attribute__((section("iwram_data")))
+#define EWRAM_DATA __attribute__((section("ewram_data")))
+
+#define ALIGNED(n) __attribute__((aligned(n)))
+
 #define SOUND_INFO_PTR (*(struct SoundInfo **)0x3007FF0)
 #define INTR_CHECK     (*(u16 *)0x3007FF8)
 #define INTR_VECTOR    (*(void **)0x3007FFC)
@@ -47,7 +55,7 @@
 
 #define TOTAL_OBJ_TILE_COUNT 1024
 
-#define RGB(r, g, b) (((b) << 10) + ((g) << 5) + (r))
+#define RGB(r, g, b) ((r) | ((g) << 5) | ((b) << 10))
 
 #define RGB_BLACK RGB(0, 0, 0)
 #define RGB_WHITE RGB(31, 31, 31)
diff --git a/include/gba/flash_internal.h b/include/gba/flash_internal.h
new file mode 100644
index 0000000..39e14ef
--- /dev/null
+++ b/include/gba/flash_internal.h
@@ -0,0 +1,83 @@
+#ifndef GUARD_GBA_FLASH_INTERNAL_H
+#define GUARD_GBA_FLASH_INTERNAL_H
+
+#define FLASH_BASE ((u8 *)0xE000000)
+
+#define FLASH_WRITE(addr, data) ((*(vu8 *)(FLASH_BASE + (addr))) = (data))
+
+#define FLASH_ROM_SIZE_1M 131072 // 1 megabit ROM
+
+#define SECTORS_PER_BANK 16
+
+struct FlashSector
+{
+    u32 size;
+    u8 shift;
+    u16 count;
+    u16 top;
+};
+
+struct FlashType {
+    u32 romSize;
+    struct FlashSector sector;
+    u16 wait[2]; // game pak bus read/write wait
+
+    // TODO: add support for anonymous unions/structs if possible
+    union {
+        struct {
+        u8 makerId;
+        u8 deviceId;
+        } separate;
+        u16 joined;
+    } ids;
+};
+
+struct FlashSetupInfo
+{
+    u16 (*programFlashByte)(u16, u32, u8);
+    u16 (*programFlashSector)(u16, void *);
+    u16 (*eraseFlashChip)(void);
+    u16 (*eraseFlashSector)(u16);
+    u16 (*WaitForFlashWrite)(u8, u8 *, u8);
+    const u16 *maxTime;
+    struct FlashType type;
+};
+
+extern u16 gFlashNumRemainingBytes;
+
+extern u16 (*ProgramFlashByte)(u16, u32, u8);
+extern u16 (*ProgramFlashSector)(u16, void *);
+extern u16 (*EraseFlashChip)(void);
+extern u16 (*EraseFlashSector)(u16);
+extern u16 (*WaitForFlashWrite)(u8, u8 *, u8);
+extern const u16 *gFlashMaxTime;
+extern const struct FlashType *gFlash;
+
+extern u8 (*PollFlashStatus)(u8 *);
+extern u8 gFlashTimeoutFlag;
+
+extern const struct FlashSetupInfo MX29L010;
+extern const struct FlashSetupInfo LE26FV10N1TS;
+extern const struct FlashSetupInfo DefaultFlash;
+
+void SwitchFlashBank(u8 bankNum);
+u16 ReadFlashId(void);
+void StartFlashTimer(u8 phase);
+void SetReadFlash1(u16 *dest);
+void StopFlashTimer(void);
+u16 SetFlashTimerIntr(u8 timerNum, void (**intrFunc)(void));
+u32 ProgramFlashSectorAndVerify(u16 sectorNum, u8 *src);
+void ReadFlash(u16 sectorNum, u32 offset, void *dest, u32 size);
+u32 ProgramFlashSectorAndVerifyNBytes(u16 sectorNum, void *dataSrc, u32 n);
+
+u16 WaitForFlashWrite_Common(u8 phase, u8 *addr, u8 lastData);
+
+u16 EraseFlashChip_MX(void);
+u16 EraseFlashSector_MX(u16 sectorNum);
+u16 ProgramFlashByte_MX(u16 sectorNum, u32 offset, u8 data);
+u16 ProgramFlashSector_MX(u16 sectorNum, void *src);
+
+// agb_flash_1m
+u16 IdentifyFlash(void);
+
+#endif // GUARD_GBA_FLASH_INTERNAL_H
diff --git a/include/gba/gba.h b/include/gba/gba.h
index 8d95fe3..3493440 100644
--- a/include/gba/gba.h
+++ b/include/gba/gba.h
@@ -1,7 +1,12 @@
-#pragma once
+#ifndef GUARD_GBA_GBA_H
+#define GUARD_GBA_GBA_H
 
 #include "gba/defines.h"
-#include "../types.h"
-#include "../gbaio.h"
-#include "../gbasvc.h"
+#include "gba/io_reg.h"
+#include "gba/types.h"
+#include "gba/multiboot.h"
+#include "gba/syscall.h"
 #include "gba/macro.h"
+#include "gba/isagbprint.h"
+
+#endif // GUARD_GBA_GBA_H
diff --git a/include/gba/io_reg.h b/include/gba/io_reg.h
new file mode 100644
index 0000000..1a92091
--- /dev/null
+++ b/include/gba/io_reg.h
@@ -0,0 +1,727 @@
+#ifndef GUARD_GBA_IO_REG_H
+#define GUARD_GBA_IO_REG_H
+
+#define REG_BASE 0x4000000 // I/O register base address
+
+// I/O register offsets
+
+#define REG_OFFSET_DISPCNT     0x0
+#define REG_OFFSET_DISPSTAT    0x4
+#define REG_OFFSET_VCOUNT      0x6
+#define REG_OFFSET_BG0CNT      0x8
+#define REG_OFFSET_BG1CNT      0xa
+#define REG_OFFSET_BG2CNT      0xc
+#define REG_OFFSET_BG3CNT      0xe
+#define REG_OFFSET_BG0HOFS     0x10
+#define REG_OFFSET_BG0VOFS     0x12
+#define REG_OFFSET_BG1HOFS     0x14
+#define REG_OFFSET_BG1VOFS     0x16
+#define REG_OFFSET_BG2HOFS     0x18
+#define REG_OFFSET_BG2VOFS     0x1a
+#define REG_OFFSET_BG3HOFS     0x1c
+#define REG_OFFSET_BG3VOFS     0x1e
+#define REG_OFFSET_BG2PA       0x20
+#define REG_OFFSET_BG2PB       0x22
+#define REG_OFFSET_BG2PC       0x24
+#define REG_OFFSET_BG2PD       0x26
+#define REG_OFFSET_BG2X        0x28
+#define REG_OFFSET_BG2X_L      0x28
+#define REG_OFFSET_BG2X_H      0x2a
+#define REG_OFFSET_BG2Y        0x2c
+#define REG_OFFSET_BG2Y_L      0x2c
+#define REG_OFFSET_BG2Y_H      0x2e
+#define REG_OFFSET_BG3PA       0x30
+#define REG_OFFSET_BG3PB       0x32
+#define REG_OFFSET_BG3PC       0x34
+#define REG_OFFSET_BG3PD       0x36
+#define REG_OFFSET_BG3X        0x38
+#define REG_OFFSET_BG3X_L      0x38
+#define REG_OFFSET_BG3X_H      0x3a
+#define REG_OFFSET_BG3Y        0x3c
+#define REG_OFFSET_BG3Y_L      0x3c
+#define REG_OFFSET_BG3Y_H      0x3e
+#define REG_OFFSET_WIN0H       0x40
+#define REG_OFFSET_WIN1H       0x42
+#define REG_OFFSET_WIN0V       0x44
+#define REG_OFFSET_WIN1V       0x46
+#define REG_OFFSET_WININ       0x48
+#define REG_OFFSET_WINOUT      0x4a
+#define REG_OFFSET_MOSAIC      0x4c
+#define REG_OFFSET_BLDCNT      0x50
+#define REG_OFFSET_BLDALPHA    0x52
+#define REG_OFFSET_BLDY        0x54
+
+#define REG_OFFSET_SOUND1CNT_L 0x60
+#define REG_OFFSET_NR10        0x60
+#define REG_OFFSET_SOUND1CNT_H 0x62
+#define REG_OFFSET_NR11        0x62
+#define REG_OFFSET_NR12        0x63
+#define REG_OFFSET_SOUND1CNT_X 0x64
+#define REG_OFFSET_NR13        0x64
+#define REG_OFFSET_NR14        0x65
+#define REG_OFFSET_SOUND2CNT_L 0x68
+#define REG_OFFSET_NR21        0x68
+#define REG_OFFSET_NR22        0x69
+#define REG_OFFSET_SOUND2CNT_H 0x6c
+#define REG_OFFSET_NR23        0x6c
+#define REG_OFFSET_NR24        0x6d
+#define REG_OFFSET_SOUND3CNT_L 0x70
+#define REG_OFFSET_NR30        0x70
+#define REG_OFFSET_SOUND3CNT_H 0x72
+#define REG_OFFSET_NR31        0x72
+#define REG_OFFSET_NR32        0x73
+#define REG_OFFSET_SOUND3CNT_X 0x74
+#define REG_OFFSET_NR33        0x74
+#define REG_OFFSET_NR34        0x75
+#define REG_OFFSET_SOUND4CNT_L 0x78
+#define REG_OFFSET_NR41        0x78
+#define REG_OFFSET_NR42        0x79
+#define REG_OFFSET_SOUND4CNT_H 0x7c
+#define REG_OFFSET_NR43        0x7c
+#define REG_OFFSET_NR44        0x7d
+#define REG_OFFSET_SOUNDCNT_L  0x80
+#define REG_OFFSET_NR50        0x80
+#define REG_OFFSET_NR51        0x81
+#define REG_OFFSET_SOUNDCNT_H  0x82
+#define REG_OFFSET_SOUNDCNT_X  0x84
+#define REG_OFFSET_NR52        0x84
+#define REG_OFFSET_SOUNDBIAS   0x88
+#define REG_OFFSET_SOUNDBIAS_L 0x88
+#define REG_OFFSET_SOUNDBIAS_H 0x89
+#define REG_OFFSET_WAVE_RAM0   0x90
+#define REG_OFFSET_WAVE_RAM1   0x94
+#define REG_OFFSET_WAVE_RAM2   0x98
+#define REG_OFFSET_WAVE_RAM3   0x9c
+#define REG_OFFSET_FIFO_A      0xa0
+#define REG_OFFSET_FIFO_B      0xa4
+
+#define REG_OFFSET_DMA0        0xb0
+#define REG_OFFSET_DMA0SAD     0xb0
+#define REG_OFFSET_DMA0SAD_L   0xb0
+#define REG_OFFSET_DMA0SAD_H   0xb2
+#define REG_OFFSET_DMA0DAD     0xb4
+#define REG_OFFSET_DMA0DAD_L   0xb4
+#define REG_OFFSET_DMA0DAD_H   0xb6
+#define REG_OFFSET_DMA0CNT     0xb8
+#define REG_OFFSET_DMA0CNT_L   0xb8
+#define REG_OFFSET_DMA0CNT_H   0xba
+#define REG_OFFSET_DMA1        0xbc
+#define REG_OFFSET_DMA1SAD     0xbc
+#define REG_OFFSET_DMA1SAD_L   0xbc
+#define REG_OFFSET_DMA1SAD_H   0xbe
+#define REG_OFFSET_DMA1DAD     0xc0
+#define REG_OFFSET_DMA1DAD_L   0xc0
+#define REG_OFFSET_DMA1DAD_H   0xc2
+#define REG_OFFSET_DMA1CNT     0xc4
+#define REG_OFFSET_DMA1CNT_L   0xc4
+#define REG_OFFSET_DMA1CNT_H   0xc6
+#define REG_OFFSET_DMA2        0xc8
+#define REG_OFFSET_DMA2SAD     0xc8
+#define REG_OFFSET_DMA2SAD_L   0xc8
+#define REG_OFFSET_DMA2SAD_H   0xca
+#define REG_OFFSET_DMA2DAD     0xcc
+#define REG_OFFSET_DMA2DAD_L   0xcc
+#define REG_OFFSET_DMA2DAD_H   0xce
+#define REG_OFFSET_DMA2CNT     0xd0
+#define REG_OFFSET_DMA2CNT_L   0xd0
+#define REG_OFFSET_DMA2CNT_H   0xd2
+#define REG_OFFSET_DMA3        0xd4
+#define REG_OFFSET_DMA3SAD     0xd4
+#define REG_OFFSET_DMA3SAD_L   0xd4
+#define REG_OFFSET_DMA3SAD_H   0xd6
+#define REG_OFFSET_DMA3DAD     0xd8
+#define REG_OFFSET_DMA3DAD_L   0xd8
+#define REG_OFFSET_DMA3DAD_H   0xda
+#define REG_OFFSET_DMA3CNT     0xdc
+#define REG_OFFSET_DMA3CNT_L   0xdc
+#define REG_OFFSET_DMA3CNT_H   0xde
+
+#define REG_OFFSET_TMCNT       0x100
+#define REG_OFFSET_TM0CNT      0x100
+#define REG_OFFSET_TM0CNT_L    0x100
+#define REG_OFFSET_TM0CNT_H    0x102
+#define REG_OFFSET_TM1CNT      0x104
+#define REG_OFFSET_TM1CNT_L    0x104
+#define REG_OFFSET_TM1CNT_H    0x106
+#define REG_OFFSET_TM2CNT      0x108
+#define REG_OFFSET_TM2CNT_L    0x108
+#define REG_OFFSET_TM2CNT_H    0x10a
+#define REG_OFFSET_TM3CNT      0x10c
+#define REG_OFFSET_TM3CNT_L    0x10c
+#define REG_OFFSET_TM3CNT_H    0x10e
+
+#define REG_OFFSET_SIOCNT      0x128
+#define REG_OFFSET_SIODATA8    0x12a
+#define REG_OFFSET_SIODATA32   0x120
+#define REG_OFFSET_SIOMLT_SEND 0x12a
+#define REG_OFFSET_SIOMLT_RECV 0x120
+#define REG_OFFSET_SIOMULTI0   0x120
+#define REG_OFFSET_SIOMULTI1   0x122
+#define REG_OFFSET_SIOMULTI2   0x124
+#define REG_OFFSET_SIOMULTI3   0x126
+
+#define REG_OFFSET_KEYINPUT    0x130
+#define REG_OFFSET_KEYCNT      0x132
+
+#define REG_OFFSET_RCNT        0x134
+
+#define REG_OFFSET_JOYCNT      0x140
+#define REG_OFFSET_JOYSTAT     0x158
+#define REG_OFFSET_JOY_RECV    0x150
+#define REG_OFFSET_JOY_RECV_L  0x150
+#define REG_OFFSET_JOY_RECV_H  0x152
+#define REG_OFFSET_JOY_TRANS   0x154
+#define REG_OFFSET_JOY_TRANS_L 0x154
+#define REG_OFFSET_JOY_TRANS_H 0x156
+
+#define REG_OFFSET_IME         0x208
+#define REG_OFFSET_IE          0x200
+#define REG_OFFSET_IF          0x202
+
+#define REG_OFFSET_WAITCNT     0x204
+
+// I/O register addresses
+
+#define REG_ADDR_DISPCNT     (REG_BASE + REG_OFFSET_DISPCNT)
+#define REG_ADDR_DISPSTAT    (REG_BASE + REG_OFFSET_DISPSTAT)
+#define REG_ADDR_VCOUNT      (REG_BASE + REG_OFFSET_VCOUNT)
+#define REG_ADDR_BG0CNT      (REG_BASE + REG_OFFSET_BG0CNT)
+#define REG_ADDR_BG1CNT      (REG_BASE + REG_OFFSET_BG1CNT)
+#define REG_ADDR_BG2CNT      (REG_BASE + REG_OFFSET_BG2CNT)
+#define REG_ADDR_BG3CNT      (REG_BASE + REG_OFFSET_BG3CNT)
+#define REG_ADDR_BG0HOFS     (REG_BASE + REG_OFFSET_BG0HOFS)
+#define REG_ADDR_BG0VOFS     (REG_BASE + REG_OFFSET_BG0VOFS)
+#define REG_ADDR_BG1HOFS     (REG_BASE + REG_OFFSET_BG1HOFS)
+#define REG_ADDR_BG1VOFS     (REG_BASE + REG_OFFSET_BG1VOFS)
+#define REG_ADDR_BG2HOFS     (REG_BASE + REG_OFFSET_BG2HOFS)
+#define REG_ADDR_BG2VOFS     (REG_BASE + REG_OFFSET_BG2VOFS)
+#define REG_ADDR_BG3HOFS     (REG_BASE + REG_OFFSET_BG3HOFS)
+#define REG_ADDR_BG3VOFS     (REG_BASE + REG_OFFSET_BG3VOFS)
+#define REG_ADDR_BG2PA       (REG_BASE + REG_OFFSET_BG2PA)
+#define REG_ADDR_BG2PB       (REG_BASE + REG_OFFSET_BG2PB)
+#define REG_ADDR_BG2PC       (REG_BASE + REG_OFFSET_BG2PC)
+#define REG_ADDR_BG2PD       (REG_BASE + REG_OFFSET_BG2PD)
+#define REG_ADDR_BG2X        (REG_BASE + REG_OFFSET_BG2X)
+#define REG_ADDR_BG2X_L      (REG_BASE + REG_OFFSET_BG2X_L)
+#define REG_ADDR_BG2X_H      (REG_BASE + REG_OFFSET_BG2X_H)
+#define REG_ADDR_BG2Y        (REG_BASE + REG_OFFSET_BG2Y)
+#define REG_ADDR_BG2Y_L      (REG_BASE + REG_OFFSET_BG2Y_L)
+#define REG_ADDR_BG2Y_H      (REG_BASE + REG_OFFSET_BG2Y_H)
+#define REG_ADDR_BG3PA       (REG_BASE + REG_OFFSET_BG3PA)
+#define REG_ADDR_BG3PB       (REG_BASE + REG_OFFSET_BG3PB)
+#define REG_ADDR_BG3PC       (REG_BASE + REG_OFFSET_BG3PC)
+#define REG_ADDR_BG3PD       (REG_BASE + REG_OFFSET_BG3PD)
+#define REG_ADDR_BG3X        (REG_BASE + REG_OFFSET_BG3X)
+#define REG_ADDR_BG3X_L      (REG_BASE + REG_OFFSET_BG3X_L)
+#define REG_ADDR_BG3X_H      (REG_BASE + REG_OFFSET_BG3X_H)
+#define REG_ADDR_BG3Y        (REG_BASE + REG_OFFSET_BG3Y)
+#define REG_ADDR_BG3Y_L      (REG_BASE + REG_OFFSET_BG3Y_L)
+#define REG_ADDR_BG3Y_H      (REG_BASE + REG_OFFSET_BG3Y_H)
+#define REG_ADDR_WIN0H       (REG_BASE + REG_OFFSET_WIN0H)
+#define REG_ADDR_WIN1H       (REG_BASE + REG_OFFSET_WIN1H)
+#define REG_ADDR_WIN0V       (REG_BASE + REG_OFFSET_WIN0V)
+#define REG_ADDR_WIN1V       (REG_BASE + REG_OFFSET_WIN1V)
+#define REG_ADDR_WININ       (REG_BASE + REG_OFFSET_WININ)
+#define REG_ADDR_WINOUT      (REG_BASE + REG_OFFSET_WINOUT)
+#define REG_ADDR_MOSAIC      (REG_BASE + REG_OFFSET_MOSAIC)
+#define REG_ADDR_BLDCNT      (REG_BASE + REG_OFFSET_BLDCNT)
+#define REG_ADDR_BLDALPHA    (REG_BASE + REG_OFFSET_BLDALPHA)
+#define REG_ADDR_BLDY        (REG_BASE + REG_OFFSET_BLDY)
+
+#define REG_ADDR_SOUND1CNT_L (REG_BASE + REG_OFFSET_SOUND1CNT_L)
+#define REG_ADDR_NR10        (REG_BASE + REG_OFFSET_NR10)
+#define REG_ADDR_SOUND1CNT_H (REG_BASE + REG_OFFSET_SOUND1CNT_H)
+#define REG_ADDR_NR11        (REG_BASE + REG_OFFSET_NR11)
+#define REG_ADDR_NR12        (REG_BASE + REG_OFFSET_NR12)
+#define REG_ADDR_SOUND1CNT_X (REG_BASE + REG_OFFSET_SOUND1CNT_X)
+#define REG_ADDR_NR13        (REG_BASE + REG_OFFSET_NR13)
+#define REG_ADDR_NR14        (REG_BASE + REG_OFFSET_NR14)
+#define REG_ADDR_SOUND2CNT_L (REG_BASE + REG_OFFSET_SOUND2CNT_L)
+#define REG_ADDR_NR21        (REG_BASE + REG_OFFSET_NR21)
+#define REG_ADDR_NR22        (REG_BASE + REG_OFFSET_NR22)
+#define REG_ADDR_SOUND2CNT_H (REG_BASE + REG_OFFSET_SOUND2CNT_H)
+#define REG_ADDR_NR23        (REG_BASE + REG_OFFSET_NR23)
+#define REG_ADDR_NR24        (REG_BASE + REG_OFFSET_NR24)
+#define REG_ADDR_SOUND3CNT_L (REG_BASE + REG_OFFSET_SOUND3CNT_L)
+#define REG_ADDR_NR30        (REG_BASE + REG_OFFSET_NR30)
+#define REG_ADDR_SOUND3CNT_H (REG_BASE + REG_OFFSET_SOUND3CNT_H)
+#define REG_ADDR_NR31        (REG_BASE + REG_OFFSET_NR31)
+#define REG_ADDR_NR32        (REG_BASE + REG_OFFSET_NR32)
+#define REG_ADDR_SOUND3CNT_X (REG_BASE + REG_OFFSET_SOUND3CNT_X)
+#define REG_ADDR_NR33        (REG_BASE + REG_OFFSET_NR33)
+#define REG_ADDR_NR34        (REG_BASE + REG_OFFSET_NR34)
+#define REG_ADDR_SOUND4CNT_L (REG_BASE + REG_OFFSET_SOUND4CNT_L)
+#define REG_ADDR_NR41        (REG_BASE + REG_OFFSET_NR41)
+#define REG_ADDR_NR42        (REG_BASE + REG_OFFSET_NR42)
+#define REG_ADDR_SOUND4CNT_H (REG_BASE + REG_OFFSET_SOUND4CNT_H)
+#define REG_ADDR_NR43        (REG_BASE + REG_OFFSET_NR43)
+#define REG_ADDR_NR44        (REG_BASE + REG_OFFSET_NR44)
+#define REG_ADDR_SOUNDCNT_L  (REG_BASE + REG_OFFSET_SOUNDCNT_L)
+#define REG_ADDR_NR50        (REG_BASE + REG_OFFSET_NR50)
+#define REG_ADDR_NR51        (REG_BASE + REG_OFFSET_NR51)
+#define REG_ADDR_SOUNDCNT_H  (REG_BASE + REG_OFFSET_SOUNDCNT_H)
+#define REG_ADDR_SOUNDCNT_X  (REG_BASE + REG_OFFSET_SOUNDCNT_X)
+#define REG_ADDR_NR52        (REG_BASE + REG_OFFSET_NR52)
+#define REG_ADDR_SOUNDBIAS   (REG_BASE + REG_OFFSET_SOUNDBIAS)
+#define REG_ADDR_SOUNDBIAS_L (REG_BASE + REG_OFFSET_SOUNDBIAS_L)
+#define REG_ADDR_SOUNDBIAS_H (REG_BASE + REG_OFFSET_SOUNDBIAS_H)
+#define REG_ADDR_WAVE_RAM0   (REG_BASE + REG_OFFSET_WAVE_RAM0)
+#define REG_ADDR_WAVE_RAM1   (REG_BASE + REG_OFFSET_WAVE_RAM1)
+#define REG_ADDR_WAVE_RAM2   (REG_BASE + REG_OFFSET_WAVE_RAM2)
+#define REG_ADDR_WAVE_RAM3   (REG_BASE + REG_OFFSET_WAVE_RAM3)
+#define REG_ADDR_FIFO_A      (REG_BASE + REG_OFFSET_FIFO_A)
+#define REG_ADDR_FIFO_B      (REG_BASE + REG_OFFSET_FIFO_B)
+
+#define REG_ADDR_DMA0        (REG_BASE + REG_OFFSET_DMA0)
+#define REG_ADDR_DMA0SAD     (REG_BASE + REG_OFFSET_DMA0SAD)
+#define REG_ADDR_DMA0DAD     (REG_BASE + REG_OFFSET_DMA0DAD)
+#define REG_ADDR_DMA0CNT     (REG_BASE + REG_OFFSET_DMA0CNT)
+#define REG_ADDR_DMA0CNT_L   (REG_BASE + REG_OFFSET_DMA0CNT_L)
+#define REG_ADDR_DMA0CNT_H   (REG_BASE + REG_OFFSET_DMA0CNT_H)
+#define REG_ADDR_DMA1        (REG_BASE + REG_OFFSET_DMA1)
+#define REG_ADDR_DMA1SAD     (REG_BASE + REG_OFFSET_DMA1SAD)
+#define REG_ADDR_DMA1DAD     (REG_BASE + REG_OFFSET_DMA1DAD)
+#define REG_ADDR_DMA1CNT     (REG_BASE + REG_OFFSET_DMA1CNT)
+#define REG_ADDR_DMA1CNT_L   (REG_BASE + REG_OFFSET_DMA1CNT_L)
+#define REG_ADDR_DMA1CNT_H   (REG_BASE + REG_OFFSET_DMA1CNT_H)
+#define REG_ADDR_DMA2        (REG_BASE + REG_OFFSET_DMA2)
+#define REG_ADDR_DMA2SAD     (REG_BASE + REG_OFFSET_DMA2SAD)
+#define REG_ADDR_DMA2DAD     (REG_BASE + REG_OFFSET_DMA2DAD)
+#define REG_ADDR_DMA2CNT     (REG_BASE + REG_OFFSET_DMA2CNT)
+#define REG_ADDR_DMA2CNT_L   (REG_BASE + REG_OFFSET_DMA2CNT_L)
+#define REG_ADDR_DMA2CNT_H   (REG_BASE + REG_OFFSET_DMA2CNT_H)
+#define REG_ADDR_DMA3        (REG_BASE + REG_OFFSET_DMA3)
+#define REG_ADDR_DMA3SAD     (REG_BASE + REG_OFFSET_DMA3SAD)
+#define REG_ADDR_DMA3DAD     (REG_BASE + REG_OFFSET_DMA3DAD)
+#define REG_ADDR_DMA3CNT     (REG_BASE + REG_OFFSET_DMA3CNT)
+#define REG_ADDR_DMA3CNT_L   (REG_BASE + REG_OFFSET_DMA3CNT_L)
+#define REG_ADDR_DMA3CNT_H   (REG_BASE + REG_OFFSET_DMA3CNT_H)
+
+#define REG_ADDR_TMCNT       (REG_BASE + REG_OFFSET_TMCNT)
+#define REG_ADDR_TM0CNT      (REG_BASE + REG_OFFSET_TM0CNT)
+#define REG_ADDR_TM0CNT_L    (REG_BASE + REG_OFFSET_TM0CNT_L)
+#define REG_ADDR_TM0CNT_H    (REG_BASE + REG_OFFSET_TM0CNT_H)
+#define REG_ADDR_TM1CNT      (REG_BASE + REG_OFFSET_TM1CNT)
+#define REG_ADDR_TM1CNT_L    (REG_BASE + REG_OFFSET_TM1CNT_L)
+#define REG_ADDR_TM1CNT_H    (REG_BASE + REG_OFFSET_TM1CNT_H)
+#define REG_ADDR_TM2CNT      (REG_BASE + REG_OFFSET_TM2CNT)
+#define REG_ADDR_TM2CNT_L    (REG_BASE + REG_OFFSET_TM2CNT_L)
+#define REG_ADDR_TM2CNT_H    (REG_BASE + REG_OFFSET_TM2CNT_H)
+#define REG_ADDR_TM3CNT      (REG_BASE + REG_OFFSET_TM3CNT)
+#define REG_ADDR_TM3CNT_L    (REG_BASE + REG_OFFSET_TM3CNT_L)
+#define REG_ADDR_TM3CNT_H    (REG_BASE + REG_OFFSET_TM3CNT_H)
+
+#define REG_ADDR_SIOCNT      (REG_BASE + REG_OFFSET_SIOCNT)
+#define REG_ADDR_SIODATA8    (REG_BASE + REG_OFFSET_SIODATA8)
+#define REG_ADDR_SIODATA32   (REG_BASE + REG_OFFSET_SIODATA32)
+#define REG_ADDR_SIOMLT_SEND (REG_BASE + REG_OFFSET_SIOMLT_SEND)
+#define REG_ADDR_SIOMLT_RECV (REG_BASE + REG_OFFSET_SIOMLT_RECV)
+#define REG_ADDR_SIOMULTI0   (REG_BASE + REG_OFFSET_SIOMULTI0)
+#define REG_ADDR_SIOMULTI1   (REG_BASE + REG_OFFSET_SIOMULTI1)
+#define REG_ADDR_SIOMULTI2   (REG_BASE + REG_OFFSET_SIOMULTI2)
+#define REG_ADDR_SIOMULTI3   (REG_BASE + REG_OFFSET_SIOMULTI3)
+
+#define REG_ADDR_KEYINPUT    (REG_BASE + REG_OFFSET_KEYINPUT)
+#define REG_ADDR_KEYCNT      (REG_BASE + REG_OFFSET_KEYCNT)
+
+#define REG_ADDR_RCNT        (REG_BASE + REG_OFFSET_RCNT)
+
+#define REG_ADDR_JOYCNT      (REG_BASE + REG_OFFSET_JOYCNT)
+#define REG_ADDR_JOYSTAT     (REG_BASE + REG_OFFSET_JOYSTAT)
+#define REG_ADDR_JOY_RECV    (REG_BASE + REG_OFFSET_JOY_RECV)
+#define REG_ADDR_JOY_RECV_L  (REG_BASE + REG_OFFSET_JOY_RECV_L)
+#define REG_ADDR_JOY_RECV_H  (REG_BASE + REG_OFFSET_JOY_RECV_H)
+#define REG_ADDR_JOY_TRANS   (REG_BASE + REG_OFFSET_JOY_TRANS)
+#define REG_ADDR_JOY_TRANS_L (REG_BASE + REG_OFFSET_JOY_TRANS_L)
+#define REG_ADDR_JOY_TRANS_H (REG_BASE + REG_OFFSET_JOY_TRANS_H)
+
+#define REG_ADDR_IME         (REG_BASE + REG_OFFSET_IME)
+#define REG_ADDR_IE          (REG_BASE + REG_OFFSET_IE)
+#define REG_ADDR_IF          (REG_BASE + REG_OFFSET_IF)
+
+#define REG_ADDR_WAITCNT     (REG_BASE + REG_OFFSET_WAITCNT)
+
+// I/O registers
+
+#define REG_DISPCNT     (*(vu16 *)REG_ADDR_DISPCNT)
+#define REG_DISPSTAT    (*(vu16 *)REG_ADDR_DISPSTAT)
+#define REG_VCOUNT      (*(vu16 *)REG_ADDR_VCOUNT)
+#define REG_BG0CNT      (*(vu16 *)REG_ADDR_BG0CNT)
+#define REG_BG1CNT      (*(vu16 *)REG_ADDR_BG1CNT)
+#define REG_BG2CNT      (*(vu16 *)REG_ADDR_BG2CNT)
+#define REG_BG3CNT      (*(vu16 *)REG_ADDR_BG3CNT)
+#define REG_BG0HOFS     (*(vu16 *)REG_ADDR_BG0HOFS)
+#define REG_BG0VOFS     (*(vu16 *)REG_ADDR_BG0VOFS)
+#define REG_BG1HOFS     (*(vu16 *)REG_ADDR_BG1HOFS)
+#define REG_BG1VOFS     (*(vu16 *)REG_ADDR_BG1VOFS)
+#define REG_BG2HOFS     (*(vu16 *)REG_ADDR_BG2HOFS)
+#define REG_BG2VOFS     (*(vu16 *)REG_ADDR_BG2VOFS)
+#define REG_BG3HOFS     (*(vu16 *)REG_ADDR_BG3HOFS)
+#define REG_BG3VOFS     (*(vu16 *)REG_ADDR_BG3VOFS)
+#define REG_BG2PA       (*(vu16 *)REG_ADDR_BG2PA)
+#define REG_BG2PB       (*(vu16 *)REG_ADDR_BG2PB)
+#define REG_BG2PC       (*(vu16 *)REG_ADDR_BG2PC)
+#define REG_BG2PD       (*(vu16 *)REG_ADDR_BG2PD)
+#define REG_BG2X        (*(vu32 *)REG_ADDR_BG2X)
+#define REG_BG2X_L      (*(vu16 *)REG_ADDR_BG2X_L)
+#define REG_BG2X_H      (*(vu16 *)REG_ADDR_BG2X_H)
+#define REG_BG2Y        (*(vu32 *)REG_ADDR_BG2Y)
+#define REG_BG2Y_L      (*(vu16 *)REG_ADDR_BG2Y_L)
+#define REG_BG2Y_H      (*(vu16 *)REG_ADDR_BG2Y_H)
+#define REG_BG3PA       (*(vu16 *)REG_ADDR_BG3PA)
+#define REG_BG3PB       (*(vu16 *)REG_ADDR_BG3PB)
+#define REG_BG3PC       (*(vu16 *)REG_ADDR_BG3PC)
+#define REG_BG3PD       (*(vu16 *)REG_ADDR_BG3PD)
+#define REG_BG3X        (*(vu32 *)REG_ADDR_BG3X)
+#define REG_BG3X_L      (*(vu16 *)REG_ADDR_BG3X_L)
+#define REG_BG3X_H      (*(vu16 *)REG_ADDR_BG3X_H)
+#define REG_BG3Y        (*(vu32 *)REG_ADDR_BG3Y)
+#define REG_BG3Y_L      (*(vu16 *)REG_ADDR_BG3Y_L)
+#define REG_BG3Y_H      (*(vu16 *)REG_ADDR_BG3Y_H)
+#define REG_WIN0H       (*(vu16 *)REG_ADDR_WIN0H)
+#define REG_WIN1H       (*(vu16 *)REG_ADDR_WIN1H)
+#define REG_WIN0V       (*(vu16 *)REG_ADDR_WIN0V)
+#define REG_WIN1V       (*(vu16 *)REG_ADDR_WIN1V)
+#define REG_WININ       (*(vu16 *)REG_ADDR_WININ)
+#define REG_WINOUT      (*(vu16 *)REG_ADDR_WINOUT)
+#define REG_MOSAIC      (*(vu16 *)REG_ADDR_MOSAIC)
+#define REG_BLDCNT      (*(vu16 *)REG_ADDR_BLDCNT)
+#define REG_BLDALPHA    (*(vu16 *)REG_ADDR_BLDALPHA)
+#define REG_BLDY        (*(vu8  *)REG_ADDR_BLDY)
+
+#define REG_SOUND1CNT_L (*(vu16 *)REG_ADDR_SOUND1CNT_L)
+#define REG_NR10        (*(vu8  *)REG_ADDR_NR10)
+#define REG_SOUND1CNT_H (*(vu16 *)REG_ADDR_SOUND1CNT_H)
+#define REG_NR11        (*(vu8  *)REG_ADDR_NR11)
+#define REG_NR12        (*(vu8  *)REG_ADDR_NR12)
+#define REG_SOUND1CNT_X (*(vu16 *)REG_ADDR_SOUND1CNT_X)
+#define REG_NR13        (*(vu8  *)REG_ADDR_NR13)
+#define REG_NR14        (*(vu8  *)REG_ADDR_NR14)
+#define REG_SOUND2CNT_L (*(vu16 *)REG_ADDR_SOUND2CNT_L)
+#define REG_NR21        (*(vu8  *)REG_ADDR_NR21)
+#define REG_NR22        (*(vu8  *)REG_ADDR_NR22)
+#define REG_SOUND2CNT_H (*(vu16 *)REG_ADDR_SOUND2CNT_H)
+#define REG_NR23        (*(vu8  *)REG_ADDR_NR23)
+#define REG_NR24        (*(vu8  *)REG_ADDR_NR24)
+#define REG_SOUND3CNT_L (*(vu16 *)REG_ADDR_SOUND3CNT_L)
+#define REG_NR30        (*(vu8  *)REG_ADDR_NR30)
+#define REG_SOUND3CNT_H (*(vu16 *)REG_ADDR_SOUND3CNT_H)
+#define REG_NR31        (*(vu8  *)REG_ADDR_NR31)
+#define REG_NR32        (*(vu8  *)REG_ADDR_NR32)
+#define REG_SOUND3CNT_X (*(vu16 *)REG_ADDR_SOUND3CNT_X)
+#define REG_NR33        (*(vu8  *)REG_ADDR_NR33)
+#define REG_NR34        (*(vu8  *)REG_ADDR_NR34)
+#define REG_SOUND4CNT_L (*(vu16 *)REG_ADDR_SOUND4CNT_L)
+#define REG_NR41        (*(vu8  *)REG_ADDR_NR41)
+#define REG_NR42        (*(vu8  *)REG_ADDR_NR42)
+#define REG_SOUND4CNT_H (*(vu16 *)REG_ADDR_SOUND4CNT_H)
+#define REG_NR43        (*(vu8  *)REG_ADDR_NR43)
+#define REG_NR44        (*(vu8  *)REG_ADDR_NR44)
+#define REG_SOUNDCNT_L  (*(vu16 *)REG_ADDR_SOUNDCNT_L)
+#define REG_NR50        (*(vu8  *)REG_ADDR_NR50)
+#define REG_NR51        (*(vu8  *)REG_ADDR_NR51)
+#define REG_SOUNDCNT_H  (*(vu16 *)REG_ADDR_SOUNDCNT_H)
+#define REG_SOUNDCNT_X  (*(vu16 *)REG_ADDR_SOUNDCNT_X)
+#define REG_NR52        (*(vu8  *)REG_ADDR_NR52)
+#define REG_SOUNDBIAS   (*(vu16 *)REG_ADDR_SOUNDBIAS)
+#define REG_SOUNDBIAS_L (*(vu8  *)REG_ADDR_SOUNDBIAS_L)
+#define REG_SOUNDBIAS_H (*(vu8  *)REG_ADDR_SOUNDBIAS_H)
+#define REG_WAVE_RAM0   (*(vu32 *)REG_ADDR_WAVE_RAM0)
+#define REG_WAVE_RAM1   (*(vu32 *)REG_ADDR_WAVE_RAM1)
+#define REG_WAVE_RAM2   (*(vu32 *)REG_ADDR_WAVE_RAM2)
+#define REG_WAVE_RAM3   (*(vu32 *)REG_ADDR_WAVE_RAM3)
+#define REG_FIFO_A      (*(vu32 *)REG_ADDR_FIFO_A)
+#define REG_FIFO_B      (*(vu32 *)REG_ADDR_FIFO_B)
+
+#define REG_DMA0SAD     (*(vu32 *)REG_ADDR_DMA0SAD)
+#define REG_DMA0DAD     (*(vu32 *)REG_ADDR_DMA0DAD)
+#define REG_DMA0CNT     (*(vu32 *)REG_ADDR_DMA0CNT)
+#define REG_DMA0CNT_L   (*(vu16 *)REG_ADDR_DMA0CNT_L)
+#define REG_DMA0CNT_H   (*(vu16 *)REG_ADDR_DMA0CNT_H)
+
+#define REG_DMA1SAD     (*(vu32 *)REG_ADDR_DMA1SAD)
+#define REG_DMA1DAD     (*(vu32 *)REG_ADDR_DMA1DAD)
+#define REG_DMA1CNT     (*(vu32 *)REG_ADDR_DMA1CNT)
+#define REG_DMA1CNT_L   (*(vu16 *)REG_ADDR_DMA1CNT_L)
+#define REG_DMA1CNT_H   (*(vu16 *)REG_ADDR_DMA1CNT_H)
+
+#define REG_DMA2SAD     (*(vu32 *)REG_ADDR_DMA2SAD)
+#define REG_DMA2DAD     (*(vu32 *)REG_ADDR_DMA2DAD)
+#define REG_DMA2CNT     (*(vu32 *)REG_ADDR_DMA2CNT)
+#define REG_DMA2CNT_L   (*(vu16 *)REG_ADDR_DMA2CNT_L)
+#define REG_DMA2CNT_H   (*(vu16 *)REG_ADDR_DMA2CNT_H)
+
+#define REG_DMA3SAD     (*(vu32 *)REG_ADDR_DMA3SAD)
+#define REG_DMA3DAD     (*(vu32 *)REG_ADDR_DMA3DAD)
+#define REG_DMA3CNT     (*(vu32 *)REG_ADDR_DMA3CNT)
+#define REG_DMA3CNT_L   (*(vu16 *)REG_ADDR_DMA3CNT_L)
+#define REG_DMA3CNT_H   (*(vu16 *)REG_ADDR_DMA3CNT_H)
+
+#define REG_TMCNT(n)    (*(vu16 *)(REG_ADDR_TMCNT + ((n) * 4)))
+#define REG_TM0CNT      (*(vu32 *)REG_ADDR_TM0CNT)
+#define REG_TM0CNT_L    (*(vu16 *)REG_ADDR_TM0CNT_L)
+#define REG_TM0CNT_H    (*(vu16 *)REG_ADDR_TM0CNT_H)
+#define REG_TM1CNT      (*(vu32 *)REG_ADDR_TM1CNT)
+#define REG_TM1CNT_L    (*(vu16 *)REG_ADDR_TM1CNT_L)
+#define REG_TM1CNT_H    (*(vu16 *)REG_ADDR_TM1CNT_H)
+#define REG_TM2CNT      (*(vu32 *)REG_ADDR_TM2CNT)
+#define REG_TM2CNT_L    (*(vu16 *)REG_ADDR_TM2CNT_L)
+#define REG_TM2CNT_H    (*(vu16 *)REG_ADDR_TM2CNT_H)
+#define REG_TM3CNT      (*(vu32 *)REG_ADDR_TM3CNT)
+#define REG_TM3CNT_L    (*(vu16 *)REG_ADDR_TM3CNT_L)
+#define REG_TM3CNT_H    (*(vu16 *)REG_ADDR_TM3CNT_H)
+
+#define REG_SIOCNT      (*(vu16 *)REG_ADDR_SIOCNT)
+#define REG_SIODATA8    (*(vu16 *)REG_ADDR_SIODATA8)
+#define REG_SIODATA32   (*(vu32 *)REG_ADDR_SIODATA32)
+#define REG_SIOMLT_SEND (*(vu16 *)REG_ADDR_SIOMLT_SEND)
+#define REG_SIOMLT_RECV (*(vu64 *)REG_ADDR_SIOMLT_RECV)
+#define REG_SIOMULTI0   (*(vu16 *)REG_ADDR_SIOMULTI0)
+#define REG_SIOMULTI1   (*(vu16 *)REG_ADDR_SIOMULTI1)
+#define REG_SIOMULTI2   (*(vu16 *)REG_ADDR_SIOMULTI2)
+#define REG_SIOMULTI3   (*(vu16 *)REG_ADDR_SIOMULTI3)
+
+#define REG_KEYINPUT    (*(vu16 *)REG_ADDR_KEYINPUT)
+#define REG_KEYCNT      (*(vu16 *)REG_ADDR_KEYCNT)
+
+#define REG_RCNT        (*(vu16 *)REG_ADDR_RCNT)
+
+#define REG_IME         (*(vu16 *)REG_ADDR_IME)
+#define REG_IE          (*(vu16 *)REG_ADDR_IE)
+#define REG_IF          (*(vu16 *)REG_ADDR_IF)
+
+#define REG_WAITCNT     (*(vu16 *)REG_ADDR_WAITCNT)
+
+// I/O register fields
+
+// DISPCNT
+#define DISPCNT_MODE_0       0x0000 // BG0: text, BG1: text, BG2: text,   BG3: text
+#define DISPCNT_MODE_1       0x0001 // BG0: text, BG1: text, BG2: affine, BG3: off
+#define DISPCNT_MODE_2       0x0002 // BG0: off,  BG1: off,  BG2: affine, BG3: affine
+#define DISPCNT_MODE_3       0x0003 // Bitmap mode, 240x160, BGR555 color
+#define DISPCNT_MODE_4       0x0004 // Bitmap mode, 240x160, 256 color palette
+#define DISPCNT_MODE_5       0x0005 // Bitmap mode, 160x128, BGR555 color
+#define DISPCNT_OBJ_1D_MAP   0x0040
+#define DISPCNT_FORCED_BLANK 0x0080
+#define DISPCNT_BG0_ON       0x0100
+#define DISPCNT_BG1_ON       0x0200
+#define DISPCNT_BG2_ON       0x0400
+#define DISPCNT_BG3_ON       0x0800
+#define DISPCNT_BG_ALL_ON    0x0F00
+#define DISPCNT_OBJ_ON       0x1000
+#define DISPCNT_WIN0_ON      0x2000
+#define DISPCNT_WIN1_ON      0x4000
+#define DISPCNT_OBJWIN_ON    0x8000
+
+// DISPSTAT
+#define DISPSTAT_VBLANK      0x0001 // in V-Blank
+#define DISPSTAT_HBLANK      0x0002 // in H-Blank
+#define DISPSTAT_VCOUNT      0x0004 // V-Count match
+#define DISPSTAT_VBLANK_INTR 0x0008 // V-Blank interrupt enabled
+#define DISPSTAT_HBLANK_INTR 0x0010 // H-Blank interrupt enabled
+#define DISPSTAT_VCOUNT_INTR 0x0020 // V-Count interrupt enabled
+
+// BGCNT
+#define BGCNT_PRIORITY(n)          (n) // Values 0 - 3. Lower priority BGs will be drawn on top of higher priority BGs.
+#define BGCNT_CHARBASE(n)   ((n) << 2) // Values 0 - 3. Base block for tile pixel data.
+#define BGCNT_MOSAIC            0x0040
+#define BGCNT_16COLOR           0x0000 // 4 bits per pixel
+#define BGCNT_256COLOR          0x0080 // 8 bits per pixel
+#define BGCNT_SCREENBASE(n) ((n) << 8) // Values 0 - 31. Base block for tile map.
+#define BGCNT_WRAP              0x2000 // Only affects affine BGs. Text BGs wrap by default.
+#define BGCNT_TXT256x256        0x0000 // Internal screen size size of text mode BG in pixels.
+#define BGCNT_TXT512x256        0x4000
+#define BGCNT_TXT256x512        0x8000
+#define BGCNT_TXT512x512        0xC000
+#define BGCNT_AFF128x128        0x0000 // Internal screen size size of affine mode BG in pixels.
+#define BGCNT_AFF256x256        0x4000
+#define BGCNT_AFF512x512        0x8000
+#define BGCNT_AFF1024x1024      0xC000
+
+// BLDCNT
+// Bits 0-5 select layers for the 1st target
+#define BLDCNT_TGT1_BG0      (1 << 0)
+#define BLDCNT_TGT1_BG1      (1 << 1)
+#define BLDCNT_TGT1_BG2      (1 << 2)
+#define BLDCNT_TGT1_BG3      (1 << 3)
+#define BLDCNT_TGT1_OBJ      (1 << 4)
+#define BLDCNT_TGT1_BD       (1 << 5)
+// Bits 6-7 select the special effect
+#define BLDCNT_EFFECT_NONE      (0 << 6)   // no special effect
+#define BLDCNT_EFFECT_BLEND     (1 << 6)   // 1st+2nd targets mixed (controlled by BLDALPHA)
+#define BLDCNT_EFFECT_LIGHTEN   (2 << 6)   // 1st target becomes whiter (controlled by BLDY)
+#define BLDCNT_EFFECT_DARKEN    (3 << 6)   // 1st target becomes blacker (controlled by BLDY)
+// Bits 8-13 select layers for the 2nd target
+#define BLDCNT_TGT2_BG0      (1 << 8)
+#define BLDCNT_TGT2_BG1      (1 << 9)
+#define BLDCNT_TGT2_BG2      (1 << 10)
+#define BLDCNT_TGT2_BG3      (1 << 11)
+#define BLDCNT_TGT2_OBJ      (1 << 12)
+#define BLDCNT_TGT2_BD       (1 << 13)
+
+// BLDALPHA
+#define BLDALPHA_BLEND(target1, target2) (((target2) << 8) | (target1))
+
+// SOUNDCNT_H
+#define SOUND_CGB_MIX_QUARTER 0x0000
+#define SOUND_CGB_MIX_HALF    0x0001
+#define SOUND_CGB_MIX_FULL    0x0002
+#define SOUND_A_MIX_HALF      0x0000
+#define SOUND_A_MIX_FULL      0x0004
+#define SOUND_B_MIX_HALF      0x0000
+#define SOUND_B_MIX_FULL      0x0008
+#define SOUND_ALL_MIX_FULL    0x000E
+#define SOUND_A_RIGHT_OUTPUT  0x0100
+#define SOUND_A_LEFT_OUTPUT   0x0200
+#define SOUND_A_TIMER_0       0x0000
+#define SOUND_A_TIMER_1       0x0400
+#define SOUND_A_FIFO_RESET    0x0800
+#define SOUND_B_RIGHT_OUTPUT  0x1000
+#define SOUND_B_LEFT_OUTPUT   0x2000
+#define SOUND_B_TIMER_0       0x0000
+#define SOUND_B_TIMER_1       0x4000
+#define SOUND_B_FIFO_RESET    0x8000
+
+// SOUNDCNT_X
+#define SOUND_1_ON          0x0001
+#define SOUND_2_ON          0x0002
+#define SOUND_3_ON          0x0004
+#define SOUND_4_ON          0x0008
+#define SOUND_MASTER_ENABLE 0x0080
+
+// DMA
+#define DMA_DEST_INC      0x0000
+#define DMA_DEST_DEC      0x0020
+#define DMA_DEST_FIXED    0x0040
+#define DMA_DEST_RELOAD   0x0060
+#define DMA_SRC_INC       0x0000
+#define DMA_SRC_DEC       0x0080
+#define DMA_SRC_FIXED     0x0100
+#define DMA_REPEAT        0x0200
+#define DMA_16BIT         0x0000
+#define DMA_32BIT         0x0400
+#define DMA_DREQ_ON       0x0800
+#define DMA_START_NOW     0x0000
+#define DMA_START_VBLANK  0x1000
+#define DMA_START_HBLANK  0x2000
+#define DMA_START_SPECIAL 0x3000
+#define DMA_START_MASK    0x3000
+#define DMA_INTR_ENABLE   0x4000
+#define DMA_ENABLE        0x8000
+
+// timer
+#define TIMER_1CLK        0x00
+#define TIMER_64CLK       0x01
+#define TIMER_256CLK      0x02
+#define TIMER_1024CLK     0x03
+#define TIMER_INTR_ENABLE 0x40
+#define TIMER_ENABLE      0x80
+
+// serial
+#define SIO_ID             0x0030 // Communication ID
+
+#define SIO_8BIT_MODE      0x0000 // Normal 8-bit communication mode
+#define SIO_32BIT_MODE     0x1000 // Normal 32-bit communication mode
+#define SIO_MULTI_MODE     0x2000 // Multi-player communication mode
+#define SIO_UART_MODE      0x3000 // UART communication mode
+
+#define SIO_9600_BPS       0x0000 // baud rate   9600 bps
+#define SIO_38400_BPS      0x0001 //            38400 bps
+#define SIO_57600_BPS      0x0002 //            57600 bps
+#define SIO_115200_BPS     0x0003 //           115200 bps
+
+#define SIO_MULTI_SI       0x0004 // Multi-player communication SI terminal
+#define SIO_MULTI_SD       0x0008 //                            SD terminal
+#define SIO_MULTI_BUSY     0x0080
+
+#define SIO_ERROR          0x0040 // Detect error
+#define SIO_START          0x0080 // Start transfer
+#define SIO_ENABLE         0x0080 // Enable SIO
+
+#define SIO_INTR_ENABLE    0x4000
+
+#define SIO_MULTI_SI_SHIFT 2
+#define SIO_MULTI_SI_MASK  0x1
+#define SIO_MULTI_DI_SHIFT 3
+#define SIO_MULTI_DI_MASK  0x1
+
+// keys
+#define A_BUTTON        0x0001
+#define B_BUTTON        0x0002
+#define SELECT_BUTTON   0x0004
+#define START_BUTTON    0x0008
+#define DPAD_RIGHT      0x0010
+#define DPAD_LEFT       0x0020
+#define DPAD_UP         0x0040
+#define DPAD_DOWN       0x0080
+#define R_BUTTON        0x0100
+#define L_BUTTON        0x0200
+#define KEYS_MASK       0x03FF
+#define KEY_INTR_ENABLE 0x0400
+#define KEY_OR_INTR     0x0000
+#define KEY_AND_INTR    0x8000
+#define DPAD_ANY        0x00F0
+#define JOY_EXCL_DPAD   0x030F
+
+// interrupt flags
+#define INTR_FLAG_VBLANK  (1 <<  0)
+#define INTR_FLAG_HBLANK  (1 <<  1)
+#define INTR_FLAG_VCOUNT  (1 <<  2)
+#define INTR_FLAG_TIMER0  (1 <<  3)
+#define INTR_FLAG_TIMER1  (1 <<  4)
+#define INTR_FLAG_TIMER2  (1 <<  5)
+#define INTR_FLAG_TIMER3  (1 <<  6)
+#define INTR_FLAG_SERIAL  (1 <<  7)
+#define INTR_FLAG_DMA0    (1 <<  8)
+#define INTR_FLAG_DMA1    (1 <<  9)
+#define INTR_FLAG_DMA2    (1 << 10)
+#define INTR_FLAG_DMA3    (1 << 11)
+#define INTR_FLAG_KEYPAD  (1 << 12)
+#define INTR_FLAG_GAMEPAK (1 << 13)
+
+// WAITCNT
+#define WAITCNT_SRAM_4          (0 << 0)
+#define WAITCNT_SRAM_3          (1 << 0)
+#define WAITCNT_SRAM_2          (2 << 0)
+#define WAITCNT_SRAM_8          (3 << 0)
+#define WAITCNT_SRAM_MASK       (3 << 0)
+
+#define WAITCNT_WS0_N_4         (0 << 2)
+#define WAITCNT_WS0_N_3         (1 << 2)
+#define WAITCNT_WS0_N_2         (2 << 2)
+#define WAITCNT_WS0_N_8         (3 << 2)
+#define WAITCNT_WS0_N_MASK      (3 << 2)
+
+#define WAITCNT_WS0_S_2         (0 << 4)
+#define WAITCNT_WS0_S_1         (1 << 4)
+
+#define WAITCNT_WS1_N_4         (0 << 5)
+#define WAITCNT_WS1_N_3         (1 << 5)
+#define WAITCNT_WS1_N_2         (2 << 5)
+#define WAITCNT_WS1_N_8         (3 << 5)
+#define WAITCNT_WS1_N_MASK      (3 << 5)
+
+#define WAITCNT_WS1_S_4         (0 << 7)
+#define WAITCNT_WS1_S_1         (1 << 7)
+
+#define WAITCNT_WS2_N_4         (0 << 8)
+#define WAITCNT_WS2_N_3         (1 << 8)
+#define WAITCNT_WS2_N_2         (2 << 8)
+#define WAITCNT_WS2_N_8         (3 << 8)
+#define WAITCNT_WS2_N_MASK      (3 << 8)
+
+#define WAITCNT_WS2_S_8         (0 << 10)
+#define WAITCNT_WS2_S_1         (1 << 10)
+
+#define WAITCNT_PHI_OUT_NONE    (0 << 11)
+#define WAITCNT_PHI_OUT_4MHZ    (1 << 11)
+#define WAITCNT_PHI_OUT_8MHZ    (2 << 11)
+#define WAITCNT_PHI_OUT_16MHZ   (3 << 11)
+#define WAITCNT_PHI_OUT_MASK    (3 << 11)
+
+#define WAITCNT_PREFETCH_ENABLE (1 << 14)
+
+#define WAITCNT_AGB (0 << 15)
+#define WAITCNT_CGB (1 << 15)
+
+#endif // GUARD_GBA_IO_REG_H
diff --git a/include/gba/isagbprint.h b/include/gba/isagbprint.h
new file mode 100644
index 0000000..c5eb456
--- /dev/null
+++ b/include/gba/isagbprint.h
@@ -0,0 +1,50 @@
+#ifndef GUARD_GBA_ISAGBPRINT_H
+#define GUARD_GBA_ISAGBPRINT_H
+
+#ifdef NDEBUG
+#define AGBPrintInit()
+#define AGBPutc(cChr)
+#define AGBPrint(pBuf)
+#define	AGBPrintf(pBuf, ...)
+#define AGBPrintFlush1Block()
+#define AGBPrintFlush()
+#define AGBAssert(pFile, nLine, pExpression, nStopProgram)
+#else
+void AGBPrintInit(void);
+void AGBPutc(const char cChr);
+void AGBPrint(const char *pBuf);
+void AGBPrintf(const char *pBuf, ...);
+void AGBPrintFlush1Block(void);
+void AGBPrintFlush(void);
+void AGBAssert(const char *pFile, int nLine, const char *pExpression, int nStopProgram);
+#endif
+
+#undef AGB_ASSERT
+#ifdef NDEBUG
+#define	AGB_ASSERT(exp)
+#else
+#define	AGB_ASSERT(exp) (exp) ? ((void*)0) : AGBAssert(__FILE__, __LINE__, #exp, 1);
+#endif
+
+#undef AGB_WARNING
+#ifdef NDEBUG
+#define	AGB_WARNING(exp)
+#else
+#define	AGB_WARNING(exp) (exp) ? ((void*)0) : AGBAssert(__FILE__, __LINE__, #exp, 0);
+#endif
+
+// for matching purposes
+
+#ifdef NDEBUG
+#define	AGB_ASSERT_EX(exp, file, line)
+#else
+#define	AGB_ASSERT_EX(exp, file, line) (exp) ? ((void*)0) : AGBAssert(file, line, #exp, 1);
+#endif
+
+#ifdef NDEBUG
+#define	AGB_WARNING_EX(exp, file, line)
+#else
+#define	AGB_WARNING_EX(exp, file, line) (exp) ? ((void*)0) : AGBAssert(file, line, #exp, 0);
+#endif
+
+#endif // GUARD_GBA_ISAGBPRINT_H
diff --git a/include/gba/m4a_internal.h b/include/gba/m4a_internal.h
new file mode 100644
index 0000000..3c3a3e8
--- /dev/null
+++ b/include/gba/m4a_internal.h
@@ -0,0 +1,463 @@
+#ifndef GUARD_M4A_INTERNAL_H
+#define GUARD_M4A_INTERNAL_H
+
+#include "gba/gba.h"
+
+// ASCII encoding of 'Smsh' in reverse
+// This is presumably short for SMASH, the developer of MKS4AGB.
+#define ID_NUMBER 0x68736D53
+
+#define C_V 0x40 // center value for PAN, BEND, and TUNE
+
+#define SOUND_MODE_REVERB_VAL   0x0000007F
+#define SOUND_MODE_REVERB_SET   0x00000080
+#define SOUND_MODE_MAXCHN       0x00000F00
+#define SOUND_MODE_MAXCHN_SHIFT 8
+#define SOUND_MODE_MASVOL       0x0000F000
+#define SOUND_MODE_MASVOL_SHIFT 12
+#define SOUND_MODE_FREQ_05734   0x00010000
+#define SOUND_MODE_FREQ_07884   0x00020000
+#define SOUND_MODE_FREQ_10512   0x00030000
+#define SOUND_MODE_FREQ_13379   0x00040000
+#define SOUND_MODE_FREQ_15768   0x00050000
+#define SOUND_MODE_FREQ_18157   0x00060000
+#define SOUND_MODE_FREQ_21024   0x00070000
+#define SOUND_MODE_FREQ_26758   0x00080000
+#define SOUND_MODE_FREQ_31536   0x00090000
+#define SOUND_MODE_FREQ_36314   0x000A0000
+#define SOUND_MODE_FREQ_40137   0x000B0000
+#define SOUND_MODE_FREQ_42048   0x000C0000
+#define SOUND_MODE_FREQ         0x000F0000
+#define SOUND_MODE_FREQ_SHIFT   16
+#define SOUND_MODE_DA_BIT_9     0x00800000
+#define SOUND_MODE_DA_BIT_8     0x00900000
+#define SOUND_MODE_DA_BIT_7     0x00A00000
+#define SOUND_MODE_DA_BIT_6     0x00B00000
+#define SOUND_MODE_DA_BIT       0x00B00000
+#define SOUND_MODE_DA_BIT_SHIFT 20
+
+struct WaveData
+{
+    u16 type;
+    u16 status;
+    u32 freq;
+    u32 loopStart;
+    u32 size; // number of samples
+    s8 data[1]; // samples
+};
+
+#define TONEDATA_TYPE_CGB    0x07
+#define TONEDATA_TYPE_FIX    0x08
+#define TONEDATA_TYPE_SPL    0x40 // key split
+#define TONEDATA_TYPE_RHY    0x80 // rhythm
+
+#define TONEDATA_P_S_PAN    0xc0
+#define TONEDATA_P_S_PAM    TONEDATA_P_S_PAN
+
+struct ToneData
+{
+    u8 type;
+    u8 key;
+    u8 length; // sound length (compatible sound)
+    u8 pan_sweep; // pan or sweep (compatible sound ch. 1)
+    struct WaveData *wav;
+    u8 attack;
+    u8 decay;
+    u8 sustain;
+    u8 release;
+};
+
+struct CgbChannel
+{
+    u8 sf; // 0x0
+    u8 ty; // 0x1
+    u8 rightVolume; // 0x2
+    u8 leftVolume; // 0x3
+    u8 at; // 0x4
+    u8 de; // 0x5
+    u8 su; // 0x6
+    u8 re; // 0x7
+    u8 ky; // 0x8
+    u8 ev; // 0x9
+    u8 eg; // 0xA
+    u8 ec; // 0xB
+    u8 echoVolume; // 0xC
+    u8 echoLength; // 0xD
+    u8 d1; // 0xE
+    u8 d2; // 0xF
+    u8 gt; // 0x10
+    u8 mk; // 0x11
+    u8 ve; // 0x12
+    u8 pr; // 0x13
+    u8 rp; // 0x14
+    u8 d3[3]; // 0x15, 0x16, 0x17
+    u8 d5; // 0x18
+    u8 sg; // 0x19
+    u8 n4; // 0x1A
+    u8 pan; // 0x1B
+    u8 panMask; // 0x1C
+    u8 mo; // 0x1D
+    u8 le; // 0x1E
+    u8 sw; // 0x1F
+    u32 fr; // 0x20
+    u32 *wp;
+    u32 cp;
+    u32 tp;
+    u32 pp;
+    u32 np;
+    u8 d4[8];
+};
+
+struct MusicPlayerTrack;
+
+struct SoundChannel
+{
+    u8 status;
+    u8 type;
+    u8 rightVolume;
+    u8 leftVolume;
+    u8 attack;
+    u8 decay;
+    u8 sustain;
+    u8 release;
+    u8 ky;
+    u8 ev;
+    u8 er;
+    u8 el;
+    u8 echoVolume;
+    u8 echoLength;
+    u8 d1;
+    u8 d2;
+    u8 gt;
+    u8 mk;
+    u8 ve;
+    u8 pr;
+    u8 rp;
+    u8 d3[3];
+    u32 ct;
+    u32 fw;
+    u32 freq;
+    struct WaveData *wav;
+    u32 cp;
+    struct MusicPlayerTrack *track;
+    u32 pp;
+    u32 np;
+    u32 d4;
+    u16 xpi;
+    u16 xpc;
+};
+
+#define MAX_DIRECTSOUND_CHANNELS 12
+
+#define PCM_DMA_BUF_SIZE 1584 // size of Direct Sound buffer
+
+struct SoundInfo
+{
+    // This field is normally equal to ID_NUMBER but it is set to other
+    // values during sensitive operations for locking purposes.
+    // This field should be volatile but isn't. This could potentially cause
+    // race conditions.
+    u32 ident;
+
+    vu8 pcmDmaCounter;
+
+    // Direct Sound
+    u8 reverb;
+    u8 maxChans;
+    u8 masterVolume;
+    u8 freq;
+
+    u8 mode;
+    u8 c15;
+    u8 pcmDmaPeriod; // number of V-blanks per PCM DMA
+    u8 maxLines;
+    u8 gap[3];
+    s32 pcmSamplesPerVBlank;
+    s32 pcmFreq;
+    s32 divFreq;
+    struct CgbChannel *cgbChans;
+    u32 func;
+    u32 intp;
+    void (*CgbSound)(void);
+    void (*CgbOscOff)(u8);
+    u32 (*MidiKeyToCgbFreq)(u8, u8, u8);
+    u32 MPlayJumpTable;
+    u32 plynote;
+    u32 ExtVolPit;
+    u8 gap2[16];
+    struct SoundChannel chans[MAX_DIRECTSOUND_CHANNELS];
+    s8 pcmBuffer[PCM_DMA_BUF_SIZE * 2];
+};
+
+struct SongHeader
+{
+    u8 trackCount;
+    u8 blockCount;
+    u8 priority;
+    u8 reverb;
+    struct ToneData *tone;
+    u8 *part[1];
+};
+
+struct PokemonCrySong
+{
+    u8 trackCount;
+    u8 blockCount;
+    u8 priority;
+    u8 reverb;
+    struct ToneData *tone;
+    u8 *part[2];
+    u8 gap;
+    u8 part0; // 0x11
+    u8 tuneValue; // 0x12
+    u8 gotoCmd; // 0x13
+    u32 gotoTarget; // 0x14
+    u8 part1; // 0x18
+    u8 tuneValue2; // 0x19
+    u8 cont[2]; // 0x1A
+    u8 volCmd; // 0x1C
+    u8 volumeValue; // 0x1D
+    u8 unkCmd0D[2]; // 0x1E
+    u32 unkCmd0DParam; // 0x20
+    u8 xreleCmd[2]; // 0x24
+    u8 releaseValue; // 0x26
+    u8 panCmd;
+    u8 panValue; // 0x28
+    u8 tieCmd; // 0x29
+    u8 tieKeyValue; // 0x2A
+    u8 tieVelocityValue; // 0x2B
+    u8 unkCmd0C[2]; // 0x2C
+    u16 unkCmd0CParam; // 0x2E
+    u8 end[2]; // 0x30
+};
+
+#define MPT_FLG_VOLSET 0x01
+#define MPT_FLG_VOLCHG 0x03
+#define MPT_FLG_PITSET 0x04
+#define MPT_FLG_PITCHG 0x0C
+#define MPT_FLG_START  0x40
+#define MPT_FLG_EXIST  0x80
+
+struct MusicPlayerTrack
+{
+    u8 flags;
+    u8 wait;
+    u8 patternLevel;
+    u8 repN;
+    u8 gateTime;
+    u8 key;
+    u8 velocity;
+    u8 runningStatus;
+    u8 keyM;
+    u8 pitM;
+    s8 keyShift;
+    s8 keyShiftX;
+    s8 tune;
+    u8 pitX;
+    s8 bend;
+    u8 bendRange;
+    u8 volMR;
+    u8 volML;
+    u8 vol;
+    u8 volX;
+    s8 pan;
+    s8 panX;
+    s8 modM;
+    u8 mod;
+    u8 modT;
+    u8 lfoSpeed;
+    u8 lfoSpeedC;
+    u8 lfoDelay;
+    u8 lfoDelayC;
+    u8 priority;
+    u8 echoVolume;
+    u8 echoLength;
+    struct SoundChannel *chan;
+    struct ToneData tone;
+    u8 gap[10];
+    u16 unk_3A;
+    u32 unk_3C;
+    u8 *cmdPtr;
+    u8 *patternStack[3];
+};
+
+#define MUSICPLAYER_STATUS_TRACK 0x0000ffff
+#define MUSICPLAYER_STATUS_PAUSE 0x80000000
+
+#define MAX_MUSICPLAYER_TRACKS 16
+
+#define TEMPORARY_FADE  0x0001
+#define FADE_IN         0x0002
+#define FADE_VOL_MAX    64
+#define FADE_VOL_SHIFT  2
+
+struct MusicPlayerInfo
+{
+    struct SongHeader *songHeader;
+    u32 status;
+    u8 trackCount;
+    u8 priority;
+    u8 cmd;
+    u8 unk_B;
+    u32 clock;
+    u8 gap[8];
+    u8 *memAccArea;
+    u16 tempoD;
+    u16 tempoU;
+    u16 tempoI;
+    u16 tempoC;
+    u16 fadeOI;
+    u16 fadeOC;
+    u16 fadeOV;
+    struct MusicPlayerTrack *tracks;
+    struct ToneData *tone;
+    u32 ident;
+    u32 func;
+    u32 intp;
+};
+
+struct MusicPlayer
+{
+    struct MusicPlayerInfo *info;
+    struct MusicPlayerTrack *track;
+    u8 unk_8;
+    u16 unk_A;
+};
+
+struct Song
+{
+    struct SongHeader *header;
+    u16 ms;
+    u16 me;
+};
+
+extern const struct MusicPlayer gMPlayTable[];
+extern const struct Song gSongTable[];
+
+
+
+extern u8 gMPlayMemAccArea[];
+
+//u8 gPokemonCrySong[52];
+//u8 gPokemonCrySongs[52 * MAX_POKEMON_CRIES];
+
+#define MAX_POKEMON_CRIES 2
+
+extern struct PokemonCrySong gPokemonCrySong;
+extern struct PokemonCrySong gPokemonCrySongs[];
+
+extern struct MusicPlayerInfo gPokemonCryMusicPlayers[];
+extern struct MusicPlayerTrack gPokemonCryTracks[];
+
+extern char SoundMainRAM[];
+
+extern void *gMPlayJumpTable[];
+
+typedef void (*XcmdFunc)(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+extern const XcmdFunc gXcmdTable[];
+
+extern struct CgbChannel gCgbChans[];
+
+extern const u8 gScaleTable[];
+extern const u32 gFreqTable[];
+extern const u16 gPcmSamplesPerVBlankTable[];
+
+extern const u8 gCgbScaleTable[];
+extern const s16 gCgbFreqTable[];
+extern const u8 gNoiseTable[];
+
+extern const struct PokemonCrySong gPokemonCrySongTemplate;
+
+extern const struct ToneData voicegroup_pokemon_cry;
+
+extern char gNumMusicPlayers[];
+extern char gMaxLines[];
+
+#define NUM_MUSIC_PLAYERS ((u16)gNumMusicPlayers)
+#define MAX_LINES ((u32)gMaxLines)
+
+u32 umul3232H32(u32 multiplier, u32 multiplicand);
+void SoundMain(void);
+void SoundMainBTM(void);
+void TrackStop(struct MusicPlayerInfo *mplayInfo, struct MusicPlayerTrack *track);
+void MPlayMain(void);
+void RealClearChain(void *x);
+
+void MPlayContinue(struct MusicPlayerInfo *mplayInfo);
+void MPlayStart(struct MusicPlayerInfo *mplayInfo, struct SongHeader *songHeader);
+void m4aMPlayStop(struct MusicPlayerInfo *mplayInfo);
+void FadeOutBody(struct MusicPlayerInfo *mplayInfo);
+void TrkVolPitSet(struct MusicPlayerInfo *mplayInfo, struct MusicPlayerTrack *track);
+void MPlayFadeOut(struct MusicPlayerInfo *mplayInfo, u16 speed);
+void ClearChain(void *x);
+void Clear64byte(void *addr);
+void SoundInit(struct SoundInfo *soundInfo);
+void MPlayExtender(struct CgbChannel *cgbChans);
+void m4aSoundMode(u32 mode);
+void MPlayOpen(struct MusicPlayerInfo *mplayInfo, struct MusicPlayerTrack *track, u8 a3);
+void CgbSound(void);
+void CgbOscOff(u8);
+u32 MidiKeyToCgbFreq(u8, u8, u8);
+void DummyFunc(void);
+void MPlayJumpTableCopy(void **mplayJumpTable);
+void SampleFreqSet(u32 freq);
+void m4aSoundVSyncOn(void);
+void m4aSoundVSyncOff(void);
+
+void ClearModM(struct MusicPlayerTrack *track);
+void m4aMPlayModDepthSet(struct MusicPlayerInfo *mplayInfo, u16 trackBits, u8 modDepth);
+void m4aMPlayLFOSpeedSet(struct MusicPlayerInfo *mplayInfo, u16 trackBits, u8 lfoSpeed);
+
+struct MusicPlayerInfo *SetPokemonCryTone(struct ToneData *tone);
+void SetPokemonCryVolume(u8 val);
+void SetPokemonCryPanpot(s8 val);
+void SetPokemonCryPitch(s16 val);
+void SetPokemonCryLength(u16 val);
+void SetPokemonCryRelease(u8 val);
+void SetPokemonCryProgress(u32 val);
+int IsPokemonCryPlaying(struct MusicPlayerInfo *mplayInfo);
+void SetPokemonCryChorus(s8 val);
+void SetPokemonCryStereo(u32 val);
+void SetPokemonCryPriority(u8 val);
+
+// sound command handler functions
+void ply_fine(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_goto(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_patt(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_pend(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_rept(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_memacc(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_prio(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_tempo(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_keysh(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_voice(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_vol(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_pan(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_bend(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_bendr(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_lfos(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_lfodl(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_mod(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_modt(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_tune(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_port(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_xcmd(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_endtie(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_note(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+
+// extended sound command handler functions
+void ply_xxx(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_xwave(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_xtype(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_xatta(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_xdeca(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_xsust(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_xrele(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_xiecv(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_xiecl(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_xleng(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_xswee(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_xcmd_0C(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+void ply_xcmd_0D(struct MusicPlayerInfo *, struct MusicPlayerTrack *);
+
+#endif // GUARD_M4A_INTERNAL_H
diff --git a/include/gba/macro.h b/include/gba/macro.h
index 56cd884..ab42c9d 100644
--- a/include/gba/macro.h
+++ b/include/gba/macro.h
@@ -17,25 +17,25 @@
 #define CpuCopy16(src, dest, size) CPU_COPY(src, dest, size, 16)
 #define CpuCopy32(src, dest, size) CPU_COPY(src, dest, size, 32)
 
-#define CpuFastFill(value, dest, size)                          \
-{                                                               \
-    vu32 tmp = (vu32)(value);                                   \
-    CpuFastSet((void *)&tmp,                                    \
-               dest,                                            \
-               CPU_SET_SRC_FIXED | ((size)/(32/8) & 0x1FFFFF)); \
+#define CpuFastFill(value, dest, size)                               \
+{                                                                    \
+    vu32 tmp = (vu32)(value);                                        \
+    CpuFastSet((void *)&tmp,                                         \
+               dest,                                                 \
+               CPU_FAST_SET_SRC_FIXED | ((size)/(32/8) & 0x1FFFFF)); \
 }
 
 #define CpuFastFill16(value, dest, size) CpuFastFill(((value) << 16) | (value), (dest), (size))
 
 #define CpuFastCopy(src, dest, size) CpuFastSet(src, dest, ((size)/(32/8) & 0x1FFFFF))
 
-#define DmaSet(dmaNum, src, dest, control)   \
-{                                            \
-    vu32 *dmaRegs = (vu32 *) &REG_DMA##dmaNum##SAD; \
-    dmaRegs[0] = (vu32)(src);                \
-    dmaRegs[1] = (vu32)(dest);               \
-    dmaRegs[2] = (vu32)(control);            \
-    dmaRegs[2];                              \
+#define DmaSet(dmaNum, src, dest, control)        \
+{                                                 \
+    vu32 *dmaRegs = (vu32 *)REG_ADDR_DMA##dmaNum; \
+    dmaRegs[0] = (vu32)(src);                     \
+    dmaRegs[1] = (vu32)(dest);                    \
+    dmaRegs[2] = (vu32)(control);                 \
+    dmaRegs[2];                                   \
 }
 
 #define DMA_FILL(dmaNum, value, dest, size, bit)                                              \
diff --git a/include/gba/multiboot.h b/include/gba/multiboot.h
new file mode 100644
index 0000000..e88b43a
--- /dev/null
+++ b/include/gba/multiboot.h
@@ -0,0 +1,55 @@
+#ifndef GUARD_GBA_MULTIBOOT_H
+#define GUARD_GBA_MULTIBOOT_H
+
+#define MULTIBOOT_NCHILD        3       // Maximum number of slaves
+#define MULTIBOOT_HEADER_SIZE   0xc0    // Header size
+#define MULTIBOOT_SEND_SIZE_MIN 0x100   // Minimum transmission size
+#define MULTIBOOT_SEND_SIZE_MAX 0x40000 // Maximum transmission size
+
+struct MultiBootParam
+{
+    u32 system_work[5];
+    u8 handshake_data;
+    u8 padding;
+    u16 handshake_timeout;
+    u8 probe_count;
+    u8 client_data[MULTIBOOT_NCHILD];
+    u8 palette_data;
+    u8 response_bit;
+    u8 client_bit;
+    u8 reserved1;
+    u8 *boot_srcp;
+    u8 *boot_endp;
+    u8 *masterp;
+    u8 *reserved2[MULTIBOOT_NCHILD];
+    u32 system_work2[4];
+    u8 sendflag;
+    u8 probe_target_bit;
+    u8 check_wait;
+    u8 server_type;
+};
+
+#define MULTIBOOT_ERROR_04                0x04
+#define MULTIBOOT_ERROR_08                0x08
+#define MULTIBOOT_ERROR_0c                0x0c
+#define MULTIBOOT_ERROR_40                0x40
+#define MULTIBOOT_ERROR_44                0x44
+#define MULTIBOOT_ERROR_48                0x48
+#define MULTIBOOT_ERROR_4c                0x4c
+#define MULTIBOOT_ERROR_80                0x80
+#define MULTIBOOT_ERROR_84                0x84
+#define MULTIBOOT_ERROR_88                0x88
+#define MULTIBOOT_ERROR_8c                0x8c
+#define MULTIBOOT_ERROR_NO_PROBE_TARGET   0x50
+#define MULTIBOOT_ERROR_NO_DLREADY        0x60
+#define MULTIBOOT_ERROR_BOOT_FAILURE      0x70
+#define MULTIBOOT_ERROR_HANDSHAKE_FAILURE 0x71
+
+#define MULTIBOOT_CONNECTION_CHECK_WAIT 15
+
+#define MULTIBOOT_SERVER_TYPE_NORMAL 0
+#define MULTIBOOT_SERVER_TYPE_QUICK  1
+
+#define MULTIBOOT_HANDSHAKE_TIMEOUT 400
+
+#endif // GUARD_GBA_MULTIBOOT_H
diff --git a/include/gba/syscall.h b/include/gba/syscall.h
new file mode 100644
index 0000000..d3c4c57
--- /dev/null
+++ b/include/gba/syscall.h
@@ -0,0 +1,43 @@
+#ifndef GUARD_GBA_SYSCALL_H
+#define GUARD_GBA_SYSCALL_H
+
+#define RESET_EWRAM      0x01
+#define RESET_IWRAM      0x02
+#define RESET_PALETTE    0x04
+#define RESET_VRAM       0x08
+#define RESET_OAM        0x10
+#define RESET_SIO_REGS   0x20
+#define RESET_SOUND_REGS 0x40
+#define RESET_REGS       0x80
+#define RESET_ALL        0xFF
+
+void SoftReset(u32 resetFlags);
+void SoundBiasReset(void);
+void SoundBiasSet(void);
+void RegisterRamReset(u32 resetFlags);
+void VBlankIntrWait(void);
+u16 Sqrt(u32 num);
+u16 ArcTan2(s16 x, s16 y);
+
+#define CPU_SET_SRC_FIXED 0x01000000
+#define CPU_SET_16BIT     0x00000000
+#define CPU_SET_32BIT     0x04000000
+
+void CpuSet(const void *src, void *dest, u32 control);
+
+#define CPU_FAST_SET_SRC_FIXED 0x01000000
+
+void CpuFastSet(const void *src, void *dest, u32 control);
+void BgAffineSet(struct BgAffineSrcData *src, struct BgAffineDstData *dest, s32 count);
+void ObjAffineSet(struct ObjAffineSrcData *src, void *dest, s32 count, s32 offset);
+void LZ77UnCompWram(const void *src, void *dest);
+int Div(int, int);
+int DivArm(int, int);
+int DivRem(int, int);
+void HuffUnComp(void const * src, void * dst);
+void LZ77UnCompVram(const void *src, void *dest);
+void RLUnCompWram(const void *src, void *dest);
+void RLUnCompVram(const void *src, void *dest);
+int MultiBoot(struct MultiBootParam *mp);
+
+#endif // GUARD_GBA_SYSCALL_H
diff --git a/include/gba/types.h b/include/gba/types.h
new file mode 100644
index 0000000..e7f9513
--- /dev/null
+++ b/include/gba/types.h
@@ -0,0 +1,238 @@
+#ifndef GUARD_GBA_TYPES_H
+#define GUARD_GBA_TYPES_H
+
+#include <stdint.h>
+
+typedef uint8_t   u8;
+typedef uint16_t u16;
+typedef uint32_t u32;
+typedef uint64_t u64;
+typedef int8_t    s8;
+typedef int16_t  s16;
+typedef int32_t  s32;
+typedef int64_t  s64;
+
+typedef volatile u8   vu8;
+typedef volatile u16 vu16;
+typedef volatile u32 vu32;
+typedef volatile u64 vu64;
+typedef volatile s8   vs8;
+typedef volatile s16 vs16;
+typedef volatile s32 vs32;
+typedef volatile s64 vs64;
+
+typedef float  f32;
+typedef double f64;
+
+typedef u8  bool8;
+typedef u16 bool16;
+typedef u32 bool32;
+
+struct DispCnt
+{
+    u16 mode:3;
+    u16 cgbMode:1;  // reserved, do not use
+    u16 bmpFrameNum:1;
+    u16 hblankIntervalFree:1;
+    u16 obj1dMap:1;
+    u16 forcedBlank:1;
+    u16 bg0_on:1;
+    u16 bg1_on:1;
+    u16 bg2_on:1;
+    u16 bg3_on:1;
+    u16 obj_on:1;
+    u16 win0_on:1;
+    u16 win1_on:1;
+    u16 objWin_on:1;
+};
+
+struct DispStat
+{
+    u16 vblankFlag:1;
+    u16 hblankFlag:1;
+    u16 vcountFlag:1;
+    u16 vblankIrqEnable:1;
+    u16 hblankIrqEnable:1;
+    u16 vcountIrqEnable:1;
+    u16 dummy:2;
+    u8 vcountCompare;
+};
+
+struct BgCnt
+{
+    u16 priority:2;
+    u16 charBaseBlock:2;
+    u16 dummy:2;
+    u16 mosaic:1;
+    u16 colorMode:1;
+    u16 screenBaseBlock:5;
+    u16 areaOverflowMode:1;
+    u16 screenSize:2;
+};
+
+struct WinCnt
+{
+    u8 win0_enableBg0 : 1;
+    u8 win0_enableBg1 : 1;
+    u8 win0_enableBg2 : 1;
+    u8 win0_enableBg3 : 1;
+    u8 win0_enableObj : 1;
+    u8 win0_enableBlend : 1;
+    u8 : 2;
+
+    u8 win1_enableBg0 : 1;
+    u8 win1_enableBg1 : 1;
+    u8 win1_enableBg2 : 1;
+    u8 win1_enableBg3 : 1;
+    u8 win1_enableObj : 1;
+    u8 win1_enableBlend : 1;
+    u8 : 2;
+
+    u8 wout_enableBg0 : 1;
+    u8 wout_enableBg1 : 1;
+    u8 wout_enableBg2 : 1;
+    u8 wout_enableBg3 : 1;
+    u8 wout_enableObj : 1;
+    u8 wout_enableBlend : 1;
+    u8 : 2;
+
+    u8 wobj_enableBg0 : 1;
+    u8 wobj_enableBg1 : 1;
+    u8 wobj_enableBg2 : 1;
+    u8 wobj_enableBg3 : 1;
+    u8 wobj_enableObj : 1;
+    u8 wobj_enableBlend : 1;
+    u8 : 2;
+};
+
+struct BlendCnt
+{
+    u16 target1_bg0_on:1;
+    u16 target1_bg1_on:1;
+    u16 target1_bg2_on:1;
+    u16 target1_bg3_on:1;
+    u16 target1_obj_on:1;
+    u16 target1_bd_on:1;
+    u16 effect:2;
+    u16 target2_bg0_on:1;
+    u16 target2_bg1_on:1;
+    u16 target2_bg2_on:1;
+    u16 target2_bg3_on:1;
+    u16 target2_obj_on:1;
+    u16 target2_bd_on:1;
+};
+
+struct PlttData
+{
+    u16 r:5; // red
+    u16 g:5; // green
+    u16 b:5; // blue
+    u16 unused_15:1;
+} /*__attribute__((packed))*/;
+
+struct OamData
+{
+    /*0x00*/ u32 y:8;
+    /*0x01*/ u32 affineMode:2;  // 0x1, 0x2 = 0x3
+             u32 objMode:2;     // 0x4, 0x8 = 0xC
+             u32 mosaic:1;      // 0x10
+             u32 bpp:1;         // 0x20
+             u32 shape:2;       // 0x40, 0x80
+
+    /*0x02*/ u32 x:9;
+             u32 matrixNum:5; // bits 3/4 are h-flip/v-flip if not in affine mode
+             u32 size:2;
+
+    /*0x04*/ u16 tileNum:10;
+             u16 priority:2;
+             u16 paletteNum:4;
+    /*0x06*/ u16 affineParam;
+};
+
+#define ST_OAM_OBJ_NORMAL 0
+#define ST_OAM_OBJ_BLEND  1
+#define ST_OAM_OBJ_WINDOW 2
+
+#define ST_OAM_AFFINE_OFF    0
+#define ST_OAM_AFFINE_NORMAL 1
+#define ST_OAM_AFFINE_ERASE  2
+#define ST_OAM_AFFINE_DOUBLE 3
+
+#define ST_OAM_AFFINE_ON_MASK     1
+#define ST_OAM_AFFINE_DOUBLE_MASK 2
+
+#define ST_OAM_4BPP 0
+#define ST_OAM_8BPP 1
+
+#define ST_OAM_SQUARE      0
+#define ST_OAM_H_RECTANGLE 1
+#define ST_OAM_V_RECTANGLE 2
+
+struct BgAffineSrcData
+{
+    s32 texX;
+    s32 texY;
+    s16 scrX;
+    s16 scrY;
+    s16 sx;
+    s16 sy;
+    u16 alpha;
+};
+
+struct BgAffineDstData
+{
+    s16 pa;
+    s16 pb;
+    s16 pc;
+    s16 pd;
+    s32 dx;
+    s32 dy;
+};
+
+struct ObjAffineSrcData
+{
+    s16 xScale;
+    s16 yScale;
+    u16 rotation;
+};
+
+// Multi-player SIO Control Structure
+struct SioMultiCnt
+{
+    u16 baudRate:2;    // baud rate
+    u16 si:1;          // SI terminal
+    u16 sd:1;          // SD terminal
+    u16 id:2;          // ID
+    u16 error:1;       // error flag
+    u16 enable:1;      // SIO enable
+    u16 unused_11_8:4;
+    u16 mode:2;        // communication mode (should equal 2)
+    u16 intrEnable:1;  // IRQ enable
+    u16 unused_15:1;
+    u16 data;          // data
+};
+
+#define ST_SIO_MULTI_MODE 2 // Multi-player communication mode
+
+// baud rate
+#define ST_SIO_9600_BPS   0 //   9600 bps
+#define ST_SIO_38400_BPS  1 //  38400 bps
+#define ST_SIO_57600_BPS  2 //  57600 bps
+#define ST_SIO_115200_BPS 3 // 115200 bps
+
+struct WaitCnt
+{
+    u16 sramWait:2;
+    u16 rom0_1stAcc:2;
+    u16 rom0_2ndAcc:1;
+    u16 rom1_1stAcc:2;
+    u16 rom1_2ndAcc:1;
+    u16 rom2_1stAcc:2;
+    u16 rom2_2ndAcc:1;
+    u16 phiTerminalClock:2;
+    u16 dummy:1;
+    u16 prefetchBufEnable:1;
+    u16 gamePakType:1;
+};
+
+#endif // GUARD_GBA_TYPES_H
diff --git a/include/gbaio.h b/include/gbaio.h
deleted file mode 100644
index eead28d..0000000
--- a/include/gbaio.h
+++ /dev/null
@@ -1,466 +0,0 @@
-#pragma once
-
-#include "types.h"
-
-#define REG(type, addr) (*((type volatile *) (addr)))
-
-#define REG_DISPCNT     REG(u16, 0x04000000)
-#define REG_DISPSTAT    REG(u16, 0x04000004)
-#define REG_VCOUNT      REG(u16, 0x04000006)
-#define REG_BG0CNT      REG(u16, 0x04000008)
-#define REG_BG1CNT      REG(u16, 0x0400000A)
-#define REG_BG2CNT      REG(u16, 0x0400000C)
-#define REG_BG3CNT      REG(u16, 0x0400000E)
-#define REG_BG0HOFS     REG(u16, 0x04000010)
-#define REG_BG0VOFS     REG(u16, 0x04000012)
-#define REG_BG1HOFS     REG(u16, 0x04000014)
-#define REG_BG1VOFS     REG(u16, 0x04000016)
-#define REG_BG2HOFS     REG(u16, 0x04000018)
-#define REG_BG2VOFS     REG(u16, 0x0400001A)
-#define REG_BG3HOFS     REG(u16, 0x0400001C)
-#define REG_BG3VOFS     REG(u16, 0x0400001E)
-#define REG_BG2PA       REG(i16, 0x04000020)
-#define REG_BG2PB       REG(i16, 0x04000022)
-#define REG_BG2PC       REG(i16, 0x04000024)
-#define REG_BG2PD       REG(i16, 0x04000026)
-#define REG_BG2X        REG(i32, 0x04000028)
-#define REG_BG2Y        REG(i32, 0x0400002C)
-#define REG_BG3PA       REG(i16, 0x04000030)
-#define REG_BG3PB       REG(i16, 0x04000032)
-#define REG_BG3PC       REG(i16, 0x04000034)
-#define REG_BG3PD       REG(i16, 0x04000036)
-#define REG_BG3X        REG(i32, 0x04000038)
-#define REG_BG3Y        REG(i32, 0x0400003C)
-#define REG_WIN0H       REG(u16, 0x04000040)
-#define REG_WIN1H       REG(u16, 0x04000042)
-#define REG_WIN0V       REG(u16, 0x04000044)
-#define REG_WIN1V       REG(u16, 0x04000046)
-#define REG_WININ       REG(u16, 0x04000048)
-#define REG_WINOUT      REG(u16, 0x0400004A)
-#define REG_MOSAIC      REG(u16, 0x0400004C)
-#define REG_BLDCNT      REG(u16, 0x04000050)
-#define REG_BLDALPHA    REG(u16, 0x04000052)
-#define REG_BLDCA       REG(u8,  0x04000052 + 0)
-#define REG_BLDCB       REG(u8,  0x04000052 + 1)
-#define REG_BLDY        REG(u8,  0x04000054)
-
-#define REG_SOUND1CNT_L REG(u16, 0x04000060)
-#define REG_NR10        REG(u8,  0x04000060)
-#define REG_SOUND1CNT_H REG(u16, 0x04000062)
-#define REG_NR11        REG(u8,  0x04000062)
-#define REG_NR12        REG(u8,  0x04000063)
-#define REG_SOUND1CNT_X REG(u16, 0x04000064)
-#define REG_NR13        REG(u8,  0x04000064)
-#define REG_NR14        REG(u8,  0x04000065)
-#define REG_SOUND2CNT_L REG(u16, 0x04000068)
-#define REG_NR21        REG(u8,  0x04000068)
-#define REG_NR22        REG(u8,  0x04000069)
-#define REG_SOUND2CNT_H REG(u16, 0x0400006C)
-#define REG_NR23        REG(u8,  0x0400006C)
-#define REG_NR24        REG(u8,  0x0400006D)
-#define REG_SOUND3CNT_L REG(u16, 0x04000070)
-#define REG_NR30        REG(u8,  0x04000070)
-#define REG_SOUND3CNT_H REG(u16, 0x04000072)
-#define REG_NR31        REG(u8,  0x04000072)
-#define REG_NR32        REG(u8,  0x04000073)
-#define REG_SOUND3CNT_X REG(u16, 0x04000074)
-#define REG_NR33        REG(u8,  0x04000074)
-#define REG_NR34        REG(u8,  0x04000075)
-#define REG_SOUND4CNT_L REG(u16, 0x04000078)
-#define REG_NR41        REG(u8,  0x04000078)
-#define REG_NR42        REG(u8,  0x04000079)
-#define REG_SOUND4CNT_H REG(u16, 0x0400007C)
-#define REG_NR43        REG(u8,  0x0400007C)
-#define REG_NR44        REG(u8,  0x0400007D)
-#define REG_SOUNDCNT_L  REG(u16, 0x04000080)
-#define REG_NR50        REG(u8,  0x04000080)
-#define REG_NR51        REG(u8,  0x04000081)
-#define REG_SOUNDCNT_H  REG(u16, 0x04000082)
-#define REG_SOUNDCNT_X  REG(u16, 0x04000084)
-#define REG_NR52        REG(u8,  0x04000084)
-#define REG_SOUNDBIAS   REG(u16, 0x04000088)
-#define REG_SOUNDBIAS_L REG(u8,  0x04000088)
-#define REG_SOUNDBIAS_H REG(u8,  0x04000089)
-#define REG_WAVE_RAM0   REG(u32, 0x04000090)
-#define REG_WAVE_RAM1   REG(u32, 0x04000094)
-#define REG_WAVE_RAM2   REG(u32, 0x04000098)
-#define REG_WAVE_RAM3   REG(u32, 0x0400009C)
-#define REG_FIFO_A      REG(u32, 0x040000A0)
-#define REG_FIFO_B      REG(u32, 0x040000A4)
-
-#define REG_DMA0SAD     REG(u32, 0x040000B0)
-#define REG_DMA0DAD     REG(u32, 0x040000B4)
-#define REG_DMA0CNT     REG(u32, 0x040000B8)
-#define REG_DMA0CNT_L   REG(u16, 0x040000B8)
-#define REG_DMA0CNT_H   REG(u16, 0x040000BA)
-
-#define REG_DMA1SAD     REG(u32, 0x040000BC)
-#define REG_DMA1DAD     REG(u32, 0x040000C0)
-#define REG_DMA1CNT     REG(u32, 0x040000C4)
-#define REG_DMA1CNT_L   REG(u16, 0x040000C4)
-#define REG_DMA1CNT_H   REG(u16, 0x040000C6)
-
-#define REG_DMA2SAD     REG(u32, 0x040000C8)
-#define REG_DMA2DAD     REG(u32, 0x040000CC)
-#define REG_DMA2CNT     REG(u32, 0x040000D0)
-#define REG_DMA2CNT_L   REG(u16, 0x040000D0)
-#define REG_DMA2CNT_H   REG(u16, 0x040000D2)
-
-#define REG_DMA3SAD     REG(u32, 0x040000D4)
-#define REG_DMA3DAD     REG(u32, 0x040000D8)
-#define REG_DMA3CNT     REG(u32, 0x040000DC)
-#define REG_DMA3CNT_L   REG(u16, 0x040000DC)
-#define REG_DMA3CNT_H   REG(u16, 0x040000DE)
-
-#define REG_TM0CNT      REG(u32, 0x04000100)
-#define REG_TM0CNT_L    REG(u16, 0x04000100)
-#define REG_TM0CNT_H    REG(u16, 0x04000102)
-#define REG_TM1CNT      REG(u32, 0x04000104)
-#define REG_TM1CNT_L    REG(u16, 0x04000104)
-#define REG_TM1CNT_H    REG(u16, 0x04000106)
-#define REG_TM2CNT      REG(u32, 0x04000108)
-#define REG_TM2CNT_L    REG(u16, 0x04000108)
-#define REG_TM2CNT_H    REG(u16, 0x0400010A)
-#define REG_TM3CNT      REG(u32, 0x0400010C)
-#define REG_TM3CNT_L    REG(u16, 0x0400010C)
-#define REG_TM3CNT_H    REG(u16, 0x0400010E)
-
-#define REG_SIOCNT      REG(u16, 0x04000128)
-#define REG_SIODATA8    REG(u16, 0x0400012A)
-#define REG_SIODATA32   REG(u32, 0x04000120)
-#define REG_SIOMLT_SEND REG(u16, 0x0400012A)
-#define REG_SIOMLT_RECV REG(u64, 0x04000120)
-#define REG_SIOMULTI0   REG(u16, 0x04000120)
-#define REG_SIOMULTI1   REG(u16, 0x04000122)
-#define REG_SIOMULTI2   REG(u16, 0x04000124)
-#define REG_SIOMULTI3   REG(u16, 0x04000126)
-
-#define REG_KEYINPUT    REG(u16, 0x04000130)
-#define REG_KEYCNT      REG(u16, 0x04000132)
-
-#define REG_RCNT        REG(u16, 0x04000134)
-
-#define REG_IE          REG(u16, 0x04000200)
-#define REG_IF          REG(u16, 0x04000202)
-#define REG_IME         REG(u16, 0x04000208)
-
-#define REG_WAITCNT     REG(u16, 0x04000204)
-
-// DISPCNT
-
-enum
-{
-    BG_MODE_REGULAR        = 0,
-    BG_MODE_MIXED          = 1,
-    BG_MODE_AFFINE         = 2,
-    BG_MODE_BITMAP         = 3,
-    BG_MODE_BITMAP_INDEXED = 4,
-    BG_MODE_BITMAP_SMALL   = 5,
-};
-
-enum
-{
-    OBJ_MAPPING_2D = 0,
-    OBJ_MAPPING_1D = 1,
-};
-
-enum
-{
-    #define DISPCNT_BG_MODE(n) (((n) & 7) << 0)
-    #define DISPCNT_BITMAP_FRAME(n) (((n) & 1) << 4)
-    #define DISPCNT_OBJ_MAPPING(n) (((n) & 1) << 6)
-
-    DISPCNT_BG_MODE_REGULAR        = DISPCNT_BG_MODE(BG_MODE_REGULAR),
-    DISPCNT_BG_MODE_MIXED          = DISPCNT_BG_MODE(BG_MODE_MIXED),
-    DISPCNT_BG_MODE_AFFINE         = DISPCNT_BG_MODE(BG_MODE_AFFINE),
-    DISPCNT_BG_MODE_BITMAP         = DISPCNT_BG_MODE(BG_MODE_BITMAP),
-    DISPCNT_BG_MODE_BITMAP_INDEXED = DISPCNT_BG_MODE(BG_MODE_BITMAP_INDEXED),
-    DISPCNT_BG_MODE_BITMAP_SMALL   = DISPCNT_BG_MODE(BG_MODE_BITMAP_SMALL),
-    DISPCNT_BITMAP_FRAME_0         = DISPCNT_BITMAP_FRAME(0),
-    DISPCNT_BITMAP_FRAME_1         = DISPCNT_BITMAP_FRAME(1),
-    DISPCNT_HBLANK_INTERVAL_FREE   = 1 << 5,
-    DISPCNT_OBJ_MAPPING_2D         = DISPCNT_OBJ_MAPPING(OBJ_MAPPING_2D),
-    DISPCNT_OBJ_MAPPING_1D         = DISPCNT_OBJ_MAPPING(OBJ_MAPPING_1D),
-    DISPCNT_FORCE_BLANK            = 1 << 7,
-    DISPCNT_BG0_ENABLE             = 1 << 8,
-    DISPCNT_BG1_ENABLE             = 1 << 9,
-    DISPCNT_BG2_ENABLE             = 1 << 10,
-    DISPCNT_BG3_ENABLE             = 1 << 11,
-    DISPCNT_OBJ_ENABLE             = 1 << 12,
-    DISPCNT_WIN0_ENABLE            = 1 << 13,
-    DISPCNT_WIN1_ENABLE            = 1 << 14,
-    DISPCNT_OBJWIN_ENABLE          = 1 << 15,
-};
-
-// DISPSTAT
-
-enum
-{
-    #define DISPSTAT_VCOUNT_COMPARE(n) (((n) & 0xFF) << 8)
-
-    DISPSTAT_VBLANK            = 1 << 0,
-    DISPSTAT_HBLANK            = 1 << 1,
-    DISPSTAT_VCOUNT            = 1 << 2,
-    DISPSTAT_VBLANK_INT_ENABLE = 1 << 3,
-    DISPSTAT_HBLANK_INT_ENABLE = 1 << 4,
-    DISPSTAT_VCOUNT_INT_ENABLE = 1 << 5,
-};
-
-// BGCNT
-
-enum
-{
-    BG_COLORDEPTH_4BPP = 0,
-    BG_COLORDEPTH_8BPP = 1,
-};
-
-enum
-{
-    BG_SIZE_256x256 = 0,
-    BG_SIZE_512x256 = 1,
-    BG_SIZE_256x512 = 2,
-    BG_SIZE_512x512 = 3,
-};
-
-enum
-{
-    BG_AFFINE_SIZE_128x128   = 0,
-    BG_AFFINE_SIZE_256x256   = 1,
-    BG_AFFINE_SIZE_512x512   = 2,
-    BG_AFFINE_SIZE_1024x1024 = 3,
-};
-
-enum
-{
-    #define BGCNT_PRIORITY(n)    (((n) & 3)  << 0) // Values 0 - 3. Lower priority BGs will be drawn on top of higher priority BGs.
-    #define BGCNT_CHR_BLOCK(n)   (((n) & 3)  << 2) // Values 0 - 3. Base block for tile pixel data.
-    #define BGCNT_COLORDEPTH(n)  (((n) & 1)  << 7) // 4 or 8 bits per pixel
-    #define BGCNT_TM_BLOCK(n)    (((n) & 31) << 8) // Values 0 - 31. Base block for tile map.
-    #define BGCNT_SIZE(n)        (((n) & 3) << 14) // Internal screen size size of text mode BG.
-    #define BGCNT_AFFINE_SIZE(n) (((n) & 3) << 14) // Internal screen size size of affine mode BG.
-
-    BGCNT_MOSAIC                = 1 << 6,
-    BGCNT_COLORDEPTH_4BPP       = BGCNT_COLORDEPTH(BG_COLORDEPTH_4BPP),
-    BGCNT_COLORDEPTH_8BPP       = BGCNT_COLORDEPTH(BG_COLORDEPTH_8BPP),
-    BGCNT_WRAP                  = 1 << 13,
-    BGCNT_SIZE_256x256          = BGCNT_SIZE(BG_SIZE_256x256),
-    BGCNT_SIZE_512x256          = BGCNT_SIZE(BG_SIZE_512x256),
-    BGCNT_SIZE_256x512          = BGCNT_SIZE(BG_SIZE_256x512),
-    BGCNT_SIZE_512x512          = BGCNT_SIZE(BG_SIZE_512x512),
-    BGCNT_AFFINE_SIZE_128x128   = BGCNT_AFFINE_SIZE(BG_AFFINE_SIZE_128x128),
-    BGCNT_AFFINE_SIZE_256x256   = BGCNT_AFFINE_SIZE(BG_AFFINE_SIZE_256x256),
-    BGCNT_AFFINE_SIZE_512x512   = BGCNT_AFFINE_SIZE(BG_AFFINE_SIZE_512x512),
-    BGCNT_AFFINE_SIZE_1024x1024 = BGCNT_AFFINE_SIZE(BG_AFFINE_SIZE_1024x1024),
-};
-
-// BLDCNT
-
-enum
-{
-    BLEND_EFFECT_NONE = 0,
-    BLEND_EFFECT_ALPHA = 1,
-    BLEND_EFFECT_BRIGHTEN = 2,
-    BLEND_EFFECT_DARKEN = 3,
-};
-
-enum
-{
-    #define BLDCNT_TARGETA(bg0, bg1, bg2, bg3, obj) ((bg0) + ((bg1) << 1) + ((bg2) << 2) + ((bg3) << 3) + ((obj) << 4))
-    #define BLDCNT_TARGETB(bg0, bg1, bg2, bg3, obj) (((bg0) << 8) + ((bg1) << 9) + ((bg2) << 10) + ((bg3) << 11) + ((obj) << 12))
-    #define BLDCNT_EFFECT(n) (((n) & 3) << 6)
-
-    BLDCNT_TARGETA_BG0    = 1 << 0,
-    BLDCNT_TARGETA_BG1    = 1 << 1,
-    BLDCNT_TARGETA_BG2    = 1 << 2,
-    BLDCNT_TARGETA_BG3    = 1 << 3,
-    BLDCNT_TARGETA_OBJ    = 1 << 4,
-    BLDCNT_TARGETA_BD     = 1 << 5,
-    BLDCNT_EFFECT_NONE    = BLDCNT_EFFECT(BLEND_EFFECT_NONE),
-    BLDCNT_EFFECT_ALPHA   = BLDCNT_EFFECT(BLEND_EFFECT_ALPHA),
-    BLDCNT_EFFECT_LIGHTEN = BLDCNT_EFFECT(BLEND_EFFECT_BRIGHTEN),
-    BLDCNT_EFFECT_DARKEN  = BLDCNT_EFFECT(BLEND_EFFECT_DARKEN),
-    BLDCNT_TARGETB_BG0    = 1 << 8,
-    BLDCNT_TARGETB_BG1    = 1 << 9,
-    BLDCNT_TARGETB_BG2    = 1 << 10,
-    BLDCNT_TARGETB_BG3    = 1 << 11,
-    BLDCNT_TARGETB_OBJ    = 1 << 12,
-    BLDCNT_TARGETB_BD     = 1 << 13,
-};
-
-// BLDALPHA
-
-#define BLDALPHA_BLEND(ca, cb) (((cb) << 8) | (ca))
-
-// SOUNDCNT_H
-
-enum
-{
-    SOUND_CGB_MIX_QUARTER = 0x0000,
-    SOUND_CGB_MIX_HALF    = 0x0001,
-    SOUND_CGB_MIX_FULL    = 0x0002,
-    SOUND_A_MIX_HALF      = 0x0000,
-    SOUND_A_MIX_FULL      = 0x0004,
-    SOUND_B_MIX_HALF      = 0x0000,
-    SOUND_B_MIX_FULL      = 0x0008,
-    SOUND_ALL_MIX_FULL    = 0x000E,
-    SOUND_A_RIGHT_OUTPUT  = 0x0100,
-    SOUND_A_LEFT_OUTPUT   = 0x0200,
-    SOUND_A_TIMER_0       = 0x0000,
-    SOUND_A_TIMER_1       = 0x0400,
-    SOUND_A_FIFO_RESET    = 0x0800,
-    SOUND_B_RIGHT_OUTPUT  = 0x1000,
-    SOUND_B_LEFT_OUTPUT   = 0x2000,
-    SOUND_B_TIMER_0       = 0x0000,
-    SOUND_B_TIMER_1       = 0x4000,
-    SOUND_B_FIFO_RESET    = 0x8000,
-};
-
-// SOUNDCNT_X
-
-enum
-{
-    SOUND_1_ON          = 0x0001,
-    SOUND_2_ON          = 0x0002,
-    SOUND_3_ON          = 0x0004,
-    SOUND_4_ON          = 0x0008,
-    SOUND_MASTER_ENABLE = 0x0080,
-};
-
-// DMA
-#define DMA_DEST_INC      0x0000
-#define DMA_DEST_DEC      0x0020
-#define DMA_DEST_FIXED    0x0040
-#define DMA_DEST_RELOAD   0x0060
-#define DMA_SRC_INC       0x0000
-#define DMA_SRC_DEC       0x0080
-#define DMA_SRC_FIXED     0x0100
-#define DMA_REPEAT        0x0200
-#define DMA_16BIT         0x0000
-#define DMA_32BIT         0x0400
-#define DMA_DREQ_ON       0x0800
-#define DMA_START_NOW     0x0000
-#define DMA_START_VBLANK  0x1000
-#define DMA_START_HBLANK  0x2000
-#define DMA_START_SPECIAL 0x3000
-#define DMA_START_MASK    0x3000
-#define DMA_INTR_ENABLE   0x4000
-#define DMA_ENABLE        0x8000
-
-// timer
-#define TIMER_1CLK        0x00
-#define TIMER_64CLK       0x01
-#define TIMER_256CLK      0x02
-#define TIMER_1024CLK     0x03
-#define TIMER_INTR_ENABLE 0x40
-#define TIMER_ENABLE      0x80
-
-// serial
-#define SIO_ID             0x0030 // Communication ID
-
-#define SIO_8BIT_MODE      0x0000 // Normal 8-bit communication mode
-#define SIO_32BIT_MODE     0x1000 // Normal 32-bit communication mode
-#define SIO_MULTI_MODE     0x2000 // Multi-player communication mode
-#define SIO_UART_MODE      0x3000 // UART communication mode
-
-#define SIO_9600_BPS       0x0000 // baud rate   9600 bps
-#define SIO_38400_BPS      0x0001 //            38400 bps
-#define SIO_57600_BPS      0x0002 //            57600 bps
-#define SIO_115200_BPS     0x0003 //           115200 bps
-
-#define SIO_MULTI_SI       0x0004 // Multi-player communication SI terminal
-#define SIO_MULTI_SD       0x0008 //                            SD terminal
-#define SIO_MULTI_BUSY     0x0080
-
-#define SIO_ERROR          0x0040 // Detect error
-#define SIO_START          0x0080 // Start transfer
-#define SIO_ENABLE         0x0080 // Enable SIO
-
-#define SIO_INTR_ENABLE    0x4000
-
-#define SIO_MULTI_SI_SHIFT 2
-#define SIO_MULTI_SI_MASK  0x1
-#define SIO_MULTI_DI_SHIFT 3
-#define SIO_MULTI_DI_MASK  0x1
-
-enum
-{
-    KEY_BUTTON_A      = (1 << 0),
-    KEY_BUTTON_B      = (1 << 1),
-    KEY_BUTTON_SELECT = (1 << 2),
-    KEY_BUTTON_START  = (1 << 3),
-    KEY_DPAD_RIGHT    = (1 << 4),
-    KEY_DPAD_LEFT     = (1 << 5),
-    KEY_DPAD_UP       = (1 << 6),
-    KEY_DPAD_DOWN     = (1 << 7),
-    KEY_BUTTON_R      = (1 << 8),
-    KEY_BUTTON_L      = (1 << 9),
-
-    KEY_ANY           = (1 << 10) - 1,
-    KEY_DPAD_ANY      = KEY_DPAD_RIGHT + KEY_DPAD_LEFT + KEY_DPAD_UP + KEY_DPAD_DOWN,
-    KEY_BUTTON_ANY    = KEY_ANY &~ KEY_DPAD_ANY,
-};
-
-#define KEY_INTR_ENABLE 0x0400
-#define KEY_OR_INTR     0x0000
-#define KEY_AND_INTR    0x8000
-
-// interrupt flags
-#define INTR_FLAG_VBLANK  (1 <<  0)
-#define INTR_FLAG_HBLANK  (1 <<  1)
-#define INTR_FLAG_VCOUNT  (1 <<  2)
-#define INTR_FLAG_TIMER0  (1 <<  3)
-#define INTR_FLAG_TIMER1  (1 <<  4)
-#define INTR_FLAG_TIMER2  (1 <<  5)
-#define INTR_FLAG_TIMER3  (1 <<  6)
-#define INTR_FLAG_SERIAL  (1 <<  7)
-#define INTR_FLAG_DMA0    (1 <<  8)
-#define INTR_FLAG_DMA1    (1 <<  9)
-#define INTR_FLAG_DMA2    (1 << 10)
-#define INTR_FLAG_DMA3    (1 << 11)
-#define INTR_FLAG_KEYPAD  (1 << 12)
-#define INTR_FLAG_GAMEPAK (1 << 13)
-
-// WAITCNT
-#define WAITCNT_SRAM_4          (0 << 0)
-#define WAITCNT_SRAM_3          (1 << 0)
-#define WAITCNT_SRAM_2          (2 << 0)
-#define WAITCNT_SRAM_8          (3 << 0)
-#define WAITCNT_SRAM_MASK       (3 << 0)
-
-#define WAITCNT_WS0_N_4         (0 << 2)
-#define WAITCNT_WS0_N_3         (1 << 2)
-#define WAITCNT_WS0_N_2         (2 << 2)
-#define WAITCNT_WS0_N_8         (3 << 2)
-#define WAITCNT_WS0_N_MASK      (3 << 2)
-
-#define WAITCNT_WS0_S_2         (0 << 4)
-#define WAITCNT_WS0_S_1         (1 << 4)
-
-#define WAITCNT_WS1_N_4         (0 << 5)
-#define WAITCNT_WS1_N_3         (1 << 5)
-#define WAITCNT_WS1_N_2         (2 << 5)
-#define WAITCNT_WS1_N_8         (3 << 5)
-#define WAITCNT_WS1_N_MASK      (3 << 5)
-
-#define WAITCNT_WS1_S_4         (0 << 7)
-#define WAITCNT_WS1_S_1         (1 << 7)
-
-#define WAITCNT_WS2_N_4         (0 << 8)
-#define WAITCNT_WS2_N_3         (1 << 8)
-#define WAITCNT_WS2_N_2         (2 << 8)
-#define WAITCNT_WS2_N_8         (3 << 8)
-#define WAITCNT_WS2_N_MASK      (3 << 8)
-
-#define WAITCNT_WS2_S_8         (0 << 10)
-#define WAITCNT_WS2_S_1         (1 << 10)
-
-#define WAITCNT_PHI_OUT_NONE    (0 << 11)
-#define WAITCNT_PHI_OUT_4MHZ    (1 << 11)
-#define WAITCNT_PHI_OUT_8MHZ    (2 << 11)
-#define WAITCNT_PHI_OUT_16MHZ   (3 << 11)
-#define WAITCNT_PHI_OUT_MASK    (3 << 11)
-
-#define WAITCNT_PREFETCH_ENABLE (1 << 14)
-
-#define WAITCNT_AGB (0 << 15)
-#define WAITCNT_CGB (1 << 15)
diff --git a/include/gbasram.h b/include/gbasram.h
deleted file mode 100644
index 0439b82..0000000
--- a/include/gbasram.h
+++ /dev/null
@@ -1,13 +0,0 @@
-#pragma once
-
-#include "types.h"
-
-void SetSramFastFunc(void);
-void WriteSramFast(u8 const * src, u8 * dest, u32 size);
-u32 WriteAndVerifySramFast(void const * src, void * dest, u32 size);
-extern u32 (* VerifySramFast)(void const * src, void * dest, u32 size);
-extern void (* ReadSramFast)(void const * src, void * dest, u32 size);
-
-#define CART_SRAM_ADDR 0x0E000000
-#define CART_SRAM_SIZE 0x00008000
-#define CART_SRAM ((void *) CART_SRAM_ADDR)
diff --git a/include/gbasvc.h b/include/gbasvc.h
deleted file mode 100644
index 37303e3..0000000
--- a/include/gbasvc.h
+++ /dev/null
@@ -1,94 +0,0 @@
-#pragma once
-
-#include "types.h"
-
-struct BgAffineSetSrc
-{
-    /* +00 */ i32 tex_x;
-    /* +04 */ i32 tex_y;
-    /* +08 */ i16 scr_x;
-    /* +0A */ i16 scr_y;
-    /* +0C */ i16 sx;
-    /* +0E */ i16 sy;
-    /* +10 */ u16 alpha;
-};
-
-struct BgAffineSetDst
-{
-    /* +00 */ i16 pa;
-    /* +02 */ i16 pb;
-    /* +04 */ i16 pc;
-    /* +06 */ i16 pd;
-    /* +08 */ i32 dx;
-    /* +0C */ i32 dy;
-};
-
-struct ObjAffineSetSrc
-{
-    /* +00 */ i16 x_scale;
-    /* +02 */ i16 y_scale;
-    /* +04 */ u16 rotation;
-};
-
-enum
-{
-    BIT_UNPACK_ADDEND_ZERO = 1 << 31,
-};
-
-struct BitUnpackInfo
-{
-    /* +00 */ u16 src_len;
-    /* +02 */ u8  src_unit_bits;
-    /* +03 */ u8  dst_unit_bits;
-    /* +04 */ u32 data_addend;
-};
-
-enum
-{
-    GBA_RESET_EWRAM    = 1 << 0,
-    GBA_RESET_IWRAM    = 1 << 1,
-    GBA_RESET_PALETTE  = 1 << 2,
-    GBA_RESET_VRAM     = 1 << 3,
-    GBA_RESET_OAM      = 1 << 4,
-    GBA_RESET_SIO_IO   = 1 << 5,
-    GBA_RESET_SOUND_IO = 1 << 6,
-    GBA_RESET_IO       = 1 << 7,
-    GBA_RESET_ALL      = (1 << 8) - 1,
-};
-
-enum
-{
-    CPU_SET_SRC_FIXED = 0x01000000,
-    CPU_SET_32BIT     = 0x04000000,
-    CPU_SET_16BIT     = 0x00000000,
-};
-
-/* svc 00 */ void SoftReset(u32 reset_flags);
-/* svc 01 */ void RegisterRamReset(u32 reset_flags);
-// svc 02 */ void Halt(void);
-// svc 03 */ void Stop(void);
-// svc 04 */ void IntrWait(bool wait_next, u16 intr_flags);
-/* svc 05 */ void VBlankIntrWait(void);
-/* svc 06 */ i32  Div(i32 lhs, i32 rhs);
-/* svc 06 */ i32  DivRem(i32 lhs, i32 rhs);
-// svc 07 */ i32  DivArm(i32 rhs, i32 lhs);
-/* svc 08 */ u16  Sqrt(u32 num);
-// svc 09 */ u32  ArcTan(u16 tan);
-/* svc 0A */ u16  ArcTan2(i16 x, i16 y);
-/* svc 0B */ void CpuSet(const void * src, void * dst, u32 control);
-/* svc 0C */ void CpuFastSet(const void * src, void * dst, u32 control);
-// svc 0D */ u32  GetBiosChecksum(void);
-/* svc 0E */ void BgAffineSet(struct BgAffineSetSrc const * src, struct BgAffineSetDst * dst, i32 count);
-/* svc 0F */ void ObjAffineSet(struct ObjAffineSetSrc const * src, void * dest, i32 count, i32 offset);
-// svc 10 */ void BitUnpack(void const * src, void * dst, struct BitUnpackInfo const * info);
-/* svc 11 */ void LZ77UnCompWram(void const * src, void * dst);
-/* svc 12 */ void LZ77UnCompVram(void const * src, void * dst);
-/* svc 13 */ void HuffUnComp(void const * src, void * dst);
-/* svc 14 */ void RLUnCompWram(void const * src, void * dst);
-/* svc 15 */ void RLUnCompVram(void const * src, void * dst);
-// svc 16 */ void Diff8bitUnFilterWram(void const * src, void * dst);
-// svc 17 */ void Diff8bitUnFilterVram(void const * src, void * dst);
-// svc 18 */ void Diff16bitUnFilter(void const * src, void * dst);
-/* svc 19 */ void SoundBiasReset(void);
-/* svc 19 */ void SoundBiasSet(void);
-// ...
diff --git a/include/global.h b/include/global.h
new file mode 100644
index 0000000..02653cc
--- /dev/null
+++ b/include/global.h
@@ -0,0 +1,41 @@
+#pragma once
+
+#include <stdlib.h>
+#include "gba/gba.h"
+
+#include "types.h"
+#include "unk-functions.h"
+#include "unk-types.h"
+
+#define CONST_DATA __attribute__((section(".data")))
+
+#define ARRAY_COUNT(array) (sizeof(array) / sizeof((array)[0]))
+
+#define RED_VALUE(color) ((color) & 0x1F)
+#define GREEN_VALUE(color) (((color) >> 5) & 0x1F)
+#define BLUE_VALUE(color) (((color) >> 10) & 0x1F)
+
+#define ABS(aValue) ((aValue) >= 0 ? (aValue) : -(aValue))
+
+#define SIN(aAngle) (gSinLookup[(aAngle&0xFF)])
+#define COS(aAngle) (gSinLookup[0x40 + (aAngle&0xFF)])
+
+#define RECT_DISTANCE(aXA, aYA, aXB, aYB) (ABS((aXA) - (aXB)) + ABS((aYA) - (aYB)))
+
+#define LIMIT_AREA(num, min, max)   \
+    if (num > max)                  \
+        num = max;                  \
+    if (num < min)                  \
+        num = min;
+
+#define LIMIT_AREA_(num, min, max)  \
+    if (num < min)                  \
+        num = min;                  \
+    else if (num > max)             \
+        num = max;
+
+#if !MODERN
+#  define STRUCT_PAD(from, to) unsigned char _pad_ ## from[(to) - (from)]
+#else
+#  define STRUCT_PAD(from, to)
+#endif
diff --git a/include/gold.h b/include/gold.h
deleted file mode 100644
index 2d08756..0000000
--- a/include/gold.h
+++ /dev/null
@@ -1,7 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-int GetGold(void);
-void SetGold(int amount);
-void AddGold(int amount);
diff --git a/include/hardware.h b/include/hardware.h
index ff66967..c9225bf 100644
--- a/include/hardware.h
+++ b/include/hardware.h
@@ -1,152 +1,8 @@
 #pragma once
 
-#include "common.h"
-#include "gbaio.h"
+#include "global.h"
 
-enum
-{
-    FRAMES_PER_SECOND = 60,
-    FRAMES_PER_MINUTE = 60 * FRAMES_PER_SECOND,
-    FRAMES_PER_HOUR   = 60 * FRAMES_PER_MINUTE,
-};
-
-#if MODERN
-#  define IO_ALIGNED(n) ALIGNED(n)
-#else
-#  define IO_ALIGNED(n) ALIGNED(4)
-#endif
-
-struct IO_ALIGNED(2) DispCnt
-{
-    /* bit  0 */ u16 mode : 3;
-    /* bit  3 */ u16 : 1;
-    /* bit  4 */ u16 bitmap_frame : 1;
-    /* bit  5 */ u16 hblank_interval_free : 1;
-    /* bit  6 */ u16 obj_mapping : 1;
-    /* bit  7 */ u16 forced_blank : 1;
-    /* bit  8 */ u16 bg0_enable : 1;
-    /* bit  9 */ u16 bg1_enable : 1;
-    /* bit 10 */ u16 bg2_enable : 1;
-    /* bit 11 */ u16 bg3_enable : 1;
-    /* bit 12 */ u16 obj_enable : 1;
-    /* bit 13 */ u16 win0_enable : 1;
-    /* bit 14 */ u16 win1_enable : 1;
-    /* bit 15 */ u16 objwin_enable : 1;
-};
-
-struct IO_ALIGNED(2) DispStat
-{
-    /* bit  0 */ u16 vblank : 1;
-    /* bit  1 */ u16 hblank : 1;
-    /* bit  2 */ u16 vcount : 1;
-    /* bit  3 */ u16 vblank_int_enable : 1;
-    /* bit  4 */ u16 hblank_int_enable : 1;
-    /* bit  5 */ u16 vcount_int_enable : 1;
-    /* bit  6 */ u16 : 2;
-    /* bit  8 */ u16 vcount_compare : 8;
-};
-
-struct IO_ALIGNED(2) BgCnt
-{
-    /* bit  0 */ u16 priority : 2;
-    /* bit  2 */ u16 chr_block : 2;
-    /* bit  4 */ u16 : 2;
-    /* bit  6 */ u16 mosaic : 1;
-    /* bit  7 */ u16 color_depth : 1;
-    /* bit  8 */ u16 tm_block : 5;
-    /* bit 13 */ u16 wrap : 1;
-    /* bit 14 */ u16 size : 2;
-};
-
-struct IO_ALIGNED(4) WinCnt
-{
-    u8 win0_enable_bg0 : 1;
-    u8 win0_enable_bg1 : 1;
-    u8 win0_enable_bg2 : 1;
-    u8 win0_enable_bg3 : 1;
-    u8 win0_enable_obj : 1;
-    u8 win0_enable_blend : 1;
-    u8 : 2;
-
-    u8 win1_enable_bg0 : 1;
-    u8 win1_enable_bg1 : 1;
-    u8 win1_enable_bg2 : 1;
-    u8 win1_enable_bg3 : 1;
-    u8 win1_enable_obj : 1;
-    u8 win1_enable_blend : 1;
-    u8 : 2;
-
-    u8 wout_enable_bg0 : 1;
-    u8 wout_enable_bg1 : 1;
-    u8 wout_enable_bg2 : 1;
-    u8 wout_enable_bg3 : 1;
-    u8 wout_enable_obj : 1;
-    u8 wout_enable_blend : 1;
-    u8 : 2;
-
-    u8 wobj_enable_bg0 : 1;
-    u8 wobj_enable_bg1 : 1;
-    u8 wobj_enable_bg2 : 1;
-    u8 wobj_enable_bg3 : 1;
-    u8 wobj_enable_obj : 1;
-    u8 wobj_enable_blend : 1;
-    u8 : 2;
-};
-
-struct IO_ALIGNED(2) BlendCnt
-{
-    u16 target1_enable_bg0 : 1;
-    u16 target1_enable_bg1 : 1;
-    u16 target1_enable_bg2 : 1;
-    u16 target1_enable_bg3 : 1;
-    u16 target1_enable_obj : 1;
-    u16 target1_enable_bd : 1;
-    u16 effect : 2;
-    u16 target2_enable_bg0 : 1;
-    u16 target2_enable_bg1 : 1;
-    u16 target2_enable_bg2 : 1;
-    u16 target2_enable_bg3 : 1;
-    u16 target2_enable_obj : 1;
-    u16 target2_enable_bd : 1;
-};
-
-struct DispIo
-{
-    /* 00 */ struct DispCnt disp_ct;
-    /* 04 */ struct DispStat disp_stat;
-    /* 08 */ STRUCT_PAD(0x08, 0x0C);
-    /* 0C */ struct BgCnt bg0_ct;
-    /* 10 */ struct BgCnt bg1_ct;
-    /* 14 */ struct BgCnt bg2_ct;
-    /* 18 */ struct BgCnt bg3_ct;
-    /* 1C */ struct Vec2u bg_off[4];
-    /* 2C */ u8 win0_right, win0_left, win1_right, win1_left;
-    /* 30 */ u8 win0_bottom, win0_top, win1_bottom, win1_top;
-    /* 34 */ struct WinCnt win_ct;
-    /* 38 */ u16 mosaic;
-    /* 3A */ STRUCT_PAD(0x3A, 0x3C);
-    /* 3C */ struct BlendCnt blend_ct;
-    /* 40 */ STRUCT_PAD(0x40, 0x44);
-    /* 44 */ u8 blend_coef_a;
-    /* 45 */ u8 blend_coef_b;
-    /* 46 */ u8 blend_y;
-    /* 48 */ u16 bg2pa;
-    /* 4A */ u16 bg2pb;
-    /* 4C */ u16 bg2pc;
-    /* 4E */ u16 bg2pd;
-    /* 50 */ u32 bg2x;
-    /* 54 */ u32 bg2y;
-    /* 58 */ u16 bg3pa;
-    /* 5A */ u16 bg3pb;
-    /* 5C */ u16 bg3pc;
-    /* 5E */ u16 bg3pd;
-    /* 60 */ u32 bg3x;
-    /* 64 */ u32 bg3y;
-    /* 68 */ i8 color_addition;
-};
-
-struct KeySt
-{
+struct KeySt {
     /* 00 */ u8 repeat_delay;    // initial delay before generating auto-repeat presses
     /* 01 */ u8 repeat_interval; // time between auto-repeat presses
     /* 02 */ u8 repeat_clock;    // (decreased by one each frame, reset to repeat_delay when Presses change and repeat_interval when reaches 0)
@@ -160,209 +16,9 @@ struct KeySt
     /* 12 */ u16 time_since_start_select; // Time since last Non-Start Non-Select Button was pressed
 };
 
-enum
-{
+enum bg_sync_bitfile {
     BG0_SYNC_BIT = (1 << 0),
     BG1_SYNC_BIT = (1 << 1),
     BG2_SYNC_BIT = (1 << 2),
     BG3_SYNC_BIT = (1 << 3),
 };
-
-unsigned GetGameTime(void);
-void SetGameTime(unsigned time);
-void IncGameTime(void);
-bool FormatTime(unsigned time, u16 * hours, u16 * minutes, u16 * seconds);
-void EnableBgSync(int bits);
-void EnableBgSyncById(int bgid);
-void DisableBgSync(int bits);
-void EnablePalSync(void);
-void DisablePalSync(void);
-void ApplyPaletteExt(void const * data, int startOffset, int size);
-void SyncDispIo(void);
-int GetBgChrOffset(int bg);
-int GetBgChrId(int bg, int offset);
-int GetBgTilemapOffset(int bg);
-void SetBgChrOffset(int bg, int offset);
-void SetBgTilemapOffset(int bg, int offset);
-void SetBgScreenSize(int bg, int size);
-void SetBgBpp(int bg, int bpp);
-void SyncBgsAndPal(void);
-void TmFill(u16 * dest, int tileref);
-void SetBlankChr(int chr);
-void SetOnVBlank(Func func);
-void SetOnVMatch(Func func);
-void SetNextVCount(int vcount);
-void SetVCount(int vcount);
-void SetMainFunc(Func func);
-void RunMainFunc(void);
-void RefreshKeySt(struct KeySt * keySt);
-void ClearKeySt(struct KeySt * keySt);
-void InitKeySt(struct KeySt * keySt);
-void SetBgOffset(u16 bgid, u16 x_offset, u16 y_offset);
-void func_fe6_08001AE4(void);
-void func_fe6_08001B18(u8 a, u8 b);
-void func_fe6_08001B4C(u16 * a, u16 * b);
-void func_fe6_08001B8C(void * tm, void const * in_data, u8 base, u8 linebits);
-void func_fe6_08001C68(u16 * tm, short const * in_data, int unused);
-void ColorFadeInit(void);
-void func_fe6_08001D44(u16 const * in_pal, int bank, int count, int unk);
-void func_fe6_08001E68(int a, int b, int c, int d);
-void func_fe6_08001F88(int a, int b, int c);
-void ColorFadeSetupFromColorToBlack(fi8 component_step);
-void ColorFadeSetupFromBlack(fi8 component_step);
-void ColorFadeSetupFromColorToWhite(fi8 component_step);
-void ColorFadeSetupFromWhite(fi8 component_step);
-void ColorFadeTick2(void);
-void InitBgs(u16 const * config);
-u16 * GetBgTilemap(int bg);
-void SoftResetIfKeyCombo(void);
-void func_fe6_0800285C(int unk);
-void SetOnHBlankA(Func func);
-void SetOnHBlankB(Func func);
-
-extern u8 EWRAM_DATA gBuf[0x2000];
-
-extern u16 EWRAM_DATA gPal[0x200];
-
-extern u16 EWRAM_DATA gBg0Tm[0x400];
-extern u16 EWRAM_DATA gBg1Tm[0x400];
-extern u16 EWRAM_DATA gBg2Tm[0x400];
-extern u16 EWRAM_DATA gBg3Tm[0x400];
-
-extern struct KeySt * CONST_DATA gKeySt;
-
-extern struct DispIo gDispIo;
-
-extern short SHOULD_BE_CONST gSinLut[];
-
-#define RGB_GET_RED(color) ((color) & 0x1F)
-#define RGB_GET_GREEN(color) (((color) >> 5) & 0x1F)
-#define RGB_GET_BLUE(color) (((color) >> 10) & 0x1F)
-
-#define TM_OFFSET(x, y) (((y) << 5) + (x))
-
-#define TILE_CHR_SAFE(chr) ((chr) & 0x3FF)
-#define TILE_PAL_SAFE(pal) (((pal) & 0xF) << 12)
-#define TILEREF(chr, pal) ((chr) + ((pal) << 12))
-#define TILE_HFLIP 0x0400
-#define TILE_VFLIP 0x0800
-
-#define PAL_COLOR(palid, colornum) gPal[(palid) * 0x10 + (colornum)]
-#define PAL_BG_COLOR(palid, colornum) PAL_COLOR(palid, colornum)
-#define PAL_OBJ_COLOR(palid, colornum) PAL_COLOR((palid) + 0x10, colornum)
-
-#define SIN_Q12(angle) (gSinLut[(angle) & 0xFF])
-#define COS_Q12(angle) (gSinLut[0x40 + ((angle) & 0xFF)])
-
-#define ApplyPalettes(src, num, count) ApplyPaletteExt((src), 0x20 * (num), 0x20 * (count))
-#define ApplyPalette(src, num) ApplyPalettes((src), (num), 1)
-
-#define SetDispEnable(bg0, bg1, bg2, bg3, obj) \
-    gDispIo.disp_ct.bg0_enable = (bg0); \
-    gDispIo.disp_ct.bg1_enable = (bg1); \
-    gDispIo.disp_ct.bg2_enable = (bg2); \
-    gDispIo.disp_ct.bg3_enable = (bg3); \
-    gDispIo.disp_ct.obj_enable = (obj)
-
-#define SetWinEnable(win0, win1, objwin) \
-    gDispIo.disp_ct.win0_enable = (win0); \
-    gDispIo.disp_ct.win1_enable = (win1); \
-    gDispIo.disp_ct.objwin_enable = (objwin)
-
-#define SetWin0Box(left, top, right, bottom) \
-    gDispIo.win0_left = (left); \
-    gDispIo.win0_top = (top); \
-    gDispIo.win0_right = (right); \
-    gDispIo.win0_bottom = (bottom)
-
-#define SetWin1Box(left, top, right, bottom) \
-    gDispIo.win1_left = (left); \
-    gDispIo.win1_top = (top); \
-    gDispIo.win1_right = (right); \
-    gDispIo.win1_bottom = (bottom)
-
-#define SetWin0Layers(bg0, bg1, bg2, bg3, obj) \
-    gDispIo.win_ct.win0_enable_bg0 = (bg0); \
-    gDispIo.win_ct.win0_enable_bg1 = (bg1); \
-    gDispIo.win_ct.win0_enable_bg2 = (bg2); \
-    gDispIo.win_ct.win0_enable_bg3 = (bg3); \
-    gDispIo.win_ct.win0_enable_obj = (obj)
-
-#define SetWin1Layers(bg0, bg1, bg2, bg3, obj) \
-    gDispIo.win_ct.win1_enable_bg0 = (bg0); \
-    gDispIo.win_ct.win1_enable_bg1 = (bg1); \
-    gDispIo.win_ct.win1_enable_bg2 = (bg2); \
-    gDispIo.win_ct.win1_enable_bg3 = (bg3); \
-    gDispIo.win_ct.win1_enable_obj = (obj)
-
-#define SetWObjLayers(bg0, bg1, bg2, bg3, obj) \
-    gDispIo.win_ct.wobj_enable_bg0 = (bg0); \
-    gDispIo.win_ct.wobj_enable_bg1 = (bg1); \
-    gDispIo.win_ct.wobj_enable_bg2 = (bg2); \
-    gDispIo.win_ct.wobj_enable_bg3 = (bg3); \
-    gDispIo.win_ct.wobj_enable_obj = (obj)
-
-#define SetWOutLayers(bg0, bg1, bg2, bg3, obj) \
-    gDispIo.win_ct.wout_enable_bg0 = (bg0); \
-    gDispIo.win_ct.wout_enable_bg1 = (bg1); \
-    gDispIo.win_ct.wout_enable_bg2 = (bg2); \
-    gDispIo.win_ct.wout_enable_bg3 = (bg3); \
-    gDispIo.win_ct.wout_enable_obj = (obj)
-
-#define SetBlendConfig(eff, ca, cb, cy) \
-    gDispIo.blend_ct.effect = (eff); \
-    gDispIo.blend_coef_a = (ca); \
-    gDispIo.blend_coef_b = (cb); \
-    gDispIo.blend_y = (cy)
-
-#define SetBlendAlpha(ca, cb) \
-    SetBlendConfig(BLEND_EFFECT_ALPHA, (ca), (cb), 0)
-
-#define SetBlendBrighten(cy) \
-    SetBlendConfig(BLEND_EFFECT_BRIGHTEN, 0, 0, (cy))
-
-#define SetBlendDarken(cy) \
-    SetBlendConfig(BLEND_EFFECT_DARKEN, 0, 0, (cy))
-
-#define SetBlendNone() \
-    SetBlendConfig(BLEND_EFFECT_NONE, 0x10, 0, 0)
-
-#if BUGFIX
-
-// fixes violation of strict aliasing rules
-
-#define SetBlendTargetA(bg0, bg1, bg2, bg3, obj) \
-    gDispIo.blend_ct.target1_enable_bg0 = (bg0); \
-    gDispIo.blend_ct.target1_enable_bg1 = (bg1); \
-    gDispIo.blend_ct.target1_enable_bg2 = (bg2); \
-    gDispIo.blend_ct.target1_enable_bg3 = (bg3); \
-    gDispIo.blend_ct.target1_enable_obj = (obj)
-
-#define SetBlendTargetB(bg0, bg1, bg2, bg3, obj) \
-    gDispIo.blend_ct.target2_enable_bg0 = (bg0); \
-    gDispIo.blend_ct.target2_enable_bg1 = (bg1); \
-    gDispIo.blend_ct.target2_enable_bg2 = (bg2); \
-    gDispIo.blend_ct.target2_enable_bg3 = (bg3); \
-    gDispIo.blend_ct.target2_enable_obj = (obj)
-
-#else
-
-#define SetBlendTargetA(bg0, bg1, bg2, bg3, obj) \
-    *((u16 *) &gDispIo.blend_ct) &= ~BLDCNT_TARGETA(1, 1, 1, 1, 1); \
-    *((u16 *) &gDispIo.blend_ct) |= BLDCNT_TARGETA((bg0), (bg1), (bg2), (bg3), (obj))
-
-#define SetBlendTargetB(bg0, bg1, bg2, bg3, obj) \
-    *((u16 *) &gDispIo.blend_ct) &= ~BLDCNT_TARGETB(1, 1, 1, 1, 1); \
-    *((u16 *) &gDispIo.blend_ct) |= BLDCNT_TARGETB((bg0), (bg1), (bg2), (bg3), (obj))
-
-#endif
-
-#define SetBlendBackdropA(enable) \
-    gDispIo.blend_ct.target1_enable_bd = (enable)
-
-#define SetBlendBackdropB(enable) \
-    gDispIo.blend_ct.target2_enable_bd = (enable)
-
-#define SetBackdropColor(color) \
-    gPal[0] = (color); \
-    EnablePalSync()
diff --git a/include/helpbox.h b/include/helpbox.h
deleted file mode 100644
index b8f4b8e..0000000
--- a/include/helpbox.h
+++ /dev/null
@@ -1,236 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "proc.h"
-
-enum
-{
-    HELPBOX_INFO_NONE,
-    HELPBOX_INFO_WEAPON,
-    HELPBOX_INFO_STAFF,
-};
-
-struct HelpBoxProc
-{
-    /* 00 */ PROC_HEADER;
-
-    /* 2C */ struct HelpBoxInfo const * info;
-
-    /* 30 */ i16 x_box;
-    /* 32 */ i16 y_box;
-    /* 34 */ i16 w_box;
-    /* 36 */ i16 h_box;
-    /* 38 */ i16 x_box_init;
-    /* 3A */ i16 y_box_init;
-    /* 3C */ i16 x_box_fini;
-    /* 3E */ i16 y_box_fini;
-    /* 40 */ i16 w_box_init;
-    /* 42 */ i16 h_box_init;
-    /* 44 */ i16 w_box_fini;
-    /* 46 */ i16 h_box_fini;
-    /* 48 */ i16 timer;
-    /* 4A */ i16 timer_end;
-
-    /* 4C */ u16 msg;
-    /* 4E */ u16 item;
-
-    /* 50 */ u16 move_key_bit; // move ctrl proc only
-
-    /* 52 */ u8 unk_52;
-
-    // NOTE: there's likely more, need to decompile more files
-};
-
-struct HelpBoxPrintProc
-{
-    /* 00 */ PROC_HEADER;
-
-    /* 2C */ char const * str_it;
-    /* 30 */ struct Font * font;
-    /* 34 */ struct Text * text[6];
-    /* 4C */ STRUCT_PAD(0x4C, 0x5C);
-    /* 5C */ i16 line;
-    /* 5E */ i16 clock;
-    /* 60 */ i16 clock_interval;
-    /* 62 */ i16 chars_per_print;
-};
-
-struct HelpBoxInfo
-{
-    /* 00 */ struct HelpBoxInfo const * adjacent_up;
-    /* 04 */ struct HelpBoxInfo const * adjacent_down;
-    /* 08 */ struct HelpBoxInfo const * adjacent_left;
-    /* 0C */ struct HelpBoxInfo const * adjacent_right;
-    /* 10 */ u8 x, y;
-    /* 12 */ u16 msg;
-    /* 14 */ void (* redirect)(struct HelpBoxProc * proc);
-    /* 18 */ void (* populate)(struct HelpBoxProc * proc);
-};
-
-void UpdateHelpBoxDisplay(struct HelpBoxProc * proc, int interpolate_method);
-void HelpBox_OnOpen(struct HelpBoxProc * proc);
-void HelpBox_OnLoop(struct HelpBoxProc * proc);
-void HelpBox_OnClose(struct HelpBoxProc * proc);
-void HelpBox_WaitClose(struct HelpBoxProc * proc);
-void StartHelpBox(int x, int y, int msg);
-void StartItemHelpBox(int x, int y, int item);
-void StartHelpBoxExt(struct HelpBoxInfo const * info, int unk);
-void StartHelpBox_08070804(int x, int y, int msg);
-void CloseHelpBox(void);
-// KillHelpBox
-// HelpBoxMoveControl_OnInitBox
-// HelpBoxMoveControl_OnIdle
-// HelpBoxMoveControl_OnEnd
-void StartMovingHelpBox(struct HelpBoxInfo const * info, ProcPtr parent);
-void StartMovingHelpBoxExt(struct HelpBoxInfo const * info, ProcPtr parent, int x, int y);
-void ApplyHelpBoxContentSize(struct HelpBoxProc * proc, int w_inner, int h_inner);
-void ApplyHelpBoxPosition(struct HelpBoxProc * proc, int x, int y);
-void SetHelpBoxInitPosition(struct HelpBoxProc * proc, int x, int y);
-void ResetHelpBoxInitSize(struct HelpBoxProc * proc);
-int func_fe6_08070B30(int item);
-void HelpBoxPopulateAutoItem(struct HelpBoxProc * proc);
-int HelpBoxTryRelocateUp(struct HelpBoxProc * proc);
-int HelpBoxTryRelocateDown(struct HelpBoxProc * proc);
-int HelpBoxTryRelocateLeft(struct HelpBoxProc * proc);
-int HelpBoxTryRelocateRight(struct HelpBoxProc * proc);
-// func_fe6_08070C4C
-// StartLockingHelpBox
-struct HelpBoxInfo const * GetLastHelpBoxInfo(void);
-void func_fe6_08070CB4(int flags, int pal);
-void func_fe6_08070D08(int chr, int chapter);
-void func_fe6_08070D48(int chr);
-void func_fe6_08070D78(int chr);
-void func_fe6_08070DA8(u16 * tm, int pal);
-void func_fe6_08070DC8(u16 * tm, int pal);
-void func_fe6_08070DE8(u16 * tm, int pal);
-int func_fe6_08070E0C(struct PlaySt const * play_st);
-void func_fe6_08070E70(void * vram, int pal);
-// func_fe6_08070EEC
-void PutSpriteTalkBox(int x_box, int y_box, int w_box, int h_box);
-// DrawHelpBoxWeaponLabels
-// DrawHelpBoxWeaponStats
-// DrawHelpBoxStaffLabels
-void func_fe6_08071274(struct HelpBoxPrintProc * proc);
-void func_fe6_08071308(struct HelpBoxPrintProc * proc);
-// func_fe6_08071374
-// func_fe6_080713DC
-// func_fe6_08071410
-void func_fe6_080714F8(int msg, int item);
-void func_fe6_08071514(void);
-// func_fe6_0807155C
-// func_fe6_08071584
-// func_fe6_080715B4
-// func_fe6_080715DC
-// func_fe6_080715FC
-// func_fe6_080716C8
-// func_fe6_080716F0
-// func_fe6_08071714
-// func_fe6_08071734
-void func_fe6_08071748(struct HelpBoxInfo const * info);
-// func_fe6_08071760
-void func_fe6_08071778(struct HelpBoxProc * proc, int w_inner, int h_inner);
-void func_fe6_080717B8(struct HelpBoxProc * proc, int x, int y);
-void func_fe6_08071830(struct HelpBoxProc * proc, int x, int y);
-void func_fe6_08071838(struct HelpBoxProc * proc);
-int func_fe6_08071848(int item);
-// func_fe6_08071888
-// func_fe6_080718A8
-bool func_fe6_080718E0(void);
-// func_fe6_080718FC
-// func_fe6_08071978
-// func_fe6_080719D8
-// func_fe6_080719EC
-// func_fe6_08071A20
-// func_fe6_08071A24
-// func_fe6_08071A34
-// func_fe6_08071AF8
-// func_fe6_08071B20
-// func_fe6_08071B44
-void func_fe6_08071B6C(void);
-void func_fe6_08071B80(int x, int y, int msg, ProcPtr parent);
-// func_fe6_08071BC0
-// func_fe6_08071C00
-// func_fe6_08071C8C
-void func_fe6_08071D04(int x, int y, int msg);
-void func_fe6_08071D94(int x, int y, int w, int h);
-// func_fe6_08071F50
-// func_fe6_08071F64
-// func_fe6_080720E0
-// func_fe6_08072100
-void func_fe6_080721B8(int msg);
-void func_fe6_080721D0(void);
-
-extern struct ProcScr CONST_DATA ProcScr_HelpBox[];
-extern struct ProcScr CONST_DATA ProcScr_HelpBoxMoveControl[];
-
-extern u8 const * CONST_DATA gUnk_08677F20[]; // array img ref
-
-extern struct ProcScr CONST_DATA ProcScr_Unk_08677FD0[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08677FE0[];
-extern struct ProcScr CONST_DATA gUnk_08677FF8[];
-extern struct ProcScr CONST_DATA gUnk_08678020[];
-extern struct ProcScr CONST_DATA gUnk_08678040[];
-extern struct ProcScr CONST_DATA gUnk_08678070[];
-extern struct ProcScr CONST_DATA gUnk_08678080[];
-extern struct ProcScr CONST_DATA gUnk_086780C8[];
-extern struct ProcScr CONST_DATA ProcScr_HelpBoxPrint_086780E8[];
-extern struct ProcScr CONST_DATA ProcScr_HelpBoxStartPrint_08678110[];
-
-// TODO: move to helpboxinfo
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677798;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_086777B4;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_086777D0;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_086777EC;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677808;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_StatScreenPersonalInfo_Pow;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677840;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_0867785C;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677878;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677894;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_086778B0;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_086778CC;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_086778E8;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677904;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677920;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_0867793C;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677958;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677974;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677990;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_086779AC;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_086779C8;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_086779E4;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_StatScreenItems_ItemA;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677A1C;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677A38;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677A54;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677A70;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677A8C;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677AA8;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677AC4;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677AE0;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677AFC;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677B18;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677B34;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677B50;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677B6C;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677B88;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_StatScreenWeaponExp_WExpA;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677BC0;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677BDC;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677BF8;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677C14;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677C30;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_BpShort_Hp;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677C68;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677C84;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677CA0;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677CBC;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677CD8;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_BpLarge_Hp;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677D10;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677D2C;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677D48;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677D64;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677D80;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_08677D9C;
diff --git a/include/icon.h b/include/icon.h
deleted file mode 100644
index ccad918..0000000
--- a/include/icon.h
+++ /dev/null
@@ -1,11 +0,0 @@
-#pragma once
-
-#include "gba/gba.h"
-
-void InitIcons(void);
-void ClearIcons(void);
-void ApplyIconPalettes(int palid);
-void ApplyIconPalette(int num, int palid);
-void PutIcon(u16 * tm, int icon, int tileref);
-void ClearIcon(int icon);
-void PutIconObjImg(int icon, int chr);
diff --git a/include/irq.h b/include/irq.h
index dfbd702..1f91cd0 100644
--- a/include/irq.h
+++ b/include/irq.h
@@ -1,9 +1,8 @@
 #pragma once
 
-#include "gba/gba.h"
+#include "global.h"
 
-enum
-{
+enum intr_index {
     // TODO: INT constants
 
     INT_VBLANK = 0,
@@ -16,6 +15,5 @@ enum
 typedef void (* IrqFunc)(void);
 
 void IrqMain(void);
-
 void IrqInit(void);
 void SetIrqFunc(int num, IrqFunc func);
diff --git a/include/item.h b/include/item.h
deleted file mode 100644
index 5461cce..0000000
--- a/include/item.h
+++ /dev/null
@@ -1,256 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "text.h"
-#include "unit.h"
-
-enum
-{
-    ITEM_KIND_SWORD,
-    ITEM_KIND_LANCE,
-    ITEM_KIND_AXE,
-    ITEM_KIND_BOW,
-    ITEM_KIND_STAFF,
-    ITEM_KIND_ANIMA,
-    ITEM_KIND_LIGHT,
-    ITEM_KIND_ELDER,
-
-    ITEM_KIND_UNK8,
-    ITEM_KIND_ITEM,
-    ITEM_KIND_DRAGON,
-    ITEM_KIND_DRAGONSTONE,
-
-    ITEM_KIND_INVALID = 0xFF,
-};
-
-enum
-{
-    // Item attribute flags
-
-    ITEM_ATTR_WEAPON = (1 << 0),
-    ITEM_ATTR_MAGIC = (1 << 1),
-    ITEM_ATTR_STAFF = (1 << 2),
-    ITEM_ATTR_UNBREAKABLE = (1 << 3),
-    ITEM_ATTR_IMPORTANT = (1 << 4),
-    ITEM_ATTR_BRAVE = (1 << 5),
-    ITEM_ATTR_LIGHTBRAND = (1 << 6),
-    ITEM_ATTR_UNCOUNTERABLE = (1 << 7),
-    ITEM_ATTR_REVERTS_TRIANGLE = (1 << 8),
-    ITEM_ATTR_UNREPAIRABLE = (1 << 9),
-    ITEM_ATTR_LOCK_DRAGON = (1 << 10),
-    ITEM_ATTR_LOCK_ROY = (1 << 11),
-    ITEM_ATTR_LOCK_MYRM = (1 << 12),
-    ITEM_ATTR_LOCK_ZEPHIEL = (1 << 13),
-    ITEM_ATTR_DELPHI_SHIELD = (1 << 14),
-
-    // Helpers
-    ITEM_ATTR_REQUIRES_EXP = ITEM_ATTR_WEAPON + ITEM_ATTR_STAFF,
-    ITEM_ATTR_LOCK_ANY = ITEM_ATTR_LOCK_ROY + ITEM_ATTR_LOCK_MYRM + ITEM_ATTR_LOCK_ZEPHIEL + ITEM_ATTR_LOCK_DRAGON,
-};
-
-enum
-{
-    ITEM_EFFECT_01 = 0x01,
-    ITEM_EFFECT_02 = 0x02,
-    ITEM_EFFECT_03 = 0x03,
-    ITEM_EFFECT_04 = 0x04,
-    ITEM_EFFECT_05 = 0x05,
-    ITEM_EFFECT_06 = 0x06,
-    ITEM_EFFECT_07 = 0x07,
-    ITEM_EFFECT_08 = 0x08,
-    ITEM_EFFECT_09 = 0x09,
-    ITEM_EFFECT_0A = 0x0A,
-    ITEM_EFFECT_0B = 0x0B,
-    ITEM_EFFECT_0C = 0x0C,
-    ITEM_EFFECT_0D = 0x0D,
-    ITEM_EFFECT_0E = 0x0E,
-    ITEM_EFFECT_0F = 0x0F,
-    ITEM_EFFECT_10 = 0x10,
-    ITEM_EFFECT_11 = 0x11,
-    ITEM_EFFECT_12 = 0x12,
-    ITEM_EFFECT_13 = 0x13,
-    ITEM_EFFECT_14 = 0x14,
-    ITEM_EFFECT_15 = 0x15,
-    ITEM_EFFECT_16 = 0x16,
-    ITEM_EFFECT_17 = 0x17,
-    ITEM_EFFECT_18 = 0x18,
-    ITEM_EFFECT_19 = 0x19,
-    ITEM_EFFECT_1A = 0x1A,
-    ITEM_EFFECT_1B = 0x1B,
-    ITEM_EFFECT_1C = 0x1C,
-    ITEM_EFFECT_1D = 0x1D,
-    ITEM_EFFECT_1E = 0x1E,
-    ITEM_EFFECT_1F = 0x1F,
-    ITEM_EFFECT_20 = 0x20,
-    ITEM_EFFECT_21 = 0x21,
-    ITEM_EFFECT_22 = 0x22,
-    ITEM_EFFECT_23 = 0x23,
-    ITEM_EFFECT_24 = 0x24,
-    ITEM_EFFECT_25 = 0x25,
-    ITEM_EFFECT_26 = 0x26,
-    ITEM_EFFECT_27 = 0x27,
-    ITEM_EFFECT_28 = 0x28,
-    ITEM_EFFECT_29 = 0x29,
-};
-
-enum
-{
-    // Weapon level ids
-
-    WPN_LEVEL_0 = 0,
-    WPN_LEVEL_E = 1,
-    WPN_LEVEL_D = 2,
-    WPN_LEVEL_C = 3,
-    WPN_LEVEL_B = 4,
-    WPN_LEVEL_A = 5,
-    WPN_LEVEL_S = 6,
-};
-
-enum
-{
-    // Weapon exp needed to have a given weapon level
-
-    WEXP_0 = 0,
-    WEXP_E = 1,
-    WEXP_D = 51,
-    WEXP_C = 101,
-    WEXP_B = 151,
-    WEXP_A = 201,
-    WEXP_S = 251,
-};
-
-enum
-{
-    // Unit ranges are a (sometimes) weirdly hardcoded.
-    // A bitset value is used to represent the combined ranges of a unit's usable items
-    // That's what those "reaches" bits are for.
-
-    REACH_NONE   = 0,
-
-    REACH_RANGE1 = (1 << 0),
-    REACH_RANGE2 = (1 << 1),
-    REACH_RANGE3 = (1 << 2),
-    REACH_TO10   = (1 << 3),
-    REACH_TO15   = (1 << 4),
-    REACH_TOMAG  = (1 << 5),
-};
-
-enum
-{
-    WEAPON_EFFECT_POISON = 1,
-    WEAPON_EFFECT_NOSFERATU = 2,
-    WEAPON_EFFECT_ECLIPSE = 3,
-    WEAPON_EFFECT_DEVIL = 4,
-};
-
-struct ItemBonuses
-{
-    /* 00 */ i8 hp;
-    /* 01 */ i8 pow;
-    /* 02 */ i8 skl;
-    /* 03 */ i8 spd;
-    /* 04 */ i8 def;
-    /* 05 */ i8 res;
-    /* 06 */ i8 lck;
-    /* 07 */ i8 mov;
-    /* 08 */ i8 con;
-};
-
-struct IInfo
-{
-    /* 00 */ u16 msg_name;
-    /* 02 */ u16 msg_desc;
-    /* 04 */ u16 msg_desc_use;
-    /* 06 */ u8 id;
-    /* 07 */ u8 kind;
-    /* 08 */ u16 attributes;
-    /* 0A */ // pad
-    /* 0C */ struct ItemBonuses const * bonuses;
-    /* 10 */ u8 const * effectiveness;
-    /* 14 */ u8 uses;
-    /* 15 */ u8 might;
-    /* 16 */ u8 hit;
-    /* 17 */ u8 weight;
-    /* 18 */ u8 crit;
-    /* 19 */ u8 encoded_range;
-    /* 1A */ u16 cost_per_use;
-    /* 1C */ u8 required_wexp;
-    /* 1D */ u8 icon;
-    /* 1E */ u8 item_effect;
-    /* 1F */ u8 weapon_effect;
-};
-
-int GetItemIid(int item);
-char const * GetItemName(int item);
-int GetItemDescMsg(int item);
-int GetItemUseDescMsg(int item);
-int GetItemKind(int item);
-int GetItemAttributes(int item);
-int GetItemUses(int item);
-int GetItemMaxUses(int item);
-int GetItemMight(int item);
-int GetItemHit(int item);
-int GetItemWeight(int item);
-int GetItemCrit(int item);
-int GetItemValue(int item);
-int GetItemMinRange(int item);
-int GetItemMaxRange(int item);
-int GetItemEncodedRange(int item);
-int GetItemRequiredExp(int item);
-u8 const * GetItemEffectiveness(int item);
-struct ItemBonuses const * GetItemBonuses(int item);
-int GetItemIcon(int item);
-int GetItemWeaponEffect(int item);
-int GetItemEffect(int item);
-int GetItemCostPerUse(int item);
-int GetItemMaxValue(int item);
-int GetItemHpBonus(int item);
-int GetItemPowBonus(int item);
-int GetItemSklBonus(int item);
-int GetItemSpdBonus(int item);
-int GetItemDefBonus(int item);
-int GetItemResBonus(int item);
-int GetItemLckBonus(int item);
-int CreateItem(int item);
-bool CanUnitUseWeapon(struct Unit * unit, int item);
-bool CanUnitUseStaff(struct Unit * unit, int item);
-void func_fe6_08016694(struct Text * text, int item, bool is_usable, u16 * tm);
-void func_fe6_08016720(struct Text * text, int item, bool is_usable, u16 * tm);
-void func_fe6_080167E4(struct Text * text, int item, u16 * tm);
-void func_fe6_08016860(struct Text * text, int item, bool is_usable, u16 * tm);
-u16 GetItemAfterUse(int item);
-u16 GetUnitEquippedWeapon(struct Unit * unit);
-int GetUnitEquippedWeaponSlot(struct Unit * unit);
-bool CanItemReachDistance(int item, int distance);
-void UnitEquipItemSlot(struct Unit * unit, int item_slot);
-bool IsItemEffectiveAgainst(u16 item, struct Unit * unit);
-char const * GetItemRangeString(int item);
-int GetWeaponLevelFromExp(int wexp);
-char const * GetWeaponLevelStringFromExp(int wexp);
-int GetWeaponLevelSpecialCharFromExp(int wexp);
-char const * GetItemKindString(int kind);
-bool IsItemDisplayUseable(struct Unit * unit, int item);
-bool Unused_08016C50(struct Unit * unit, int item);
-int GetUnitItemHealAmount(struct Unit * unit, int item);
-int FindUnitItemSlot(struct Unit * unit, int iid);
-bool IsItemStealable(int item);
-bool IsItemRepairable(int item);
-int GetItemReach(int item);
-int GetUnitWeaponReach(struct Unit * unit, int item_slot);
-int GetUnitItemUseReach(struct Unit * unit, int item_slot);
-int GetUnitStaffReach(struct Unit * unit);
-int GetTotalConvoyItemsValue(void);
-int GetTotalUnitItemsValue(void);
-int func_fe6_08017104(void);
-
-enum { ITEM_USES_SHIFT = 8 };
-
-#define ITEM_IID(item) ((item) & ((1 << ITEM_USES_SHIFT) - 1))
-#define ITEM_USES(item) ((item) >> ITEM_USES_SHIFT)
-
-// dummy macro for when the game confuses the two
-#define ITEM_FROM_IID(iid) (iid)
-
-// pretending to be reasonable
-#define ITEM_KIND_DARK ITEM_KIND_ELDER
diff --git a/include/itemaction.h b/include/itemaction.h
deleted file mode 100644
index 8c7694b..0000000
--- a/include/itemaction.h
+++ /dev/null
@@ -1,24 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-void DoItemHealStaffAction(ProcPtr proc);
-void DoItemRestoreStaffAction(ProcPtr proc);
-void DoItemBarrierStaffAction(ProcPtr proc);
-void DoItemRescueStaffAction(ProcPtr proc);
-void DoItemWarpStaffAction(ProcPtr proc);
-void DoItemAttackStaffAction(ProcPtr proc);
-void DoItemFortifyStaffAction(ProcPtr proc);
-void DoItemUnlockStaffAction(ProcPtr proc);
-void DoItemRepairStaffAction(ProcPtr proc);
-void DoItemSaintStaffAction(ProcPtr proc);
-void DoItemHealSelfAction(ProcPtr proc, int amount);
-void DoItemElixirAction(ProcPtr proc);
-void DoItemPureWaterAction(ProcPtr proc);
-void DoItemTorchAction(ProcPtr proc);
-void DoItemAntitoxinAction(ProcPtr proc);
-void DoItemKeyAction(void);
-void DoItemPromoteAction(void);
-void func_fe6_08027DB4(struct Unit * unit, int item);
-void DoItemStatBoostAction(ProcPtr proc);
-void DoItemAction(ProcPtr proc);
diff --git a/include/itemuse.h b/include/itemuse.h
deleted file mode 100644
index 713d078..0000000
--- a/include/itemuse.h
+++ /dev/null
@@ -1,50 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "unit.h"
-#include "mapselect.h"
-
-bool CanUnitUseItem(struct Unit * unit, int item);
-int GetUnitItemCantUseMsg(struct Unit * unit, int item);
-void DoUseUnitItem(struct Unit * unit, int item);
-
-bool CanUnitUseHealItem(struct Unit * unit);
-bool CanUnitUseBindingBladeToHeal(struct Unit * unit);
-bool CanUnitUsePureWaterItem(struct Unit * unit);
-bool CanUnitUseTorchItem(struct Unit * unit);
-bool CanUnitUseAntitoxinItem(struct Unit * unit);
-bool CanUnitUseChestKeyItem(struct Unit * unit);
-bool CanUnitUseDoorKeyItem(struct Unit * unit);
-bool CanUnitUseBridgeKeyItem(struct Unit * unit);
-bool CanUnitUseLockpickItem(struct Unit * unit);
-bool CanUnitUsePromotionItem(struct Unit * unit, int item);
-bool CanUnitUseStatGainItem(struct Unit * unit, int item);
-
-void DoUseRescueStaff(struct Unit * unit, void (* list_targets)(struct Unit * unit));
-void DoUseWarpStaff(struct Unit * unit);
-void DoUseUnlockStaff(struct Unit * unit, void (* list_targets)(struct Unit * unit));
-void DoUseRepairStaff(struct Unit * unit);
-void DoUseHealStaff(struct Unit * unit, void (* list_targets)(struct Unit * unit));
-void DoUseRestoreStaff(struct Unit * unit, void (* list_targets)(struct Unit * unit));
-void DoUseBarrierStaff(struct Unit * unit);
-void DoUseAttackStaff(struct Unit * unit, void (* list_targets)(struct Unit * unit));
-
-fu8 StaffMapSelect_Select(struct MapSelectProc * proc, struct SelectTarget * target);
-fu8 WarpMapSelect_Select(struct MapSelectProc * proc, struct SelectTarget * target);
-fu8 UnlockMapSelect_Select(struct MapSelectProc * proc, struct SelectTarget * target);
-fu8 RepairMapSelect_Select(struct MapSelectProc * proc, struct SelectTarget * target);
-fu8 RepairMapSelect_SwitchIn(struct MapSelectProc * proc, struct SelectTarget * target);
-void RepairMapSelect_Init(struct MapSelectProc * proc);
-fu8 RepairItemMenu_Entry_SwitchIn(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 RepairItemMenu_Entry_SwitchOut(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 RepairItemMenu_Entry_Available(struct MenuEntInfo const * info, int id);
-u32 RepairItemMenu_Entry_Display(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 RepairItemMenu_Entry_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-int RestoreMapSelect_Init(struct MapSelectProc * proc);
-fu8 RestoreMapSelect_SwitchIn(struct MapSelectProc * proc, struct SelectTarget * target);
-int BarrierMapSelect_Init(struct MapSelectProc * proc);
-fu8 BarrierMapSelect_SwitchIn(struct MapSelectProc * proc, struct SelectTarget * target);
-int AttackStaffMapSelect_Init(struct MapSelectProc * proc, struct SelectTarget * target);
-fu8 AttackStaffMapSelect_SwitchIn(struct MapSelectProc * proc, struct SelectTarget * target);
-void SubtitleMapSelect_End(struct MapSelectProc * proc);
diff --git a/include/m4a.h b/include/m4a.h
deleted file mode 100644
index 99124d1..0000000
--- a/include/m4a.h
+++ /dev/null
@@ -1,405 +0,0 @@
-#pragma once
-
-#include "types.h"
-
-struct WaveData;
-struct ToneData;
-struct CgbChannel;
-struct SoundChannel;
-struct SoundInfo;
-struct Song;
-struct MusicPlayerTrack;
-struct MusicPlayer;
-struct MusicPlayerEnt;
-struct SongEnt;
-
-typedef void (* MPlayFunc)();
-typedef void (* PlyNoteFunc)(u32, struct MusicPlayer *, struct MusicPlayerTrack *);
-typedef void (* CgbSoundFunc)(void);
-typedef void (* CgbOscOffFunc)(u8);
-typedef u32 (* MidiKeyToCgbFreqFunc)(u8, u8, u8);
-typedef void (* ExtVolPitFunc)(void);
-typedef void (* MPlayMainFunc)(struct MusicPlayer *);
-
-// ASCII encoding of 'Smsh' in reverse
-// This is presumably short for SMASH, the developer of MKS4AGB.
-enum { ID_NUMBER = 0x68736D53 };
-
-enum { C_V = 0x40 }; // center value for PAN, BEND, and TUNE
-
-enum
-{
-    SOUND_MODE_REVERB_VAL   = 0x0000007F,
-    SOUND_MODE_REVERB_SET   = 0x00000080,
-    SOUND_MODE_MAXCHN       = 0x00000F00,
-    SOUND_MODE_MAXCHN_SHIFT = 8,
-    SOUND_MODE_MASVOL       = 0x0000F000,
-    SOUND_MODE_MASVOL_SHIFT = 12,
-    SOUND_MODE_FREQ_05734   = 0x00010000,
-    SOUND_MODE_FREQ_07884   = 0x00020000,
-    SOUND_MODE_FREQ_10512   = 0x00030000,
-    SOUND_MODE_FREQ_13379   = 0x00040000,
-    SOUND_MODE_FREQ_15768   = 0x00050000,
-    SOUND_MODE_FREQ_18157   = 0x00060000,
-    SOUND_MODE_FREQ_21024   = 0x00070000,
-    SOUND_MODE_FREQ_26758   = 0x00080000,
-    SOUND_MODE_FREQ_31536   = 0x00090000,
-    SOUND_MODE_FREQ_36314   = 0x000A0000,
-    SOUND_MODE_FREQ_40137   = 0x000B0000,
-    SOUND_MODE_FREQ_42048   = 0x000C0000,
-    SOUND_MODE_FREQ         = 0x000F0000,
-    SOUND_MODE_FREQ_SHIFT   = 16,
-    SOUND_MODE_DA_BIT_9     = 0x00800000,
-    SOUND_MODE_DA_BIT_8     = 0x00900000,
-    SOUND_MODE_DA_BIT_7     = 0x00A00000,
-    SOUND_MODE_DA_BIT_6     = 0x00B00000,
-    SOUND_MODE_DA_BIT       = 0x00B00000,
-    SOUND_MODE_DA_BIT_SHIFT = 20,
-};
-
-struct WaveData
-{
-    /* +00 */ u16 kind;
-    /* +02 */ u16 status;
-    /* +04 */ u32 freq;
-    /* +08 */ u32 loop_start;
-    /* +0C */ u32 size; // number of samples
-    /* +10 */ i8 data[1]; // samples
-};
-
-enum
-{
-    TONEDATA_TYPE_CGB    = 0x07,
-    TONEDATA_TYPE_FIX    = 0x08,
-    TONEDATA_TYPE_SPL    = 0x40, // key split
-    TONEDATA_TYPE_RHY    = 0x80, // rhythm
-
-    TONEDATA_P_S_PAN     = 0xc0,
-    TONEDATA_P_S_PAM     = TONEDATA_P_S_PAN,
-};
-
-struct ToneData
-{
-    /* +00 */ u8 kind;
-    /* +01 */ u8 key;
-    /* +02 */ u8 length; // sound length (compatible sound)
-    /* +03 */ u8 pan_sweep; // pan or sweep (compatible sound ch. 1)
-    /* +04 */ struct WaveData * wav;
-    /* +08 */ u8 attack;
-    /* +09 */ u8 decay;
-    /* +0A */ u8 sustain;
-    /* +0B */ u8 release;
-};
-
-enum
-{
-    SOUND_CHANNEL_SF_START       = 0x80,
-    SOUND_CHANNEL_SF_STOP        = 0x40,
-    SOUND_CHANNEL_SF_LOOP        = 0x10,
-    SOUND_CHANNEL_SF_IEC         = 0x04,
-    SOUND_CHANNEL_SF_ENV         = 0x03,
-    SOUND_CHANNEL_SF_ENV_ATTACK  = 0x03,
-    SOUND_CHANNEL_SF_ENV_DECAY   = 0x02,
-    SOUND_CHANNEL_SF_ENV_SUSTAIN = 0x01,
-    SOUND_CHANNEL_SF_ENV_RELEASE = 0x00,
-    SOUND_CHANNEL_SF_ON = (SOUND_CHANNEL_SF_START | SOUND_CHANNEL_SF_STOP | SOUND_CHANNEL_SF_IEC | SOUND_CHANNEL_SF_ENV),
-};
-
-enum
-{
-    CGB_CHANNEL_MO_PIT = 0x02,
-    CGB_CHANNEL_MO_VOL = 0x01,
-};
-
-enum
-{
-    CGB_NRx2_ENV_DIR_DEC = 0x00,
-    CGB_NRx2_ENV_DIR_INC = 0x08,
-};
-
-struct CgbChannel
-{
-    /* +00 */ u8 flags;
-    /* +01 */ u8 type;
-    /* +02 */ u8 volume_right;
-    /* +03 */ u8 volume_left;
-    /* +04 */ u8 attack;
-    /* +05 */ u8 decay;
-    /* +06 */ u8 sustain;
-    /* +07 */ u8 release;
-    /* +08 */ u8 key;
-    /* +09 */ u8 envelope_volume;
-    /* +0A */ u8 envelope_goal;
-    /* +0B */ u8 envelope_counter;
-    /* +0C */ u8 pseudo_echo_volume;
-    /* +0D */ u8 pseudo_echo_length;
-    /* +0E */ u8 dummy1;
-    /* +0F */ u8 dummy2;
-    /* +10 */ u8 gate_time;
-    /* +11 */ u8 midi_key;
-    /* +12 */ u8 velocity;
-    /* +13 */ u8 priority;
-    /* +14 */ u8 rhythm_pan;
-    /* +15 */ u8 dummy3[3];
-    /* +18 */ u8 dummy5;
-    /* +19 */ u8 sustain_goal;
-    /* +1A */ u8 n4; // NR[1-4]4 register (initial, length bit)
-    /* +1B */ u8 pan;
-    /* +1C */ u8 pan_mask;
-    /* +1D */ u8 modify;
-    /* +1E */ u8 length;
-    /* +1F */ u8 sweep;
-    /* +20 */ u32 frequency;
-    /* +24 */ u32 * wav; // instructs CgbMain to load targeted wave
-    /* +28 */ u32 * current_ptr; // stores the currently loaded wave
-    /* +2C */ struct MusicPlayerTrack * track;
-    /* +30 */ void * prev_channel_ptr;
-    /* +34 */ void * next_channel_ptr;
-    /* +38 */ u8 dummy4[8];
-};
-
-struct SoundChannel
-{
-    /* +00 */ u8 flags;
-    /* +01 */ u8 type;
-    /* +02 */ u8 volume_right;
-    /* +03 */ u8 volume_left;
-    /* +04 */ u8 attack;
-    /* +05 */ u8 decay;
-    /* +06 */ u8 sustain;
-    /* +07 */ u8 release;
-    /* +08 */ u8 key; // midi key as it was translated into final pitch
-    /* +09 */ u8 envelope_volume;
-    /* +0A */ u8 envelope_volume_right;
-    /* +0B */ u8 envelope_volume_left;
-    /* +0C */ u8 pseudo_echo_volume;
-    /* +0D */ u8 pseudo_echo_length;
-    /* +0E */ u8 dummy1;
-    /* +0F */ u8 dummy2;
-    /* +10 */ u8 gate_time;
-    /* +11 */ u8 midi_key; // midi key as it was used in the track data
-    /* +12 */ u8 velocity;
-    /* +13 */ u8 priority;
-    /* +14 */ u8 rhythm_pan;
-    /* +15 */ u8 dummy3[3];
-    /* +18 */ u32 count;
-    /* +1C */ u32 fw;
-    /* +20 */ u32 frequency;
-    /* +24 */ struct WaveData * wav;
-    /* +28 */ i8 * current_ptr;
-    /* +2C */ struct MusicPlayerTrack * track;
-    /* +30 */ void * prev_channel_ptr;
-    /* +34 */ void * next_channel_ptr;
-    /* +38 */ u32 dummy4;
-    /* +3C */ u16 xpi;
-    /* +3E */ u16 xpc;
-};
-
-enum { MAX_DIRECTSOUND_CHANNELS = 12 };
-
-enum { PCM_DMA_BUF_SIZE = 1584 }; // size of Direct Sound buffer
-
-struct SoundInfo
-{
-    // This field is normally equal to ID_NUMBER but it is set to other
-    // values during sensitive operations for locking purposes.
-    // This field should be volatile but isn't. This could potentially cause
-    // race conditions.
-    /* +000 */ u32 ident;
-
-    /* +004 */ u8 volatile pcm_dma_counter;
-
-    // Direct Sound
-    /* +005 */ u8 reverb;
-    /* +006 */ u8 max_channels;
-    /* +007 */ u8 master_volume;
-    /* +008 */ u8 freq;
-
-    /* +009 */ u8 mode;
-    /* +00A */ u8 c15; // periodically counts from 14 down to 0 (15 states)
-    /* +00B */ u8 pcm_dma_period; // number of V-blanks per PCM DMA
-    /* +00C */ u8 max_lines;
-    /* +00D */ u8 gap[3];
-    /* +010 */ i32 pcm_samples_per_vblank;
-    /* +014 */ i32 pcm_freq;
-    /* +018 */ i32 div_freq;
-    /* +01C */ struct CgbChannel * cgb_channels;
-    /* +020 */ MPlayMainFunc mplay_head_func;
-    /* +024 */ struct MusicPlayer * mplay_head;
-    /* +028 */ CgbSoundFunc cgb_sound_func;
-    /* +02C */ CgbOscOffFunc cgb_osc_off_func;
-    /* +030 */ MidiKeyToCgbFreqFunc midi_to_cgb_func;
-    /* +034 */ MPlayFunc * mplay_jump_table;
-    /* +038 */ PlyNoteFunc plynote;
-    /* +03C */ ExtVolPitFunc ext_vol_pit_func;
-    /* +040 */ u8 gap2[16];
-    /* +060 */ struct SoundChannel chans[MAX_DIRECTSOUND_CHANNELS];
-    /* +360 */ i8 pcm_buffer[PCM_DMA_BUF_SIZE * 2];
-};
-
-struct Song
-{
-    /* +00 */ u8 track_count;
-    /* +01 */ u8 block_count;
-    /* +02 */ u8 priority;
-    /* +03 */ u8 reverb;
-    /* +04 */ struct ToneData * tone;
-    /* +08 */ u8 * part[1];
-};
-
-enum
-{
-    MPT_FLG_VOLSET = 0x01,
-    MPT_FLG_VOLCHG = 0x03,
-    MPT_FLG_PITSET = 0x04,
-    MPT_FLG_PITCHG = 0x0C,
-    MPT_FLG_START  = 0x40,
-    MPT_FLG_EXIST  = 0x80,
-};
-
-struct MusicPlayerTrack
-{
-    /* +00 */ u8 flags;
-    /* +01 */ u8 wait;
-    /* +02 */ u8 patternLevel;
-    /* +03 */ u8 repN;
-    /* +04 */ u8 gate_time;
-    /* +05 */ u8 key;
-    /* +06 */ u8 velocity;
-    /* +07 */ u8 running_status;
-    /* +08 */ u8 key_m;
-    /* +09 */ u8 pit_m;
-    /* +0A */ i8 key_shift;
-    /* +0B */ i8 key_shift_x;
-    /* +0C */ i8 tune;
-    /* +0D */ u8 pit_x;
-    /* +0E */ i8 bend;
-    /* +0F */ u8 bend_range;
-    /* +10 */ u8 vol_mr;
-    /* +11 */ u8 vol_ml;
-    /* +12 */ u8 vol;
-    /* +13 */ u8 vol_x;
-    /* +14 */ i8 pan;
-    /* +15 */ i8 panX;
-    /* +16 */ i8 mod_m;
-    /* +17 */ u8 mod;
-    /* +18 */ u8 mod_t;
-    /* +19 */ u8 lfo_speed;
-    /* +1A */ u8 lfo_speed_c;
-    /* +1B */ u8 lfo_delay;
-    /* +1C */ u8 lfo_delay_c;
-    /* +1D */ u8 priority;
-    /* +1E */ u8 pseudo_echo_volume;
-    /* +1F */ u8 pseudo_echo_length;
-    /* +20 */ struct SoundChannel * chan;
-    /* +24 */ struct ToneData tone;
-    /* +30 */ u8 gap[10];
-    /* +3A */ u16 unk_3A;
-    /* +3C */ u32 unk_3C;
-    /* +40 */ u8 * cmd_ptr;
-    /* +44 */ u8 * pattern_stack[3];
-};
-
-enum
-{
-    MUSICPLAYER_STATUS_TRACK = 0x0000ffff,
-    MUSICPLAYER_STATUS_PAUSE = 0x80000000,
-};
-
-enum { MAX_MUSICPLAYER_TRACKS = 16 };
-
-enum { TRACKS_ALL = 0xFFFF };
-
-enum
-{
-    TEMPORARY_FADE = 0x0001,
-    FADE_IN        = 0x0002,
-    FADE_VOL_MAX   = 64,
-    FADE_VOL_SHIFT = 2,
-};
-
-struct MusicPlayer
-{
-    /* +00 */ struct Song const * song;
-    /* +04 */ u32 status;
-    /* +08 */ u8 track_count;
-    /* +09 */ u8 priority;
-    /* +0A */ u8 cmd;
-    /* +0B */ u8 unk_B;
-    /* +0C */ u32 clock;
-    /* +10 */ u8 gap[8];
-    /* +18 */ u8 * mem_acc_area;
-    /* +1C */ u16 tempo_d;
-    /* +1E */ u16 tempo_u;
-    /* +20 */ u16 tempo_i;
-    /* +22 */ u16 tempo_c;
-    /* +24 */ u16 fade_oi;
-    /* +26 */ u16 fade_oc;
-    /* +28 */ u16 fade_ov;
-    /* +2C */ struct MusicPlayerTrack * tracks;
-    /* +30 */ struct ToneData * tone;
-    /* +34 */ u32 ident;
-    /* +38 */ MPlayMainFunc next_func;
-    /* +3C */ struct MusicPlayer * next;
-};
-
-struct MusicPlayerEnt
-{
-    /* +00 */ struct MusicPlayer * music_player;
-    /* +04 */ struct MusicPlayerTrack * track;
-    /* +08 */ u8 num_tracks;
-    /* +0A */ u16 unk_A;
-};
-
-struct SongEnt
-{
-    /* +00 */ struct Song const * song;
-    /* +04 */ u16 ms;
-    /* +06 */ u16 me;
-};
-
-extern struct MusicPlayerEnt const gMusicPlayerTable[];
-extern struct SongEnt const gSongTable[];
-
-void m4aSoundInit(void);
-void m4aSoundMode(u32 mode);
-void m4aSoundMain(void);
-void m4aSoundVSync(void);
-void m4aSoundVSyncOn(void);
-void m4aSoundVSyncOff(void);
-void m4aSongNumStart(u16 n);
-void m4aSongNumStartOrChange(u16 n);
-void m4aSongNumStartOrContinue(u16 n);
-void m4aSongNumStop(u16 n);
-void m4aMPlayAllStop(void);
-void m4aMPlayStart(struct MusicPlayer * music_player, struct Song const * song);
-void m4aMPlayStop(struct MusicPlayer * music_player);
-void m4aMPlayContinue(struct MusicPlayer * music_player);
-void m4aMPlayFadeOut(struct MusicPlayer * music_player, u16 speed);
-void m4aMPlayFadeOutTemporarily(struct MusicPlayer * music_player, u16 speed);
-void m4aMPlayFadeIn(struct MusicPlayer * music_player, u16 speed);
-void m4aMPlayImmInit(struct MusicPlayer * music_player);
-void m4aMPlayTempoControl(struct MusicPlayer * music_player, u16 tempo);
-void m4aMPlayVolumeControl(struct MusicPlayer * music_player, u16 track_bits, u16 volume);
-void m4aMPlayPitchControl(struct MusicPlayer * music_player, u16 track_bits, i16 pitch);
-void m4aMPlayPanpotControl(struct MusicPlayer * music_player, u16 track_bits, i8 pan);
-void m4aMPlayModDepthSet(struct MusicPlayer * music_player, u16 track_bits, u8 mod_depth);
-void m4aMPlayLFOSpeedSet(struct MusicPlayer * music_player, u16 track_bits, u8 lfo_speed);
-
-// TODO: move elsewhere
-
-enum
-{
-    SOUND_MODE = SOUND_MODE_DA_BIT_8
-        | SOUND_MODE_FREQ_13379
-        | (13 << SOUND_MODE_MASVOL_SHIFT)
-        | (7 << SOUND_MODE_MAXCHN_SHIFT),
-};
-
-extern char gNumMusicPlayers[];
-extern char gMaxLines[];
-
-#define NUM_MUSIC_PLAYERS ((u16) (uptr) gNumMusicPlayers)
-#define MAX_LINES ((u32) (uptr) gMaxLines)
-
-// end TODO
diff --git a/include/manim.h b/include/manim.h
deleted file mode 100644
index c9ee5b1..0000000
--- a/include/manim.h
+++ /dev/null
@@ -1,372 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "unit.h"
-#include "battle.h"
-
-enum
-{
-    MANIM_FACING_OPPONENT,
-    MANIM_FACING_DEFAULT,
-    MANIM_FACING_UNKNOWN,
-};
-
-enum
-{
-    MANIM_KIND_DAMAGE = 0,
-    MANIM_KIND_STEAL = 1,
-    MANIM_KIND_REFRESH = 2,
-};
-
-struct MapAnimActor
-{
-    /* 00 */ struct Unit * unit;
-    /* 04 */ struct BattleUnit * bu;
-    /* 08 */ struct MuProc * mu;
-    /* 0C */ u8 hp_max;
-    /* 0D */ u8 hp_cur;
-    /* 0E */ u16 hp_displayed_q4;
-    /* 10 */ u8 hp_info_x;
-    /* 11 */ u8 hp_info_y;
-    /* 12 */ STRUCT_PAD(0x12, 0x14);
-};
-
-struct ManimSt
-{
-    /* 00 */ struct MapAnimActor actor[4];
-    /* 50 */ struct BattleHit * hit_it;
-    /* 54 */ struct ProcScr const * special_proc_scr;
-    /* 58 */ u8 attacker_actor;
-    /* 59 */ u8 defender_actor;
-    /* 5A */ u16 hit_attributes;
-    /* 5C */ u8 hit_info;
-    /* 5D */ i8 hit_damage;
-    /* 5E */ u8 main_actor_count;
-    /* 5F */ u8 hp_bar_busy;
-    /* 60 */ u8 unk_60;
-    /* 61 */ u8 unk_61;
-    /* 62 */ u8 manim_kind;
-};
-
-struct UnkSt_030046D0
-{
-    /* 00 */ u16 unk_00;
-    /* 02 */ u16 unk_02;
-    /* 04 */ STRUCT_PAD(0x04, 0x08);
-};
-
-void Manim_StoleItemPopup(ProcPtr proc);
-void Manim_WeaponBrokePopup(ProcPtr proc);
-bool ManimShouldBuDisplayWeaponBroke(struct BattleUnit * bu);
-void Manim_WeaponLevelGainedPopup(ProcPtr proc);
-bool ManimShouldBuDisplayWeaponLevelGained(struct BattleUnit * bu);
-void Manim_PrepareBattleTalk(ProcPtr proc);
-void Manim_Finish(ProcPtr proc);
-void PrepareManimHit(void);
-void Manim_NextHit(ProcPtr proc);
-void Manim_HitAnim(ProcPtr proc);
-void Manim_HitPoisonAnim(ProcPtr proc);
-void Manim_WatchActorA(ProcPtr proc);
-void Manim_WatchActorB(ProcPtr proc);
-void Manim_StartBattleDefeatTalk(ProcPtr proc);
-void Manim_StartDeathFade(ProcPtr proc);
-void Manim_ExpBar(ProcPtr proc);
-void Manim_OpenInfoWindow(ProcPtr proc);
-void Manim_StartBattleTalk(ProcPtr proc);
-// ManimActorTransformAnim
-void Manim_TransformAnim(ProcPtr proc);
-void Manim_StealSe(void);
-// InitManimActor
-void SetManimActorFacing(int actor_num, int opponent_actor_num, int manim_facing);
-void InitManimActorFacings(void);
-void SortManimMuLayers(void);
-void StartPoisonDamageManim(void);
-void StartTrapDamageManim(void);
-void StartStealManim(void);
-// StartRefreshManim
-void StartBattleManim(void);
-void InitManimHits(struct BattleUnit * bu_a, struct BattleUnit * bu_b, struct BattleHit * battle_hits);
-void InitManimActors(struct BattleUnit * bu_a, struct BattleUnit * bu_b, struct BattleHit * battle_hits);
-int GetFacingFromTo(int xa, int ya, int xb, int yb);
-// UnpackManimWindowDigits
-// PutManimWindowNumber
-// UnpackManimWindowGraphics
-// PutManimWindowBarTile
-// PutManimWindowBar
-void EndManimInfoWindow(void);
-void StartManimInfoWindow(int x, int y, ProcPtr proc);
-// Manim_StartBattleTalk
-// ManimInfoWindow_Init
-// ManimInfoWindow_Loop
-// PutManimInfoWindowActorValues
-// GetUnitManimInfoFramePal
-// InitManimActorInfoWindow
-// ManimInfoWindow_OpenInit
-// ManimInfoWindow_OpenLoop
-// PutManimExpBar
-// ManimExpBar_Init
-// ManimExpBar_PlaySe
-// ManimExpBar_Fill
-// ManimExpBar_OpenInit
-// ManimExpBar_OpenLoop
-// ManimExpBar_LevelUp
-// StartDebugManim
-// PutManimDebugParamText
-// ManimDebug_Init
-// ManimDebug_Display
-// ManimDebug_Loop
-// ManimDebugInitBu
-bool ManimDebugInitBattleScr(void);
-// ManimDebug_StartBattleManim
-// StartManimMissTag
-// StartManimNoDamageTag
-// StartManimRubbleAnim
-// ManimRubbleAnim_Init
-void StartManimPoisonAnim(struct Unit * unit);
-// ManimPoisonAnim_Init
-// func_fe6_08064C50
-// func_fe6_08064CC0
-// func_fe6_08064DF8
-// func_fe6_08064F28
-// func_fe6_08064F4C
-// func_fe6_08064FD0
-void func_fe6_080650A4(int x, int y, int square_size, int freeze_duration, int fadeout_duration, ProcPtr parent);
-// func_fe6_080650F8
-// func_fe6_0806511C
-// func_fe6_08065140
-// func_fe6_080651E0
-// func_fe6_08065298
-// func_fe6_080652E0
-// func_fe6_080653BC
-// func_fe6_0806543C
-// func_fe6_08065540
-// func_fe6_08065608
-// func_fe6_08065674
-// func_fe6_08065694
-// func_fe6_080656F0
-// func_fe6_08065830
-// func_fe6_08065994
-// func_fe6_08065AF8
-// func_fe6_08065B90
-// func_fe6_08065C30
-// func_fe6_08065C9C
-// func_fe6_08065CF4
-// func_fe6_08065E08
-// func_fe6_08065E78
-// func_fe6_08065F9C
-// func_fe6_08066094
-// func_fe6_08066190
-// func_fe6_080661A4
-// func_fe6_08066214
-// func_fe6_08066294
-// func_fe6_08066300
-// func_fe6_0806631C
-// func_fe6_080663E0
-// func_fe6_08066484
-// func_fe6_08066544
-// func_fe6_080665E4
-// func_fe6_0806664C
-// func_fe6_08066678
-// func_fe6_0806671C
-// func_fe6_08066784
-// func_fe6_080667F0
-// func_fe6_08066830
-// func_fe6_0806686C
-// func_fe6_080668D8
-// func_fe6_080669BC
-// func_fe6_08066A48
-// func_fe6_08066AD4
-// func_fe6_08066B3C
-// func_fe6_08066C70
-// func_fe6_08066D5C
-// func_fe6_08066DFC
-// func_fe6_08066E64
-// func_fe6_08066F34
-// func_fe6_08066FD8
-// func_fe6_08067040
-// func_fe6_08067084
-// func_fe6_080670B8
-// func_fe6_080671F4
-// func_fe6_080672B0
-void func_fe6_08067324(void);
-void func_fe6_08067498(int bg, int x_inc, int y_inc, ProcPtr parent);
-// func_fe6_08067514
-// func_fe6_0806752C
-// PutManimLevelUpFrame
-// PutManimLevelUpStat
-int GetManimLevelUpStatGain(int actor_id, int stat_num);
-int GetManimLevelUpBaseStat(int actor_id, int stat_num);
-// ManimLevelUpStatGainLabel_Finish
-// StartManimLevelUpStatGainLabels
-// EndManimLevelUpStatGainLabels
-// StartManimLevelUpStatGainLabelAnim
-void StartManimLevelUp(int actor_id, ProcPtr parent);
-void InitManimLevelUpWindow(void);
-void ClearManimLevelUpWindow(void);
-// ManimLevelUp_InitMainScreen
-// ManimLevelUpLabelColor_Init
-// ManimLevelUpLabelColor_Loop
-// ManimLevelUp_ScrollIn
-// ManimLevelUp_ScrollOut
-// ManimLevelUp_PutStatGainLabels
-// ManimLevelUp_DimBgm
-// ManimLevelUp_StartLevelUpText
-// ManimLevelUp_EndLevelUpText
-// ManimLevelUp_RestoreBgm
-// func_fe6_080684D8
-// func_fe6_080684EC
-// func_fe6_08068524
-// func_fe6_08068578
-// func_fe6_080685B0
-// func_fe6_080685F0
-// func_fe6_08068608
-// func_fe6_08068628
-void func_fe6_080686D8(void);
-// func_fe6_08068704
-// func_fe6_0806875C
-// func_fe6_080687BC
-// func_fe6_08068858
-// func_fe6_08068938
-// func_fe6_080689F0
-// func_fe6_08068A1C
-struct ProcScr const * func_fe6_08068A48(void);
-// Manim_AttackerActionAnim
-// Manim_AttackerFaceDefenderDelayed
-void Manim_AttackerRefreshAnim(ProcPtr proc);
-void ManimAttackerDanceSe(void);
-void ManimAttackerPlaySe(void);
-void Manim_FreezeAttacker(ProcPtr proc);
-void Manim_AttackerSpeedUp(ProcPtr proc);
-// ManimShiftMuTowardsMu
-// ManimShiftMuAwayFromMu
-void Manim_ShiftAttackerTowardsDefender(ProcPtr proc);
-void Manim_ShiftAttackerAwayFromDefender(ProcPtr proc);
-void Manim_WatchAttacker(ProcPtr proc);
-void Manim_WatchDefender(ProcPtr proc);
-// func_fe6_08069028
-// Manim_HitImpact
-void ManimAnimateActorDamage(int actor_id, int damage);
-// Manim_AwaitDamageAnim
-// Manim_DefenderPoisonAnim
-// func_fe6_08069560
-// func_fe6_08069590
-// func_fe6_080695C0
-// func_fe6_080695F0
-// func_fe6_0806962C
-// func_fe6_08069668
-// func_fe6_080696A4
-// func_fe6_080696E0
-// func_fe6_0806971C
-// func_fe6_08069758
-// func_fe6_08069794
-// func_fe6_0806984C
-// func_fe6_0806988C
-// func_fe6_080698BC
-// func_fe6_080698E4
-// func_fe6_08069914
-// func_fe6_08069944
-// func_fe6_08069974
-// func_fe6_080699A4
-// func_fe6_080699D8
-// func_fe6_08069A0C
-// func_fe6_08069A40
-// func_fe6_08069AB4
-// func_fe6_08069B3C
-// func_fe6_08069B70
-// func_fe6_08069C04
-// func_fe6_08069C1C
-void InitScanlineEffect(void);
-void func_fe6_08069C74(void);
-void func_fe6_08069DA4(int x, int y, int arg_08);
-void func_fe6_08069DD8(void);
-void OnHBlank_WinHScanlines(void);
-void OnHBlank_08069E50(void);
-void OnHBlank_ManimFrameGradient(void);
-void OnHBlank_08069F58(void);
-void OnHBlank_08069FD8(void);
-void OnHBlank_0806A040(void);
-void StartManimFrameGradientScanlineEffect(u16 arg_0, u16 arg_1, u16 color_2, u16 color_3);
-void func_fe6_0806A218(u16 yStart, u16 yEnd, u16 arg_2, u16 arg_3);
-void func_fe6_0806A270(int x, int y, int a, int b, u8 const * unk);
-// PrepareSineWaveScanlineBuf
-// PrepareSineWaveScanlineBufExt
-void SwapScanlineBufs(void);
-void InitScanlineBuf(u16 * buf);
-void SetScanlineBufWinL(u16 * buf, int x, int y);
-void SetScanlineBufWinR(u16 * buf, int x, int y);
-void func_fe6_0806A51C(u16 * buf, int x, int y, int arg_0C);
-void PrepareGradientScanlineBuf(u16 * buf, u16 arg_02, u16 arg_04, u16 arg_06, u16 arg_30);
-// ManimShiftingSineWaveScanlineBuf_Init
-// ManimShiftingSineWaveScanlineBuf_Loop
-void func_fe6_0806A7AC(void);
-// func_fe6_0806A87C
-
-extern struct ProcScr CONST_DATA ProcScr_PoisonDamageManim[];
-extern struct ProcScr CONST_DATA ProcScr_TrapDamageManim[];
-extern struct ProcScr CONST_DATA ProcScr_StealManim[];
-extern struct ProcScr CONST_DATA ProcScr_RefreshManim[];
-extern struct ProcScr CONST_DATA ProcScr_BattleManim[];
-extern struct ProcScr CONST_DATA ProcScr_EndManim[];
-extern struct ProcScr CONST_DATA ProcScr_ManimInfoWindow[];
-extern struct ProcScr CONST_DATA ProcScr_ManimExpBar[];
-extern struct ProcScr CONST_DATA ProcScr_ManimDebug[];
-extern struct ProcScr CONST_DATA ProcScr_ManimRubbleAnim[];
-extern struct ProcScr CONST_DATA ProcScr_ManimPoisonAnim[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_0866514C[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08665194[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_086651AC[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_086651EC[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08665234[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08665254[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_0866528C[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_086652D4[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_0866531C[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08665344[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08665384[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_086653C4[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08665404[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08665454[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08665494[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_086654BC[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08665514[];
-extern struct ProcScr CONST_DATA ProcScr_ManimLevelUpStatGainLabel[];
-extern struct ProcScr CONST_DATA ProcScr_ManimLevelUpLabelColor[];
-extern struct ProcScr CONST_DATA ProcScr_ManimLevelUp[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08665684[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_0866569C[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_086656B4[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_086656CC[];
-extern struct ProcScr CONST_DATA ProcScr_DefaultManimRound[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_086657B4[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_0866582C[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08665874[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_086658BC[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08665914[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_0866596C[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_086659D4[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08665A3C[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08665AA4[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08665B0C[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08665B54[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08665BDC[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08665C7C[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08665D1C[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08665DBC[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08665E44[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08665ECC[];
-extern struct ProcScr CONST_DATA ProcScr_PoisonDamageManimHit[];
-extern struct ProcScr CONST_DATA ProcScr_TrapDamageManimHit[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08665F8C[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08666014[];
-extern struct ProcScr CONST_DATA ProcScr_ManimShiftingSineWaveScanlineBuf[];
-
-extern struct ManimSt EWRAM_DATA gManimSt;
-
-extern u16 EWRAM_DATA gManimScanlineBufA[DISPLAY_HEIGHT * 2];
-extern u16 EWRAM_DATA gManimScanlineBufB[DISPLAY_HEIGHT * 2];
-extern u16 * EWRAM_DATA gManimScanlineBufs[2];
-extern u16 * EWRAM_DATA gManimActiveScanlineBuf;
-
-extern struct UnkSt_030046D0 gUnk_030046D0[0x10];
-extern u16 gUnk_03004750[10 * 0x10];
diff --git a/include/map.h b/include/map.h
deleted file mode 100644
index 039ea24..0000000
--- a/include/map.h
+++ /dev/null
@@ -1,40 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-void InitMapForChapter(int chapter);
-void func_fe6_08018784(int chapter);
-void func_fe6_080187EC(void);
-void func_fe6_080188F4(void);
-void MapFill(u8 ** map, int value);
-void MapSetEdges(u8 ** map, u8 value);
-void ApplyChapterMapGraphics(int chapter);
-void ApplyChapterMapPalettes(void);
-void RefreshTerrainMap(void);
-void PutMapMetatile(u16 * tm, int x_tm, int y_tm, int x, int y);
-void func_fe6_08018CDC(void);
-void PutLimitViewSquare(u16 * tm, int x, int y, int x_tm, int y_tm);
-void RenderMap(void);
-void RenderMapForFade(void);
-void UpdateRenderMap(void);
-void RefreshEntityMaps(void);
-char const * GetTerrainName(int terrain);
-int GetTerrainHealAmount(int terrain);
-bool DoesTerrainHealStatus(int terrain);
-void func_fe6_080192E4(void);
-
-extern struct Vec2i gMapSize;
-
-extern u8 ** gMapUnit;
-extern u8 ** gMapTerrain;
-extern u8 ** gMapMovement;
-extern u8 ** gMapRange;
-extern u8 ** gMapFog;
-extern u8 ** gMapHidden;
-extern u8 ** gMapOther;
-
-extern u8 * CONST_DATA gMetatilesTerrainLut;
-extern u16 ** CONST_DATA gMapMetatiles;
-
-#define gMapRangeSigned ((i8 **) gMapRange)
-#define gMapMovementSigned ((i8 **) gMapMovement)
diff --git a/include/mapmenu.h b/include/mapmenu.h
deleted file mode 100644
index cccbd4b..0000000
--- a/include/mapmenu.h
+++ /dev/null
@@ -1,143 +0,0 @@
-#pragma once
-
-#include "common.h"
-#include "menu.h"
-#include "mapselect.h"
-
-fu8 func_fe6_0801EA40(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 MapMenu_Suspend_Available(struct MenuEntInfo const * info, int id);
-fu8 MapMenu_Suspend_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 MapMenu_End_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 MapMenu_Unit_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 MapMenu_Options_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 MapMenu_Status_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 func_fe6_0801EAE4(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 TutorialInterruptMenu_Continue_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 TutorialInterruptMenu_Quit_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitActionMenu_Wait_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 MapSelectActionReturnToUnitActionMenuWithCamera(struct MapSelectProc * proc, struct SelectTarget * target);
-fu8 MapSelectActionReturnToUnitActionMenu(struct MapSelectProc * proc, struct SelectTarget * target);
-fu8 MenuActionReturnToUnitActionMenu(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 RescueMapSelect_Help(struct MapSelectProc * proc, struct SelectTarget * target);
-fu8 UnitActionMenu_Rescue_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitActionMenu_Rescue_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 RescueMapSelect_Select(struct MapSelectProc * proc, struct SelectTarget * target);
-fu8 UnitActionMenu_Drop_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitActionMenu_Drop_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 DropRescueMapSelect_Select(struct MapSelectProc * proc, struct SelectTarget * target);
-fu8 UnitActionMenu_Take_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitActionMenu_Take_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitActionMenu_Give_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitActionMenu_Give_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 TakeRescueMapSelect_Select(struct MapSelectProc * proc, struct SelectTarget * target);
-fu8 GiveRescueMapSelect_Select(struct MapSelectProc * proc, struct SelectTarget * target);
-fu8 UnitActionMenu_Attack_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitActionMenu_Attack_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitActionMenu_AttackBallista_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitActionMenu_AttackRegular_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitActionMenu_Attack_SwitchIn(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitActionMenu_Attack_SwitchOut(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitAttackItemMenu_Entry_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitAttackItemMenu_Entry_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-u32 UnitAttackItemMenu_Entry_Display(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitAttackItemMenu_Entry_SwitchIn(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitAttackItemMenu_Entry_SwitchOut(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 AttackMapSelect_Select(struct MapSelectProc * proc, struct SelectTarget * target);
-fu8 AttackMapSelect_Cancel(struct MapSelectProc * proc, struct SelectTarget * target);
-fu8 AttackMapSelect_SwitchIn(struct MapSelectProc * proc, struct SelectTarget * target);
-u32 AttackMapSelect_End(struct MapSelectProc * proc);
-fu8 AnyMenu_Trade_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitActionMenu_Trade_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 TradeMapSelect_Select(struct MapSelectProc * proc, struct SelectTarget * target);
-fu8 UnitActionMenu_Seize_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitActionMenu_Seize_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitActionMenu_Visit_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitActionMenu_Visit_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitActionMenu_Play_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitActionMenu_Dance_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitActionMenu_Refresh_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 RefreshMapSelect_Select(struct MapSelectProc * proc, struct SelectTarget * target);
-fu8 UnitActionMenu_Item_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitActionMenu_Item_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-u32 UnitItemMenu_Entry_Display(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitItemMenu_Entry_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitItemMenu_Entry_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 SingleItemMenu_Entry_SwitchIn(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 SingleItemMenu_Entry_SwitchOut(struct MenuProc * menu, struct MenuEntProc * ent);
-void func_fe6_0801F854(int x, int y);
-void UnitItemActionMenu_End(struct MenuProc * menu);
-fu8 MenuActionReturnToUnitItemMenu(struct MenuProc * menu);
-fu8 func_fe6_0801F8E0(struct MenuProc * menu);
-fu8 func_fe6_0801F8F8(struct MenuProc * menu);
-fu8 func_fe6_0801F948(struct MenuProc * menu);
-fu8 UnitItemActionMenu_Use_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitItemActionMenu_Equip_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitItemActionMenu_Discard_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitItemActionMenu_Use_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitItemActionMenu_Equip_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitItemActionMenu_Trade_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitItemActionMenu_Discard_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitItemDiscardPromptMenu_Yes_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitAttackBallista_Entry_Available(struct MenuEntInfo const * info, int id);
-u32 UnitAttackBallista_Entry_Display(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitAttackBallista_Entry_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitAttackBallista_Entry_SwitchIn(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitActionMenu_Staff_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitActionMenu_Staff_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitActionMenu_Staff_SwitchIn(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitActionMenu_Staff_SwitchOut(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitStaffItemMenu_Entry_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitStaffItemMenu_Entry_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-u32 UnitStaffItemMenu_Entry_Display(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitStaffItemMenu_Entry_SwitchIn(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitStaffItemMenu_Entry_SwitchOut(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitActionMenu_Talk_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitActionMenu_Talk_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 TalkMapSelect_Select(struct MapSelectProc * proc, struct SelectTarget * target);
-fu8 UnitActionMenu_Support_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitActionMenu_Support_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 SupportMapSelect_Select(struct MapSelectProc * proc, struct SelectTarget * target);
-fu8 UnitActionMenu_Door_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitActionMenu_Door_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitActionMenu_Chest_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitActionMenu_Chest_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitActionMenu_Supply_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitActionMenu_Supply_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitActionMenu_Armory_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitActionMenu_Armory_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitActionMenu_Vendor_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitActionMenu_Vendor_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitActionMenu_Secret_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitActionMenu_Secret_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitActionMenu_Arena_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitActionMenu_Arena_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 UnitActionMenu_Steal_Available(struct MenuEntInfo const * info, int id);
-fu8 UnitActionMenu_Steal_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-void StealMapSelect_Init(struct MapSelectProc * proc);
-fu8 StealMapSelect_SwitchIn(struct MapSelectProc * proc, struct SelectTarget * target);
-fu8 StealMapSelect_Select(struct MapSelectProc * proc, struct SelectTarget * target);
-fu8 StealItemMenu_Entry_Available(struct MenuEntInfo const * info, int id);
-u32 StealItemMenu_Entry_Display(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 StealItemMenu_Entry_Select(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 MenuHelpBoxActiveUnitInventory(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 MenuHelpBoxTargetUnitInventory(struct MenuProc * menu, struct MenuEntProc * ent);
-fu8 MenuHelpBoxActiveUnitBallista(struct MenuProc * menu, struct MenuEntProc * ent);
-void HealMapSelect_Init(struct MapSelectProc * proc);
-fu8 HealMapSelect_SwitchIn(struct MapSelectProc * proc, struct SelectTarget * target);
-void RescueMapSelect_Init(struct MapSelectProc * proc);
-fu8 RescueMapSelect_SwitchIn(struct MapSelectProc * proc, struct SelectTarget * target);
-void DropRescueMapSelect_Init(struct MapSelectProc * proc);
-void GiveRescueMapSelect_Init(struct MapSelectProc * proc);
-fu8 GiveRescueMapSelect_SwitchIn(struct MapSelectProc * proc, struct SelectTarget * target);
-void TakeRescueMapSelect_Init(struct MapSelectProc * proc);
-fu8 TakeRescueMapSelect_SwitchIn(struct MapSelectProc * proc, struct SelectTarget * target);
-void TradeMapSelect_Init(struct MapSelectProc * proc);
-fu8 TradeMapSelect_SwitchIn(struct MapSelectProc * proc, struct SelectTarget * target);
-void TalkMapSelect_Init(struct MapSelectProc * proc);
-fu8 TalkMapSelect_SwitchIn(struct MapSelectProc * proc, struct SelectTarget * target);
-void RefreshMapSelect_Init(struct MapSelectProc * proc);
-fu8 RefreshMapSelect_SwitchIn(struct MapSelectProc * proc, struct SelectTarget * target);
-void WarpUnitMapSelect_Init(struct MapSelectProc * proc);
-fu8 WarpUnitMapSelect_SwitchIn(struct MapSelectProc * proc, struct SelectTarget * target);
-
-SHOULD_BE_STATIC void func_fe6_0801EE4C(struct Unit * from, struct Unit * to);
diff --git a/include/mapselect.h b/include/mapselect.h
deleted file mode 100644
index 80be219..0000000
--- a/include/mapselect.h
+++ /dev/null
@@ -1,83 +0,0 @@
-#pragma once
-
-#include "common.h"
-#include "proc.h"
-
-enum
-{
-    MAPSELECT_MAX_TARGETS = 64,
-};
-
-enum
-{
-    // MapSelectProc::flags
-
-    MAPSELECT_FLAG_GAMELOCK = 1 << 0,
-    MAPSELECT_FLAG_FROZEN   = 1 << 6,
-};
-
-enum
-{
-    MAPSELECT_ACTION_NOCURSOR = 1 << 0,
-    MAPSELECT_ACTION_END      = 1 << 1,
-    MAPSELECT_ACTION_SE_6A    = 1 << 2,
-    MAPSELECT_ACTION_SE_6B    = 1 << 3,
-    MAPSELECT_ACTION_CLEAR    = 1 << 4,
-    MAPSELECT_ACTION_ENDFACE  = 1 << 5,
-};
-
-struct SelectTarget
-{
-    /* 00 */ i8 x, y;
-    /* 02 */ i8 uid;
-    /* 03 */ i8 extra;
-    /* 04 */ struct SelectTarget * next;
-    /* 08 */ struct SelectTarget * prev;
-};
-
-struct MapSelectProc;
-
-struct MapSelectInfo
-{
-    /* 00 */ void (* on_init)(struct MapSelectProc * proc);
-    /* 04 */ void (* on_end)(struct MapSelectProc * proc);
-    /* 08 */ void (* on_init_b)(struct MapSelectProc * proc);
-    /* 0C */ fu8 (* on_switch_in)(struct MapSelectProc * proc, struct SelectTarget * target);
-    /* 10 */ fu8 (* on_switch_out)(struct MapSelectProc * proc, struct SelectTarget * target);
-    /* 14 */ fu8 (* on_a_press)(struct MapSelectProc * proc, struct SelectTarget * target);
-    /* 18 */ fu8 (* on_b_press)(struct MapSelectProc * proc, struct SelectTarget * target);
-    /* 1C */ fu8 (* on_r_press)(struct MapSelectProc * proc, struct SelectTarget * target);
-};
-
-struct MapSelectProc
-{
-    /* 00 */ PROC_HEADER;
-    /* 29 */ // pad
-    /* 2C */ struct MapSelectInfo const * info;
-    /* 30 */ struct SelectTarget * active_target;
-    /* 34 */ u8 flags;
-    /* 35 */ // pad
-    /* 38 */ fu8 (* on_a_press)(struct MapSelectProc * proc, struct SelectTarget * target);
-};
-
-void BeginTargetList(int x, int y);
-void EnlistTarget(int x, int y, int uid, int extra);
-int CountTargets(void);
-struct SelectTarget * GetTarget(int id);
-void LinkTargets(void);
-ProcPtr StartMapSelect(struct MapSelectInfo const * info);
-ProcPtr StartMapSelectExt(struct MapSelectInfo const * info, fu8 (* on_a_press)(struct MapSelectProc * proc, struct SelectTarget * target));
-ProcPtr EndMapSelect(struct MapSelectProc * proc);
-void FreezeMapSelect(void);
-void ResumeMapSelect(void);
-int GetFurthestTargetDistance(void);
-struct SelectTarget * GetLinkedTargets(void);
-
-SHOULD_BE_STATIC void GetMapSelectActivePosition(struct MapSelectProc * proc, int * x_out, int * y_out);
-SHOULD_BE_STATIC void MapSelect_Main(struct MapSelectProc * proc);
-SHOULD_BE_STATIC void HandleMapSelectSwitching(struct MapSelectProc * proc);
-SHOULD_BE_STATIC u32 HandleMapSelectActions(struct MapSelectProc * proc);
-SHOULD_BE_STATIC struct SelectTarget * GetLinkedTargetsNear(void);
-SHOULD_BE_STATIC struct SelectTarget * GetLinkedTargetsFar(void);
-
-extern struct ProcScr CONST_DATA ProcScr_MapSelect[];
diff --git a/include/mapui.h b/include/mapui.h
deleted file mode 100644
index de9d51a..0000000
--- a/include/mapui.h
+++ /dev/null
@@ -1,70 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "proc.h"
-
-// this proc layout is shared between all MapUi procs
-// one could separate them to make room in each one if necessary
-struct MapUiProc
-{
-    /* 00 */ PROC_HEADER;
-
-    /* 2C */ struct Text text;
-    /* 34 */ i8 x_burst;
-    /* 35 */ i8 y_burst;
-    /* 36 */ i8 w_burst;
-    /* 37 */ i8 h_burst;
-    /* 38 */ u16 * status_tm;
-    /* 3C */ u16 unit_clock;
-    /* 3E */ i16 hp_x;
-    /* 40 */ i16 hp_y;
-    /* 42 */ u8 burst_unit_id_prev;
-    /* 43 */ u8 burst_unit_id;
-    /* 44 */ i8 x_cursor_prev;
-    /* 45 */ i8 y_cursor_prev;
-    /* 46 */ i8 x_cursor;
-    /* 47 */ i8 y_cursor;
-    /* 48 */ i8 screen_side;
-    /* 49 */ u8 hp_cur_hi;
-    /* 4A */ u8 hp_cur_lo;
-    /* 4B */ u8 hp_max_hi;
-    /* 4C */ u8 hp_max_lo;
-    /* 4D */ bool8 hide_contents;
-    /* 4E */ // implicit pad
-    /* 50 */ i32 show_hide_clock;
-};
-
-void PutMapUiHpBarLeft(u16 * tm, fi16 fill, int tile);
-void PutMapUiHpBarMid(u16 * tm, fi16 fill, int tile);
-void PutMapUiHpBarRight(u16 * tm, fi16 fill, int tile);
-void PutMapUiHpBar(u16 * tm, struct Unit * unit, int tile);
-void UnitMapUi_ShowLoop(struct MapUiProc * proc);
-void UnitMapUi_HideLoop(struct MapUiProc * proc);
-void TerrainMapUi_ShowLoop(struct MapUiProc * proc);
-void TerrainMapUi_HideLoop(struct MapUiProc * proc);
-void PutUnitMapUi(struct MapUiProc * proc);
-void PutTerrainMapUi(struct MapUiProc * proc);
-void ApplyUnitMapUiFramePal(int faction, int pal_id);
-int GetUnitMapUiScreenSide(void);
-int GetTerrainMapUiScreenSide(void);
-void ClearUnitMapUiStatus(u16 * tm, struct Unit * unit);
-void PutUnitMapUiStatus(u16 * tm, struct Unit * unit);
-void UnitMapUiUpdate(struct MapUiProc * proc, struct Unit * unit);
-void DrawUnitMapUi(struct MapUiProc * proc, struct Unit * unit);
-int GetUnitBurstMapUiOrientationAt(int x, int y);
-void DrawUnitBurstMapUi(struct MapUiProc * proc, struct Unit * unit);
-void ClearUnitBurstMapUi(struct MapUiProc * proc);
-void DrawTerrainMapUi(struct MapUiProc * proc);
-void TerrainMapUi_Init(struct MapUiProc * proc);
-void TerrainMapUi_TerrainChange(struct MapUiProc * proc);
-void TerrainMapUi_Loop(struct MapUiProc * proc);
-void UnitMapUi_Init(struct MapUiProc * proc);
-void UnitMapUi_HiddenLoop(struct MapUiProc * proc);
-void UnitMapUi_Loop(struct MapUiProc * proc);
-void UnitMapUi_UnitChange(struct MapUiProc * proc);
-void UnitBurstMapUi_Init(struct MapUiProc * proc);
-void UnitBurstMapUi_Loop(struct MapUiProc * proc);
-void DoStartMapUi(void);
-void StartMapUi(void);
-void EndMapUi(void);
diff --git a/include/mapwork.h b/include/mapwork.h
deleted file mode 100644
index 6de3061..0000000
--- a/include/mapwork.h
+++ /dev/null
@@ -1,52 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-struct MapFloodSquareEnt
-{
-    /* 00 */ i8 x;
-    /* 01 */ i8 y;
-    /* 02 */ u8 connect;
-    /* 03 */ u8 least_mov;
-};
-
-struct MapFloodSt
-{
-    /* 00 */ struct MapFloodSquareEnt * active_queue;
-    /* 04 */ struct MapFloodSquareEnt * waiting_queue;
-    /* 08 */ bool8 has_unit;
-    /* 09 */ u8 move;
-    /* 0A */ u8 uid;
-    /* 0B */ u8 edge_move;
-};
-
-void SetWorkingMap(u8 ** map);
-void MapFlood_UpToMove(struct Unit * unit);
-void MapFlood_UpTo(struct Unit * unit, i8 move);
-void MapFlood_Pass(struct Unit * unit);
-void MapFloodRange_Unitless(int x, int y, i8 const * mov_table);
-void MapFlood_Unitless(int x, int y, i8 const * mov_table);
-void MapFloodWorkingMap_From_UpTo(struct Unit * unit, int x, int y, int move);
-void SetWorkingMovTable(i8 const * mov_table);
-void BeginMapFlood(int x, int y, int move, int uid);
-void BuildBestMoveScript(int x, int y, u8 * output);
-void ApplyWorkingMovScriptToAction(int x, int y);
-void MapMovementMarkFloodEdges(void);
-void MapMarkFloodEdges(void);
-void MapAddInRange(int x, int y, int range, int value);
-void MapIncInBoundedRange(short x, short y, short min_range, short max_range);
-void BuildUnitCompleteAttackRange(struct Unit * unit);
-void BuildUnitStandingRangeForReach(struct Unit * unit, int reach);
-void BuildUnitCompleteStaffRange(struct Unit * unit);
-i8 const * GetWorkingMovTable(void);
-
-extern struct MapFloodSt gMapFloodSt;
-extern struct MapFloodSquareEnt gMapFloodSquareBufA[];
-extern struct MapFloodSquareEnt gMapFloodSquareBufB[];
-
-extern u8 ** gWorkingMap;
-extern i8 gWorkingMovTable[];
-
-extern u8 gWorkingMoveScr[MOVE_SCRIPT_MAX_LENGTH];
-
-#define gWorkingMapSigned ((i8 **) gWorkingMap)
diff --git a/include/masseffect.h b/include/masseffect.h
deleted file mode 100644
index 1053f92..0000000
--- a/include/masseffect.h
+++ /dev/null
@@ -1,16 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-void ApplyHazardHealing(ProcPtr proc, struct Unit * unit, int arg_2, int arg_3);
-void BeginUnitHealAnim(struct Unit * unit, int hp);
-void BeginPoisonDamageAnim(struct Unit * unit, int damage);
-void BeginUnitTrapDamageAnim(struct Unit * unit, int damage);
-void StartStatusHealEffect(struct Unit * unit, ProcPtr parent);
-void FinishDamageDisplay(ProcPtr proc);
-
-extern struct ProcScr CONST_DATA ProcScr_Unused_KillAllRedUnits[];
-extern struct ProcScr CONST_DATA ProcScr_TerrainHealDisplay[];
-extern struct ProcScr CONST_DATA ProcScr_PoisonDamageDisplay[];
-extern struct ProcScr CONST_DATA ProcScr_StatusDecayDisplay[];
-extern struct ProcScr CONST_DATA ProcScr_TrapDamageDisplay[];
diff --git a/include/menu.h b/include/menu.h
deleted file mode 100644
index 5d5fb36..0000000
--- a/include/menu.h
+++ /dev/null
@@ -1,135 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "proc.h"
-#include "text.h"
-
-enum { MENU_MAX_ENTRIES = 11 };
-
-enum
-{
-    MENU_ENTRY_ENABLED,
-    MENU_ENTRY_DISABLED,
-    MENU_ENTRY_HIDDEN,
-};
-
-enum
-{
-    MENU_ACTION_NOCURSOR = (1 << 0),
-    MENU_ACTION_END      = (1 << 1),
-    MENU_ACTION_SE_6A    = (1 << 2), // TODO: name song
-    MENU_ACTION_SE_6B    = (1 << 3), // TODO: name song
-    MENU_ACTION_CLEAR    = (1 << 4),
-    MENU_ACTION_ENDFACE  = (1 << 5),
-    MENU_ACTION_UNUSED6  = (1 << 6),
-    MENU_ACTION_DOOM     = (1 << 7),
-};
-
-enum
-{
-    // MenuProc::flags
-
-    MENU_FLAG_GAMELOCK = 1 << 0,
-    MENU_FLAG_1        = 1 << 1, // unused
-    MENU_FLAG_ENDING   = 1 << 2,
-    MENU_FLAG_HIDDEN   = 1 << 3,
-    MENU_FLAG_FLAT     = 1 << 4,
-    MENU_FLAG_NOCURSOR = 1 << 5,
-    MENU_FLAG_FROZEN   = 1 << 6,
-    MENU_FLAG_DOOMED   = 1 << 7,
-};
-
-struct MenuRect { i8 x, y, w, h; };
-
-struct MenuProc;
-struct MenuEntProc;
-
-struct MenuEntInfo
-{
-    /* 00 */ char const * label;
-
-    /* 04 */ u16 msg_label; // NOTE: unused
-    /* 06 */ u16 msg_help;
-    /* 08 */ u8 text_color;
-
-    /* 0C */ fu8 (* available)(struct MenuEntInfo const * info, int id);
-    /* 10 */ u32 (* display)(struct MenuProc * menu, struct MenuEntProc * ent);
-    /* 14 */ fu8 (* on_select)(struct MenuProc * menu, struct MenuEntProc * ent);
-    /* 18 */ fu8 (* on_idle)(struct MenuProc * menu, struct MenuEntProc * ent);
-    /* 1C */ fu8 (* on_switch_in)(struct MenuProc * menu, struct MenuEntProc * ent);
-    /* 20 */ fu8 (* on_switch_out)(struct MenuProc * menu, struct MenuEntProc * ent);
-};
-
-struct MenuInfo
-{
-    /* 00 */ struct MenuRect rect;
-    /* 04 */ u8 window_kind;
-    /* 08 */ struct MenuEntInfo const * entries;
-
-    /* 0C */ fu8 (* on_init)(struct MenuProc * menu);
-    /* 10 */ fu8 (* on_end)(struct MenuProc * menu);
-    /* 14 */ void (* unk_14)(struct MenuProc * menu);
-    /* 18 */ fu8 (* on_b_press)(struct MenuProc * menu, struct MenuEntProc * ent);
-    /* 1C */ fu8 (* on_r_press)(struct MenuProc * menu);
-    /* 20 */ fu8 (* on_help_box)(struct MenuProc * menu, struct MenuEntProc * ent);
-};
-
-struct MenuProc
-{
-    /* 00 */ PROC_HEADER;
-    /* 2C */ struct MenuRect rect;
-    /* 30 */ struct MenuInfo const * info;
-    /* 34 */ struct MenuEntProc * entries[MENU_MAX_ENTRIES];
-    /* 60 */ u8 entry_count;
-    /* 61 */ u8 active_entry;
-    /* 62 */ u8 previous_entry;
-    /* 63 */ u8 flags;
-};
-
-struct MenuEntProc
-{
-    /* 00 */ PROC_HEADER;
-    /* 2A */ i16 x;
-    /* 2C */ i16 y;
-    /* 30 */ struct MenuEntInfo const * info;
-    /* 34 */ struct Text text;
-    /* 3C */ i8 id;
-    /* 3D */ u8 availability;
-};
-
-struct MenuProc * StartAdjustedMenu(struct MenuInfo const * info, int x, int left, int right);
-struct MenuProc * StartLockingMenu(struct MenuInfo const * info, ProcPtr parent);
-struct MenuProc * StartMenuExt(struct MenuInfo const * info, struct MenuRect rect);
-struct MenuProc * StartMenu(struct MenuInfo const * info);
-struct MenuProc * StartLockingMenuExt(struct MenuInfo const * info, struct MenuRect rect, ProcPtr parent);
-ProcPtr EndMenu(struct MenuProc * proc);
-void EndMenus(void);
-fu8 MenuEntryEnabled(struct MenuEntInfo const * info, int id);
-fu8 MenuEntryDisabled(struct MenuEntInfo const * info, int id);
-fu8 MenuActionClose(struct MenuProc * proc, struct MenuEntProc * ent);
-fu8 MenuHelpBoxRegular(struct MenuProc * proc, struct MenuEntProc * ent);
-fu8 MenuActionHelpBox(struct MenuProc * proc);
-fu8 MenuFrozenHelpBox(struct MenuProc * proc, int msg);
-void FreezeMenu(void);
-void ResumeMenu(void);
-struct MenuProc * StartCenteredMenu(struct MenuInfo const * info, int x, int left, int right);
-
-SHOULD_BE_STATIC bool HasMenuChangedItem(struct MenuProc * proc);
-SHOULD_BE_STATIC void Menu_Init(struct MenuProc * proc);
-SHOULD_BE_STATIC void Menu_Draw(struct MenuProc * proc);
-SHOULD_BE_STATIC void PutMenuEntryHover(struct MenuProc * proc, int entry_id, bool shown);
-SHOULD_BE_STATIC void Menu_Main(struct MenuProc * proc);
-SHOULD_BE_STATIC void HandleMenuSwitching(struct MenuProc * proc);
-SHOULD_BE_STATIC u32 HandleMenuActions(struct MenuProc * proc);
-SHOULD_BE_STATIC void GetMenuCursorPosition(struct MenuProc * proc, int * x_out, int * y_out);
-SHOULD_BE_STATIC void Menu_HelpBoxInit(struct MenuProc * proc);
-SHOULD_BE_STATIC void Menu_HelpBoxMain(struct MenuProc * proc);
-SHOULD_BE_STATIC void Menu_FrozenHelpBoxMain(struct MenuProc * proc);
-SHOULD_BE_STATIC void ApplyMenuCursorScroll(struct MenuProc * proc, int * x_ref, int * y_ref);
-
-extern struct ProcScr CONST_DATA ProcScr_MenuMain[];
-extern struct ProcScr CONST_DATA ProcScr_Menu[];
-extern struct ProcScr CONST_DATA ProcScr_MenuItem[];
-extern struct ProcScr CONST_DATA ProcScr_MenuHelpBox[];
-extern struct ProcScr CONST_DATA ProcScr_MenuFrozenHelpBox[];
diff --git a/include/menuinfo.h b/include/menuinfo.h
deleted file mode 100644
index 29f2b5a..0000000
--- a/include/menuinfo.h
+++ /dev/null
@@ -1,42 +0,0 @@
-#pragma once
-
-#include "common.h"
-#include "menu.h"
-#include "mapselect.h"
-
-extern struct MenuInfo CONST_DATA MenuInfo_Debug_085C7474;
-extern struct MenuInfo CONST_DATA MenuInfo_Debug_085C73E4;
-extern struct MenuInfo CONST_DATA MenuInfo_Debug_085C742C;
-extern struct MenuInfo CONST_DATA MenuInfo_Debug_085C7450;
-extern struct MenuInfo CONST_DATA MenuInfo_DebugCpControl;
-extern struct MenuInfo CONST_DATA MenuInfo_Map;
-extern struct MenuInfo CONST_DATA MenuInfo_TutorialInterruptMenu;
-extern struct MenuInfo CONST_DATA MenuInfo_UnitAction;
-extern struct MenuInfo CONST_DATA MenuInfo_DiscardItem;
-extern struct MenuInfo CONST_DATA MenuInfo_UnitAttackMethodPrompt;
-extern struct MenuInfo CONST_DATA MenuInfo_UnitAttackBallista;
-extern struct MenuInfo CONST_DATA MenuInfo_UnitAttackItem;
-extern struct MenuInfo CONST_DATA MenuInfo_UnitItem;
-extern struct MenuInfo CONST_DATA MenuInfo_UnitItemAction;
-extern struct MenuInfo CONST_DATA MenuInfo_UnitItemDiscardPrompt;
-extern struct MenuInfo CONST_DATA MenuInfo_UnitStaffItem;
-extern struct MenuInfo CONST_DATA MenuInfo_StealItem;
-extern struct MenuInfo CONST_DATA MenuInfo_RepairItem;
-extern struct MenuInfo CONST_DATA MenuInfo_PrepMap;
-extern struct MapSelectInfo CONST_DATA MapSelectInfo_Rescue;
-extern struct MapSelectInfo CONST_DATA MapSelectInfo_DropRescue;
-extern struct MapSelectInfo CONST_DATA MapSelectInfo_TakeRescue;
-extern struct MapSelectInfo CONST_DATA MapSelectInfo_GiveRescue;
-extern struct MapSelectInfo CONST_DATA MapSelectInfo_Attack;
-extern struct MapSelectInfo CONST_DATA MapSelectInfo_Trade;
-extern struct MapSelectInfo CONST_DATA MapSelectInfo_Refresh;
-extern struct MapSelectInfo CONST_DATA MapSelectInfo_Talk;
-extern struct MapSelectInfo CONST_DATA MapSelectInfo_Support;
-extern struct MapSelectInfo CONST_DATA MapSelectInfo_Steal;
-extern struct MapSelectInfo CONST_DATA MapSelectInfo_WarpUnit;
-extern struct MapSelectInfo CONST_DATA MapSelectInfo_Unlock;
-extern struct MapSelectInfo CONST_DATA MapSelectInfo_Repair;
-extern struct MapSelectInfo CONST_DATA MapSelectInfo_Heal;
-extern struct MapSelectInfo CONST_DATA MapSelectInfo_Restore;
-extern struct MapSelectInfo CONST_DATA MapSelectInfo_Barrier;
-extern struct MapSelectInfo CONST_DATA MapSelectInfo_AttackStaff;
diff --git a/include/move.h b/include/move.h
deleted file mode 100644
index 1af86ab..0000000
--- a/include/move.h
+++ /dev/null
@@ -1,19 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-void RegisterDataMove(void const * src, void * dst, int size);
-void RegisterDataFill(u32 value, void * dst, int size);
-void ApplyDataMoves(void);
-
-#define RegisterVramMove(src, offset, size) \
-    RegisterDataMove( \
-        (src), \
-        (void *) VRAM + (0x1FFFF & (offset)), \
-        (size))
-
-#define RegisterVramFill(value, offset, size) \
-    RegisterDataFill( \
-        (value), \
-        (void *) VRAM + (0x1FFFF & (offset)), \
-        (size))
diff --git a/include/movepath.h b/include/movepath.h
deleted file mode 100644
index 591bf4b..0000000
--- a/include/movepath.h
+++ /dev/null
@@ -1,8 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-void GenMovePathFromMoveScript(void);
-void GenMoveScriptFromMovePath(void);
-void InitMovePath(bool display_only);
-void RefreshMovePath(void);
diff --git a/include/msg.h b/include/msg.h
deleted file mode 100644
index efa53f3..0000000
--- a/include/msg.h
+++ /dev/null
@@ -1,5 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-char * DecodeMsg(int id);
diff --git a/include/mu.h b/include/mu.h
deleted file mode 100644
index f5b4a76..0000000
--- a/include/mu.h
+++ /dev/null
@@ -1,128 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "proc.h"
-#include "spriteanim.h"
-
-enum
-{
-    MU_STATE_NONE,
-    MU_STATE_INACTIVE,
-    MU_STATE_MOVEMENT,
-    MU_STATE_SLEEPING,
-    MU_STATE_UNK4,
-    MU_STATE_BUMPING,
-    MU_STATE_DISPLAY_UI,
-    MU_STATE_DEATHFADE,
-};
-
-enum
-{
-    MU_FLASH_WHITE,
-    MU_FLASH_BLACK,
-    MU_FLASH_RED,
-    MU_FLASH_GREEN,
-    MU_FLASH_BLUE,
-    MU_FLASH_5,
-};
-
-struct MuInfo
-{
-    u8 const * img;
-    u16 const * anim;
-};
-
-struct MuConfig;
-
-struct MuProc
-{
-    /* 00 */ PROC_HEADER;
-
-    /* 2C */ struct Unit * unit;
-    /* 30 */ struct SpriteAnim * sprite_anim;
-    /* 34 */ struct MuConfig * config;
-
-    /* 38 */ u8 cam_b;
-    /* 39 */ u8 state;
-    /* 3A */ u8 hidden_b;
-    /* 3B */ u8 jid;
-    /* 3C */ i8 facing;
-    /* 3D */ u8 step_sound_clock;
-    /* 3E */ u8 fast_walk_b;
-    /* 3F */ // pad
-    /* 40 */ u16 move_clock_q4;
-    /* 42 */ i16 move_config;
-    /* 44 */ i16 x_q4, y_q4;
-    /* 48 */ i16 x_offset_q4, y_offset_q4;
-};
-
-struct MuConfig
-{
-    /* 00 */ u8 id;
-    /* 01 */ u8 pal;
-    /* 02 */ u16 chr;
-    /* 04 */ u8 pc;
-    /* 05 */ i8 movescr[0x40];
-    /* 45 */ // 3 byte padding
-    /* 48 */ struct MuProc * mu;
-};
-
-void InitMus(void);
-struct MuProc * StartMuExt(int x, int y, int jid, int arg_3);
-struct MuProc * StartMu(struct Unit * unit);
-void UpdateMu(struct MuProc * mu);
-void EnableMuCamera(struct MuProc * mu);
-void DisableMuCamera(struct MuProc * mu);
-struct MuProc * StartUiMu(struct Unit * unit, int x, int y);
-struct MuProc * StartMuInternal(u16 x, u16 y, u16 jid, int pal);
-void SetMuFacing(struct MuProc * mu, int facing);
-void SetMuDefaultFacing(struct MuProc * mu);
-void SetAutoMuDefaultFacing(void);
-void SetAutoMuMoveScript(u8 const * movescr);
-bool MuExists(void);
-bool MuExistsActive(void);
-bool IsMuActive(struct MuProc * proc);
-void SetMuMoveScript(struct MuProc * mu, u8 const * movescr);
-struct MuProc * StartMuScripted(u16 x, u16 y, u16 jid, int pal, u8 const * movescr);
-void StartPlayMuStepSe(int song, int alt_offset, int x);
-void PlayMuStepSe(struct MuProc * mu);
-void EndMuMovement(struct MuProc * mu);
-void RunMuMoveScript(struct MuProc * mu);
-void StartMuFogBump(int x, int y);
-bool IsMuFogBumpActive(void);
-void UpdateMuStepSounds(struct MuProc * mu);
-void EndAllMus(void);
-void EndMu(struct MuProc * proc);
-void HaltMu(struct MuProc * mu);
-void LockMus(void);
-void ReleaseMus(void);
-void ApplyMoveScriptToCoordinates(int * x, int * y, u8 const * movescr);
-bool CanStartMu(void);
-void ResetMuAnims(void);
-struct MuConfig * GetNewMuConfig(void);
-bool GetMuDisplayPosition(struct MuProc * mu, struct Vec2i * pos_out);
-void PutMu(struct MuProc * mu);
-u16 GetMuQ4MovementSpeed(struct MuProc * mu);
-u8 * GetMuImgBufById(int id);
-u8 const * GetMuImg(struct MuProc * proc);
-u16 const * GetMuAnimForJid(u16 jid);
-void StartMuDeathFade(struct MuProc * mu);
-void HideMu(struct MuProc * mu);
-void ShowMu(struct MuProc * mu);
-void SetMuScreenPosition(struct MuProc * mu, int x, int y);
-void SetMuScreenOffset(struct MuProc * mu, int x_offset, int y_offset);
-void StartMuFadeIntoFlash(struct MuProc * mu, int flash);
-void StartMuFadeFromFlash(struct MuProc * mu);
-void StartMuActionAnim(struct MuProc * mu);
-void StartMuDelayedFaceDefender(struct MuProc * mu);
-void StartMuSpeedUpAnim(struct MuProc * mu);
-void func_fe6_0806142C(struct MuProc * mu, int flash);
-void StartMuFlashFadeFrom(struct MuProc * mu, int flash);
-void SetMuMaxWalkSpeed(void);
-void SetMuSpecialSprite(struct MuProc * mu, int jid, u16 const * pal);
-void SetMuPal(struct MuProc * mu, int pal);
-
-extern struct ProcScr CONST_DATA ProcScr_Mu[];
-extern struct ProcScr CONST_DATA ProcScr_MuDeathFade[];
-extern struct MuInfo CONST_DATA MuInfoTable[];
diff --git a/include/oam.h b/include/oam.h
deleted file mode 100644
index 0021ebe..0000000
--- a/include/oam.h
+++ /dev/null
@@ -1,82 +0,0 @@
-
-#include "gba/gba.h"
-
-#include "hardware.h"
-
-struct UnkSprite
-{
-    /* 00 */ int oam01;
-    /* 02 */ u16 oam2;
-    /* 04 */ short x;
-    /* 06 */ short y;
-};
-
-struct OamView { u16 oam0, oam1, oam2, aff; };
-
-void InitOam(int loSz);
-int GetOamSplice(void);
-void SyncHiOam(void);
-void SyncLoOam(void);
-void SetObjAffine(int id, short pa, short pb, short pc, short pd);
-void PutUnkSprite(struct UnkSprite * sprites, int xBase, int yBase);
-
-extern u16 gOam[0x200];
-extern u16 * gOamHiPutIt;
-extern u16 * gOamLoPutIt;
-extern struct OamView * gOamAffinePutIt;
-extern u16 gOamAffinePutId;
-
-#define OAM0_Y(ay)          ((ay) & 0x00FF)
-#define OAM0_Y_MASK         0x00FF
-#define OAM0_AFFINE_ENABLE  0x0100
-#define OAM0_DOUBLESIZE     0x0200
-#define OAM0_DISABLE        0x0200
-#define OAM0_BLEND          0x0400
-#define OAM0_WINDOW         0x0800
-#define OAM0_MOSAIC         0x1000
-#define OAM0_256COLORS      0x2000
-#define OAM0_SHAPE_8x8      0x0000
-#define OAM0_SHAPE_16x16    0x0000
-#define OAM0_SHAPE_32x32    0x0000
-#define OAM0_SHAPE_64x64    0x0000
-#define OAM0_SHAPE_16x8     0x4000
-#define OAM0_SHAPE_32x8     0x4000
-#define OAM0_SHAPE_32x16    0x4000
-#define OAM0_SHAPE_64x32    0x4000
-#define OAM0_SHAPE_8x16     0x8000
-#define OAM0_SHAPE_8x32     0x8000
-#define OAM0_SHAPE_16x32    0x8000
-#define OAM0_SHAPE_32x64    0x8000
-
-#define OAM1_X(ax)          ((ax) & 0x01FF)
-#define OAM1_X_MASK         0x01FF
-#define OAM1_AFFINE_ID(ai)  (((ai) << 9) & 0x3E00)
-#define OAM1_AFFINE_ID_MASK 0x3E00
-#define OAM1_HFLIP          0x1000
-#define OAM1_VFLIP          0x2000
-#define OAM1_SIZE_8x8       0x0000
-#define OAM1_SIZE_16x8      0x0000
-#define OAM1_SIZE_8x16      0x0000
-#define OAM1_SIZE_16x16     0x4000
-#define OAM1_SIZE_32x8      0x4000
-#define OAM1_SIZE_8x32      0x4000
-#define OAM1_SIZE_32x32     0x8000
-#define OAM1_SIZE_32x16     0x8000
-#define OAM1_SIZE_16x32     0x8000
-#define OAM1_SIZE_64x64     0xC000
-#define OAM1_SIZE_64x32     0xC000
-#define OAM1_SIZE_32x64     0xC000
-
-#define OAM2_CHR(ac)        ((ac) & 0x03FF)
-#define OAM2_CHR_MASK       0x03FF
-#define OAM2_LAYER(al)      (((al) & 0x3) * 0x0400)
-#define OAM2_LAYER_MASK     0xC000
-#define OAM2_PAL(ap)        (((ap) & 0xF) * 0x1000)
-#define OAM2_PAL_MASK       0xF000
-
-#define SetObjAffineAuto(id, angle, xScale, yScale) \
-    SetObjAffine(id, \
-        Div(+COS_Q12(angle) << 4, xScale), \
-        Div(-SIN_Q12(angle) << 4, yScale), \
-        Div(+SIN_Q12(angle) << 4, xScale), \
-        Div(+COS_Q12(angle) << 4, yScale))
diff --git a/include/playerphase.h b/include/playerphase.h
deleted file mode 100644
index 03bd9b7..0000000
--- a/include/playerphase.h
+++ /dev/null
@@ -1,52 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "proc.h"
-#include "unit.h"
-
-enum
-{
-    L_PLAYERPHASE_BEGIN,
-    L_PLAYERPHASE_MOVE,
-    L_PLAYERPHASE_ACTION_SELECT,
-    L_PLAYERPHASE_END,
-    L_PLAYERPHASE_MAPFADE_MOVE,
-    L_PLAYERPHASE_5,
-    L_PLAYERPHASE_6,
-    L_PLAYERPHASE_ACTION,
-    L_PLAYERPHASE_8,
-    L_PLAYERPHASE_IDLE,
-    L_PLAYERPHASE_10,
-    L_PLAYERPHASE_SEE_RANGE,
-};
-
-enum
-{
-    PLAYER_SELECT_NOUNIT,
-    PLAYER_SELECT_TURNENDED,
-    PLAYER_SELECT_CONTROL,
-    PLAYER_SELECT_NOCONTROL,
-    PLAYER_SELECT_4,
-};
-
-enum
-{
-    LIMITVIEW_BLUE = (1 << 0),
-    LIMITVIEW_RED = (1 << 1),
-    LIMITVIEW_GREEN = (1 << 2),
-};
-
-void HandlePlayerMapCursor(void);
-void DisplayUnitActionRange(struct Unit * unit);
-int GetPlayerSelectKind(struct Unit * unit);
-void StartLimitView(int flags);
-void EndLimitView(void);
-void TrySwitchViewedUnit(int x, int y);
-
-void PlayerPhase_BeginSeeActionRange(ProcPtr proc);
-void PlayerPhase_MoveSelectLoop(ProcPtr proc);
-bool PlayerPhase_0801B9B0(ProcPtr proc);
-void PlayerPhase_0801BC84(ProcPtr proc);
-
-extern struct ProcScr CONST_DATA ProcScr_PlayerPhase[];
diff --git a/include/prepphase.h b/include/prepphase.h
deleted file mode 100644
index 8af08b2..0000000
--- a/include/prepphase.h
+++ /dev/null
@@ -1,12 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "proc.h"
-#include "menu.h"
-
-fu8 PrepMapMenuConfirm(struct MenuProc * menu, struct MenuEntProc * ent);
-void func_fe6_0802B784(void);
-void func_fe6_0802B7E4(void);
-
-extern struct ProcScr CONST_DATA ProcScr_PrepPhase[];
diff --git a/include/proc.h b/include/proc.h
deleted file mode 100644
index d54ec1d..0000000
--- a/include/proc.h
+++ /dev/null
@@ -1,175 +0,0 @@
-#pragma once
-
-#include "types.h"
-#include "attributes.h"
-
-typedef void * ProcPtr;
-typedef void (* ProcFunc)(ProcPtr proc);
-
-struct ProcScr
-{
-    short cmd;
-    short imm;
-    void const * ptr;
-};
-
-enum
-{
-    PROC_CMD_END,
-    PROC_CMD_NAME,
-    PROC_CMD_CALL,
-    PROC_CMD_REPEAT,
-    PROC_CMD_ONEND,
-    PROC_CMD_START_CHILD,
-    PROC_CMD_START_CHILD_BLOCKING,
-    PROC_CMD_START_BUGGED,
-    PROC_CMD_WHILE_EXISTS,
-    PROC_CMD_END_EACH,
-    PROC_CMD_BREAK_EACH,
-    PROC_CMD_LABEL,
-    PROC_CMD_GOTO,
-    PROC_CMD_GOTO_SCR,
-    PROC_CMD_SLEEP,
-    PROC_CMD_MARK,
-    PROC_CMD_BLOCK,
-    PROC_CMD_END_IF_DUP,
-    PROC_CMD_SET_FLAG2,
-    PROC_CMD_13,
-    PROC_CMD_WHILE,
-    PROC_CMD_15,
-    PROC_CMD_CALL_2,
-    PROC_CMD_END_DUPS,
-    PROC_CMD_CALL_ARG,
-    PROC_CMD_19,
-};
-
-#define PROC_END                          { PROC_CMD_END, 0, 0 }
-#define PROC_NAME(nameStr)                { PROC_CMD_NAME, 0, (nameStr) }
-#define PROC_CALL(func)                   { PROC_CMD_CALL, 0, (func) }
-#define PROC_REPEAT(func)                 { PROC_CMD_REPEAT, 0, (func) }
-#define PROC_ONEND(func)                  { PROC_CMD_ONEND, 0, (func) }
-#define PROC_START_CHILD(procscr)         { PROC_CMD_START_CHILD, 0, (procscr) }
-#define PROC_START_CHILD_LOCKING(procscr) { PROC_CMD_START_CHILD_BLOCKING, 1, (procscr) }
-#define PROC_START_BUGGED(procscr)        { PROC_CMD_START_BUGGED, 0, (procscr) }
-#define PROC_WHILE_EXISTS(procscr)        { PROC_CMD_WHILE_EXISTS, 0, (procscr) }
-#define PROC_END_EACH(procscr)            { PROC_CMD_END_EACH, 0, (procscr) }
-#define PROC_BREAK_EACH(procscr)          { PROC_CMD_BREAK_EACH, 0, (procscr) }
-#define PROC_LABEL(label)                 { PROC_CMD_LABEL, (label), 0 }
-#define PROC_GOTO(label)                  { PROC_CMD_GOTO, (label), 0 }
-#define PROC_GOTO_SCR(procscr)            { PROC_CMD_GOTO_SCR, 0, (procscr) }
-#define PROC_SLEEP(duration)              { PROC_CMD_SLEEP, (duration), 0 }
-#define PROC_MARK(mark)                   { PROC_CMD_MARK, (mark), 0 }
-#define PROC_BLOCK                        { PROC_CMD_BLOCK, 0, 0 }
-#define PROC_END_IF_DUP                   { PROC_CMD_END_IF_DUP, 0, 0 }
-#define PROC_SET_FLAG2                    { PROC_CMD_SET_FLAG2, 0, 0 }
-#define PROC_13                           { PROC_CMD_13, 0, 0 }
-#define PROC_WHILE(func)                  { PROC_CMD_WHILE, 0, (func) }
-#define PROC_15                           { PROC_CMD_15, 0, 0 }
-#define PROC_CALL_2(func)                 { PROC_CMD_CALL_2, 0, (func) }
-#define PROC_END_DUPS                     { PROC_CMD_END_DUPS, 0, 0 }
-#define PROC_CALL_ARG(func, arg)          { PROC_CMD_CALL_ARG, (arg), (func) }
-#define PROC_19                           { PROC_CMD_19, 0, 0 }
-
-#define PROC_HEADER                                                                                     \
-    /* 00 */ struct ProcScr const * proc_script; /* pointer to proc script */                           \
-    /* 04 */ struct ProcScr const * proc_script_pc; /* pointer to currently executing script command */ \
-    /* 08 */ ProcFunc proc_end_func; /* callback to run upon delegint the process */                    \
-    /* 0C */ ProcFunc proc_repeat_func; /* callback to run once each frame. */                          \
-                                        /* disables script execution when not null */                   \
-    /* 10 */ char const * proc_name;                                                                    \
-    /* 14 */ ProcPtr proc_parent; /* pointer to parent proc. If this proc is a root proc, */            \
-                                  /* this member is an integer which is the root index. */              \
-    /* 18 */ ProcPtr proc_child; /* pointer to most recently added child */                             \
-    /* 1C */ ProcPtr proc_next; /* next sibling */                                                      \
-    /* 20 */ ProcPtr proc_prev; /* previous sibling */                                                  \
-    /* 24 */ i16 proc_sleep_clock;                                                                      \
-    /* 26 */ u8 proc_mark;                                                                              \
-    /* 27 */ u8 proc_flags;                                                                             \
-    /* 28 */ u8 proc_lock_cnt; /* wait semaphore. Process execution */                                  \
-                               /* is blocked when this is nonzero. */                                   \
-
-// TODO: stop using this
-// this is just lazy bad
-struct GenericProc
-{
-    /* 00 */ PROC_HEADER;
-
-    /* 2C */ int x, y;
-    /* 34 */ int unk34;
-    /* 38 */ int unk38;
-    /* 3C */ int unk3C;
-    /* 40 */ int unk40;
-
-    /* 44 */ u8 pad_38[0x4A - 0x44];
-
-    /* 4A */ short unk4A;
-
-    // Is this part of that?
-    /* 4C */ short unk4C; 
-    /* 4E */ short unk4E;
-    /* 50 */ short unk50;
-
-    /* 52 */ u16 unk52;
-
-    /* 54 */ void * ptr;
-    /* 58 */ int unk58;
-    /* 5C */ int unk5C;
-    /* 60 */ int unk60;
-    /* 64 */ short unk64;
-    /* 66 */ short unk66;
-    /* 68 */ short unk68;
-    /* 6A */ short unk6A;
-};
-
-#define PROC_TREE_VSYNC ((ProcPtr) 0)
-#define PROC_TREE_1     ((ProcPtr) 1)
-#define PROC_TREE_2     ((ProcPtr) 2)
-#define PROC_TREE_3     ((ProcPtr) 3)
-#define PROC_TREE_4     ((ProcPtr) 4)
-#define PROC_TREE_5     ((ProcPtr) 5)
-#define PROC_TREE_6     ((ProcPtr) 6)
-#define PROC_TREE_7     ((ProcPtr) 7)
-
-enum
-{
-    PROC_MARK_1 = 1,
-    PROC_MARK_2 = 2,
-    PROC_MARK_MU = 4,
-    PROC_MARK_5 = 5,
-    PROC_MARK_6 = 6,
-    PROC_MARK_7 = 7,
-    PROC_MARK_8 = 8,
-    PROC_MARK_10 = 10,
-    PROC_MARK_GAMECTRL = 11,
-};
-
-extern ProcPtr gProcTreeRootArray[8];
-
-void InitProcs(void);
-ProcPtr SpawnProc(struct ProcScr const * scr, ProcPtr parent);
-ProcPtr SpawnProcLocking(struct ProcScr const * scr, ProcPtr parent);
-void Proc_End(ProcPtr proc);
-void Proc_Run(ProcPtr proc);
-void Proc_Break(ProcPtr proc);
-ProcPtr FindProc(struct ProcScr const * script);
-ProcPtr FindActiveProc(struct ProcScr const * script);
-ProcPtr FindMarkedProc(int mark);
-void Proc_Goto(ProcPtr proc, int label);
-void Proc_GotoScript(ProcPtr proc, struct ProcScr const * script);
-void Proc_Mark(ProcPtr proc, int mark);
-void Proc_SetEndFunc(ProcPtr proc, ProcFunc func);
-void Proc_ForAll(ProcFunc func);
-void Proc_ForEach(struct ProcScr const * script, ProcFunc func);
-void Proc_ForEachMarked(int mark, ProcFunc func);
-void Proc_LockEachMarked(int mark);
-void Proc_ReleaseEachMarked(int mark);
-void Proc_EndEachMarked(int mark);
-void Proc_EndEach(struct ProcScr const * script);
-void Proc_BreakEach(struct ProcScr const * script);
-void Proc_ForSubtree(ProcPtr proc, ProcFunc func);
-void Proc_PrintSubtreeInfo(ProcPtr proc);
-void Proc_SetRepeatFunc(ProcPtr proc, ProcFunc func);
-void Proc_Lock(ProcPtr proc);
-void Proc_Release(ProcPtr proc);
-
-#define Proc_Exists(script) (FindProc((script)) ? TRUE : FALSE)
diff --git a/include/random.h b/include/random.h
index b3f4505..494d94a 100644
--- a/include/random.h
+++ b/include/random.h
@@ -1,6 +1,6 @@
 #pragma once
 
-#include "common.h"
+#include "global.h"
 
 void RandInit(int seed);
 
diff --git a/include/save.h b/include/save.h
deleted file mode 100644
index 5b077db..0000000
--- a/include/save.h
+++ /dev/null
@@ -1,40 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-enum
-{
-    SAVE_GAME0,
-    SAVE_GAME1,
-    SAVE_GAME2,
-    SAVE_SUSPEND,
-    SAVE_SUSPEND_ALT,
-    SAVE_MULTIARENA,
-    SAVE_XMAP,
-    SAVE_COUNT,
-};
-
-enum
-{
-    SAVE_KIND_GAME,
-    SAVE_KIND_SUSPEND,
-    SAVE_KIND_MULTIARENA,
-    SAVE_KIND_XMAP,
-
-    SAVE_KIND_INVALID = UINT8_MAX,
-};
-
-enum
-{
-    SAVE_MAGIC32 = 0x11217,
-    SAVE_MAGIC32_MULTIARENA = 0x20112,
-    SAVE_MAGIC32_XMAP = 0x20223,
-    SAVE_MAGIC16 = 0x200A,
-};
-
-// forward type declaration
-struct GlobalSaveInfo;
-struct SaveBlockInfo;
-struct GameSaveBlock;
-struct SuspendSaveBlock;
-struct MultiArenaSaveBlock;
diff --git a/include/save_core.h b/include/save_core.h
deleted file mode 100644
index 29f159b..0000000
--- a/include/save_core.h
+++ /dev/null
@@ -1,60 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#define MAX_CLEARED_PLAYTHROUGHS 12
-
-struct GlobalSaveInfo
-{
-    /* 00 */ char name[8];
-    /* 08 */ u32 magic32;
-    /* 0C */ u16 magic16;
-    /* 0E */ u16 completed : 1;
-    /*    */ u16 completed_hard : 1;
-    /*    */ u16 completed_true : 1;
-    /*    */ u16 completed_true_hard : 1;
-    /*    */ u16 unk_0E_4 : 12;
-    /* 10 */ u8 cleared_playthroughs[MAX_CLEARED_PLAYTHROUGHS];
-    /* 1C */ u16 checksum;
-    /* 1E */ u8 last_game_save_id;
-    /* 1F */ u8 last_suspend_slot;
-};
-
-// up to checksum offset, aligned to 2 (nearest down)
-#define GLOBALSIZEINFO_SIZE_FOR_CHECKSUM (offsetof(struct GlobalSaveInfo, checksum) & ~1)
-
-struct SaveBlockInfo
-{
-    /* 00 */ u32 magic32;
-    /* 04 */ u16 magic16;
-    /* 06 */ u8 kind;
-    /* 08 */ u16 offset;
-    /* 0A */ u16 size;
-    /* 0C */ u32 checksum32;
-};
-
-void SramInit(void);
-bool IsSramWorking(void);
-void WipeSram(void);
-u16 Checksum16(void const * data, int size);
-bool ReadGlobalSaveInfo(struct GlobalSaveInfo * info);
-void WriteGlobalSaveInfo(struct GlobalSaveInfo * info);
-void WriteGlobalSaveInfoNoChecksum(struct GlobalSaveInfo * info);
-void InitGlobalSaveInfo(void);
-void * SramOffsetToAddr(u16 off);
-u16 SramAddrToOffset(void * addr);
-bool ReadSaveBlockInfo(struct SaveBlockInfo * block_info, int save_id);
-void WriteSaveBlockInfo(struct SaveBlockInfo * block_info, int save_id);
-void * GetSaveWriteAddr(int save_id);
-void * GetSaveReadAddr(int save_id);
-void WriteChapterFlags(void * sram_dst);
-void WritePermanentFlags(void * sram_dst);
-void ReadChapterFlags(void const * sram_src);
-void ReadPermanentFlags(void const * sram_src);
-void WriteSupplyItems(void * sram_dst);
-void ReadSupplyItems(void const * sram_src);
-bool IsNotFirstPlaythrough(void);
-bool func_fe6_08084714(void);
-bool IsMultiArenaAvailable(void);
-bool IsNotFirstPlaythrough_2(void);
-bool CheckHasCompletedSave(void);
diff --git a/include/save_game.h b/include/save_game.h
deleted file mode 100644
index e726e54..0000000
--- a/include/save_game.h
+++ /dev/null
@@ -1,150 +0,0 @@
-#pragma once
-
-#include "common.h"
-#include "save.h"
-
-#include "unit.h"
-#include "bm.h"
-#include "trap.h"
-#include "supply.h"
-#include "action.h"
-#include "eventinfo.h"
-#include "save_stats.h"
-
-enum
-{
-    UNIT_SAVE_AMOUNT_BLUE = 52,
-    UNIT_SAVE_AMOUNT_RED = 50,
-    UNIT_SAVE_AMOUNT_GREEN = 10,
-};
-
-enum
-{
-    // flags for GameSavePackedUnit::flags
-
-    SAVEUNIT_FLAG_DEAD       = 1 << 0,
-    SAVEUNIT_FLAG_UNDEPLOYED = 1 << 1,
-    SAVEUNIT_FLAG_SOLOANIM1  = 1 << 2,
-    SAVEUNIT_FLAG_SOLOANIM2  = 1 << 3,
-};
-
-struct GameSavePackedUnit
-{
-    /* 00 */ u32 pid    : 7;
-    /*    */ u32 jid    : 7;
-    /*    */ u32 level  : 5;
-    /*    */ u32 flags  : 6;
-    /*    */ u32 exp    : 7;
-    /* 04 */ u32 x      : 6;
-    /*    */ u32 y      : 6;
-    /*    */ u32 max_hp : 6;
-    /*    */ u32 pow    : 5;
-    /*    */ u32 skl    : 5;
-    /*    */ u32 spd    : 5;
-    /*    */ u32 def    : 5;
-    /*    */ u32 res    : 5;
-    /*    */ u32 lck    : 5;
-    /*    */ u32 con    : 5;
-    /*    */ u32 mov    : 5;
-    /*    */ u32 item_a : 14;
-    /*    */ u32 item_b : 14;
-    /*    */ u32 item_c : 14;
-    /*    */ u32 item_d : 14;
-    /*    */ u32 item_e : 14;
-    /* 14 */ u8 unused_14[2];
-    /* 16 */ u8 wexp[UNIT_WEAPON_EXP_COUNT];
-    /* 1E */ u8 supports[UNIT_SUPPORT_COUNT];
-};
-
-struct SuspendSavePackedUnit
-{
-    /* 00 */ u8 pid;
-    /* 01 */ u8 jid;
-    /* 02 */ u8 ai_a;
-    /* 03 */ u8 rescue;
-    /* 04 */ u16 flags;
-    /* 06 */ u16 item_a;
-    /* 08 */ u16 item_b;
-    /* 0A */ u16 item_c;
-    /* 0C */ u8 max_hp;
-    /* 0D */ u8 hp;
-    /* 0E */ u8 exp;
-    /* 0F */ u8 ai_flags;
-    /* 10 */ u8 wexp[UNIT_WEAPON_EXP_COUNT];
-    /* 18 */ u8 supports[UNIT_SUPPORT_COUNT];
-    /* 22 */ u8 ai_a_pc;
-    /* 23 */ u8 ai_b;
-    /* 24 */ u16 ai_config;
-    /* 26 */ u8 ai_b_pc;
-    /* 27 */ u8 ai_counter;
-    /* 28 */ u32 level           : 5;
-    /*    */ u32 x               : 6;
-    /*    */ u32 y               : 6;
-    /*    */ u32 pow             : 5;
-    /*    */ u32 skl             : 5;
-    /*    */ u32 spd             : 5;
-    /* 2C */ u32 def             : 5;
-    /*    */ u32 res             : 5;
-    /*    */ u32 lck             : 5;
-    /*    */ u32 bonus_con       : 5;
-    /*    */ u32 status          : 3;
-    /*    */ u32 status_duration : 3;
-    /*    */ u32 torch           : 3;
-    /*    */ u32 barrier         : 3;
-    /* 30 */ u32 bonus_mov       : 4;
-    /*    */ u16 item_d          : 14;
-    /*    */ u16 item_e          : 14;
-};
-
-struct GameSaveBlock
-{
-    struct PlaySt play_st;
-    struct GameSavePackedUnit units[UNIT_SAVE_AMOUNT_BLUE];
-    u16 supply_items[SUPPLY_ITEM_COUNT];
-    struct PidStats pid_stats[PID_STATS_COUNT];
-    struct ChapterStats chapter_stats[CHAPTER_STATS_COUNT];
-    u8 permanent_flags[sizeof(gPermanentFlagBits)];
-};
-
-struct SuspendSaveBlock
-{
-    struct PlaySt play_st;
-    struct Action action;
-    struct SuspendSavePackedUnit units[UNIT_SAVE_AMOUNT_BLUE + UNIT_SAVE_AMOUNT_RED + UNIT_SAVE_AMOUNT_GREEN];
-    struct Trap traps[TRAP_MAX_COUNT];
-    u16 supply_items[SUPPLY_ITEM_COUNT];
-    struct PidStats pid_stats[PID_STATS_COUNT];
-    struct ChapterStats chapter_stats[CHAPTER_STATS_COUNT];
-    u8 permanent_flags[sizeof(gPermanentFlagBits)];
-    u8 chapter_flags[sizeof(gChapterFlagBits)];
-};
-
-void WriteLastGameSaveId(int save_id);
-int ReadLastGameSaveId(void);
-void InvalidateGameSave(int save_id);
-void CopyGameSave(int src_save_id, int dst_save_id);
-void WriteNewGameSave(int save_id, int is_hard);
-void WriteGameSave(int save_id);
-void ReadGameSave(int save_id);
-bool IsSaveValid(int save_id);
-void ReadGameSavePlaySt(int save_id, struct PlaySt * play_st);
-bool IsGameSavePastFirstChapter(int save_id);
-void WriteGameSavePackedUnit(struct Unit * unit, void * sram_dst);
-void ReadGameSavePackedUnit(void const * sram_src, struct Unit * unit);
-void InvalidateSuspendSave(int save_id);
-void WriteSuspendSave(int save_id);
-void ReadSuspendSave(int save_id);
-bool IsValidSuspendSave(int save_id);
-void ReadSuspendSavePlaySt(int save_id, struct PlaySt * buf);
-void EncodeSuspendSavePackedUnit(struct Unit * unit, void * buf);
-void ReadSuspendSavePackedUnit(void const * sram_src, struct Unit * unit);
-void WriteTraps(void * sram_dst);
-void ReadTraps(void const * sram_src);
-int GetLastSuspendSaveId(void);
-int GetNextSuspendSaveId(void);
-void WriteSwappedSuspendSaveId(void);
-int SramChecksum32(void const * sram_src, int size);
-bool VerifySaveBlockChecksum(struct SaveBlockInfo * block_info);
-void PopulateSaveBlockChecksum(struct SaveBlockInfo * block_info);
-u16 GetGameStateChecksum_Unused(void);
-void func_fe6_08086088(void);
diff --git a/include/save_multiarena.h b/include/save_multiarena.h
deleted file mode 100644
index a9a4c24..0000000
--- a/include/save_multiarena.h
+++ /dev/null
@@ -1,58 +0,0 @@
-#pragma once
-
-#include "common.h"
-#include "save.h"
-
-#include "save_game.h"
-
-enum
-{
-    MULTIARENA_CONFIG_SHOWUNITS    = 1 << 0,
-    MULTIARENA_CONFIG_SURVIVALMODE = 1 << 1,
-    MULTIARENA_CONFIG_AUTOEQUIPOFF = 1 << 2,
-    MULTIARENA_CONFIG_3            = 1 << 3,
-};
-
-// 7 sjis characters
-#define MULTIARENA_TEAMNAME_SIZE 14
-
-#define MULTIARENA_UNITS_PER_TEAM 5
-#define MULTIARENA_MAX_TEAMS 10
-#define MULTIARENA_MAX_RANKINGS 10
-
-struct MultiArenaRankingEnt
-{
-    /* 00 */ u32 ranking : 2;
-    /*    */ u32 player_count : 2;
-    /*    */ u32 mode : 1;
-    /*    */ u32 points : 27;
-    /* 04 */ char name[MULTIARENA_TEAMNAME_SIZE + 1];
-};
-
-struct MultiArenaSaveTeam
-{
-    /* 00 */ char name[MULTIARENA_TEAMNAME_SIZE + 1];
-    /* 10 */ struct GameSavePackedUnit units[MULTIARENA_UNITS_PER_TEAM];
-};
-
-struct MultiArenaSaveBlock
-{
-    /* 000 */ struct MultiArenaSaveTeam teams[MULTIARENA_MAX_TEAMS];
-    /* 870 */ u16 config;
-    /* 874 */ struct MultiArenaRankingEnt rankings[MULTIARENA_MAX_RANKINGS];
-};
-
-bool IsMultiArenaSaveValid(int save_id);
-void WriteNewMultiArenaSave(void);
-bool ReadMultiArenaSaveTeamRaw(int team, struct MultiArenaSaveTeam * dst);
-bool ReadMultiArenaSaveTeamName(int team, char * dst);
-void WipeMultiArenaSaveTeam(int team);
-void CopyMultiArenaSaveTeam(int team_src, int team_dst);
-void SwapMultiArenaSaveTeams(int team_a, int team_b);
-void WriteMultiArenaSaveTeam(int team, struct Unit * units_src, char const * name_src);
-bool ReadMultiArenaSaveTeam(int team, struct Unit * units_dst, char * name_dst);
-void WriteMultiArenaSaveRankings(struct MultiArenaRankingEnt const * src);
-void ReadMultiArenaSaveRankings(struct MultiArenaRankingEnt * dst);
-void WriteMultiArenaSaveConfig(u16 const * config_src);
-void ReadMultiArenaSaveConfig(u16 * config_dst);
-bool IsMultiArenaSaveReady(void);
diff --git a/include/save_stats.h b/include/save_stats.h
deleted file mode 100644
index 215423d..0000000
--- a/include/save_stats.h
+++ /dev/null
@@ -1,77 +0,0 @@
-#pragma once
-
-#include "common.h"
-#include "save.h"
-
-#include "unit.h"
-#include "bm.h"
-
-enum
-{
-    DEFEAT_CAUSE_0,
-    DEFEAT_CAUSE_1,
-    DEFEAT_CAUSE_COMBAT,
-    DEFEAT_CAUSE_TRAP,
-    DEFEAT_CAUSE_POISON,
-    DEFEAT_CAUSE_5,
-    DEFEAT_CAUSE_6, // I think this is arena death but needs confirm
-};
-
-struct PidStats
-{
-    u32 loss_count      : 8;
-    u32 act_count       : 8;
-    u32 stat_view_count : 8;
-    u32 defeat_chapter  : 6;
-    u32 defeat_turn     : 10;
-    u32 deploy_count    : 6;
-    u32 move_count      : 10;
-    u32 defeat_cause    : 4;
-    u32 exp_gained      : 12;
-    u32 win_count       : 10;
-    u32 battle_count    : 12;
-    u32 killer_pid      : 9;
-    u32 : 0; // unused/padding (15 bits)
-};
-
-struct ChapterStats
-{
-    u16 chapter_id   : 6;
-    u16 chapter_turn : 10;
-    u16 chapter_time : 16; // in increments of 3 seconds
-};
-
-#define PID_STATS_COUNT 70
-#define CHAPTER_STATS_COUNT 32
-
-void WriteGameSaveFreshStats(struct GameSaveBlock * gamesave_sram);
-void ClearPidStats(void);
-void ReadPidStats(void const * sram_src);
-void ReadChapterStats(void const * sram_src);
-void WritePidStats(void * sram_dst);
-void WriteChapterStats(void * sram_dst);
-struct ChapterStats * GetChapterStats(int num);
-bool IsValidChapterStats(struct ChapterStats * chapter_stats);
-int GetNextChapterStatsSlot(void);
-void RegisterChapterStats(struct PlaySt * play_st);
-struct PidStats * GetPidStats(fu8 pid);
-void PidStatsAddBattle(struct Unit * unit);
-void PidStatsAddWin(fu8 pid);
-void PidStatsAddLoss(fu8 pid);
-void PidStatsSetDefeatInfo(fu8 pid, fu8 killer_pid, int defeat_cause);
-void PidStatsAddAct(fu8 pid);
-void PidStatsAddStatView(fu8 pid);
-void PidStatsAddDeploy(fu8 pid);
-void PidStatsAddMove(fu8 pid, int amount);
-void PidStatsAddExpGained(fu8 pid, int amount);
-int PidStatsCountTotalBattles(void);
-int PidStatsCountTotalWins(void);
-int PidStatsCountTotalLosses(void);
-int PidStatsCountTotalLevelsGained(void);
-void PidStatsUpdateFromBattleOutcome(void);
-bool IsPlaythroughIdUnique(int playthrough_id);
-int GetNewPlaythroughId(void);
-int GetGlobalCompletedPlaythroughCount(void);
-bool RegisterCompletedPlaythrough(struct GlobalSaveInfo * info, int index);
-void WriteCompletedPlaythroughSaveData(void);
-void func_fe6_08084F48(void);
diff --git a/include/save_xmap.h b/include/save_xmap.h
deleted file mode 100644
index d6f7a1f..0000000
--- a/include/save_xmap.h
+++ /dev/null
@@ -1,60 +0,0 @@
-#pragma once
-
-#include "common.h"
-#include "save.h"
-
-#include "gbasram.h"
-
-struct ExtraMapSaveHead
-{
-    /* 00 */ u32 xmap_magic;
-    /* 04 */ u16 xmap_size;
-    /* 06 */ u16 xmap_checksum;
-    /* 08 */ u32 save_magic32;
-    /* 0C */ u32 unused_0C;
-    /* 10 */ void const * map_sram;
-    /* 14 */ i16 map_size;
-    /* 16 */ i16 info_size;
-    /* 18 */ void const * info_sram;
-};
-
-struct ExtraMapInfo
-{
-    /* 00 */ struct ChapterInfo const * chapter_info;
-    /* 04 */ struct MapChangeInfo const * map_change_info;
-    /* 08 */ struct ChapterEventInfo const * event_info;
-    /* 0C */ char const * msg_0C;
-    /* 10 */ char const * msg_10;
-    /* 14 */ char const * msg_14;
-    /* 18 */ struct PlaySt * play_st;
-    /* 1C */ struct BmSt * bm_st;
-    /* 20 */ struct Unit ** active_unit;
-    /* 24 */ struct Unit * const * unit_lut;
-    /* 28 */ struct BattleUnit * bu_a;
-    /* 2C */ struct BattleUnit * bu_b;
-    /* 30 */ struct BattleHit * battle_hits;
-    /* 34 */ struct Trap * traps;
-    /* 38 */ u8 * permanent_flags;
-    /* 3C */ u8 * chapter_frags;
-};
-
-bool ReadExtraMapSaveHead(void);
-void const * GetExtraMapMapReadAddr(void);
-u32 GetExtraMapMapSize(void);
-void const * GetExtraMapInfoReadAddr(void);
-u32 GetExtraMapInfoSize(void);
-u16 ExtraMapChecksum(void const * data, int size);
-bool IsExtraMapAvailable(void);
-void ReadExtraMapInfo(void);
-bool ListAvailableTrialChapters(i8 * list_out);
-char const * func_fe6_080867F0(int chapter);
-char const * func_fe6_080867FC(int chapter);
-char const * func_fe6_08086910(int chapter);
-void CreateTrialChapterBonusUnits(void);
-
-extern struct ExtraMapInfo * CONST_DATA gExtraMapInfo;
-
-#define XMAP_MAGIC 0x50414D58 // 'XMAP'
-
-#define SRAM_XMAP_SIZE 0x1000u
-#define SRAM_XMAP_ADDR (CART_SRAM + CART_SRAM_SIZE - SRAM_XMAP_SIZE)
diff --git a/include/savelayout.h b/include/savelayout.h
deleted file mode 100644
index 25dbcc7..0000000
--- a/include/savelayout.h
+++ /dev/null
@@ -1,26 +0,0 @@
-#pragma once
-
-#include "common.h"
-#include "save.h"
-
-#include "save_core.h"
-#include "save_stats.h"
-#include "save_game.h"
-#include "save_multiarena.h"
-#include "save_xmap.h"
-
-#include "gbasram.h"
-
-struct SramMain
-{
-    struct GlobalSaveInfo head;
-    struct SaveBlockInfo block_info[SAVE_COUNT];
-    struct SuspendSaveBlock suspend;
-    struct SuspendSaveBlock suspend_alt;
-    struct GameSaveBlock game_0;
-    struct GameSaveBlock game_1;
-    struct GameSaveBlock game_2;
-    struct MultiArenaSaveBlock multi_arena;
-};
-
-STATIC_ASSERT(CART_SRAM_SIZE - SRAM_XMAP_SIZE >= sizeof(struct SramMain));
diff --git a/include/sioerror.h b/include/sioerror.h
deleted file mode 100644
index 8809bac..0000000
--- a/include/sioerror.h
+++ /dev/null
@@ -1,12 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-// TODO: is this good name?
-// what is this error screen actually?
-
-void OnVBlank_SioError(void);
-void OnMain_SioErrorWait(void);
-void PutSioErrorMessage(void);
-void OnMain_SioError(void);
-void StartSioErrorScreen(void);
diff --git a/include/sound.h b/include/sound.h
deleted file mode 100644
index 45b22ba..0000000
--- a/include/sound.h
+++ /dev/null
@@ -1,44 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "proc.h"
-#include "bm.h"
-
-#include "m4a.h"
-
-extern struct MusicPlayer gMusicPlayer_03006530;
-extern struct MusicPlayer gMusicPlayer_03006600;
-extern struct MusicPlayer gMusicPlayer_03006570;
-extern struct MusicPlayer gMusicPlayer_03006260;
-extern struct MusicPlayer gMusicPlayer_030062A0;
-extern struct MusicPlayer gMusicPlayer_030064B0;
-extern struct MusicPlayer gMusicPlayer_FightBgm;
-extern struct MusicPlayer gMusicPlayer_MainBgm;
-
-int GetCurrentBgmSong(void);
-bool IsBgmPlaying(void);
-void func_fe6_08002F9C(int volume);
-void SetBgmVolume(int volume);
-void FadeBgmOut(int speed);
-void func_fe6_080030B4(int speed);
-void StartBgmCore(int song, struct MusicPlayer * music_player);
-void StartOrChangeBgm(int song, int speed, struct MusicPlayer * music_player);
-void StartBgm(int song, struct MusicPlayer * music_player);
-void StartBgmExt(int song, int speed, struct MusicPlayer * music_player);
-void StartBgmFadeIn(int song, int b, struct MusicPlayer * music_player);
-void OverrideBgm(int song);
-void RestoreBgm(void);
-void MakeBgmOverridePersist(void);
-void StartBgmVolumeChange(int volumeInit, int volumeEnd, int duration, ProcPtr parent);
-
-#define PlaySe(id) \
-    if (!gPlaySt.config_se_disable) \
-        m4aSongNumStart((id))
-
-// TODO: move
-
-extern struct Song const Song_Unk_0857A61C;
-extern struct Song const Song_Unk_0857B774;
-extern struct Song const Song_Unk_0857C1E4;
-extern struct Song const Song_Unk_0857C95C;
diff --git a/include/sprite.h b/include/sprite.h
deleted file mode 100644
index a080b44..0000000
--- a/include/sprite.h
+++ /dev/null
@@ -1,48 +0,0 @@
-#pragma once
-
-#include "gba/gba.h"
-
-#include "proc.h"
-
-struct SpriteProc
-{
-    /* 00 */ PROC_HEADER;
-
-    /* 2C */ int x;
-    /* 30 */ int y;
-
-    /* 34 */ u8 pad_34[0x50 - 0x34];
-
-    /* 50 */ i16 layer;
-    /* 52 */ u16 tileref;
-    /* 54 */ u16 const * object;
-};
-
-extern u16 CONST_DATA Sprite_8x8[];
-extern u16 CONST_DATA Sprite_16x16[];
-extern u16 CONST_DATA Sprite_32x32[];
-extern u16 CONST_DATA Sprite_64x64[];
-extern u16 CONST_DATA Sprite_8x16[];
-extern u16 CONST_DATA Sprite_16x32[];
-extern u16 CONST_DATA Sprite_32x64[];
-extern u16 CONST_DATA Sprite_16x8[];
-extern u16 CONST_DATA Sprite_32x16[];
-extern u16 CONST_DATA Sprite_64x32[];
-extern u16 CONST_DATA Sprite_32x8[];
-extern u16 CONST_DATA Sprite_8x32[];
-extern u16 CONST_DATA Sprite_32x8_VFlipped[];
-extern u16 CONST_DATA Sprite_8x16_HFlipped[];
-extern u16 CONST_DATA Sprite_8x8_HFlipped[];
-extern u16 CONST_DATA Sprite_8x8_VFlipped[];
-extern u16 CONST_DATA Sprite_8x8_HFlipped_VFlipped[];
-extern u16 CONST_DATA Sprite_16x16_VFlipped[];
-
-void PutSpriteAffine(int id, short pa, short pb, short pc, short pd);
-void ClearSprites(void);
-void PutSprite(int layer, int x, int y, u16 const * object, int oam2);
-void PutSpriteExt(int layer, int xOam1, int yOam0, u16 const * object, int oam2);
-void PushSpriteLayerObjects(int layer);
-void PutSpriteLayerOam(int layer);
-
-struct SpriteProc * StartSpriteRefresher(ProcPtr parent, int layer, int x, int y, u16 const * object, int tileref);
-void MoveSpriteRefresher(struct SpriteProc * proc, int x, int y);
diff --git a/include/spriteanim.h b/include/spriteanim.h
deleted file mode 100644
index eb44076..0000000
--- a/include/spriteanim.h
+++ /dev/null
@@ -1,44 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "proc.h"
-
-struct SpriteAnim
-{
-    /* 00 */ u16 const * info;             // address of info
-    /* 04 */ u16 const * sprites;          // address of sprite array
-    /* 08 */ u16 const * script;           // address of script start (where we go back on loop)
-    /* 0C */ u16 const * script_pc;        // address of script pc (where we are now)
-    /* 10 */ u16 const * current_sprite;   // address of current sprite
-    /* 14 */ u16 const * current_affine;   // address of current affine
-    /* 18 */ i16 clock;                   // Cycle Timer
-    /* 1A */ u16 clock_interval_q8;       // Cycle Time Step
-    /* 1C */ u16 clock_decimal_q8;        // Sub frame time offset or something
-    /* 1E */ u16 layer;                   // sprite layer
-    /* 20 */ u8 need_sync_img_b;          // bool defining whether gfx needs update
-    /* 21 */ u8 affine_slot;              // Rotation/Scale OAM Index
-    /* 22 */ u16 oam2;                    // OAM Extra Data (Tile Index Root & OAM2 Stuff)
-    /* 24 */ u8 const * img;               // address of graphics (if any)
-};
-
-void InitSpriteAnims(void);
-struct SpriteAnim * StartSpriteAnim(u16 const * info, u16 layer);
-void EndSpriteAnim(struct SpriteAnim * anim);
-bool DisplaySpriteAnim(struct SpriteAnim * anim, int x, int y);
-void SetSpriteAnimId(struct SpriteAnim * anim, int id);
-void SetSpriteAnimInfo(struct SpriteAnim * anim, u16 const * info);
-struct SpriteAnim * FindSpriteAnim(u16 const * info);
-ProcPtr StartSpriteAnimProc(u16 const * info, int x, int y, int oam2, int animid, int layer);
-void SetSpriteAnimProcParameters(ProcPtr proc, int x, int y, int oam2);
-void EndSpriteAnimProc(ProcPtr proc);
-void EndEachSpriteAnimProc(void);
-bool SpriteAnimProcExists(void);
-
-#define ResetSpriteAnimClock(anim) \
-    (anim)->clock = 0; \
-    (anim)->clock_interval_q8 = 0x100
-
-#define FreezeSpriteAnim(anim) \
-    (anim)->clock = 0; \
-    (anim)->clock_interval_q8 = 0
diff --git a/include/statscreen.h b/include/statscreen.h
deleted file mode 100644
index bce25c7..0000000
--- a/include/statscreen.h
+++ /dev/null
@@ -1,215 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "proc.h"
-#include "text.h"
-#include "unit.h"
-#include "save.h"
-
-enum
-{
-    STATSCREEN_TEXT_PNAME,
-    STATSCREEN_TEXT_JNAME,
-    STATSCREEN_TEXT_UNUSED,
-    STATSCREEN_TEXT_POW,
-    STATSCREEN_TEXT_SKL,
-    STATSCREEN_TEXT_SPD,
-    STATSCREEN_TEXT_LCK,
-    STATSCREEN_TEXT_DEF,
-    STATSCREEN_TEXT_RES,
-    STATSCREEN_TEXT_MOV,
-    STATSCREEN_TEXT_CON,
-    STATSCREEN_TEXT_AID,
-    STATSCREEN_TEXT_RESCUE,
-    STATSCREEN_TEXT_AFFINITY,
-    STATSCREEN_TEXT_STATUS,
-    // TODO: assert that there are as many items here than in inv
-    STATSCREEN_TEXT_ITEM_A,
-    STATSCREEN_TEXT_ITEM_B,
-    STATSCREEN_TEXT_ITEM_C,
-    STATSCREEN_TEXT_ITEM_D,
-    STATSCREEN_TEXT_ITEM_E,
-    STATSCREEN_TEXT_EQUIPRANGE,
-    STATSCREEN_TEXT_EQUIPATTACK,
-    STATSCREEN_TEXT_EQUIPHIT,
-    STATSCREEN_TEXT_EQUIPCRIT,
-    STATSCREEN_TEXT_EQUIPAVOID,
-    STATSCREEN_TEXT_WEXP_A,
-    STATSCREEN_TEXT_WEXP_B,
-    STATSCREEN_TEXT_WEXP_C,
-    STATSCREEN_TEXT_WEXP_D,
-    STATSCREEN_TEXT_SUPPORT_A,
-    STATSCREEN_TEXT_SUPPORT_B,
-    STATSCREEN_TEXT_SUPPORT_C,
-    STATSCREEN_TEXT_SUPPORT_D,
-    STATSCREEN_TEXT_SUPPORT_E,
-    STATSCREEN_TEXT_BWL,
-
-    MAX_STATSCREEN_TEXT,
-};
-
-enum
-{
-    STATSCREEN_PAGE_PERSONALINFO,
-    STATSCREEN_PAGE_ITEMS,
-    STATSCREEN_PAGE_WEXPANDSUPPORTS,
-};
-
-// TODO: rename (the use of "Info" in this name doesn't fit convention used elsewhere in the source)
-// (tl;dr "Info" should imply const)
-struct StatScreenInfo
-{
-    /* 00 */ u8 unk_00;
-    /* 01 */ u8 unit_id;
-    /* 02 */ u16 excluded_unit_flags;
-};
-
-struct StatScreenSt
-{
-    /* 00 */ u8 page;
-    /* 01 */ u8 page_count;
-    /* 02 */ u16 page_slide_key_bit;
-    /* 04 */ i16 x_disp_off; // Note: Always 0, not properly taked into account by most things
-    /* 06 */ i16 y_disp_off;
-    /* 08 */ bool8 is_transitioning;
-    /* 0C */ struct Unit * unit;
-    /* 10 */ struct MuProc * mu;
-    /* 14 */ struct HelpBoxInfo const * help;
-    /* 18 */ struct Text text[MAX_STATSCREEN_TEXT];
-};
-
-struct StatScreenTextInfo
-{
-    /* 00 */ struct Text * text;
-    /* 04 */ u16 * tm;
-    /* 08 */ u8 color;
-    /* 09 */ u8 x_offset;
-    /* 0C */ char const * const * str_list;
-};
-
-struct MuralBackgroundProc
-{
-    /* 00 */ PROC_HEADER;
-    /* 29 */ u8 pad_29[0x4C - 0x29];
-    /* 4C */ i16 offset;
-};
-
-struct StatScreenPageSlideProc
-{
-    /* 00 */ PROC_HEADER;
-
-    /* 29 */ u8 pad_29[0x4A - 0x29];
-    /* 4A */ i16 new_page;
-    /* 4C */ i16 clock;
-    /* 4E */ u8 pad_4E[0x52 - 0x4E];
-    /* 52 */ u16 key_bit;
-};
-
-struct StatScreenUnitSlideProc
-{
-    /* 00 */ PROC_HEADER;
-
-    /* 29 */ u8 pad_29[0x38 - 0x29];
-    /* 38 */ i32 direction;
-    /* 3C */ i32 y_disp_init;
-    /* 40 */ i32 y_disp_fini;
-    /* 44 */ u8 pad_44[0x4A - 0x44];
-    /* 4A */ i16 new_unit_id;
-    /* 4C */ i16 clock;
-};
-
-struct StatScreenSpritesProc
-{
-    /* 00 */ PROC_HEADER;
-
-    // sprites proc only
-    /* 2A */ i16 x_left;
-    /* 2C */ i16 x_right;
-    /* 2E */ u16 clock_left;
-    /* 30 */ u16 clock_right;
-    /* 32 */ i16 anim_speed_left;
-    /* 34 */ i16 anim_speed_right;
-
-    // name sprite proc only
-    /* 36 */ u8 page_id;
-    /* 38 */ i16 vertical_scale; // int 6 == 1:1 (1.0) scale
-};
-
-void DrawUiGaugeBitmapEdgeColumn(u8 * bitmap, int pixels_per_line, int column);
-void DrawUiGaugeBitmapBaseColumn(u8 * bitmap, int pixels_per_line, int column);
-void DrawUiGaugeBitmapFilledColumn(u8 * bitmap, int pixels_per_line, int column);
-void DrawUiGaugeBitmapBonusColumn(u8 * bitmap, int pixels_per_line, int column);
-void DrawUiGauge(int chr, int dot_x, int chr_count, int dot_width, int dot_plain, int dot_bonus);
-void PutDrawUiGauge(int chr, int width, u16 * tm, int tileref, int dot_width, int dot_plain, int dot_bonus);
-
-void BackgroundSlide_Init(struct MuralBackgroundProc * proc);
-void BackgroundSlide_Loop(struct MuralBackgroundProc * proc);
-ProcPtr StartMuralBackground(ProcPtr parent, void * vram, int pal);
-void EndMuralBackground(void);
-
-int GetLastStatScreenUnitId(void);
-void SetStatScreenLastUnitId(int unit_id);
-void SetStatScreenExcludedUnitFlags(int flags);
-void InitStatScreenText(void);
-void PutStatScreenText(struct StatScreenTextInfo const * list);
-void PutStatScreenLeftPanelInfo(void);
-void PutStatScreenStatWithBar(int num, int x, int y, int base, int total, int max);
-void PutStatScreenPersonalInfoPage(void);
-void PutStatScreenItemsPage(void);
-void PutStatScreenSupportList(void);
-void PutStatScreenWeaponExpBar(int num, int x, int y, int item_kind);
-void PutStatScreenWeaponExpAndSupportsPage(void);
-void PutStatScreenPage(int page_id);
-struct Unit * FindNextStatScreenUnit(struct Unit * current_unit, int iter_step);
-void StatScreenPageSlide_Loop(struct StatScreenPageSlideProc * proc);
-void StatScreenPageSlide_End(struct StatScreenPageSlideProc * proc);
-void StartStatScreenPageSlide(fu16 key_bit, int new_page, ProcPtr parent);
-void StatScreenUnitSlide_FadeOutInit(struct StatScreenUnitSlideProc * proc);
-void StatScreenUnitSlide_FadeOutLoop(struct StatScreenUnitSlideProc * proc);
-void StatScreenUnitSlide_FadeInInit(struct StatScreenUnitSlideProc * proc);
-void StatScreenUnitSlide_FadeInLoop(struct StatScreenUnitSlideProc * proc);
-void StatScreenUnitSlide_ChangeUnit(struct StatScreenUnitSlideProc * proc);
-void StatScreenUnitSlide_End(struct StatScreenUnitSlideProc * proc);
-void StartStatScreenUnitSlide(struct Unit * unit, int direction, ProcPtr parent);
-void PutUpdateStatScreenPageName(int page_id);
-void StatScreenPageName_Init(struct StatScreenSpritesProc * proc);
-void StatScreenPageName_Main(struct StatScreenSpritesProc * proc);
-void StatScreenPageName_CloseMain(struct StatScreenSpritesProc * proc);
-void StatScreenPageName_OpenMain(struct StatScreenSpritesProc * proc);
-void StatScreenSprites_Init(struct StatScreenSpritesProc * proc);
-void StatScreenSprites_BumpCheck(struct StatScreenSpritesProc * proc);
-void StatScreenSprites_PutArrows(struct StatScreenSpritesProc * proc);
-void StatScreenSprites_PutNumberLabel(struct StatScreenSpritesProc * proc);
-void StatScreenSprites_PutMuAreaSprites(struct StatScreenSpritesProc * proc);
-void StatScreenSprites_PutRescueMarkers(struct StatScreenSpritesProc * proc);
-void StatScreen_DisableScreen(ProcPtr proc);
-void StatScreen_Init(ProcPtr proc);
-void StatScreen_InitUnit(ProcPtr proc);
-void StatScreen_Main(ProcPtr proc);
-void StatScreen_BackUpStatus(ProcPtr proc);
-void StatScreen_UpdateLastHelpInfo(ProcPtr proc);
-void SyncStatScreenBgOffset(void);
-void StatScreen_CleanUp(ProcPtr proc);
-void StartStatScreen(struct Unit * unit, ProcPtr parent);
-void StartStatScreenHelp(int page_id, ProcPtr proc);
-
-void HelpBoxPopulateStatScreenItem(struct HelpBoxProc * proc);
-void HelpBoxPopulateStatScreenStatus(struct HelpBoxProc * proc);
-void HelpBoxPopulateStatScreenPower(struct HelpBoxProc * proc);
-void HelpBoxRedirectStatScreenItem(struct HelpBoxProc * proc);
-void HelpBoxPopulateStatScreenWeaponExp(struct HelpBoxProc * proc);
-void HelpBoxPopulateStatScreenPInfo(struct HelpBoxProc * proc);
-void HelpBoxPopulateStatScreenJInfo(struct HelpBoxProc * proc);
-void HelpBoxRedirectStatScreenSupports(struct HelpBoxProc * proc);
-
-extern struct ProcScr CONST_DATA ProcScr_BackgroundSlide[];
-extern struct ProcScr CONST_DATA ProcScr_StatScreenPageSlide[];
-extern struct ProcScr CONST_DATA ProcScr_StatScreenUnitSlide[];
-extern struct ProcScr CONST_DATA ProcScr_StatScreenPageName[];
-extern struct ProcScr CONST_DATA ProcScr_StatScreenSprites[];
-extern struct ProcScr CONST_DATA ProcScr_SyncStatScreenBgOffset[];
-extern struct ProcScr CONST_DATA ProcScr_StatScreen[];
-
-extern struct StatScreenInfo gStatScreenInfo;
-extern struct StatScreenSt gStatScreenSt;
diff --git a/include/statusscreen.h b/include/statusscreen.h
deleted file mode 100644
index e7ca513..0000000
--- a/include/statusscreen.h
+++ /dev/null
@@ -1,67 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "proc.h"
-#include "text.h"
-
-// TODO: "StatScreen" vs. "StatusScreen" may be a bit confusing?
-// do we need to rename one or the other?
-
-struct StatusScreenSt
-{
-    /* 00 */ i32 page;
-    /* 04 */ bool8 in_transition;
-    /* 05 */ bool8 put_playthrough_number;
-    /* 08 */ i32 trial_something_width;
-    /* 0C */ i32 trial_something_height;
-    /* 10 */ struct Text text[14];
-};
-
-// shared layout (not that there's much to it)
-struct StatusScreenProc
-{
-    /* 00 */ PROC_HEADER;
-    /* 29 */ STRUCT_PAD(0x29, 0x2C);
-    /* 2C */ i32 slide_direction;
-    /* 30 */ STRUCT_PAD(0x30, 0x4A);
-    /* 4A */ i16 slide_target_page;
-    /* 4C */ i16 clock;
-};
-
-void StatusScreenFadeIn_Init(struct StatusScreenProc * proc);
-void StatusScreenFadeOut_Init(struct StatusScreenProc * proc);
-void StatusScreenFade_Loop(struct StatusScreenProc * proc);
-void StatusScreenFadeOut_Fini(struct StatusScreenProc * proc);
-void StatusScreenSprites_Loop(struct StatusScreenProc * proc);
-char const * GetRedLeaderName(void);
-void func_fe6_080736C8(void);
-void func_fe6_0807372C(struct StatusScreenProc * proc);
-void func_fe6_08073808(struct StatusScreenProc * proc);
-void func_fe6_080738FC(struct StatusScreenProc * proc);
-void DrawStatusScreenPageA(int unused);
-void func_fe6_08073AC8(struct StatusScreenProc * proc);
-void DrawStatusScreenPageB(int unused);
-void DrawStatusScreenPage(struct StatusScreenProc * proc, int page);
-void StatusScreen_Init(struct StatusScreenProc * proc);
-void StatusScreenPageSlide_Loop(struct StatusScreenProc * proc);
-void StatusScreenPageSlide_Init(struct StatusScreenProc * proc);
-void StatusScreenPageSlide_Fini(struct StatusScreenProc * proc);
-void StartStatusScreenPageSlide(struct StatusScreenProc * parent, int direction, int page);
-void func_fe6_08073F90(struct StatusScreenProc * proc);
-void func_fe6_08073FE0(int is_first_playthrough);
-void func_fe6_08074084(struct StatusScreenProc * proc);
-void func_fe6_080740D0(void);
-void func_fe6_080740E4(void);
-void StatusScreen_Loop(struct StatusScreenProc * proc);
-void StatusScreen_InitPlaythroughCount(struct StatusScreenProc * proc);
-void StartStatusScreen(ProcPtr parent);
-
-extern struct ProcScr CONST_DATA ProcScr_StatusScreenFadeIn[];
-extern struct ProcScr CONST_DATA ProcScr_StatusScreenFadeOut[];
-extern u16 CONST_DATA Sprite_086782D4[];
-extern struct ProcScr CONST_DATA ProcScr_StatusScreenSprites[];
-extern struct TextInitInfo CONST_DATA gUnk_08678330[];
-extern struct TextInitInfo CONST_DATA gUnk_08678378[];
-extern struct ProcScr CONST_DATA ProcScr_StatusScreenPageSlide[];
-extern struct ProcScr CONST_DATA ProcScr_StatusScreen[];
diff --git a/include/subtitlehelp.h b/include/subtitlehelp.h
deleted file mode 100644
index caec9c3..0000000
--- a/include/subtitlehelp.h
+++ /dev/null
@@ -1,11 +0,0 @@
-#pragma once
-
-#include "common.h"
-#include "proc.h"
-
-void StartSubtitleHelp(ProcPtr parent, char const * str);
-void EndSubtitleHelp(void);
-bool IsSubtitleHelpActive(void);
-
-extern struct ProcScr CONST_DATA ProcScr_SubtitleHelpDarkener[];
-extern struct ProcScr CONST_DATA ProcScr_SubtitleHelp[];
diff --git a/include/supply.h b/include/supply.h
deleted file mode 100644
index dd6b256..0000000
--- a/include/supply.h
+++ /dev/null
@@ -1,13 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-enum { SUPPLY_ITEM_COUNT = 100 };
-
-u16 * GetSupplyItems(void);
-void ClearSupplyItems(void);
-void SquashSupplyItems(void);
-int CountSupplyItems(void);
-int AddSupplyItem(int item);
-void RemoveSupplyItem(int slot);
-int FindSupplyItem(int item);
diff --git a/include/support.h b/include/support.h
deleted file mode 100644
index 47a5e2e..0000000
--- a/include/support.h
+++ /dev/null
@@ -1,71 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "unit.h"
-
-enum { MAX_SIMULTANEOUS_SUPPORT_COUNT_PER_UNIT = 5 };
-
-enum
-{
-    SUPPORT_LEVEL_NONE,
-    SUPPORT_LEVEL_C,
-    SUPPORT_LEVEL_B,
-    SUPPORT_LEVEL_A,
-};
-
-enum
-{
-    SUPPORT_EXP_C = 61,
-    SUPPORT_EXP_B = 121,
-    SUPPORT_EXP_A = 201,
-};
-
-enum
-{
-    AFFINITY_1 = 1,
-    AFFINITY_2 = 2,
-    AFFINITY_3 = 3,
-    AFFINITY_4 = 4,
-    AFFINITY_5 = 5,
-    AFFINITY_6 = 6,
-    AFFINITY_7 = 7,
-};
-
-struct SupportInfo
-{
-    /* 00 */ u8 pids[UNIT_SUPPORT_COUNT];
-    /* 0A */ u8 exp_base[UNIT_SUPPORT_COUNT];
-    /* 14 */ u8 exp_growth[UNIT_SUPPORT_COUNT];
-    /* 1E */ u8 count;
-};
-
-struct SupportBonuses
-{
-    /* 00 */ u8 affinity;
-
-    /* 01 */ u8 bonus_attack;
-    /* 02 */ u8 bonus_defense;
-    /* 03 */ u8 bonus_hit;
-    /* 04 */ u8 bonus_avoid;
-    /* 05 */ u8 bonus_crit;
-    /* 06 */ u8 bonus_dodge;
-};
-
-int GetUnitSupportCount(struct Unit * unit);
-u8 GetUnitSupportPid(struct Unit * unit, int num);
-struct Unit * GetUnitSupportUnit(struct Unit * unit, int num);
-int GetUnitSupportLevel(struct Unit * unit, int num);
-int GetUnitTotalSupportLevel(struct Unit * unit);
-void UnitGainSupportExp(struct Unit * unit, int num);
-void UnitGainSupportLevel(struct Unit * unit, int num);
-bool CanUnitSupportNow(struct Unit * unit, int num);
-int GetUnitInitialSupportExp(struct Unit * unit, int num);
-int GetUnitSupportNumByPid(struct Unit * unit, u8 pid);
-void ClearUnitSupports(struct Unit * unit);
-void DoTurnSupportExp(void);
-int GetUnitSupportBonuses(struct Unit * unit, struct SupportBonuses * bonuses);
-int GetUnitAffinityIcon(struct Unit * unit);
-int GetAffinityIconByPid(int pid);
-int GetSupportLevelSpecialChar(int level);
-char const * GetAffinityName(int affinity);
diff --git a/include/systemlabels.h b/include/systemlabels.h
deleted file mode 100644
index 8c9dd9c..0000000
--- a/include/systemlabels.h
+++ /dev/null
@@ -1,49 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-extern char const * CONST_DATA SystemLabel_Level[];
-extern char const * CONST_DATA SystemLabel_Exp[];
-extern char const * CONST_DATA SystemLabel_Hp[];
-extern char const * CONST_DATA SystemLabel_Strength[];
-extern char const * CONST_DATA SystemLabel_Magic[];
-extern char const * CONST_DATA SystemLabel_Skill[];
-extern char const * CONST_DATA SystemLabel_Speed[];
-extern char const * CONST_DATA SystemLabel_Defense[];
-extern char const * CONST_DATA SystemLabel_Resistance[];
-extern char const * CONST_DATA SystemLabel_Luck[];
-extern char const * CONST_DATA SystemLabel_Constitution[];
-extern char const * CONST_DATA SystemLabel_Aid[];
-extern char const * CONST_DATA SystemLabel_Movement[];
-extern char const * CONST_DATA SystemLabel_Rescue[];
-extern char const * CONST_DATA SystemLabel_Affinity[];
-extern char const * CONST_DATA SystemLabel_EquipRange[];
-extern char const * CONST_DATA SystemLabel_EquipAttack[];
-extern char const * CONST_DATA SystemLabel_EquipHit[];
-extern char const * CONST_DATA SystemLabel_EquipCrit[];
-extern char const * CONST_DATA SystemLabel_EquipAvoid[];
-extern char const * CONST_DATA SystemLabel_Status[];
-extern char const * CONST_DATA SystemLabel_08677E60[];
-extern char const * CONST_DATA SystemLabel_08677E68[];
-extern char const * CONST_DATA SystemLabel_08677E70[];
-extern char const * CONST_DATA SystemLabel_08677E78[];
-extern char const * CONST_DATA SystemLabel_08677E80[];
-extern char const * CONST_DATA SystemLabel_08677E88[];
-extern char const * CONST_DATA SystemLabel_08677E90[];
-extern char const * CONST_DATA SystemLabel_08677E98[];
-extern char const * CONST_DATA SystemLabel_08677EA0[];
-extern char const * CONST_DATA SystemLabel_08677EA8[];
-extern char const * CONST_DATA SystemLabel_08677EB0[];
-extern char const * CONST_DATA SystemLabel_08677EB8[];
-extern char const * CONST_DATA SystemLabel_08677EC0[];
-extern char const * CONST_DATA SystemLabel_08677EC8[];
-extern char const * CONST_DATA SystemLabel_08677ED0[];
-extern char const * CONST_DATA SystemLabel_08677ED8[];
-extern char const * CONST_DATA SystemLabel_WeaponKindSword[];
-extern char const * CONST_DATA SystemLabel_WeaponKindLance[];
-extern char const * CONST_DATA SystemLabel_WeaponKindAxe[];
-extern char const * CONST_DATA SystemLabel_WeaponKindBow[];
-extern char const * CONST_DATA SystemLabel_WeaponKindStaff[];
-extern char const * CONST_DATA SystemLabel_WeaponKindAnima[];
-extern char const * CONST_DATA SystemLabel_WeaponKindLight[];
-extern char const * CONST_DATA SystemLabel_WeaponKindElder[];
diff --git a/include/talk.h b/include/talk.h
deleted file mode 100644
index 588c308..0000000
--- a/include/talk.h
+++ /dev/null
@@ -1,99 +0,0 @@
-#pragma once
-
-#include "common.h"
-#include "proc.h"
-#include "text.h"
-#include "face.h"
-
-enum
-{
-    TALK_FACE_0,
-    TALK_FACE_1,
-    TALK_FACE_2,
-    TALK_FACE_3,
-    TALK_FACE_4,
-    TALK_FACE_5,
-    TALK_FACE_6,
-    TALK_FACE_7,
-
-    TALK_FACE_COUNT,
-
-    TALK_FACE_NONE = 0xFF,
-};
-
-enum
-{
-    TALK_FLAG_INSTANTSHIFT = (1 << 0),
-    TALK_FLAG_NOBUBBLE = (1 << 1),
-    TALK_FLAG_NOSKIP = (1 << 2),
-    TALK_FLAG_NOFAST = (1 << 3),
-    TALK_FLAG_4 = (1 << 4),
-    TALK_FLAG_SPRITE = (1 << 5),
-    TALK_FLAG_SILENT = (1 << 6),
-    TALK_FLAG_7 = (1 << 7),
-};
-
-struct TalkSt
-{
-    /* 00 */ char const * str;
-    /* 04 */ char const * str_back;
-    /* 08 */ u8 print_color;
-    /* 09 */ u8 line_active;
-    /* 0A */ u8 lines;
-    /* 0B */ u8 top_text_num;
-    /* 0C */ u8 x_text;
-    /* 0D */ u8 y_text;
-    /* 0E */ u8 active_width;
-    /* 0F */ i8 speak_talk_face;
-    /* 10 */ u8 speak_width;
-    /* 11 */ u8 active_talk_face;
-    /* 12 */ bool8 instant_print;
-    /* 13 */ i8 print_delay;
-    /* 14 */ i8 print_clock;
-    /* 15 */ u8 put_lines;
-    /* 16 */ u8 unk_16;
-    /* 17 */ u8 unk_17;
-    /* 18 */ struct FaceProc * faces[TALK_FACE_COUNT];
-    /* 38 */ u16 flags;
-    /* 3A */ // pad
-    /* 3C */ int number;
-    /* 40 */ char buf_number_str[0x20];
-    /* 60 */ char buf_unk_str[0x20];
-};
-
-void InitTalk(int chr, int lines, bool unpack_bubble);
-void InitSpriteTalk(int chr, int lines, int palid);
-void SetInitTalkTextFont(void);
-ProcPtr StartTalkExt(int x, int y, char const * str, ProcPtr parent);
-ProcPtr StartTalkMsg(int x, int y, int msg);
-ProcPtr StartTalkMsgExt(int x, int y, int msg, ProcPtr parent);
-ProcPtr StartTalk(int x, int y, char const * str);
-void EndTalk(void);
-void SetTalkLines(int lines);
-void SetTalkFlag(int flag);
-void ClearTalkFlag(int flag);
-int CheckTalkFlag(int flag);
-void SetTalkPrintDelay(int print_delay);
-void SetTalkPrintColor(int color);
-bool IsTalkLocked(void);
-void ResumeTalk(void);
-void SetActiveTalkFace(int talk_face);
-void StartTalkFace(int fid, int x, int y, int disp, int talk_face);
-void StartTalkWaitForInput(ProcPtr proc, int x, int y);
-void ClearTalkBubble(void);
-void ClearPutTalkText(void);
-void ClearTalkText(void);
-void PutTalkBubbleTail(int x, int y, int kind);
-void PutTalkBubbleTm(int x, int y, int width, int height);
-bool IsTalkActive(void);
-bool FaceExists(void);
-int GetTalkChoiceResult(void);
-void SetTalkNumber(int number);
-void SetTalkUnkStr(char const * str);
-void PrintStringToTexts(struct Text ** texts, char const * str, int x, int y);
-void StartPutTalkSpriteText(int x, int y, int chr, int palid, ProcPtr parent);
-void EndPutTalkSpriteText(void);
-bool IsTalkDebugActive(void);
-void StartTalkDebug(void);
-
-extern struct ProcScr CONST_DATA ProcScr_TalkOpen[];
diff --git a/include/targetlist.h b/include/targetlist.h
deleted file mode 100644
index 13b8760..0000000
--- a/include/targetlist.h
+++ /dev/null
@@ -1,59 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-void ForEachUnitInMovement(void (* func)(struct Unit * unit));
-void ForEachUnitInRange(void (* func)(struct Unit * unit));
-void ForEachPositionInRange(void (* func)(int x, int y));
-
-void EnlistAttackObstacleTargets(void);
-void TryEnlistAttackUnitTarget(struct Unit * unit);
-void ListAttackTargetsForWeapon(struct Unit * unit, int item);
-void TryEnlistTradeUnitTarget(struct Unit * unit);
-void ListTradeTargets(struct Unit * unit);
-void TryEnlistRescueUnitTarget(struct Unit * unit);
-void ListRescueTargets(struct Unit * unit);
-void TryEnlistRescueDropPositionTarget(int x, int y);
-void ListRescueDropTargets(struct Unit * unit);
-void TryEnlistRescueTakeUnitTarget(struct Unit * unit);
-void ListRescueTakeTargets(struct Unit * unit);
-void TryEnlistRescueGiveUnitTarget(struct Unit * unit);
-void ListRescueGiveTargets(struct Unit * unit);
-void TryEnlistTalkUnitTarget(struct Unit * unit);
-void ListTalkTargets(struct Unit * unit);
-void ListSupportTargets(struct Unit * unit);
-void func_fe6_08021240(struct Unit * unit);
-void func_fe6_08021278(struct Unit * unit);
-void TryEnlistDoorPositionTarget(int x, int y);
-void TryEnlistBridgePositionTarget(int x, int y);
-void ListOpenTerrainTargets(struct Unit * unit, int terrain);
-void ListTerrainHealingTargets(int faction);
-void ListPoisonDamageTargets(int faction);
-void TryEnlistRefreshUnitTarget(struct Unit * unit);
-void ListRefreshTargets(struct Unit * unit);
-void TryEnlistStealUnitTarget(struct Unit * unit);
-void ListStealTargets(struct Unit * unit);
-void TryEnlistHealUnitTarget(struct Unit * unit);
-void ListAdjacentHealTargets(struct Unit * unit);
-void ListRangedHealTargets(struct Unit * unit);
-void TryEnlistRestoreUnitTarget(struct Unit * unit);
-void ListRestoreTargets(struct Unit * unit);
-void TryEnlistBarrierUnitTarget(struct Unit * unit);
-void ListBarrierTargets(struct Unit * unit);
-void TryEnlistRescueStaffUnitTarget(struct Unit * unit);
-void ListRescueStaffTargets(struct Unit * unit);
-void TryEnlistSilenceUnitTarget(struct Unit * unit);
-void TryEnlistSleepUnitTarget(struct Unit * unit);
-void TryEnlistBerserkUnitTarget(struct Unit * unit);
-void ListSilenceTargets(struct Unit * unit);
-void ListSleepTargets(struct Unit * unit);
-void ListBerserkTargets(struct Unit * unit);
-void TryEnlistWarpUnitTarget(struct Unit * unit);
-void ListWarpTargets(struct Unit * unit);
-void ListUnlockTargets(struct Unit * unit);
-void TryEnlistRepairUnitTarget(struct Unit * unit);
-void ListRepairTargets(struct Unit * unit);
-void ListSaintsStaffTargets(struct Unit * unit);
-void func_fe6_08021B30(int arg_0);
-
-extern struct Unit * gSubjectUnit;
diff --git a/include/terrain.h b/include/terrain.h
new file mode 100644
index 0000000..f16821a
--- /dev/null
+++ b/include/terrain.h
@@ -0,0 +1,17 @@
+#pragma once
+
+#include "global.h"
+
+struct Trap {
+    /* 00 */ u8 xPos;
+    /* 01 */ u8 yPos;
+
+    /* 02 */ u8 type;
+
+    /* 03 */ u8 extra; // extra data (meaning varies based on trap type)
+    /* 04 */ s8 data[4]; // more extra data (see above enum for per trap type entry allocations)
+};
+
+#define TRAP_INDEX(aTrap) ((aTrap) - GetTrap(0))
+
+struct Trap* GetTrap(int id);
diff --git a/include/text.h b/include/text.h
deleted file mode 100644
index 516c57e..0000000
--- a/include/text.h
+++ /dev/null
@@ -1,189 +0,0 @@
-#pragma once
-
-#include "gba/gba.h"
-
-#include "proc.h"
-
-struct Glyph
-{
-    struct Glyph const * next;
-
-    u8 sjis_byte_1;
-    u8 width;
-    u32 bitmap[16];
-};
-
-struct Text
-{
-    /* 00 */ u16 chr_position;
-    /* 02 */ u8 x;
-    /* 03 */ u8 color;
-    /* 04 */ u8 tile_width;
-    /* 05 */ bool8 db_enabled;
-    /* 06 */ u8 db_id;
-    /* 07 */ bool8 is_printing;
-};
-
-struct Font
-{
-    /* 00 */ u8 * draw_dest;
-    /* 04 */ struct Glyph const * const * glyphs;
-    /* 08 */ void (* draw_glyph)(struct Text * text, struct Glyph const * glyph);
-    /* 0C */ u8 * (* get_draw_dest)(struct Text * text);
-    /* 10 */ u16 tileref;
-    /* 12 */ u16 chr_counter;
-    /* 14 */ u16 palid;
-    /* 16 */ u8 lang;
-};
-
-struct TextInitInfo
-{
-    /* 00 */ struct Text * text;
-    /* 04 */ u8 width;
-};
-
-enum
-{
-    LANG_JAPANESE,
-    LANG_ENGLISH,
-};
-
-enum
-{
-    TEXT_GLYPHS_SYSTEM,
-    TEXT_GLYPHS_TALK,
-};
-
-enum
-{
-    TEXT_COLOR_0123 = 0,
-    TEXT_COLOR_0456 = 1,
-    TEXT_COLOR_0789 = 2,
-    TEXT_COLOR_0ABC = 3,
-    TEXT_COLOR_0DEF = 4,
-    TEXT_COLOR_0030 = 5,
-    TEXT_COLOR_4DEF = 6,
-    TEXT_COLOR_456F = 7,
-    TEXT_COLOR_47CF = 8,
-    TEXT_COLOR_MASK = 9,
-
-    TEXT_COLOR_COUNT,
-
-    TEXT_COLOR_SYSTEM_WHITE = TEXT_COLOR_0123,
-    TEXT_COLOR_SYSTEM_GRAY  = TEXT_COLOR_0456,
-    TEXT_COLOR_SYSTEM_BLUE  = TEXT_COLOR_0789,
-    TEXT_COLOR_SYSTEM_GOLD  = TEXT_COLOR_0ABC,
-    TEXT_COLOR_SYSTEM_GREEN = TEXT_COLOR_0DEF,
-
-    // TEXT_COLOR_TALK_...
-};
-
-enum
-{
-    TEXT_SPECIAL_BIGNUM_0,
-    TEXT_SPECIAL_BIGNUM_1,
-    TEXT_SPECIAL_BIGNUM_2,
-    TEXT_SPECIAL_BIGNUM_3,
-    TEXT_SPECIAL_BIGNUM_4,
-    TEXT_SPECIAL_BIGNUM_5,
-    TEXT_SPECIAL_BIGNUM_6,
-    TEXT_SPECIAL_BIGNUM_7,
-    TEXT_SPECIAL_BIGNUM_8,
-    TEXT_SPECIAL_BIGNUM_9,
-    TEXT_SPECIAL_SMALLNUM_0,
-    TEXT_SPECIAL_SMALLNUM_1,
-    TEXT_SPECIAL_SMALLNUM_2,
-    TEXT_SPECIAL_SMALLNUM_3,
-    TEXT_SPECIAL_SMALLNUM_4,
-    TEXT_SPECIAL_SMALLNUM_5,
-    TEXT_SPECIAL_SMALLNUM_6,
-    TEXT_SPECIAL_SMALLNUM_7,
-    TEXT_SPECIAL_SMALLNUM_8,
-    TEXT_SPECIAL_SMALLNUM_9,
-    TEXT_SPECIAL_DASH,
-    TEXT_SPECIAL_PLUS,
-    TEXT_SPECIAL_SLASH,
-    TEXT_SPECIAL_TILDE,
-    TEXT_SPECIAL_S,
-    TEXT_SPECIAL_A,
-    TEXT_SPECIAL_B,
-    TEXT_SPECIAL_C,
-    TEXT_SPECIAL_D,
-    TEXT_SPECIAL_E,
-    TEXT_SPECIAL_G,
-    TEXT_SPECIAL_K, // NOTE: this is an E? used as statscreen exp label and equip marker
-    TEXT_SPECIAL_COLON,
-    TEXT_SPECIAL_DOT,
-    TEXT_SPECIAL_HP_A,
-    TEXT_SPECIAL_HP_B,
-    TEXT_SPECIAL_LV_A,
-    TEXT_SPECIAL_LV_B,
-    TEXT_SPECIAL_ARROW,
-    TEXT_SPECIAL_HEART,
-    TEXT_SPECIAL_100_A,
-    TEXT_SPECIAL_100_B,
-    TEXT_SPECIAL_PERCENT,
-    // TODO: rest
-
-    TEXT_SPECIAL_NOTHING = 0xFF,
-};
-
-int GetLang(void);
-void ResetText(void);
-void InitTextFont(struct Font * font, void * draw_dest, int chr, int palid);
-void SetTextFontGlyphs(int glyphset);
-void ResetTextFont(void);
-void SetTextFont(struct Font * font);
-void InitText(struct Text * text, int width);
-void InitTextDb(struct Text * text, int width);
-void InitTextList(struct TextInitInfo const * info);
-void ClearText(struct Text * text);
-void ClearTextPart(struct Text * text, int tile_off, int tile_width);
-int Text_GetChrOffset(struct Text * text);
-int Text_GetCursor(struct Text * text);
-void Text_SetCursor(struct Text * text, int x);
-void Text_Skip(struct Text * text, int x);
-void Text_SetColor(struct Text * text, int color);
-int Text_GetColor(struct Text * text);
-void Text_SetParams(struct Text * text, int x, int color);
-void PutText(struct Text * text, u16 * tm);
-void PutBlankText(struct Text * text, u16 * tm);
-int GetStringTextLen(char const * str);
-char const * GetCharTextLen(char const * str, int * out_width);
-int GetStringTextCenteredPos(int area_length, char const * str);
-void GetStringTextBox(char const * str, int * out_width, int * out_height);
-char const * GetStringLineEnd(char const * str);
-void Text_DrawString(struct Text * text, char const * str);
-void Text_DrawNumber(struct Text * text, int number);
-void Text_DrawNumberOrBlank(struct Text * text, int number);
-char const * Text_DrawCharacter(struct Text * text, char const * str);
-void InitSystemTextFont(void);
-void InitTalkTextFont(void);
-void SetTextDrawNoClear(void);
-void PutDrawText(struct Text * text, u16 * tm, int color, int x, int tile_width, char const * str);
-void Text_InsertDrawString(struct Text * text, int x, int color, const char * str);
-void Text_InsertDrawNumberOrBlank(struct Text * text, int x, int color, int number);
-void InitSpriteTextFont(struct Font * font, u8 * draw_dest, int palid);
-void InitSpriteText(struct Text * text);
-void SpriteText_DrawBackground(struct Text * text);
-void SpriteText_DrawBackgroundExt(struct Text * text, u32 line);
-char const * StartTextPrint(struct Text * text, char const * str, int interval, int char_per_tick);
-bool IsTextPrinting(struct Text * text);
-void EndTextPrinting(void);
-void StartGreenText(ProcPtr parent);
-void EndGreenText(void);
-void PutSpecialChar(u16 * tm, int color, int id);
-void PutNumberExt(u16 * tm, int color, int number, int id_zero);
-void PutNumber(u16 * tm, int color, int number);
-void PutNumberOrBlank(u16 * tm, int color, int number);
-void PutNumberTwoChr(u16 * tm, int color, int number);
-void PutNumberSmall(u16 * tm, int color, int number);
-void PutNumberBonus(int number, u16 * tm);
-void PutNumber2DigitExt(u16 * tm, int color, int number, int id_zero);
-void PutNumber2Digit(u16 * tm, int color, int number);
-void PutNumber2DigitSmall(u16 * tm, int color, int number);
-void PutTime(u16 * tm, int color, int time, bool always_display_punctuation);
-void PutTwoSpecialChar(u16 * tm, int color, int id_a, int id_b);
-
-extern struct Font EWRAM_DATA gDefaultFont;
-extern struct Font * EWRAM_DATA gActiveFont;
diff --git a/include/trademenu.h b/include/trademenu.h
deleted file mode 100644
index e4656ba..0000000
--- a/include/trademenu.h
+++ /dev/null
@@ -1,7 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "proc.h"
-
-ProcPtr StartTradeMenu(struct Unit * unitA, struct Unit * unitB, int unused);
diff --git a/include/trap.h b/include/trap.h
deleted file mode 100644
index ccdb048..0000000
--- a/include/trap.h
+++ /dev/null
@@ -1,80 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-enum
-{
-    TRAP_MAX_COUNT = 0x20,
-};
-
-enum
-{
-    TRAP_NONE,
-
-    TRAP_BALLISTA = 1,
-    TRAP_LONGBALLISTA = 2,
-    TRAP_KILLERBALLISTA = 3,
-    TRAP_OBSTACLE = 4,
-    TRAP_MAPCHANGE = 5,
-    TRAP_FIRE = 6,
-    TRAP_GAS = 7,
-    TRAP_8 = 8,
-    TRAP_LIGHTARROW = 9,
-    TRAP_STEP_FIRE = 10,
-    TRAP_STEP_PIKE = 11,
-    TRAP_STEP_DISARMED = 12,
-};
-
-enum
-{
-    TRAPDATA_TRAP_INITCNT = 0,
-    TRAPDATA_TRAP_INTERVAL = 1,
-    TRAPDATA_TRAP_COUNTER = 2,
-    TRAPDATA_TRAP_DAMAGE = 3,
-};
-
-struct Trap
-{
-    /* 00 */ u8 x, y;
-    /* 02 */ u8 kind;
-    /* 03 */ u8 extra;
-    /* 04 */ i8 data[4];
-};
-
-void InitTraps(void);
-struct Trap * GetTrap(int id);
-struct Trap * GetTrapAt(int x, int y);
-struct Trap * AddTrap(int x, int y, int kind, int extra);
-struct Trap * AddDamagingTrap(int x, int y, int kind, int extra, int turnCountdown, int turnInterval, int damage);
-void AddFireTrap(int x, int y, int turnCountdown, int turnInterval);
-void AddGasTrap(int x, int y, int facing, int turnCountdown, int turnInterval);
-void AddArrowTrap(int x, int turnCountdown, int turnInterval);
-void func_fe6_08026BA4(int x, int y, int turnCountdown, int turnInterval);
-void AddStepFireTrap(int x, int y);
-void AddStepPikeTrap(int x, int y, int facing);
-void InitMapTraps(void);
-void ApplyEnabledMapChanges(void);
-struct Trap * GetBallistaTrapAt(int x, int y);
-int GetBallistaItemAt(int x, int y);
-int GetDummyBallistaItemAt(int x, int y);
-int GetObstacleHpAt(int x, int y);
-struct MapChangeInfo const * GetMapChange(int id);
-int GetMapChangeIdAt(int x, int y);
-void ApplyMapChange(int id);
-void AddMapChangeTrap(int id);
-void UnitHideIfUnderRoof(struct Unit * unit);
-void UpdateRoofedUnits(void);
-void EnlistFireTrapTargets(int x, int y, int damage);
-void EnlistArrowTrapTargets(int x, int y, int damage);
-void EnlistGasTrapTargets(int x, int y, int damage, int facing);
-void ListDamagingTrapTargets(void);
-void ListDamagingTrapTargetsForDisplay(void);
-bool DoHandleStepTraps(ProcPtr proc);
-
-extern struct ProcScr CONST_DATA ProcScr_UpdateTraps[];
-
-#define TRAP_ID(trap) ((trap) - GetTrap(0))
-
-// hack
-// TODO: do we want both names to be macros and the actual function be something like "GetTerrainTrapStateAt"?
-#define GetBallistaUsesAt(x, y) GetObstacleHpAt((x), (y))
diff --git a/include/types.h b/include/types.h
index f5e3fba..e9ac6f8 100644
--- a/include/types.h
+++ b/include/types.h
@@ -1,94 +1,23 @@
 #pragma once
 
-#include <stdint.h>
+#include "gba/types.h"
 #include <limits.h>
 
-typedef uint8_t  u8;
-typedef uint16_t u16;
-typedef uint32_t u32;
-typedef uint64_t u64;
-typedef int8_t   i8;
-typedef int16_t  i16;
-typedef int32_t  i32;
-typedef int64_t  i64;
+#ifndef __STDBOOL_H__
+typedef s8 bool;
+enum { false, true };
+#define false	false
+#define true	true
+#define __bool_true_false_are_defined	1
+#endif /* bool */
 
-typedef float  f32;
-typedef double f64;
-
-#if defined(MODERN) && MODERN
-
-typedef i32 fi8;
-typedef i32 fi16;
-typedef u32 fu8;
-typedef u32 fu16;
-
-#else
-
-typedef i8  fi8;
-typedef i16 fi16;
-typedef u8  fu8;
-typedef u16 fu16;
-
-#endif
-
-typedef u8  volatile vu8;
-typedef u16 volatile vu16;
-typedef u32 volatile vu32;
-typedef u64 volatile vu64;
-typedef i8  volatile vi8;
-typedef i16 volatile vi16;
-typedef i32 volatile vi32;
-typedef i64 volatile vi64;
-
-typedef intptr_t  iptr;
-typedef uintptr_t uptr;
-
-enum { FALSE, TRUE };
-
-#if !defined(__cplusplus) && !defined(bool)
-typedef fi8 bool;
-#endif
-typedef i8 bool8;
-
-// TODO: move types below
-
-typedef void (* Func)(void);
-
-struct Vec2i
-{
-    i16 x, y;
+struct Vec2 {
+    s16 x, y;
 };
 
-struct Vec2u
-{
+struct Vec2u {
     u16 x, y;
 };
 
-// Forward decls for common types
-// TODO: move
-
-struct BmSt;
-struct PlaySt;
-
+struct SMSHandle;
 struct Unit;
-struct UnitInfo;
-struct UnitSprite;
-struct SupportInfo;
-
-struct BattleUnit;
-struct BattleHit;
-
-struct HelpBoxInfo;
-struct HelpBoxProc;
-
-struct SelectTarget;
-struct MapSelectInfo;
-struct MapSelectProc;
-
-struct MenuProc;
-struct MenuEntProc;
-struct MenuEntInfo;
-
-// TODO: move
-struct ChapterEventInfo;
-struct EventInfo;
diff --git a/include/ui.h b/include/ui.h
deleted file mode 100644
index 35cbe6e..0000000
--- a/include/ui.h
+++ /dev/null
@@ -1,37 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-enum
-{
-    // window_theme (including PlaySt::config_window_theme)
-
-    UI_WINDOW_THEME_BLUE,
-    UI_WINDOW_THEME_RED,
-    UI_WINDOW_THEME_GRAY,
-    UI_WINDOW_THEME_GREEN,
-};
-
-enum
-{
-    // PutUiWindowFrame param window_kind
-
-    UI_WINDOW_REGULAR,
-    UI_WINDOW_FILL,
-    UI_WINDOW_SABLE,
-};
-
-void ApplyUiWindowFramePal(int palid);
-void UnpackUiWindowFrameImg(void * vram);
-void ApplyUiStatBarPal(int palid);
-void UnpackUiWindowFrameGraphics2(int window_theme);
-void PutUiWindowFrame(int x, int y, int width, int height, int window_kind);
-void PutUiHand(int x, int y);
-void PutFrozenUiHand(int x, int y);
-int GetUiHandPrevX(void);
-int GetUiHandPrevY(void);
-void ClearUi(void);
-void PutUiEntryHover(int x, int y, int width);
-void RemoveUiEntryHover(int x, int y, int width);
-void UnpackUiUnitNameFrameGraphics(void * vram, int palid, int palcount);
-void UnpackUiWindowFrameGraphics(void);
diff --git a/include/unit.h b/include/unit.h
index 5e49379..61e7164 100644
--- a/include/unit.h
+++ b/include/unit.h
@@ -1,383 +1,442 @@
-#pragma once
+#include "global.h"
 
-#include "common.h"
+struct SupportData;
 
-#include "bm.h"
-
-enum { UNIT_WEAPON_EXP_COUNT = 8 };
-enum { UNIT_SUPPORT_COUNT = 10 };
+// Config
 enum { UNIT_LEVEL_MAX = 20 };
+enum { UNIT_ITEM_COUNT = 5 };
+enum { UNIT_DEFINITION_ITEM_COUNT = 4 };
+enum { UNIT_SUPPORT_MAX_COUNT = 7 };
+
+// Meaningful constants
+enum { UNIT_EXP_DISABLED = 0xFF };
+
+struct CharacterData {
+    /* 00 */ u16 nameTextId;
+    /* 02 */ u16 descTextId;
+    /* 04 */ u8 number;
+    /* 05 */ u8 defaultClass;
+    /* 06 */ u16 portraitId;
+    /* 08 */ u8 miniPortrait;
+    /* 09 */ u8 affinity;
+    /* 0A */ u8 sort_order;
+
+    /* 0B */ s8 baseLevel;
+    /* 0C */ s8 baseHP;
+    /* 0D */ s8 basePow;
+    /* 0E */ s8 baseSkl;
+    /* 0F */ s8 baseSpd;
+    /* 10 */ s8 baseDef;
+    /* 11 */ s8 baseRes;
+    /* 12 */ s8 baseLck;
+    /* 13 */ s8 baseCon;
+
+    /* 14 */ u8 baseRanks[8];
+
+    /* 1C */ u8 growthHP;
+    /* 1D */ u8 growthPow;
+    /* 1E */ u8 growthSkl;
+    /* 1F */ u8 growthSpd;
+    /* 20 */ u8 growthDef;
+    /* 21 */ u8 growthRes;
+    /* 22 */ u8 growthLck;
+
+    /* 23 */ u8 _u23;
+    /* 24 */ u8 _u24;
+    /* 25 */ u8 _u25;
+    /* 26 */ u8 _u26;
+    /* 27 */ u8 _u27;
 
-enum
-{
-    UNIT_AMOUNT_BLUE = 62,
-    UNIT_AMOUNT_RED = 50,
-    UNIT_AMOUNT_GREEN = 20,
-    UNIT_AMOUNT_PURPLE = 5,
-};
+    /* 28 */ u32 attributes;
 
-enum
-{
-    UNIT_ATTR_MOUNTED = (1 << 0),
-    UNIT_ATTR_RE_MOVE = (1 << 1),
-    UNIT_ATTR_STEAL = (1 << 2),
-    UNIT_ATTR_THIEF = (1 << 3),
-    UNIT_ATTR_DANCE = (1 << 4),
-    UNIT_ATTR_PLAY = (1 << 5),
-    UNIT_ATTR_CRITBONUS = (1 << 6),
-    UNIT_ATTR_BALLISTA = (1 << 7),
-    UNIT_ATTR_PROMOTED = (1 << 8),
-    UNIT_ATTR_SUPPLY = (1 << 9),
-    UNIT_ATTR_MOUNT_ICON = (1 << 10),
-    UNIT_ATTR_WYVERN_ICON = (1 << 11),
-    UNIT_ATTR_PEGASUS_ICON = (1 << 12),
-    UNIT_ATTR_LORD = (1 << 13),
-    UNIT_ATTR_FEMALE = (1 << 14),
-    UNIT_ATTR_BOSS = (1 << 15),
-    UNIT_ATTR_LOCK_ROY = (1 << 16),
-    UNIT_ATTR_LOCK_MYRM = (1 << 17),
-    UNIT_ATTR_LOCK_DRAGON = (1 << 18),
-    UNIT_ATTR_LOCK_ZEPHIEL = (1 << 19),
-    UNIT_ATTR_20 = (1 << 20),
-    UNIT_ATTR_TRIANGLE_ATTACK_PEGASI = (1 << 21),
-    UNIT_ATTR_TRIANGLE_ATTACK_ARMORS = (1 << 22),
-    UNIT_ATTR_ALT_PINFO = (1 << 23),
-    UNIT_ATTR_MAJOR_BOSS = (1 << 24),
+    /* 2C */ const struct SupportData* pSupportData;
+    /* 30 */ u8 visit_group;
 
-    // Helpers
-    UNIT_ATTR_REFRESHER = UNIT_ATTR_DANCE + UNIT_ATTR_PLAY,
-    UNIT_ATTR_TRIANGLE_ATTACK_ANY = UNIT_ATTR_TRIANGLE_ATTACK_PEGASI + UNIT_ATTR_TRIANGLE_ATTACK_ARMORS,
+    /* 31 */ u8 _pad_[0x34 - 0x31];
 };
 
-enum
-{
-    UNIT_FLAG_HIDDEN       = 1 << 0,
-    UNIT_FLAG_TURN_ENDED   = 1 << 1,
-    UNIT_FLAG_DEAD         = 1 << 2,
-    UNIT_FLAG_NOT_DEPLOYED = 1 << 3,
-    UNIT_FLAG_RESCUING     = 1 << 4,
-    UNIT_FLAG_RESCUED      = 1 << 5,
-    UNIT_FLAG_HAD_ACTION   = 1 << 6,
-    UNIT_FLAG_UNDER_ROOF   = 1 << 7,
-    UNIT_FLAG_SEEN         = 1 << 8,
-    UNIT_FLAG_CONCEALED    = 1 << 9,
-    UNIT_FLAG_AI_PROCESSED = 1 << 10,
-
-    UNIT_FLAG_SOLOANIM_1   = 1 << 14,
-    UNIT_FLAG_SOLOANIM_2   = 1 << 15,
+struct ClassData {
+    /* 00 */ u16 nameTextId;
+    /* 02 */ u16 descTextId;
+    /* 04 */ u8 number;
+    /* 05 */ u8 promotion;
+    /* 06 */ u8 SMSId;
+    /* 07 */ u8 slowWalking;
+    /* 08 */ u16 defaultPortraitId;
+    /* 0A */ u8 sort_order;
+
+    /* 0B */ s8 baseHP;
+    /* 0C */ s8 basePow;
+    /* 0D */ s8 baseSkl;
+    /* 0E */ s8 baseSpd;
+    /* 0F */ s8 baseDef;
+    /* 10 */ s8 baseRes;
+    /* 11 */ s8 baseCon;
+    /* 12 */ s8 baseMov;
+
+    /* 13 */ s8 maxHP;
+    /* 14 */ s8 maxPow;
+    /* 15 */ s8 maxSkl;
+    /* 16 */ s8 maxSpd;
+    /* 17 */ s8 maxDef;
+    /* 18 */ s8 maxRes;
+    /* 19 */ s8 maxCon;
+
+    /* 1A */ s8 classRelativePower;
+
+    /* 1B */ s8 growthHP;
+    /* 1C */ s8 growthPow;
+    /* 1D */ s8 growthSkl;
+    /* 1E */ s8 growthSpd;
+    /* 1F */ s8 growthDef;
+    /* 20 */ s8 growthRes;
+    /* 21 */ s8 growthLck;
+
+    /* 22 */ u8 promotionHp;
+    /* 23 */ u8 promotionPow;
+    /* 24 */ u8 promotionSkl;
+    /* 25 */ u8 promotionSpd;
+    /* 26 */ u8 promotionDef;
+    /* 27 */ u8 promotionRes;
 
-    // Helpers
+    /* 28 */ u32 attributes;
 
-    UNIT_FLAG_UNAVAILABLE = UNIT_FLAG_DEAD | UNIT_FLAG_NOT_DEPLOYED,
-    UNIT_FLAG_SOLOANIM = UNIT_FLAG_SOLOANIM_1 | UNIT_FLAG_SOLOANIM_2,
-};
+    /* 2C */ u8 baseRanks[8];
 
-enum
-{
-    UNIT_STATUS_NONE,
+    /* 34 */ const void* pBattleAnimDef;
+    /* 38 */ const s8* pMovCostTable[3]; // standard, rain, snow
 
-    UNIT_STATUS_POISON,
-    UNIT_STATUS_SLEEP,
-    UNIT_STATUS_SILENCED,
-    UNIT_STATUS_BERSERK,
-};
+    /* 44 */ const s8* pTerrainAvoidLookup;
+    /* 48 */ const s8* pTerrainDefenseLookup;
+    /* 4C */ const s8* pTerrainResistanceLookup;
 
-enum
-{
-    UNIT_USEBIT_WEAPON = (1 << 0),
-    UNIT_USEBIT_STAFF = (1 << 1),
+    //* 44 */ const s8* pTerrainBonusTables[3]; // def, avo, res
+
+    /* 50 */ const void* _pU50;
 };
 
-enum
-{
-    ITEMSLOT_INV0,
-    ITEMSLOT_INV1,
-    ITEMSLOT_INV2,
-    ITEMSLOT_INV3,
-    ITEMSLOT_INV4,
+struct Unit {
+    /* 00 */ const struct CharacterData* pCharacterData;
+    /* 04 */ const struct ClassData* pClassData;
 
-    ITEMSLOT_INV_COUNT,
+    /* 08 */ s8 level;
+    /* 09 */ u8 exp;
 
-    ITEMSLOT_OVERFLOW = ITEMSLOT_INV_COUNT + 0,
-    ITEMSLOT_ARENA_PLAYER = ITEMSLOT_INV_COUNT + 1,
-    ITEMSLOT_ARENA_OPPONENT = ITEMSLOT_INV_COUNT + 2,
-    ITEMSLOT_BALLISTA = ITEMSLOT_INV_COUNT + 3,
-};
+    /* 0A */ u8 aiFlags;
 
-enum
-{
-    UNIT_WALKSPEED_FAST,
-    UNIT_WALKSPEED_SLOW,
-};
+    /* 0B */ s8 index;
 
-struct PInfo
-{
-    /* 00 */ u16 msg_name;
-    /* 02 */ u16 msg_desc;
-    /* 04 */ u8 id;
-    /* 05 */ u8 jid_default;
-    /* 06 */ u16 fid;
-    /* 08 */ u8 chibi_id;
-    /* 09 */ u8 affinity;
-    /* 0A */ u8 unk_0A;
-
-    /* 0B */ i8 base_level;
-    /* 0C */ i8 base_hp;
-    /* 0D */ i8 base_pow;
-    /* 0E */ i8 base_skl;
-    /* 0F */ i8 base_spd;
-    /* 10 */ i8 base_def;
-    /* 11 */ i8 base_res;
-    /* 12 */ i8 base_lck;
-    /* 13 */ i8 bonus_con;
-
-    /* 14 */ u8 wexp[UNIT_WEAPON_EXP_COUNT];
-
-    /* 1C */ u8 growth_hp;
-    /* 1D */ u8 growth_pow;
-    /* 1E */ u8 growth_skl;
-    /* 1F */ u8 growth_spd;
-    /* 20 */ u8 growth_def;
-    /* 21 */ u8 growth_res;
-    /* 22 */ u8 growth_lck;
-
-    /* 23 */ u8 banim_pal_a;
-    /* 24 */ u8 banim_pal_b;
-    /* 25 */ // pad
+    /* 0C */ u32 state;
 
-    /* 28 */ u32 attributes;
+    /* 10 */ s8 xPos;
+    /* 11 */ s8 yPos;
 
-    /* 2C */ struct SupportInfo const * support_info;
-};
+    /* 12 */ s8 maxHP;
+    /* 13 */ s8 curHP;
+    /* 14 */ s8 pow;
+    /* 15 */ s8 skl;
+    /* 16 */ s8 spd;
+    /* 17 */ s8 def;
+    /* 18 */ s8 res;
+    /* 19 */ s8 lck;
 
-struct JInfo
-{
-    /* 00 */ u16 msg_name;
-    /* 02 */ u16 msg_desc;
-    /* 04 */ u8 id;
-    /* 05 */ u8 jid_promote;
-    /* 06 */ u8 map_sprite;
-    /* 07 */ u8 walk_speed;
-    /* 08 */ u16 fid;
-    /* 0A */ u8 unk_0A;
-
-    /* 0B */ i8 base_hp;
-    /* 0C */ i8 base_pow;
-    /* 0D */ i8 base_skl;
-    /* 0E */ i8 base_spd;
-    /* 0F */ i8 base_def;
-    /* 10 */ i8 base_res;
-    /* 11 */ i8 base_con;
-    /* 12 */ i8 base_mov;
-
-    /* 13 */ i8 max_hp;
-    /* 14 */ i8 max_pow;
-    /* 15 */ i8 max_skl;
-    /* 16 */ i8 max_spd;
-    /* 17 */ i8 max_def;
-    /* 18 */ i8 max_res;
-    /* 19 */ i8 max_con;
-
-    /* 1A */ i8 power_level;
-
-    /* 1B */ i8 growth_hp;
-    /* 1C */ i8 growth_pow;
-    /* 1D */ i8 growth_skl;
-    /* 1E */ i8 growth_spd;
-    /* 1F */ i8 growth_def;
-    /* 20 */ i8 growth_res;
-    /* 21 */ i8 growth_lck;
-    /* 22 */ // pad
-
-    /* 24 */ u32 attributes;
-
-    /* 28 */ u8 wexp[UNIT_WEAPON_EXP_COUNT];
-
-    /* 30 */ void const * banim_info;
-
-    /* 34 */ i8 const * mov_table;
-    /* 38 */ i8 const * avo_terrain_table;
-    /* 3C */ i8 const * def_terrain_table;
-    /* 40 */ i8 const * res_terrain_table;
-
-    /* 44 */ void const * unk_44;
-};
+    /* 1A */ s8 conBonus;
+    /* 1B */ u8 rescue;
+    /* 1C */ u8 ballistaIndex;
+    /* 1D */ s8 movBonus;
 
-struct Unit
-{
-    /* 00 */ struct PInfo const * pinfo;
-    /* 04 */ struct JInfo const * jinfo;
-    /* 08 */ i8 level;
-    /* 09 */ u8 exp;
-    /* 0A */ u8 ai_flags;
-    /* 0B */ i8 id;
-    /* 0C */ u16 flags;
-    /* 0E */ i8 x;
-    /* 0F */ i8 y;
-    /* 10 */ i8 max_hp;
-    /* 11 */ i8 hp;
-    /* 12 */ i8 pow;
-    /* 13 */ i8 skl;
-    /* 14 */ i8 spd;
-    /* 15 */ i8 def;
-    /* 16 */ i8 res;
-    /* 17 */ i8 lck;
-    /* 18 */ i8 bonus_con;
-    /* 19 */ u8 rescue;
-    /* 1A */ i8 bonus_mov;
-    /* 1B */ // pad?
-    /* 1C */ u16 items[ITEMSLOT_INV_COUNT];
-    /* 26 */ u8 wexp[UNIT_WEAPON_EXP_COUNT];
-    /* 2E */ u8 status : 4;
-    /* 2E */ u8 status_duration : 4;
-    /* 2F */ u8 torch : 4;
-    /* 2F */ u8 barrier : 4;
-    /* 30 */ u8 supports[UNIT_SUPPORT_COUNT];
-    /* 3A */ // pad?
-    /* 3C */ struct UnitSprite * map_sprite;
-    /* 40 */ u16 ai_config;
-    /* 42 */ u8 ai_a;
-    /* 43 */ u8 ai_a_pc;
-    /* 44 */ u8 ai_b;
-    /* 45 */ u8 ai_b_pc;
-    /* 46 */ u8 ai_counter;
-    /* 47 */ // pad?
-    /* 48 */ // end
+    /* 1E */ u16 items[UNIT_ITEM_COUNT];
+    /* 28 */ u8 ranks[8];
+
+    /* 30 */ u8 statusIndex : 4;
+    /* 30 */ u8 statusDuration : 4;
+
+    /* 31 */ u8 torchDuration : 4;
+    /* 31 */ u8 barrierDuration : 4;
+
+    /* 32 */ u8 supports[UNIT_SUPPORT_MAX_COUNT];
+    /* 39 */ s8 supportBits;
+    /* 3A */ u8 _u3A;
+    /* 3B */ u8 _u3B;
+
+    /* 3C */ struct SMSHandle* pMapSpriteHandle;
+
+    /* 40 */ u16 ai3And4;
+    /* 42 */ u8 ai1;
+    /* 43 */ u8 ai1data;
+    /* 44 */ u8 ai2;
+    /* 45 */ u8 ai2data;
+    /* 46 */ u8 _u46;
+    /* 47 */ u8 _u47;
 };
 
-struct UnitInfo
-{
+extern struct Unit * CONST_DATA gUnitLut[0x100];
+
+struct UnitDefinition {
     /* 00 */ u8 pid;
     /* 01 */ u8 jid;
     /* 02 */ u8 pid_lead;
     /* 03 */ u8 autolevel : 1;
     /* 03 */ u8 faction_id : 2;
     /* 03 */ u8 level : 5;
+
     /* 04 */ u8 x_load, y_load;
     /* 06 */ u8 x_move, y_move;
+
     /* 08 */ u8 items[4];
     /* 0C */ u8 ai[4];
 };
 
-void InitUnits(void);
-void ClearUnit(struct Unit * unit);
-void CopyUnit(struct Unit * src, struct Unit * dst);
-struct Unit * GetFreeUnit(int faction);
-int GetUnitCurrentHp(struct Unit * unit);
-int GetUnitMaxHp(struct Unit * unit);
-int GetUnitPower(struct Unit * unit);
-int GetUnitSkill(struct Unit * unit);
-int GetUnitSpeed(struct Unit * unit);
-int GetUnitDefense(struct Unit * unit);
-int GetUnitResistance(struct Unit * unit);
-int GetUnitLuck(struct Unit * unit);
-int GetUnitFid(struct Unit * unit);
-int GetUnitChibiId(struct Unit * unit);
-int GetUnitLeaderPid(struct Unit * unit);
-void SetUnitLeaderPid(struct Unit * unit, int pid);
-void SetUnitHp(struct Unit * unit, int hp);
-void AddUnitHp(struct Unit * unit, int amount);
-int GetUnitVision(struct Unit * unit);
-char const * GetUnitRescueName(struct Unit * unit);
-char const * GetUnitStatusName(struct Unit * unit);
-void SetUnitStatus(struct Unit * unit, int status);
-struct Unit * GetUnit(int unit_id);
-struct JInfo const * GetJInfo(int jid);
-struct PInfo const * GetPInfo(int pid);
-int GetUnitMapSprite(struct Unit * unit);
-bool UnitAddItem(struct Unit * unit, int item);
-void UnitRemoveItem(struct Unit * unit, int slot);
-void UnitRemoveInvalidItems(struct Unit * unit);
-int GetUnitItemCount(struct Unit * unit);
-bool UnitHasItem(struct Unit * unit, int item);
-int BatchCreateUnits(struct UnitInfo const * info);
-struct Unit * CreateUnit(struct UnitInfo const * info);
-void UnitInitFromInfo(struct Unit * unit, struct UnitInfo const * info);
-void UnitInitStats(struct Unit * unit, struct PInfo const * pinfo);
-void func_fe6_08017764(struct Unit * unit);
-void UnitInitSupports(struct Unit * unit);
-void UnitAutolevelWeaponExp(struct Unit * unit, struct UnitInfo const * info);
-void UnitAutolevelCore(struct Unit * unit, u8 jid, int levelCount);
-void UnitApplyBonusLevels(struct Unit * unit, int levelCount);
-void UnitAutolevel(struct Unit * unit);
-void UnitAutolevelPlayer(struct Unit * unit);
-void UnitCheckStatOverflow(struct Unit * unit);
-struct Unit * GetUnitByPid(int pid);
-bool CanUnitCarry(struct Unit * unit, struct Unit * other);
-void UnitRescue(struct Unit * unit, struct Unit * other);
-void UnitDropRescue(struct Unit * unit, int x, int y);
-bool UnitGiveRescue(struct Unit * unit, struct Unit * other);
-void KillUnit(struct Unit * unit);
-void UnitChangeFaction(struct Unit * unit, int faction);
-bool CanUnitCrossTerrain(struct Unit * unit, int terrain);
-void UnitSyncMovement(struct Unit * unit);
-void UnitGetDropPositionOnDeath(struct Unit * unit, int * x_out, int * y_out);
-void UnitBeginAction(struct Unit * unit);
-void UnitBeginReMoveAction(struct Unit * unit);
-void func_fe6_08017EDC(int x, int y);
-void ClearActiveFactionTurnEndedState(void);
-void TickActiveFactionTurnAndListStatusHeals(void);
-void func_fe6_0801809C(void);
-void UnitUpdateUsedItem(struct Unit * unit, int item_slot);
-int GetUnitAid(struct Unit * unit);
-int GetUnitMagRange(struct Unit * unit);
-bool UnitKnowsMagic(struct Unit * unit);
-void func_fe6_080181B0(struct Unit * unit, int x, int y);
-int GetUnitKeyItemSlotForTerrain(struct Unit * unit, int terrain);
-int GetAidIconFromAttributes(int attributes);
-int func_fe6_08018258(struct Unit * unit);
-bool CanActiveUnitStillMove(void);
+enum {
+    // Unit state constant masks
+
+    US_NONE         = 0,
+
+    US_HIDDEN       = (1 << 0),
+    US_UNSELECTABLE = (1 << 1),
+    US_DEAD         = (1 << 2),
+    US_NOT_DEPLOYED = (1 << 3),
+    US_RESCUING     = (1 << 4),
+    US_RESCUED      = (1 << 5),
+    US_HAS_MOVED    = (1 << 6), // Bad name?
+    US_CANTOING     = US_HAS_MOVED, // Alias
+    US_UNDER_A_ROOF = (1 << 7),
+    US_BIT8 = (1 << 8), // has been seen?
+    US_BIT9 = (1 << 9), // hidden by fog?
+    US_HAS_MOVED_AI = (1 << 10),
+    US_IN_BALLISTA  = (1 << 11),
+    US_DROP_ITEM    = (1 << 12),
+    US_GROWTH_BOOST = (1 << 13),
+    US_SOLOANIM_1   = (1 << 14),
+    US_SOLOANIM_2   = (1 << 15),
+    US_BIT16        = (1 << 16),
+    US_BIT17        = (1 << 17),
+    US_BIT18        = (1 << 18),
+    US_BIT19        = (1 << 19),
+    US_BIT20        = (1 << 20),
+    US_BIT21        = (1 << 21),
+    US_BIT22        = (1 << 22),
+    US_BIT23        = (1 << 23),
+    // = (1 << 24),
+    US_BIT25 = (1 << 25),
+    US_BIT26 = (1 << 26),
+    US_BIT27 = (1 << 27),
+    // = (1 << 28),
+    // = (1 << 29),
+    // = (1 << 30),
+    // = (1 << 31),
 
-extern struct Unit * CONST_DATA gUnitLut[0x100];
+    // Helpers
+    US_UNAVAILABLE = (US_DEAD | US_NOT_DEPLOYED | US_BIT16),
+};
 
-extern struct Unit * gActiveUnit;
-
-extern u8 EWRAM_DATA gActiveUnitId;
-extern struct Vec2i EWRAM_DATA gActiveUnitMoveOrigin;
-
-extern struct Unit EWRAM_DATA gUnitArrayBlue[UNIT_AMOUNT_BLUE];
-extern struct Unit EWRAM_DATA gUnitArrayRed[UNIT_AMOUNT_RED];
-extern struct Unit EWRAM_DATA gUnitArrayGreen[UNIT_AMOUNT_GREEN];
-extern struct Unit EWRAM_DATA gUnitArrayPurple[UNIT_AMOUNT_PURPLE];
-
-#define UNIT_FACTION(unit) ((unit)->id & 0xC0)
-#define UNIT_PID(unit) ((unit)->pinfo->id)
-#define UNIT_JID(unit) ((unit)->jinfo->id)
-#define UNIT_ATTRIBUTES(unit) (((unit)->pinfo->attributes) | ((unit)->jinfo->attributes))
-
-#define UNIT_HP_CAP(unit)  (UNIT_FACTION(unit) == FACTION_RED ? 80 : 60)
-#define UNIT_POW_CAP(unit) ((unit)->jinfo->max_pow)
-#define UNIT_SKL_CAP(unit) ((unit)->jinfo->max_skl)
-#define UNIT_SPD_CAP(unit) ((unit)->jinfo->max_spd)
-#define UNIT_DEF_CAP(unit) ((unit)->jinfo->max_def)
-#define UNIT_RES_CAP(unit) ((unit)->jinfo->max_res)
-#define UNIT_LCK_CAP(unit) (30)
-#define UNIT_CON_CAP(unit) ((unit)->jinfo->max_con)
-#define UNIT_MOV_CAP(unit) (15)
-
-#define UNIT_CON_BASE(unit) ((unit)->jinfo->base_con + (unit)->pinfo->bonus_con)
-#define UNIT_MOV_BASE(unit) ((unit)->jinfo->base_mov)
-
-#define UNIT_CON(unit) (UNIT_CON_BASE(unit) + (unit)->bonus_con)
-#define UNIT_MOV(unit) ((unit)->bonus_mov + UNIT_MOV_BASE(unit))
-
-#define FOR_UNITS(begin, end, var_name, body) \
-{ \
-    int _uid; \
-    struct Unit * var_name; \
-    for (_uid = (begin); _uid < (end); ++_uid) \
-    { \
-        var_name = GetUnit(_uid); \
-        if (!var_name) \
-            continue; \
-        if (!var_name->pinfo) \
-            continue; \
-        body \
-    } \
-}
-
-#define FOR_UNITS_FACTION(faction, var_name, body) \
-    FOR_UNITS((faction) + 1, (faction) + 0x40, var_name, body)
-
-#define FOR_UNITS_ALL(var_name, body) \
-    FOR_UNITS(1, 0xC0, var_name, body)
+enum {
+    // Unit status identifiers
+
+    UNIT_STATUS_NONE = 0,
+
+    UNIT_STATUS_POISON = 1,
+    UNIT_STATUS_SLEEP = 2,
+    UNIT_STATUS_SILENCED = 3,
+    UNIT_STATUS_BERSERK = 4,
+
+    UNIT_STATUS_ATTACK = 5,
+    UNIT_STATUS_DEFENSE = 6,
+    UNIT_STATUS_CRIT = 7,
+    UNIT_STATUS_AVOID = 8,
+
+    UNIT_STATUS_SICK = 9,
+    UNIT_STATUS_RECOVER = 10,
+
+    UNIT_STATUS_PETRIFY = 11,
+    UNIT_STATUS_12 = 12,
+    UNIT_STATUS_13 = 13,
+};
+
+enum {
+    FACTION_BLUE   = 0x00, // player units
+    FACTION_GREEN  = 0x40, // ally npc units
+    FACTION_RED    = 0x80, // enemy units
+    FACTION_PURPLE = 0xC0, // link arena 4th team
+};
+
+enum {
+    FACTION_ID_BLUE   = 0,
+    FACTION_ID_GREEN  = 1,
+    FACTION_ID_RED    = 2,
+    FACTION_ID_PURPLE = 3,
+};
+
+enum {
+    // Character/Class attributes
+
+    CA_NONE = 0,
+
+    CA_MOUNTEDAID = (1 << 0),
+    CA_CANTO = (1 << 1),
+    CA_STEAL = (1 << 2),
+    CA_THIEF = (1 << 3),
+    CA_DANCE = (1 << 4),
+    CA_PLAY = (1 << 5),
+    CA_CRITBONUS = (1 << 6),
+    CA_BALLISTAE = (1 << 7),
+    CA_PROMOTED = (1 << 8),
+    CA_SUPPLY = (1 << 9),
+    CA_MOUNTED = (1 << 10),
+    CA_WYVERN = (1 << 11),
+    CA_PEGASUS = (1 << 12),
+    CA_LORD = (1 << 13),
+    CA_FEMALE = (1 << 14),
+    CA_BOSS = (1 << 15),
+    CA_LOCK_1 = (1 << 16),
+    CA_LOCK_2 = (1 << 17),
+    CA_LOCK_3 = (1 << 18), // Dragons or Monster depending of game
+    CA_MAXLEVEL10 = (1 << 19),
+    CA_UNSELECTABLE = (1 << 20),
+    CA_TRIANGLEATTACK_PEGASI = (1 << 21),
+    CA_TRIANGLEATTACK_ARMORS = (1 << 22),
+    CA_BIT_23 = (1 << 23),
+    CA_NEGATE_LETHALITY = (1 << 24),
+    CA_ASSASSIN = (1 << 25),
+    CA_MAGICSEAL = (1 << 26),
+    CA_SUMMON = (1 << 27),
+    CA_LOCK_4 = (1 << 28),
+    CA_LOCK_5 = (1 << 29),
+    CA_LOCK_6 = (1 << 30),
+    CA_LOCK_7 = (1 << 31),
+
+    // Helpers
+    CA_REFRESHER = CA_DANCE | CA_PLAY,
+    CA_FLYER = CA_WYVERN | CA_PEGASUS,
+    CA_TRIANGLEATTACK_ANY = CA_TRIANGLEATTACK_ARMORS | CA_TRIANGLEATTACK_PEGASI,
+};
+
+enum {
+    // To check result of GetUnit[Item]UseBits
+
+    UNIT_USEBIT_WEAPON = (1 << 0),
+    UNIT_USEBIT_STAFF  = (1 << 1),
+};
+
+enum unit_affinity_index {
+    UNIT_AFFIN_FIRE = 1,
+    UNIT_AFFIN_THUNDER,
+    UNIT_AFFIN_WIND,
+    UNIT_AFFIN_ICE,
+    UNIT_AFFIN_DARK,
+    UNIT_AFFIN_LIGHT,
+    UNIT_AFFIN_ANIMA,
+};
+
+#define UNIT_IS_VALID(aUnit) ((aUnit) && (aUnit)->pCharacterData)
+#define UNIT_CHAR_ID(aUnit) ((aUnit)->pCharacterData->number)
+#define UNIT_CLASS_ID(aUnit) ((aUnit)->pClassData->number)
+#define UNIT_FACTION(aUnit) ((aUnit)->index & 0xC0)
+
+#define UNIT_CATTRIBUTES(aUnit) ((aUnit)->pCharacterData->attributes | (aUnit)->pClassData->attributes)
+
+#define UNIT_NAME_ID(aUnit) ((aUnit)->pCharacterData->nameTextId)
+
+#define UNIT_MHP_MAX(aUnit) (UNIT_FACTION(unit) == FACTION_RED ? 120 : 60)
+#define UNIT_POW_MAX(aUnit) ((aUnit)->pClassData->maxPow)
+#define UNIT_SKL_MAX(aUnit) ((aUnit)->pClassData->maxSkl)
+#define UNIT_SPD_MAX(aUnit) ((aUnit)->pClassData->maxSpd)
+#define UNIT_DEF_MAX(aUnit) ((aUnit)->pClassData->maxDef)
+#define UNIT_RES_MAX(aUnit) ((aUnit)->pClassData->maxRes)
+#define UNIT_LCK_MAX(aUnit) (30)
+#define UNIT_CON_MAX(aUnit) ((aUnit)->pClassData->maxCon)
+#define UNIT_MOV_MAX(aUnit) (15)
+
+#define UNIT_CON_BASE(aUnit) ((aUnit)->pClassData->baseCon + (aUnit)->pCharacterData->baseCon)
+#define UNIT_MOV_BASE(aUnit) ((aUnit)->pClassData->baseMov)
+
+#define UNIT_CON(aUnit) (UNIT_CON_BASE(aUnit) + (aUnit)->conBonus)
+#define UNIT_MOV(aUnit) ((aUnit)->movBonus + UNIT_MOV_BASE(aUnit))
+
+#define UNIT_ARENA_LEVEL(aUnit) (((aUnit)->state >> 17) & 0x7)
+
+#define UNIT_SUPPORT_DATA(aUnit) ((aUnit)->pCharacterData->pSupportData)
+
+// NOTE: if this ends up being only used in [Get|Set]UnitLeaderCharId, having this as a macro may end up being unnecessary
+#define UNIT_LEADER_CHARACTER(aUnit) ((aUnit)->supports[UNIT_SUPPORT_MAX_COUNT-1])
+
+void InitUnits(void);
+void ClearUnit(struct Unit *unit);
+// CopyUnit
+// GetFreeUnit
+// GetFreeBlueUnit
+// GetUnitFogViewRange
+// SetUnitStatus
+// SetUnitStatusExt
+// GetUnitSMSId
+// UnitAddItem
+// UnitClearInventory
+void UnitRemoveInvalidItems(struct Unit *unit);
+// GetUnitItemCount
+// UnitHasItem
+// LoadUnits
+// sub_08017B44
+struct Unit *LoadUnit(const struct UnitDefinition *uDef);
+void UnitInitFromDefinition(struct Unit *unit, const struct UnitDefinition *uDef);
+void UnitLoadItemsFromDefinition(struct Unit *unit, const struct UnitDefinition *uDef);
+void UnitLoadStatsFromChracter(struct Unit *unit, const struct CharacterData *character);
+void FixROMUnitStructPtr(struct Unit *unit);
+void UnitLoadSupports(struct Unit *unit);
+void UnitAutolevelWExp(struct Unit *unit, const struct UnitDefinition *uDef);
+void UnitAutolevelCore(struct Unit *unit, u8 classId, int levelCount);
+void UnitApplyBonusLevels(struct Unit *unit, int levelCount);
+void UnitAutolevel(struct Unit *unit);
+void UnitAutolevelRealistic(struct Unit *unit);
+void UnitCheckStatCaps(struct Unit *unit);
+// GetUnitFromCharId
+// GetUnitFromCharIdAndFaction
+// CanUnitRescue
+// UnitRescue
+// UnitDrop
+// UnitGive
+// UnitKill
+// UnitChangeFaction
+// UnitFinalizeMovement
+// UnitGetDeathDropLocation
+// UnitBeginAction
+// UnitBeginCantoAction
+// MoveActiveUnit
+// ClearActiveFactionGrayedStates
+// TickActiveFactionTurn
+// SetAllUnitNotBackSprite
+// UnitUpdateUsedItem
+// GetUnitAid
+// GetUnitMagBy2Range
+// UnitHasMagicRank
+// sub_080188F4
+// GetUnitKeyItemSlotForTerrain
+// GetUnitAidIconId
+// GetUnitWeaponUsabilityBits
+// GetCombinedEnemyWeaponUsabilityBits
+// CanUnitMove
+// IsPositionMagicSealed
+// IsUnitMagicSealed
+// GetUnitLastItem
+// GetUnitMovementCost
+// GetClassSMSId
+// UpdatePrevDeployStates
+// LoadUnitPrepScreenPositions
+// ClearTemporaryUnits
+// IsUnitSlotAvailable
+// sub_08018E60
+// sub_08018EA0
+// sub_08018EC0
+// sub_08018EE0
+// sub_08018F20
+// sub_08018F60
+// sub_08018F80
+// sub_08018FA8
+// sub_08018FC8
+// sub_08018FE4
+// sub_08019010
+// sub_08019028
+// sub_08019030
+// sub_0801906C
+// sub_080190B0
+// sub_080190E0
+// sub_080190F4
diff --git a/include/unitpanel.h b/include/unitpanel.h
deleted file mode 100644
index 778b500..0000000
--- a/include/unitpanel.h
+++ /dev/null
@@ -1,21 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-void StartUnitInventoryPanel(ProcPtr parent);
-void RefreshUnitInventoryPanel(struct Unit * unit);
-void RefreshUnitStealInventoryPanel(struct Unit * unit);
-void RefreshUnitRepairInventoryPanel(struct Unit * unit);
-void StartUnitHpPanel(ProcPtr parent);
-void RefreshUnitHpPanel(struct Unit * unit);
-void StartUnitHpStatusPanel(ProcPtr proc);
-void RefreshUnitHpStatusPanel(struct Unit * unit);
-void StartUnitResChangePanel(ProcPtr proc);
-void RefreshUnitResChangePanel(struct Unit * unit);
-void StartUnitStaffOffensePanel(ProcPtr proc);
-void RefreshUnitStaffOffensePanel(struct Unit * unit, int accuracy);
-void RefreshUnitTakeRescuePanels(ProcPtr proc);
-void RefreshUnitRescuePanels(struct Unit * unit);
-void RefreshUnitTakePanels(struct Unit * unit);
-void StartUnitGiveRescuePanels(ProcPtr parent);
-void RefreshUnitGivePanels(struct Unit * unit);
diff --git a/include/unitrearrange.h b/include/unitrearrange.h
deleted file mode 100644
index cc6dfd2..0000000
--- a/include/unitrearrange.h
+++ /dev/null
@@ -1,10 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "unit.h"
-
-void UnitRearrangeInit(struct Unit * buf);
-void UnitRearrangeAdd(struct Unit * unit);
-void UnitRearrangeApply(void);
-void UnitRearrangeApply2(void);
diff --git a/include/unitsprite.h b/include/unitsprite.h
deleted file mode 100644
index 2bf7274..0000000
--- a/include/unitsprite.h
+++ /dev/null
@@ -1,58 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-enum
-{
-    UNITSPRITE_ID_BITS = 7,
-    UNITSPRITE_NOTANIMATED = 1 << UNITSPRITE_ID_BITS, // or that to any map sprite id to have it not animate
-
-    UNITSPRITE_MAX = 0xD0,
-};
-
-enum
-{
-    UNITSPRITE_16x16,
-    UNITSPRITE_16x32,
-    UNITSPRITE_32x32,
-};
-
-struct UnitSprite
-{
-    /* 00 */ struct UnitSprite * next;
-    /* 04 */ short x, y;
-    /* 08 */ u16 oam2;
-    /* 0A */ u8 unk_0A;
-    /* 0B */ i8 config;
-};
-
-struct UnitSpriteInfo
-{
-    /* 00 */ u16 unk_00;
-    /* 02 */ u16 size;
-    /* 04 */ u8 const * img;
-};
-
-void func_fe6_08021B88(void);
-void ApplyUnitSpritePalettes(void);
-void ResetUnitSprites(void);
-void ResetUnitSpritesB(void);
-int UseUnitSprite(unsigned id);
-void SyncUnitSpriteSheet(void);
-void ForceSyncUnitSpriteSheet(void);
-int GetUnitDisplayedSpritePalette(struct Unit * unit);
-int GetUnitSpritePalette(struct Unit * unit);
-void RefreshUnitSprites(void);
-void PutUnitSpritesOam(void);
-void PutUnitSpriteIconsOam(void);
-void func_fe6_08022618(void);
-void ResetUnitSpritHover(void);
-void UnitSpriteHoverUpdate(void);
-bool IsUnitSpriteHoverEnabledAt(int x, int y);
-void PutUnitSprite(int layer, int x, int y, struct Unit * unit);
-void PutUnitSpriteExt(int layer, int x, int y, int oam2, struct Unit * unit);
-void PutBlendWindowUnitSprite(int layer, int x, int y, int oam2, struct Unit * unit);
-void func_fe6_08022A2C(void);
-void HideUnitSprite(struct Unit * unit);
-void ShowUnitSprite(struct Unit * unit);
-u8 GetUnitSpriteHiddenFlag(struct Unit * unit);
diff --git a/include/unk-functions.h b/include/unk-functions.h
new file mode 100644
index 0000000..aa6fcd3
--- /dev/null
+++ b/include/unk-functions.h
@@ -0,0 +1,7 @@
+#pragma once
+
+int GetPlayerLeaderUnitId(void);
+int GetItemIndex(int item);
+void UnitHideIfUnderRoof(struct Unit *unit);
+u16 GetUnitEquippedWeapon(struct Unit *unit);
+int GetItemHpBonus(int item);
\ No newline at end of file
diff --git a/include/unk-types.h b/include/unk-types.h
new file mode 100644
index 0000000..e69de29
diff --git a/include/unknown_funcs.h b/include/unknown_funcs.h
deleted file mode 100644
index 40a251c..0000000
--- a/include/unknown_funcs.h
+++ /dev/null
@@ -1,2571 +0,0 @@
-#pragma once
-
-#include "gba/gba.h"
-#include "types.h"
-
-#include "proc.h"
-
-// code_0802B814.c
-// func_fe6_0802B814
-// func_fe6_0802B8A0
-// func_fe6_0802B928
-// func_fe6_0802B964
-// func_fe6_0802B980
-// func_fe6_0802B99C
-int func_fe6_0802B9DC(void);
-int func_fe6_0802BA08(void);
-void func_fe6_0802BA44(struct Unit * unit);
-
-// func_fe6_080350C8
-// func_fe6_080351E4
-// func_fe6_080351F4
-// func_fe6_0803522C
-// func_fe6_080353AC
-// func_fe6_08035414
-// func_fe6_08035490
-// func_fe6_080354F0
-// func_fe6_08035734
-// func_fe6_08035880
-// func_fe6_080358A4
-// func_fe6_080358DC
-// func_fe6_08035C54
-// func_fe6_08035C58
-// func_fe6_08035C84
-// func_fe6_08035CB0
-// func_fe6_08035CD4
-// func_fe6_08035CF8
-// func_fe6_08035D4C
-// func_fe6_08035D7C
-// func_fe6_08035DC8
-// func_fe6_08035EC0
-// func_fe6_08036078
-// func_fe6_080360C4
-// func_fe6_08036130
-// func_fe6_080361A4
-// func_fe6_08036208
-// func_fe6_080362B0
-// func_fe6_08036440
-// func_fe6_08036494
-// func_fe6_080364A4
-// func_fe6_08036518
-// func_fe6_08036590
-// func_fe6_08036608
-// func_fe6_0803661C
-// func_fe6_0803667C
-// func_fe6_080366EC
-// func_fe6_08036714
-// func_fe6_08036758
-// func_fe6_08036804
-// func_fe6_08036884
-// func_fe6_080368B0
-u32 func_fe6_080368DC(void const * src, void * dst);
-// func_fe6_080368F8
-// func_fe6_08036918
-// func_fe6_08036964
-// func_fe6_08036974
-// func_fe6_08036984
-// func_fe6_08036994
-// func_fe6_080369A0
-// func_fe6_080369E0
-// func_fe6_08036A40
-// func_fe6_08036A54
-// func_fe6_08036A80
-// func_fe6_08036A94
-// func_fe6_08036ADC
-// func_fe6_08036AF8
-// func_fe6_08036B28
-// func_fe6_08036B38
-// func_fe6_08036B40
-// func_fe6_08036B98
-// func_fe6_08036BFC
-// func_fe6_08036C60
-// func_fe6_08036CB0
-// func_fe6_08036D08
-// func_fe6_08036D3C
-// func_fe6_08036D60
-// func_fe6_08036DEC
-// func_fe6_08036E00
-// func_fe6_08036E14
-// func_fe6_08036E50
-// func_fe6_08036E88
-// func_fe6_08036EB4
-// func_fe6_08036FA8
-// func_fe6_08037020
-// func_fe6_0803703C
-// func_fe6_080370E4
-// func_fe6_080371B4
-// func_fe6_080372B0
-// func_fe6_080373A4
-// func_fe6_080373E0
-// func_fe6_08037600
-// func_fe6_08037664
-// func_fe6_080377E8
-// func_fe6_0803782C
-// func_fe6_0803784C
-// func_fe6_08037878
-// func_fe6_08037D74
-// func_fe6_08037D8C
-// func_fe6_08037E14
-// func_fe6_08037EA0
-// func_fe6_08037F04
-// func_fe6_08038004
-// func_fe6_0803802C
-// func_fe6_08038040
-// func_fe6_0803812C
-// func_fe6_08038160
-// func_fe6_080382A0
-// func_fe6_08038324
-// func_fe6_08038380
-// func_fe6_080383F8
-// func_fe6_08038454
-// func_fe6_0803848C
-// func_fe6_0803858C
-// func_fe6_080387BC
-// func_fe6_0803882C
-// func_fe6_0803888C
-// func_fe6_080388A4
-// func_fe6_080388E4
-// func_fe6_08038910
-// func_fe6_08038954
-// func_fe6_08038990
-// func_fe6_08038A78
-// func_fe6_08038AA4
-// func_fe6_08038C04
-// func_fe6_08038D14
-// func_fe6_08038D64
-// func_fe6_08038DEC
-// func_fe6_08038E90
-// func_fe6_08038EC0
-// func_fe6_08039084
-// func_fe6_0803912C
-// func_fe6_08039178
-// func_fe6_080391B0
-// func_fe6_080391C0
-// func_fe6_080392F4
-// func_fe6_08039388
-// func_fe6_080394A8
-// func_fe6_080394BC
-// func_fe6_080394FC
-// func_fe6_08039550
-// func_fe6_08039574
-// func_fe6_08039580
-// func_fe6_08039650
-// func_fe6_080397AC
-// func_fe6_080397F4
-// func_fe6_08039A1C
-// func_fe6_08039ABC
-// func_fe6_08039B5C
-// func_fe6_08039C30
-// func_fe6_08039CE0
-// func_fe6_08039CFC
-// func_fe6_08039D34
-// func_fe6_08039E04
-// func_fe6_08039F84
-// func_fe6_0803A028
-// func_fe6_0803A08C
-// func_fe6_0803A1E4
-// func_fe6_0803A1F0
-// func_fe6_0803A1FC
-// func_fe6_0803A468
-// func_fe6_0803A4F4
-// func_fe6_0803A570
-// func_fe6_0803A5AC
-// func_fe6_0803A5C8
-// func_fe6_0803A5E4
-// func_fe6_0803A604
-// func_fe6_0803A640
-// func_fe6_0803A680
-// func_fe6_0803A6BC
-// func_fe6_0803A748
-// func_fe6_0803A7E8
-// func_fe6_0803A9FC
-// func_fe6_0803AAF8
-// func_fe6_0803AB10
-// func_fe6_0803AD74
-// func_fe6_0803AE30
-// func_fe6_0803AE58
-// func_fe6_0803AE70
-// func_fe6_0803AE90
-// func_fe6_0803AED0
-// func_fe6_0803AF7C
-// func_fe6_0803B11C
-// func_fe6_0803B248
-// func_fe6_0803B2AC
-// func_fe6_0803B2DC
-// func_fe6_0803B31C
-// func_fe6_0803B45C
-// func_fe6_0803B508
-// func_fe6_0803B5A0
-// func_fe6_0803B730
-// func_fe6_0803B830
-// func_fe6_0803B93C
-// func_fe6_0803B9F0
-void func_fe6_0803BA64(ProcPtr parent);
-// func_fe6_0803BAE0
-// func_fe6_0803BBF8
-// func_fe6_0803BC18
-// func_fe6_0803BC60
-// func_fe6_0803BCD8
-// func_fe6_0803BD20
-// func_fe6_0803BD90
-// func_fe6_0803BE00
-// func_fe6_0803BE78
-// func_fe6_0803BECC
-// func_fe6_0803BEE0
-// func_fe6_0803BF28
-// func_fe6_0803BF8C
-// func_fe6_0803BFB0
-// func_fe6_0803C00C
-// func_fe6_0803C02C
-// func_fe6_0803C044
-// func_fe6_0803C060
-void func_fe6_0803C080(ProcPtr parent);
-// func_fe6_0803C094
-// func_fe6_0803C144
-// func_fe6_0803C1A4
-// func_fe6_0803C284
-// func_fe6_0803C288
-// func_fe6_0803C2B0
-// func_fe6_0803C2C4
-// func_fe6_0803C390
-// func_fe6_0803C4CC
-// func_fe6_0803C530
-// func_fe6_0803C578
-// func_fe6_0803C5E4
-// func_fe6_0803C678
-// func_fe6_0803C690
-// func_fe6_0803C6BC
-// func_fe6_0803C7D8
-// func_fe6_0803C8F0
-// func_fe6_0803CA3C
-// func_fe6_0803CA6C
-// func_fe6_0803CA90
-// func_fe6_0803CAAC
-// func_fe6_0803CAC8
-// func_fe6_0803CAD8
-// func_fe6_0803CB28
-// func_fe6_0803CB3C
-// func_fe6_0803CB94
-// func_fe6_0803CBB4
-// func_fe6_0803CCBC
-// func_fe6_0803CCD4
-// func_fe6_0803CD74
-// func_fe6_0803CDD4
-// func_fe6_0803CE7C
-// func_fe6_0803CEDC
-// func_fe6_0803CF14
-// func_fe6_0803CF58
-// func_fe6_0803CF70
-// func_fe6_0803CF9C
-// func_fe6_0803CFE4
-// func_fe6_0803D0A0
-// func_fe6_0803D0EC
-// func_fe6_0803D110
-// func_fe6_0803D178
-// func_fe6_0803D208
-// func_fe6_0803D2AC
-// func_fe6_0803D2CC
-// func_fe6_0803D3C0
-// func_fe6_0803D438
-// func_fe6_0803D478
-// func_fe6_0803D4B8
-// func_fe6_0803D4D0
-// func_fe6_0803D6E0
-// func_fe6_0803D6EC
-// func_fe6_0803D8AC
-// func_fe6_0803D8FC
-// func_fe6_0803D93C
-// func_fe6_0803DA04
-// func_fe6_0803DAE8
-// func_fe6_0803DB50
-// func_fe6_0803DB6C
-// func_fe6_0803DC3C
-// func_fe6_0803DCC0
-// func_fe6_0803DD30
-// func_fe6_0803DDC0
-// func_fe6_0803DEE0
-// func_fe6_0803E028
-// func_fe6_0803E0B4
-// func_fe6_0803E194
-// func_fe6_0803E1B0
-// func_fe6_0803E1E8
-// func_fe6_0803E204
-// func_fe6_0803E2BC
-// func_fe6_0803E2D0
-// func_fe6_0803E370
-// func_fe6_0803E3B4
-// func_fe6_0803E3C8
-// func_fe6_0803E4AC
-// func_fe6_0803E514
-// func_fe6_0803E584
-// func_fe6_0803E5D0
-// func_fe6_0803E630
-// func_fe6_0803E660
-// func_fe6_0803E880
-// func_fe6_0803E8B0
-// func_fe6_0803E944
-// func_fe6_0803E964
-// func_fe6_0803EA30
-// func_fe6_0803EA44
-// func_fe6_0803EA54
-// func_fe6_0803EA74
-// func_fe6_0803EAAC
-// func_fe6_0803EAE0
-// func_fe6_0803EB24
-// func_fe6_0803EBBC
-// func_fe6_0803EBF8
-// func_fe6_0803EC84
-// func_fe6_0803ECA8
-// func_fe6_0803ECD0
-// func_fe6_0803ED54
-// func_fe6_0803ED60
-// func_fe6_0803ED74
-// func_fe6_0803ED9C
-// func_fe6_0803EDEC
-// func_fe6_0803EE60
-// func_fe6_0803EE7C
-// func_fe6_0803EECC
-// func_fe6_0803EF4C
-// func_fe6_0803EF9C
-// func_fe6_0803EFA8
-// func_fe6_0803EFB4
-// func_fe6_0803EFEC
-// func_fe6_0803F028
-// func_fe6_0803F040
-// func_fe6_0803F068
-// func_fe6_0803F1D8
-// func_fe6_0803F224
-// func_fe6_0803F2BC
-// func_fe6_0803F304
-// func_fe6_0803F3AC
-// func_fe6_0803F3BC
-// func_fe6_0803F454
-// func_fe6_0803F478
-// func_fe6_0803F504
-// func_fe6_0803F514
-// func_fe6_0803F534
-// func_fe6_0803F554
-// func_fe6_0803F5AC
-// func_fe6_0803F5C8
-// func_fe6_0803F648
-// func_fe6_0803F694
-// func_fe6_0803F6C8
-// func_fe6_0803F714
-// func_fe6_0803F7E4
-// func_fe6_0803F820
-// func_fe6_0803F850
-// func_fe6_0803F860
-// func_fe6_0803F86C
-// func_fe6_0803F890
-// func_fe6_0803F8B0
-// func_fe6_0803F8BC
-// func_fe6_0803F8E0
-// func_fe6_0803F938
-// func_fe6_0803F990
-// func_fe6_0803F9B4
-// func_fe6_0803F9C4
-// func_fe6_0803F9F4
-// func_fe6_0803FA14
-// func_fe6_0803FAA4
-// func_fe6_0803FB08
-// func_fe6_0803FB74
-// func_fe6_0803FB84
-// func_fe6_0803FBC4
-// func_fe6_0803FC1C
-// func_fe6_0803FC3C
-// func_fe6_0803FC60
-// func_fe6_0803FC70
-// func_fe6_0803FCBC
-// func_fe6_0803FD40
-// func_fe6_0803FDD8
-// func_fe6_0803FE0C
-// func_fe6_0803FE28
-// func_fe6_0803FE48
-// func_fe6_0803FE64
-// func_fe6_0803FEB4
-// func_fe6_08040014
-// func_fe6_08040084
-// func_fe6_08040098
-// func_fe6_080400A0
-// func_fe6_080400FC
-// func_fe6_08040154
-// func_fe6_080403C0
-// func_fe6_08040468
-// func_fe6_080404E8
-// func_fe6_08040530
-// func_fe6_0804054C
-// func_fe6_080405A0
-// func_fe6_0804067C
-// func_fe6_080406B8
-// func_fe6_080406D0
-// func_fe6_08040744
-// func_fe6_08040768
-// func_fe6_08040770
-// func_fe6_080407A8
-// func_fe6_0804085C
-// func_fe6_08040880
-// func_fe6_080408BC
-// func_fe6_08040A80
-// func_fe6_08040AEC
-// func_fe6_08040B44
-// func_fe6_08040C00
-// func_fe6_08040C7C
-// func_fe6_08040C90
-// func_fe6_08040CA8
-// func_fe6_08040CC4
-// func_fe6_08040D18
-// func_fe6_08040F00
-// func_fe6_08040F50
-// func_fe6_08040F60
-// func_fe6_08040F70
-// func_fe6_08040FC0
-// func_fe6_08041014
-// func_fe6_08041060
-// func_fe6_0804108C
-// func_fe6_080410BC
-// func_fe6_080410F8
-// func_fe6_0804111C
-// func_fe6_08041168
-// func_fe6_08041188
-// func_fe6_0804119C
-// func_fe6_08041200
-// func_fe6_08041210
-
-void func_fe6_0804256C(int arg_0);
-// func_fe6_08042578
-// func_fe6_08042584
-// func_fe6_080425B0
-i8 func_fe6_080425C4(void);
-// func_fe6_080425D8
-// func_fe6_080425EC
-// func_fe6_080425F0
-// func_fe6_08042660
-// func_fe6_08042704
-// func_fe6_08042780
-// func_fe6_08042784
-// func_fe6_08042818
-// func_fe6_0804286C
-// func_fe6_08042908
-// func_fe6_0804294C
-// func_fe6_08042970
-// func_fe6_0804298C
-// func_fe6_08042A3C
-// func_fe6_08042A5C
-// func_fe6_08042AA8
-// func_fe6_08042AC4
-// func_fe6_08042B18
-// func_fe6_08042B4C
-// func_fe6_08042B74
-// func_fe6_08042BF8
-// func_fe6_08042C0C
-// func_fe6_08042C48
-// func_fe6_08042C74
-// func_fe6_08042D70
-// func_fe6_08042D84
-// func_fe6_08042E14
-// func_fe6_08042E58
-// func_fe6_08043078
-// func_fe6_080430C4
-// func_fe6_0804312C
-// func_fe6_08043208
-// func_fe6_0804323C
-// func_fe6_08043288
-// func_fe6_080433B0
-// func_fe6_080433E8
-// func_fe6_0804340C
-// func_fe6_08043424
-// func_fe6_08043448
-// func_fe6_08043484
-// func_fe6_08043534
-// func_fe6_08043554
-// func_fe6_0804358C
-// func_fe6_08043590
-// func_fe6_080435AC
-// func_fe6_080435EC
-// func_fe6_0804363C
-// func_fe6_080436A4
-// func_fe6_080438B4
-// func_fe6_080438C8
-// func_fe6_080438D8
-// func_fe6_080438E8
-// func_fe6_080438F8
-// func_fe6_08043908
-// func_fe6_08043918
-// func_fe6_0804392C
-// func_fe6_08043940
-// func_fe6_08043950
-// func_fe6_08043960
-// func_fe6_08043970
-// func_fe6_08043980
-// func_fe6_080439CC
-// func_fe6_08044198
-// func_fe6_080441C8
-// func_fe6_080441DC
-// func_fe6_080441EC
-// func_fe6_080441FC
-// func_fe6_0804420C
-// func_fe6_0804421C
-// func_fe6_08044230
-// func_fe6_08044244
-// func_fe6_08044254
-// func_fe6_08044264
-// func_fe6_08044274
-// func_fe6_08044284
-// func_fe6_08044390
-// func_fe6_080444EC
-// func_fe6_08044608
-// func_fe6_08044870
-void func_fe6_08044900(void);
-// func_fe6_080449C4
-// func_fe6_080449E4
-// func_fe6_080449F4
-// func_fe6_08044AC0
-// func_fe6_08044C68
-// func_fe6_08044D08
-// func_fe6_08044D4C
-// func_fe6_08044E2C
-// func_fe6_08044EEC
-// func_fe6_08044F90
-// func_fe6_080450DC
-// func_fe6_08045180
-// func_fe6_080451E0
-// func_fe6_080452B8
-// func_fe6_0804536C
-// func_fe6_080453C0
-// func_fe6_08045478
-// func_fe6_0804549C
-// func_fe6_08045578
-// func_fe6_080455A4
-// func_fe6_080455C0
-// func_fe6_08045614
-// func_fe6_08045694
-// func_fe6_080456C4
-// func_fe6_0804574C
-// func_fe6_080457B0
-// func_fe6_080457E8
-// func_fe6_08045828
-// func_fe6_080458C0
-// func_fe6_08045974
-// func_fe6_08045998
-// func_fe6_080459F8
-// func_fe6_08045A70
-// func_fe6_08045B24
-// func_fe6_08045BF8
-// func_fe6_08045C90
-// func_fe6_08045D6C
-// func_fe6_08045DA4
-// func_fe6_08045DDC
-// func_fe6_08045E50
-// func_fe6_08045EE8
-// func_fe6_08045F48
-// func_fe6_08045F88
-// func_fe6_08045FF8
-// func_fe6_0804600C
-// func_fe6_08046010
-// func_fe6_0804610C
-// func_fe6_080462BC
-// func_fe6_0804646C
-// func_fe6_08046794
-// func_fe6_080467D0
-// func_fe6_08046810
-// func_fe6_08046848
-// func_fe6_0804685C
-// func_fe6_08046880
-// func_fe6_080468D8
-// func_fe6_08046948
-// func_fe6_0804695C
-// func_fe6_08046994
-// func_fe6_080469B4
-// func_fe6_08046A0C
-// func_fe6_08046A6C
-// func_fe6_08046B48
-// func_fe6_08046B5C
-// func_fe6_08046B6C
-// func_fe6_08046B7C
-// func_fe6_08046C14
-// func_fe6_08046C50
-// func_fe6_08046D04
-// func_fe6_08046DA0
-// func_fe6_08046E9C
-// func_fe6_08046ED8
-// func_fe6_08046EF8
-// func_fe6_08046F18
-// func_fe6_08046F48
-// func_fe6_08046F64
-// func_fe6_08047058
-// func_fe6_08047160
-// func_fe6_080471E4
-// func_fe6_0804722C
-// func_fe6_08047248
-// func_fe6_08047258
-// func_fe6_08047268
-// func_fe6_080472D0
-// func_fe6_08047300
-// func_fe6_08047358
-// func_fe6_08047370
-// func_fe6_0804738C
-// func_fe6_080473F0
-// func_fe6_08047430
-// func_fe6_080474B0
-// func_fe6_080474BC
-// func_fe6_080474C8
-// func_fe6_080474D8
-// func_fe6_08047500
-// func_fe6_080475D8
-// func_fe6_08047600
-// func_fe6_08047610
-// func_fe6_08047620
-// func_fe6_080477AC
-// func_fe6_080478A0
-// func_fe6_080478DC
-// func_fe6_08047938
-// func_fe6_0804799C
-// func_fe6_08047A1C
-// func_fe6_08047A88
-// func_fe6_08047AB0
-// func_fe6_08047ACC
-// func_fe6_08047AF4
-// func_fe6_08047B10
-// func_fe6_08047B3C
-// func_fe6_08047B6C
-// func_fe6_08047BA4
-// func_fe6_08047C1C
-// func_fe6_08047C28
-// func_fe6_08047C48
-// func_fe6_08047C68
-// func_fe6_08047C88
-bool func_fe6_08047CB8(void);
-void func_fe6_08047CC8(void);
-// func_fe6_08047D14
-// func_fe6_08047D38
-// func_fe6_08047DAC
-// func_fe6_08047DC0
-// func_fe6_08047ED4
-// func_fe6_08047FDC
-// func_fe6_0804807C
-// func_fe6_080480C4
-// func_fe6_08048100
-// func_fe6_08048154
-// func_fe6_080481B4
-// func_fe6_080481CC
-// func_fe6_08048244
-// func_fe6_08048298
-// func_fe6_080482F4
-// func_fe6_08048354
-// func_fe6_080483E0
-// func_fe6_08048470
-// func_fe6_0804855C
-// func_fe6_08048574
-// func_fe6_0804894C
-// func_fe6_080489E8
-// func_fe6_08048A64
-// func_fe6_08048BF0
-// func_fe6_08048D98
-// func_fe6_08048DA4
-// func_fe6_08048DF4
-// func_fe6_08048E08
-// func_fe6_08048E88
-// func_fe6_08048ED8
-// func_fe6_08048EEC
-// func_fe6_08048F0C
-// func_fe6_08048F88
-// func_fe6_08048FD0
-// func_fe6_08048FE4
-// func_fe6_08049058
-// func_fe6_08049BAC
-// func_fe6_08049C5C
-// func_fe6_08049CFC
-// func_fe6_08049D98
-// func_fe6_08049E9C
-// func_fe6_08049F1C
-// func_fe6_0804A484
-// func_fe6_0804A49C
-// func_fe6_0804A4B8
-// func_fe6_0804A500
-// func_fe6_0804A528
-// func_fe6_0804A554
-// func_fe6_0804A57C
-// func_fe6_0804A5A8
-// func_fe6_0804A5C0
-// func_fe6_0804A5DC
-// func_fe6_00804A5E8
-// func_fe6_0804AF70
-// func_fe6_0804AF88
-// func_fe6_0804AFA0
-// func_fe6_0804AFD4
-// func_fe6_0804AFFC
-// func_fe6_0804B048
-// func_fe6_0804B294
-// func_fe6_0804B324
-// func_fe6_0804B37C
-// func_fe6_0804B4C0
-// func_fe6_0804B5E0
-// func_fe6_0804B6B0
-// func_fe6_0804B6C4
-// func_fe6_0804B6D8
-// func_fe6_0804B720
-// func_fe6_0804B768
-// func_fe6_0804B7B0
-// func_fe6_0804B80C
-// func_fe6_0804B828
-// func_fe6_0804B848
-// func_fe6_0804B868
-// func_fe6_0804B88C
-// func_fe6_0804B8B0
-// func_fe6_0804B8E8
-// func_fe6_0804B930
-// func_fe6_0804BACC
-// func_fe6_0804BAF0
-// func_fe6_0804BB54
-// func_fe6_0804BCC8
-// func_fe6_0804BE14
-// func_fe6_0804BE20
-// func_fe6_0804BE3C
-// func_fe6_0804BE4C
-// func_fe6_0804BE6C
-// func_fe6_0804BE80
-// func_fe6_0804BE98
-// func_fe6_0804BEB8
-// func_fe6_0804BECC
-// func_fe6_0804BED8
-// func_fe6_0804BF00
-// func_fe6_0804BF24
-// func_fe6_0804BF40
-// func_fe6_0804C2EC
-// func_fe6_0804C318
-// func_fe6_0804C330
-// func_fe6_0804C478
-// func_fe6_0804C4F4
-// func_fe6_0804C500
-// func_fe6_0804C50C
-// func_fe6_0804C554
-// func_fe6_0804C56C
-// func_fe6_0804C580
-// func_fe6_0804C5A4
-// func_fe6_0804C5BC
-// func_fe6_0804C5D0
-// func_fe6_0804C658
-// func_fe6_0804C6CC
-// func_fe6_0804C730
-// func_fe6_0804C744
-// func_fe6_0804C75C
-// func_fe6_0804C788
-// func_fe6_0804C7EC
-// func_fe6_0804C818
-// func_fe6_0804C84C
-// func_fe6_0804C860
-// func_fe6_0804C898
-// func_fe6_0804C8D0
-// func_fe6_0804C8D4
-// func_fe6_0804C918
-// func_fe6_0804C928
-// func_fe6_0804C9BC
-// func_fe6_0804C9EC
-// func_fe6_0804C9FC
-// func_fe6_0804CA48
-// func_fe6_0804CAD8
-// func_fe6_0804CB8C
-// func_fe6_0804CC68
-// func_fe6_0804CC78
-// func_fe6_0804CC84
-// func_fe6_0804CD4C
-// func_fe6_0804CD88
-// func_fe6_0804CDD0
-// func_fe6_0804CED4
-// func_fe6_0804CF34
-// func_fe6_0804D050
-// func_fe6_0804D088
-// func_fe6_0804D25C
-// func_fe6_0804D280
-// func_fe6_0804D2D4
-// func_fe6_0804D30C
-// func_fe6_0804D3A8
-// func_fe6_0804D44C
-// func_fe6_0804D4A4
-// func_fe6_0804D4CC
-// func_fe6_0804D550
-// func_fe6_0804D590
-// func_fe6_0804D5D4
-// func_fe6_0804D5E4
-// func_fe6_0804D62C
-// func_fe6_0804D664
-// func_fe6_0804D728
-// func_fe6_0804D790
-// func_fe6_0804D7C0
-// func_fe6_0804D81C
-// func_fe6_0804D878
-// func_fe6_0804D8D4
-// func_fe6_0804D930
-// func_fe6_0804D98C
-// func_fe6_0804D9E8
-// func_fe6_0804DA44
-// func_fe6_0804DAA0
-// func_fe6_0804DAFC
-// func_fe6_0804DBAC
-// func_fe6_0804DC24
-// func_fe6_0804DC54
-// func_fe6_0804DC8C
-// func_fe6_0804DD38
-// func_fe6_0804DD94
-// func_fe6_0804DDC8
-// func_fe6_0804DE04
-// func_fe6_0804DE4C
-// func_fe6_0804DE84
-// func_fe6_0804DF30
-// func_fe6_0804DF80
-// func_fe6_0804E040
-// func_fe6_0804E0B8
-// func_fe6_0804E0E8
-// func_fe6_0804E124
-// func_fe6_0804E1C0
-// func_fe6_0804E280
-// func_fe6_0804E2B4
-// func_fe6_0804E2F8
-// func_fe6_0804E3C0
-// func_fe6_0804E3FC
-// func_fe6_0804E448
-// func_fe6_0804E484
-// func_fe6_0804E540
-// func_fe6_0804E5B0
-// func_fe6_0804E5E4
-// func_fe6_0804E61C
-// func_fe6_0804E6BC
-// func_fe6_0804E744
-// func_fe6_0804E778
-// func_fe6_0804E814
-// func_fe6_0804E848
-// func_fe6_0804E884
-// func_fe6_0804E8CC
-// func_fe6_0804E908
-// func_fe6_0804E988
-// func_fe6_0804E9FC
-// func_fe6_0804EA14
-// func_fe6_0804EA4C
-// func_fe6_0804EAD4
-// func_fe6_0804EB24
-// func_fe6_0804EB7C
-// func_fe6_0804EBB8
-// func_fe6_0804EC04
-// func_fe6_0804EC84
-// func_fe6_0804ECB8
-// func_fe6_0804ECF4
-// func_fe6_0804ED94
-// func_fe6_0804EE18
-// func_fe6_0804EE9C
-// func_fe6_0804EED8
-// func_fe6_0804EF24
-// func_fe6_0804EF84
-// func_fe6_0804EFB4
-// func_fe6_0804EFF8
-// func_fe6_0804F03C
-// func_fe6_0804F144
-// func_fe6_0804F1A4
-// func_fe6_0804F1FC
-// func_fe6_0804F288
-// func_fe6_0804F2D0
-// func_fe6_0804F354
-// func_fe6_0804F3B8
-// func_fe6_0804F450
-// func_fe6_0804F484
-// func_fe6_0804F4C8
-// func_fe6_0804F510
-// func_fe6_0804F594
-// func_fe6_0804F5C4
-// func_fe6_0804F600
-// func_fe6_0804F738
-// func_fe6_0804F7BC
-// func_fe6_0804F820
-// func_fe6_0804F8A4
-// func_fe6_0804F908
-// func_fe6_0804F96C
-// func_fe6_0804F99C
-// func_fe6_0804F9E8
-// func_fe6_0804FA14
-// func_fe6_0804FB6C
-// func_fe6_0804FC28
-// func_fe6_0804FC64
-// func_fe6_0804FD24
-// func_fe6_0804FD78
-// func_fe6_0804FDD4
-// func_fe6_0804FDF8
-// func_fe6_0804FE3C
-// func_fe6_0804FE60
-// func_fe6_0804FE84
-// func_fe6_0804FEB8
-// func_fe6_0804FF1C
-// func_fe6_0804FF94
-// func_fe6_0804FFD8
-// func_fe6_08050038
-// func_fe6_0805007C
-// func_fe6_080500B8
-// func_fe6_080501B8
-// func_fe6_08050228
-// func_fe6_0805027C
-// func_fe6_080502C0
-// func_fe6_08050308
-// func_fe6_08050390
-// func_fe6_080503BC
-// func_fe6_080503F8
-// func_fe6_080504F0
-// func_fe6_080505A0
-// func_fe6_08050650
-// func_fe6_080506B4
-// func_fe6_080506F8
-// func_fe6_08050744
-// func_fe6_0805075C
-// func_fe6_08050798
-// func_fe6_080507D4
-// func_fe6_08050810
-// func_fe6_0805083C
-// func_fe6_08050860
-// func_fe6_0805089C
-// func_fe6_080509E4
-// func_fe6_08050A70
-// func_fe6_08050B10
-// func_fe6_08050B94
-// func_fe6_08050C30
-// func_fe6_08050C9C
-// func_fe6_08050D04
-// func_fe6_08050D68
-// func_fe6_08050D98
-// func_fe6_08050DE0
-// func_fe6_08050E1C
-// func_fe6_08050ED4
-// func_fe6_08050F54
-// func_fe6_0805100C
-// func_fe6_08051050
-// func_fe6_0805108C
-// func_fe6_080511BC
-// func_fe6_0805120C
-// func_fe6_08051288
-// func_fe6_080512BC
-// func_fe6_08051328
-// func_fe6_08051394
-// func_fe6_080513AC
-// func_fe6_080513E8
-// func_fe6_0805151C
-// func_fe6_080515A0
-// func_fe6_08051624
-// func_fe6_0805166C
-// func_fe6_080516B8
-// func_fe6_080516D8
-// func_fe6_080516EC
-// func_fe6_08051700
-// func_fe6_08051720
-// func_fe6_08051770
-// func_fe6_080517E4
-// func_fe6_0805183C
-// func_fe6_08051870
-// func_fe6_08051908
-// func_fe6_08051A14
-// func_fe6_08051A60
-// func_fe6_08051AC4
-// func_fe6_08051BAC
-// func_fe6_08051C00
-// func_fe6_08051C30
-// func_fe6_08051C5C
-// func_fe6_08051CD0
-// func_fe6_08051D0C
-// func_fe6_08051DFC
-// func_fe6_08051E80
-// func_fe6_08051F04
-// func_fe6_08051F88
-// func_fe6_08051FEC
-// func_fe6_08052060
-// func_fe6_08052090
-// func_fe6_080520CC
-// func_fe6_08052238
-// func_fe6_080522D0
-// func_fe6_08052334
-// func_fe6_0805238C
-// func_fe6_08052460
-// func_fe6_080524A8
-// func_fe6_080524F4
-// func_fe6_08052544
-// func_fe6_08052598
-// func_fe6_0805267C
-// func_fe6_080526F4
-// func_fe6_080527A4
-// func_fe6_08052848
-// func_fe6_08052878
-// func_fe6_080528CC
-// func_fe6_08052974
-// func_fe6_080529EC
-// func_fe6_08052A28
-// func_fe6_08052BA8
-// func_fe6_08052C34
-// func_fe6_08052C68
-// func_fe6_08052C9C
-// func_fe6_08052D40
-// func_fe6_08052D8C
-// func_fe6_08052DF4
-// func_fe6_08052E30
-// func_fe6_08052E9C
-// func_fe6_08052F28
-// func_fe6_08052FB4
-// func_fe6_0805304C
-// func_fe6_0805308C
-// func_fe6_080530E4
-// func_fe6_08053114
-// func_fe6_0805315C
-// func_fe6_0805318C
-// func_fe6_080531C4
-// func_fe6_080531F4
-// func_fe6_08053218
-// func_fe6_0805327C
-// func_fe6_08053340
-// func_fe6_08053420
-// func_fe6_080534BC
-// func_fe6_080534FC
-// func_fe6_08053530
-// func_fe6_08053568
-// func_fe6_080535F8
-// func_fe6_080536C4
-// func_fe6_08053764
-// func_fe6_080537A0
-// func_fe6_08053954
-// func_fe6_080539C4
-// func_fe6_08053A44
-// func_fe6_08053A98
-// func_fe6_08053AFC
-// func_fe6_08053B88
-// func_fe6_08053BA0
-// func_fe6_08053BFC
-// func_fe6_08053C58
-// func_fe6_08053CB4
-// func_fe6_08053CFC
-// func_fe6_08053D5C
-// func_fe6_08053DB0
-// func_fe6_08053DC8
-// func_fe6_08053E04
-// func_fe6_08053FF4
-// func_fe6_08054084
-// func_fe6_080540A0
-// func_fe6_080540D0
-// func_fe6_08054118
-// func_fe6_08054128
-// func_fe6_08054168
-// func_fe6_080541C8
-// func_fe6_080541FC
-// func_fe6_0805428C
-// func_fe6_08054310
-// func_fe6_080543C4
-// func_fe6_0805440C
-// func_fe6_08054458
-// func_fe6_080544D8
-// func_fe6_08054558
-// func_fe6_08054580
-// func_fe6_080546A8
-// func_fe6_080546D0
-// func_fe6_08054848
-// func_fe6_08054870
-// func_fe6_080549E8
-// func_fe6_08054A10
-// func_fe6_08054B98
-// func_fe6_08054C54
-// func_fe6_08054D08
-// func_fe6_08054D78
-// func_fe6_08054DE8
-// func_fe6_08054E58
-// func_fe6_08054EA0
-// func_fe6_08054EDC
-// func_fe6_08054EF8
-// func_fe6_08054F8C
-// func_fe6_08054FEC
-// func_fe6_08055050
-// func_fe6_08055084
-// func_fe6_080550B8
-// func_fe6_080550EC
-// func_fe6_08055134
-// func_fe6_08055200
-// func_fe6_08055234
-// func_fe6_08055264
-// func_fe6_08055294
-// func_fe6_08055364
-// func_fe6_080553B4
-// func_fe6_08055434
-// func_fe6_08055480
-// func_fe6_080554C8
-// func_fe6_08055580
-// func_fe6_08055628
-// func_fe6_08055674
-// func_fe6_080556BC
-// func_fe6_080556F8
-// func_fe6_0805581C
-// func_fe6_08055870
-// func_fe6_080558D4
-// func_fe6_0805594C
-// func_fe6_0805595C
-// func_fe6_08055998
-// func_fe6_08055AA0
-// func_fe6_08055B2C
-// func_fe6_08055B84
-// func_fe6_08055BDC
-// func_fe6_08055BF4
-// func_fe6_08055C30
-// func_fe6_08055D30
-// func_fe6_08055DBC
-// func_fe6_08055E14
-// func_fe6_08055E6C
-// func_fe6_08055EC0
-// func_fe6_08055ED0
-// func_fe6_08055EF4
-// func_fe6_08055F14
-// func_fe6_08055F24
-// func_fe6_08055F60
-// func_fe6_08056080
-// func_fe6_080560D4
-// func_fe6_08056138
-// func_fe6_08056190
-// func_fe6_080561A0
-// func_fe6_080561DC
-// func_fe6_080562C0
-// func_fe6_080563E0
-// func_fe6_08056444
-// func_fe6_08056470
-// func_fe6_080564D4
-// func_fe6_080564E4
-// func_fe6_0805653C
-// func_fe6_08056554
-// func_fe6_08056590
-// func_fe6_080565CC
-// func_fe6_08056608
-// func_fe6_08056644
-// func_fe6_08056680
-// func_fe6_080566BC
-// func_fe6_080566F8
-// func_fe6_08056734
-// func_fe6_08056770
-// func_fe6_080567AC
-// func_fe6_080567E8
-// func_fe6_080568B4
-// func_fe6_08056910
-// func_fe6_08056968
-// func_fe6_080569C0
-// func_fe6_08056A00
-// func_fe6_08056A18
-// func_fe6_08056A3C
-// func_fe6_08056A68
-// func_fe6_08056AD8
-// func_fe6_08056B08
-// func_fe6_08056B28
-// func_fe6_08056B58
-// func_fe6_08056BA8
-// func_fe6_08056BD0
-// func_fe6_08056C00
-// func_fe6_08056C3C
-// func_fe6_08056C5C
-// func_fe6_08056C9C
-// func_fe6_08056D28
-// func_fe6_08056D80
-// func_fe6_08056DA8
-// func_fe6_08056DB4
-// func_fe6_08056E34
-// func_fe6_08056E9C
-// func_fe6_08056EC4
-// func_fe6_08056F28
-// func_fe6_08056F50
-// func_fe6_08056F94
-// func_fe6_08056FA0
-// func_fe6_08056FE4
-// func_fe6_08057030
-// func_fe6_0805707C
-// func_fe6_080570A0
-// func_fe6_080570E4
-// func_fe6_08057130
-// func_fe6_0805717C
-// func_fe6_080571A0
-// func_fe6_08057208
-// func_fe6_08057224
-// func_fe6_080572EC
-// func_fe6_08057344
-// func_fe6_08057374
-// func_fe6_08057380
-// func_fe6_0805752C
-// func_fe6_0805755C
-// func_fe6_08057578
-// func_fe6_080575E8
-// func_fe6_0805765C
-// func_fe6_080576AC
-// func_fe6_08057720
-// func_fe6_08057754
-// func_fe6_080577A0
-// func_fe6_080577F4
-// func_fe6_08057860
-// func_fe6_08057920
-// func_fe6_0805792C
-// func_fe6_0805794C
-// func_fe6_080579C0
-// func_fe6_08057A0C
-// func_fe6_08057A34
-// func_fe6_08057A5C
-// func_fe6_08057A7C
-// func_fe6_08057B2C
-// func_fe6_08057B4C
-// func_fe6_08057B90
-// func_fe6_08057BB0
-// func_fe6_08057BF8
-// func_fe6_08057C94
-// func_fe6_08057D20
-// func_fe6_08057E98
-// func_fe6_08057EC4
-// func_fe6_08057EF4
-// func_fe6_08057F08
-// func_fe6_08057F24
-// func_fe6_08057F40
-// func_fe6_08057F4C
-// func_fe6_08057F58
-// func_fe6_08057F60
-// func_fe6_08057FB8
-// func_fe6_08057FE8
-// func_fe6_0805803C
-// func_fe6_080580A8
-// func_fe6_080580D8
-// func_fe6_08058100
-// func_fe6_08058130
-// func_fe6_08058158
-// func_fe6_0805817C
-// func_fe6_08058180
-// func_fe6_080581A0
-// func_fe6_080581C0
-// func_fe6_08058220
-// func_fe6_0805826C
-// func_fe6_080582EC
-// func_fe6_08058310
-// func_fe6_08058330
-// func_fe6_08058358
-// func_fe6_080583B4
-// func_fe6_08058438
-// func_fe6_0805846C
-// func_fe6_080584AC
-// func_fe6_08058528
-// func_fe6_0805854C
-// func_fe6_08058568
-// func_fe6_080585DC
-// func_fe6_08058630
-// func_fe6_0805867C
-// func_fe6_080586B0
-// func_fe6_080586F0
-// func_fe6_08058720
-// func_fe6_0805873C
-// func_fe6_080587C0
-// func_fe6_08058824
-void func_fe6_0805884C(void);
-// func_fe6_08058880
-// func_fe6_080588A4
-// func_fe6_080588BC
-// func_fe6_080588E0
-// func_fe6_0805894C
-// func_fe6_08058998
-// func_fe6_080589C4
-// func_fe6_080589FC
-// func_fe6_08058A08
-// func_fe6_08058A1C
-// func_fe6_08058A34
-// func_fe6_08058A50
-// func_fe6_08058A80
-// func_fe6_08058ACC
-// func_fe6_08058B84
-// func_fe6_08058C3C
-// func_fe6_08058CEC
-// func_fe6_08058D08
-// func_fe6_08058D34
-// func_fe6_08058E24
-// func_fe6_08058E58
-// func_fe6_08058E90
-// func_fe6_08058EC8
-// func_fe6_08058F00
-// func_fe6_08058F28
-// func_fe6_08058F38
-// func_fe6_08058F60
-// func_fe6_08058FA8
-// func_fe6_08059018
-// func_fe6_08059078
-// func_fe6_08059090
-// func_fe6_080590B8
-// func_fe6_080590FC
-// func_fe6_08059144
-// func_fe6_080591AC
-// func_fe6_080591CC
-// func_fe6_080592D0
-// func_fe6_08059328
-// func_fe6_080593D4
-// func_fe6_08059400
-// func_fe6_08059418
-// func_fe6_0805946C
-// func_fe6_080594CC
-// func_fe6_08059578
-// func_fe6_080595EC
-// func_fe6_08059614
-// func_fe6_0805966C
-// func_fe6_08059690
-// func_fe6_08059730
-// func_fe6_08059758
-// func_fe6_0805979C
-// func_fe6_080597E0
-// func_fe6_08059824
-// func_fe6_08059868
-// func_fe6_080598AC
-// func_fe6_080598F0
-// func_fe6_08059928
-// func_fe6_080599D0
-// func_fe6_08059A28
-// func_fe6_08059A44
-// func_fe6_08059AD0
-// func_fe6_08059B78
-// func_fe6_08059BE4
-// func_fe6_08059C38
-// func_fe6_08059C54
-// func_fe6_08059C78
-// func_fe6_08059D34
-// func_fe6_08059D8C
-// func_fe6_08059DD0
-// func_fe6_08059E08
-// func_fe6_08059E80
-// func_fe6_08059F2C
-// func_fe6_0805A000
-// func_fe6_0805A0BC
-// func_fe6_0805A140
-// func_fe6_0805A228
-// func_fe6_0805A270
-// func_fe6_0805A2BC
-// func_fe6_0805A35C
-// func_fe6_0805A394
-// func_fe6_0805A3EC
-// func_fe6_0805A410
-// func_fe6_0805A434
-// func_fe6_0805A4B4
-// func_fe6_0805A4C8
-// func_fe6_0805A51C
-// func_fe6_0805A584
-// func_fe6_0805A598
-// func_fe6_0805A5C4
-// func_fe6_0805A63C
-// func_fe6_0805A658
-// func_fe6_0805A6B8
-// func_fe6_0805A6DC
-// func_fe6_0805A768
-// func_fe6_0805A77C
-// func_fe6_0805A7C0
-// func_fe6_0805A7EC
-// func_fe6_0805A82C
-// func_fe6_0805A858
-// func_fe6_0805A894
-// func_fe6_0805A8B0
-// func_fe6_0805A998
-// func_fe6_0805A9F8
-// func_fe6_0805AAA0
-// func_fe6_0805AB50
-// func_fe6_0805AB5C
-// func_fe6_0805ABC0
-// func_fe6_0805AC54
-// func_fe6_0805ADE4
-// func_fe6_0805AE08
-// func_fe6_0805AE1C
-// func_fe6_0805AE6C
-// func_fe6_0805AEDC
-// func_fe6_0805AF34
-// func_fe6_0805AFA4
-// func_fe6_0805AFD4
-// func_fe6_0805AFEC
-// func_fe6_0805B01C
-// func_fe6_0805B094
-// func_fe6_0805B0D4
-// func_fe6_0805B13C
-// func_fe6_0805B1AC
-// func_fe6_0805B1DC
-// func_fe6_0805B20C
-// func_fe6_0805B2BC
-// func_fe6_0805B380
-// func_fe6_0805B458
-// func_fe6_0805B4D8
-void func_fe6_0805B5C8(u16 const * pal, int arg_1, int arg_2, int arg_3);
-void func_fe6_0805B644(u16 * pal, int arg_1, int arg_2, int arg_3);
-// func_fe6_0805B6C8
-// func_fe6_0805B780
-// func_fe6_0805B7F4
-// func_fe6_0805B834
-// func_fe6_0805B88C
-// func_fe6_0805B90C
-// func_fe6_0805B9A4
-// func_fe6_0805B9C8
-// func_fe6_0805B9E0
-// func_fe6_0805BA2C
-// func_fe6_0805BAEC
-// func_fe6_0805BB08
-// func_fe6_0805BB24
-// func_fe6_0805BCA8
-// func_fe6_0805BD04
-// func_fe6_0805BD54
-// func_fe6_0805BD64
-// func_fe6_0805BD8C
-// func_fe6_0805BD9C
-// func_fe6_0805BDA8
-// func_fe6_0805BDB4
-// func_fe6_0805BDC0
-// func_fe6_0805BE7C
-// func_fe6_0805C1A0
-// func_fe6_0805C2B0
-// func_fe6_0805C2E0
-// func_fe6_0805C308
-// func_fe6_0805C358
-// func_fe6_0805C3B8
-// func_fe6_0805C3FC
-// func_fe6_0805C41C
-void func_fe6_0805C520(void);
-// func_fe6_0805C738
-// func_fe6_0805C76C
-// func_fe6_0805C804
-// func_fe6_0805C820
-// func_fe6_0805C840
-// func_fe6_0805C858
-// func_fe6_0805C86C
-// func_fe6_0805C89C
-// func_fe6_0805CB64
-// func_fe6_0805CB6C
-// func_fe6_0805CBB0
-// func_fe6_0805CBF4
-// func_fe6_0805CC64
-// func_fe6_0805CC80
-// func_fe6_0805CCE8
-// func_fe6_0805CD04
-// func_fe6_0805CD68
-// func_fe6_0805CDB4
-// func_fe6_0805CDCC
-// func_fe6_0805CEE0
-// func_fe6_0805CF38
-// func_fe6_0805CF58
-// func_fe6_0805CFBC
-// func_fe6_0805CFC0
-// func_fe6_0805CFF8
-// func_fe6_0805D09C
-// func_fe6_0805D0E0
-// func_fe6_0805D128
-// func_fe6_0805D140
-// func_fe6_0805D154
-// func_fe6_0805D4E0
-// func_fe6_0805D538
-// func_fe6_0805D570
-// func_fe6_0805D5B0
-// func_fe6_0805D604
-// func_fe6_0805D8B4
-// func_fe6_0805DA08
-// func_fe6_0805DA38
-// func_fe6_0805DA7C
-// func_fe6_0805DBA4
-// func_fe6_0805DBD4
-// func_fe6_0805DC2C
-// func_fe6_0805DCB4
-// func_fe6_0805DD08
-// func_fe6_0805DD78
-// func_fe6_0805DDA8
-// func_fe6_0805DE8C
-// func_fe6_0805DEBC
-// func_fe6_0805DEC8
-// func_fe6_0805DF90
-// func_fe6_0805E104
-// func_fe6_0805E140
-// func_fe6_0805E180
-// func_fe6_0805E230
-// func_fe6_0805E248
-// func_fe6_0805E2BC
-// func_fe6_0805E2C0
-// func_fe6_0805E2CC
-// func_fe6_0805E2E4
-// func_fe6_0805E2E8
-// func_fe6_0805E370
-// func_fe6_0805E43C
-// func_fe6_0805E448
-// func_fe6_0805E454
-// func_fe6_0805E4D4
-// func_fe6_0805E510
-// func_fe6_0805E560
-// func_fe6_0805E574
-// func_fe6_0805E578
-// func_fe6_0805E59C
-// func_fe6_0805E7A0
-// func_fe6_0805E7D8
-// func_fe6_0805E890
-// func_fe6_0805E91C
-// func_fe6_0805E964
-// func_fe6_0805EA10
-// func_fe6_0805EA38
-// func_fe6_0805EA70
-// func_fe6_0805EB40
-// func_fe6_0805ECC4
-// func_fe6_0805ED1C
-// func_fe6_0805EE2C
-// func_fe6_0805EE74
-// func_fe6_0805EE9C
-// func_fe6_0805EED4
-// func_fe6_0805F078
-// func_fe6_0805F098
-// func_fe6_0805F0DC
-// func_fe6_0805F100
-// func_fe6_0805F148
-// func_fe6_0805F15C
-// func_fe6_0805F178
-// func_fe6_0805F188
-// func_fe6_0805F198
-// func_fe6_0805F27C
-// func_fe6_0805F498
-// func_fe6_0805F57C
-// func_fe6_0805F598
-// func_fe6_0805F5C0
-// func_fe6_0805F5F8
-// func_fe6_0805F620
-// func_fe6_0805F658
-// func_fe6_0805F680
-// func_fe6_0805F6B8
-// func_fe6_0805F6E0
-// func_fe6_0805F71C
-// func_fe6_0805F74C
-// func_fe6_0805F750
-u8 GetWeaponAnimActorCount(int item);
-// func_fe6_0805F794
-struct ProcScr const * GetWeaponAnimManimSpecialScr(int item); // fu16?
-fu8 func_fe6_0805F7B4(int item); // fu16?
-fu8 GetItemMaFacing(int item); // fu16?
-fu8 func_fe6_0805F7D4(int item); // fu16?
-
-// func_fe6_080741EC
-// func_fe6_08074254
-// func_fe6_080742D0
-// func_fe6_08074384
-// func_fe6_080743C8
-// func_fe6_080744A0
-// func_fe6_08074558
-// func_fe6_08074668
-// func_fe6_08074778
-// func_fe6_08074804
-// func_fe6_08074830
-// func_fe6_08074850
-// func_fe6_080748AC
-// func_fe6_08074BA0
-// func_fe6_08074BA4
-// func_fe6_08074D54
-// func_fe6_08074EF0
-// func_fe6_08075338
-// func_fe6_080753A0
-// func_fe6_080754F4
-// func_fe6_08075570
-// func_fe6_08075D34
-// func_fe6_08075DF8
-// func_fe6_08075E94
-// func_fe6_08076060
-void func_fe6_08076238(void);
-// func_fe6_08076250
-// func_fe6_080762B4
-// func_fe6_080762E4
-void func_fe6_08076314(u16 * tm, fu8 arg_1);
-void func_fe6_080763D8(int arg_0, int arg_1, int arg_2);
-void func_fe6_08076448(ProcPtr proc, fu8 arg_1, u16 * tm, int arg_3, int arg_4);
-// func_fe6_08076D30
-bool func_fe6_08076D3C(int arg_0, int arg_1);
-// func_fe6_080791A0
-void func_fe6_080791B4(fu8 pid);
-void func_fe6_080791DC(fu8 pid);
-// func_fe6_0807921C
-// func_fe6_08079250
-// func_fe6_080792C8
-// func_fe6_08079388
-// func_fe6_080793F0
-bool func_fe6_08079404(struct Unit * unit);
-// func_fe6_08079424
-// func_fe6_08079624
-// func_fe6_080796B0
-// func_fe6_0807979C
-// func_fe6_080797DC
-// func_fe6_08079804
-// func_fe6_080798EC
-// func_fe6_08079928
-// func_fe6_08079A28
-// func_fe6_08079A94
-// func_fe6_08079BC8
-// func_fe6_08079C38
-// func_fe6_08079D70
-// func_fe6_08079D84
-// func_fe6_08079EA0
-// func_fe6_08079F50
-void func_fe6_0807A07C(void);
-// func_fe6_0807A194
-// func_fe6_0807A1C8
-// func_fe6_0807A268
-// func_fe6_0807A59C
-// func_fe6_0807A67C
-// func_fe6_0807A84C
-// func_fe6_0807A940
-// func_fe6_0807ABF4
-// func_fe6_0807AC9C
-// func_fe6_0807ACE8
-// func_fe6_0807ACFC
-// func_fe6_0807AD6C
-// func_fe6_0807AD78
-// func_fe6_0807B0DC
-// func_fe6_0807B0E4
-// func_fe6_0807B178
-// func_fe6_0807B200
-// func_fe6_0807B28C
-// func_fe6_0807B3D8
-// func_fe6_0807B49C
-// func_fe6_0807B4C0
-// func_fe6_0807B5A0
-// func_fe6_0807B69C
-void func_fe6_0807B6BC(void);
-// func_fe6_0807B6D0
-// func_fe6_0807B6EC
-// func_fe6_0807B714
-// func_fe6_0807B7C8
-// func_fe6_0807B888
-// func_fe6_0807B89C
-// func_fe6_0807B8B0
-// func_fe6_0807B8CC
-// func_fe6_0807B90C
-// func_fe6_0807B9CC
-// func_fe6_0807BC04
-// func_fe6_0807BE88
-// func_fe6_0807BF70
-// func_fe6_0807C090
-// func_fe6_0807C288
-// func_fe6_0807C364
-// func_fe6_0807C500
-// func_fe6_0807C504
-// func_fe6_0807C508
-// func_fe6_0807C520
-// func_fe6_0807C5B8
-// func_fe6_0807C7B8
-// func_fe6_0807C840
-// func_fe6_0807C884
-// func_fe6_0807C97C
-// func_fe6_0807C9F4
-// func_fe6_0807CA48
-// func_fe6_0807CA9C
-// func_fe6_0807CAD4
-// func_fe6_0807CB08
-// func_fe6_0807CB40
-// func_fe6_0807CB78
-// func_fe6_0807CBB0
-// func_fe6_0807CBDC
-// func_fe6_0807CC28
-// func_fe6_0807CC34
-// func_fe6_0807CCC4
-// func_fe6_0807CD24
-// func_fe6_0807CD5C
-// func_fe6_0807CDF4
-// func_fe6_0807CE98
-// func_fe6_0807CEF0
-// func_fe6_0807CF2C
-// func_fe6_0807CF78
-// func_fe6_0807CFA0
-// func_fe6_0807CFA4
-// func_fe6_0807CFB8
-// func_fe6_0807CFBC
-// func_fe6_0807CFDC
-// func_fe6_0807D074
-// func_fe6_0807D088
-// func_fe6_0807D0A8
-// func_fe6_0807D16C
-// func_fe6_0807D180
-// func_fe6_0807D1AC
-// func_fe6_0807D2E0
-// func_fe6_0807D2F4
-// func_fe6_0807D338
-// func_fe6_0807D358
-// func_fe6_0807D4A8
-// func_fe6_0807D6C0
-// func_fe6_0807D834
-// func_fe6_0807D9E4
-// func_fe6_0807DB80
-// func_fe6_0807DCB8
-// func_fe6_0807DDC8
-// func_fe6_0807DE60
-// func_fe6_0807DEC8
-// func_fe6_0807DF60
-// func_fe6_0807DFEC
-// func_fe6_0807E06C
-// func_fe6_0807E0D4
-// func_fe6_0807E41C
-// func_fe6_0807E544
-// func_fe6_0807E5A8
-// func_fe6_0807EB70
-// func_fe6_0807EDBC
-// func_fe6_0807FBE8
-// func_fe6_0807FCFC
-// func_fe6_0807FF98
-// func_fe6_08080284
-// func_fe6_080813E8
-// func_fe6_08081540
-// func_fe6_080815BC
-void func_fe6_080815E4(struct Unit * unit, ProcPtr parent);
-void func_fe6_08081620(struct Unit * unit, ProcPtr parent);
-// func_fe6_0808165C
-// func_fe6_0808166C
-// func_fe6_0808171C
-// func_fe6_08081970
-// func_fe6_08081DF8
-// func_fe6_08081E3C
-// func_fe6_08081E50
-// func_fe6_08081E58
-// func_fe6_08081ED4
-// func_fe6_08081EE8
-// func_fe6_08081F20
-ProcPtr func_fe6_0808230C(ProcPtr parent);
-void func_fe6_08082320(ProcPtr self, int arg_1, int arg_2, int arg_3, int arg_4, int arg_5, int arg_6);
-// func_fe6_08082348
-// func_fe6_08082360
-// func_fe6_080823A0
-// func_fe6_080823F4
-// func_fe6_08082498
-// func_fe6_0808255C
-ProcPtr func_fe6_08082560(ProcPtr parent);
-// func_fe6_08082574
-// func_fe6_080825B8
-// func_fe6_08082708
-// func_fe6_080827CC
-// func_fe6_080827D8
-// func_fe6_080827F8
-// func_fe6_080828B8
-// func_fe6_080829E8
-// func_fe6_08082A08
-// func_fe6_08082A40
-// func_fe6_08082A7C
-// func_fe6_08082ABC
-// func_fe6_08082AC8
-// func_fe6_08082AD8
-void func_fe6_08082B00(int arg_0, int arg_1, int msg, ProcPtr parent);
-// func_fe6_08082B1C
-// func_fe6_08082B44
-bool func_fe6_08082B74(struct Unit * unit);
-// func_fe6_08082B98
-// func_fe6_08082C34
-// func_fe6_08082C80
-void func_fe6_08082CBC(void);
-// func_fe6_08082CF4
-// func_fe6_08082D08
-// func_fe6_08082D54
-// func_fe6_08082DA4
-// func_fe6_08082E74
-// func_fe6_08082EC0
-// func_fe6_08082EEC
-// func_fe6_08082F18
-// func_fe6_08082F54
-// func_fe6_08082FE8
-// func_fe6_08083078
-// func_fe6_080830AC
-// func_fe6_08083180
-// func_fe6_080832A0
-// func_fe6_08083378
-// func_fe6_0808344C
-// func_fe6_0808347C
-// func_fe6_080834B4
-// func_fe6_0808357C
-// func_fe6_08083618
-// func_fe6_08083688
-// func_fe6_08083750
-// func_fe6_080837C8
-// func_fe6_080838FC
-// func_fe6_08083900
-// func_fe6_08083930
-// func_fe6_08083944
-// func_fe6_08083A68
-// func_fe6_08083B8C
-// func_fe6_08083BC4
-// func_fe6_08083E70
-// func_fe6_08083F40
-// func_fe6_08083FF0
-// func_fe6_08084134
-// func_fe6_08084138
-// func_fe6_08084168
-// func_fe6_080841B4
-// func_fe6_080841EC
-// func_fe6_080841F8
-// func_fe6_08086088
-// VerifySaveBlockInfo
-// WriteNewMultiArenaSave
-// ReadMultiArenaSaveTeamRaw
-// ReadMultiArenaSaveTeamName
-// WipeMultiArenaSaveTeam
-// CopyMultiArenaSaveTeam
-// SwapMultiArenaSaveTeams
-// WriteMultiArenaSaveTeam
-// ReadMultiArenaSaveTeam
-// WriteMultiArenaSaveRankings
-// ReadMultiArenaSaveRankings
-// WriteMultiArenaSaveConfig
-// ReadMultiArenaSaveConfig
-bool IsMultiArenaSaveReady();
-// ReadExtraMapSaveHead
-void const * GetExtraMapMapReadAddr(void);
-u32 GetExtraMapMapSize(void);
-// GetExtraMapInfoReadAddr
-// GetExtraMapInfoSize
-// ExtraMapChecksum
-// IsExtraMapAvailable
-void ReadExtraMapInfo(void);
-// ListAvailableTrialChapters
-// func_fe6_080867F0
-// func_fe6_080867FC
-// func_fe6_08086910
-void CreateTrialChapterBonusUnits(void);
-// func_fe6_08086AAC
-// func_fe6_08086B00
-// func_fe6_08086B54
-// func_fe6_08086BE8
-// func_fe6_08086D04
-// func_fe6_08086D44
-// func_fe6_08086D70
-// func_fe6_08086DEC
-// func_fe6_08086F8C
-// func_fe6_08086FA0
-// func_fe6_08086FF0
-// func_fe6_08087218
-// func_fe6_08087254
-// func_fe6_08087290
-// func_fe6_080872A8
-// func_fe6_080873CC
-// func_fe6_08087578
-// func_fe6_080875FC
-// func_fe6_080877AC
-// func_fe6_080877EC
-// func_fe6_08087878
-// func_fe6_080878B4
-// func_fe6_080878F8
-// func_fe6_08087944
-// func_fe6_080879C0
-// func_fe6_08087A88
-// func_fe6_08087AA8
-// func_fe6_08087AE4
-void func_fe6_08087BC4(void);
-// func_fe6_08087BD8
-// func_fe6_08087C14
-// func_fe6_08087C60
-// func_fe6_08087C78
-// func_fe6_08087CB0
-// func_fe6_08087CD4
-// func_fe6_08087D44
-// func_fe6_08087DA4
-// func_fe6_08087E7C
-// func_fe6_08088094
-// func_fe6_080881B8
-// func_fe6_080881C8
-// func_fe6_08088404
-// func_fe6_080885DC
-// func_fe6_08088854
-// func_fe6_08088860
-// func_fe6_08088870
-// func_fe6_08088B40
-// func_fe6_08088B9C
-// func_fe6_08088C04
-// func_fe6_08088C58
-// func_fe6_08088CB0
-// func_fe6_08088D0C
-// func_fe6_08088D6C
-// func_fe6_08088EB8
-// func_fe6_08088F60
-// func_fe6_080890B8
-// func_fe6_080890D0
-// func_fe6_08089180
-// func_fe6_080891DC
-void func_fe6_08089200(ProcPtr proc);
-void func_fe6_08089234(ProcPtr parent);
-// func_fe6_08089254
-// func_fe6_0808927C
-// func_fe6_08089310
-// func_fe6_080893D0
-// func_fe6_08089490
-// func_fe6_08089550
-// func_fe6_08089564
-// func_fe6_08089578
-// func_fe6_0808958C
-// func_fe6_080895A0
-// func_fe6_080895B8
-// func_fe6_08089684
-// func_fe6_08089894
-// func_fe6_080898F0
-// func_fe6_080899F0
-// func_fe6_08089A3C
-// func_fe6_08089ABC
-// func_fe6_08089B3C
-// func_fe6_08089C70
-// func_fe6_08089D30
-// func_fe6_0808A14C
-// func_fe6_0808A160
-// func_fe6_0808A194
-// func_fe6_0808A210
-// func_fe6_0808A228
-// func_fe6_0808A25C
-// func_fe6_0808A3C8
-// func_fe6_0808A3E8
-// func_fe6_0808A418
-// func_fe6_0808A42C
-// func_fe6_0808A454
-// func_fe6_0808A4B8
-// func_fe6_0808A4F0
-// func_fe6_0808A524
-// func_fe6_0808A658
-// func_fe6_0808A6C8
-// func_fe6_0808A79C
-// func_fe6_0808A7B8
-// func_fe6_0808A8B4
-// func_fe6_0808A8E8
-// func_fe6_0808A904
-// func_fe6_0808A918
-// func_fe6_0808A9F4
-// func_fe6_0808AA54
-// func_fe6_0808AA84
-// func_fe6_0808AB44
-// func_fe6_0808ABD4
-// func_fe6_0808AEFC
-// func_fe6_0808AF4C
-// func_fe6_0808B028
-// func_fe6_0808B194
-// func_fe6_0808B2BC
-// func_fe6_0808B378
-// func_fe6_0808B3B8
-// func_fe6_0808B40C
-// func_fe6_0808B430
-// func_fe6_0808B52C
-// func_fe6_0808B56C
-// func_fe6_0808B578
-// func_fe6_0808B598
-// func_fe6_0808B628
-// func_fe6_0808B640
-// func_fe6_0808B7A0
-// func_fe6_0808B7B4
-// func_fe6_0808B854
-// func_fe6_0808B928
-// func_fe6_0808B93C
-// func_fe6_0808B9B4
-// func_fe6_0808B9CC
-// func_fe6_0808BBCC
-// func_fe6_0808BCBC
-// func_fe6_0808BCF0
-// func_fe6_0808BD28
-// func_fe6_0808BD58
-// func_fe6_0808BD6C
-// func_fe6_0808BD78
-// func_fe6_0808BDF8
-// func_fe6_0808BE5C
-// func_fe6_0808BE70
-// func_fe6_0808BF00
-// func_fe6_0808BFF0
-// func_fe6_0808C084
-// func_fe6_0808C098
-// func_fe6_0808C32C
-// func_fe6_0808C340
-// func_fe6_0808C350
-// func_fe6_0808C380
-void func_fe6_0808C390(ProcPtr parent, int arg_1, int arg_2);
-// func_fe6_0808C428
-// func_fe6_0808C4A8
-// func_fe6_0808C514
-// func_fe6_0808C58C
-// func_fe6_0808C668
-// func_fe6_0808C680
-// func_fe6_0808C6A8
-// func_fe6_0808C75C
-// func_fe6_0808C9AC
-// func_fe6_0808C9C8
-// func_fe6_0808CA14
-// func_fe6_0808CAF0
-// func_fe6_0808CC18
-// func_fe6_0808CDCC
-// func_fe6_0808CE4C
-// func_fe6_0808D07C
-// func_fe6_0808D0C0
-// func_fe6_0808D0F8
-// func_fe6_0808D168
-// func_fe6_0808D1B8
-// func_fe6_0808D204
-// func_fe6_0808D214
-// func_fe6_0808D308
-// func_fe6_0808D368
-// func_fe6_0808D374
-// func_fe6_0808D59C
-// func_fe6_0808D630
-// func_fe6_0808D6D4
-// func_fe6_0808D7B4
-// func_fe6_0808D7F8
-// func_fe6_0808D900
-// func_fe6_0808D938
-// func_fe6_0808D954
-// func_fe6_0808D978
-// func_fe6_0808D99C
-// func_fe6_0808D9B0
-// func_fe6_0808D9F0
-// func_fe6_0808DA14
-// func_fe6_0808DA90
-// func_fe6_0808DB14
-// func_fe6_0808DB90
-// func_fe6_0808DB98
-// func_fe6_0808DC30
-// func_fe6_0808DC4C
-// func_fe6_0808DD24
-// func_fe6_0808DD40
-// func_fe6_0808DD78
-// func_fe6_0808DE04
-// func_fe6_0808DE5C
-// func_fe6_0808DE70
-// func_fe6_0808DEA4
-// func_fe6_0808DF3C
-// func_fe6_0808DF78
-// func_fe6_0808DFC4
-// func_fe6_0808DFCC
-// func_fe6_0808E0DC
-// func_fe6_0808E1D0
-// func_fe6_0808E1E4
-// func_fe6_0808E264
-// func_fe6_0808E284
-// func_fe6_0808E2D0
-// func_fe6_0808E2F0
-// func_fe6_0808E2F4
-// func_fe6_0808E390
-// func_fe6_0808E420
-// func_fe6_0808E434
-// func_fe6_0808E4E8
-// func_fe6_0808E5F0
-// func_fe6_0808E6E0
-// func_fe6_0808E6FC
-// func_fe6_0808E710
-// func_fe6_0808E730
-// func_fe6_0808E79C
-// func_fe6_0808E7CC
-// func_fe6_0808E93C
-// func_fe6_0808EA74
-// func_fe6_0808EB94
-// func_fe6_0808EC1C
-// func_fe6_0808EC48
-// func_fe6_0808EC78
-// func_fe6_0808ECD0
-// func_fe6_0808EDE0
-// func_fe6_0808F060
-// func_fe6_0808F098
-// func_fe6_0808F22C
-// func_fe6_0808F27C
-// func_fe6_0808F2A4
-// func_fe6_0808F2F0
-// func_fe6_0808F30C
-// func_fe6_0808F33C
-// func_fe6_0808F3E8
-// func_fe6_0808F470
-// func_fe6_0808F490
-// func_fe6_0808F4B8
-// func_fe6_0808F4F0
-// func_fe6_0808F524
-// func_fe6_0808F550
-// func_fe6_0808F59C
-// func_fe6_0808F5AC
-// func_fe6_0808F600
-// func_fe6_0808F648
-// func_fe6_0808F68C
-// func_fe6_0808F6E0
-// func_fe6_0808F73C
-// func_fe6_0808F780
-// func_fe6_0808F790
-// func_fe6_0808F7B0
-// func_fe6_0808F7D0
-// func_fe6_0808F838
-// func_fe6_0808F844
-// func_fe6_0808F8B8
-// func_fe6_0808F984
-// func_fe6_0808FA14
-// func_fe6_0808FD14
-// func_fe6_0808FD44
-void func_fe6_0808FD6C(ProcPtr parent);
-// func_fe6_0808FD94
-// func_fe6_0808FDE8
-// func_fe6_0808FE3C
-// func_fe6_0808FEC0
-// func_fe6_0808FED8
-// func_fe6_0808FEF0
-// func_fe6_0808FF04
-// func_fe6_0808FF9C
-// func_fe6_0808FFE0
-// func_fe6_080902F0
-// func_fe6_080904F0
-// func_fe6_08090508
-// func_fe6_0809058C
-// func_fe6_080905A0
-// func_fe6_0809060C
-// func_fe6_08090620
-// func_fe6_08090630
-// func_fe6_08090644
-// func_fe6_08090660
-// func_fe6_08090674
-// func_fe6_08090720
-// func_fe6_08090740
-// func_fe6_0809076C
-// func_fe6_08090834
-// func_fe6_08090854
-// func_fe6_08090880
-// func_fe6_080908A4
-// func_fe6_08090A20
-// func_fe6_08090A40
-// func_fe6_08090B80
-// func_fe6_08090BA0
-// func_fe6_08090BC8
-// func_fe6_08090D34
-// func_fe6_08090D54
-// func_fe6_08090D68
-// func_fe6_08090D78
-// func_fe6_08090F34
-// func_fe6_08090F48
-// func_fe6_08091008
-// func_fe6_0809101C
-// func_fe6_0809104C
-// func_fe6_080910DC
-// func_fe6_080911D0
-void func_fe6_080914DC(void);
-void func_fe6_0809154C(void);
-// func_fe6_08091588
-// func_fe6_0809159C
-// func_fe6_0809164C
-// func_fe6_080916AC
-// func_fe6_0809172C
-// func_fe6_08091880
-// func_fe6_08091918
-// func_fe6_0809195C
-// func_fe6_08091A08
-// func_fe6_08091A24
-// func_fe6_08091A4C
-// func_fe6_08091A64
-// func_fe6_08091B94
-// func_fe6_08091C2C
-// func_fe6_08091C40
-// func_fe6_08091D70
-// func_fe6_08091E08
-// func_fe6_08091E28
-// func_fe6_08091F6C
-// func_fe6_08091FFC
-// func_fe6_08092028
-// func_fe6_08092040
-// func_fe6_08092054
-// func_fe6_080920B4
-// func_fe6_08092278
-// func_fe6_0809228C
-void func_fe6_080922B0(void);
-// func_fe6_080922C4
-// func_fe6_080922D8
-// func_fe6_080923C4
-// func_fe6_080923C8
-// func_fe6_08092424
-// func_fe6_08092434
-// func_fe6_08092450
-// func_fe6_08092458
-// func_fe6_080925C4
-// func_fe6_0809268C
-// func_fe6_08092838
-// func_fe6_08092854
-// func_fe6_0809287C
-// func_fe6_0809289C
-// func_fe6_080928C0
-void func_fe6_080928DC(int x, int y, ProcPtr parent);
-// func_fe6_0809290C
-// func_fe6_0809291C
-// func_fe6_08092A9C
-void func_fe6_08092CD8(ProcPtr parent);
-// func_fe6_08092CFC
-// func_fe6_08092D0C
-bool func_fe6_08092E68(void);
-void func_fe6_08092E94(void);
-// func_fe6_08092EB0
-// func_fe6_08093064
-// StartWorldMapIntroScen
-// func_fe6_08093114
-// func_fe6_08093120
-// SetWMFlag
-// GetWMFlag
-// SetWMDot
-// GetWMDot
-// SetWMHighlight
-// GetWMHighlight
-// SetWMMapText
-// GetWMMapText
-// func_fe6_0809325C
-// func_fe6_08093284
-// func_fe6_08093288
-// func_fe6_080932D8
-// func_fe6_0809331C
-// func_fe6_0809338C
-// func_fe6_08093394
-void func_fe6_080933F8(void);
-i8 func_fe6_08093444(void);
-// func_fe6_0809345C
-void func_fe6_0809347C(int x, int y);
-void func_fe6_080934A0(void);
-void func_fe6_080934BC(int x, int y);
-void func_fe6_08093518(void);
-void StartWMIntroRotation(ProcPtr parent);
-// func_fe6_08093584
-// func_fe6_080935A0
-// func_fe6_08093608
-// func_fe6_080936E8
-// func_fe6_08093764
-void StartWMHighlight(int arg_0, int id);
-// func_fe6_080937D4
-// func_fe6_080938BC
-// func_fe6_08093960
-// func_fe6_0809397C
-// func_fe6_08093990
-void func_fe6_080939A8(int id);
-i8 WMHighlightExists(int id);
-i8 func_fe6_080939D0(void);
-void func_fe6_080939F0(int palid, int x, int y, int id);
-void EndWMDot(int id);
-void StartWMFlag(int palid, int x, int y, int id);
-void EndWMFlag(int id);
-void StartWMMapText(int xA, int yA, int unk, int xB, int yB, int id);
-// func_fe6_08093BA0
-void func_fe6_08093BB4(int id);
-// func_fe6_08093BC8
-// func_fe6_08093C18
-// func_fe6_08093C24
-// func_fe6_08093D54
-// func_fe6_08093DD4
-// func_fe6_08093E14
-// func_fe6_08093E90
-// func_fe6_08093EAC
-// func_fe6_08093FD8
-void PlayWMIntroBGM(void);
-void func_fe6_08094030(int arg_0, int arg_1, int arg_2, ProcPtr proc);
-// func_fe6_08094064
-// func_fe6_0809406C
-// func_fe6_080940F0
-// func_fe6_08094108
-// func_fe6_08094110
-// func_fe6_0809412C
-// func_fe6_08094214
-// func_fe6_08094228
-// func_fe6_08094234
-// func_fe6_08094438
-// func_fe6_08094460
-// func_fe6_080944F4
-// func_fe6_08094504
-// func_fe6_08094540
-// func_fe6_080945F4
-// func_fe6_080946D4
-// func_fe6_08094724
-// func_fe6_080947AC
-// func_fe6_080947B8
-// func_fe6_080947DC
-void func_fe6_080947F0(u8 arg_0, ProcPtr parent);
-// func_fe6_0809480C
-// func_fe6_0809485C
-// func_fe6_08094878
-// func_fe6_080949B8
-// func_fe6_08094B28
-// func_fe6_08094B80
-// func_fe6_08094BE0
-// func_fe6_08094C50
-// func_fe6_08094C80
-// func_fe6_08094CB8
-// func_fe6_08094CEC
-// func_fe6_08094E20
-// func_fe6_08094E4C
-// func_fe6_08094EE8
-// func_fe6_08094F08
-// func_fe6_08094F14
-// func_fe6_08094F94
-// func_fe6_08095034
-// func_fe6_08095100
-// func_fe6_08095138
-// func_fe6_0809517C
-// func_fe6_080951A4
-// func_fe6_080951DC
-// func_fe6_080951FC
-// func_fe6_0809525C
-// func_fe6_08095334
-// func_fe6_08095850
-// func_fe6_0809597C
-// func_fe6_08095A70
-// func_fe6_08095A74
-// func_fe6_08095AB8
-// func_fe6_08095AE0
-// func_fe6_08095BCC
-// func_fe6_08095D28
-// func_fe6_08095D2C
-// func_fe6_08095D40
-// func_fe6_08095D48
-// func_fe6_08095D58
-// func_fe6_08095D5C
-// func_fe6_08095D88
-// func_fe6_08095DF0
-void func_fe6_08095E10(struct Unit * unit, u16 const * iid_list);
-void func_fe6_08095E30(struct Unit * unit, u16 const * iid_list);
-void func_fe6_08095E50(struct Unit * unit, u16 const * iid_list);
-// func_fe6_08095E70
-// func_fe6_08095E90
-// func_fe6_08095F5C
-void func_fe6_08095FC4(void);
-void func_fe6_08095FF8(void);
-// func_fe6_0809602C
-// func_fe6_0809604C
-// func_fe6_080960B8
-// func_fe6_080960D4
-// func_fe6_08096164
-// func_fe6_080961F4
-// func_fe6_08096234
-// func_fe6_080964E0
-// func_fe6_08096514
-// func_fe6_0809656C
-// func_fe6_080965A0
-// func_fe6_080965C0
-// func_fe6_080965F0
-// func_fe6_08096610
-// func_fe6_08096630
-// func_fe6_0809664C
-// func_fe6_0809666C
-// func_fe6_0809668C
-// func_fe6_080966C4
-// func_fe6_08096944
-// func_fe6_08096A0C
-// func_fe6_08096A28
-// func_fe6_08096A58
-// func_fe6_08096A78
-// func_fe6_08096A98
-// func_fe6_08096AC4
-// func_fe6_08096AFC
-// func_fe6_08096B38
-// func_fe6_08096F70
-// func_fe6_08097014
-// func_fe6_0809704C
-// func_fe6_08097084
-// func_fe6_080970BC
-// func_fe6_08097180
-// func_fe6_08097280
-// func_fe6_080972AC
-// func_fe6_08097354
-// func_fe6_08097418
-// func_fe6_08097444
-// func_fe6_080974A0
-// func_fe6_0809750C
-// func_fe6_080975A0
-// func_fe6_080975C8
-// func_fe6_08097600
-// func_fe6_08097638
-// func_fe6_08097728
-// func_fe6_0809773C
-// func_fe6_0809777C
-// func_fe6_080977C0
-// func_fe6_08097830
-// func_fe6_080978AC
-// func_fe6_080979AC
-// func_fe6_080979C8
-// func_fe6_08097A54
-// func_fe6_08097AC4
-// func_fe6_08097BC0
-// func_fe6_08097CF4
-// func_fe6_08097D10
-// func_fe6_08097D34
-// func_fe6_08097D50
-// func_fe6_08097D7C
-// func_fe6_08097DA8
-// func_fe6_08097DD8
-// func_fe6_08097DFC
-// func_fe6_08097E2C
-void func_fe6_08097E84(void);
-void func_fe6_08097EAC(void);
-// func_fe6_08097ECC
-// func_fe6_08098258
-// func_fe6_08098290
-// func_fe6_080982B0
-// func_fe6_080982D8
-// func_fe6_08098340
-// func_fe6_08098390
-// func_fe6_080983B0
-// func_fe6_080983D0
-// func_fe6_080983EC
-// func_fe6_08098478
-// func_fe6_08098490
-// func_fe6_080984A8
-// func_fe6_08098550
-// func_fe6_080985AC
-// func_fe6_080985D8
-// func_fe6_08098624
-// func_fe6_080986DC
-// func_fe6_08098730
-void func_fe6_0809874C(void);
-// func_fe6_08098764
-// func_fe6_08098798
-void func_fe6_080987B8(ProcPtr todo_event_proc);
-// func_fe6_080987D4
-// func_fe6_080987E8
-// func_fe6_0809882C
-// func_fe6_08098864
-// func_fe6_08098868
-// func_fe6_080988BC
-// func_fe6_080988C0
-void func_fe6_0809892C(int arg_0, int arg_1, int arg_2, int arg_3, int arg_4);
-// func_fe6_080989F8
-// func_fe6_08098A18
-// func_fe6_08098A44
-// func_fe6_08098A4C
-// func_fe6_08098A54
-// func_fe6_08098A78
-// func_fe6_08098A84
-// func_fe6_08098A90
-// func_fe6_08098A9C
-// func_fe6_08098AA8
-// func_fe6_08098AB4
-// func_fe6_08098AC0
-// func_fe6_08098ACC
-// func_fe6_08098AD8
-// func_fe6_08098AFC
-// func_fe6_08098B80
-// func_fe6_08098BB4
-// func_fe6_08098BBC
-// func_fe6_08098BDC
-// func_fe6_08098C00
-// func_fe6_08098C90
-// func_fe6_08098C94
-// func_fe6_08098CA4
-// func_fe6_08098CC0
-// func_fe6_08098D10
-// func_fe6_08098DB0
-// func_fe6_08098DEC
-// func_fe6_08098E74
-// func_fe6_08098EC8
-// func_fe6_08098F68
-// func_fe6_08098FA8
-// func_fe6_080990B8
-// func_fe6_080990E4
-// func_fe6_080990F0
-// func_fe6_080990FC
-// func_fe6_08099194
-// func_fe6_080992B8
-// func_fe6_080992D0
-// func_fe6_080992DC
-// func_fe6_08099314
-// func_fe6_08099328
-// func_fe6_08099358
-// func_fe6_0809937C
-// func_fe6_080993AC
-// func_fe6_080993E8
-// func_fe6_08099404
-// func_fe6_08099424
-// func_fe6_0809947C
-// func_fe6_08099520
-// func_fe6_08099534
-// func_fe6_08099540
-// func_fe6_08099580
-// func_fe6_080995B0
-// func_fe6_08099644
-// func_fe6_08099654
-// func_fe6_08099738
-// func_fe6_08099750
-// func_fe6_08099768
-// func_fe6_08099784
-// func_fe6_08099794
-// func_fe6_0809979C
-// func_fe6_0809980C
-// func_fe6_08099824
-// func_fe6_08099868
-// func_fe6_080998D4
-// func_fe6_0809992C
-// func_fe6_0809997C
-// func_fe6_08099A2C
-// func_fe6_08099A84
-// func_fe6_08099A90
-// func_fe6_08099AD0
-// func_fe6_08099B18
-// func_fe6_08099B34
-// func_fe6_08099B44
-// func_fe6_08099B5C
-// func_fe6_08099BA8
-// func_fe6_08099BCC
-// func_fe6_08099BE4
-// func_fe6_08099CCC
-// func_fe6_08099D3C
-// func_fe6_08099DA4
-// func_fe6_08099E50
-// func_fe6_08099EC0
-// func_fe6_08099F98
-// func_fe6_08099F9C
-// func_fe6_08099FA8
-// func_fe6_08099FD0
-// func_fe6_0809A014
-// func_fe6_0809A034
-// func_fe6_0809A048
-// func_fe6_0809A068
-// func_fe6_0809A0A8
-// func_fe6_0809A0E0
-// func_fe6_0809A0F4
-// func_fe6_0809A114
-// func_fe6_0809A13C
-// func_fe6_0809A1B8
-// func_fe6_0809A1C0
-// func_fe6_0809A264
-// func_fe6_0809A26C
-// func_fe6_0809A2CC
-// func_fe6_0809A3A4
-// func_fe6_0809A3D4
-// func_fe6_0809A484
-// func_fe6_0809A4C4
-// func_fe6_0809A53C
-// func_fe6_0809A564
-// func_fe6_0809A588
-// func_fe6_0809A600
-// func_fe6_0809A638
-// func_fe6_0809A6DC
-// func_fe6_0809A6E4
-// func_fe6_0809A804
-// func_fe6_0809A80C
-// func_fe6_0809A868
-// func_fe6_0809A8A4
-// func_fe6_0809A8B4
-// func_fe6_0809A900
-// func_fe6_0809A9EC
-// func_fe6_0809AA20
-// func_fe6_0809AA78
-// func_fe6_0809AA98
-// func_fe6_0809AAF0
-// func_fe6_0809AB4C
-// func_fe6_0809ABA8
-// func_fe6_0809ABF0
-// func_fe6_0809AC34
-// func_fe6_0809AC54
-// func_fe6_0809AC74
-// func_fe6_0809AC94
-// func_fe6_0809AD3C
-// func_fe6_0809AD64
-// func_fe6_0809AD88
-// func_fe6_0809ADCC
-// func_fe6_0809AE60
-// func_fe6_0809AEA0
-// func_fe6_0809AEC4
-// func_fe6_0809AED4
-// func_fe6_0809AF30
-// func_fe6_0809AF74
-// func_fe6_0809AF84
-// func_fe6_0809AFE4
-// func_fe6_0809B01C
-// func_fe6_0809B024
-// func_fe6_0809B094
-// func_fe6_0809B0A4
-// func_fe6_0809B0E8
-// func_fe6_0809B188
-// func_fe6_0809B220
-// func_fe6_0809B280
-// func_fe6_0809B2F4
-// func_fe6_0809B2FC
-// func_fe6_0809B36C
-// func_fe6_0809B378
-// func_fe6_0809B398
-// func_fe6_0809B4A8
-// func_fe6_0809B53C
-// func_fe6_0809B54C
-// func_fe6_0809B590
-// func_fe6_0809B608
-// func_fe6_0809B69C
-// func_fe6_0809B6A4
-// func_fe6_0809B6CC
-// func_fe6_0809B6F4
-// func_fe6_0809B75C
-// func_fe6_0809B7D4
-// func_fe6_0809B864
-// func_fe6_0809B898
-// func_fe6_0809B8FC
-// func_fe6_0809B96C
-// func_fe6_0809B99C
-// func_fe6_0809BAF0
-// func_fe6_0809BB00
diff --git a/include/unknown_objects.h b/include/unknown_objects.h
deleted file mode 100644
index abdaf9e..0000000
--- a/include/unknown_objects.h
+++ /dev/null
@@ -1,251 +0,0 @@
-#pragma once
-
-#include "gba/gba.h"
-#include "types.h"
-
-#include "proc.h"
-#include "text.h"
-#include "face.h"
-#include "menu.h"
-#include "mapselect.h"
-
-// some or those are not so much "unknown" as much as they just don't have a home yet
-
-extern struct Font gFont_Unk_02002770;
-extern u16 gUiTmScratchA[0x280];
-extern u16 gUiTmScratchB[0x280];
-extern u16 gUiTmScratchC[0x240];
-
-extern struct Glyph const * CONST_DATA TextGlyphs_Special[];
-extern struct Glyph const * CONST_DATA TextGlyphs_System[];
-extern struct Glyph const * CONST_DATA TextGlyphs_Talk[];
-extern u16 const Pal_Text[]; // 2 palettes (system and talk)
-extern u16 const Pal_GreenTextColors[];
-extern u8 const Img_FactionMiniCard[];
-extern u16 const Pal_FactionMiniCard[];
-extern u8 const Img_TalkBubble[];
-extern u16 const Pal_TalkBubble[];
-extern u8 const Img_TalkBubbleOpeningA[];
-extern u8 const Img_TalkBubbleOpeningB[];
-extern u8 const Img_TalkBubbleOpeningC[];
-extern u8 const Img_TalkBubbleOpeningD[];
-extern u8 const Img_TalkBubbleOpeningE[];
-extern u8 const Tsa_Unk_08101974[];
-extern u8 const Tsa_Unk_08101A2C[];
-extern u8 const Img_SystemObjects[];
-extern u16 const Pal_SystemObjects[];
-extern u8 const Img_LimitViewSquares[];
-extern u16 const Pal_LimitViewBlue[];
-extern u16 const Pal_LimitViewRed[];
-extern u16 const Pal_LimitViewGreen[];
-extern u8 const Img_PhaseChangeSquares[];
-extern u8 const Img_PhaseChangePlayer[];
-extern u16 const Pal_PhaseChangePlayer[];
-extern u8 const Img_PhaseChangeEnemy[];
-extern u16 const Pal_PhaseChangeEnemy[];
-extern u8 const Img_PhaseChangeOther[];
-extern u16 const Pal_PhaseChangeOther[];
-extern u16 const SpriteAnim_08102450[];
-extern u16 const SpriteAnim_GasTrapVertical[];
-extern u16 const SpriteAnim_GasTrapHorizontal[];
-extern u8 const Img_GasTrapVertical[];
-extern u8 const Img_GasTrapHorizontal[];
-extern u16 const Pal_GasTrap[];
-extern u8 const Img_ArrowTrap[];
-extern u16 const Pal_ArrowTrap[];
-extern u16 const SpriteAnim_ArrowTrap[];
-extern u8 const Img_FireTrap[];
-extern u16 const Pal_FireTrap[];
-extern u16 const SpriteAnim_FireTrap[];
-extern u8 const Img_PikeTrap[];
-extern u16 const SpriteAnim_PikeTrap[];
-extern u16 const Pal_PikeTrap[];
-extern u8 const Img_ChapterIntroFog[];
-extern u16 const Pal_ChapterIntroFog[];
-extern u8 const Img_ChapterIntroMotif[];
-extern u16 const Pal_ChapterIntroMotif[];
-extern u8 const Tm_ChapterIntroMotif[];
-extern u8 const Img_GameOverText[];
-extern u16 const Pal_GameOverText[];
-extern u16 const Pal_Unk_0830D95C[];
-extern u8 const Tsa_Unk_0830D97C[];
-extern u8 const Tsa_Unk_081022FC[];
-extern u16 const Pal_UnitSprites[];
-extern u16 const Pal_UnitSpritesPurple[];
-extern u8 const Img_SandstormParticles[];
-extern u8 const Img_SnowstormParticles[];
-extern u8 const Img_FlamesParticles[];
-extern u16 const Pal_FlamesParticles[];
-extern u8 const Img_CloudWeather[];
-extern u16 const Pal_CloudWeather[];
-extern u8 const Img_MovePath[];
-extern u16 const Pal_MovePath[];
-extern u8 const Tsa_UnitPanelHeader[];
-extern u8 const Img_StatusHealEffect[];
-extern u16 const Pal_StatusHealEffect[];
-extern u8 const Tsa_StatusHealEffect[];
-extern u8 const Tsa_BattlePreviewFrame_Short[];
-extern u8 const Tsa_BattlePreviewFrame_Long[];
-extern u16 const Pal_BattlePreviewFrame_Blue[];
-extern u16 const Pal_BattlePreviewFrame_Red[];
-extern u16 const Pal_BattlePreviewFrame_Green[];
-extern u16 const Pal_BattlePreviewFrame_Purple[];
-extern u8 const Img_BattlePreviewFrame[];
-extern u8 const Img_BattlePreviewMultipliers[];
-extern u16 const Pal_BattlePreviewMultipliers[];
-extern u8 const Img_MuFogBump[];
-extern u16 const SpriteAnim_MuFogBump[];
-extern u8 const Img_ManimInfoWindowDigits[];
-extern u16 const Pal_ManimWindowHpBar[];
-extern u8 const Img_ManimInfoFrame[];
-extern u8 const Img_ManimHpBar[];
-extern u16 const Pal_UiWindowFrame_ThemeBlue[];
-extern u16 const Pal_UiWindowFrame_ThemeRed[];
-extern u16 const Pal_UiWindowFrame_ThemeGray[];
-extern u16 const Pal_UiWindowFrame_ThemeGreen[];
-extern u8 const Img_UiWindowFrame_ThemeBlue[];
-extern u8 const Img_UiWindowFrame_ThemeRed[];
-extern u8 const Img_UiWindowFrame_ThemeGray[];
-extern u8 const Img_UiWindowFrame_ThemeGreen[];
-extern u16 const Pal_UiStatBar_ThemeBlue[];
-extern u16 const Pal_UiStatBar_ThemeRed[];
-extern u16 const Pal_UiStatBar_ThemeGray[];
-extern u16 const Pal_UiStatBar_ThemeGreen[];
-extern u8 const Img_UiUnitNameFrame[];
-extern u16 const Pal_UiUnitNameFrame[];
-
-extern u16 const Pal_Unk_081B1710[]; // manim
-
-extern u8 const Tsa_StatusScreen_FactionInfoFrame[]; // tsa
-extern u8 const Tsa_StatusScreen_PlaytimeFrame[]; // tsa
-extern u8 const gUnk_08309408[]; // compressed tsa
-extern u8 const gUnk_0833C6F4[]; // tsa
-extern u8 const gUnk_0833C8D8[]; // tsa
-
-extern struct FaceInfo CONST_DATA FaceInfoTable[];
-extern struct ProcScr CONST_DATA ProcScr_OpeningSequence[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_08691480[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_0868C304[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_0868B010[];
-extern struct ProcScr CONST_DATA ProcScr_Unk_0868AE04[];
-extern u16 CONST_DATA Pal_ManimFireDragonMu[];
-extern u16 CONST_DATA Pal_ManimDivineDragonMu[];
-
-extern i8 CONST_DATA TerrainHealAmountTable[];
-extern bool CONST_DATA TerrainHealsStatusTable[];
-extern char const * CONST_DATA TerrainNameStringTable[];
-
-extern u8 CONST_DATA JList_BowEffectiveness[];
-extern u8 CONST_DATA JList_HeroCrestPromotes[];
-extern u8 CONST_DATA JList_KnightCrestPromotes[];
-extern u8 CONST_DATA JList_OrionBoltPromotes[];
-extern u8 CONST_DATA JList_ElysianWhipPromotes[];
-extern u8 CONST_DATA JList_GuidingRingPromotes[];
-
-extern i8 CONST_DATA MoveTable_Flying[];
-
-extern struct ChapterInfo CONST_DATA ChapterInfoTable[];
-
-extern void const * CONST_DATA ChapterAssets[];
-
-extern u16 const Pal_LinkArenaMuralBackground[];
-extern u16 const Pal_MuralBackground[];
-extern u8 const Img_MuralBackground[];
-extern u16 const Pal_Unk_083087C8[][0x20];
-
-extern u8 const gUnk_083080D0[]; // compressed img (statscreen misc sprite sheet)
-extern u8 const gUnk_08307CEC[]; // compressed tsa (statscreen main window frame)
-extern u16 const gUnk_08308050[]; // pal (statscreen equip stats frame)
-extern u8 const gUnk_08307ED4[]; // compressed img (statscreen equip stats frame)
-extern u8 const gUnk_08308920[]; // compressed img (equipment label)
-
-extern u8 const gUnk_08307D58[]; // tsa (compressed): statscreen page A frame
-extern u8 const gUnk_08307DD4[]; // tsa (compressed): statscreen page B frame
-extern u8 const gUnk_08307E50[]; // tsa (compressed): statscreen page C frame
-extern u8 const gUnk_08308070[]; // tsa (compressed): statscreen page B battle stat box
-extern u8 const gUnk_083080AC[]; // tsa: statscreen page B equipped weapon background
-
-extern u8 const Img_Background_082D80B0[];
-extern u8 const Tsa_Background_082DAC8C[];
-extern u16 const Pal_Background_082DB140[];
-extern u8 const Img_Background_082E28F8[];
-extern u8 const Tsa_Background_082E35DC[];
-extern u16 const Pal_Background_082E3A90[];
-extern u8 const Img_Background_082E3B10[];
-extern u8 const Tsa_Background_082E3EC0[];
-extern u16 const Pal_Background_082E4374[];
-extern u8 const Img_Background_082E4650[];
-extern u8 const Tsa_Background_082E6EB4[];
-extern u16 const Pal_Background_082E7368[];
-extern u8 const Img_Background_082E73E8[];
-extern u8 const Tsa_Background_082EADF0[];
-extern u16 const Pal_Background_082EB2A4[];
-extern u8 const Img_Background_082EB324[];
-extern u8 const Tsa_Background_082EDB7C[];
-extern u16 const Pal_Background_082EE030[];
-extern u8 const Img_Background_082EE0B0[];
-extern u8 const Tsa_Background_082EF97C[];
-extern u16 const Pal_Background_082EFE30[];
-extern u16 const Pal_Background_082EFEB0[];
-extern u8 const Img_Background_082EFF30[];
-extern u8 const Tsa_Background_082F1490[];
-extern u16 const Pal_Background_082F1944[];
-extern u8 const Img_Background_082F19C4[];
-extern u8 const Tsa_Background_082F3494[];
-extern u16 const Pal_Background_082F3948[];
-extern u8 const Img_Background_082F39C8[];
-extern u8 const Tsa_Background_082F62E0[];
-extern u16 const Pal_Background_082F6794[];
-extern u16 const Pal_Background_082F6814[];
-extern u8 const Img_Background_082F6894[];
-extern u8 const Tsa_Background_082F85E8[];
-extern u16 const Pal_Background_082F8A9C[];
-extern u8 const Img_Background_082F8B1C[];
-extern u8 const Tsa_Background_082FBE6C[];
-extern u16 const Pal_Background_082FC320[];
-extern u8 const Img_Background_082FC3A0[];
-extern u8 const Tsa_Background_082FECE0[];
-extern u16 const Pal_Background_082FF194[];
-extern u8 const Img_Background_082FF214[];
-extern u8 const Tsa_Background_08301244[];
-extern u16 const Pal_Background_083016F8[];
-extern u16 const Pal_Background_08301778[];
-extern u16 const Pal_Background_083017F8[];
-extern u8 const Img_Background_08301878[];
-extern u8 const Tsa_Background_0830491C[];
-extern u16 const Pal_Background_08304DD0[];
-extern u8 const Img_Background_08304E50[];
-extern u8 const Tsa_Background_08306F24[];
-extern u16 const Pal_Background_083073D8[];
-
-extern u16 const Pal_Unk_08309474[];
-extern u16 const Pal_Unk_083094F4[];
-extern u16 const Pal_Unk_0830D5E4[];
-
-extern u8 const Img_MapUiElements[];
-
-extern u16 const Pal_UnitMapUiFrame_Blue[];
-extern u16 const Pal_UnitMapUiFrame_Red[];
-extern u16 const Pal_UnitMapUiFrame_Green[];
-
-extern u8 const Tsa_UnitMapUi_Frame[];
-extern u8 const Tsa_TerrainMapUi_Labels[];
-extern u8 const Tsa_TerrainMapUi_BallistaLabels[];
-extern u8 const Tsa_TerrainMapUi_ObstacleLabels[];
-extern u8 const Tsa_TerrainMapUi_ObstacleFullHp[];
-extern u8 const Tsa_TerrainMapUi_Frame[];
-extern u8 const Tsa_UnitBurstMapUi_Frame0[];
-extern u8 const Tsa_UnitBurstMapUi_Frame1[];
-extern u8 const Tsa_UnitBurstMapUi_Frame2[];
-extern u8 const Tsa_UnitBurstMapUi_Frame3[];
-extern u8 const Tsa_UnitBurstMapUi_Frame4[];
-extern u8 const Tsa_UnitBurstMapUi_Frame5[];
-
-extern u16 const Pal_Unk_0833C944[];
-extern u8 const Img_Unk_083092CC[];
-extern u8 const Img_Unk_0833C378[];
-
-struct HelpBoxInfo;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_0868B1B0;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_0868B2C8;
-extern struct HelpBoxInfo CONST_DATA HelpInfo_0868B3C4;
diff --git a/include/unknown_types.h b/include/unknown_types.h
deleted file mode 100644
index d15823e..0000000
--- a/include/unknown_types.h
+++ /dev/null
@@ -1,115 +0,0 @@
-#pragma once
-
-#include "types.h"
-
-// Type decls for types that don't have a home yet :/
-// TODO: move
-
-enum
-{
-    MAP_MOVEMENT_MAX = 120,
-    MAP_MOVEMENT_EXTENDED = 124,
-};
-
-enum
-{
-    FACING_LEFT,
-    FACING_RIGHT,
-    FACING_DOWN,
-    FACING_UP,
-};
-
-enum
-{
-    MOVE_CMD_END = -1, // end
-
-    MOVE_CMD_MOVE_BASE,
-
-    MOVE_CMD_MOVE_LEFT  = MOVE_CMD_MOVE_BASE + FACING_LEFT,
-    MOVE_CMD_MOVE_RIGHT = MOVE_CMD_MOVE_BASE + FACING_RIGHT,
-    MOVE_CMD_MOVE_DOWN  = MOVE_CMD_MOVE_BASE + FACING_DOWN,
-    MOVE_CMD_MOVE_UP    = MOVE_CMD_MOVE_BASE + FACING_UP,
-
-    MOVE_CMD_HALT,
-
-    MOVE_CMD_FACE_BASE,
-
-    MOVE_CMD_FACE_LEFT  = MOVE_CMD_FACE_BASE + FACING_LEFT,
-    MOVE_CMD_FACE_RIGHT = MOVE_CMD_FACE_BASE + FACING_RIGHT,
-    MOVE_CMD_FACE_DOWN  = MOVE_CMD_FACE_BASE + FACING_DOWN,
-    MOVE_CMD_FACE_UP    = MOVE_CMD_FACE_BASE + FACING_UP,
-
-    MOVE_CMD_SLEEP,
-    MOVE_CMD_BUMP,
-    MOVE_CMD_UNK11,
-    MOVE_CMD_SET_SPEED,
-
-    MOVE_CMD_CAMERA_ON,
-    MOVE_CMD_CAMERA_OFF,
-
-    MOVE_SCRIPT_MAX_LENGTH = 0x40,
-};
-
-struct ChapterInfo
-{
-    /* 00 */ char const * debug_name;
-
-    /* 04 */ u8 asset_img_a;
-    /* 05 */ u8 asset_img_b;
-    /* 06 */ u8 asset_pal;
-    /* 07 */ u8 asset_tileset;
-    /* 08 */ u8 asset_map;
-    /* 09 */ u8 asset_img_anims;
-    /* 0A */ u8 asset_pal_anims;
-    /* 0B */ u8 asset_map_changes;
-
-    /* 0C */ u8 fog;
-    /* 0D */ u8 has_prep;
-    /* 0E */ u8 title_id;
-    /* 0F */ u8 unk_0F;
-    /* 10 */ u8 unk_10;
-    /* 11 */ u8 weather;
-    /* 12 */ u8 banim_terrain_id;
-    /* 13 */ u8 hard_bonus_levels;
-
-    /* 14 */ u8 song_blue_bgm;
-    /* 15 */ u8 song_red_bgm;
-    /* 16 */ u8 song_green_bgm;
-    /* 17 */ u8 song_intro_bgm;
-    /* 18 */ u8 song_opening_bgm;
-
-    /* 19 */ u8 wall_hp;
-    /* 1A */ u8 class_roll_set;
-
-    /* 1B */ u8 pad_1B[0x30 - 0x1B];
-
-    /* 30 */ u16 msg_30;
-    /* 32 */ u16 msg_32;
-    /* 34 */ u16 msg_34;
-    /* 36 */ u16 chibi_36;
-    /* 38 */ u16 msg_38;
-    /* 3A */ u8 asset_event_info;
-
-    /* 3B */ u8 pad_3B[0x3E - 0x3B];
-
-    /* 3E */ u8 numberId;
-
-    /* 3F */ u8 pad_3F[0x43 - 0x3F];
-
-    /* 43 */ i8 victory_bgm_enemy_threshold;
-};
-
-struct MapChangeInfo
-{
-    /* 00 */ i8 id;
-    /* 01 */ u8 x, y, width, height;
-    /* 05 */ // pad
-    /* 08 */ u16 const * metatiles;
-};
-
-struct BanimInfoEnt
-{
-    /* 00 */ u8 identifier;
-    /* 01 */ u8 generic;
-    /* 02 */ u16 banim_id;
-};
diff --git a/include/util.h b/include/util.h
deleted file mode 100644
index 211df50..0000000
--- a/include/util.h
+++ /dev/null
@@ -1,169 +0,0 @@
-#pragma once
-
-#include "common.h"
-
-#include "proc.h"
-#include "text.h"
-
-enum
-{
-    INTERPOLATE_LINEAR,
-    INTERPOLATE_SQUARE,
-    INTERPOLATE_CUBIC,
-    INTERPOLATE_POW4,
-    INTERPOLATE_RSQUARE,
-    INTERPOLATE_RCUBIC,
-};
-
-struct PalFadeSt
-{
-    /* 00 */ u16 from_colors[0x10];
-    /* 20 */ u16 const * to_colors;
-    /* 24 */ u16 * pal;
-    /* 28 */ u16 clock;
-    /* 2A */ u16 clock_end;
-    /* 2C */ u16 clock_stop;
-};
-
-int Interpolate(int method, int lo, int hi, int x, int end);
-void func_fe6_08013BEC(void);
-bool StringEquals(char const * strA, char const * strB);
-void StringCopy(char * dst, char const * src);
-void Decompress_Unused_08013C74(void const * src, void * dst);
-void Decompress(void const * src, void * dst);
-int GetDataSize(void const * data);
-void Register2dChrMove(u8 const * img, u8 * vram, int width, int height);
-void Copy2dChr(void const * src, u8 * dst, int width, int height);
-void ApplyBitmap(u8 const * src, void * dst, int width, int height);
-void PutAppliedBitmap(u16 * tm, int tileref, int width, int height);
-void PutDigits(u16 * tm, u8 const * src, int tileref, int len);
-// func_fe6_08013EBC
-// func_fe6_08013EC4
-// func_fe6_08013ED8
-// func_fe6_08013EE4
-// func_fe6_08013F04
-// func_fe6_08013F7C
-void DarkenPals(int reduction);
-// func_fe6_0801412C
-// func_fe6_08014130
-void StartSpacialSeTest(void);
-void func_fe6_080141DC(void);
-void StartPalFadeToBlack(int palid, int duration, ProcPtr parent);
-void StartPalFadeToWhite(int palid, int duration, ProcPtr parent);
-struct PalFadeSt * StartPalFade(u16 const * colors, int pal, int duration, ProcPtr parent);
-void EndPalFade(void);
-void SetPalFadeStop(struct PalFadeSt * st, int val);
-void SetBlackPal(int palid);
-void SetWhitePal(int palid);
-void SetAllBlackPals(void);
-void SetAllWhitePals(void);
-bool FadeExists(void);
-void StartFadeToBlack(int q4_speed);
-void StartFadeFromBlack(int q4_speed);
-void StartLockingFadeToBlack(int q4_speed, ProcPtr parent);
-void StartLockingFadeFromBlack(int q4_speed, ProcPtr parent);
-void StartLockingFadeToWhite(int q4_speed, ProcPtr parent);
-void StartLockingFadeFromWhite(int q4_speed, ProcPtr parent);
-void StartMidFadeToBlack(void);
-void StartSlowFadeToBlack(void);
-void StartFastFadeToBlack(void);
-void StartMidFadeFromBlack(void);
-void StartSlowFadeFromBlack(void);
-void StartFastFadeFromBlack(void);
-void StartMidLockingFadeToBlack(ProcPtr parent);
-void StartSlowLockingFadeToBlack(ProcPtr parent);
-void StartFastLockingFadeToBlack(ProcPtr parent);
-void StartMidLockingFadeFromBlack(ProcPtr parent);
-void StartSlowLockingFadeFromBlack(ProcPtr parent);
-void StartFastLockingFadeFromBlack(ProcPtr parent);
-void StartSlowLockingFadeToWhite(ProcPtr parent);
-void StartSlowLockingFadeFromWhite(ProcPtr parent);
-// func_fe6_08014778
-// func_fe6_08014790
-// func_fe6_080147A8
-// func_fe6_080147C0
-// func_fe6_080147D8
-// func_fe6_080147F0
-// func_fe6_08014804
-// func_fe6_08014818
-// func_fe6_0801482C
-// func_fe6_08014840
-// func_fe6_08014858
-// func_fe6_08014870
-// func_fe6_08014888
-// func_fe6_080148A0
-// func_fe6_080148B8
-// func_fe6_080148CC
-// func_fe6_080148E0
-// func_fe6_080148F8
-// func_fe6_0801490C
-// func_fe6_08014920
-// func_fe6_08014934
-// func_fe6_08014948
-// func_fe6_0801495C
-// func_fe6_08014970
-// func_fe6_08014984
-// func_fe6_08014998
-void WhileFadeExists(ProcPtr proc);
-// func_fe6_080149CC
-void StartFadeCore(int kind, int speed, ProcPtr parent, Func end_callback);
-// func_fe6_08014A28
-// func_fe6_08014A38
-// func_fe6_08014A44
-// func_fe6_08014A68
-void func_fe6_08014AB8(void);
-// func_fe6_08014ACC
-void func_fe6_08014ADC(void);
-void func_fe6_08014AF8(void);
-void func_fe6_08014B68(void);
-void StartTemporaryLock(ProcPtr proc, int arg_1);
-int NumberToString(int number, char * buf);
-struct Text * PutStringCentered(u16 * tm, int color, int width, char const * str);
-struct Text * PutString(u16 * tm, int color, char const * str);
-void func_fe6_08014D50(void);
-// func_fe6_08014D60
-void func_fe6_08014D9C(u16 const * colors, int pal_offset, int pal_size, int interval, ProcPtr parent);
-void func_fe6_08014DB4(u16 const * colors, int pal_offset, int pal_size, int interval, ProcPtr parent);
-// func_fe6_08014DCC
-void func_fe6_08014E30(u16 * tm, int x, int y, u16 tileref, int width, int height);
-// func_fe6_08014E98
-void func_fe6_08014F70(u16 * tm, int x, int y, u16 tileref, int width, int height, u16 const * src, int arg_7);
-void func_fe6_0801501C(u16 * tm, int x, int y, u16 tileref, int width, int height, u8 const * src, int arg_7);
-// func_fe6_080150DC
-void CallDelayed(void (* func)(void), int delay);
-void CallDelayedArg(void (* func)(int), int arg, int delay);
-// func_fe6_080151E4
-// func_fe6_080151F8
-void func_fe6_08015208(u16 * out, int size, int value);
-void StartPartialGameLock(ProcPtr proc);
-void VramCopy(u8 const * src, u8 * dst, int size);
-void func_fe6_08015298(u8 const * src, u8 * dst, int width, int height);
-void PutTmLinear(u16 const * src, u16 * dst, int size, u16 tileref);
-u16 * GetTmOffsetById(int bgid, int x, int y);
-void func_fe6_08015344(void);
-int Screen2Pan(int x);
-void PlaySeSpacial(int song, int x);
-void PlaySeDelayed(int song, int delay);
-void func_fe6_0801548C(short song);
-void func_fe6_0801549C(short speed);
-// func_fe6_080154AC
-// func_fe6_08015504
-void PutDrawTextCentered(struct Text * text, int x, int y, char const * str, int width);
-void VecMulMat(int const * vec, int const * mat, int * ovec);
-void MatMulMat(int const * lmat, int const * rmat, int * omat);
-void MatIdent(int * mat);
-void MatCopy(int const * src, int * dst);
-void MatRotA(int * mat, short angle);
-void MatRotB(int * mat, short angle);
-void MatRotC(int * mat, short angle);
-void func_fe6_08015858(void);
-int VecDotVec(int const * lvec, int const * rvec);
-void VecCrossVec(int const * lvec, int const * rvec, int * ovec);
-int func_fe6_080158B8(int arg_0, int arg_1, int arg_2, int arg_3);
-
-extern u16 CONST_DATA Pal_AllBlack[];
-extern u16 CONST_DATA Pal_AllWhite[];
-extern u16 CONST_DATA Pal_AllRed[];
-extern u16 CONST_DATA Pal_AllGreen[];
-extern u16 CONST_DATA Pal_AllBlue[];
-extern u16 CONST_DATA Pal_085C4F2C[];
diff --git a/makefile b/makefile
index 7d55ac1..dbdd76a 100644
--- a/makefile
+++ b/makefile
@@ -87,7 +87,7 @@ compare: $(ROM)
 .PHONY: compare
 
 clean:
-	@echo "RM $(ROM) $(ELF) $(MAP) $(BUILD_DIR)/"
+	@echo "[ RM]	$(ROM) $(ELF) $(MAP) $(BUILD_DIR)/"
 	@rm -f $(ROM) $(ELF) $(MAP)
 	@rm -fr $(BUILD_DIR)/
 
diff --git a/src/irq.c b/src/irq.c
index ba80494..7ac2715 100644
--- a/src/irq.c
+++ b/src/irq.c
@@ -1,4 +1,4 @@
-#include "common.h"
+#include "global.h"
 #include "irq.h"
 
 extern IrqFunc gIrqFuncs[INT_COUNT];
diff --git a/src/random.c b/src/random.c
index 67216d7..a49fcb0 100644
--- a/src/random.c
+++ b/src/random.c
@@ -1,6 +1,5 @@
-
+#include "global.h"
 #include "random.h"
-#include "common.h"
 
 static u16 sRandStA[3];
 static int sRandStB;
@@ -34,7 +33,7 @@ void RandInit(int seed)
     // This table is a collection of 8 possible initial rn state
     // 3 entries will be picked based of which "seed" was given
 
-    SHOULD_BE_STATIC u16 SHOULD_BE_CONST initTable[] =
+    u16 initTable[] =
     {
         0xA36E, 0x924E,
         0xB784, 0x4F67,
diff --git a/src/unit.c b/src/unit.c
new file mode 100644
index 0000000..54f1f36
--- /dev/null
+++ b/src/unit.c
@@ -0,0 +1,264 @@
+#include "global.h"
+#include "unit.h"
+#include "bm.h"
+#include "terrain.h"
+#include "constants/items.h"
+
+static inline struct Unit *GetUnit(int id)
+{
+    return gUnitLut[id & 0xFF];
+}
+
+void InitUnits(void)
+{
+    int i;
+
+    for (i = 0; i < 0x100; ++i) {
+        struct Unit *unit = GetUnit(i);
+
+        if (unit) {
+            ClearUnit(unit);
+            unit->index = i;
+        }
+    }
+}
+
+void ClearUnit(struct Unit *unit)
+{
+    u8 id = unit->index;
+    CpuFill16(0, unit, sizeof(struct Unit));
+    unit->index = id;
+}
+
+void CopyUnit(struct Unit* src, struct Unit *dst)
+{
+    u8 id = dst->index;
+    memcpy(dst, src, sizeof(struct Unit));
+    dst->index = id;
+}
+
+struct Unit *GetFreeUnit(int faction)
+{
+    int i, last = (faction + 0x40);
+
+    for (i = faction + 1; i < last; ++i) {
+        struct Unit *unit = GetUnit(i);
+
+        if (unit->pCharacterData == NULL)
+            return unit;
+    }
+
+    return NULL;
+}
+
+struct Unit *GetFreeBlueUnit(const struct UnitDefinition *uDef)
+{
+    int i, last = 0x40;
+
+    if (uDef->pid == GetPlayerLeaderUnitId())
+        ++i;
+
+    for (i = 1; i < last; ++i) {
+        struct Unit *unit = GetUnit(i);
+
+        if (unit->pCharacterData == NULL)
+            return unit;
+    }
+
+    return NULL;
+}
+
+int GetUnitFogViewRange(struct Unit *unit) {
+    int result = gPlaySt.chapterVisionRange;
+
+    if (UNIT_CATTRIBUTES(unit) & CA_THIEF)
+        result += 5;
+
+    return result + unit->torchDuration;
+}
+
+void SetUnitStatus(struct Unit *unit, int status)
+{
+    if (status == 0) {
+        unit->statusIndex    = 0;
+        unit->statusDuration = 0;
+    } else {
+        unit->statusIndex    = status;
+        unit->statusDuration = 5;
+    }
+}
+
+void SetUnitStatusExt(struct Unit *unit, int status, int duration)
+{
+    unit->statusIndex    = status;
+    unit->statusDuration = duration;
+}
+
+int GetUnitSMSId(struct Unit *unit)
+{
+    if (!(unit->state & US_IN_BALLISTA))
+        return unit->pClassData->SMSId;
+
+    switch (GetTrap(unit->ballistaIndex)->extra) {
+    case ITEM_BALLISTA_REGULAR:
+        return 0x4F;
+
+    case ITEM_BALLISTA_LONG:
+        return 0x50;
+
+    case ITEM_BALLISTA_KILLER:
+        return 0x51;
+
+    default:
+        return 0;
+    }
+}
+
+bool UnitAddItem(struct Unit *unit, int item)
+{
+    int i;
+
+    for (i = 0; i < UNIT_ITEM_COUNT; ++i) {
+        if (unit->items[i] == 0) {
+            unit->items[i] = item;
+            return true;
+        }
+    }
+
+    return false;
+}
+
+void UnitClearInventory(struct Unit *unit)
+{
+    int i;
+
+    for (i = 0; i < UNIT_ITEM_COUNT; ++i)
+        unit->items[i] = 0;
+}
+
+void UnitRemoveInvalidItems(struct Unit *unit)
+{
+    u16 items[UNIT_ITEM_COUNT + 1], i;
+    u16* it = items;
+
+    // Build item buffer by iterating through unit's items and skipping blanks
+
+    for (i = 0; i < UNIT_ITEM_COUNT; ++i) {
+        if (unit->items[i])
+            *it++ = unit->items[i];
+
+        unit->items[i] = 0; // Null the item from the unit
+    }
+
+    *it = 0; // null-terminate buffer
+
+    // Write buffered items
+
+    for (i = 0; i < UNIT_ITEM_COUNT; ++i) {
+        if (!items[i])
+            return; // Stop now if we reached end of buffer
+
+        unit->items[i] = items[i];
+    }
+}
+
+int GetUnitItemCount(struct Unit *unit)
+{
+    int i;
+
+    for (i = (UNIT_ITEM_COUNT - 1); i >= 0; --i)
+        if (unit->items[i])
+            return i + 1;
+
+    return 0;
+}
+
+bool UnitHasItem(struct Unit *unit, int item)
+{
+    int i;
+    item = GetItemIndex(item);
+
+    for (i = 0; (i < UNIT_ITEM_COUNT) && unit->items[i]; ++i)
+        if (GetItemIndex(unit->items[i]) == item)
+            return true;
+
+    return false;
+}
+
+int LoadUnits(const struct UnitDefinition *uDef)
+{
+    int count = 0;
+
+    while (uDef->pid) {
+        LoadUnit(uDef);
+
+        uDef++;
+        count++;
+    }
+
+    return count;
+}
+
+void sub_08017B44(struct Unit *unit)
+{
+    if (unit->pow >= 4)
+        unit->pow /= 2;
+
+    if (unit->def >= 4)
+        unit->def /= 2;
+
+    if (unit->res >= 4)
+        unit->res /= 2;
+}
+
+struct Unit *LoadUnit(struct UnitDefinition const *info)
+{
+    int hp;
+    struct Unit *unit = NULL;
+
+    switch (info->faction_id) {
+    case FACTION_ID_BLUE:
+        unit = GetFreeBlueUnit(info);
+        break;
+
+    case FACTION_ID_RED:
+        unit = GetFreeUnit(FACTION_RED);
+        break;
+
+    case FACTION_ID_GREEN:
+        unit = GetFreeUnit(FACTION_GREEN);
+        break;
+    }
+
+    if (!unit)
+        return NULL;
+
+    ClearUnit(unit);
+    UnitInitFromDefinition(unit, info);
+    UnitLoadStatsFromChracter(unit, unit->pCharacterData);
+    UnitHideIfUnderRoof(unit);
+
+    if (info->autolevel) {
+        if (UNIT_FACTION(unit) == FACTION_BLUE) {
+            UnitAutolevelRealistic(unit);
+            UnitAutolevelWExp(unit, info);
+        } else {
+            UnitAutolevel(unit);
+            UnitAutolevelWExp(unit, info);
+            unit->supports[UNIT_SUPPORT_MAX_COUNT - 1] = info->pid_lead;
+        }
+    }
+
+    FixROMUnitStructPtr(unit);
+    UnitLoadSupports(unit);
+
+    if (UNIT_CATTRIBUTES(unit) & (0x80 << 0x14)) {
+        unit->state |= (0x80 << 0x5);
+    }
+
+    UnitCheckStatCaps(unit);
+
+    hp = unit->maxHP + GetItemHpBonus(GetUnitEquippedWeapon(unit));
+    unit->curHP = hp;
+    return unit;
+}
diff --git a/tools/install-agbcc.sh b/tools/install-agbcc.sh
old mode 100644
new mode 100755
diff --git a/tools/scripts/asm2casm.py b/tools/scripts/asm2casm.py
new file mode 100644
index 0000000..0f1d570
--- /dev/null
+++ b/tools/scripts/asm2casm.py
@@ -0,0 +1,15 @@
+
+import sys
+
+def main():
+	print('asm("\\')
+	print('\t.syntax unified\\n\\')
+
+	for line in sys.stdin:
+		print('{}\\n\\'.format(line[:-1]))
+
+	print('\t.syntax divided\\n\\')
+	print('");')
+
+if __name__ == '__main__':
+	main()
