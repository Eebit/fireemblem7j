	.include "macro.inc"
	.syntax unified

	thumb_func_start sub_080546F0
sub_080546F0: @ 0x080546F0
	push {r4, lr}
	adds r4, r0, #0
	ldrb r0, [r4, #0x12]
	bl sub_08054EBC
	cmp r0, #0
	beq _0805472C
	ldr r1, [r4, #0x20]
	ldr r0, _0805470C @ =0x08C0A5D8
	cmp r1, r0
	beq _0805472C
	movs r2, #0x3f
	b _08054718
	.align 2, 0
_0805470C: .4byte 0x08C0A5D8
_08054710:
	cmp r1, #6
	bne _08054718
	adds r0, #0xc
	str r0, [r4, #0x20]
_08054718:
	ldr r0, [r4, #0x20]
	adds r1, r2, #0
	ldrb r3, [r0, #3]
	ands r1, r3
	cmp r1, #0
	beq _08054728
	cmp r1, #5
	bne _08054710
_08054728:
	subs r0, #0xc
	str r0, [r4, #0x20]
_0805472C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start NewEkrChienCHR
NewEkrChienCHR: @ 0x08054734
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08054748 @ =0x08C0A610
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08054748: .4byte 0x08C0A610

	thumb_func_start EkrChienCHRMain
EkrChienCHRMain: @ 0x0805474C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl RegisterAISSheetGraphics
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start RegisterAISSheetGraphics
RegisterAISSheetGraphics: @ 0x08054764
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _08054790 @ =0x000003FF
	ldrh r0, [r5, #8]
	ands r4, r0
	lsls r4, r4, #5
	ldr r0, _08054794 @ =0x06010000
	adds r4, r4, r0
	ldr r0, [r5, #0x28]
	ldr r1, [r5, #0x2c]
	bl LZ77UnCompWram
	ldr r0, [r5, #0x2c]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r1, r4, #0
	bl RegisterDataMove
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08054790: .4byte 0x000003FF
_08054794: .4byte 0x06010000

	thumb_func_start sub_08054798
sub_08054798: @ 0x08054798
	adds r2, r0, #0
	ldr r0, _080547BC @ =0x0203E0C0
	lsls r1, r1, #1
	adds r1, r1, r0
	movs r3, #0
	ldrsh r0, [r1, r3]
	cmp r0, #0
	beq _080547B8
	movs r1, #0
	adds r3, r2, #0
	adds r3, #0x80
_080547AE:
	ldm r3!, {r0}
	stm r2!, {r0}
	adds r1, #1
	cmp r1, #7
	bls _080547AE
_080547B8:
	bx lr
	.align 2, 0
_080547BC: .4byte 0x0203E0C0

	thumb_func_start GetBanimPalette
GetBanimPalette: @ 0x080547C0
	adds r2, r0, #0
	cmp r1, #0
	bne _080547D0
	ldr r0, _080547CC @ =gpEkrBattleUnitLeft
	b _080547D2
	.align 2, 0
_080547CC: .4byte gpEkrBattleUnitLeft
_080547D0:
	ldr r0, _080547E8 @ =gpEkrBattleUnitRight
_080547D2:
	ldr r0, [r0]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #4]
	cmp r0, #0x19
	beq _080547FA
	cmp r0, #0x19
	bhi _080547EC
	cmp r0, #0x18
	beq _080547F6
	b _08054806
	.align 2, 0
_080547E8: .4byte gpEkrBattleUnitRight
_080547EC:
	cmp r0, #0x1a
	beq _080547FE
	cmp r0, #0x1b
	beq _08054802
	b _08054806
_080547F6:
	movs r0, #0x24
	b _08054808
_080547FA:
	movs r0, #0x26
	b _08054808
_080547FE:
	movs r0, #0x28
	b _08054808
_08054802:
	movs r0, #0x2a
	b _08054808
_08054806:
	adds r0, r2, #0
_08054808:
	bx lr
	.align 2, 0

	thumb_func_start UpdateBanimFrame
UpdateBanimFrame: @ 0x0805480C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	ldr r0, _080549DC @ =0x08E00008
	mov sb, r0
	ldr r1, _080549E0 @ =0x08FD8008
	mov sl, r1
	ldr r1, _080549E4 @ =gpImgSheet
	movs r0, #0
	str r0, [r1, #4]
	str r0, [r1]
	ldr r0, _080549E8 @ =0x0203DFE8
	movs r1, #0
	ldrsh r2, [r0, r1]
	mov r8, r2
	cmp r2, #1
	bne _080548C4
	ldr r0, _080549EC @ =0x0203E066
	movs r2, #0
	ldrsh r5, [r0, r2]
	ldr r0, _080549F0 @ =0x0203DFF8
	movs r1, #0
	ldrsh r7, [r0, r1]
	ldr r0, _080549F4 @ =0x0203DFF4
	movs r2, #0
	ldrsh r4, [r0, r2]
	lsls r0, r5, #5
	ldr r1, _080549DC @ =0x08E00008
	adds r6, r0, r1
	ldr r0, [r6, #0x10]
	ldr r1, _080549F8 @ =gBanimScrLeft
	bl LZ77UnCompWram
	ldr r1, _080549FC @ =gpBanimModesLeft
	ldr r0, [r6, #0xc]
	str r0, [r1]
	adds r0, r5, #0
	movs r1, #0
	bl GetBanimPalette
	lsls r0, r0, #5
	ldr r2, _080549DC @ =0x08E00008
	adds r0, r0, r2
	ldr r0, [r0, #0x1c]
	ldr r5, _08054A00 @ =0x02004088
	adds r1, r5, #0
	bl LZ77UnCompWram
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	beq _0805488E
	lsls r0, r4, #4
	add r0, sl
	ldr r0, [r0, #0xc]
	adds r1, r5, #0
	bl LZ77UnCompWram
	adds r0, r5, #0
	movs r1, #0
	bl sub_08054798
_0805488E:
	ldr r1, _08054A04 @ =0x02000054
	lsls r0, r7, #5
	adds r0, r0, r5
	str r0, [r1]
	ldr r4, _08054A08 @ =0x02022B40
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	ldr r0, _08054A0C @ =0x0203E080
	ldr r0, [r0]
	adds r4, #0x20
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
	ldr r0, [r6, #0x18]
	ldr r4, _08054A10 @ =0x020041C8
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r0, _08054A14 @ =0x000057F0
	adds r4, r4, r0
	mov r1, r8
	str r1, [r4]
_080548C4:
	ldr r0, _080549E8 @ =0x0203DFE8
	movs r1, #2
	ldrsh r2, [r0, r1]
	mov r8, r2
	cmp r2, #1
	bne _0805495E
	ldr r0, _080549EC @ =0x0203E066
	movs r2, #2
	ldrsh r5, [r0, r2]
	ldr r0, _080549F0 @ =0x0203DFF8
	movs r1, #2
	ldrsh r7, [r0, r1]
	ldr r0, _080549F4 @ =0x0203DFF4
	movs r2, #2
	ldrsh r4, [r0, r2]
	lsls r0, r5, #5
	mov r1, sb
	adds r6, r0, r1
	ldr r0, [r6, #0x10]
	ldr r1, _08054A18 @ =0x02011BC8
	bl LZ77UnCompWram
	ldr r1, _08054A1C @ =gpBanimModesRight
	ldr r0, [r6, #0xc]
	str r0, [r1]
	adds r0, r5, #0
	movs r1, #1
	bl GetBanimPalette
	lsls r0, r0, #5
	add r0, sb
	ldr r0, [r0, #0x1c]
	ldr r5, _08054A20 @ =0x02004128
	adds r1, r5, #0
	bl LZ77UnCompWram
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	beq _08054928
	lsls r0, r4, #4
	add r0, sl
	ldr r0, [r0, #0xc]
	adds r1, r5, #0
	bl LZ77UnCompWram
	adds r0, r5, #0
	movs r1, #1
	bl sub_08054798
_08054928:
	ldr r1, _08054A04 @ =0x02000054
	lsls r0, r7, #5
	adds r0, r0, r5
	str r0, [r1, #4]
	ldr r4, _08054A24 @ =0x02022B80
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	ldr r0, _08054A0C @ =0x0203E080
	ldr r0, [r0, #4]
	adds r4, #0x20
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
	ldr r0, [r6, #0x14]
	ldr r4, _08054A28 @ =0x020099C8
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r2, _08054A14 @ =0x000057F0
	adds r4, r4, r2
	mov r0, r8
	str r0, [r4]
_0805495E:
	ldr r6, _08054A2C @ =gpEkrTriangleUnits
	ldr r2, [r6]
	cmp r2, #0
	beq _080549CC
	ldr r0, [r2, #4]
	ldr r1, [r0, #0x34]
	adds r0, r2, #0
	movs r2, #0
	mov r3, sp
	bl sub_08053040
	lsls r0, r0, #0x10
	ldr r5, _08054A0C @ =0x0203E080
	lsrs r0, r0, #0xb
	add r0, sb
	ldr r0, [r0, #0x1c]
	str r0, [r5]
	ldr r0, [r6]
	ldr r1, [sp]
	bl sub_08053A14
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	movs r7, #1
	rsbs r7, r7, #0
	cmp r4, r7
	beq _0805499C
	lsls r0, r4, #4
	add r0, sl
	ldr r0, [r0, #0xc]
	str r0, [r5]
_0805499C:
	ldr r0, [r6, #4]
	ldr r1, [r0, #4]
	ldr r1, [r1, #0x34]
	movs r2, #0
	mov r3, sp
	bl sub_08053040
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xb
	add r0, sb
	ldr r0, [r0, #0x1c]
	str r0, [r5, #4]
	ldr r0, [r6, #4]
	ldr r1, [sp]
	bl sub_08053A14
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, r7
	beq _080549CC
	lsls r0, r4, #4
	add r0, sl
	ldr r0, [r0, #0xc]
	str r0, [r5, #4]
_080549CC:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080549DC: .4byte 0x08E00008
_080549E0: .4byte 0x08FD8008
_080549E4: .4byte gpImgSheet
_080549E8: .4byte 0x0203DFE8
_080549EC: .4byte 0x0203E066
_080549F0: .4byte 0x0203DFF8
_080549F4: .4byte 0x0203DFF4
_080549F8: .4byte gBanimScrLeft
_080549FC: .4byte gpBanimModesLeft
_08054A00: .4byte 0x02004088
_08054A04: .4byte 0x02000054
_08054A08: .4byte 0x02022B40
_08054A0C: .4byte 0x0203E080
_08054A10: .4byte 0x020041C8
_08054A14: .4byte 0x000057F0
_08054A18: .4byte 0x02011BC8
_08054A1C: .4byte gpBanimModesRight
_08054A20: .4byte 0x02004128
_08054A24: .4byte 0x02022B80
_08054A28: .4byte 0x020099C8
_08054A2C: .4byte gpEkrTriangleUnits

	thumb_func_start InitBothAIS
InitBothAIS: @ 0x08054A30
	push {lr}
	ldr r0, _08054A48 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #4
	bhi _08054AAA
	lsls r0, r0, #2
	ldr r1, _08054A4C @ =_08054A50
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08054A48: .4byte gEkrDistanceType
_08054A4C: .4byte _08054A50
_08054A50: @ jump table
	.4byte _08054A64 @ case 0
	.4byte _08054A6E @ case 1
	.4byte _08054A78 @ case 2
	.4byte _08054A64 @ case 3
	.4byte _08054A64 @ case 4
_08054A64:
	movs r0, #6
	movs r1, #6
	bl BattleAnimationAISInit
	b _08054AAA
_08054A6E:
	movs r0, #8
	movs r1, #8
	bl BattleAnimationAISInit
	b _08054AAA
_08054A78:
	movs r0, #8
	movs r1, #8
	bl BattleAnimationAISInit
	bl sub_0804DC18
	cmp r0, #0
	bne _08054A9C
	ldr r1, _08054A98 @ =gAnims
	ldr r2, [r1, #8]
	movs r0, #0xc0
	lsls r0, r0, #1
	strh r0, [r2, #2]
	ldr r1, [r1, #0xc]
	b _08054AA8
	.align 2, 0
_08054A98: .4byte gAnims
_08054A9C:
	ldr r1, _08054AB8 @ =gAnims
	ldr r2, [r1]
	movs r0, #0xc0
	lsls r0, r0, #1
	strh r0, [r2, #2]
	ldr r1, [r1, #4]
_08054AA8:
	strh r0, [r1, #2]
_08054AAA:
	ldr r1, _08054ABC @ =0x0203E036
	movs r0, #0
	strh r0, [r1]
	strh r0, [r1, #2]
	pop {r0}
	bx r0
	.align 2, 0
_08054AB8: .4byte gAnims
_08054ABC: .4byte 0x0203E036

	thumb_func_start BattleAnimationAISInit
BattleAnimationAISInit: @ 0x08054AC0
	push {r4, r5, r6, lr}
	adds r2, r0, #0
	adds r6, r1, #0
	ldr r4, _08054B0C @ =gAnims
	movs r0, #0
	str r0, [r4]
	str r0, [r4, #4]
	str r0, [r4, #8]
	str r0, [r4, #0xc]
	ldr r5, _08054B10 @ =0x0203DFE8
	ldrh r0, [r5]
	cmp r0, #1
	bne _08054AE0
	adds r0, r2, #0
	bl sub_08054B18
_08054AE0:
	ldrh r5, [r5, #2]
	cmp r5, #1
	bne _08054AEC
	adds r0, r6, #0
	bl InitRightAIS
_08054AEC:
	ldr r0, _08054B14 @ =gEkrDistanceType
	ldrh r0, [r0]
	cmp r0, #4
	bne _08054B06
	ldr r1, [r4]
	movs r2, #2
	ldrh r0, [r1]
	orrs r0, r2
	strh r0, [r1]
	ldr r1, [r4, #4]
	ldrh r0, [r1]
	orrs r0, r2
	strh r0, [r1]
_08054B06:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08054B0C: .4byte gAnims
_08054B10: .4byte 0x0203DFE8
_08054B14: .4byte gEkrDistanceType

	thumb_func_start sub_08054B18
sub_08054B18: @ 0x08054B18
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	ldr r2, _08054C20 @ =gBanimRoundScripts
	lsls r1, r7, #2
	adds r0, r1, r2
	ldrb r5, [r0]
	adds r0, r1, #1
	adds r0, r0, r2
	ldrb r6, [r0]
	adds r0, r1, #2
	adds r0, r0, r2
	ldrb r0, [r0]
	mov r8, r0
	adds r1, #3
	adds r1, r1, r2
	ldrb r1, [r1]
	mov sb, r1
	ldr r0, _08054C24 @ =0x081DE20D
	ldr r1, _08054C28 @ =gEkrDistanceType
	movs r2, #0
	ldrsh r1, [r1, r2]
	adds r0, r1, r0
	ldrb r4, [r0]
	ldr r3, _08054C2C @ =0x02000030
	ldr r0, _08054C30 @ =0x081DE218
	lsls r1, r1, #1
	adds r1, r1, r0
	ldrh r1, [r1]
	rsbs r1, r1, #0
	movs r2, #0
	strh r1, [r3]
	ldr r0, _08054C34 @ =0x02000034
	strh r2, [r0]
	ldr r0, _08054C38 @ =0x02000028
	adds r1, r1, r4
	strh r1, [r0]
	ldr r1, _08054C3C @ =0x0200002C
	movs r0, #0x58
	strh r0, [r1]
	ldr r0, _08054C40 @ =gpBanimModesLeft
	ldr r1, [r0]
	lsls r0, r5, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, _08054C44 @ =gBanimScrLeft
	adds r0, r1, r0
	cmp r5, #0xff
	bne _08054B80
	ldr r0, _08054C48 @ =0x08C0A5D8
_08054B80:
	adds r1, r6, #0
	bl AnimCreate
	adds r2, r0, #0
	ldr r1, _08054C38 @ =0x02000028
	ldr r0, _08054C4C @ =0x0201FB00
	ldrh r1, [r1]
	ldrh r0, [r0]
	subs r0, r1, r0
	movs r1, #0
	strh r0, [r2, #2]
	ldr r0, _08054C3C @ =0x0200002C
	ldrh r0, [r0]
	strh r0, [r2, #4]
	movs r0, #0xf4
	lsls r0, r0, #7
	strh r0, [r2, #8]
	movs r3, #0x80
	lsls r3, r3, #3
	adds r0, r3, #0
	ldrh r3, [r2, #0xc]
	orrs r0, r3
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strb r7, [r2, #0x12]
	ldr r0, _08054C50 @ =0x02000088
	str r0, [r2, #0x2c]
	ldr r0, _08054C54 @ =0x020041C8
	str r0, [r2, #0x30]
	ldr r0, _08054C58 @ =gAnims
	str r2, [r0]
	ldr r0, _08054C40 @ =gpBanimModesLeft
	ldr r1, [r0]
	mov r2, r8
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, _08054C44 @ =gBanimScrLeft
	adds r0, r1, r0
	cmp r2, #0xff
	bne _08054BD4
	ldr r0, _08054C48 @ =0x08C0A5D8
_08054BD4:
	mov r1, sb
	bl AnimCreate
	adds r2, r0, #0
	ldr r1, _08054C38 @ =0x02000028
	ldr r0, _08054C4C @ =0x0201FB00
	ldrh r1, [r1]
	ldrh r0, [r0]
	subs r0, r1, r0
	movs r1, #0
	strh r0, [r2, #2]
	ldr r0, _08054C3C @ =0x0200002C
	ldrh r0, [r0]
	strh r0, [r2, #4]
	movs r0, #0xf4
	lsls r0, r0, #7
	strh r0, [r2, #8]
	movs r3, #0xa0
	lsls r3, r3, #3
	adds r0, r3, #0
	ldrh r3, [r2, #0xc]
	orrs r0, r3
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strb r7, [r2, #0x12]
	ldr r0, _08054C50 @ =0x02000088
	str r0, [r2, #0x2c]
	ldr r0, _08054C54 @ =0x020041C8
	str r0, [r2, #0x30]
	ldr r0, _08054C58 @ =gAnims
	str r2, [r0, #4]
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08054C20: .4byte gBanimRoundScripts
_08054C24: .4byte 0x081DE20D
_08054C28: .4byte gEkrDistanceType
_08054C2C: .4byte 0x02000030
_08054C30: .4byte 0x081DE218
_08054C34: .4byte 0x02000034
_08054C38: .4byte 0x02000028
_08054C3C: .4byte 0x0200002C
_08054C40: .4byte gpBanimModesLeft
_08054C44: .4byte gBanimScrLeft
_08054C48: .4byte 0x08C0A5D8
_08054C4C: .4byte 0x0201FB00
_08054C50: .4byte 0x02000088
_08054C54: .4byte 0x020041C8
_08054C58: .4byte gAnims

	thumb_func_start InitRightAIS
InitRightAIS: @ 0x08054C5C
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r2, _08054D44 @ =gBanimRoundScripts
	lsls r1, r5, #2
	adds r0, r1, r2
	ldrb r3, [r0]
	adds r0, r1, #1
	adds r0, r0, r2
	ldrb r4, [r0]
	adds r0, r1, #2
	adds r0, r0, r2
	ldrb r6, [r0]
	adds r1, #3
	adds r1, r1, r2
	ldrb r7, [r1]
	ldr r1, _08054D48 @ =0x081DE212
	ldr r0, _08054D4C @ =gEkrDistanceType
	movs r2, #0
	ldrsh r0, [r0, r2]
	adds r0, r0, r1
	ldrb r2, [r0]
	ldr r0, _08054D50 @ =0x02000030
	movs r1, #0
	strh r1, [r0, #2]
	ldr r0, _08054D54 @ =0x02000034
	strh r1, [r0, #2]
	ldr r0, _08054D58 @ =0x02000028
	strh r2, [r0, #2]
	ldr r1, _08054D5C @ =0x0200002C
	movs r0, #0x58
	strh r0, [r1, #2]
	ldr r0, _08054D60 @ =gpBanimModesRight
	ldr r1, [r0]
	lsls r0, r3, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, _08054D64 @ =0x02011BC8
	adds r0, r1, r0
	cmp r3, #0xff
	bne _08054CAE
	ldr r0, _08054D68 @ =0x08C0A5D8
_08054CAE:
	adds r1, r4, #0
	bl AnimCreate
	adds r2, r0, #0
	ldr r1, _08054D58 @ =0x02000028
	ldr r0, _08054D6C @ =0x0201FB00
	ldrh r1, [r1, #2]
	ldrh r0, [r0]
	subs r0, r1, r0
	movs r1, #0
	strh r0, [r2, #2]
	ldr r0, _08054D5C @ =0x0200002C
	ldrh r0, [r0, #2]
	strh r0, [r2, #4]
	movs r0, #0x9b
	lsls r0, r0, #8
	strh r0, [r2, #8]
	movs r3, #0xc0
	lsls r3, r3, #3
	adds r0, r3, #0
	ldrh r3, [r2, #0xc]
	orrs r0, r3
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strb r5, [r2, #0x12]
	ldr r0, _08054D70 @ =0x02002088
	str r0, [r2, #0x2c]
	ldr r0, _08054D74 @ =0x020099C8
	str r0, [r2, #0x30]
	ldr r0, _08054D78 @ =gAnims
	str r2, [r0, #8]
	ldr r0, _08054D60 @ =gpBanimModesRight
	ldr r1, [r0]
	lsls r0, r6, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, _08054D64 @ =0x02011BC8
	adds r0, r1, r0
	cmp r6, #0xff
	bne _08054D00
	ldr r0, _08054D68 @ =0x08C0A5D8
_08054D00:
	adds r1, r7, #0
	bl AnimCreate
	adds r2, r0, #0
	ldr r1, _08054D58 @ =0x02000028
	ldr r0, _08054D6C @ =0x0201FB00
	ldrh r1, [r1, #2]
	ldrh r0, [r0]
	subs r0, r1, r0
	movs r1, #0
	strh r0, [r2, #2]
	ldr r0, _08054D5C @ =0x0200002C
	ldrh r0, [r0, #2]
	strh r0, [r2, #4]
	movs r0, #0x9b
	lsls r0, r0, #8
	strh r0, [r2, #8]
	movs r3, #0xe0
	lsls r3, r3, #3
	adds r0, r3, #0
	ldrh r3, [r2, #0xc]
	orrs r0, r3
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strb r5, [r2, #0x12]
	ldr r0, _08054D70 @ =0x02002088
	str r0, [r2, #0x2c]
	ldr r0, _08054D74 @ =0x020099C8
	str r0, [r2, #0x30]
	ldr r0, _08054D78 @ =gAnims
	str r2, [r0, #0xc]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08054D44: .4byte gBanimRoundScripts
_08054D48: .4byte 0x081DE212
_08054D4C: .4byte gEkrDistanceType
_08054D50: .4byte 0x02000030
_08054D54: .4byte 0x02000034
_08054D58: .4byte 0x02000028
_08054D5C: .4byte 0x0200002C
_08054D60: .4byte gpBanimModesRight
_08054D64: .4byte 0x02011BC8
_08054D68: .4byte 0x08C0A5D8
_08054D6C: .4byte 0x0201FB00
_08054D70: .4byte 0x02002088
_08054D74: .4byte 0x020099C8
_08054D78: .4byte gAnims

	thumb_func_start SwitchAISFrameDataFromBARoundType
SwitchAISFrameDataFromBARoundType: @ 0x08054D7C
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r6, r1, #0
	bl GetAISLayerId
	cmp r0, #0
	bne _08054D9C
	ldr r0, _08054D98 @ =gBanimRoundScripts
	lsls r1, r6, #2
	adds r2, r1, r0
	ldrb r5, [r2]
	adds r1, #1
	adds r1, r1, r0
	b _08054DAA
	.align 2, 0
_08054D98: .4byte gBanimRoundScripts
_08054D9C:
	ldr r2, _08054DC8 @ =gBanimRoundScripts
	lsls r1, r6, #2
	adds r0, r1, #2
	adds r0, r0, r2
	ldrb r5, [r0]
	adds r1, #3
	adds r1, r1, r2
_08054DAA:
	ldrb r7, [r1]
	cmp r5, #0xff
	beq _08054DF0
	adds r0, r4, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _08054DD4
	ldr r0, _08054DCC @ =gpBanimModesLeft
	ldr r1, [r0]
	lsls r0, r5, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, _08054DD0 @ =gBanimScrLeft
	b _08054DE0
	.align 2, 0
_08054DC8: .4byte gBanimRoundScripts
_08054DCC: .4byte gpBanimModesLeft
_08054DD0: .4byte gBanimScrLeft
_08054DD4:
	ldr r0, _08054DE8 @ =gpBanimModesRight
	ldr r1, [r0]
	lsls r0, r5, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, _08054DEC @ =0x02011BC8
_08054DE0:
	adds r1, r1, r0
	str r1, [r4, #0x24]
	str r1, [r4, #0x20]
	b _08054DFA
	.align 2, 0
_08054DE8: .4byte gpBanimModesRight
_08054DEC: .4byte 0x02011BC8
_08054DF0:
	ldr r0, _08054E40 @ =0x08C0A5D8
	str r0, [r4, #0x24]
	str r0, [r4, #0x20]
	movs r0, #0
	strh r0, [r4, #0x10]
_08054DFA:
	movs r3, #0
	movs r2, #0
	strh r7, [r4, #0xa]
	ldr r0, _08054E44 @ =0x0000F3FF
	ldrh r1, [r4, #8]
	ands r0, r1
	movs r5, #0x80
	lsls r5, r5, #4
	adds r1, r5, #0
	orrs r0, r1
	strh r0, [r4, #8]
	strh r2, [r4, #6]
	movs r0, #0xe0
	lsls r0, r0, #3
	ldrh r1, [r4, #0xc]
	ands r0, r1
	strh r0, [r4, #0xc]
	strb r6, [r4, #0x12]
	strb r3, [r4, #0x14]
	adds r0, r4, #0
	bl GetAISSubjectId
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #2
	subs r1, r1, r0
	lsls r1, r1, #0xb
	ldr r0, _08054E48 @ =0x020041C8
	adds r1, r1, r0
	str r1, [r4, #0x30]
	bl AnimSort
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08054E40: .4byte 0x08C0A5D8
_08054E44: .4byte 0x0000F3FF
_08054E48: .4byte 0x020041C8

	thumb_func_start GetAISLayerId
GetAISLayerId: @ 0x08054E4C
	movs r1, #0x80
	lsls r1, r1, #1
	ldrh r0, [r0, #0xc]
	ands r1, r0
	cmp r1, #0
	beq _08054E5C
	movs r0, #1
	b _08054E5E
_08054E5C:
	movs r0, #0
_08054E5E:
	bx lr

	thumb_func_start GetAISSubjectId
GetAISSubjectId: @ 0x08054E60
	movs r1, #0x80
	lsls r1, r1, #2
	ldrh r0, [r0, #0xc]
	ands r1, r0
	cmp r1, #0
	beq _08054E70
	movs r0, #1
	b _08054E72
_08054E70:
	movs r0, #0
_08054E72:
	bx lr

	thumb_func_start EkrCheckHitOrMiss
EkrCheckHitOrMiss: @ 0x08054E74
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #9
	bhi _08054EB8
	lsls r0, r0, #2
	ldr r1, _08054E88 @ =_08054E8C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08054E88: .4byte _08054E8C
_08054E8C: @ jump table
	.4byte _08054EB8 @ case 0
	.4byte _08054EB8 @ case 1
	.4byte _08054EB8 @ case 2
	.4byte _08054EB8 @ case 3
	.4byte _08054EB4 @ case 4
	.4byte _08054EB4 @ case 5
	.4byte _08054EB8 @ case 6
	.4byte _08054EB8 @ case 7
	.4byte _08054EB8 @ case 8
	.4byte _08054EB8 @ case 9
_08054EB4:
	movs r0, #1
	b _08054EBA
_08054EB8:
	movs r0, #0
_08054EBA:
	bx lr

	thumb_func_start sub_08054EBC
sub_08054EBC: @ 0x08054EBC
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #9
	bhi _08054F00
	lsls r0, r0, #2
	ldr r1, _08054ED0 @ =_08054ED4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08054ED0: .4byte _08054ED4
_08054ED4: @ jump table
	.4byte _08054F00 @ case 0
	.4byte _08054F00 @ case 1
	.4byte _08054F00 @ case 2
	.4byte _08054F00 @ case 3
	.4byte _08054F00 @ case 4
	.4byte _08054F00 @ case 5
	.4byte _08054EFC @ case 6
	.4byte _08054EFC @ case 7
	.4byte _08054EFC @ case 8
	.4byte _08054F00 @ case 9
_08054EFC:
	movs r0, #1
	b _08054F02
_08054F00:
	movs r0, #0
_08054F02:
	bx lr

	thumb_func_start sub_08054F04
sub_08054F04: @ 0x08054F04
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #9
	bhi _08054F48
	lsls r0, r0, #2
	ldr r1, _08054F18 @ =_08054F1C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08054F18: .4byte _08054F1C
_08054F1C: @ jump table
	.4byte _08054F44 @ case 0
	.4byte _08054F44 @ case 1
	.4byte _08054F44 @ case 2
	.4byte _08054F44 @ case 3
	.4byte _08054F48 @ case 4
	.4byte _08054F48 @ case 5
	.4byte _08054F48 @ case 6
	.4byte _08054F48 @ case 7
	.4byte _08054F48 @ case 8
	.4byte _08054F44 @ case 9
_08054F44:
	movs r0, #1
	b _08054F4A
_08054F48:
	movs r0, #0
_08054F4A:
	bx lr

	thumb_func_start sub_08054F4C
sub_08054F4C: @ 0x08054F4C
	ldrb r0, [r0, #0x12]
	cmp r0, #9
	bhi _08054F8C
	lsls r0, r0, #2
	ldr r1, _08054F5C @ =_08054F60
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08054F5C: .4byte _08054F60
_08054F60: @ jump table
	.4byte _08054F8C @ case 0
	.4byte _08054F88 @ case 1
	.4byte _08054F8C @ case 2
	.4byte _08054F88 @ case 3
	.4byte _08054F8C @ case 4
	.4byte _08054F8C @ case 5
	.4byte _08054F8C @ case 6
	.4byte _08054F8C @ case 7
	.4byte _08054F8C @ case 8
	.4byte _08054F8C @ case 9
_08054F88:
	movs r0, #1
	b _08054F8E
_08054F8C:
	movs r0, #0
_08054F8E:
	bx lr

	thumb_func_start GetCoreAIStruct
GetCoreAIStruct: @ 0x08054F90
	push {r4, lr}
	ldr r4, _08054FA8 @ =gAnims
	bl GetAISSubjectId
	movs r1, #1
	eors r1, r0
	lsls r1, r1, #3
	adds r1, r1, r4
	ldr r0, [r1]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08054FA8: .4byte gAnims

	thumb_func_start sub_08054FAC
sub_08054FAC: @ 0x08054FAC
	push {r4, lr}
	adds r4, r0, #0
	bl GetAISSubjectId
	adds r1, r0, #0
	ldrh r0, [r4, #0xe]
	subs r0, #1
	lsls r0, r0, #1
	adds r0, r0, r1
	bl GetBattleAnimRoundType
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start GetSomeAnimIndex
GetSomeAnimIndex: @ 0x08054FCC
	push {r4, lr}
	adds r4, r0, #0
	bl GetAISSubjectId
	adds r1, r0, #0
	ldrh r4, [r4, #0xe]
	lsls r0, r4, #1
	adds r0, r0, r1
	bl GetBattleAnimRoundType
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start GetSomeAISRelatedIndexMaybe
GetSomeAISRelatedIndexMaybe: @ 0x08054FEC
	push {r4, lr}
	adds r4, r0, #0
	bl GetAISSubjectId
	adds r2, r0, #0
	ldrh r0, [r4, #0xe]
	subs r0, #1
	lsls r0, r0, #1
	movs r1, #1
	eors r1, r2
	adds r0, r0, r1
	bl GetBattleAnimRoundType
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_08055010
sub_08055010: @ 0x08055010
	push {r4, lr}
	adds r4, r0, #0
	bl GetAISSubjectId
	adds r2, r0, #0
	ldrh r4, [r4, #0xe]
	lsls r0, r4, #1
	movs r1, #1
	eors r1, r2
	adds r0, r0, r1
	bl GetBattleAnimRoundType
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08055034
sub_08055034: @ 0x08055034
	cmp r0, #0
	bne _0805504C
	ldr r2, _08055048 @ =gAnims
	ldr r3, [r2]
	movs r1, #2
	ldrh r0, [r3]
	orrs r0, r1
	strh r0, [r3]
	ldr r3, [r2, #4]
	b _0805505E
	.align 2, 0
_08055048: .4byte gAnims
_0805504C:
	cmp r0, #1
	bne _08055064
	ldr r2, _08055068 @ =gAnims
	ldr r3, [r2, #8]
	movs r1, #2
	ldrh r0, [r3]
	orrs r0, r1
	strh r0, [r3]
	ldr r3, [r2, #0xc]
_0805505E:
	ldrh r0, [r3]
	orrs r0, r1
	strh r0, [r3]
_08055064:
	bx lr
	.align 2, 0
_08055068: .4byte gAnims

	thumb_func_start sub_0805506C
sub_0805506C: @ 0x0805506C
	push {r4, lr}
	cmp r0, #0
	bne _0805508C
	ldr r2, _08055084 @ =gAnims
	ldr r3, [r2]
	ldr r1, _08055088 @ =0x0000FFFD
	adds r0, r1, #0
	ldrh r4, [r3]
	ands r0, r4
	strh r0, [r3]
	ldr r3, [r2, #4]
	b _080550A0
	.align 2, 0
_08055084: .4byte gAnims
_08055088: .4byte 0x0000FFFD
_0805508C:
	cmp r0, #1
	bne _080550A6
	ldr r2, _080550AC @ =gAnims
	ldr r3, [r2, #8]
	ldr r1, _080550B0 @ =0x0000FFFD
	adds r0, r1, #0
	ldrh r4, [r3]
	ands r0, r4
	strh r0, [r3]
	ldr r3, [r2, #0xc]
_080550A0:
	ldrh r0, [r3]
	ands r1, r0
	strh r1, [r3]
_080550A6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080550AC: .4byte gAnims
_080550B0: .4byte 0x0000FFFD

	thumb_func_start sub_080550B4
sub_080550B4: @ 0x080550B4
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	cmp r4, #0
	bne _080550C0
	b _08055246
_080550C0:
	movs r5, #0xf0
	lsls r5, r5, #8
	ldrh r0, [r4, #0xc]
	ands r5, r0
	cmp r5, #0
	bne _080550CE
	b _08055246
_080550CE:
	movs r0, #0x80
	lsls r0, r0, #5
	ands r0, r5
	cmp r0, #0
	bne _080550DA
	b _08055208
_080550DA:
	ldrb r0, [r4, #0x14]
	cmp r0, #0
	bne _080550E2
	b _080551FE
_080550E2:
	ldrb r1, [r4, #0x14]
	adds r0, r1, r4
	ldrb r0, [r0, #0x14]
	cmp r0, #0x32
	bls _080550EE
	b _080551F6
_080550EE:
	lsls r0, r0, #2
	ldr r1, _080550F8 @ =_080550FC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080550F8: .4byte _080550FC
_080550FC: @ jump table
	.4byte _080551F6 @ case 0
	.4byte _080551C8 @ case 1
	.4byte _080551C8 @ case 2
	.4byte _080551E0 @ case 3
	.4byte _080551E0 @ case 4
	.4byte _080551D0 @ case 5
	.4byte _080551F6 @ case 6
	.4byte _080551F6 @ case 7
	.4byte _080551F6 @ case 8
	.4byte _080551F6 @ case 9
	.4byte _080551F6 @ case 10
	.4byte _080551F6 @ case 11
	.4byte _080551F6 @ case 12
	.4byte _080551E8 @ case 13
	.4byte _080551F6 @ case 14
	.4byte _080551F6 @ case 15
	.4byte _080551F6 @ case 16
	.4byte _080551F6 @ case 17
	.4byte _080551F6 @ case 18
	.4byte _080551F6 @ case 19
	.4byte _080551F6 @ case 20
	.4byte _080551F6 @ case 21
	.4byte _080551F6 @ case 22
	.4byte _080551F6 @ case 23
	.4byte _080551F0 @ case 24
	.4byte _080551F6 @ case 25
	.4byte _080551F6 @ case 26
	.4byte _080551F6 @ case 27
	.4byte _080551F6 @ case 28
	.4byte _080551F6 @ case 29
	.4byte _080551F6 @ case 30
	.4byte _080551F6 @ case 31
	.4byte _080551F6 @ case 32
	.4byte _080551F6 @ case 33
	.4byte _080551F6 @ case 34
	.4byte _080551F6 @ case 35
	.4byte _080551F6 @ case 36
	.4byte _080551F6 @ case 37
	.4byte _080551F6 @ case 38
	.4byte _080551F6 @ case 39
	.4byte _080551F6 @ case 40
	.4byte _080551F6 @ case 41
	.4byte _080551F6 @ case 42
	.4byte _080551F6 @ case 43
	.4byte _080551F6 @ case 44
	.4byte _080551F6 @ case 45
	.4byte _080551F6 @ case 46
	.4byte _080551F6 @ case 47
	.4byte _080551F6 @ case 48
	.4byte _080551F6 @ case 49
	.4byte _080551F6 @ case 50
_080551C8:
	adds r0, r4, #0
	bl sub_08055250
	b _080551F6
_080551D0:
	adds r0, r4, #0
	bl GetAISLayerId
	cmp r0, #0
	bne _080551E0
	adds r0, r4, #0
	bl sub_08064A2C
_080551E0:
	ldr r0, [r4, #0x20]
	adds r0, #4
	str r0, [r4, #0x20]
	b _080551F6
_080551E8:
	adds r0, r4, #0
	bl sub_08055274
	b _080551F6
_080551F0:
	adds r0, r4, #0
	bl sub_08055250
_080551F6:
	ldrb r0, [r4, #0x14]
	subs r0, #1
	strb r0, [r4, #0x14]
	b _080550DA
_080551FE:
	movs r0, #0xe7
	lsls r0, r0, #8
	ldrh r1, [r4, #0xc]
	ands r0, r1
	strh r0, [r4, #0xc]
_08055208:
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r5
	cmp r0, #0
	beq _08055238
	adds r0, r4, #0
	bl GetAISLayerId
	cmp r0, #0
	bne _0805522E
	ldr r1, [r6, #0x2c]
	ldr r0, [r4, #0x28]
	cmp r1, r0
	beq _0805522E
	adds r0, r4, #0
	bl RegisterAISSheetGraphics
	ldr r0, [r4, #0x28]
	str r0, [r6, #0x2c]
_0805522E:
	movs r0, #0xd7
	lsls r0, r0, #8
	ldrh r1, [r4, #0xc]
	ands r0, r1
	strh r0, [r4, #0xc]
_08055238:
	movs r0, #0x80
	lsls r0, r0, #7
	ands r5, r0
	cmp r5, #0
	beq _08055246
	ldr r0, _0805524C @ =0x0000FFFF
	strh r0, [r4, #0xe]
_08055246:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805524C: .4byte 0x0000FFFF

	thumb_func_start sub_08055250
sub_08055250: @ 0x08055250
	adds r1, r0, #0
	ldr r0, _08055270 @ =0x0000FFFE
	strh r0, [r1, #0xe]
	movs r0, #8
	ldrh r2, [r1, #0x10]
	ands r0, r2
	cmp r0, #0
	beq _0805526C
	strh r0, [r1, #0x10]
	movs r0, #0
	strh r0, [r1, #0xe]
	ldr r0, [r1, #0x20]
	adds r0, #4
	str r0, [r1, #0x20]
_0805526C:
	bx lr
	.align 2, 0
_08055270: .4byte 0x0000FFFE

	thumb_func_start sub_08055274
sub_08055274: @ 0x08055274
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	ldr r6, [r7, #0x44]
	bl GetAISLayerId
	cmp r0, #0
	bne _080552C6
	ldr r3, _080552CC @ =gBanimRoundScripts
	movs r1, #6
	ldrsh r0, [r6, r1]
	lsls r0, r0, #5
	ldr r1, _080552D0 @ =0x08E00008
	adds r0, r0, r1
	ldr r1, [r0, #0xc]
	ldr r2, [r6, #0x14]
	ldr r4, [r6, #0x18]
	ldr r5, [r6, #0x28]
	ldrb r3, [r3, #0x18]
	lsls r0, r3, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r1, r5, r0
	ldr r0, [r1, #4]
	str r0, [r2, #0x28]
	ldr r5, [r2, #0x30]
	ldr r0, [r1, #8]
	adds r5, r5, r0
	str r5, [r2, #0x3c]
	ldr r5, [r4, #0x30]
	ldr r0, _080552D4 @ =0x000057F0
	adds r5, r5, r0
	str r5, [r4, #0x3c]
	ldr r1, [r6, #0x2c]
	ldr r0, [r7, #0x28]
	cmp r1, r0
	beq _080552C6
	adds r0, r7, #0
	bl NewEkrChienCHR
	ldr r0, [r7, #0x28]
	str r0, [r6, #0x2c]
_080552C6:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080552CC: .4byte gBanimRoundScripts
_080552D0: .4byte 0x08E00008
_080552D4: .4byte 0x000057F0

	thumb_func_start sub_080552D8
sub_080552D8: @ 0x080552D8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, _08055360 @ =0x08E00008
	mov sb, r0
	ldr r2, _08055364 @ =gBanimRoundScripts
	ldrh r3, [r5, #0xa]
	lsls r1, r3, #2
	adds r0, r1, r2
	ldrb r4, [r0]
	adds r0, r1, #1
	adds r0, r0, r2
	ldrb r0, [r0]
	mov r8, r0
	adds r0, r1, #2
	adds r0, r0, r2
	ldrb r6, [r0]
	adds r1, #3
	adds r1, r1, r2
	ldrb r1, [r1]
	str r1, [sp]
	movs r1, #6
	ldrsh r0, [r5, r1]
	lsls r0, r0, #5
	add r0, sb
	ldr r0, [r0, #0x10]
	ldr r1, [r5, #0x28]
	bl LZ77UnCompWram
	movs r2, #6
	ldrsh r0, [r5, r2]
	lsls r0, r0, #5
	mov r3, sb
	adds r1, r0, r3
	ldr r2, [r1, #0xc]
	ldr r3, [r5, #0x28]
	ldr r7, _08055368 @ =0x08C0A5D8
	cmp r4, #0xff
	beq _08055336
	lsls r0, r4, #2
	adds r0, r0, r2
	ldr r0, [r0]
	adds r7, r3, r0
_08055336:
	ldr r0, _08055368 @ =0x08C0A5D8
	mov sl, r0
	cmp r6, #0xff
	beq _08055348
	lsls r0, r6, #2
	adds r0, r0, r2
	ldr r0, [r0]
	adds r3, r3, r0
	mov sl, r3
_08055348:
	ldrh r0, [r5, #0xc]
	cmp r0, #0
	bne _08055370
	ldr r4, [r5, #0x24]
	ldr r0, [r1, #0x18]
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r2, _0805536C @ =0x000057F0
	adds r1, r4, r2
	b _0805537E
	.align 2, 0
_08055360: .4byte 0x08E00008
_08055364: .4byte gBanimRoundScripts
_08055368: .4byte 0x08C0A5D8
_0805536C: .4byte 0x000057F0
_08055370:
	ldr r4, [r5, #0x24]
	ldr r0, [r1, #0x14]
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r3, _08055468 @ =0x000057F0
	adds r1, r4, r3
_0805537E:
	movs r0, #1
	str r0, [r1]
	mov r1, r8
	adds r0, r7, #0
	bl AnimCreate
	adds r2, r0, #0
	ldr r0, [r5, #0x24]
	str r0, [r2, #0x30]
	ldrh r0, [r5, #2]
	movs r6, #0
	strh r0, [r2, #2]
	ldrh r0, [r5, #4]
	strh r0, [r2, #4]
	ldrh r1, [r5, #0x10]
	lsls r0, r1, #0xc
	movs r3, #0x80
	lsls r3, r3, #4
	adds r4, r3, #0
	orrs r0, r4
	ldrh r1, [r5, #0xe]
	orrs r0, r1
	strh r0, [r2, #8]
	ldrh r3, [r5, #0xc]
	lsls r0, r3, #9
	movs r3, #0x80
	lsls r3, r3, #3
	adds r1, r3, #0
	orrs r0, r1
	ldrh r1, [r2, #0xc]
	orrs r0, r1
	strh r0, [r2, #0xc]
	strh r6, [r2, #0xe]
	ldrh r0, [r5, #0xa]
	strb r0, [r2, #0x12]
	ldr r0, [r5, #0x1c]
	str r0, [r2, #0x2c]
	str r2, [r5, #0x14]
	str r5, [r2, #0x44]
	ldr r1, [sp]
	mov r0, sl
	bl AnimCreate
	adds r2, r0, #0
	ldr r0, [r5, #0x24]
	str r0, [r2, #0x30]
	ldrh r0, [r5, #2]
	strh r0, [r2, #2]
	ldrh r0, [r5, #4]
	strh r0, [r2, #4]
	ldrh r3, [r5, #0x10]
	lsls r0, r3, #0xc
	orrs r0, r4
	ldrh r1, [r5, #0xe]
	orrs r0, r1
	strh r0, [r2, #8]
	ldrh r3, [r5, #0xc]
	lsls r0, r3, #9
	movs r3, #0xa0
	lsls r3, r3, #3
	adds r1, r3, #0
	orrs r0, r1
	ldrh r1, [r2, #0xc]
	orrs r0, r1
	strh r0, [r2, #0xc]
	strh r6, [r2, #0xe]
	ldrh r0, [r5, #0xa]
	strb r0, [r2, #0x12]
	ldr r0, [r5, #0x1c]
	str r0, [r2, #0x2c]
	str r2, [r5, #0x18]
	str r5, [r2, #0x44]
	movs r2, #6
	ldrsh r0, [r5, r2]
	lsls r0, r0, #5
	add r0, sb
	ldr r0, [r0, #0x1c]
	ldr r1, [r5, #0x20]
	bl LZ77UnCompWram
	movs r3, #8
	ldrsh r1, [r5, r3]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _0805543A
	adds r0, r1, #0
	lsls r0, r0, #4
	ldr r2, _0805546C @ =0x08FD8008
	adds r0, r0, r2
	ldr r0, [r0, #0xc]
	ldr r1, [r5, #0x20]
	bl LZ77UnCompWram
_0805543A:
	ldrb r3, [r5, #1]
	lsls r1, r3, #5
	ldr r0, [r5, #0x20]
	adds r0, r0, r1
	ldrh r2, [r5, #0x10]
	lsls r1, r2, #5
	ldr r2, _08055470 @ =0x02022A60
	adds r1, r1, r2
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
	str r6, [r5, #0x2c]
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08055468: .4byte 0x000057F0
_0805546C: .4byte 0x08FD8008
_08055470: .4byte 0x02022A60

	thumb_func_start sub_08055474
sub_08055474: @ 0x08055474
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r6, r0, #0
	ldr r0, _080554E8 @ =0x08E00008
	mov sb, r0
	ldr r2, _080554EC @ =gBanimRoundScripts
	ldrh r1, [r6, #0xa]
	lsls r0, r1, #2
	adds r1, r0, r2
	ldrb r4, [r1]
	adds r0, #2
	adds r0, r0, r2
	ldrb r5, [r0]
	movs r2, #6
	ldrsh r0, [r6, r2]
	lsls r0, r0, #5
	add r0, sb
	ldr r0, [r0, #0x10]
	ldr r1, [r6, #0x28]
	bl LZ77UnCompWram
	movs r3, #6
	ldrsh r0, [r6, r3]
	lsls r0, r0, #5
	mov r7, sb
	adds r1, r0, r7
	ldr r2, [r1, #0xc]
	ldr r3, [r6, #0x28]
	ldr r7, _080554F0 @ =0x08C0A5D8
	cmp r4, #0xff
	beq _080554BE
	lsls r0, r4, #2
	adds r0, r0, r2
	ldr r0, [r0]
	adds r7, r3, r0
_080554BE:
	ldr r0, _080554F0 @ =0x08C0A5D8
	mov r8, r0
	cmp r5, #0xff
	beq _080554D0
	lsls r0, r5, #2
	adds r0, r0, r2
	ldr r0, [r0]
	adds r3, r3, r0
	mov r8, r3
_080554D0:
	ldrh r0, [r6, #0xc]
	cmp r0, #0
	bne _080554F8
	ldr r4, [r6, #0x24]
	ldr r0, [r1, #0x18]
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r2, _080554F4 @ =0x000057F0
	adds r1, r4, r2
	b _08055506
	.align 2, 0
_080554E8: .4byte 0x08E00008
_080554EC: .4byte gBanimRoundScripts
_080554F0: .4byte 0x08C0A5D8
_080554F4: .4byte 0x000057F0
_080554F8:
	ldr r4, [r6, #0x24]
	ldr r0, [r1, #0x14]
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r3, _080555DC @ =0x000057F0
	adds r1, r4, r3
_08055506:
	movs r0, #1
	str r0, [r1]
	ldr r5, [r6, #0x14]
	str r7, [r5, #0x24]
	str r7, [r5, #0x20]
	ldr r0, [r6, #0x24]
	str r0, [r5, #0x30]
	ldrh r0, [r6, #2]
	movs r4, #0
	movs r2, #0
	strh r0, [r5, #2]
	ldrh r0, [r6, #4]
	strh r0, [r5, #4]
	ldrh r7, [r6, #0x10]
	lsls r0, r7, #0xc
	movs r1, #0x80
	lsls r1, r1, #4
	adds r3, r1, #0
	orrs r0, r3
	ldrh r7, [r6, #0xe]
	orrs r0, r7
	strh r0, [r5, #8]
	movs r1, #0xe0
	lsls r1, r1, #3
	adds r0, r1, #0
	ldrh r7, [r5, #0xc]
	ands r0, r7
	strh r0, [r5, #0xc]
	strh r2, [r5, #0x10]
	strh r2, [r5, #6]
	strh r2, [r5, #0xe]
	ldrh r0, [r6, #0xa]
	strb r0, [r5, #0x12]
	ldr r0, [r6, #0x1c]
	str r0, [r5, #0x2c]
	strb r4, [r5, #0x14]
	str r5, [r6, #0x14]
	ldr r5, [r6, #0x18]
	mov r0, r8
	str r0, [r5, #0x24]
	str r0, [r5, #0x20]
	ldr r0, [r6, #0x24]
	str r0, [r5, #0x30]
	ldrh r0, [r6, #2]
	strh r0, [r5, #2]
	ldrh r0, [r6, #4]
	strh r0, [r5, #4]
	ldrh r7, [r6, #0x10]
	lsls r0, r7, #0xc
	orrs r0, r3
	ldrh r3, [r6, #0xe]
	orrs r0, r3
	strh r0, [r5, #8]
	ldrh r7, [r5, #0xc]
	ands r1, r7
	strh r1, [r5, #0xc]
	strh r2, [r5, #0x10]
	strh r2, [r5, #6]
	strh r2, [r5, #0xe]
	ldrh r0, [r6, #0xa]
	strb r0, [r5, #0x12]
	ldr r0, [r6, #0x1c]
	str r0, [r5, #0x2c]
	strb r4, [r5, #0x14]
	str r5, [r6, #0x18]
	movs r1, #6
	ldrsh r0, [r6, r1]
	lsls r0, r0, #5
	add r0, sb
	ldr r0, [r0, #0x1c]
	ldr r1, [r6, #0x20]
	bl LZ77UnCompWram
	movs r2, #8
	ldrsh r1, [r6, r2]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _080555B4
	adds r0, r1, #0
	lsls r0, r0, #4
	ldr r7, _080555E0 @ =0x08FD8008
	adds r0, r0, r7
	ldr r0, [r0, #0xc]
	ldr r1, [r6, #0x20]
	bl LZ77UnCompWram
_080555B4:
	ldrb r0, [r6, #1]
	lsls r1, r0, #5
	ldr r0, [r6, #0x20]
	adds r0, r0, r1
	ldrh r6, [r6, #0x10]
	lsls r1, r6, #5
	ldr r2, _080555E4 @ =0x02022A60
	adds r1, r1, r2
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080555DC: .4byte 0x000057F0
_080555E0: .4byte 0x08FD8008
_080555E4: .4byte 0x02022A60

	thumb_func_start sub_080555E8
sub_080555E8: @ 0x080555E8
	push {lr}
	strh r1, [r0, #6]
	strh r2, [r0, #8]
	bl sub_08055474
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080555F8
sub_080555F8: @ 0x080555F8
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	strh r1, [r0, #2]
	strh r2, [r0, #4]
	ldr r2, [r0, #0x14]
	strh r1, [r2, #2]
	ldrh r1, [r0, #4]
	strh r1, [r2, #4]
	ldr r2, [r0, #0x18]
	ldrh r1, [r0, #2]
	strh r1, [r2, #2]
	ldrh r0, [r0, #4]
	strh r0, [r2, #4]
	bx lr

	thumb_func_start sub_08055614
sub_08055614: @ 0x08055614
	lsls r1, r1, #0x10
	ldr r2, [r0, #0x14]
	lsrs r1, r1, #6
	strh r1, [r2, #8]
	ldr r2, [r0, #0x18]
	strh r1, [r2, #8]
	bx lr
	.align 2, 0

	thumb_func_start sub_08055624
sub_08055624: @ 0x08055624
	ldr r1, [r0, #0x14]
	ldr r2, [r0, #0x18]
	ldr r0, _0805563C @ =0x0000FFFE
	ldrh r1, [r1, #0xe]
	cmp r1, r0
	beq _08055640
	ldrh r2, [r2, #0xe]
	cmp r2, r0
	beq _08055640
	movs r0, #0
	b _08055642
	.align 2, 0
_0805563C: .4byte 0x0000FFFE
_08055640:
	movs r0, #1
_08055642:
	bx lr

	thumb_func_start sub_08055644
sub_08055644: @ 0x08055644
	ldr r3, [r0, #0x14]
	movs r2, #8
	ldrh r1, [r3, #0x10]
	orrs r1, r2
	strh r1, [r3, #0x10]
	ldr r3, [r0, #0x18]
	ldrh r0, [r3, #0x10]
	orrs r0, r2
	strh r0, [r3, #0x10]
	bx lr

	thumb_func_start sub_08055658
sub_08055658: @ 0x08055658
	ldr r1, [r0, #0x14]
	ldr r0, _08055668 @ =0x0000FFFF
	ldrh r1, [r1, #0xe]
	cmp r1, r0
	bne _0805566C
	movs r0, #1
	b _0805566E
	.align 2, 0
_08055668: .4byte 0x0000FFFF
_0805566C:
	movs r0, #0
_0805566E:
	bx lr

	thumb_func_start sub_08055670
sub_08055670: @ 0x08055670
	push {r4, lr}
	ldr r4, _08055688 @ =0x0201FB0C
	ldr r0, _0805568C @ =0x08C0A628
	movs r1, #4
	bl Proc_Start
	str r0, [r4]
	bl AnimClearAll
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08055688: .4byte 0x0201FB0C
_0805568C: .4byte 0x08C0A628

	thumb_func_start sub_08055690
sub_08055690: @ 0x08055690
	push {lr}
	ldr r0, _080556A0 @ =0x0201FB0C
	ldr r0, [r0]
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_080556A0: .4byte 0x0201FB0C

	thumb_func_start sub_080556A4
sub_080556A4: @ 0x080556A4
	push {lr}
	bl AnimUpdateAll
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080556B0
sub_080556B0: @ 0x080556B0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _080556D4 @ =0x08C0A640
	movs r1, #4
	bl Proc_Start
	adds r5, r0, #0
	adds r0, r4, #0
	bl sub_080552D8
	str r4, [r5, #0x5c]
	str r5, [r4, #0x34]
	movs r0, #1
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080556D4: .4byte 0x08C0A640

	thumb_func_start sub_080556D8
sub_080556D8: @ 0x080556D8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x14]
	bl AnimDelete
	ldr r0, [r4, #0x18]
	bl AnimDelete
	movs r0, #0
	str r0, [r4, #0x14]
	str r0, [r4, #0x18]
	ldr r0, [r4, #0x34]
	bl Proc_End
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080556FC
sub_080556FC: @ 0x080556FC
	push {r4, lr}
	ldr r4, [r0, #0x5c]
	ldr r1, [r4, #0x14]
	adds r0, r4, #0
	bl sub_080550B4
	ldr r1, [r4, #0x18]
	adds r0, r4, #0
	bl sub_080550B4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08055718
sub_08055718: @ 0x08055718
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	adds r6, r0, #0
	movs r0, #0
	ldrsh r1, [r6, r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	ldr r2, _08055780 @ =0x08FC0008
	adds r0, r0, r2
	mov r8, r0
	movs r0, #6
	ldrsh r1, [r6, r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r5, r0, r2
	movs r1, #0
	ldrsh r0, [r6, r1]
	movs r4, #1
	rsbs r4, r4, #0
	cmp r0, r4
	beq _08055756
	mov r2, r8
	ldr r0, [r2, #0xc]
	ldr r1, [r6, #0x20]
	bl LZ77UnCompWram
_08055756:
	movs r1, #6
	ldrsh r0, [r6, r1]
	cmp r0, r4
	beq _0805576C
	ldr r0, [r5, #0xc]
	ldr r1, [r6, #0x20]
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r1, r2
	bl LZ77UnCompWram
_0805576C:
	movs r1, #0xc
	ldrsh r0, [r6, r1]
	cmp r0, #3
	bgt _08055784
	cmp r0, #1
	bge _08055792
	cmp r0, #0
	beq _08055788
	b _08055792
	.align 2, 0
_08055780: .4byte 0x08FC0008
_08055784:
	cmp r0, #4
	bne _08055792
_08055788:
	ldr r3, [r6, #0x20]
	movs r2, #0x80
	lsls r2, r2, #5
	adds r7, r3, r2
	b _080557A0
_08055792:
	ldr r0, [r6, #0x20]
	movs r1, #0x80
	lsls r1, r1, #4
	adds r3, r0, r1
	movs r2, #0xc0
	lsls r2, r2, #5
	adds r7, r0, r2
_080557A0:
	mov r0, r8
	ldr r0, [r0, #0x10]
	mov r8, r0
	ldr r5, [r5, #0x10]
	mov sb, r5
	movs r1, #0xe
	ldrsh r4, [r6, r1]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	beq _08055824
	cmp r4, r0
	blt _08055884
	cmp r4, #3
	bgt _08055884
	movs r2, #4
	ldrsh r0, [r6, r2]
	adds r0, #0x40
	lsls r0, r0, #5
	movs r4, #0xc0
	lsls r4, r4, #0x13
	adds r0, r0, r4
	ldr r1, [r6, #0x1c]
	adds r1, r1, r0
	movs r5, #0x80
	lsls r5, r5, #4
	adds r0, r3, #0
	adds r2, r5, #0
	bl RegisterDataMove
	movs r1, #0xa
	ldrsh r0, [r6, r1]
	lsls r0, r0, #5
	adds r0, r0, r4
	ldr r1, [r6, #0x1c]
	adds r1, r1, r0
	adds r0, r7, #0
	adds r2, r5, #0
	bl RegisterDataMove
	movs r2, #2
	ldrsh r1, [r6, r2]
	lsls r1, r1, #5
	ldr r4, _08055820 @ =gPal
	adds r1, r1, r4
	mov r0, r8
	movs r2, #8
	bl CpuFastSet
	movs r0, #8
	ldrsh r1, [r6, r0]
	lsls r1, r1, #5
	adds r1, r1, r4
	mov r0, sb
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
	adds r0, r6, #0
	bl sub_08055B08
	b _08055884
	.align 2, 0
_08055820: .4byte gPal
_08055824:
	movs r1, #0
	ldrsh r0, [r6, r1]
	cmp r0, r4
	beq _08055852
	movs r2, #4
	ldrsh r0, [r6, r2]
	lsls r0, r0, #5
	ldr r1, [r6, #0x1c]
	adds r1, r1, r0
	movs r2, #0x80
	lsls r2, r2, #4
	adds r0, r3, #0
	bl RegisterDataMove
	movs r0, #2
	ldrsh r1, [r6, r0]
	lsls r1, r1, #5
	ldr r0, _0805589C @ =0x02022A60
	adds r1, r1, r0
	mov r0, r8
	movs r2, #8
	bl CpuFastSet
_08055852:
	movs r1, #6
	ldrsh r0, [r6, r1]
	cmp r0, r4
	beq _08055880
	movs r2, #0xa
	ldrsh r0, [r6, r2]
	lsls r0, r0, #5
	ldr r1, [r6, #0x1c]
	adds r1, r1, r0
	movs r2, #0x80
	lsls r2, r2, #4
	adds r0, r7, #0
	bl RegisterDataMove
	movs r0, #8
	ldrsh r1, [r6, r0]
	lsls r1, r1, #5
	ldr r0, _0805589C @ =0x02022A60
	adds r1, r1, r0
	mov r0, sb
	movs r2, #8
	bl CpuFastSet
_08055880:
	bl EnablePalSync
_08055884:
	ldrh r0, [r6, #0xe]
	adds r0, #1
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #4
	bls _08055892
	b _08055AB2
_08055892:
	lsls r0, r0, #2
	ldr r1, _080558A0 @ =_080558A4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0805589C: .4byte 0x02022A60
_080558A0: .4byte _080558A4
_080558A4: @ jump table
	.4byte _080558D8 @ case 0
	.4byte _080558B8 @ case 1
	.4byte _080558C0 @ case 2
	.4byte _080558C8 @ case 3
	.4byte _080558D0 @ case 4
_080558B8:
	movs r0, #1
	bl EnableBgSync
	b _08055AB2
_080558C0:
	movs r0, #2
	bl EnableBgSync
	b _08055AB2
_080558C8:
	movs r0, #4
	bl EnableBgSync
	b _08055AB2
_080558D0:
	movs r0, #8
	bl EnableBgSync
	b _08055AB2
_080558D8:
	movs r0, #0
	str r0, [r6, #0x14]
	str r0, [r6, #0x18]
	movs r2, #0
	ldrsh r1, [r6, r2]
	subs r0, #1
	cmp r1, r0
	beq _080559C6
	movs r1, #0xc
	ldrsh r0, [r6, r1]
	cmp r0, #4
	bhi _080559C6
	lsls r0, r0, #2
	ldr r1, _080558FC @ =_08055900
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080558FC: .4byte _08055900
_08055900: @ jump table
	.4byte _08055914 @ case 0
	.4byte _08055940 @ case 1
	.4byte _0805596C @ case 2
	.4byte _08055998 @ case 3
	.4byte _08055914 @ case 4
_08055914:
	movs r2, #2
	ldrsh r0, [r6, r2]
	lsls r0, r0, #0xc
	ldrh r1, [r6, #4]
	orrs r0, r1
	movs r2, #0xc0
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, _0805593C @ =0x08C0BFD0
	str r0, [sp]
	movs r0, #0
	str r0, [sp, #4]
	movs r0, #4
	str r0, [sp, #8]
	movs r0, #0x48
	b _080559BC
	.align 2, 0
_0805593C: .4byte 0x08C0BFD0
_08055940:
	movs r1, #2
	ldrsh r0, [r6, r1]
	lsls r0, r0, #0xc
	ldrh r2, [r6, #4]
	orrs r0, r2
	movs r2, #0xc0
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, _08055968 @ =0x08C0BED0
	str r0, [sp]
	movs r0, #0
	str r0, [sp, #4]
	movs r0, #4
	str r0, [sp, #8]
	movs r0, #0x20
	b _080559BC
	.align 2, 0
_08055968: .4byte 0x08C0BED0
_0805596C:
	movs r1, #2
	ldrsh r0, [r6, r1]
	lsls r0, r0, #0xc
	ldrh r2, [r6, #4]
	orrs r0, r2
	movs r2, #0xc0
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, _08055994 @ =0x08C0BED0
	str r0, [sp]
	movs r0, #0
	str r0, [sp, #4]
	movs r0, #4
	str r0, [sp, #8]
	movs r0, #0x40
	b _080559BC
	.align 2, 0
_08055994: .4byte 0x08C0BED0
_08055998:
	movs r1, #2
	ldrsh r0, [r6, r1]
	lsls r0, r0, #0xc
	ldrh r2, [r6, #4]
	orrs r0, r2
	movs r2, #0xc0
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, _080559E4 @ =0x08C0BFD0
	str r0, [sp]
	movs r0, #0
	str r0, [sp, #4]
	movs r0, #4
	str r0, [sp, #8]
	movs r0, #0x78
_080559BC:
	movs r1, #0x68
	movs r3, #2
	bl sub_08067AEC
	str r0, [r6, #0x14]
_080559C6:
	movs r0, #6
	ldrsh r1, [r6, r0]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _08055AB2
	movs r1, #0xc
	ldrsh r0, [r6, r1]
	cmp r0, #4
	bhi _08055AB2
	lsls r0, r0, #2
	ldr r1, _080559E8 @ =_080559EC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080559E4: .4byte 0x08C0BFD0
_080559E8: .4byte _080559EC
_080559EC: @ jump table
	.4byte _08055A00 @ case 0
	.4byte _08055A2C @ case 1
	.4byte _08055A58 @ case 2
	.4byte _08055A84 @ case 3
	.4byte _08055A00 @ case 4
_08055A00:
	movs r2, #8
	ldrsh r0, [r6, r2]
	lsls r0, r0, #0xc
	ldrh r1, [r6, #0xa]
	orrs r0, r1
	movs r2, #0xc0
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, _08055A28 @ =0x08C0BF50
	str r0, [sp]
	movs r0, #0
	str r0, [sp, #4]
	movs r0, #4
	str r0, [sp, #8]
	movs r0, #0xa8
	b _08055AA8
	.align 2, 0
_08055A28: .4byte 0x08C0BF50
_08055A2C:
	movs r1, #8
	ldrsh r0, [r6, r1]
	lsls r0, r0, #0xc
	ldrh r2, [r6, #0xa]
	orrs r0, r2
	movs r2, #0xc0
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, _08055A54 @ =0x08C0BE44
	str r0, [sp]
	movs r0, #0
	str r0, [sp, #4]
	movs r0, #4
	str r0, [sp, #8]
	movs r0, #0xb0
	b _08055AA8
	.align 2, 0
_08055A54: .4byte 0x08C0BE44
_08055A58:
	movs r1, #8
	ldrsh r0, [r6, r1]
	lsls r0, r0, #0xc
	ldrh r2, [r6, #0xa]
	orrs r0, r2
	movs r2, #0xc0
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, _08055A80 @ =0x08C0BE44
	str r0, [sp]
	movs r0, #0
	str r0, [sp, #4]
	movs r0, #4
	str r0, [sp, #8]
	movs r0, #0xb0
	b _08055AA8
	.align 2, 0
_08055A80: .4byte 0x08C0BE44
_08055A84:
	movs r1, #8
	ldrsh r0, [r6, r1]
	lsls r0, r0, #0xc
	ldrh r2, [r6, #0xa]
	orrs r0, r2
	movs r2, #0xc0
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, _08055AC0 @ =0x08C0BE44
	str r0, [sp]
	movs r0, #0
	str r0, [sp, #4]
	movs r0, #4
	str r0, [sp, #8]
	movs r0, #0x80
_08055AA8:
	movs r1, #0x68
	movs r3, #2
	bl sub_08067AEC
	str r0, [r6, #0x18]
_08055AB2:
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08055AC0: .4byte 0x08C0BE44

	thumb_func_start sub_08055AC4
sub_08055AC4: @ 0x08055AC4
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0xe
	ldrsh r1, [r4, r0]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _08055AE8
	ldr r0, [r4, #0x14]
	cmp r0, #0
	beq _08055ADE
	bl Proc_End
_08055ADE:
	ldr r0, [r4, #0x18]
	cmp r0, #0
	beq _08055AE8
	bl Proc_End
_08055AE8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08055AF0
sub_08055AF0: @ 0x08055AF0
	push {r4, r5, lr}
	ldr r4, [sp, #0xc]
	ldr r5, [r0, #0x14]
	strh r1, [r5, #0x32]
	strh r2, [r5, #0x3a]
	ldr r5, [r0, #0x18]
	strh r3, [r5, #0x32]
	strh r4, [r5, #0x3a]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08055B08
sub_08055B08: @ 0x08055B08
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	adds r7, r0, #0
	movs r4, #0
	mov sl, r4
	ldr r0, _08055B4C @ =0x08C0A5E8
	movs r2, #0xc
	ldrsh r1, [r7, r2]
	lsls r2, r1, #3
	adds r2, r2, r0
	ldr r2, [r2]
	str r2, [sp, #0x10]
	lsls r1, r1, #1
	adds r1, #1
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r1, [r1]
	str r1, [sp, #0x14]
	movs r0, #0
	bl sub_08050F74
	movs r1, #0xc
	ldrsh r0, [r7, r1]
	cmp r0, #4
	bhi _08055B9C
	lsls r0, r0, #2
	ldr r1, _08055B50 @ =_08055B54
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08055B4C: .4byte 0x08C0A5E8
_08055B50: .4byte _08055B54
_08055B54: @ jump table
	.4byte _08055B68 @ case 0
	.4byte _08055B70 @ case 1
	.4byte _08055B88 @ case 2
	.4byte _08055B9C @ case 3
	.4byte _08055B68 @ case 4
_08055B68:
	movs r4, #0x21
	movs r2, #0x30
	mov sl, r2
	b _08055BBC
_08055B70:
	movs r4, #0x1d
	movs r0, #0x30
	mov sl, r0
	ldr r0, _08055B84 @ =0x02017744
	ldr r0, [r0]
	movs r5, #4
	rsbs r5, r5, #0
_08055B7E:
	cmp r0, #1
	bne _08055BBE
	b _08055BBC
	.align 2, 0
_08055B84: .4byte 0x02017744
_08055B88:
	movs r4, #3
	movs r1, #0x30
	mov sl, r1
	ldr r0, _08055B98 @ =0x02017744
	ldr r0, [r0]
	movs r5, #0x1e
	rsbs r5, r5, #0
	b _08055B7E
	.align 2, 0
_08055B98: .4byte 0x02017744
_08055B9C:
	movs r2, #0
	ldrsh r0, [r7, r2]
	movs r1, #1
	rsbs r1, r1, #0
	cmp r0, r1
	beq _08055BAE
	movs r4, #0x27
	movs r0, #3
	mov sl, r0
_08055BAE:
	movs r2, #6
	ldrsh r0, [r7, r2]
	cmp r0, r1
	beq _08055BBC
	movs r4, #3
	movs r0, #0x2a
	mov sl, r0
_08055BBC:
	movs r5, #0
_08055BBE:
	movs r1, #1
	rsbs r1, r1, #0
	mov sb, r1
	lsls r2, r4, #1
	ldr r4, _08055C44 @ =0x0201CF78
	adds r2, r2, r4
	movs r0, #0xf
	mov r8, r0
	str r0, [sp]
	movs r6, #5
	str r6, [sp, #4]
	movs r1, #2
	ldrsh r0, [r7, r1]
	str r0, [sp, #8]
	movs r1, #4
	ldrsh r0, [r7, r1]
	str r0, [sp, #0xc]
	ldr r0, [sp, #0x10]
	mov r1, sb
	movs r3, #0x42
	bl sub_08067318
	mov r0, sl
	lsls r2, r0, #1
	adds r2, r2, r4
	mov r1, r8
	str r1, [sp]
	str r6, [sp, #4]
	movs r1, #8
	ldrsh r0, [r7, r1]
	str r0, [sp, #8]
	movs r1, #0xa
	ldrsh r0, [r7, r1]
	str r0, [sp, #0xc]
	ldr r0, [sp, #0x14]
	mov r1, sb
	movs r3, #0x42
	bl sub_08067318
	lsls r0, r5, #1
	adds r4, r4, r0
	ldr r2, _08055C48 @ =0xFFFFFA96
	adds r4, r4, r2
	ldr r2, _08055C4C @ =gBg2Tm
	movs r0, #0x20
	str r0, [sp]
	movs r0, #0x14
	str r0, [sp, #4]
	mov r0, sb
	str r0, [sp, #8]
	str r0, [sp, #0xc]
	adds r0, r4, #0
	movs r1, #0x42
	movs r3, #0x20
	bl sub_08067318
	movs r0, #4
	bl EnableBgSync
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08055C44: .4byte 0x0201CF78
_08055C48: .4byte 0xFFFFFA96
_08055C4C: .4byte gBg2Tm

	thumb_func_start sub_08055C50
sub_08055C50: @ 0x08055C50
	push {lr}
	sub sp, #0x10
	lsls r1, r1, #0x10
	lsrs r3, r1, #0x10
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #4
	bhi _08055C98
	lsls r0, r0, #2
	ldr r1, _08055C6C @ =_08055C70
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08055C6C: .4byte _08055C70
_08055C70: @ jump table
	.4byte _08055C84 @ case 0
	.4byte _08055C8E @ case 1
	.4byte _08055C98 @ case 2
	.4byte _08055C98 @ case 3
	.4byte _08055C84 @ case 4
_08055C84:
	movs r2, #0x30
	cmp r3, #0
	bne _08055CA0
	movs r2, #0x21
	b _08055CA0
_08055C8E:
	movs r2, #0x30
	cmp r3, #0
	bne _08055CA0
	movs r2, #0x1d
	b _08055CA0
_08055C98:
	movs r2, #0x30
	cmp r3, #0
	bne _08055CA0
	movs r2, #3
_08055CA0:
	ldr r0, _08055CC4 @ =0x081DE222
	movs r1, #1
	rsbs r1, r1, #0
	lsls r2, r2, #1
	ldr r3, _08055CC8 @ =0x0201CF78
	adds r2, r2, r3
	movs r3, #0xf
	str r3, [sp]
	movs r3, #5
	str r3, [sp, #4]
	str r1, [sp, #8]
	str r1, [sp, #0xc]
	movs r3, #0x42
	bl sub_08067318
	add sp, #0x10
	pop {r0}
	bx r0
	.align 2, 0
_08055CC4: .4byte 0x081DE222
_08055CC8: .4byte 0x0201CF78

	thumb_func_start sub_08055CCC
sub_08055CCC: @ 0x08055CCC
	ldr r1, _08055CD4 @ =0x0203E0C8
	str r0, [r1]
	bx lr
	.align 2, 0
_08055CD4: .4byte 0x0203E0C8

	thumb_func_start sub_08055CD8
sub_08055CD8: @ 0x08055CD8
	ldr r0, _08055CE0 @ =0x0203E0C8
	ldr r0, [r0]
	bx lr
	.align 2, 0
_08055CE0: .4byte 0x0203E0C8

	thumb_func_start sub_08055CE4
sub_08055CE4: @ 0x08055CE4
	push {r4, lr}
	sub sp, #0x10
	asrs r4, r0, #3
	movs r1, #7
	ands r1, r0
	movs r0, #3
	movs r2, #0
	bl SetBgOffset
	lsls r4, r4, #1
	ldr r0, _08055D24 @ =0x0201D42C
	adds r4, r4, r0
	ldr r2, _08055D28 @ =gBg3Tm
	movs r0, #0x20
	str r0, [sp]
	movs r0, #0x16
	str r0, [sp, #4]
	subs r0, #0x17
	str r0, [sp, #8]
	str r0, [sp, #0xc]
	adds r0, r4, #0
	movs r1, #0x42
	movs r3, #0x20
	bl sub_08067318
	movs r0, #8
	bl EnableBgSync
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08055D24: .4byte 0x0201D42C
_08055D28: .4byte gBg3Tm

	thumb_func_start sub_08055D2C
sub_08055D2C: @ 0x08055D2C
	push {lr}
	bl sub_08055CD8
	cmp r0, #0
	beq _08055D40
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x8f
	bl sub_08067DB4
_08055D40:
	pop {r0}
	bx r0

	thumb_func_start sub_08055D44
sub_08055D44: @ 0x08055D44
	push {lr}
	bl sub_08055CD8
	cmp r0, #0
	beq _08055D54
	movs r0, #0x8e
	bl sub_08067E68
_08055D54:
	pop {r0}
	bx r0

	thumb_func_start sub_08055D58
sub_08055D58: @ 0x08055D58
	push {lr}
	bl NewEkrBattleDeamon
	bl AnimClearAll
	bl sub_0804DC18
	ldr r1, _08055D78 @ =0x02017744
	str r0, [r1]
	bl sub_08055D94
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0
	.align 2, 0
_08055D78: .4byte 0x02017744

	thumb_func_start sub_08055D7C
sub_08055D7C: @ 0x08055D7C
	push {lr}
	bl AnimClearAll
	bl sub_08055F1C
	ldr r0, _08055D90 @ =sub_08051214
	bl SetMainFunc
	pop {r0}
	bx r0
	.align 2, 0
_08055D90: .4byte sub_08051214

	thumb_func_start sub_08055D94
sub_08055D94: @ 0x08055D94
	push {lr}
	ldr r0, _08055DA4 @ =0x08C0A658
	movs r1, #3
	bl Proc_Start
	pop {r0}
	bx r0
	.align 2, 0
_08055DA4: .4byte 0x08C0A658

	thumb_func_start sub_08055DA8
sub_08055DA8: @ 0x08055DA8
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	mov r8, r0
	movs r0, #0
	bl InitOam
	ldr r1, _08055E1C @ =0x02017744
	ldr r0, _08055E20 @ =0x0203DFE4
	movs r2, #0
	ldrsh r0, [r0, r2]
	str r0, [r1]
	bl sub_0804D738
	bl UpdateBanimFrame
	bl sub_0804C9AC
	bl sub_0804D540
	bl NewEkrBattle
	ldr r0, _08055E24 @ =0x081E4210
	ldr r4, _08055E28 @ =0x02022920
	adds r1, r4, #0
	movs r2, #0x20
	bl CpuFastSet
	subs r4, #0xc0
	ldr r5, _08055E2C @ =0x020165C8
	movs r6, #0x80
	lsls r6, r6, #1
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl CpuFastSet
	adds r0, r5, #0
	adds r1, r4, #0
	adds r2, r6, #0
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x20
	movs r3, #0x10
	bl sub_080676D4
	bl EnablePalSync
	mov r0, r8
	bl Proc_Break
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08055E1C: .4byte 0x02017744
_08055E20: .4byte 0x0203DFE4
_08055E24: .4byte 0x081E4210
_08055E28: .4byte 0x02022920
_08055E2C: .4byte 0x020165C8

	thumb_func_start sub_08055E30
sub_08055E30: @ 0x08055E30
	push {r4, r5, r6, lr}
	sub sp, #0x10
	adds r5, r0, #0
	ldr r0, _08055E90 @ =0x081E1404
	ldr r1, _08055E94 @ =0x06008000
	bl LZ77UnCompVram
	ldr r0, _08055E98 @ =0x081E3A70
	ldr r6, _08055E9C @ =gEkrTsaBuffer
	adds r1, r6, #0
	bl LZ77UnCompWram
	movs r1, #1
	rsbs r1, r1, #0
	ldr r2, _08055EA0 @ =0x0201D41C
	movs r0, #0x2e
	str r0, [sp]
	movs r0, #0x14
	str r0, [sp, #4]
	movs r0, #6
	str r0, [sp, #8]
	movs r4, #0
	str r4, [sp, #0xc]
	adds r0, r6, #0
	movs r3, #0x42
	bl sub_08067318
	movs r0, #0
	bl sub_08055CE4
	movs r0, #8
	bl EnableBgSync
	strh r4, [r5, #0x2c]
	movs r0, #0x10
	strh r0, [r5, #0x2e]
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x8e
	bl sub_08067DB4
	adds r0, r5, #0
	bl Proc_Break
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08055E90: .4byte 0x081E1404
_08055E94: .4byte 0x06008000
_08055E98: .4byte 0x081E3A70
_08055E9C: .4byte gEkrTsaBuffer
_08055EA0: .4byte 0x0201D41C

	thumb_func_start sub_08055EA4
sub_08055EA4: @ 0x08055EA4
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r6, r0]
	movs r1, #0x2e
	ldrsh r0, [r6, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	adds r5, r0, #0
	ldr r0, _08055F00 @ =0x020165C8
	ldr r4, _08055F04 @ =gPal
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r4, #0
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x20
	adds r3, r5, #0
	bl sub_080676D4
	bl EnablePalSync
	ldrh r1, [r6, #0x2c]
	adds r1, #1
	strh r1, [r6, #0x2c]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r2, #0x2e
	ldrsh r0, [r6, r2]
	adds r0, #1
	cmp r1, r0
	bne _08055EF8
	adds r0, r6, #0
	bl Proc_Break
_08055EF8:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08055F00: .4byte 0x020165C8
_08055F04: .4byte gPal

	thumb_func_start sub_08055F08
sub_08055F08: @ 0x08055F08
	push {r4, lr}
	adds r4, r0, #0
	bl sub_08055FF0
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_08055F1C
sub_08055F1C: @ 0x08055F1C
	push {lr}
	ldr r0, _08055F30 @ =0x08C0A688
	movs r1, #3
	bl Proc_Start
	bl sub_08056024
	pop {r0}
	bx r0
	.align 2, 0
_08055F30: .4byte 0x08C0A688

	thumb_func_start sub_08055F34
sub_08055F34: @ 0x08055F34
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08055F58 @ =gPal
	ldr r1, _08055F5C @ =0x020165C8
	movs r2, #0x80
	lsls r2, r2, #1
	bl CpuFastSet
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x10
	strh r0, [r4, #0x2e]
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08055F58: .4byte gPal
_08055F5C: .4byte 0x020165C8

	thumb_func_start sub_08055F60
sub_08055F60: @ 0x08055F60
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r6, r0]
	movs r1, #0x2e
	ldrsh r0, [r6, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	adds r5, r0, #0
	ldr r0, _08055FBC @ =0x020165C8
	ldr r4, _08055FC0 @ =gPal
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r4, #0
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x20
	adds r3, r5, #0
	bl sub_080676D4
	bl EnablePalSync
	ldrh r1, [r6, #0x2c]
	adds r1, #1
	strh r1, [r6, #0x2c]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r2, #0x2e
	ldrsh r0, [r6, r2]
	adds r0, #1
	cmp r1, r0
	bne _08055FB4
	adds r0, r6, #0
	bl Proc_Break
_08055FB4:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08055FBC: .4byte 0x020165C8
_08055FC0: .4byte gPal

	thumb_func_start sub_08055FC4
sub_08055FC4: @ 0x08055FC4
	push {r4, lr}
	adds r4, r0, #0
	bl EndEkrBattleDeamon
	bl EndEkrGauge
	ldr r0, _08055FE8 @ =OnGameLoopMain
	bl SetMainFunc
	ldr r0, _08055FEC @ =OnVBlank
	bl SetOnVBlank
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08055FE8: .4byte OnGameLoopMain
_08055FEC: .4byte OnVBlank

	thumb_func_start sub_08055FF0
sub_08055FF0: @ 0x08055FF0
	push {r4, lr}
	ldr r4, _08056014 @ =0x0201FB18
	ldr r0, _08056018 @ =0x08C0A6B0
	movs r1, #3
	bl Proc_Start
	str r0, [r4]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _0805601C @ =0x081DE2B8
	str r1, [r0, #0x48]
	ldr r1, _08056020 @ =0x08C0A6C8
	str r1, [r0, #0x4c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08056014: .4byte 0x0201FB18
_08056018: .4byte 0x08C0A6B0
_0805601C: .4byte 0x081DE2B8
_08056020: .4byte 0x08C0A6C8

	thumb_func_start sub_08056024
sub_08056024: @ 0x08056024
	push {lr}
	ldr r0, _08056034 @ =0x0201FB18
	ldr r0, [r0]
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_08056034: .4byte 0x0201FB18

	thumb_func_start sub_08056038
sub_08056038: @ 0x08056038
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	blt _08056064
	ldr r1, [r4, #0x4c]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r1, _0805606C @ =0x02022920
	movs r2, #0x20
	bl CpuFastSet
	bl EnablePalSync
_08056064:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805606C: .4byte 0x02022920

	thumb_func_start StartSpellAnimation
StartSpellAnimation: @ 0x08056070
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _08056098 @ =0x0203DFFC
	bl GetAISSubjectId
	lsls r0, r0, #1
	adds r0, r0, r4
	ldr r1, _0805609C @ =0x08C1071C
	movs r2, #0
	ldrsh r0, [r0, r2]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r5, #0
	bl _call_via_r1
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08056098: .4byte 0x0203DFFC
_0805609C: .4byte 0x08C1071C

	thumb_func_start nullsub_49
nullsub_49: @ 0x080560A0
	bx lr
	.align 2, 0

	thumb_func_start sub_080560A4
sub_080560A4: @ 0x080560A4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r7, [sp, #0x18]
	ldr r1, _080560E0 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080560E4 @ =0x08C10830
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	str r5, [r0, #0x44]
	str r6, [r0, #0x48]
	mov r1, r8
	str r1, [r0, #0x4c]
	str r7, [r0, #0x50]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080560E0: .4byte 0x0201774C
_080560E4: .4byte 0x08C10830

	thumb_func_start sub_080560E8
sub_080560E8: @ 0x080560E8
	ldr r1, _080560F4 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_080560F4: .4byte 0x0201774C

	thumb_func_start sub_080560F8
sub_080560F8: @ 0x080560F8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r2, r0, #0
	ldr r0, _08056178 @ =0x0201FDAC
	ldr r0, [r0]
	ldr r4, _0805617C @ =0x0201FDB8
	cmp r0, #0
	bne _08056110
	ldr r4, _08056180 @ =0x0201FEF8
_08056110:
	ldrh r0, [r2, #0x2e]
	lsls r1, r0, #0x18
	lsrs r3, r1, #0x18
	ldr r1, [r2, #0x50]
	adds r0, r0, r1
	strh r0, [r2, #0x2e]
	movs r1, #0
	ldr r0, [r2, #0x44]
	mov r8, r0
	ldr r6, [r2, #0x48]
	mov sl, r6
	ldr r7, _08056184 @ =0x08C4A008
	mov ip, r7
	ldr r5, [r2, #0x4c]
	ldr r0, _08056188 @ =gDispIo
	mov sb, r0
_08056130:
	mov r6, sl
	adds r0, r3, r6
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	lsls r0, r3, #1
	add r0, ip
	movs r7, #0
	ldrsh r0, [r0, r7]
	muls r0, r5, r0
	lsls r0, r0, #8
	lsrs r0, r0, #0x10
	mov r6, sb
	ldrh r6, [r6, #0x20]
	adds r0, r6, r0
	strh r0, [r4]
	adds r4, #2
	adds r1, #1
	cmp r1, #0x77
	bls _08056130
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, r8
	bne _0805616A
	adds r0, r2, #0
	bl Proc_End
_0805616A:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08056178: .4byte 0x0201FDAC
_0805617C: .4byte 0x0201FDB8
_08056180: .4byte 0x0201FEF8
_08056184: .4byte 0x08C4A008
_08056188: .4byte gDispIo

	thumb_func_start sub_0805618C
sub_0805618C: @ 0x0805618C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _080561CC @ =0x08C10850
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	str r5, [r0, #0x44]
	ldr r2, _080561D0 @ =0x0201FDB8
_080561A6:
	lsrs r0, r1, #1
	rsbs r0, r0, #0
	strh r0, [r2]
	adds r2, #2
	adds r1, #1
	cmp r1, #0x77
	bls _080561A6
	ldr r2, _080561D4 @ =0x0201FEF8
	movs r1, #0
_080561B8:
	lsrs r0, r1, #1
	rsbs r0, r0, #0
	strh r0, [r2]
	adds r2, #2
	adds r1, #1
	cmp r1, #0x77
	bls _080561B8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080561CC: .4byte 0x08C10850
_080561D0: .4byte 0x0201FDB8
_080561D4: .4byte 0x0201FEF8

	thumb_func_start sub_080561D8
sub_080561D8: @ 0x080561D8
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r2, #0x44]
	cmp r0, r1
	bne _080561F2
	adds r0, r2, #0
	bl Proc_Break
_080561F2:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080561F8
sub_080561F8: @ 0x080561F8
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _08056220 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08056224 @ =0x08C10868
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	str r5, [r0, #0x44]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08056220: .4byte 0x0201774C
_08056224: .4byte 0x08C10868

	thumb_func_start sub_08056228
sub_08056228: @ 0x08056228
	ldr r1, _08056234 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_08056234: .4byte 0x0201774C

	thumb_func_start sub_08056238
sub_08056238: @ 0x08056238
	push {r4, r5, lr}
	adds r3, r0, #0
	ldr r0, _08056274 @ =0x0201FDAC
	ldr r0, [r0]
	ldr r1, _08056278 @ =0x0201FDB8
	cmp r0, #0
	bne _08056248
	ldr r1, _0805627C @ =0x0201FEF8
_08056248:
	movs r2, #0
	ldr r5, [r3, #0x44]
	ldr r4, _08056280 @ =gDispIo
_0805624E:
	ldrh r0, [r4, #0x20]
	strh r0, [r1]
	adds r1, #2
	adds r2, #1
	cmp r2, #0x77
	bls _0805624E
	ldrh r0, [r3, #0x2c]
	adds r0, #1
	strh r0, [r3, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, r5
	bne _0805626E
	adds r0, r3, #0
	bl Proc_End
_0805626E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08056274: .4byte 0x0201FDAC
_08056278: .4byte 0x0201FDB8
_0805627C: .4byte 0x0201FEF8
_08056280: .4byte gDispIo

	thumb_func_start sub_08056284
sub_08056284: @ 0x08056284
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	mov r8, r0
	adds r4, r1, #0
	adds r5, r2, #0
	adds r6, r3, #0
	ldr r1, _080562CC @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080562D0 @ =0x08C10888
	movs r1, #3
	bl Proc_Start
	adds r7, r0, #0
	mov r0, r8
	str r0, [r7, #0x5c]
	movs r1, #0
	mov sb, r1
	movs r0, #0
	strh r0, [r7, #0x2c]
	strh r0, [r7, #0x2e]
	str r4, [r7, #0x44]
	str r5, [r7, #0x54]
	str r6, [r7, #0x58]
	mov r0, r8
	bl GetCoreAIStruct
	bl GetAISSubjectId
	cmp r0, #0
	bne _080562D8
	ldr r0, _080562D4 @ =0x0000FFB8
	b _080562DA
	.align 2, 0
_080562CC: .4byte 0x0201774C
_080562D0: .4byte 0x08C10888
_080562D4: .4byte 0x0000FFB8
_080562D8:
	ldr r0, _080562F8 @ =0x0000FFF8
_080562DA:
	strh r0, [r7, #0x32]
	ldr r0, _080562FC @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08056306
	mov r0, r8
	bl GetAISSubjectId
	cmp r0, #0
	bne _08056300
	ldrh r0, [r7, #0x32]
	adds r0, #0x18
	b _08056304
	.align 2, 0
_080562F8: .4byte 0x0000FFF8
_080562FC: .4byte gEkrDistanceType
_08056300:
	ldrh r0, [r7, #0x32]
	subs r0, #0x18
_08056304:
	strh r0, [r7, #0x32]
_08056306:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08056314
sub_08056314: @ 0x08056314
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r0, _0805635C @ =0x0201FB20
	ldr r0, [r0]
	ldr r5, _08056360 @ =0x0201FB2C
	cmp r0, #0
	bne _08056324
	ldr r5, _08056364 @ =0x0201FC6C
_08056324:
	ldr r1, [r4, #0x54]
	movs r2, #0x2e
	ldrsh r0, [r4, r2]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r2, [r0]
	ldr r1, [r4, #0x58]
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r3, [r0]
	ldr r0, _08056368 @ =0x0000FFFF
	cmp r2, r0
	beq _08056390
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	movs r2, #0
	ldr r6, [r4, #0x44]
	ldr r7, _0805636C @ =0x00007FFF
	mov ip, r7
_0805634C:
	ldrh r1, [r3]
	movs r7, #0
	ldrsh r0, [r3, r7]
	cmp r0, ip
	bne _08056370
	movs r0, #0
	b _08056382
	.align 2, 0
_0805635C: .4byte 0x0201FB20
_08056360: .4byte 0x0201FB2C
_08056364: .4byte 0x0201FC6C
_08056368: .4byte 0x0000FFFF
_0805636C: .4byte 0x00007FFF
_08056370:
	ldrh r0, [r4, #0x32]
	adds r1, r1, r0
	ldrh r7, [r3, #2]
	adds r0, r0, r7
	lsls r1, r1, #0x10
	asrs r1, r1, #8
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	orrs r0, r1
_08056382:
	strh r0, [r5]
	adds r3, #4
	adds r5, #2
	adds r2, #1
	cmp r2, #0x77
	bls _0805634C
	b _080563A0
_08056390:
	movs r2, #0
	ldr r6, [r4, #0x44]
	movs r0, #0
_08056396:
	strh r0, [r5]
	adds r5, #2
	adds r2, #1
	cmp r2, #0x77
	bls _08056396
_080563A0:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	cmp r0, r6
	bne _080563BC
	ldr r1, _080563C4 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_080563BC:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080563C4: .4byte 0x0201774C

	thumb_func_start sub_080563C8
sub_080563C8: @ 0x080563C8
	ldr r0, _080563E4 @ =0x04000004
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _080563E2
	ldr r3, _080563E8 @ =0x04000014
	ldr r2, _080563EC @ =0x0201FDB4
	ldr r0, [r2]
	ldrh r1, [r0]
	strh r1, [r3]
	adds r0, #2
	str r0, [r2]
_080563E2:
	bx lr
	.align 2, 0
_080563E4: .4byte 0x04000004
_080563E8: .4byte 0x04000014
_080563EC: .4byte 0x0201FDB4

	thumb_func_start sub_080563F0
sub_080563F0: @ 0x080563F0
	ldr r0, _0805640C @ =0x04000004
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _0805640A
	ldr r3, _08056410 @ =0x04000016
	ldr r2, _08056414 @ =0x0201FDB4
	ldr r0, [r2]
	ldrh r1, [r0]
	strh r1, [r3]
	adds r0, #2
	str r0, [r2]
_0805640A:
	bx lr
	.align 2, 0
_0805640C: .4byte 0x04000004
_08056410: .4byte 0x04000016
_08056414: .4byte 0x0201FDB4

	thumb_func_start sub_08056418
sub_08056418: @ 0x08056418
	ldr r0, _08056444 @ =0x04000004
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _08056440
	ldr r3, _08056448 @ =0x0400001A
	ldr r2, _0805644C @ =0x0201FB28
	ldr r0, [r2]
	ldrh r1, [r0]
	strh r1, [r3]
	adds r0, #2
	str r0, [r2]
	subs r3, #6
	ldr r2, _08056450 @ =0x0201FDB4
	ldr r0, [r2]
	ldrh r1, [r0]
	strh r1, [r3]
	adds r0, #2
	str r0, [r2]
_08056440:
	bx lr
	.align 2, 0
_08056444: .4byte 0x04000004
_08056448: .4byte 0x0400001A
_0805644C: .4byte 0x0201FB28
_08056450: .4byte 0x0201FDB4

	thumb_func_start sub_08056454
sub_08056454: @ 0x08056454
	ldr r0, _08056480 @ =0x04000004
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _0805647C
	ldr r3, _08056484 @ =0x0400001A
	ldr r2, _08056488 @ =0x0201FB28
	ldr r0, [r2]
	ldrh r1, [r0]
	strh r1, [r3]
	adds r0, #2
	str r0, [r2]
	subs r3, #4
	ldr r2, _0805648C @ =0x0201FDB4
	ldr r0, [r2]
	ldrh r1, [r0]
	strh r1, [r3]
	adds r0, #2
	str r0, [r2]
_0805647C:
	bx lr
	.align 2, 0
_08056480: .4byte 0x04000004
_08056484: .4byte 0x0400001A
_08056488: .4byte 0x0201FB28
_0805648C: .4byte 0x0201FDB4

	thumb_func_start sub_08056490
sub_08056490: @ 0x08056490
	ldr r0, _080564AC @ =0x04000004
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _080564AA
	ldr r3, _080564B0 @ =0x0400001A
	ldr r2, _080564B4 @ =0x0201FB28
	ldr r0, [r2]
	ldrh r1, [r0]
	strh r1, [r3]
	adds r0, #2
	str r0, [r2]
_080564AA:
	bx lr
	.align 2, 0
_080564AC: .4byte 0x04000004
_080564B0: .4byte 0x0400001A
_080564B4: .4byte 0x0201FB28

	thumb_func_start sub_080564B8
sub_080564B8: @ 0x080564B8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	str r0, [sp]
	str r1, [sp, #4]
	adds r4, r3, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	ldr r1, _08056554 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r6, _08056558 @ =0x0201FDB8
	ldr r7, _0805655C @ =0x0201FEF8
	ldr r0, _08056560 @ =0x0201FDAC
	mov sl, r0
	cmp r4, #2
	bne _0805651A
	ldr r1, _08056564 @ =0x0201FB2C
	movs r0, #0
	adds r5, r1, #0
	ldr r3, _08056568 @ =0x0201FB20
	mov ip, r3
	ldr r3, _0805656C @ =0x0201FB24
	mov r8, r3
	ldr r3, _08056570 @ =0x0201FB28
	mov sb, r3
_080564F4:
	strh r2, [r1]
	adds r1, #2
	adds r0, #1
	cmp r0, #0x9f
	bls _080564F4
	ldr r1, _08056574 @ =0x0201FC6C
	movs r0, #0
_08056502:
	strh r2, [r1]
	adds r1, #2
	adds r0, #1
	cmp r0, #0x9f
	bls _08056502
	movs r0, #0
	mov r1, ip
	str r0, [r1]
	mov r3, r8
	str r5, [r3]
	mov r0, sb
	str r5, [r0]
_0805651A:
	adds r1, r6, #0
	movs r0, #0
_0805651E:
	strh r2, [r1]
	adds r1, #2
	adds r0, #1
	cmp r0, #0x9f
	bls _0805651E
	adds r1, r7, #0
	movs r0, #0
_0805652C:
	strh r2, [r1]
	adds r1, #2
	adds r0, #1
	cmp r0, #0x9f
	bls _0805652C
	movs r0, #0
	mov r1, sl
	str r0, [r1]
	ldr r3, _08056578 @ =0x0201FDB0
	str r6, [r3]
	ldr r0, _0805657C @ =0x0201FDB4
	str r6, [r0]
	cmp r4, #1
	beq _080565A0
	cmp r4, #1
	blo _08056580
	cmp r4, #2
	beq _080565C0
	b _080565CE
	.align 2, 0
_08056554: .4byte 0x0201774C
_08056558: .4byte 0x0201FDB8
_0805655C: .4byte 0x0201FEF8
_08056560: .4byte 0x0201FDAC
_08056564: .4byte 0x0201FB2C
_08056568: .4byte 0x0201FB20
_0805656C: .4byte 0x0201FB24
_08056570: .4byte 0x0201FB28
_08056574: .4byte 0x0201FC6C
_08056578: .4byte 0x0201FDB0
_0805657C: .4byte 0x0201FDB4
_08056580:
	bl sub_080652AC
	cmp r0, #0
	bne _08056594
	ldr r0, _08056590 @ =sub_080563C8
	bl SetOnHBlankA
	b _080565CE
	.align 2, 0
_08056590: .4byte sub_080563C8
_08056594:
	ldr r0, _0805659C @ =sub_08056418
	bl SetOnHBlankA
	b _080565CE
	.align 2, 0
_0805659C: .4byte sub_08056418
_080565A0:
	bl sub_080652AC
	cmp r0, #0
	bne _080565B4
	ldr r0, _080565B0 @ =sub_080563F0
	bl SetOnHBlankA
	b _080565CE
	.align 2, 0
_080565B0: .4byte sub_080563F0
_080565B4:
	ldr r0, _080565BC @ =sub_08056454
	bl SetOnHBlankA
	b _080565CE
	.align 2, 0
_080565BC: .4byte sub_08056454
_080565C0:
	bl sub_080652AC
	cmp r0, #0
	bne _080565CE
	ldr r0, _080565F4 @ =sub_080563F0
	bl SetOnHBlankA
_080565CE:
	ldr r0, _080565F8 @ =0x08C108A0
	movs r1, #0
	bl Proc_Start
	ldr r1, [sp]
	str r1, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	ldr r3, [sp, #4]
	str r3, [r0, #0x44]
	str r4, [r0, #0x48]
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080565F4: .4byte sub_080563F0
_080565F8: .4byte 0x08C108A0

	thumb_func_start sub_080565FC
sub_080565FC: @ 0x080565FC
	push {lr}
	adds r3, r2, #0
	movs r2, #0
	bl sub_080564B8
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805660C
sub_0805660C: @ 0x0805660C
	push {lr}
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08056618
sub_08056618: @ 0x08056618
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08056644 @ =gBmSt
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r3, _08056648 @ =0x0201FB24
	ldr r2, _0805664C @ =0x0201FDB0
	cmp r0, #0
	beq _08056690
	ldr r0, [r4, #0x48]
	cmp r0, #2
	bne _08056660
	ldr r1, _08056650 @ =0x0201FB20
	ldr r0, [r1]
	cmp r0, #1
	bne _08056658
	movs r0, #0
	str r0, [r1]
	ldr r0, _08056654 @ =0x0201FB2C
	b _0805665E
	.align 2, 0
_08056644: .4byte gBmSt
_08056648: .4byte 0x0201FB24
_0805664C: .4byte 0x0201FDB0
_08056650: .4byte 0x0201FB20
_08056654: .4byte 0x0201FB2C
_08056658:
	movs r0, #1
	str r0, [r1]
	ldr r0, _08056674 @ =0x0201FC6C
_0805665E:
	str r0, [r3]
_08056660:
	ldr r1, _08056678 @ =0x0201FDAC
	ldr r0, [r1]
	cmp r0, #1
	bne _08056684
	movs r0, #0
	str r0, [r1]
	ldr r1, _0805667C @ =0x0201FDB0
	ldr r0, _08056680 @ =0x0201FDB8
	b _0805668C
	.align 2, 0
_08056674: .4byte 0x0201FC6C
_08056678: .4byte 0x0201FDAC
_0805667C: .4byte 0x0201FDB0
_08056680: .4byte 0x0201FDB8
_08056684:
	movs r0, #1
	str r0, [r1]
	ldr r1, _080566C4 @ =0x0201FDB0
	ldr r0, _080566C8 @ =0x0201FEF8
_0805668C:
	str r0, [r1]
	adds r2, r1, #0
_08056690:
	ldr r1, _080566CC @ =0x0201FB28
	ldr r0, [r3]
	str r0, [r1]
	ldr r1, _080566D0 @ =0x0201FDB4
	ldr r0, [r2]
	str r0, [r1]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r4, #0x44]
	cmp r0, r1
	bne _080566E4
	ldr r0, _080566D4 @ =0x0201774C
	ldr r1, [r0]
	subs r1, #1
	str r1, [r0]
	bl sub_080652AC
	cmp r0, #0
	bne _080566D8
	movs r0, #0
	bl SetOnHBlankA
	b _080566DE
	.align 2, 0
_080566C4: .4byte 0x0201FDB0
_080566C8: .4byte 0x0201FEF8
_080566CC: .4byte 0x0201FB28
_080566D0: .4byte 0x0201FDB4
_080566D4: .4byte 0x0201774C
_080566D8:
	ldr r0, _080566EC @ =sub_08056490
	bl SetOnHBlankA
_080566DE:
	adds r0, r4, #0
	bl Proc_Break
_080566E4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080566EC: .4byte sub_08056490

	thumb_func_start sub_080566F0
sub_080566F0: @ 0x080566F0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r4, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r7, [sp, #0x18]
	ldr r1, _08056730 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08056734 @ =0x08C108C0
	movs r1, #3
	bl Proc_Start
	str r5, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r4, [r0, #0x2e]
	adds r4, r4, r6
	strh r4, [r0, #0x30]
	mov r1, r8
	str r1, [r0, #0x44]
	str r7, [r0, #0x48]
	ldr r1, [sp, #0x1c]
	str r1, [r0, #0x4c]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08056730: .4byte 0x0201774C
_08056734: .4byte 0x08C108C0

	thumb_func_start sub_08056738
sub_08056738: @ 0x08056738
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r5, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	movs r7, #0
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r5, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	blt _0805682C
	ldr r1, [r5, #0x44]
	ldr r2, [r5, #0x48]
	movs r6, #0x2c
	ldrsh r3, [r5, r6]
	movs r0, #0x2e
	ldrsh r4, [r5, r0]
	subs r3, r3, r4
	movs r6, #0x30
	ldrsh r0, [r5, r6]
	subs r0, r0, r4
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	adds r6, r0, #0
	ldr r0, [r5, #0x4c]
	cmp r0, #1
	beq _080567AC
	cmp r0, #1
	bgt _0805677E
	cmp r0, #0
	beq _08056784
	b _08056812
_0805677E:
	cmp r0, #2
	beq _080567D4
	b _08056812
_08056784:
	ldr r3, _080567A8 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r6, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	b _0805680E
	.align 2, 0
_080567A8: .4byte gDispIo
_080567AC:
	ldr r3, _080567D0 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x80
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r7, [r0]
	adds r0, #1
	strb r7, [r0]
	adds r0, #1
	strb r6, [r0]
	b _08056812
	.align 2, 0
_080567D0: .4byte gDispIo
_080567D4:
	movs r2, #0x2c
	ldrsh r3, [r5, r2]
	movs r0, #0x2e
	ldrsh r1, [r5, r0]
	subs r3, r3, r1
	movs r2, #0x30
	ldrsh r0, [r5, r2]
	subs r0, r0, r1
	str r0, [sp]
	movs r0, #0
	movs r1, #8
	movs r2, #0x10
	bl Interpolate
	ldr r4, _08056834 @ =gDispIo
	adds r3, r4, #0
	adds r3, #0x3c
	movs r1, #0x3f
	ldrb r2, [r3]
	ands r1, r2
	movs r2, #0x40
	orrs r1, r2
	strb r1, [r3]
	adds r1, r4, #0
	adds r1, #0x44
	strb r6, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r0, r4, #0
_0805680E:
	adds r0, #0x46
	strb r7, [r0]
_08056812:
	movs r6, #0x2c
	ldrsh r1, [r5, r6]
	movs r2, #0x30
	ldrsh r0, [r5, r2]
	cmp r1, r0
	blt _0805682C
	ldr r1, _08056838 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r5, #0
	bl Proc_Break
_0805682C:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08056834: .4byte gDispIo
_08056838: .4byte 0x0201774C

	thumb_func_start sub_0805683C
sub_0805683C: @ 0x0805683C
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, sb
	mov r4, r8
	push {r4, r5, r6}
	mov r8, r0
	mov sb, r1
	mov sl, r2
	adds r5, r3, #0
	ldr r6, [sp, #0x1c]
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	lsls r6, r6, #0x10
	lsrs r6, r6, #0x10
	ldr r1, _08056894 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08056898 @ =0x08C108D8
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	mov r0, r8
	str r0, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	strh r0, [r4, #0x2e]
	mov r0, sb
	str r0, [r4, #0x44]
	mov r0, sl
	str r0, [r4, #0x54]
	mov r0, r8
	bl GetCoreAIStruct
	strh r5, [r4, #0x32]
	strh r6, [r4, #0x3a]
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08056894: .4byte 0x0201774C
_08056898: .4byte 0x08C108D8

	thumb_func_start sub_0805689C
sub_0805689C: @ 0x0805689C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r5, r0, #0
	ldr r0, _0805691C @ =0x0201FB20
	ldr r0, [r0]
	ldr r1, _08056920 @ =0x0201FB2C
	mov r8, r1
	cmp r0, #0
	bne _080568B6
	ldr r2, _08056924 @ =0x0201FC6C
	mov r8, r2
_080568B6:
	ldr r4, [r5, #0x54]
	movs r7, #0x2e
	ldrsh r0, [r5, r7]
	lsls r0, r0, #1
	adds r0, r0, r4
	ldrh r7, [r0]
	adds r0, r7, #0
	bl sub_08013970
	adds r6, r0, #0
	movs r1, #0x2e
	ldrsh r0, [r5, r1]
	lsls r0, r0, #1
	adds r0, r0, r4
	ldr r1, _08056928 @ =0x0000FFFF
	ldrh r0, [r0, #2]
	cmp r0, r1
	beq _080568E0
	ldrh r0, [r5, #0x2e]
	adds r0, #1
	strh r0, [r5, #0x2e]
_080568E0:
	ldrh r1, [r5, #0x3a]
	subs r0, r1, r7
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r0, #0
	bge _080568EE
	movs r2, #0
_080568EE:
	adds r0, r7, r1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xa0
	ble _080568FC
	movs r1, #0xa0
_080568FC:
	movs r3, #0
	lsls r0, r2, #0x10
	ldr r2, [r5, #0x44]
	mov ip, r2
	asrs r0, r0, #0x10
	mov sb, r0
	lsls r0, r1, #0x10
	asrs r4, r0, #0x10
_0805690C:
	cmp sb, r3
	bhi _08056914
	cmp r4, r3
	bhs _0805692C
_08056914:
	movs r0, #0
	mov r7, r8
	strh r0, [r7]
	b _0805695C
	.align 2, 0
_0805691C: .4byte 0x0201FB20
_08056920: .4byte 0x0201FB2C
_08056924: .4byte 0x0201FC6C
_08056928: .4byte 0x0000FFFF
_0805692C:
	ldrh r2, [r5, #0x32]
	ldrh r1, [r6]
	adds r0, r2, r1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	cmp r0, #0
	bge _0805693C
	movs r1, #0
_0805693C:
	ldrh r7, [r6, #2]
	adds r0, r2, r7
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xf0
	ble _0805694C
	movs r2, #0xf0
_0805694C:
	lsls r1, r1, #0x10
	asrs r1, r1, #8
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	orrs r0, r1
	mov r1, r8
	strh r0, [r1]
	adds r6, #4
_0805695C:
	movs r2, #2
	add r8, r2
	adds r3, #1
	cmp r3, #0x9f
	bls _0805690C
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	movs r3, #0
	strh r0, [r5, #0x2c]
	movs r4, #0x2c
	ldrsh r0, [r5, r4]
	cmp r0, ip
	bne _080569A2
	ldr r1, _080569B0 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	ldr r2, _080569B4 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r7, [r1]
	ands r0, r7
	strb r0, [r1]
	adds r1, #8
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x45
	strb r3, [r0]
	adds r0, #1
	strb r3, [r0]
	adds r0, r5, #0
	bl Proc_Break
_080569A2:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080569B0: .4byte 0x0201774C
_080569B4: .4byte gDispIo

	thumb_func_start sub_080569B8
sub_080569B8: @ 0x080569B8
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r6, r0, #0
	mov r8, r1
	adds r5, r2, #0
	ldr r1, _080569F4 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080569F8 @ =0x08C108F0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r6, [r4, #0x5c]
	adds r0, r5, #0
	movs r1, #0
	bl sub_0804EF18
	str r0, [r4, #0x60]
	movs r0, #0
	strh r0, [r4, #0x2c]
	mov r0, r8
	strh r0, [r4, #0x2e]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080569F4: .4byte 0x0201774C
_080569F8: .4byte 0x08C108F0

	thumb_func_start sub_080569FC
sub_080569FC: @ 0x080569FC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	ldr r5, _08056A8C @ =0x02017760
	ldrh r1, [r5]
	ldrh r2, [r5, #2]
	movs r0, #2
	bl SetBgOffset
	ldr r4, _08056A90 @ =0x02000038
	ldrh r0, [r5]
	ldrh r2, [r4]
	adds r1, r0, r2
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldrh r3, [r5, #2]
	ldrh r0, [r4, #2]
	adds r2, r3, r0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #0
	bl SetBgOffset
	ldrh r1, [r5]
	ldrh r2, [r4]
	adds r0, r1, r2
	rsbs r0, r0, #0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldrh r3, [r5, #2]
	ldrh r2, [r4, #2]
	adds r1, r3, r2
	rsbs r1, r1, #0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sub_0804CC8C
	ldrh r3, [r5]
	ldrh r1, [r4]
	adds r0, r3, r1
	rsbs r0, r0, #0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r2, [r5, #2]
	ldrh r4, [r4, #2]
	adds r1, r2, r4
	rsbs r1, r1, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	bl sub_0804D5D8
	bl sub_080652AC
	cmp r0, #0
	beq _08056A7A
	ldrh r1, [r5]
	ldrh r2, [r5, #2]
	movs r0, #3
	bl SetBgOffset
_08056A7A:
	bl sub_080652AC
	cmp r0, #0
	beq _08056A98
	ldr r3, _08056A94 @ =0x02000028
	ldrh r4, [r3]
	ldrh r1, [r5]
	subs r0, r4, r1
	b _08056AA0
	.align 2, 0
_08056A8C: .4byte 0x02017760
_08056A90: .4byte 0x02000038
_08056A94: .4byte 0x02000028
_08056A98:
	ldr r3, _08056BB0 @ =0x02000028
	ldrh r1, [r3]
	ldrh r2, [r5]
	adds r0, r1, r2
_08056AA0:
	ldr r2, _08056BB4 @ =0x0201FB00
	ldr r1, [r2]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	ldr r1, _08056BB8 @ =0x0200002C
	ldrh r4, [r1]
	ldrh r5, [r5, #2]
	subs r0, r4, r5
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	mov sb, r3
	mov sl, r1
	ldr r2, _08056BBC @ =0x02017760
	mov r1, sb
	ldrh r1, [r1, #2]
	ldrh r3, [r2]
	adds r0, r1, r3
	ldr r4, _08056BB4 @ =0x0201FB00
	ldr r1, [r4]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	mov r1, sl
	ldrh r1, [r1, #2]
	ldrh r2, [r2, #2]
	subs r0, r1, r2
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	lsls r1, r7, #0x10
	asrs r1, r1, #0x10
	lsls r2, r6, #0x10
	asrs r2, r2, #0x10
	movs r0, #0
	bl sub_08050FB4
	lsls r1, r5, #0x10
	asrs r1, r1, #0x10
	lsls r2, r4, #0x10
	asrs r2, r2, #0x10
	movs r0, #1
	bl sub_08050FB4
	mov r2, r8
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	ldrh r3, [r2, #0x2e]
	lsls r1, r3, #0x10
	cmp r0, r1
	ble _08056BA2
	ldr r1, _08056BC0 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r4, _08056BC4 @ =0x02000038
	ldrh r1, [r4]
	ldrh r2, [r4, #2]
	movs r0, #0
	bl SetBgOffset
	ldrh r1, [r4]
	rsbs r0, r1, #0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldrh r2, [r4, #2]
	rsbs r1, r2, #0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sub_0804CC8C
	ldrh r3, [r4]
	rsbs r0, r3, #0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r4, [r4, #2]
	rsbs r1, r4, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	bl sub_0804D5D8
	bl sub_080652AC
	cmp r0, #0
	beq _08056B60
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
_08056B60:
	ldr r4, _08056BB4 @ =0x0201FB00
	ldr r0, [r4]
	mov r2, sb
	ldrh r2, [r2]
	subs r1, r2, r0
	mov r3, sb
	ldrh r3, [r3, #2]
	subs r0, r3, r0
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	mov r0, sl
	ldrh r4, [r0, #2]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r3, #0
	ldrsh r2, [r0, r3]
	movs r0, #0
	bl sub_08050FB4
	lsls r1, r5, #0x10
	asrs r1, r1, #0x10
	lsls r2, r4, #0x10
	asrs r2, r2, #0x10
	movs r0, #1
	bl sub_08050FB4
	mov r4, r8
	ldr r0, [r4, #0x60]
	bl Proc_End
	mov r0, r8
	bl Proc_Break
_08056BA2:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08056BB0: .4byte 0x02000028
_08056BB4: .4byte 0x0201FB00
_08056BB8: .4byte 0x0200002C
_08056BBC: .4byte 0x02017760
_08056BC0: .4byte 0x0201774C
_08056BC4: .4byte 0x02000038

	thumb_func_start sub_08056BC8
sub_08056BC8: @ 0x08056BC8
	push {r4, lr}
	adds r4, r0, #0
	bl SpellFx_Begin
	bl SpellFx_ClearBG1Position
	ldr r0, _08056BE8 @ =0x08C10908
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08056BE8: .4byte 0x08C10908

	thumb_func_start sub_08056BEC
sub_08056BEC: @ 0x08056BEC
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x5c]
	bl GetCoreAIStruct
	adds r4, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	movs r6, #0
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08056C12
	movs r0, #9
	ldrh r1, [r4, #0x10]
	orrs r0, r1
	strh r0, [r4, #0x10]
	b _08056C3A
_08056C12:
	cmp r0, #0xa
	bne _08056C3A
	adds r0, r4, #0
	bl GetSomeAnimIndex
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r1, #1
	rsbs r1, r1, #0
	cmp r0, r1
	beq _08056C30
	movs r0, #2
	ldrh r1, [r4, #0x10]
	orrs r0, r1
	strh r0, [r4, #0x10]
_08056C30:
	bl SpellFx_Finish
	adds r0, r5, #0
	bl Proc_Break
_08056C3A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_08056C40
sub_08056C40: @ 0x08056C40
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl SpellFx_ClearBG1Position
	ldr r0, _08056C74 @ =0x08C10920
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08056C74: .4byte 0x08C10920

	thumb_func_start sub_08056C78
sub_08056C78: @ 0x08056C78
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x5c]
	bl GetCoreAIStruct
	adds r6, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08056CF6
	ldr r0, [r5, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
	ldr r0, [r5, #0x5c]
	bl sub_08056D14
	ldrh r0, [r5, #0x2c]
	cmp r0, #1
	bne _08056CF6
	movs r0, #9
	ldrh r1, [r6, #0x10]
	orrs r0, r1
	strh r0, [r6, #0x10]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r6, #0
	bl StartBattleAnimHitEffectsDefault
	adds r0, r6, #0
	bl sub_080684B0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #2
	beq _08056CE8
	ldr r0, [r5, #0x5c]
	bl sub_08054F4C
	cmp r0, #1
	bne _08056CDC
	adds r0, r6, #0
	bl NewEfxPierceCritical
	b _08056CE8
_08056CDC:
	ldrb r0, [r4]
	cmp r0, #0
	bne _08056D0C
	ldr r0, [r5, #0x5c]
	bl NewEfxNormalEffect
_08056CE8:
	ldrb r0, [r4]
	cmp r0, #0
	bne _08056D0C
	adds r0, r6, #0
	bl sub_08068500
	b _08056D0C
_08056CF6:
	movs r1, #0x2c
	ldrsh r0, [r5, r1]
	cmp r0, #0x46
	beq _08056D0C
	cmp r0, #0x50
	bne _08056D0C
	bl SpellFx_Finish
	adds r0, r5, #0
	bl Proc_Break
_08056D0C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08056D14
sub_08056D14: @ 0x08056D14
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r1, _08056D58 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08056D5C @ =0x08C10938
	movs r1, #3
	bl Proc_Start
	adds r6, r0, #0
	str r4, [r6, #0x5c]
	movs r0, #0
	strh r0, [r6, #0x2c]
	ldr r1, _08056D60 @ =0x08C14534
	ldr r2, _08056D64 @ =0x08C1419C
	ldr r3, _08056D68 @ =0x08C14590
	ldr r0, _08056D6C @ =0x08C141F8
	str r0, [sp]
	adds r0, r4, #0
	bl sub_08050BF8
	adds r5, r0, #0
	str r5, [r6, #0x60]
	adds r0, r4, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _08056D70
	ldrh r0, [r5, #2]
	adds r0, #0x48
	b _08056D74
	.align 2, 0
_08056D58: .4byte 0x0201774C
_08056D5C: .4byte 0x08C10938
_08056D60: .4byte 0x08C14534
_08056D64: .4byte 0x08C1419C
_08056D68: .4byte 0x08C14590
_08056D6C: .4byte 0x08C141F8
_08056D70:
	ldrh r0, [r5, #2]
	subs r0, #0x48
_08056D74:
	strh r0, [r5, #2]
	ldr r0, _08056D84 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _08056D88
	movs r0, #0x23
	b _08056D8A
	.align 2, 0
_08056D84: .4byte gEkrDistanceType
_08056D88:
	movs r0, #0xa
_08056D8A:
	strh r0, [r6, #0x2e]
	ldr r0, [r6, #0x5c]
	ldr r1, [r6, #0x60]
	bl sub_08056EFC
	str r0, [r6, #0x64]
	ldr r0, _08056DB0 @ =0x081EF9F8
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _08056DB4 @ =0x081EF5F8
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08056DB0: .4byte 0x081EF9F8
_08056DB4: .4byte 0x081EF5F8

	thumb_func_start sub_08056DB8
sub_08056DB8: @ 0x08056DB8
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _08056E0A
	ldr r1, _08056DF8 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	ldr r0, [r4, #0x60]
	bl AnimDelete
	ldr r0, _08056DFC @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _08056E04
	ldr r0, _08056E00 @ =Unk_02017758
	movs r1, #1
	str r1, [r0]
	ldr r0, [r4, #0x64]
	bl Proc_End
	adds r0, r4, #0
	bl Proc_End
	b _08056E0A
	.align 2, 0
_08056DF8: .4byte 0x0201774C
_08056DFC: .4byte gEkrDistanceType
_08056E00: .4byte Unk_02017758
_08056E04:
	adds r0, r4, #0
	bl Proc_Break
_08056E0A:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_08056E10
sub_08056E10: @ 0x08056E10
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08056E34 @ =0x02017754
	movs r0, #0
	str r0, [r1]
	ldr r0, [r4, #0x64]
	bl Proc_End
	ldr r0, [r4, #0x5c]
	bl sub_08056E38
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08056E34: .4byte 0x02017754

	thumb_func_start sub_08056E38
sub_08056E38: @ 0x08056E38
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r1, _08056E78 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08056E7C @ =0x08C10958
	movs r1, #3
	bl Proc_Start
	adds r6, r0, #0
	str r4, [r6, #0x5c]
	movs r0, #0
	strh r0, [r6, #0x2c]
	ldr r3, _08056E80 @ =0x08C145B0
	ldr r2, _08056E84 @ =0x08C14218
	str r2, [sp]
	adds r0, r4, #0
	adds r1, r3, #0
	bl sub_08050BF8
	adds r5, r0, #0
	str r5, [r6, #0x60]
	adds r0, r4, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _08056E88
	ldrh r0, [r5, #2]
	adds r0, #0x48
	b _08056E8C
	.align 2, 0
_08056E78: .4byte 0x0201774C
_08056E7C: .4byte 0x08C10958
_08056E80: .4byte 0x08C145B0
_08056E84: .4byte 0x08C14218
_08056E88:
	ldrh r0, [r5, #2]
	subs r0, #0x48
_08056E8C:
	strh r0, [r5, #2]
	ldr r0, _08056EB4 @ =0x081EF9F8
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _08056EB8 @ =0x081EF5F8
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	ldr r0, [r6, #0x5c]
	ldr r1, [r6, #0x60]
	bl sub_08056EFC
	str r0, [r6, #0x64]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08056EB4: .4byte 0x081EF9F8
_08056EB8: .4byte 0x081EF5F8

	thumb_func_start sub_08056EBC
sub_08056EBC: @ 0x08056EBC
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x11
	bne _08056EEE
	ldr r1, _08056EF4 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	ldr r1, _08056EF8 @ =Unk_02017758
	movs r0, #1
	str r0, [r1]
	ldr r0, [r4, #0x64]
	bl Proc_End
	ldr r0, [r4, #0x60]
	bl AnimDelete
	adds r0, r4, #0
	bl Proc_Break
_08056EEE:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08056EF4: .4byte 0x0201774C
_08056EF8: .4byte Unk_02017758

	thumb_func_start sub_08056EFC
sub_08056EFC: @ 0x08056EFC
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	ldr r1, _08056F38 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08056F3C @ =0x08C10970
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r6, [r4, #0x5c]
	str r5, [r4, #0x60]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #1
	strh r0, [r4, #0x2e]
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #2
	ldrsh r2, [r6, r0]
	movs r0, #0xcd
	movs r3, #1
	bl PlaySFX
	adds r0, r4, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_08056F38: .4byte 0x0201774C
_08056F3C: .4byte 0x08C10970

	thumb_func_start sub_08056F40
sub_08056F40: @ 0x08056F40
	ldr r1, _08056F4C @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_08056F4C: .4byte 0x0201774C

	thumb_func_start sub_08056F50
sub_08056F50: @ 0x08056F50
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #8
	bne _08056F92
	ldr r0, [r4, #0x60]
	bl sub_08068938
	adds r2, r0, #0
	ldr r0, [r4, #0x60]
	ldrh r0, [r0, #2]
	adds r2, r0, r2
	movs r1, #0x80
	lsls r1, r1, #1
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	movs r0, #0xcd
	movs r3, #1
	bl PlaySFX
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldrh r1, [r4, #0x2e]
	movs r2, #0x2e
	ldrsh r0, [r4, r2]
	cmp r0, #8
	bgt _08056F92
	adds r0, r1, #1
	strh r0, [r4, #0x2e]
_08056F92:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_08056F98
sub_08056F98: @ 0x08056F98
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl SpellFx_ClearBG1Position
	ldr r0, _08056FCC @ =0x08C10990
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08056FCC: .4byte 0x08C10990

	thumb_func_start sub_08056FD0
sub_08056FD0: @ 0x08056FD0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x5c]
	bl GetCoreAIStruct
	adds r6, r0, #0
	bl GetSpellAnimationStartFrame
	adds r4, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08057066
	ldr r0, [r5, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
	ldr r0, [r5, #0x5c]
	bl sub_08057088
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r5, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xcc
	movs r3, #1
	bl PlaySFX
	ldrh r0, [r5, #0x2c]
	cmp r0, #1
	bne _08057066
	movs r0, #9
	ldrh r1, [r6, #0x10]
	orrs r0, r1
	strh r0, [r6, #0x10]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r6, #0
	bl StartBattleAnimHitEffectsDefault
	adds r0, r6, #0
	bl sub_080684B0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #2
	beq _08057058
	ldr r0, [r5, #0x5c]
	bl sub_08054F4C
	cmp r0, #1
	bne _0805704C
	adds r0, r6, #0
	bl NewEfxPierceCritical
	b _08057058
_0805704C:
	ldrb r0, [r4]
	cmp r0, #0
	bne _08057082
	ldr r0, [r5, #0x5c]
	bl NewEfxNormalEffect
_08057058:
	ldrb r0, [r4]
	cmp r0, #0
	bne _08057082
	adds r0, r6, #0
	bl sub_08068500
	b _08057082
_08057066:
	movs r3, #0x2c
	ldrsh r1, [r5, r3]
	adds r0, r4, #0
	adds r0, #9
	cmp r1, r0
	beq _08057082
	adds r0, #1
	cmp r1, r0
	bne _08057082
	bl SpellFx_Finish
	adds r0, r5, #0
	bl Proc_Break
_08057082:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_08057088
sub_08057088: @ 0x08057088
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _080570D0 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080570D4 @ =0x08C109A8
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r1, _080570D8 @ =0x08C146DC
	ldr r2, _080570DC @ =0x08C14650
	ldr r3, _080570E0 @ =0x08C146EC
	ldr r0, _080570E4 @ =0x08C14660
	str r0, [sp]
	adds r0, r5, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	ldr r0, _080570E8 @ =0x081EF9F8
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _080570EC @ =0x081EFA18
	movs r1, #0x60
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080570D0: .4byte 0x0201774C
_080570D4: .4byte 0x08C109A8
_080570D8: .4byte 0x08C146DC
_080570DC: .4byte 0x08C14650
_080570E0: .4byte 0x08C146EC
_080570E4: .4byte 0x08C14660
_080570E8: .4byte 0x081EF9F8
_080570EC: .4byte 0x081EFA18

	thumb_func_start sub_080570F0
sub_080570F0: @ 0x080570F0
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #4
	bne _08057116
	ldr r0, _0805711C @ =0x0201774C
	ldr r1, [r0]
	subs r1, #1
	str r1, [r0]
	ldr r0, [r4, #0x60]
	bl AnimDelete
	adds r0, r4, #0
	bl Proc_Break
_08057116:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805711C: .4byte 0x0201774C

	thumb_func_start sub_08057120
sub_08057120: @ 0x08057120
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl SpellFx_ClearBG1Position
	ldr r0, _08057170 @ =0x08C109C0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	adds r0, r5, #0
	movs r1, #0
	bl sub_080575BC
	ldr r0, _08057174 @ =0x081EFC84
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _08057178 @ =0x081EFA54
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08057170: .4byte 0x08C109C0
_08057174: .4byte 0x081EFC84
_08057178: .4byte 0x081EFA54

	thumb_func_start sub_0805717C
sub_0805717C: @ 0x0805717C
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl SpellFx_ClearBG1Position
	ldr r0, _080571CC @ =0x08C109C0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	adds r0, r5, #0
	movs r1, #1
	bl sub_080575BC
	ldr r0, _080571D0 @ =0x081EFEC0
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _080571D4 @ =0x081EFCA4
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080571CC: .4byte 0x08C109C0
_080571D0: .4byte 0x081EFEC0
_080571D4: .4byte 0x081EFCA4

	thumb_func_start sub_080571D8
sub_080571D8: @ 0x080571D8
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl SpellFx_ClearBG1Position
	ldr r0, _08057228 @ =0x08C109C0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	adds r0, r5, #0
	movs r1, #0
	bl sub_080575BC
	ldr r0, _0805722C @ =0x081F00F8
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _08057230 @ =0x081EFEE0
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08057228: .4byte 0x08C109C0
_0805722C: .4byte 0x081F00F8
_08057230: .4byte 0x081EFEE0

	thumb_func_start sub_08057234
sub_08057234: @ 0x08057234
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl SpellFx_ClearBG1Position
	ldr r0, _08057284 @ =0x08C109C0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	adds r0, r5, #0
	movs r1, #1
	bl sub_080575BC
	ldr r0, _08057288 @ =0x081F0334
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805728C @ =0x081F0118
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08057284: .4byte 0x08C109C0
_08057288: .4byte 0x081F0334
_0805728C: .4byte 0x081F0118

	thumb_func_start sub_08057290
sub_08057290: @ 0x08057290
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl SpellFx_ClearBG1Position
	ldr r0, _080572E0 @ =0x08C109C0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	adds r0, r5, #0
	movs r1, #1
	bl sub_080575BC
	ldr r0, _080572E4 @ =0x081F0580
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _080572E8 @ =0x081F0354
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080572E0: .4byte 0x08C109C0
_080572E4: .4byte 0x081F0580
_080572E8: .4byte 0x081F0354

	thumb_func_start sub_080572EC
sub_080572EC: @ 0x080572EC
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl SpellFx_ClearBG1Position
	ldr r0, _0805733C @ =0x08C109C0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	adds r0, r5, #0
	movs r1, #1
	bl sub_080575BC
	ldr r0, _08057340 @ =0x081F07E8
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _08057344 @ =0x081F05A0
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805733C: .4byte 0x08C109C0
_08057340: .4byte 0x081F07E8
_08057344: .4byte 0x081F05A0

	thumb_func_start sub_08057348
sub_08057348: @ 0x08057348
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl SpellFx_ClearBG1Position
	ldr r0, _08057398 @ =0x08C109C0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	adds r0, r5, #0
	movs r1, #1
	bl sub_080575BC
	ldr r0, _0805739C @ =0x081F0A40
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _080573A0 @ =0x081F0808
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08057398: .4byte 0x08C109C0
_0805739C: .4byte 0x081F0A40
_080573A0: .4byte 0x081F0808

	thumb_func_start sub_080573A4
sub_080573A4: @ 0x080573A4
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl SpellFx_ClearBG1Position
	ldr r0, _080573F4 @ =0x08C109C0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	adds r0, r5, #0
	movs r1, #1
	bl sub_080575BC
	ldr r0, _080573F8 @ =0x081F0CC4
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _080573FC @ =0x081F0A60
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080573F4: .4byte 0x08C109C0
_080573F8: .4byte 0x081F0CC4
_080573FC: .4byte 0x081F0A60

	thumb_func_start sub_08057400
sub_08057400: @ 0x08057400
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl SpellFx_ClearBG1Position
	ldr r0, _08057450 @ =0x08C109C0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	adds r0, r5, #0
	movs r1, #1
	bl sub_080575BC
	ldr r0, _08057454 @ =0x081F0F54
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _08057458 @ =0x081F0CE4
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08057450: .4byte 0x08C109C0
_08057454: .4byte 0x081F0F54
_08057458: .4byte 0x081F0CE4

	thumb_func_start sub_0805745C
sub_0805745C: @ 0x0805745C
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl SpellFx_ClearBG1Position
	ldr r0, _080574AC @ =0x08C109C0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	adds r0, r5, #0
	movs r1, #1
	bl sub_080575BC
	ldr r0, _080574B0 @ =0x081F11A4
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _080574B4 @ =0x081F0F74
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080574AC: .4byte 0x08C109C0
_080574B0: .4byte 0x081F11A4
_080574B4: .4byte 0x081F0F74

	thumb_func_start sub_080574B8
sub_080574B8: @ 0x080574B8
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl SpellFx_ClearBG1Position
	ldr r0, _08057508 @ =0x08C109C0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	adds r0, r5, #0
	movs r1, #1
	bl sub_080575BC
	ldr r0, _0805750C @ =0x081F13E0
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _08057510 @ =0x081F11C4
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08057508: .4byte 0x08C109C0
_0805750C: .4byte 0x081F13E0
_08057510: .4byte 0x081F11C4

	thumb_func_start sub_08057514
sub_08057514: @ 0x08057514
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805759E
	ldr r0, [r5, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r5, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xca
	movs r3, #1
	bl PlaySFX
	ldrh r0, [r5, #0x2c]
	cmp r0, #1
	bne _0805759E
	ldr r0, [r5, #0x5c]
	bl GetCoreAIStruct
	adds r6, r0, #0
	movs r0, #9
	ldrh r1, [r6, #0x10]
	orrs r0, r1
	strh r0, [r6, #0x10]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r6, #0
	bl StartBattleAnimHitEffectsDefault
	adds r0, r6, #0
	bl sub_080684B0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #2
	beq _08057590
	ldr r0, [r5, #0x5c]
	bl sub_08054F4C
	cmp r0, #1
	bne _08057584
	adds r0, r6, #0
	bl NewEfxPierceCritical
	b _08057590
_08057584:
	ldrb r0, [r4]
	cmp r0, #0
	bne _080575B4
	ldr r0, [r5, #0x5c]
	bl NewEfxNormalEffect
_08057590:
	ldrb r0, [r4]
	cmp r0, #0
	bne _080575B4
	adds r0, r6, #0
	bl sub_08068500
	b _080575B4
_0805759E:
	movs r3, #0x2c
	ldrsh r0, [r5, r3]
	cmp r0, #0xe
	beq _080575B4
	cmp r0, #0x10
	bne _080575B4
	bl SpellFx_Finish
	adds r0, r5, #0
	bl Proc_Break
_080575B4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080575BC
sub_080575BC: @ 0x080575BC
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r4, r1, #0
	ldr r1, _080575E8 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080575EC @ =0x08C109D8
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r6, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	cmp r4, #0
	bne _080575F8
	ldr r2, _080575F0 @ =0x08C148D0
	ldr r3, _080575F4 @ =0x08C14B24
	b _080575FC
	.align 2, 0
_080575E8: .4byte 0x0201774C
_080575EC: .4byte 0x08C109D8
_080575F0: .4byte 0x08C148D0
_080575F4: .4byte 0x08C14B24
_080575F8:
	ldr r2, _0805761C @ =0x08C14D84
	ldr r3, _08057620 @ =0x08C14FE4
_080575FC:
	str r2, [sp]
	adds r0, r6, #0
	adds r1, r3, #0
	bl sub_08050BF8
	adds r4, r0, #0
	str r4, [r5, #0x60]
	adds r0, r6, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _08057624
	ldrh r0, [r4, #2]
	adds r0, #0x38
	b _08057628
	.align 2, 0
_0805761C: .4byte 0x08C14D84
_08057620: .4byte 0x08C14FE4
_08057624:
	ldrh r0, [r4, #2]
	subs r0, #0x38
_08057628:
	strh r0, [r4, #2]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08057634
sub_08057634: @ 0x08057634
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xc
	bne _0805765A
	ldr r0, _08057660 @ =0x0201774C
	ldr r1, [r0]
	subs r1, #1
	str r1, [r0]
	ldr r0, [r4, #0x60]
	bl AnimDelete
	adds r0, r4, #0
	bl Proc_Break
_0805765A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08057660: .4byte 0x0201774C

	thumb_func_start sub_08057664
sub_08057664: @ 0x08057664
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl SpellFx_ClearBG1Position
	ldr r0, _08057698 @ =0x08C109F0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08057698: .4byte 0x08C109F0

	thumb_func_start sub_0805769C
sub_0805769C: @ 0x0805769C
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r5, r0, #0
	ldr r0, [r5, #0x5c]
	bl GetCoreAIStruct
	adds r4, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	movs r7, #0
	movs r6, #0
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x27
	bne _08057730
	adds r0, r4, #0
	movs r1, #0
	bl sub_080577AC
	adds r0, r4, #0
	movs r1, #0
	bl sub_08057888
	adds r0, r4, #0
	movs r1, #0x82
	movs r2, #1
	bl sub_080565FC
	adds r0, r4, #0
	movs r1, #0x64
	bl sub_0805618C
	ldr r3, _08057764 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r7, [r0]
	adds r0, #1
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r7, [r0]
	str r1, [sp]
	str r6, [sp, #4]
	adds r0, r4, #0
	movs r1, #0
	movs r2, #8
	movs r3, #0
	bl sub_080566F0
	str r6, [sp]
	str r6, [sp, #4]
	adds r0, r4, #0
	movs r1, #0x3c
	movs r2, #0x28
	movs r3, #0x10
	bl sub_080566F0
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #2
	ldrsh r2, [r4, r0]
	movs r0, #0xef
	movs r3, #1
	bl PlaySFX
_08057730:
	movs r1, #0x2c
	ldrsh r0, [r5, r1]
	cmp r0, #0x8b
	bne _0805778C
	movs r0, #9
	ldrh r1, [r4, #0x10]
	orrs r0, r1
	strh r0, [r4, #0x10]
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r1, [r0]
	adds r0, r4, #0
	bl sub_08050BBC
	adds r0, r4, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _08057770
	ldr r0, _08057768 @ =0x02000054
	ldr r0, [r0]
	ldr r1, _0805776C @ =0x02022B40
	movs r2, #8
	bl CpuFastSet
	b _0805777C
	.align 2, 0
_08057764: .4byte gDispIo
_08057768: .4byte 0x02000054
_0805776C: .4byte 0x02022B40
_08057770:
	ldr r0, _08057784 @ =0x02000054
	ldr r0, [r0, #4]
	ldr r1, _08057788 @ =0x02022B80
	movs r2, #8
	bl CpuFastSet
_0805777C:
	adds r0, r4, #0
	bl sub_0804FFCC
	b _080577A2
	.align 2, 0
_08057784: .4byte 0x02000054
_08057788: .4byte 0x02022B80
_0805778C:
	cmp r0, #0xb3
	bne _080577A2
	movs r0, #2
	ldrh r1, [r4, #0x10]
	orrs r0, r1
	strh r0, [r4, #0x10]
	bl SpellFx_Finish
	adds r0, r5, #0
	bl Proc_Break
_080577A2:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080577AC
sub_080577AC: @ 0x080577AC
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r1, _080577F4 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080577F8 @ =0x08C10A08
	movs r1, #3
	bl Proc_Start
	str r5, [r0, #0x5c]
	movs r2, #0
	strh r2, [r0, #0x2c]
	str r2, [r0, #0x44]
	ldr r1, _080577FC @ =0x081EDC70
	str r1, [r0, #0x48]
	ldr r1, _08057800 @ =0x08C10A20
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r1, _08057804 @ =0x08C10A8C
	str r1, [r0, #0x54]
	str r2, [r0, #0x58]
	lsls r4, r4, #5
	ldr r0, _08057808 @ =0x082E2700
	adds r4, r4, r0
	adds r0, r4, #0
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_SetSomeColorEffect
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080577F4: .4byte 0x0201774C
_080577F8: .4byte 0x08C10A08
_080577FC: .4byte 0x081EDC70
_08057800: .4byte 0x08C10A20
_08057804: .4byte 0x08C10A8C
_08057808: .4byte 0x082E2700

	thumb_func_start sub_0805780C
sub_0805780C: @ 0x0805780C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _0805785C
	ldr r7, [r4, #0x4c]
	ldr r0, [r4, #0x50]
	mov r8, r0
	ldr r0, [r4, #0x54]
	lsls r5, r1, #2
	adds r6, r5, r0
	ldr r0, [r4, #0x58]
	ldr r2, [r6]
	cmp r0, r2
	beq _08057846
	movs r1, #0x80
	lsls r1, r1, #6
	adds r0, r2, #0
	bl SpellFx_RegisterBgGfx
_08057846:
	ldr r0, [r6]
	str r0, [r4, #0x58]
	ldr r0, [r4, #0x5c]
	adds r1, r5, r7
	ldr r1, [r1]
	mov r3, r8
	adds r2, r5, r3
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	b _0805787A
_0805785C:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0805787A
	bl SpellFx_ClearBG1
	ldr r1, _08057884 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_0805787A:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08057884: .4byte 0x0201774C

	thumb_func_start sub_08057888
sub_08057888: @ 0x08057888
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r5, r1, #0
	ldr r1, _080578DC @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080578E0 @ =0x08C10AF8
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r6, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x38
	strh r0, [r4, #0x2e]
	ldr r3, _080578E4 @ =0x08C48338
	str r3, [sp]
	adds r0, r6, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	lsls r5, r5, #5
	ldr r0, _080578E8 @ =0x082E2700
	adds r5, r5, r0
	adds r0, r5, #0
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _080578EC @ =0x082E3E64
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080578DC: .4byte 0x0201774C
_080578E0: .4byte 0x08C10AF8
_080578E4: .4byte 0x08C48338
_080578E8: .4byte 0x082E2700
_080578EC: .4byte 0x082E3E64

	thumb_func_start sub_080578F0
sub_080578F0: @ 0x080578F0
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08057918
	ldr r0, [r4, #0x60]
	bl AnimDelete
	ldr r1, _08057920 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08057918:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08057920: .4byte 0x0201774C

	thumb_func_start sub_08057924
sub_08057924: @ 0x08057924
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl SpellFx_ClearBG1Position
	ldr r0, _08057958 @ =0x08C10B10
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08057958: .4byte 0x08C10B10

	thumb_func_start sub_0805795C
sub_0805795C: @ 0x0805795C
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r5, r0, #0
	ldr r0, [r5, #0x5c]
	bl GetCoreAIStruct
	adds r4, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	movs r7, #0
	movs r6, #0
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x19
	bne _080579F0
	adds r0, r4, #0
	movs r1, #0
	bl sub_080577AC
	adds r0, r4, #0
	movs r1, #0
	bl sub_08057888
	adds r0, r4, #0
	movs r1, #0x82
	movs r2, #1
	bl sub_080565FC
	adds r0, r4, #0
	movs r1, #0x64
	bl sub_0805618C
	ldr r3, _08057A24 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r7, [r0]
	adds r0, #1
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r7, [r0]
	str r1, [sp]
	str r6, [sp, #4]
	adds r0, r4, #0
	movs r1, #0
	movs r2, #8
	movs r3, #0
	bl sub_080566F0
	str r6, [sp]
	str r6, [sp, #4]
	adds r0, r4, #0
	movs r1, #0x3c
	movs r2, #0x28
	movs r3, #0x10
	bl sub_080566F0
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #2
	ldrsh r2, [r4, r0]
	movs r0, #0xef
	movs r3, #1
	bl PlaySFX
_080579F0:
	movs r1, #0x2c
	ldrsh r0, [r5, r1]
	cmp r0, #0x7d
	bne _08057A4C
	movs r0, #9
	ldrh r1, [r4, #0x10]
	orrs r0, r1
	strh r0, [r4, #0x10]
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r1, [r0]
	adds r0, r4, #0
	bl sub_08050BBC
	adds r0, r4, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _08057A30
	ldr r0, _08057A28 @ =0x02000054
	ldr r0, [r0]
	ldr r1, _08057A2C @ =0x02022B40
	movs r2, #8
	bl CpuFastSet
	b _08057A3C
	.align 2, 0
_08057A24: .4byte gDispIo
_08057A28: .4byte 0x02000054
_08057A2C: .4byte 0x02022B40
_08057A30:
	ldr r0, _08057A44 @ =0x02000054
	ldr r0, [r0, #4]
	ldr r1, _08057A48 @ =0x02022B80
	movs r2, #8
	bl CpuFastSet
_08057A3C:
	adds r0, r4, #0
	bl sub_0804FFCC
	b _08057A62
	.align 2, 0
_08057A44: .4byte 0x02000054
_08057A48: .4byte 0x02022B80
_08057A4C:
	cmp r0, #0xa5
	bne _08057A62
	movs r0, #2
	ldrh r1, [r4, #0x10]
	orrs r0, r1
	strh r0, [r4, #0x10]
	bl SpellFx_Finish
	adds r0, r5, #0
	bl Proc_Break
_08057A62:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08057A6C
sub_08057A6C: @ 0x08057A6C
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl SpellFx_ClearBG1Position
	ldr r0, _08057AB8 @ =0x08C10B28
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r1, r4, #0
	adds r1, #0x29
	strb r0, [r1]
	movs r0, #0x9b
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl PlaySFX
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08057AB8: .4byte 0x08C10B28

	thumb_func_start sub_08057ABC
sub_08057ABC: @ 0x08057ABC
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x5c]
	bl GetCoreAIStruct
	adds r6, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #2
	bne _08057AE2
	ldr r0, [r5, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
	b _08057B74
_08057AE2:
	movs r1, #0x2c
	ldrsh r0, [r5, r1]
	cmp r0, #0x22
	bne _08057B04
	ldr r0, _08057B00 @ =0x00000137
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r5, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl PlaySFX
	b _08057B74
	.align 2, 0
_08057B00: .4byte 0x00000137
_08057B04:
	cmp r0, #0x2a
	bne _08057B10
	adds r0, r6, #0
	bl sub_08057B7C
	b _08057B74
_08057B10:
	cmp r0, #0x2d
	bne _08057B62
	movs r0, #9
	ldrh r1, [r6, #0x10]
	orrs r0, r1
	strh r0, [r6, #0x10]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r6, #0
	bl StartBattleAnimHitEffectsDefault
	adds r0, r6, #0
	bl sub_080684B0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #2
	beq _08057B54
	ldr r0, [r5, #0x5c]
	bl sub_08054F4C
	cmp r0, #1
	bne _08057B48
	adds r0, r6, #0
	bl NewEfxPierceCritical
	b _08057B54
_08057B48:
	ldrb r0, [r4]
	cmp r0, #0
	bne _08057B74
	ldr r0, [r5, #0x5c]
	bl NewEfxNormalEffect
_08057B54:
	ldrb r0, [r4]
	cmp r0, #0
	bne _08057B74
	adds r0, r6, #0
	bl sub_08068500
	b _08057B74
_08057B62:
	cmp r0, #0x3e
	beq _08057B74
	cmp r0, #0x40
	bne _08057B74
	bl SpellFx_Finish
	adds r0, r5, #0
	bl Proc_Break
_08057B74:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08057B7C
sub_08057B7C: @ 0x08057B7C
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _08057BD0 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08057BD4 @ =0x08C10B40
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r7, #0
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r3, _08057BD8 @ =0x08C150E8
	ldr r2, _08057BDC @ =0x08C15184
	str r2, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	bl sub_08050BF8
	adds r6, r0, #0
	str r6, [r4, #0x60]
	ldrh r0, [r6, #4]
	adds r0, #0x10
	strh r0, [r6, #4]
	movs r0, #0xc0
	lsls r0, r0, #4
	ldrh r1, [r6, #8]
	ands r0, r1
	strh r0, [r6, #8]
	adds r0, r5, #0
	bl GetAISSubjectId
	cmp r0, #1
	bne _08057BE0
	movs r1, #0xe4
	lsls r1, r1, #7
	b _08057BE4
	.align 2, 0
_08057BD0: .4byte 0x0201774C
_08057BD4: .4byte 0x08C10B40
_08057BD8: .4byte 0x08C150E8
_08057BDC: .4byte 0x08C15184
_08057BE0:
	movs r1, #0x93
	lsls r1, r1, #8
_08057BE4:
	adds r0, r1, #0
	ldrh r1, [r6, #8]
	orrs r0, r1
	strh r0, [r6, #8]
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08057BF4
sub_08057BF4: @ 0x08057BF4
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xa
	ble _08057C1A
	ldr r0, [r4, #0x60]
	bl AnimDelete
	ldr r1, _08057C20 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08057C1A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08057C20: .4byte 0x0201774C

	thumb_func_start sub_08057C24
sub_08057C24: @ 0x08057C24
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _08057C5C @ =0x08C10B58
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08057C5C: .4byte 0x08C10B58

	thumb_func_start sub_08057C60
sub_08057C60: @ 0x08057C60
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08057C84
	ldr r0, [r4, #0x5c]
	movs r1, #6
	bl sub_0804F7B8
	b _08057CF6
_08057C84:
	cmp r0, #6
	bne _08057CBC
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
	adds r0, r5, #0
	movs r1, #9
	bl sub_08057CFC
	adds r0, r5, #0
	movs r1, #9
	bl sub_08057DF0
	adds r0, r5, #0
	bl sub_08057EFC
	movs r0, #0x86
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl PlaySFX
	b _08057CF6
_08057CBC:
	cmp r0, #0xa
	bne _08057CE0
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl StartBattleAnimHitEffectsDefault
	ldrb r0, [r4]
	cmp r0, #0
	bne _08057CF6
	adds r0, r5, #0
	bl sub_08068500
	b _08057CF6
_08057CE0:
	cmp r0, #0x19
	beq _08057CF6
	cmp r0, #0x1e
	bne _08057CF6
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r4, #0
	bl Proc_Break
_08057CF6:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08057CFC
sub_08057CFC: @ 0x08057CFC
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r1, _08057D5C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08057D60 @ =0x08C10B70
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	strh r6, [r4, #0x2e]
	ldr r0, _08057D64 @ =0x081F3CC8
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	ldr r0, _08057D68 @ =0x081F2E08
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, _08057D6C @ =0x081F3DC8
	ldr r5, _08057D70 @ =gEkrTsaBuffer
	adds r1, r5, #0
	bl LZ77UnCompWram
	ldr r0, [r4, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _08057D78
	ldr r1, _08057D74 @ =gBg1Tm
	movs r0, #1
	str r0, [sp]
	adds r0, #0xff
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r2, #0x20
	movs r3, #0x14
	bl sub_080672B8
	b _08057D8C
	.align 2, 0
_08057D5C: .4byte 0x0201774C
_08057D60: .4byte 0x08C10B70
_08057D64: .4byte 0x081F3CC8
_08057D68: .4byte 0x081F2E08
_08057D6C: .4byte 0x081F3DC8
_08057D70: .4byte gEkrTsaBuffer
_08057D74: .4byte gBg1Tm
_08057D78:
	ldr r1, _08057DB4 @ =gBg1Tm
	movs r0, #1
	str r0, [sp]
	adds r0, #0xff
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r2, #0x20
	movs r3, #0x14
	bl sub_080672E8
_08057D8C:
	movs r0, #2
	bl EnableBgSync
	bl SpellFx_SetSomeColorEffect
	ldr r2, _08057DB8 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08057DB4: .4byte gBg1Tm
_08057DB8: .4byte gDispIo

	thumb_func_start sub_08057DBC
sub_08057DBC: @ 0x08057DBC
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _08057DE6
	bl SpellFx_ClearBG1
	ldr r1, _08057DEC @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_08057DE6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08057DEC: .4byte 0x0201774C

	thumb_func_start sub_08057DF0
sub_08057DF0: @ 0x08057DF0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _08057E20 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08057E24 @ =0x08C10B88
	movs r1, #3
	bl Proc_Start
	adds r6, r0, #0
	str r4, [r6, #0x5c]
	movs r0, #0
	strh r0, [r6, #0x2c]
	strh r5, [r6, #0x2e]
	adds r0, r4, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _08057E28
	movs r0, #0xd8
	b _08057E2C
	.align 2, 0
_08057E20: .4byte 0x0201774C
_08057E24: .4byte 0x08C10B88
_08057E28:
	movs r0, #0xd8
	rsbs r0, r0, #0
_08057E2C:
	str r0, [r6, #0x44]
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_08057E34
sub_08057E34: @ 0x08057E34
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r6, r0, #0
	ldr r2, [r6, #0x44]
	movs r0, #0x2c
	ldrsh r3, [r6, r0]
	movs r1, #0x2e
	ldrsh r0, [r6, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	ldr r4, _08057E6C @ =gDispIo
	strh r0, [r4, #0x20]
	ldr r0, [r6, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _08057E70
	ldrh r4, [r4, #0x20]
	lsrs r0, r4, #3
	adds r7, r0, #0
	adds r7, #0x1e
	b _08057E76
	.align 2, 0
_08057E6C: .4byte gDispIo
_08057E70:
	ldrh r4, [r4, #0x20]
	lsrs r0, r4, #3
	subs r7, r0, #1
_08057E76:
	movs r2, #0x1f
	mov r8, r2
	adds r0, r7, #0
	ands r0, r2
	lsls r0, r0, #1
	ldr r5, _08057EF4 @ =gBg1Tm
	adds r0, r0, r5
	movs r4, #0x80
	lsls r4, r4, #1
	str r4, [sp]
	movs r1, #1
	movs r2, #0x14
	movs r3, #1
	bl sub_080671A0
	adds r0, r7, #1
	mov r1, r8
	ands r0, r1
	lsls r0, r0, #1
	adds r0, r0, r5
	str r4, [sp]
	movs r1, #1
	movs r2, #0x14
	movs r3, #1
	bl sub_080671A0
	adds r0, r7, #2
	mov r2, r8
	ands r0, r2
	lsls r0, r0, #1
	adds r0, r0, r5
	str r4, [sp]
	movs r1, #1
	movs r2, #0x14
	movs r3, #1
	bl sub_080671A0
	movs r0, #2
	bl EnableBgSync
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r6, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08057EE8
	ldr r1, _08057EF8 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearBG1
	adds r0, r6, #0
	bl Proc_Break
_08057EE8:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08057EF4: .4byte gBg1Tm
_08057EF8: .4byte 0x0201774C

	thumb_func_start sub_08057EFC
sub_08057EFC: @ 0x08057EFC
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08057F28 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08057F2C @ =0x08C10BA0
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _08057F30 @ =0x081EDCDE
	str r1, [r0, #0x48]
	ldr r1, _08057F34 @ =0x081F3CC8
	str r1, [r0, #0x4c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08057F28: .4byte 0x0201774C
_08057F2C: .4byte 0x08C10BA0
_08057F30: .4byte 0x081EDCDE
_08057F34: .4byte 0x081F3CC8

	thumb_func_start sub_08057F38
sub_08057F38: @ 0x08057F38
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _08057F5E
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	b _08057F78
_08057F5E:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _08057F78
	bl SpellFx_ClearColorEffects
	ldr r1, _08057F80 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08057F78:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08057F80: .4byte 0x0201774C

	thumb_func_start sub_08057F84
sub_08057F84: @ 0x08057F84
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _08057FBC @ =0x08C10BC0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08057FBC: .4byte 0x08C10BC0

	thumb_func_start sub_08057FC0
sub_08057FC0: @ 0x08057FC0
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	bl GetSpellAnimationStartFrame
	adds r6, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r7, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08057FEE
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
_08057FEE:
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	adds r0, r6, #1
	cmp r1, r0
	bne _0805803C
	ldr r0, _08058038 @ =0x0000010D
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl PlaySFX
	adds r0, r5, #0
	bl sub_0805807C
	ldr r0, [r4, #0x5c]
	movs r1, #6
	bl sub_0804F7B8
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl StartBattleAnimHitEffectsDefault
	ldrb r0, [r4]
	cmp r0, #0
	bne _08058072
	adds r0, r5, #0
	bl sub_08068500
	b _08058072
	.align 2, 0
_08058038: .4byte 0x0000010D
_0805803C:
	adds r0, r6, #0
	adds r0, #0x1c
	cmp r1, r0
	bne _08058056
	str r7, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0xe
	movs r3, #0x10
	bl sub_080566F0
	b _08058072
_08058056:
	adds r0, r6, #0
	adds r0, #0x32
	cmp r1, r0
	beq _08058072
	adds r0, #5
	cmp r1, r0
	bne _08058072
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r4, #0
	bl Proc_Break
_08058072:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805807C
sub_0805807C: @ 0x0805807C
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _080580D4 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080580D8 @ =0x08C10BD8
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x34
	strh r0, [r4, #0x2e]
	adds r0, r5, #0
	bl GetAISSubjectId
	ldr r3, _080580DC @ =0x08C17264
	cmp r0, #0
	bne _080580AC
	ldr r3, _080580E0 @ =0x08C16604
_080580AC:
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	ldr r0, _080580E4 @ =0x081F4E90
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _080580E8 @ =0x081F4190
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080580D4: .4byte 0x0201774C
_080580D8: .4byte 0x08C10BD8
_080580DC: .4byte 0x08C17264
_080580E0: .4byte 0x08C16604
_080580E4: .4byte 0x081F4E90
_080580E8: .4byte 0x081F4190

	thumb_func_start sub_080580EC
sub_080580EC: @ 0x080580EC
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08058114
	ldr r0, [r4, #0x60]
	bl AnimDelete
	ldr r1, _0805811C @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08058114:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805811C: .4byte 0x0201774C

	thumb_func_start sub_08058120
sub_08058120: @ 0x08058120
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl SpellFx_ClearBG1Position
	ldr r0, _08058154 @ =0x08C10BF0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08058154: .4byte 0x08C10BF0

	thumb_func_start sub_08058158
sub_08058158: @ 0x08058158
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r6, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08058180
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
_08058180:
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	cmp r0, #1
	bne _080581CC
	ldr r0, [r4, #0x5c]
	movs r1, #0x5a
	movs r2, #0xa
	bl sub_080569B8
	adds r0, r5, #0
	bl sub_08058208
	adds r0, r5, #0
	bl sub_08058318
	adds r0, r5, #0
	bl sub_080583A0
	str r6, [sp]
	str r6, [sp, #4]
	adds r0, r5, #0
	movs r1, #0x28
	movs r2, #0xf
	movs r3, #0x10
	bl sub_080566F0
	ldr r0, _080581C8 @ =0x0000011D
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl PlaySFX
	b _080581FE
	.align 2, 0
_080581C8: .4byte 0x0000011D
_080581CC:
	cmp r0, #0xf
	bne _080581F0
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl StartBattleAnimHitEffectsDefault
	ldrb r0, [r4]
	cmp r0, #0
	bne _080581FE
	adds r0, r5, #0
	bl sub_08068500
	b _080581FE
_080581F0:
	cmp r0, #0x82
	bne _080581FE
	bl SpellFx_Finish
	adds r0, r4, #0
	bl Proc_Break
_080581FE:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08058208
sub_08058208: @ 0x08058208
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r1, _08058264 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08058268 @ =0x08C10C08
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r6, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	movs r0, #0x34
	strh r0, [r5, #0x2e]
	adds r0, r6, #0
	bl GetAISSubjectId
	ldr r3, _0805826C @ =0x08C195F4
	cmp r0, #0
	bne _08058238
	ldr r3, _08058270 @ =0x08C189F4
_08058238:
	str r3, [sp]
	adds r0, r6, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	adds r4, r0, #0
	str r4, [r5, #0x60]
	ldr r0, _08058274 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _0805827E
	adds r0, r6, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _08058278
	ldrh r0, [r4, #2]
	adds r0, #0x10
	b _08058292
	.align 2, 0
_08058264: .4byte 0x0201774C
_08058268: .4byte 0x08C10C08
_0805826C: .4byte 0x08C195F4
_08058270: .4byte 0x08C189F4
_08058274: .4byte gEkrDistanceType
_08058278:
	ldrh r0, [r4, #2]
	subs r0, #0x10
	b _08058292
_0805827E:
	adds r0, r6, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _0805828E
	ldrh r0, [r4, #2]
	adds r0, #0x48
	b _08058292
_0805828E:
	ldrh r0, [r4, #2]
	subs r0, #0x48
_08058292:
	strh r0, [r4, #2]
	ldr r0, _080582B0 @ =0x081F4E90
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _080582B4 @ =0x081F4190
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080582B0: .4byte 0x081F4E90
_080582B4: .4byte 0x081F4190

	thumb_func_start sub_080582B8
sub_080582B8: @ 0x080582B8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080582DC @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _080582EA
	ldr r0, [r4, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _080582E0
	ldr r0, [r4, #0x60]
	ldr r1, [r4, #0x5c]
	ldrh r1, [r1, #2]
	adds r1, #0x48
	b _080582E8
	.align 2, 0
_080582DC: .4byte gEkrDistanceType
_080582E0:
	ldr r0, [r4, #0x60]
	ldr r1, [r4, #0x5c]
	ldrh r1, [r1, #2]
	subs r1, #0x48
_080582E8:
	strh r1, [r0, #2]
_080582EA:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0805830E
	ldr r0, [r4, #0x60]
	bl AnimDelete
	ldr r1, _08058314 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0805830E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08058314: .4byte 0x0201774C

	thumb_func_start sub_08058318
sub_08058318: @ 0x08058318
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r1, _0805835C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08058360 @ =0x08C10C20
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x70
	strh r0, [r4, #0x2e]
	ldr r0, _08058364 @ =0x08280884
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r2, _08058368 @ =0x08281C9C
	ldr r0, [r4, #0x5c]
	adds r1, r2, #0
	bl SpellFx_WriteBgMap
	bl SpellFx_ClearBG1Position
	bl SpellFx_SetSomeColorEffect
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805835C: .4byte 0x0201774C
_08058360: .4byte 0x08C10C20
_08058364: .4byte 0x08280884
_08058368: .4byte 0x08281C9C

	thumb_func_start sub_0805836C
sub_0805836C: @ 0x0805836C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _08058396
	bl SpellFx_ClearBG1
	bl SpellFx_ClearColorEffects
	ldr r1, _0805839C @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08058396:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805839C: .4byte 0x0201774C

	thumb_func_start sub_080583A0
sub_080583A0: @ 0x080583A0
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _080583CC @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080583D0 @ =0x08C10C38
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _080583D4 @ =0x081EDD00
	str r1, [r0, #0x48]
	ldr r1, _080583D8 @ =0x08281C7C
	str r1, [r0, #0x4c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080583CC: .4byte 0x0201774C
_080583D0: .4byte 0x08C10C38
_080583D4: .4byte 0x081EDD00
_080583D8: .4byte 0x08281C7C

	thumb_func_start sub_080583DC
sub_080583DC: @ 0x080583DC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r5, r0, #0x10
	cmp r5, #0
	blt _0805841C
	ldr r0, [r4, #0x4c]
	ldr r4, _08058418 @ =0x020165C8
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #0
	movs r2, #1
	adds r3, r5, #0
	bl sub_08067750
	adds r0, r4, #0
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	b _08058432
	.align 2, 0
_08058418: .4byte 0x020165C8
_0805841C:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r5, r0
	bne _08058432
	ldr r1, _08058438 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08058432:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08058438: .4byte 0x0201774C

	thumb_func_start sub_0805843C
sub_0805843C: @ 0x0805843C
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _08058474 @ =0x08C10C58
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08058474: .4byte 0x08C10C58

	thumb_func_start sub_08058478
sub_08058478: @ 0x08058478
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _080584B4
	ldr r0, [r4, #0x5c]
	movs r1, #0x5a
	movs r2, #0xa
	bl sub_080569B8
	ldr r0, [r4, #0x5c]
	bl sub_080584F8
	movs r0, #0x8f
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl PlaySFX
_080584B4:
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	cmp r0, #4
	bne _080584DC
	movs r0, #9
	ldrh r3, [r5, #0x10]
	orrs r0, r3
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl StartBattleAnimHitEffectsDefault
	ldrb r0, [r4]
	cmp r0, #0
	bne _080584F2
	adds r0, r5, #0
	bl sub_08068500
	b _080584F2
_080584DC:
	cmp r0, #0x32
	beq _080584F2
	cmp r0, #0x3c
	bne _080584F2
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r4, #0
	bl Proc_Break
_080584F2:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080584F8
sub_080584F8: @ 0x080584F8
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r1, _08058534 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08058538 @ =0x08C10C70
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	ldr r2, _0805853C @ =0x08C1A224
	ldr r3, _08058540 @ =0x08C1AE54
	str r2, [sp]
	adds r0, r4, #0
	adds r1, r3, #0
	bl sub_08050BF8
	adds r6, r0, #0
	str r6, [r5, #0x60]
	adds r0, r4, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _08058544
	ldrh r0, [r6, #2]
	adds r0, #0x20
	b _08058548
	.align 2, 0
_08058534: .4byte 0x0201774C
_08058538: .4byte 0x08C10C70
_0805853C: .4byte 0x08C1A224
_08058540: .4byte 0x08C1AE54
_08058544:
	ldrh r0, [r6, #2]
	subs r0, #0x20
_08058548:
	strh r0, [r6, #2]
	ldr r0, _08058564 @ =0x081F5F54
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _08058568 @ =0x081F4190
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08058564: .4byte 0x081F5F54
_08058568: .4byte 0x081F4190

	thumb_func_start sub_0805856C
sub_0805856C: @ 0x0805856C
	push {lr}
	ldr r2, _08058580 @ =0x0201774C
	ldr r1, [r2]
	subs r1, #1
	str r1, [r2]
	ldr r0, [r0, #0x60]
	bl AnimDelete
	pop {r0}
	bx r0
	.align 2, 0
_08058580: .4byte 0x0201774C

	thumb_func_start sub_08058584
sub_08058584: @ 0x08058584
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl SpellFx_ClearBG1Position
	ldr r0, _080585B8 @ =0x08C10C90
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080585B8: .4byte 0x08C10C90

	thumb_func_start sub_080585BC
sub_080585BC: @ 0x080585BC
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08058602
	ldr r0, [r4, #0x5c]
	movs r1, #0x5a
	movs r2, #0xa
	bl sub_080569B8
	ldr r0, [r4, #0x5c]
	bl sub_08058648
	ldr r0, [r4, #0x5c]
	bl sub_080586F0
	ldr r0, [r4, #0x5c]
	bl sub_08058778
	ldr r0, _0805862C @ =0x0000011F
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl PlaySFX
_08058602:
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	cmp r0, #4
	bne _08058630
	movs r0, #9
	ldrh r3, [r5, #0x10]
	orrs r0, r3
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl StartBattleAnimHitEffectsDefault
	ldrb r0, [r4]
	cmp r0, #0
	bne _08058642
	adds r0, r5, #0
	bl sub_08068500
	b _08058642
	.align 2, 0
_0805862C: .4byte 0x0000011F
_08058630:
	cmp r0, #0x20
	beq _08058642
	cmp r0, #0x30
	bne _08058642
	bl SpellFx_Finish
	adds r0, r4, #0
	bl Proc_Break
_08058642:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08058648
sub_08058648: @ 0x08058648
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08058684 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08058688 @ =0x08C10CA8
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _0805868C @ =0x081EDDDA
	str r1, [r0, #0x48]
	ldr r1, _08058690 @ =0x08C10CC0
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r0, _08058694 @ =0x081F5F94
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	bl SpellFx_SetSomeColorEffect
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08058684: .4byte 0x0201774C
_08058688: .4byte 0x08C10CA8
_0805868C: .4byte 0x081EDDDA
_08058690: .4byte 0x08C10CC0
_08058694: .4byte 0x081F5F94

	thumb_func_start sub_08058698
sub_08058698: @ 0x08058698
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _080586C6
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	b _080586E4
_080586C6:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _080586E4
	bl SpellFx_ClearBG1
	ldr r1, _080586EC @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_080586E4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080586EC: .4byte 0x0201774C

	thumb_func_start sub_080586F0
sub_080586F0: @ 0x080586F0
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0805871C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08058720 @ =0x08C10CF0
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _08058724 @ =0x081EDE20
	str r1, [r0, #0x48]
	ldr r1, _08058728 @ =0x082131F8
	str r1, [r0, #0x4c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805871C: .4byte 0x0201774C
_08058720: .4byte 0x08C10CF0
_08058724: .4byte 0x081EDE20
_08058728: .4byte 0x082131F8

	thumb_func_start sub_0805872C
sub_0805872C: @ 0x0805872C
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _08058752
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	b _0805876C
_08058752:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0805876C
	bl SpellFx_ClearColorEffects
	ldr r1, _08058774 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0805876C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08058774: .4byte 0x0201774C

	thumb_func_start sub_08058778
sub_08058778: @ 0x08058778
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _080587BC @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080587C0 @ =0x08C10D10
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x37
	strh r0, [r4, #0x2e]
	ldr r3, _080587C4 @ =0x08C1BA90
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	adds r6, r0, #0
	str r6, [r4, #0x60]
	adds r0, r5, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _080587C8
	ldrh r0, [r6, #2]
	adds r0, #0x24
	b _080587CC
	.align 2, 0
_080587BC: .4byte 0x0201774C
_080587C0: .4byte 0x08C10D10
_080587C4: .4byte 0x08C1BA90
_080587C8:
	ldrh r0, [r6, #2]
	subs r0, #0x24
_080587CC:
	strh r0, [r6, #2]
	ldrh r0, [r6, #4]
	adds r0, #0xc
	strh r0, [r6, #4]
	ldr r0, _080587F0 @ =0x081F5F74
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _080587F4 @ =0x081F4190
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080587F0: .4byte 0x081F5F74
_080587F4: .4byte 0x081F4190

	thumb_func_start sub_080587F8
sub_080587F8: @ 0x080587F8
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _08058820
	ldr r0, _08058828 @ =0x0201774C
	ldr r1, [r0]
	subs r1, #1
	str r1, [r0]
	ldr r0, [r4, #0x60]
	bl AnimDelete
	adds r0, r4, #0
	bl Proc_Break
_08058820:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08058828: .4byte 0x0201774C

	thumb_func_start sub_0805882C
sub_0805882C: @ 0x0805882C
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _08058864 @ =0x08C10D28
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08058864: .4byte 0x08C10D28

	thumb_func_start sub_08058868
sub_08058868: @ 0x08058868
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	bl GetSpellAnimationStartFrame
	adds r6, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08058892
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
_08058892:
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	adds r0, r6, #1
	cmp r1, r0
	bne _080588B0
	adds r0, r5, #0
	bl sub_08058908
	adds r0, r5, #0
	bl sub_08058A10
	adds r0, r5, #0
	bl sub_08058A98
	b _08058902
_080588B0:
	adds r0, r6, #4
	cmp r1, r0
	bne _080588E6
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl StartBattleAnimHitEffectsDefault
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #2
	ldrsh r2, [r5, r0]
	movs r0, #0xf5
	movs r3, #1
	bl PlaySFX
	ldrb r0, [r4]
	cmp r0, #0
	bne _08058902
	adds r0, r5, #0
	bl sub_08068500
	b _08058902
_080588E6:
	adds r0, r6, #0
	adds r0, #0x50
	cmp r1, r0
	beq _08058902
	adds r0, #0x10
	cmp r1, r0
	bne _08058902
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r4, #0
	bl Proc_Break
_08058902:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_08058908
sub_08058908: @ 0x08058908
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _08058960 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08058964 @ =0x08C10D40
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _08058968 @ =0x081EDEC2
	str r0, [r5, #0x48]
	ldr r0, _0805896C @ =0x08C10D58
	str r0, [r5, #0x4c]
	ldr r0, _08058970 @ =0x08C10D60
	str r0, [r5, #0x50]
	ldr r0, _08058974 @ =0x08201128
	movs r1, #0x86
	lsls r1, r1, #5
	bl SpellFx_RegisterBgGfx
	bl SpellFx_SetSomeColorEffect
	ldr r0, _08058978 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08058986
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _0805897C
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _08058986
	.align 2, 0
_08058960: .4byte 0x0201774C
_08058964: .4byte 0x08C10D40
_08058968: .4byte 0x081EDEC2
_0805896C: .4byte 0x08C10D58
_08058970: .4byte 0x08C10D60
_08058974: .4byte 0x08201128
_08058978: .4byte gEkrDistanceType
_0805897C:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_08058986:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0805898C
sub_0805898C: @ 0x0805898C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r6, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r5, r0, #0x10
	cmp r5, #0
	blt _080589E4
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r5, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	cmp r5, #0
	bne _080589C2
	ldr r6, _080589DC @ =0x0000011F
_080589C2:
	cmp r5, #1
	bne _080589CA
	movs r6, #0xa8
	lsls r6, r6, #1
_080589CA:
	ldr r0, _080589E0 @ =0x0202349C
	str r6, [sp]
	movs r1, #2
	movs r2, #0x14
	movs r3, #1
	bl sub_080671A0
	b _08058A02
	.align 2, 0
_080589DC: .4byte 0x0000011F
_080589E0: .4byte 0x0202349C
_080589E4:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r5, r0
	bne _08058A02
	bl SpellFx_ClearBG1
	ldr r1, _08058A0C @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_08058A02:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08058A0C: .4byte 0x0201774C

	thumb_func_start sub_08058A10
sub_08058A10: @ 0x08058A10
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08058A3C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08058A40 @ =0x08C10D68
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _08058A44 @ =0x081EDECC
	str r1, [r0, #0x48]
	ldr r1, _08058A48 @ =0x082019E4
	str r1, [r0, #0x4c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08058A3C: .4byte 0x0201774C
_08058A40: .4byte 0x08C10D68
_08058A44: .4byte 0x081EDECC
_08058A48: .4byte 0x082019E4

	thumb_func_start sub_08058A4C
sub_08058A4C: @ 0x08058A4C
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _08058A72
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	b _08058A8C
_08058A72:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _08058A8C
	bl SpellFx_ClearColorEffects
	ldr r1, _08058A94 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08058A8C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08058A94: .4byte 0x0201774C

	thumb_func_start sub_08058A98
sub_08058A98: @ 0x08058A98
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _08058AE0 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08058AE4 @ =0x08C10D88
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r3, _08058AE8 @ =0x08C2327C
	ldr r2, _08058AEC @ =0x08C22750
	str r2, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	ldr r0, _08058AF0 @ =0x082022A8
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _08058AF4 @ =0x08201E10
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08058AE0: .4byte 0x0201774C
_08058AE4: .4byte 0x08C10D88
_08058AE8: .4byte 0x08C2327C
_08058AEC: .4byte 0x08C22750
_08058AF0: .4byte 0x082022A8
_08058AF4: .4byte 0x08201E10

	thumb_func_start sub_08058AF8
sub_08058AF8: @ 0x08058AF8
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x32
	ble _08058B1E
	ldr r0, [r4, #0x60]
	bl AnimDelete
	ldr r1, _08058B24 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08058B1E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08058B24: .4byte 0x0201774C

	thumb_func_start sub_08058B28
sub_08058B28: @ 0x08058B28
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _08058B68 @ =0x08C10DA0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r1, #0
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x2a
	strb r1, [r0]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08058B68: .4byte 0x08C10DA0

	thumb_func_start sub_08058B6C
sub_08058B6C: @ 0x08058B6C
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _08058BAC @ =0x08C10DA0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x2a
	movs r0, #1
	strb r0, [r1]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08058BAC: .4byte 0x08C10DA0

	thumb_func_start sub_08058BB0
sub_08058BB0: @ 0x08058BB0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r6, r0, #0
	ldr r0, _08058BDC @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _08058BE0
	movs r5, #0x20
	movs r7, #0x34
	movs r3, #0x36
	mov r8, r3
	movs r0, #0x55
	mov sb, r0
	b _08058BEC
	.align 2, 0
_08058BDC: .4byte gEkrDistanceType
_08058BE0:
	movs r5, #0x28
	movs r7, #0x3c
	movs r1, #0x41
	mov r8, r1
	movs r3, #0x60
	mov sb, r3
_08058BEC:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08058C18
	ldr r0, [r4, #0x5c]
	bl sub_08058CB8
	ldr r0, [r4, #0x5c]
	bl sub_08058D70
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xf1
	movs r3, #1
	bl PlaySFX
_08058C18:
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	cmp r0, r5
	bne _08058C2C
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
	b _08058CAC
_08058C2C:
	cmp r0, r7
	bne _08058C96
	movs r0, #9
	ldrh r3, [r6, #0x10]
	orrs r0, r3
	strh r0, [r6, #0x10]
	adds r5, r4, #0
	adds r5, #0x29
	ldrb r1, [r5]
	adds r0, r6, #0
	bl StartBattleAnimHitEffectsDefault
	ldrb r0, [r5]
	cmp r0, #0
	bne _08058CAC
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	bne _08058C6C
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #2
	ldrsh r2, [r6, r0]
	movs r0, #0xf7
	movs r3, #1
	bl PlaySFX
	adds r0, r6, #0
	bl sub_08058E44
	b _08058C8E
_08058C6C:
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r6, r3]
	movs r0, #0xf8
	movs r3, #1
	bl PlaySFX
	adds r0, r6, #0
	bl sub_08058F2C
	adds r0, r6, #0
	bl sub_08058FF8
	adds r0, r6, #0
	bl sub_08059084
_08058C8E:
	adds r0, r6, #0
	bl sub_08068500
	b _08058CAC
_08058C96:
	cmp r0, r8
	beq _08058CAC
	cmp r0, sb
	bne _08058CAC
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r4, #0
	bl Proc_Break
_08058CAC:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08058CB8
sub_08058CB8: @ 0x08058CB8
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08058CFC @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08058D00 @ =0x08C10DB8
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _08058D04 @ =0x081EDF0E
	str r1, [r0, #0x48]
	ldr r1, _08058D08 @ =0x08C10DD0
	str r1, [r0, #0x4c]
	ldr r1, _08058D0C @ =0x08C10E00
	str r1, [r0, #0x50]
	ldr r0, _08058D10 @ =0x08202F40
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	ldr r0, _08058D14 @ =0x08202348
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	bl SpellFx_SetSomeColorEffect
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08058CFC: .4byte 0x0201774C
_08058D00: .4byte 0x08C10DB8
_08058D04: .4byte 0x081EDF0E
_08058D08: .4byte 0x08C10DD0
_08058D0C: .4byte 0x08C10E00
_08058D10: .4byte 0x08202F40
_08058D14: .4byte 0x08202348

	thumb_func_start sub_08058D18
sub_08058D18: @ 0x08058D18
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _08058D46
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	b _08058D64
_08058D46:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _08058D64
	bl SpellFx_ClearBG1
	ldr r1, _08058D6C @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_08058D64:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08058D6C: .4byte 0x0201774C

	thumb_func_start sub_08058D70
sub_08058D70: @ 0x08058D70
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r1, _08058DB4 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08058DB8 @ =0x08C10E30
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r6, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r1, _08058DBC @ =0x08C23A1C
	ldr r2, _08058DC0 @ =0x08C23694
	ldr r3, _08058DC4 @ =0x08C23A48
	ldr r0, _08058DC8 @ =0x08C236C0
	str r0, [sp]
	adds r0, r6, #0
	bl sub_08050BF8
	adds r5, r0, #0
	str r5, [r4, #0x60]
	adds r0, r6, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _08058DCC
	ldrh r0, [r6, #2]
	subs r0, #8
	b _08058DD0
	.align 2, 0
_08058DB4: .4byte 0x0201774C
_08058DB8: .4byte 0x08C10E30
_08058DBC: .4byte 0x08C23A1C
_08058DC0: .4byte 0x08C23694
_08058DC4: .4byte 0x08C23A48
_08058DC8: .4byte 0x08C236C0
_08058DCC:
	ldrh r0, [r6, #2]
	adds r0, #8
_08058DD0:
	strh r0, [r5, #2]
	ldrh r0, [r6, #4]
	adds r0, #8
	strh r0, [r5, #4]
	ldr r0, _08058DF4 @ =0x08204A74
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _08058DF8 @ =0x08204478
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08058DF4: .4byte 0x08204A74
_08058DF8: .4byte 0x08204478

	thumb_func_start sub_08058DFC
sub_08058DFC: @ 0x08058DFC
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x25
	bne _08058E22
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xf2
	movs r3, #1
	bl PlaySFX
	b _08058E3A
_08058E22:
	cmp r0, #0x32
	ble _08058E3A
	ldr r0, [r4, #0x60]
	bl AnimDelete
	ldr r1, _08058E40 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08058E3A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08058E40: .4byte 0x0201774C

	thumb_func_start sub_08058E44
sub_08058E44: @ 0x08058E44
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _08058E9C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08058EA0 @ =0x08C10E48
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _08058EA4 @ =0x081EDF40
	str r0, [r5, #0x48]
	ldr r0, _08058EA8 @ =0x08C10EB4
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _08058EAC @ =0x08C10E60
	str r0, [r5, #0x54]
	ldr r0, _08058EB0 @ =0x0820D68C
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_SetSomeColorEffect
	ldr r0, _08058EB4 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08058EC2
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _08058EB8
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _08058EC2
	.align 2, 0
_08058E9C: .4byte 0x0201774C
_08058EA0: .4byte 0x08C10E48
_08058EA4: .4byte 0x081EDF40
_08058EA8: .4byte 0x08C10EB4
_08058EAC: .4byte 0x08C10E60
_08058EB0: .4byte 0x0820D68C
_08058EB4: .4byte gEkrDistanceType
_08058EB8:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_08058EC2:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08058EC8
sub_08058EC8: @ 0x08058EC8
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	blt _08058F04
	ldr r5, [r7, #0x4c]
	ldr r6, [r7, #0x50]
	ldr r0, [r7, #0x54]
	lsls r4, r4, #2
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, [r7, #0x5c]
	adds r5, r4, r5
	ldr r1, [r5]
	adds r4, r4, r6
	ldr r2, [r4]
	bl SpellFx_WriteBgMap
	b _08058F22
_08058F04:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _08058F22
	bl SpellFx_ClearBG1
	ldr r1, _08058F28 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r7, #0
	bl Proc_End
_08058F22:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08058F28: .4byte 0x0201774C

	thumb_func_start sub_08058F2C
sub_08058F2C: @ 0x08058F2C
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r1, _08058F88 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08058F8C @ =0x08C10F08
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	ldr r0, _08058F90 @ =0x0820F194
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, [r5, #0x5c]
	ldr r2, _08058F94 @ =0x08210350
	adds r1, r2, #0
	bl SpellFx_WriteBgMap
	bl SpellFx_ClearBG1Position
	bl SpellFx_SetSomeColorEffect
	ldr r0, _08058F98 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08058FB8
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _08058F9C
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _08058FA6
	.align 2, 0
_08058F88: .4byte 0x0201774C
_08058F8C: .4byte 0x08C10F08
_08058F90: .4byte 0x0820F194
_08058F94: .4byte 0x08210350
_08058F98: .4byte gEkrDistanceType
_08058F9C:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_08058FA6:
	ldr r0, _08058FC0 @ =0x0202349C
	movs r1, #0x80
	lsls r1, r1, #1
	str r1, [sp]
	movs r1, #2
	movs r2, #0x14
	movs r3, #1
	bl sub_080671E0
_08058FB8:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08058FC0: .4byte 0x0202349C

	thumb_func_start sub_08058FC4
sub_08058FC4: @ 0x08058FC4
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x28
	bne _08058FEC
	bl SpellFx_ClearBG1
	bl SpellFx_ClearColorEffects
	ldr r1, _08058FF4 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08058FEC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08058FF4: .4byte 0x0201774C

	thumb_func_start sub_08058FF8
sub_08058FF8: @ 0x08058FF8
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0805902C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08059030 @ =0x08C10F20
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _08059034 @ =0x081EDF96
	str r1, [r0, #0x48]
	ldr r1, _08059038 @ =0x08210150
	str r1, [r0, #0x4c]
	adds r0, r1, #0
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805902C: .4byte 0x0201774C
_08059030: .4byte 0x08C10F20
_08059034: .4byte 0x081EDF96
_08059038: .4byte 0x08210150

	thumb_func_start sub_0805903C
sub_0805903C: @ 0x0805903C
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _08059062
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	b _08059078
_08059062:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _08059078
	ldr r1, _08059080 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08059078:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08059080: .4byte 0x0201774C

	thumb_func_start sub_08059084
sub_08059084: @ 0x08059084
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _080590C4 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080590C8 @ =0x08C10F40
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r3, _080590CC @ =0x08C25638
	ldr r2, _080590D0 @ =0x08C24818
	str r2, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	bl sub_08050BF8
	adds r6, r0, #0
	str r6, [r4, #0x60]
	adds r0, r5, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _080590D4
	ldrh r0, [r6, #2]
	subs r0, #8
	b _080590D8
	.align 2, 0
_080590C4: .4byte 0x0201774C
_080590C8: .4byte 0x08C10F40
_080590CC: .4byte 0x08C25638
_080590D0: .4byte 0x08C24818
_080590D4:
	ldrh r0, [r6, #2]
	adds r0, #8
_080590D8:
	strh r0, [r6, #2]
	ldr r0, [r6, #0x1c]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r6, #0x1c]
	ldr r0, _08059100 @ =0x08210810
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _08059104 @ =0x08210598
	movs r1, #0x80
	lsls r1, r1, #4
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08059100: .4byte 0x08210810
_08059104: .4byte 0x08210598

	thumb_func_start sub_08059108
sub_08059108: @ 0x08059108
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x28
	ble _0805912E
	ldr r0, [r4, #0x60]
	bl AnimDelete
	ldr r1, _08059134 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0805912E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08059134: .4byte 0x0201774C

	thumb_func_start sub_08059138
sub_08059138: @ 0x08059138
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _08059170 @ =0x08C10F58
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08059170: .4byte 0x08C10F58

	thumb_func_start sub_08059174
sub_08059174: @ 0x08059174
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	bl GetSpellAnimationStartFrame
	adds r6, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r1, #0
	mov r8, r1
	movs r7, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _080591AA
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
_080591AA:
	movs r2, #0x2c
	ldrsh r1, [r4, r2]
	adds r0, r6, #1
	cmp r1, r0
	bne _08059206
	adds r0, r5, #0
	bl sub_080592AC
	adds r0, r5, #0
	bl sub_08059510
	ldr r3, _0805921C @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	mov r2, r8
	strb r2, [r0]
	adds r0, #1
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r2, [r0]
	str r1, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl sub_080566F0
	movs r0, #0x91
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl PlaySFX
_08059206:
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	adds r0, r6, #0
	adds r0, #0x52
	cmp r1, r0
	bne _08059220
	ldr r0, [r4, #0x5c]
	movs r1, #4
	bl sub_0804F7B8
	b _080592A0
	.align 2, 0
_0805921C: .4byte gDispIo
_08059220:
	adds r0, r6, #0
	adds r0, #0x55
	cmp r1, r0
	bne _0805925C
	adds r0, r5, #0
	bl sub_08059394
	adds r0, r5, #0
	bl sub_0805947C
	str r7, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0x18
	movs r2, #0x10
	movs r3, #0x10
	bl sub_080566F0
	ldr r0, _08059258 @ =0x00000123
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl PlaySFX
	b _080592A0
	.align 2, 0
_08059258: .4byte 0x00000123
_0805925C:
	adds r0, r6, #0
	adds r0, #0x58
	cmp r1, r0
	bne _08059284
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl StartBattleAnimHitEffectsDefault
	ldrb r0, [r4]
	cmp r0, #0
	bne _080592A0
	adds r0, r5, #0
	bl sub_08068500
	b _080592A0
_08059284:
	adds r0, r6, #0
	adds r0, #0x88
	cmp r1, r0
	beq _080592A0
	adds r0, #0x19
	cmp r1, r0
	bne _080592A0
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r4, #0
	bl Proc_Break
_080592A0:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080592AC
sub_080592AC: @ 0x080592AC
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _08059300 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08059304 @ =0x08C10F70
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _08059308 @ =0x081EDFEC
	str r0, [r5, #0x48]
	ldr r0, _0805930C @ =0x08C10F88
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _08059310 @ =0x08C10FA0
	str r0, [r5, #0x54]
	ldr r0, _08059314 @ =0x0822181C
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	ldr r0, _08059318 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08059326
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _0805931C
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _08059326
	.align 2, 0
_08059300: .4byte 0x0201774C
_08059304: .4byte 0x08C10F70
_08059308: .4byte 0x081EDFEC
_0805930C: .4byte 0x08C10F88
_08059310: .4byte 0x08C10FA0
_08059314: .4byte 0x0822181C
_08059318: .4byte gEkrDistanceType
_0805931C:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_08059326:
	bl SpellFx_SetSomeColorEffect
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08059330
sub_08059330: @ 0x08059330
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #0
	blt _0805936C
	ldr r1, [r4, #0x4c]
	ldr r2, [r4, #0x50]
	ldr r5, [r4, #0x54]
	ldr r0, [r4, #0x5c]
	lsls r4, r3, #2
	adds r1, r4, r1
	ldr r1, [r1]
	adds r2, r4, r2
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	adds r4, r4, r5
	ldr r0, [r4]
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	b _0805938A
_0805936C:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r3, r0
	bne _0805938A
	bl SpellFx_ClearBG1
	ldr r1, _08059390 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_0805938A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08059390: .4byte 0x0201774C

	thumb_func_start sub_08059394
sub_08059394: @ 0x08059394
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _080593E8 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080593EC @ =0x08C10FB8
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _080593F0 @ =0x081EE05A
	str r0, [r5, #0x48]
	ldr r0, _080593F4 @ =0x08C10FD0
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _080593F8 @ =0x08C10FFC
	str r0, [r5, #0x54]
	ldr r0, _080593FC @ =0x08219AF4
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	ldr r0, _08059400 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0805940E
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _08059404
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _0805940E
	.align 2, 0
_080593E8: .4byte 0x0201774C
_080593EC: .4byte 0x08C10FB8
_080593F0: .4byte 0x081EE05A
_080593F4: .4byte 0x08C10FD0
_080593F8: .4byte 0x08C10FFC
_080593FC: .4byte 0x08219AF4
_08059400: .4byte gEkrDistanceType
_08059404:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_0805940E:
	bl SpellFx_SetSomeColorEffect
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08059418
sub_08059418: @ 0x08059418
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #0
	blt _08059454
	ldr r1, [r4, #0x4c]
	ldr r2, [r4, #0x50]
	ldr r5, [r4, #0x54]
	ldr r0, [r4, #0x5c]
	lsls r4, r3, #2
	adds r1, r4, r1
	ldr r1, [r1]
	adds r2, r4, r2
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	adds r4, r4, r5
	ldr r0, [r4]
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	b _08059472
_08059454:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r3, r0
	bne _08059472
	bl SpellFx_ClearBG1
	ldr r1, _08059478 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_08059472:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08059478: .4byte 0x0201774C

	thumb_func_start sub_0805947C
sub_0805947C: @ 0x0805947C
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _080594CC @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080594D0 @ =0x08C11028
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r3, _080594D4 @ =0x08C28508
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	ldrh r1, [r0, #2]
	adds r1, #0x18
	strh r1, [r0, #2]
	ldr r0, _080594D8 @ =0x082708B0
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _080594DC @ =0x082224D4
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080594CC: .4byte 0x0201774C
_080594D0: .4byte 0x08C11028
_080594D4: .4byte 0x08C28508
_080594D8: .4byte 0x082708B0
_080594DC: .4byte 0x082224D4

	thumb_func_start sub_080594E0
sub_080594E0: @ 0x080594E0
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x33
	ble _08059506
	ldr r0, [r4, #0x60]
	bl AnimDelete
	ldr r1, _0805950C @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08059506:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805950C: .4byte 0x0201774C

	thumb_func_start sub_08059510
sub_08059510: @ 0x08059510
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0805954C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08059550 @ =0x08C11040
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r2, #0
	strh r2, [r0, #0x2c]
	strh r2, [r0, #0x2e]
	movs r1, #1
	str r1, [r0, #0x44]
	str r2, [r0, #0x48]
	ldr r0, _08059554 @ =0x082708B0
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _08059558 @ =0x082224D4
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805954C: .4byte 0x0201774C
_08059550: .4byte 0x08C11040
_08059554: .4byte 0x082708B0
_08059558: .4byte 0x082224D4

	thumb_func_start sub_0805955C
sub_0805955C: @ 0x0805955C
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
_08059562:
	ldr r0, [r5, #0x5c]
	adds r1, r4, #0
	bl sub_08059588
	adds r4, #1
	cmp r4, #0x1f
	ble _08059562
	ldr r1, _08059584 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r5, #0
	bl Proc_Break
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08059584: .4byte 0x0201774C

	thumb_func_start sub_08059588
sub_08059588: @ 0x08059588
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r6, r0, #0
	mov r8, r1
	mov r4, sp
	mov r0, sp
	movs r1, #0
	movs r2, #8
	bl memset
	movs r5, #0
	movs r0, #1
	strb r0, [r4, #6]
	strb r0, [r4, #7]
	ldr r1, _08059618 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805961C @ =0x08C11058
	movs r1, #3
	bl Proc_Start
	adds r7, r0, #0
	str r6, [r7, #0x5c]
	strh r5, [r7, #0x2c]
	movs r0, #0x64
	strh r0, [r7, #0x2e]
	movs r0, #7
	mov r1, r8
	ands r0, r1
	mov r2, sp
	adds r4, r2, r0
	ldrb r0, [r4]
	adds r1, r7, #0
	adds r1, #0x29
	strb r0, [r1]
	ldr r0, _08059620 @ =0x08C28574
	movs r1, #0x78
	bl AnimCreate
	str r0, [r7, #0x60]
	movs r1, #0xa1
	lsls r1, r1, #6
	strh r1, [r0, #8]
	movs r1, #0x80
	lsls r1, r1, #1
	strh r1, [r0, #2]
	strh r1, [r0, #4]
	ldr r5, _08059624 @ =0x0000FFFF
	adds r0, r5, #0
	bl sub_08067AD4
	strh r0, [r7, #0x32]
	adds r0, r5, #0
	bl sub_08067AD4
	strh r0, [r7, #0x3a]
	ldrb r0, [r4]
	cmp r0, #0
	bne _0805962C
	adds r0, r5, #0
	bl sub_08067AD4
	ldr r2, _08059628 @ =0x000001FF
	adds r1, r2, #0
	ands r0, r1
	movs r1, #0xe0
	lsls r1, r1, #3
	b _0805963E
	.align 2, 0
_08059618: .4byte 0x0201774C
_0805961C: .4byte 0x08C11058
_08059620: .4byte 0x08C28574
_08059624: .4byte 0x0000FFFF
_08059628: .4byte 0x000001FF
_0805962C:
	adds r0, r5, #0
	bl sub_08067AD4
	ldr r2, _08059688 @ =0x000001FF
	adds r1, r2, #0
	ands r0, r1
	movs r2, #0xa0
	lsls r2, r2, #4
	adds r1, r2, #0
_0805963E:
	adds r0, r0, r1
	strh r0, [r7, #0x34]
	ldr r4, _0805968C @ =0x0000FF0F
	adds r0, r4, #0
	bl sub_08067AD4
	ldr r2, _08059690 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	ldr r1, _08059694 @ =0xFFFFFF00
	adds r0, r0, r1
	strh r0, [r7, #0x3c]
	adds r0, r4, #0
	bl sub_08067AD4
	strh r0, [r7, #0x36]
	adds r0, r4, #0
	bl sub_08067AD4
	strh r0, [r7, #0x3e]
	movs r0, #7
	mov r2, r8
	ands r0, r2
	add r0, sp
	ldrb r0, [r0]
	cmp r0, #0
	bne _08059698
	adds r0, r4, #0
	bl sub_08067AD4
	ldr r2, _08059688 @ =0x000001FF
	adds r1, r2, #0
	ands r0, r1
	movs r1, #0xe0
	lsls r1, r1, #3
	b _080596AA
	.align 2, 0
_08059688: .4byte 0x000001FF
_0805968C: .4byte 0x0000FF0F
_08059690: .4byte 0x000003FF
_08059694: .4byte 0xFFFFFF00
_08059698:
	adds r0, r4, #0
	bl sub_08067AD4
	ldr r2, _080596D0 @ =0x000001FF
	adds r1, r2, #0
	ands r0, r1
	movs r2, #0xa0
	lsls r2, r2, #4
	adds r1, r2, #0
_080596AA:
	adds r0, r0, r1
	strh r0, [r7, #0x38]
	ldr r0, _080596D4 @ =0x0000FF0F
	bl sub_08067AD4
	ldr r2, _080596D8 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	ldr r1, _080596DC @ =0xFFFFFF00
	adds r0, r0, r1
	adds r1, r7, #0
	adds r1, #0x40
	strh r0, [r1]
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080596D0: .4byte 0x000001FF
_080596D4: .4byte 0x0000FF0F
_080596D8: .4byte 0x000003FF
_080596DC: .4byte 0xFFFFFF00

	thumb_func_start sub_080596E0
sub_080596E0: @ 0x080596E0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r3, [r4, #0x60]
	ldrh r2, [r4, #0x2c]
	adds r2, #1
	strh r2, [r4, #0x2c]
	lsls r1, r2, #0x10
	ldrh r5, [r4, #0x2e]
	lsls r0, r5, #0x10
	cmp r1, r0
	ble _08059710
	ldr r1, _0805970C @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r3, #0
	bl AnimDelete
	adds r0, r4, #0
	bl Proc_Break
	b _08059790
	.align 2, 0
_0805970C: .4byte 0x0201774C
_08059710:
	movs r0, #1
	ands r2, r0
	cmp r2, #0
	bne _08059754
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _0805972C
	ldr r0, _08059728 @ =0x08C285D4
	b _0805972E
	.align 2, 0
_08059728: .4byte 0x08C285D4
_0805972C:
	ldr r0, _08059750 @ =0x08C285DC
_0805972E:
	str r0, [r3, #0x24]
	str r0, [r3, #0x20]
	movs r0, #0
	strh r0, [r3, #6]
	ldrh r1, [r4, #0x32]
	ldrh r2, [r4, #0x34]
	adds r0, r1, r2
	strh r0, [r4, #0x32]
	ldrh r5, [r4, #0x3a]
	ldrh r2, [r4, #0x3c]
	adds r1, r5, r2
	strh r1, [r4, #0x3a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	strh r0, [r3, #2]
	ldrh r4, [r4, #0x3a]
	b _0805978C
	.align 2, 0
_08059750: .4byte 0x08C285DC
_08059754:
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _08059768
	ldr r0, _08059764 @ =0x08C285D4
	b _0805976A
	.align 2, 0
_08059764: .4byte 0x08C285D4
_08059768:
	ldr r0, _08059798 @ =0x08C285DC
_0805976A:
	str r0, [r3, #0x24]
	str r0, [r3, #0x20]
	movs r0, #0
	strh r0, [r3, #6]
	ldrh r5, [r4, #0x3e]
	ldrh r1, [r4, #0x38]
	adds r0, r5, r1
	strh r0, [r4, #0x3e]
	adds r1, r4, #0
	adds r1, #0x40
	ldrh r1, [r1]
	adds r0, r1, r0
	strh r0, [r4, #0x3e]
	ldrh r2, [r4, #0x36]
	lsrs r0, r2, #8
	strh r0, [r3, #2]
	ldrh r4, [r4, #0x3e]
_0805978C:
	lsrs r0, r4, #8
	strh r0, [r3, #4]
_08059790:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08059798: .4byte 0x08C285DC

	thumb_func_start sub_0805979C
sub_0805979C: @ 0x0805979C
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _080597D4 @ =0x08C11070
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080597D4: .4byte 0x08C11070

	thumb_func_start sub_080597D8
sub_080597D8: @ 0x080597D8
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	bl GetSpellAnimationStartFrame
	adds r6, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08059802
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
_08059802:
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	adds r0, r6, #1
	cmp r1, r0
	bne _08059828
	ldr r0, _08059870 @ =0x00000119
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl PlaySFX
	adds r0, r5, #0
	bl sub_08059898
	adds r0, r5, #0
	bl sub_080599D4
_08059828:
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	adds r0, r6, #0
	adds r0, #0x59
	cmp r1, r0
	bne _0805983E
	adds r0, r5, #0
	movs r1, #2
	movs r2, #3
	bl sub_08059B08
_0805983E:
	movs r3, #0x2c
	ldrsh r1, [r4, r3]
	adds r0, r6, #0
	adds r0, #0x5e
	cmp r1, r0
	bne _08059874
	adds r0, r5, #0
	bl sub_08059948
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl StartBattleAnimHitEffectsDefault
	ldrb r0, [r4]
	cmp r0, #0
	bne _08059890
	adds r0, r5, #0
	bl sub_08068500
	b _08059890
	.align 2, 0
_08059870: .4byte 0x00000119
_08059874:
	adds r0, r6, #0
	adds r0, #0xc3
	cmp r1, r0
	beq _08059890
	adds r0, #5
	cmp r1, r0
	bne _08059890
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r4, #0
	bl Proc_Break
_08059890:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08059898
sub_08059898: @ 0x08059898
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _080598D4 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080598D8 @ =0x08C11088
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _080598DC @ =0x081EE088
	str r1, [r0, #0x48]
	ldr r1, _080598E0 @ =0x08C110CC
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r1, _080598E4 @ =0x08C110A0
	str r1, [r0, #0x54]
	ldr r0, _080598E8 @ =0x082131F8
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_SetSomeColorEffect
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080598D4: .4byte 0x0201774C
_080598D8: .4byte 0x08C11088
_080598DC: .4byte 0x081EE088
_080598E0: .4byte 0x08C110CC
_080598E4: .4byte 0x08C110A0
_080598E8: .4byte 0x082131F8

	thumb_func_start sub_080598EC
sub_080598EC: @ 0x080598EC
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	blt _08059928
	ldr r5, [r7, #0x4c]
	ldr r6, [r7, #0x50]
	ldr r0, [r7, #0x54]
	lsls r4, r4, #2
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, [r7, #0x5c]
	adds r5, r4, r5
	ldr r1, [r5]
	adds r4, r4, r6
	ldr r2, [r4]
	bl SpellFx_WriteBgMap
	b _0805993E
_08059928:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _0805993E
	ldr r1, _08059944 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r7, #0
	bl Proc_End
_0805993E:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08059944: .4byte 0x0201774C

	thumb_func_start sub_08059948
sub_08059948: @ 0x08059948
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08059964 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08059968 @ =0x08C110F8
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08059964: .4byte 0x0201774C
_08059968: .4byte 0x08C110F8

	thumb_func_start sub_0805996C
sub_0805996C: @ 0x0805996C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	ldr r3, _080599A4 @ =0x08C265CC
	str r3, [sp]
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	ldr r0, _080599A8 @ =0x082022A8
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _080599AC @ =0x08201E10
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	adds r0, r4, #0
	bl Proc_Break
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080599A4: .4byte 0x08C265CC
_080599A8: .4byte 0x082022A8
_080599AC: .4byte 0x08201E10

	thumb_func_start sub_080599B0
sub_080599B0: @ 0x080599B0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x60]
	bl AnimDelete
	ldr r1, _080599D0 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080599D0: .4byte 0x0201774C

	thumb_func_start sub_080599D4
sub_080599D4: @ 0x080599D4
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _080599F0 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080599F4 @ =0x08C11120
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080599F0: .4byte 0x0201774C
_080599F4: .4byte 0x08C11120

	thumb_func_start sub_080599F8
sub_080599F8: @ 0x080599F8
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0x8d
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl PlaySFX
	ldr r0, [r4, #0x5c]
	movs r1, #0x26
	bl sub_0804F7B8
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #5
	strh r0, [r4, #0x2e]
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_08059A2C
sub_08059A2C: @ 0x08059A2C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r6, r0]
	movs r1, #0x2e
	ldrsh r0, [r6, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	adds r5, r0, #0
	ldr r0, _08059A88 @ =gPal
	ldr r4, _08059A8C @ =0x020165C8
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r4, #0
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x20
	adds r3, r5, #0
	bl sub_08067750
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r6, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08059A80
	movs r0, #0
	strh r0, [r6, #0x2c]
	movs r0, #0xa
	strh r0, [r6, #0x2e]
	adds r0, r6, #0
	bl Proc_Break
_08059A80:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08059A88: .4byte gPal
_08059A8C: .4byte 0x020165C8

	thumb_func_start sub_08059A90
sub_08059A90: @ 0x08059A90
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	ldr r2, _08059B00 @ =gDispIo
	mov ip, r2
	mov r3, ip
	adds r3, #0x3c
	movs r1, #0x3f
	ldrb r2, [r3]
	ands r1, r2
	movs r2, #0x40
	orrs r1, r2
	strb r1, [r3]
	mov r1, ip
	adds r1, #0x44
	movs r2, #0
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x10
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x46
	strb r2, [r0]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08059AF8
	bl SpellFx_ClearBG1
	bl SpellFx_ClearColorEffects
	ldr r1, _08059B04 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08059AF8:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08059B00: .4byte gDispIo
_08059B04: .4byte 0x0201774C

	thumb_func_start sub_08059B08
sub_08059B08: @ 0x08059B08
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	ldr r1, _08059B3C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08059B40 @ =gPal
	ldr r1, _08059B44 @ =0x020165C8
	movs r2, #0x80
	lsls r2, r2, #1
	bl CpuFastSet
	ldr r0, _08059B48 @ =0x08C11160
	movs r1, #0
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	strh r6, [r0, #0x30]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08059B3C: .4byte 0x0201774C
_08059B40: .4byte gPal
_08059B44: .4byte 0x020165C8
_08059B48: .4byte 0x08C11160

	thumb_func_start sub_08059B4C
sub_08059B4C: @ 0x08059B4C
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r1, #0x2e
	ldrsh r0, [r5, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	adds r3, r0, #0
	ldr r4, _08059BA8 @ =0x020165C8
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x20
	bl sub_080676D4
	movs r1, #0xa0
	lsls r1, r1, #0x13
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r4, #0
	bl CpuFastSet
	bl DisablePalSync
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r5, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08059BA0
	movs r0, #0
	strh r0, [r5, #0x2c]
	adds r0, r5, #0
	bl Proc_Break
_08059BA0:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08059BA8: .4byte 0x020165C8

	thumb_func_start sub_08059BAC
sub_08059BAC: @ 0x08059BAC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08059BE8 @ =0x020165C8
	movs r1, #0xa0
	lsls r1, r1, #0x13
	movs r2, #0x80
	lsls r2, r2, #1
	bl CpuFastSet
	bl DisablePalSync
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08059BE0
	ldr r1, _08059BEC @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08059BE0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08059BE8: .4byte 0x020165C8
_08059BEC: .4byte 0x0201774C

	thumb_func_start nullsub_50
nullsub_50: @ 0x08059BF0
	bx lr
	.align 2, 0

	thumb_func_start sub_08059BF4
sub_08059BF4: @ 0x08059BF4
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _08059C2C @ =0x08C11180
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08059C2C: .4byte 0x08C11180

	thumb_func_start sub_08059C30
sub_08059C30: @ 0x08059C30
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	bl GetSpellAnimationStartFrame
	adds r2, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08059C6C
	movs r0, #0x85
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl PlaySFX
	adds r0, r5, #0
	bl sub_08059D20
	b _08059D1A
_08059C6C:
	cmp r0, #0x10
	bne _08059C78
	ldr r0, [r4, #0x5c]
	bl sub_08059EE4
	b _08059D1A
_08059C78:
	cmp r0, #0x4a
	bne _08059C88
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
	b _08059D1A
_08059C88:
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	adds r0, r2, #0
	adds r0, #0x4b
	cmp r1, r0
	bne _08059C9E
	adds r0, r5, #0
	bl sub_08059F28
	str r0, [r4, #0x64]
	b _08059D1A
_08059C9E:
	adds r0, r2, #0
	adds r0, #0x5e
	cmp r1, r0
	bne _08059CC4
	ldr r0, _08059CC0 @ =0x000002E1
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl PlaySFX
	ldr r0, [r4, #0x5c]
	bl sub_08059DD0
	b _08059D1A
	.align 2, 0
_08059CC0: .4byte 0x000002E1
_08059CC4:
	adds r0, r2, #0
	adds r0, #0x72
	cmp r1, r0
	bne _08059CD4
	ldr r0, [r4, #0x64]
	bl Proc_End
	b _08059D1A
_08059CD4:
	adds r0, r2, #0
	adds r0, #0x83
	cmp r1, r0
	bne _08059D04
	ldr r0, [r4, #0x5c]
	movs r1, #6
	bl sub_0804F7B8
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl StartBattleAnimHitEffectsDefault
	ldrb r0, [r4]
	cmp r0, #0
	bne _08059D1A
	adds r0, r5, #0
	bl sub_08068500
	b _08059D1A
_08059D04:
	adds r0, r2, #0
	adds r0, #0xa4
	cmp r1, r0
	bne _08059D1A
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r4, #0
	bl Proc_Break
_08059D1A:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08059D20
sub_08059D20: @ 0x08059D20
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _08059D78 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08059D7C @ =0x08C11198
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _08059D80 @ =0x081EE0CE
	str r0, [r5, #0x48]
	ldr r0, _08059D84 @ =0x08C111B0
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _08059D88 @ =0x08C11254
	str r0, [r5, #0x54]
	ldr r0, _08059D8C @ =0x0822CD7C
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_SetSomeColorEffect
	ldr r0, _08059D90 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08059D9E
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _08059D94
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
	b _08059D9E
	.align 2, 0
_08059D78: .4byte 0x0201774C
_08059D7C: .4byte 0x08C11198
_08059D80: .4byte 0x081EE0CE
_08059D84: .4byte 0x08C111B0
_08059D88: .4byte 0x08C11254
_08059D8C: .4byte 0x0822CD7C
_08059D90: .4byte gEkrDistanceType
_08059D94:
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
_08059D9E:
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _08059DB4
	ldr r0, _08059DB0 @ =gDispIo
	ldrh r1, [r0, #0x20]
	adds r1, #4
	b _08059DBA
	.align 2, 0
_08059DB0: .4byte gDispIo
_08059DB4:
	ldr r0, _08059DCC @ =gDispIo
	ldrh r1, [r0, #0x20]
	subs r1, #4
_08059DBA:
	strh r1, [r0, #0x20]
	adds r1, r0, #0
	ldrh r0, [r1, #0x22]
	adds r0, #8
	strh r0, [r1, #0x22]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08059DCC: .4byte gDispIo

	thumb_func_start sub_08059DD0
sub_08059DD0: @ 0x08059DD0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _08059E50 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08059E54 @ =0x08C11198
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r4, #0
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _08059E58 @ =0x081EE100
	str r0, [r5, #0x48]
	ldr r0, _08059E5C @ =0x08C111B0
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _08059E60 @ =0x08C11254
	str r0, [r5, #0x54]
	ldr r0, _08059E64 @ =0x0822CD9C
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_SetSomeColorEffect
	ldr r3, _08059E68 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r0, #0xa
	strb r0, [r1]
	adds r1, #1
	movs r0, #7
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r4, [r0]
	ldr r0, _08059E6C @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08059E7A
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _08059E70
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
	b _08059E7A
	.align 2, 0
_08059E50: .4byte 0x0201774C
_08059E54: .4byte 0x08C11198
_08059E58: .4byte 0x081EE100
_08059E5C: .4byte 0x08C111B0
_08059E60: .4byte 0x08C11254
_08059E64: .4byte 0x0822CD9C
_08059E68: .4byte gDispIo
_08059E6C: .4byte gEkrDistanceType
_08059E70:
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
_08059E7A:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08059E80
sub_08059E80: @ 0x08059E80
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	blt _08059EBC
	ldr r5, [r7, #0x4c]
	ldr r6, [r7, #0x50]
	ldr r0, [r7, #0x54]
	lsls r4, r4, #2
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, [r7, #0x5c]
	adds r5, r4, r5
	ldr r1, [r5]
	adds r4, r4, r6
	ldr r2, [r4]
	bl SpellFx_WriteBgMap
	b _08059EDA
_08059EBC:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _08059EDA
	bl SpellFx_ClearBG1
	ldr r1, _08059EE0 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r7, #0
	bl Proc_End
_08059EDA:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08059EE0: .4byte 0x0201774C

	thumb_func_start sub_08059EE4
sub_08059EE4: @ 0x08059EE4
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _08059F1C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08059F20 @ =0x08C112F8
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	adds r0, r5, #0
	bl GetCoreAIStruct
	ldr r3, _08059F24 @ =0x08C10828
	ldr r0, [r4, #0x5c]
	str r3, [sp]
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08059F1C: .4byte 0x0201774C
_08059F20: .4byte 0x08C112F8
_08059F24: .4byte 0x08C10828

	thumb_func_start sub_08059F28
sub_08059F28: @ 0x08059F28
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _08059F68 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08059F6C @ =0x08C11340
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	adds r0, r5, #0
	bl GetCoreAIStruct
	ldr r3, _08059F70 @ =0x08C10828
	ldr r0, [r4, #0x5c]
	str r3, [sp]
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	ldrh r1, [r0, #4]
	subs r1, #4
	strh r1, [r0, #4]
	adds r0, r4, #0
	add sp, #4
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08059F68: .4byte 0x0201774C
_08059F6C: .4byte 0x08C11340
_08059F70: .4byte 0x08C10828

	thumb_func_start sub_08059F74
sub_08059F74: @ 0x08059F74
	push {lr}
	ldr r2, _08059F88 @ =0x0201774C
	ldr r1, [r2]
	subs r1, #1
	str r1, [r2]
	ldr r0, [r0, #0x60]
	bl AnimDelete
	pop {r0}
	bx r0
	.align 2, 0
_08059F88: .4byte 0x0201774C

	thumb_func_start sub_08059F8C
sub_08059F8C: @ 0x08059F8C
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _08059FBC @ =0x08C28848
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _08059FC0 @ =0x0822FED0
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _08059FC4 @ =0x0822F2D8
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08059FBC: .4byte 0x08C28848
_08059FC0: .4byte 0x0822FED0
_08059FC4: .4byte 0x0822F2D8

	thumb_func_start sub_08059FC8
sub_08059FC8: @ 0x08059FC8
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _08059FF8 @ =0x08C289CC
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _08059FFC @ =0x0822FED0
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805A000 @ =0x0822F6D8
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08059FF8: .4byte 0x08C289CC
_08059FFC: .4byte 0x0822FED0
_0805A000: .4byte 0x0822F6D8

	thumb_func_start sub_0805A004
sub_0805A004: @ 0x0805A004
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _0805A034 @ =0x08C28E80
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _0805A038 @ =0x0822FED0
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805A03C @ =0x0822FB18
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805A034: .4byte 0x08C28E80
_0805A038: .4byte 0x0822FED0
_0805A03C: .4byte 0x0822FB18

	thumb_func_start sub_0805A040
sub_0805A040: @ 0x0805A040
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _0805A068 @ =0x08C28DC4
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	movs r0, #0x14
	strh r0, [r1, #0xa]
	bl AnimSort
	movs r0, #0x27
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805A068: .4byte 0x08C28DC4

	thumb_func_start sub_0805A06C
sub_0805A06C: @ 0x0805A06C
	adds r1, r0, #0
	ldr r2, [r1, #0x60]
	ldrh r0, [r1, #0x2c]
	adds r0, #1
	movs r3, #0
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x28
	bne _0805A08A
	ldr r0, _0805A08C @ =0x08C28DF8
	str r0, [r2, #0x24]
	str r0, [r2, #0x20]
	strh r3, [r2, #6]
	strh r3, [r1, #0x2c]
_0805A08A:
	bx lr
	.align 2, 0
_0805A08C: .4byte 0x08C28DF8

	thumb_func_start sub_0805A090
sub_0805A090: @ 0x0805A090
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _0805A0C8 @ =0x08C11370
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805A0C8: .4byte 0x08C11370

	thumb_func_start sub_0805A0CC
sub_0805A0CC: @ 0x0805A0CC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r6, r0, #0
	bl GetSpellAnimationStartFrame
	adds r5, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r1, #0
	mov r8, r1
	movs r7, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805A102
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
_0805A102:
	movs r2, #0x2c
	ldrsh r1, [r4, r2]
	adds r0, r5, #1
	cmp r1, r0
	bne _0805A160
	ldr r3, _0805A15C @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	mov r2, r8
	strb r2, [r0]
	adds r0, #1
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r2, [r0]
	str r1, [sp]
	str r7, [sp, #4]
	adds r0, r6, #0
	movs r1, #0
	movs r2, #0xa
	movs r3, #0
	bl sub_080566F0
	str r7, [sp]
	str r7, [sp, #4]
	adds r0, r6, #0
	movs r1, #0x23
	movs r2, #0x14
	movs r3, #0x10
	bl sub_080566F0
	adds r0, r6, #0
	bl sub_0805A29C
	movs r0, #0x92
	lsls r0, r0, #1
	b _0805A1AE
	.align 2, 0
_0805A15C: .4byte gDispIo
_0805A160:
	adds r0, r5, #0
	adds r0, #0xf
	cmp r1, r0
	bne _0805A198
	movs r0, #2
	str r0, [sp]
	adds r0, r6, #0
	movs r1, #0x2a
	movs r2, #0xf
	movs r3, #0
	bl sub_080560A4
	adds r1, r0, #0
	adds r0, r6, #0
	movs r2, #0x1e
	bl sub_0805A594
	ldr r0, _0805A194 @ =gDispIo
	movs r1, #0x20
	ldrsh r2, [r0, r1]
	adds r0, r6, #0
	movs r1, #0x2b
	movs r3, #0
	bl sub_080564B8
	b _0805A204
	.align 2, 0
_0805A194: .4byte gDispIo
_0805A198:
	adds r0, r5, #0
	adds r0, #0x3c
	cmp r1, r0
	bne _0805A1C4
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r1, [r0]
	adds r0, r6, #0
	bl sub_0805A210
	ldr r0, _0805A1C0 @ =0x00000125
_0805A1AE:
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r6, r3]
	movs r3, #1
	bl PlaySFX
	b _0805A204
	.align 2, 0
_0805A1C0: .4byte 0x00000125
_0805A1C4:
	adds r0, r5, #0
	adds r0, #0x41
	cmp r1, r0
	bne _0805A1EC
	movs r0, #9
	ldrh r1, [r6, #0x10]
	orrs r0, r1
	strh r0, [r6, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r6, #0
	bl StartBattleAnimResireHitEffects
	ldrb r0, [r4]
	cmp r0, #0
	bne _0805A204
	adds r0, r6, #0
	bl sub_08068500
	b _0805A204
_0805A1EC:
	adds r0, r5, #0
	adds r0, #0x6e
	cmp r1, r0
	beq _0805A204
	adds r0, #0x14
	cmp r1, r0
	bne _0805A204
	bl SpellFx_Finish
	adds r0, r4, #0
	bl Proc_Break
_0805A204:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0805A210
sub_0805A210: @ 0x0805A210
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _0805A270 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805A274 @ =0x08C11388
	movs r1, #3
	bl Proc_Start
	adds r6, r0, #0
	str r4, [r6, #0x5c]
	adds r1, r6, #0
	adds r1, #0x29
	movs r0, #0
	strb r5, [r1]
	strh r0, [r6, #0x2c]
	str r0, [r6, #0x44]
	ldr r0, _0805A278 @ =0x081EE176
	str r0, [r6, #0x48]
	ldr r0, _0805A27C @ =0x08C1149C
	str r0, [r6, #0x4c]
	str r0, [r6, #0x50]
	ldr r0, _0805A280 @ =0x08C113D0
	str r0, [r6, #0x54]
	ldr r0, _0805A284 @ =0x08238824
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_SetSomeColorEffect
	ldr r0, _0805A288 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0805A296
	ldr r0, [r6, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _0805A28C
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _0805A296
	.align 2, 0
_0805A270: .4byte 0x0201774C
_0805A274: .4byte 0x08C11388
_0805A278: .4byte 0x081EE176
_0805A27C: .4byte 0x08C1149C
_0805A280: .4byte 0x08C113D0
_0805A284: .4byte 0x08238824
_0805A288: .4byte gEkrDistanceType
_0805A28C:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_0805A296:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_0805A29C
sub_0805A29C: @ 0x0805A29C
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _0805A30C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805A310 @ =0x08C113B8
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _0805A314 @ =0x081EE242
	str r0, [r5, #0x48]
	ldr r0, _0805A318 @ =0x08C1149C
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _0805A31C @ =0x08C113D0
	str r0, [r5, #0x54]
	ldr r0, _0805A320 @ =0x08238824
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_SetSomeColorEffect
	ldr r2, _0805A324 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	ldr r0, _0805A328 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0805A336
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _0805A32C
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _0805A336
	.align 2, 0
_0805A30C: .4byte 0x0201774C
_0805A310: .4byte 0x08C113B8
_0805A314: .4byte 0x081EE242
_0805A318: .4byte 0x08C1149C
_0805A31C: .4byte 0x08C113D0
_0805A320: .4byte 0x08238824
_0805A324: .4byte gDispIo
_0805A328: .4byte gEkrDistanceType
_0805A32C:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_0805A336:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0805A33C
sub_0805A33C: @ 0x0805A33C
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	blt _0805A378
	ldr r5, [r7, #0x4c]
	ldr r6, [r7, #0x50]
	ldr r0, [r7, #0x54]
	lsls r4, r4, #2
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, [r7, #0x5c]
	adds r5, r4, r5
	ldr r1, [r5]
	adds r4, r4, r6
	ldr r2, [r4]
	bl SpellFx_WriteBgMap
	b _0805A3BA
_0805A378:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _0805A3BA
	bl SpellFx_ClearBG1
	adds r0, r7, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	bne _0805A3AC
	ldr r1, _0805A3A8 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	bl sub_080503A0
	adds r0, r7, #0
	bl Proc_End
	b _0805A3BA
	.align 2, 0
_0805A3A8: .4byte 0x0201774C
_0805A3AC:
	movs r0, #0
	strh r0, [r7, #0x2c]
	movs r0, #1
	strh r0, [r7, #0x2e]
	adds r0, r7, #0
	bl Proc_Break
_0805A3BA:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0805A3C0
sub_0805A3C0: @ 0x0805A3C0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, _0805A3E4 @ =0x02017750
	ldr r0, [r5]
	cmp r0, #2
	bne _0805A3EC
	ldr r1, _0805A3E8 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	bl sub_080503A0
	adds r0, r4, #0
	bl Proc_End
	b _0805A446
	.align 2, 0
_0805A3E4: .4byte 0x02017750
_0805A3E8: .4byte 0x0201774C
_0805A3EC:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r3, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r1, #0x2e
	ldrsh r2, [r4, r1]
	ldrh r1, [r4, #0x2e]
	cmp r0, r2
	ble _0805A404
	strh r1, [r4, #0x2c]
_0805A404:
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	cmp r0, r2
	bne _0805A446
	ldr r0, [r5]
	cmp r0, #1
	bne _0805A446
	strh r3, [r4, #0x2c]
	strh r3, [r4, #0x2e]
	str r3, [r4, #0x44]
	ldr r0, _0805A44C @ =0x081EE1E4
	str r0, [r4, #0x48]
	ldr r0, _0805A450 @ =0x08C1149C
	str r0, [r4, #0x4c]
	str r0, [r4, #0x50]
	ldr r0, _0805A454 @ =0x08C113D0
	str r0, [r4, #0x54]
	ldr r0, _0805A458 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0805A440
	bl GetSpellAnimationStartFrame
	strh r0, [r4, #0x2e]
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
_0805A440:
	adds r0, r4, #0
	bl Proc_Break
_0805A446:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805A44C: .4byte 0x081EE1E4
_0805A450: .4byte 0x08C1149C
_0805A454: .4byte 0x08C113D0
_0805A458: .4byte gEkrDistanceType

	thumb_func_start sub_0805A45C
sub_0805A45C: @ 0x0805A45C
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0805A4C2
	ldr r0, _0805A498 @ =gEkrDistanceType
	movs r3, #0
	ldrsh r0, [r0, r3]
	cmp r0, #0
	beq _0805A4A6
	ldr r0, [r4, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _0805A49C
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
	b _0805A4A6
	.align 2, 0
_0805A498: .4byte gEkrDistanceType
_0805A49C:
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
_0805A4A6:
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x93
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl PlaySFX
	adds r0, r4, #0
	bl Proc_Break
_0805A4C2:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0805A4C8
sub_0805A4C8: @ 0x0805A4C8
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	blt _0805A504
	ldr r5, [r7, #0x4c]
	ldr r6, [r7, #0x50]
	ldr r0, [r7, #0x54]
	lsls r4, r4, #2
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, [r7, #0x5c]
	adds r5, r4, r5
	ldr r1, [r5]
	adds r4, r4, r6
	ldr r2, [r4]
	bl SpellFx_WriteBgMap
	b _0805A526
_0805A504:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _0805A526
	bl SpellFx_ClearBG1
	ldr r1, _0805A52C @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	bl sub_080503A0
	adds r0, r7, #0
	bl Proc_Break
_0805A526:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805A52C: .4byte 0x0201774C

	thumb_func_start sub_0805A530
sub_0805A530: @ 0x0805A530
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	blt _0805A56C
	ldr r5, [r7, #0x4c]
	ldr r6, [r7, #0x50]
	ldr r0, [r7, #0x54]
	lsls r4, r4, #2
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, [r7, #0x5c]
	adds r5, r4, r5
	ldr r1, [r5]
	adds r4, r4, r6
	ldr r2, [r4]
	bl SpellFx_WriteBgMap
	b _0805A58A
_0805A56C:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _0805A58A
	bl SpellFx_ClearBG1
	ldr r1, _0805A590 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r7, #0
	bl Proc_Break
_0805A58A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805A590: .4byte 0x0201774C

	thumb_func_start sub_0805A594
sub_0805A594: @ 0x0805A594
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r1, #0
	adds r5, r2, #0
	ldr r1, _0805A5BC @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805A5C0 @ =0x08C11568
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	str r6, [r0, #0x64]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805A5BC: .4byte 0x0201774C
_0805A5C0: .4byte 0x08C11568

	thumb_func_start sub_0805A5C4
sub_0805A5C4: @ 0x0805A5C4
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r4, [r5, #0x64]
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r1, #0x2e
	ldrsh r0, [r5, r1]
	str r0, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0x80
	bl Interpolate
	str r0, [r4, #0x4c]
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r5, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0805A600
	ldr r1, _0805A608 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r5, #0
	bl Proc_Break
_0805A600:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805A608: .4byte 0x0201774C

	thumb_func_start sub_0805A60C
sub_0805A60C: @ 0x0805A60C
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _0805A644 @ =0x08C11580
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805A644: .4byte 0x08C11580

	thumb_func_start sub_0805A648
sub_0805A648: @ 0x0805A648
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	bl GetSpellAnimationStartFrame
	adds r6, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805A672
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
_0805A672:
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	adds r0, r6, #1
	cmp r1, r0
	bne _0805A696
	movs r0, #0x90
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl PlaySFX
	adds r0, r5, #0
	bl sub_0805A700
	b _0805A6F8
_0805A696:
	adds r0, r6, #0
	adds r0, #0x1a
	cmp r1, r0
	bne _0805A6DC
	ldr r0, _0805A6D8 @ =0x00000121
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl PlaySFX
	ldr r0, [r4, #0x5c]
	movs r1, #4
	bl sub_0804F7B8
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl StartBattleAnimHitEffectsDefault
	ldrb r0, [r4]
	cmp r0, #0
	bne _0805A6F8
	adds r0, r5, #0
	bl sub_08068500
	b _0805A6F8
	.align 2, 0
_0805A6D8: .4byte 0x00000121
_0805A6DC:
	adds r0, r6, #0
	adds r0, #0x2f
	cmp r1, r0
	beq _0805A6F8
	adds r0, #1
	cmp r1, r0
	bne _0805A6F8
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r4, #0
	bl Proc_Break
_0805A6F8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805A700
sub_0805A700: @ 0x0805A700
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _0805A754 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805A758 @ =0x08C11598
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _0805A75C @ =0x081EE248
	str r0, [r5, #0x48]
	ldr r0, _0805A760 @ =0x08C116B8
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _0805A764 @ =0x08C115B0
	str r0, [r5, #0x54]
	ldr r0, _0805A768 @ =0x08C11634
	str r0, [r5, #0x58]
	bl SpellFx_SetSomeColorEffect
	ldr r0, _0805A76C @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0805A77A
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _0805A770
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _0805A77A
	.align 2, 0
_0805A754: .4byte 0x0201774C
_0805A758: .4byte 0x08C11598
_0805A75C: .4byte 0x081EE248
_0805A760: .4byte 0x08C116B8
_0805A764: .4byte 0x08C115B0
_0805A768: .4byte 0x08C11634
_0805A76C: .4byte gEkrDistanceType
_0805A770:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_0805A77A:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0805A780
sub_0805A780: @ 0x0805A780
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r5, r0, #0x10
	cmp r5, #0
	blt _0805A808
	ldr r6, [r7, #0x4c]
	ldr r0, [r7, #0x50]
	mov r8, r0
	ldr r0, [r7, #0x54]
	ldr r4, [r7, #0x58]
	lsls r5, r5, #2
	adds r0, r5, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	adds r4, r5, r4
	ldr r0, [r4]
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	ldr r0, [r7, #0x5c]
	adds r6, r5, r6
	ldr r1, [r6]
	add r5, r8
	ldr r2, [r5]
	bl SpellFx_WriteBgMap
	ldr r0, _0805A7E8 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0805A826
	ldr r0, [r7, #0x5c]
	bl GetAISSubjectId
	adds r1, r0, #0
	cmp r1, #0
	bne _0805A7F0
	ldr r0, _0805A7EC @ =gBg1Tm
	b _0805A7F4
	.align 2, 0
_0805A7E8: .4byte gEkrDistanceType
_0805A7EC: .4byte gBg1Tm
_0805A7F0:
	ldr r0, _0805A804 @ =0x0202349A
	movs r1, #0
_0805A7F4:
	str r1, [sp]
	movs r1, #3
	movs r2, #0x14
	movs r3, #0
	bl sub_080671A0
	b _0805A826
	.align 2, 0
_0805A804: .4byte 0x0202349A
_0805A808:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r5, r0
	bne _0805A826
	bl SpellFx_ClearBG1
	ldr r1, _0805A834 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r7, #0
	bl Proc_End
_0805A826:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805A834: .4byte 0x0201774C

	thumb_func_start sub_0805A838
sub_0805A838: @ 0x0805A838
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _0805A874 @ =0x08C1173C
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r6, #0
	strh r6, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	ldr r0, _0805A878 @ =0x02020038
	str r6, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805A874: .4byte 0x08C1173C
_0805A878: .4byte 0x02020038

	thumb_func_start sub_0805A87C
sub_0805A87C: @ 0x0805A87C
	push {lr}
	adds r2, r0, #0
	adds r3, r1, #0
	ldr r0, _0805A898 @ =0x02020038
	ldr r0, [r0]
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _0805A89C
	adds r1, #0xff
	movs r0, #0xfe
	bl PlaySFX
	b _0805A8A6
	.align 2, 0
_0805A898: .4byte 0x02020038
_0805A89C:
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0xff
	bl PlaySFX
_0805A8A6:
	ldr r1, _0805A8B4 @ =0x02020038
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0805A8B4: .4byte 0x02020038

	thumb_func_start sub_0805A8B8
sub_0805A8B8: @ 0x0805A8B8
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r6, r0, #0
	ldr r0, [r6, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	bl GetSpellAnimationStartFrame
	adds r4, r0, #0
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	movs r7, #0
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805A8E6
	ldr r0, [r6, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
_0805A8E6:
	movs r0, #0x2c
	ldrsh r1, [r6, r0]
	adds r0, r4, #1
	cmp r1, r0
	bne _0805A908
	adds r0, r5, #0
	movs r1, #4
	bl sub_0804F7B8
	adds r0, r5, #0
	bl sub_0805A9E8
	adds r0, r5, #0
	bl sub_0805AAB4
	movs r0, #0x30
	b _0805A92E
_0805A908:
	adds r0, r4, #0
	adds r0, #0x15
	cmp r1, r0
	bne _0805A91C
	adds r0, r5, #0
	movs r1, #4
	bl sub_0804F7B8
	movs r0, #0xa0
	b _0805A92E
_0805A91C:
	adds r0, r4, #0
	adds r0, #0x29
	cmp r1, r0
	bne _0805A936
	adds r0, r5, #0
	movs r1, #4
	bl sub_0804F7B8
	movs r0, #0x70
_0805A92E:
	movs r1, #0
	bl sub_0805A87C
	b _0805A9E0
_0805A936:
	adds r0, r4, #0
	adds r0, #0x3d
	cmp r1, r0
	bne _0805A96A
	adds r0, r5, #0
	movs r1, #4
	bl sub_0804F7B8
	movs r0, #0x10
	str r0, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #3
	movs r2, #0xa
	movs r3, #0
	bl sub_080566F0
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	adds r0, r1, #0
	movs r3, #1
	bl PlaySFX
	b _0805A9E0
_0805A96A:
	adds r0, r4, #0
	adds r0, #0x5e
	cmp r1, r0
	bne _0805A9B0
	adds r0, r5, #0
	movs r1, #4
	bl sub_0804F7B8
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, r6, #0
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl StartBattleAnimHitEffectsDefault
	ldr r0, _0805A9AC @ =0x00000101
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl PlaySFX
	ldrb r0, [r4]
	cmp r0, #0
	bne _0805A9E0
	adds r0, r5, #0
	bl sub_08068500
	b _0805A9E0
	.align 2, 0
_0805A9AC: .4byte 0x00000101
_0805A9B0:
	adds r0, r4, #0
	adds r0, #0x69
	cmp r1, r0
	bne _0805A9CA
	str r7, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0x14
	movs r3, #8
	bl sub_080566F0
	b _0805A9E0
_0805A9CA:
	adds r0, r4, #0
	adds r0, #0x71
	cmp r1, r0
	bne _0805A9E0
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r6, #0
	bl Proc_Break
_0805A9E0:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0805A9E8
sub_0805A9E8: @ 0x0805A9E8
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0805AA20 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805AA24 @ =0x08C11754
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _0805AA28 @ =0x081EE2CE
	str r1, [r0, #0x48]
	ldr r1, _0805AA2C @ =0x08C119DC
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r1, _0805AA30 @ =0x08C1176C
	str r1, [r0, #0x54]
	ldr r1, _0805AA34 @ =0x08C118A4
	str r1, [r0, #0x58]
	bl SpellFx_SetSomeColorEffect
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805AA20: .4byte 0x0201774C
_0805AA24: .4byte 0x08C11754
_0805AA28: .4byte 0x081EE2CE
_0805AA2C: .4byte 0x08C119DC
_0805AA30: .4byte 0x08C1176C
_0805AA34: .4byte 0x08C118A4

	thumb_func_start sub_0805AA38
sub_0805AA38: @ 0x0805AA38
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r5, r0, #0x10
	cmp r5, #0
	blt _0805AA86
	ldr r6, [r7, #0x4c]
	ldr r0, [r7, #0x50]
	mov r8, r0
	ldr r0, [r7, #0x54]
	ldr r4, [r7, #0x58]
	lsls r5, r5, #2
	adds r0, r5, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	adds r4, r5, r4
	ldr r0, [r4]
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	ldr r0, [r7, #0x5c]
	adds r6, r5, r6
	ldr r1, [r6]
	add r5, r8
	ldr r2, [r5]
	bl SpellFx_WriteBgMap
	b _0805AAA4
_0805AA86:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r5, r0
	bne _0805AAA4
	bl SpellFx_ClearBG1
	ldr r1, _0805AAB0 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r7, #0
	bl Proc_End
_0805AAA4:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805AAB0: .4byte 0x0201774C

	thumb_func_start sub_0805AAB4
sub_0805AAB4: @ 0x0805AAB4
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0805AAE0 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805AAE4 @ =0x08C11B14
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r2, #0
	strh r2, [r0, #0x2c]
	movs r1, #7
	str r1, [r0, #0x44]
	strh r2, [r0, #0x2e]
	movs r1, #6
	str r1, [r0, #0x48]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805AAE0: .4byte 0x0201774C
_0805AAE4: .4byte 0x08C11B14

	thumb_func_start sub_0805AAE8
sub_0805AAE8: @ 0x0805AAE8
	push {r4, r5, lr}
	adds r5, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r5, #0x44]
	cmp r0, r1
	ble _0805AB44
	movs r0, #0
	strh r0, [r5, #0x2c]
	ldr r2, _0805AB4C @ =0x08C11B34
	movs r1, #0x2e
	ldrsh r0, [r5, r1]
	lsls r1, r0, #3
	adds r1, r1, r2
	ldr r4, [r1]
	lsls r0, r0, #1
	adds r0, #1
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r2, [r0]
	ldr r0, [r5, #0x60]
	adds r1, r4, #0
	bl sub_0805AB54
	adds r0, r4, #0
	movs r1, #1
	bl sub_0805A87C
	ldrh r0, [r5, #0x2e]
	adds r0, #1
	strh r0, [r5, #0x2e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r5, #0x48]
	cmp r0, r1
	ble _0805AB44
	ldr r1, _0805AB50 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r5, #0
	bl Proc_Break
_0805AB44:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805AB4C: .4byte 0x08C11B34
_0805AB50: .4byte 0x0201774C

	thumb_func_start sub_0805AB54
sub_0805AB54: @ 0x0805AB54
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	ldr r1, _0805ABAC @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805ABB0 @ =0x08C11B6C
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	ldr r3, _0805ABB4 @ =0x08C2ACB0
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	strh r6, [r0, #2]
	mov r1, r8
	strh r1, [r0, #4]
	ldr r0, _0805ABB8 @ =0x0826F94C
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805ABBC @ =0x0826F688
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805ABAC: .4byte 0x0201774C
_0805ABB0: .4byte 0x08C11B6C
_0805ABB4: .4byte 0x08C2ACB0
_0805ABB8: .4byte 0x0826F94C
_0805ABBC: .4byte 0x0826F688

	thumb_func_start sub_0805ABC0
sub_0805ABC0: @ 0x0805ABC0
	push {lr}
	ldr r0, [r0, #0x60]
	bl AnimDelete
	ldr r1, _0805ABD4 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0805ABD4: .4byte 0x0201774C

	thumb_func_start sub_0805ABD8
sub_0805ABD8: @ 0x0805ABD8
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _0805AC10 @ =0x08C11B8C
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805AC10: .4byte 0x08C11B8C

	thumb_func_start sub_0805AC14
sub_0805AC14: @ 0x0805AC14
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r6, r0, #0
	ldr r0, [r6, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	bl GetSpellAnimationStartFrame
	mov r8, r0
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805AC46
	ldr r0, [r6, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
_0805AC46:
	movs r0, #0x2c
	ldrsh r1, [r6, r0]
	mov r0, r8
	adds r0, #1
	cmp r1, r0
	bne _0805AC68
	adds r0, r5, #0
	movs r1, #0x82
	bl sub_0805B32C
	ldr r0, _0805AC8C @ =0x000002CA
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x78
	movs r3, #0
	bl PlaySFX
_0805AC68:
	movs r2, #0x2c
	ldrsh r1, [r6, r2]
	mov r0, r8
	adds r0, #0x32
	movs r2, #0x29
	adds r2, r2, r6
	mov sb, r2
	cmp r1, r0
	bne _0805ACE6
	ldrb r0, [r2]
	cmp r0, #0
	bne _0805AC90
	adds r0, r5, #0
	movs r1, #0xcd
	movs r2, #0xa
	bl sub_080569B8
	b _0805AC9A
	.align 2, 0
_0805AC8C: .4byte 0x000002CA
_0805AC90:
	adds r0, r5, #0
	movs r1, #0x69
	movs r2, #0xa
	bl sub_080569B8
_0805AC9A:
	adds r0, r5, #0
	movs r1, #0x28
	bl sub_0805B264
	ldr r3, _0805ADC4 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r4, #0
	strb r4, [r0]
	adds r0, #1
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r4, [r0]
	str r1, [sp]
	str r4, [sp, #4]
	adds r0, r5, #0
	movs r1, #0
	movs r2, #8
	movs r3, #0
	bl sub_080566F0
	str r4, [sp]
	str r4, [sp, #4]
	adds r0, r5, #0
	movs r1, #0x20
	movs r2, #8
	movs r3, #0x10
	bl sub_080566F0
_0805ACE6:
	movs r2, #0x2c
	ldrsh r1, [r6, r2]
	mov r0, r8
	adds r0, #0x64
	cmp r1, r0
	bne _0805AD02
	adds r0, r5, #0
	movs r1, #0x34
	bl sub_0805AE14
	adds r0, r5, #0
	movs r1, #0x34
	bl sub_0805AEE0
_0805AD02:
	movs r0, #0x2c
	ldrsh r1, [r6, r0]
	mov r0, r8
	adds r0, #0x78
	cmp r1, r0
	bne _0805AD18
	adds r0, r5, #0
	movs r1, #0x23
	movs r2, #0x19
	bl sub_0805B5D8
_0805AD18:
	mov r2, sb
	ldrb r7, [r2]
	cmp r7, #0
	bne _0805ADCC
	movs r0, #0x2c
	ldrsh r1, [r6, r0]
	mov r0, r8
	adds r0, #0x9b
	cmp r1, r0
	bne _0805ADA8
	movs r0, #9
	movs r4, #0
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	ldrb r1, [r2]
	adds r0, r5, #0
	bl StartBattleAnimHitEffectsDefault
	adds r0, r5, #0
	bl sub_08068500
	adds r0, r5, #0
	movs r1, #0x3c
	bl sub_0805B04C
	ldr r3, _0805ADC4 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r4, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r4, [r0]
	movs r0, #0xc
	str r0, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0
	movs r2, #5
	movs r3, #0
	bl sub_080566F0
	str r7, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0x3c
	movs r2, #0x1e
	movs r3, #0xc
	bl sub_080566F0
	adds r0, r5, #0
	bl sub_0805AF74
	ldr r0, _0805ADC8 @ =0x000002CB
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x78
	movs r3, #0
	bl PlaySFX
_0805ADA8:
	movs r2, #0x2c
	ldrsh r1, [r6, r2]
	mov r0, r8
	adds r0, #0xff
	cmp r1, r0
	bne _0805AE04
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r6, #0
	bl Proc_Break
	b _0805AE04
	.align 2, 0
_0805ADC4: .4byte gDispIo
_0805ADC8: .4byte 0x000002CB
_0805ADCC:
	movs r0, #0x2c
	ldrsh r1, [r6, r0]
	mov r0, r8
	adds r0, #0x9b
	cmp r1, r0
	bne _0805ADEA
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	mov r2, sb
	ldrb r1, [r2]
	adds r0, r5, #0
	bl StartBattleAnimHitEffectsDefault
_0805ADEA:
	movs r0, #0x2c
	ldrsh r1, [r6, r0]
	mov r0, r8
	adds r0, #0xa0
	cmp r1, r0
	bne _0805AE04
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r6, #0
	bl Proc_Break
_0805AE04:
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805AE14
sub_0805AE14: @ 0x0805AE14
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _0805AE54 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805AE58 @ =0x08C11BA4
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	strh r5, [r0, #0x30]
	str r1, [r0, #0x44]
	ldr r1, _0805AE5C @ =0x081EE444
	str r1, [r0, #0x48]
	ldr r1, _0805AE60 @ =0x08C11BBC
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r0, _0805AE64 @ =0x08281F58
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	bl SpellFx_SetSomeColorEffect
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805AE54: .4byte 0x0201774C
_0805AE58: .4byte 0x08C11BA4
_0805AE5C: .4byte 0x081EE444
_0805AE60: .4byte 0x08C11BBC
_0805AE64: .4byte 0x08281F58

	thumb_func_start sub_0805AE68
sub_0805AE68: @ 0x0805AE68
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _0805AEA6
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	ldr r0, _0805AED4 @ =0x0202349C
	ldr r1, _0805AED8 @ =0x0000011F
	str r1, [sp]
	movs r1, #2
	movs r2, #0x14
	movs r3, #1
	bl sub_080671A0
_0805AEA6:
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0805AECC
	bl SpellFx_ClearBG1
	ldr r1, _0805AEDC @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_0805AECC:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805AED4: .4byte 0x0202349C
_0805AED8: .4byte 0x0000011F
_0805AEDC: .4byte 0x0201774C

	thumb_func_start sub_0805AEE0
sub_0805AEE0: @ 0x0805AEE0
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _0805AF18 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805AF1C @ =0x08C11BEC
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	strh r5, [r0, #0x30]
	str r1, [r0, #0x44]
	ldr r1, _0805AF20 @ =0x081EE476
	str r1, [r0, #0x48]
	ldr r1, _0805AF24 @ =0x082838A8
	str r1, [r0, #0x4c]
	adds r0, r1, #0
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805AF18: .4byte 0x0201774C
_0805AF1C: .4byte 0x08C11BEC
_0805AF20: .4byte 0x081EE476
_0805AF24: .4byte 0x082838A8

	thumb_func_start sub_0805AF28
sub_0805AF28: @ 0x0805AF28
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _0805AF4C
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
_0805AF4C:
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _0805AF6A
	ldr r1, _0805AF70 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0805AF6A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805AF70: .4byte 0x0201774C

	thumb_func_start sub_0805AF74
sub_0805AF74: @ 0x0805AF74
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0805AFB0 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805AFB4 @ =0x08C11C0C
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _0805AFB8 @ =0x081EE488
	str r1, [r0, #0x48]
	ldr r1, _0805AFBC @ =0x08C11C24
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r1, _0805AFC0 @ =0x08C11C38
	str r1, [r0, #0x54]
	ldr r0, _0805AFC4 @ =0x0828CE4C
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_SetSomeColorEffect
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805AFB0: .4byte 0x0201774C
_0805AFB4: .4byte 0x08C11C0C
_0805AFB8: .4byte 0x081EE488
_0805AFBC: .4byte 0x08C11C24
_0805AFC0: .4byte 0x08C11C38
_0805AFC4: .4byte 0x0828CE4C

	thumb_func_start sub_0805AFC8
sub_0805AFC8: @ 0x0805AFC8
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	blt _0805B020
	ldr r5, [r7, #0x4c]
	ldr r6, [r7, #0x50]
	ldr r0, [r7, #0x54]
	lsls r4, r4, #2
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, [r7, #0x5c]
	adds r5, r4, r5
	ldr r1, [r5]
	adds r4, r4, r6
	ldr r2, [r4]
	bl SpellFx_WriteBgMap
	ldr r0, _0805B018 @ =0x0202349C
	ldr r1, _0805B01C @ =0x0000011F
	str r1, [sp]
	movs r1, #2
	movs r2, #0x14
	movs r3, #1
	bl sub_080671A0
	b _0805B03E
	.align 2, 0
_0805B018: .4byte 0x0202349C
_0805B01C: .4byte 0x0000011F
_0805B020:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _0805B03E
	bl SpellFx_ClearBG1
	ldr r1, _0805B048 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r7, #0
	bl Proc_Break
_0805B03E:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805B048: .4byte 0x0201774C

	thumb_func_start sub_0805B04C
sub_0805B04C: @ 0x0805B04C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _0805B08C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805B090 @ =0x08C11C4C
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r2, #0
	strh r2, [r0, #0x2c]
	strh r2, [r0, #0x2e]
	strh r5, [r0, #0x30]
	movs r1, #2
	str r1, [r0, #0x44]
	str r2, [r0, #0x48]
	ldr r0, _0805B094 @ =0x08293E50
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	ldr r0, _0805B098 @ =0x082946D8
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805B08C: .4byte 0x0201774C
_0805B090: .4byte 0x08C11C4C
_0805B094: .4byte 0x08293E50
_0805B098: .4byte 0x082946D8

	thumb_func_start sub_0805B09C
sub_0805B09C: @ 0x0805B09C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _0805B0C4
	ldr r1, _0805B0C0 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
	b _0805B108
	.align 2, 0
_0805B0C0: .4byte 0x0201774C
_0805B0C4:
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r4, #0x44]
	cmp r0, r1
	bne _0805B108
	movs r0, #0
	strh r0, [r4, #0x2e]
	movs r0, #2
	str r0, [r4, #0x44]
	bl sub_08004BA0
	cmp r0, #4
	ble _0805B0F2
	ldr r0, [r4, #0x5c]
	ldr r2, [r4, #0x48]
	adds r1, r2, #0
	adds r2, #1
	str r2, [r4, #0x48]
	bl sub_0805B110
_0805B0F2:
	bl sub_08004BA0
	cmp r0, #4
	ble _0805B108
	ldr r0, [r4, #0x5c]
	ldr r2, [r4, #0x48]
	adds r1, r2, #0
	adds r2, #1
	str r2, [r4, #0x48]
	bl sub_0805B110
_0805B108:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805B110
sub_0805B110: @ 0x0805B110
	push {r4, r5, r6, r7, lr}
	sub sp, #0x90
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r1, _0805B17C @ =0x081EE53E
	mov r0, sp
	movs r2, #0x10
	bl memcpy
	add r4, sp, #0x10
	ldr r1, _0805B180 @ =0x081EE54E
	adds r0, r4, #0
	movs r2, #0x80
	bl memcpy
	ldr r1, _0805B184 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805B188 @ =0x08C11C64
	movs r1, #3
	bl Proc_Start
	adds r7, r0, #0
	str r5, [r7, #0x5c]
	movs r5, #0
	strh r5, [r7, #0x2c]
	movs r0, #7
	ands r0, r6
	lsls r0, r0, #1
	add r0, sp
	ldrh r0, [r0]
	strh r0, [r7, #0x2e]
	movs r0, #0xe0
	bl sub_08067AD4
	adds r0, #8
	strh r0, [r7, #0x32]
	strh r5, [r7, #0x3a]
	movs r1, #0
	movs r0, #0x3f
	ands r0, r6
	lsls r0, r0, #1
	adds r4, r4, r0
	movs r2, #0
	ldrsh r0, [r4, r2]
	cmp r0, #5
	bhi _0805B1DC
	lsls r0, r0, #2
	ldr r1, _0805B18C @ =_0805B190
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0805B17C: .4byte 0x081EE53E
_0805B180: .4byte 0x081EE54E
_0805B184: .4byte 0x0201774C
_0805B188: .4byte 0x08C11C64
_0805B18C: .4byte _0805B190
_0805B190: @ jump table
	.4byte _0805B1A8 @ case 0
	.4byte _0805B1B0 @ case 1
	.4byte _0805B1B8 @ case 2
	.4byte _0805B1C0 @ case 3
	.4byte _0805B1C8 @ case 4
	.4byte _0805B1D0 @ case 5
_0805B1A8:
	ldr r0, _0805B1AC @ =0x08C417C4
	b _0805B1D2
	.align 2, 0
_0805B1AC: .4byte 0x08C417C4
_0805B1B0:
	ldr r0, _0805B1B4 @ =0x08C417BC
	b _0805B1D2
	.align 2, 0
_0805B1B4: .4byte 0x08C417BC
_0805B1B8:
	ldr r0, _0805B1BC @ =0x08C417B4
	b _0805B1D2
	.align 2, 0
_0805B1BC: .4byte 0x08C417B4
_0805B1C0:
	ldr r0, _0805B1C4 @ =0x08C417AC
	b _0805B1D2
	.align 2, 0
_0805B1C4: .4byte 0x08C417AC
_0805B1C8:
	ldr r0, _0805B1CC @ =0x08C417CC
	b _0805B1D2
	.align 2, 0
_0805B1CC: .4byte 0x08C417CC
_0805B1D0:
	ldr r0, _0805B1F0 @ =0x08C417A4
_0805B1D2:
	movs r1, #0x78
	bl AnimCreate
	adds r1, r0, #0
	str r1, [r7, #0x60]
_0805B1DC:
	cmp r1, #0
	bne _0805B1F8
	ldr r1, _0805B1F4 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r7, #0
	bl Proc_End
	b _0805B206
	.align 2, 0
_0805B1F0: .4byte 0x08C417A4
_0805B1F4: .4byte 0x0201774C
_0805B1F8:
	movs r0, #0x91
	lsls r0, r0, #6
	strh r0, [r1, #8]
	ldrh r0, [r7, #0x32]
	strh r0, [r1, #2]
	ldrh r0, [r7, #0x3a]
	strh r0, [r1, #4]
_0805B206:
	add sp, #0x90
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805B210
sub_0805B210: @ 0x0805B210
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r5, [r4, #0x60]
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	movs r2, #0x2e
	ldrsh r0, [r4, r2]
	cmp r1, r0
	ble _0805B240
	ldr r1, _0805B23C @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r5, #0
	bl AnimDelete
	adds r0, r4, #0
	bl Proc_Break
	b _0805B25C
	.align 2, 0
_0805B23C: .4byte 0x0201774C
_0805B240:
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #1
	movs r1, #0x78
	movs r2, #8
	bl Interpolate
	strh r0, [r5, #4]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
_0805B25C:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0805B264
sub_0805B264: @ 0x0805B264
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _0805B2A8 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805B2AC @ =0x08C11C7C
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	strh r5, [r0, #0x30]
	str r1, [r0, #0x44]
	ldr r1, _0805B2B0 @ =0x081EE5CE
	str r1, [r0, #0x48]
	ldr r1, _0805B2B4 @ =0x08C11C94
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r1, _0805B2B8 @ =0x08C11CA0
	str r1, [r0, #0x54]
	ldr r0, _0805B2BC @ =0x0829311C
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_SetSomeColorEffect
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805B2A8: .4byte 0x0201774C
_0805B2AC: .4byte 0x08C11C7C
_0805B2B0: .4byte 0x081EE5CE
_0805B2B4: .4byte 0x08C11C94
_0805B2B8: .4byte 0x08C11CA0
_0805B2BC: .4byte 0x0829311C

	thumb_func_start sub_0805B2C0
sub_0805B2C0: @ 0x0805B2C0
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r0, #0x2c
	adds r1, r6, #0
	adds r1, #0x44
	ldr r2, [r6, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	blt _0805B2FA
	ldr r1, [r6, #0x4c]
	ldr r2, [r6, #0x50]
	ldr r5, [r6, #0x54]
	ldr r0, [r6, #0x5c]
	lsls r4, r4, #2
	adds r1, r4, r1
	ldr r1, [r1]
	adds r2, r4, r2
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	adds r4, r4, r5
	ldr r0, [r4]
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
_0805B2FA:
	ldrh r0, [r6, #0x2e]
	adds r0, #1
	strh r0, [r6, #0x2e]
	lsls r0, r0, #0x10
	ldrh r2, [r6, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0805B320
	bl SpellFx_ClearBG1
	ldr r1, _0805B328 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r6, #0
	bl Proc_Break
_0805B320:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805B328: .4byte 0x0201774C

	thumb_func_start sub_0805B32C
sub_0805B32C: @ 0x0805B32C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _0805B370 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805B374 @ =0x08C11CAC
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r4, #0
	strh r4, [r0, #0x2c]
	strh r4, [r0, #0x2e]
	strh r5, [r0, #0x30]
	movs r1, #2
	str r1, [r0, #0x44]
	str r4, [r0, #0x48]
	ldr r0, _0805B378 @ =0x082946F8
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	ldr r0, _0805B37C @ =0x0829472C
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805B380 @ =0x0202003C
	str r4, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805B370: .4byte 0x0201774C
_0805B374: .4byte 0x08C11CAC
_0805B378: .4byte 0x082946F8
_0805B37C: .4byte 0x0829472C
_0805B380: .4byte 0x0202003C

	thumb_func_start sub_0805B384
sub_0805B384: @ 0x0805B384
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _0805B3B8
	ldr r1, _0805B3B0 @ =0x0202003C
	movs r0, #1
	str r0, [r1]
	ldr r1, _0805B3B4 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
	b _0805B3FC
	.align 2, 0
_0805B3B0: .4byte 0x0202003C
_0805B3B4: .4byte 0x0201774C
_0805B3B8:
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r4, #0x44]
	cmp r0, r1
	bne _0805B3FC
	movs r0, #0
	strh r0, [r4, #0x2e]
	movs r0, #2
	str r0, [r4, #0x44]
	bl sub_08004BA0
	cmp r0, #4
	ble _0805B3E6
	ldr r0, [r4, #0x5c]
	ldr r2, [r4, #0x48]
	adds r1, r2, #0
	adds r2, #1
	str r2, [r4, #0x48]
	bl sub_0805B404
_0805B3E6:
	bl sub_08004BA0
	cmp r0, #4
	ble _0805B3FC
	ldr r0, [r4, #0x5c]
	ldr r2, [r4, #0x48]
	adds r1, r2, #0
	adds r2, #1
	str r2, [r4, #0x48]
	bl sub_0805B404
_0805B3FC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805B404
sub_0805B404: @ 0x0805B404
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x40
	mov r8, r0
	mov sl, r1
	ldr r1, _0805B4A0 @ =0x081EE5DC
	mov r0, sp
	movs r2, #0x10
	bl memcpy
	add r5, sp, #0x10
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0x10
	bl memset
	movs r6, #0
	movs r0, #1
	strh r0, [r5, #4]
	strh r0, [r5, #0xa]
	add r0, sp, #0x20
	mov sb, r0
	ldr r1, _0805B4A4 @ =0x081EE5EC
	movs r2, #0x10
	bl memcpy
	add r4, sp, #0x30
	ldr r1, _0805B4A8 @ =0x081EE5FC
	adds r0, r4, #0
	movs r2, #0x10
	bl memcpy
	ldr r1, _0805B4AC @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805B4B0 @ =0x08C11CC4
	movs r1, #3
	bl Proc_Start
	adds r7, r0, #0
	mov r1, r8
	str r1, [r7, #0x5c]
	strh r6, [r7, #0x2c]
	movs r0, #7
	mov r2, sl
	ands r0, r2
	lsls r6, r0, #1
	mov r1, sp
	adds r0, r1, r6
	ldrh r0, [r0]
	strh r0, [r7, #0x2e]
	movs r0, #0xff
	bl sub_08067AD4
	strh r0, [r7, #0x30]
	movs r0, #0x10
	bl sub_08067AD4
	adds r4, r4, r6
	ldrh r4, [r4]
	adds r0, r4, r0
	strh r0, [r7, #0x32]
	movs r0, #0x70
	strh r0, [r7, #0x3a]
	ldr r0, [r7, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _0805B4B4
	mov r2, sb
	adds r0, r2, r6
	movs r1, #0
	ldrsh r0, [r0, r1]
	b _0805B4BE
	.align 2, 0
_0805B4A0: .4byte 0x081EE5DC
_0805B4A4: .4byte 0x081EE5EC
_0805B4A8: .4byte 0x081EE5FC
_0805B4AC: .4byte 0x0201774C
_0805B4B0: .4byte 0x08C11CC4
_0805B4B4:
	mov r2, sb
	adds r0, r2, r6
	movs r1, #0
	ldrsh r0, [r0, r1]
	rsbs r0, r0, #0
_0805B4BE:
	str r0, [r7, #0x44]
	movs r1, #0
	movs r0, #7
	mov r2, sl
	ands r0, r2
	lsls r0, r0, #1
	adds r0, r5, r0
	movs r2, #0
	ldrsh r0, [r0, r2]
	cmp r0, #0
	beq _0805B4DA
	cmp r0, #1
	beq _0805B4E4
	b _0805B4F0
_0805B4DA:
	ldr r0, _0805B4E0 @ =0x08C41828
	b _0805B4E6
	.align 2, 0
_0805B4E0: .4byte 0x08C41828
_0805B4E4:
	ldr r0, _0805B504 @ =0x08C4181C
_0805B4E6:
	movs r1, #0x78
	bl AnimCreate
	adds r1, r0, #0
	str r1, [r7, #0x60]
_0805B4F0:
	cmp r1, #0
	bne _0805B50C
	ldr r1, _0805B508 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r7, #0
	bl Proc_End
	b _0805B51A
	.align 2, 0
_0805B504: .4byte 0x08C4181C
_0805B508: .4byte 0x0201774C
_0805B50C:
	movs r0, #0x91
	lsls r0, r0, #6
	strh r0, [r1, #8]
	ldrh r0, [r7, #0x32]
	strh r0, [r1, #2]
	ldrh r0, [r7, #0x3a]
	strh r0, [r1, #4]
_0805B51A:
	add sp, #0x40
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805B52C
sub_0805B52C: @ 0x0805B52C
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r6, [r5, #0x60]
	ldr r0, _0805B560 @ =0x0202003C
	ldr r0, [r0]
	cmp r0, #1
	beq _0805B548
	movs r0, #0x2c
	ldrsh r1, [r5, r0]
	movs r2, #0x2e
	ldrsh r0, [r5, r2]
	cmp r1, r0
	ble _0805B568
_0805B548:
	ldr r1, _0805B564 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r6, #0
	bl AnimDelete
	adds r0, r5, #0
	bl Proc_Break
	b _0805B5CC
	.align 2, 0
_0805B560: .4byte 0x0202003C
_0805B564: .4byte 0x0201774C
_0805B568:
	movs r4, #0x2c
	ldrsh r3, [r5, r4]
	movs r7, #0x2e
	ldrsh r0, [r5, r7]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x70
	bl Interpolate
	ldrh r1, [r5, #0x2c]
	adds r1, #1
	strh r1, [r5, #0x2c]
	ldr r4, _0805B5D4 @ =gSinLut
	movs r2, #0x30
	ldrsh r1, [r5, r2]
	adds r1, #0x40
	lsls r1, r1, #1
	adds r1, r1, r4
	ldrh r1, [r1]
	lsls r3, r1, #0x10
	asrs r3, r3, #0x1a
	ldrh r1, [r5, #0x30]
	adds r1, #6
	movs r2, #0xff
	ands r1, r2
	strh r1, [r5, #0x30]
	ldr r2, [r5, #0x44]
	movs r1, #0xff
	ands r2, r1
	lsls r1, r2, #1
	adds r1, r1, r4
	movs r7, #0
	ldrsh r1, [r1, r7]
	adds r2, #0x40
	lsls r2, r2, #1
	adds r2, r2, r4
	movs r4, #0
	ldrsh r2, [r2, r4]
	muls r1, r0, r1
	muls r0, r2, r0
	asrs r1, r1, #0xc
	asrs r0, r0, #0xc
	ldrh r7, [r5, #0x32]
	adds r3, r7, r3
	subs r3, r3, r1
	strh r3, [r6, #2]
	ldrh r5, [r5, #0x3a]
	subs r0, r5, r0
	strh r0, [r6, #4]
_0805B5CC:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805B5D4: .4byte gSinLut

	thumb_func_start sub_0805B5D8
sub_0805B5D8: @ 0x0805B5D8
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r1, #0
	adds r5, r2, #0
	ldr r1, _0805B608 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805B60C @ =0x08C11CDC
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	adds r0, r4, #0
	adds r1, r6, #0
	bl sub_0804F7B8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805B608: .4byte 0x0201774C
_0805B60C: .4byte 0x08C11CDC

	thumb_func_start sub_0805B610
sub_0805B610: @ 0x0805B610
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r6, r0]
	movs r1, #0x2e
	ldrsh r0, [r6, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	adds r5, r0, #0
	ldr r0, _0805B66C @ =gPal
	ldr r4, _0805B670 @ =0x020165C8
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r4, #0
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x20
	adds r3, r5, #0
	bl sub_08067750
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r6, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0805B664
	ldr r1, _0805B674 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r6, #0
	bl Proc_Break
_0805B664:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805B66C: .4byte gPal
_0805B670: .4byte 0x020165C8
_0805B674: .4byte 0x0201774C

	thumb_func_start sub_0805B678
sub_0805B678: @ 0x0805B678
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _0805B6B0 @ =0x08C11CF4
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805B6B0: .4byte 0x08C11CF4

	thumb_func_start sub_0805B6B4
sub_0805B6B4: @ 0x0805B6B4
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	bl GetSpellAnimationStartFrame
	adds r3, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #1
	bne _0805B6F8
	ldr r0, _0805B6F4 @ =0x00000127
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl PlaySFX
	adds r0, r5, #0
	bl sub_0805B7A4
	ldr r0, [r4, #0x5c]
	bl sub_0805B9D4
	b _0805B79E
	.align 2, 0
_0805B6F4: .4byte 0x00000127
_0805B6F8:
	cmp r2, #0x14
	bne _0805B70C
	movs r0, #0x94
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	b _0805B738
_0805B70C:
	cmp r2, #0x32
	bne _0805B71C
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
	b _0805B79E
_0805B71C:
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	adds r0, r3, #0
	adds r0, #0x46
	cmp r1, r0
	bne _0805B744
	adds r0, r5, #0
	bl sub_0805B828
	ldr r0, _0805B740 @ =0x00000129
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
_0805B738:
	movs r3, #1
	bl PlaySFX
	b _0805B79E
	.align 2, 0
_0805B740: .4byte 0x00000129
_0805B744:
	adds r0, r3, #0
	adds r0, #0x49
	cmp r1, r0
	bne _0805B756
	ldr r0, [r4, #0x5c]
	movs r1, #0xa
	bl sub_0804F7B8
	b _0805B79E
_0805B756:
	adds r0, r3, #0
	adds r0, #0x4b
	cmp r1, r0
	bne _0805B784
	adds r0, r5, #0
	bl sub_0805B8AC
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl StartBattleAnimHitEffectsDefault
	ldrb r0, [r4]
	cmp r0, #0
	bne _0805B79E
	adds r0, r5, #0
	bl sub_08068500
	b _0805B79E
_0805B784:
	adds r0, r3, #0
	adds r0, #0x5a
	cmp r1, r0
	beq _0805B79E
	cmp r2, #0x64
	bne _0805B79E
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r4, #0
	bl Proc_Break
_0805B79E:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0805B7A4
sub_0805B7A4: @ 0x0805B7A4
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _0805B7F8 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805B7FC @ =0x08C11D0C
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _0805B800 @ =0x081EE60C
	str r0, [r5, #0x48]
	ldr r0, _0805B804 @ =0x08C11D74
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _0805B808 @ =0x08C11D24
	str r0, [r5, #0x54]
	ldr r0, _0805B80C @ =0x08243F68
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	ldr r0, _0805B810 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0805B81E
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _0805B814
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
	b _0805B81E
	.align 2, 0
_0805B7F8: .4byte 0x0201774C
_0805B7FC: .4byte 0x08C11D0C
_0805B800: .4byte 0x081EE60C
_0805B804: .4byte 0x08C11D74
_0805B808: .4byte 0x08C11D24
_0805B80C: .4byte 0x08243F68
_0805B810: .4byte gEkrDistanceType
_0805B814:
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
_0805B81E:
	bl SpellFx_SetSomeColorEffect
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0805B828
sub_0805B828: @ 0x0805B828
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _0805B87C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805B880 @ =0x08C11D0C
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _0805B884 @ =0x081EE67A
	str r0, [r5, #0x48]
	ldr r0, _0805B888 @ =0x08C11DD0
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _0805B88C @ =0x08C11DC4
	str r0, [r5, #0x54]
	ldr r0, _0805B890 @ =0x08243F68
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	ldr r0, _0805B894 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0805B8A2
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _0805B898
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _0805B8A2
	.align 2, 0
_0805B87C: .4byte 0x0201774C
_0805B880: .4byte 0x08C11D0C
_0805B884: .4byte 0x081EE67A
_0805B888: .4byte 0x08C11DD0
_0805B88C: .4byte 0x08C11DC4
_0805B890: .4byte 0x08243F68
_0805B894: .4byte gEkrDistanceType
_0805B898:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_0805B8A2:
	bl SpellFx_SetSomeColorEffect
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0805B8AC
sub_0805B8AC: @ 0x0805B8AC
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _0805B900 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805B904 @ =0x08C11D0C
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _0805B908 @ =0x081EE688
	str r0, [r5, #0x48]
	ldr r0, _0805B90C @ =0x08C11E30
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _0805B910 @ =0x08C11DDC
	str r0, [r5, #0x54]
	ldr r0, _0805B914 @ =0x08243F48
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	ldr r0, _0805B918 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0805B926
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _0805B91C
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _0805B926
	.align 2, 0
_0805B900: .4byte 0x0201774C
_0805B904: .4byte 0x08C11D0C
_0805B908: .4byte 0x081EE688
_0805B90C: .4byte 0x08C11E30
_0805B910: .4byte 0x08C11DDC
_0805B914: .4byte 0x08243F48
_0805B918: .4byte gEkrDistanceType
_0805B91C:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_0805B926:
	bl SpellFx_SetSomeColorEffect
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0805B930
sub_0805B930: @ 0x0805B930
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	blt _0805B9A8
	ldr r5, [r7, #0x4c]
	ldr r6, [r7, #0x50]
	ldr r0, [r7, #0x54]
	lsls r4, r4, #2
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, [r7, #0x5c]
	adds r5, r4, r5
	ldr r1, [r5]
	adds r4, r4, r6
	ldr r2, [r4]
	bl SpellFx_WriteBgMap
	ldr r0, _0805B988 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0805B9C6
	ldr r0, [r7, #0x5c]
	bl GetAISSubjectId
	adds r1, r0, #0
	cmp r1, #0
	bne _0805B990
	ldr r0, _0805B98C @ =gBg1Tm
	b _0805B994
	.align 2, 0
_0805B988: .4byte gEkrDistanceType
_0805B98C: .4byte gBg1Tm
_0805B990:
	ldr r0, _0805B9A4 @ =0x0202349A
	movs r1, #0
_0805B994:
	str r1, [sp]
	movs r1, #3
	movs r2, #0x14
	movs r3, #0
	bl sub_080671A0
	b _0805B9C6
	.align 2, 0
_0805B9A4: .4byte 0x0202349A
_0805B9A8:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _0805B9C6
	bl SpellFx_ClearBG1
	ldr r1, _0805B9D0 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r7, #0
	bl Proc_Break
_0805B9C6:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805B9D0: .4byte 0x0201774C

	thumb_func_start sub_0805B9D4
sub_0805B9D4: @ 0x0805B9D4
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0805BA14 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805BA18 @ =0x08C11E84
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r3, _0805BA1C @ =0x08C29458
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	adds r6, r0, #0
	str r6, [r4, #0x60]
	adds r0, r5, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _0805BA20
	ldrh r0, [r6, #2]
	subs r0, #6
	b _0805BA24
	.align 2, 0
_0805BA14: .4byte 0x0201774C
_0805BA18: .4byte 0x08C11E84
_0805BA1C: .4byte 0x08C29458
_0805BA20:
	ldrh r0, [r6, #2]
	adds r0, #6
_0805BA24:
	strh r0, [r6, #2]
	ldr r0, _0805BA40 @ =0x08248128
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805BA44 @ =0x08247FBC
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805BA40: .4byte 0x08248128
_0805BA44: .4byte 0x08247FBC

	thumb_func_start sub_0805BA48
sub_0805BA48: @ 0x0805BA48
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x2c
	bne _0805BA6E
	ldr r0, [r4, #0x60]
	bl AnimDelete
	ldr r1, _0805BA74 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0805BA6E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805BA74: .4byte 0x0201774C

	thumb_func_start sub_0805BA78
sub_0805BA78: @ 0x0805BA78
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _0805BAB0 @ =0x08C11E9C
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805BAB0: .4byte 0x08C11E9C

	thumb_func_start sub_0805BAB4
sub_0805BAB4: @ 0x0805BAB4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	bl GetSpellAnimationStartFrame
	adds r6, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r7, #0
	movs r1, #0
	mov r8, r1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805BAE8
	ldr r0, [r4, #0x5c]
	subs r1, #1
	bl sub_0804EC74
_0805BAE8:
	movs r2, #0x2c
	ldrsh r1, [r4, r2]
	adds r0, r6, #1
	cmp r1, r0
	bne _0805BB40
	adds r0, r5, #0
	bl sub_0805BC20
	ldr r3, _0805BB3C @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r7, [r0]
	adds r0, #1
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r7, [r0]
	str r1, [sp]
	mov r2, r8
	str r2, [sp, #4]
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0x20
	movs r3, #0
	bl sub_080566F0
	adds r0, r5, #0
	movs r1, #0xaa
	bl sub_0805BEDC
	movs r0, #0x95
	lsls r0, r0, #1
	b _0805BB4A
	.align 2, 0
_0805BB3C: .4byte gDispIo
_0805BB40:
	ldr r2, _0805BB5C @ =0x0000011B
	adds r0, r6, r2
	cmp r1, r0
	bne _0805BB64
	ldr r0, _0805BB60 @ =0x0000012B
_0805BB4A:
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl PlaySFX
	b _0805BC14
	.align 2, 0
_0805BB5C: .4byte 0x0000011B
_0805BB60: .4byte 0x0000012B
_0805BB64:
	ldr r2, _0805BB78 @ =0x0000013B
	adds r0, r6, r2
	cmp r1, r0
	bne _0805BB7C
	adds r0, r5, #0
	movs r1, #0x19
	bl sub_0805C0DC
	b _0805BC14
	.align 2, 0
_0805BB78: .4byte 0x0000013B
_0805BB7C:
	movs r3, #0xaa
	lsls r3, r3, #1
	adds r0, r6, r3
	cmp r1, r0
	bne _0805BBAE
	adds r0, r5, #0
	movs r1, #0xc
	bl sub_0804F7B8
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl sub_0805092C
	ldrb r0, [r4]
	cmp r0, #0
	bne _0805BC14
	adds r0, r5, #0
	bl sub_08068500
	b _0805BC14
_0805BBAE:
	movs r2, #0xad
	lsls r2, r2, #1
	adds r0, r6, r2
	cmp r1, r0
	bne _0805BBFC
	movs r0, #0x96
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x78
	movs r3, #0
	bl PlaySFX
	adds r0, r5, #0
	movs r1, #0x64
	movs r2, #0xa
	bl sub_080569B8
	adds r0, r5, #0
	movs r1, #0x64
	bl sub_0805BD1C
	adds r0, r5, #0
	movs r1, #0x64
	bl sub_0805BE48
	mov r3, r8
	str r3, [sp]
	str r3, [sp, #4]
	adds r0, r5, #0
	movs r1, #0x46
	movs r2, #0x1e
	movs r3, #0x10
	bl sub_080566F0
	adds r0, r5, #0
	bl sub_0805C230
	b _0805BC14
_0805BBFC:
	movs r2, #0xf5
	lsls r2, r2, #1
	adds r0, r6, r2
	cmp r1, r0
	bne _0805BC14
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r4, #0
	bl Proc_Break
_0805BC14:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0805BC20
sub_0805BC20: @ 0x0805BC20
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _0805BC74 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805BC78 @ =0x08C11EB4
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _0805BC7C @ =0x081EE6DE
	str r0, [r5, #0x48]
	ldr r0, _0805BC80 @ =0x08C11EE0
	str r0, [r5, #0x4c]
	ldr r0, _0805BC84 @ =0x08C11ECC
	str r0, [r5, #0x54]
	ldr r0, _0805BC88 @ =0x0827FB18
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_ClearBG1Position
	bl SpellFx_SetSomeColorEffect
	ldr r0, _0805BC8C @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _0805BC9C
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _0805BC90
	movs r0, #1
	movs r1, #0xf8
	b _0805BC94
	.align 2, 0
_0805BC74: .4byte 0x0201774C
_0805BC78: .4byte 0x08C11EB4
_0805BC7C: .4byte 0x081EE6DE
_0805BC80: .4byte 0x08C11EE0
_0805BC84: .4byte 0x08C11ECC
_0805BC88: .4byte 0x0827FB18
_0805BC8C: .4byte gEkrDistanceType
_0805BC90:
	movs r0, #1
	movs r1, #0x18
_0805BC94:
	movs r2, #0
	bl SetBgOffset
	b _0805BCB0
_0805BC9C:
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _0805BCB0
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	bl SetBgOffset
_0805BCB0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805BCB8
sub_0805BCB8: @ 0x0805BCB8
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r0, #0x2c
	adds r1, r6, #0
	adds r1, #0x44
	ldr r2, [r6, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	blt _0805BCF2
	ldr r5, [r6, #0x4c]
	ldr r0, [r6, #0x54]
	lsls r4, r4, #2
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, [r6, #0x5c]
	adds r4, r4, r5
	ldr r1, [r4]
	movs r2, #0x20
	movs r3, #0x14
	bl sub_08050D38
	b _0805BD10
_0805BCF2:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _0805BD10
	bl SpellFx_ClearBG1
	ldr r1, _0805BD18 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r6, #0
	bl Proc_Break
_0805BD10:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805BD18: .4byte 0x0201774C

	thumb_func_start sub_0805BD1C
sub_0805BD1C: @ 0x0805BD1C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _0805BD64 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805BD68 @ =0x08C11EF4
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	strh r1, [r0, #0x32]
	strh r1, [r0, #0x3a]
	strh r1, [r0, #0x34]
	strh r1, [r0, #0x3c]
	ldr r0, _0805BD6C @ =0x0827D620
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, _0805BD70 @ =0x0827FB38
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_ClearBG1Position
	bl SpellFx_SetSomeColorEffect
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805BD64: .4byte 0x0201774C
_0805BD68: .4byte 0x08C11EF4
_0805BD6C: .4byte 0x0827D620
_0805BD70: .4byte 0x0827FB38

	thumb_func_start sub_0805BD74
sub_0805BD74: @ 0x0805BD74
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r5, r0, #0
	movs r6, #1
	adds r0, r6, #0
	ldrh r1, [r5, #0x2c]
	ands r0, r1
	cmp r0, #0
	beq _0805BDD0
	ldrh r2, [r5, #0x32]
	subs r2, #0xc
	strh r2, [r5, #0x32]
	ldrh r1, [r5, #0x3a]
	adds r1, #0xc
	strh r1, [r5, #0x3a]
	ldr r0, _0805BDC0 @ =gDispIo
	strh r2, [r0, #0x20]
	strh r1, [r0, #0x22]
	ldr r0, _0805BDC4 @ =0x0827FDA0
	ldr r4, _0805BDC8 @ =gEkrTsaBuffer
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r1, _0805BDCC @ =gBg1Tm
	str r6, [sp]
	movs r0, #0x80
	lsls r0, r0, #1
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0x20
	movs r3, #0x20
	bl sub_080672B8
	movs r0, #2
	bl EnableBgSync
	b _0805BE06
	.align 2, 0
_0805BDC0: .4byte gDispIo
_0805BDC4: .4byte 0x0827FDA0
_0805BDC8: .4byte gEkrTsaBuffer
_0805BDCC: .4byte gBg1Tm
_0805BDD0:
	ldrh r2, [r5, #0x34]
	adds r2, #8
	strh r2, [r5, #0x34]
	ldrh r1, [r5, #0x3c]
	adds r1, #8
	strh r1, [r5, #0x3c]
	ldr r0, _0805BE34 @ =gDispIo
	strh r2, [r0, #0x20]
	strh r1, [r0, #0x22]
	ldr r0, _0805BE38 @ =0x0827FDA0
	ldr r4, _0805BE3C @ =gEkrTsaBuffer
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r1, _0805BE40 @ =gBg1Tm
	str r6, [sp]
	movs r0, #0x80
	lsls r0, r0, #1
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0x20
	movs r3, #0x20
	bl sub_080672E8
	movs r0, #2
	bl EnableBgSync
_0805BE06:
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r5, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _0805BE2C
	bl SpellFx_ClearBG1
	bl SpellFx_ClearColorEffects
	ldr r1, _0805BE44 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r5, #0
	bl Proc_Break
_0805BE2C:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805BE34: .4byte gDispIo
_0805BE38: .4byte 0x0827FDA0
_0805BE3C: .4byte gEkrTsaBuffer
_0805BE40: .4byte gBg1Tm
_0805BE44: .4byte 0x0201774C

	thumb_func_start sub_0805BE48
sub_0805BE48: @ 0x0805BE48
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _0805BE80 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805BE84 @ =0x08C11F0C
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	strh r5, [r0, #0x30]
	str r1, [r0, #0x44]
	ldr r1, _0805BE88 @ =0x081EE6F4
	str r1, [r0, #0x48]
	ldr r1, _0805BE8C @ =0x0827FB38
	str r1, [r0, #0x4c]
	adds r0, r1, #0
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805BE80: .4byte 0x0201774C
_0805BE84: .4byte 0x08C11F0C
_0805BE88: .4byte 0x081EE6F4
_0805BE8C: .4byte 0x0827FB38

	thumb_func_start sub_0805BE90
sub_0805BE90: @ 0x0805BE90
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _0805BEB4
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
_0805BEB4:
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _0805BED2
	ldr r1, _0805BED8 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0805BED2:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805BED8: .4byte 0x0201774C

	thumb_func_start sub_0805BEDC
sub_0805BEDC: @ 0x0805BEDC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _0805BF1C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805BF20 @ =0x08C11F2C
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r2, #0
	strh r2, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	strh r2, [r0, #0x30]
	movs r1, #0xa
	str r1, [r0, #0x44]
	str r2, [r0, #0x48]
	ldr r0, _0805BF24 @ =0x08280864
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805BF28 @ =0x08280370
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805BF1C: .4byte 0x0201774C
_0805BF20: .4byte 0x08C11F2C
_0805BF24: .4byte 0x08280864
_0805BF28: .4byte 0x08280370

	thumb_func_start sub_0805BF2C
sub_0805BF2C: @ 0x0805BF2C
	push {lr}
	adds r3, r0, #0
	ldrh r0, [r3, #0x2c]
	adds r0, #1
	strh r0, [r3, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r3, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _0805BF54
	ldr r1, _0805BF50 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r3, #0
	bl Proc_Break
	b _0805BF7A
	.align 2, 0
_0805BF50: .4byte 0x0201774C
_0805BF54:
	ldrh r0, [r3, #0x30]
	adds r0, #1
	strh r0, [r3, #0x30]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r3, #0x44]
	cmp r0, r1
	bne _0805BF7A
	movs r0, #0
	strh r0, [r3, #0x30]
	movs r0, #0xa
	str r0, [r3, #0x44]
	ldr r0, [r3, #0x5c]
	ldr r2, [r3, #0x48]
	adds r1, r2, #0
	adds r2, #1
	str r2, [r3, #0x48]
	bl sub_0805BF80
_0805BF7A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805BF80
sub_0805BF80: @ 0x0805BF80
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r1, _0805C00C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805C010 @ =0x08C11F44
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r6, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x1e
	bl sub_08067AD4
	adds r0, #0x8c
	strh r0, [r4, #0x2e]
	movs r0, #0x1e
	bl sub_08067AD4
	adds r5, r0, #0
	movs r0, #0x1e
	bl sub_08067AD4
	adds r1, r0, #0
	adds r0, r5, #0
	adds r0, #0x46
	strh r0, [r4, #0x32]
	adds r0, r1, #0
	adds r0, #0x28
	strh r0, [r4, #0x34]
	ldr r0, _0805C014 @ =0x0000FFEC
	strh r0, [r4, #0x3a]
	movs r0, #0xa0
	strh r0, [r4, #0x3c]
	ldr r0, _0805C018 @ =gEkrDistanceType
	movs r2, #0
	ldrsh r0, [r0, r2]
	cmp r0, #0
	bne _0805BFE0
	adds r0, r5, #0
	adds r0, #0x5e
	strh r0, [r4, #0x32]
	adds r0, r1, #0
	adds r0, #0x40
	strh r0, [r4, #0x34]
_0805BFE0:
	adds r0, r6, #0
	bl GetAISSubjectId
	cmp r0, #1
	bne _0805BFF8
	movs r0, #0xf0
	ldrh r2, [r4, #0x32]
	subs r1, r0, r2
	strh r1, [r4, #0x32]
	ldrh r1, [r4, #0x34]
	subs r0, r0, r1
	strh r0, [r4, #0x34]
_0805BFF8:
	movs r0, #2
	bl sub_08067AD4
	cmp r0, #0
	beq _0805C020
	cmp r0, #1
	beq _0805C028
	ldr r0, _0805C01C @ =0x08C40B14
	b _0805C02A
	.align 2, 0
_0805C00C: .4byte 0x0201774C
_0805C010: .4byte 0x08C11F44
_0805C014: .4byte 0x0000FFEC
_0805C018: .4byte gEkrDistanceType
_0805C01C: .4byte 0x08C40B14
_0805C020:
	ldr r0, _0805C024 @ =0x08C40B04
	b _0805C02A
	.align 2, 0
_0805C024: .4byte 0x08C40B04
_0805C028:
	ldr r0, _0805C048 @ =0x08C40B0C
_0805C02A:
	movs r1, #0x78
	bl AnimCreate
	adds r1, r0, #0
	str r1, [r4, #0x60]
	cmp r1, #0
	bne _0805C050
	ldr r1, _0805C04C @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_End
	b _0805C05E
	.align 2, 0
_0805C048: .4byte 0x08C40B0C
_0805C04C: .4byte 0x0201774C
_0805C050:
	movs r0, #0x91
	lsls r0, r0, #6
	strh r0, [r1, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r1, #2]
	strh r0, [r1, #4]
_0805C05E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_0805C064
sub_0805C064: @ 0x0805C064
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r6, [r5, #0x60]
	movs r0, #0x2c
	ldrsh r1, [r5, r0]
	movs r2, #0x2e
	ldrsh r0, [r5, r2]
	cmp r1, r0
	ble _0805C094
	ldr r1, _0805C090 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r6, #0
	bl AnimDelete
	adds r0, r5, #0
	bl Proc_Break
	b _0805C0D4
	.align 2, 0
_0805C090: .4byte 0x0201774C
_0805C094:
	movs r4, #0x32
	ldrsh r1, [r5, r4]
	movs r7, #0x34
	ldrsh r2, [r5, r7]
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r4, #0x2e
	ldrsh r0, [r5, r4]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	adds r4, r0, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	movs r7, #0x3a
	ldrsh r1, [r5, r7]
	movs r0, #0x3c
	ldrsh r2, [r5, r0]
	movs r7, #0x2c
	ldrsh r3, [r5, r7]
	movs r7, #0x2e
	ldrsh r0, [r5, r7]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	strh r4, [r6, #2]
	strh r0, [r6, #4]
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
_0805C0D4:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0805C0DC
sub_0805C0DC: @ 0x0805C0DC
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r4, r1, #0
	ldr r1, _0805C174 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805C178 @ =0x08C11F5C
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r6, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	strh r0, [r5, #0x2e]
	strh r4, [r5, #0x30]
	movs r0, #0x5b
	strh r0, [r5, #0x32]
	movs r0, #0x3f
	strh r0, [r5, #0x34]
	ldr r0, _0805C17C @ =0x0000FFF6
	strh r0, [r5, #0x3a]
	movs r0, #0x64
	strh r0, [r5, #0x3c]
	ldr r0, _0805C180 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _0805C122
	movs r0, #0x73
	strh r0, [r5, #0x32]
	movs r0, #0x57
	strh r0, [r5, #0x34]
_0805C122:
	adds r0, r6, #0
	bl GetAISSubjectId
	cmp r0, #1
	bne _0805C13A
	movs r0, #0xf0
	ldrh r2, [r5, #0x32]
	subs r1, r0, r2
	strh r1, [r5, #0x32]
	ldrh r1, [r5, #0x34]
	subs r0, r0, r1
	strh r0, [r5, #0x34]
_0805C13A:
	ldr r3, _0805C184 @ =0x08C40B1C
	str r3, [sp]
	adds r0, r6, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r5, #0x60]
	ldrh r1, [r5, #0x32]
	strh r1, [r0, #2]
	ldrh r1, [r5, #0x3a]
	strh r1, [r0, #4]
	ldr r3, _0805C188 @ =0x08C40B40
	str r3, [sp]
	adds r0, r6, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r5, #0x64]
	ldrh r1, [r5, #0x32]
	strh r1, [r0, #2]
	ldrh r1, [r5, #0x3a]
	strh r1, [r0, #4]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805C174: .4byte 0x0201774C
_0805C178: .4byte 0x08C11F5C
_0805C17C: .4byte 0x0000FFF6
_0805C180: .4byte gEkrDistanceType
_0805C184: .4byte 0x08C40B1C
_0805C188: .4byte 0x08C40B40

	thumb_func_start sub_0805C18C
sub_0805C18C: @ 0x0805C18C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r4, r0, #0
	ldr r6, [r4, #0x60]
	ldr r5, [r4, #0x64]
	movs r0, #0x32
	ldrsh r1, [r4, r0]
	movs r7, #0x34
	ldrsh r2, [r4, r7]
	movs r0, #0x2e
	ldrsh r3, [r4, r0]
	movs r7, #0x30
	ldrsh r0, [r4, r7]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	movs r1, #0
	mov r8, r1
	strh r0, [r5, #2]
	strh r0, [r6, #2]
	movs r2, #0x3a
	ldrsh r1, [r4, r2]
	movs r7, #0x3c
	ldrsh r2, [r4, r7]
	movs r0, #0x2e
	ldrsh r3, [r4, r0]
	movs r7, #0x30
	ldrsh r0, [r4, r7]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	strh r0, [r5, #4]
	strh r0, [r6, #4]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x11
	bne _0805C1F2
	mov r0, r8
	strh r0, [r4, #0x2c]
	ldr r0, _0805C228 @ =0x08C40B40
	str r0, [r5, #0x24]
	str r0, [r5, #0x20]
	mov r1, r8
	strh r1, [r6, #6]
_0805C1F2:
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0805C21C
	adds r0, r6, #0
	bl AnimDelete
	adds r0, r5, #0
	bl AnimDelete
	ldr r1, _0805C22C @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0805C21C:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805C228: .4byte 0x08C40B40
_0805C22C: .4byte 0x0201774C

	thumb_func_start sub_0805C230
sub_0805C230: @ 0x0805C230
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0805C258 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805C25C @ =0x08C11F74
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r2, #0
	strh r2, [r0, #0x2c]
	strh r2, [r0, #0x2e]
	movs r1, #1
	str r1, [r0, #0x44]
	str r2, [r0, #0x48]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805C258: .4byte 0x0201774C
_0805C25C: .4byte 0x08C11F74

	thumb_func_start sub_0805C260
sub_0805C260: @ 0x0805C260
	push {lr}
	adds r3, r0, #0
	ldrh r0, [r3, #0x2c]
	adds r0, #1
	strh r0, [r3, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x2f
	bne _0805C288
	ldr r1, _0805C284 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r3, #0
	bl Proc_Break
	b _0805C2AE
	.align 2, 0
_0805C284: .4byte 0x0201774C
_0805C288:
	ldrh r0, [r3, #0x2e]
	adds r0, #1
	strh r0, [r3, #0x2e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r3, #0x44]
	cmp r0, r1
	bne _0805C2AE
	movs r0, #0
	strh r0, [r3, #0x2e]
	movs r0, #1
	str r0, [r3, #0x44]
	ldr r0, [r3, #0x5c]
	ldr r2, [r3, #0x48]
	adds r1, r2, #0
	adds r2, #1
	str r2, [r3, #0x48]
	bl sub_0805C2B4
_0805C2AE:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805C2B4
sub_0805C2B4: @ 0x0805C2B4
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _0805C310 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805C314 @ =0x08C11F8C
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	movs r0, #0x14
	strh r0, [r5, #0x2e]
	movs r0, #0x78
	bl sub_08067AD4
	adds r1, r0, #0
	subs r1, #0x3c
	strh r1, [r5, #0x32]
	adds r0, #0xb4
	strh r0, [r5, #0x34]
	movs r1, #0x32
	ldrsh r0, [r5, r1]
	lsls r1, r0, #1
	adds r1, r1, r0
	asrs r1, r1, #1
	movs r0, #0x34
	ldrsh r2, [r5, r0]
	lsls r0, r2, #1
	adds r0, r0, r2
	asrs r0, r0, #1
	adds r1, #0xc0
	strh r1, [r5, #0x3a]
	ldr r1, _0805C318 @ =0xFFFFFEB8
	adds r0, r0, r1
	strh r0, [r5, #0x3c]
	movs r0, #2
	bl sub_08067AD4
	cmp r0, #1
	bne _0805C320
	ldr r0, _0805C31C @ =0x08C40B8C
	b _0805C322
	.align 2, 0
_0805C310: .4byte 0x0201774C
_0805C314: .4byte 0x08C11F8C
_0805C318: .4byte 0xFFFFFEB8
_0805C31C: .4byte 0x08C40B8C
_0805C320:
	ldr r0, _0805C340 @ =0x08C40BA8
_0805C322:
	movs r1, #0x78
	bl AnimCreate
	adds r1, r0, #0
	str r1, [r5, #0x60]
	cmp r1, #0
	bne _0805C348
	ldr r1, _0805C344 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r5, #0
	bl Proc_End
	b _0805C356
	.align 2, 0
_0805C340: .4byte 0x08C40BA8
_0805C344: .4byte 0x0201774C
_0805C348:
	movs r0, #0x91
	lsls r0, r0, #6
	strh r0, [r1, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r1, #2]
	strh r0, [r1, #4]
_0805C356:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0805C35C
sub_0805C35C: @ 0x0805C35C
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r6, [r5, #0x60]
	movs r0, #0x2c
	ldrsh r1, [r5, r0]
	movs r2, #0x2e
	ldrsh r0, [r5, r2]
	cmp r1, r0
	ble _0805C38C
	ldr r1, _0805C388 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r6, #0
	bl AnimDelete
	adds r0, r5, #0
	bl Proc_Break
	b _0805C3CC
	.align 2, 0
_0805C388: .4byte 0x0201774C
_0805C38C:
	movs r4, #0x32
	ldrsh r1, [r5, r4]
	movs r7, #0x34
	ldrsh r2, [r5, r7]
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r4, #0x2e
	ldrsh r0, [r5, r4]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	adds r4, r0, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	movs r7, #0x3a
	ldrsh r1, [r5, r7]
	movs r0, #0x3c
	ldrsh r2, [r5, r0]
	movs r7, #0x2c
	ldrsh r3, [r5, r7]
	movs r7, #0x2e
	ldrsh r0, [r5, r7]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	strh r4, [r6, #2]
	strh r0, [r6, #4]
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
_0805C3CC:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start nullsub_51
nullsub_51: @ 0x0805C3D4
	bx lr
	.align 2, 0

	thumb_func_start sub_0805C3D8
sub_0805C3D8: @ 0x0805C3D8
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _0805C410 @ =0x08C11FA4
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805C410: .4byte 0x08C11FA4

	thumb_func_start sub_0805C414
sub_0805C414: @ 0x0805C414
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r6, r0, #0
	ldr r0, [r6, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	bl GetSpellAnimationStartFrame
	adds r4, r0, #0
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	movs r1, #0
	mov r8, r1
	movs r7, #0
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805C44A
	ldr r0, [r6, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
_0805C44A:
	movs r2, #0x2c
	ldrsh r1, [r6, r2]
	adds r0, r4, #1
	cmp r1, r0
	bne _0805C4BC
	ldr r3, _0805C4B8 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	mov r2, r8
	strb r2, [r0]
	adds r0, #1
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r2, [r0]
	str r1, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0xf
	movs r3, #0
	bl sub_080566F0
	str r7, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0x50
	movs r2, #0xf
	movs r3, #0x10
	bl sub_080566F0
	ldr r0, [r6, #0x5c]
	bl sub_0805C5B4
	ldr r0, [r6, #0x5c]
	bl sub_0805C924
	movs r0, #0x9c
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x78
	movs r3, #0
	bl PlaySFX
	b _0805C5A8
	.align 2, 0
_0805C4B8: .4byte gDispIo
_0805C4BC:
	adds r0, r4, #0
	adds r0, #0x46
	cmp r1, r0
	bne _0805C4EA
	movs r0, #2
	str r0, [sp]
	adds r0, r5, #0
	movs r1, #0x2a
	movs r2, #0xf
	movs r3, #0
	bl sub_080560A4
	adds r1, r0, #0
	adds r0, r5, #0
	movs r2, #0x1e
	bl sub_0805A594
	adds r0, r5, #0
	movs r1, #0x2b
	movs r2, #0
	bl sub_080565FC
	b _0805C5A8
_0805C4EA:
	adds r0, r4, #0
	adds r0, #0x78
	cmp r1, r0
	bne _0805C4FA
	adds r0, r5, #0
	bl sub_0805C624
	b _0805C5A8
_0805C4FA:
	adds r0, r4, #0
	adds r0, #0x7d
	cmp r1, r0
	bne _0805C518
	ldr r0, _0805C514 @ =0x00000139
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl PlaySFX
	b _0805C5A8
	.align 2, 0
_0805C514: .4byte 0x00000139
_0805C518:
	adds r0, r4, #0
	adds r0, #0x97
	cmp r1, r0
	bne _0805C528
	ldr r0, [r6, #0x5c]
	bl sub_0805C77C
	b _0805C5A8
_0805C528:
	adds r0, r4, #0
	adds r0, #0xe2
	cmp r1, r0
	bne _0805C570
	ldr r0, _0805C56C @ =0x000002E2
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl PlaySFX
	adds r0, r5, #0
	movs r1, #0xa
	bl sub_0804F7B8
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, r6, #0
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl StartBattleAnimHitEffectsDefault
	ldrb r0, [r4]
	cmp r0, #0
	bne _0805C5A8
	adds r0, r5, #0
	bl sub_08068500
	b _0805C5A8
	.align 2, 0
_0805C56C: .4byte 0x000002E2
_0805C570:
	adds r0, r4, #0
	adds r0, #0xec
	cmp r1, r0
	bne _0805C590
	adds r0, r5, #0
	bl sub_0805C6A8
	str r7, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0x10
	movs r2, #0xa
	movs r3, #0x10
	bl sub_080566F0
	b _0805C5A8
_0805C590:
	movs r2, #0x87
	lsls r2, r2, #1
	adds r0, r4, r2
	cmp r1, r0
	bne _0805C5A8
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r6, #0
	bl Proc_Break
_0805C5A8:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0805C5B4
sub_0805C5B4: @ 0x0805C5B4
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0805C608 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805C60C @ =0x08C11FBC
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r2, #0
	strh r2, [r0, #0x2c]
	str r2, [r0, #0x44]
	ldr r1, _0805C610 @ =0x081EE706
	str r1, [r0, #0x48]
	ldr r1, _0805C614 @ =0x08C11FD4
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r1, _0805C618 @ =0x08C12040
	str r1, [r0, #0x54]
	str r2, [r0, #0x58]
	ldr r0, _0805C61C @ =0x08238824
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_SetSomeColorEffect
	ldr r2, _0805C620 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805C608: .4byte 0x0201774C
_0805C60C: .4byte 0x08C11FBC
_0805C610: .4byte 0x081EE706
_0805C614: .4byte 0x08C11FD4
_0805C618: .4byte 0x08C12040
_0805C61C: .4byte 0x08238824
_0805C620: .4byte gDispIo

	thumb_func_start sub_0805C624
sub_0805C624: @ 0x0805C624
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0805C68C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805C690 @ =0x08C11FBC
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r4, #0
	movs r2, #0
	strh r2, [r0, #0x2c]
	str r2, [r0, #0x44]
	ldr r1, _0805C694 @ =0x081EE70C
	str r1, [r0, #0x48]
	ldr r1, _0805C698 @ =0x08C11FD4
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r1, _0805C69C @ =0x08C12040
	str r1, [r0, #0x54]
	str r2, [r0, #0x58]
	ldr r0, _0805C6A0 @ =0x08250388
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_SetSomeColorEffect
	ldr r3, _0805C6A4 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r0, #0xc
	strb r0, [r1]
	adds r1, #1
	movs r0, #6
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r4, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805C68C: .4byte 0x0201774C
_0805C690: .4byte 0x08C11FBC
_0805C694: .4byte 0x081EE70C
_0805C698: .4byte 0x08C11FD4
_0805C69C: .4byte 0x08C12040
_0805C6A0: .4byte 0x08250388
_0805C6A4: .4byte gDispIo

	thumb_func_start sub_0805C6A8
sub_0805C6A8: @ 0x0805C6A8
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0805C6E8 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805C6EC @ =0x08C11FBC
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r2, #0
	strh r2, [r0, #0x2c]
	str r2, [r0, #0x44]
	ldr r1, _0805C6F0 @ =0x081EE7AE
	str r1, [r0, #0x48]
	ldr r1, _0805C6F4 @ =0x08C11FD4
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r1, _0805C6F8 @ =0x08C12040
	str r1, [r0, #0x54]
	str r2, [r0, #0x58]
	ldr r0, _0805C6FC @ =0x082503A8
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_SetSomeColorEffect
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805C6E8: .4byte 0x0201774C
_0805C6EC: .4byte 0x08C11FBC
_0805C6F0: .4byte 0x081EE7AE
_0805C6F4: .4byte 0x08C11FD4
_0805C6F8: .4byte 0x08C12040
_0805C6FC: .4byte 0x082503A8

	thumb_func_start sub_0805C700
sub_0805C700: @ 0x0805C700
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _0805C750
	ldr r7, [r4, #0x4c]
	ldr r0, [r4, #0x50]
	mov r8, r0
	ldr r0, [r4, #0x54]
	lsls r5, r1, #2
	adds r6, r5, r0
	ldr r0, [r4, #0x58]
	ldr r2, [r6]
	cmp r0, r2
	beq _0805C73A
	movs r1, #0x80
	lsls r1, r1, #6
	adds r0, r2, #0
	bl SpellFx_RegisterBgGfx
_0805C73A:
	ldr r0, [r6]
	str r0, [r4, #0x58]
	ldr r0, [r4, #0x5c]
	adds r1, r5, r7
	ldr r1, [r1]
	mov r3, r8
	adds r2, r5, r3
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	b _0805C76E
_0805C750:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0805C76E
	bl SpellFx_ClearBG1
	ldr r1, _0805C778 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_0805C76E:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805C778: .4byte 0x0201774C

	thumb_func_start sub_0805C77C
sub_0805C77C: @ 0x0805C77C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0805C7D4 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805C7D8 @ =0x08C120AC
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	adds r0, r5, #0
	bl GetCoreAIStruct
	adds r5, r0, #0
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r3, _0805C7DC @ =0x08C10828
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	adds r6, r0, #0
	str r6, [r4, #0x60]
	ldr r0, _0805C7E0 @ =0x0000F3FF
	ldrh r1, [r6, #8]
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r6, #8]
	adds r0, r5, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _0805C7E4
	ldrh r0, [r6, #2]
	subs r0, #8
	b _0805C7E8
	.align 2, 0
_0805C7D4: .4byte 0x0201774C
_0805C7D8: .4byte 0x08C120AC
_0805C7DC: .4byte 0x08C10828
_0805C7E0: .4byte 0x0000F3FF
_0805C7E4:
	ldrh r0, [r6, #2]
	adds r0, #8
_0805C7E8:
	strh r0, [r6, #2]
	ldrh r0, [r6, #4]
	subs r0, #0x10
	strh r0, [r6, #4]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_0805C7F8
sub_0805C7F8: @ 0x0805C7F8
	push {lr}
	ldr r2, _0805C80C @ =0x0201774C
	ldr r1, [r2]
	subs r1, #1
	str r1, [r2]
	ldr r0, [r0, #0x60]
	bl AnimDelete
	pop {r0}
	bx r0
	.align 2, 0
_0805C80C: .4byte 0x0201774C

	thumb_func_start sub_0805C810
sub_0805C810: @ 0x0805C810
	push {r4, lr}
	adds r1, r0, #0
	ldr r2, [r1, #0x60]
	ldrh r0, [r1, #0x2c]
	adds r0, #1
	movs r4, #0
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #1
	bne _0805C854
	ldr r0, _0805C848 @ =0x08C29618
	str r0, [r2, #0x24]
	str r0, [r2, #0x20]
	strh r4, [r2, #6]
	movs r0, #0xa
	strh r0, [r1, #0x2e]
	ldr r0, _0805C84C @ =0x08253234
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805C850 @ =0x082524D4
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	b _0805C864
	.align 2, 0
_0805C848: .4byte 0x08C29618
_0805C84C: .4byte 0x08253234
_0805C850: .4byte 0x082524D4
_0805C854:
	movs r2, #0x2e
	ldrsh r0, [r1, r2]
	cmp r3, r0
	bne _0805C864
	strh r4, [r1, #0x2c]
	adds r0, r1, #0
	bl Proc_Break
_0805C864:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805C86C
sub_0805C86C: @ 0x0805C86C
	push {r4, lr}
	adds r1, r0, #0
	ldr r2, [r1, #0x60]
	ldrh r0, [r1, #0x2c]
	adds r0, #1
	movs r4, #0
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #1
	bne _0805C8B0
	ldr r0, _0805C8A4 @ =0x08C29920
	str r0, [r2, #0x24]
	str r0, [r2, #0x20]
	strh r4, [r2, #6]
	movs r0, #0xa
	strh r0, [r1, #0x2e]
	ldr r0, _0805C8A8 @ =0x08253234
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805C8AC @ =0x082529A0
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	b _0805C8C0
	.align 2, 0
_0805C8A4: .4byte 0x08C29920
_0805C8A8: .4byte 0x08253234
_0805C8AC: .4byte 0x082529A0
_0805C8B0:
	movs r2, #0x2e
	ldrsh r0, [r1, r2]
	cmp r3, r0
	bne _0805C8C0
	strh r4, [r1, #0x2c]
	adds r0, r1, #0
	bl Proc_Break
_0805C8C0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805C8C8
sub_0805C8C8: @ 0x0805C8C8
	push {r4, lr}
	adds r1, r0, #0
	ldr r2, [r1, #0x60]
	ldrh r0, [r1, #0x2c]
	adds r0, #1
	movs r4, #0
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #1
	bne _0805C90C
	ldr r0, _0805C900 @ =0x08C29C1C
	str r0, [r2, #0x24]
	str r0, [r2, #0x20]
	strh r4, [r2, #6]
	movs r0, #0xa
	strh r0, [r1, #0x2e]
	ldr r0, _0805C904 @ =0x08253234
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805C908 @ =0x08252E38
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	b _0805C91C
	.align 2, 0
_0805C900: .4byte 0x08C29C1C
_0805C904: .4byte 0x08253234
_0805C908: .4byte 0x08252E38
_0805C90C:
	movs r2, #0x2e
	ldrsh r0, [r1, r2]
	cmp r3, r0
	bne _0805C91C
	strh r4, [r1, #0x2c]
	adds r0, r1, #0
	bl Proc_Break
_0805C91C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805C924
sub_0805C924: @ 0x0805C924
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0805C95C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805C960 @ =0x08C120F4
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	movs r1, #0x2c
	strh r1, [r0, #0x30]
	ldr r0, _0805C964 @ =0x0822FED0
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805C968 @ =0x0822F2D8
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805C95C: .4byte 0x0201774C
_0805C960: .4byte 0x08C120F4
_0805C964: .4byte 0x0822FED0
_0805C968: .4byte 0x0822F2D8

	thumb_func_start sub_0805C96C
sub_0805C96C: @ 0x0805C96C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #8
	bne _0805C9BE
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r0, _0805C9C4 @ =0x08C1210C
	movs r1, #0x2e
	ldrsh r2, [r4, r1]
	lsls r1, r2, #2
	adds r1, r1, r0
	lsls r2, r2, #1
	adds r2, #1
	lsls r2, r2, #1
	adds r2, r2, r0
	ldr r0, [r4, #0x5c]
	movs r3, #0
	ldrsh r1, [r1, r3]
	movs r3, #0
	ldrsh r2, [r2, r3]
	bl sub_0805C9CC
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #6
	bne _0805C9BE
	ldr r1, _0805C9C8 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0805C9BE:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805C9C4: .4byte 0x08C1210C
_0805C9C8: .4byte 0x0201774C

	thumb_func_start sub_0805C9CC
sub_0805C9CC: @ 0x0805C9CC
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	ldr r1, _0805CA14 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805CA18 @ =0x08C12124
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r3, _0805CA1C @ =0x08C28880
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	strh r6, [r0, #2]
	mov r1, r8
	strh r1, [r0, #4]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805CA14: .4byte 0x0201774C
_0805CA18: .4byte 0x08C12124
_0805CA1C: .4byte 0x08C28880

	thumb_func_start sub_0805CA20
sub_0805CA20: @ 0x0805CA20
	push {lr}
	ldr r2, _0805CA34 @ =0x0201774C
	ldr r1, [r2]
	subs r1, #1
	str r1, [r2]
	ldr r0, [r0, #0x60]
	bl AnimDelete
	pop {r0}
	bx r0
	.align 2, 0
_0805CA34: .4byte 0x0201774C

	thumb_func_start sub_0805CA38
sub_0805CA38: @ 0x0805CA38
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _0805CA70 @ =0x08C12144
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805CA70: .4byte 0x08C12144

	thumb_func_start sub_0805CA74
sub_0805CA74: @ 0x0805CA74
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r6, r0, #0
	ldr r0, [r6, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	bl GetSpellAnimationStartFrame
	adds r4, r0, #0
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	movs r1, #0
	mov r8, r1
	movs r7, #0
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805CAAA
	ldr r0, [r6, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
_0805CAAA:
	movs r2, #0x2c
	ldrsh r1, [r6, r2]
	adds r0, r4, #1
	cmp r1, r0
	bne _0805CB3C
	adds r0, r5, #0
	movs r1, #0x64
	bl sub_0805CC58
	adds r0, r5, #0
	movs r1, #0x64
	bl sub_0805CD34
	movs r4, #0x80
	lsls r4, r4, #1
	movs r0, #1
	str r0, [sp]
	adds r0, r5, #0
	movs r1, #0x64
	movs r2, #2
	adds r3, r4, #0
	bl sub_080560A4
	adds r0, r5, #0
	movs r1, #0x69
	movs r2, #0
	bl sub_080565FC
	ldr r3, _0805CB38 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	mov r2, r8
	strb r2, [r0]
	adds r0, #1
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r2, [r0]
	str r1, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0xf
	movs r3, #0
	bl sub_080566F0
	str r7, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0x46
	movs r2, #0xf
	movs r3, #0x10
	bl sub_080566F0
	movs r0, #0x98
	lsls r0, r0, #1
	adds r1, r4, #0
	movs r2, #0x78
	movs r3, #0
	bl PlaySFX
	b _0805CC4C
	.align 2, 0
_0805CB38: .4byte gDispIo
_0805CB3C:
	adds r0, r4, #0
	adds r0, #0x28
	cmp r1, r0
	bne _0805CB54
	adds r0, r5, #0
	movs r1, #0x4a
	bl sub_0805CDCC
	ldr r0, _0805CB50 @ =0x00000131
	b _0805CBAC
	.align 2, 0
_0805CB50: .4byte 0x00000131
_0805CB54:
	adds r0, r4, #0
	adds r0, #0x6e
	cmp r1, r0
	bne _0805CB64
	adds r0, r5, #0
	bl sub_0805CE60
	b _0805CC4C
_0805CB64:
	adds r0, r4, #0
	adds r0, #0x6f
	cmp r1, r0
	beq _0805CBA8
	adds r0, r4, #0
	adds r0, #0x7d
	cmp r1, r0
	beq _0805CBA8
	adds r0, r4, #0
	adds r0, #0x8b
	cmp r1, r0
	beq _0805CBA8
	adds r0, r4, #0
	adds r0, #0x99
	cmp r1, r0
	beq _0805CBA8
	adds r0, r4, #0
	adds r0, #0xa7
	cmp r1, r0
	beq _0805CBA8
	adds r0, r4, #0
	adds r0, #0xb5
	cmp r1, r0
	beq _0805CBA8
	adds r0, r4, #0
	adds r0, #0xc3
	cmp r1, r0
	beq _0805CBA8
	movs r0, #0x2c
	ldrsh r1, [r6, r0]
	adds r0, r4, #0
	adds r0, #0xd1
	cmp r1, r0
	bne _0805CBBC
_0805CBA8:
	movs r0, #0x99
	lsls r0, r0, #1
_0805CBAC:
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl PlaySFX
	b _0805CC4C
_0805CBBC:
	adds r0, r4, #0
	adds r0, #0xee
	cmp r1, r0
	bne _0805CC08
	adds r0, r5, #0
	movs r1, #0xa
	bl sub_0804F7B8
	adds r0, r5, #0
	bl sub_0805D044
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, r6, #0
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl StartBattleAnimHitEffectsDefault
	ldr r0, _0805CC04 @ =0x00000133
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl PlaySFX
	ldrb r0, [r4]
	cmp r0, #0
	bne _0805CC4C
	adds r0, r5, #0
	bl sub_08068500
	b _0805CC4C
	.align 2, 0
_0805CC04: .4byte 0x00000133
_0805CC08:
	adds r0, r4, #0
	adds r0, #0xf8
	cmp r1, r0
	bne _0805CC2A
	adds r0, r5, #0
	bl sub_0805CEF0
	movs r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r1, #0x12
	movs r2, #8
	movs r3, #0x10
	bl sub_080566F0
	b _0805CC4C
_0805CC2A:
	movs r2, #0x91
	lsls r2, r2, #1
	adds r0, r4, r2
	cmp r1, r0
	beq _0805CC4C
	movs r3, #0x96
	lsls r3, r3, #1
	adds r0, r4, r3
	cmp r1, r0
	bne _0805CC4C
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r6, #0
	bl Proc_Break
_0805CC4C:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0805CC58
sub_0805CC58: @ 0x0805CC58
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _0805CCCC @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805CCD0 @ =0x08C1215C
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	ldr r0, _0805CCD4 @ =0x08253254
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	bl SpellFx_ClearBG1
	ldr r0, _0805CCD8 @ =0x08253B94
	ldr r4, _0805CCDC @ =gEkrTsaBuffer
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r1, _0805CCE0 @ =gBg1Tm
	movs r0, #1
	str r0, [sp]
	adds r0, #0xff
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0x20
	movs r3, #0x20
	bl sub_080672B8
	movs r0, #2
	bl EnableBgSync
	bl SpellFx_SetSomeColorEffect
	ldr r2, _0805CCE4 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805CCCC: .4byte 0x0201774C
_0805CCD0: .4byte 0x08C1215C
_0805CCD4: .4byte 0x08253254
_0805CCD8: .4byte 0x08253B94
_0805CCDC: .4byte gEkrTsaBuffer
_0805CCE0: .4byte gBg1Tm
_0805CCE4: .4byte gDispIo

	thumb_func_start sub_0805CCE8
sub_0805CCE8: @ 0x0805CCE8
	push {lr}
	bl SpellFx_ClearBG1
	ldr r1, _0805CD00 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	pop {r0}
	bx r0
	.align 2, 0
_0805CD00: .4byte 0x0201774C

	thumb_func_start sub_0805CD04
sub_0805CD04: @ 0x0805CD04
	push {lr}
	adds r2, r0, #0
	ldr r0, _0805CD30 @ =gDispIo
	ldrh r1, [r0, #0x22]
	adds r1, #1
	strh r1, [r0, #0x22]
	ldrh r1, [r0, #0x20]
	subs r1, #1
	strh r1, [r0, #0x20]
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	ldrh r3, [r2, #0x2e]
	lsls r1, r3, #0x10
	cmp r0, r1
	ble _0805CD2C
	adds r0, r2, #0
	bl Proc_Break
_0805CD2C:
	pop {r0}
	bx r0
	.align 2, 0
_0805CD30: .4byte gDispIo

	thumb_func_start sub_0805CD34
sub_0805CD34: @ 0x0805CD34
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _0805CD6C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805CD70 @ =0x08C1217C
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	strh r5, [r0, #0x30]
	str r1, [r0, #0x44]
	ldr r1, _0805CD74 @ =0x081EE7E4
	str r1, [r0, #0x48]
	ldr r1, _0805CD78 @ =0x082539B4
	str r1, [r0, #0x4c]
	adds r0, r1, #0
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805CD6C: .4byte 0x0201774C
_0805CD70: .4byte 0x08C1217C
_0805CD74: .4byte 0x081EE7E4
_0805CD78: .4byte 0x082539B4

	thumb_func_start sub_0805CD7C
sub_0805CD7C: @ 0x0805CD7C
	ldr r1, _0805CD88 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_0805CD88: .4byte 0x0201774C

	thumb_func_start sub_0805CD8C
sub_0805CD8C: @ 0x0805CD8C
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _0805CDB0
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
_0805CDB0:
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0805CDC6
	adds r0, r4, #0
	bl Proc_Break
_0805CDC6:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0805CDCC
sub_0805CDCC: @ 0x0805CDCC
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r1, _0805CE18 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805CE1C @ =0x08C121A4
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	strh r6, [r4, #0x2e]
	ldr r3, _0805CE20 @ =0x08C2A90C
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	ldr r0, _0805CE24 @ =0x0825CF18
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805CE28 @ =0x0825C39C
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805CE18: .4byte 0x0201774C
_0805CE1C: .4byte 0x08C121A4
_0805CE20: .4byte 0x08C2A90C
_0805CE24: .4byte 0x0825CF18
_0805CE28: .4byte 0x0825C39C

	thumb_func_start sub_0805CE2C
sub_0805CE2C: @ 0x0805CE2C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0805CE54
	ldr r0, _0805CE5C @ =0x0201774C
	ldr r1, [r0]
	subs r1, #1
	str r1, [r0]
	ldr r0, [r4, #0x60]
	bl AnimDelete
	adds r0, r4, #0
	bl Proc_Break
_0805CE54:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805CE5C: .4byte 0x0201774C

	thumb_func_start sub_0805CE60
sub_0805CE60: @ 0x0805CE60
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _0805CEC4 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805CEC8 @ =0x08C121BC
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r1, #0
	strh r1, [r5, #0x2c]
	str r1, [r5, #0x44]
	ldr r0, _0805CECC @ =0x081EE822
	str r0, [r5, #0x48]
	ldr r0, _0805CED0 @ =0x08C122A0
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _0805CED4 @ =0x08C121D4
	str r0, [r5, #0x54]
	str r1, [r5, #0x58]
	ldr r0, _0805CED8 @ =0x08257D54
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_SetSomeColorEffect
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, _0805CEDC @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0805CEEA
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _0805CEE0
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _0805CEEA
	.align 2, 0
_0805CEC4: .4byte 0x0201774C
_0805CEC8: .4byte 0x08C121BC
_0805CECC: .4byte 0x081EE822
_0805CED0: .4byte 0x08C122A0
_0805CED4: .4byte 0x08C121D4
_0805CED8: .4byte 0x08257D54
_0805CEDC: .4byte gEkrDistanceType
_0805CEE0:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_0805CEEA:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0805CEF0
sub_0805CEF0: @ 0x0805CEF0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _0805CF4C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805CF50 @ =0x08C121BC
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r1, #0
	strh r1, [r5, #0x2c]
	str r1, [r5, #0x44]
	ldr r0, _0805CF54 @ =0x081EDF40
	str r0, [r5, #0x48]
	ldr r0, _0805CF58 @ =0x08C10EB4
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _0805CF5C @ =0x08C10E60
	str r0, [r5, #0x54]
	str r1, [r5, #0x58]
	ldr r0, _0805CF60 @ =0x08257D74
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_SetSomeColorEffect
	ldr r0, _0805CF64 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0805CF72
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _0805CF68
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _0805CF72
	.align 2, 0
_0805CF4C: .4byte 0x0201774C
_0805CF50: .4byte 0x08C121BC
_0805CF54: .4byte 0x081EDF40
_0805CF58: .4byte 0x08C10EB4
_0805CF5C: .4byte 0x08C10E60
_0805CF60: .4byte 0x08257D74
_0805CF64: .4byte gEkrDistanceType
_0805CF68:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_0805CF72:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0805CF78
sub_0805CF78: @ 0x0805CF78
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _0805D014
	ldr r7, [r4, #0x4c]
	ldr r0, [r4, #0x50]
	mov r8, r0
	ldr r0, [r4, #0x54]
	lsls r5, r1, #2
	adds r6, r5, r0
	ldr r0, [r4, #0x58]
	ldr r2, [r6]
	cmp r0, r2
	beq _0805CFB4
	movs r1, #0x80
	lsls r1, r1, #6
	adds r0, r2, #0
	bl SpellFx_RegisterBgGfx
_0805CFB4:
	ldr r0, [r6]
	str r0, [r4, #0x58]
	ldr r0, [r4, #0x5c]
	adds r1, r5, r7
	ldr r1, [r1]
	mov r3, r8
	adds r2, r5, r3
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	ldr r0, _0805CFF0 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0805D032
	ldr r0, [r4, #0x5c]
	bl GetAISSubjectId
	adds r1, r0, #0
	cmp r1, #0
	bne _0805CFF8
	ldr r0, _0805CFF4 @ =gBg1Tm
	str r1, [sp]
	movs r1, #3
	movs r2, #0x14
	movs r3, #0
	bl sub_080671A0
	b _0805D008
	.align 2, 0
_0805CFF0: .4byte gEkrDistanceType
_0805CFF4: .4byte gBg1Tm
_0805CFF8:
	ldr r0, _0805D010 @ =0x0202349A
	movs r1, #0
	str r1, [sp]
	movs r1, #3
	movs r2, #0x14
	movs r3, #0
	bl sub_080671A0
_0805D008:
	movs r0, #2
	bl EnableBgSync
	b _0805D032
	.align 2, 0
_0805D010: .4byte 0x0202349A
_0805D014:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0805D032
	bl SpellFx_ClearBG1
	ldr r1, _0805D040 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_0805D032:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805D040: .4byte 0x0201774C

	thumb_func_start sub_0805D044
sub_0805D044: @ 0x0805D044
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0805D07C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805D080 @ =0x08C1236C
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	str r1, [r0, #0x44]
	ldr r0, _0805D084 @ =0x0825CF38
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805D088 @ =0x0825C39C
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805D07C: .4byte 0x0201774C
_0805D080: .4byte 0x08C1236C
_0805D084: .4byte 0x0825CF38
_0805D088: .4byte 0x0825C39C

	thumb_func_start sub_0805D08C
sub_0805D08C: @ 0x0805D08C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #2
	bne _0805D0CC
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r0, [r4, #0x5c]
	ldr r2, [r4, #0x44]
	adds r1, r2, #0
	adds r2, #1
	str r2, [r4, #0x44]
	bl sub_0805D0D8
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #8
	bne _0805D0CC
	ldr r1, _0805D0D4 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0805D0CC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805D0D4: .4byte 0x0201774C

	thumb_func_start sub_0805D0D8
sub_0805D0D8: @ 0x0805D0D8
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	ldr r1, _0805D118 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805D11C @ =0x08C12384
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r6, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	movs r0, #0x1e
	strh r0, [r5, #0x2e]
	ldr r1, _0805D120 @ =0x08C1239C
	movs r0, #7
	ands r0, r4
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	str r0, [r5, #0x44]
	movs r1, #0
	movs r0, #1
	ands r0, r4
	cmp r0, #0
	beq _0805D124
	cmp r0, #1
	beq _0805D12C
	b _0805D138
	.align 2, 0
_0805D118: .4byte 0x0201774C
_0805D11C: .4byte 0x08C12384
_0805D120: .4byte 0x08C1239C
_0805D124:
	ldr r0, _0805D128 @ =0x08C2A8B4
	b _0805D12E
	.align 2, 0
_0805D128: .4byte 0x08C2A8B4
_0805D12C:
	ldr r0, _0805D154 @ =0x08C2A8E0
_0805D12E:
	movs r1, #0x78
	bl AnimCreate
	adds r1, r0, #0
	str r1, [r5, #0x60]
_0805D138:
	movs r0, #0xa1
	lsls r0, r0, #6
	strh r0, [r1, #8]
	ldrh r0, [r6, #2]
	strh r0, [r1, #2]
	ldrh r0, [r6, #2]
	strh r0, [r5, #0x32]
	ldrh r0, [r6, #4]
	strh r0, [r1, #4]
	ldrh r0, [r6, #4]
	strh r0, [r5, #0x3a]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805D154: .4byte 0x08C2A8E0

	thumb_func_start sub_0805D158
sub_0805D158: @ 0x0805D158
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r5, [r6, #0x60]
	movs r2, #0x96
	lsls r2, r2, #1
	movs r0, #0x2c
	ldrsh r3, [r6, r0]
	movs r1, #0x2e
	ldrsh r0, [r6, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	ldr r4, _0805D1D0 @ =gSinLut
	ldr r2, [r6, #0x44]
	lsls r1, r2, #1
	adds r1, r1, r4
	movs r3, #0
	ldrsh r1, [r1, r3]
	adds r3, r0, #0
	muls r3, r1, r3
	adds r2, #0x40
	lsls r2, r2, #1
	adds r2, r2, r4
	movs r4, #0
	ldrsh r1, [r2, r4]
	muls r0, r1, r0
	asrs r3, r3, #0xc
	ldrh r1, [r6, #0x32]
	adds r3, r1, r3
	strh r3, [r5, #2]
	asrs r0, r0, #0xc
	ldrh r2, [r6, #0x3a]
	adds r0, r2, r0
	strh r0, [r5, #4]
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	ldrh r3, [r6, #0x2e]
	lsls r1, r3, #0x10
	cmp r0, r1
	ble _0805D1C6
	ldr r0, _0805D1D4 @ =0x0201774C
	ldr r1, [r0]
	subs r1, #1
	str r1, [r0]
	ldr r0, [r6, #0x60]
	bl AnimDelete
	adds r0, r6, #0
	bl Proc_Break
_0805D1C6:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805D1D0: .4byte gSinLut
_0805D1D4: .4byte 0x0201774C

	thumb_func_start sub_0805D1D8
sub_0805D1D8: @ 0x0805D1D8
	push {r4, lr}
	adds r4, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _0805D1FC @ =0x08C123BC
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805D1FC: .4byte 0x08C123BC

	thumb_func_start sub_0805D200
sub_0805D200: @ 0x0805D200
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r6, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805D232
	ldr r0, [r4, #0x5c]
	bl sub_0805DC18
	movs r0, #0xb3
	lsls r0, r0, #2
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	b _0805D2DC
_0805D232:
	cmp r0, #0x34
	bne _0805D298
	ldr r0, [r4, #0x5c]
	movs r1, #0
	bl sub_0805D824
	ldr r0, [r4, #0x5c]
	movs r1, #0
	bl sub_0805DA04
	ldr r3, _0805D294 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r6, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r6, [r0]
	ldr r0, [r4, #0x5c]
	movs r1, #1
	movs r2, #0xc
	movs r3, #0
	bl sub_0805DB2C
	ldr r0, [r4, #0x5c]
	movs r1, #0x23
	movs r2, #0x19
	movs r3, #1
	bl sub_0805DB2C
	movs r0, #0x87
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	b _0805D2DC
	.align 2, 0
_0805D294: .4byte gDispIo
_0805D298:
	cmp r0, #0x37
	bne _0805D2A6
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	b _0805D320
_0805D2A6:
	cmp r0, #0x71
	bne _0805D2E8
	ldr r0, [r4, #0x5c]
	movs r1, #0
	bl sub_0805D8E0
	ldr r0, [r4, #0x5c]
	movs r1, #0
	bl sub_0805DA74
	ldr r0, [r4, #0x5c]
	movs r1, #1
	movs r2, #0xc
	movs r3, #0
	bl sub_0805DB2C
	ldr r0, [r4, #0x5c]
	movs r1, #0x1d
	movs r2, #0x19
	movs r3, #1
	bl sub_0805DB2C
	ldr r0, _0805D2E4 @ =0x0000010F
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
_0805D2DC:
	movs r3, #1
	bl PlaySFX
	b _0805D320
	.align 2, 0
_0805D2E4: .4byte 0x0000010F
_0805D2E8:
	cmp r0, #0xa6
	bne _0805D2F4
	adds r0, r5, #0
	bl sub_0804E474
	b _0805D320
_0805D2F4:
	cmp r0, #0xb5
	bne _0805D320
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r5, #0
	bl GetSomeAnimIndex
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r1, #1
	rsbs r1, r1, #0
	cmp r0, r1
	beq _0805D31A
	movs r0, #2
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
_0805D31A:
	adds r0, r4, #0
	bl Proc_Break
_0805D320:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805D328
sub_0805D328: @ 0x0805D328
	push {r4, lr}
	adds r4, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _0805D34C @ =0x08C123D4
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805D34C: .4byte 0x08C123D4

	thumb_func_start sub_0805D350
sub_0805D350: @ 0x0805D350
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	bl GetSpellAnimationStartFrame
	adds r2, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r6, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805D388
	ldr r0, [r4, #0x5c]
	bl sub_0805DC18
	movs r0, #0xb3
	lsls r0, r0, #2
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	b _0805D472
_0805D388:
	cmp r0, #0x34
	bne _0805D3F0
	ldr r0, [r4, #0x5c]
	movs r1, #1
	bl sub_0805D824
	ldr r0, [r4, #0x5c]
	movs r1, #1
	bl sub_0805DA04
	ldr r3, _0805D3EC @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r6, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r6, [r0]
	ldr r0, [r4, #0x5c]
	movs r1, #1
	movs r2, #0xc
	movs r3, #0
	bl sub_0805DB2C
	ldr r0, [r4, #0x5c]
	movs r1, #0x23
	movs r2, #0x19
	movs r3, #1
	bl sub_0805DB2C
	movs r0, #0x88
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	b _0805D472
	.align 2, 0
_0805D3EC: .4byte gDispIo
_0805D3F0:
	cmp r0, #0x37
	bne _0805D3FE
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	b _0805D4C4
_0805D3FE:
	cmp r0, #0x71
	bne _0805D40E
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
	b _0805D4C4
_0805D40E:
	movs r3, #0x2c
	ldrsh r1, [r4, r3]
	adds r0, r2, #0
	adds r0, #0x72
	cmp r1, r0
	bne _0805D484
	ldr r0, [r4, #0x5c]
	movs r1, #1
	bl sub_0805D8E0
	ldr r0, [r4, #0x5c]
	movs r1, #1
	bl sub_0805DA74
	ldr r3, _0805D47C @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r6, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r6, [r0]
	ldr r0, [r4, #0x5c]
	movs r1, #1
	movs r2, #0xc
	movs r3, #0
	bl sub_0805DB2C
	ldr r0, [r4, #0x5c]
	movs r1, #0x1d
	movs r2, #0x19
	movs r3, #1
	bl sub_0805DB2C
	ldr r0, _0805D480 @ =0x00000111
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
_0805D472:
	movs r3, #1
	bl PlaySFX
	b _0805D4C4
	.align 2, 0
_0805D47C: .4byte gDispIo
_0805D480: .4byte 0x00000111
_0805D484:
	adds r0, r2, #0
	adds r0, #0xa6
	cmp r1, r0
	bne _0805D494
	adds r0, r5, #0
	bl sub_0804E474
	b _0805D4C4
_0805D494:
	adds r0, r2, #0
	adds r0, #0xb5
	cmp r1, r0
	bne _0805D4C4
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r5, #0
	bl GetSomeAnimIndex
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r1, #1
	rsbs r1, r1, #0
	cmp r0, r1
	beq _0805D4BE
	movs r0, #2
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
_0805D4BE:
	adds r0, r4, #0
	bl Proc_Break
_0805D4C4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805D4CC
sub_0805D4CC: @ 0x0805D4CC
	push {r4, lr}
	adds r4, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _0805D4F0 @ =0x08C123EC
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805D4F0: .4byte 0x08C123EC

	thumb_func_start sub_0805D4F4
sub_0805D4F4: @ 0x0805D4F4
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	bl GetSpellAnimationStartFrame
	adds r2, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r6, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805D52C
	ldr r0, [r4, #0x5c]
	bl sub_0805DC18
	movs r0, #0xb3
	lsls r0, r0, #2
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	b _0805D616
_0805D52C:
	cmp r0, #0x34
	bne _0805D594
	ldr r0, [r4, #0x5c]
	movs r1, #2
	bl sub_0805D824
	ldr r0, [r4, #0x5c]
	movs r1, #2
	bl sub_0805DA04
	ldr r3, _0805D590 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r6, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r6, [r0]
	ldr r0, [r4, #0x5c]
	movs r1, #1
	movs r2, #0xc
	movs r3, #0
	bl sub_0805DB2C
	ldr r0, [r4, #0x5c]
	movs r1, #0x23
	movs r2, #0x19
	movs r3, #1
	bl sub_0805DB2C
	movs r0, #0x89
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	b _0805D616
	.align 2, 0
_0805D590: .4byte gDispIo
_0805D594:
	cmp r0, #0x37
	bne _0805D5A2
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	b _0805D668
_0805D5A2:
	cmp r0, #0x71
	bne _0805D5B2
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
	b _0805D668
_0805D5B2:
	movs r3, #0x2c
	ldrsh r1, [r4, r3]
	adds r0, r2, #0
	adds r0, #0x72
	cmp r1, r0
	bne _0805D628
	ldr r0, [r4, #0x5c]
	movs r1, #2
	bl sub_0805D8E0
	ldr r0, [r4, #0x5c]
	movs r1, #2
	bl sub_0805DA74
	ldr r3, _0805D620 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r6, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r6, [r0]
	ldr r0, [r4, #0x5c]
	movs r1, #1
	movs r2, #0xc
	movs r3, #0
	bl sub_0805DB2C
	ldr r0, [r4, #0x5c]
	movs r1, #0x1d
	movs r2, #0x19
	movs r3, #1
	bl sub_0805DB2C
	ldr r0, _0805D624 @ =0x00000113
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
_0805D616:
	movs r3, #1
	bl PlaySFX
	b _0805D668
	.align 2, 0
_0805D620: .4byte gDispIo
_0805D624: .4byte 0x00000113
_0805D628:
	adds r0, r2, #0
	adds r0, #0xa6
	cmp r1, r0
	bne _0805D638
	adds r0, r5, #0
	bl sub_0804E474
	b _0805D668
_0805D638:
	adds r0, r2, #0
	adds r0, #0xb5
	cmp r1, r0
	bne _0805D668
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r5, #0
	bl GetSomeAnimIndex
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r1, #1
	rsbs r1, r1, #0
	cmp r0, r1
	beq _0805D662
	movs r0, #2
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
_0805D662:
	adds r0, r4, #0
	bl Proc_Break
_0805D668:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805D670
sub_0805D670: @ 0x0805D670
	push {r4, lr}
	adds r4, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _0805D694 @ =0x08C12404
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805D694: .4byte 0x08C12404

	thumb_func_start sub_0805D698
sub_0805D698: @ 0x0805D698
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	bl GetSpellAnimationStartFrame
	adds r2, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r6, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805D6D8
	ldr r0, [r4, #0x5c]
	bl sub_0805DC18
	ldr r0, [r4, #0x5c]
	movs r1, #0
	bl sub_0805DD78
	movs r0, #0xb3
	lsls r0, r0, #2
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	b _0805D7CA
_0805D6D8:
	cmp r0, #0x34
	bne _0805D740
	ldr r0, [r4, #0x5c]
	movs r1, #0
	bl sub_0805D824
	ldr r0, [r4, #0x5c]
	movs r1, #0
	bl sub_0805DA04
	ldr r3, _0805D73C @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r6, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r6, [r0]
	ldr r0, [r4, #0x5c]
	movs r1, #1
	movs r2, #0xc
	movs r3, #0
	bl sub_0805DB2C
	ldr r0, [r4, #0x5c]
	movs r1, #0x23
	movs r2, #0x19
	movs r3, #1
	bl sub_0805DB2C
	movs r0, #0x87
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	b _0805D7CA
	.align 2, 0
_0805D73C: .4byte gDispIo
_0805D740:
	cmp r0, #0x37
	bne _0805D74E
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	b _0805D81C
_0805D74E:
	cmp r0, #0x97
	bne _0805D766
	ldr r0, [r4, #0x5c]
	movs r1, #1
	bl sub_0805DD78
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
	b _0805D81C
_0805D766:
	movs r3, #0x2c
	ldrsh r1, [r4, r3]
	adds r0, r2, #0
	adds r0, #0xa1
	cmp r1, r0
	bne _0805D7DC
	ldr r0, [r4, #0x5c]
	movs r1, #0
	bl sub_0805D8E0
	ldr r0, [r4, #0x5c]
	movs r1, #0
	bl sub_0805DA74
	ldr r3, _0805D7D4 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r6, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r6, [r0]
	ldr r0, [r4, #0x5c]
	movs r1, #1
	movs r2, #0xc
	movs r3, #0
	bl sub_0805DB2C
	ldr r0, [r4, #0x5c]
	movs r1, #0x1d
	movs r2, #0x19
	movs r3, #1
	bl sub_0805DB2C
	ldr r0, _0805D7D8 @ =0x0000010F
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
_0805D7CA:
	movs r3, #1
	bl PlaySFX
	b _0805D81C
	.align 2, 0
_0805D7D4: .4byte gDispIo
_0805D7D8: .4byte 0x0000010F
_0805D7DC:
	adds r0, r2, #0
	adds r0, #0xd3
	cmp r1, r0
	bne _0805D7EC
	adds r0, r5, #0
	bl sub_0804E474
	b _0805D81C
_0805D7EC:
	adds r0, r2, #0
	adds r0, #0xdd
	cmp r1, r0
	bne _0805D81C
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r5, #0
	bl GetSomeAnimIndex
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r1, #1
	rsbs r1, r1, #0
	cmp r0, r1
	beq _0805D816
	movs r0, #2
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
_0805D816:
	adds r0, r4, #0
	bl Proc_Break
_0805D81C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805D824
sub_0805D824: @ 0x0805D824
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r1, #0
	ldr r1, _0805D86C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805D870 @ =0x08C1241C
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	cmp r6, #0
	beq _0805D884
	cmp r6, #2
	bhi _0805D8D6
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	ldr r0, _0805D874 @ =0x081EE930
	str r0, [r5, #0x48]
	ldr r0, _0805D878 @ =0x082710C8
	str r0, [r5, #0x4c]
	ldr r0, _0805D87C @ =0x08271A28
	str r0, [r5, #0x50]
	ldr r0, _0805D880 @ =0x082708D0
	movs r1, #0xa8
	lsls r1, r1, #5
	bl SpellFx_RegisterBgGfx
	b _0805D8D6
	.align 2, 0
_0805D86C: .4byte 0x0201774C
_0805D870: .4byte 0x08C1241C
_0805D874: .4byte 0x081EE930
_0805D878: .4byte 0x082710C8
_0805D87C: .4byte 0x08271A28
_0805D880: .4byte 0x082708D0
_0805D884:
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	ldr r0, _0805D8BC @ =0x081EE924
	str r0, [r5, #0x48]
	ldr r0, _0805D8C0 @ =0x0826FAFC
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _0805D8C4 @ =0x0826F96C
	movs r1, #0x80
	lsls r1, r1, #3
	bl SpellFx_RegisterBgGfx
	ldr r0, _0805D8C8 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0805D8D6
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _0805D8CC
	movs r0, #1
	movs r1, #0x18
	b _0805D8D0
	.align 2, 0
_0805D8BC: .4byte 0x081EE924
_0805D8C0: .4byte 0x0826FAFC
_0805D8C4: .4byte 0x0826F96C
_0805D8C8: .4byte gEkrDistanceType
_0805D8CC:
	movs r0, #1
	movs r1, #0xe8
_0805D8D0:
	movs r2, #0
	bl SetBgOffset
_0805D8D6:
	bl SpellFx_SetSomeColorEffect
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_0805D8E0
sub_0805D8E0: @ 0x0805D8E0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r1, #0
	ldr r1, _0805D928 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805D92C @ =0x08C1241C
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r1, #0
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	adds r0, r5, #0
	adds r0, #0x29
	strb r1, [r0]
	cmp r6, #0
	beq _0805D940
	cmp r6, #2
	bhi _0805D98A
	ldr r0, _0805D930 @ =0x081EE936
	str r0, [r5, #0x48]
	ldr r0, _0805D934 @ =0x082710C8
	str r0, [r5, #0x4c]
	ldr r0, _0805D938 @ =0x08271A28
	str r0, [r5, #0x50]
	ldr r0, _0805D93C @ =0x082708D0
	movs r1, #0xa8
	lsls r1, r1, #5
	bl SpellFx_RegisterBgGfx
	b _0805D98A
	.align 2, 0
_0805D928: .4byte 0x0201774C
_0805D92C: .4byte 0x08C1241C
_0805D930: .4byte 0x081EE936
_0805D934: .4byte 0x082710C8
_0805D938: .4byte 0x08271A28
_0805D93C: .4byte 0x082708D0
_0805D940:
	ldr r0, _0805D970 @ =0x081EE92A
	str r0, [r5, #0x48]
	ldr r0, _0805D974 @ =0x0826FAFC
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _0805D978 @ =0x0826F96C
	movs r1, #0x80
	lsls r1, r1, #3
	bl SpellFx_RegisterBgGfx
	ldr r0, _0805D97C @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0805D98A
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _0805D980
	movs r0, #1
	movs r1, #0xe8
	b _0805D984
	.align 2, 0
_0805D970: .4byte 0x081EE92A
_0805D974: .4byte 0x0826FAFC
_0805D978: .4byte 0x0826F96C
_0805D97C: .4byte gEkrDistanceType
_0805D980:
	movs r0, #1
	movs r1, #0x18
_0805D984:
	movs r2, #0
	bl SetBgOffset
_0805D98A:
	bl SpellFx_SetSomeColorEffect
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_0805D994
sub_0805D994: @ 0x0805D994
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #0
	blt _0805D9C6
	ldr r1, [r4, #0x4c]
	ldr r2, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r4, r3, #2
	adds r4, r4, r3
	lsls r3, r4, #4
	subs r3, r3, r4
	lsls r3, r3, #4
	adds r1, r1, r3
	adds r2, r2, r3
	bl sub_08050C54
	b _0805D9F8
_0805D9C6:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r3, r0
	bne _0805D9F8
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _0805D9E0
	bl SpellFx_ClearBG1
	bl SpellFx_ClearColorEffects
_0805D9E0:
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r1, _0805DA00 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0805D9F8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805DA00: .4byte 0x0201774C

	thumb_func_start sub_0805DA04
sub_0805DA04: @ 0x0805DA04
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _0805DA2C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805DA30 @ =0x08C12434
	movs r1, #3
	bl Proc_Start
	adds r1, r0, #0
	str r4, [r1, #0x5c]
	movs r0, #0
	strh r0, [r1, #0x2c]
	str r0, [r1, #0x44]
	cmp r5, #0
	bne _0805DA38
	ldr r0, _0805DA34 @ =0x081EE93C
	b _0805DA46
	.align 2, 0
_0805DA2C: .4byte 0x0201774C
_0805DA30: .4byte 0x08C12434
_0805DA34: .4byte 0x081EE93C
_0805DA38:
	cmp r5, #1
	bne _0805DA44
	ldr r0, _0805DA40 @ =0x081EE9C0
	b _0805DA46
	.align 2, 0
_0805DA40: .4byte 0x081EE9C0
_0805DA44:
	ldr r0, _0805DA50 @ =0x081EE9F2
_0805DA46:
	str r0, [r1, #0x48]
	cmp r5, #0
	bne _0805DA58
	ldr r0, _0805DA54 @ =0x0827045C
	b _0805DA66
	.align 2, 0
_0805DA50: .4byte 0x081EE9F2
_0805DA54: .4byte 0x0827045C
_0805DA58:
	cmp r5, #1
	bne _0805DA64
	ldr r0, _0805DA60 @ =0x082725A8
	b _0805DA66
	.align 2, 0
_0805DA60: .4byte 0x082725A8
_0805DA64:
	ldr r0, _0805DA70 @ =0x08272388
_0805DA66:
	str r0, [r1, #0x4c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805DA70: .4byte 0x08272388

	thumb_func_start sub_0805DA74
sub_0805DA74: @ 0x0805DA74
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _0805DA9C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805DAA0 @ =0x08C12434
	movs r1, #3
	bl Proc_Start
	adds r1, r0, #0
	str r4, [r1, #0x5c]
	movs r0, #0
	strh r0, [r1, #0x2c]
	str r0, [r1, #0x44]
	cmp r5, #0
	bne _0805DAA8
	ldr r0, _0805DAA4 @ =0x081EE97E
	b _0805DAB6
	.align 2, 0
_0805DA9C: .4byte 0x0201774C
_0805DAA0: .4byte 0x08C12434
_0805DAA4: .4byte 0x081EE97E
_0805DAA8:
	cmp r5, #1
	bne _0805DAB4
	ldr r0, _0805DAB0 @ =0x081EE9C0
	b _0805DAB6
	.align 2, 0
_0805DAB0: .4byte 0x081EE9C0
_0805DAB4:
	ldr r0, _0805DAC0 @ =0x081EE9F2
_0805DAB6:
	str r0, [r1, #0x48]
	cmp r5, #0
	bne _0805DAC8
	ldr r0, _0805DAC4 @ =0x0827045C
	b _0805DAD6
	.align 2, 0
_0805DAC0: .4byte 0x081EE9F2
_0805DAC4: .4byte 0x0827045C
_0805DAC8:
	cmp r5, #1
	bne _0805DAD4
	ldr r0, _0805DAD0 @ =0x082725A8
	b _0805DAD6
	.align 2, 0
_0805DAD0: .4byte 0x082725A8
_0805DAD4:
	ldr r0, _0805DAE0 @ =0x08272388
_0805DAD6:
	str r0, [r1, #0x4c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805DAE0: .4byte 0x08272388

	thumb_func_start sub_0805DAE4
sub_0805DAE4: @ 0x0805DAE4
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _0805DB0A
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	b _0805DB20
_0805DB0A:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0805DB20
	ldr r1, _0805DB28 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0805DB20:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805DB28: .4byte 0x0201774C

	thumb_func_start sub_0805DB2C
sub_0805DB2C: @ 0x0805DB2C
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r1, _0805DB60 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805DB64 @ =0x08C12454
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	strh r5, [r0, #0x2c]
	strh r6, [r0, #0x2e]
	adds r0, #0x29
	mov r1, r8
	strb r1, [r0]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805DB60: .4byte 0x0201774C
_0805DB64: .4byte 0x08C12454

	thumb_func_start sub_0805DB68
sub_0805DB68: @ 0x0805DB68
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x2c]
	subs r0, #1
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0805DB7E
	adds r0, r1, #0
	bl Proc_Break
_0805DB7E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805DB84
sub_0805DB84: @ 0x0805DB84
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	movs r2, #0x2e
	ldrsh r0, [r4, r2]
	cmp r1, r0
	ble _0805DBAC
	ldr r1, _0805DBA8 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
	b _0805DC0A
	.align 2, 0
_0805DBA8: .4byte 0x0201774C
_0805DBAC:
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _0805DBC8
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	b _0805DBD8
_0805DBC8:
	movs r2, #0x2c
	ldrsh r3, [r4, r2]
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
_0805DBD8:
	bl Interpolate
	adds r5, r0, #0
	ldr r3, _0805DC14 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r5, [r0]
	adds r2, #9
	movs r0, #0x10
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x46
	strb r1, [r0]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
_0805DC0A:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805DC14: .4byte gDispIo

	thumb_func_start sub_0805DC18
sub_0805DC18: @ 0x0805DC18
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0805DC64 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805DC68 @ =0x08C12474
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x33
	strh r0, [r4, #0x2e]
	ldr r3, _0805DC6C @ =0x08C2D9FC
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	ldr r0, _0805DC70 @ =0x082708B0
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805DC74 @ =0x0827065C
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805DC64: .4byte 0x0201774C
_0805DC68: .4byte 0x08C12474
_0805DC6C: .4byte 0x08C2D9FC
_0805DC70: .4byte 0x082708B0
_0805DC74: .4byte 0x0827065C

	thumb_func_start sub_0805DC78
sub_0805DC78: @ 0x0805DC78
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0805DCC8 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805DCCC @ =0x08C1248C
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x33
	strh r0, [r4, #0x2e]
	movs r0, #0x34
	strh r0, [r4, #0x30]
	ldr r3, _0805DCD0 @ =0x08C2D9FC
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	ldr r0, _0805DCD4 @ =0x082708B0
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805DCD8 @ =0x0827065C
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805DCC8: .4byte 0x0201774C
_0805DCCC: .4byte 0x08C1248C
_0805DCD0: .4byte 0x08C2D9FC
_0805DCD4: .4byte 0x082708B0
_0805DCD8: .4byte 0x0827065C

	thumb_func_start sub_0805DCDC
sub_0805DCDC: @ 0x0805DCDC
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _0805DD04
	ldr r0, _0805DD0C @ =0x0201774C
	ldr r1, [r0]
	subs r1, #1
	str r1, [r0]
	ldr r0, [r4, #0x60]
	bl AnimDelete
	adds r0, r4, #0
	bl Proc_Break
_0805DD04:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805DD0C: .4byte 0x0201774C

	thumb_func_start sub_0805DD10
sub_0805DD10: @ 0x0805DD10
	push {r4, r5, lr}
	adds r2, r0, #0
	ldr r3, [r2, #0x60]
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	movs r4, #0
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	ldrh r5, [r2, #0x2e]
	lsls r1, r5, #0x10
	cmp r0, r1
	bne _0805DD38
	ldr r0, _0805DD40 @ =0x08C2DA8C
	str r0, [r3, #0x24]
	str r0, [r3, #0x20]
	strh r4, [r3, #6]
	strh r4, [r2, #0x2c]
	adds r0, r2, #0
	bl Proc_Break
_0805DD38:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805DD40: .4byte 0x08C2DA8C

	thumb_func_start sub_0805DD44
sub_0805DD44: @ 0x0805DD44
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _0805DD6C
	ldr r0, _0805DD74 @ =0x0201774C
	ldr r1, [r0]
	subs r1, #1
	str r1, [r0]
	ldr r0, [r4, #0x60]
	bl AnimDelete
	adds r0, r4, #0
	bl Proc_Break
_0805DD6C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805DD74: .4byte 0x0201774C

	thumb_func_start sub_0805DD78
sub_0805DD78: @ 0x0805DD78
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r1, _0805DDA8 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805DDAC @ =0x08C124AC
	movs r1, #3
	bl Proc_Start
	adds r1, r0, #0
	str r5, [r1, #0x5c]
	movs r0, #0
	strh r0, [r1, #0x2c]
	adds r0, r1, #0
	adds r0, #0x29
	strb r4, [r0]
	cmp r4, #0
	bne _0805DDB0
	movs r0, #0x2b
	strh r0, [r1, #0x2e]
	movs r0, #0x44
	b _0805DDB6
	.align 2, 0
_0805DDA8: .4byte 0x0201774C
_0805DDAC: .4byte 0x08C124AC
_0805DDB0:
	movs r0, #0x1f
	strh r0, [r1, #0x2e]
	movs r0, #0x3d
_0805DDB6:
	strh r0, [r1, #0x30]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805DDC0
sub_0805DDC0: @ 0x0805DDC0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _0805DE7E
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _0805DE26
	ldr r0, _0805DE08 @ =0x08C2EFA8
	mov r8, r0
	ldr r7, _0805DE0C @ =0x08C305A8
	ldr r0, _0805DE10 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0805DE14
	ldr r0, [r4, #0x5c]
	bl GetAISSubjectId
	movs r5, #0x88
	cmp r0, #0
	bne _0805DE22
	movs r5, #0x68
	b _0805DE22
	.align 2, 0
_0805DE08: .4byte 0x08C2EFA8
_0805DE0C: .4byte 0x08C305A8
_0805DE10: .4byte gEkrDistanceType
_0805DE14:
	ldr r0, [r4, #0x5c]
	bl GetAISSubjectId
	movs r5, #0x70
	cmp r0, #0
	bne _0805DE22
	movs r5, #0x80
_0805DE22:
	movs r6, #0x4e
	b _0805DE64
_0805DE26:
	ldr r2, _0805DE48 @ =0x08C2F01C
	mov r8, r2
	ldr r7, _0805DE4C @ =0x08C3061C
	ldr r0, _0805DE50 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0805DE54
	ldr r0, [r4, #0x5c]
	bl GetAISSubjectId
	movs r5, #0x4c
	cmp r0, #0
	bne _0805DE62
	movs r5, #0xa4
	b _0805DE62
	.align 2, 0
_0805DE48: .4byte 0x08C2F01C
_0805DE4C: .4byte 0x08C3061C
_0805DE50: .4byte gEkrDistanceType
_0805DE54:
	ldr r0, [r4, #0x5c]
	bl GetAISSubjectId
	movs r5, #0x64
	cmp r0, #0
	bne _0805DE62
	movs r5, #0x8c
_0805DE62:
	movs r6, #0x40
_0805DE64:
	ldr r0, [r4, #0x5c]
	mov r2, r8
	str r2, [sp]
	adds r1, r7, #0
	adds r3, r7, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	strh r5, [r0, #2]
	strh r6, [r0, #4]
	adds r0, r4, #0
	bl Proc_Break
_0805DE7E:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805DE8C
sub_0805DE8C: @ 0x0805DE8C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _0805DEB4
	ldr r0, _0805DEBC @ =0x0201774C
	ldr r1, [r0]
	subs r1, #1
	str r1, [r0]
	ldr r0, [r4, #0x60]
	bl AnimDelete
	adds r0, r4, #0
	bl Proc_Break
_0805DEB4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805DEBC: .4byte 0x0201774C

	thumb_func_start sub_0805DEC0
sub_0805DEC0: @ 0x0805DEC0
	push {r4, lr}
	adds r4, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _0805DEEC @ =0x08C124CC
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r2, #0
	movs r1, #0
	strh r1, [r0, #0x2c]
	adds r0, #0x29
	strb r2, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805DEEC: .4byte 0x08C124CC

	thumb_func_start sub_0805DEF0
sub_0805DEF0: @ 0x0805DEF0
	push {r4, lr}
	adds r4, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _0805DF1C @ =0x08C124CC
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	adds r0, #0x29
	movs r1, #1
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805DF1C: .4byte 0x08C124CC

	thumb_func_start sub_0805DF20
sub_0805DF20: @ 0x0805DF20
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r5, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #1
	bne _0805DF50
	ldr r0, [r4, #0x5c]
	bl sub_0805DC78
	movs r0, #0xb3
	lsls r0, r0, #2
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl PlaySFX
	b _0805DFE8
_0805DF50:
	cmp r1, #0x34
	bne _0805DF68
	ldr r0, [r4, #0x5c]
	bl sub_0805DFF4
	ldr r0, [r4, #0x5c]
	adds r1, r4, #0
	adds r1, #0x29
	ldrb r1, [r1]
	bl sub_0805E0C4
	b _0805DFE8
_0805DF68:
	cmp r1, #0xb7
	bne _0805DFD4
	movs r0, #0x8a
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x78
	movs r3, #0
	bl PlaySFX
	ldr r0, [r4, #0x5c]
	bl sub_0805E158
	ldr r0, [r4, #0x5c]
	adds r1, r4, #0
	adds r1, #0x29
	ldrb r1, [r1]
	bl sub_0805E31C
	ldr r3, _0805DFD0 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r5, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r5, [r0]
	ldr r0, [r4, #0x5c]
	movs r1, #1
	movs r2, #0x14
	movs r3, #0
	bl sub_0805DB2C
	ldr r0, [r4, #0x5c]
	movs r1, #0xb4
	movs r2, #0x28
	movs r3, #1
	bl sub_0805DB2C
	b _0805DFE8
	.align 2, 0
_0805DFD0: .4byte gDispIo
_0805DFD4:
	ldr r0, _0805DFF0 @ =0x000001C5
	cmp r1, r0
	bne _0805DFE8
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r4, #0
	bl Proc_Break
_0805DFE8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805DFF0: .4byte 0x000001C5

	thumb_func_start sub_0805DFF4
sub_0805DFF4: @ 0x0805DFF4
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0805E030 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805E034 @ =0x08C124E4
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _0805E038 @ =0x081EEA34
	str r1, [r0, #0x48]
	ldr r1, _0805E03C @ =0x08C124FC
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r0, _0805E040 @ =0x0826F96C
	movs r1, #0x80
	lsls r1, r1, #3
	bl SpellFx_RegisterBgGfx
	bl SpellFx_SetSomeColorEffect
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805E030: .4byte 0x0201774C
_0805E034: .4byte 0x08C124E4
_0805E038: .4byte 0x081EEA34
_0805E03C: .4byte 0x08C124FC
_0805E040: .4byte 0x0826F96C

	thumb_func_start sub_0805E044
sub_0805E044: @ 0x0805E044
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r6, r0, #0
	adds r0, r4, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r5, r0, #0x10
	cmp r5, #0
	blt _0805E09C
	ldr r1, [r4, #0x4c]
	ldr r2, [r4, #0x50]
	lsls r0, r5, #2
	adds r1, r0, r1
	ldr r1, [r1]
	adds r0, r0, r2
	ldr r2, [r0]
	adds r0, r6, #0
	bl SpellFx_WriteBgMap
	ldr r0, _0805E094 @ =0x081EEA46
	lsls r1, r5, #1
	adds r0, r1, r0
	ldrh r0, [r0]
	ldr r2, _0805E098 @ =0x081EEA4E
	adds r1, r1, r2
	ldrh r2, [r1]
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #0
	bl PlaySFX
	b _0805E0BA
	.align 2, 0
_0805E094: .4byte 0x081EEA46
_0805E098: .4byte 0x081EEA4E
_0805E09C:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r5, r0
	bne _0805E0BA
	bl SpellFx_ClearBG1
	ldr r1, _0805E0C0 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_0805E0BA:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805E0C0: .4byte 0x0201774C

	thumb_func_start sub_0805E0C4
sub_0805E0C4: @ 0x0805E0C4
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _0805E0F0 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805E0F4 @ =0x08C1250C
	movs r1, #3
	bl Proc_Start
	adds r1, r0, #0
	str r4, [r1, #0x5c]
	movs r0, #0
	strh r0, [r1, #0x2c]
	str r0, [r1, #0x44]
	ldr r0, _0805E0F8 @ =0x081EEA56
	str r0, [r1, #0x48]
	cmp r5, #0
	bne _0805E100
	ldr r0, _0805E0FC @ =0x08273048
	b _0805E102
	.align 2, 0
_0805E0F0: .4byte 0x0201774C
_0805E0F4: .4byte 0x08C1250C
_0805E0F8: .4byte 0x081EEA56
_0805E0FC: .4byte 0x08273048
_0805E100:
	ldr r0, _0805E10C @ =0x08273248
_0805E102:
	str r0, [r1, #0x4c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805E10C: .4byte 0x08273248

	thumb_func_start sub_0805E110
sub_0805E110: @ 0x0805E110
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _0805E136
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	b _0805E14C
_0805E136:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0805E14C
	ldr r1, _0805E154 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0805E14C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805E154: .4byte 0x0201774C

	thumb_func_start sub_0805E158
sub_0805E158: @ 0x0805E158
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	ldr r1, _0805E214 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805E218 @ =0x08C1252C
	movs r1, #3
	bl Proc_Start
	str r5, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _0805E21C @ =0x081EEB58
	str r1, [r0, #0x48]
	ldr r1, _0805E220 @ =0x08C12544
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r0, _0805E224 @ =0x082708D0
	movs r1, #0xa8
	lsls r1, r1, #5
	bl SpellFx_RegisterBgGfx
	ldr r6, _0805E228 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r6, #0xc]
	ands r0, r2
	strb r0, [r6, #0xc]
	adds r0, r1, #0
	ldrb r2, [r6, #0x14]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r6, #0x14]
	ldrb r0, [r6, #0x10]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r6, #0x10]
	movs r0, #3
	ldrb r1, [r6, #0x18]
	orrs r0, r1
	strb r0, [r6, #0x18]
	bl sub_08050F48
	ldr r2, _0805E22C @ =0x0000F3FF
	mov r8, r2
	mov r0, r8
	ldrh r1, [r5, #8]
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #3
	adds r7, r2, #0
	orrs r0, r7
	strh r0, [r5, #8]
	ldr r4, _0805E230 @ =0x02000010
	adds r0, r5, #0
	bl GetAISSubjectId
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r1, [r0]
	cmp r1, #0
	beq _0805E1EC
	mov r0, r8
	ldrh r2, [r1, #8]
	ands r0, r2
	orrs r0, r7
	strh r0, [r1, #8]
_0805E1EC:
	bl SpellFx_SetSomeColorEffect
	ldr r0, _0805E234 @ =0x0000FFE0
	ldrh r1, [r6, #0x3c]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	ldr r1, _0805E238 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r6, #0x3c]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805E214: .4byte 0x0201774C
_0805E218: .4byte 0x08C1252C
_0805E21C: .4byte 0x081EEB58
_0805E220: .4byte 0x08C12544
_0805E224: .4byte 0x082708D0
_0805E228: .4byte gDispIo
_0805E22C: .4byte 0x0000F3FF
_0805E230: .4byte 0x02000010
_0805E234: .4byte 0x0000FFE0
_0805E238: .4byte 0x0000E0FF

	thumb_func_start sub_0805E23C
sub_0805E23C: @ 0x0805E23C
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r6, [r5, #0x5c]
	adds r0, r6, #0
	bl GetCoreAIStruct
	adds r7, r0, #0
	ldr r4, _0805E298 @ =0x02000010
	adds r0, r6, #0
	bl GetAISSubjectId
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r4, [r0]
	cmp r4, #0
	beq _0805E26C
	ldr r0, _0805E29C @ =0x0000F3FF
	ldrh r1, [r4, #8]
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r4, #8]
_0805E26C:
	adds r0, r5, #0
	adds r0, #0x2c
	adds r1, r5, #0
	adds r1, #0x44
	ldr r2, [r5, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #0
	blt _0805E2A0
	ldr r1, [r5, #0x4c]
	ldr r2, [r5, #0x50]
	lsls r0, r3, #2
	adds r1, r0, r1
	ldr r1, [r1]
	adds r0, r0, r2
	ldr r2, [r0]
	adds r0, r7, #0
	bl SpellFx_WriteBgMap
	b _0805E30A
	.align 2, 0
_0805E298: .4byte 0x02000010
_0805E29C: .4byte 0x0000F3FF
_0805E2A0:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r3, r0
	bne _0805E30A
	bl SpellFx_ClearBG1
	ldr r1, _0805E310 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	ldr r3, _0805E314 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	ldr r2, _0805E318 @ =0x0000F3FF
	adds r0, r2, #0
	ldrh r3, [r6, #8]
	ands r0, r3
	movs r3, #0x80
	lsls r3, r3, #4
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r6, #8]
	cmp r4, #0
	beq _0805E300
	adds r0, r2, #0
	ldrh r2, [r4, #8]
	ands r0, r2
	orrs r0, r1
	strh r0, [r4, #8]
_0805E300:
	bl SpellFx_ClearColorEffects
	adds r0, r5, #0
	bl Proc_Break
_0805E30A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805E310: .4byte 0x0201774C
_0805E314: .4byte gDispIo
_0805E318: .4byte 0x0000F3FF

	thumb_func_start sub_0805E31C
sub_0805E31C: @ 0x0805E31C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _0805E348 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805E34C @ =0x08C12548
	movs r1, #3
	bl Proc_Start
	adds r1, r0, #0
	str r4, [r1, #0x5c]
	movs r0, #0
	strh r0, [r1, #0x2c]
	str r0, [r1, #0x44]
	ldr r0, _0805E350 @ =0x081EEB5E
	str r0, [r1, #0x48]
	cmp r5, #0
	bne _0805E358
	ldr r0, _0805E354 @ =0x0827045C
	b _0805E35A
	.align 2, 0
_0805E348: .4byte 0x0201774C
_0805E34C: .4byte 0x08C12548
_0805E350: .4byte 0x081EEB5E
_0805E354: .4byte 0x0827045C
_0805E358:
	ldr r0, _0805E364 @ =0x08273448
_0805E35A:
	str r0, [r1, #0x4c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805E364: .4byte 0x08273448

	thumb_func_start sub_0805E368
sub_0805E368: @ 0x0805E368
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _0805E38E
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	b _0805E3A4
_0805E38E:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0805E3A4
	ldr r1, _0805E3AC @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0805E3A4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805E3AC: .4byte 0x0201774C

	thumb_func_start sub_0805E3B0
sub_0805E3B0: @ 0x0805E3B0
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _0805E3E8 @ =0x08C12568
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805E3E8: .4byte 0x08C12568

	thumb_func_start sub_0805E3EC
sub_0805E3EC: @ 0x0805E3EC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r6, r0, #0
	bl GetSpellAnimationStartFrame
	adds r5, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r1, #0
	mov r8, r1
	movs r7, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805E422
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
_0805E422:
	movs r2, #0x2c
	ldrsh r1, [r4, r2]
	adds r0, r5, #1
	cmp r1, r0
	bne _0805E498
	adds r0, r6, #0
	bl sub_0805E510
	movs r5, #8
	str r5, [sp]
	str r7, [sp, #4]
	adds r0, r6, #0
	movs r1, #0x28
	movs r2, #0x1e
	movs r3, #0x10
	bl sub_080566F0
	movs r4, #0x10
	str r4, [sp]
	str r7, [sp, #4]
	adds r0, r6, #0
	movs r1, #0x47
	movs r2, #0x1e
	movs r3, #8
	bl sub_080566F0
	str r5, [sp]
	str r7, [sp, #4]
	adds r0, r6, #0
	movs r1, #0x66
	movs r2, #0x1e
	movs r3, #0x10
	bl sub_080566F0
	str r4, [sp]
	str r7, [sp, #4]
	adds r0, r6, #0
	movs r1, #0x85
	movs r2, #0x1e
	movs r3, #8
	bl sub_080566F0
	str r7, [sp]
	str r7, [sp, #4]
	adds r0, r6, #0
	movs r1, #0xa4
	movs r2, #0x3c
	movs r3, #0x10
	bl sub_080566F0
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #2
	ldrsh r2, [r6, r0]
	movs r0, #0xfd
	movs r3, #1
	bl PlaySFX
	b _0805E504
_0805E498:
	adds r0, r5, #0
	adds r0, #0x50
	cmp r1, r0
	bne _0805E4A8
	adds r0, r6, #0
	bl sub_0805E5C8
	b _0805E504
_0805E4A8:
	adds r0, r5, #0
	adds r0, #0xa4
	cmp r1, r0
	bne _0805E4BE
	adds r0, r6, #0
	movs r1, #1
	movs r2, #5
	movs r3, #0
	bl sub_0804FD74
	b _0805E504
_0805E4BE:
	adds r0, r5, #0
	adds r0, #0xc8
	cmp r1, r0
	bne _0805E4E4
	movs r0, #9
	ldrh r1, [r6, #0x10]
	orrs r0, r1
	strh r0, [r6, #0x10]
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r1, [r0]
	adds r0, r6, #0
	bl sub_08050BBC
	adds r0, r6, #0
	movs r1, #0
	bl sub_0804FFEC
	b _0805E504
_0805E4E4:
	movs r2, #0x96
	lsls r2, r2, #1
	adds r0, r5, r2
	cmp r1, r0
	bne _0805E504
	movs r0, #2
	ldrh r1, [r6, #0x10]
	orrs r0, r1
	strh r0, [r6, #0x10]
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r4, #0
	bl Proc_Break
_0805E504:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0805E510
sub_0805E510: @ 0x0805E510
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0805E54C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805E550 @ =0x08C12580
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _0805E554 @ =0x081EEC3C
	str r1, [r0, #0x48]
	ldr r1, _0805E558 @ =0x08C12598
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r1, _0805E55C @ =0x08C125CC
	str r1, [r0, #0x54]
	ldr r0, _0805E560 @ =0x08275ECC
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_SetSomeColorEffect
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805E54C: .4byte 0x0201774C
_0805E550: .4byte 0x08C12580
_0805E554: .4byte 0x081EEC3C
_0805E558: .4byte 0x08C12598
_0805E55C: .4byte 0x08C125CC
_0805E560: .4byte 0x08275ECC

	thumb_func_start sub_0805E564
sub_0805E564: @ 0x0805E564
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #0
	blt _0805E5A0
	ldr r1, [r4, #0x4c]
	ldr r2, [r4, #0x50]
	ldr r5, [r4, #0x54]
	ldr r0, [r4, #0x5c]
	lsls r4, r3, #2
	adds r1, r4, r1
	ldr r1, [r1]
	adds r2, r4, r2
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	adds r4, r4, r5
	ldr r0, [r4]
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	b _0805E5BE
_0805E5A0:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r3, r0
	bne _0805E5BE
	bl SpellFx_ClearBG1
	ldr r1, _0805E5C4 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_0805E5BE:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805E5C4: .4byte 0x0201774C

	thumb_func_start sub_0805E5C8
sub_0805E5C8: @ 0x0805E5C8
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r1, _0805E604 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805E608 @ =0x08C12600
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	ldr r3, _0805E60C @ =0x08C33390
	str r3, [sp]
	adds r0, r4, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	adds r6, r0, #0
	str r6, [r5, #0x60]
	adds r0, r4, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _0805E610
	ldrh r0, [r6, #2]
	subs r0, #8
	b _0805E614
	.align 2, 0
_0805E604: .4byte 0x0201774C
_0805E608: .4byte 0x08C12600
_0805E60C: .4byte 0x08C33390
_0805E610:
	ldrh r0, [r6, #2]
	adds r0, #8
_0805E614:
	strh r0, [r6, #2]
	ldrh r0, [r6, #4]
	subs r0, #8
	strh r0, [r6, #4]
	ldr r0, _0805E638 @ =0x0827BE0C
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805E63C @ =0x0827BC24
	movs r1, #0x80
	lsls r1, r1, #4
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805E638: .4byte 0x0827BE0C
_0805E63C: .4byte 0x0827BC24

	thumb_func_start sub_0805E640
sub_0805E640: @ 0x0805E640
	ldr r1, _0805E64C @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_0805E64C: .4byte 0x0201774C

	thumb_func_start sub_0805E650
sub_0805E650: @ 0x0805E650
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _0805E688 @ =0x08C12620
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805E688: .4byte 0x08C12620

	thumb_func_start sub_0805E68C
sub_0805E68C: @ 0x0805E68C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	bl GetSpellAnimationStartFrame
	adds r6, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r1, #0
	mov r8, r1
	movs r7, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805E6D0
	ldr r0, [r4, #0x5c]
	bl sub_0805E878
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xfa
	movs r3, #1
	bl PlaySFX
_0805E6D0:
	ldrh r0, [r4, #0x2c]
	cmp r0, #0x29
	bne _0805E6E2
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
	b _0805E786
_0805E6E2:
	movs r3, #0x2c
	ldrsh r1, [r4, r3]
	adds r0, r6, #0
	adds r0, #0x44
	cmp r1, r0
	bne _0805E716
	ldr r0, [r4, #0x5c]
	bl sub_0805E794
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #2
	ldrsh r2, [r5, r0]
	movs r0, #0xfb
	movs r3, #1
	bl PlaySFX
	ldr r0, [r4, #0x5c]
	str r7, [sp]
	str r7, [sp, #4]
	movs r1, #0x42
	movs r2, #0x14
	movs r3, #0x10
	bl sub_080566F0
	b _0805E786
_0805E716:
	adds r0, r6, #0
	adds r0, #0x86
	cmp r1, r0
	bne _0805E768
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r0, #0xfc
	movs r3, #1
	bl PlaySFX
	bl sub_08067EA0
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r6, r4, #0
	adds r6, #0x29
	ldrb r1, [r6]
	adds r0, r5, #0
	bl sub_08050BBC
	ldr r0, [r4, #0x5c]
	movs r1, #0xa
	bl sub_0804F7B8
	ldrb r0, [r6]
	cmp r0, #0
	bne _0805E786
	adds r0, r5, #0
	bl sub_0805001C
	cmp r0, #0
	bne _0805E786
	adds r0, r5, #0
	movs r1, #3
	bl sub_0804FFEC
	b _0805E786
_0805E768:
	adds r0, r6, #0
	adds r0, #0x9e
	cmp r1, r0
	bne _0805E786
	movs r0, #2
	ldrh r3, [r5, #0x10]
	orrs r0, r3
	strh r0, [r5, #0x10]
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r4, #0
	bl Proc_Break
_0805E786:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805E794
sub_0805E794: @ 0x0805E794
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _0805E7F4 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805E7F8 @ =0x08C12638
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _0805E7FC @ =0x081EEC72
	str r0, [r5, #0x48]
	ldr r0, _0805E800 @ =0x08C12650
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _0805E804 @ =0x08278A10
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	ldr r0, _0805E808 @ =0x08276B04
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	bl SpellFx_SetSomeColorEffect
	ldr r0, _0805E80C @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0805E81A
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _0805E810
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
	b _0805E81A
	.align 2, 0
_0805E7F4: .4byte 0x0201774C
_0805E7F8: .4byte 0x08C12638
_0805E7FC: .4byte 0x081EEC72
_0805E800: .4byte 0x08C12650
_0805E804: .4byte 0x08278A10
_0805E808: .4byte 0x08276B04
_0805E80C: .4byte gEkrDistanceType
_0805E810:
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
_0805E81A:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0805E820
sub_0805E820: @ 0x0805E820
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _0805E84E
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	b _0805E86C
_0805E84E:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _0805E86C
	bl SpellFx_ClearBG1
	ldr r1, _0805E874 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_0805E86C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805E874: .4byte 0x0201774C

	thumb_func_start sub_0805E878
sub_0805E878: @ 0x0805E878
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0805E8BC @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805E8C0 @ =0x08C12698
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	ldr r3, _0805E8C4 @ =0x08C3365C
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	ldr r0, _0805E8C8 @ =0x08278A10
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805E8CC @ =0x082784F0
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805E8BC: .4byte 0x0201774C
_0805E8C0: .4byte 0x08C12698
_0805E8C4: .4byte 0x08C3365C
_0805E8C8: .4byte 0x08278A10
_0805E8CC: .4byte 0x082784F0

	thumb_func_start sub_0805E8D0
sub_0805E8D0: @ 0x0805E8D0
	push {lr}
	ldr r0, [r0, #0x60]
	bl AnimDelete
	ldr r1, _0805E8E4 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0805E8E4: .4byte 0x0201774C

	thumb_func_start sub_0805E8E8
sub_0805E8E8: @ 0x0805E8E8
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _0805E920 @ =0x08C126B8
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805E920: .4byte 0x08C126B8

	thumb_func_start sub_0805E924
sub_0805E924: @ 0x0805E924
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	bl GetSpellAnimationStartFrame
	adds r6, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r1, #0
	mov r8, r1
	movs r7, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805E968
	ldr r0, [r4, #0x5c]
	bl sub_0805EB08
	ldr r0, _0805E9BC @ =0x0000011B
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl PlaySFX
_0805E968:
	ldrh r0, [r4, #0x2c]
	cmp r0, #0x64
	bne _0805E978
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
_0805E978:
	movs r2, #0x2c
	ldrsh r1, [r4, r2]
	adds r0, r6, #0
	adds r0, #0x82
	cmp r1, r0
	bne _0805E9C0
	adds r0, r5, #0
	bl sub_0805EB60
	adds r0, r5, #0
	bl sub_0805EBB4
	ldr r0, [r4, #0x5c]
	bl sub_0805EA24
	movs r0, #0x10
	str r0, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0x14
	movs r3, #0
	bl sub_080566F0
	str r7, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0xe6
	movs r2, #0x14
	movs r3, #0x10
	bl sub_080566F0
	b _0805EA16
	.align 2, 0
_0805E9BC: .4byte 0x0000011B
_0805E9C0:
	movs r3, #0xa5
	lsls r3, r3, #1
	adds r0, r6, r3
	cmp r1, r0
	bne _0805E9F6
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl sub_08050BBC
	ldrb r0, [r4]
	cmp r0, #0
	bne _0805EA16
	adds r0, r5, #0
	bl sub_0805001C
	cmp r0, #0
	bne _0805EA16
	adds r0, r5, #0
	movs r1, #2
	bl sub_0804FFEC
	b _0805EA16
_0805E9F6:
	movs r2, #0xb9
	lsls r2, r2, #1
	adds r0, r6, r2
	cmp r1, r0
	bne _0805EA16
	movs r0, #2
	ldrh r3, [r5, #0x10]
	orrs r0, r3
	strh r0, [r5, #0x10]
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r4, #0
	bl Proc_Break
_0805EA16:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805EA24
sub_0805EA24: @ 0x0805EA24
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _0805EA84 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805EA88 @ =0x08C126D0
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _0805EA8C @ =0x081EECBC
	str r0, [r5, #0x48]
	ldr r0, _0805EA90 @ =0x08C126E8
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _0805EA94 @ =0x0827AE44
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	ldr r0, _0805EA98 @ =0x08279F78
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	bl SpellFx_SetSomeColorEffect
	ldr r0, _0805EA9C @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0805EAAA
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _0805EAA0
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
	b _0805EAAA
	.align 2, 0
_0805EA84: .4byte 0x0201774C
_0805EA88: .4byte 0x08C126D0
_0805EA8C: .4byte 0x081EECBC
_0805EA90: .4byte 0x08C126E8
_0805EA94: .4byte 0x0827AE44
_0805EA98: .4byte 0x08279F78
_0805EA9C: .4byte gEkrDistanceType
_0805EAA0:
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
_0805EAAA:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0805EAB0
sub_0805EAB0: @ 0x0805EAB0
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _0805EADE
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	b _0805EAFC
_0805EADE:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _0805EAFC
	bl SpellFx_ClearBG1
	ldr r1, _0805EB04 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_0805EAFC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805EB04: .4byte 0x0201774C

	thumb_func_start sub_0805EB08
sub_0805EB08: @ 0x0805EB08
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0805EB4C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805EB50 @ =0x08C12728
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	ldr r3, _0805EB54 @ =0x08C3B52C
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	ldr r0, _0805EB58 @ =0x0827BE0C
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805EB5C @ =0x0827BC24
	movs r1, #0x80
	lsls r1, r1, #4
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805EB4C: .4byte 0x0201774C
_0805EB50: .4byte 0x08C12728
_0805EB54: .4byte 0x08C3B52C
_0805EB58: .4byte 0x0827BE0C
_0805EB5C: .4byte 0x0827BC24

	thumb_func_start sub_0805EB60
sub_0805EB60: @ 0x0805EB60
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0805EB98 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805EB9C @ =0x08C12748
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	ldr r3, _0805EBA0 @ =0x08C3B3AC
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	ldrh r1, [r0, #4]
	subs r1, #8
	strh r1, [r0, #4]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805EB98: .4byte 0x0201774C
_0805EB9C: .4byte 0x08C12748
_0805EBA0: .4byte 0x08C3B3AC

	thumb_func_start sub_0805EBA4
sub_0805EBA4: @ 0x0805EBA4
	ldr r1, _0805EBB0 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_0805EBB0: .4byte 0x0201774C

	thumb_func_start sub_0805EBB4
sub_0805EBB4: @ 0x0805EBB4
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0805EBD0 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805EBD4 @ =0x08C12768
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805EBD0: .4byte 0x0201774C
_0805EBD4: .4byte 0x08C12768

	thumb_func_start sub_0805EBD8
sub_0805EBD8: @ 0x0805EBD8
	push {r4, lr}
	movs r3, #0x8e
	lsls r3, r3, #1
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r0, #0x5c]
	movs r4, #2
	ldrsh r2, [r0, r4]
	adds r0, r3, #0
	movs r3, #1
	bl PlaySFX
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805EBF8
sub_0805EBF8: @ 0x0805EBF8
	ldr r1, _0805EC04 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_0805EC04: .4byte 0x0201774C

	thumb_func_start sub_0805EC08
sub_0805EC08: @ 0x0805EC08
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _0805EC40 @ =0x08C127B0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805EC40: .4byte 0x08C127B0

	thumb_func_start sub_0805EC44
sub_0805EC44: @ 0x0805EC44
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r6, r0, #0
	bl GetSpellAnimationStartFrame
	adds r5, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r1, #0
	mov r8, r1
	movs r7, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805EC7A
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
_0805EC7A:
	movs r2, #0x2c
	ldrsh r1, [r4, r2]
	adds r0, r5, #1
	cmp r1, r0
	bne _0805ECF4
	adds r0, r6, #0
	bl sub_0805ED64
	movs r5, #8
	str r5, [sp]
	str r7, [sp, #4]
	adds r0, r6, #0
	movs r1, #0x28
	movs r2, #0x1e
	movs r3, #0x10
	bl sub_080566F0
	movs r4, #0x10
	str r4, [sp]
	str r7, [sp, #4]
	adds r0, r6, #0
	movs r1, #0x47
	movs r2, #0x1e
	movs r3, #8
	bl sub_080566F0
	str r5, [sp]
	str r7, [sp, #4]
	adds r0, r6, #0
	movs r1, #0x66
	movs r2, #0x1e
	movs r3, #0x10
	bl sub_080566F0
	str r4, [sp]
	str r7, [sp, #4]
	adds r0, r6, #0
	movs r1, #0x85
	movs r2, #0x1e
	movs r3, #8
	bl sub_080566F0
	str r7, [sp]
	str r7, [sp, #4]
	adds r0, r6, #0
	movs r1, #0xa4
	movs r2, #0x3c
	movs r3, #0x10
	bl sub_080566F0
	ldr r0, _0805ECF0 @ =0x00000103
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r6, r3]
	movs r3, #1
	bl PlaySFX
	b _0805ED58
	.align 2, 0
_0805ECF0: .4byte 0x00000103
_0805ECF4:
	adds r0, r5, #0
	adds r0, #0x50
	cmp r1, r0
	bne _0805ED04
	adds r0, r6, #0
	bl sub_0805EE1C
	b _0805ED58
_0805ED04:
	adds r0, r5, #0
	adds r0, #0xa4
	cmp r1, r0
	bne _0805ED1A
	adds r0, r6, #0
	movs r1, #1
	movs r2, #5
	movs r3, #0
	bl sub_0804FD74
	b _0805ED58
_0805ED1A:
	adds r0, r5, #0
	adds r0, #0xc8
	cmp r1, r0
	bne _0805ED38
	movs r0, #9
	ldrh r1, [r6, #0x10]
	orrs r0, r1
	strh r0, [r6, #0x10]
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r1, [r0]
	adds r0, r6, #0
	bl sub_08050BBC
	b _0805ED58
_0805ED38:
	movs r2, #0x96
	lsls r2, r2, #1
	adds r0, r5, r2
	cmp r1, r0
	bne _0805ED58
	movs r0, #2
	ldrh r3, [r6, #0x10]
	orrs r0, r3
	strh r0, [r6, #0x10]
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r4, #0
	bl Proc_Break
_0805ED58:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0805ED64
sub_0805ED64: @ 0x0805ED64
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0805EDA0 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805EDA4 @ =0x08C127C8
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _0805EDA8 @ =0x081EEDBE
	str r1, [r0, #0x48]
	ldr r1, _0805EDAC @ =0x08C127E0
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r1, _0805EDB0 @ =0x08C12814
	str r1, [r0, #0x54]
	ldr r0, _0805EDB4 @ =0x08278A30
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_SetSomeColorEffect
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805EDA0: .4byte 0x0201774C
_0805EDA4: .4byte 0x08C127C8
_0805EDA8: .4byte 0x081EEDBE
_0805EDAC: .4byte 0x08C127E0
_0805EDB0: .4byte 0x08C12814
_0805EDB4: .4byte 0x08278A30

	thumb_func_start sub_0805EDB8
sub_0805EDB8: @ 0x0805EDB8
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #0
	blt _0805EDF4
	ldr r1, [r4, #0x4c]
	ldr r2, [r4, #0x50]
	ldr r5, [r4, #0x54]
	ldr r0, [r4, #0x5c]
	lsls r4, r3, #2
	adds r1, r4, r1
	ldr r1, [r1]
	adds r2, r4, r2
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	adds r4, r4, r5
	ldr r0, [r4]
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	b _0805EE12
_0805EDF4:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r3, r0
	bne _0805EE12
	bl SpellFx_ClearBG1
	ldr r1, _0805EE18 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_0805EE12:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805EE18: .4byte 0x0201774C

	thumb_func_start sub_0805EE1C
sub_0805EE1C: @ 0x0805EE1C
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0805EE60 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805EE64 @ =0x08C12848
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	ldr r3, _0805EE68 @ =0x08C36340
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	ldr r0, _0805EE6C @ =0x0827BE2C
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805EE70 @ =0x0827BC24
	movs r1, #0x80
	lsls r1, r1, #4
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805EE60: .4byte 0x0201774C
_0805EE64: .4byte 0x08C12848
_0805EE68: .4byte 0x08C36340
_0805EE6C: .4byte 0x0827BE2C
_0805EE70: .4byte 0x0827BC24

	thumb_func_start sub_0805EE74
sub_0805EE74: @ 0x0805EE74
	ldr r1, _0805EE80 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_0805EE80: .4byte 0x0201774C

	thumb_func_start sub_0805EE84
sub_0805EE84: @ 0x0805EE84
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _0805EEBC @ =0x08C12868
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805EEBC: .4byte 0x08C12868

	thumb_func_start sub_0805EEC0
sub_0805EEC0: @ 0x0805EEC0
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	bl GetSpellAnimationStartFrame
	adds r6, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r7, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805EEEE
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
_0805EEEE:
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	adds r0, r6, #1
	cmp r1, r0
	bne _0805EF3C
	adds r0, r5, #0
	bl sub_0805F1C4
	adds r0, r5, #0
	movs r1, #0x4a
	bl sub_0805EFA0
	adds r0, r5, #0
	movs r1, #0x4a
	bl sub_0805F124
	movs r4, #0x80
	lsls r4, r4, #1
	movs r0, #1
	str r0, [sp]
	adds r0, r5, #0
	movs r1, #0x4a
	movs r2, #0xa
	adds r3, r4, #0
	bl sub_080560A4
	adds r0, r5, #0
	movs r1, #0x4a
	movs r2, #0
	bl sub_080565FC
	movs r1, #2
	ldrsh r2, [r5, r1]
	movs r0, #0xf9
	adds r1, r4, #0
	movs r3, #1
	bl PlaySFX
	b _0805EF96
_0805EF3C:
	adds r0, r6, #0
	adds r0, #0x4a
	cmp r1, r0
	bne _0805EF78
	adds r0, r5, #0
	movs r1, #5
	bl sub_0804F7B8
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl sub_08050BBC
	ldrb r0, [r4]
	cmp r0, #0
	bne _0805EF96
	adds r0, r5, #0
	bl sub_0805001C
	cmp r0, #0
	bne _0805EF96
	adds r0, r5, #0
	movs r1, #4
	bl sub_0804FFEC
	b _0805EF96
_0805EF78:
	adds r0, r6, #0
	adds r0, #0x5a
	cmp r1, r0
	bne _0805EF96
	movs r0, #2
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r4, #0
	bl Proc_Break
_0805EF96:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805EFA0
sub_0805EFA0: @ 0x0805EFA0
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r1, _0805F098 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805F09C @ =0x08C12880
	movs r1, #3
	bl Proc_Start
	str r5, [r0, #0x5c]
	movs r6, #0
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r4, [r0, #0x2e]
	ldr r0, _0805F0A0 @ =0x0827BE4C
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	ldr r0, _0805F0A4 @ =0x08279658
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, _0805F0A8 @ =0x08279758
	ldr r1, _0805F0AC @ =gBg1Tm
	movs r2, #1
	str r2, [sp]
	adds r2, #0xff
	str r2, [sp, #4]
	movs r2, #0x20
	movs r3, #0x20
	bl sub_080672B8
	movs r0, #2
	bl EnableBgSync
	bl SpellFx_SetSomeColorEffect
	ldr r0, _0805F0B0 @ =gDispIo
	mov ip, r0
	mov r2, ip
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	mov r1, ip
	adds r1, #0x44
	movs r0, #0xe
	strb r0, [r1]
	adds r1, #1
	movs r4, #8
	movs r0, #8
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x46
	strb r6, [r0]
	mov r6, ip
	adds r6, #0x37
	movs r3, #0x20
	ldrb r1, [r6]
	orrs r1, r3
	movs r0, #0x21
	rsbs r0, r0, #0
	mov r2, ip
	ldrb r2, [r2, #1]
	ands r0, r2
	movs r2, #0x41
	rsbs r2, r2, #0
	ands r0, r2
	movs r2, #0x80
	orrs r0, r2
	mov r7, ip
	strb r0, [r7, #1]
	movs r0, #2
	rsbs r0, r0, #0
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	movs r0, #4
	orrs r1, r0
	orrs r1, r4
	movs r0, #0x10
	orrs r1, r0
	strb r1, [r6]
	ldr r0, _0805F0B4 @ =0x0000FFE0
	ldrh r1, [r7, #0x3c]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	ldr r1, _0805F0B8 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xe0
	lsls r2, r2, #5
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r7, #0x3c]
	mov r0, ip
	adds r0, #0x3d
	ldrb r7, [r0]
	orrs r3, r7
	strb r3, [r0]
	ldr r0, [r5, #0x1c]
	movs r1, #0x80
	lsls r1, r1, #4
	orrs r0, r1
	str r0, [r5, #0x1c]
	ldr r0, _0805F0BC @ =0x0000F3FF
	ldrh r1, [r5, #8]
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r5, #8]
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805F098: .4byte 0x0201774C
_0805F09C: .4byte 0x08C12880
_0805F0A0: .4byte 0x0827BE4C
_0805F0A4: .4byte 0x08279658
_0805F0A8: .4byte 0x08279758
_0805F0AC: .4byte gBg1Tm
_0805F0B0: .4byte gDispIo
_0805F0B4: .4byte 0x0000FFE0
_0805F0B8: .4byte 0x0000E0FF
_0805F0BC: .4byte 0x0000F3FF

	thumb_func_start sub_0805F0C0
sub_0805F0C0: @ 0x0805F0C0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, [r4, #0x5c]
	ldr r1, _0805F114 @ =gDispIo
	ldrh r0, [r1, #0x22]
	subs r0, #1
	strh r0, [r1, #0x22]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _0805F10C
	bl SpellFx_ClearBG1
	bl SpellFx_ClearColorEffects
	ldr r0, [r5, #0x1c]
	ldr r1, _0805F118 @ =0xFFFFF7FF
	ands r0, r1
	str r0, [r5, #0x1c]
	ldr r0, _0805F11C @ =0x0000F3FF
	ldrh r1, [r5, #8]
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r5, #8]
	ldr r1, _0805F120 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0805F10C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805F114: .4byte gDispIo
_0805F118: .4byte 0xFFFFF7FF
_0805F11C: .4byte 0x0000F3FF
_0805F120: .4byte 0x0201774C

	thumb_func_start sub_0805F124
sub_0805F124: @ 0x0805F124
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _0805F148 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805F14C @ =0x08C12898
	movs r1, #4
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805F148: .4byte 0x0201774C
_0805F14C: .4byte 0x08C12898

	thumb_func_start sub_0805F150
sub_0805F150: @ 0x0805F150
	push {r4, lr}
	sub sp, #0x48
	adds r4, r0, #0
	ldr r2, [r4, #0x5c]
	mov r1, sp
	ldrh r0, [r2, #2]
	strh r0, [r1, #2]
	ldrh r0, [r2, #4]
	strh r0, [r1, #4]
	ldr r0, [r2, #0x3c]
	str r0, [sp, #0x3c]
	ldr r0, [r2, #0x1c]
	ldr r1, _0805F1AC @ =0xFFFFF7FF
	ands r0, r1
	str r0, [sp, #0x1c]
	mov r0, sp
	ldrh r1, [r2, #8]
	strh r1, [r0, #8]
	mov r2, sp
	ldr r0, _0805F1B0 @ =0x0000F3FF
	ands r0, r1
	strh r0, [r2, #8]
	movs r3, #0x80
	lsls r3, r3, #4
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2, #8]
	mov r0, sp
	bl AnimDisplay
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _0805F1A2
	adds r0, r4, #0
	bl Proc_Break
_0805F1A2:
	add sp, #0x48
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805F1AC: .4byte 0xFFFFF7FF
_0805F1B0: .4byte 0x0000F3FF

	thumb_func_start sub_0805F1B4
sub_0805F1B4: @ 0x0805F1B4
	ldr r1, _0805F1C0 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_0805F1C0: .4byte 0x0201774C

	thumb_func_start sub_0805F1C4
sub_0805F1C4: @ 0x0805F1C4
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0805F20C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805F210 @ =0x08C128B8
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	adds r0, r5, #0
	bl GetCoreAIStruct
	ldr r3, _0805F214 @ =0x08C10828
	ldr r0, [r4, #0x5c]
	str r3, [sp]
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	ldr r1, _0805F218 @ =0x0000F3FF
	ldrh r2, [r0, #8]
	ands r1, r2
	movs r3, #0x80
	lsls r3, r3, #3
	adds r2, r3, #0
	orrs r1, r2
	strh r1, [r0, #8]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805F20C: .4byte 0x0201774C
_0805F210: .4byte 0x08C128B8
_0805F214: .4byte 0x08C10828
_0805F218: .4byte 0x0000F3FF

	thumb_func_start sub_0805F21C
sub_0805F21C: @ 0x0805F21C
	push {lr}
	ldr r2, _0805F230 @ =0x0201774C
	ldr r1, [r2]
	subs r1, #1
	str r1, [r2]
	ldr r0, [r0, #0x60]
	bl AnimDelete
	pop {r0}
	bx r0
	.align 2, 0
_0805F230: .4byte 0x0201774C

	thumb_func_start sub_0805F234
sub_0805F234: @ 0x0805F234
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _0805F264 @ =0x08C3BAE0
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _0805F268 @ =0x0827C724
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805F26C @ =0x0827BE6C
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805F264: .4byte 0x08C3BAE0
_0805F268: .4byte 0x0827C724
_0805F26C: .4byte 0x0827BE6C

	thumb_func_start sub_0805F270
sub_0805F270: @ 0x0805F270
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _0805F2A0 @ =0x08C3BAF4
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _0805F2A4 @ =0x0827C724
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805F2A8 @ =0x0827BE6C
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805F2A0: .4byte 0x08C3BAF4
_0805F2A4: .4byte 0x0827C724
_0805F2A8: .4byte 0x0827BE6C

	thumb_func_start sub_0805F2AC
sub_0805F2AC: @ 0x0805F2AC
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _0805F2DC @ =0x08C3BB08
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _0805F2E0 @ =0x0827C724
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805F2E4 @ =0x0827BE6C
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805F2DC: .4byte 0x08C3BB08
_0805F2E0: .4byte 0x0827C724
_0805F2E4: .4byte 0x0827BE6C

	thumb_func_start sub_0805F2E8
sub_0805F2E8: @ 0x0805F2E8
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _0805F318 @ =0x08C3BB1C
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _0805F31C @ =0x0827C724
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805F320 @ =0x0827BE6C
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805F318: .4byte 0x08C3BB1C
_0805F31C: .4byte 0x0827C724
_0805F320: .4byte 0x0827BE6C

	thumb_func_start sub_0805F324
sub_0805F324: @ 0x0805F324
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _0805F354 @ =0x08C3BB30
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _0805F358 @ =0x0827C724
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805F35C @ =0x0827BE6C
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805F354: .4byte 0x08C3BB30
_0805F358: .4byte 0x0827C724
_0805F35C: .4byte 0x0827BE6C

	thumb_func_start sub_0805F360
sub_0805F360: @ 0x0805F360
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _0805F390 @ =0x08C3BEA4
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _0805F394 @ =0x0827C724
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805F398 @ =0x0827C304
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805F390: .4byte 0x08C3BEA4
_0805F394: .4byte 0x0827C724
_0805F398: .4byte 0x0827C304

	thumb_func_start sub_0805F39C
sub_0805F39C: @ 0x0805F39C
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _0805F3CC @ =0x08C3BEB0
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _0805F3D0 @ =0x0827C724
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805F3D4 @ =0x0827C304
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805F3CC: .4byte 0x08C3BEB0
_0805F3D0: .4byte 0x0827C724
_0805F3D4: .4byte 0x0827C304

	thumb_func_start sub_0805F3D8
sub_0805F3D8: @ 0x0805F3D8
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _0805F408 @ =0x08C3BEBC
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _0805F40C @ =0x0827C724
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805F410 @ =0x0827C304
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805F408: .4byte 0x08C3BEBC
_0805F40C: .4byte 0x0827C724
_0805F410: .4byte 0x0827C304

	thumb_func_start sub_0805F414
sub_0805F414: @ 0x0805F414
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _0805F444 @ =0x08C3BEC8
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _0805F448 @ =0x0827C724
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805F44C @ =0x0827C304
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805F444: .4byte 0x08C3BEC8
_0805F448: .4byte 0x0827C724
_0805F44C: .4byte 0x0827C304

	thumb_func_start sub_0805F450
sub_0805F450: @ 0x0805F450
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _0805F480 @ =0x08C3BED4
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _0805F484 @ =0x0827C724
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805F488 @ =0x0827C304
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805F480: .4byte 0x08C3BED4
_0805F484: .4byte 0x0827C724
_0805F488: .4byte 0x0827C304

	thumb_func_start sub_0805F48C
sub_0805F48C: @ 0x0805F48C
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _0805F4C4 @ =0x08C12970
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805F4C4: .4byte 0x08C12970

	thumb_func_start sub_0805F4C8
sub_0805F4C8: @ 0x0805F4C8
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x5c]
	bl GetCoreAIStruct
	adds r4, r0, #0
	bl GetSpellAnimationStartFrame
	adds r6, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	movs r7, #0
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805F4F4
	ldr r0, [r5, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
_0805F4F4:
	movs r0, #0x2c
	ldrsh r1, [r5, r0]
	adds r0, r6, #1
	cmp r1, r0
	bne _0805F524
	ldr r0, [r5, #0x5c]
	bl sub_0805F594
	adds r0, r4, #0
	bl sub_0805F648
	adds r0, r4, #0
	bl sub_0805F6A0
	movs r0, #0x81
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r4, r3]
	movs r3, #1
	bl PlaySFX
	b _0805F58E
_0805F524:
	adds r0, r6, #0
	adds r0, #0x28
	cmp r1, r0
	beq _0805F534
	adds r0, r6, #0
	adds r0, #0x50
	cmp r1, r0
	bne _0805F53C
_0805F534:
	adds r0, r4, #0
	bl sub_0805F6A0
	b _0805F58E
_0805F53C:
	adds r0, r6, #0
	adds r0, #0xb0
	cmp r1, r0
	bne _0805F552
	adds r0, r4, #0
	movs r1, #1
	movs r2, #5
	movs r3, #0
	bl sub_0804FD74
	b _0805F58E
_0805F552:
	adds r0, r6, #0
	adds r0, #0xe1
	cmp r1, r0
	bne _0805F570
	movs r0, #9
	ldrh r1, [r4, #0x10]
	orrs r0, r1
	strh r0, [r4, #0x10]
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r1, [r0]
	adds r0, r4, #0
	bl sub_08050BBC
	b _0805F58E
_0805F570:
	adds r0, r6, #0
	adds r0, #0xe6
	cmp r1, r0
	bne _0805F58E
	movs r0, #2
	ldrh r3, [r4, #0x10]
	orrs r0, r3
	strh r0, [r4, #0x10]
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r5, #0
	bl Proc_Break
_0805F58E:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0805F594
sub_0805F594: @ 0x0805F594
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0805F5D8 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805F5DC @ =0x08C12988
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _0805F5E0 @ =0x081EEDF4
	str r1, [r0, #0x48]
	ldr r1, _0805F5E4 @ =0x08C129A0
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r0, _0805F5E8 @ =0x0827D0F0
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	ldr r0, _0805F5EC @ =0x0827C864
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	bl SpellFx_SetSomeColorEffect
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805F5D8: .4byte 0x0201774C
_0805F5DC: .4byte 0x08C12988
_0805F5E0: .4byte 0x081EEDF4
_0805F5E4: .4byte 0x08C129A0
_0805F5E8: .4byte 0x0827D0F0
_0805F5EC: .4byte 0x0827C864

	thumb_func_start sub_0805F5F0
sub_0805F5F0: @ 0x0805F5F0
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _0805F61E
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	b _0805F63C
_0805F61E:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _0805F63C
	bl SpellFx_ClearBG1
	ldr r1, _0805F644 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_0805F63C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805F644: .4byte 0x0201774C

	thumb_func_start sub_0805F648
sub_0805F648: @ 0x0805F648
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0805F68C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805F690 @ =0x08C129B4
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	ldr r3, _0805F694 @ =0x08C3FF94
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	ldr r0, _0805F698 @ =0x0827D600
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805F69C @ =0x0827BC24
	movs r1, #0x80
	lsls r1, r1, #4
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805F68C: .4byte 0x0201774C
_0805F690: .4byte 0x08C129B4
_0805F694: .4byte 0x08C3FF94
_0805F698: .4byte 0x0827D600
_0805F69C: .4byte 0x0827BC24

	thumb_func_start sub_0805F6A0
sub_0805F6A0: @ 0x0805F6A0
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0805F6D4 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805F6D8 @ =0x08C129D4
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	ldr r3, _0805F6DC @ =0x08C400E4
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805F6D4: .4byte 0x0201774C
_0805F6D8: .4byte 0x08C129D4
_0805F6DC: .4byte 0x08C400E4

	thumb_func_start sub_0805F6E0
sub_0805F6E0: @ 0x0805F6E0
	push {lr}
	ldr r0, [r0, #0x60]
	bl AnimDelete
	ldr r1, _0805F6F4 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0805F6F4: .4byte 0x0201774C

	thumb_func_start sub_0805F6F8
sub_0805F6F8: @ 0x0805F6F8
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _0805F730 @ =0x08C129F4
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805F730: .4byte 0x08C129F4

	thumb_func_start sub_0805F734
sub_0805F734: @ 0x0805F734
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	bl GetSpellAnimationStartFrame
	adds r6, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805F75E
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
_0805F75E:
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	adds r0, r6, #1
	cmp r1, r0
	bne _0805F772
	adds r0, r5, #0
	movs r1, #0xa
	bl sub_0804F7B8
	b _0805F800
_0805F772:
	adds r0, r6, #0
	adds r0, #0xb
	cmp r1, r0
	bne _0805F794
	adds r0, r5, #0
	bl sub_0805F8C4
	movs r0, #0xaf
	lsls r0, r0, #2
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl PlaySFX
	b _0805F800
_0805F794:
	adds r0, r6, #0
	adds r0, #0x17
	cmp r1, r0
	bne _0805F7AC
	adds r0, r5, #0
	movs r1, #5
	bl sub_0804F7B8
	adds r0, r5, #0
	bl sub_0805FA70
	b _0805F800
_0805F7AC:
	adds r0, r6, #0
	adds r0, #0x1d
	cmp r1, r0
	bne _0805F7C2
	adds r0, r5, #0
	bl sub_0805F808
	adds r0, r5, #0
	bl sub_0805F9E4
	b _0805F800
_0805F7C2:
	adds r0, r6, #0
	adds r0, #0x1e
	cmp r1, r0
	bne _0805F7EA
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl StartBattleAnimHitEffectsDefault
	ldrb r0, [r4]
	cmp r0, #0
	bne _0805F800
	adds r0, r5, #0
	bl sub_08068500
	b _0805F800
_0805F7EA:
	adds r0, r6, #0
	adds r0, #0x23
	cmp r1, r0
	bne _0805F800
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r4, #0
	bl Proc_Break
_0805F800:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805F808
sub_0805F808: @ 0x0805F808
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0805F848 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805F84C @ =0x08C12A0C
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _0805F850 @ =0x081EEEBE
	str r1, [r0, #0x48]
	ldr r1, _0805F854 @ =0x08C12A24
	str r1, [r0, #0x4c]
	ldr r1, _0805F858 @ =0x08C12A28
	str r1, [r0, #0x50]
	ldr r1, _0805F85C @ =0x08C12A2C
	str r1, [r0, #0x54]
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	bl SpellFx_SetSomeColorEffect
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805F848: .4byte 0x0201774C
_0805F84C: .4byte 0x08C12A0C
_0805F850: .4byte 0x081EEEBE
_0805F854: .4byte 0x08C12A24
_0805F858: .4byte 0x08C12A28
_0805F85C: .4byte 0x08C12A2C

	thumb_func_start sub_0805F860
sub_0805F860: @ 0x0805F860
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	blt _0805F89C
	ldr r5, [r7, #0x4c]
	ldr r6, [r7, #0x50]
	ldr r0, [r7, #0x54]
	lsls r4, r4, #2
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, [r7, #0x5c]
	adds r5, r4, r5
	ldr r1, [r5]
	adds r4, r4, r6
	ldr r2, [r4]
	bl SpellFx_WriteBgMap
	b _0805F8BA
_0805F89C:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _0805F8BA
	bl SpellFx_ClearBG1
	ldr r1, _0805F8C0 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r7, #0
	bl Proc_Break
_0805F8BA:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805F8C0: .4byte 0x0201774C

	thumb_func_start sub_0805F8C4
sub_0805F8C4: @ 0x0805F8C4
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _0805F920 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805F924 @ =0x08C12A30
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _0805F928 @ =0x081EEEC4
	str r0, [r5, #0x48]
	ldr r0, _0805F92C @ =0x08C12A48
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _0805F930 @ =0x082965C8
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	ldr r0, _0805F934 @ =0x082962EC
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, _0805F938 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0805F946
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _0805F93C
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _0805F946
	.align 2, 0
_0805F920: .4byte 0x0201774C
_0805F924: .4byte 0x08C12A30
_0805F928: .4byte 0x081EEEC4
_0805F92C: .4byte 0x08C12A48
_0805F930: .4byte 0x082965C8
_0805F934: .4byte 0x082962EC
_0805F938: .4byte gEkrDistanceType
_0805F93C:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_0805F946:
	bl SpellFx_SetSomeColorEffect
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0805F950
sub_0805F950: @ 0x0805F950
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _0805F9B8
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	ldr r0, _0805F998 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0805F9D6
	ldr r0, [r4, #0x5c]
	bl GetAISSubjectId
	adds r1, r0, #0
	cmp r1, #0
	bne _0805F9A0
	ldr r0, _0805F99C @ =gBg1Tm
	b _0805F9A4
	.align 2, 0
_0805F998: .4byte gEkrDistanceType
_0805F99C: .4byte gBg1Tm
_0805F9A0:
	ldr r0, _0805F9B4 @ =0x0202349A
	movs r1, #0
_0805F9A4:
	str r1, [sp]
	movs r1, #3
	movs r2, #0x14
	movs r3, #0
	bl sub_080671A0
	b _0805F9D6
	.align 2, 0
_0805F9B4: .4byte 0x0202349A
_0805F9B8:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _0805F9D6
	bl SpellFx_ClearBG1
	ldr r1, _0805F9E0 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_0805F9D6:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805F9E0: .4byte 0x0201774C

	thumb_func_start sub_0805F9E4
sub_0805F9E4: @ 0x0805F9E4
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0805FA18 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805FA1C @ =0x08C12A6C
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	str r1, [r0, #0x44]
	ldr r1, _0805FA20 @ =0x081EEEEA
	str r1, [r0, #0x48]
	ldr r1, _0805FA24 @ =0x08295974
	str r1, [r0, #0x4c]
	adds r0, r1, #0
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805FA18: .4byte 0x0201774C
_0805FA1C: .4byte 0x08C12A6C
_0805FA20: .4byte 0x081EEEEA
_0805FA24: .4byte 0x08295974

	thumb_func_start sub_0805FA28
sub_0805FA28: @ 0x0805FA28
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _0805FA4E
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	b _0805FA64
_0805FA4E:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0805FA64
	ldr r1, _0805FA6C @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0805FA64:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805FA6C: .4byte 0x0201774C

	thumb_func_start sub_0805FA70
sub_0805FA70: @ 0x0805FA70
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0805FAA8 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805FAAC @ =0x08C12A8C
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r2, #0
	strh r2, [r0, #0x2c]
	movs r1, #2
	strh r1, [r0, #0x2e]
	strh r2, [r0, #0x30]
	ldr r0, _0805FAB0 @ =0x082972A0
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0805FAB4 @ =0x08296FDC
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805FAA8: .4byte 0x0201774C
_0805FAAC: .4byte 0x08C12A8C
_0805FAB0: .4byte 0x082972A0
_0805FAB4: .4byte 0x08296FDC

	thumb_func_start sub_0805FAB8
sub_0805FAB8: @ 0x0805FAB8
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r5, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _0805FB54
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _0805FB08
	ldr r0, [r5, #0x5c]
	movs r4, #2
	ldrsh r3, [r0, r4]
	ldr r4, _0805FB04 @ =0x08C12AA4
	movs r6, #0x30
	ldrsh r2, [r5, r6]
	lsls r1, r2, #1
	adds r1, r1, r4
	movs r6, #0
	ldrsh r1, [r1, r6]
	adds r6, r3, r1
	movs r1, #4
	ldrsh r3, [r0, r1]
	adds r2, #1
	lsls r2, r2, #1
	adds r2, r2, r4
	movs r4, #0
	ldrsh r1, [r2, r4]
	adds r2, r3, r1
	adds r1, r6, #0
	bl sub_0805FB64
	b _0805FB34
	.align 2, 0
_0805FB04: .4byte 0x08C12AA4
_0805FB08:
	ldr r0, [r5, #0x5c]
	movs r6, #2
	ldrsh r3, [r0, r6]
	ldr r4, _0805FB5C @ =0x08C12AA4
	movs r1, #0x30
	ldrsh r2, [r5, r1]
	lsls r1, r2, #1
	adds r1, r1, r4
	movs r6, #0
	ldrsh r1, [r1, r6]
	subs r6, r3, r1
	movs r1, #4
	ldrsh r3, [r0, r1]
	adds r2, #1
	lsls r2, r2, #1
	adds r2, r2, r4
	movs r4, #0
	ldrsh r1, [r2, r4]
	adds r2, r3, r1
	adds r1, r6, #0
	bl sub_0805FB64
_0805FB34:
	movs r0, #0
	strh r0, [r5, #0x2c]
	ldrh r0, [r5, #0x30]
	adds r0, #2
	strh r0, [r5, #0x30]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #7
	ble _0805FB54
	ldr r1, _0805FB60 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r5, #0
	bl Proc_Break
_0805FB54:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805FB5C: .4byte 0x08C12AA4
_0805FB60: .4byte 0x0201774C

	thumb_func_start sub_0805FB64
sub_0805FB64: @ 0x0805FB64
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	ldr r1, _0805FBB0 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805FBB4 @ =0x08C12AB4
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x46
	strh r0, [r4, #0x2e]
	ldr r3, _0805FBB8 @ =0x08C41AF8
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	strh r6, [r0, #2]
	mov r1, r8
	strh r1, [r0, #4]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805FBB0: .4byte 0x0201774C
_0805FBB4: .4byte 0x08C12AB4
_0805FBB8: .4byte 0x08C41AF8

	thumb_func_start sub_0805FBBC
sub_0805FBBC: @ 0x0805FBBC
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	ldrh r3, [r2, #0x2e]
	lsls r1, r3, #0x10
	cmp r0, r1
	bne _0805FBDE
	ldr r1, _0805FBE4 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r2, #0
	bl Proc_Break
_0805FBDE:
	pop {r0}
	bx r0
	.align 2, 0
_0805FBE4: .4byte 0x0201774C

	thumb_func_start sub_0805FBE8
sub_0805FBE8: @ 0x0805FBE8
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _0805FC20 @ =0x08C12ACC
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805FC20: .4byte 0x08C12ACC

	thumb_func_start sub_0805FC24
sub_0805FC24: @ 0x0805FC24
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r6, r0, #0
	ldr r0, [r6, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	bl GetSpellAnimationStartFrame
	adds r4, r0, #0
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	movs r7, #0
	movs r1, #0
	mov r8, r1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805FC58
	ldr r0, [r6, #0x5c]
	subs r1, #1
	bl sub_0804EC74
_0805FC58:
	movs r3, #0x2c
	ldrsh r1, [r6, r3]
	adds r0, r4, #1
	cmp r1, r0
	bne _0805FCF4
	adds r0, r5, #0
	bl sub_0805FE20
	ldr r6, _0805FCEC @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r6, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r6, #1]
	adds r2, r6, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r3, [r2]
	ands r0, r3
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r6, #0
	adds r0, #0x44
	strb r7, [r0]
	adds r1, r6, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #1
	strb r7, [r1]
	str r0, [sp]
	mov r0, r8
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0xa
	movs r3, #0
	bl sub_080566F0
	movs r4, #0x80
	lsls r4, r4, #1
	movs r0, #2
	str r0, [sp]
	adds r0, r5, #0
	movs r1, #0x14
	movs r2, #0xf
	adds r3, r4, #0
	bl sub_080560A4
	adds r1, r0, #0
	adds r0, r5, #0
	movs r2, #0x14
	bl sub_0806052C
	movs r1, #0x20
	ldrsh r2, [r6, r1]
	adds r0, r5, #0
	movs r1, #0x14
	movs r3, #0
	bl sub_080564B8
	ldr r0, _0805FCF0 @ =0x000002BD
	adds r1, r4, #0
	movs r2, #0x78
	movs r3, #1
	bl PlaySFX
	b _0805FE12
	.align 2, 0
_0805FCEC: .4byte gDispIo
_0805FCF0: .4byte 0x000002BD
_0805FCF4:
	adds r0, r4, #0
	adds r0, #0x29
	cmp r1, r0
	bne _0805FD24
	bl sub_0805FED4
	adds r0, r5, #0
	movs r1, #0x15
	movs r2, #1
	bl sub_080565FC
	adds r0, r5, #0
	bl sub_080602D0
	mov r3, r8
	str r3, [sp]
	str r3, [sp, #4]
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0x19
	movs r3, #0x10
	bl sub_080566F0
	b _0805FE12
_0805FD24:
	adds r0, r4, #0
	adds r0, #0x37
	cmp r1, r0
	bne _0805FD44
	ldr r0, _0805FD40 @ =0x000002BE
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #0
	bl PlaySFX
	b _0805FE12
	.align 2, 0
_0805FD40: .4byte 0x000002BE
_0805FD44:
	adds r0, r4, #0
	adds r0, #0x46
	cmp r1, r0
	bne _0805FDB0
	adds r0, r5, #0
	movs r1, #0x41
	bl sub_08060014
	adds r0, r5, #0
	movs r1, #0x41
	bl sub_08060150
	ldr r3, _0805FDAC @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r7, [r0]
	adds r0, #1
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r7, [r0]
	str r1, [sp]
	mov r3, r8
	str r3, [sp, #4]
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0xa
	movs r3, #0
	bl sub_080566F0
	movs r0, #1
	str r0, [sp]
	adds r0, r5, #0
	movs r1, #0x41
	movs r2, #2
	movs r3, #0x80
	bl sub_080560A4
	adds r0, r5, #0
	movs r1, #0x44
	movs r2, #0
	bl sub_080565FC
	b _0805FE12
	.align 2, 0
_0805FDAC: .4byte gDispIo
_0805FDB0:
	adds r0, r4, #0
	adds r0, #0x87
	cmp r1, r0
	bne _0805FDE2
	adds r0, r5, #0
	movs r1, #5
	bl sub_0804F7B8
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, r6, #0
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl StartBattleAnimHitEffectsDefault
	ldrb r0, [r4]
	cmp r0, #0
	bne _0805FE12
	adds r0, r5, #0
	bl sub_08068500
	b _0805FE12
_0805FDE2:
	adds r0, r4, #0
	adds r0, #0x8c
	cmp r1, r0
	bne _0805FDFC
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, [r6, #0x5c]
	bl sub_080601E8
	b _0805FE12
_0805FDFC:
	adds r0, r4, #0
	adds r0, #0xbe
	cmp r1, r0
	bne _0805FE12
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r6, #0
	bl Proc_Break
_0805FE12:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0805FE20
sub_0805FE20: @ 0x0805FE20
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0805FE64 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805FE68 @ =0x08C12AE4
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _0805FE6C @ =0x081EEF04
	str r1, [r0, #0x48]
	ldr r1, _0805FE70 @ =0x08C12AFC
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r0, _0805FE74 @ =0x08297D90
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	ldr r0, _0805FE78 @ =0x082972C0
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	bl SpellFx_SetSomeColorEffect
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805FE64: .4byte 0x0201774C
_0805FE68: .4byte 0x08C12AE4
_0805FE6C: .4byte 0x081EEF04
_0805FE70: .4byte 0x08C12AFC
_0805FE74: .4byte 0x08297D90
_0805FE78: .4byte 0x082972C0

	thumb_func_start sub_0805FE7C
sub_0805FE7C: @ 0x0805FE7C
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _0805FEAA
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	b _0805FEC8
_0805FEAA:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _0805FEC8
	bl SpellFx_ClearBG1
	ldr r1, _0805FED0 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_0805FEC8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805FED0: .4byte 0x0201774C

	thumb_func_start sub_0805FED4
sub_0805FED4: @ 0x0805FED4
	push {lr}
	ldr r0, _0805FEF0 @ =0x08C12B00
	movs r1, #3
	bl Proc_Start
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	str r1, [r0, #0x44]
	bl sub_0805FFB0
	pop {r0}
	bx r0
	.align 2, 0
_0805FEF0: .4byte 0x08C12B00

	thumb_func_start sub_0805FEF4
sub_0805FEF4: @ 0x0805FEF4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	mov sb, r0
	ldr r0, _0805FF58 @ =0x0201FDAC
	ldr r0, [r0]
	ldr r5, _0805FF5C @ =0x0201FB2C
	cmp r0, #0
	bne _0805FF0A
	ldr r5, _0805FF60 @ =0x0201FC6C
_0805FF0A:
	ldr r3, _0805FF64 @ =0x0201FDB8
	cmp r0, #0
	bne _0805FF12
	ldr r3, _0805FF68 @ =0x0201FEF8
_0805FF12:
	movs r4, #0
	movs r6, #0
	ldr r0, _0805FF6C @ =0x08C12B30
	movs r1, #0xe0
	lsls r1, r1, #0xf
	mov r8, r1
	movs r2, #0x70
	mov ip, r2
	adds r7, r0, #0
	subs r7, #0x20
_0805FF26:
	cmp r4, #0xf
	bls _0805FF84
	cmp r4, #0x6f
	bhi _0805FF84
	movs r0, #0
	ldrsh r1, [r7, r0]
	mov r2, sb
	ldr r0, [r2, #0x44]
	muls r0, r1, r0
	lsls r0, r0, #4
	lsrs r2, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	beq _0805FF7C
	cmp r4, #0x3f
	bhi _0805FF74
	adds r0, r4, #0
	subs r0, #0x70
	cmp r1, r0
	bhs _0805FF7C
	ldr r1, _0805FF70 @ =0x0000FF90
	adds r0, r4, r1
	lsls r0, r0, #0x10
	b _0805FF7A
	.align 2, 0
_0805FF58: .4byte 0x0201FDAC
_0805FF5C: .4byte 0x0201FB2C
_0805FF60: .4byte 0x0201FC6C
_0805FF64: .4byte 0x0201FDB8
_0805FF68: .4byte 0x0201FEF8
_0805FF6C: .4byte 0x08C12B30
_0805FF70: .4byte 0x0000FF90
_0805FF74:
	cmp r1, ip
	bls _0805FF7C
	mov r0, r8
_0805FF7A:
	lsrs r2, r0, #0x10
_0805FF7C:
	strh r2, [r5]
	adds r5, #2
	strh r2, [r3]
	b _0805FF8A
_0805FF84:
	strh r6, [r5]
	adds r5, #2
	strh r6, [r3]
_0805FF8A:
	adds r3, #2
	ldr r1, _0805FFAC @ =0xFFFF0000
	add r8, r1
	movs r2, #1
	rsbs r2, r2, #0
	add ip, r2
	adds r7, #2
	adds r4, #1
	cmp r4, #0x9f
	bls _0805FF26
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805FFAC: .4byte 0xFFFF0000

	thumb_func_start sub_0805FFB0
sub_0805FFB0: @ 0x0805FFB0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0805FFCC @ =0x08C12B18
	movs r1, #3
	bl Proc_Start
	movs r1, #0
	strh r1, [r0, #0x2c]
	movs r1, #0x14
	strh r1, [r0, #0x2e]
	str r4, [r0, #0x5c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805FFCC: .4byte 0x08C12B18

	thumb_func_start sub_0805FFD0
sub_0805FFD0: @ 0x0805FFD0
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r5, [r4, #0x5c]
	movs r2, #0x80
	lsls r2, r2, #7
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	str r0, [r5, #0x44]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0806000C
	adds r0, r5, #0
	bl Proc_End
	adds r0, r4, #0
	bl Proc_Break
_0806000C:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08060014
sub_08060014: @ 0x08060014
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _08060078 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0806007C @ =0x08C12BF0
	movs r1, #3
	bl Proc_Start
	adds r6, r0, #0
	str r4, [r6, #0x5c]
	movs r0, #0
	strh r0, [r6, #0x2c]
	strh r5, [r6, #0x2e]
	ldr r0, _08060080 @ =0x08297EE0
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, _08060084 @ =0x08298640
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_ClearBG1
	ldr r0, _08060088 @ =0x08298820
	ldr r4, _0806008C @ =gEkrTsaBuffer
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r0, [r6, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _08060094
	ldr r1, _08060090 @ =gBg1Tm
	movs r0, #1
	str r0, [sp]
	adds r0, #0xff
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0x1e
	movs r3, #0x20
	bl sub_080672E8
	b _080600A8
	.align 2, 0
_08060078: .4byte 0x0201774C
_0806007C: .4byte 0x08C12BF0
_08060080: .4byte 0x08297EE0
_08060084: .4byte 0x08298640
_08060088: .4byte 0x08298820
_0806008C: .4byte gEkrTsaBuffer
_08060090: .4byte gBg1Tm
_08060094:
	ldr r1, _080600D4 @ =gBg1Tm
	movs r0, #1
	str r0, [sp]
	adds r0, #0xff
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0x1e
	movs r3, #0x20
	bl sub_080672B8
_080600A8:
	movs r0, #2
	bl EnableBgSync
	bl SpellFx_SetSomeColorEffect
	ldr r0, _080600D8 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _080600E6
	ldr r0, [r6, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _080600DC
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _080600E6
	.align 2, 0
_080600D4: .4byte gBg1Tm
_080600D8: .4byte gEkrDistanceType
_080600DC:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_080600E6:
	ldr r2, _08060104 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08060104: .4byte gDispIo

	thumb_func_start sub_08060108
sub_08060108: @ 0x08060108
	push {lr}
	bl SpellFx_ClearBG1
	ldr r1, _08060120 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	pop {r0}
	bx r0
	.align 2, 0
_08060120: .4byte 0x0201774C

	thumb_func_start sub_08060124
sub_08060124: @ 0x08060124
	push {lr}
	adds r2, r0, #0
	ldr r1, _0806014C @ =gDispIo
	ldrh r0, [r1, #0x22]
	adds r0, #1
	strh r0, [r1, #0x22]
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	ldrh r3, [r2, #0x2e]
	lsls r1, r3, #0x10
	cmp r0, r1
	ble _08060146
	adds r0, r2, #0
	bl Proc_Break
_08060146:
	pop {r0}
	bx r0
	.align 2, 0
_0806014C: .4byte gDispIo

	thumb_func_start sub_08060150
sub_08060150: @ 0x08060150
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _08060188 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0806018C @ =0x08C12C10
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	strh r5, [r0, #0x30]
	str r1, [r0, #0x44]
	ldr r1, _08060190 @ =0x081EEF0A
	str r1, [r0, #0x48]
	ldr r1, _08060194 @ =0x08298640
	str r1, [r0, #0x4c]
	adds r0, r1, #0
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08060188: .4byte 0x0201774C
_0806018C: .4byte 0x08C12C10
_08060190: .4byte 0x081EEF0A
_08060194: .4byte 0x08298640

	thumb_func_start sub_08060198
sub_08060198: @ 0x08060198
	ldr r1, _080601A4 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_080601A4: .4byte 0x0201774C

	thumb_func_start sub_080601A8
sub_080601A8: @ 0x080601A8
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _080601CC
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
_080601CC:
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _080601E2
	adds r0, r4, #0
	bl Proc_Break
_080601E2:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080601E8
sub_080601E8: @ 0x080601E8
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _08060240 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08060244 @ =0x08C12C38
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _08060248 @ =0x081EEF48
	str r0, [r5, #0x48]
	ldr r0, _0806024C @ =0x08C12C50
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _08060250 @ =0x08C12C80
	str r0, [r5, #0x54]
	ldr r0, _08060254 @ =0x0829B4C4
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_SetSomeColorEffect
	ldr r0, _08060258 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08060266
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _0806025C
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
	b _08060266
	.align 2, 0
_08060240: .4byte 0x0201774C
_08060244: .4byte 0x08C12C38
_08060248: .4byte 0x081EEF48
_0806024C: .4byte 0x08C12C50
_08060250: .4byte 0x08C12C80
_08060254: .4byte 0x0829B4C4
_08060258: .4byte gEkrDistanceType
_0806025C:
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
_08060266:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0806026C
sub_0806026C: @ 0x0806026C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #0
	blt _080602A8
	ldr r1, [r4, #0x4c]
	ldr r2, [r4, #0x50]
	ldr r5, [r4, #0x54]
	ldr r0, [r4, #0x5c]
	lsls r4, r3, #2
	adds r1, r4, r1
	ldr r1, [r1]
	adds r2, r4, r2
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	adds r4, r4, r5
	ldr r0, [r4]
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	b _080602C6
_080602A8:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r3, r0
	bne _080602C6
	bl SpellFx_ClearBG1
	ldr r1, _080602CC @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_080602C6:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080602CC: .4byte 0x0201774C

	thumb_func_start sub_080602D0
sub_080602D0: @ 0x080602D0
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
_080602D6:
	ldr r0, _08060300 @ =0x08C12CB0
	movs r1, #3
	bl Proc_Start
	str r5, [r0, #0x5c]
	str r4, [r0, #0x44]
	adds r4, #1
	cmp r4, #7
	bls _080602D6
	ldr r0, _08060304 @ =0x0829C468
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _08060308 @ =0x0829C068
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08060300: .4byte 0x08C12CB0
_08060304: .4byte 0x0829C468
_08060308: .4byte 0x0829C068

	thumb_func_start sub_0806030C
sub_0806030C: @ 0x0806030C
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r1, _0806036C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	movs r5, #0
	strh r5, [r4, #0x2c]
	strh r5, [r4, #0x2e]
	ldr r1, [r4, #0x44]
	ldr r0, _08060370 @ =0x00002AAA
	muls r0, r1, r0
	strh r0, [r4, #0x30]
	ldr r3, _08060374 @ =0x08C41D18
	ldr r0, [r4, #0x5c]
	str r3, [sp]
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	strh r5, [r0, #6]
	ldr r1, _08060378 @ =0x0000F3FF
	ldrh r2, [r0, #8]
	ands r1, r2
	movs r3, #0x80
	lsls r3, r3, #4
	adds r2, r3, #0
	orrs r1, r2
	strh r1, [r0, #8]
	movs r1, #0x80
	lsls r1, r1, #1
	strh r1, [r0, #2]
	strh r1, [r0, #4]
	ldr r1, [r4, #0x5c]
	ldrh r0, [r1, #2]
	strh r0, [r4, #0x32]
	ldrh r0, [r1, #4]
	strh r0, [r4, #0x3a]
	adds r0, r4, #0
	bl Proc_Break
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806036C: .4byte 0x0201774C
_08060370: .4byte 0x00002AAA
_08060374: .4byte 0x08C41D18
_08060378: .4byte 0x0000F3FF

	thumb_func_start sub_0806037C
sub_0806037C: @ 0x0806037C
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r5, [r4, #0x60]
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r7, #0x14
	str r7, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0x32
	bl Interpolate
	ldrh r2, [r4, #0x30]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r2, r3
	movs r6, #0
	strh r1, [r4, #0x30]
	lsrs r2, r1, #8
	ldr r3, _0806040C @ =gSinLut
	lsls r1, r2, #1
	adds r1, r1, r3
	adds r2, #0x40
	lsls r2, r2, #1
	adds r2, r2, r3
	movs r3, #0
	ldrsh r1, [r1, r3]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	muls r1, r0, r1
	lsls r1, r1, #4
	movs r3, #0
	ldrsh r2, [r2, r3]
	muls r0, r2, r0
	lsls r0, r0, #4
	asrs r1, r1, #0x10
	ldrh r2, [r4, #0x32]
	adds r1, r2, r1
	asrs r0, r0, #0x10
	ldrh r3, [r4, #0x3a]
	adds r0, r3, r0
	strh r1, [r5, #2]
	strh r0, [r5, #4]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x14
	ble _080603E4
	strh r7, [r4, #0x2c]
_080603E4:
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x14
	ble _08060404
	strh r6, [r4, #0x2c]
	strh r6, [r4, #0x2e]
	ldr r0, _08060410 @ =0x08C41F78
	str r0, [r5, #0x24]
	str r0, [r5, #0x20]
	strh r6, [r5, #6]
	adds r0, r4, #0
	bl Proc_Break
_08060404:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806040C: .4byte gSinLut
_08060410: .4byte 0x08C41F78

	thumb_func_start sub_08060414
sub_08060414: @ 0x08060414
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r5, [r4, #0x60]
	movs r3, #0x32
	ldrh r1, [r4, #0x30]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r1, r2
	movs r6, #0
	strh r0, [r4, #0x30]
	lsrs r0, r0, #8
	ldr r2, _0806048C @ =gSinLut
	lsls r1, r0, #1
	adds r1, r1, r2
	adds r0, #0x40
	lsls r0, r0, #1
	adds r0, r0, r2
	movs r2, #0
	ldrsh r1, [r1, r2]
	muls r1, r3, r1
	movs r2, #0
	ldrsh r0, [r0, r2]
	muls r0, r3, r0
	asrs r1, r1, #0xc
	ldrh r2, [r4, #0x32]
	adds r1, r2, r1
	asrs r0, r0, #0xc
	ldrh r2, [r4, #0x3a]
	adds r0, r2, r0
	strh r1, [r5, #2]
	strh r0, [r5, #4]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3c
	ble _08060464
	movs r0, #0x3c
	strh r0, [r4, #0x2c]
_08060464:
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3c
	ble _08060484
	strh r6, [r4, #0x2c]
	strh r6, [r4, #0x2e]
	ldr r0, _08060490 @ =0x08C41D50
	str r0, [r5, #0x24]
	str r0, [r5, #0x20]
	strh r6, [r5, #6]
	adds r0, r4, #0
	bl Proc_Break
_08060484:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806048C: .4byte gSinLut
_08060490: .4byte 0x08C41D50

	thumb_func_start sub_08060494
sub_08060494: @ 0x08060494
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r4, [r5, #0x60]
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r6, #0xa
	str r6, [sp]
	movs r0, #1
	movs r1, #0x32
	movs r2, #0
	bl Interpolate
	ldrh r2, [r5, #0x30]
	movs r3, #0x80
	lsls r3, r3, #3
	adds r1, r2, r3
	strh r1, [r5, #0x30]
	lsrs r2, r1, #8
	ldr r3, _08060524 @ =gSinLut
	lsls r1, r2, #1
	adds r1, r1, r3
	adds r2, #0x40
	lsls r2, r2, #1
	adds r2, r2, r3
	movs r3, #0
	ldrsh r1, [r1, r3]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	muls r1, r0, r1
	lsls r1, r1, #4
	movs r3, #0
	ldrsh r2, [r2, r3]
	muls r0, r2, r0
	lsls r0, r0, #4
	asrs r1, r1, #0x10
	ldrh r2, [r5, #0x32]
	adds r1, r2, r1
	asrs r0, r0, #0x10
	ldrh r3, [r5, #0x3a]
	adds r0, r3, r0
	strh r1, [r4, #2]
	strh r0, [r4, #4]
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xa
	ble _080604FA
	strh r6, [r5, #0x2c]
_080604FA:
	ldrh r0, [r5, #0x2e]
	adds r0, #1
	strh r0, [r5, #0x2e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xa
	ble _0806051C
	ldr r0, _08060528 @ =0x0201774C
	ldr r1, [r0]
	subs r1, #1
	str r1, [r0]
	ldr r0, [r5, #0x60]
	bl AnimDelete
	adds r0, r5, #0
	bl Proc_Break
_0806051C:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08060524: .4byte gSinLut
_08060528: .4byte 0x0201774C

	thumb_func_start sub_0806052C
sub_0806052C: @ 0x0806052C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r1, #0
	adds r5, r2, #0
	ldr r1, _08060554 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08060558 @ =0x08C12CE0
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	str r6, [r0, #0x64]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08060554: .4byte 0x0201774C
_08060558: .4byte 0x08C12CE0

	thumb_func_start sub_0806055C
sub_0806055C: @ 0x0806055C
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r4, [r5, #0x64]
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r1, #0x2e
	ldrsh r0, [r5, r1]
	str r0, [sp]
	movs r0, #4
	movs r1, #0x80
	movs r2, #0
	bl Interpolate
	str r0, [r4, #0x4c]
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r5, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08060598
	ldr r1, _080605A0 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r5, #0
	bl Proc_Break
_08060598:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080605A0: .4byte 0x0201774C

	thumb_func_start sub_080605A4
sub_080605A4: @ 0x080605A4
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _080605DC @ =0x08C12CF8
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080605DC: .4byte 0x08C12CF8

	thumb_func_start sub_080605E0
sub_080605E0: @ 0x080605E0
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x5c]
	bl GetCoreAIStruct
	adds r4, r0, #0
	bl GetSpellAnimationStartFrame
	adds r6, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0806060A
	ldr r0, [r5, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
_0806060A:
	movs r0, #0x2c
	ldrsh r1, [r5, r0]
	adds r0, r6, #1
	cmp r1, r0
	bne _08060626
	movs r0, #0xf
	bl sub_08060948
	adds r0, r4, #0
	movs r1, #0xf
	movs r2, #1
	bl sub_080565FC
	b _0806066C
_08060626:
	adds r0, r6, #2
	cmp r1, r0
	bne _08060650
	adds r0, r4, #0
	bl sub_08060730
	adds r0, r4, #0
	bl sub_080608B8
	ldr r0, _0806064C @ =0x000002BF
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r4, r3]
	movs r3, #1
	bl PlaySFX
	b _0806066C
	.align 2, 0
_0806064C: .4byte 0x000002BF
_08060650:
	adds r0, r6, #0
	adds r0, #0x2e
	cmp r1, r0
	bne _0806066C
	movs r0, #0xb0
	lsls r0, r0, #2
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r5, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl PlaySFX
_0806066C:
	adds r7, r5, #0
	adds r7, #0x29
	ldrb r0, [r7]
	cmp r0, #0
	bne _080606F2
	movs r0, #0x2c
	ldrsh r1, [r5, r0]
	adds r0, r6, #0
	adds r0, #0x33
	cmp r1, r0
	bne _08060694
	adds r0, r4, #0
	bl sub_08060DD8
	adds r0, r4, #0
	bl sub_08060A80
	adds r0, r4, #0
	bl sub_08060BA0
_08060694:
	movs r3, #0x2c
	ldrsh r1, [r5, r3]
	adds r0, r6, #0
	adds r0, #0x54
	cmp r1, r0
	bne _080606BE
	adds r0, r4, #0
	movs r1, #5
	bl sub_0804F7B8
	movs r0, #9
	ldrh r1, [r4, #0x10]
	orrs r0, r1
	strh r0, [r4, #0x10]
	ldrb r1, [r7]
	adds r0, r4, #0
	bl StartBattleAnimHitEffectsDefault
	adds r0, r4, #0
	bl sub_08068500
_080606BE:
	movs r3, #0x2c
	ldrsh r1, [r5, r3]
	adds r0, r6, #0
	adds r0, #0x5a
	cmp r1, r0
	bne _080606D6
	adds r0, r4, #0
	bl sub_08060C2C
	adds r0, r4, #0
	bl sub_08060D4C
_080606D6:
	movs r0, #0x2c
	ldrsh r1, [r5, r0]
	adds r0, r6, #0
	adds r0, #0x69
	cmp r1, r0
	bne _08060728
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r5, #0
	bl Proc_Break
	b _08060728
_080606F2:
	movs r3, #0x2c
	ldrsh r1, [r5, r3]
	adds r0, r6, #0
	adds r0, #0x32
	cmp r1, r0
	bne _0806070E
	movs r0, #9
	ldrh r1, [r4, #0x10]
	orrs r0, r1
	strh r0, [r4, #0x10]
	ldrb r1, [r7]
	adds r0, r4, #0
	bl StartBattleAnimHitEffectsDefault
_0806070E:
	movs r3, #0x2c
	ldrsh r1, [r5, r3]
	adds r0, r6, #0
	adds r0, #0x33
	cmp r1, r0
	bne _08060728
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r5, #0
	bl Proc_Break
_08060728:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08060730
sub_08060730: @ 0x08060730
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08060784 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08060788 @ =0x08C12D10
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	movs r1, #0x28
	strh r1, [r0, #0x2e]
	ldr r0, _0806078C @ =0x0829C488
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	bl SpellFx_ClearBG1
	ldr r0, _08060790 @ =0x0829CA18
	ldr r1, _08060794 @ =gEkrTsaBuffer
	bl LZ77UnCompWram
	bl SpellFx_SetSomeColorEffect
	ldr r2, _08060798 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08060784: .4byte 0x0201774C
_08060788: .4byte 0x08C12D10
_0806078C: .4byte 0x0829C488
_08060790: .4byte 0x0829CA18
_08060794: .4byte gEkrTsaBuffer
_08060798: .4byte gDispIo

	thumb_func_start sub_0806079C
sub_0806079C: @ 0x0806079C
	push {lr}
	bl SpellFx_ClearBG1
	ldr r1, _080607B4 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	pop {r0}
	bx r0
	.align 2, 0
_080607B4: .4byte 0x0201774C

	thumb_func_start sub_080607B8
sub_080607B8: @ 0x080607B8
	push {r4, lr}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _080607E8
	ldr r0, _080607E0 @ =gEkrTsaBuffer
	ldr r1, _080607E4 @ =gBg1Tm
	movs r2, #1
	str r2, [sp]
	adds r2, #0xff
	str r2, [sp, #4]
	movs r2, #0x20
	movs r3, #0x20
	bl sub_080672E8
	b _080607FC
	.align 2, 0
_080607E0: .4byte gEkrTsaBuffer
_080607E4: .4byte gBg1Tm
_080607E8:
	ldr r0, _0806082C @ =gEkrTsaBuffer
	ldr r1, _08060830 @ =gBg1Tm
	movs r2, #1
	str r2, [sp]
	adds r2, #0xff
	str r2, [sp, #4]
	movs r2, #0x20
	movs r3, #0x20
	bl sub_080672B8
_080607FC:
	movs r0, #2
	bl EnableBgSync
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r2, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r3, [r4, #0x2e]
	lsls r1, r3, #0x10
	cmp r0, r1
	ble _0806083E
	strh r2, [r4, #0x2c]
	movs r0, #6
	strh r0, [r4, #0x2e]
	strh r2, [r4, #0x32]
	ldr r0, [r4, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _08060834
	movs r0, #0x80
	b _08060836
	.align 2, 0
_0806082C: .4byte gEkrTsaBuffer
_08060830: .4byte gBg1Tm
_08060834:
	ldr r0, _08060848 @ =0x0000FF80
_08060836:
	strh r0, [r4, #0x34]
	adds r0, r4, #0
	bl Proc_Break
_0806083E:
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08060848: .4byte 0x0000FF80

	thumb_func_start sub_0806084C
sub_0806084C: @ 0x0806084C
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0x32
	ldrsh r1, [r4, r0]
	movs r5, #0x34
	ldrsh r2, [r4, r5]
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r5, #0x2e
	ldrsh r0, [r4, r5]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	ldr r1, _08060894 @ =gDispIo
	strh r0, [r1, #0x20]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0806088C
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0xc
	strh r0, [r4, #0x2e]
	adds r0, r4, #0
	bl Proc_Break
_0806088C:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08060894: .4byte gDispIo

	thumb_func_start sub_08060898
sub_08060898: @ 0x08060898
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	ldrh r3, [r2, #0x2e]
	lsls r1, r3, #0x10
	cmp r0, r1
	ble _080608B2
	adds r0, r2, #0
	bl Proc_Break
_080608B2:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080608B8
sub_080608B8: @ 0x080608B8
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _080608EC @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080608F0 @ =0x08C12D40
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	str r1, [r0, #0x44]
	ldr r1, _080608F4 @ =0x081EEF7A
	str r1, [r0, #0x48]
	ldr r1, _080608F8 @ =0x0829C878
	str r1, [r0, #0x4c]
	adds r0, r1, #0
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080608EC: .4byte 0x0201774C
_080608F0: .4byte 0x08C12D40
_080608F4: .4byte 0x081EEF7A
_080608F8: .4byte 0x0829C878

	thumb_func_start sub_080608FC
sub_080608FC: @ 0x080608FC
	ldr r1, _08060908 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_08060908: .4byte 0x0201774C

	thumb_func_start sub_0806090C
sub_0806090C: @ 0x0806090C
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _08060932
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	b _08060940
_08060932:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _08060940
	adds r0, r4, #0
	bl Proc_Break
_08060940:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08060948
sub_08060948: @ 0x08060948
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08060968 @ =0x08C12D68
	movs r1, #3
	bl Proc_Start
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	str r1, [r0, #0x44]
	adds r1, r4, #0
	bl sub_08060A1C
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08060968: .4byte 0x08C12D68

	thumb_func_start sub_0806096C
sub_0806096C: @ 0x0806096C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	mov sb, r0
	ldr r0, _080609C8 @ =0x0201FDAC
	ldr r0, [r0]
	ldr r5, _080609CC @ =0x0201FB2C
	cmp r0, #0
	bne _08060982
	ldr r5, _080609D0 @ =0x0201FC6C
_08060982:
	ldr r4, _080609D4 @ =0x0201FDB8
	cmp r0, #0
	bne _0806098A
	ldr r4, _080609D8 @ =0x0201FEF8
_0806098A:
	movs r3, #0
	movs r0, #0
	mov r8, r0
	movs r1, #0x80
	lsls r1, r1, #0x10
	mov ip, r1
	movs r7, #0x80
	ldr r6, _080609DC @ =0x08C12D98
_0806099A:
	cmp r3, #0x7f
	bhi _080609F4
	movs r2, #0
	ldrsh r1, [r6, r2]
	mov r2, sb
	ldr r0, [r2, #0x44]
	muls r0, r1, r0
	lsls r0, r0, #4
	lsrs r2, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	beq _080609EC
	cmp r3, #0x3f
	bhi _080609E4
	adds r0, r3, #0
	subs r0, #0x80
	cmp r1, r0
	bhs _080609EC
	ldr r1, _080609E0 @ =0x0000FF80
	adds r0, r3, r1
	lsls r0, r0, #0x10
	b _080609EA
	.align 2, 0
_080609C8: .4byte 0x0201FDAC
_080609CC: .4byte 0x0201FB2C
_080609D0: .4byte 0x0201FC6C
_080609D4: .4byte 0x0201FDB8
_080609D8: .4byte 0x0201FEF8
_080609DC: .4byte 0x08C12D98
_080609E0: .4byte 0x0000FF80
_080609E4:
	cmp r1, r7
	bls _080609EC
	mov r0, ip
_080609EA:
	lsrs r2, r0, #0x10
_080609EC:
	strh r2, [r5]
	adds r5, #2
	strh r2, [r4]
	b _080609FC
_080609F4:
	mov r1, r8
	strh r1, [r5]
	adds r5, #2
	strh r1, [r4]
_080609FC:
	adds r4, #2
	ldr r2, _08060A18 @ =0xFFFF0000
	add ip, r2
	subs r7, #1
	adds r6, #2
	adds r3, #1
	cmp r3, #0x9f
	bls _0806099A
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08060A18: .4byte 0xFFFF0000

	thumb_func_start sub_08060A1C
sub_08060A1C: @ 0x08060A1C
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r0, _08060A38 @ =0x08C12D80
	movs r1, #3
	bl Proc_Start
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r4, [r0, #0x2e]
	str r5, [r0, #0x5c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08060A38: .4byte 0x08C12D80

	thumb_func_start sub_08060A3C
sub_08060A3C: @ 0x08060A3C
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r5, [r4, #0x5c]
	movs r1, #0x80
	lsls r1, r1, #7
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r2, #0x2e
	ldrsh r0, [r4, r2]
	str r0, [sp]
	movs r0, #4
	movs r2, #0
	bl Interpolate
	str r0, [r5, #0x44]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08060A78
	adds r0, r5, #0
	bl Proc_End
	adds r0, r4, #0
	bl Proc_Break
_08060A78:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08060A80
sub_08060A80: @ 0x08060A80
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	ldr r1, _08060AC4 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08060AC8 @ =0x08C12E98
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	movs r0, #0xc
	strh r0, [r5, #0x2e]
	ldr r0, _08060ACC @ =0x0829CBC4
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	bl SpellFx_ClearBG1
	ldr r0, _08060AD0 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _08060ADC
	ldr r0, _08060AD4 @ =0x0829DCB0
	ldr r1, _08060AD8 @ =gEkrTsaBuffer
	bl LZ77UnCompWram
	b _08060AE4
	.align 2, 0
_08060AC4: .4byte 0x0201774C
_08060AC8: .4byte 0x08C12E98
_08060ACC: .4byte 0x0829CBC4
_08060AD0: .4byte gEkrDistanceType
_08060AD4: .4byte 0x0829DCB0
_08060AD8: .4byte gEkrTsaBuffer
_08060ADC:
	ldr r0, _08060B04 @ =0x0829E0E4
	ldr r1, _08060B08 @ =gEkrTsaBuffer
	bl LZ77UnCompWram
_08060AE4:
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _08060B10
	ldr r0, _08060B08 @ =gEkrTsaBuffer
	ldr r1, _08060B0C @ =gBg1Tm
	movs r2, #1
	str r2, [sp]
	adds r2, #0xff
	str r2, [sp, #4]
	movs r2, #0x1e
	movs r3, #0x14
	bl sub_080672E8
	b _08060B24
	.align 2, 0
_08060B04: .4byte 0x0829E0E4
_08060B08: .4byte gEkrTsaBuffer
_08060B0C: .4byte gBg1Tm
_08060B10:
	ldr r0, _08060B58 @ =gEkrTsaBuffer
	ldr r1, _08060B5C @ =gBg1Tm
	movs r2, #1
	str r2, [sp]
	adds r2, #0xff
	str r2, [sp, #4]
	movs r2, #0x1e
	movs r3, #0x14
	bl sub_080672B8
_08060B24:
	movs r0, #2
	bl EnableBgSync
	bl SpellFx_SetSomeColorEffect
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r2, _08060B60 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08060B58: .4byte gEkrTsaBuffer
_08060B5C: .4byte gBg1Tm
_08060B60: .4byte gDispIo

	thumb_func_start sub_08060B64
sub_08060B64: @ 0x08060B64
	push {lr}
	bl SpellFx_ClearBG1
	ldr r1, _08060B7C @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	pop {r0}
	bx r0
	.align 2, 0
_08060B7C: .4byte 0x0201774C

	thumb_func_start sub_08060B80
sub_08060B80: @ 0x08060B80
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	ldrh r3, [r2, #0x2e]
	lsls r1, r3, #0x10
	cmp r0, r1
	ble _08060B9A
	adds r0, r2, #0
	bl Proc_Break
_08060B9A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08060BA0
sub_08060BA0: @ 0x08060BA0
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08060BD4 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08060BD8 @ =0x08C12EB8
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	str r1, [r0, #0x44]
	ldr r1, _08060BDC @ =0x081EEFB0
	str r1, [r0, #0x48]
	ldr r1, _08060BE0 @ =0x0829DC30
	str r1, [r0, #0x4c]
	adds r0, r1, #0
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08060BD4: .4byte 0x0201774C
_08060BD8: .4byte 0x08C12EB8
_08060BDC: .4byte 0x081EEFB0
_08060BE0: .4byte 0x0829DC30

	thumb_func_start sub_08060BE4
sub_08060BE4: @ 0x08060BE4
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _08060C0A
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	b _08060C20
_08060C0A:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _08060C20
	ldr r1, _08060C28 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08060C20:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08060C28: .4byte 0x0201774C

	thumb_func_start sub_08060C2C
sub_08060C2C: @ 0x08060C2C
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	ldr r1, _08060C70 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08060C74 @ =0x08C12ED8
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	movs r0, #0xc
	strh r0, [r5, #0x2e]
	ldr r0, _08060C78 @ =0x0829474C
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	bl SpellFx_ClearBG1
	ldr r0, _08060C7C @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _08060C88
	ldr r0, _08060C80 @ =0x08295A34
	ldr r1, _08060C84 @ =gEkrTsaBuffer
	bl LZ77UnCompWram
	b _08060C90
	.align 2, 0
_08060C70: .4byte 0x0201774C
_08060C74: .4byte 0x08C12ED8
_08060C78: .4byte 0x0829474C
_08060C7C: .4byte gEkrDistanceType
_08060C80: .4byte 0x08295A34
_08060C84: .4byte gEkrTsaBuffer
_08060C88:
	ldr r0, _08060CB0 @ =0x08295E90
	ldr r1, _08060CB4 @ =gEkrTsaBuffer
	bl LZ77UnCompWram
_08060C90:
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _08060CBC
	ldr r0, _08060CB4 @ =gEkrTsaBuffer
	ldr r1, _08060CB8 @ =gBg1Tm
	movs r2, #1
	str r2, [sp]
	adds r2, #0xff
	str r2, [sp, #4]
	movs r2, #0x1e
	movs r3, #0x14
	bl sub_080672E8
	b _08060CD0
	.align 2, 0
_08060CB0: .4byte 0x08295E90
_08060CB4: .4byte gEkrTsaBuffer
_08060CB8: .4byte gBg1Tm
_08060CBC:
	ldr r0, _08060D04 @ =gEkrTsaBuffer
	ldr r1, _08060D08 @ =gBg1Tm
	movs r2, #1
	str r2, [sp]
	adds r2, #0xff
	str r2, [sp, #4]
	movs r2, #0x1e
	movs r3, #0x14
	bl sub_080672B8
_08060CD0:
	movs r0, #2
	bl EnableBgSync
	bl SpellFx_SetSomeColorEffect
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r2, _08060D0C @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08060D04: .4byte gEkrTsaBuffer
_08060D08: .4byte gBg1Tm
_08060D0C: .4byte gDispIo

	thumb_func_start sub_08060D10
sub_08060D10: @ 0x08060D10
	push {lr}
	bl SpellFx_ClearBG1
	ldr r1, _08060D28 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	pop {r0}
	bx r0
	.align 2, 0
_08060D28: .4byte 0x0201774C

	thumb_func_start sub_08060D2C
sub_08060D2C: @ 0x08060D2C
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	ldrh r3, [r2, #0x2e]
	lsls r1, r3, #0x10
	cmp r0, r1
	ble _08060D46
	adds r0, r2, #0
	bl Proc_Break
_08060D46:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08060D4C
sub_08060D4C: @ 0x08060D4C
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08060D80 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08060D84 @ =0x08C12EF8
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	str r1, [r0, #0x44]
	ldr r1, _08060D88 @ =0x081EEFC2
	str r1, [r0, #0x48]
	ldr r1, _08060D8C @ =0x0829E4D0
	str r1, [r0, #0x4c]
	adds r0, r1, #0
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08060D80: .4byte 0x0201774C
_08060D84: .4byte 0x08C12EF8
_08060D88: .4byte 0x081EEFC2
_08060D8C: .4byte 0x0829E4D0

	thumb_func_start sub_08060D90
sub_08060D90: @ 0x08060D90
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _08060DB6
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	b _08060DCC
_08060DB6:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _08060DCC
	ldr r1, _08060DD4 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08060DCC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08060DD4: .4byte 0x0201774C

	thumb_func_start sub_08060DD8
sub_08060DD8: @ 0x08060DD8
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _08060E30 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08060E34 @ =0x08C12F18
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x28
	strh r0, [r4, #0x2e]
	ldr r3, _08060E38 @ =0x08C42AA4
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	ldr r1, [r4, #0x5c]
	ldrh r1, [r1, #2]
	strh r1, [r0, #2]
	ldr r1, [r4, #0x5c]
	ldrh r1, [r1, #4]
	strh r1, [r0, #4]
	ldr r0, _08060E3C @ =0x0829E9AC
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _08060E40 @ =0x0829E550
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08060E30: .4byte 0x0201774C
_08060E34: .4byte 0x08C12F18
_08060E38: .4byte 0x08C42AA4
_08060E3C: .4byte 0x0829E9AC
_08060E40: .4byte 0x0829E550

	thumb_func_start sub_08060E44
sub_08060E44: @ 0x08060E44
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	ldrh r3, [r2, #0x2e]
	lsls r1, r3, #0x10
	cmp r0, r1
	bne _08060E66
	ldr r1, _08060E6C @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r2, #0
	bl Proc_Break
_08060E66:
	pop {r0}
	bx r0
	.align 2, 0
_08060E6C: .4byte 0x0201774C

	thumb_func_start sub_08060E70
sub_08060E70: @ 0x08060E70
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _08060EA8 @ =0x08C12F30
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08060EA8: .4byte 0x08C12F30

	thumb_func_start sub_08060EAC
sub_08060EAC: @ 0x08060EAC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r6, r0, #0
	ldr r0, [r6, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	bl GetSpellAnimationStartFrame
	adds r4, r0, #0
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	movs r7, #0
	movs r1, #0
	mov r8, r1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08060EE0
	ldr r0, [r6, #0x5c]
	subs r1, #1
	bl sub_0804EC74
_08060EE0:
	movs r3, #0x2c
	ldrsh r1, [r6, r3]
	adds r0, r4, #1
	cmp r1, r0
	bne _08060F50
	adds r0, r5, #0
	bl sub_08061094
	adds r0, r5, #0
	bl sub_080614E4
	ldr r3, _08060F48 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r7, [r0]
	adds r0, #1
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r7, [r0]
	str r1, [sp]
	mov r3, r8
	str r3, [sp, #4]
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0x14
	movs r3, #0
	bl sub_080566F0
	mov r0, r8
	str r0, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r1, #0x32
	movs r2, #0xa
	movs r3, #0x10
	bl sub_080566F0
	ldr r0, _08060F4C @ =0x000002C7
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	b _08061050
	.align 2, 0
_08060F48: .4byte gDispIo
_08060F4C: .4byte 0x000002C7
_08060F50:
	adds r0, r4, #0
	adds r0, #0x45
	cmp r1, r0
	bne _08060FA8
	ldr r0, [r6, #0x5c]
	movs r1, #0x5a
	movs r2, #0xa
	bl sub_080569B8
	adds r0, r5, #0
	movs r1, #0x54
	bl sub_080611CC
	ldr r3, _08060FA4 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r7, [r0]
	adds r0, #1
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r7, [r0]
	str r1, [sp]
	mov r3, r8
	str r3, [sp, #4]
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0x14
	movs r3, #0
	bl sub_080566F0
	movs r0, #0xb2
	lsls r0, r0, #2
	b _0806104A
	.align 2, 0
_08060FA4: .4byte gDispIo
_08060FA8:
	adds r0, r4, #0
	adds r0, #0x58
	cmp r1, r0
	bne _08060FBA
	adds r0, r5, #0
	movs r1, #0x32
	bl sub_08061448
	b _08061086
_08060FBA:
	adds r0, r4, #0
	adds r0, #0x5d
	cmp r1, r0
	beq _08060FCA
	adds r0, r4, #0
	adds r0, #0x6c
	cmp r1, r0
	bne _08060FD4
_08060FCA:
	adds r0, r5, #0
	movs r1, #5
	bl sub_0804F7B8
	b _08061086
_08060FD4:
	adds r0, r4, #0
	adds r0, #0x99
	cmp r1, r0
	bne _08061006
	adds r0, r5, #0
	movs r1, #0xa
	bl sub_0804F7B8
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, r6, #0
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl StartBattleAnimHitEffectsDefault
	ldrb r0, [r4]
	cmp r0, #0
	bne _08061086
	adds r0, r5, #0
	bl sub_08068500
	b _08061086
_08061006:
	adds r0, r4, #0
	adds r0, #0x9f
	cmp r1, r0
	bne _08061028
	adds r0, r6, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	beq _08061086
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r6, #0
	bl Proc_Break
	b _08061086
_08061028:
	adds r0, r4, #0
	adds r0, #0xa3
	cmp r1, r0
	bne _0806105C
	ldr r0, [r6, #0x5c]
	movs r1, #0xf
	movs r2, #9
	bl sub_080569B8
	adds r0, r5, #0
	movs r1, #0x1e
	bl sub_080612D4
	adds r0, r5, #0
	bl sub_080613B8
	ldr r0, _08061058 @ =0x000002C9
_0806104A:
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x78
_08061050:
	movs r3, #1
	bl PlaySFX
	b _08061086
	.align 2, 0
_08061058: .4byte 0x000002C9
_0806105C:
	adds r0, r4, #0
	adds r0, #0xb3
	cmp r1, r0
	bne _08061070
	ldr r0, [r6, #0x5c]
	movs r1, #0xf
	movs r2, #8
	bl sub_080569B8
	b _08061086
_08061070:
	adds r0, r4, #0
	adds r0, #0xcc
	cmp r1, r0
	bne _08061086
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r6, #0
	bl Proc_Break
_08061086:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08061094
sub_08061094: @ 0x08061094
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _080610F8 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080610FC @ =0x08C12F48
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _08061100 @ =0x081EEFD4
	str r0, [r5, #0x48]
	ldr r0, _08061104 @ =0x08C12F60
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _08061108 @ =0x0829E9CC
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, _0806110C @ =0x0829FBE4
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, _08061110 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0806111E
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _08061114
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _0806111E
	.align 2, 0
_080610F8: .4byte 0x0201774C
_080610FC: .4byte 0x08C12F48
_08061100: .4byte 0x081EEFD4
_08061104: .4byte 0x08C12F60
_08061108: .4byte 0x0829E9CC
_0806110C: .4byte 0x0829FBE4
_08061110: .4byte gEkrDistanceType
_08061114:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_0806111E:
	bl SpellFx_SetSomeColorEffect
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08061128
sub_08061128: @ 0x08061128
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _080611A0
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	ldr r0, _0806117C @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _080611BE
	ldr r0, [r4, #0x5c]
	bl GetAISSubjectId
	adds r1, r0, #0
	cmp r1, #0
	bne _08061184
	ldr r0, _08061180 @ =gBg1Tm
	str r1, [sp]
	movs r1, #3
	movs r2, #0x14
	movs r3, #0
	bl sub_080671A0
	b _08061194
	.align 2, 0
_0806117C: .4byte gEkrDistanceType
_08061180: .4byte gBg1Tm
_08061184:
	ldr r0, _0806119C @ =0x0202349A
	movs r1, #0
	str r1, [sp]
	movs r1, #3
	movs r2, #0x14
	movs r3, #0
	bl sub_080671A0
_08061194:
	movs r0, #2
	bl EnableBgSync
	b _080611BE
	.align 2, 0
_0806119C: .4byte 0x0202349A
_080611A0:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _080611BE
	bl SpellFx_ClearBG1
	ldr r1, _080611C8 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_080611BE:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080611C8: .4byte 0x0201774C

	thumb_func_start sub_080611CC
sub_080611CC: @ 0x080611CC
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _08061254 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08061258 @ =0x08C12F90
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	ldr r0, _0806125C @ =0x082A222C
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, _08061260 @ =0x082A2C1C
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_ClearBG1
	ldr r0, _08061264 @ =0x082A2C9C
	ldr r4, _08061268 @ =gEkrTsaBuffer
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r1, _0806126C @ =gBg1Tm
	movs r0, #1
	str r0, [sp]
	adds r0, #0xff
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0x20
	movs r3, #0x20
	bl sub_080672E8
	movs r0, #2
	bl EnableBgSync
	bl SpellFx_SetSomeColorEffect
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r2, _08061270 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08061254: .4byte 0x0201774C
_08061258: .4byte 0x08C12F90
_0806125C: .4byte 0x082A222C
_08061260: .4byte 0x082A2C1C
_08061264: .4byte 0x082A2C9C
_08061268: .4byte gEkrTsaBuffer
_0806126C: .4byte gBg1Tm
_08061270: .4byte gDispIo

	thumb_func_start sub_08061274
sub_08061274: @ 0x08061274
	push {lr}
	bl SpellFx_ClearBG1
	ldr r1, _0806128C @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	pop {r0}
	bx r0
	.align 2, 0
_0806128C: .4byte 0x0201774C

	thumb_func_start sub_08061290
sub_08061290: @ 0x08061290
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _080612AC
	ldr r1, _080612A8 @ =gDispIo
	ldrh r0, [r1, #0x20]
	adds r0, #2
	b _080612B2
	.align 2, 0
_080612A8: .4byte gDispIo
_080612AC:
	ldr r1, _080612D0 @ =gDispIo
	ldrh r0, [r1, #0x20]
	subs r0, #2
_080612B2:
	strh r0, [r1, #0x20]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _080612CA
	adds r0, r4, #0
	bl Proc_Break
_080612CA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080612D0: .4byte gDispIo

	thumb_func_start sub_080612D4
sub_080612D4: @ 0x080612D4
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _0806135C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08061360 @ =0x08C12FB0
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	ldr r0, _08061364 @ =0x082A0E30
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, _08061368 @ =0x082A1C90
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_ClearBG1
	ldr r0, _0806136C @ =0x082A1DD0
	ldr r4, _08061370 @ =gEkrTsaBuffer
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r1, _08061374 @ =gBg1Tm
	movs r0, #1
	str r0, [sp]
	adds r0, #0xff
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0x1e
	movs r3, #0x14
	bl sub_080672E8
	movs r0, #2
	bl EnableBgSync
	bl SpellFx_SetSomeColorEffect
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r2, _08061378 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806135C: .4byte 0x0201774C
_08061360: .4byte 0x08C12FB0
_08061364: .4byte 0x082A0E30
_08061368: .4byte 0x082A1C90
_0806136C: .4byte 0x082A1DD0
_08061370: .4byte gEkrTsaBuffer
_08061374: .4byte gBg1Tm
_08061378: .4byte gDispIo

	thumb_func_start sub_0806137C
sub_0806137C: @ 0x0806137C
	push {lr}
	bl SpellFx_ClearBG1
	ldr r1, _08061394 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	pop {r0}
	bx r0
	.align 2, 0
_08061394: .4byte 0x0201774C

	thumb_func_start sub_08061398
sub_08061398: @ 0x08061398
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	ldrh r3, [r2, #0x2e]
	lsls r1, r3, #0x10
	cmp r0, r1
	ble _080613B2
	adds r0, r2, #0
	bl Proc_Break
_080613B2:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080613B8
sub_080613B8: @ 0x080613B8
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _080613EC @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080613F0 @ =0x08C12FD0
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	str r1, [r0, #0x44]
	ldr r1, _080613F4 @ =0x081EF02A
	str r1, [r0, #0x48]
	ldr r1, _080613F8 @ =0x082A1C90
	str r1, [r0, #0x4c]
	ldr r0, _080613FC @ =0x082A0DB0
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080613EC: .4byte 0x0201774C
_080613F0: .4byte 0x08C12FD0
_080613F4: .4byte 0x081EF02A
_080613F8: .4byte 0x082A1C90
_080613FC: .4byte 0x082A0DB0

	thumb_func_start sub_08061400
sub_08061400: @ 0x08061400
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _08061426
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	b _0806143C
_08061426:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0806143C
	ldr r1, _08061444 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0806143C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08061444: .4byte 0x0201774C

	thumb_func_start sub_08061448
sub_08061448: @ 0x08061448
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r1, _0806149C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080614A0 @ =0x08C12FF0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	strh r6, [r4, #0x2e]
	ldr r3, _080614A4 @ =0x08C43190
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	movs r1, #0x78
	strh r1, [r0, #2]
	movs r1, #0x48
	strh r1, [r0, #4]
	ldr r0, _080614A8 @ =0x082A3700
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _080614AC @ =0x082A2F14
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806149C: .4byte 0x0201774C
_080614A0: .4byte 0x08C12FF0
_080614A4: .4byte 0x08C43190
_080614A8: .4byte 0x082A3700
_080614AC: .4byte 0x082A2F14

	thumb_func_start sub_080614B0
sub_080614B0: @ 0x080614B0
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _080614D8
	ldr r0, _080614E0 @ =0x0201774C
	ldr r1, [r0]
	subs r1, #1
	str r1, [r0]
	ldr r0, [r4, #0x60]
	bl AnimDelete
	adds r0, r4, #0
	bl Proc_Break
_080614D8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080614E0: .4byte 0x0201774C

	thumb_func_start sub_080614E4
sub_080614E4: @ 0x080614E4
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _08061540 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08061544 @ =0x08C13008
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	adds r0, r5, #0
	bl GetCoreAIStruct
	ldr r3, _08061548 @ =0x08C10828
	ldr r0, [r4, #0x5c]
	str r3, [sp]
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	ldr r1, _0806154C @ =0x0000F3FF
	ldrh r2, [r0, #8]
	ands r1, r2
	movs r3, #0x80
	lsls r3, r3, #3
	adds r2, r3, #0
	orrs r1, r2
	strh r1, [r0, #8]
	ldr r0, _08061550 @ =0x082A3A2C
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _08061554 @ =0x082A3720
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08061540: .4byte 0x0201774C
_08061544: .4byte 0x08C13008
_08061548: .4byte 0x08C10828
_0806154C: .4byte 0x0000F3FF
_08061550: .4byte 0x082A3A2C
_08061554: .4byte 0x082A3720

	thumb_func_start sub_08061558
sub_08061558: @ 0x08061558
	push {lr}
	ldr r2, _0806156C @ =0x0201774C
	ldr r1, [r2]
	subs r1, #1
	str r1, [r2]
	ldr r0, [r0, #0x60]
	bl AnimDelete
	pop {r0}
	bx r0
	.align 2, 0
_0806156C: .4byte 0x0201774C

	thumb_func_start sub_08061570
sub_08061570: @ 0x08061570
	push {lr}
	ldr r2, [r0, #0x60]
	ldr r1, _08061588 @ =0x08C435EC
	str r1, [r2, #0x24]
	str r1, [r2, #0x20]
	movs r1, #0
	strh r1, [r2, #6]
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0
_08061588: .4byte 0x08C435EC

	thumb_func_start sub_0806158C
sub_0806158C: @ 0x0806158C
	push {lr}
	ldr r2, [r0, #0x60]
	ldr r1, _080615A4 @ =0x08C43640
	str r1, [r2, #0x24]
	str r1, [r2, #0x20]
	movs r1, #0
	strh r1, [r2, #6]
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0
_080615A4: .4byte 0x08C43640

	thumb_func_start sub_080615A8
sub_080615A8: @ 0x080615A8
	push {lr}
	ldr r2, [r0, #0x60]
	ldr r1, _080615C0 @ =0x08C4364C
	str r1, [r2, #0x24]
	str r1, [r2, #0x20]
	movs r1, #0
	strh r1, [r2, #6]
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0
_080615C0: .4byte 0x08C4364C

	thumb_func_start sub_080615C4
sub_080615C4: @ 0x080615C4
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _080615FC @ =0x08C13050
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080615FC: .4byte 0x08C13050

	thumb_func_start sub_08061600
sub_08061600: @ 0x08061600
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	bl GetSpellAnimationStartFrame
	adds r2, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r6, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0806163C
	adds r0, r5, #0
	bl sub_08061758
	ldr r0, _08061638 @ =0x000002C1
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	b _0806169E
	.align 2, 0
_08061638: .4byte 0x000002C1
_0806163C:
	cmp r0, #0xe
	bne _08061648
	adds r0, r5, #0
	bl sub_080617EC
	b _0806174E
_08061648:
	cmp r0, #0x2c
	bne _08061660
	ldr r0, _0806165C @ =0x000002C2
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	b _0806169E
	.align 2, 0
_0806165C: .4byte 0x000002C2
_08061660:
	cmp r0, #0x53
	bne _08061678
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
	adds r0, r5, #0
	movs r1, #0xa
	bl sub_0804F7B8
	b _0806174E
_08061678:
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	adds r0, r2, #0
	adds r0, #0x5d
	cmp r1, r0
	bne _0806168C
	adds r0, r5, #0
	bl sub_08061880
	b _0806174E
_0806168C:
	adds r0, r2, #0
	adds r0, #0x67
	cmp r1, r0
	bne _080616AC
	ldr r0, _080616A8 @ =0x000002C3
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
_0806169E:
	movs r3, #1
	bl PlaySFX
	b _0806174E
	.align 2, 0
_080616A8: .4byte 0x000002C3
_080616AC:
	adds r0, r2, #0
	adds r0, #0x7d
	cmp r1, r0
	bne _080616C0
	str r6, [sp]
	str r6, [sp, #4]
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0xa
	b _08061730
_080616C0:
	adds r0, r2, #0
	adds r0, #0x89
	cmp r1, r0
	bne _080616D6
	adds r0, r5, #0
	bl sub_0806196C
	adds r0, r5, #0
	bl sub_08061A8C
	b _0806174E
_080616D6:
	adds r0, r2, #0
	adds r0, #0x90
	cmp r1, r0
	bne _08061706
	adds r0, r5, #0
	movs r1, #0xa
	bl sub_0804F7B8
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl StartBattleAnimHitEffectsDefault
	ldrb r0, [r4]
	cmp r0, #0
	bne _0806174E
	adds r0, r5, #0
	bl sub_08068500
	b _0806174E
_08061706:
	adds r0, r2, #0
	adds r0, #0x9a
	cmp r1, r0
	bne _08061738
	ldr r0, [r4, #0x5c]
	movs r1, #0x55
	movs r2, #1
	bl sub_080565FC
	ldr r0, [r4, #0x5c]
	movs r1, #0x38
	bl sub_0805618C
	adds r0, r5, #0
	bl sub_08061B1C
	str r6, [sp]
	str r6, [sp, #4]
	adds r0, r5, #0
	movs r1, #0x2c
	movs r2, #0xc
_08061730:
	movs r3, #0x10
	bl sub_080566F0
	b _0806174E
_08061738:
	adds r0, r2, #0
	adds r0, #0xf5
	cmp r1, r0
	bne _0806174E
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r4, #0
	bl Proc_Break
_0806174E:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08061758
sub_08061758: @ 0x08061758
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _080617BC @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080617C0 @ =0x08C13068
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _080617C4 @ =0x081EF07C
	str r0, [r5, #0x48]
	ldr r0, _080617C8 @ =0x08C13080
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _080617CC @ =0x082A3A4C
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, _080617D0 @ =0x082A43C4
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, _080617D4 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _080617E2
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _080617D8
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _080617E2
	.align 2, 0
_080617BC: .4byte 0x0201774C
_080617C0: .4byte 0x08C13068
_080617C4: .4byte 0x081EF07C
_080617C8: .4byte 0x08C13080
_080617CC: .4byte 0x082A3A4C
_080617D0: .4byte 0x082A43C4
_080617D4: .4byte gEkrDistanceType
_080617D8:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_080617E2:
	bl SpellFx_SetSomeColorEffect
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080617EC
sub_080617EC: @ 0x080617EC
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _08061850 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08061854 @ =0x08C13068
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _08061858 @ =0x081EF0AA
	str r0, [r5, #0x48]
	ldr r0, _0806185C @ =0x08C13080
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _08061860 @ =0x082A3A4C
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, _08061864 @ =0x082A43C4
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, _08061868 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08061876
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _0806186C
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
	b _08061876
	.align 2, 0
_08061850: .4byte 0x0201774C
_08061854: .4byte 0x08C13068
_08061858: .4byte 0x081EF0AA
_0806185C: .4byte 0x08C13080
_08061860: .4byte 0x082A3A4C
_08061864: .4byte 0x082A43C4
_08061868: .4byte gEkrDistanceType
_0806186C:
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
_08061876:
	bl SpellFx_SetSomeColorEffect
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08061880
sub_08061880: @ 0x08061880
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _080618E4 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080618E8 @ =0x08C13068
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _080618EC @ =0x081EF0DC
	str r0, [r5, #0x48]
	ldr r0, _080618F0 @ =0x08C13080
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _080618F4 @ =0x082A3A4C
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, _080618F8 @ =0x082A43C4
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, _080618FC @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0806190A
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _08061900
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _0806190A
	.align 2, 0
_080618E4: .4byte 0x0201774C
_080618E8: .4byte 0x08C13068
_080618EC: .4byte 0x081EF0DC
_080618F0: .4byte 0x08C13080
_080618F4: .4byte 0x082A3A4C
_080618F8: .4byte 0x082A43C4
_080618FC: .4byte gEkrDistanceType
_08061900:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_0806190A:
	bl SpellFx_SetSomeColorEffect
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08061914
sub_08061914: @ 0x08061914
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _08061942
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	b _08061960
_08061942:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _08061960
	bl SpellFx_ClearBG1
	ldr r1, _08061968 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_08061960:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08061968: .4byte 0x0201774C

	thumb_func_start sub_0806196C
sub_0806196C: @ 0x0806196C
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	ldr r1, _080619B0 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080619B4 @ =0x08C130F0
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	movs r0, #5
	strh r0, [r5, #0x2e]
	ldr r0, _080619B8 @ =0x0829474C
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	bl SpellFx_ClearBG1
	ldr r0, _080619BC @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _080619C8
	ldr r0, _080619C0 @ =0x08295A34
	ldr r1, _080619C4 @ =gEkrTsaBuffer
	bl LZ77UnCompWram
	b _080619D0
	.align 2, 0
_080619B0: .4byte 0x0201774C
_080619B4: .4byte 0x08C130F0
_080619B8: .4byte 0x0829474C
_080619BC: .4byte gEkrDistanceType
_080619C0: .4byte 0x08295A34
_080619C4: .4byte gEkrTsaBuffer
_080619C8:
	ldr r0, _080619F0 @ =0x08295E90
	ldr r1, _080619F4 @ =gEkrTsaBuffer
	bl LZ77UnCompWram
_080619D0:
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _080619FC
	ldr r0, _080619F4 @ =gEkrTsaBuffer
	ldr r1, _080619F8 @ =gBg1Tm
	movs r2, #1
	str r2, [sp]
	adds r2, #0xff
	str r2, [sp, #4]
	movs r2, #0x1e
	movs r3, #0x14
	bl sub_080672E8
	b _08061A10
	.align 2, 0
_080619F0: .4byte 0x08295E90
_080619F4: .4byte gEkrTsaBuffer
_080619F8: .4byte gBg1Tm
_080619FC:
	ldr r0, _08061A44 @ =gEkrTsaBuffer
	ldr r1, _08061A48 @ =gBg1Tm
	movs r2, #1
	str r2, [sp]
	adds r2, #0xff
	str r2, [sp, #4]
	movs r2, #0x1e
	movs r3, #0x14
	bl sub_080672B8
_08061A10:
	movs r0, #2
	bl EnableBgSync
	bl SpellFx_SetSomeColorEffect
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r2, _08061A4C @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08061A44: .4byte gEkrTsaBuffer
_08061A48: .4byte gBg1Tm
_08061A4C: .4byte gDispIo

	thumb_func_start sub_08061A50
sub_08061A50: @ 0x08061A50
	push {lr}
	bl SpellFx_ClearBG1
	ldr r1, _08061A68 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	pop {r0}
	bx r0
	.align 2, 0
_08061A68: .4byte 0x0201774C

	thumb_func_start sub_08061A6C
sub_08061A6C: @ 0x08061A6C
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	ldrh r3, [r2, #0x2e]
	lsls r1, r3, #0x10
	cmp r0, r1
	ble _08061A86
	adds r0, r2, #0
	bl Proc_Break
_08061A86:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08061A8C
sub_08061A8C: @ 0x08061A8C
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08061AC4 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08061AC8 @ =0x08C13110
	movs r1, #3
	bl Proc_Start
	adds r1, r0, #0
	str r4, [r1, #0x5c]
	movs r0, #0
	strh r0, [r1, #0x2c]
	strh r0, [r1, #0x2e]
	str r0, [r1, #0x44]
	ldr r0, _08061ACC @ =0x081EF0F6
	str r0, [r1, #0x48]
	ldr r0, _08061AD0 @ =0x08295974
	str r0, [r1, #0x4c]
	adds r0, #0x60
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08061AC4: .4byte 0x0201774C
_08061AC8: .4byte 0x08C13110
_08061ACC: .4byte 0x081EF0F6
_08061AD0: .4byte 0x08295974

	thumb_func_start sub_08061AD4
sub_08061AD4: @ 0x08061AD4
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _08061AFA
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	b _08061B10
_08061AFA:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _08061B10
	ldr r1, _08061B18 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08061B10:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08061B18: .4byte 0x0201774C

	thumb_func_start sub_08061B1C
sub_08061B1C: @ 0x08061B1C
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08061B64 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08061B68 @ =0x08C13130
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _08061B6C @ =0x081EF108
	str r1, [r0, #0x48]
	ldr r1, _08061B70 @ =0x08C13148
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r1, _08061B74 @ =0x08C13178
	str r1, [r0, #0x54]
	ldr r0, _08061B78 @ =0x082B4BD4
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	bl SpellFx_SetSomeColorEffect
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08061B64: .4byte 0x0201774C
_08061B68: .4byte 0x08C13130
_08061B6C: .4byte 0x081EF108
_08061B70: .4byte 0x08C13148
_08061B74: .4byte 0x08C13178
_08061B78: .4byte 0x082B4BD4

	thumb_func_start sub_08061B7C
sub_08061B7C: @ 0x08061B7C
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	blt _08061BB8
	ldr r5, [r7, #0x4c]
	ldr r6, [r7, #0x50]
	ldr r0, [r7, #0x54]
	lsls r4, r4, #2
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, [r7, #0x5c]
	adds r5, r4, r5
	ldr r1, [r5]
	adds r4, r4, r6
	ldr r2, [r4]
	bl SpellFx_WriteBgMap
	b _08061BD6
_08061BB8:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _08061BD6
	bl SpellFx_ClearBG1
	ldr r1, _08061BDC @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r7, #0
	bl Proc_Break
_08061BD6:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08061BDC: .4byte 0x0201774C

	thumb_func_start sub_08061BE0
sub_08061BE0: @ 0x08061BE0
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_08050348
	bl SpellFx_ClearBG1Position
	ldr r0, _08061C18 @ =0x08C131A8
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08061C18: .4byte 0x08C131A8

	thumb_func_start sub_08061C1C
sub_08061C1C: @ 0x08061C1C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r6, r0, #0
	ldr r0, [r6, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	bl GetSpellAnimationStartFrame
	adds r4, r0, #0
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	movs r7, #0
	movs r1, #0
	mov r8, r1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08061C50
	ldr r0, [r6, #0x5c]
	subs r1, #1
	bl sub_0804EC74
_08061C50:
	movs r0, #0x2c
	ldrsh r1, [r6, r0]
	adds r0, r4, #1
	cmp r1, r0
	bne _08061C64
	adds r0, r5, #0
	movs r1, #0xa
	bl sub_0804F7B8
	b _08061D76
_08061C64:
	adds r0, r4, #0
	adds r0, #0xb
	cmp r1, r0
	bne _08061C78
	adds r0, r5, #0
	bl sub_08061D84
	movs r0, #0xb1
	lsls r0, r0, #2
	b _08061D4E
_08061C78:
	adds r0, r4, #0
	adds r0, #0x1a
	cmp r1, r0
	bne _08061CC8
	adds r0, r5, #0
	movs r1, #0x72
	bl sub_080620FC
	ldr r3, _08061CC0 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r7, [r0]
	adds r0, #1
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r7, [r0]
	str r1, [sp]
	mov r0, r8
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r1, #0xa
	movs r2, #0xa
	movs r3, #0
	bl sub_080566F0
	ldr r0, _08061CC4 @ =0x000002C5
	b _08061D4E
	.align 2, 0
_08061CC0: .4byte gDispIo
_08061CC4: .4byte 0x000002C5
_08061CC8:
	adds r0, r4, #0
	adds r0, #0x4c
	cmp r1, r0
	bne _08061CE2
	adds r0, r5, #0
	movs r1, #0x3c
	bl sub_08061F48
	adds r0, r5, #0
	movs r1, #0x3c
	bl sub_08061FC4
	b _08061D76
_08061CE2:
	adds r0, r4, #0
	adds r0, #0x56
	cmp r1, r0
	bne _08061CF6
	adds r0, r5, #0
	movs r1, #0x37
	movs r2, #0x2d
	bl sub_0806205C
	b _08061D76
_08061CF6:
	adds r0, r4, #0
	adds r0, #0x8d
	cmp r1, r0
	bne _08061D20
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, r6, #0
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl StartBattleAnimHitEffectsDefault
	ldrb r0, [r4]
	cmp r0, #0
	bne _08061D76
	adds r0, r5, #0
	bl sub_08068500
	b _08061D76
_08061D20:
	adds r0, r4, #0
	adds r0, #0x8e
	cmp r1, r0
	bne _08061D60
	adds r0, r5, #0
	movs r1, #0x64
	movs r2, #0xa
	bl sub_080569B8
	adds r0, r5, #0
	movs r1, #0x64
	bl sub_08061E40
	mov r0, r8
	str r0, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r1, #0x50
	movs r2, #0x14
	movs r3, #0x10
	bl sub_080566F0
	ldr r0, _08061D5C @ =0x000002C6
_08061D4E:
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x78
	movs r3, #0
	bl PlaySFX
	b _08061D76
	.align 2, 0
_08061D5C: .4byte 0x000002C6
_08061D60:
	adds r0, r4, #0
	adds r0, #0xf5
	cmp r1, r0
	bne _08061D76
	bl SpellFx_Finish
	bl sub_080503A0
	adds r0, r6, #0
	bl Proc_Break
_08061D76:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08061D84
sub_08061D84: @ 0x08061D84
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08061DD0 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08061DD4 @ =0x08C131C0
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _08061DD8 @ =0x081EF17A
	str r1, [r0, #0x48]
	ldr r1, _08061DDC @ =0x08C131D8
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r0, _08061DE0 @ =0x082A3A4C
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, _08061DE4 @ =0x082A43C4
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	bl SpellFx_SetSomeColorEffect
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08061DD0: .4byte 0x0201774C
_08061DD4: .4byte 0x08C131C0
_08061DD8: .4byte 0x081EF17A
_08061DDC: .4byte 0x08C131D8
_08061DE0: .4byte 0x082A3A4C
_08061DE4: .4byte 0x082A43C4

	thumb_func_start sub_08061DE8
sub_08061DE8: @ 0x08061DE8
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _08061E16
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	b _08061E34
_08061E16:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _08061E34
	bl SpellFx_ClearBG1
	ldr r1, _08061E3C @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_08061E34:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08061E3C: .4byte 0x0201774C

	thumb_func_start sub_08061E40
sub_08061E40: @ 0x08061E40
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _08061EC8 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08061ECC @ =0x08C13208
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	ldr r0, _08061ED0 @ =0x082B6970
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, _08061ED4 @ =0x082B6ED0
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_ClearBG1
	ldr r0, _08061ED8 @ =0x082B6EF0
	ldr r4, _08061EDC @ =gEkrTsaBuffer
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r1, _08061EE0 @ =gBg1Tm
	movs r0, #1
	str r0, [sp]
	adds r0, #0xff
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0x20
	movs r3, #0x20
	bl sub_080672B8
	movs r0, #2
	bl EnableBgSync
	bl SpellFx_SetSomeColorEffect
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r2, _08061EE4 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08061EC8: .4byte 0x0201774C
_08061ECC: .4byte 0x08C13208
_08061ED0: .4byte 0x082B6970
_08061ED4: .4byte 0x082B6ED0
_08061ED8: .4byte 0x082B6EF0
_08061EDC: .4byte gEkrTsaBuffer
_08061EE0: .4byte gBg1Tm
_08061EE4: .4byte gDispIo

	thumb_func_start sub_08061EE8
sub_08061EE8: @ 0x08061EE8
	push {lr}
	bl SpellFx_ClearBG1
	ldr r1, _08061F00 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	pop {r0}
	bx r0
	.align 2, 0
_08061F00: .4byte 0x0201774C

	thumb_func_start sub_08061F04
sub_08061F04: @ 0x08061F04
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _08061F20
	ldr r1, _08061F1C @ =gDispIo
	ldrh r0, [r1, #0x20]
	adds r0, #0xc
	b _08061F26
	.align 2, 0
_08061F1C: .4byte gDispIo
_08061F20:
	ldr r1, _08061F44 @ =gDispIo
	ldrh r0, [r1, #0x20]
	subs r0, #0xc
_08061F26:
	strh r0, [r1, #0x20]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08061F3E
	adds r0, r4, #0
	bl Proc_Break
_08061F3E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08061F44: .4byte gDispIo

	thumb_func_start sub_08061F48
sub_08061F48: @ 0x08061F48
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r1, _08061FAC @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08061FB0 @ =0x08C13228
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	strh r6, [r4, #0x2e]
	ldr r3, _08061FB4 @ =0x08C44720
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	movs r1, #0x78
	strh r1, [r0, #2]
	movs r1, #0x48
	strh r1, [r0, #4]
	ldr r1, _08061FB8 @ =0x0000F3FF
	ldrh r2, [r0, #8]
	ands r1, r2
	movs r3, #0x80
	lsls r3, r3, #3
	adds r2, r3, #0
	orrs r1, r2
	strh r1, [r0, #8]
	ldr r0, _08061FBC @ =0x082B99D0
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _08061FC0 @ =0x082B96A0
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08061FAC: .4byte 0x0201774C
_08061FB0: .4byte 0x08C13228
_08061FB4: .4byte 0x08C44720
_08061FB8: .4byte 0x0000F3FF
_08061FBC: .4byte 0x082B99D0
_08061FC0: .4byte 0x082B96A0

	thumb_func_start sub_08061FC4
sub_08061FC4: @ 0x08061FC4
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r1, _08062018 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0806201C @ =0x08C13228
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	strh r6, [r4, #0x2e]
	ldr r3, _08062020 @ =0x08C447B8
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	movs r1, #0x78
	strh r1, [r0, #2]
	movs r1, #0x48
	strh r1, [r0, #4]
	ldr r1, _08062024 @ =0x0000F3FF
	ldrh r2, [r0, #8]
	ands r1, r2
	movs r3, #0x80
	lsls r3, r3, #3
	adds r2, r3, #0
	orrs r1, r2
	strh r1, [r0, #8]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08062018: .4byte 0x0201774C
_0806201C: .4byte 0x08C13228
_08062020: .4byte 0x08C447B8
_08062024: .4byte 0x0000F3FF

	thumb_func_start sub_08062028
sub_08062028: @ 0x08062028
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _08062050
	ldr r0, _08062058 @ =0x0201774C
	ldr r1, [r0]
	subs r1, #1
	str r1, [r0]
	ldr r0, [r4, #0x60]
	bl AnimDelete
	adds r0, r4, #0
	bl Proc_Break
_08062050:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08062058: .4byte 0x0201774C

	thumb_func_start sub_0806205C
sub_0806205C: @ 0x0806205C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r1, #0
	adds r5, r2, #0
	ldr r1, _0806208C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08062090 @ =0x08C13240
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	adds r0, r4, #0
	adds r1, r6, #0
	bl sub_0804F7B8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806208C: .4byte 0x0201774C
_08062090: .4byte 0x08C13240

	thumb_func_start sub_08062094
sub_08062094: @ 0x08062094
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r6, r0]
	movs r1, #0x2e
	ldrsh r0, [r6, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	adds r5, r0, #0
	ldr r0, _080620F0 @ =gPal
	ldr r4, _080620F4 @ =0x020165C8
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r4, #0
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x20
	adds r3, r5, #0
	bl sub_08067750
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r6, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _080620E8
	ldr r1, _080620F8 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r6, #0
	bl Proc_Break
_080620E8:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080620F0: .4byte gPal
_080620F4: .4byte 0x020165C8
_080620F8: .4byte 0x0201774C

	thumb_func_start sub_080620FC
sub_080620FC: @ 0x080620FC
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r4, r1, #0
	ldr r1, _08062180 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08062184 @ =0x08C13258
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r7, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	strh r0, [r5, #0x2e]
	strh r4, [r5, #0x30]
	str r0, [r5, #0x44]
	ldr r0, _08062188 @ =0x081EF1AC
	str r0, [r5, #0x48]
	ldr r4, _0806218C @ =0x082B9224
	str r4, [r5, #0x4c]
	ldr r0, _08062190 @ =0x082B782C
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	subs r4, #0x20
	adds r0, r4, #0
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	ldr r0, [r5, #0x5c]
	ldr r2, _08062194 @ =0x082B9244
	adds r1, r2, #0
	bl SpellFx_WriteBgMap
	ldr r0, _08062198 @ =gAnims
	ldr r0, [r0]
	bl sub_0806527C
	cmp r0, #0
	bne _080621A0
	ldr r3, _0806219C @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x14]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x14]
	ldrb r0, [r3, #0x10]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x10]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	b _080621CC
	.align 2, 0
_08062180: .4byte 0x0201774C
_08062184: .4byte 0x08C13258
_08062188: .4byte 0x081EF1AC
_0806218C: .4byte 0x082B9224
_08062190: .4byte 0x082B782C
_08062194: .4byte 0x082B9244
_08062198: .4byte gAnims
_0806219C: .4byte gDispIo
_080621A0:
	ldr r3, _08062210 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x18]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x18]
	ldrb r0, [r3, #0x10]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x10]
	movs r0, #3
	ldrb r1, [r3, #0x14]
	orrs r0, r1
	strb r0, [r3, #0x14]
_080621CC:
	ldr r0, [r5, #0x5c]
	bl GetCoreAIStruct
	ldr r6, _08062214 @ =0x0000F3FF
	adds r1, r6, #0
	ldrh r2, [r7, #8]
	ands r1, r2
	movs r2, #0x80
	lsls r2, r2, #3
	adds r5, r2, #0
	orrs r1, r5
	strh r1, [r7, #8]
	adds r1, r6, #0
	ldrh r2, [r0, #8]
	ands r1, r2
	orrs r1, r5
	strh r1, [r0, #8]
	ldr r4, _08062218 @ =0x02000010
	bl GetAISSubjectId
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r1, [r0]
	cmp r1, #0
	beq _08062208
	adds r0, r6, #0
	ldrh r2, [r1, #8]
	ands r0, r2
	orrs r0, r5
	strh r0, [r1, #8]
_08062208:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08062210: .4byte gDispIo
_08062214: .4byte 0x0000F3FF
_08062218: .4byte 0x02000010

	thumb_func_start sub_0806221C
sub_0806221C: @ 0x0806221C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, [r5, #0x5c]
	bl GetCoreAIStruct
	adds r6, r0, #0
	ldr r4, _080622C4 @ =0x02000010
	bl GetAISSubjectId
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r4, [r0]
	cmp r4, #0
	beq _0806224A
	ldr r0, _080622C8 @ =0x0000F3FF
	ldrh r1, [r4, #8]
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r4, #8]
_0806224A:
	adds r0, r5, #0
	adds r0, #0x2c
	adds r1, r5, #0
	adds r1, #0x44
	ldr r2, [r5, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #0
	blt _08062270
	ldr r0, [r5, #0x4c]
	ldr r1, _080622CC @ =0x02022862
	movs r2, #0xf
	str r2, [sp]
	adds r2, r3, #0
	movs r3, #0xf
	bl sub_08050E58
_08062270:
	ldrh r0, [r5, #0x2e]
	adds r0, #1
	strh r0, [r5, #0x2e]
	lsls r0, r0, #0x10
	ldrh r2, [r5, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08062340
	ldr r1, _080622D0 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	ldr r0, _080622D4 @ =gAnims
	ldr r0, [r0]
	bl sub_0806527C
	cmp r0, #0
	bne _080622DC
	ldr r3, _080622D8 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	b _08062308
	.align 2, 0
_080622C4: .4byte 0x02000010
_080622C8: .4byte 0x0000F3FF
_080622CC: .4byte 0x02022862
_080622D0: .4byte 0x0201774C
_080622D4: .4byte gAnims
_080622D8: .4byte gDispIo
_080622DC:
	ldr r3, _08062348 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x18]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x18]
	movs r0, #3
	ldrb r1, [r3, #0x14]
	orrs r0, r1
	strb r0, [r3, #0x14]
_08062308:
	ldr r1, [r5, #0x5c]
	ldr r3, _0806234C @ =0x0000F3FF
	adds r0, r3, #0
	ldrh r2, [r1, #8]
	ands r0, r2
	strh r0, [r1, #8]
	ldr r1, [r5, #0x5c]
	movs r0, #0x80
	lsls r0, r0, #4
	adds r2, r0, #0
	ldrh r0, [r1, #8]
	orrs r0, r2
	strh r0, [r1, #8]
	adds r0, r3, #0
	ldrh r1, [r6, #8]
	ands r0, r1
	orrs r0, r2
	strh r0, [r6, #8]
	cmp r4, #0
	beq _0806233A
	adds r0, r3, #0
	ldrh r1, [r4, #8]
	ands r0, r1
	orrs r0, r2
	strh r0, [r4, #8]
_0806233A:
	adds r0, r5, #0
	bl Proc_Break
_08062340:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08062348: .4byte gDispIo
_0806234C: .4byte 0x0000F3FF

	thumb_func_start sub_08062350
sub_08062350: @ 0x08062350
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl sub_080504F8
	bl SpellFx_ClearBG1Position
	ldr r0, _08062388 @ =0x08C13270
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08062388: .4byte 0x08C13270

	thumb_func_start sub_0806238C
sub_0806238C: @ 0x0806238C
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r6, r0, #0
	bl GetSpellAnimationStartFrame
	adds r5, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r7, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _080623BA
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0804EC74
_080623BA:
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	adds r0, r5, #0
	adds r0, #0x14
	cmp r1, r0
	bne _080623D4
	adds r0, r6, #0
	bl sub_08062A3C
	ldr r0, _080623D0 @ =0x000002FD
	b _08062474
	.align 2, 0
_080623D0: .4byte 0x000002FD
_080623D4:
	adds r0, r5, #0
	adds r0, #0x28
	cmp r1, r0
	bne _080623F4
	adds r0, r6, #0
	bl sub_080626F0
	adds r0, r6, #0
	bl sub_0806250C
	adds r0, r6, #0
	bl sub_08062658
	bl sub_08050530
	b _08062500
_080623F4:
	adds r0, r5, #0
	adds r0, #0x91
	cmp r1, r0
	bne _08062408
	adds r0, r6, #0
	movs r1, #0x1e
	movs r2, #0x14
	bl sub_080628F0
	b _08062500
_08062408:
	adds r0, r5, #0
	adds r0, #0xaf
	cmp r1, r0
	bne _08062430
	movs r0, #9
	ldrh r1, [r6, #0x10]
	orrs r0, r1
	strh r0, [r6, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r6, #0
	bl StartBattleAnimHitEffectsDefault
	ldrb r0, [r4]
	cmp r0, #0
	bne _08062500
	adds r0, r6, #0
	bl sub_08068500
	b _08062500
_08062430:
	adds r0, r5, #0
	adds r0, #0xb0
	cmp r1, r0
	bne _08062452
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	beq _08062500
	bl SpellFx_Finish
	bl sub_08050548
	adds r0, r4, #0
	bl Proc_Break
	b _08062500
_08062452:
	adds r0, r5, #0
	adds r0, #0xb1
	cmp r1, r0
	bne _08062488
	ldr r0, [r4, #0x5c]
	movs r1, #0x50
	movs r2, #9
	bl sub_080569B8
	adds r0, r6, #0
	movs r1, #0x1e
	bl sub_080612D4
	adds r0, r6, #0
	bl sub_080613B8
	ldr r0, _08062484 @ =0x000002FE
_08062474:
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x78
	movs r3, #0
	bl PlaySFX
	b _08062500
	.align 2, 0
_08062484: .4byte 0x000002FE
_08062488:
	adds r0, r5, #0
	adds r0, #0xcd
	cmp r1, r0
	bne _0806249A
	ldr r0, [r4, #0x5c]
	movs r1, #0xa
	bl sub_0804F7B8
	b _08062500
_0806249A:
	adds r0, r5, #0
	adds r0, #0xd7
	cmp r1, r0
	bne _080624CC
	ldr r0, [r4, #0x5c]
	movs r1, #0x46
	movs r2, #1
	bl sub_080565FC
	ldr r0, [r4, #0x5c]
	movs r1, #0x32
	bl sub_0805618C
	ldr r0, [r4, #0x5c]
	bl sub_080627C4
	str r7, [sp]
	str r7, [sp, #4]
	adds r0, r6, #0
	movs r1, #0x10
	movs r2, #0xa
	movs r3, #0x10
	bl sub_080566F0
	b _08062500
_080624CC:
	adds r0, r5, #0
	adds r0, #0xe1
	cmp r1, r0
	bne _080624DC
	adds r0, r6, #0
	bl sub_080629CC
	b _08062500
_080624DC:
	adds r0, r5, #0
	adds r0, #0xf0
	cmp r1, r0
	bne _080624EA
	bl sub_08050548
	b _08062500
_080624EA:
	movs r2, #0x2c
	ldrsh r1, [r4, r2]
	ldr r2, _08062508 @ =0x0000010B
	adds r0, r5, r2
	cmp r1, r0
	bne _08062500
	bl SpellFx_Finish
	adds r0, r4, #0
	bl Proc_Break
_08062500:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08062508: .4byte 0x0000010B

	thumb_func_start sub_0806250C
sub_0806250C: @ 0x0806250C
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08062548 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0806254C @ =0x08C13288
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r2, #0
	strh r2, [r0, #0x2c]
	movs r1, #7
	str r1, [r0, #0x44]
	strh r2, [r0, #0x2e]
	movs r1, #5
	str r1, [r0, #0x48]
	ldr r0, _08062550 @ =0x082DF474
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	ldr r0, _08062554 @ =0x082DF8E8
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08062548: .4byte 0x0201774C
_0806254C: .4byte 0x08C13288
_08062550: .4byte 0x082DF474
_08062554: .4byte 0x082DF8E8

	thumb_func_start sub_08062558
sub_08062558: @ 0x08062558
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r6, #0x44]
	cmp r0, r1
	ble _080625BE
	movs r0, #0
	strh r0, [r6, #0x2c]
	ldr r5, _080625C8 @ =0x08C132A8
	movs r0, #0x2e
	ldrsh r4, [r6, r0]
	lsls r0, r4, #4
	adds r0, r0, r5
	ldr r1, [r0]
	lsls r4, r4, #2
	adds r0, r4, #1
	lsls r0, r0, #2
	adds r0, r0, r5
	ldr r2, [r0]
	adds r0, r4, #2
	lsls r0, r0, #2
	adds r0, r0, r5
	ldr r3, [r0]
	adds r4, #3
	lsls r4, r4, #2
	adds r4, r4, r5
	ldr r4, [r4]
	ldr r0, [r6, #0x60]
	str r4, [sp]
	bl sub_080625D0
	ldrh r0, [r6, #0x2e]
	adds r0, #1
	strh r0, [r6, #0x2e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r6, #0x48]
	cmp r0, r1
	ble _080625BE
	ldr r1, _080625CC @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r6, #0
	bl Proc_Break
_080625BE:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080625C8: .4byte 0x08C132A8
_080625CC: .4byte 0x0201774C

	thumb_func_start sub_080625D0
sub_080625D0: @ 0x080625D0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r6, r0, #0
	mov r8, r1
	mov sb, r2
	adds r4, r3, #0
	ldr r7, [sp, #0x20]
	ldr r1, _08062630 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08062634 @ =0x08C13390
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r6, [r5, #0x5c]
	ldr r0, _08062638 @ =0x08C13378
	lsls r4, r4, #2
	adds r4, r4, r0
	ldr r3, [r4]
	str r3, [sp]
	adds r0, r6, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r5, #0x60]
	mov r1, r8
	strh r1, [r0, #2]
	mov r2, sb
	strh r2, [r0, #4]
	ldr r1, _0806263C @ =0x0000F3FF
	ldrh r2, [r0, #8]
	ands r1, r2
	orrs r1, r7
	strh r1, [r0, #8]
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08062630: .4byte 0x0201774C
_08062634: .4byte 0x08C13390
_08062638: .4byte 0x08C13378
_0806263C: .4byte 0x0000F3FF

	thumb_func_start sub_08062640
sub_08062640: @ 0x08062640
	push {lr}
	ldr r0, [r0, #0x60]
	bl AnimDelete
	ldr r1, _08062654 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_08062654: .4byte 0x0201774C

	thumb_func_start sub_08062658
sub_08062658: @ 0x08062658
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _080626AC @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080626B0 @ =0x08C133B0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	ldr r3, _080626B4 @ =0x08C46040
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	movs r1, #0x78
	strh r1, [r0, #2]
	movs r1, #0x3c
	strh r1, [r0, #4]
	ldr r1, _080626B8 @ =0x0000F3FF
	ldrh r2, [r0, #8]
	ands r1, r2
	movs r3, #0xc0
	lsls r3, r3, #4
	adds r2, r3, #0
	orrs r1, r2
	strh r1, [r0, #8]
	movs r1, #0x14
	strh r1, [r0, #0xa]
	bl AnimSort
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080626AC: .4byte 0x0201774C
_080626B0: .4byte 0x08C133B0
_080626B4: .4byte 0x08C46040
_080626B8: .4byte 0x0000F3FF

	thumb_func_start sub_080626BC
sub_080626BC: @ 0x080626BC
	push {lr}
	ldr r0, [r0, #0x60]
	bl AnimDelete
	ldr r1, _080626D0 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_080626D0: .4byte 0x0201774C

	thumb_func_start sub_080626D4
sub_080626D4: @ 0x080626D4
	push {lr}
	ldr r2, [r0, #0x60]
	ldr r1, _080626EC @ =0x08C46060
	str r1, [r2, #0x24]
	str r1, [r2, #0x20]
	movs r1, #0
	strh r1, [r2, #6]
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0
_080626EC: .4byte 0x08C46060

	thumb_func_start sub_080626F0
sub_080626F0: @ 0x080626F0
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08062730 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08062734 @ =0x08C133E0
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r2, #0
	strh r2, [r0, #0x2c]
	str r2, [r0, #0x44]
	ldr r1, _08062738 @ =0x081EF1EA
	str r1, [r0, #0x48]
	ldr r1, _0806273C @ =0x08C13420
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r1, _08062740 @ =0x08C133F8
	str r1, [r0, #0x54]
	str r2, [r0, #0x58]
	ldr r0, _08062744 @ =0x082CB87C
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_SetSomeColorEffect
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08062730: .4byte 0x0201774C
_08062734: .4byte 0x08C133E0
_08062738: .4byte 0x081EF1EA
_0806273C: .4byte 0x08C13420
_08062740: .4byte 0x08C133F8
_08062744: .4byte 0x082CB87C

	thumb_func_start sub_08062748
sub_08062748: @ 0x08062748
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _08062798
	ldr r7, [r4, #0x4c]
	ldr r0, [r4, #0x50]
	mov r8, r0
	ldr r0, [r4, #0x54]
	lsls r5, r1, #2
	adds r6, r5, r0
	ldr r0, [r4, #0x58]
	ldr r2, [r6]
	cmp r0, r2
	beq _08062782
	movs r1, #0x80
	lsls r1, r1, #6
	adds r0, r2, #0
	bl SpellFx_RegisterBgGfx
_08062782:
	ldr r0, [r6]
	str r0, [r4, #0x58]
	ldr r0, [r4, #0x5c]
	adds r1, r5, r7
	ldr r1, [r1]
	mov r3, r8
	adds r2, r5, r3
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	b _080627B6
_08062798:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _080627B6
	bl SpellFx_ClearBG1
	ldr r1, _080627C0 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_080627B6:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080627C0: .4byte 0x0201774C

	thumb_func_start sub_080627C4
sub_080627C4: @ 0x080627C4
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0806280C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08062810 @ =0x08C13448
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r2, #0
	strh r2, [r0, #0x2c]
	str r2, [r0, #0x44]
	ldr r1, _08062814 @ =0x081EF298
	str r1, [r0, #0x48]
	ldr r1, _08062818 @ =0x08C13488
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r1, _0806281C @ =0x08C13460
	str r1, [r0, #0x54]
	str r2, [r0, #0x58]
	ldr r0, _08062820 @ =0x082DDED4
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_SetSomeColorEffect
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806280C: .4byte 0x0201774C
_08062810: .4byte 0x08C13448
_08062814: .4byte 0x081EF298
_08062818: .4byte 0x08C13488
_0806281C: .4byte 0x08C13460
_08062820: .4byte 0x082DDED4

	thumb_func_start sub_08062824
sub_08062824: @ 0x08062824
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _080628C0
	ldr r7, [r4, #0x4c]
	ldr r0, [r4, #0x50]
	mov r8, r0
	ldr r0, [r4, #0x54]
	lsls r5, r1, #2
	adds r6, r5, r0
	ldr r0, [r4, #0x58]
	ldr r2, [r6]
	cmp r0, r2
	beq _08062860
	movs r1, #0x80
	lsls r1, r1, #6
	adds r0, r2, #0
	bl SpellFx_RegisterBgGfx
_08062860:
	ldr r0, [r6]
	str r0, [r4, #0x58]
	ldr r0, [r4, #0x5c]
	adds r1, r5, r7
	ldr r1, [r1]
	mov r3, r8
	adds r2, r5, r3
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	ldr r0, _0806289C @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _080628DE
	ldr r0, [r4, #0x5c]
	bl GetAISSubjectId
	adds r1, r0, #0
	cmp r1, #0
	bne _080628A4
	ldr r0, _080628A0 @ =gBg1Tm
	str r1, [sp]
	movs r1, #3
	movs r2, #0x14
	movs r3, #0
	bl sub_080671A0
	b _080628B4
	.align 2, 0
_0806289C: .4byte gEkrDistanceType
_080628A0: .4byte gBg1Tm
_080628A4:
	ldr r0, _080628BC @ =0x0202349A
	movs r1, #0
	str r1, [sp]
	movs r1, #3
	movs r2, #0x14
	movs r3, #0
	bl sub_080671A0
_080628B4:
	movs r0, #2
	bl EnableBgSync
	b _080628DE
	.align 2, 0
_080628BC: .4byte 0x0202349A
_080628C0:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _080628DE
	bl SpellFx_ClearBG1
	ldr r1, _080628EC @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_080628DE:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080628EC: .4byte 0x0201774C

	thumb_func_start sub_080628F0
sub_080628F0: @ 0x080628F0
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r5, r0, #0
	mov r8, r1
	adds r6, r2, #0
	ldr r1, _08062930 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08062934 @ =0x08C134B0
	movs r1, #4
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r0, _08062938 @ =gPal
	ldr r1, _0806293C @ =0x020165C8
	movs r2, #0x80
	lsls r2, r2, #1
	bl CpuFastSet
	strh r6, [r4, #0x2e]
	mov r0, r8
	strh r0, [r4, #0x30]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08062930: .4byte 0x0201774C
_08062934: .4byte 0x08C134B0
_08062938: .4byte gPal
_0806293C: .4byte 0x020165C8

	thumb_func_start sub_08062940
sub_08062940: @ 0x08062940
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r5, r0, #0
	movs r0, #0x2c
	ldrsh r1, [r5, r0]
	movs r2, #0x2e
	ldrsh r0, [r5, r2]
	cmp r1, r0
	ble _0806295A
	ldrh r3, [r5, #0x2e]
	b _0806295C
_0806295A:
	ldrh r3, [r5, #0x2c]
_0806295C:
	movs r1, #0x2e
	ldrsh r0, [r5, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	adds r4, r0, #0
	ldr r7, _080629C0 @ =0x020165C8
	ldr r6, _080629C4 @ =gPal
	movs r2, #0x80
	lsls r2, r2, #1
	mov r8, r2
	adds r0, r7, #0
	adds r1, r6, #0
	bl CpuFastSet
	adds r0, r6, #0
	movs r1, #0
	movs r2, #0x20
	adds r3, r4, #0
	bl sub_08067750
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r5, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _080629B4
	adds r0, r7, #0
	adds r1, r6, #0
	mov r2, r8
	bl CpuFastSet
	ldr r1, _080629C8 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r5, #0
	bl Proc_Break
_080629B4:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080629C0: .4byte 0x020165C8
_080629C4: .4byte gPal
_080629C8: .4byte 0x0201774C

	thumb_func_start sub_080629CC
sub_080629CC: @ 0x080629CC
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r1, _08062A18 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08062A1C @ =0x08C134C8
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	ldr r3, _08062A20 @ =0x08C463C4
	str r3, [sp]
	adds r0, r4, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r5, #0x60]
	ldrh r1, [r4, #2]
	strh r1, [r0, #2]
	ldrh r1, [r4, #4]
	strh r1, [r0, #4]
	ldr r0, _08062A24 @ =0x082DF908
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	ldr r0, _08062A28 @ =0x082DFEB4
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08062A18: .4byte 0x0201774C
_08062A1C: .4byte 0x08C134C8
_08062A20: .4byte 0x08C463C4
_08062A24: .4byte 0x082DF908
_08062A28: .4byte 0x082DFEB4

	thumb_func_start sub_08062A2C
sub_08062A2C: @ 0x08062A2C
	ldr r1, _08062A38 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_08062A38: .4byte 0x0201774C

	thumb_func_start sub_08062A3C
sub_08062A3C: @ 0x08062A3C
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r1, _08062A88 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08062A8C @ =0x08C134E8
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	ldr r3, _08062A90 @ =0x08C463DC
	str r3, [sp]
	adds r0, r4, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r5, #0x60]
	ldrh r1, [r4, #2]
	strh r1, [r0, #2]
	ldrh r1, [r4, #4]
	strh r1, [r0, #4]
	ldr r0, _08062A94 @ =0x082DF908
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	ldr r0, _08062A98 @ =0x082DFEB4
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08062A88: .4byte 0x0201774C
_08062A8C: .4byte 0x08C134E8
_08062A90: .4byte 0x08C463DC
_08062A94: .4byte 0x082DF908
_08062A98: .4byte 0x082DFEB4

	thumb_func_start sub_08062A9C
sub_08062A9C: @ 0x08062A9C
	ldr r1, _08062AA8 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_08062AA8: .4byte 0x0201774C

	thumb_func_start sub_08062AAC
sub_08062AAC: @ 0x08062AAC
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl SpellFx_ClearBG1Position
	ldr r0, _08062AE4 @ =0x08C13508
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #1
	str r0, [r4, #0x44]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08062AE4: .4byte 0x08C13508

	thumb_func_start sub_08062AE8
sub_08062AE8: @ 0x08062AE8
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl SpellFx_ClearBG1Position
	ldr r0, _08062B20 @ =0x08C13508
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #2
	str r0, [r4, #0x44]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08062B20: .4byte 0x08C13508

	thumb_func_start sub_08062B24
sub_08062B24: @ 0x08062B24
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl SpellFx_ClearBG1Position
	ldr r0, _08062B5C @ =0x08C13508
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #3
	str r0, [r4, #0x44]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08062B5C: .4byte 0x08C13508

	thumb_func_start sub_08062B60
sub_08062B60: @ 0x08062B60
	push {r4, r5, lr}
	adds r5, r0, #0
	bl SpellFx_Begin
	bl SpellFx_ClearBG1Position
	ldr r0, _08062B98 @ =0x08C13508
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #4
	str r0, [r4, #0x44]
	adds r0, r5, #0
	bl GetSomeAISRelatedIndexMaybe
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl EkrCheckHitOrMiss
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08062B98: .4byte 0x08C13508

	thumb_func_start sub_08062B9C
sub_08062B9C: @ 0x08062B9C
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r5, r0, #0
	ldr r0, [r5, #0x5c]
	bl GetCoreAIStruct
	adds r4, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	movs r7, #0
	movs r6, #0
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x19
	bne _08062C30
	ldr r1, [r5, #0x44]
	adds r0, r4, #0
	bl sub_080577AC
	ldr r1, [r5, #0x44]
	adds r0, r4, #0
	bl sub_08057888
	adds r0, r4, #0
	movs r1, #0x82
	movs r2, #1
	bl sub_080565FC
	adds r0, r4, #0
	movs r1, #0x64
	bl sub_0805618C
	ldr r3, _08062C44 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r7, [r0]
	adds r0, #1
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r7, [r0]
	str r1, [sp]
	str r6, [sp, #4]
	adds r0, r4, #0
	movs r1, #0
	movs r2, #8
	movs r3, #0
	bl sub_080566F0
	str r6, [sp]
	str r6, [sp, #4]
	adds r0, r4, #0
	movs r1, #0x3c
	movs r2, #0x28
	movs r3, #0x10
	bl sub_080566F0
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #2
	ldrsh r2, [r4, r0]
	movs r0, #0xef
	movs r3, #1
	bl PlaySFX
_08062C30:
	movs r1, #0x2c
	ldrsh r0, [r5, r1]
	cmp r0, #0x7d
	bne _08062C48
	movs r0, #9
	ldrh r1, [r4, #0x10]
	orrs r0, r1
	strh r0, [r4, #0x10]
	b _08062C5E
	.align 2, 0
_08062C44: .4byte gDispIo
_08062C48:
	cmp r0, #0xa5
	bne _08062C5E
	movs r0, #2
	ldrh r1, [r4, #0x10]
	orrs r0, r1
	strh r0, [r4, #0x10]
	bl SpellFx_Finish
	adds r0, r5, #0
	bl Proc_Break
_08062C5E:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08062C68
sub_08062C68: @ 0x08062C68
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _08062C90 @ =0x08C13520
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	adds r0, #0x29
	strb r5, [r0]
	ldr r0, _08062C94 @ =0x081DFC50
	ldr r1, _08062C98 @ =0x06012000
	bl LZ77UnCompVram
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08062C90: .4byte 0x08C13520
_08062C94: .4byte 0x081DFC50
_08062C98: .4byte 0x06012000

	thumb_func_start sub_08062C9C
sub_08062C9C: @ 0x08062C9C
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x2c]
	adds r0, #1
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08062CBA
	ldr r0, [r1, #0x5c]
	adds r1, #0x29
	ldrb r1, [r1]
	bl sub_08062CC8
	b _08062CC4
_08062CBA:
	cmp r0, #0xa
	bne _08062CC4
	adds r0, r1, #0
	bl Proc_Break
_08062CC4:
	pop {r0}
	bx r0

	thumb_func_start sub_08062CC8
sub_08062CC8: @ 0x08062CC8
	push {r4, r5, r6, lr}
	sub sp, #0xc
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r0, _08062CEC @ =0x08C13538
	movs r1, #3
	bl Proc_Start
	adds r6, r0, #0
	str r5, [r6, #0x5c]
	movs r0, #0
	strh r0, [r6, #0x2c]
	cmp r4, #0
	bne _08062CF4
	movs r0, #0x32
	strh r0, [r6, #0x2e]
	ldr r4, _08062CF0 @ =0x08C0CD3C
	b _08062CFA
	.align 2, 0
_08062CEC: .4byte 0x08C13538
_08062CF0: .4byte 0x08C0CD3C
_08062CF4:
	movs r0, #0x32
	strh r0, [r6, #0x2e]
	ldr r4, _08062D34 @ =0x08C0CDB0
_08062CFA:
	adds r0, r5, #0
	bl GetAISSubjectId
	movs r2, #0xa2
	lsls r2, r2, #7
	cmp r0, #0
	bne _08062D0C
	movs r2, #0xc2
	lsls r2, r2, #7
_08062D0C:
	movs r1, #2
	ldrsh r0, [r5, r1]
	movs r3, #4
	ldrsh r1, [r5, r3]
	subs r1, #0x28
	str r2, [sp]
	movs r2, #0
	str r2, [sp, #4]
	movs r2, #3
	str r2, [sp, #8]
	adds r2, r4, #0
	movs r3, #2
	bl sub_08067AEC
	str r0, [r6, #0x60]
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08062D34: .4byte 0x08C0CDB0

	thumb_func_start sub_08062D38
sub_08062D38: @ 0x08062D38
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, [r4, #0x5c]
	ldrh r0, [r0, #2]
	strh r0, [r1, #0x32]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08062D60
	ldr r0, [r4, #0x60]
	bl Proc_End
	adds r0, r4, #0
	bl Proc_Break
_08062D60:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start NewEfxPierceCritical
NewEfxPierceCritical: @ 0x08062D68
	push {r4, lr}
	adds r4, r0, #0
	bl SpellFx_ClearBG1Position
	ldr r0, _08062D84 @ =0x08C13550
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08062D84: .4byte 0x08C13550

	thumb_func_start sub_08062D88
sub_08062D88: @ 0x08062D88
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08062DA8
	ldr r0, [r4, #0x5c]
	bl sub_08062DB8
	ldr r0, [r4, #0x5c]
	bl sub_08062E30
	b _08062DB2
_08062DA8:
	cmp r0, #0x11
	bne _08062DB2
	adds r0, r4, #0
	bl Proc_Break
_08062DB2:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_08062DB8
sub_08062DB8: @ 0x08062DB8
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _08062DF4 @ =0x08C13568
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r0, _08062DF8 @ =0x081F74D8
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, _08062DFC @ =0x081F85B8
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	ldr r0, [r4, #0x5c]
	ldr r1, _08062E00 @ =0x081F87B8
	ldr r2, _08062E04 @ =0x081F8C58
	bl SpellFx_WriteBgMap
	bl SpellFx_SetSomeColorEffect
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08062DF4: .4byte 0x08C13568
_08062DF8: .4byte 0x081F74D8
_08062DFC: .4byte 0x081F85B8
_08062E00: .4byte 0x081F87B8
_08062E04: .4byte 0x081F8C58

	thumb_func_start sub_08062E08
sub_08062E08: @ 0x08062E08
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x11
	bne _08062E28
	bl SpellFx_ClearBG1
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_08062E28:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08062E30
sub_08062E30: @ 0x08062E30
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08062E54 @ =0x08C13580
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _08062E58 @ =0x081EF2C4
	str r1, [r0, #0x48]
	ldr r1, _08062E5C @ =0x081F85B8
	str r1, [r0, #0x4c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08062E54: .4byte 0x08C13580
_08062E58: .4byte 0x081EF2C4
_08062E5C: .4byte 0x081F85B8

	thumb_func_start sub_08062E60
sub_08062E60: @ 0x08062E60
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _08062E86
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	b _08062E94
_08062E86:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _08062E94
	adds r0, r4, #0
	bl Proc_Break
_08062E94:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start NewEfxNormalEffect
NewEfxNormalEffect: @ 0x08062E9C
	push {r4, lr}
	adds r4, r0, #0
	bl SpellFx_ClearBG1Position
	ldr r0, _08062EB8 @ =0x08C135A0
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08062EB8: .4byte 0x08C135A0

	thumb_func_start sub_08062EBC
sub_08062EBC: @ 0x08062EBC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r1, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08062EE0
	ldr r0, [r4, #0x5c]
	movs r1, #4
	bl sub_0804F7B8
	b _08062EF6
_08062EE0:
	cmp r0, #4
	bne _08062EEC
	adds r0, r1, #0
	bl sub_08062EFC
	b _08062EF6
_08062EEC:
	cmp r0, #0x18
	bne _08062EF6
	adds r0, r4, #0
	bl Proc_Break
_08062EF6:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_08062EFC
sub_08062EFC: @ 0x08062EFC
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _08062F5C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08062F60 @ =0x08C135B8
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _08062F64 @ =0x081EF306
	str r0, [r5, #0x48]
	ldr r0, _08062F68 @ =0x08C135D0
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _08062F6C @ =0x081F9600
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	ldr r0, _08062F70 @ =0x081F9238
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	bl SpellFx_SetSomeColorEffect
	ldr r0, _08062F74 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08062F82
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _08062F78
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _08062F82
	.align 2, 0
_08062F5C: .4byte 0x0201774C
_08062F60: .4byte 0x08C135B8
_08062F64: .4byte 0x081EF306
_08062F68: .4byte 0x08C135D0
_08062F6C: .4byte 0x081F9600
_08062F70: .4byte 0x081F9238
_08062F74: .4byte gEkrDistanceType
_08062F78:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_08062F82:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08062F88
sub_08062F88: @ 0x08062F88
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _08062FB6
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	b _08062FD4
_08062FB6:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _08062FD4
	bl SpellFx_ClearBG1
	ldr r1, _08062FDC @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_08062FD4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08062FDC: .4byte 0x0201774C

	thumb_func_start NewEfxYushaSpinShield
NewEfxYushaSpinShield: @ 0x08062FE0
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _08063004 @ =0x08C135F8
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_08063014
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08063004: .4byte 0x08C135F8

	thumb_func_start sub_08063008
sub_08063008: @ 0x08063008
	push {lr}
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08063014
sub_08063014: @ 0x08063014
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r4, r1, #0
	ldr r0, _0806303C @ =0x08C13610
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r6, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	adds r0, r5, #0
	adds r0, #0x29
	strb r4, [r0]
	cmp r4, #0
	bne _08063048
	ldr r2, _08063040 @ =0x08C1CC3C
	ldr r3, _08063044 @ =0x08C1DEDC
	b _0806304C
	.align 2, 0
_0806303C: .4byte 0x08C13610
_08063040: .4byte 0x08C1CC3C
_08063044: .4byte 0x08C1DEDC
_08063048:
	ldr r2, _08063078 @ =0x08C1F1AC
	ldr r3, _0806307C @ =0x08C2047C
_0806304C:
	str r2, [sp]
	adds r0, r6, #0
	adds r1, r3, #0
	bl sub_08050BF8
	adds r4, r0, #0
	str r4, [r5, #0x60]
	movs r0, #0xc0
	lsls r0, r0, #4
	ldrh r1, [r4, #8]
	ands r0, r1
	movs r5, #0
	strh r0, [r4, #8]
	adds r0, r6, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _08063080
	movs r1, #0xe4
	lsls r1, r1, #7
	b _08063084
	.align 2, 0
_08063078: .4byte 0x08C1F1AC
_0806307C: .4byte 0x08C2047C
_08063080:
	movs r1, #0x93
	lsls r1, r1, #8
_08063084:
	adds r0, r1, #0
	ldrh r1, [r4, #8]
	orrs r0, r1
	strh r0, [r4, #8]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_08063094
sub_08063094: @ 0x08063094
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, [r5, #0x60]
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x45
	bne _080630F2
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _080630CC
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _080630C4
	ldr r0, _080630C0 @ =0x08C1DFE0
	b _080630E2
	.align 2, 0
_080630C0: .4byte 0x08C1DFE0
_080630C4:
	ldr r0, _080630C8 @ =0x08C1CD40
	b _080630E2
	.align 2, 0
_080630C8: .4byte 0x08C1CD40
_080630CC:
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _080630E0
	ldr r0, _080630DC @ =0x08C20580
	b _080630E2
	.align 2, 0
_080630DC: .4byte 0x08C20580
_080630E0:
	ldr r0, _080630F8 @ =0x08C1F2B0
_080630E2:
	str r0, [r4, #0x24]
	str r0, [r4, #0x20]
	movs r0, #0
	strh r0, [r4, #6]
	strh r0, [r5, #0x2c]
	adds r0, r5, #0
	bl Proc_Break
_080630F2:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080630F8: .4byte 0x08C1F2B0

	thumb_func_start sub_080630FC
sub_080630FC: @ 0x080630FC
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x5c]
	ldrh r2, [r0, #0x10]
	movs r0, #4
	ands r0, r2
	cmp r0, #0
	beq _0806311E
	movs r0, #8
	ands r0, r2
	cmp r0, #0
	beq _0806311E
	movs r0, #0
	strh r0, [r1, #0x2c]
	adds r0, r1, #0
	bl Proc_Break
_0806311E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08063124
sub_08063124: @ 0x08063124
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, [r5, #0x60]
	bl sub_0804DD50
	cmp r0, #1
	bne _0806317E
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _08063158
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _08063150
	ldr r0, _0806314C @ =0x08C1E008
	b _0806316E
	.align 2, 0
_0806314C: .4byte 0x08C1E008
_08063150:
	ldr r0, _08063154 @ =0x08C1CD68
	b _0806316E
	.align 2, 0
_08063154: .4byte 0x08C1CD68
_08063158:
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _0806316C
	ldr r0, _08063168 @ =0x08C205A8
	b _0806316E
	.align 2, 0
_08063168: .4byte 0x08C205A8
_0806316C:
	ldr r0, _08063184 @ =0x08C1F2D8
_0806316E:
	str r0, [r4, #0x24]
	str r0, [r4, #0x20]
	movs r0, #0
	strh r0, [r4, #6]
	strh r0, [r5, #0x2c]
	adds r0, r5, #0
	bl Proc_Break
_0806317E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08063184: .4byte 0x08C1F2D8

	thumb_func_start sub_08063188
sub_08063188: @ 0x08063188
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x14
	bne _080631AA
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r0, [r4, #0x60]
	bl AnimDelete
	adds r0, r4, #0
	bl Proc_Break
_080631AA:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start NewEfxHurtmutEff00
NewEfxHurtmutEff00: @ 0x080631B0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _080631DC @ =0x0201774C
	ldr r5, [r0]
	cmp r5, #0
	bne _080631EE
	ldr r0, _080631E0 @ =0x08C13640
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	strh r5, [r0, #0x2c]
	ldr r0, _080631E4 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _080631E8
	adds r0, r4, #0
	bl sub_08063200
	b _080631EE
	.align 2, 0
_080631DC: .4byte 0x0201774C
_080631E0: .4byte 0x08C13640
_080631E4: .4byte gEkrDistanceType
_080631E8:
	adds r0, r4, #0
	bl sub_08063300
_080631EE:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080631F4
sub_080631F4: @ 0x080631F4
	push {lr}
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08063200
sub_08063200: @ 0x08063200
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _08063238 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0806323C @ =0x08C13658
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r3, _08063240 @ =0x08C10828
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08063238: .4byte 0x0201774C
_0806323C: .4byte 0x08C13658
_08063240: .4byte 0x08C10828

	thumb_func_start sub_08063244
sub_08063244: @ 0x08063244
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, [r5, #0x60]
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #1
	bne _0806325C
	ldr r0, _08063258 @ =0x08C1757C
	b _0806325E
	.align 2, 0
_08063258: .4byte 0x08C1757C
_0806325C:
	ldr r0, _08063284 @ =0x08C178E8
_0806325E:
	str r0, [r4, #0x24]
	str r0, [r4, #0x20]
	movs r0, #0
	strh r0, [r4, #6]
	ldr r0, _08063288 @ =0x081F5F34
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0806328C @ =0x081F4EB0
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	adds r0, r5, #0
	bl Proc_Break
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08063284: .4byte 0x08C178E8
_08063288: .4byte 0x081F5F34
_0806328C: .4byte 0x081F4EB0

	thumb_func_start sub_08063290
sub_08063290: @ 0x08063290
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, [r5, #0x60]
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #1
	bne _080632A8
	ldr r0, _080632A4 @ =0x08C17BD0
	b _080632AA
	.align 2, 0
_080632A4: .4byte 0x08C17BD0
_080632A8:
	ldr r0, _080632D0 @ =0x08C17E2C
_080632AA:
	str r0, [r4, #0x24]
	str r0, [r4, #0x20]
	movs r0, #0
	strh r0, [r4, #6]
	ldr r0, _080632D4 @ =0x081F5F34
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _080632D8 @ =0x081F5750
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	adds r0, r5, #0
	bl Proc_Break
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080632D0: .4byte 0x08C17E2C
_080632D4: .4byte 0x081F5F34
_080632D8: .4byte 0x081F5750

	thumb_func_start sub_080632DC
sub_080632DC: @ 0x080632DC
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _080632FC @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	ldr r0, [r4, #0x60]
	bl AnimDelete
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080632FC: .4byte 0x0201774C

	thumb_func_start sub_08063300
sub_08063300: @ 0x08063300
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _08063338 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0806333C @ =0x08C13690
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r3, _08063340 @ =0x08C10828
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08063338: .4byte 0x0201774C
_0806333C: .4byte 0x08C13690
_08063340: .4byte 0x08C10828

	thumb_func_start sub_08063344
sub_08063344: @ 0x08063344
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, [r5, #0x60]
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #1
	bne _0806335C
	ldr r0, _08063358 @ =0x08C175C4
	b _0806335E
	.align 2, 0
_08063358: .4byte 0x08C175C4
_0806335C:
	ldr r0, _08063384 @ =0x08C17930
_0806335E:
	str r0, [r4, #0x24]
	str r0, [r4, #0x20]
	movs r0, #0
	strh r0, [r4, #6]
	ldr r0, _08063388 @ =0x081F5F34
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0806338C @ =0x081F4EB0
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	adds r0, r5, #0
	bl Proc_Break
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08063384: .4byte 0x08C17930
_08063388: .4byte 0x081F5F34
_0806338C: .4byte 0x081F4EB0

	thumb_func_start sub_08063390
sub_08063390: @ 0x08063390
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, [r5, #0x60]
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #1
	bne _080633A8
	ldr r0, _080633A4 @ =0x08C17BE0
	b _080633AA
	.align 2, 0
_080633A4: .4byte 0x08C17BE0
_080633A8:
	ldr r0, _080633D0 @ =0x08C17E3C
_080633AA:
	str r0, [r4, #0x24]
	str r0, [r4, #0x20]
	movs r0, #0
	strh r0, [r4, #6]
	ldr r0, _080633D4 @ =0x081F5F34
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _080633D8 @ =0x081F5750
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	adds r0, r5, #0
	bl Proc_Break
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080633D0: .4byte 0x08C17E3C
_080633D4: .4byte 0x081F5F34
_080633D8: .4byte 0x081F5750

	thumb_func_start sub_080633DC
sub_080633DC: @ 0x080633DC
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _080633FC @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	ldr r0, [r4, #0x60]
	bl AnimDelete
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080633FC: .4byte 0x0201774C

	thumb_func_start NewEfxMagfcast
NewEfxMagfcast: @ 0x08063400
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	adds r7, r1, #0
	ldr r0, _08063444 @ =0x0201774C
	ldr r4, [r0]
	cmp r4, #0
	bne _08063458
	bl SpellFx_ClearBG1Position
	ldr r0, _08063448 @ =0x08C136C8
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r6, [r5, #0x5c]
	strh r4, [r5, #0x2c]
	ldr r4, _0806344C @ =0x0203E066
	adds r0, r6, #0
	bl GetAISSubjectId
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0x57
	blt _08063450
	cmp r0, #0x58
	bgt _08063450
	ldr r0, [r5, #0x5c]
	adds r1, r7, #0
	bl sub_0806347C
	b _08063458
	.align 2, 0
_08063444: .4byte 0x0201774C
_08063448: .4byte 0x08C136C8
_0806344C: .4byte 0x0203E066
_08063450:
	ldr r0, [r5, #0x5c]
	adds r1, r7, #2
	bl sub_0806347C
_08063458:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08063460
sub_08063460: @ 0x08063460
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x2c]
	adds r0, #1
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x14
	bne _08063478
	adds r0, r1, #0
	bl Proc_Break
_08063478:
	pop {r0}
	bx r0

	thumb_func_start sub_0806347C
sub_0806347C: @ 0x0806347C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	ldr r1, _080634B0 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080634B4 @ =0x08C136E0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r6, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	str r0, [r4, #0x44]
	cmp r5, #1
	beq _080634C8
	cmp r5, #1
	blo _080634B8
	cmp r5, #2
	beq _080634D8
	cmp r5, #3
	beq _080634EC
	b _08063502
	.align 2, 0
_080634B0: .4byte 0x0201774C
_080634B4: .4byte 0x08C136E0
_080634B8:
	ldr r0, _080634C0 @ =0x081EF330
	str r0, [r4, #0x48]
	ldr r0, _080634C4 @ =0x08C136F8
	b _080634DE
	.align 2, 0
_080634C0: .4byte 0x081EF330
_080634C4: .4byte 0x08C136F8
_080634C8:
	ldr r0, _080634D0 @ =0x081EF346
	str r0, [r4, #0x48]
	ldr r0, _080634D4 @ =0x08C136F8
	b _080634DE
	.align 2, 0
_080634D0: .4byte 0x081EF346
_080634D4: .4byte 0x08C136F8
_080634D8:
	ldr r0, _080634E4 @ =0x081EF34C
	str r0, [r4, #0x48]
	ldr r0, _080634E8 @ =0x08C13710
_080634DE:
	str r0, [r4, #0x4c]
	str r0, [r4, #0x50]
	b _08063502
	.align 2, 0
_080634E4: .4byte 0x081EF34C
_080634E8: .4byte 0x08C13710
_080634EC:
	ldr r0, _08063538 @ =0x081EF36E
	str r0, [r4, #0x48]
	ldr r0, _0806353C @ =0x08C13710
	str r0, [r4, #0x4c]
	str r0, [r4, #0x50]
	ldrb r1, [r6, #0x14]
	adds r0, r1, r6
	ldrb r1, [r0, #0x14]
	adds r0, r6, #0
	bl EfxPlaySEwithCmdCtrl
_08063502:
	ldr r0, _08063540 @ =0x081FDFA0
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, _08063544 @ =0x081FECF4
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_SetSomeColorEffect
	ldr r0, _08063548 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08063556
	ldr r0, [r4, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _0806354C
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _08063556
	.align 2, 0
_08063538: .4byte 0x081EF36E
_0806353C: .4byte 0x08C13710
_08063540: .4byte 0x081FDFA0
_08063544: .4byte 0x081FECF4
_08063548: .4byte gEkrDistanceType
_0806354C:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_08063556:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_0806355C
sub_0806355C: @ 0x0806355C
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _0806358A
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	b _080635A8
_0806358A:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _080635A8
	bl SpellFx_ClearBG1
	ldr r1, _080635B0 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_End
_080635A8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080635B0: .4byte 0x0201774C

	thumb_func_start NewEfxSunakemuri
NewEfxSunakemuri: @ 0x080635B4
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r0, _080635DC @ =0x0201774C
	ldr r4, [r0]
	cmp r4, #0
	bne _080635D6
	ldr r0, _080635E0 @ =0x08C13750
	movs r1, #3
	bl Proc_Start
	str r5, [r0, #0x5c]
	strh r4, [r0, #0x2c]
	adds r0, r5, #0
	adds r1, r6, #0
	bl sub_080635F0
_080635D6:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080635DC: .4byte 0x0201774C
_080635E0: .4byte 0x08C13750

	thumb_func_start sub_080635E4
sub_080635E4: @ 0x080635E4
	push {lr}
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080635F0
sub_080635F0: @ 0x080635F0
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r4, r1, #0
	ldr r1, _08063658 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0806365C @ =0x08C13768
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r6, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	ldr r2, _08063660 @ =0x08C2066C
	cmp r4, #0
	beq _0806361E
	ldr r2, _08063664 @ =0x08C208FC
	cmp r4, #1
	bne _0806361E
	ldr r2, _08063668 @ =0x08C207B4
_0806361E:
	ldr r3, _0806366C @ =0x08C20710
	cmp r4, #0
	beq _0806362C
	ldr r3, _08063670 @ =0x08C209A0
	cmp r4, #1
	bne _0806362C
	ldr r3, _08063674 @ =0x08C20858
_0806362C:
	str r2, [sp]
	adds r0, r6, #0
	adds r1, r3, #0
	bl sub_08050BF8
	str r0, [r5, #0x60]
	ldr r4, _08063678 @ =0x0203E0B0
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0x40
	bls _0806364E
	b _080637B8
_0806364E:
	lsls r0, r0, #2
	ldr r1, _0806367C @ =_08063680
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08063658: .4byte 0x0201774C
_0806365C: .4byte 0x08C13768
_08063660: .4byte 0x08C2066C
_08063664: .4byte 0x08C208FC
_08063668: .4byte 0x08C207B4
_0806366C: .4byte 0x08C20710
_08063670: .4byte 0x08C209A0
_08063674: .4byte 0x08C20858
_08063678: .4byte 0x0203E0B0
_0806367C: .4byte _08063680
_08063680: @ jump table
	.4byte _080637B8 @ case 0
	.4byte _08063784 @ case 1
	.4byte _08063784 @ case 2
	.4byte _08063784 @ case 3
	.4byte _08063784 @ case 4
	.4byte _08063784 @ case 5
	.4byte _080637B0 @ case 6
	.4byte _080637B0 @ case 7
	.4byte _080637B0 @ case 8
	.4byte _080637B0 @ case 9
	.4byte _08063784 @ case 10
	.4byte _080637B0 @ case 11
	.4byte _08063784 @ case 12
	.4byte _08063784 @ case 13
	.4byte _08063784 @ case 14
	.4byte _08063784 @ case 15
	.4byte _080637A0 @ case 16
	.4byte _08063784 @ case 17
	.4byte _08063784 @ case 18
	.4byte _08063784 @ case 19
	.4byte _0806378C @ case 20
	.4byte _080637A0 @ case 21
	.4byte _080637A0 @ case 22
	.4byte _080637B0 @ case 23
	.4byte _080637B0 @ case 24
	.4byte _08063784 @ case 25
	.4byte _08063784 @ case 26
	.4byte _08063784 @ case 27
	.4byte _08063784 @ case 28
	.4byte _080637B0 @ case 29
	.4byte _080637B0 @ case 30
	.4byte _080637B0 @ case 31
	.4byte _080637B0 @ case 32
	.4byte _080637B0 @ case 33
	.4byte _08063784 @ case 34
	.4byte _08063784 @ case 35
	.4byte _080637B0 @ case 36
	.4byte _08063784 @ case 37
	.4byte _08063784 @ case 38
	.4byte _08063784 @ case 39
	.4byte _08063784 @ case 40
	.4byte _08063784 @ case 41
	.4byte _08063784 @ case 42
	.4byte _08063784 @ case 43
	.4byte _080637B8 @ case 44
	.4byte _080637B0 @ case 45
	.4byte _080637B8 @ case 46
	.4byte _08063784 @ case 47
	.4byte _080637B0 @ case 48
	.4byte _080637B0 @ case 49
	.4byte _080637B0 @ case 50
	.4byte _08063784 @ case 51
	.4byte _080637B8 @ case 52
	.4byte _080637B8 @ case 53
	.4byte _080637A0 @ case 54
	.4byte _080637B0 @ case 55
	.4byte _08063784 @ case 56
	.4byte _08063784 @ case 57
	.4byte _08063784 @ case 58
	.4byte _08063784 @ case 59
	.4byte _080637A0 @ case 60
	.4byte _08063784 @ case 61
	.4byte _080637B0 @ case 62
	.4byte _08063784 @ case 63
	.4byte _08063784 @ case 64
_08063784:
	ldr r0, _08063788 @ =0x082010C8
	b _080637A2
	.align 2, 0
_08063788: .4byte 0x082010C8
_0806378C:
	ldr r0, [r5, #0x5c]
	bl sub_08068458
	cmp r0, #0
	beq _080637A0
	ldr r0, _0806379C @ =0x082010C8
	b _080637A2
	.align 2, 0
_0806379C: .4byte 0x082010C8
_080637A0:
	ldr r0, _080637AC @ =0x082010E8
_080637A2:
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	b _080637B8
	.align 2, 0
_080637AC: .4byte 0x082010E8
_080637B0:
	ldr r0, _080637CC @ =0x08201108
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
_080637B8:
	ldr r0, _080637D0 @ =0x08200C58
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080637CC: .4byte 0x08201108
_080637D0: .4byte 0x08200C58

	thumb_func_start sub_080637D4
sub_080637D4: @ 0x080637D4
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #9
	bne _080637FA
	ldr r0, _08063800 @ =0x0201774C
	ldr r1, [r0]
	subs r1, #1
	str r1, [r0]
	ldr r0, [r4, #0x60]
	bl AnimDelete
	adds r0, r4, #0
	bl Proc_Break
_080637FA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08063800: .4byte 0x0201774C

	thumb_func_start NewEfxLokmsuna
NewEfxLokmsuna: @ 0x08063804
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _08063828 @ =0x0201774C
	ldr r4, [r0]
	cmp r4, #0
	bne _08063822
	ldr r0, _0806382C @ =0x08C13780
	movs r1, #3
	bl Proc_Start
	str r5, [r0, #0x5c]
	strh r4, [r0, #0x2c]
	adds r0, r5, #0
	bl sub_0806383C
_08063822:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08063828: .4byte 0x0201774C
_0806382C: .4byte 0x08C13780

	thumb_func_start sub_08063830
sub_08063830: @ 0x08063830
	push {lr}
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806383C
sub_0806383C: @ 0x0806383C
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _08063888 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0806388C @ =0x08C13798
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r7, #0
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r2, _08063890 @ =0x08C48524
	ldr r3, _08063894 @ =0x08C48648
	str r2, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	bl sub_08050BF8
	adds r6, r0, #0
	str r6, [r4, #0x60]
	ldr r0, _08063898 @ =0x00000FFF
	ldrh r1, [r6, #8]
	ands r0, r1
	strh r0, [r6, #8]
	adds r0, r5, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _0806389C
	movs r1, #0xe0
	lsls r1, r1, #7
	b _080638A0
	.align 2, 0
_08063888: .4byte 0x0201774C
_0806388C: .4byte 0x08C13798
_08063890: .4byte 0x08C48524
_08063894: .4byte 0x08C48648
_08063898: .4byte 0x00000FFF
_0806389C:
	movs r1, #0x90
	lsls r1, r1, #8
_080638A0:
	adds r0, r1, #0
	ldrh r1, [r6, #8]
	orrs r0, r1
	strh r0, [r6, #8]
	ldr r0, _080638BC @ =0x082E4074
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080638BC: .4byte 0x082E4074

	thumb_func_start sub_080638C0
sub_080638C0: @ 0x080638C0
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xf
	bne _080638E6
	ldr r0, _080638EC @ =0x0201774C
	ldr r1, [r0]
	subs r1, #1
	str r1, [r0]
	ldr r0, [r4, #0x60]
	bl AnimDelete
	adds r0, r4, #0
	bl Proc_Break
_080638E6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080638EC: .4byte 0x0201774C

	thumb_func_start NewEfxKingPika
NewEfxKingPika: @ 0x080638F0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08063908 @ =0x08C137B0
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08063908: .4byte 0x08C137B0

	thumb_func_start sub_0806390C
sub_0806390C: @ 0x0806390C
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	ldr r6, [r7, #0x5c]
	ldrh r0, [r7, #0x2c]
	adds r0, #1
	strh r0, [r7, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0806392E
	adds r0, r6, #0
	movs r1, #1
	movs r2, #0x28
	movs r3, #0
	bl sub_0804FD74
	b _08063972
_0806392E:
	cmp r0, #0xa
	bne _0806393C
	adds r0, r6, #0
	movs r1, #0x14
	bl sub_0804F7B8
	b _08063972
_0806393C:
	cmp r0, #0x2d
	bne _08063972
	ldr r5, _08063978 @ =gAnims
	adds r0, r6, #0
	bl GetAISSubjectId
	lsls r0, r0, #3
	adds r0, r0, r5
	ldr r4, [r0]
	adds r0, r6, #0
	bl GetAISSubjectId
	lsls r0, r0, #1
	adds r0, #1
	lsls r0, r0, #2
	adds r0, r0, r5
	ldr r2, [r0]
	movs r0, #0x40
	ldrh r1, [r4, #0x10]
	orrs r1, r0
	strh r1, [r4, #0x10]
	ldrh r1, [r2, #0x10]
	orrs r0, r1
	strh r0, [r2, #0x10]
	adds r0, r7, #0
	bl Proc_Break
_08063972:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08063978: .4byte gAnims

	thumb_func_start NewEfxFlashFX
NewEfxFlashFX: @ 0x0806397C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08063994 @ =0x08C137C8
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08063994: .4byte 0x08C137C8

	thumb_func_start sub_08063998
sub_08063998: @ 0x08063998
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	ldr r6, [r7, #0x5c]
	ldrh r0, [r7, #0x2c]
	adds r0, #1
	strh r0, [r7, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _080639B6
	adds r0, r6, #0
	movs r1, #5
	bl sub_0804F7B8
	b _080639EC
_080639B6:
	cmp r0, #6
	bne _080639EC
	ldr r5, _080639F4 @ =gAnims
	adds r0, r6, #0
	bl GetAISSubjectId
	lsls r0, r0, #3
	adds r0, r0, r5
	ldr r4, [r0]
	adds r0, r6, #0
	bl GetAISSubjectId
	lsls r0, r0, #1
	adds r0, #1
	lsls r0, r0, #2
	adds r0, r0, r5
	ldr r2, [r0]
	movs r0, #0x40
	ldrh r1, [r4, #0x10]
	orrs r1, r0
	strh r1, [r4, #0x10]
	ldrh r1, [r2, #0x10]
	orrs r0, r1
	strh r0, [r2, #0x10]
	adds r0, r7, #0
	bl Proc_Break
_080639EC:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080639F4: .4byte gAnims

	thumb_func_start sub_080639F8
sub_080639F8: @ 0x080639F8
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _08063A58 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08063A5C @ =0x08C137E0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x28
	strh r0, [r4, #0x2e]
	ldr r3, _08063A60 @ =0x08C159AC
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	ldr r0, _08063A64 @ =0x081F1574
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _08063A68 @ =0x081F1400
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xee
	movs r3, #1
	bl PlaySFX
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08063A58: .4byte 0x0201774C
_08063A5C: .4byte 0x08C137E0
_08063A60: .4byte 0x08C159AC
_08063A64: .4byte 0x081F1574
_08063A68: .4byte 0x081F1400

	thumb_func_start sub_08063A6C
sub_08063A6C: @ 0x08063A6C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x18
	bne _08063A90
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xee
	movs r3, #1
	bl PlaySFX
_08063A90:
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	movs r2, #0x2e
	ldrsh r0, [r4, r2]
	cmp r1, r0
	ble _08063AB0
	ldr r0, [r4, #0x60]
	bl AnimDelete
	ldr r1, _08063AB8 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08063AB0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08063AB8: .4byte 0x0201774C

	thumb_func_start sub_08063ABC
sub_08063ABC: @ 0x08063ABC
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _08063B1C @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08063B20 @ =0x08C137F8
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x19
	strh r0, [r4, #0x2e]
	ldr r3, _08063B24 @ =0x08C1597C
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x60]
	ldr r0, _08063B28 @ =0x081F1574
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _08063B2C @ =0x081F1400
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xe1
	movs r3, #1
	bl PlaySFX
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08063B1C: .4byte 0x0201774C
_08063B20: .4byte 0x08C137F8
_08063B24: .4byte 0x08C1597C
_08063B28: .4byte 0x081F1574
_08063B2C: .4byte 0x081F1400

	thumb_func_start sub_08063B30
sub_08063B30: @ 0x08063B30
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08063B58
	ldr r0, [r4, #0x60]
	bl AnimDelete
	ldr r1, _08063B60 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08063B58:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08063B60: .4byte 0x0201774C

	thumb_func_start NewEfxSpecalEffect
NewEfxSpecalEffect: @ 0x08063B64
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r4, _08063B98 @ =0x02017768
	bl GetAISSubjectId
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _08063BB2
	adds r0, r5, #0
	bl GetAISSubjectId
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r1, #1
	strh r1, [r0]
	adds r0, r5, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _08063BA0
	ldr r0, _08063B9C @ =gpEkrBattleUnitLeft
	b _08063BA2
	.align 2, 0
_08063B98: .4byte 0x02017768
_08063B9C: .4byte gpEkrBattleUnitLeft
_08063BA0:
	ldr r0, _08063BE0 @ =gpEkrBattleUnitRight
_08063BA2:
	ldr r0, [r0]
	adds r0, #0x4a
	ldrh r0, [r0]
	bl sub_08053B98
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08063BE8
_08063BB2:
	ldr r4, _08063BE4 @ =gAnims
	adds r0, r5, #0
	bl GetAISSubjectId
	lsls r0, r0, #3
	adds r0, r0, r4
	ldr r6, [r0]
	adds r0, r5, #0
	bl GetAISSubjectId
	lsls r0, r0, #1
	adds r0, #1
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r2, [r0]
	movs r1, #0x40
	ldrh r0, [r6, #0x10]
	orrs r0, r1
	strh r0, [r6, #0x10]
	ldrh r0, [r2, #0x10]
	orrs r0, r1
	strh r0, [r2, #0x10]
	b _08063C0A
	.align 2, 0
_08063BE0: .4byte gpEkrBattleUnitRight
_08063BE4: .4byte gAnims
_08063BE8:
	ldr r0, _08063C10 @ =0x08C13810
	movs r1, #3
	bl Proc_Start
	str r5, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0xf0
	movs r2, #0x78
	movs r3, #0
	bl PlaySFX
	adds r0, r5, #0
	bl sub_08063C20
_08063C0A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08063C10: .4byte 0x08C13810

	thumb_func_start sub_08063C14
sub_08063C14: @ 0x08063C14
	push {lr}
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08063C20
sub_08063C20: @ 0x08063C20
	push {r4, lr}
	adds r4, r0, #0
	bl SpellFx_ClearBG1Position
	ldr r0, _08063C3C @ =0x08C13828
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08063C3C: .4byte 0x08C13828

	thumb_func_start sub_08063C40
sub_08063C40: @ 0x08063C40
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08063C5A
	ldr r0, [r6, #0x5c]
	bl sub_08063CB0
	b _08063CA4
_08063C5A:
	cmp r0, #0x15
	bne _08063C6E
	ldr r0, [r6, #0x5c]
	movs r1, #0x2d
	movs r2, #1
	bl sub_080565FC
	bl sub_08063D24
	b _08063CA4
_08063C6E:
	cmp r0, #0x46
	bne _08063CA4
	ldr r5, _08063CAC @ =gAnims
	ldr r0, [r6, #0x5c]
	bl GetAISSubjectId
	lsls r0, r0, #3
	adds r0, r0, r5
	ldr r4, [r0]
	ldr r0, [r6, #0x5c]
	bl GetAISSubjectId
	lsls r0, r0, #1
	adds r0, #1
	lsls r0, r0, #2
	adds r0, r0, r5
	ldr r2, [r0]
	movs r0, #0x40
	ldrh r1, [r4, #0x10]
	orrs r1, r0
	strh r1, [r4, #0x10]
	ldrh r1, [r2, #0x10]
	orrs r0, r1
	strh r0, [r2, #0x10]
	adds r0, r6, #0
	bl Proc_Break
_08063CA4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08063CAC: .4byte gAnims

	thumb_func_start sub_08063CB0
sub_08063CB0: @ 0x08063CB0
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _08063CEC @ =0x08C13840
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r0, _08063CF0 @ =0x081F90B4
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, _08063CF4 @ =0x081F9174
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	ldr r0, [r4, #0x5c]
	ldr r2, _08063CF8 @ =0x081F9194
	adds r1, r2, #0
	bl SpellFx_WriteBgMap
	bl SpellFx_SetSomeColorEffect
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08063CEC: .4byte 0x08C13840
_08063CF0: .4byte 0x081F90B4
_08063CF4: .4byte 0x081F9174
_08063CF8: .4byte 0x081F9194

	thumb_func_start sub_08063CFC
sub_08063CFC: @ 0x08063CFC
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3c
	bne _08063D1C
	bl SpellFx_ClearBG1
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_08063D1C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08063D24
sub_08063D24: @ 0x08063D24
	push {lr}
	ldr r0, _08063D40 @ =0x08C13858
	movs r1, #3
	bl Proc_Start
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	str r1, [r0, #0x44]
	bl sub_08063DC8
	pop {r0}
	bx r0
	.align 2, 0
_08063D40: .4byte 0x08C13858

	thumb_func_start sub_08063D44
sub_08063D44: @ 0x08063D44
	push {r4, r5, r6, r7, lr}
	mov ip, r0
	ldr r0, _08063D8C @ =0x0201FDAC
	ldr r0, [r0]
	ldr r4, _08063D90 @ =0x0201FDB8
	cmp r0, #0
	bne _08063D54
	ldr r4, _08063D94 @ =0x0201FEF8
_08063D54:
	movs r3, #0
	movs r7, #0x88
	lsls r7, r7, #0x10
	movs r6, #0x88
	ldr r5, _08063D98 @ =0x08C13888
_08063D5E:
	cmp r3, #0x77
	bhi _08063DAA
	movs r0, #0
	ldrsh r1, [r5, r0]
	mov r2, ip
	ldr r0, [r2, #0x44]
	muls r0, r1, r0
	lsls r0, r0, #4
	lsrs r2, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	beq _08063DA6
	cmp r3, #0x3b
	bhi _08063DA0
	adds r0, r3, #0
	subs r0, #0x88
	cmp r1, r0
	bhs _08063DA6
	ldr r1, _08063D9C @ =0x0000FF78
	adds r0, r3, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	b _08063DA6
	.align 2, 0
_08063D8C: .4byte 0x0201FDAC
_08063D90: .4byte 0x0201FDB8
_08063D94: .4byte 0x0201FEF8
_08063D98: .4byte 0x08C13888
_08063D9C: .4byte 0x0000FF78
_08063DA0:
	cmp r1, r6
	bls _08063DA6
	lsrs r2, r7, #0x10
_08063DA6:
	strh r2, [r4]
	b _08063DAE
_08063DAA:
	movs r0, #0
	strh r0, [r4]
_08063DAE:
	adds r4, #2
	ldr r2, _08063DC4 @ =0xFFFF0000
	adds r7, r7, r2
	subs r6, #1
	adds r5, #2
	adds r3, #1
	cmp r3, #0x9f
	bls _08063D5E
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08063DC4: .4byte 0xFFFF0000

	thumb_func_start sub_08063DC8
sub_08063DC8: @ 0x08063DC8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08063DE4 @ =0x08C13870
	movs r1, #3
	bl Proc_Start
	movs r1, #0
	strh r1, [r0, #0x2c]
	movs r1, #0x28
	strh r1, [r0, #0x2e]
	str r4, [r0, #0x5c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08063DE4: .4byte 0x08C13870

	thumb_func_start sub_08063DE8
sub_08063DE8: @ 0x08063DE8
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r5, [r4, #0x5c]
	movs r2, #0x80
	lsls r2, r2, #0xb
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	str r0, [r5, #0x44]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08063E24
	adds r0, r5, #0
	bl Proc_End
	adds r0, r4, #0
	bl Proc_Break
_08063E24:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08063E2C
sub_08063E2C: @ 0x08063E2C
	push {r4, lr}
	adds r4, r0, #0
	bl SpellFx_ClearBG1Position
	ldr r0, _08063E48 @ =0x08C13978
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08063E48: .4byte 0x08C13978

	thumb_func_start sub_08063E4C
sub_08063E4C: @ 0x08063E4C
	push {r4, r5, lr}
	adds r5, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x11
	bne _08063E82
	ldr r0, [r5, #0x5c]
	movs r1, #0x49
	bl sub_08063E94
	movs r4, #0xa0
	lsls r4, r4, #1
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r4, #0
	bl sub_08067DB4
	ldr r0, [r5, #0x5c]
	movs r2, #2
	ldrsh r1, [r0, r2]
	adds r0, r4, #0
	movs r2, #1
	bl sub_08067ED4
_08063E82:
	ldrh r0, [r5, #0x2c]
	cmp r0, #0x64
	bne _08063E8E
	adds r0, r5, #0
	bl Proc_Break
_08063E8E:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08063E94
sub_08063E94: @ 0x08063E94
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _08063F14 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08063F18 @ =0x08C13990
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	strh r5, [r0, #0x30]
	str r1, [r0, #0x44]
	ldr r1, _08063F1C @ =0x081EF390
	str r1, [r0, #0x48]
	ldr r1, _08063F20 @ =0x08C139A8
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r0, _08063F24 @ =0x082008AC
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	ldr r0, _08063F28 @ =0x081FFC38
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	bl SpellFx_SetSomeColorEffect
	ldr r3, _08063F2C @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x14]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x14]
	ldrb r0, [r3, #0x10]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x10]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	bl SetBgOffset
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08063F14: .4byte 0x0201774C
_08063F18: .4byte 0x08C13990
_08063F1C: .4byte 0x081EF390
_08063F20: .4byte 0x08C139A8
_08063F24: .4byte 0x082008AC
_08063F28: .4byte 0x081FFC38
_08063F2C: .4byte gDispIo

	thumb_func_start sub_08063F30
sub_08063F30: @ 0x08063F30
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _08063F5C
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
_08063F5C:
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _08063FAE
	ldr r3, _08063FB4 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x18]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x18]
	movs r0, #3
	ldrb r1, [r3, #0x14]
	orrs r0, r1
	strb r0, [r3, #0x14]
	bl SpellFx_ClearBG1
	ldr r1, _08063FB8 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_08063FAE:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08063FB4: .4byte gDispIo
_08063FB8: .4byte 0x0201774C

	thumb_func_start NewEfxMantBatabata
NewEfxMantBatabata: @ 0x08063FBC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r7, r0, #0
	bl GetAISSubjectId
	ldr r1, _08063FE8 @ =0x0203E066
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	subs r0, #0x57
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x1b
	bhi _080640B0
	lsls r0, r0, #2
	ldr r1, _08063FEC @ =_08063FF0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08063FE8: .4byte 0x0203E066
_08063FEC: .4byte _08063FF0
_08063FF0: @ jump table
	.4byte _08064060 @ case 0
	.4byte _08064060 @ case 1
	.4byte _08064070 @ case 2
	.4byte _080640B0 @ case 3
	.4byte _08064070 @ case 4
	.4byte _080640B0 @ case 5
	.4byte _080640B0 @ case 6
	.4byte _080640B0 @ case 7
	.4byte _080640B0 @ case 8
	.4byte _080640B0 @ case 9
	.4byte _080640B0 @ case 10
	.4byte _080640B0 @ case 11
	.4byte _080640B0 @ case 12
	.4byte _080640B0 @ case 13
	.4byte _080640B0 @ case 14
	.4byte _080640B0 @ case 15
	.4byte _080640B0 @ case 16
	.4byte _08064080 @ case 17
	.4byte _080640B0 @ case 18
	.4byte _080640B0 @ case 19
	.4byte _080640A0 @ case 20
	.4byte _080640A0 @ case 21
	.4byte _080640B0 @ case 22
	.4byte _080640B0 @ case 23
	.4byte _080640B0 @ case 24
	.4byte _080640B0 @ case 25
	.4byte _08064090 @ case 26
	.4byte _08064090 @ case 27
_08064060:
	ldr r5, _08064068 @ =0x08C20B34
	ldr r4, _0806406C @ =0x08C20CC8
	b _080640B4
	.align 2, 0
_08064068: .4byte 0x08C20B34
_0806406C: .4byte 0x08C20CC8
_08064070:
	ldr r5, _08064078 @ =0x08C20E74
	ldr r4, _0806407C @ =0x08C21020
	b _080640B4
	.align 2, 0
_08064078: .4byte 0x08C20E74
_0806407C: .4byte 0x08C21020
_08064080:
	ldr r5, _08064088 @ =0x08C211CC
	ldr r4, _0806408C @ =0x08C21374
	b _080640B4
	.align 2, 0
_08064088: .4byte 0x08C211CC
_0806408C: .4byte 0x08C21374
_08064090:
	ldr r5, _08064098 @ =0x08C214B0
	ldr r4, _0806409C @ =0x08C215E8
	b _080640B4
	.align 2, 0
_08064098: .4byte 0x08C214B0
_0806409C: .4byte 0x08C215E8
_080640A0:
	ldr r5, _080640A8 @ =0x08C2184C
	ldr r4, _080640AC @ =0x08C21AB4
	b _080640B4
	.align 2, 0
_080640A8: .4byte 0x08C2184C
_080640AC: .4byte 0x08C21AB4
_080640B0:
	ldr r5, _0806410C @ =0x08C21BD8
	ldr r4, _08064110 @ =0x08C21CFC
_080640B4:
	ldr r0, _08064114 @ =0x08C139B8
	movs r1, #3
	bl Proc_Start
	adds r6, r0, #0
	str r7, [r6, #0x5c]
	movs r0, #0
	mov r8, r0
	movs r0, #0
	strh r0, [r6, #0x2c]
	str r5, [sp]
	adds r0, r7, #0
	adds r1, r4, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl sub_08050BF8
	adds r4, r0, #0
	str r4, [r6, #0x60]
	ldr r0, [r6, #0x5c]
	bl GetAISSubjectId
	ldr r1, _08064118 @ =0x02000010
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r6, #0x60]
	str r1, [r0]
	movs r0, #0xc0
	lsls r0, r0, #4
	ldrh r1, [r4, #8]
	ands r0, r1
	strh r0, [r4, #8]
	movs r0, #0x64
	strh r0, [r4, #0xa]
	bl AnimSort
	adds r0, r7, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _0806411C
	movs r1, #0xe4
	lsls r1, r1, #7
	b _08064120
	.align 2, 0
_0806410C: .4byte 0x08C21BD8
_08064110: .4byte 0x08C21CFC
_08064114: .4byte 0x08C139B8
_08064118: .4byte 0x02000010
_0806411C:
	movs r1, #0x93
	lsls r1, r1, #8
_08064120:
	adds r0, r1, #0
	ldrh r1, [r4, #8]
	orrs r0, r1
	strh r0, [r4, #8]
	ldr r0, [r6, #0x5c]
	bl GetAISSubjectId
	bl sub_08055034
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08064140
sub_08064140: @ 0x08064140
	push {lr}
	adds r2, r0, #0
	ldr r1, [r2, #0x60]
	ldr r0, [r2, #0x5c]
	ldrh r0, [r0, #2]
	strh r0, [r1, #2]
	ldr r0, [r2, #0x5c]
	ldrh r1, [r0, #0x10]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _08064166
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _08064166
	adds r0, r2, #0
	bl Proc_Break
_08064166:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806416C
sub_0806416C: @ 0x0806416C
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, [r4, #0x5c]
	ldrh r0, [r0, #2]
	strh r0, [r1, #2]
	bl sub_0804DD50
	cmp r0, #1
	bne _080641A6
	ldr r0, [r4, #0x5c]
	bl GetAISSubjectId
	bl sub_0805506C
	ldr r0, [r4, #0x60]
	bl AnimDelete
	ldr r0, [r4, #0x5c]
	bl GetAISSubjectId
	ldr r1, _080641AC @ =0x02000010
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r1, #0
	str r1, [r0]
	adds r0, r4, #0
	bl Proc_Break
_080641A6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080641AC: .4byte 0x02000010

	thumb_func_start NewEfxChillEffect
NewEfxChillEffect: @ 0x080641B0
	push {r4, lr}
	adds r4, r0, #0
	bl SpellFx_ClearBG1Position
	ldr r0, _080641CC @ =0x08C139D8
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080641CC: .4byte 0x08C139D8

	thumb_func_start sub_080641D0
sub_080641D0: @ 0x080641D0
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _080641F0
	ldr r0, [r4, #0x5c]
	bl sub_08064214
	ldr r0, [r4, #0x5c]
	bl sub_080642C4
	b _0806420C
_080641F0:
	cmp r0, #3
	beq _080641F8
	cmp r0, #0x11
	bne _08064202
_080641F8:
	ldr r0, [r4, #0x5c]
	movs r1, #5
	bl sub_0804F834
	b _0806420C
_08064202:
	cmp r0, #0x24
	bne _0806420C
	adds r0, r4, #0
	bl Proc_Break
_0806420C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08064214
sub_08064214: @ 0x08064214
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08064258 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0806425C @ =0x08C139F0
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	str r1, [r0, #0x44]
	ldr r1, _08064260 @ =0x081EF3AE
	str r1, [r0, #0x48]
	ldr r1, _08064264 @ =0x08C13A08
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r0, _08064268 @ =0x0829CBC4
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08064258: .4byte 0x0201774C
_0806425C: .4byte 0x08C139F0
_08064260: .4byte 0x081EF3AE
_08064264: .4byte 0x08C13A08
_08064268: .4byte 0x0829CBC4

	thumb_func_start sub_0806426C
sub_0806426C: @ 0x0806426C
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _0806429A
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	b _080642B8
_0806429A:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _080642B8
	bl SpellFx_ClearBG1
	ldr r1, _080642C0 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_080642B8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080642C0: .4byte 0x0201774C

	thumb_func_start sub_080642C4
sub_080642C4: @ 0x080642C4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080642E8 @ =0x08C13A14
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _080642EC @ =0x081EF3BC
	str r1, [r0, #0x48]
	ldr r1, _080642F0 @ =0x082B99F0
	str r1, [r0, #0x4c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080642E8: .4byte 0x08C13A14
_080642EC: .4byte 0x081EF3BC
_080642F0: .4byte 0x082B99F0

	thumb_func_start sub_080642F4
sub_080642F4: @ 0x080642F4
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _0806431A
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	b _08064328
_0806431A:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _08064328
	adds r0, r4, #0
	bl Proc_Break
_08064328:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start NewEfxChillAnime
NewEfxChillAnime: @ 0x08064330
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r7, r0, #0
	cmp r1, #0
	bne _0806434C
	ldr r6, _08064344 @ =0x08C44990
	ldr r4, _08064348 @ =0x08C44B94
	b _08064350
	.align 2, 0
_08064344: .4byte 0x08C44990
_08064348: .4byte 0x08C44B94
_0806434C:
	ldr r6, _080643A8 @ =0x08C44F48
	ldr r4, _080643AC @ =0x08C452FC
_08064350:
	ldr r0, _080643B0 @ =0x08C13A34
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r7, [r5, #0x5c]
	movs r0, #0
	mov r8, r0
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r6, [sp]
	adds r0, r7, #0
	adds r1, r4, #0
	adds r2, r6, #0
	adds r3, r4, #0
	bl sub_08050BF8
	adds r4, r0, #0
	str r4, [r5, #0x60]
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	ldr r1, _080643B4 @ =0x02000010
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r5, #0x60]
	str r1, [r0]
	movs r0, #0xc0
	lsls r0, r0, #4
	ldrh r1, [r4, #8]
	ands r0, r1
	strh r0, [r4, #8]
	movs r0, #0x64
	strh r0, [r4, #0xa]
	bl AnimSort
	adds r0, r7, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _080643B8
	movs r1, #0xe4
	lsls r1, r1, #7
	b _080643BC
	.align 2, 0
_080643A8: .4byte 0x08C44F48
_080643AC: .4byte 0x08C452FC
_080643B0: .4byte 0x08C13A34
_080643B4: .4byte 0x02000010
_080643B8:
	movs r1, #0x93
	lsls r1, r1, #8
_080643BC:
	adds r0, r1, #0
	ldrh r1, [r4, #8]
	orrs r0, r1
	strh r0, [r4, #8]
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	bl sub_08055034
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080643DC
sub_080643DC: @ 0x080643DC
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r1, [r6, #0x60]
	ldr r0, [r6, #0x5c]
	ldrh r0, [r0, #2]
	strh r0, [r1, #2]
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x14
	bne _08064448
	ldr r0, [r6, #0x5c]
	bl GetAISSubjectId
	bl sub_0805506C
	ldr r0, [r6, #0x60]
	bl AnimDelete
	ldr r0, [r6, #0x5c]
	bl GetAISSubjectId
	ldr r1, _08064450 @ =0x02000010
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r1, #0
	str r1, [r0]
	ldr r5, _08064454 @ =gAnims
	ldr r0, [r6, #0x5c]
	bl GetAISSubjectId
	lsls r0, r0, #3
	adds r0, r0, r5
	ldr r4, [r0]
	ldr r0, [r6, #0x5c]
	bl GetAISSubjectId
	lsls r0, r0, #1
	adds r0, #1
	lsls r0, r0, #2
	adds r0, r0, r5
	ldr r2, [r0]
	movs r0, #0x40
	ldrh r1, [r4, #0x10]
	orrs r1, r0
	strh r1, [r4, #0x10]
	ldrh r1, [r2, #0x10]
	orrs r0, r1
	strh r0, [r2, #0x10]
	adds r0, r6, #0
	bl Proc_Break
_08064448:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08064450: .4byte 0x02000010
_08064454: .4byte gAnims

	thumb_func_start sub_08064458
sub_08064458: @ 0x08064458
	push {r4, lr}
	adds r4, r0, #0
	bl SpellFx_ClearBG1Position
	ldr r0, _08064474 @ =0x08C13A4C
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08064474: .4byte 0x08C13A4C

	thumb_func_start sub_08064478
sub_08064478: @ 0x08064478
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r0, [r6, #0x5c]
	bl GetCoreAIStruct
	adds r1, r0, #0
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _080644C4
	adds r0, r1, #0
	bl sub_0806452C
	ldr r0, [r6, #0x5c]
	bl sub_08054F4C
	cmp r0, #1
	bne _080644AA
	movs r0, #0xba
	lsls r0, r0, #2
	b _080644AC
_080644AA:
	ldr r0, _080644C0 @ =0x000002E3
_080644AC:
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r6, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl PlaySFX
	b _08064520
	.align 2, 0
_080644C0: .4byte 0x000002E3
_080644C4:
	cmp r0, #0x1a
	bne _080644EA
	ldr r0, [r6, #0x5c]
	movs r1, #0x41
	bl sub_08064644
	adds r1, r0, #0
	ldr r0, [r6, #0x5c]
	movs r2, #0xa
	str r2, [sp]
	movs r3, #0x2d
	bl sub_080646EC
	ldr r0, [r6, #0x5c]
	movs r1, #0x41
	movs r2, #1
	bl sub_080565FC
	b _08064520
_080644EA:
	cmp r0, #0x6f
	bne _08064520
	ldr r5, _08064528 @ =gAnims
	ldr r0, [r6, #0x5c]
	bl GetAISSubjectId
	lsls r0, r0, #3
	adds r0, r0, r5
	ldr r4, [r0]
	ldr r0, [r6, #0x5c]
	bl GetAISSubjectId
	lsls r0, r0, #1
	adds r0, #1
	lsls r0, r0, #2
	adds r0, r0, r5
	ldr r2, [r0]
	movs r0, #0x40
	ldrh r1, [r4, #0x10]
	orrs r1, r0
	strh r1, [r4, #0x10]
	ldrh r1, [r2, #0x10]
	orrs r0, r1
	strh r0, [r2, #0x10]
	adds r0, r6, #0
	bl Proc_Break
_08064520:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08064528: .4byte gAnims

	thumb_func_start sub_0806452C
sub_0806452C: @ 0x0806452C
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _080645A8 @ =0x08C13A64
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r4, #0
	movs r1, #0
	strh r1, [r5, #0x2c]
	str r1, [r5, #0x44]
	ldr r0, _080645AC @ =0x081EF406
	str r0, [r5, #0x48]
	ldr r0, _080645B0 @ =0x08C13A7C
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _080645B4 @ =0x08C13AB0
	str r0, [r5, #0x54]
	str r1, [r5, #0x58]
	ldr r0, _080645B8 @ =0x082BE028
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_SetSomeColorEffect
	ldr r3, _080645BC @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r0, #0xb
	strb r0, [r1]
	adds r1, #1
	movs r0, #7
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r4, [r0]
	ldr r0, _080645C0 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _080645CE
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _080645C4
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
	b _080645CE
	.align 2, 0
_080645A8: .4byte 0x08C13A64
_080645AC: .4byte 0x081EF406
_080645B0: .4byte 0x08C13A7C
_080645B4: .4byte 0x08C13AB0
_080645B8: .4byte 0x082BE028
_080645BC: .4byte gDispIo
_080645C0: .4byte gEkrDistanceType
_080645C4:
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
_080645CE:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080645D4
sub_080645D4: @ 0x080645D4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _08064624
	ldr r7, [r4, #0x4c]
	ldr r0, [r4, #0x50]
	mov r8, r0
	ldr r0, [r4, #0x54]
	lsls r5, r1, #2
	adds r6, r5, r0
	ldr r0, [r4, #0x58]
	ldr r2, [r6]
	cmp r0, r2
	beq _0806460E
	movs r1, #0x80
	lsls r1, r1, #6
	adds r0, r2, #0
	bl SpellFx_RegisterBgGfx
_0806460E:
	ldr r0, [r6]
	str r0, [r4, #0x58]
	ldr r0, [r4, #0x5c]
	adds r1, r5, r7
	ldr r1, [r1]
	mov r3, r8
	adds r2, r5, r3
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	b _0806463A
_08064624:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0806463A
	bl SpellFx_ClearBG1
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_0806463A:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08064644
sub_08064644: @ 0x08064644
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _08064668 @ =0x08C13AE4
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	str r5, [r0, #0x44]
	movs r1, #0x80
	lsls r1, r1, #1
	str r1, [r0, #0x48]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08064668: .4byte 0x08C13AE4

	thumb_func_start sub_0806466C
sub_0806466C: @ 0x0806466C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r2, r0, #0
	ldr r0, _080646DC @ =0x0201FDAC
	ldr r0, [r0]
	ldr r4, _080646E0 @ =0x0201FDB8
	cmp r0, #0
	bne _08064680
	ldr r4, _080646E4 @ =0x0201FEF8
_08064680:
	movs r3, #0
	ldr r0, [r2, #0x44]
	mov ip, r0
	ldr r1, _080646E8 @ =gSinLut
	mov r8, r1
	movs r6, #0xff
	ldr r5, [r2, #0x48]
_0806468E:
	lsls r0, r3, #1
	movs r7, #0x2e
	ldrsh r1, [r2, r7]
	adds r0, r0, r1
	ands r0, r6
	lsls r0, r0, #1
	add r0, r8
	movs r1, #0
	ldrsh r0, [r0, r1]
	asrs r0, r0, #9
	adds r0, #4
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	muls r0, r5, r0
	asrs r0, r0, #8
	strh r0, [r4]
	adds r4, #2
	adds r3, #1
	cmp r3, #0x4f
	bls _0806468E
	ldrh r0, [r2, #0x2e]
	adds r0, #2
	strh r0, [r2, #0x2e]
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, ip
	bne _080646D0
	adds r0, r2, #0
	bl Proc_End
_080646D0:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080646DC: .4byte 0x0201FDAC
_080646E0: .4byte 0x0201FDB8
_080646E4: .4byte 0x0201FEF8
_080646E8: .4byte gSinLut

	thumb_func_start sub_080646EC
sub_080646EC: @ 0x080646EC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	mov r8, r1
	adds r5, r2, #0
	adds r6, r3, #0
	ldr r7, [sp, #0x18]
	ldr r0, _08064720 @ =0x08C13AFC
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r5, [r0, #0x44]
	str r6, [r0, #0x48]
	str r7, [r0, #0x4c]
	mov r1, r8
	str r1, [r0, #0x64]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08064720: .4byte 0x08C13AFC

	thumb_func_start sub_08064724
sub_08064724: @ 0x08064724
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r4, [r5, #0x64]
	movs r2, #0x80
	lsls r2, r2, #1
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	ldr r0, [r5, #0x44]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	str r0, [r4, #0x48]
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r5, #0x44]
	cmp r0, r1
	ble _0806475C
	movs r0, #0
	strh r0, [r5, #0x2c]
	adds r0, r5, #0
	bl Proc_Break
_0806475C:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08064764
sub_08064764: @ 0x08064764
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r2, #0x48]
	cmp r0, r1
	ble _08064782
	movs r0, #0
	strh r0, [r2, #0x2c]
	adds r0, r2, #0
	bl Proc_Break
_08064782:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08064788
sub_08064788: @ 0x08064788
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r4, [r5, #0x64]
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	ldr r0, [r5, #0x4c]
	str r0, [sp]
	movs r0, #0
	movs r2, #0
	bl Interpolate
	str r0, [r4, #0x48]
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r5, #0x4c]
	cmp r0, r1
	ble _080647C0
	movs r0, #0
	strh r0, [r5, #0x2c]
	adds r0, r5, #0
	bl Proc_Break
_080647C0:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080647C8
sub_080647C8: @ 0x080647C8
	ldr r0, _080647D4 @ =0x0203E0CC
	movs r1, #0
	str r1, [r0]
	ldr r0, _080647D8 @ =0x0203E0D0
	str r1, [r0]
	bx lr
	.align 2, 0
_080647D4: .4byte 0x0203E0CC
_080647D8: .4byte 0x0203E0D0

	thumb_func_start sub_080647DC
sub_080647DC: @ 0x080647DC
	push {r4, lr}
	ldr r4, _080647F4 @ =0x0203E0CC
	ldr r0, [r4]
	cmp r0, #0
	beq _080647EE
	bl Proc_End
	movs r0, #0
	str r0, [r4]
_080647EE:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080647F4: .4byte 0x0203E0CC

	thumb_func_start sub_080647F8
sub_080647F8: @ 0x080647F8
	push {r4, lr}
	ldr r4, _08064810 @ =0x0203E0D0
	ldr r0, [r4]
	cmp r0, #0
	beq _0806480A
	bl Proc_End
	movs r0, #0
	str r0, [r4]
_0806480A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08064810: .4byte 0x0203E0D0

	thumb_func_start sub_08064814
sub_08064814: @ 0x08064814
	ldr r1, _0806481C @ =0x0203E0CC
	str r0, [r1]
	bx lr
	.align 2, 0
_0806481C: .4byte 0x0203E0CC

	thumb_func_start sub_08064820
sub_08064820: @ 0x08064820
	ldr r1, _08064828 @ =0x0203E0D0
	str r0, [r1]
	bx lr
	.align 2, 0
_08064828: .4byte 0x0203E0D0

	thumb_func_start sub_0806482C
sub_0806482C: @ 0x0806482C
	ldr r0, [r0, #0x44]
	ldr r0, [r0, #0x30]
	bx lr
	.align 2, 0

	thumb_func_start sub_08064834
sub_08064834: @ 0x08064834
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _08064850
	ldr r0, _0806484C @ =0x081DE20D
	ldrh r1, [r4, #2]
	ldrb r0, [r0]
	subs r0, r1, r0
	b _08064858
	.align 2, 0
_0806484C: .4byte 0x081DE20D
_08064850:
	ldr r0, _08064888 @ =0x081DE212
	ldrb r0, [r0]
	ldrh r3, [r4, #2]
	subs r0, r0, r3
_08064858:
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	movs r2, #0x58
	ldrh r4, [r4, #4]
	subs r2, r2, r4
	ldrh r0, [r5, #0x12]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	ldrh r3, [r5, #2]
	subs r1, r1, r3
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	ldrh r5, [r5, #4]
	subs r2, r2, r5
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	bl SetBgOffset
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08064888: .4byte 0x081DE212

	thumb_func_start sub_0806488C
sub_0806488C: @ 0x0806488C
	push {r4, lr}
	sub sp, #4
	bl sub_0806482C
	adds r4, r0, #0
	movs r0, #0
	str r0, [sp]
	ldr r1, [r4, #0x14]
	ldr r2, _080648B8 @ =0x01000200
	mov r0, sp
	bl CpuFastSet
	movs r0, #1
	ldrh r4, [r4, #0x12]
	lsls r0, r4
	bl EnableBgSync
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080648B8: .4byte 0x01000200

	thumb_func_start sub_080648BC
sub_080648BC: @ 0x080648BC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r4, r1, #0
	adds r7, r2, #0
	adds r6, r3, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	bl sub_0806482C
	mov r8, r0
	cmp r4, #0
	bne _080648DC
	adds r0, r7, #0
	b _080648DE
_080648DC:
	adds r0, r6, #0
_080648DE:
	movs r1, #0x78
	bl AnimCreate
	adds r2, r0, #0
	mov r1, r8
	ldrh r1, [r1, #0x10]
	lsls r0, r1, #0xc
	mov r3, r8
	ldrh r3, [r3, #0xe]
	orrs r0, r3
	movs r3, #0x80
	lsls r3, r3, #4
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2, #8]
	ldrh r0, [r5, #2]
	strh r0, [r2, #2]
	ldrh r0, [r5, #4]
	strh r0, [r2, #4]
	adds r0, r2, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_08064910
sub_08064910: @ 0x08064910
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r6, r2, #0
	lsls r1, r1, #0x10
	lsrs r7, r1, #0x10
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	adds r5, r3, #0
	bl sub_0806482C
	adds r4, r0, #0
	cmp r5, #1
	bne _08064932
	ldr r1, [r4, #0x1c]
	adds r0, r6, #0
	bl LZ77UnCompWram
_08064932:
	adds r2, r6, #0
	cmp r5, #1
	bne _0806493A
	ldr r2, [r4, #0x1c]
_0806493A:
	cmp r7, #0
	bne _08064954
	ldr r1, [r4, #0x14]
	ldrh r0, [r4, #0xc]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	adds r0, r2, #0
	movs r2, #0x1e
	movs r3, #0x14
	bl sub_080672E8
	b _08064968
_08064954:
	ldr r1, [r4, #0x14]
	ldrh r0, [r4, #0xc]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	adds r0, r2, #0
	movs r2, #0x1e
	movs r3, #0x14
	bl sub_080672B8
_08064968:
	movs r0, #1
	ldrh r4, [r4, #0x12]
	lsls r0, r4
	bl EnableBgSync
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806497C
sub_0806497C: @ 0x0806497C
	push {r4, r5, r6, lr}
	adds r6, r1, #0
	bl sub_0806482C
	adds r4, r0, #0
	ldrh r0, [r4, #0xa]
	lsls r5, r0, #5
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r5, r5, r0
	ldr r1, [r4, #0x18]
	adds r0, r6, #0
	bl LZ77UnCompWram
	ldr r0, [r4, #0x18]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r1, r5, #0
	bl RegisterDataMove
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080649AC
sub_080649AC: @ 0x080649AC
	push {r4, lr}
	adds r4, r1, #0
	bl sub_0806482C
	ldrh r0, [r0, #0xc]
	lsls r1, r0, #5
	ldr r0, _080649D0 @ =gPal
	adds r1, r1, r0
	adds r0, r4, #0
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080649D0: .4byte gPal

	thumb_func_start sub_080649D4
sub_080649D4: @ 0x080649D4
	push {r4, r5, r6, lr}
	adds r6, r1, #0
	bl sub_0806482C
	adds r4, r0, #0
	ldrh r0, [r4, #0xe]
	lsls r5, r0, #5
	ldr r0, _08064A00 @ =0x06010000
	adds r5, r5, r0
	ldr r1, [r4, #0x20]
	adds r0, r6, #0
	bl LZ77UnCompWram
	ldr r0, [r4, #0x20]
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r5, #0
	bl RegisterDataMove
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08064A00: .4byte 0x06010000

	thumb_func_start sub_08064A04
sub_08064A04: @ 0x08064A04
	push {r4, lr}
	adds r4, r1, #0
	bl sub_0806482C
	ldrh r0, [r0, #0x10]
	lsls r1, r0, #5
	ldr r0, _08064A28 @ =0x02022A60
	adds r1, r1, r0
	adds r0, r4, #0
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08064A28: .4byte 0x02022A60

	thumb_func_start sub_08064A2C
sub_08064A2C: @ 0x08064A2C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_0806482C
	ldr r1, _08064A4C @ =0x08C13B24
	ldrh r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r4, #0
	bl _call_via_r1
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08064A4C: .4byte 0x08C13B24

	thumb_func_start nullsub_52
nullsub_52: @ 0x08064A50
	bx lr
	.align 2, 0

	thumb_func_start sub_08064A54
sub_08064A54: @ 0x08064A54
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _08064A70 @ =0x08C13B44
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	bl sub_08064814
	str r4, [r5, #0x5c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08064A70: .4byte 0x08C13B44

	thumb_func_start sub_08064A74
sub_08064A74: @ 0x08064A74
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	adds r1, r4, #0
	bl sub_08064A94
	ldr r0, [r4, #0x5c]
	adds r1, r4, #0
	bl sub_08064B40
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_08064A94
sub_08064A94: @ 0x08064A94
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	bl sub_0806482C
	adds r6, r0, #0
	ldr r0, _08064AE0 @ =0x08C13B6C
	adds r1, r4, #0
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	str r0, [r4, #0x44]
	ldr r0, _08064AE4 @ =0x081EF4AC
	str r0, [r4, #0x48]
	ldr r0, _08064AE8 @ =0x08C13B84
	str r0, [r4, #0x4c]
	ldr r1, _08064AEC @ =0x08202F40
	adds r0, r5, #0
	bl sub_080649AC
	ldr r0, [r4, #0x5c]
	ldr r1, _08064AF0 @ =0x08202348
	bl sub_0806497C
	ldr r0, [r6, #0x24]
	bl _call_via_r0

	thumb_func_start sub_08064AD0
sub_08064AD0: @ 0x08064AD0
	ldr r0, [r4, #0x5c]
	adds r1, r6, #0
	bl sub_08064834
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08064AE0: .4byte 0x08C13B6C
_08064AE4: .4byte 0x081EF4AC
_08064AE8: .4byte 0x08C13B84
_08064AEC: .4byte 0x08202F40
_08064AF0: .4byte 0x08202348

	thumb_func_start sub_08064AF4
sub_08064AF4: @ 0x08064AF4
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _08064B20
	ldr r2, [r4, #0x4c]
	ldr r0, [r4, #0x5c]
	lsls r1, r1, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #1
	movs r3, #1
	bl sub_08064910
	b _08064B38
_08064B20:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _08064B38
	ldr r0, [r4, #0x5c]
	bl sub_0806488C
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_08064B38:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08064B40
sub_08064B40: @ 0x08064B40
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	bl sub_0806482C
	adds r7, r0, #0
	ldr r0, _08064B7C @ =0x08C13BB4
	adds r1, r4, #0
	bl Proc_Start
	adds r6, r0, #0
	str r5, [r6, #0x5c]
	movs r0, #0
	strh r0, [r6, #0x2c]
	ldr r2, _08064B80 @ =0x08C23A1C
	ldr r3, _08064B84 @ =0x08C23694
	adds r0, r5, #0
	movs r1, #1
	bl sub_080648BC
	adds r4, r0, #0
	str r4, [r6, #0x60]
	adds r0, r5, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _08064B88
	ldrh r0, [r5, #2]
	subs r0, #8
	b _08064B8C
	.align 2, 0
_08064B7C: .4byte 0x08C13BB4
_08064B80: .4byte 0x08C23A1C
_08064B84: .4byte 0x08C23694
_08064B88:
	ldrh r0, [r5, #2]
	adds r0, #8
_08064B8C:
	strh r0, [r4, #2]
	ldrh r0, [r5, #4]
	adds r0, #8
	strh r0, [r4, #4]
	ldrh r2, [r4, #2]
	ldrh r3, [r7, #6]
	adds r1, r2, r3
	strh r1, [r4, #2]
	ldrh r7, [r7, #8]
	adds r0, r7, r0
	strh r0, [r4, #4]
	ldr r0, [r6, #0x5c]
	ldr r1, _08064BB8 @ =0x08204A74
	bl sub_08064A04
	ldr r0, [r6, #0x5c]
	ldr r1, _08064BBC @ =0x08204478
	bl sub_080649D4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08064BB8: .4byte 0x08204A74
_08064BBC: .4byte 0x08204478

	thumb_func_start sub_08064BC0
sub_08064BC0: @ 0x08064BC0
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x32
	ble _08064BDE
	ldr r0, [r4, #0x60]
	bl AnimDelete
	adds r0, r4, #0
	bl Proc_Break
_08064BDE:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_08064BE4
sub_08064BE4: @ 0x08064BE4
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _08064C00 @ =0x08C13BCC
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	bl sub_08064814
	str r4, [r5, #0x5c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08064C00: .4byte 0x08C13BCC

	thumb_func_start sub_08064C04
sub_08064C04: @ 0x08064C04
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	adds r1, r4, #0
	bl sub_08064C2C
	ldr r0, [r4, #0x5c]
	adds r1, r4, #0
	bl sub_08064D0C
	ldr r0, [r4, #0x5c]
	adds r1, r4, #0
	bl sub_08064D80
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_08064C2C
sub_08064C2C: @ 0x08064C2C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	bl sub_0806482C
	adds r6, r0, #0
	ldr r0, _08064C74 @ =0x08C13BF4
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	str r0, [r4, #0x44]
	ldr r0, _08064C78 @ =0x081EF4DE
	str r0, [r4, #0x48]
	ldr r0, _08064C7C @ =0x08C13C0C
	str r0, [r4, #0x4c]
	ldr r1, _08064C80 @ =0x082019E4
	adds r0, r5, #0
	bl sub_080649AC
	ldr r0, [r4, #0x5c]
	ldr r1, _08064C84 @ =0x08201128
	bl sub_0806497C
	ldr r0, [r6, #0x24]
	bl _call_via_r0
	ldr r0, [r4, #0x5c]
	adds r1, r6, #0
	bl sub_08064834
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08064C74: .4byte 0x08C13BF4
_08064C78: .4byte 0x081EF4DE
_08064C7C: .4byte 0x08C13C0C
_08064C80: .4byte 0x082019E4
_08064C84: .4byte 0x08201128

	thumb_func_start sub_08064C88
sub_08064C88: @ 0x08064C88
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r7, #0
	ldr r0, [r4, #0x5c]
	bl sub_0806482C
	adds r6, r0, #0
	adds r0, r4, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r5, r0, #0x10
	cmp r5, #0
	blt _08064CEA
	ldr r2, [r4, #0x4c]
	ldr r0, [r4, #0x5c]
	lsls r1, r5, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0
	movs r3, #1
	bl sub_08064910
	cmp r5, #0
	bne _08064CCC
	ldrh r0, [r6, #0xa]
	adds r0, #0x1f
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
_08064CCC:
	cmp r5, #1
	bne _08064CD8
	ldrh r0, [r6, #0xa]
	adds r0, #0x50
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
_08064CD8:
	ldr r0, [r6, #0x14]
	adds r0, #0x3c
	ldrh r3, [r6, #0xc]
	str r7, [sp]
	movs r1, #2
	movs r2, #0x14
	bl sub_080671A0
	b _08064D02
_08064CEA:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r5, r0
	bne _08064D02
	ldr r0, [r4, #0x5c]
	bl sub_0806488C
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_08064D02:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08064D0C
sub_08064D0C: @ 0x08064D0C
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _08064D34 @ =0x08C13C14
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	bl sub_08064820
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	str r0, [r4, #0x44]
	ldr r0, _08064D38 @ =0x081EF4E8
	str r0, [r4, #0x48]
	ldr r0, _08064D3C @ =0x082019E4
	str r0, [r4, #0x4c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08064D34: .4byte 0x08C13C14
_08064D38: .4byte 0x081EF4E8
_08064D3C: .4byte 0x082019E4

	thumb_func_start sub_08064D40
sub_08064D40: @ 0x08064D40
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _08064D66
	ldr r1, [r4, #0x4c]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #5
	adds r1, r1, r2
	bl sub_080649AC
	b _08064D78
_08064D66:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _08064D78
	bl sub_080647F8
	adds r0, r4, #0
	bl Proc_Break
_08064D78:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08064D80
sub_08064D80: @ 0x08064D80
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	bl sub_0806482C
	adds r7, r0, #0
	ldr r0, _08064DBC @ =0x08C13C34
	movs r1, #3
	bl Proc_Start
	adds r6, r0, #0
	str r5, [r6, #0x5c]
	movs r0, #0
	strh r0, [r6, #0x2c]
	ldr r2, _08064DC0 @ =0x08C2327C
	ldr r3, _08064DC4 @ =0x08C22750
	adds r0, r5, #0
	movs r1, #1
	bl sub_080648BC
	adds r4, r0, #0
	str r4, [r6, #0x60]
	adds r0, r5, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _08064DC8
	ldrh r0, [r5, #2]
	adds r0, #0x38
	b _08064DCC
	.align 2, 0
_08064DBC: .4byte 0x08C13C34
_08064DC0: .4byte 0x08C2327C
_08064DC4: .4byte 0x08C22750
_08064DC8:
	ldrh r0, [r5, #2]
	subs r0, #0x38
_08064DCC:
	strh r0, [r4, #2]
	ldrh r1, [r4, #2]
	ldrh r2, [r7, #6]
	adds r0, r1, r2
	strh r0, [r4, #2]
	ldrh r1, [r4, #4]
	ldrh r7, [r7, #8]
	adds r0, r1, r7
	strh r0, [r4, #4]
	ldr r0, [r6, #0x5c]
	ldr r1, _08064DF4 @ =0x082022A8
	bl sub_08064A04
	ldr r0, [r6, #0x5c]
	ldr r1, _08064DF8 @ =0x08201E10
	bl sub_080649D4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08064DF4: .4byte 0x082022A8
_08064DF8: .4byte 0x08201E10

	thumb_func_start sub_08064DFC
sub_08064DFC: @ 0x08064DFC
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x32
	ble _08064E1A
	ldr r0, [r4, #0x60]
	bl AnimDelete
	adds r0, r4, #0
	bl Proc_Break
_08064E1A:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_08064E20
sub_08064E20: @ 0x08064E20
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08064E38 @ =0x08C13C4C
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08064E38: .4byte 0x08C13C4C

	thumb_func_start sub_08064E3C
sub_08064E3C: @ 0x08064E3C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	adds r1, r4, #0
	bl sub_08065094
	ldr r0, [r4, #0x5c]
	adds r1, r4, #0
	bl sub_08064EB0
	ldr r0, [r4, #0x5c]
	adds r1, r4, #0
	bl sub_08064F50
	ldr r3, _08064EAC @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r2, #9
	movs r0, #0x10
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x46
	strb r1, [r0]
	ldr r0, [r4, #0x5c]
	str r4, [sp]
	movs r1, #1
	movs r2, #0xc
	movs r3, #0
	bl sub_08064FC4
	ldr r0, [r4, #0x5c]
	str r4, [sp]
	movs r1, #0x23
	movs r2, #0x19
	movs r3, #1
	bl sub_08064FC4
	adds r0, r4, #0
	bl Proc_Break
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08064EAC: .4byte gDispIo

	thumb_func_start sub_08064EB0
sub_08064EB0: @ 0x08064EB0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	bl sub_0806482C
	adds r6, r0, #0
	ldr r0, _08064EF4 @ =0x08C13C74
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	bl sub_08064814
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	str r0, [r4, #0x44]
	ldr r0, _08064EF8 @ =0x081EF52A
	str r0, [r4, #0x48]
	ldr r0, _08064EFC @ =0x08C13C8C
	str r0, [r4, #0x4c]
	ldr r1, _08064F00 @ =0x0826F96C
	adds r0, r5, #0
	bl sub_0806497C
	ldr r0, [r6, #0x24]
	bl _call_via_r0
	ldr r0, [r4, #0x5c]
	adds r1, r6, #0
	bl sub_08064834
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08064EF4: .4byte 0x08C13C74
_08064EF8: .4byte 0x081EF52A
_08064EFC: .4byte 0x08C13C8C
_08064F00: .4byte 0x0826F96C

	thumb_func_start sub_08064F04
sub_08064F04: @ 0x08064F04
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _08064F30
	ldr r2, [r4, #0x4c]
	ldr r0, [r4, #0x5c]
	lsls r1, r1, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #1
	movs r3, #0
	bl sub_08064910
	b _08064F48
_08064F30:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _08064F48
	ldr r0, [r4, #0x5c]
	bl sub_0806488C
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_08064F48:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08064F50
sub_08064F50: @ 0x08064F50
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _08064F78 @ =0x08C13C90
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	bl sub_08064820
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	str r0, [r4, #0x44]
	ldr r0, _08064F7C @ =0x081EF530
	str r0, [r4, #0x48]
	ldr r0, _08064F80 @ =0x0827045C
	str r0, [r4, #0x4c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08064F78: .4byte 0x08C13C90
_08064F7C: .4byte 0x081EF530
_08064F80: .4byte 0x0827045C

	thumb_func_start sub_08064F84
sub_08064F84: @ 0x08064F84
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _08064FAA
	ldr r1, [r4, #0x4c]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #5
	adds r1, r1, r2
	bl sub_080649AC
	b _08064FBC
_08064FAA:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _08064FBC
	bl sub_080647F8
	adds r0, r4, #0
	bl Proc_Break
_08064FBC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08064FC4
sub_08064FC4: @ 0x08064FC4
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r0, _08064FF0 @ =0x08C13CB0
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	strh r5, [r0, #0x2c]
	strh r6, [r0, #0x2e]
	adds r0, #0x29
	mov r1, r8
	strb r1, [r0]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08064FF0: .4byte 0x08C13CB0

	thumb_func_start sub_08064FF4
sub_08064FF4: @ 0x08064FF4
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x2c]
	subs r0, #1
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0806500A
	adds r0, r1, #0
	bl Proc_Break
_0806500A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08065010
sub_08065010: @ 0x08065010
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	movs r2, #0x2e
	ldrsh r0, [r4, r2]
	cmp r1, r0
	ble _0806502A
	adds r0, r4, #0
	bl Proc_Break
	b _08065088
_0806502A:
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _08065046
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	b _08065056
_08065046:
	movs r2, #0x2c
	ldrsh r3, [r4, r2]
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
_08065056:
	bl Interpolate
	adds r5, r0, #0
	ldr r3, _08065090 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r5, [r0]
	adds r2, #9
	movs r0, #0x10
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x46
	strb r1, [r0]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
_08065088:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08065090: .4byte gDispIo

	thumb_func_start sub_08065094
sub_08065094: @ 0x08065094
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	bl sub_0806482C
	adds r6, r0, #0
	ldr r0, _080650E8 @ =0x08C13CD0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x33
	strh r0, [r4, #0x2e]
	ldr r3, _080650EC @ =0x08C2D9FC
	adds r0, r5, #0
	movs r1, #1
	adds r2, r3, #0
	bl sub_080648BC
	str r0, [r4, #0x60]
	ldrh r2, [r0, #2]
	ldrh r3, [r6, #6]
	adds r1, r2, r3
	strh r1, [r0, #2]
	ldrh r2, [r0, #4]
	ldrh r6, [r6, #8]
	adds r1, r2, r6
	strh r1, [r0, #4]
	ldr r0, [r4, #0x5c]
	ldr r1, _080650F0 @ =0x082708B0
	bl sub_08064A04
	ldr r0, [r4, #0x5c]
	ldr r1, _080650F4 @ =0x0827065C
	bl sub_080649D4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080650E8: .4byte 0x08C13CD0
_080650EC: .4byte 0x08C2D9FC
_080650F0: .4byte 0x082708B0
_080650F4: .4byte 0x0827065C

	thumb_func_start sub_080650F8
sub_080650F8: @ 0x080650F8
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _08065118
	ldr r0, [r4, #0x60]
	bl AnimDelete
	adds r0, r4, #0
	bl Proc_Break
_08065118:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08065120
sub_08065120: @ 0x08065120
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _0806513C @ =0x08C13CE8
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	bl sub_08064814
	str r4, [r5, #0x5c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806513C: .4byte 0x08C13CE8

	thumb_func_start sub_08065140
sub_08065140: @ 0x08065140
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	adds r1, r4, #0
	bl sub_08065158
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_08065158
sub_08065158: @ 0x08065158
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	bl sub_0806482C
	adds r6, r0, #0
	ldr r0, _0806519C @ =0x08C13D10
	adds r1, r4, #0
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	str r0, [r4, #0x44]
	ldr r0, _080651A0 @ =0x081EF572
	str r0, [r4, #0x48]
	ldr r0, _080651A4 @ =0x08C13E30
	str r0, [r4, #0x4c]
	str r0, [r4, #0x50]
	ldr r0, _080651A8 @ =0x08C13D28
	str r0, [r4, #0x54]
	ldr r0, _080651AC @ =0x08C13DAC
	str r0, [r4, #0x58]
	ldr r0, [r6, #0x24]
	bl _call_via_r0
	ldr r0, [r4, #0x5c]
	adds r1, r6, #0
	bl sub_08064834
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806519C: .4byte 0x08C13D10
_080651A0: .4byte 0x081EF572
_080651A4: .4byte 0x08C13E30
_080651A8: .4byte 0x08C13D28
_080651AC: .4byte 0x08C13DAC

	thumb_func_start sub_080651B0
sub_080651B0: @ 0x080651B0
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	blt _080651F4
	ldr r6, [r7, #0x4c]
	ldr r1, [r7, #0x54]
	ldr r5, [r7, #0x58]
	ldr r0, [r7, #0x5c]
	lsls r4, r4, #2
	adds r1, r4, r1
	ldr r1, [r1]
	bl sub_0806497C
	ldr r0, [r7, #0x5c]
	adds r5, r4, r5
	ldr r1, [r5]
	bl sub_080649AC
	ldr r0, [r7, #0x5c]
	adds r4, r4, r6
	ldr r2, [r4]
	movs r1, #0
	movs r3, #1
	bl sub_08064910
	b _0806520C
_080651F4:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _0806520C
	ldr r0, [r7, #0x5c]
	bl sub_0806488C
	bl SpellFx_ClearColorEffects
	adds r0, r7, #0
	bl Proc_Break
_0806520C:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08065214
sub_08065214: @ 0x08065214
	ldr r1, _08065230 @ =0x02020040
	movs r0, #0
	strh r0, [r1]
	strh r0, [r1, #2]
	str r0, [r1, #4]
	str r0, [r1, #8]
	str r0, [r1, #0xc]
	ldr r1, _08065234 @ =0x02020050
	strh r0, [r1]
	strh r0, [r1, #2]
	str r0, [r1, #4]
	str r0, [r1, #8]
	str r0, [r1, #0xc]
	bx lr
	.align 2, 0
_08065230: .4byte 0x02020040
_08065234: .4byte 0x02020050

	thumb_func_start sub_08065238
sub_08065238: @ 0x08065238
	push {lr}
	bl GetAISSubjectId
	cmp r0, #0
	beq _0806524C
	ldr r0, _08065248 @ =0x02020050
	b _0806524E
	.align 2, 0
_08065248: .4byte 0x02020050
_0806524C:
	ldr r0, _08065254 @ =0x02020040
_0806524E:
	pop {r1}
	bx r1
	.align 2, 0
_08065254: .4byte 0x02020040

	thumb_func_start sub_08065258
sub_08065258: @ 0x08065258
	push {lr}
	bl sub_08065238
	ldrh r0, [r0, #2]
	pop {r1}
	bx r1

	thumb_func_start sub_08065264
sub_08065264: @ 0x08065264
	push {r4, lr}
	lsls r4, r1, #0x10
	lsrs r4, r4, #0x10
	bl sub_08065238
	ldrh r1, [r0, #2]
	orrs r4, r1
	strh r4, [r0, #2]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806527C
sub_0806527C: @ 0x0806527C
	push {lr}
	bl sub_08065288
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08065288
sub_08065288: @ 0x08065288
	push {lr}
	bl sub_08065238
	ldrh r0, [r0]
	pop {r1}
	bx r1

	thumb_func_start sub_08065294
sub_08065294: @ 0x08065294
	push {r4, lr}
	lsls r4, r1, #0x10
	lsrs r4, r4, #0x10
	bl sub_08065238
	ldrh r1, [r0]
	orrs r4, r1
	strh r4, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080652AC
sub_080652AC: @ 0x080652AC
	push {lr}
	ldr r0, _080652CC @ =0x02020040
	ldr r0, [r0, #0xc]
	bl sub_0806527C
	cmp r0, #0
	bne _080652D4
	ldr r0, _080652D0 @ =0x02020050
	ldr r0, [r0, #0xc]
	bl sub_0806527C
	cmp r0, #0
	bne _080652D4
	movs r0, #0
	b _080652D6
	.align 2, 0
_080652CC: .4byte 0x02020040
_080652D0: .4byte 0x02020050
_080652D4:
	movs r0, #1
_080652D6:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080652DC
sub_080652DC: @ 0x080652DC
	push {r4, r5, lr}
	sub sp, #0x10
	adds r4, r0, #0
	adds r5, r1, #0
	bl sub_080652AC
	cmp r0, #0
	beq _08065318
	asrs r2, r4, #3
	asrs r4, r5, #3
	ldr r0, _08065320 @ =gEkrTsaBuffer
	movs r1, #1
	rsbs r1, r1, #0
	lsls r2, r2, #1
	lsls r3, r4, #5
	adds r3, r3, r4
	lsls r3, r3, #2
	ldr r4, _08065324 @ =0x0201D41C
	adds r3, r3, r4
	adds r2, r2, r3
	movs r3, #0x20
	str r3, [sp]
	str r3, [sp, #4]
	movs r3, #6
	str r3, [sp, #8]
	movs r3, #0
	str r3, [sp, #0xc]
	movs r3, #0x42
	bl sub_080673C8
_08065318:
	add sp, #0x10
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08065320: .4byte gEkrTsaBuffer
_08065324: .4byte 0x0201D41C

	thumb_func_start sub_08065328
sub_08065328: @ 0x08065328
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	adds r7, r0, #0
	adds r6, r1, #0
	bl sub_080652AC
	cmp r0, #0
	beq _08065376
	asrs r4, r7, #3
	movs r1, #7
	asrs r5, r6, #3
	ands r6, r1
	movs r0, #3
	ands r1, r7
	adds r2, r6, #0
	bl SetBgOffset
	lsls r4, r4, #1
	ldr r0, _08065380 @ =0x0201D45E
	adds r4, r4, r0
	lsls r0, r5, #5
	adds r0, r0, r5
	lsls r0, r0, #2
	adds r4, r4, r0
	ldr r2, _08065384 @ =gBg3Tm
	movs r0, #0x20
	str r0, [sp]
	str r0, [sp, #4]
	subs r0, #0x21
	str r0, [sp, #8]
	str r0, [sp, #0xc]
	adds r0, r4, #0
	movs r1, #0x42
	movs r3, #0x20
	bl sub_08067318
	movs r0, #8
	bl EnableBgSync
_08065376:
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08065380: .4byte 0x0201D45E
_08065384: .4byte gBg3Tm

	thumb_func_start sub_08065388
sub_08065388: @ 0x08065388
	push {lr}
	ldr r0, _080653A0 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #1
	beq _080653AE
	cmp r0, #1
	bgt _080653A4
	cmp r0, #0
	beq _080653AA
	b _080653C2
	.align 2, 0
_080653A0: .4byte gEkrDistanceType
_080653A4:
	cmp r0, #2
	beq _080653B8
	b _080653C2
_080653AA:
	movs r0, #0xf8
	b _080653B0
_080653AE:
	movs r0, #0xc0
_080653B0:
	movs r1, #0
	bl sub_080652DC
	b _080653C2
_080653B8:
	movs r0, #0x10
	rsbs r0, r0, #0
	movs r1, #0
	bl sub_080652DC
_080653C2:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080653C8
sub_080653C8: @ 0x080653C8
	push {lr}
	bl sub_08065258
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	movs r1, #2
	ands r0, r1
	cmp r0, #0
	bne _080653DE
	movs r0, #0
	b _080653E0
_080653DE:
	movs r0, #1
_080653E0:
	pop {r1}
	bx r1

	thumb_func_start sub_080653E4
sub_080653E4: @ 0x080653E4
	push {lr}
	bl sub_08065258
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	bne _080653FA
	movs r0, #0
	b _080653FC
_080653FA:
	movs r0, #1
_080653FC:
	pop {r1}
	bx r1

	thumb_func_start sub_08065400
sub_08065400: @ 0x08065400
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	bl sub_08065238
	adds r6, r0, #0
	ldr r0, _0806542C @ =0x08C48664
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r4, [r6, #4]
	adds r0, r5, #0
	movs r1, #1
	bl sub_08065264
	str r5, [r6, #0xc]
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806542C: .4byte 0x08C48664

	thumb_func_start sub_08065430
sub_08065430: @ 0x08065430
	push {lr}
	movs r1, #4
	bl sub_08065264
	pop {r0}
	bx r0

	thumb_func_start sub_0806543C
sub_0806543C: @ 0x0806543C
	push {lr}
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_08065264
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806544C
sub_0806544C: @ 0x0806544C
	push {lr}
	bl sub_08065258
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	movs r1, #0x80
	lsls r1, r1, #5
	ands r0, r1
	cmp r0, #0
	bne _08065464
	movs r0, #0
	b _08065466
_08065464:
	movs r0, #1
_08065466:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0806546C
sub_0806546C: @ 0x0806546C
	push {lr}
	bl sub_080652AC
	cmp r0, #0
	beq _0806547C
	movs r0, #0
	bl sub_08055034
_0806547C:
	pop {r0}
	bx r0

	thumb_func_start sub_08065480
sub_08065480: @ 0x08065480
	push {r4, lr}
	adds r4, r0, #0
	bl sub_080652AC
	cmp r0, #0
	beq _080654BA
	adds r0, r4, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _080654AC
	ldr r0, _080654A4 @ =0x081DF444
	ldr r1, _080654A8 @ =0x02022920
	movs r2, #8
	bl CpuFastSet
	b _080654B6
	.align 2, 0
_080654A4: .4byte 0x081DF444
_080654A8: .4byte 0x02022920
_080654AC:
	ldr r0, _080654C0 @ =0x081DF444
	ldr r1, _080654C4 @ =0x02022940
	movs r2, #8
	bl CpuFastSet
_080654B6:
	bl EnablePalSync
_080654BA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080654C0: .4byte 0x081DF444
_080654C4: .4byte 0x02022940

	thumb_func_start sub_080654C8
sub_080654C8: @ 0x080654C8
	push {r4, lr}
	adds r4, r0, #0
	bl sub_080652AC
	cmp r0, #0
	beq _08065502
	adds r0, r4, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _080654F4
	ldr r0, _080654EC @ =0x082E6C60
	ldr r1, _080654F0 @ =0x02022920
	movs r2, #8
	bl CpuFastSet
	b _080654FE
	.align 2, 0
_080654EC: .4byte 0x082E6C60
_080654F0: .4byte 0x02022920
_080654F4:
	ldr r0, _08065508 @ =0x082E6C60
	ldr r1, _0806550C @ =0x02022940
	movs r2, #8
	bl CpuFastSet
_080654FE:
	bl EnablePalSync
_08065502:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08065508: .4byte 0x082E6C60
_0806550C: .4byte 0x02022940

	thumb_func_start sub_08065510
sub_08065510: @ 0x08065510
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _08065534 @ =0x082EB510
	ldr r4, _08065538 @ =0x020228E0
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	subs r4, #0x80
	adds r0, r4, #0
	movs r1, #4
	movs r2, #1
	adds r3, r5, #0
	bl sub_080676D4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08065534: .4byte 0x082EB510
_08065538: .4byte 0x020228E0

	thumb_func_start sub_0806553C
sub_0806553C: @ 0x0806553C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	movs r1, #0x8a
	bl sub_08053AA8
	ldr r0, [r4, #0x5c]
	bl sub_08065D38
	ldr r1, _08065560 @ =0x0203DFFC
	movs r0, #0x13
	strh r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08065560: .4byte 0x0203DFFC

	thumb_func_start sub_08065564
sub_08065564: @ 0x08065564
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r0, #8
	str r0, [sp]
	movs r0, #1
	movs r1, #4
	movs r2, #0x10
	bl Interpolate
	bl sub_08067AB0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #9
	bne _08065598
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
_08065598:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080655A0
sub_080655A0: @ 0x080655A0
	push {r4, lr}
	adds r4, r0, #0
	ldr r3, _0806563C @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x18]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x18]
	movs r0, #3
	ldrb r1, [r3, #0x14]
	orrs r0, r1
	strb r0, [r3, #0x14]
	ldr r0, _08065640 @ =0x082E445C
	ldr r1, _08065644 @ =0x06008000
	bl LZ77UnCompVram
	ldr r0, _08065648 @ =0x082E6D40
	ldr r1, _0806564C @ =gEkrTsaBuffer
	bl LZ77UnCompWram
	ldr r0, _08065650 @ =0x082E6C60
	ldr r1, _08065654 @ =0x02022920
	movs r2, #8
	bl CpuFastSet
	ldr r0, _08065658 @ =0x001F001F
	bl sub_08050F94
	ldr r0, _0806565C @ =gBg3Tm
	movs r1, #0x1f
	bl TmFill
	movs r0, #0
	movs r1, #0x78
	bl sub_080652DC
	movs r0, #0xf8
	rsbs r0, r0, #0
	movs r1, #0
	bl sub_08065328
	bl EnablePalSync
	movs r1, #0x80
	lsls r1, r1, #3
	movs r0, #0x78
	movs r2, #0x60
	movs r3, #2
	bl sub_080664CC
	str r0, [r4, #0x64]
	movs r0, #0x78
	movs r1, #0
	bl sub_080665B8
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x3c
	strh r0, [r4, #0x2e]
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806563C: .4byte gDispIo
_08065640: .4byte 0x082E445C
_08065644: .4byte 0x06008000
_08065648: .4byte 0x082E6D40
_0806564C: .4byte gEkrTsaBuffer
_08065650: .4byte 0x082E6C60
_08065654: .4byte 0x02022920
_08065658: .4byte 0x001F001F
_0806565C: .4byte gBg3Tm

	thumb_func_start sub_08065660
sub_08065660: @ 0x08065660
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r1, #0xf8
	rsbs r1, r1, #0
	movs r2, #0x18
	rsbs r2, r2, #0
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r4, #0x2e
	ldrsh r0, [r5, r4]
	str r0, [sp]
	movs r0, #4
	bl Interpolate
	adds r4, r0, #0
	movs r2, #0xa0
	lsls r2, r2, #1
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r1, #0x2e
	ldrsh r0, [r5, r1]
	str r0, [sp]
	movs r0, #4
	movs r1, #0
	bl Interpolate
	adds r1, r0, #0
	adds r0, r4, #0
	bl sub_08065328
	ldrh r1, [r5, #0x2c]
	adds r1, #1
	strh r1, [r5, #0x2c]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r2, #0x2e
	ldrsh r0, [r5, r2]
	adds r0, #1
	cmp r1, r0
	bne _080656BC
	movs r0, #0
	strh r0, [r5, #0x2c]
	adds r0, r5, #0
	bl Proc_Break
_080656BC:
	ldrh r5, [r5, #0x2c]
	cmp r5, #0xf
	bne _080656D0
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0xe6
	movs r2, #0x78
	movs r3, #0
	bl PlaySFX
_080656D0:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080656D8
sub_080656D8: @ 0x080656D8
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3c
	bne _08065740
	ldr r5, _080656FC @ =gEkrDistanceType
	ldrh r0, [r5]
	cmp r0, #2
	bne _08065700
	adds r0, r4, #0
	bl Proc_Break
	b _08065740
	.align 2, 0
_080656FC: .4byte gEkrDistanceType
_08065700:
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r0, [r4, #0x5c]
	bl sub_08065EAC
	adds r2, r0, #0
	str r2, [r4, #0x64]
	movs r1, #0
	ldrsh r0, [r5, r1]
	cmp r0, #0
	beq _0806571C
	cmp r0, #1
	beq _0806572C
	b _08065734
_0806571C:
	ldr r1, _08065728 @ =0x0201FB00
	movs r0, #0x38
	ldrh r1, [r1]
	subs r0, r0, r1
	b _08065732
	.align 2, 0
_08065728: .4byte 0x0201FB00
_0806572C:
	ldr r0, _08065748 @ =0x0201FB00
	ldrh r0, [r0]
	rsbs r0, r0, #0
_08065732:
	strh r0, [r2, #0x34]
_08065734:
	ldr r1, [r4, #0x64]
	movs r0, #0x4c
	strh r0, [r1, #0x3c]
	adds r0, r4, #0
	bl Proc_Break
_08065740:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08065748: .4byte 0x0201FB00

	thumb_func_start sub_0806574C
sub_0806574C: @ 0x0806574C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r6, [r5, #0x64]
	ldr r0, _08065770 @ =gEkrDistanceType
	ldrh r0, [r0]
	cmp r0, #2
	bne _08065774
	movs r0, #0
	strh r0, [r5, #0x2c]
	ldr r0, [r5, #0x5c]
	movs r1, #0xa
	bl sub_0804F7B8
	adds r0, r5, #0
	bl Proc_Break
	b _080657CA
	.align 2, 0
_08065770: .4byte gEkrDistanceType
_08065774:
	movs r0, #0x34
	ldrsh r2, [r6, r0]
	adds r1, r2, #0
	subs r1, #0x30
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r4, #0x10
	str r4, [sp]
	movs r0, #1
	bl Interpolate
	strh r0, [r6, #0x32]
	movs r0, #0x3c
	ldrsh r2, [r6, r0]
	adds r1, r2, #0
	subs r1, #0x80
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	str r4, [sp]
	movs r0, #1
	bl Interpolate
	strh r0, [r6, #0x3a]
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x11
	bne _080657CA
	ldr r0, [r5, #0x64]
	adds r0, #0x29
	movs r1, #1
	strb r1, [r0]
	movs r0, #0
	strh r0, [r5, #0x2c]
	ldr r0, [r5, #0x5c]
	movs r1, #0xa
	bl sub_0804F7B8
	adds r0, r5, #0
	bl Proc_Break
_080657CA:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080657D4
sub_080657D4: @ 0x080657D4
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r0, _08065810 @ =gEkrDistanceType
	ldrh r0, [r0]
	cmp r0, #2
	bne _08065814
	ldr r0, [r6, #0x5c]
	bl sub_080660F4
	str r0, [r6, #0x68]
	ldr r0, [r6, #0x5c]
	bl sub_08066200
	str r0, [r6, #0x44]
	ldr r0, [r6, #0x5c]
	bl sub_08066414
	str r0, [r6, #0x4c]
	bl sub_08066380
	str r0, [r6, #0x58]
	ldr r0, [r6, #0x5c]
	bl sub_080662F4
	str r0, [r6, #0x48]
	adds r0, r6, #0
	bl Proc_Break
	b _080658D6
	.align 2, 0
_08065810: .4byte gEkrDistanceType
_08065814:
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	movs r1, #0
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xa
	bne _080658D6
	strh r1, [r6, #0x2c]
	movs r0, #0x80
	strh r0, [r6, #0x2e]
	movs r0, #0x20
	strh r0, [r6, #0x3a]
	strh r1, [r6, #0x3c]
	ldr r0, [r6, #0x5c]
	bl sub_08065F38
	str r0, [r6, #0x64]
	ldr r1, [r6, #0x5c]
	ldrh r1, [r1, #2]
	strh r1, [r0, #0x32]
	ldr r1, [r6, #0x64]
	ldr r0, [r6, #0x5c]
	ldrh r0, [r0, #4]
	ldrh r2, [r6, #0x3a]
	subs r0, r0, r2
	strh r0, [r1, #0x3a]
	movs r0, #8
	movs r1, #0
	bl sub_0804EF18
	str r0, [r6, #0x54]
	ldr r0, [r6, #0x5c]
	movs r1, #0x9d
	lsls r1, r1, #1
	bl sub_08066CAC
	ldr r0, _080658E0 @ =0x082E6E8C
	ldr r4, _080658E4 @ =gEkrTsaBuffer
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r5, _080658E8 @ =0x001F001F
	str r5, [sp]
	movs r0, #0xf0
	lsls r0, r0, #3
	adds r4, r4, r0
	ldr r2, _080658EC @ =0x05000020
	mov r0, sp
	adds r1, r4, #0
	bl CpuSet
	adds r0, r5, #0
	bl sub_08050F94
	ldr r0, _080658F0 @ =gBg3Tm
	movs r1, #0x1f
	bl TmFill
	bl sub_08065388
	ldr r0, _080658F4 @ =0x0201FB00
	ldr r0, [r0]
	movs r2, #0x3a
	ldrsh r1, [r6, r2]
	bl sub_08065328
	ldr r0, [r6, #0x5c]
	bl sub_080660F4
	str r0, [r6, #0x68]
	ldr r0, [r6, #0x5c]
	bl sub_08066200
	str r0, [r6, #0x44]
	ldr r0, [r6, #0x5c]
	bl sub_08066414
	str r0, [r6, #0x4c]
	bl sub_08066380
	str r0, [r6, #0x58]
	ldr r0, [r6, #0x5c]
	bl sub_080662F4
	str r0, [r6, #0x48]
	movs r0, #0xbc
	lsls r0, r0, #2
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x78
	movs r3, #0
	bl PlaySFX
	adds r0, r6, #0
	bl Proc_Break
_080658D6:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080658E0: .4byte 0x082E6E8C
_080658E4: .4byte gEkrTsaBuffer
_080658E8: .4byte 0x001F001F
_080658EC: .4byte 0x05000020
_080658F0: .4byte gBg3Tm
_080658F4: .4byte 0x0201FB00

	thumb_func_start sub_080658F8
sub_080658F8: @ 0x080658F8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, _08065918 @ =gEkrDistanceType
	ldrh r0, [r0]
	cmp r0, #2
	bne _0806591C
	adds r0, r5, #0
	bl Proc_Break
	b _08065A8C
	.align 2, 0
_08065918: .4byte gEkrDistanceType
_0806591C:
	movs r0, #0x3a
	ldrsh r1, [r5, r0]
	movs r3, #0x3c
	ldrsh r2, [r5, r3]
	movs r4, #0x2c
	ldrsh r3, [r5, r4]
	movs r6, #0x2e
	ldrsh r0, [r5, r6]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	adds r7, r0, #0
	ldr r1, [r5, #0x64]
	ldr r0, [r5, #0x5c]
	ldrh r0, [r0, #2]
	strh r0, [r1, #0x32]
	ldr r1, [r5, #0x64]
	ldr r0, [r5, #0x5c]
	ldrh r0, [r0, #4]
	subs r0, r0, r7
	strh r0, [r1, #0x3a]
	ldr r1, [r5, #0x64]
	ldr r4, _08065A9C @ =0x02017760
	ldrh r2, [r1, #0x32]
	ldrh r3, [r4]
	subs r0, r2, r3
	strh r0, [r1, #0x32]
	ldr r1, [r5, #0x64]
	ldrh r6, [r1, #0x3a]
	ldrh r2, [r4, #2]
	subs r0, r6, r2
	strh r0, [r1, #0x3a]
	ldr r3, _08065AA0 @ =0x02000028
	mov sl, r3
	ldrh r6, [r3, #2]
	ldrh r0, [r4]
	adds r1, r6, r0
	ldr r2, _08065AA4 @ =0x0201FB00
	mov r8, r2
	ldr r0, [r2]
	subs r1, r1, r0
	ldr r3, _08065AA8 @ =0x0200002C
	mov sb, r3
	ldrh r6, [r3, #2]
	ldrh r0, [r4, #2]
	subs r2, r6, r0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	movs r0, #1
	bl sub_08050FB4
	movs r2, #0
	ldrsh r1, [r4, r2]
	mov r3, r8
	ldr r0, [r3]
	adds r0, r0, r1
	movs r6, #2
	ldrsh r1, [r4, r6]
	adds r1, r7, r1
	bl sub_08065328
	ldrh r1, [r4]
	ldrh r2, [r4, #2]
	movs r0, #2
	bl SetBgOffset
	ldr r6, _08065AAC @ =0x02000038
	ldrh r0, [r4]
	ldrh r2, [r6]
	adds r1, r0, r2
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldrh r3, [r4, #2]
	ldrh r0, [r6, #2]
	adds r2, r3, r0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #0
	bl SetBgOffset
	ldrh r1, [r4]
	ldrh r2, [r6]
	adds r0, r1, r2
	rsbs r0, r0, #0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldrh r3, [r4, #2]
	ldrh r2, [r6, #2]
	adds r1, r3, r2
	rsbs r1, r1, #0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sub_0804CC8C
	ldrh r3, [r4]
	ldrh r1, [r6]
	adds r0, r3, r1
	rsbs r0, r0, #0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r4, [r4, #2]
	ldrh r2, [r6, #2]
	adds r1, r4, r2
	rsbs r1, r1, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	bl sub_0804D5D8
	ldrh r1, [r5, #0x2c]
	adds r1, #1
	strh r1, [r5, #0x2c]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r3, #0x2e
	ldrsh r0, [r5, r3]
	adds r0, #1
	cmp r1, r0
	bne _08065A8C
	ldr r1, [r5, #0x64]
	ldr r0, [r5, #0x5c]
	ldrh r0, [r0, #2]
	strh r0, [r1, #0x32]
	ldr r1, [r5, #0x64]
	ldr r0, [r5, #0x5c]
	ldrh r0, [r0, #4]
	subs r0, r0, r7
	strh r0, [r1, #0x3a]
	mov r4, r8
	ldr r1, [r4]
	mov r0, sl
	ldrh r0, [r0, #2]
	subs r1, r0, r1
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	mov r3, sb
	movs r4, #2
	ldrsh r2, [r3, r4]
	movs r0, #1
	bl sub_08050FB4
	mov r1, r8
	ldr r0, [r1]
	adds r1, r7, #0
	bl sub_08065328
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldrh r1, [r6]
	ldrh r2, [r6, #2]
	movs r0, #0
	bl SetBgOffset
	ldrh r2, [r6]
	rsbs r0, r2, #0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldrh r3, [r6, #2]
	rsbs r1, r3, #0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sub_0804CC8C
	ldrh r4, [r6]
	rsbs r0, r4, #0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r6, [r6, #2]
	rsbs r1, r6, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	bl sub_0804D5D8
	ldr r0, [r5, #0x54]
	bl Proc_End
	adds r0, r5, #0
	bl Proc_Break
_08065A8C:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08065A9C: .4byte 0x02017760
_08065AA0: .4byte 0x02000028
_08065AA4: .4byte 0x0201FB00
_08065AA8: .4byte 0x0200002C
_08065AAC: .4byte 0x02000038

	thumb_func_start sub_08065AB0
sub_08065AB0: @ 0x08065AB0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08065AF4 @ =gEkrDistanceType
	ldrh r0, [r0]
	cmp r0, #2
	bne _08065B0C
	ldr r0, [r4, #0x5c]
	bl GetAISSubjectId
	bl sub_0805506C
	ldr r0, _08065AF8 @ =0x082E6E8C
	ldr r1, _08065AFC @ =gEkrTsaBuffer
	bl LZ77UnCompWram
	ldr r0, _08065B00 @ =0x001F001F
	bl sub_08050F94
	ldr r0, _08065B04 @ =gBg3Tm
	movs r1, #0x1f
	bl TmFill
	bl sub_08065388
	ldr r0, _08065B08 @ =0x0201FB00
	ldr r0, [r0]
	movs r1, #0
	bl sub_08065328
	adds r0, r4, #0
	bl Proc_Break
	b _08065B78
	.align 2, 0
_08065AF4: .4byte gEkrDistanceType
_08065AF8: .4byte 0x082E6E8C
_08065AFC: .4byte gEkrTsaBuffer
_08065B00: .4byte 0x001F001F
_08065B04: .4byte gBg3Tm
_08065B08: .4byte 0x0201FB00
_08065B0C:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldr r1, _08065B80 @ =0x010D0000
	cmp r0, r1
	bne _08065B32
	ldr r0, [r4, #0x64]
	movs r1, #0x3c
	movs r2, #9
	bl sub_08066DA0
	ldr r0, _08065B84 @ =0x000002F1
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x78
	movs r3, #0
	bl PlaySFX
_08065B32:
	ldr r0, _08065B88 @ =0x00000195
	ldrh r1, [r4, #0x2c]
	cmp r1, r0
	bne _08065B78
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r0, [r4, #0x64]
	bl Proc_End
	ldr r0, [r4, #0x5c]
	bl GetAISSubjectId
	bl sub_0805506C
	ldr r0, _08065B8C @ =0x082E6E8C
	ldr r1, _08065B90 @ =gEkrTsaBuffer
	bl LZ77UnCompWram
	ldr r0, _08065B94 @ =0x001F001F
	bl sub_08050F94
	ldr r0, _08065B98 @ =gBg3Tm
	movs r1, #0x1f
	bl TmFill
	bl sub_08065388
	ldr r0, _08065B9C @ =0x0201FB00
	ldr r0, [r0]
	movs r1, #0
	bl sub_08065328
	adds r0, r4, #0
	bl Proc_Break
_08065B78:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08065B80: .4byte 0x010D0000
_08065B84: .4byte 0x000002F1
_08065B88: .4byte 0x00000195
_08065B8C: .4byte 0x082E6E8C
_08065B90: .4byte gEkrTsaBuffer
_08065B94: .4byte 0x001F001F
_08065B98: .4byte gBg3Tm
_08065B9C: .4byte 0x0201FB00

	thumb_func_start sub_08065BA0
sub_08065BA0: @ 0x08065BA0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_080666A4
	str r0, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	movs r1, #2
	bl sub_08065264
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_08065BC0
sub_08065BC0: @ 0x08065BC0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_08065258
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	beq _08065C0E
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r0, [r4, #0x68]
	bl Proc_End
	ldr r0, [r4, #0x44]
	bl Proc_End
	ldr r0, [r4, #0x50]
	bl Proc_End
	ldr r0, [r4, #0x5c]
	bl sub_0806544C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08065C00
	ldr r0, [r4, #0x5c]
	bl sub_08066804
	b _08065C06
_08065C00:
	ldr r0, [r4, #0x5c]
	bl sub_080669A4
_08065C06:
	str r0, [r4, #0x50]
	adds r0, r4, #0
	bl Proc_Break
_08065C0E:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_08065C14
sub_08065C14: @ 0x08065C14
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x50]
	adds r1, r0, #0
	adds r1, #0x29
	ldrb r1, [r1]
	cmp r1, #1
	bne _08065C2E
	bl Proc_End
	adds r0, r4, #0
	bl Proc_Break
_08065C2E:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_08065C34
sub_08065C34: @ 0x08065C34
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x4c]
	bl Proc_End
	ldr r0, [r4, #0x58]
	bl Proc_End
	ldr r0, [r4, #0x48]
	bl Proc_End
	ldr r3, _08065CB8 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	ldr r0, [r4, #0x5c]
	bl GetAISSubjectId
	bl sub_08055034
	ldr r0, [r4, #0x5c]
	bl GetAISSubjectId
	ldr r1, _08065CBC @ =0x0203DFE8
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r1, #0
	strh r1, [r0]
	ldr r0, [r4, #0x5c]
	bl sub_08065DD0
	ldr r0, _08065CC0 @ =gBg3Tm
	ldr r1, _08065CC4 @ =0x0000601F
	bl TmFill
	movs r0, #8
	bl EnableBgSync
	movs r0, #0x10
	bl sub_08067AB0
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08065CB8: .4byte gDispIo
_08065CBC: .4byte 0x0203DFE8
_08065CC0: .4byte gBg3Tm
_08065CC4: .4byte 0x0000601F

	thumb_func_start sub_08065CC8
sub_08065CC8: @ 0x08065CC8
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _08065CE6
	ldr r0, _08065D1C @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl sub_080195BC
	bl RenderMap
_08065CE6:
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r0, #8
	str r0, [sp]
	movs r0, #4
	movs r1, #0x10
	movs r2, #4
	bl Interpolate
	bl sub_08067AB0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #9
	bne _08065D14
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
_08065D14:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08065D1C: .4byte gPlaySt

	thumb_func_start sub_08065D20
sub_08065D20: @ 0x08065D20
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	movs r1, #8
	bl sub_08065264
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_08065D38
sub_08065D38: @ 0x08065D38
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08065D58 @ =0x08C486EC
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08065D58: .4byte 0x08C486EC

	thumb_func_start sub_08065D5C
sub_08065D5C: @ 0x08065D5C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r6, r0]
	movs r0, #8
	str r0, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	adds r5, r0, #0
	ldr r0, _08065DBC @ =0x02020060
	ldr r4, _08065DC0 @ =0x020228E0
	adds r1, r4, #0
	movs r2, #0x10
	bl CpuFastSet
	subs r4, #0x80
	adds r0, r4, #0
	movs r1, #4
	movs r2, #2
	adds r3, r5, #0
	bl sub_080676D4
	bl EnablePalSync
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #9
	bne _08065DB4
	movs r0, #0
	strh r0, [r6, #0x2c]
	adds r1, r6, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	adds r0, r6, #0
	bl Proc_Break
_08065DB4:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08065DBC: .4byte 0x02020060
_08065DC0: .4byte 0x020228E0

	thumb_func_start sub_08065DC4
sub_08065DC4: @ 0x08065DC4
	push {lr}
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08065DD0
sub_08065DD0: @ 0x08065DD0
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, _08065E24 @ =0x08C4870C
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	adds r0, #0x29
	movs r1, #0
	strb r1, [r0]
	strh r1, [r5, #0x2c]
	ldr r0, _08065E28 @ =gBg2Tm
	str r1, [sp]
	movs r1, #0x20
	movs r2, #0x20
	movs r3, #0
	bl sub_080671A0
	ldr r0, _08065E2C @ =0x0201FAD0
	bl sub_08055718
	ldr r4, _08065E30 @ =0x020228E0
	ldr r1, _08065E34 @ =0x02020060
	adds r0, r4, #0
	movs r2, #0x10
	bl CpuFastSet
	subs r4, #0x80
	adds r0, r4, #0
	movs r1, #4
	movs r2, #2
	movs r3, #0x10
	bl sub_080676D4
	adds r0, r5, #0
	add sp, #4
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08065E24: .4byte 0x08C4870C
_08065E28: .4byte gBg2Tm
_08065E2C: .4byte 0x0201FAD0
_08065E30: .4byte 0x020228E0
_08065E34: .4byte 0x02020060

	thumb_func_start sub_08065E38
sub_08065E38: @ 0x08065E38
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r6, r0]
	movs r0, #8
	str r0, [sp]
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	adds r5, r0, #0
	ldr r0, _08065E98 @ =0x02020060
	ldr r4, _08065E9C @ =0x020228E0
	adds r1, r4, #0
	movs r2, #0x10
	bl CpuFastSet
	subs r4, #0x80
	adds r0, r4, #0
	movs r1, #4
	movs r2, #2
	adds r3, r5, #0
	bl sub_080676D4
	bl EnablePalSync
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #9
	bne _08065E90
	movs r0, #0
	strh r0, [r6, #0x2c]
	adds r1, r6, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	adds r0, r6, #0
	bl Proc_Break
_08065E90:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08065E98: .4byte 0x02020060
_08065E9C: .4byte 0x020228E0

	thumb_func_start sub_08065EA0
sub_08065EA0: @ 0x08065EA0
	push {lr}
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08065EAC
sub_08065EAC: @ 0x08065EAC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _08065EFC @ =0x08C4872C
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	ldr r0, _08065F00 @ =0x082E76A4
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterObjGfx
	ldr r0, _08065F04 @ =0x082E9CD8
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _08065F08 @ =0x08C49FA4
	movs r1, #0x14
	bl AnimCreate
	movs r2, #0
	movs r1, #0xa1
	lsls r1, r1, #6
	strh r1, [r0, #8]
	movs r1, #0xc0
	lsls r1, r1, #1
	strh r1, [r4, #0x32]
	strh r1, [r0, #2]
	strh r1, [r4, #0x3a]
	strh r1, [r0, #4]
	str r0, [r4, #0x60]
	adds r0, r4, #0
	adds r0, #0x29
	strb r2, [r0]
	adds r0, r4, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08065EFC: .4byte 0x08C4872C
_08065F00: .4byte 0x082E76A4
_08065F04: .4byte 0x082E9CD8
_08065F08: .4byte 0x08C49FA4

	thumb_func_start sub_08065F0C
sub_08065F0C: @ 0x08065F0C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x60]
	ldrh r1, [r4, #0x32]
	strh r1, [r0, #2]
	ldrh r1, [r4, #0x3a]
	strh r1, [r0, #4]
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	bne _08065F30
	ldr r0, [r4, #0x60]
	bl AnimDelete
	adds r0, r4, #0
	bl Proc_Break
_08065F30:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08065F38
sub_08065F38: @ 0x08065F38
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, _08065F7C @ =0x08C48744
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	ldr r4, _08065F80 @ =0x08C49EEC
	ldr r0, _08065F84 @ =0x082E9CD8
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _08065F88 @ =0x082E76A4
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterObjGfx
	ldr r0, [r5, #0x5c]
	str r4, [sp]
	adds r1, r4, #0
	adds r2, r4, #0
	adds r3, r4, #0
	bl sub_08050BF8
	str r0, [r5, #0x60]
	movs r0, #0
	strh r0, [r5, #0x2c]
	adds r0, r5, #0
	add sp, #4
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08065F7C: .4byte 0x08C48744
_08065F80: .4byte 0x08C49EEC
_08065F84: .4byte 0x082E9CD8
_08065F88: .4byte 0x082E76A4

	thumb_func_start sub_08065F8C
sub_08065F8C: @ 0x08065F8C
	push {lr}
	ldr r0, [r0, #0x60]
	bl AnimDelete
	pop {r0}
	bx r0

	thumb_func_start sub_08065F98
sub_08065F98: @ 0x08065F98
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, [r4, #0x60]
	ldrh r0, [r4, #0x32]
	movs r3, #0
	strh r0, [r2, #2]
	ldrh r0, [r4, #0x3a]
	strh r0, [r2, #4]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	movs r1, #0x86
	lsls r1, r1, #0x11
	cmp r0, r1
	bne _08065FDA
	strh r3, [r4, #0x2c]
	ldr r0, _08065FE0 @ =0x08C49FAC
	str r0, [r2, #0x24]
	str r0, [r2, #0x20]
	strh r3, [r2, #6]
	ldr r0, _08065FE4 @ =0x082E9CD8
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _08065FE8 @ =0x082E8584
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterObjGfx
	adds r0, r4, #0
	bl Proc_Break
_08065FDA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08065FE0: .4byte 0x08C49FAC
_08065FE4: .4byte 0x082E9CD8
_08065FE8: .4byte 0x082E8584

	thumb_func_start sub_08065FEC
sub_08065FEC: @ 0x08065FEC
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldrh r0, [r4, #0x32]
	strh r0, [r1, #2]
	ldrh r0, [r4, #0x3a]
	strh r0, [r1, #4]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x2e
	bne _08066020
	ldr r0, _08066028 @ =0x082E9CD8
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0806602C @ =0x082E76A4
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterObjGfx
	adds r0, r4, #0
	bl Proc_Break
_08066020:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08066028: .4byte 0x082E9CD8
_0806602C: .4byte 0x082E76A4

	thumb_func_start sub_08066030
sub_08066030: @ 0x08066030
	ldr r2, [r0, #0x60]
	ldrh r1, [r0, #0x32]
	strh r1, [r2, #2]
	ldrh r0, [r0, #0x3a]
	strh r0, [r2, #4]
	bx lr

	thumb_func_start sub_0806603C
sub_0806603C: @ 0x0806603C
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, _08066080 @ =0x08C48774
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	ldr r4, _08066084 @ =0x08C49FFC
	ldr r0, _08066088 @ =0x082E9CD8
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0806608C @ =0x082E9240
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterObjGfx
	ldr r0, [r5, #0x5c]
	str r4, [sp]
	adds r1, r4, #0
	adds r2, r4, #0
	adds r3, r4, #0
	bl sub_08050BF8
	str r0, [r5, #0x60]
	movs r0, #0
	strh r0, [r5, #0x2c]
	adds r0, r5, #0
	add sp, #4
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08066080: .4byte 0x08C48774
_08066084: .4byte 0x08C49FFC
_08066088: .4byte 0x082E9CD8
_0806608C: .4byte 0x082E9240

	thumb_func_start sub_08066090
sub_08066090: @ 0x08066090
	push {lr}
	ldr r0, [r0, #0x60]
	bl AnimDelete
	pop {r0}
	bx r0

	thumb_func_start sub_0806609C
sub_0806609C: @ 0x0806609C
	push {lr}
	adds r2, r0, #0
	ldr r1, [r2, #0x60]
	ldrh r0, [r2, #0x32]
	strh r0, [r1, #2]
	ldrh r0, [r2, #0x3a]
	strh r0, [r1, #4]
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x32
	bne _080660C2
	movs r0, #0
	strh r0, [r2, #0x2c]
	adds r0, r2, #0
	bl Proc_Break
_080660C2:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080660C8
sub_080660C8: @ 0x080660C8
	adds r1, r0, #0
	ldr r2, [r1, #0x60]
	ldrh r0, [r1, #0x32]
	movs r3, #0
	strh r0, [r2, #2]
	ldrh r0, [r1, #0x3a]
	strh r0, [r2, #4]
	ldrh r0, [r1, #0x2c]
	adds r0, #1
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #4
	bne _080660EE
	strh r3, [r1, #0x2c]
	ldr r0, _080660F0 @ =0x08C49FFC
	str r0, [r2, #0x24]
	str r0, [r2, #0x20]
	strh r3, [r2, #6]
_080660EE:
	bx lr
	.align 2, 0
_080660F0: .4byte 0x08C49FFC

	thumb_func_start sub_080660F4
sub_080660F4: @ 0x080660F4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08066114 @ =0x08C4879C
	movs r1, #4
	bl Proc_Start
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	str r4, [r0, #0x5c]
	ldrb r1, [r4, #0x12]
	str r1, [r0, #0x54]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08066114: .4byte 0x08C4879C

	thumb_func_start sub_08066118
sub_08066118: @ 0x08066118
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_08065258
	movs r1, #2
	ands r1, r0
	cmp r1, #0
	beq _08066134
	ldr r0, [r4, #0x5c]
	bl sub_0805001C
	cmp r0, #0
	bne _080661FA
_08066134:
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r1, [r0]
	adds r5, r0, #0
	cmp r1, #0
	beq _08066146
	cmp r1, #1
	beq _08066160
	b _0806617C
_08066146:
	strh r1, [r4, #0x2c]
	str r1, [r4, #0x44]
	ldr r0, _08066158 @ =0x082E420C
	str r0, [r4, #0x48]
	ldr r0, _0806615C @ =0x082E6C60
	str r0, [r4, #0x4c]
	movs r0, #0x64
	strb r0, [r5]
	b _0806617C
	.align 2, 0
_08066158: .4byte 0x082E420C
_0806615C: .4byte 0x082E6C60
_08066160:
	movs r0, #0
	strh r0, [r4, #0x2c]
	str r0, [r4, #0x44]
	ldr r0, _080661A8 @ =0x082E421E
	str r0, [r4, #0x48]
	ldr r0, _080661AC @ =0x082E6C60
	str r0, [r4, #0x4c]
	movs r0, #0x64
	strb r0, [r5]
	ldr r0, [r4, #0x5c]
	movs r1, #0x3c
	movs r2, #0xa
	bl sub_080569B8
_0806617C:
	adds r0, r4, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _080661B4
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	ldr r1, _080661B0 @ =0x02022920
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
	b _080661D8
	.align 2, 0
_080661A8: .4byte 0x082E421E
_080661AC: .4byte 0x082E6C60
_080661B0: .4byte 0x02022920
_080661B4:
	movs r0, #6
	rsbs r0, r0, #0
	cmp r1, r0
	bne _080661C2
	movs r0, #0
	strb r0, [r5]
	b _080661D8
_080661C2:
	movs r0, #5
	rsbs r0, r0, #0
	cmp r1, r0
	bne _080661D8
	ldr r0, [r4, #0x5c]
	movs r1, #5
	bl sub_0804F7B8
	ldr r0, [r4, #0x44]
	adds r0, #1
	str r0, [r4, #0x44]
_080661D8:
	ldr r0, [r4, #0x5c]
	ldrb r1, [r0, #0x12]
	ldr r0, [r4, #0x54]
	cmp r1, r0
	beq _080661F4
	adds r0, r1, #0
	cmp r0, #1
	beq _080661EC
	cmp r0, #3
	bne _080661F0
_080661EC:
	movs r0, #1
	b _080661F2
_080661F0:
	movs r0, #0
_080661F2:
	strb r0, [r5]
_080661F4:
	ldr r0, [r4, #0x5c]
	ldrb r0, [r0, #0x12]
	str r0, [r4, #0x54]
_080661FA:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08066200
sub_08066200: @ 0x08066200
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08066220 @ =0x08C487B4
	movs r1, #4
	bl Proc_Start
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	str r4, [r0, #0x5c]
	ldrb r1, [r4, #0x12]
	str r1, [r0, #0x54]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08066220: .4byte 0x08C487B4

	thumb_func_start sub_08066224
sub_08066224: @ 0x08066224
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_08065258
	movs r1, #2
	ands r1, r0
	cmp r1, #0
	beq _08066240
	ldr r0, [r4, #0x5c]
	bl sub_0805001C
	cmp r0, #0
	bne _080662EE
_08066240:
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r1, [r0]
	adds r5, r0, #0
	cmp r1, #0
	beq _08066252
	cmp r1, #1
	beq _08066260
	b _08066272
_08066252:
	strh r1, [r4, #0x2c]
	str r1, [r4, #0x44]
	ldr r0, _0806625C @ =0x082E4318
	b _08066268
	.align 2, 0
_0806625C: .4byte 0x082E4318
_08066260:
	movs r0, #0
	strh r0, [r4, #0x2c]
	str r0, [r4, #0x44]
	ldr r0, _0806629C @ =0x082E431E
_08066268:
	str r0, [r4, #0x48]
	ldr r0, _080662A0 @ =0x082E9CF8
	str r0, [r4, #0x4c]
	movs r0, #0x64
	strb r0, [r5]
_08066272:
	adds r0, r4, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _080662A8
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	ldr r1, _080662A4 @ =0x02022B40
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
	b _080662CC
	.align 2, 0
_0806629C: .4byte 0x082E431E
_080662A0: .4byte 0x082E9CF8
_080662A4: .4byte 0x02022B40
_080662A8:
	movs r0, #6
	rsbs r0, r0, #0
	cmp r1, r0
	bne _080662B6
	movs r0, #0
	strb r0, [r5]
	b _080662CC
_080662B6:
	movs r0, #5
	rsbs r0, r0, #0
	cmp r1, r0
	bne _080662CC
	ldr r0, [r4, #0x5c]
	movs r1, #5
	bl sub_0804F7B8
	ldr r0, [r4, #0x44]
	adds r0, #1
	str r0, [r4, #0x44]
_080662CC:
	ldr r0, [r4, #0x5c]
	ldrb r1, [r0, #0x12]
	ldr r0, [r4, #0x54]
	cmp r1, r0
	beq _080662E8
	adds r0, r1, #0
	cmp r0, #1
	beq _080662E0
	cmp r0, #3
	bne _080662E4
_080662E0:
	movs r0, #1
	b _080662E6
_080662E4:
	movs r0, #0
_080662E6:
	strb r0, [r5]
_080662E8:
	ldr r0, [r4, #0x5c]
	ldrb r0, [r0, #0x12]
	str r0, [r4, #0x54]
_080662EE:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080662F4
sub_080662F4: @ 0x080662F4
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, _08066358 @ =0x08C487CC
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	ldr r0, _0806635C @ =0x082EA9A4
	ldr r1, _08066360 @ =0x06005000
	bl LZ77UnCompVram
	ldr r0, _08066364 @ =0x082EB530
	ldr r6, _08066368 @ =gEkrTsaBuffer
	adds r1, r6, #0
	bl LZ77UnCompWram
	ldr r0, _0806636C @ =0x082EB510
	ldr r1, _08066370 @ =0x020228E0
	movs r2, #8
	bl CpuFastSet
	ldr r4, _08066374 @ =gBg2Tm
	adds r0, r4, #0
	movs r1, #0x1f
	bl TmFill
	movs r0, #4
	str r0, [sp]
	movs r0, #0xa0
	lsls r0, r0, #2
	str r0, [sp, #4]
	adds r0, r6, #0
	adds r1, r4, #0
	movs r2, #0x20
	movs r3, #0x20
	bl sub_080672B8
	movs r0, #4
	bl EnableBgSync
	adds r0, r5, #0
	add sp, #8
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_08066358: .4byte 0x08C487CC
_0806635C: .4byte 0x082EA9A4
_08066360: .4byte 0x06005000
_08066364: .4byte 0x082EB530
_08066368: .4byte gEkrTsaBuffer
_0806636C: .4byte 0x082EB510
_08066370: .4byte 0x020228E0
_08066374: .4byte gBg2Tm

	thumb_func_start nullsub_53
nullsub_53: @ 0x08066378
	bx lr
	.align 2, 0

	thumb_func_start nullsub_54
nullsub_54: @ 0x0806637C
	bx lr
	.align 2, 0

	thumb_func_start sub_08066380
sub_08066380: @ 0x08066380
	push {lr}
	ldr r0, _08066394 @ =0x08C487EC
	movs r1, #3
	bl Proc_Start
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r1}
	bx r1
	.align 2, 0
_08066394: .4byte 0x08C487EC

	thumb_func_start sub_08066398
sub_08066398: @ 0x08066398
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r0, _080663DC @ =0x0201FB20
	ldr r0, [r0]
	ldr r3, _080663E0 @ =0x0201FB2C
	cmp r0, #0
	bne _080663A8
	ldr r3, _080663E4 @ =0x0201FC6C
_080663A8:
	movs r2, #0
	ldr r6, _080663E8 @ =gSinLut
	movs r5, #0xff
_080663AE:
	lsls r0, r2, #1
	movs r7, #0x2c
	ldrsh r1, [r4, r7]
	adds r0, r0, r1
	ands r0, r5
	lsls r0, r0, #1
	adds r0, r0, r6
	movs r1, #0
	ldrsh r0, [r0, r1]
	asrs r0, r0, #0xa
	adds r0, #4
	strh r0, [r3]
	adds r3, #2
	adds r2, #1
	cmp r2, #0x9f
	bls _080663AE
	ldrh r0, [r4, #0x2c]
	adds r0, #2
	strh r0, [r4, #0x2c]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080663DC: .4byte 0x0201FB20
_080663E0: .4byte 0x0201FB2C
_080663E4: .4byte 0x0201FC6C
_080663E8: .4byte gSinLut

	thumb_func_start sub_080663EC
sub_080663EC: @ 0x080663EC
	ldr r0, _08066408 @ =0x04000004
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _08066406
	ldr r3, _0806640C @ =0x0400001A
	ldr r2, _08066410 @ =0x0201FB28
	ldr r0, [r2]
	ldrh r1, [r0]
	strh r1, [r3]
	adds r0, #2
	str r0, [r2]
_08066406:
	bx lr
	.align 2, 0
_08066408: .4byte 0x04000004
_0806640C: .4byte 0x0400001A
_08066410: .4byte 0x0201FB28

	thumb_func_start sub_08066414
sub_08066414: @ 0x08066414
	push {r4, r5, r6, r7, lr}
	ldr r2, _08066464 @ =0x0201FB2C
	movs r1, #0
	adds r0, r2, #0
	ldr r4, _08066468 @ =0x0201FC6C
	ldr r5, _0806646C @ =0x0201FB20
	ldr r6, _08066470 @ =0x0201FB24
	ldr r7, _08066474 @ =0x0201FB28
	ldr r3, _08066478 @ =sub_080663EC
	mov ip, r3
	movs r3, #0
_0806642A:
	strh r3, [r2]
	adds r2, #2
	adds r1, #1
	cmp r1, #0x9f
	bls _0806642A
	adds r2, r4, #0
	movs r1, #0
	movs r3, #0
_0806643A:
	strh r3, [r2]
	adds r2, #2
	adds r1, #1
	cmp r1, #0x9f
	bls _0806643A
	movs r4, #0
	str r4, [r5]
	str r0, [r6]
	str r0, [r7]
	mov r0, ip
	bl SetOnHBlankA
	ldr r0, _0806647C @ =0x08C48804
	movs r1, #0
	bl Proc_Start
	strh r4, [r0, #0x2c]
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08066464: .4byte 0x0201FB2C
_08066468: .4byte 0x0201FC6C
_0806646C: .4byte 0x0201FB20
_08066470: .4byte 0x0201FB24
_08066474: .4byte 0x0201FB28
_08066478: .4byte sub_080663EC
_0806647C: .4byte 0x08C48804

	thumb_func_start sub_08066480
sub_08066480: @ 0x08066480
	push {lr}
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0

	thumb_func_start sub_0806648C
sub_0806648C: @ 0x0806648C
	ldr r1, _080664A0 @ =0x0201FB20
	ldr r0, [r1]
	cmp r0, #1
	bne _080664AC
	movs r0, #0
	str r0, [r1]
	ldr r1, _080664A4 @ =0x0201FB24
	ldr r0, _080664A8 @ =0x0201FB2C
	b _080664B4
	.align 2, 0
_080664A0: .4byte 0x0201FB20
_080664A4: .4byte 0x0201FB24
_080664A8: .4byte 0x0201FB2C
_080664AC:
	movs r0, #1
	str r0, [r1]
	ldr r1, _080664C0 @ =0x0201FB24
	ldr r0, _080664C4 @ =0x0201FC6C
_080664B4:
	str r0, [r1]
	adds r0, r1, #0
	ldr r1, _080664C8 @ =0x0201FB28
	ldr r0, [r0]
	str r0, [r1]
	bx lr
	.align 2, 0
_080664C0: .4byte 0x0201FB24
_080664C4: .4byte 0x0201FC6C
_080664C8: .4byte 0x0201FB28

	thumb_func_start sub_080664CC
sub_080664CC: @ 0x080664CC
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r0, _080664FC @ =0x08C48824
	movs r1, #3
	bl Proc_Start
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	str r4, [r0, #0x44]
	str r5, [r0, #0x48]
	str r6, [r0, #0x4c]
	mov r1, r8
	str r1, [r0, #0x50]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080664FC: .4byte 0x08C48824

	thumb_func_start sub_08066500
sub_08066500: @ 0x08066500
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r1, r0, #0
	ldr r0, _0806657C @ =0x0201FDAC
	ldr r0, [r0]
	ldr r2, _08066580 @ =0x0201FDB8
	cmp r0, #0
	bne _08066518
	ldr r2, _08066584 @ =0x0201FEF8
_08066518:
	ldr r0, [r1, #0x50]
	ldrh r3, [r1, #0x2e]
	adds r0, r3, r0
	strh r0, [r1, #0x2e]
	movs r4, #0
	movs r3, #0
	ldr r6, [r1, #0x44]
	mov r8, r6
	ldr r7, [r1, #0x48]
	mov sl, r7
	ldr r0, _08066588 @ =0x08C4A008
	mov ip, r0
	ldr r5, [r1, #0x4c]
	ldr r6, _0806658C @ =gDispIo
	mov sb, r6
_08066536:
	add r4, sl
	lsrs r0, r4, #8
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x17
	add r0, ip
	movs r7, #0
	ldrsh r0, [r0, r7]
	muls r0, r5, r0
	asrs r0, r0, #8
	adds r0, #4
	mov r6, sb
	ldrh r6, [r6, #0x28]
	adds r0, r6, r0
	strh r0, [r2]
	adds r2, #2
	adds r3, #1
	cmp r3, #0x77
	bls _08066536
	ldrh r0, [r1, #0x2c]
	adds r0, #1
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, r8
	bne _0806656E
	adds r0, r1, #0
	bl Proc_End
_0806656E:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806657C: .4byte 0x0201FDAC
_08066580: .4byte 0x0201FDB8
_08066584: .4byte 0x0201FEF8
_08066588: .4byte 0x08C4A008
_0806658C: .4byte gDispIo

	thumb_func_start sub_08066590
sub_08066590: @ 0x08066590
	ldr r0, _080665AC @ =0x04000004
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _080665AA
	ldr r3, _080665B0 @ =0x0400001C
	ldr r2, _080665B4 @ =0x0201FDB4
	ldr r0, [r2]
	ldrh r1, [r0]
	strh r1, [r3]
	adds r0, #2
	str r0, [r2]
_080665AA:
	bx lr
	.align 2, 0
_080665AC: .4byte 0x04000004
_080665B0: .4byte 0x0400001C
_080665B4: .4byte 0x0201FDB4

	thumb_func_start sub_080665B8
sub_080665B8: @ 0x080665B8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldr r3, _08066618 @ =0x0201FDB8
	movs r2, #0
	adds r0, r3, #0
	ldr r4, _0806661C @ =0x0201FEF8
	ldr r7, _08066620 @ =0x0201FDAC
	ldr r5, _08066624 @ =0x0201FDB0
	mov ip, r5
	ldr r5, _08066628 @ =0x0201FDB4
	ldr r6, _0806662C @ =sub_08066590
_080665D6:
	strh r1, [r3]
	adds r3, #2
	adds r2, #1
	cmp r2, #0x9f
	bls _080665D6
	adds r3, r4, #0
	movs r2, #0
_080665E4:
	strh r1, [r3]
	adds r3, #2
	adds r2, #1
	cmp r2, #0x9f
	bls _080665E4
	movs r4, #0
	str r4, [r7]
	mov r1, ip
	str r0, [r1]
	str r0, [r5]
	adds r0, r6, #0
	bl SetOnHBlankA
	ldr r0, _08066630 @ =0x08C4883C
	movs r1, #0
	bl Proc_Start
	strh r4, [r0, #0x2c]
	mov r5, r8
	str r5, [r0, #0x44]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08066618: .4byte 0x0201FDB8
_0806661C: .4byte 0x0201FEF8
_08066620: .4byte 0x0201FDAC
_08066624: .4byte 0x0201FDB0
_08066628: .4byte 0x0201FDB4
_0806662C: .4byte sub_08066590
_08066630: .4byte 0x08C4883C

	thumb_func_start sub_08066634
sub_08066634: @ 0x08066634
	push {lr}
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08066640
sub_08066640: @ 0x08066640
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08066658 @ =0x0201FDAC
	ldr r0, [r1]
	cmp r0, #1
	bne _08066664
	movs r0, #0
	str r0, [r1]
	ldr r1, _0806665C @ =0x0201FDB0
	ldr r0, _08066660 @ =0x0201FDB8
	b _0806666C
	.align 2, 0
_08066658: .4byte 0x0201FDAC
_0806665C: .4byte 0x0201FDB0
_08066660: .4byte 0x0201FDB8
_08066664:
	movs r0, #1
	str r0, [r1]
	ldr r1, _08066698 @ =0x0201FDB0
	ldr r0, _0806669C @ =0x0201FEF8
_0806666C:
	str r0, [r1]
	adds r0, r1, #0
	ldr r1, _080666A0 @ =0x0201FDB4
	ldr r0, [r0]
	str r0, [r1]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r4, #0x44]
	cmp r0, r1
	bne _08066692
	movs r0, #0
	bl SetOnHBlankA
	adds r0, r4, #0
	bl Proc_Break
_08066692:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08066698: .4byte 0x0201FDB0
_0806669C: .4byte 0x0201FEF8
_080666A0: .4byte 0x0201FDB4

	thumb_func_start sub_080666A4
sub_080666A4: @ 0x080666A4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080666CC @ =0x08C4885C
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	str r1, [r0, #0x44]
	str r1, [r0, #0x48]
	ldr r1, _080666D0 @ =0x08C48874
	str r1, [r0, #0x4c]
	movs r1, #0x80
	lsls r1, r1, #5
	str r1, [r0, #0x54]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080666CC: .4byte 0x08C4885C
_080666D0: .4byte 0x08C48874

	thumb_func_start sub_080666D4
sub_080666D4: @ 0x080666D4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	ldrb r1, [r0, #0x12]
	ldr r0, [r4, #0x54]
	cmp r0, r1
	beq _08066744
	str r1, [r4, #0x54]
	movs r0, #0
	strh r0, [r4, #0x2c]
	strh r0, [r4, #0x2e]
	str r0, [r4, #0x44]
	cmp r1, #9
	bhi _08066744
	lsls r0, r1, #2
	ldr r1, _080666FC @ =_08066700
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080666FC: .4byte _08066700
_08066700: @ jump table
	.4byte _08066728 @ case 0
	.4byte _08066730 @ case 1
	.4byte _08066728 @ case 2
	.4byte _08066730 @ case 3
	.4byte _08066738 @ case 4
	.4byte _08066738 @ case 5
	.4byte _08066740 @ case 6
	.4byte _08066740 @ case 7
	.4byte _08066740 @ case 8
	.4byte _08066728 @ case 9
_08066728:
	ldr r0, _0806672C @ =0x082E441E
	b _08066742
	.align 2, 0
_0806672C: .4byte 0x082E441E
_08066730:
	ldr r0, _08066734 @ =0x082E4430
	b _08066742
	.align 2, 0
_08066734: .4byte 0x082E4430
_08066738:
	ldr r0, _0806673C @ =0x082E4442
	b _08066742
	.align 2, 0
_0806673C: .4byte 0x082E4442
_08066740:
	ldr r0, _08066778 @ =0x082E4418
_08066742:
	str r0, [r4, #0x48]
_08066744:
	adds r0, r4, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _08066784
	ldr r1, [r4, #0x4c]
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r1, _0806677C @ =gEkrTsaBuffer
	bl LZ77UnCompWram
	bl sub_08065388
	ldr r0, _08066780 @ =0x0201FB00
	ldr r0, [r0]
	movs r1, #0
	bl sub_08065328
	b _080667F8
	.align 2, 0
_08066778: .4byte 0x082E4418
_0806677C: .4byte gEkrTsaBuffer
_08066780: .4byte 0x0201FB00
_08066784:
	movs r0, #6
	rsbs r0, r0, #0
	cmp r2, r0
	bne _080667B2
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _080667A8
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r1, r0, #0
	movs r0, #8
	ldrh r1, [r1, #0x10]
	ands r0, r1
	cmp r0, #0
	beq _080667F8
	b _080667C2
_080667A8:
	bl sub_0804DD50
	cmp r0, #1
	bne _080667F8
	b _080667EC
_080667B2:
	movs r0, #5
	rsbs r0, r0, #0
	cmp r2, r0
	bne _080667D6
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _080667C8
_080667C2:
	movs r0, #1
	strh r0, [r4, #0x2e]
	b _080667F8
_080667C8:
	ldr r1, [r4, #0x5c]
	movs r0, #8
	ldrh r1, [r1, #0x10]
	ands r0, r1
	cmp r0, #0
	beq _080667F8
	b _080667EC
_080667D6:
	movs r0, #4
	rsbs r0, r0, #0
	cmp r2, r0
	bne _080667F8
	ldr r0, _08066800 @ =0x000002F2
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x78
	movs r3, #0
	bl PlaySFX
_080667EC:
	movs r0, #0
	strh r0, [r4, #0x2c]
	strh r0, [r4, #0x2e]
	ldr r0, [r4, #0x44]
	adds r0, #1
	str r0, [r4, #0x44]
_080667F8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08066800: .4byte 0x000002F2

	thumb_func_start sub_08066804
sub_08066804: @ 0x08066804
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08066824 @ =0x08C4887C
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r2, #0
	movs r1, #0
	strh r1, [r0, #0x2c]
	adds r1, r0, #0
	adds r1, #0x29
	strb r2, [r1]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08066824: .4byte 0x08C4887C

	thumb_func_start sub_08066828
sub_08066828: @ 0x08066828
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r6, r0]
	movs r0, #8
	str r0, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	adds r5, r0, #0
	ldr r0, _080668A8 @ =0x082E6C60
	ldr r4, _080668AC @ =0x02022920
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	ldr r0, _080668B0 @ =0x02000054
	ldr r0, [r0]
	movs r2, #0x88
	lsls r2, r2, #2
	adds r1, r4, r2
	movs r2, #8
	bl CpuFastSet
	subs r4, #0xc0
	adds r0, r4, #0
	movs r1, #6
	movs r2, #1
	adds r3, r5, #0
	bl sub_080676D4
	adds r0, r4, #0
	movs r1, #0x17
	movs r2, #1
	adds r3, r5, #0
	bl sub_080676D4
	adds r0, r5, #0
	bl sub_08065510
	bl EnablePalSync
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #9
	bne _0806689E
	adds r1, r6, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	adds r0, r6, #0
	bl Proc_Break
_0806689E:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080668A8: .4byte 0x082E6C60
_080668AC: .4byte 0x02022920
_080668B0: .4byte 0x02000054

	thumb_func_start nullsub_55
nullsub_55: @ 0x080668B4
	bx lr
	.align 2, 0

	thumb_func_start sub_080668B8
sub_080668B8: @ 0x080668B8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r5, r0, #0
	adds r4, r1, #0
	asrs r5, r5, #3
	asrs r4, r4, #3
	ldr r0, _08066944 @ =0x082E7418
	ldr r6, _08066948 @ =gEkrTsaBuffer
	adds r1, r6, #0
	bl LZ77UnCompWram
	movs r1, #0xf0
	lsls r1, r1, #3
	adds r0, r6, r1
	lsls r5, r5, #1
	lsls r2, r4, #5
	adds r2, r2, r4
	lsls r2, r2, #2
	ldr r7, _0806694C @ =0x0201D41C
	adds r2, r2, r7
	adds r2, r5, r2
	movs r1, #0x20
	mov sl, r1
	str r1, [sp]
	movs r1, #2
	str r1, [sp, #4]
	movs r1, #6
	mov sb, r1
	str r1, [sp, #8]
	movs r1, #0
	mov r8, r1
	str r1, [sp, #0xc]
	subs r1, #1
	movs r3, #0x42
	bl sub_080673C8
	adds r4, #2
	lsls r0, r4, #5
	adds r0, r0, r4
	lsls r0, r0, #2
	adds r0, r0, r7
	adds r5, r5, r0
	mov r0, sl
	str r0, [sp]
	movs r0, #0x1e
	str r0, [sp, #4]
	mov r1, sb
	str r1, [sp, #8]
	mov r0, r8
	str r0, [sp, #0xc]
	adds r0, r6, #0
	movs r1, #1
	rsbs r1, r1, #0
	adds r2, r5, #0
	movs r3, #0x42
	bl sub_080673C8
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08066944: .4byte 0x082E7418
_08066948: .4byte gEkrTsaBuffer
_0806694C: .4byte 0x0201D41C

	thumb_func_start sub_08066950
sub_08066950: @ 0x08066950
	push {r4, r5, lr}
	sub sp, #0x10
	adds r3, r0, #0
	adds r2, r1, #0
	asrs r4, r3, #3
	movs r1, #7
	asrs r5, r2, #3
	ands r2, r1
	movs r0, #3
	ands r1, r3
	bl SetBgOffset
	lsls r4, r4, #1
	lsls r0, r5, #5
	adds r0, r0, r5
	lsls r0, r0, #2
	ldr r1, _0806699C @ =0x0201D41C
	adds r0, r0, r1
	adds r4, r4, r0
	ldr r2, _080669A0 @ =gBg3Tm
	movs r0, #0x20
	str r0, [sp]
	str r0, [sp, #4]
	subs r0, #0x21
	str r0, [sp, #8]
	str r0, [sp, #0xc]
	adds r0, r4, #0
	movs r1, #0x42
	movs r3, #0x20
	bl sub_08067318
	movs r0, #8
	bl EnableBgSync
	add sp, #0x10
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806699C: .4byte 0x0201D41C
_080669A0: .4byte gBg3Tm

	thumb_func_start sub_080669A4
sub_080669A4: @ 0x080669A4
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _080669DC @ =0x08C4889C
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	strh r0, [r5, #0x2c]
	ldr r0, _080669E0 @ =gEkrDistanceType
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _080669CA
	ldr r0, _080669E4 @ =0x0000FFE0
_080669CA:
	strh r0, [r5, #0x32]
	movs r0, #1
	bl sub_080034C8
	adds r0, r5, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080669DC: .4byte 0x08C4889C
_080669E0: .4byte gEkrDistanceType
_080669E4: .4byte 0x0000FFE0

	thumb_func_start sub_080669E8
sub_080669E8: @ 0x080669E8
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	movs r6, #0
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08066A14
	movs r0, #3
	movs r1, #2
	movs r2, #3
	bl sub_08066F80
	ldr r0, _08066ACC @ =0x00000147
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x78
	movs r3, #0
	bl PlaySFX
_08066A14:
	ldrh r0, [r5, #0x2c]
	cmp r0, #0x23
	bne _08066A32
	movs r0, #3
	movs r1, #2
	movs r2, #3
	bl sub_08066F80
	ldr r0, _08066ACC @ =0x00000147
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x78
	movs r3, #0
	bl PlaySFX
_08066A32:
	ldrh r1, [r5, #0x2c]
	cmp r1, #0x32
	bne _08066A50
	movs r0, #3
	movs r1, #2
	movs r2, #3
	bl sub_08066F80
	ldr r0, _08066ACC @ =0x00000147
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x78
	movs r3, #0
	bl PlaySFX
_08066A50:
	ldrh r2, [r5, #0x2c]
	cmp r2, #0x36
	bne _08066AAE
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	bl sub_08055034
	movs r4, #0x80
	lsls r4, r4, #1
	strh r4, [r5, #0x3a]
	strh r6, [r5, #0x3c]
	ldr r0, [r5, #0x5c]
	bl sub_0806603C
	str r0, [r5, #0x64]
	ldr r1, [r5, #0x5c]
	ldrh r1, [r1, #2]
	subs r1, #0x16
	strh r1, [r0, #0x32]
	ldr r1, [r5, #0x64]
	ldr r0, [r5, #0x5c]
	ldrh r0, [r0, #4]
	ldrh r2, [r5, #0x3a]
	subs r0, r0, r2
	adds r0, #0xd8
	strh r0, [r1, #0x3a]
	ldr r0, _08066AD0 @ =0x082E6E8C
	ldr r1, _08066AD4 @ =gEkrTsaBuffer
	bl LZ77UnCompWram
	ldr r0, _08066AD8 @ =0x001F001F
	bl sub_08050F94
	ldr r0, _08066ADC @ =gBg3Tm
	movs r1, #0x1f
	bl TmFill
	movs r1, #0x32
	ldrsh r0, [r5, r1]
	movs r1, #0xf0
	bl sub_080668B8
	movs r0, #0
	adds r1, r4, #0
	bl sub_08066950
_08066AAE:
	ldrh r2, [r5, #0x2c]
	cmp r2, #0x64
	bne _08066AC4
	strh r6, [r5, #0x2c]
	movs r0, #0xc0
	lsls r0, r0, #1
	strh r0, [r5, #0x2e]
	strh r6, [r5, #0x30]
	adds r0, r5, #0
	bl Proc_Break
_08066AC4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08066ACC: .4byte 0x00000147
_08066AD0: .4byte 0x082E6E8C
_08066AD4: .4byte gEkrTsaBuffer
_08066AD8: .4byte 0x001F001F
_08066ADC: .4byte gBg3Tm

	thumb_func_start sub_08066AE0
sub_08066AE0: @ 0x08066AE0
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0x3a
	ldrsh r1, [r4, r0]
	movs r3, #0x3c
	ldrsh r2, [r4, r3]
	movs r5, #0x2c
	ldrsh r3, [r4, r5]
	movs r6, #0x2e
	ldrsh r0, [r4, r6]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	adds r1, r0, #0
	ldr r2, [r4, #0x64]
	ldr r0, [r4, #0x5c]
	ldrh r0, [r0, #2]
	subs r0, #0x16
	movs r7, #0
	strh r0, [r2, #0x32]
	ldr r2, [r4, #0x64]
	ldr r0, [r4, #0x5c]
	ldrh r0, [r0, #4]
	subs r0, r0, r1
	adds r0, #0xd8
	strh r0, [r2, #0x3a]
	ldr r2, [r4, #0x64]
	ldr r5, _08066C9C @ =0x02017760
	ldrh r3, [r2, #0x32]
	ldrh r6, [r5]
	subs r0, r3, r6
	strh r0, [r2, #0x32]
	ldr r2, [r4, #0x64]
	ldrh r3, [r2, #0x3a]
	ldrh r6, [r5, #2]
	subs r0, r3, r6
	strh r0, [r2, #0x3a]
	movs r2, #0
	ldrsh r0, [r5, r2]
	movs r3, #2
	ldrsh r2, [r5, r3]
	adds r1, r1, r2
	bl sub_08066950
	ldrh r1, [r5]
	ldrh r2, [r5, #2]
	movs r0, #2
	bl SetBgOffset
	ldr r6, _08066CA0 @ =0x02000038
	ldrh r0, [r5]
	ldrh r2, [r6]
	adds r1, r0, r2
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldrh r3, [r5, #2]
	ldrh r0, [r6, #2]
	adds r2, r3, r0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #0
	bl SetBgOffset
	ldrh r1, [r5]
	ldrh r2, [r6]
	adds r0, r1, r2
	rsbs r0, r0, #0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldrh r3, [r5, #2]
	ldrh r2, [r6, #2]
	adds r1, r3, r2
	rsbs r1, r1, #0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sub_0804CC8C
	ldrh r3, [r5]
	ldrh r1, [r6]
	adds r0, r3, r1
	rsbs r0, r0, #0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r2, [r5, #2]
	ldrh r3, [r6, #2]
	adds r1, r2, r3
	rsbs r1, r1, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	bl sub_0804D5D8
	ldrh r1, [r4, #0x2c]
	adds r1, #1
	strh r1, [r4, #0x2c]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r2, #0x2e
	ldrsh r0, [r4, r2]
	adds r0, #1
	cmp r1, r0
	bne _08066BB2
	ldrh r0, [r4, #0x2e]
	strh r0, [r4, #0x2c]
_08066BB2:
	ldrh r0, [r4, #0x30]
	adds r0, #1
	strh r0, [r4, #0x30]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08066BD8
	movs r0, #8
	movs r1, #0
	bl sub_0804EF18
	str r0, [r4, #0x54]
	ldr r0, _08066CA4 @ =0x000002F3
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x78
	movs r3, #0
	bl PlaySFX
_08066BD8:
	ldrh r3, [r4, #0x30]
	cmp r3, #0x3c
	bne _08066BEE
	ldr r0, [r4, #0x54]
	bl Proc_End
	movs r0, #9
	movs r1, #0
	bl sub_0804EF18
	str r0, [r4, #0x54]
_08066BEE:
	ldrh r0, [r4, #0x30]
	cmp r0, #0x5a
	bne _08066C04
	ldr r0, [r4, #0x54]
	bl Proc_End
	movs r0, #0xa
	movs r1, #0
	bl sub_0804EF18
	str r0, [r4, #0x54]
_08066C04:
	ldrh r1, [r4, #0x30]
	cmp r1, #0x87
	bne _08066C14
	movs r0, #0x3c
	movs r1, #0x1e
	movs r2, #0x78
	bl sub_08066F80
_08066C14:
	ldrh r2, [r4, #0x30]
	cmp r2, #0xc8
	bne _08066C7A
	ldrh r0, [r4, #0x2e]
	strh r0, [r4, #0x2c]
	ldr r0, [r4, #0x64]
	bl Proc_End
	ldr r0, [r4, #0x54]
	bl Proc_End
	strh r7, [r5]
	strh r7, [r5, #2]
	movs r3, #0x3c
	ldrsh r1, [r4, r3]
	movs r0, #0
	bl sub_08066950
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldrh r1, [r6]
	ldrh r2, [r6, #2]
	movs r0, #0
	bl SetBgOffset
	ldrh r5, [r6]
	rsbs r0, r5, #0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldrh r2, [r6, #2]
	rsbs r1, r2, #0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sub_0804CC8C
	ldrh r3, [r6]
	rsbs r0, r3, #0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r6, [r6, #2]
	rsbs r1, r6, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	bl sub_0804D5D8
	movs r0, #0x10
	bl sub_08065510
_08066C7A:
	movs r0, #0xc8
	lsls r0, r0, #1
	ldrh r5, [r4, #0x30]
	cmp r5, r0
	bne _08066C92
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08066C92:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08066C9C: .4byte 0x02017760
_08066CA0: .4byte 0x02000038
_08066CA4: .4byte 0x000002F3

	thumb_func_start nullsub_56
nullsub_56: @ 0x08066CA8
	bx lr
	.align 2, 0

	thumb_func_start sub_08066CAC
sub_08066CAC: @ 0x08066CAC
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _08066D18 @ =0x08C488C4
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	str r1, [r0, #0x44]
	ldr r0, _08066D1C @ =0x082E9DD8
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, _08066D20 @ =0x082EA7C8
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_ClearBG1
	ldr r0, _08066D24 @ =0x082EA7E8
	ldr r4, _08066D28 @ =gEkrTsaBuffer
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r1, _08066D2C @ =gBg1Tm
	movs r0, #1
	str r0, [sp]
	adds r0, #0xff
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0x20
	movs r3, #0x20
	bl sub_080672E8
	movs r0, #2
	bl EnableBgSync
	bl SpellFx_SetSomeColorEffect
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08066D18: .4byte 0x08C488C4
_08066D1C: .4byte 0x082E9DD8
_08066D20: .4byte 0x082EA7C8
_08066D24: .4byte 0x082EA7E8
_08066D28: .4byte gEkrTsaBuffer
_08066D2C: .4byte gBg1Tm

	thumb_func_start sub_08066D30
sub_08066D30: @ 0x08066D30
	push {lr}
	bl SpellFx_ClearBG1
	bl SpellFx_ClearColorEffects
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08066D40
sub_08066D40: @ 0x08066D40
	push {r4, lr}
	sub sp, #8
	adds r2, r0, #0
	ldr r0, [r2, #0x44]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r0, r1
	str r0, [r2, #0x44]
	ldr r1, _08066D80 @ =gDispIo
	asrs r0, r0, #8
	movs r3, #0
	strh r0, [r1, #0x20]
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #1
	beq _08066D98
	movs r4, #0x2e
	ldrsh r0, [r2, r4]
	cmp r1, r0
	bne _08066D84
	ldr r0, [r2, #0x5c]
	str r3, [sp]
	str r3, [sp, #4]
	movs r1, #0
	movs r2, #0x1e
	movs r3, #0x10
	bl sub_080566F0
	b _08066D98
	.align 2, 0
_08066D80: .4byte gDispIo
_08066D84:
	movs r0, #0x2c
	ldrsh r1, [r2, r0]
	movs r3, #0x2e
	ldrsh r0, [r2, r3]
	adds r0, #0x1e
	cmp r1, r0
	bne _08066D98
	adds r0, r2, #0
	bl Proc_Break
_08066D98:
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_08066DA0
sub_08066DA0: @ 0x08066DA0
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r6, r0, #0
	mov r8, r1
	adds r5, r2, #0
	ldr r0, _08066DD4 @ =0x08C488E4
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r6, [r4, #0x5c]
	adds r0, r5, #0
	movs r1, #0
	bl sub_0804EF18
	str r0, [r4, #0x60]
	movs r0, #0
	strh r0, [r4, #0x2c]
	mov r0, r8
	strh r0, [r4, #0x2e]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08066DD4: .4byte 0x08C488E4

	thumb_func_start sub_08066DD8
sub_08066DD8: @ 0x08066DD8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov sb, r0
	ldr r0, [r0, #0x5c]
	str r0, [sp]
	ldr r4, _08066F6C @ =0x02017760
	ldrh r1, [r4]
	ldrh r2, [r4, #2]
	movs r0, #2
	bl SetBgOffset
	ldr r7, _08066F70 @ =0x02000038
	ldrh r2, [r4]
	ldrh r3, [r7]
	adds r1, r2, r3
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldrh r6, [r4, #2]
	ldrh r0, [r7, #2]
	adds r2, r6, r0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #0
	bl SetBgOffset
	ldrh r1, [r4]
	ldrh r2, [r7]
	adds r0, r1, r2
	rsbs r0, r0, #0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldrh r3, [r4, #2]
	ldrh r6, [r7, #2]
	adds r1, r3, r6
	rsbs r1, r1, #0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sub_0804CC8C
	ldrh r1, [r4]
	ldrh r2, [r7]
	adds r0, r1, r2
	rsbs r0, r0, #0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r3, [r4, #2]
	ldrh r6, [r7, #2]
	adds r1, r3, r6
	rsbs r1, r1, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	bl sub_0804D5D8
	ldrh r1, [r4]
	ldrh r2, [r4, #2]
	movs r0, #3
	bl SetBgOffset
	ldrh r5, [r4]
	ldr r0, _08066F74 @ =0x02000028
	ldrh r0, [r0]
	subs r1, r0, r5
	ldr r2, _08066F78 @ =0x0201FB00
	ldr r0, [r2]
	subs r1, r1, r0
	lsls r1, r1, #0x10
	ldr r3, _08066F7C @ =0x0200002C
	mov sl, r3
	ldrh r4, [r4, #2]
	ldrh r6, [r3]
	subs r2, r6, r4
	lsls r2, r2, #0x10
	ldr r3, _08066F74 @ =0x02000028
	ldrh r3, [r3, #2]
	adds r5, r5, r3
	subs r5, r5, r0
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	mov r6, sl
	ldrh r6, [r6, #2]
	subs r4, r6, r4
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	lsrs r0, r1, #0x10
	mov r8, r0
	asrs r1, r1, #0x10
	lsrs r6, r2, #0x10
	asrs r2, r2, #0x10
	movs r0, #0
	bl sub_08050FB4
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	movs r0, #1
	adds r1, r5, #0
	adds r2, r4, #0
	bl sub_08050FB4
	mov r2, r8
	ldr r1, [sp]
	strh r2, [r1, #0x32]
	strh r6, [r1, #0x3a]
	mov r3, sb
	ldrh r0, [r3, #0x2c]
	adds r0, #1
	strh r0, [r3, #0x2c]
	lsls r0, r0, #0x10
	ldrh r6, [r3, #0x2e]
	lsls r1, r6, #0x10
	cmp r0, r1
	ble _08066F5C
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldrh r1, [r7]
	ldrh r2, [r7, #2]
	movs r0, #0
	bl SetBgOffset
	ldrh r1, [r7]
	rsbs r0, r1, #0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldrh r2, [r7, #2]
	rsbs r1, r2, #0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sub_0804CC8C
	ldrh r3, [r7]
	rsbs r0, r3, #0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r7, [r7, #2]
	rsbs r1, r7, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	bl sub_0804D5D8
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r6, _08066F78 @ =0x0201FB00
	ldr r4, [r6]
	ldr r0, _08066F74 @ =0x02000028
	ldrh r0, [r0]
	subs r1, r0, r4
	lsls r1, r1, #0x10
	ldr r2, _08066F74 @ =0x02000028
	ldrh r2, [r2, #2]
	subs r4, r2, r4
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	mov r3, sl
	ldrh r5, [r3, #2]
	lsrs r6, r1, #0x10
	mov r8, r6
	asrs r1, r1, #0x10
	ldrh r6, [r3]
	movs r0, #0
	ldrsh r2, [r3, r0]
	movs r0, #0
	bl sub_08050FB4
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r0, #1
	adds r1, r4, #0
	adds r2, r5, #0
	bl sub_08050FB4
	mov r2, r8
	ldr r1, [sp]
	strh r2, [r1, #0x32]
	strh r6, [r1, #0x3a]
	mov r3, sb
	ldr r0, [r3, #0x60]
	bl Proc_End
	mov r0, sb
	bl Proc_Break
_08066F5C:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08066F6C: .4byte 0x02017760
_08066F70: .4byte 0x02000038
_08066F74: .4byte 0x02000028
_08066F78: .4byte 0x0201FB00
_08066F7C: .4byte 0x0200002C

	thumb_func_start sub_08066F80
sub_08066F80: @ 0x08066F80
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	ldr r0, _08066FB8 @ =0x08C488FC
	movs r1, #0
	bl Proc_Start
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r4, [r0, #0x44]
	str r5, [r0, #0x48]
	str r6, [r0, #0x4c]
	ldr r2, _08066FBC @ =gDispIo
	adds r3, r2, #0
	adds r3, #0x3c
	subs r1, #0x21
	adds r0, r1, #0
	ldrb r4, [r3]
	ands r0, r4
	strb r0, [r3]
	adds r2, #0x3d
	ldrb r0, [r2]
	ands r1, r0
	strb r1, [r2]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08066FB8: .4byte 0x08C488FC
_08066FBC: .4byte gDispIo

	thumb_func_start sub_08066FC0
sub_08066FC0: @ 0x08066FC0
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r7, r0]
	ldr r0, [r7, #0x44]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	adds r6, r0, #0
	ldr r0, _08067028 @ =gPal
	ldr r4, _0806702C @ =0x020165C8
	movs r5, #0x80
	lsls r5, r5, #1
	adds r1, r4, #0
	adds r2, r5, #0
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x20
	adds r3, r6, #0
	bl sub_08067750
	movs r1, #0xa0
	lsls r1, r1, #0x13
	adds r0, r4, #0
	adds r2, r5, #0
	bl CpuFastSet
	bl DisablePalSync
	ldrh r0, [r7, #0x2c]
	adds r0, #1
	strh r0, [r7, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r7, #0x44]
	cmp r0, r1
	ble _08067020
	movs r0, #0
	strh r0, [r7, #0x2c]
	adds r0, r7, #0
	bl Proc_Break
_08067020:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08067028: .4byte gPal
_0806702C: .4byte 0x020165C8

	thumb_func_start sub_08067030
sub_08067030: @ 0x08067030
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, _08067080 @ =gPal
	ldr r4, _08067084 @ =0x020165C8
	movs r5, #0x80
	lsls r5, r5, #1
	adds r1, r4, #0
	adds r2, r5, #0
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x20
	movs r3, #0x10
	bl sub_08067750
	movs r1, #0xa0
	lsls r1, r1, #0x13
	adds r0, r4, #0
	adds r2, r5, #0
	bl CpuFastSet
	bl DisablePalSync
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r6, #0x48]
	cmp r0, r1
	ble _0806707A
	movs r0, #0
	strh r0, [r6, #0x2c]
	adds r0, r6, #0
	bl Proc_Break
_0806707A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08067080: .4byte gPal
_08067084: .4byte 0x020165C8

	thumb_func_start sub_08067088
sub_08067088: @ 0x08067088
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r7, r0]
	ldr r0, [r7, #0x4c]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	adds r6, r0, #0
	ldr r0, _080670F0 @ =gPal
	ldr r4, _080670F4 @ =0x020165C8
	movs r5, #0x80
	lsls r5, r5, #1
	adds r1, r4, #0
	adds r2, r5, #0
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x20
	adds r3, r6, #0
	bl sub_08067750
	movs r1, #0xa0
	lsls r1, r1, #0x13
	adds r0, r4, #0
	adds r2, r5, #0
	bl CpuFastSet
	bl DisablePalSync
	ldrh r0, [r7, #0x2c]
	adds r0, #1
	strh r0, [r7, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r7, #0x4c]
	cmp r0, r1
	ble _080670E8
	movs r0, #0
	strh r0, [r7, #0x2c]
	adds r0, r7, #0
	bl Proc_Break
_080670E8:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080670F0: .4byte gPal
_080670F4: .4byte 0x020165C8

	thumb_func_start sub_080670F8
sub_080670F8: @ 0x080670F8
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, _08067124 @ =gDispIo
	adds r3, r2, #0
	adds r3, #0x3c
	movs r0, #0x20
	ldrb r1, [r3]
	orrs r1, r0
	strb r1, [r3]
	adds r2, #0x3d
	ldrb r1, [r2]
	orrs r0, r1
	strb r0, [r2]
	bl EnablePalSync
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08067124: .4byte gDispIo

	thumb_func_start sub_08067128
sub_08067128: @ 0x08067128
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r6, r3, #0
	ldr r3, [sp, #0x1c]
	mov r8, r3
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov ip, r1
	lsls r2, r2, #0x10
	adds r1, r0, #0
	lsrs r2, r2, #0x10
	cmp r2, #0
	beq _0806718E
	movs r0, #0x20
	mov r3, ip
	subs r0, r0, r3
	lsls r0, r0, #0x10
	mov sb, r0
_08067150:
	mov r3, ip
	subs r5, r2, #1
	cmp r3, #0
	beq _08067182
	movs r2, #1
	rsbs r2, r2, #0
	ldr r7, _0806719C @ =0x00000FFF
	lsls r4, r6, #0xc
_08067160:
	ldrh r0, [r1]
	cmp r6, r2
	beq _0806716E
	ands r0, r7
	adds r0, r0, r4
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
_0806716E:
	cmp r8, r2
	beq _08067178
	add r0, r8
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
_08067178:
	strh r0, [r1]
	adds r1, #2
	subs r3, #1
	cmp r3, #0
	bne _08067160
_08067182:
	mov r2, sb
	lsrs r0, r2, #0xf
	adds r1, r1, r0
	adds r2, r5, #0
	cmp r2, #0
	bne _08067150
_0806718E:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806719C: .4byte 0x00000FFF

	thumb_func_start sub_080671A0
sub_080671A0: @ 0x080671A0
	push {r4, r5, r6, r7, lr}
	adds r5, r3, #0
	ldr r7, [sp, #0x14]
	lsls r1, r1, #0x10
	lsrs r4, r1, #0x10
	lsls r2, r2, #0x10
	adds r3, r0, #0
	lsrs r2, r2, #0x10
	cmp r2, #0
	beq _080671D8
	movs r0, #0x20
	subs r0, r0, r4
	lsls r0, r0, #0x10
	lsrs r6, r0, #0xf
	lsls r5, r5, #0xc
_080671BE:
	adds r0, r4, #0
	subs r2, #1
	cmp r0, #0
	beq _080671D2
	adds r1, r7, r5
_080671C8:
	strh r1, [r3]
	adds r3, #2
	subs r0, #1
	cmp r0, #0
	bne _080671C8
_080671D2:
	adds r3, r3, r6
	cmp r2, #0
	bne _080671BE
_080671D8:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080671E0
sub_080671E0: @ 0x080671E0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r3, #0
	ldr r3, [sp, #0x18]
	mov ip, r3
	lsls r1, r1, #0x10
	lsrs r7, r1, #0x10
	lsls r2, r2, #0x10
	adds r1, r0, #0
	lsrs r2, r2, #0x10
	cmp r2, #0
	beq _0806723C
	movs r0, #0x20
	subs r0, r0, r7
	lsls r0, r0, #0x10
	mov r8, r0
_08067202:
	adds r3, r7, #0
	subs r5, r2, #1
	cmp r3, #0
	beq _08067230
	movs r2, #1
	rsbs r2, r2, #0
	lsls r4, r6, #0xc
_08067210:
	ldrh r0, [r1]
	cmp r6, r2
	beq _0806721C
	adds r0, r0, r4
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
_0806721C:
	cmp ip, r2
	beq _08067226
	add r0, ip
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
_08067226:
	strh r0, [r1]
	adds r1, #2
	subs r3, #1
	cmp r3, #0
	bne _08067210
_08067230:
	mov r2, r8
	lsrs r0, r2, #0xf
	adds r1, r1, r0
	adds r2, r5, #0
	cmp r2, #0
	bne _08067202
_0806723C:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08067248
sub_08067248: @ 0x08067248
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov ip, r1
	lsls r2, r2, #0x10
	adds r3, r0, #0
	lsrs r2, r2, #0x10
	cmp r2, #0
	beq _080672A4
	movs r0, #0x20
	subs r0, r0, r1
	lsls r0, r0, #0x10
	mov r8, r0
	ldr r0, _080672B0 @ =0x08C4A288
	mov sb, r0
_0806726C:
	mov r4, ip
	subs r2, #1
	cmp r4, #0
	beq _0806729A
	ldr r7, _080672B4 @ =0x00000FFF
	mov r6, sb
	movs r5, #0xf
_0806727A:
	ldrh r0, [r3]
	adds r1, r0, #0
	lsrs r0, r0, #0xc
	ands r0, r5
	subs r0, #6
	lsls r0, r0, #0x10
	ands r1, r7
	lsrs r0, r0, #0xf
	adds r0, r0, r6
	ldrh r0, [r0]
	adds r1, r0, r1
	strh r1, [r3]
	adds r3, #2
	subs r4, #1
	cmp r4, #0
	bne _0806727A
_0806729A:
	mov r1, r8
	lsrs r0, r1, #0xf
	adds r3, r3, r0
	cmp r2, #0
	bne _0806726C
_080672A4:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080672B0: .4byte 0x08C4A288
_080672B4: .4byte 0x00000FFF

	thumb_func_start sub_080672B8
sub_080672B8: @ 0x080672B8
	push {r4, r5, r6, lr}
	sub sp, #0x10
	adds r6, r1, #0
	ldr r4, [sp, #0x20]
	ldr r5, [sp, #0x24]
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	movs r1, #1
	rsbs r1, r1, #0
	str r2, [sp]
	str r3, [sp, #4]
	str r4, [sp, #8]
	str r5, [sp, #0xc]
	adds r2, r6, #0
	movs r3, #0x20
	bl sub_08067318
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080672E8
sub_080672E8: @ 0x080672E8
	push {r4, r5, r6, lr}
	sub sp, #0x10
	adds r6, r1, #0
	ldr r4, [sp, #0x20]
	ldr r5, [sp, #0x24]
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	movs r1, #1
	rsbs r1, r1, #0
	str r2, [sp]
	str r3, [sp, #4]
	str r4, [sp, #8]
	str r5, [sp, #0xc]
	adds r2, r6, #0
	movs r3, #0x20
	bl sub_080673C8
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08067318
sub_08067318: @ 0x08067318
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r5, r0, #0
	adds r4, r2, #0
	ldr r0, [sp, #0x28]
	ldr r2, [sp, #0x2c]
	ldr r6, [sp, #0x30]
	mov r8, r6
	ldr r6, [sp, #0x34]
	mov ip, r6
	lsls r1, r1, #0x10
	lsrs r6, r1, #0x10
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	cmp r2, #0
	beq _080673B4
	lsls r0, r6, #0x10
	lsls r1, r3, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	asrs r1, r1, #0x10
	str r1, [sp, #4]
	subs r0, r6, r7
	lsls r0, r0, #0x10
	mov sl, r0
	subs r0, r3, r7
	lsls r0, r0, #0x10
	mov sb, r0
_08067360:
	adds r1, r7, #0
	subs r6, r2, #1
	cmp r1, #0
	beq _08067392
	movs r2, #1
	rsbs r2, r2, #0
	mov r0, r8
	lsls r3, r0, #0xc
_08067370:
	ldrh r0, [r5]
	cmp r8, r2
	beq _0806737C
	adds r0, r0, r3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
_0806737C:
	cmp ip, r2
	beq _08067386
	add r0, ip
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
_08067386:
	strh r0, [r4]
	adds r5, #2
	adds r4, #2
	subs r1, #1
	cmp r1, #0
	bne _08067370
_08067392:
	ldr r2, _080673C4 @ =0xFFFF0000
	asrs r1, r2, #0x10
	ldr r0, [sp]
	cmp r0, r1
	beq _080673A2
	mov r2, sl
	lsrs r0, r2, #0xf
	adds r5, r5, r0
_080673A2:
	ldr r0, [sp, #4]
	cmp r0, r1
	beq _080673AE
	mov r1, sb
	lsrs r0, r1, #0xf
	adds r4, r4, r0
_080673AE:
	adds r2, r6, #0
	cmp r2, #0
	bne _08067360
_080673B4:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080673C4: .4byte 0xFFFF0000

	thumb_func_start sub_080673C8
sub_080673C8: @ 0x080673C8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r5, r0, #0
	adds r4, r2, #0
	ldr r0, [sp, #0x2c]
	ldr r2, [sp, #0x30]
	ldr r6, [sp, #0x34]
	mov sb, r6
	ldr r6, [sp, #0x38]
	mov r8, r6
	lsls r1, r1, #0x10
	lsrs r6, r1, #0x10
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov ip, r0
	lsls r2, r2, #0x10
	lsls r0, r0, #1
	subs r0, #2
	adds r4, r4, r0
	lsrs r2, r2, #0x10
	cmp r2, #0
	beq _08067476
	lsls r0, r6, #0x10
	lsls r1, r3, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	asrs r1, r1, #0x10
	str r1, [sp, #8]
	mov r1, ip
	subs r0, r6, r1
	lsls r0, r0, #0x10
	str r0, [sp, #4]
	adds r0, r1, r3
	lsls r0, r0, #0x10
	mov sl, r0
_0806741A:
	mov r1, ip
	subs r7, r2, #1
	cmp r1, #0
	beq _08067454
	movs r2, #1
	rsbs r2, r2, #0
	mov r6, sb
	lsls r3, r6, #0xc
	movs r0, #0x80
	lsls r0, r0, #3
	adds r6, r0, #0
_08067430:
	ldrh r0, [r5]
	cmp sb, r2
	beq _0806743C
	adds r0, r0, r3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
_0806743C:
	cmp r8, r2
	beq _08067446
	add r0, r8
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
_08067446:
	eors r0, r6
	strh r0, [r4]
	adds r5, #2
	subs r4, #2
	subs r1, #1
	cmp r1, #0
	bne _08067430
_08067454:
	ldr r2, _08067488 @ =0xFFFF0000
	asrs r1, r2, #0x10
	ldr r6, [sp]
	cmp r6, r1
	beq _08067464
	ldr r2, [sp, #4]
	lsrs r0, r2, #0xf
	adds r5, r5, r0
_08067464:
	ldr r6, [sp, #8]
	cmp r6, r1
	beq _08067470
	mov r1, sl
	lsrs r0, r1, #0xf
	adds r4, r4, r0
_08067470:
	adds r2, r7, #0
	cmp r2, #0
	bne _0806741A
_08067476:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08067488: .4byte 0xFFFF0000

	thumb_func_start sub_0806748C
sub_0806748C: @ 0x0806748C
	push {r4, r5, r6, r7, lr}
	adds r3, r0, #0
	adds r6, r1, #0
	adds r7, r2, #0
	movs r0, #0
	mov ip, r0
	cmp r7, #0
	beq _0806755C
	movs r2, #0
_0806749E:
	cmp r7, r2
	bgt _080674B4
	mov r1, ip
	cmp r1, #0
	bne _080674B0
	movs r0, #1
	mov ip, r0
	movs r0, #0xe
	b _08067514
_080674B0:
	movs r0, #0xff
	b _08067514
_080674B4:
	adds r0, r2, #1
	cmp r7, r0
	bne _080674D0
	movs r1, #1
	mov ip, r1
	cmp r6, r2
	bgt _080674C6
	movs r0, #0xd
	b _08067514
_080674C6:
	adds r1, r2, #4
	cmp r6, r0
	bne _08067556
	movs r0, #0xc
	b _08067552
_080674D0:
	adds r4, r2, #2
	cmp r7, r4
	bne _080674F4
	movs r1, #1
	mov ip, r1
	cmp r6, r2
	bgt _080674E2
	movs r0, #0xb
	b _08067514
_080674E2:
	cmp r6, r0
	bne _080674EA
	movs r0, #0xa
	b _08067514
_080674EA:
	adds r1, r2, #4
	cmp r6, r4
	bne _08067556
	movs r0, #9
	b _08067552
_080674F4:
	adds r5, r2, #3
	cmp r7, r5
	bne _08067526
	movs r1, #1
	mov ip, r1
	cmp r6, r2
	bgt _08067506
	movs r0, #8
	b _08067514
_08067506:
	cmp r6, r0
	bne _0806750E
	movs r0, #7
	b _08067514
_0806750E:
	cmp r6, r4
	bne _0806751C
	movs r0, #6
_08067514:
	strh r0, [r3]
	adds r3, #2
	adds r1, r2, #4
	b _08067556
_0806751C:
	adds r1, r2, #4
	cmp r6, r5
	bne _08067556
	movs r0, #5
	b _08067552
_08067526:
	adds r1, r2, #4
	cmp r7, r1
	blt _08067556
	cmp r6, r2
	bgt _08067534
	movs r0, #4
	b _08067552
_08067534:
	cmp r6, r0
	bne _0806753C
	movs r0, #3
	b _08067552
_0806753C:
	cmp r6, r4
	bne _08067544
	movs r0, #2
	b _08067552
_08067544:
	cmp r6, r5
	bne _0806754C
	movs r0, #1
	b _08067552
_0806754C:
	cmp r6, r1
	blt _08067556
	movs r0, #0
_08067552:
	strh r0, [r3]
	adds r3, #2
_08067556:
	adds r2, r1, #0
	cmp r2, #0x28
	ble _0806749E
_0806755C:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08067564
sub_08067564: @ 0x08067564
	push {r4, r5, r6, r7, lr}
	adds r2, r0, #0
	adds r3, r1, #0
	cmp r3, #5
	ble _08067572
	movs r0, #6
	b _0806757A
_08067572:
	ldr r0, _08067594 @ =0x082EB740
	lsls r1, r3, #1
	adds r1, r1, r0
	ldrh r0, [r1]
_0806757A:
	strh r0, [r2]
	adds r2, #2
	movs r1, #0
	movs r7, #0x10
	ldr r6, _08067598 @ =0x082EB74E
	subs r4, r3, #6
	movs r5, #7
_08067588:
	adds r0, r1, #0
	adds r0, #0xe
	cmp r3, r0
	blt _0806759C
	strh r7, [r2]
	b _080675B0
	.align 2, 0
_08067594: .4byte 0x082EB740
_08067598: .4byte 0x082EB74E
_0806759C:
	adds r0, r1, #6
	cmp r3, r0
	blt _080675AE
	subs r0, r4, r1
	lsls r0, r0, #1
	adds r0, r0, r6
	ldrh r0, [r0]
	strh r0, [r2]
	b _080675B0
_080675AE:
	strh r5, [r2]
_080675B0:
	adds r2, #2
	adds r1, #8
	cmp r1, #0x57
	ble _08067588
	cmp r3, #0x62
	ble _080675C0
	movs r0, #0x17
	b _080675DA
_080675C0:
	cmp r3, #0x5d
	ble _080675D8
	ldr r0, _080675D4 @ =0x082EB760
	adds r1, r3, #0
	subs r1, #0x5e
	lsls r1, r1, #1
	adds r1, r1, r0
	ldrh r0, [r1]
	b _080675DA
	.align 2, 0
_080675D4: .4byte 0x082EB760
_080675D8:
	movs r0, #0x11
_080675DA:
	strh r0, [r2]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080675E4
sub_080675E4: @ 0x080675E4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	str r0, [sp, #4]
	str r1, [sp, #8]
	str r2, [sp, #0xc]
	ldr r0, [sp, #0x3c]
	ldr r1, [sp, #0x40]
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp, #0x10]
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	str r1, [sp, #0x14]
	cmp r3, #0
	beq _080676B4
	str r3, [sp, #0x18]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	mov sl, r0
	lsls r0, r1, #0x10
	asrs r7, r0, #0x10
_0806761A:
	ldr r1, [sp, #4]
	ldrh r0, [r1]
	movs r1, #0x1f
	ands r1, r0
	movs r6, #0xf8
	lsls r6, r6, #2
	ands r6, r0
	movs r2, #0xf8
	lsls r2, r2, #7
	mov sb, r2
	mov r3, sb
	ands r3, r0
	mov sb, r3
	ldr r2, [sp, #8]
	ldrh r0, [r2]
	movs r2, #0x1f
	ands r2, r0
	movs r4, #0xf8
	lsls r4, r4, #2
	ands r4, r0
	movs r3, #0xf8
	lsls r3, r3, #7
	mov r8, r3
	ands r3, r0
	mov r8, r3
	str r7, [sp]
	movs r0, #0
	mov r3, sl
	bl Interpolate
	adds r5, r0, #0
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	str r7, [sp]
	movs r0, #0
	adds r1, r6, #0
	adds r2, r4, #0
	mov r3, sl
	bl Interpolate
	adds r4, r0, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	str r7, [sp]
	movs r0, #0
	mov r1, sb
	mov r2, r8
	mov r3, sl
	bl Interpolate
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	movs r1, #0xf8
	lsls r1, r1, #7
	ands r0, r1
	movs r2, #0xf8
	lsls r2, r2, #2
	ands r4, r2
	orrs r0, r4
	movs r3, #0x1f
	ands r5, r3
	orrs r0, r5
	ldr r1, [sp, #0xc]
	strh r0, [r1]
	ldr r2, [sp, #4]
	adds r2, #2
	str r2, [sp, #4]
	ldr r3, [sp, #8]
	adds r3, #2
	str r3, [sp, #8]
	adds r1, #2
	str r1, [sp, #0xc]
	ldr r0, [sp, #0x18]
	subs r0, #1
	str r0, [sp, #0x18]
	cmp r0, #0
	bne _0806761A
_080676B4:
	ldr r1, [sp, #0x10]
	ldr r2, [sp, #0x14]
	cmp r1, r2
	beq _080676C0
	movs r0, #0
	b _080676C2
_080676C0:
	movs r0, #1
_080676C2:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080676D4
sub_080676D4: @ 0x080676D4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	mov sb, r0
	adds r4, r1, #0
	adds r5, r2, #0
	lsls r0, r3, #5
	movs r1, #0x10
	bl Div
	adds r6, r0, #0
	adds r0, r4, r5
	cmp r4, r0
	bge _08067744
	mov r8, r0
	movs r0, #0x1f
	mov ip, r0
_080676F8:
	lsls r0, r4, #5
	adds r7, r4, #1
	mov r1, sb
	adds r5, r1, r0
	movs r4, #0xf
_08067702:
	ldrh r1, [r5]
	movs r2, #0x1f
	ands r2, r1
	lsls r1, r1, #0x10
	lsrs r3, r1, #0x15
	mov r0, ip
	ands r3, r0
	lsrs r1, r1, #0x1a
	ands r1, r0
	adds r0, r2, #0
	muls r0, r6, r0
	asrs r0, r0, #5
	subs r2, r2, r0
	adds r0, r3, #0
	muls r0, r6, r0
	asrs r0, r0, #5
	subs r3, r3, r0
	adds r0, r1, #0
	muls r0, r6, r0
	asrs r0, r0, #5
	subs r1, r1, r0
	lsls r3, r3, #5
	orrs r2, r3
	lsls r1, r1, #0xa
	orrs r2, r1
	strh r2, [r5]
	adds r5, #2
	subs r4, #1
	cmp r4, #0
	bge _08067702
	adds r4, r7, #0
	cmp r4, r8
	blt _080676F8
_08067744:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08067750
sub_08067750: @ 0x08067750
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sl, r0
	adds r4, r1, #0
	adds r5, r2, #0
	lsls r0, r3, #5
	movs r1, #0x10
	bl Div
	adds r6, r0, #0
	adds r0, r4, r5
	cmp r4, r0
	bge _080677C6
	mov sb, r0
	movs r0, #0x1f
	mov r8, r0
	movs r7, #0x1f
_08067778:
	lsls r0, r4, #5
	adds r4, #1
	mov ip, r4
	mov r1, sl
	adds r5, r1, r0
	movs r4, #0xf
_08067784:
	ldrh r1, [r5]
	adds r2, r7, #0
	ands r2, r1
	lsls r1, r1, #0x10
	lsrs r3, r1, #0x15
	mov r0, r8
	ands r3, r0
	lsrs r1, r1, #0x1a
	ands r1, r0
	subs r0, r7, r2
	muls r0, r6, r0
	asrs r0, r0, #5
	adds r2, r2, r0
	subs r0, r7, r3
	muls r0, r6, r0
	asrs r0, r0, #5
	adds r3, r3, r0
	subs r0, r7, r1
	muls r0, r6, r0
	asrs r0, r0, #5
	adds r1, r1, r0
	lsls r3, r3, #5
	orrs r2, r3
	lsls r1, r1, #0xa
	orrs r2, r1
	strh r2, [r5]
	adds r5, #2
	subs r4, #1
	cmp r4, #0
	bge _08067784
	mov r4, ip
	cmp r4, sb
	blt _08067778
_080677C6:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080677D4
sub_080677D4: @ 0x080677D4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	str r0, [sp]
	adds r6, r1, #0
	mov r8, r2
	adds r0, r3, #0
	ldr r4, [sp, #0x2c]
	ldr r5, [sp, #0x30]
	lsls r0, r0, #5
	movs r1, #0x10
	bl Div
	mov sl, r0
	lsls r4, r4, #5
	adds r0, r4, #0
	movs r1, #0x10
	bl Div
	mov sb, r0
	lsls r5, r5, #5
	adds r0, r5, #0
	movs r1, #0x10
	bl Div
	mov ip, r0
	mov r1, r8
	adds r0, r6, r1
	cmp r6, r0
	bge _0806787A
	str r0, [sp, #4]
	movs r0, #0x1f
	mov r8, r0
	movs r7, #0x1f
_0806781E:
	lsls r0, r6, #5
	adds r6, #1
	str r6, [sp, #8]
	ldr r1, [sp]
	adds r4, r1, r0
	movs r5, #0xf
_0806782A:
	ldrh r1, [r4]
	adds r2, r7, #0
	ands r2, r1
	lsls r1, r1, #0x10
	lsrs r3, r1, #0x15
	mov r6, r8
	ands r3, r6
	lsrs r1, r1, #0x1a
	ands r1, r6
	subs r0, r7, r2
	mov r6, sl
	muls r6, r0, r6
	adds r0, r6, #0
	asrs r0, r0, #5
	adds r2, r2, r0
	subs r0, r7, r3
	mov r6, sb
	muls r6, r0, r6
	adds r0, r6, #0
	asrs r0, r0, #5
	adds r3, r3, r0
	subs r0, r7, r1
	mov r6, ip
	muls r6, r0, r6
	adds r0, r6, #0
	asrs r0, r0, #5
	adds r1, r1, r0
	lsls r3, r3, #5
	orrs r2, r3
	lsls r1, r1, #0xa
	orrs r2, r1
	strh r2, [r4]
	adds r4, #2
	subs r5, #1
	cmp r5, #0
	bge _0806782A
	ldr r6, [sp, #8]
	ldr r0, [sp, #4]
	cmp r6, r0
	blt _0806781E
_0806787A:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806788C
sub_0806788C: @ 0x0806788C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sb, r0
	adds r0, r1, r2
	cmp r1, r0
	bge _080678F2
	mov sl, r0
	movs r0, #0x1f
	mov r8, r0
_080678A4:
	movs r5, #0
	lsls r6, r1, #5
	adds r7, r1, #1
_080678AA:
	mov r1, sb
	adds r4, r1, r6
	lsls r0, r5, #1
	adds r4, r4, r0
	ldrh r2, [r4]
	movs r0, #0x1f
	ands r0, r2
	lsls r2, r2, #0x10
	lsrs r3, r2, #0x15
	mov r1, r8
	ands r3, r1
	lsrs r2, r2, #0x1a
	ands r2, r1
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r0, r3, #1
	adds r0, r0, r3
	lsls r0, r0, #1
	adds r1, r1, r0
	adds r1, r1, r2
	adds r0, r1, #0
	movs r1, #0xa
	bl Div
	adds r1, r0, #0
	lsls r0, r1, #5
	orrs r0, r1
	lsls r1, r1, #0xa
	orrs r0, r1
	strh r0, [r4]
	adds r5, #1
	cmp r5, #0xf
	ble _080678AA
	adds r1, r7, #0
	cmp r1, sl
	blt _080678A4
_080678F2:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08067900
sub_08067900: @ 0x08067900
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r3, r1, #0
	adds r6, r2, #0
	movs r5, #0
	cmp r5, r6
	bhs _08067938
	movs r7, #0x1f
	movs r0, #0x1f
	mov ip, r0
_08067914:
	ldrh r0, [r4]
	adds r4, #2
	adds r1, r0, #0
	mov r2, ip
	ands r1, r2
	lsrs r2, r0, #5
	ands r2, r7
	lsrs r0, r0, #0xa
	ands r0, r7
	strb r1, [r3]
	adds r3, #1
	strb r2, [r3]
	adds r3, #1
	strb r0, [r3]
	adds r3, #1
	adds r5, #1
	cmp r5, r6
	blo _08067914
_08067938:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08067940
sub_08067940: @ 0x08067940
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r4, r1, #0
	adds r7, r2, #0
	movs r6, #0
	cmp r6, r7
	bhs _0806798E
	movs r0, #0x1f
	mov r8, r0
_08067956:
	ldrh r2, [r5]
	adds r5, #2
	movs r1, #0x1f
	ands r1, r2
	lsrs r3, r2, #5
	mov r0, r8
	ands r3, r0
	lsrs r2, r2, #0xa
	ands r2, r0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r1, r3, #1
	adds r1, r1, r3
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r0, r0, r2
	movs r1, #0xa
	bl Div
	strb r0, [r4]
	adds r4, #1
	strb r0, [r4]
	adds r4, #1
	strb r0, [r4]
	adds r4, #1
	adds r6, #1
	cmp r6, r7
	blo _08067956
_0806798E:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08067998
sub_08067998: @ 0x08067998
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r6, r0, #0
	adds r5, r1, #0
	adds r4, r2, #0
	mov r8, r3
	ldr r0, [sp, #0x1c]
	mov sb, r0
	movs r7, #0
	cmp r7, r8
	bhs _08067A0C
_080679B2:
	movs r0, #0
	ldrsb r0, [r5, r0]
	movs r1, #0
	ldrsb r1, [r6, r1]
	adds r6, #1
	adds r5, #1
	subs r0, r0, r1
	lsls r0, r0, #0x18
	asrs r0, r0, #0x10
	mov r1, sb
	bl Div
	strh r0, [r4]
	adds r4, #2
	movs r0, #0
	ldrsb r0, [r5, r0]
	movs r1, #0
	ldrsb r1, [r6, r1]
	adds r6, #1
	adds r5, #1
	subs r0, r0, r1
	lsls r0, r0, #0x18
	asrs r0, r0, #0x10
	mov r1, sb
	bl Div
	strh r0, [r4]
	adds r4, #2
	movs r0, #0
	ldrsb r0, [r5, r0]
	movs r1, #0
	ldrsb r1, [r6, r1]
	adds r6, #1
	adds r5, #1
	subs r0, r0, r1
	lsls r0, r0, #0x18
	asrs r0, r0, #0x10
	mov r1, sb
	bl Div
	strh r0, [r4]
	adds r4, #2
	adds r7, #1
	cmp r7, r8
	blo _080679B2
_08067A0C:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08067A18
sub_08067A18: @ 0x08067A18
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	mov ip, r0
	adds r6, r1, #0
	adds r5, r2, #0
	adds r4, r3, #0
	ldr r0, [sp, #0x1c]
	mov sb, r0
	ldr r7, [sp, #0x20]
	movs r0, #0
	mov r8, r0
	cmp r8, sb
	bhs _08067AA4
_08067A36:
	ldr r0, [sp, #0x24]
	cmp r7, r0
	beq _08067A7A
	movs r0, #0
	ldrsh r1, [r4, r0]
	adds r4, #2
	movs r0, #0
	ldrsh r3, [r4, r0]
	adds r4, #2
	movs r0, #0
	ldrsh r2, [r4, r0]
	adds r4, #2
	adds r0, r1, #0
	muls r0, r7, r0
	asrs r1, r0, #8
	adds r0, r3, #0
	muls r0, r7, r0
	asrs r3, r0, #8
	adds r0, r2, #0
	muls r0, r7, r0
	asrs r2, r0, #8
	movs r0, #0
	ldrsb r0, [r6, r0]
	adds r1, r1, r0
	adds r6, #1
	movs r0, #0
	ldrsb r0, [r6, r0]
	adds r3, r3, r0
	adds r6, #1
	movs r0, #0
	ldrsb r0, [r6, r0]
	adds r2, r2, r0
	adds r6, #1
	b _08067A8C
_08067A7A:
	movs r1, #0
	ldrsb r1, [r5, r1]
	adds r5, #1
	movs r3, #0
	ldrsb r3, [r5, r3]
	adds r5, #1
	movs r2, #0
	ldrsb r2, [r5, r2]
	adds r5, #1
_08067A8C:
	lsls r0, r3, #5
	orrs r1, r0
	lsls r0, r2, #0xa
	orrs r1, r0
	mov r0, ip
	strh r1, [r0]
	movs r0, #2
	add ip, r0
	movs r0, #1
	add r8, r0
	cmp r8, sb
	blo _08067A36
_08067AA4:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08067AB0
sub_08067AB0: @ 0x08067AB0
	push {r4, lr}
	adds r4, r0, #0
	bl sub_08019624
	ldr r0, _08067AD0 @ =gPal
	movs r1, #6
	movs r2, #0xa
	adds r3, r4, #0
	bl sub_080676D4
	bl EnablePalSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08067AD0: .4byte gPal

	thumb_func_start sub_08067AD4
sub_08067AD4: @ 0x08067AD4
	push {r4, lr}
	adds r4, r0, #0
	bl RandNextB
	adds r4, #1
	adds r1, r4, #0
	bl DivRem
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08067AEC
sub_08067AEC: @ 0x08067AEC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	adds r4, r3, #0
	ldr r7, [sp, #0x18]
	ldr r1, [sp, #0x20]
	ldr r0, _08067B34 @ =0x08C4A29C
	bl Proc_Start
	movs r2, #0
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	adds r3, r0, #0
	adds r3, #0x29
	strb r4, [r3]
	adds r3, #1
	strb r2, [r3]
	strh r5, [r0, #0x32]
	strh r6, [r0, #0x3a]
	strh r1, [r0, #0x34]
	strh r1, [r0, #0x3c]
	mov r2, r8
	str r2, [r0, #0x44]
	str r1, [r0, #0x48]
	str r7, [r0, #0x4c]
	ldr r1, [sp, #0x1c]
	str r1, [r0, #0x50]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08067B34: .4byte 0x08C4A29C

	thumb_func_start sub_08067B38
sub_08067B38: @ 0x08067B38
	push {r4, r5, lr}
	sub sp, #0x48
	adds r2, r0, #0
	ldr r1, [r2, #0x44]
	movs r3, #0x2c
	ldrsh r0, [r2, r3]
	cmp r0, #0
	bne _08067BB0
	movs r4, #0x2e
	ldrsh r0, [r2, r4]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r3, [r0]
	movs r1, #0x3f
	ldrb r0, [r0, #3]
	ands r1, r0
	cmp r1, #0
	bne _08067B8E
	adds r0, r2, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	beq _08067B7E
	cmp r0, #1
	bgt _08067B70
	cmp r0, #0
	beq _08067B76
	b _08067BB0
_08067B70:
	cmp r0, #2
	beq _08067B84
	b _08067BB0
_08067B76:
	adds r0, r2, #0
	bl Proc_Break
	b _08067BEA
_08067B7E:
	strh r0, [r2, #0x2c]
	strh r1, [r2, #0x2e]
	b _08067BB0
_08067B84:
	movs r0, #1
	strh r0, [r2, #0x2c]
	ldrh r0, [r2, #0x2e]
	subs r0, #1
	b _08067BAE
_08067B8E:
	cmp r1, #4
	bne _08067B96
	strh r3, [r2, #0x2c]
	b _08067BAA
_08067B96:
	ldr r0, _08067BF4 @ =0x0FFFFFFC
	ands r0, r3
	str r0, [r2, #0x48]
	lsrs r0, r3, #0x1a
	movs r1, #0x1c
	ands r0, r1
	movs r1, #3
	ands r3, r1
	adds r0, r0, r3
	strh r0, [r2, #0x2c]
_08067BAA:
	ldrh r0, [r2, #0x2e]
	adds r0, #1
_08067BAE:
	strh r0, [r2, #0x2e]
_08067BB0:
	ldrh r0, [r2, #0x2c]
	subs r0, #1
	strh r0, [r2, #0x2c]
	adds r0, r2, #0
	adds r0, #0x2a
	ldrb r3, [r0]
	cmp r3, #0
	bne _08067BEA
	ldr r0, [r2, #0x48]
	cmp r0, #0
	beq _08067BEA
	str r0, [sp, #0x3c]
	mov r1, sp
	ldr r0, [r2, #0x4c]
	strh r0, [r1, #8]
	ldr r0, [r2, #0x50]
	str r0, [sp, #0x1c]
	ldrh r5, [r2, #0x32]
	ldrh r4, [r2, #0x34]
	adds r0, r5, r4
	strh r0, [r1, #2]
	ldrh r5, [r2, #0x3a]
	ldrh r4, [r2, #0x3c]
	adds r0, r5, r4
	strh r0, [r1, #4]
	mov r0, sp
	strh r3, [r0, #0xc]
	bl AnimDisplay
_08067BEA:
	add sp, #0x48
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08067BF4: .4byte 0x0FFFFFFC

	thumb_func_start sub_08067BF8
sub_08067BF8: @ 0x08067BF8
	lsrs r1, r0, #0x1e
	movs r2, #0xc0
	lsls r2, r2, #8
	ands r2, r0
	ldr r0, _08067C10 @ =0x082EB76C
	lsls r1, r1, #1
	lsrs r2, r2, #0xb
	adds r1, r1, r2
	adds r1, r1, r0
	movs r2, #0
	ldrsh r0, [r1, r2]
	bx lr
	.align 2, 0
_08067C10: .4byte 0x082EB76C

	thumb_func_start sub_08067C14
sub_08067C14: @ 0x08067C14
	lsrs r1, r0, #0x1e
	movs r2, #0xc0
	lsls r2, r2, #8
	ands r2, r0
	ldr r0, _08067C2C @ =0x082EB78C
	lsls r1, r1, #1
	lsrs r2, r2, #0xb
	adds r1, r1, r2
	adds r1, r1, r0
	movs r2, #0
	ldrsh r0, [r1, r2]
	bx lr
	.align 2, 0
_08067C2C: .4byte 0x082EB78C

	thumb_func_start sub_08067C30
sub_08067C30: @ 0x08067C30
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r6, r1, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	mov r8, r2
	adds r7, r0, #0
	ldr r1, _08067DA8 @ =0xFFFF0000
	ldr r0, [sp, #4]
	ands r0, r1
	str r0, [sp, #4]
	lsls r3, r3, #0x10
	mov sb, r3
	mov r0, r8
	orrs r0, r3
	str r0, [sp]
	ldr r4, _08067DAC @ =0xFFFF0004
	adds r1, r6, #0
	stm r1!, {r4}
	mov r0, sp
	movs r2, #1
	movs r3, #2
	bl ObjAffineSet
	adds r5, r6, #0
	adds r5, #0xc
	str r4, [r6, #0xc]
	adds r1, r6, #0
	adds r1, #0x10
	mov r0, sp
	movs r2, #1
	movs r3, #2
	bl ObjAffineSet
	ldrh r1, [r5, #4]
	rsbs r0, r1, #0
	strh r0, [r5, #4]
	ldrh r2, [r5, #6]
	rsbs r0, r2, #0
	strh r0, [r5, #6]
	adds r5, #0xc
	str r4, [r6, #0x18]
	adds r1, r6, #0
	adds r1, #0x1c
	mov r0, sp
	movs r2, #1
	movs r3, #2
	bl ObjAffineSet
	ldrh r3, [r5, #8]
	rsbs r0, r3, #0
	strh r0, [r5, #8]
	ldrh r1, [r5, #0xa]
	rsbs r0, r1, #0
	strh r0, [r5, #0xa]
	adds r5, #0xc
	str r4, [r6, #0x24]
	adds r1, r6, #0
	adds r1, #0x28
	mov r0, sp
	movs r2, #1
	movs r3, #2
	bl ObjAffineSet
	ldrh r2, [r5, #4]
	rsbs r0, r2, #0
	strh r0, [r5, #4]
	ldrh r3, [r5, #6]
	rsbs r0, r3, #0
	strh r0, [r5, #6]
	ldrh r1, [r5, #8]
	rsbs r0, r1, #0
	strh r0, [r5, #8]
	ldrh r2, [r5, #0xa]
	rsbs r0, r2, #0
	strh r0, [r5, #0xa]
	adds r6, #0x30
	ldr r0, [r7]
	cmp r0, #1
	beq _08067D88
	mov r3, r8
	lsls r0, r3, #0x10
	asrs r0, r0, #0x10
	mov r8, r0
	mov r0, sb
	asrs r5, r0, #0x10
_08067CE2:
	ldr r2, [r7]
	movs r0, #0x80
	lsls r0, r0, #0x15
	ands r0, r2
	rsbs r0, r0, #0
	asrs r1, r0, #0x1f
	movs r0, #0x80
	lsls r0, r0, #0x12
	ands r1, r0
	movs r0, #0x80
	lsls r0, r0, #0x16
	ands r0, r2
	cmp r0, #0
	beq _08067D04
	movs r3, #0x80
	lsls r3, r3, #0x13
	adds r1, r1, r3
_08067D04:
	ldr r0, _08067DB0 @ =0xC1FFFFFF
	ands r0, r2
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r1, r3
	adds r0, r0, r1
	str r0, [r6]
	ldrh r0, [r7, #4]
	strh r0, [r6, #4]
	adds r0, r2, #0
	bl sub_08067BF8
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x11
	lsls r1, r4, #8
	adds r0, r1, #0
	mov r1, r8
	bl Div
	subs r1, r4, r0
	movs r2, #6
	ldrsh r0, [r7, r2]
	subs r4, r0, r1
	lsls r1, r0, #8
	adds r0, r1, #0
	mov r1, r8
	bl Div
	adds r1, r0, #0
	movs r3, #6
	ldrsh r0, [r7, r3]
	subs r1, r0, r1
	subs r4, r4, r1
	strh r4, [r6, #6]
	ldr r0, [r7]
	bl sub_08067C14
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x11
	lsls r1, r4, #8
	adds r0, r1, #0
	adds r1, r5, #0
	bl Div
	subs r1, r4, r0
	movs r2, #8
	ldrsh r0, [r7, r2]
	subs r4, r0, r1
	lsls r1, r0, #8
	adds r0, r1, #0
	adds r1, r5, #0
	bl Div
	adds r1, r0, #0
	movs r3, #8
	ldrsh r0, [r7, r3]
	subs r1, r0, r1
	subs r4, r4, r1
	strh r4, [r6, #8]
	adds r6, #0xc
	adds r7, #0xc
	ldr r0, [r7]
	cmp r0, #1
	bne _08067CE2
_08067D88:
	ldr r0, [r7]
	str r0, [r6]
	ldrh r0, [r7, #4]
	strh r0, [r6, #4]
	ldrh r0, [r7, #6]
	strh r0, [r6, #6]
	ldrh r0, [r7, #8]
	strh r0, [r6, #8]
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08067DA8: .4byte 0xFFFF0000
_08067DAC: .4byte 0xFFFF0004
_08067DB0: .4byte 0xC1FFFFFF

	thumb_func_start sub_08067DB4
sub_08067DB4: @ 0x08067DB4
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	ldr r1, _08067DF4 @ =gBmSt
	movs r0, #0x20
	ldrb r1, [r1, #4]
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #0
	bne _08067E0A
	bl sub_08067EC8
	cmp r0, #0
	bne _08067DFC
	bl sub_08067EBC
	adds r0, r5, #0
	bl sub_080033EC
	ldr r0, _08067DF8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08067E0A
	lsls r0, r6, #0x10
	lsrs r0, r0, #0x10
	bl m4aSongNumStart
	b _08067E0A
	.align 2, 0
_08067DF4: .4byte gBmSt
_08067DF8: .4byte gPlaySt
_08067DFC:
	ldr r0, _08067E10 @ =0x08C4A2B4
	movs r1, #3
	bl Proc_Start
	str r5, [r0, #0x44]
	str r6, [r0, #0x48]
	strh r4, [r0, #0x2c]
_08067E0A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08067E10: .4byte 0x08C4A2B4

	thumb_func_start sub_08067E14
sub_08067E14: @ 0x08067E14
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #5
	bne _08067E2E
	adds r0, r4, #0
	bl Proc_Break
	b _08067E5C
_08067E2E:
	bl sub_08067EC8
	cmp r0, #0
	bne _08067E5C
	bl sub_08067EBC
	ldr r0, [r4, #0x44]
	bl sub_080033EC
	ldr r0, _08067E64 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08067E56
	ldr r0, [r4, #0x48]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl m4aSongNumStart
_08067E56:
	adds r0, r4, #0
	bl Proc_Break
_08067E5C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08067E64: .4byte gPlaySt

	thumb_func_start sub_08067E68
sub_08067E68: @ 0x08067E68
	push {lr}
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl m4aSongNumStop
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08067E78
sub_08067E78: @ 0x08067E78
	push {r4, lr}
	adds r4, r0, #0
	adds r2, r1, #0
	ldr r1, _08067E9C @ =gBmSt
	movs r0, #0x20
	ldrb r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	bne _08067E96
	adds r0, r2, #0
	bl SetBgmVolume
	adds r0, r4, #0
	bl sub_0800394C
_08067E96:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08067E9C: .4byte gBmSt

	thumb_func_start sub_08067EA0
sub_08067EA0: @ 0x08067EA0
	push {lr}
	ldr r0, _08067EAC @ =0x03005A30
	bl MPlayStop_rev01
	pop {r0}
	bx r0
	.align 2, 0
_08067EAC: .4byte 0x03005A30

	thumb_func_start sub_08067EB0
sub_08067EB0: @ 0x08067EB0
	ldr r1, _08067EB8 @ =0x020200A4
	movs r0, #0
	str r0, [r1]
	bx lr
	.align 2, 0
_08067EB8: .4byte 0x020200A4

	thumb_func_start sub_08067EBC
sub_08067EBC: @ 0x08067EBC
	ldr r1, _08067EC4 @ =0x020200A4
	movs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_08067EC4: .4byte 0x020200A4

	thumb_func_start sub_08067EC8
sub_08067EC8: @ 0x08067EC8
	ldr r0, _08067ED0 @ =0x020200A4
	ldr r0, [r0]
	bx lr
	.align 2, 0
_08067ED0: .4byte 0x020200A4

	thumb_func_start sub_08067ED4
sub_08067ED4: @ 0x08067ED4
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r1, #0
	ldr r1, _08067F00 @ =gBmSt
	movs r0, #0x20
	ldrb r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	bne _08067F7C
	cmp r2, #0
	beq _08067F4C
	cmp r6, #0x77
	bgt _08067F04
	adds r0, r6, #0
	muls r0, r6, r0
	movs r1, #0x78
	bl Div
	adds r5, r0, #0
	subs r5, #0x78
	b _08067F18
	.align 2, 0
_08067F00: .4byte gBmSt
_08067F04:
	movs r0, #0xf0
	subs r0, r0, r6
	adds r1, r0, #0
	muls r1, r0, r1
	adds r0, r1, #0
	movs r1, #0x78
	bl Div
	movs r1, #0x78
	subs r5, r1, r0
_08067F18:
	ldr r2, _08067F40 @ =0x086EA858
	ldr r0, _08067F44 @ =0x086EA8D0
	lsls r1, r4, #3
	adds r1, r1, r0
	ldrh r3, [r1, #4]
	lsls r0, r3, #1
	adds r0, r0, r3
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r4, [r0]
	adds r0, r4, #0
	bl m4aMPlayImmInit
	ldr r1, _08067F48 @ =0x0000FFFF
	lsls r2, r5, #0x18
	asrs r2, r2, #0x18
	adds r0, r4, #0
	bl MPlayPanpotControl
	b _08067F7C
	.align 2, 0
_08067F40: .4byte 0x086EA858
_08067F44: .4byte 0x086EA8D0
_08067F48: .4byte 0x0000FFFF
_08067F4C:
	ldr r2, _08067F84 @ =0x086EA858
	ldr r0, _08067F88 @ =0x086EA8D0
	lsls r1, r4, #3
	adds r1, r1, r0
	ldrh r3, [r1, #4]
	lsls r0, r3, #1
	adds r0, r0, r3
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r4, [r0]
	adds r0, r4, #0
	bl m4aMPlayImmInit
	ldr r5, _08067F8C @ =0x0000FFFF
	adds r0, r6, #0
	bl sub_080151D4
	adds r2, r0, #0
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	adds r0, r4, #0
	adds r1, r5, #0
	bl MPlayPanpotControl
_08067F7C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08067F84: .4byte 0x086EA858
_08067F88: .4byte 0x086EA8D0
_08067F8C: .4byte 0x0000FFFF

	thumb_func_start EfxPlaySEwithCmdCtrl
EfxPlaySEwithCmdCtrl: @ 0x08067F90
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	mov r8, r0
	mov sb, r1
	bl GetCoreAIStruct
	adds r6, r0, #0
	mov r0, r8
	bl GetAISLayerId
	cmp r0, #1
	bne _08067FB0
	b _080682FC
_08067FB0:
	mov r0, r8
	bl GetAISSubjectId
	adds r5, r0, #0
	cmp r5, #0
	bne _08067FC8
	ldr r0, _08067FC4 @ =0x0203E0B0
	movs r1, #0
	ldrsh r4, [r0, r1]
	b _08067FCE
	.align 2, 0
_08067FC4: .4byte 0x0203E0B0
_08067FC8:
	ldr r0, _08067FF8 @ =0x0203E0B0
	movs r3, #2
	ldrsh r4, [r0, r3]
_08067FCE:
	lsls r0, r4, #0x10
	lsrs r0, r0, #0x10
	bl sub_0806830C
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	cmp r4, #0x14
	bne _08067FEA
	mov r0, r8
	bl sub_08068458
	cmp r0, #0
	bne _08067FEA
	movs r7, #2
_08067FEA:
	cmp r5, #0
	bne _08068000
	ldr r0, _08067FFC @ =0x0203E0B4
	movs r1, #0
	ldrsh r0, [r0, r1]
	b _08068006
	.align 2, 0
_08067FF8: .4byte 0x0203E0B0
_08067FFC: .4byte 0x0203E0B4
_08068000:
	ldr r0, _08068044 @ =0x0203E0B4
	movs r3, #2
	ldrsh r0, [r0, r3]
_08068006:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_08068488
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	ldr r4, _08068048 @ =0x0000FFFF
	mov r0, r8
	str r2, [sp]
	bl sub_08068938
	mov r1, r8
	ldrh r1, [r1, #2]
	adds r0, r1, r0
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	movs r0, #0x80
	lsls r0, r0, #1
	mov r8, r0
	mov r0, sb
	subs r0, #0x19
	ldr r2, [sp]
	cmp r0, #0x37
	bls _08068038
	b _080682D6
_08068038:
	lsls r0, r0, #2
	ldr r1, _0806804C @ =_08068050
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08068044: .4byte 0x0203E0B4
_08068048: .4byte 0x0000FFFF
_0806804C: .4byte _08068050
_08068050: @ jump table
	.4byte _08068130 @ case 0
	.4byte _080682D6 @ case 1
	.4byte _0806820A @ case 2
	.4byte _08068134 @ case 3
	.4byte _0806813C @ case 4
	.4byte _08068144 @ case 5
	.4byte _0806814C @ case 6
	.4byte _0806816C @ case 7
	.4byte _0806818C @ case 8
	.4byte _080681D0 @ case 9
	.4byte _080681D4 @ case 10
	.4byte _080681D8 @ case 11
	.4byte _080681DC @ case 12
	.4byte _080682D6 @ case 13
	.4byte _080682D6 @ case 14
	.4byte _080681E4 @ case 15
	.4byte _080681E8 @ case 16
	.4byte _080681F0 @ case 17
	.4byte _080681F6 @ case 18
	.4byte _080682D6 @ case 19
	.4byte _080682D6 @ case 20
	.4byte _080682D6 @ case 21
	.4byte _08068200 @ case 22
	.4byte _080682D6 @ case 23
	.4byte _080682D6 @ case 24
	.4byte _080682D6 @ case 25
	.4byte _08068206 @ case 26
	.4byte _0806820A @ case 27
	.4byte _08068224 @ case 28
	.4byte _08068234 @ case 29
	.4byte _08068238 @ case 30
	.4byte _0806823C @ case 31
	.4byte _080682D6 @ case 32
	.4byte _08068240 @ case 33
	.4byte _08068248 @ case 34
	.4byte _0806824E @ case 35
	.4byte _080682D6 @ case 36
	.4byte _08068260 @ case 37
	.4byte _08068264 @ case 38
	.4byte _0806826A @ case 39
	.4byte _08068274 @ case 40
	.4byte _08068278 @ case 41
	.4byte _0806827C @ case 42
	.4byte _08068284 @ case 43
	.4byte _0806828A @ case 44
	.4byte _08068294 @ case 45
	.4byte _080682D6 @ case 46
	.4byte _0806829C @ case 47
	.4byte _080682A0 @ case 48
	.4byte _080682A8 @ case 49
	.4byte _080682AE @ case 50
	.4byte _080682B8 @ case 51
	.4byte _080682C0 @ case 52
	.4byte _080682D6 @ case 53
	.4byte _080682C8 @ case 54
	.4byte _080682D0 @ case 55
_08068130:
	movs r4, #0xd1
	b _080682D8
_08068134:
	ldr r1, _08068138 @ =0x08C4A690
	b _0806820C
	.align 2, 0
_08068138: .4byte 0x08C4A690
_0806813C:
	ldr r1, _08068140 @ =0x08C4A6AC
	b _0806820C
	.align 2, 0
_08068140: .4byte 0x08C4A6AC
_08068144:
	ldr r1, _08068148 @ =0x08C4A6C8
	b _0806820C
	.align 2, 0
_08068148: .4byte 0x08C4A6C8
_0806814C:
	adds r0, r6, #0
	bl sub_08068564
	adds r0, r6, #0
	bl sub_080684B0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	beq _080681B4
	cmp r0, #1
	bgt _080681AA
	cmp r0, #0
	bne _080681BA
	movs r4, #0xd2
	b _080681BA
_0806816C:
	adds r0, r6, #0
	bl sub_08068564
	adds r0, r6, #0
	bl sub_080684B0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	beq _080681B4
	cmp r0, #1
	bgt _080681AA
	cmp r0, #0
	bne _080681BA
	movs r4, #0xd3
	b _080681BA
_0806818C:
	adds r0, r6, #0
	bl sub_08068564
	adds r0, r6, #0
	bl sub_080684B0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	beq _080681B4
	cmp r0, #1
	bgt _080681AA
	cmp r0, #0
	beq _080681B0
	b _080681BA
_080681AA:
	cmp r0, #2
	beq _080681B8
	b _080681BA
_080681B0:
	movs r4, #0xd4
	b _080681BA
_080681B4:
	movs r4, #0xd5
	b _080681BA
_080681B8:
	ldr r4, _080681CC @ =0x000002CE
_080681BA:
	adds r0, r6, #0
	bl sub_08068938
	ldrh r6, [r6, #2]
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	b _080682D8
	.align 2, 0
_080681CC: .4byte 0x000002CE
_080681D0:
	movs r4, #0xc9
	b _080682D8
_080681D4:
	movs r4, #0xc8
	b _080682D8
_080681D8:
	movs r4, #0xca
	b _080682D8
_080681DC:
	ldr r4, _080681E0 @ =0x00000263
	b _08068226
	.align 2, 0
_080681E0: .4byte 0x00000263
_080681E4:
	movs r4, #0xf6
	b _080682D8
_080681E8:
	ldr r4, _080681EC @ =0x00000141
	b _080682D8
	.align 2, 0
_080681EC: .4byte 0x00000141
_080681F0:
	movs r4, #0xa1
	lsls r4, r4, #1
	b _080682D8
_080681F6:
	ldr r4, _080681FC @ =0x00000267
	b _08068226
	.align 2, 0
_080681FC: .4byte 0x00000267
_08068200:
	movs r4, #0xbe
	lsls r4, r4, #2
	b _080682D8
_08068206:
	movs r4, #0xe7
	b _080682D8
_0806820A:
	ldr r1, _08068220 @ =0x08C4A674
_0806820C:
	lsls r0, r7, #2
	adds r0, r0, r1
	ldr r1, [r0]
	lsls r0, r2, #1
	adds r0, r0, r5
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r4, [r0]
	b _080682D8
	.align 2, 0
_08068220: .4byte 0x08C4A674
_08068224:
	ldr r4, _08068230 @ =0x00000265
_08068226:
	cmp r5, #0
	bne _080682D8
	subs r4, #1
	b _080682D8
	.align 2, 0
_08068230: .4byte 0x00000265
_08068234:
	movs r4, #0xce
	b _080682D8
_08068238:
	movs r4, #0xcf
	b _080682D8
_0806823C:
	movs r4, #0xcb
	b _080682D8
_08068240:
	ldr r4, _08068244 @ =0x000002D3
	b _080682D8
	.align 2, 0
_08068244: .4byte 0x000002D3
_08068248:
	movs r4, #0xb5
	lsls r4, r4, #2
	b _080682D8
_0806824E:
	ldr r4, _0806825C @ =0x00000263
	cmp r5, #0
	bne _08068256
	subs r4, #1
_08068256:
	movs r1, #0x80
	mov r8, r1
	b _080682D8
	.align 2, 0
_0806825C: .4byte 0x00000263
_08068260:
	movs r4, #0xf1
	b _080682D8
_08068264:
	movs r4, #0x9b
	lsls r4, r4, #1
	b _080682D8
_0806826A:
	ldr r4, _08068270 @ =0x00000117
	b _080682D8
	.align 2, 0
_08068270: .4byte 0x00000117
_08068274:
	movs r4, #0xeb
	b _080682D8
_08068278:
	movs r4, #0xea
	b _080682D8
_0806827C:
	ldr r4, _08068280 @ =0x000002CF
	b _080682D8
	.align 2, 0
_08068280: .4byte 0x000002CF
_08068284:
	movs r4, #0xb4
	lsls r4, r4, #2
	b _080682D8
_0806828A:
	ldr r4, _08068290 @ =0x000002D1
	b _080682D8
	.align 2, 0
_08068290: .4byte 0x000002D1
_08068294:
	ldr r4, _08068298 @ =0x000002D2
	b _080682D8
	.align 2, 0
_08068298: .4byte 0x000002D2
_0806829C:
	movs r4, #0xed
	b _080682D8
_080682A0:
	ldr r4, _080682A4 @ =0x00000135
	b _080682D8
	.align 2, 0
_080682A4: .4byte 0x00000135
_080682A8:
	movs r4, #0x9a
	lsls r4, r4, #1
	b _080682D8
_080682AE:
	ldr r4, _080682B4 @ =0x000002DD
	b _080682D8
	.align 2, 0
_080682B4: .4byte 0x000002DD
_080682B8:
	ldr r4, _080682BC @ =0x000002DE
	b _080682D8
	.align 2, 0
_080682BC: .4byte 0x000002DE
_080682C0:
	ldr r4, _080682C4 @ =0x000002DF
	b _080682D8
	.align 2, 0
_080682C4: .4byte 0x000002DF
_080682C8:
	ldr r4, _080682CC @ =0x000002F7
	b _080682D8
	.align 2, 0
_080682CC: .4byte 0x000002F7
_080682D0:
	movs r4, #0xba
	lsls r4, r4, #2
	b _080682D8
_080682D6:
	movs r4, #0
_080682D8:
	lsls r0, r4, #0x10
	asrs r4, r0, #0x10
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	beq _080682FC
	mov r1, r8
	adds r0, r4, #0
	str r3, [sp, #4]
	bl sub_08067DB4
	ldr r3, [sp, #4]
	lsls r1, r3, #0x10
	asrs r1, r1, #0x10
	movs r2, #1
	adds r0, r4, #0
	bl sub_08067ED4
_080682FC:
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806830C
sub_0806830C: @ 0x0806830C
	push {r4, lr}
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	bl sub_08055CD8
	cmp r0, #1
	bne _0806831E
_0806831A:
	movs r0, #0
	b _08068452
_0806831E:
	cmp r4, #0x40
	bls _08068324
	b _08068450
_08068324:
	lsls r0, r4, #2
	ldr r1, _08068330 @ =_08068334
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08068330: .4byte _08068334
_08068334: @ jump table
	.4byte _08068450 @ case 0
	.4byte _0806831A @ case 1
	.4byte _0806831A @ case 2
	.4byte _0806831A @ case 3
	.4byte _0806831A @ case 4
	.4byte _0806831A @ case 5
	.4byte _0806844C @ case 6
	.4byte _0806844C @ case 7
	.4byte _0806844C @ case 8
	.4byte _0806844C @ case 9
	.4byte _0806831A @ case 10
	.4byte _0806844C @ case 11
	.4byte _08068438 @ case 12
	.4byte _08068438 @ case 13
	.4byte _08068444 @ case 14
	.4byte _08068444 @ case 15
	.4byte _0806843C @ case 16
	.4byte _0806831A @ case 17
	.4byte _08068440 @ case 18
	.4byte _08068448 @ case 19
	.4byte _08068448 @ case 20
	.4byte _0806843C @ case 21
	.4byte _0806843C @ case 22
	.4byte _0806844C @ case 23
	.4byte _0806844C @ case 24
	.4byte _0806831A @ case 25
	.4byte _0806831A @ case 26
	.4byte _0806831A @ case 27
	.4byte _0806831A @ case 28
	.4byte _0806844C @ case 29
	.4byte _0806844C @ case 30
	.4byte _0806844C @ case 31
	.4byte _0806844C @ case 32
	.4byte _0806844C @ case 33
	.4byte _0806831A @ case 34
	.4byte _0806831A @ case 35
	.4byte _0806844C @ case 36
	.4byte _0806831A @ case 37
	.4byte _08068440 @ case 38
	.4byte _0806831A @ case 39
	.4byte _0806831A @ case 40
	.4byte _0806831A @ case 41
	.4byte _08068440 @ case 42
	.4byte _0806831A @ case 43
	.4byte _08068450 @ case 44
	.4byte _0806844C @ case 45
	.4byte _08068450 @ case 46
	.4byte _0806831A @ case 47
	.4byte _0806844C @ case 48
	.4byte _0806844C @ case 49
	.4byte _0806844C @ case 50
	.4byte _0806831A @ case 51
	.4byte _08068450 @ case 52
	.4byte _08068450 @ case 53
	.4byte _0806843C @ case 54
	.4byte _0806844C @ case 55
	.4byte _0806831A @ case 56
	.4byte _0806831A @ case 57
	.4byte _08068440 @ case 58
	.4byte _08068440 @ case 59
	.4byte _0806843C @ case 60
	.4byte _08068440 @ case 61
	.4byte _0806844C @ case 62
	.4byte _0806831A @ case 63
	.4byte _0806831A @ case 64
_08068438:
	movs r0, #1
	b _08068452
_0806843C:
	movs r0, #2
	b _08068452
_08068440:
	movs r0, #3
	b _08068452
_08068444:
	movs r0, #4
	b _08068452
_08068448:
	movs r0, #5
	b _08068452
_0806844C:
	movs r0, #6
	b _08068452
_08068450:
	movs r0, #0
_08068452:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_08068458
sub_08068458: @ 0x08068458
	push {r4, r5, lr}
	adds r4, r0, #0
	bl sub_08068938
	movs r2, #2
	ldrsh r1, [r4, r2]
	adds r5, r0, r1
	adds r0, r4, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _08068476
	cmp r5, #0x58
	bgt _0806847E
	b _0806847A
_08068476:
	cmp r5, #0x97
	ble _0806847E
_0806847A:
	movs r0, #1
	b _08068480
_0806847E:
	movs r0, #0
_08068480:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08068488
sub_08068488: @ 0x08068488
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r2, r0, #0
	movs r1, #0
	cmp r0, #4
	bls _080684AA
	cmp r0, #8
	bhi _0806849C
	movs r1, #1
	b _080684AA
_0806849C:
	cmp r0, #0xb
	bhi _080684A4
	movs r1, #2
	b _080684AA
_080684A4:
	cmp r2, #0xf
	bhi _080684AA
	movs r1, #3
_080684AA:
	adds r0, r1, #0
	bx lr
	.align 2, 0

	thumb_func_start sub_080684B0
sub_080684B0: @ 0x080684B0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r4, _080684F0 @ =0x0203E036
	bl GetAISSubjectId
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r1, #0
	ldrsh r6, [r0, r1]
	adds r0, r5, #0
	bl GetAISSubjectId
	lsls r1, r6, #1
	adds r6, r1, r0
	adds r0, r6, #0
	bl GetEfxHp
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	adds r0, r6, #2
	bl GetEfxHp
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r4, r0
	beq _080684F8
	cmp r0, #0
	beq _080684F4
	movs r0, #0
	b _080684FA
	.align 2, 0
_080684F0: .4byte 0x0203E036
_080684F4:
	movs r0, #1
	b _080684FA
_080684F8:
	movs r0, #2
_080684FA:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_08068500
sub_08068500: @ 0x08068500
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _08068524 @ =0x0000FFFF
	bl sub_08068564
	adds r0, r5, #0
	bl sub_080684B0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	beq _08068532
	cmp r0, #1
	bgt _08068528
	cmp r0, #0
	beq _0806852E
	b _08068538
	.align 2, 0
_08068524: .4byte 0x0000FFFF
_08068528:
	cmp r0, #2
	beq _08068536
	b _08068538
_0806852E:
	movs r4, #0xd4
	b _08068538
_08068532:
	movs r4, #0xd5
	b _08068538
_08068536:
	ldr r4, _08068560 @ =0x000002CE
_08068538:
	lsls r0, r4, #0x10
	asrs r4, r0, #0x10
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	beq _0806855A
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r4, #0
	bl sub_08067DB4
	movs r0, #2
	ldrsh r1, [r5, r0]
	adds r0, r4, #0
	movs r2, #1
	bl sub_08067ED4
_0806855A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08068560: .4byte 0x000002CE

	thumb_func_start sub_08068564
sub_08068564: @ 0x08068564
	push {r4, r5, lr}
	adds r4, r0, #0
	bl GetCoreAIStruct
	adds r5, r0, #0
	adds r0, r4, #0
	bl sub_080684B0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bgt _080685A0
	cmp r0, #0
	blt _080685A0
	adds r0, r5, #0
	bl sub_08054F4C
	cmp r0, #1
	bne _080685A0
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0xd8
	bl sub_08067DB4
	movs r0, #2
	ldrsh r1, [r4, r0]
	movs r0, #0xd8
	movs r2, #1
	bl sub_08067ED4
_080685A0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080685A8
sub_080685A8: @ 0x080685A8
	ldr r2, _080685C0 @ =gBattleHitArray
	movs r1, #8
	ldrb r2, [r2, #2]
	ands r1, r2
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	rsbs r1, r1, #0
	lsrs r1, r1, #0x1f
	cmp r0, r1
	beq _080685C4
	movs r0, #0
	b _080685C6
	.align 2, 0
_080685C0: .4byte gBattleHitArray
_080685C4:
	movs r0, #1
_080685C6:
	bx lr

	thumb_func_start sub_080685C8
sub_080685C8: @ 0x080685C8
	push {lr}
	cmp r0, #0
	beq _0806862C
	bl GetItemIndex
	subs r0, #0x4a
	cmp r0, #0xe
	bhi _0806862C
	lsls r0, r0, #2
	ldr r1, _080685E4 @ =_080685E8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080685E4: .4byte _080685E8
_080685E8: @ jump table
	.4byte _08068624 @ case 0
	.4byte _08068624 @ case 1
	.4byte _08068624 @ case 2
	.4byte _08068624 @ case 3
	.4byte _08068624 @ case 4
	.4byte _08068624 @ case 5
	.4byte _08068628 @ case 6
	.4byte _08068628 @ case 7
	.4byte _08068628 @ case 8
	.4byte _0806862C @ case 9
	.4byte _0806862C @ case 10
	.4byte _0806862C @ case 11
	.4byte _08068624 @ case 12
	.4byte _0806862C @ case 13
	.4byte _08068624 @ case 14
_08068624:
	movs r0, #2
	b _0806862E
_08068628:
	movs r0, #1
	b _0806862E
_0806862C:
	movs r0, #0
_0806862E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08068634
sub_08068634: @ 0x08068634
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r0, _08068680 @ =gpEkrBattleUnitLeft
	ldr r1, _08068684 @ =gpEkrBattleUnitRight
	ldr r5, [r0]
	ldr r6, [r1]
	ldr r1, _08068688 @ =gBmSt
	movs r0, #0x20
	ldrb r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _08068650
	b _080688B4
_08068650:
	ldr r1, _0806868C @ =0x020200A0
	movs r0, #1
	str r0, [r1]
	ldr r1, _08068690 @ =0x0203DFF8
	ldr r0, _08068694 @ =0x0203DFE4
	movs r2, #0
	ldrsh r0, [r0, r2]
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r1, #0x20
	mov r8, r1
	ldrh r0, [r0]
	cmp r0, #1
	beq _08068670
	movs r2, #0x1f
	mov r8, r2
_08068670:
	bl sub_08055CD8
	cmp r0, #1
	bne _08068698
	bl sub_08003E48
	b _080686A0
	.align 2, 0
_08068680: .4byte gpEkrBattleUnitLeft
_08068684: .4byte gpEkrBattleUnitRight
_08068688: .4byte gBmSt
_0806868C: .4byte 0x020200A0
_08068690: .4byte 0x0203DFF8
_08068694: .4byte 0x0203DFE4
_08068698:
	bl GetBanimLinkArenaFlag
	cmp r0, #1
	bne _080686AC
_080686A0:
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x48
	bl sub_08067E78
	b _080688BA
_080686AC:
	ldr r0, _080686C0 @ =gEkrDistanceType
	ldrh r0, [r0]
	cmp r0, #4
	bne _080686C4
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x1b
	bl sub_08067E78
	b _080688BA
	.align 2, 0
_080686C0: .4byte gEkrDistanceType
_080686C4:
	ldr r7, _08068740 @ =0x0203DFE8
	movs r1, #0
	ldrsh r0, [r7, r1]
	rsbs r1, r0, #0
	orrs r1, r0
	lsrs r4, r1, #0x1f
	ldr r0, _08068744 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	cmp r0, #0x3f
	beq _080686DA
	movs r4, #0
_080686DA:
	ldr r0, [r5]
	ldrb r0, [r0, #4]
	cmp r0, #0x44
	beq _080686E4
	movs r4, #0
_080686E4:
	ldr r0, [r6]
	ldrb r0, [r0, #4]
	cmp r0, #0x27
	beq _080686EE
	movs r4, #0
_080686EE:
	cmp r4, #1
	beq _08068734
	movs r4, #0
	adds r0, r6, #0
	adds r0, #0x4a
	ldrh r0, [r0]
	bl sub_08053B98
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08068708
	movs r4, #1
_08068708:
	movs r0, #1
	bl sub_08053BD4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08068716
	movs r4, #0
_08068716:
	movs r2, #0
	ldrsh r0, [r7, r2]
	cmp r0, #0
	bne _08068720
	movs r4, #0
_08068720:
	ldr r0, [r5]
	ldrb r0, [r0, #4]
	cmp r0, #0x44
	bne _0806872A
	movs r4, #0
_0806872A:
	cmp r0, #0x86
	bne _08068730
	movs r4, #0
_08068730:
	cmp r4, #1
	bne _08068748
_08068734:
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x1c
	bl sub_08067E78
	b _080688BA
	.align 2, 0
_08068740: .4byte 0x0203DFE8
_08068744: .4byte gPlaySt
_08068748:
	cmp r0, #0x86
	bne _08068768
	bl sub_0807A26C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08068764
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x6f
	bl sub_08067E78
	b _080688BA
_08068764:
	bl sub_0807A260
_08068768:
	adds r0, r5, #0
	bl sub_080688FC
	adds r4, r0, #0
	ldr r0, [r5]
	ldrb r0, [r0, #4]
	bl GetUnitFromCharId
	movs r1, #0xc0
	ldrb r0, [r0, #0xb]
	ands r1, r0
	cmp r1, #0
	bne _08068786
	movs r4, #1
	rsbs r4, r4, #0
_08068786:
	ldr r0, _080687A8 @ =0x0203DFE8
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _08068794
	movs r4, #1
	rsbs r4, r4, #0
_08068794:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	beq _080687AC
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r4, #0
	bl sub_08067E78
	b _080688BA
	.align 2, 0
_080687A8: .4byte 0x0203DFE8
_080687AC:
	movs r4, #0
	ldr r0, [r5]
	ldr r1, [r5, #4]
	ldr r0, [r0, #0x28]
	ldr r1, [r1, #0x28]
	orrs r0, r1
	movs r1, #0x80
	lsls r1, r1, #0xc
	ands r0, r1
	cmp r0, #0
	beq _080687D6
	ldr r0, _080687E8 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x2e
	bne _080687D0
	movs r4, #1
_080687D0:
	cmp r0, #0x2f
	bne _080687D6
	movs r4, #1
_080687D6:
	cmp r4, #1
	bne _080687EC
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x14
	bl sub_08067E78
	b _080688BA
	.align 2, 0
_080687E8: .4byte gPlaySt
_080687EC:
	movs r4, #0
	ldr r0, [r6, #4]
	ldrb r1, [r0, #4]
	adds r3, r0, #0
	cmp r1, #0x40
	bne _08068810
	ldr r0, _08068820 @ =gBattleStats
	ldrh r2, [r0]
	ands r1, r2
	rsbs r0, r1, #0
	orrs r0, r1
	lsrs r4, r0, #0x1f
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r2
	cmp r0, #0
	beq _08068810
	movs r4, #1
_08068810:
	cmp r4, #1
	bne _08068824
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x1d
	bl sub_08067E78
	b _080688BA
	.align 2, 0
_08068820: .4byte gBattleStats
_08068824:
	movs r4, #0
	ldrb r3, [r3, #4]
	cmp r3, #0x41
	bne _08068848
	ldr r0, _08068858 @ =gBattleStats
	ldrh r1, [r0]
	movs r0, #0x40
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	rsbs r0, r0, #0
	lsrs r4, r0, #0x1f
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08068848
	movs r4, #1
_08068848:
	cmp r4, #1
	bne _0806885C
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x1e
	bl sub_08067E78
	b _080688BA
	.align 2, 0
_08068858: .4byte gBattleStats
_0806885C:
	movs r0, #0
	bl sub_080685A8
	cmp r0, #1
	bne _08068870
	ldr r0, _0806886C @ =gBattleActor
	b _0806887C
	.align 2, 0
_0806886C: .4byte gBattleActor
_08068870:
	movs r0, #1
	bl sub_080685A8
	cmp r0, #1
	bne _0806888C
	ldr r0, _08068888 @ =gBattleTarget
_0806887C:
	adds r0, #0x4a
	ldrh r0, [r0]
	bl sub_080685C8
	b _0806888E
	.align 2, 0
_08068888: .4byte gBattleTarget
_0806888C:
	movs r0, #0
_0806888E:
	cmp r0, #1
	beq _0806889C
	cmp r0, #2
	bne _080688A0
	movs r2, #0x1a
	mov r8, r2
	b _080688A0
_0806889C:
	movs r0, #0x19
	mov r8, r0
_080688A0:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r8, r0
	beq _080688B4
	movs r1, #0x80
	lsls r1, r1, #1
	mov r0, r8
	bl sub_08067E78
	b _080688BA
_080688B4:
	ldr r1, _080688C4 @ =0x020200A0
	movs r0, #0
	str r0, [r1]
_080688BA:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080688C4: .4byte 0x020200A0

	thumb_func_start sub_080688C8
sub_080688C8: @ 0x080688C8
	push {lr}
	bl sub_0806BF78
	cmp r0, #1
	beq _080688E6
	ldr r1, _080688EC @ =gBmSt
	movs r0, #0x20
	ldrb r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	bne _080688E6
	ldr r0, _080688F0 @ =0x020200A0
	ldr r0, [r0]
	cmp r0, #0
	bne _080688F4
_080688E6:
	bl MakeBgmOverridePersist
	b _080688F8
	.align 2, 0
_080688EC: .4byte gBmSt
_080688F0: .4byte 0x020200A0
_080688F4:
	bl RestoreBgm
_080688F8:
	pop {r0}
	bx r0

	thumb_func_start sub_080688FC
sub_080688FC: @ 0x080688FC
	push {r4, r5, lr}
	ldr r0, [r0]
	ldrb r2, [r0, #4]
	movs r3, #0
	ldr r0, _08068934 @ =0x08C4A2CC
	ldr r1, [r0]
	movs r4, #1
	rsbs r4, r4, #0
	adds r5, r0, #0
	cmp r1, r4
	beq _08068926
	cmp r2, r1
	beq _08068926
	adds r1, r5, #0
_08068918:
	adds r1, #8
	adds r3, #2
	ldr r0, [r1]
	cmp r0, r4
	beq _08068926
	cmp r2, r0
	bne _08068918
_08068926:
	adds r0, r3, #1
	lsls r0, r0, #2
	adds r0, r0, r5
	ldr r0, [r0]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08068934: .4byte 0x08C4A2CC

	thumb_func_start sub_08068938
sub_08068938: @ 0x08068938
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r2, [r0, #0x3c]
	ldr r3, [r2]
	ldr r1, _08068968 @ =0xFFFF0000
	adds r0, r3, #0
	ands r0, r1
	cmp r0, r1
	bne _0806895C
	ldr r7, _0806896C @ =0x0000FFFF
	ands r7, r3
	cmp r7, #0
	beq _0806895C
_08068954:
	subs r7, #1
	adds r2, #0xc
	cmp r7, #0
	bne _08068954
_0806895C:
	adds r6, r2, #0
	movs r7, #0
	movs r0, #0
	mov r8, r0
	b _080689A4
	.align 2, 0
_08068968: .4byte 0xFFFF0000
_0806896C: .4byte 0x0000FFFF
_08068970:
	movs r0, #6
	ldrsh r5, [r6, r0]
	ldr r0, [r6]
	bl sub_08067BF8
	lsls r0, r0, #0x10
	asrs r0, r0, #0x11
	adds r5, r5, r0
	ldr r0, [r6]
	bl sub_08067BF8
	adds r4, r0, #0
	ldr r0, [r6]
	bl sub_08067C14
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r1, r4, #0
	muls r1, r0, r1
	adds r0, r1, #0
	muls r0, r5, r0
	add r8, r0
	adds r7, r7, r1
	adds r6, #0xc
_080689A4:
	ldr r0, [r6]
	cmp r0, #1
	bne _08068970
	cmp r7, #0
	bne _080689B8
	ldr r0, _080689B4 @ =0x7FFFFFFF
	b _080689C0
	.align 2, 0
_080689B4: .4byte 0x7FFFFFFF
_080689B8:
	mov r0, r8
	adds r1, r7, #0
	bl Div
_080689C0:
	mov r8, r0
	mov r0, r8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start PlaySFX
PlaySFX: @ 0x080689D0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r2, #0
	adds r6, r3, #0
	bl sub_08067DB4
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl sub_08067ED4
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_080689EC
sub_080689EC: @ 0x080689EC
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r2, #0
	bl sub_08067DB4
	adds r0, r4, #0
	bl sub_08068938
	adds r1, r0, #0
	adds r0, r5, #0
	movs r2, #1
	bl sub_08067ED4
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08068A0C
sub_08068A0C: @ 0x08068A0C
	ldr r0, _08068A1C @ =0x020200A8
	ldr r0, [r0]
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	beq _08068A20
	movs r0, #0
	b _08068A22
	.align 2, 0
_08068A1C: .4byte 0x020200A8
_08068A20:
	movs r0, #1
_08068A22:
	bx lr

	thumb_func_start sub_08068A24
sub_08068A24: @ 0x08068A24
	push {lr}
	ldr r0, _08068A34 @ =0x020200A8
	ldr r0, [r0]
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_08068A34: .4byte 0x020200A8

	thumb_func_start sub_08068A38
sub_08068A38: @ 0x08068A38
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_08050348
	ldr r4, _08068A60 @ =0x020200A8
	ldr r0, _08068A64 @ =0x08C4A6E4
	movs r1, #3
	bl Proc_Start
	str r0, [r4]
	str r5, [r0, #0x5c]
	movs r2, #0
	movs r1, #0
	strh r1, [r0, #0x2c]
	adds r0, #0x29
	strb r2, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08068A60: .4byte 0x020200A8
_08068A64: .4byte 0x08C4A6E4

	thumb_func_start sub_08068A68
sub_08068A68: @ 0x08068A68
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r7, #0
	movs r1, #0
	mov r8, r1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #1
	bne _08068AC4
	ldr r0, [r4, #0x5c]
	bl sub_0804FFAC
	adds r0, r5, #0
	bl sub_0804FFAC
	adds r0, r5, #0
	bl sub_08068D2C
	adds r0, r5, #0
	bl sub_08068E24
	ldr r2, _08068AC0 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r3, [r2, #1]
	ands r0, r3
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	b _08068D16
	.align 2, 0
_08068AC0: .4byte gDispIo
_08068AC4:
	cmp r1, #0x5f
	bne _08068AF4
	ldr r0, [r4, #0x5c]
	movs r1, #0xa
	bl sub_0804F7B8
	ldr r0, _08068AF0 @ =0x0000013B
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl PlaySFX
	movs r0, #1
	movs r1, #0
	movs r2, #8
	bl SetBgOffset
	b _08068D16
	.align 2, 0
_08068AF0: .4byte 0x0000013B
_08068AF4:
	cmp r1, #0x6a
	bne _08068B18
	ldr r1, [r4, #0x5c]
	ldr r0, _08068B14 @ =0x0000F3FF
	ldrh r2, [r1, #8]
	ands r0, r2
	strh r0, [r1, #8]
	ldr r1, [r4, #0x5c]
	movs r3, #0x80
	lsls r3, r3, #3
	adds r0, r3, #0
	ldrh r2, [r1, #8]
	orrs r0, r2
	strh r0, [r1, #8]
	b _08068D16
	.align 2, 0
_08068B14: .4byte 0x0000F3FF
_08068B18:
	cmp r1, #0x74
	bne _08068B28
	ldr r0, [r4, #0x5c]
	movs r1, #0xc
	movs r2, #0
	bl sub_08069180
	b _08068D16
_08068B28:
	cmp r1, #0x78
	bne _08068B34
	ldr r0, [r4, #0x5c]
	bl sub_08068F28
	b _08068D16
_08068B34:
	cmp r1, #0x80
	bne _08068B40
	movs r0, #1
	bl sub_08055034
	b _08068D16
_08068B40:
	cmp r1, #0x7e
	bne _08068B84
	ldr r0, [r4, #0x5c]
	movs r1, #2
	str r1, [sp]
	movs r1, #0x38
	movs r2, #7
	movs r3, #0
	bl sub_080560A4
	adds r2, r0, #0
	ldr r0, [r4, #0x5c]
	movs r1, #0x40
	str r1, [sp]
	adds r1, r2, #0
	movs r2, #0x38
	movs r3, #0
	bl sub_0806925C
	ldr r0, [r4, #0x5c]
	movs r1, #0x38
	movs r2, #0
	bl sub_080565FC
	ldr r0, [r4, #0x5c]
	mov r3, r8
	str r3, [sp]
	str r3, [sp, #4]
	movs r1, #0
	movs r2, #0x38
	movs r3, #0x10
	bl sub_080566F0
	b _08068D16
_08068B84:
	cmp r1, #0xf2
	bne _08068C1C
	ldr r0, [r4, #0x5c]
	bl sub_08068D70
	ldr r0, [r4, #0x5c]
	bl sub_08068EA8
	ldr r6, _08068C18 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r6, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r6, #1]
	ldr r0, [r4, #0x5c]
	movs r1, #2
	str r1, [sp]
	movs r1, #0x38
	movs r2, #7
	movs r3, #0x40
	bl sub_080560A4
	adds r2, r0, #0
	ldr r0, [r4, #0x5c]
	mov r3, r8
	str r3, [sp]
	adds r1, r2, #0
	movs r2, #0x38
	movs r3, #0x40
	bl sub_0806925C
	ldr r0, [r4, #0x5c]
	movs r1, #0x38
	movs r2, #0
	bl sub_080565FC
	adds r2, r6, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r6, #0
	adds r0, #0x44
	strb r7, [r0]
	adds r0, #1
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r7, [r0]
	ldr r0, [r4, #0x5c]
	str r1, [sp]
	mov r2, r8
	str r2, [sp, #4]
	movs r1, #0
	movs r2, #0x38
	movs r3, #0
	bl sub_080566F0
	movs r0, #0x9e
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	b _08068CFA
	.align 2, 0
_08068C18: .4byte gDispIo
_08068C1C:
	movs r0, #0x9c
	lsls r0, r0, #1
	cmp r1, r0
	bne _08068C4C
	movs r0, #0
	bl sub_0805506C
	ldr r0, _08068C48 @ =0x0000F3FF
	ldrh r1, [r5, #8]
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r5, #8]
	adds r0, r5, #0
	movs r1, #0xc
	movs r2, #1
	bl sub_08069180
	b _08068D16
	.align 2, 0
_08068C48: .4byte 0x0000F3FF
_08068C4C:
	movs r0, #0x9f
	lsls r0, r0, #1
	cmp r1, r0
	bne _08068C6E
	adds r0, r5, #0
	bl sub_08068F28
	ldr r0, [r4, #0x5c]
	movs r1, #0xa
	bl sub_0804F7B8
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	b _08068D16
_08068C6E:
	movs r3, #0x2c
	ldrsh r1, [r4, r3]
	movs r0, #0xa5
	lsls r0, r0, #1
	cmp r1, r0
	bne _08068C90
	ldr r0, _08068C8C @ =0x0000F3FF
	ldrh r1, [r5, #8]
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r5, #8]
	b _08068D16
	.align 2, 0
_08068C8C: .4byte 0x0000F3FF
_08068C90:
	movs r0, #0xad
	lsls r0, r0, #1
	cmp r1, r0
	bne _08068CA8
	bl sub_080503A0
	adds r0, r5, #0
	movs r1, #0xa
	movs r2, #0x46
	bl sub_0804F8D8
	b _08068D16
_08068CA8:
	movs r0, #0xb2
	lsls r0, r0, #1
	cmp r1, r0
	bne _08068D08
	adds r0, r5, #0
	movs r1, #0x82
	bl sub_08068F8C
	adds r0, r5, #0
	movs r1, #0x82
	bl sub_080690F8
	movs r0, #0
	str r0, [sp]
	movs r0, #2
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r1, #0x5a
	movs r2, #0x28
	movs r3, #0xe
	bl sub_080566F0
	movs r4, #0x80
	lsls r4, r4, #1
	movs r0, #1
	str r0, [sp]
	adds r0, r5, #0
	movs r1, #0x82
	movs r2, #0xa
	adds r3, r4, #0
	bl sub_080560A4
	adds r0, r5, #0
	movs r1, #0x82
	movs r2, #0
	bl sub_080565FC
	ldr r0, _08068D04 @ =0x0000013D
	movs r3, #2
	ldrsh r2, [r5, r3]
	adds r1, r4, #0
_08068CFA:
	movs r3, #1
	bl PlaySFX
	b _08068D16
	.align 2, 0
_08068D04: .4byte 0x0000013D
_08068D08:
	movs r0, #0x94
	lsls r0, r0, #2
	cmp r1, r0
	bne _08068D16
	adds r0, r4, #0
	bl Proc_Break
_08068D16:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08068D24
sub_08068D24: @ 0x08068D24
	adds r0, #0x29
	movs r1, #1
	strb r1, [r0]
	bx lr

	thumb_func_start sub_08068D2C
sub_08068D2C: @ 0x08068D2C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08068D5C @ =0x08C4A704
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _08068D60 @ =0x082EB7AC
	str r1, [r0, #0x48]
	ldr r1, _08068D64 @ =0x08C4A71C
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r1, _08068D68 @ =0x08C4A778
	str r1, [r0, #0x54]
	ldr r1, _08068D6C @ =0x08C4A7D4
	str r1, [r0, #0x58]
	bl SpellFx_SetSomeColorEffect
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08068D5C: .4byte 0x08C4A704
_08068D60: .4byte 0x082EB7AC
_08068D64: .4byte 0x08C4A71C
_08068D68: .4byte 0x08C4A778
_08068D6C: .4byte 0x08C4A7D4

	thumb_func_start sub_08068D70
sub_08068D70: @ 0x08068D70
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08068DA0 @ =0x08C4A704
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _08068DA4 @ =0x082EB81E
	str r1, [r0, #0x48]
	ldr r1, _08068DA8 @ =0x08C4A71C
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r1, _08068DAC @ =0x08C4A778
	str r1, [r0, #0x54]
	ldr r1, _08068DB0 @ =0x08C4A7D4
	str r1, [r0, #0x58]
	bl SpellFx_SetSomeColorEffect
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08068DA0: .4byte 0x08C4A704
_08068DA4: .4byte 0x082EB81E
_08068DA8: .4byte 0x08C4A71C
_08068DAC: .4byte 0x08C4A778
_08068DB0: .4byte 0x08C4A7D4

	thumb_func_start sub_08068DB4
sub_08068DB4: @ 0x08068DB4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r5, r0, #0x10
	cmp r5, #0
	blt _08068E02
	ldr r6, [r7, #0x4c]
	ldr r0, [r7, #0x50]
	mov r8, r0
	ldr r0, [r7, #0x54]
	ldr r4, [r7, #0x58]
	lsls r5, r5, #2
	adds r0, r5, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	adds r4, r5, r4
	ldr r0, [r4]
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	ldr r0, [r7, #0x5c]
	adds r6, r5, r6
	ldr r1, [r6]
	add r5, r8
	ldr r2, [r5]
	bl SpellFx_WriteBgMap
	b _08068E18
_08068E02:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r5, r0
	bne _08068E18
	bl SpellFx_ClearBG1
	bl SpellFx_ClearColorEffects
	adds r0, r7, #0
	bl Proc_End
_08068E18:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08068E24
sub_08068E24: @ 0x08068E24
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08068E3C @ =0x08C4A830
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08068E3C: .4byte 0x08C4A830

	thumb_func_start sub_08068E40
sub_08068E40: @ 0x08068E40
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	beq _08068E82
	cmp r0, #0x11
	beq _08068E82
	cmp r0, #0x22
	beq _08068E82
	cmp r0, #0x28
	beq _08068E82
	cmp r0, #0x2e
	beq _08068E82
	cmp r0, #0x34
	beq _08068E82
	cmp r0, #0x3a
	beq _08068E82
	cmp r0, #0x3e
	beq _08068E82
	cmp r0, #0x42
	beq _08068E82
	cmp r0, #0x44
	beq _08068E82
	movs r1, #0x2c
	ldrsh r0, [r2, r1]
	cmp r0, #0x46
	beq _08068E82
	cmp r0, #0x48
	bne _08068E98
_08068E82:
	movs r0, #0x9f
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r2, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl PlaySFX
	b _08068EA2
_08068E98:
	cmp r0, #0x50
	bne _08068EA2
	adds r0, r2, #0
	bl Proc_Break
_08068EA2:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08068EA8
sub_08068EA8: @ 0x08068EA8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08068EC0 @ =0x08C4A848
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08068EC0: .4byte 0x08C4A848

	thumb_func_start sub_08068EC4
sub_08068EC4: @ 0x08068EC4
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x56
	beq _08068F02
	cmp r0, #0x58
	beq _08068F02
	cmp r0, #0x5a
	beq _08068F02
	cmp r0, #0x5c
	beq _08068F02
	cmp r0, #0x5e
	beq _08068F02
	cmp r0, #0x60
	beq _08068F02
	cmp r0, #0x62
	beq _08068F02
	cmp r0, #0x64
	beq _08068F02
	cmp r0, #0x66
	beq _08068F02
	cmp r0, #0x68
	beq _08068F02
	movs r1, #0x2c
	ldrsh r0, [r2, r1]
	cmp r0, #0x6a
	bne _08068F18
_08068F02:
	movs r0, #0x9f
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r2, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl PlaySFX
	b _08068F22
_08068F18:
	cmp r0, #0x6e
	bne _08068F22
	adds r0, r2, #0
	bl Proc_Break
_08068F22:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08068F28
sub_08068F28: @ 0x08068F28
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, _08068F64 @ =0x08C4A860
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	ldr r3, _08068F68 @ =0x08C265CC
	str r3, [sp]
	adds r0, r4, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r5, #0x60]
	ldr r0, _08068F6C @ =0x082022A8
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _08068F70 @ =0x08201E10
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08068F64: .4byte 0x08C4A860
_08068F68: .4byte 0x08C265CC
_08068F6C: .4byte 0x082022A8
_08068F70: .4byte 0x08201E10

	thumb_func_start sub_08068F74
sub_08068F74: @ 0x08068F74
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x60]
	bl AnimDelete
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08068F8C
sub_08068F8C: @ 0x08068F8C
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r0, _0806907C @ =0x08C4A880
	movs r1, #3
	bl Proc_Start
	str r5, [r0, #0x5c]
	movs r6, #0
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r4, [r0, #0x2e]
	ldr r0, _08069080 @ =0x081FC214
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	ldr r0, _08069084 @ =0x08279658
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, _08069088 @ =0x08279758
	ldr r1, _0806908C @ =gBg1Tm
	movs r2, #1
	str r2, [sp]
	adds r2, #0xff
	str r2, [sp, #4]
	movs r2, #0x20
	movs r3, #0x20
	bl sub_080672B8
	movs r0, #2
	bl EnableBgSync
	bl SpellFx_SetSomeColorEffect
	ldr r0, _08069090 @ =gDispIo
	mov ip, r0
	mov r2, ip
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	mov r1, ip
	adds r1, #0x44
	movs r0, #0xe
	strb r0, [r1]
	adds r1, #1
	movs r4, #8
	movs r0, #8
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x46
	strb r6, [r0]
	mov r6, ip
	adds r6, #0x37
	movs r3, #0x20
	ldrb r1, [r6]
	orrs r1, r3
	movs r0, #0x21
	rsbs r0, r0, #0
	mov r2, ip
	ldrb r2, [r2, #1]
	ands r0, r2
	movs r2, #0x41
	rsbs r2, r2, #0
	ands r0, r2
	movs r2, #0x80
	orrs r0, r2
	mov r7, ip
	strb r0, [r7, #1]
	movs r0, #2
	rsbs r0, r0, #0
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	movs r0, #4
	orrs r1, r0
	orrs r1, r4
	movs r0, #0x10
	orrs r1, r0
	strb r1, [r6]
	ldr r0, _08069094 @ =0x0000FFE0
	ldrh r1, [r7, #0x3c]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	ldr r1, _08069098 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xe0
	lsls r2, r2, #5
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r7, #0x3c]
	mov r0, ip
	adds r0, #0x3d
	ldrb r7, [r0]
	orrs r3, r7
	strb r3, [r0]
	ldr r0, [r5, #0x1c]
	movs r1, #0x80
	lsls r1, r1, #4
	orrs r0, r1
	str r0, [r5, #0x1c]
	ldr r0, _0806909C @ =0x0000F3FF
	ldrh r1, [r5, #8]
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r5, #8]
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806907C: .4byte 0x08C4A880
_08069080: .4byte 0x081FC214
_08069084: .4byte 0x08279658
_08069088: .4byte 0x08279758
_0806908C: .4byte gBg1Tm
_08069090: .4byte gDispIo
_08069094: .4byte 0x0000FFE0
_08069098: .4byte 0x0000E0FF
_0806909C: .4byte 0x0000F3FF

	thumb_func_start sub_080690A0
sub_080690A0: @ 0x080690A0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, [r4, #0x5c]
	ldr r1, _080690EC @ =gDispIo
	ldrh r0, [r1, #0x22]
	subs r0, #1
	strh r0, [r1, #0x22]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _080690E4
	bl SpellFx_ClearBG1
	bl SpellFx_ClearColorEffects
	ldr r0, [r5, #0x1c]
	ldr r1, _080690F0 @ =0xFFFFF7FF
	ands r0, r1
	str r0, [r5, #0x1c]
	ldr r0, _080690F4 @ =0x0000F3FF
	ldrh r1, [r5, #8]
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r5, #8]
	adds r0, r4, #0
	bl Proc_Break
_080690E4:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080690EC: .4byte gDispIo
_080690F0: .4byte 0xFFFFF7FF
_080690F4: .4byte 0x0000F3FF

	thumb_func_start sub_080690F8
sub_080690F8: @ 0x080690F8
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _08069114 @ =0x08C4A898
	movs r1, #4
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08069114: .4byte 0x08C4A898

	thumb_func_start sub_08069118
sub_08069118: @ 0x08069118
	push {r4, lr}
	sub sp, #0x48
	adds r4, r0, #0
	ldr r2, [r4, #0x5c]
	mov r1, sp
	ldrh r0, [r2, #2]
	strh r0, [r1, #2]
	ldrh r0, [r2, #4]
	strh r0, [r1, #4]
	ldr r0, [r2, #0x3c]
	str r0, [sp, #0x3c]
	ldr r0, [r2, #0x1c]
	ldr r1, _08069174 @ =0xFFFFF7FF
	ands r0, r1
	str r0, [sp, #0x1c]
	mov r0, sp
	ldrh r1, [r2, #8]
	strh r1, [r0, #8]
	mov r2, sp
	ldr r0, _08069178 @ =0x0000F3FF
	ands r0, r1
	strh r0, [r2, #8]
	movs r3, #0x80
	lsls r3, r3, #4
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2, #8]
	mov r0, sp
	bl AnimDisplay
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _0806916A
	adds r0, r4, #0
	bl Proc_Break
_0806916A:
	add sp, #0x48
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08069174: .4byte 0xFFFFF7FF
_08069178: .4byte 0x0000F3FF

	thumb_func_start nullsub_57
nullsub_57: @ 0x0806917C
	bx lr
	.align 2, 0

	thumb_func_start sub_08069180
sub_08069180: @ 0x08069180
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	ldr r0, _080691A8 @ =0x08C4A8B8
	movs r1, #4
	bl Proc_Start
	adds r1, r0, #0
	str r4, [r1, #0x5c]
	movs r2, #0
	strh r2, [r1, #0x2c]
	strh r5, [r1, #0x2e]
	cmp r6, #0
	bne _080691AC
	strh r2, [r1, #0x32]
	movs r0, #0x10
	strh r0, [r1, #0x34]
	b _080691B2
	.align 2, 0
_080691A8: .4byte 0x08C4A8B8
_080691AC:
	movs r0, #0x10
	strh r0, [r1, #0x32]
	strh r2, [r1, #0x34]
_080691B2:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_080691B8
sub_080691B8: @ 0x080691B8
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r0, #0x32
	ldrsh r1, [r5, r0]
	movs r4, #0x34
	ldrsh r2, [r5, r4]
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r4, #0x2e
	ldrsh r0, [r5, r4]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	adds r6, r0, #0
	ldr r0, [r5, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _08069210
	ldr r0, _08069204 @ =0x02000054
	ldr r0, [r0]
	ldr r4, _08069208 @ =0x02022B40
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	ldr r0, _0806920C @ =0xFFFFFD20
	adds r4, r4, r0
	adds r0, r4, #0
	movs r1, #0x17
	movs r2, #1
	adds r3, r6, #0
	bl sub_080676D4
	b _0806922E
	.align 2, 0
_08069204: .4byte 0x02000054
_08069208: .4byte 0x02022B40
_0806920C: .4byte 0xFFFFFD20
_08069210:
	ldr r0, _08069250 @ =0x02000054
	ldr r0, [r0, #4]
	ldr r4, _08069254 @ =0x02022B80
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	ldr r2, _08069258 @ =0xFFFFFCE0
	adds r4, r4, r2
	adds r0, r4, #0
	movs r1, #0x19
	movs r2, #1
	adds r3, r6, #0
	bl sub_080676D4
_0806922E:
	bl EnablePalSync
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	ldrh r4, [r5, #0x2e]
	lsls r1, r4, #0x10
	cmp r0, r1
	ble _08069248
	adds r0, r5, #0
	bl Proc_Break
_08069248:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08069250: .4byte 0x02000054
_08069254: .4byte 0x02022B80
_08069258: .4byte 0xFFFFFCE0

	thumb_func_start sub_0806925C
sub_0806925C: @ 0x0806925C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	mov r8, r1
	adds r5, r2, #0
	adds r6, r3, #0
	ldr r7, [sp, #0x18]
	ldr r1, _08069298 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0806929C @ =0x08C4A8D0
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	str r6, [r0, #0x44]
	str r7, [r0, #0x48]
	mov r1, r8
	str r1, [r0, #0x64]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069298: .4byte 0x0201774C
_0806929C: .4byte 0x08C4A8D0

	thumb_func_start sub_080692A0
sub_080692A0: @ 0x080692A0
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r4, [r5, #0x64]
	ldr r1, [r5, #0x44]
	ldr r2, [r5, #0x48]
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r6, #0x2e
	ldrsh r0, [r5, r6]
	str r0, [sp]
	movs r0, #4
	bl Interpolate
	str r0, [r4, #0x4c]
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r5, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _080692DC
	ldr r1, _080692E4 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r5, #0
	bl Proc_Break
_080692DC:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080692E4: .4byte 0x0201774C

	thumb_func_start sub_080692E8
sub_080692E8: @ 0x080692E8
	ldr r0, _080692F8 @ =0x020200AC
	ldr r0, [r0]
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	beq _080692FC
	movs r0, #0
	b _080692FE
	.align 2, 0
_080692F8: .4byte 0x020200AC
_080692FC:
	movs r0, #1
_080692FE:
	bx lr

	thumb_func_start sub_08069300
sub_08069300: @ 0x08069300
	push {lr}
	ldr r0, _08069310 @ =0x020200AC
	ldr r0, [r0]
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_08069310: .4byte 0x020200AC

	thumb_func_start sub_08069314
sub_08069314: @ 0x08069314
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r2, r0, #0
	ldr r0, [r2, #0x5c]
	cmp r0, #0
	bne _0806933C
	ldr r0, _08069330 @ =gpEkrBattleUnitLeft
	ldr r4, [r0]
	ldr r0, _08069334 @ =0x02020100
	adds r6, r4, #0
	str r6, [r0]
	ldr r0, _08069338 @ =gpEkrBattleUnitRight
	b _08069348
	.align 2, 0
_08069330: .4byte gpEkrBattleUnitLeft
_08069334: .4byte 0x02020100
_08069338: .4byte gpEkrBattleUnitRight
_0806933C:
	ldr r0, _08069458 @ =gpEkrBattleUnitRight
	ldr r4, [r0]
	ldr r0, _0806945C @ =0x02020100
	adds r6, r4, #0
	str r6, [r0]
	ldr r0, _08069460 @ =gpEkrBattleUnitLeft
_08069348:
	ldr r1, _08069464 @ =0x02020104
	ldr r3, [r0]
	str r3, [r1]
	adds r0, r2, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	beq _0806935A
	b _08069478
_0806935A:
	movs r0, #0xb
	ldrsb r0, [r6, r0]
	bl GetUnit
	adds r6, r0, #0
	ldr r1, _08069468 @ =0x02020108
	adds r3, r4, #0
	adds r3, #0x70
	movs r0, #0
	ldrsb r0, [r3, r0]
	strh r0, [r1]
	ldr r2, _0806946C @ =0x0202010C
	movs r0, #0x12
	ldrsb r0, [r6, r0]
	strh r0, [r2]
	movs r0, #0x14
	ldrsb r0, [r6, r0]
	strh r0, [r2, #2]
	movs r0, #0x15
	ldrsb r0, [r6, r0]
	strh r0, [r2, #4]
	movs r0, #0x19
	ldrsb r0, [r6, r0]
	strh r0, [r2, #8]
	movs r0, #0x16
	ldrsb r0, [r6, r0]
	strh r0, [r2, #6]
	movs r0, #0x17
	ldrsb r0, [r6, r0]
	strh r0, [r2, #0xa]
	movs r0, #0x18
	ldrsb r0, [r6, r0]
	strh r0, [r2, #0xc]
	ldr r0, [r6, #4]
	ldrb r0, [r0, #0x11]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r1, [r6]
	ldrb r1, [r1, #0x13]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	strh r0, [r2, #0xe]
	ldr r1, _08069470 @ =0x0202010A
	movs r0, #0
	ldrsb r0, [r3, r0]
	adds r0, #1
	strh r0, [r1]
	ldr r2, _08069474 @ =0x0202011C
	movs r0, #0x12
	ldrsb r0, [r6, r0]
	adds r1, r4, #0
	adds r1, #0x73
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	strh r0, [r2]
	movs r0, #0x14
	ldrsb r0, [r6, r0]
	adds r1, r4, #0
	adds r1, #0x74
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	strh r0, [r2, #2]
	movs r0, #0x15
	ldrsb r0, [r6, r0]
	adds r1, r4, #0
	adds r1, #0x75
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	strh r0, [r2, #4]
	movs r0, #0x19
	ldrsb r0, [r6, r0]
	adds r1, r4, #0
	adds r1, #0x79
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	strh r0, [r2, #8]
	movs r0, #0x16
	ldrsb r0, [r6, r0]
	adds r1, r4, #0
	adds r1, #0x76
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	strh r0, [r2, #6]
	movs r0, #0x17
	ldrsb r0, [r6, r0]
	adds r1, r4, #0
	adds r1, #0x77
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	strh r0, [r2, #0xa]
	movs r0, #0x18
	ldrsb r0, [r6, r0]
	adds r1, r4, #0
	adds r1, #0x78
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	strh r0, [r2, #0xc]
	ldr r0, [r6, #4]
	movs r1, #0x11
	ldrsb r1, [r0, r1]
	ldr r0, [r6]
	ldrb r0, [r0, #0x13]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r1, r0
	adds r0, r4, #0
	adds r0, #0x7a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _08069502
	.align 2, 0
_08069458: .4byte gpEkrBattleUnitRight
_0806945C: .4byte 0x02020100
_08069460: .4byte gpEkrBattleUnitLeft
_08069464: .4byte 0x02020104
_08069468: .4byte 0x02020108
_0806946C: .4byte 0x0202010C
_08069470: .4byte 0x0202010A
_08069474: .4byte 0x0202011C
_08069478:
	ldr r1, _0806952C @ =0x02020108
	movs r0, #8
	ldrsb r0, [r6, r0]
	strh r0, [r1]
	ldr r2, _08069530 @ =0x0202010C
	movs r0, #0x12
	ldrsb r0, [r6, r0]
	strh r0, [r2]
	movs r0, #0x14
	ldrsb r0, [r6, r0]
	strh r0, [r2, #2]
	movs r0, #0x15
	ldrsb r0, [r6, r0]
	strh r0, [r2, #4]
	movs r0, #0x19
	ldrsb r0, [r6, r0]
	strh r0, [r2, #8]
	movs r0, #0x16
	ldrsb r0, [r6, r0]
	strh r0, [r2, #6]
	movs r0, #0x17
	ldrsb r0, [r6, r0]
	strh r0, [r2, #0xa]
	movs r0, #0x18
	ldrsb r0, [r6, r0]
	strh r0, [r2, #0xc]
	ldr r0, [r6, #4]
	ldrb r0, [r0, #0x11]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r1, [r6]
	ldrb r1, [r1, #0x13]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	strh r0, [r2, #0xe]
	ldr r1, _08069534 @ =0x0202010A
	movs r0, #1
	strh r0, [r1]
	ldr r2, _08069538 @ =0x0202011C
	movs r0, #0x12
	ldrsb r0, [r3, r0]
	strh r0, [r2]
	movs r0, #0x14
	ldrsb r0, [r3, r0]
	strh r0, [r2, #2]
	movs r0, #0x15
	ldrsb r0, [r3, r0]
	strh r0, [r2, #4]
	movs r0, #0x19
	ldrsb r0, [r3, r0]
	strh r0, [r2, #8]
	movs r0, #0x16
	ldrsb r0, [r3, r0]
	strh r0, [r2, #6]
	movs r0, #0x17
	ldrsb r0, [r3, r0]
	strh r0, [r2, #0xa]
	movs r0, #0x18
	ldrsb r0, [r3, r0]
	strh r0, [r2, #0xc]
	ldr r0, [r3, #4]
	ldrb r0, [r0, #0x11]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r1, [r3]
	ldrb r1, [r1, #0x13]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
_08069502:
	adds r0, r0, r1
	strh r0, [r2, #0xe]
	ldr r0, _0806953C @ =0x02017648
	ldr r1, _08069540 @ =0x06002400
	movs r2, #0x90
	lsls r2, r2, #1
	movs r3, #0
	bl InitTextFont
	movs r7, #0
	movs r0, #0
	mov r8, r0
_0806951A:
	adds r0, r6, #0
	bl UnitHasMagicRank
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08069548
	ldr r0, _08069544 @ =0x082EB864
	b _0806954A
	.align 2, 0
_0806952C: .4byte 0x02020108
_08069530: .4byte 0x0202010C
_08069534: .4byte 0x0202010A
_08069538: .4byte 0x0202011C
_0806953C: .4byte 0x02017648
_08069540: .4byte 0x06002400
_08069544: .4byte 0x082EB864
_08069548:
	ldr r0, _08069678 @ =0x082EB88C
_0806954A:
	mov r1, r8
	adds r5, r1, r0
	lsls r1, r7, #3
	ldr r0, _0806967C @ =0x02017660
	adds r4, r1, r0
	adds r0, r4, #0
	movs r1, #3
	bl InitText
	adds r0, r5, #0
	bl GetStringTextLen
	adds r1, r0, #0
	movs r0, #0x10
	subs r0, r0, r1
	asrs r1, r0, #1
	cmp r1, #0
	bge _08069570
	movs r1, #0
_08069570:
	adds r0, r4, #0
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #3
	bl Text_SetColor
	adds r0, r4, #0
	adds r1, r5, #0
	bl Text_DrawString
	ldr r1, _08069680 @ =0x082EB8B4
	lsls r0, r7, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	lsls r1, r0, #1
	ldr r0, _08069684 @ =gBg2Tm
	adds r1, r1, r0
	adds r0, r4, #0
	bl PutText
	movs r0, #5
	add r8, r0
	adds r7, #1
	cmp r7, #7
	ble _0806951A
	movs r7, #0
_080695A6:
	lsls r5, r7, #3
	ldr r1, _08069688 @ =0x020176A0
	mov r8, r1
	add r5, r8
	adds r0, r5, #0
	movs r1, #2
	bl InitText
	adds r0, r5, #0
	movs r1, #8
	bl Text_SetCursor
	adds r0, r5, #0
	movs r1, #2
	bl Text_SetColor
	ldr r0, _0806968C @ =0x0202010C
	lsls r4, r7, #1
	adds r0, r4, r0
	ldrh r1, [r0]
	adds r0, r5, #0
	bl Text_DrawNumber
	ldr r0, _08069680 @ =0x082EB8B4
	adds r4, r4, r0
	ldrh r4, [r4]
	lsls r1, r4, #1
	ldr r6, _08069690 @ =0x02023C66
	adds r1, r1, r6
	adds r0, r5, #0
	bl PutText
	adds r7, #1
	cmp r7, #7
	ble _080695A6
	mov r4, r8
	adds r4, #0x40
	adds r0, r4, #0
	movs r1, #8
	bl InitText
	ldr r0, _08069694 @ =0x02020100
	ldr r0, [r0]
	ldr r0, [r0, #4]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	movs r0, #0xdf
	lsls r0, r0, #1
	adds r1, r6, r0
	adds r0, r4, #0
	bl PutText
	adds r4, #8
	adds r0, r4, #0
	movs r1, #3
	bl InitText
	adds r0, r4, #0
	movs r1, #3
	bl Text_SetColor
	ldr r1, _08069698 @ =0x082EB8C4
	adds r0, r4, #0
	bl Text_DrawString
	movs r0, #0xe7
	lsls r0, r0, #1
	adds r1, r6, r0
	adds r0, r4, #0
	bl PutText
	adds r4, #8
	adds r0, r4, #0
	movs r1, #2
	bl InitText
	adds r0, r4, #0
	movs r1, #8
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #2
	bl Text_SetColor
	ldr r0, _0806969C @ =0x02020108
	ldrh r1, [r0]
	adds r0, r4, #0
	bl Text_DrawNumber
	movs r0, #0xea
	lsls r0, r0, #1
	adds r1, r6, r0
	adds r0, r4, #0
	bl PutText
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069678: .4byte 0x082EB88C
_0806967C: .4byte 0x02017660
_08069680: .4byte 0x082EB8B4
_08069684: .4byte gBg2Tm
_08069688: .4byte 0x020176A0
_0806968C: .4byte 0x0202010C
_08069690: .4byte 0x02023C66
_08069694: .4byte 0x02020100
_08069698: .4byte 0x082EB8C4
_0806969C: .4byte 0x02020108

	thumb_func_start sub_080696A0
sub_080696A0: @ 0x080696A0
	push {r4, r5, lr}
	adds r4, r1, #0
	lsls r5, r4, #3
	ldr r0, _080696E8 @ =0x020176A0
	adds r5, r5, r0
	adds r0, r5, #0
	bl ClearText
	adds r0, r5, #0
	movs r1, #8
	bl Text_SetCursor
	adds r0, r5, #0
	movs r1, #2
	bl Text_SetColor
	ldr r0, _080696EC @ =0x0202010C
	lsls r4, r4, #1
	adds r0, r4, r0
	ldrh r1, [r0]
	adds r0, r5, #0
	bl Text_DrawNumber
	ldr r0, _080696F0 @ =0x082EB8B4
	adds r4, r4, r0
	ldrh r4, [r4]
	lsls r1, r4, #1
	ldr r0, _080696F4 @ =0x02023C66
	adds r1, r1, r0
	adds r0, r5, #0
	bl PutText
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080696E8: .4byte 0x020176A0
_080696EC: .4byte 0x0202010C
_080696F0: .4byte 0x082EB8B4
_080696F4: .4byte 0x02023C66

	thumb_func_start sub_080696F8
sub_080696F8: @ 0x080696F8
	push {r4, lr}
	ldr r4, _08069724 @ =0x020176E0
	adds r0, r4, #0
	bl ClearText
	ldr r0, _08069728 @ =0x02020100
	ldr r0, [r0]
	ldr r0, [r0, #4]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	ldr r1, _0806972C @ =0x02023E24
	adds r0, r4, #0
	bl PutText
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08069724: .4byte 0x020176E0
_08069728: .4byte 0x02020100
_0806972C: .4byte 0x02023E24

	thumb_func_start sub_08069730
sub_08069730: @ 0x08069730
	push {r4, lr}
	ldr r4, _08069764 @ =0x020176F0
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	movs r1, #8
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #2
	bl Text_SetColor
	ldr r0, _08069768 @ =0x02020108
	ldrh r1, [r0]
	adds r0, r4, #0
	bl Text_DrawNumber
	ldr r1, _0806976C @ =0x02023E3A
	adds r0, r4, #0
	bl PutText
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08069764: .4byte 0x020176F0
_08069768: .4byte 0x02020108
_0806976C: .4byte 0x02023E3A

	thumb_func_start sub_08069770
sub_08069770: @ 0x08069770
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r5, _0806979C @ =0x020200AC
	ldr r0, _080697A0 @ =0x08C4A908
	movs r1, #3
	bl Proc_Start
	adds r6, r0, #0
	str r6, [r5]
	str r4, [r6, #0x5c]
	adds r0, r4, #0
	bl GetCoreAIStruct
	str r0, [r6, #0x60]
	ldr r0, _080697A4 @ =gEkrDistanceType
	ldrh r0, [r0]
	cmp r0, #4
	beq _080697A8
	adds r1, r6, #0
	adds r1, #0x2a
	movs r0, #0
	b _080697AE
	.align 2, 0
_0806979C: .4byte 0x020200AC
_080697A0: .4byte 0x08C4A908
_080697A4: .4byte gEkrDistanceType
_080697A8:
	adds r1, r6, #0
	adds r1, #0x2a
	movs r0, #1
_080697AE:
	strb r0, [r1]
	movs r0, #0
	movs r1, #0
	strh r1, [r6, #0x2c]
	adds r1, r6, #0
	adds r1, #0x29
	strb r0, [r1]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080697C4
sub_080697C4: @ 0x080697C4
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2a
	ldrb r1, [r0]
	cmp r1, #0
	beq _080697D8
	adds r0, r4, #0
	bl Proc_Break
	b _0806982A
_080697D8:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _080697F6
	bl sub_08050348
	ldr r0, [r4, #0x5c]
	movs r1, #0x78
	movs r2, #0x58
	bl sub_0806A740
	b _0806982A
_080697F6:
	cmp r0, #0x19
	bne _08069808
	ldr r0, [r4, #0x5c]
	bl sub_0806A6B0
	ldr r0, [r4, #0x5c]
	bl sub_0806A7AC
	b _0806982A
_08069808:
	cmp r0, #0x3b
	bne _08069814
	ldr r0, [r4, #0x5c]
	bl sub_0806A610
	b _0806982A
_08069814:
	cmp r0, #0x49
	bne _0806981E
	bl sub_080503A0
	b _0806982A
_0806981E:
	cmp r0, #0x53
	bne _0806982A
	strh r1, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
_0806982A:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_08069830
sub_08069830: @ 0x08069830
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	mov sb, r0
	ldr r7, _080698E0 @ =0x020200D8
	movs r4, #0
	str r4, [sp]
	ldr r5, _080698E4 @ =gBg1Tm
	ldr r0, _080698E8 @ =0x01000200
	mov r8, r0
	mov r0, sp
	adds r1, r5, #0
	mov r2, r8
	bl CpuFastSet
	str r4, [sp, #4]
	add r0, sp, #4
	ldr r6, _080698EC @ =gBg2Tm
	adds r1, r6, #0
	mov r2, r8
	bl CpuFastSet
	ldr r1, _080698F0 @ =0x06006800
	movs r4, #0x80
	lsls r4, r4, #4
	adds r0, r5, #0
	adds r2, r4, #0
	bl RegisterDataMove
	ldr r1, _080698F4 @ =0x06007000
	adds r0, r5, #0
	adds r2, r4, #0
	bl RegisterDataMove
	ldr r1, _080698F8 @ =0x06005000
	adds r0, r6, #0
	adds r2, r4, #0
	bl RegisterDataMove
	ldr r1, _080698FC @ =0x06005800
	adds r0, r6, #0
	adds r2, r4, #0
	bl RegisterDataMove
	ldr r1, _08069900 @ =0x0203E000
	ldrh r4, [r1]
	strh r4, [r7]
	movs r0, #3
	strh r0, [r7, #2]
	adds r0, #0xfd
	strh r0, [r7, #4]
	ldrh r3, [r1, #2]
	strh r3, [r7, #6]
	movs r0, #4
	strh r0, [r7, #8]
	movs r0, #0xa0
	lsls r0, r0, #1
	strh r0, [r7, #0xa]
	ldr r0, _08069904 @ =gEkrDistanceType
	ldrh r1, [r0]
	strh r1, [r7, #0xc]
	ldr r0, _08069908 @ =0x0000FFFF
	adds r2, r0, #0
	ldrh r0, [r7, #0xe]
	orrs r0, r2
	strh r0, [r7, #0xe]
	ldr r0, _0806990C @ =0x06010000
	str r0, [r7, #0x1c]
	ldr r0, _08069910 @ =0x020145C8
	str r0, [r7, #0x20]
	ldr r0, _08069914 @ =0x0203DFE6
	ldrh r0, [r0]
	strh r0, [r7, #0x10]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	cmp r1, #2
	bne _08069922
	ldr r0, _08069918 @ =0x02017744
	ldr r0, [r0]
	cmp r0, #0
	bne _0806991C
	adds r0, r3, #0
	orrs r0, r2
	strh r0, [r7, #6]
	b _08069922
	.align 2, 0
_080698E0: .4byte 0x020200D8
_080698E4: .4byte gBg1Tm
_080698E8: .4byte 0x01000200
_080698EC: .4byte gBg2Tm
_080698F0: .4byte 0x06006800
_080698F4: .4byte 0x06007000
_080698F8: .4byte 0x06005000
_080698FC: .4byte 0x06005800
_08069900: .4byte 0x0203E000
_08069904: .4byte gEkrDistanceType
_08069908: .4byte 0x0000FFFF
_0806990C: .4byte 0x06010000
_08069910: .4byte 0x020145C8
_08069914: .4byte 0x0203DFE6
_08069918: .4byte 0x02017744
_0806991C:
	adds r0, r4, #0
	orrs r0, r2
	strh r0, [r7]
_08069922:
	bl sub_08055CD8
	cmp r0, #0
	bne _0806994A
	adds r0, r7, #0
	bl sub_08055718
	ldr r3, [r7, #0x14]
	ldr r0, [r3, #0x4c]
	ldr r2, _08069A6C @ =0x0000F3FF
	ands r0, r2
	movs r1, #0xc0
	lsls r1, r1, #4
	orrs r0, r1
	str r0, [r3, #0x4c]
	ldr r3, [r7, #0x18]
	ldr r0, [r3, #0x4c]
	ands r0, r2
	orrs r0, r1
	str r0, [r3, #0x4c]
_0806994A:
	mov r1, sb
	ldr r2, [r1, #0x5c]
	ldr r1, _08069A6C @ =0x0000F3FF
	adds r0, r1, #0
	ldrh r3, [r2, #8]
	ands r0, r3
	strh r0, [r2, #8]
	mov r0, sb
	ldr r2, [r0, #0x5c]
	movs r0, #0xc0
	lsls r0, r0, #4
	adds r3, r0, #0
	ldrh r0, [r2, #8]
	orrs r0, r3
	strh r0, [r2, #8]
	mov r2, sb
	ldr r0, [r2, #0x60]
	ldrh r2, [r0, #8]
	ands r1, r2
	strh r1, [r0, #8]
	mov r0, sb
	ldr r1, [r0, #0x60]
	movs r4, #0
	ldrh r0, [r1, #8]
	orrs r0, r3
	strh r0, [r1, #8]
	ldr r5, _08069A70 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r5, #0x14]
	ands r0, r2
	strb r0, [r5, #0x14]
	adds r0, r1, #0
	ldrb r3, [r5, #0x10]
	ands r0, r3
	movs r2, #1
	orrs r0, r2
	strb r0, [r5, #0x10]
	ldrb r0, [r5, #0xc]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r5, #0xc]
	movs r0, #3
	ldrb r1, [r5, #0x18]
	orrs r0, r1
	strb r0, [r5, #0x18]
	ldr r0, _08069A74 @ =0x0202012C
	movs r1, #0x90
	strh r1, [r0]
	ldr r0, _08069A78 @ =0x0202012E
	strh r1, [r0]
	movs r0, #2
	movs r1, #0
	movs r2, #8
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #8
	bl SetBgOffset
	movs r1, #0xc0
	lsls r1, r1, #7
	movs r0, #0
	bl SetBgTilemapOffset
	movs r1, #0xd0
	lsls r1, r1, #7
	movs r0, #1
	bl SetBgTilemapOffset
	movs r1, #0xa0
	lsls r1, r1, #7
	movs r0, #2
	bl SetBgTilemapOffset
	movs r0, #1
	movs r1, #1
	bl SetBgScreenSize
	movs r0, #2
	movs r1, #1
	bl SetBgScreenSize
	bl sub_0806A2D4
	ldr r1, _08069A7C @ =0x020200D0
	str r0, [r1]
	bl sub_0806A414
	ldr r1, _08069A80 @ =0x020200D4
	str r0, [r1]
	bl sub_0806A2EC
	movs r0, #2
	bl sub_0804CC68
	mov r2, sb
	ldr r0, [r2, #0x5c]
	bl sub_0804FFAC
	mov r3, sb
	ldr r0, [r3, #0x60]
	bl sub_0804FFAC
	bl sub_08050290
	bl sub_0804FC5C
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r5, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r5, #1]
	adds r1, r5, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x45
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	mov r0, sb
	bl Proc_Break
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069A6C: .4byte 0x0000F3FF
_08069A70: .4byte gDispIo
_08069A74: .4byte 0x0202012C
_08069A78: .4byte 0x0202012E
_08069A7C: .4byte 0x020200D0
_08069A80: .4byte 0x020200D4

	thumb_func_start sub_08069A84
sub_08069A84: @ 0x08069A84
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	adds r7, r0, #0
	ldr r0, _08069B1C @ =gpEkrBattleUnitLeft
	ldr r0, [r0]
	mov sb, r0
	ldr r0, _08069B20 @ =gpEkrBattleUnitRight
	ldr r0, [r0]
	mov r8, r0
	ldr r6, [r7, #0x5c]
	ldr r0, _08069B24 @ =0x081E0C60
	ldr r5, _08069B28 @ =0x02017784
	adds r1, r5, #0
	bl LZ77UnCompWram
	ldr r0, _08069B2C @ =0x081E0EAC
	ldr r4, _08069B30 @ =gEkrTsaBuffer
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r1, _08069B34 @ =0x020235E0
	movs r0, #1
	str r0, [sp]
	adds r0, #0xff
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0x20
	movs r3, #0x14
	bl sub_080672B8
	ldr r1, _08069B38 @ =0x06002000
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r5, #0
	bl RegisterDataMove
	ldr r0, _08069B3C @ =0x081E0FA8
	ldr r4, _08069B40 @ =0x02022880
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	ldr r0, _08069B44 @ =0x081E0FC8
	ldr r5, _08069B48 @ =0x0201A784
	adds r1, r5, #0
	bl LZ77UnCompWram
	ldr r1, _08069B4C @ =0x06011400
	movs r2, #0xc0
	lsls r2, r2, #4
	adds r0, r5, #0
	bl RegisterDataMove
	ldr r0, _08069B50 @ =0x081E11DC
	movs r1, #0x80
	lsls r1, r1, #2
	adds r4, r4, r1
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
	movs r0, #0x50
	strh r0, [r7, #0x2c]
	adds r0, r6, #0
	bl GetAISSubjectId
	cmp r0, #0
	bne _08069B54
	mov r1, sb
	b _08069B56
	.align 2, 0
_08069B1C: .4byte gpEkrBattleUnitLeft
_08069B20: .4byte gpEkrBattleUnitRight
_08069B24: .4byte 0x081E0C60
_08069B28: .4byte 0x02017784
_08069B2C: .4byte 0x081E0EAC
_08069B30: .4byte gEkrTsaBuffer
_08069B34: .4byte 0x020235E0
_08069B38: .4byte 0x06002000
_08069B3C: .4byte 0x081E0FA8
_08069B40: .4byte 0x02022880
_08069B44: .4byte 0x081E0FC8
_08069B48: .4byte 0x0201A784
_08069B4C: .4byte 0x06011400
_08069B50: .4byte 0x081E11DC
_08069B54:
	mov r1, r8
_08069B56:
	ldr r0, [r1]
	ldrh r4, [r0, #6]
	ldr r0, _08069BA0 @ =0x08C4A8E8
	bl sub_080069E0
	ldr r0, _08069BA4 @ =0x00001042
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	movs r2, #0xbc
	movs r3, #0x50
	bl sub_08006AC4
	ldr r0, _08069BA8 @ =0x030040E0
	ldr r1, [r0]
	movs r2, #0
	movs r0, #0xa0
	strh r0, [r1, #0x36]
	str r2, [sp, #8]
	ldr r1, _08069BAC @ =gBg2Tm
	ldr r2, _08069BB0 @ =0x01000200
	add r0, sp, #8
	bl CpuFastSet
	adds r0, r7, #0
	bl sub_08069314
	adds r0, r7, #0
	bl Proc_Break
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069BA0: .4byte 0x08C4A8E8
_08069BA4: .4byte 0x00001042
_08069BA8: .4byte 0x030040E0
_08069BAC: .4byte gBg2Tm
_08069BB0: .4byte 0x01000200

	thumb_func_start sub_08069BB4
sub_08069BB4: @ 0x08069BB4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08069BE0 @ =sub_0806A584
	bl SetOnHBlankA
	movs r0, #1
	bl EnableBgSync
	movs r0, #4
	bl EnableBgSync
	movs r0, #2
	bl EnableBgSync
	bl EnablePalSync
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08069BE0: .4byte sub_0806A584

	thumb_func_start sub_08069BE4
sub_08069BE4: @ 0x08069BE4
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r1, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x50
	ble _08069C1A
	strh r1, [r4, #0x2c]
	str r1, [r4, #0x44]
	str r1, [r4, #0x48]
	movs r0, #2
	rsbs r0, r0, #0
	str r0, [r4, #0x4c]
	subs r0, #2
	str r0, [r4, #0x50]
	ldr r0, _08069C20 @ =gPal
	ldr r1, _08069C24 @ =0x020165C8
	movs r2, #0x80
	lsls r2, r2, #1
	bl CpuFastSet
	adds r0, r4, #0
	bl Proc_Break
_08069C1A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08069C20: .4byte gPal
_08069C24: .4byte 0x020165C8

	thumb_func_start sub_08069C28
sub_08069C28: @ 0x08069C28
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r3, [r7, #0x44]
	ldr r5, [r7, #0x48]
	ldr r6, [r7, #0x4c]
	ldr r0, [r7, #0x50]
	mov sb, r0
	cmp r3, #0
	bge _08069C48
	movs r3, #0
	b _08069C4E
_08069C48:
	cmp r3, #8
	ble _08069C4E
	movs r3, #8
_08069C4E:
	cmp r5, #0
	bge _08069C56
	movs r5, #0
	b _08069C5C
_08069C56:
	cmp r5, #8
	ble _08069C5C
	movs r5, #8
_08069C5C:
	cmp r6, #0
	bge _08069C64
	movs r6, #0
	b _08069C6A
_08069C64:
	cmp r6, #8
	ble _08069C6A
	movs r6, #8
_08069C6A:
	mov r2, sb
	cmp r2, #0
	bge _08069C74
	movs r0, #0
	b _08069C7C
_08069C74:
	mov r2, sb
	cmp r2, #8
	ble _08069C7E
	movs r0, #8
_08069C7C:
	mov sb, r0
_08069C7E:
	ldr r0, [r7, #0x44]
	adds r0, #1
	str r0, [r7, #0x44]
	ldr r0, [r7, #0x48]
	adds r0, #1
	str r0, [r7, #0x48]
	ldr r0, [r7, #0x4c]
	adds r0, #1
	str r0, [r7, #0x4c]
	ldr r0, [r7, #0x50]
	adds r0, #1
	str r0, [r7, #0x50]
	movs r1, #0x50
	rsbs r1, r1, #0
	movs r4, #8
	str r4, [sp]
	movs r0, #0
	movs r2, #0
	bl Interpolate
	mov r8, r0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #8
	adds r3, r5, #0
	bl Interpolate
	mov sl, r0
	ldr r5, _08069D3C @ =0x0202012C
	str r4, [sp]
	movs r0, #0
	movs r1, #0x90
	movs r2, #0
	adds r3, r6, #0
	bl Interpolate
	strh r0, [r5]
	ldr r5, _08069D40 @ =0x0202012E
	str r4, [sp]
	movs r0, #0
	movs r1, #0x90
	movs r2, #0
	mov r3, sb
	bl Interpolate
	strh r0, [r5]
	ldr r0, _08069D44 @ =0x030040E0
	ldr r1, [r0]
	movs r0, #0x50
	mov r2, r8
	subs r0, r0, r2
	strh r0, [r1, #0x36]
	ldr r0, _08069D48 @ =0x020165C8
	ldr r4, _08069D4C @ =gPal
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r4, #0
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #2
	movs r2, #4
	mov r3, sl
	bl sub_080676D4
	adds r0, r4, #0
	movs r1, #0x13
	movs r2, #0xc
	mov r3, sl
	bl sub_080676D4
	bl EnablePalSync
	ldrh r0, [r7, #0x2c]
	adds r0, #1
	strh r0, [r7, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x14
	ble _08069D2A
	movs r0, #0
	strh r0, [r7, #0x2c]
	adds r0, r7, #0
	bl Proc_Break
_08069D2A:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069D3C: .4byte 0x0202012C
_08069D40: .4byte 0x0202012E
_08069D44: .4byte 0x030040E0
_08069D48: .4byte 0x020165C8
_08069D4C: .4byte gPal

	thumb_func_start sub_08069D50
sub_08069D50: @ 0x08069D50
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0xa0
	movs r1, #1
	bl sub_0806A8D8
	ldr r1, _08069D78 @ =0x020200B0
	movs r2, #0
	adds r0, r1, #0
	adds r0, #0x1c
_08069D64:
	str r2, [r0]
	subs r0, #4
	cmp r0, r1
	bge _08069D64
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08069D78: .4byte 0x020200B0

	thumb_func_start sub_08069D7C
sub_08069D7C: @ 0x08069D7C
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	bne _08069D90
	adds r0, r5, #0
	bl Proc_Break
	b _08069DC8
_08069D90:
	ldr r0, _08069DD0 @ =sub_0806A5C0
	bl SetOnHBlankA
	ldr r4, _08069DD4 @ =0x020200D0
	ldr r0, [r4]
	bl Proc_End
	bl sub_0806A370
	str r0, [r4]
	ldr r4, _08069DD8 @ =0x000002CD
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r4, #0
	bl sub_08067DB4
	adds r0, r4, #0
	movs r1, #0x38
	movs r2, #0
	bl sub_08067ED4
	movs r0, #0
	strh r0, [r5, #0x2c]
	movs r0, #8
	strh r0, [r5, #0x2e]
	adds r0, r5, #0
	bl Proc_Break
_08069DC8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08069DD0: .4byte sub_0806A5C0
_08069DD4: .4byte 0x020200D0
_08069DD8: .4byte 0x000002CD

	thumb_func_start sub_08069DDC
sub_08069DDC: @ 0x08069DDC
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	bne _08069DF2
	adds r0, r5, #0
	bl Proc_Break
	b _08069E46
_08069DF2:
	ldr r4, _08069E50 @ =0x0202012C
	movs r2, #0x80
	lsls r2, r2, #5
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r1, #0x2e
	ldrsh r0, [r5, r1]
	str r0, [sp]
	movs r0, #1
	movs r1, #0
	bl Interpolate
	strh r0, [r4]
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r5, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08069E46
	ldr r1, _08069E54 @ =0x02020100
	ldr r0, _08069E58 @ =0x02020104
	ldr r0, [r0]
	str r0, [r1]
	adds r0, r5, #0
	bl sub_080696F8
	ldr r1, _08069E5C @ =0x02020108
	ldr r0, _08069E60 @ =0x0202010A
	ldrh r0, [r0]
	strh r0, [r1]
	adds r0, r5, #0
	bl sub_08069730
	movs r0, #0
	strh r0, [r5, #0x2c]
	movs r0, #8
	strh r0, [r5, #0x2e]
	adds r0, r5, #0
	bl Proc_Break
_08069E46:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08069E50: .4byte 0x0202012C
_08069E54: .4byte 0x02020100
_08069E58: .4byte 0x02020104
_08069E5C: .4byte 0x02020108
_08069E60: .4byte 0x0202010A

	thumb_func_start sub_08069E64
sub_08069E64: @ 0x08069E64
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	bne _08069E7A
	adds r0, r5, #0
	bl Proc_Break
	b _08069EAA
_08069E7A:
	ldr r4, _08069EB4 @ =0x0202012C
	movs r1, #0x80
	lsls r1, r1, #5
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r2, #0x2e
	ldrsh r0, [r5, r2]
	str r0, [sp]
	movs r0, #4
	movs r2, #0
	bl Interpolate
	strh r0, [r4]
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r5, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08069EAA
	adds r0, r5, #0
	bl Proc_Break
_08069EAA:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08069EB4: .4byte 0x0202012C

	thumb_func_start sub_08069EB8
sub_08069EB8: @ 0x08069EB8
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	bne _08069F10
	strh r0, [r5, #0x2c]
	str r0, [sp]
	str r0, [sp, #4]
	movs r0, #0xa0
	movs r1, #1
	movs r2, #0x84
	movs r3, #0x3c
	bl sub_0806AAA0
	ldr r1, _08069F04 @ =0x02020108
	ldr r0, _08069F08 @ =0x0202010A
	ldrh r0, [r0]
	strh r0, [r1]
	adds r0, r5, #0
	bl sub_08069730
	ldr r4, _08069F0C @ =0x000002CD
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r4, #0
	bl sub_08067DB4
	adds r0, r4, #0
	movs r1, #0x38
	movs r2, #0
	bl sub_08067ED4
	adds r0, r5, #0
	bl Proc_Break
	b _08069F2A
	.align 2, 0
_08069F04: .4byte 0x02020108
_08069F08: .4byte 0x0202010A
_08069F0C: .4byte 0x000002CD
_08069F10:
	ldr r4, _08069F34 @ =0x020200D0
	ldr r0, [r4]
	bl Proc_End
	bl sub_0806A2D4
	str r0, [r4]
	movs r0, #0
	strh r0, [r5, #0x2c]
	strh r0, [r5, #0x2e]
	adds r0, r5, #0
	bl Proc_Break
_08069F2A:
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08069F34: .4byte 0x020200D0

	thumb_func_start sub_08069F38
sub_08069F38: @ 0x08069F38
	push {lr}
	adds r1, r0, #0
	adds r0, #0x2a
	ldrb r2, [r0]
	cmp r2, #0
	beq _08069F4C
	adds r0, r1, #0
	bl Proc_Break
	b _08069F64
_08069F4C:
	ldrh r0, [r1, #0x2c]
	adds r0, #1
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x1d
	bgt _08069F64
	strh r2, [r1, #0x2c]
	strh r2, [r1, #0x2e]
	adds r0, r1, #0
	bl Proc_Break
_08069F64:
	pop {r0}
	bx r0

	thumb_func_start sub_08069F68
sub_08069F68: @ 0x08069F68
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r5, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x14
	bne _0806A03E
	movs r0, #0
	strh r0, [r5, #0x2c]
	ldrh r0, [r5, #0x2e]
	cmp r0, #8
	beq _0806A044
	ldr r7, _0806A014 @ =0x0202010C
_08069F8C:
	movs r1, #0x2e
	ldrsh r0, [r5, r1]
	lsls r0, r0, #1
	adds r2, r0, r7
	ldr r1, _0806A018 @ =0x0202011C
	adds r0, r0, r1
	ldrh r0, [r0]
	ldrh r1, [r2]
	subs r6, r0, r1
	cmp r6, #0
	beq _0806A030
	movs r1, #0
	mov r8, r1
	strh r0, [r2]
	movs r2, #0x2e
	ldrsh r1, [r5, r2]
	adds r0, r5, #0
	bl sub_080696A0
	ldr r4, _0806A01C @ =0x00000396
	adds r0, r4, #0
	movs r1, #0x80
	lsls r1, r1, #1
	bl sub_08067DB4
	adds r0, r4, #0
	movs r1, #0x38
	movs r2, #0
	bl sub_08067ED4
	ldr r1, _0806A020 @ =0x082EB8B4
	movs r0, #0x2e
	ldrsh r4, [r5, r0]
	lsls r0, r4, #1
	adds r0, r0, r1
	ldrh r3, [r0]
	movs r2, #0x1f
	ands r2, r3
	lsls r2, r2, #3
	adds r2, #0x35
	movs r1, #0xfc
	lsls r1, r1, #3
	adds r0, r1, #0
	ands r3, r0
	lsrs r3, r3, #2
	adds r3, #6
	adds r4, #1
	str r4, [sp]
	str r6, [sp, #4]
	movs r0, #0xa0
	movs r1, #1
	bl sub_0806AAA0
	movs r2, #0x2e
	ldrsh r0, [r5, r2]
	cmp r0, #0
	bne _0806A00E
	ldr r1, _0806A024 @ =0x0203E094
	lsls r0, r0, #1
	adds r0, r0, r7
	ldrh r0, [r0]
	strh r0, [r1, #2]
	ldr r1, _0806A028 @ =0x0203E098
	ldr r0, _0806A02C @ =0x0000FFFF
	strh r0, [r1, #2]
_0806A00E:
	mov r0, r8
	strh r0, [r5, #0x2c]
	b _0806A03E
	.align 2, 0
_0806A014: .4byte 0x0202010C
_0806A018: .4byte 0x0202011C
_0806A01C: .4byte 0x00000396
_0806A020: .4byte 0x082EB8B4
_0806A024: .4byte 0x0203E094
_0806A028: .4byte 0x0203E098
_0806A02C: .4byte 0x0000FFFF
_0806A030:
	ldrh r0, [r5, #0x2e]
	adds r0, #1
	strh r0, [r5, #0x2e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #8
	bne _08069F8C
_0806A03E:
	ldrh r1, [r5, #0x2e]
	cmp r1, #8
	bne _0806A04E
_0806A044:
	movs r0, #0
	strh r0, [r5, #0x2c]
	adds r0, r5, #0
	bl Proc_Break
_0806A04E:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806A05C
sub_0806A05C: @ 0x0806A05C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x6d
	ble _0806A082
	movs r0, #0
	strh r0, [r4, #0x2c]
	bl sub_0806A93C
	ldr r0, _0806A088 @ =sub_0806A584
	bl SetOnHBlankA
	adds r0, r4, #0
	bl Proc_Break
_0806A082:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806A088: .4byte sub_0806A584

	thumb_func_start sub_0806A08C
sub_0806A08C: @ 0x0806A08C
	push {lr}
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806A098
sub_0806A098: @ 0x0806A098
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldr r5, _0806A14C @ =0x0202012C
	movs r0, #0x2c
	ldrsh r3, [r7, r0]
	movs r4, #8
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x90
	bl Interpolate
	strh r0, [r5]
	ldr r5, _0806A150 @ =0x0202012E
	movs r0, #0x2c
	ldrsh r3, [r7, r0]
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x90
	bl Interpolate
	strh r0, [r5]
	movs r2, #0x50
	rsbs r2, r2, #0
	movs r0, #0x2c
	ldrsh r3, [r7, r0]
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	adds r5, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r7, r0]
	str r4, [sp]
	movs r0, #0
	movs r1, #8
	movs r2, #0
	bl Interpolate
	adds r6, r0, #0
	ldr r0, _0806A154 @ =0x030040E0
	ldr r1, [r0]
	movs r0, #0x50
	subs r0, r0, r5
	strh r0, [r1, #0x36]
	ldr r0, _0806A158 @ =0x020165C8
	ldr r4, _0806A15C @ =gPal
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r4, #0
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #2
	movs r2, #4
	adds r3, r6, #0
	bl sub_080676D4
	adds r0, r4, #0
	movs r1, #0x13
	movs r2, #0xc
	adds r3, r6, #0
	bl sub_080676D4
	bl EnablePalSync
	movs r0, #7
_0806A124:
	subs r0, #1
	cmp r0, #0
	bge _0806A124
	ldrh r0, [r7, #0x2c]
	adds r0, #1
	strh r0, [r7, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #8
	ble _0806A142
	movs r0, #0
	strh r0, [r7, #0x2c]
	adds r0, r7, #0
	bl Proc_Break
_0806A142:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806A14C: .4byte 0x0202012C
_0806A150: .4byte 0x0202012E
_0806A154: .4byte 0x030040E0
_0806A158: .4byte 0x020165C8
_0806A15C: .4byte gPal

	thumb_func_start sub_0806A160
sub_0806A160: @ 0x0806A160
	push {r4, r5, r6, lr}
	sub sp, #0x2c
	adds r5, r0, #0
	ldr r4, _0806A274 @ =0x020200D8
	bl sub_08055CD8
	cmp r0, #0
	bne _0806A176
	adds r0, r4, #0
	bl sub_08055AC4
_0806A176:
	movs r1, #0xc0
	lsls r1, r1, #7
	movs r0, #0
	bl SetBgTilemapOffset
	movs r1, #0xd0
	lsls r1, r1, #7
	movs r0, #1
	bl SetBgTilemapOffset
	movs r1, #0xe0
	lsls r1, r1, #7
	movs r0, #2
	bl SetBgTilemapOffset
	movs r0, #1
	movs r1, #0
	bl SetBgScreenSize
	movs r0, #2
	movs r1, #0
	bl SetBgScreenSize
	mov r4, sp
	ldr r2, _0806A278 @ =0x0203E000
	ldrh r0, [r2]
	movs r6, #0
	strh r0, [r4]
	movs r0, #4
	strh r0, [r4, #2]
	movs r1, #0xa0
	lsls r1, r1, #2
	strh r1, [r4, #4]
	ldrh r0, [r2, #2]
	strh r0, [r4, #6]
	movs r0, #5
	strh r0, [r4, #8]
	strh r1, [r4, #0xa]
	ldr r0, _0806A27C @ =gEkrDistanceType
	ldrh r0, [r0]
	strh r0, [r4, #0xc]
	movs r0, #2
	strh r0, [r4, #0xe]
	str r6, [sp, #0x1c]
	ldr r0, _0806A280 @ =0x020145C8
	str r0, [sp, #0x20]
	ldr r0, _0806A284 @ =0x0203DFE6
	ldrh r0, [r0]
	strh r0, [r4, #0x10]
	bl sub_08055CD8
	cmp r0, #0
	bne _0806A1F0
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	mov r0, sp
	bl sub_08055718
_0806A1F0:
	ldr r2, [r5, #0x5c]
	ldr r1, _0806A288 @ =0x0000F3FF
	adds r0, r1, #0
	ldrh r3, [r2, #8]
	ands r0, r3
	strh r0, [r2, #8]
	ldr r3, [r5, #0x5c]
	movs r0, #0x80
	lsls r0, r0, #4
	adds r2, r0, #0
	ldrh r0, [r3, #8]
	orrs r0, r2
	strh r0, [r3, #8]
	ldr r0, [r5, #0x60]
	ldrh r3, [r0, #8]
	ands r1, r3
	strh r1, [r0, #8]
	ldr r0, [r5, #0x60]
	ldrh r1, [r0, #8]
	orrs r2, r1
	strh r2, [r0, #8]
	str r6, [sp, #0x28]
	add r0, sp, #0x28
	ldr r1, _0806A28C @ =gBg1Tm
	ldr r2, _0806A290 @ =0x01000200
	bl CpuFastSet
	movs r0, #2
	bl EnableBgSync
	movs r0, #0
	bl sub_0804CC68
	ldr r3, _0806A294 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #0
	bl EndFaceById
	adds r0, r5, #0
	bl Proc_Break
	add sp, #0x2c
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806A274: .4byte 0x020200D8
_0806A278: .4byte 0x0203E000
_0806A27C: .4byte gEkrDistanceType
_0806A280: .4byte 0x020145C8
_0806A284: .4byte 0x0203DFE6
_0806A288: .4byte 0x0000F3FF
_0806A28C: .4byte gBg1Tm
_0806A290: .4byte 0x01000200
_0806A294: .4byte gDispIo

	thumb_func_start sub_0806A298
sub_0806A298: @ 0x0806A298
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0806A2CC @ =0x020200D0
	ldr r0, [r0]
	bl Proc_End
	ldr r0, _0806A2D0 @ =0x020200D4
	ldr r0, [r0]
	bl Proc_End
	ldr r0, [r4, #0x5c]
	bl sub_0804FFCC
	ldr r0, [r4, #0x60]
	bl sub_0804FFCC
	bl sub_080502A0
	bl sub_0804FC6C
	adds r4, #0x29
	movs r0, #1
	strb r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806A2CC: .4byte 0x020200D0
_0806A2D0: .4byte 0x020200D4

	thumb_func_start sub_0806A2D4
sub_0806A2D4: @ 0x0806A2D4
	push {lr}
	ldr r0, _0806A2E8 @ =0x08C4A9B8
	movs r1, #3
	bl Proc_Start
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	pop {r1}
	bx r1
	.align 2, 0
_0806A2E8: .4byte 0x08C4A9B8

	thumb_func_start sub_0806A2EC
sub_0806A2EC: @ 0x0806A2EC
	push {r4, r5, r6, lr}
	ldr r0, _0806A318 @ =0x0201FDAC
	ldr r0, [r0]
	ldr r2, _0806A31C @ =0x0201FB2C
	cmp r0, #0
	bne _0806A2FA
	ldr r2, _0806A320 @ =0x0201FC6C
_0806A2FA:
	ldr r1, _0806A324 @ =0x0201FDB8
	cmp r0, #0
	bne _0806A302
	ldr r1, _0806A328 @ =0x0201FEF8
_0806A302:
	movs r3, #0
	movs r6, #0
	ldr r5, _0806A32C @ =0x0202012C
	ldr r4, _0806A330 @ =0x0202012E
_0806A30A:
	cmp r3, #0x27
	bhi _0806A334
	strh r6, [r2]
	adds r2, #2
	strh r6, [r1]
	b _0806A350
	.align 2, 0
_0806A318: .4byte 0x0201FDAC
_0806A31C: .4byte 0x0201FB2C
_0806A320: .4byte 0x0201FC6C
_0806A324: .4byte 0x0201FDB8
_0806A328: .4byte 0x0201FEF8
_0806A32C: .4byte 0x0202012C
_0806A330: .4byte 0x0202012E
_0806A334:
	cmp r3, #0x47
	bhi _0806A342
	ldrh r0, [r5]
	strh r0, [r2]
	adds r2, #2
	ldrh r0, [r5]
	b _0806A34E
_0806A342:
	cmp r3, #0x9f
	bhi _0806A352
	ldrh r0, [r4]
	strh r0, [r2]
	adds r2, #2
	ldrh r0, [r4]
_0806A34E:
	strh r0, [r1]
_0806A350:
	adds r1, #2
_0806A352:
	adds r3, #1
	cmp r3, #0x9f
	bls _0806A30A
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start nullsub_58
nullsub_58: @ 0x0806A360
	bx lr
	.align 2, 0

	thumb_func_start sub_0806A364
sub_0806A364: @ 0x0806A364
	push {lr}
	bl sub_0806A2EC
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806A370
sub_0806A370: @ 0x0806A370
	push {lr}
	ldr r0, _0806A384 @ =0x08C4A9D8
	movs r1, #3
	bl Proc_Start
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	pop {r1}
	bx r1
	.align 2, 0
_0806A384: .4byte 0x08C4A9D8

	thumb_func_start nullsub_59
nullsub_59: @ 0x0806A388
	bx lr
	.align 2, 0

	thumb_func_start sub_0806A38C
sub_0806A38C: @ 0x0806A38C
	push {r4, r5, r6, lr}
	ldr r0, _0806A3D8 @ =0x0201FDAC
	ldr r0, [r0]
	ldr r3, _0806A3DC @ =0x0201FB2C
	cmp r0, #0
	bne _0806A39A
	ldr r3, _0806A3E0 @ =0x0201FC6C
_0806A39A:
	ldr r2, _0806A3E4 @ =0x0201FDB8
	cmp r0, #0
	bne _0806A3A2
	ldr r2, _0806A3E8 @ =0x0201FEF8
_0806A3A2:
	movs r4, #0
	movs r5, #0
	ldr r0, _0806A3EC @ =0x08C4A9F8
	adds r6, r0, #0
	subs r6, #0x50
_0806A3AC:
	cmp r4, #0x27
	bls _0806A3FC
	cmp r4, #0x47
	bhi _0806A3F8
	movs r0, #0
	ldrsh r1, [r6, r0]
	ldr r0, _0806A3F0 @ =0x0202012C
	ldrh r0, [r0]
	muls r0, r1, r0
	lsls r0, r0, #4
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	adds r0, r4, r0
	cmp r0, #0x2e
	bls _0806A3CE
	cmp r0, #0x51
	bls _0806A3D0
_0806A3CE:
	ldr r1, _0806A3F4 @ =0x0000FFE0
_0806A3D0:
	strh r1, [r3]
	adds r3, #2
	strh r1, [r2]
	b _0806A402
	.align 2, 0
_0806A3D8: .4byte 0x0201FDAC
_0806A3DC: .4byte 0x0201FB2C
_0806A3E0: .4byte 0x0201FC6C
_0806A3E4: .4byte 0x0201FDB8
_0806A3E8: .4byte 0x0201FEF8
_0806A3EC: .4byte 0x08C4A9F8
_0806A3F0: .4byte 0x0202012C
_0806A3F4: .4byte 0x0000FFE0
_0806A3F8:
	cmp r4, #0x9f
	bhi _0806A404
_0806A3FC:
	strh r5, [r3]
	adds r3, #2
	strh r5, [r2]
_0806A402:
	adds r2, #2
_0806A404:
	adds r6, #2
	adds r4, #1
	cmp r4, #0x9f
	bls _0806A3AC
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806A414
sub_0806A414: @ 0x0806A414
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r1, _0806A4B0 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r2, _0806A4B4 @ =0x0201FB2C
	movs r1, #0
	adds r6, r2, #0
	ldr r4, _0806A4B8 @ =0x0201FC6C
	ldr r0, _0806A4BC @ =0x0201FDB8
	ldr r5, _0806A4C0 @ =0x0201FEF8
	ldr r7, _0806A4C4 @ =0x0201FB20
	ldr r3, _0806A4C8 @ =0x0201FDAC
	mov ip, r3
	ldr r3, _0806A4CC @ =0x0201FB24
	mov r8, r3
	ldr r3, _0806A4D0 @ =0x0201FDB0
	mov sb, r3
	ldr r3, _0806A4D4 @ =0x0201FB28
	mov sl, r3
	movs r3, #0
_0806A446:
	strh r3, [r2]
	adds r2, #2
	adds r1, #1
	cmp r1, #0x9f
	bls _0806A446
	adds r2, r4, #0
	movs r1, #0
	movs r3, #0
_0806A456:
	strh r3, [r2]
	adds r2, #2
	adds r1, #1
	cmp r1, #0x9f
	bls _0806A456
	adds r2, r0, #0
	movs r1, #0
	movs r3, #0
_0806A466:
	strh r3, [r2]
	adds r2, #2
	adds r1, #1
	cmp r1, #0x9f
	bls _0806A466
	adds r2, r5, #0
	movs r1, #0
	movs r3, #0
_0806A476:
	strh r3, [r2]
	adds r2, #2
	adds r1, #1
	cmp r1, #0x9f
	bls _0806A476
	movs r4, #0
	str r4, [r7]
	mov r1, ip
	str r4, [r1]
	mov r3, r8
	str r6, [r3]
	mov r1, sb
	str r0, [r1]
	mov r3, sl
	str r6, [r3]
	ldr r1, _0806A4D8 @ =0x0201FDB4
	str r0, [r1]
	ldr r0, _0806A4DC @ =0x08C4AA38
	movs r1, #0
	bl Proc_Start
	strh r4, [r0, #0x2c]
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0806A4B0: .4byte 0x0201774C
_0806A4B4: .4byte 0x0201FB2C
_0806A4B8: .4byte 0x0201FC6C
_0806A4BC: .4byte 0x0201FDB8
_0806A4C0: .4byte 0x0201FEF8
_0806A4C4: .4byte 0x0201FB20
_0806A4C8: .4byte 0x0201FDAC
_0806A4CC: .4byte 0x0201FB24
_0806A4D0: .4byte 0x0201FDB0
_0806A4D4: .4byte 0x0201FB28
_0806A4D8: .4byte 0x0201FDB4
_0806A4DC: .4byte 0x08C4AA38

	thumb_func_start sub_0806A4E0
sub_0806A4E0: @ 0x0806A4E0
	push {lr}
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0

	thumb_func_start sub_0806A4EC
sub_0806A4EC: @ 0x0806A4EC
	push {lr}
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806A4F8
sub_0806A4F8: @ 0x0806A4F8
	ldr r0, _0806A518 @ =gBmSt
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r3, _0806A51C @ =0x0201FB24
	ldr r2, _0806A520 @ =0x0201FDB0
	cmp r0, #0
	beq _0806A564
	ldr r1, _0806A524 @ =0x0201FB20
	ldr r0, [r1]
	cmp r0, #1
	bne _0806A52C
	movs r0, #0
	str r0, [r1]
	ldr r0, _0806A528 @ =0x0201FB2C
	b _0806A532
	.align 2, 0
_0806A518: .4byte gBmSt
_0806A51C: .4byte 0x0201FB24
_0806A520: .4byte 0x0201FDB0
_0806A524: .4byte 0x0201FB20
_0806A528: .4byte 0x0201FB2C
_0806A52C:
	movs r0, #1
	str r0, [r1]
	ldr r0, _0806A548 @ =0x0201FC6C
_0806A532:
	str r0, [r3]
	ldr r1, _0806A54C @ =0x0201FDAC
	ldr r0, [r1]
	cmp r0, #1
	bne _0806A558
	movs r0, #0
	str r0, [r1]
	ldr r1, _0806A550 @ =0x0201FDB0
	ldr r0, _0806A554 @ =0x0201FDB8
	b _0806A560
	.align 2, 0
_0806A548: .4byte 0x0201FC6C
_0806A54C: .4byte 0x0201FDAC
_0806A550: .4byte 0x0201FDB0
_0806A554: .4byte 0x0201FDB8
_0806A558:
	movs r0, #1
	str r0, [r1]
	ldr r1, _0806A574 @ =0x0201FDB0
	ldr r0, _0806A578 @ =0x0201FEF8
_0806A560:
	str r0, [r1]
	adds r2, r1, #0
_0806A564:
	ldr r1, _0806A57C @ =0x0201FB28
	ldr r0, [r3]
	str r0, [r1]
	ldr r1, _0806A580 @ =0x0201FDB4
	ldr r0, [r2]
	str r0, [r1]
	bx lr
	.align 2, 0
_0806A574: .4byte 0x0201FDB0
_0806A578: .4byte 0x0201FEF8
_0806A57C: .4byte 0x0201FB28
_0806A580: .4byte 0x0201FDB4

	thumb_func_start sub_0806A584
sub_0806A584: @ 0x0806A584
	ldr r0, _0806A5B0 @ =0x04000004
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _0806A5AC
	ldr r3, _0806A5B4 @ =0x04000018
	ldr r2, _0806A5B8 @ =0x0201FB28
	ldr r0, [r2]
	ldrh r1, [r0]
	strh r1, [r3]
	adds r0, #2
	str r0, [r2]
	subs r3, #4
	ldr r2, _0806A5BC @ =0x0201FDB4
	ldr r0, [r2]
	ldrh r1, [r0]
	strh r1, [r3]
	adds r0, #2
	str r0, [r2]
_0806A5AC:
	bx lr
	.align 2, 0
_0806A5B0: .4byte 0x04000004
_0806A5B4: .4byte 0x04000018
_0806A5B8: .4byte 0x0201FB28
_0806A5BC: .4byte 0x0201FDB4

	thumb_func_start sub_0806A5C0
sub_0806A5C0: @ 0x0806A5C0
	push {r4, r5, r6, lr}
	ldr r0, _0806A5FC @ =0x04000004
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _0806A5F4
	ldr r3, _0806A600 @ =0x0400001A
	ldr r4, _0806A604 @ =gDispIo
	ldr r2, _0806A608 @ =0x0201FB28
	ldr r0, [r2]
	ldrh r5, [r4, #0x26]
	ldrh r6, [r0]
	adds r1, r5, r6
	strh r1, [r3]
	adds r0, #2
	str r0, [r2]
	subs r3, #4
	ldr r2, _0806A60C @ =0x0201FDB4
	ldr r0, [r2]
	ldrh r4, [r4, #0x22]
	ldrh r5, [r0]
	adds r1, r4, r5
	strh r1, [r3]
	adds r0, #2
	str r0, [r2]
_0806A5F4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806A5FC: .4byte 0x04000004
_0806A600: .4byte 0x0400001A
_0806A604: .4byte gDispIo
_0806A608: .4byte 0x0201FB28
_0806A60C: .4byte 0x0201FDB4

	thumb_func_start sub_0806A610
sub_0806A610: @ 0x0806A610
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0806A644 @ =0x08C4AA60
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _0806A648 @ =0x082EB8CA
	str r1, [r0, #0x48]
	ldr r1, _0806A64C @ =0x08C4AA78
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r1, _0806A650 @ =0x08C4AAA4
	str r1, [r0, #0x54]
	ldr r0, _0806A654 @ =0x081E9B28
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	bl SpellFx_SetSomeColorEffect
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806A644: .4byte 0x08C4AA60
_0806A648: .4byte 0x082EB8CA
_0806A64C: .4byte 0x08C4AA78
_0806A650: .4byte 0x08C4AAA4
_0806A654: .4byte 0x081E9B28

	thumb_func_start sub_0806A658
sub_0806A658: @ 0x0806A658
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #0
	blt _0806A694
	ldr r1, [r4, #0x4c]
	ldr r2, [r4, #0x50]
	ldr r5, [r4, #0x54]
	ldr r0, [r4, #0x5c]
	lsls r4, r3, #2
	adds r1, r4, r1
	ldr r1, [r1]
	adds r2, r4, r2
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	adds r4, r4, r5
	ldr r0, [r4]
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	b _0806A6AA
_0806A694:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r3, r0
	bne _0806A6AA
	bl SpellFx_ClearBG1
	bl SpellFx_ClearColorEffects
	adds r0, r4, #0
	bl Proc_Break
_0806A6AA:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0806A6B0
sub_0806A6B0: @ 0x0806A6B0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0806A6E8 @ =0x08C4AAD0
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _0806A6EC @ =0x082EB8F8
	str r1, [r0, #0x48]
	ldr r1, _0806A6F0 @ =0x08C4AAE8
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r0, _0806A6F4 @ =0x081EAC10
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	ldr r0, _0806A6F8 @ =0x081EB2D0
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806A6E8: .4byte 0x08C4AAD0
_0806A6EC: .4byte 0x082EB8F8
_0806A6F0: .4byte 0x08C4AAE8
_0806A6F4: .4byte 0x081EAC10
_0806A6F8: .4byte 0x081EB2D0

	thumb_func_start sub_0806A6FC
sub_0806A6FC: @ 0x0806A6FC
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _0806A72A
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	b _0806A738
_0806A72A:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _0806A738
	adds r0, r4, #0
	bl Proc_Break
_0806A738:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806A740
sub_0806A740: @ 0x0806A740
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	ldr r0, _0806A790 @ =0x08C4AB00
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	ldr r3, _0806A794 @ =0x08C0BD7C
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r4, #0x64]
	strh r6, [r0, #2]
	mov r1, r8
	strh r1, [r0, #4]
	ldr r0, _0806A798 @ =0x081EB9AC
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	ldr r0, _0806A79C @ =0x081EB2D0
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806A790: .4byte 0x08C4AB00
_0806A794: .4byte 0x08C0BD7C
_0806A798: .4byte 0x081EB9AC
_0806A79C: .4byte 0x081EB2D0

	thumb_func_start sub_0806A7A0
sub_0806A7A0: @ 0x0806A7A0
	push {lr}
	ldr r0, [r0, #0x64]
	bl AnimDelete
	pop {r0}
	bx r0

	thumb_func_start sub_0806A7AC
sub_0806A7AC: @ 0x0806A7AC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0806A7D4 @ =0x08C4AB20
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r2, #0
	strh r2, [r0, #0x2c]
	strh r2, [r0, #0x2e]
	movs r1, #0x19
	strh r1, [r0, #0x30]
	str r2, [r0, #0x44]
	ldr r1, _0806A7D8 @ =0x082EB912
	str r1, [r0, #0x48]
	ldr r1, _0806A7DC @ =0x081EB350
	str r1, [r0, #0x4c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806A7D4: .4byte 0x08C4AB20
_0806A7D8: .4byte 0x082EB912
_0806A7DC: .4byte 0x081EB350

	thumb_func_start sub_0806A7E0
sub_0806A7E0: @ 0x0806A7E0
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #0
	blt _0806A80A
	ldr r0, [r4, #0x4c]
	ldr r1, _0806A838 @ =0x02022862
	movs r2, #8
	str r2, [sp]
	adds r2, r3, #0
	movs r3, #0xf
	bl sub_08050E58
_0806A80A:
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	movs r2, #0
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	ldrh r3, [r4, #0x30]
	lsls r1, r3, #0x10
	cmp r0, r1
	ble _0806A830
	strh r2, [r4, #0x2c]
	strh r2, [r4, #0x2e]
	str r2, [r4, #0x44]
	ldr r0, _0806A83C @ =0x082EB954
	str r0, [r4, #0x48]
	ldr r0, _0806A840 @ =0x081EB2D0
	str r0, [r4, #0x4c]
	adds r0, r4, #0
	bl Proc_Break
_0806A830:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806A838: .4byte 0x02022862
_0806A83C: .4byte 0x082EB954
_0806A840: .4byte 0x081EB2D0

	thumb_func_start sub_0806A844
sub_0806A844: @ 0x0806A844
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _0806A86A
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	b _0806A878
_0806A86A:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0806A878
	adds r0, r4, #0
	bl Proc_Break
_0806A878:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806A880
sub_0806A880: @ 0x0806A880
	movs r1, #0
	strh r1, [r0, #0x2e]
	bx lr
	.align 2, 0

	thumb_func_start sub_0806A888
sub_0806A888: @ 0x0806A888
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r1, _0806A8D4 @ =0x083F9AF0
	ldrh r4, [r5, #0x2e]
	adds r4, #1
	strh r4, [r5, #0x2e]
	movs r0, #3
	ands r0, r4
	cmp r0, #0
	bne _0806A8CE
	lsls r4, r4, #0x10
	asrs r4, r4, #0x12
	movs r0, #0xf
	ands r4, r0
	lsls r4, r4, #1
	adds r4, r4, r1
	movs r0, #0x2c
	ldrsh r1, [r5, r0]
	adds r1, #0x10
	lsls r1, r1, #5
	adds r1, #0x12
	adds r0, r4, #0
	movs r2, #0xe
	bl ApplyPaletteExt
	adds r4, #0x40
	movs r0, #0x2c
	ldrsh r1, [r5, r0]
	adds r1, #0x11
	lsls r1, r1, #5
	adds r1, #0x12
	adds r0, r4, #0
	movs r2, #0xe
	bl ApplyPaletteExt
_0806A8CE:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806A8D4: .4byte 0x083F9AF0

	thumb_func_start sub_0806A8D8
sub_0806A8D8: @ 0x0806A8D8
	push {r4, r5, lr}
	adds r5, r1, #0
	ldr r2, _0806A924 @ =0x083F9F2C
	ldr r1, _0806A928 @ =0x000003FF
	ands r1, r0
	lsls r1, r1, #5
	ldr r0, _0806A92C @ =0x06010000
	adds r1, r1, r0
	adds r0, r2, #0
	bl sub_08013688
	ldr r4, _0806A930 @ =0x083F9ECC
	adds r1, r5, #0
	adds r1, #0x10
	lsls r1, r1, #5
	adds r0, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	adds r1, r5, #0
	adds r1, #0x11
	lsls r1, r1, #5
	adds r0, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0806A934 @ =0x08C4AB40
	movs r1, #3
	bl Proc_Start
	movs r1, #0
	strh r5, [r0, #0x2c]
	ldr r0, _0806A938 @ =0x02020130
	str r1, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806A924: .4byte 0x083F9F2C
_0806A928: .4byte 0x000003FF
_0806A92C: .4byte 0x06010000
_0806A930: .4byte 0x083F9ECC
_0806A934: .4byte 0x08C4AB40
_0806A938: .4byte 0x02020130

	thumb_func_start sub_0806A93C
sub_0806A93C: @ 0x0806A93C
	push {lr}
	ldr r0, _0806A950 @ =0x08C4AB40
	bl sub_08004748
	ldr r1, _0806A954 @ =0x02020130
	movs r0, #1
	str r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0806A950: .4byte 0x08C4AB40
_0806A954: .4byte 0x02020130

	thumb_func_start sub_0806A958
sub_0806A958: @ 0x0806A958
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r1, #0
	ldr r1, _0806A9B4 @ =0x081EBC44
	mov r8, r1
	subs r0, #1
	lsls r4, r0, #1
	adds r0, r4, #0
	cmp r4, #0
	bge _0806A970
	rsbs r0, r4, #0
_0806A970:
	ldr r5, _0806A9B8 @ =0x000003FF
	ands r0, r5
	lsls r0, r0, #5
	add r0, r8
	adds r1, r6, #0
	adds r1, #0x2c
	ands r1, r5
	lsls r1, r1, #5
	ldr r7, _0806A9BC @ =0x06010000
	adds r1, r1, r7
	movs r2, #0x40
	bl sub_08015068
	adds r0, r4, #0
	cmp r0, #0
	bge _0806A992
	rsbs r0, r0, #0
_0806A992:
	adds r0, #0x20
	ands r0, r5
	lsls r0, r0, #5
	add r0, r8
	adds r1, r6, #0
	adds r1, #0x4c
	ands r1, r5
	lsls r1, r1, #5
	adds r1, r1, r7
	movs r2, #0x40
	bl sub_08015068
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806A9B4: .4byte 0x081EBC44
_0806A9B8: .4byte 0x000003FF
_0806A9BC: .4byte 0x06010000

	thumb_func_start sub_0806A9C0
sub_0806A9C0: @ 0x0806A9C0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	adds r6, r1, #0
	ldr r0, _0806AA08 @ =0x083FA1B8
	mov sb, r0
	ldr r0, _0806AA0C @ =0x081EBC44
	mov r8, r0
	cmp r7, #0
	blt _0806AA18
	movs r0, #0xc0
	lsls r0, r0, #2
	add r0, r8
	adds r1, #0x2c
	ldr r5, _0806AA10 @ =0x000003FF
	ands r1, r5
	lsls r1, r1, #5
	ldr r4, _0806AA14 @ =0x06010000
	adds r1, r1, r4
	movs r2, #0x40
	bl sub_08015068
	movs r0, #0xe0
	lsls r0, r0, #3
	add r0, r8
	adds r1, r6, #0
	adds r1, #0x4c
	ands r1, r5
	lsls r1, r1, #5
	adds r1, r1, r4
	movs r2, #0x40
	bl sub_08015068
	b _0806AA48
	.align 2, 0
_0806AA08: .4byte 0x083FA1B8
_0806AA0C: .4byte 0x081EBC44
_0806AA10: .4byte 0x000003FF
_0806AA14: .4byte 0x06010000
_0806AA18:
	movs r0, #0xd0
	lsls r0, r0, #2
	add r0, r8
	adds r1, r6, #0
	adds r1, #0x2c
	ldr r5, _0806AA98 @ =0x000003FF
	ands r1, r5
	lsls r1, r1, #5
	ldr r4, _0806AA9C @ =0x06010000
	adds r1, r1, r4
	movs r2, #0x40
	bl sub_08015068
	movs r0, #0xe8
	lsls r0, r0, #3
	add r0, r8
	adds r1, r6, #0
	adds r1, #0x4c
	ands r1, r5
	lsls r1, r1, #5
	adds r1, r1, r4
	movs r2, #0x40
	bl sub_08015068
_0806AA48:
	adds r0, r7, #0
	cmp r7, #0
	bge _0806AA50
	rsbs r0, r7, #0
_0806AA50:
	ldr r4, _0806AA98 @ =0x000003FF
	ands r0, r4
	lsls r0, r0, #5
	add r0, sb
	adds r1, r6, #0
	adds r1, #0x2d
	ands r1, r4
	lsls r1, r1, #5
	ldr r5, _0806AA9C @ =0x06010000
	adds r1, r1, r5
	movs r2, #0x20
	bl sub_08015068
	adds r0, r7, #0
	cmp r0, #0
	bge _0806AA72
	rsbs r0, r0, #0
_0806AA72:
	adds r0, #0x20
	ands r0, r4
	lsls r0, r0, #5
	add r0, sb
	adds r1, r6, #0
	adds r1, #0x4d
	ands r1, r4
	lsls r1, r1, #5
	adds r1, r1, r5
	movs r2, #0x20
	bl sub_08015068
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806AA98: .4byte 0x000003FF
_0806AA9C: .4byte 0x06010000

	thumb_func_start sub_0806AAA0
sub_0806AAA0: @ 0x0806AAA0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	str r0, [sp, #0xc]
	str r1, [sp, #0x10]
	mov r8, r2
	mov sb, r3
	str r0, [sp, #0x14]
	ldr r0, [sp, #0x3c]
	subs r0, #1
	lsls r0, r0, #1
	ldr r1, [sp, #0xc]
	adds r0, r1, r0
	str r0, [sp, #0x18]
	ldr r3, [sp, #0x10]
	lsls r6, r3, #0xc
	adds r7, r1, #0
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r7, r0
	adds r5, r6, #0
	orrs r5, r7
	mov r0, r8
	subs r0, #0x12
	mov r1, sb
	subs r1, #4
	ldr r2, _0806AB20 @ =0x08C0D608
	str r5, [sp]
	movs r3, #0
	mov sl, r3
	str r3, [sp, #4]
	movs r3, #5
	str r3, [sp, #8]
	movs r3, #0
	bl sub_08067AEC
	ldr r0, [sp, #0x3c]
	cmp r0, #0
	beq _0806AB9A
	ldr r0, _0806AB24 @ =0x08C4AB58
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	ldr r1, [sp, #0x40]
	cmp r1, #0
	blt _0806AB2C
	ldr r2, _0806AB28 @ =0x08C0D638
	str r5, [sp]
	mov r3, sl
	str r3, [sp, #4]
	movs r0, #5
	str r0, [sp, #8]
	mov r0, r8
	mov r1, sb
	movs r3, #2
	bl sub_08067AEC
	str r0, [r4, #0x64]
	b _0806AB72
	.align 2, 0
_0806AB20: .4byte 0x08C0D608
_0806AB24: .4byte 0x08C4AB58
_0806AB28: .4byte 0x08C0D638
_0806AB2C:
	ldr r1, [sp, #0x18]
	movs r3, #0x80
	lsls r3, r3, #3
	orrs r1, r3
	orrs r1, r6
	mov r0, r8
	subs r0, #3
	ldr r2, _0806ABAC @ =0x08C0D684
	str r1, [sp]
	mov r1, sl
	str r1, [sp, #4]
	movs r3, #5
	str r3, [sp, #8]
	mov r1, sb
	movs r3, #2
	bl sub_08067AEC
	str r0, [r4, #0x60]
	orrs r6, r7
	ldr r2, _0806ABB0 @ =0x08C0D668
	str r6, [sp]
	mov r0, sl
	str r0, [sp, #4]
	movs r1, #5
	str r1, [sp, #8]
	mov r0, r8
	mov r1, sb
	movs r3, #2
	bl sub_08067AEC
	str r0, [r4, #0x64]
	ldr r0, [sp, #0x40]
	ldr r1, [sp, #0x18]
	bl sub_0806A9C0
_0806AB72:
	movs r0, #0
	mov r3, r8
	strh r3, [r4, #0x32]
	mov r1, sb
	strh r1, [r4, #0x3a]
	strh r0, [r4, #0x2c]
	mov r3, sp
	ldrh r3, [r3, #0x14]
	strh r3, [r4, #0x2e]
	mov r0, sp
	ldrh r0, [r0, #0x18]
	strh r0, [r4, #0x30]
	ldr r1, [sp, #0xc]
	str r1, [r4, #0x44]
	ldr r3, [sp, #0x10]
	str r3, [r4, #0x48]
	ldr r0, [sp, #0x3c]
	str r0, [r4, #0x4c]
	ldr r1, [sp, #0x40]
	str r1, [r4, #0x50]
_0806AB9A:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806ABAC: .4byte 0x08C0D684
_0806ABB0: .4byte 0x08C0D668

	thumb_func_start sub_0806ABB4
sub_0806ABB4: @ 0x0806ABB4
	push {r4, r5, lr}
	sub sp, #0xc
	adds r4, r0, #0
	ldr r0, [r4, #0x50]
	cmp r0, #0
	bge _0806ABC8
	adds r0, r4, #0
	bl Proc_Break
	b _0806AC16
_0806ABC8:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r5, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xf
	bne _0806AC16
	strh r5, [r4, #0x2c]
	ldr r3, [r4, #0x48]
	lsls r3, r3, #0xc
	movs r1, #0x30
	ldrsh r0, [r4, r1]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	orrs r3, r0
	movs r2, #0x32
	ldrsh r0, [r4, r2]
	subs r0, #3
	movs r2, #0x3a
	ldrsh r1, [r4, r2]
	ldr r2, _0806AC20 @ =0x08C0D6C0
	str r3, [sp]
	str r5, [sp, #4]
	movs r3, #3
	str r3, [sp, #8]
	movs r3, #2
	bl sub_08067AEC
	str r0, [r4, #0x60]
	ldr r0, [r4, #0x50]
	movs r2, #0x30
	ldrsh r1, [r4, r2]
	bl sub_0806A958
	adds r0, r4, #0
	bl Proc_Break
_0806AC16:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806AC20: .4byte 0x08C0D6C0

	thumb_func_start sub_0806AC24
sub_0806AC24: @ 0x0806AC24
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, [r4, #0x50]
	cmp r2, #0
	bge _0806AC34
	bl Proc_Break
	b _0806AC56
_0806AC34:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xf
	bne _0806AC56
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x30
	ldrsh r1, [r4, r0]
	adds r0, r2, #0
	bl sub_0806A9C0
	adds r0, r4, #0
	bl Proc_Break
_0806AC56:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0806AC5C
sub_0806AC5C: @ 0x0806AC5C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0806AC80 @ =0x02020130
	ldr r0, [r0]
	cmp r0, #1
	bne _0806AC7A
	ldr r0, [r4, #0x60]
	bl Proc_End
	ldr r0, [r4, #0x64]
	bl Proc_End
	adds r0, r4, #0
	bl Proc_Break
_0806AC7A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806AC80: .4byte 0x02020130

	thumb_func_start sub_0806AC84
sub_0806AC84: @ 0x0806AC84
	ldr r0, _0806AC90 @ =0x02020134
	ldr r0, [r0]
	cmp r0, #1
	beq _0806AC94
	movs r0, #0
	b _0806AC96
	.align 2, 0
_0806AC90: .4byte 0x02020134
_0806AC94:
	movs r0, #1
_0806AC96:
	bx lr

	thumb_func_start nullsub_10
nullsub_10: @ 0x0806AC98
	bx lr
	.align 2, 0

	thumb_func_start sub_0806AC9C
sub_0806AC9C: @ 0x0806AC9C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0806ACB8 @ =0x08C4AB80
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	ldr r1, _0806ACBC @ =0x02020134
	movs r0, #0
	str r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806ACB8: .4byte 0x08C4AB80
_0806ACBC: .4byte 0x02020134

	thumb_func_start sub_0806ACC0
sub_0806ACC0: @ 0x0806ACC0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0
	mov sb, r0
	mov sl, r0
	mov r8, r0
	movs r7, #0
	ldr r0, [r6, #0x5c]
	bl GetAISSubjectId
	cmp r0, #0
	bne _0806ACEC
	ldr r0, _0806ACE8 @ =gpEkrBattleUnitLeft
	b _0806ACEE
	.align 2, 0
_0806ACE8: .4byte gpEkrBattleUnitLeft
_0806ACEC:
	ldr r0, _0806AD3C @ =gpEkrBattleUnitRight
_0806ACEE:
	ldr r0, [r0]
	ldr r0, [r0, #4]
	ldrb r5, [r0, #4]
	cmp r5, #0x14
	bge _0806ACFA
	b _0806ADFC
_0806ACFA:
	cmp r5, #0x17
	ble _0806AD00
	b _0806ADFC
_0806AD00:
	ldr r0, _0806AD40 @ =gpEkrTriangleUnits
	ldr r1, [r0]
	ldr r0, [r1, #4]
	ldrb r0, [r0, #4]
	cmp r0, #0x14
	bne _0806AD10
	movs r2, #0
	mov sb, r2
_0806AD10:
	cmp r0, #0x15
	bne _0806AD18
	movs r2, #0
	mov sb, r2
_0806AD18:
	cmp r0, #0x16
	bne _0806AD20
	movs r2, #1
	mov sb, r2
_0806AD20:
	cmp r0, #0x17
	bne _0806AD28
	movs r0, #1
	mov sb, r0
_0806AD28:
	adds r0, r1, #0
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	bne _0806AD44
	movs r0, #1
	b _0806AD4A
	.align 2, 0
_0806AD3C: .4byte gpEkrBattleUnitRight
_0806AD40: .4byte gpEkrTriangleUnits
_0806AD44:
	adds r0, r4, #0
	bl GetItemType
_0806AD4A:
	cmp r0, #1
	beq _0806AD54
	cmp r0, #2
	beq _0806AD5A
	b _0806AD6C
_0806AD54:
	movs r1, #0
	mov r8, r1
	b _0806AD6C
_0806AD5A:
	adds r0, r4, #0
	bl GetItemIndex
	movs r2, #1
	mov r8, r2
	cmp r0, #0x28
	bne _0806AD6C
	movs r0, #2
	mov r8, r0
_0806AD6C:
	ldr r0, _0806ADA8 @ =gpEkrTriangleUnits
	ldr r1, [r0, #4]
	ldr r0, [r1, #4]
	ldrb r0, [r0, #4]
	cmp r0, #0x14
	bne _0806AD7C
	movs r2, #0
	mov sl, r2
_0806AD7C:
	cmp r0, #0x15
	bne _0806AD84
	movs r2, #0
	mov sl, r2
_0806AD84:
	cmp r0, #0x16
	bne _0806AD8C
	movs r2, #1
	mov sl, r2
_0806AD8C:
	cmp r0, #0x17
	bne _0806AD94
	movs r0, #1
	mov sl, r0
_0806AD94:
	adds r0, r1, #0
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	bne _0806ADAC
	movs r0, #1
	b _0806ADB2
	.align 2, 0
_0806ADA8: .4byte gpEkrTriangleUnits
_0806ADAC:
	adds r0, r4, #0
	bl GetItemType
_0806ADB2:
	cmp r0, #1
	beq _0806ADBC
	cmp r0, #2
	beq _0806ADC0
	b _0806ADCE
_0806ADBC:
	movs r7, #0
	b _0806ADCE
_0806ADC0:
	adds r0, r4, #0
	bl GetItemIndex
	movs r7, #1
	cmp r0, #0x28
	bne _0806ADCE
	movs r7, #2
_0806ADCE:
	ldr r0, [r6, #0x5c]
	str r7, [sp]
	mov r1, sb
	mov r2, sl
	mov r3, r8
	bl sub_0806B15C
	ldr r0, _0806ADF4 @ =gpEkrBattleUnitRight
	ldr r0, [r0]
	adds r0, #0x4a
	ldrh r0, [r0]
	bl GetItemIndex
	cmp r0, #0x28
	bne _0806AEA4
	ldr r1, _0806ADF8 @ =0x02020134
	movs r0, #0
	b _0806AEA8
	.align 2, 0
_0806ADF4: .4byte gpEkrBattleUnitRight
_0806ADF8: .4byte 0x02020134
_0806ADFC:
	ldr r0, _0806AE28 @ =gpEkrTriangleUnits
	ldr r1, [r0]
	ldr r0, [r1, #4]
	ldrb r0, [r0, #4]
	cmp r0, #0x32
	bne _0806AE0C
	movs r2, #0
	mov sb, r2
_0806AE0C:
	cmp r0, #0x33
	bne _0806AE14
	movs r0, #1
	mov sb, r0
_0806AE14:
	adds r0, r1, #0
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	bne _0806AE2C
	movs r0, #1
	b _0806AE36
	.align 2, 0
_0806AE28: .4byte gpEkrTriangleUnits
_0806AE2C:
	adds r0, r4, #0
	bl GetItemType
	cmp r0, #0
	beq _0806AE40
_0806AE36:
	cmp r0, #1
	bne _0806AE44
	movs r1, #0
	mov r8, r1
	b _0806AE44
_0806AE40:
	movs r2, #1
	mov r8, r2
_0806AE44:
	ldr r0, _0806AE70 @ =gpEkrTriangleUnits
	ldr r1, [r0, #4]
	ldr r0, [r1, #4]
	ldrb r0, [r0, #4]
	cmp r0, #0x32
	bne _0806AE54
	movs r2, #0
	mov sl, r2
_0806AE54:
	cmp r0, #0x33
	bne _0806AE5C
	movs r0, #1
	mov sl, r0
_0806AE5C:
	adds r0, r1, #0
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	bne _0806AE74
	movs r0, #1
	b _0806AE7E
	.align 2, 0
_0806AE70: .4byte gpEkrTriangleUnits
_0806AE74:
	adds r0, r4, #0
	bl GetItemType
	cmp r0, #0
	beq _0806AE86
_0806AE7E:
	cmp r0, #1
	bne _0806AE88
	movs r7, #0
	b _0806AE88
_0806AE86:
	movs r7, #1
_0806AE88:
	ldr r0, [r6, #0x5c]
	str r7, [sp]
	mov r1, sb
	mov r2, sl
	mov r3, r8
	bl sub_0806AEC4
	cmp r5, #0x32
	bne _0806AEA4
	ldr r1, _0806AEA0 @ =0x02020134
	movs r0, #0
	b _0806AEA8
	.align 2, 0
_0806AEA0: .4byte 0x02020134
_0806AEA4:
	ldr r1, _0806AEC0 @ =0x02020134
	movs r0, #1
_0806AEA8:
	str r0, [r1]
	adds r0, r6, #0
	bl Proc_Break
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806AEC0: .4byte 0x02020134

	thumb_func_start sub_0806AEC4
sub_0806AEC4: @ 0x0806AEC4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r7, [sp, #0x18]
	ldr r0, _0806AEF8 @ =0x08C4AB98
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r5, [r0, #0x44]
	str r6, [r0, #0x48]
	mov r1, r8
	str r1, [r0, #0x4c]
	str r7, [r0, #0x50]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0806AEF8: .4byte 0x08C4AB98

	thumb_func_start sub_0806AEFC
sub_0806AEFC: @ 0x0806AEFC
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl GetCoreAIStruct
	adds r5, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xa
	bne _0806AF22
	ldr r0, [r4, #0x5c]
	ldr r2, [r4, #0x44]
	ldr r3, [r4, #0x4c]
	movs r1, #0
	bl sub_0806B088
_0806AF22:
	ldrh r0, [r4, #0x2c]
	cmp r0, #0x1c
	bne _0806AF30
	adds r0, r5, #0
	movs r1, #6
	bl sub_0804F7B8
_0806AF30:
	ldrh r3, [r4, #0x2c]
	cmp r3, #0x22
	bne _0806AF62
	ldr r2, [r4, #0x44]
	ldr r3, [r4, #0x4c]
	adds r0, r5, #0
	movs r1, #0
	bl sub_0806AFB4
	ldr r0, [r4, #0x5c]
	ldr r2, [r4, #0x48]
	ldr r3, [r4, #0x50]
	movs r1, #1
	bl sub_0806B088
	movs r0, #0x9a
	lsls r0, r0, #2
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl PlaySFX
_0806AF62:
	ldrh r0, [r4, #0x2c]
	cmp r0, #0x33
	bne _0806AF70
	adds r0, r5, #0
	movs r1, #6
	bl sub_0804F7B8
_0806AF70:
	ldrh r3, [r4, #0x2c]
	cmp r3, #0x39
	bne _0806AF96
	ldr r2, [r4, #0x48]
	ldr r3, [r4, #0x50]
	adds r0, r5, #0
	movs r1, #1
	bl sub_0806AFB4
	movs r0, #0x9a
	lsls r0, r0, #2
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl PlaySFX
_0806AF96:
	ldrh r0, [r4, #0x2c]
	cmp r0, #0x43
	bne _0806AFA8
	ldr r1, _0806AFB0 @ =0x02020134
	movs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0806AFA8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806AFB0: .4byte 0x02020134

	thumb_func_start sub_0806AFB4
sub_0806AFB4: @ 0x0806AFB4
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r7, r3, #0
	ldr r0, _0806AFDC @ =0x08C4ABB0
	movs r1, #3
	bl Proc_Start
	adds r1, r0, #0
	str r4, [r1, #0x5c]
	movs r0, #0
	strh r0, [r1, #0x2c]
	str r0, [r1, #0x44]
	cmp r5, #0
	bne _0806AFE8
	ldr r0, _0806AFE0 @ =0x0203E080
	ldr r2, [r0]
	ldr r0, _0806AFE4 @ =0x082EB968
	b _0806AFEE
	.align 2, 0
_0806AFDC: .4byte 0x08C4ABB0
_0806AFE0: .4byte 0x0203E080
_0806AFE4: .4byte 0x082EB968
_0806AFE8:
	ldr r0, _0806B024 @ =0x0203E080
	ldr r2, [r0, #4]
	ldr r0, _0806B028 @ =0x082EB976
_0806AFEE:
	str r0, [r1, #0x48]
	ldr r0, _0806B02C @ =0x08C4ABC8
	str r0, [r1, #0x4c]
	str r0, [r1, #0x50]
	ldr r4, _0806B030 @ =0x02017784
	adds r0, r2, #0
	adds r1, r4, #0
	bl LZ77UnCompWram
	adds r0, r4, #0
	movs r1, #0x20
	bl SpellFx_RegisterBgPal
	ldr r0, _0806B034 @ =0x082EB984
	cmp r6, #0
	beq _0806B016
	ldr r0, _0806B038 @ =0x082ECD18
	cmp r7, #0
	bne _0806B016
	ldr r0, _0806B03C @ =0x082EC328
_0806B016:
	movs r1, #0x80
	lsls r1, r1, #6
	bl SpellFx_RegisterBgGfx
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806B024: .4byte 0x0203E080
_0806B028: .4byte 0x082EB976
_0806B02C: .4byte 0x08C4ABC8
_0806B030: .4byte 0x02017784
_0806B034: .4byte 0x082EB984
_0806B038: .4byte 0x082ECD18
_0806B03C: .4byte 0x082EC328

	thumb_func_start sub_0806B040
sub_0806B040: @ 0x0806B040
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl SpellFx_InterpretBgAnimScript
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _0806B06E
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl SpellFx_WriteBgMap
	b _0806B080
_0806B06E:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _0806B080
	bl SpellFx_ClearBG1
	adds r0, r4, #0
	bl Proc_Break
_0806B080:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806B088
sub_0806B088: @ 0x0806B088
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r7, r0, #0
	adds r4, r1, #0
	mov r8, r2
	mov sb, r3
	ldr r0, _0806B0BC @ =0x08C4ABE0
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r7, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	cmp r4, #0
	bne _0806B0C8
	movs r0, #0x12
	strh r0, [r5, #0x2e]
	ldr r0, _0806B0C0 @ =0x0203E080
	ldr r6, [r0]
	ldr r3, _0806B0C4 @ =0x08C4B110
	b _0806B0D2
	.align 2, 0
_0806B0BC: .4byte 0x08C4ABE0
_0806B0C0: .4byte 0x0203E080
_0806B0C4: .4byte 0x08C4B110
_0806B0C8:
	movs r0, #0x11
	strh r0, [r5, #0x2e]
	ldr r0, _0806B11C @ =0x0203E080
	ldr r6, [r0, #4]
	ldr r3, _0806B120 @ =0x08C4B444
_0806B0D2:
	str r3, [sp]
	adds r0, r7, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	str r0, [r5, #0x60]
	ldr r4, _0806B124 @ =0x0201A784
	adds r0, r6, #0
	adds r1, r4, #0
	bl LZ77UnCompWram
	adds r0, r4, #0
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	ldr r0, _0806B128 @ =0x082EDD3C
	mov r1, r8
	cmp r1, #0
	beq _0806B104
	ldr r0, _0806B12C @ =0x082EF0C0
	mov r1, sb
	cmp r1, #0
	bne _0806B104
	ldr r0, _0806B130 @ =0x082EE6F4
_0806B104:
	movs r1, #0x80
	lsls r1, r1, #5
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806B11C: .4byte 0x0203E080
_0806B120: .4byte 0x08C4B444
_0806B124: .4byte 0x0201A784
_0806B128: .4byte 0x082EDD3C
_0806B12C: .4byte 0x082EF0C0
_0806B130: .4byte 0x082EE6F4

	thumb_func_start sub_0806B134
sub_0806B134: @ 0x0806B134
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0806B154
	ldr r0, [r4, #0x60]
	bl AnimDelete
	adds r0, r4, #0
	bl Proc_Break
_0806B154:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806B15C
sub_0806B15C: @ 0x0806B15C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r7, [sp, #0x18]
	ldr r0, _0806B190 @ =0x08C4ABF8
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r5, [r0, #0x44]
	str r6, [r0, #0x48]
	mov r1, r8
	str r1, [r0, #0x4c]
	str r7, [r0, #0x50]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0806B190: .4byte 0x08C4ABF8

	thumb_func_start sub_0806B194
sub_0806B194: @ 0x0806B194
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0806B1CA
	ldr r0, [r5, #0x5c]
	ldr r1, [r5, #0x44]
	ldr r2, [r5, #0x48]
	ldr r3, [r5, #0x4c]
	ldr r4, [r5, #0x50]
	str r4, [sp]
	bl sub_0806B264
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r5, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xe2
	movs r3, #1
	bl PlaySFX
_0806B1CA:
	ldrh r0, [r5, #0x2c]
	cmp r0, #0x30
	bne _0806B1EE
	ldr r0, [r5, #0x5c]
	ldr r2, [r5, #0x44]
	ldr r3, [r5, #0x4c]
	movs r1, #0
	bl sub_0806B440
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r5, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xe2
	movs r3, #1
	bl PlaySFX
_0806B1EE:
	ldrh r0, [r5, #0x2c]
	cmp r0, #0x3c
	bne _0806B204
	ldr r0, [r5, #0x5c]
	movs r1, #4
	bl sub_0804F7B8
	ldr r0, [r5, #0x5c]
	movs r1, #0xa
	bl sub_0806B5C0
_0806B204:
	ldrh r3, [r5, #0x2c]
	cmp r3, #0x4f
	bne _0806B228
	ldr r0, [r5, #0x5c]
	ldr r2, [r5, #0x48]
	ldr r3, [r5, #0x50]
	movs r1, #1
	bl sub_0806B440
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r5, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xe2
	movs r3, #1
	bl PlaySFX
_0806B228:
	ldrh r0, [r5, #0x2c]
	cmp r0, #0x5b
	bne _0806B234
	ldr r1, _0806B260 @ =0x02020134
	movs r0, #1
	str r0, [r1]
_0806B234:
	ldrh r3, [r5, #0x2c]
	cmp r3, #0x60
	bne _0806B24A
	ldr r0, [r5, #0x5c]
	movs r1, #4
	bl sub_0804F7B8
	ldr r0, [r5, #0x5c]
	movs r1, #0xa
	bl sub_0806B5C0
_0806B24A:
	ldrh r0, [r5, #0x2c]
	cmp r0, #0x78
	bne _0806B256
	adds r0, r5, #0
	bl Proc_Break
_0806B256:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806B260: .4byte 0x02020134

	thumb_func_start sub_0806B264
sub_0806B264: @ 0x0806B264
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	mov r8, r0
	adds r4, r1, #0
	mov sb, r2
	adds r6, r3, #0
	ldr r0, _0806B29C @ =0x08C4AC10
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	mov r0, r8
	str r0, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	movs r0, #0x14
	strh r0, [r5, #0x2e]
	ldr r0, _0806B2A0 @ =0x0203E080
	ldr r7, [r0]
	cmp r4, #0
	bne _0806B2AC
	ldr r3, _0806B2A4 @ =0x08C4B4DC
	ldr r6, _0806B2A8 @ =0x082EFA68
	b _0806B2D8
	.align 2, 0
_0806B29C: .4byte 0x08C4AC10
_0806B2A0: .4byte 0x0203E080
_0806B2A4: .4byte 0x08C4B4DC
_0806B2A8: .4byte 0x082EFA68
_0806B2AC:
	cmp r6, #1
	beq _0806B2C4
	cmp r6, #1
	bhs _0806B2D4
	ldr r3, _0806B2BC @ =0x08C4B56C
	ldr r6, _0806B2C0 @ =0x082EFD88
	b _0806B2D8
	.align 2, 0
_0806B2BC: .4byte 0x08C4B56C
_0806B2C0: .4byte 0x082EFD88
_0806B2C4:
	ldr r3, _0806B2CC @ =0x08C4B5FC
	ldr r6, _0806B2D0 @ =0x082F015C
	b _0806B2D8
	.align 2, 0
_0806B2CC: .4byte 0x08C4B5FC
_0806B2D0: .4byte 0x082F015C
_0806B2D4:
	ldr r3, _0806B318 @ =0x08C4B688
	ldr r6, _0806B31C @ =0x082F0590
_0806B2D8:
	str r3, [sp]
	mov r0, r8
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	adds r1, r0, #0
	str r1, [r5, #0x60]
	ldr r0, _0806B320 @ =0x00008840
	strh r0, [r1, #8]
	ldr r4, _0806B324 @ =0x0201A784
	adds r0, r7, #0
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r1, _0806B328 @ =0x02022B60
	adds r0, r4, #0
	movs r2, #8
	bl CpuFastSet
	adds r0, r6, #0
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r0, _0806B32C @ =0x0203E080
	ldr r7, [r0, #4]
	mov r0, sb
	cmp r0, #0
	bne _0806B338
	ldr r3, _0806B330 @ =0x08C4B4DC
	ldr r6, _0806B334 @ =0x082EFA68
	b _0806B364
	.align 2, 0
_0806B318: .4byte 0x08C4B688
_0806B31C: .4byte 0x082F0590
_0806B320: .4byte 0x00008840
_0806B324: .4byte 0x0201A784
_0806B328: .4byte 0x02022B60
_0806B32C: .4byte 0x0203E080
_0806B330: .4byte 0x08C4B4DC
_0806B334: .4byte 0x082EFA68
_0806B338:
	ldr r0, [sp, #0x20]
	cmp r0, #1
	beq _0806B350
	cmp r0, #1
	bhs _0806B360
	ldr r3, _0806B348 @ =0x08C4B56C
	ldr r6, _0806B34C @ =0x082EFD88
	b _0806B364
	.align 2, 0
_0806B348: .4byte 0x08C4B56C
_0806B34C: .4byte 0x082EFD88
_0806B350:
	ldr r3, _0806B358 @ =0x08C4B5FC
	ldr r6, _0806B35C @ =0x082F015C
	b _0806B364
	.align 2, 0
_0806B358: .4byte 0x08C4B5FC
_0806B35C: .4byte 0x082F015C
_0806B360:
	ldr r3, _0806B3CC @ =0x08C4B688
	ldr r6, _0806B3D0 @ =0x082F0590
_0806B364:
	str r3, [sp]
	mov r0, r8
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	adds r1, r0, #0
	str r1, [r5, #0x64]
	ldr r0, _0806B3D4 @ =0x0000A880
	strh r0, [r1, #8]
	ldr r4, _0806B3D8 @ =0x0201AF84
	adds r0, r7, #0
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r1, _0806B3DC @ =0x02022BA0
	adds r0, r4, #0
	movs r2, #8
	bl CpuFastSet
	adds r0, r6, #0
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r1, _0806B3E0 @ =0x06010800
	ldr r0, _0806B3E4 @ =0xFFFFF800
	adds r4, r4, r0
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r4, #0
	bl RegisterDataMove
	bl EnablePalSync
	ldr r1, [r5, #0x60]
	ldr r0, [r5, #0x5c]
	ldrh r0, [r0, #2]
	adds r0, #0x20
	strh r0, [r1, #2]
	ldr r1, [r5, #0x64]
	ldr r0, [r5, #0x5c]
	ldrh r0, [r0, #2]
	subs r0, #0x20
	strh r0, [r1, #2]
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806B3CC: .4byte 0x08C4B688
_0806B3D0: .4byte 0x082F0590
_0806B3D4: .4byte 0x0000A880
_0806B3D8: .4byte 0x0201AF84
_0806B3DC: .4byte 0x02022BA0
_0806B3E0: .4byte 0x06010800
_0806B3E4: .4byte 0xFFFFF800

	thumb_func_start sub_0806B3E8
sub_0806B3E8: @ 0x0806B3E8
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x20
	movs r2, #0
	bl Interpolate
	ldr r2, [r4, #0x60]
	ldr r1, [r4, #0x5c]
	ldrh r1, [r1, #2]
	adds r1, r1, r0
	strh r1, [r2, #2]
	ldr r2, [r4, #0x64]
	ldr r1, [r4, #0x5c]
	ldrh r1, [r1, #2]
	subs r0, r1, r0
	strh r0, [r2, #2]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0806B438
	ldr r0, [r4, #0x60]
	bl AnimDelete
	ldr r0, [r4, #0x64]
	bl AnimDelete
	adds r0, r4, #0
	bl Proc_Break
_0806B438:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0806B440
sub_0806B440: @ 0x0806B440
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	mov r8, r0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r7, r3, #0
	ldr r0, _0806B47C @ =0x08C4AC28
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	mov r0, r8
	str r0, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #5
	strh r0, [r4, #0x2e]
	adds r0, r4, #0
	adds r0, #0x29
	strb r5, [r0]
	adds r0, #1
	strb r6, [r0]
	cmp r5, #0
	bne _0806B484
	ldr r0, _0806B480 @ =0x0203E080
	ldr r0, [r0]
	b _0806B488
	.align 2, 0
_0806B47C: .4byte 0x08C4AC28
_0806B480: .4byte 0x0203E080
_0806B484:
	ldr r0, _0806B494 @ =0x0203E080
	ldr r0, [r0, #4]
_0806B488:
	mov sb, r0
	cmp r6, #0
	bne _0806B4A0
	ldr r3, _0806B498 @ =0x08C4B778
	ldr r6, _0806B49C @ =0x082F0950
	b _0806B4CC
	.align 2, 0
_0806B494: .4byte 0x0203E080
_0806B498: .4byte 0x08C4B778
_0806B49C: .4byte 0x082F0950
_0806B4A0:
	cmp r7, #1
	beq _0806B4B8
	cmp r7, #1
	bhs _0806B4C8
	ldr r3, _0806B4B0 @ =0x08C4B8F0
	ldr r6, _0806B4B4 @ =0x082F0E88
	b _0806B4CC
	.align 2, 0
_0806B4B0: .4byte 0x08C4B8F0
_0806B4B4: .4byte 0x082F0E88
_0806B4B8:
	ldr r3, _0806B4C0 @ =0x08C4BA44
	ldr r6, _0806B4C4 @ =0x082F15C4
	b _0806B4CC
	.align 2, 0
_0806B4C0: .4byte 0x08C4BA44
_0806B4C4: .4byte 0x082F15C4
_0806B4C8:
	ldr r3, _0806B4F8 @ =0x08C4BD0C
	ldr r6, _0806B4FC @ =0x082F1D50
_0806B4CC:
	str r3, [sp]
	mov r0, r8
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08050BF8
	adds r1, r0, #0
	str r1, [r4, #0x60]
	cmp r5, #0
	bne _0806B500
	ldrh r0, [r1, #4]
	adds r0, #0xa
	strh r0, [r1, #4]
	ldr r1, [r4, #0x60]
	movs r0, #0x78
	strh r0, [r1, #0xa]
	bl AnimSort
	ldr r0, [r4, #0x5c]
	ldrh r1, [r0, #2]
	adds r1, #0x10
	b _0806B516
	.align 2, 0
_0806B4F8: .4byte 0x08C4BD0C
_0806B4FC: .4byte 0x082F1D50
_0806B500:
	ldrh r0, [r1, #4]
	adds r0, #2
	strh r0, [r1, #4]
	ldr r1, [r4, #0x60]
	movs r0, #0x14
	strh r0, [r1, #0xa]
	bl AnimSort
	ldr r0, [r4, #0x5c]
	ldrh r1, [r0, #2]
	subs r1, #0xc
_0806B516:
	strh r1, [r4, #0x32]
	ldrh r0, [r0, #2]
	subs r0, #0x10
	strh r0, [r4, #0x34]
	ldr r0, [r4, #0x60]
	strh r1, [r0, #2]
	ldr r4, _0806B54C @ =0x0201A784
	mov r0, sb
	adds r1, r4, #0
	bl LZ77UnCompWram
	adds r0, r4, #0
	movs r1, #0x20
	bl SpellFx_RegisterObjPal
	movs r1, #0x80
	lsls r1, r1, #5
	adds r0, r6, #0
	bl SpellFx_RegisterObjGfx
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806B54C: .4byte 0x0201A784

	thumb_func_start sub_0806B550
sub_0806B550: @ 0x0806B550
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0x32
	ldrsh r1, [r4, r0]
	movs r5, #0x34
	ldrsh r2, [r4, r5]
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r5, #0x2e
	ldrsh r0, [r4, r5]
	str r0, [sp]
	movs r0, #1
	bl Interpolate
	ldr r1, [r4, #0x60]
	strh r0, [r1, #2]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0806B590
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x14
	strh r0, [r4, #0x2e]
	adds r0, r4, #0
	bl Proc_Break
_0806B590:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0806B598
sub_0806B598: @ 0x0806B598
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0806B5B8
	ldr r0, [r4, #0x60]
	bl AnimDelete
	adds r0, r4, #0
	bl Proc_Break
_0806B5B8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806B5C0
sub_0806B5C0: @ 0x0806B5C0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r1, _0806B5F0 @ =0x0201774C
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0806B5F4 @ =0x08C4AC48
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	movs r1, #0
	bl sub_0804EF18
	str r0, [r4, #0x60]
	movs r0, #0
	strh r0, [r4, #0x2c]
	strh r6, [r4, #0x2e]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806B5F0: .4byte 0x0201774C
_0806B5F4: .4byte 0x08C4AC48

	thumb_func_start sub_0806B5F8
sub_0806B5F8: @ 0x0806B5F8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r0, #0
	ldr r4, _0806B760 @ =0x02017760
	ldrh r1, [r4]
	ldrh r2, [r4, #2]
	movs r0, #2
	bl SetBgOffset
	ldr r6, _0806B764 @ =0x02000038
	ldrh r0, [r4]
	ldrh r2, [r6]
	adds r1, r0, r2
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldrh r3, [r4, #2]
	ldrh r0, [r6, #2]
	adds r2, r3, r0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #0
	bl SetBgOffset
	ldrh r1, [r4]
	ldrh r2, [r6]
	adds r0, r1, r2
	rsbs r0, r0, #0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldrh r3, [r4, #2]
	ldrh r2, [r6, #2]
	adds r1, r3, r2
	rsbs r1, r1, #0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sub_0804CC8C
	ldrh r3, [r4]
	ldrh r1, [r6]
	adds r0, r3, r1
	rsbs r0, r0, #0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r2, [r4, #2]
	ldrh r3, [r6, #2]
	adds r1, r2, r3
	rsbs r1, r1, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	bl sub_0804D5D8
	ldr r0, _0806B768 @ =0x02000028
	mov sb, r0
	ldrh r5, [r4]
	ldrh r2, [r0]
	adds r1, r5, r2
	ldr r3, _0806B76C @ =0x0201FB00
	mov sl, r3
	ldr r0, [r3]
	subs r1, r1, r0
	ldr r2, _0806B770 @ =0x0200002C
	mov r8, r2
	ldrh r4, [r4, #2]
	ldrh r3, [r2]
	subs r3, r3, r4
	mov ip, r3
	mov r2, sb
	ldrh r2, [r2, #2]
	adds r5, r5, r2
	subs r5, r5, r0
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	mov r3, r8
	ldrh r3, [r3, #2]
	subs r4, r3, r4
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	mov r0, ip
	lsls r2, r0, #0x10
	asrs r2, r2, #0x10
	movs r0, #0
	bl sub_08050FB4
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	movs r0, #1
	adds r1, r5, #0
	adds r2, r4, #0
	bl sub_08050FB4
	ldrh r0, [r7, #0x2c]
	adds r0, #1
	strh r0, [r7, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r7, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0806B752
	ldr r1, _0806B774 @ =0x0201774C
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldrh r1, [r6]
	ldrh r2, [r6, #2]
	movs r0, #0
	bl SetBgOffset
	ldrh r3, [r6]
	rsbs r0, r3, #0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldrh r2, [r6, #2]
	rsbs r1, r2, #0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sub_0804CC8C
	ldrh r3, [r6]
	rsbs r0, r3, #0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r6, [r6, #2]
	rsbs r1, r6, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	bl sub_0804D5D8
	mov r0, sl
	ldr r4, [r0]
	mov r2, sb
	ldrh r2, [r2]
	subs r1, r2, r4
	mov r3, sb
	ldrh r3, [r3, #2]
	subs r4, r3, r4
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	mov r0, r8
	ldrh r5, [r0, #2]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r3, #0
	ldrsh r2, [r0, r3]
	movs r0, #0
	bl sub_08050FB4
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r0, #1
	adds r1, r4, #0
	adds r2, r5, #0
	bl sub_08050FB4
	ldr r0, [r7, #0x60]
	bl Proc_End
	adds r0, r7, #0
	bl Proc_Break
_0806B752:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806B760: .4byte 0x02017760
_0806B764: .4byte 0x02000038
_0806B768: .4byte 0x02000028
_0806B76C: .4byte 0x0201FB00
_0806B770: .4byte 0x0200002C
_0806B774: .4byte 0x0201774C

	thumb_func_start sub_0806B778
sub_0806B778: @ 0x0806B778
	push {lr}
	lsls r1, r0, #1
	adds r1, r1, r0
	ldr r0, _0806B790 @ =0x08C4BD70
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r0, [r1]
	ldr r1, _0806B794 @ =0x06008000
	bl LZ77UnCompVram
	pop {r0}
	bx r0
	.align 2, 0
_0806B790: .4byte 0x08C4BD70
_0806B794: .4byte 0x06008000

	thumb_func_start sub_0806B798
sub_0806B798: @ 0x0806B798
	push {r4, lr}
	sub sp, #8
	lsls r1, r0, #1
	adds r1, r1, r0
	adds r1, #1
	ldr r0, _0806B7D0 @ =0x08C4BD70
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r0, [r1]
	ldr r4, _0806B7D4 @ =gEkrTsaBuffer
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r1, _0806B7D8 @ =gBg3Tm
	movs r0, #6
	str r0, [sp]
	movs r0, #0
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0x1e
	movs r3, #0x14
	bl sub_080672B8
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806B7D0: .4byte 0x08C4BD70
_0806B7D4: .4byte gEkrTsaBuffer
_0806B7D8: .4byte gBg3Tm

	thumb_func_start sub_0806B7DC
sub_0806B7DC: @ 0x0806B7DC
	push {lr}
	lsls r1, r0, #1
	adds r1, r1, r0
	adds r1, #2
	ldr r0, _0806B7F8 @ =0x08C4BD70
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r0, [r1]
	ldr r1, _0806B7FC @ =0x02022920
	bl LZ77UnCompWram
	pop {r0}
	bx r0
	.align 2, 0
_0806B7F8: .4byte 0x08C4BD70
_0806B7FC: .4byte 0x02022920

	thumb_func_start sub_0806B800
sub_0806B800: @ 0x0806B800
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	bl sub_0806B778
	movs r5, #0
	str r5, [sp]
	ldr r1, _0806B83C @ =0x0600FFE0
	ldr r2, _0806B840 @ =0x01000008
	mov r0, sp
	bl CpuFastSet
	adds r0, r4, #0
	bl sub_0806B798
	adds r0, r4, #0
	bl sub_0806B7DC
	ldr r0, _0806B844 @ =gPal
	strh r5, [r0]
	movs r0, #8
	bl EnableBgSync
	bl EnablePalSync
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806B83C: .4byte 0x0600FFE0
_0806B840: .4byte 0x01000008
_0806B844: .4byte gPal

	thumb_func_start sub_0806B848
sub_0806B848: @ 0x0806B848
	ldr r0, _0806B854 @ =0x0202013C
	ldr r0, [r0]
	cmp r0, #1
	beq _0806B858
	movs r0, #0
	b _0806B85A
	.align 2, 0
_0806B854: .4byte 0x0202013C
_0806B858:
	movs r0, #1
_0806B85A:
	bx lr

	thumb_func_start sub_0806B85C
sub_0806B85C: @ 0x0806B85C
	push {r4, lr}
	ldr r4, _0806B874 @ =0x02020138
	ldr r0, [r4]
	cmp r0, #0
	beq _0806B86E
	bl Proc_End
	movs r0, #0
	str r0, [r4]
_0806B86E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806B874: .4byte 0x02020138

	thumb_func_start sub_0806B878
sub_0806B878: @ 0x0806B878
	push {lr}
	ldr r0, _0806B888 @ =0x0000037A
	movs r1, #0x80
	lsls r1, r1, #1
	bl sub_08067DB4
	pop {r0}
	bx r0
	.align 2, 0
_0806B888: .4byte 0x0000037A

	thumb_func_start sub_0806B88C
sub_0806B88C: @ 0x0806B88C
	push {lr}
	movs r0, #0xdf
	lsls r0, r0, #2
	movs r1, #0x80
	lsls r1, r1, #1
	bl sub_08067DB4
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start MakeBattlePopupTileMapFromTSA
MakeBattlePopupTileMapFromTSA: @ 0x0806B8A0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov ip, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov sb, r1
	ldr r6, _0806B980 @ =gEkrTsaBuffer
	ldrh r1, [r6]
	movs r2, #0x88
	lsls r2, r2, #5
	adds r0, r1, r2
	mov r3, ip
	strh r0, [r3]
	mov r1, ip
	adds r1, #0x40
	ldrh r7, [r6, #0x30]
	adds r0, r7, r2
	strh r0, [r1]
	adds r1, #0x40
	adds r0, r6, #0
	adds r0, #0x60
	ldrh r0, [r0]
	adds r0, r0, r2
	strh r0, [r1]
	adds r1, #0x40
	adds r0, r6, #0
	adds r0, #0x90
	ldrh r0, [r0]
	adds r0, r0, r2
	strh r0, [r1]
	movs r0, #0
	mov r8, r0
	cmp r8, sb
	bhs _0806B934
	adds r3, #0xc2
	str r3, [sp]
	mov r5, ip
	adds r5, #0x82
	adds r4, r6, #0
	adds r4, #0x62
	subs r3, #0x80
	mov r2, ip
	adds r2, #2
	adds r1, r6, #2
_0806B900:
	ldrh r7, [r1]
	movs r0, #0x88
	lsls r0, r0, #5
	adds r7, r7, r0
	strh r7, [r2]
	ldrh r7, [r1, #0x30]
	adds r7, r7, r0
	strh r7, [r3]
	ldrh r7, [r4]
	adds r7, r7, r0
	strh r7, [r5]
	ldrh r7, [r4, #0x30]
	adds r7, r7, r0
	ldr r0, [sp]
	strh r7, [r0]
	adds r0, #2
	str r0, [sp]
	adds r5, #2
	adds r4, #2
	adds r3, #2
	adds r2, #2
	adds r1, #2
	movs r7, #1
	add r8, r7
	cmp r8, sb
	blo _0806B900
_0806B934:
	mov r1, r8
	lsls r0, r1, #1
	mov r2, ip
	adds r1, r0, r2
	ldrh r3, [r6, #0x2e]
	movs r7, #0x88
	lsls r7, r7, #5
	adds r0, r3, r7
	strh r0, [r1, #2]
	adds r2, r1, #0
	adds r2, #0x42
	adds r0, r6, #0
	adds r0, #0x5e
	ldrh r0, [r0]
	adds r3, r7, #0
	adds r0, r0, r3
	strh r0, [r2]
	adds r2, #0x40
	adds r0, r6, #0
	adds r0, #0x8e
	ldrh r0, [r0]
	adds r0, r0, r3
	strh r0, [r2]
	adds r1, #0xc2
	adds r0, r6, #0
	adds r0, #0xbe
	ldrh r0, [r0]
	adds r0, r0, r3
	strh r0, [r1]
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806B980: .4byte gEkrTsaBuffer

	thumb_func_start DrawBattlePopup
DrawBattlePopup: @ 0x0806B984
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	str r0, [sp]
	adds r7, r1, #0
	mov r8, r2
	ldr r0, _0806B9DC @ =0x081E11FC
	ldr r1, _0806B9E0 @ =0x06002000
	bl LZ77UnCompVram
	ldr r0, _0806B9E4 @ =0x081E1378
	ldr r1, _0806B9E8 @ =gEkrTsaBuffer
	bl LZ77UnCompWram
	ldr r0, _0806B9EC @ =0x02017648
	ldr r1, _0806B9F0 @ =0x060020C0
	movs r2, #0x83
	lsls r2, r2, #1
	movs r3, #1
	bl InitTextFont
	bl SetTextDrawNoClear
	ldr r0, _0806B9F4 @ =0x081E1358
	ldr r1, _0806B9F8 @ =0x02022880
	movs r2, #8
	bl CpuFastSet
	cmp r7, #0
	bne _0806BA04
	ldr r0, _0806B9FC @ =0x0000071A
	bl DecodeMsg
	adds r4, r0, #0
	bl GetStringTextLen
	mov sb, r0
	mov r5, sb
	adds r5, #0x10
	ldr r0, _0806BA00 @ =0x0000071B
	b _0806BA1E
	.align 2, 0
_0806B9DC: .4byte 0x081E11FC
_0806B9E0: .4byte 0x06002000
_0806B9E4: .4byte 0x081E1378
_0806B9E8: .4byte gEkrTsaBuffer
_0806B9EC: .4byte 0x02017648
_0806B9F0: .4byte 0x060020C0
_0806B9F4: .4byte 0x081E1358
_0806B9F8: .4byte 0x02022880
_0806B9FC: .4byte 0x0000071A
_0806BA00: .4byte 0x0000071B
_0806BA04:
	cmp r7, #1
	bne _0806BA30
	movs r0, #0
	mov sb, r0
	mov r0, r8
	bl GetItemName
	adds r4, r0, #0
	bl GetStringTextLen
	adds r5, r0, #0
	adds r5, #0x10
	ldr r0, _0806BA2C @ =0x0000071C
_0806BA1E:
	bl DecodeMsg
	adds r4, r0, #0
	bl GetStringTextLen
	adds r4, r0, r5
	b _0806BA44
	.align 2, 0
_0806BA2C: .4byte 0x0000071C
_0806BA30:
	movs r1, #0
	mov sb, r1
	ldr r0, _0806BA9C @ =0x00000725
	bl DecodeMsg
	adds r4, r0, #0
	bl GetStringTextLen
	adds r4, r0, #0
	adds r4, #0x10
_0806BA44:
	adds r0, r4, #7
	asrs r6, r0, #3
	ldr r0, _0806BAA0 @ =gBg1Tm
	lsls r1, r6, #0x10
	lsrs r1, r1, #0x10
	bl MakeBattlePopupTileMapFromTSA
	ldr r5, _0806BAA4 @ =0x02017660
	adds r0, r5, #0
	adds r1, r6, #0
	bl InitText
	lsls r0, r6, #3
	subs r0, r0, r4
	asrs r0, r0, #1
	mov sl, r0
	adds r0, r5, #0
	mov r1, sl
	bl Text_SetCursor
	ldr r0, _0806BAA8 @ =0x081E1258
	ldr r1, _0806BAAC @ =0x060020C0
	bl LZ77UnCompVram
	cmp r7, #0
	bne _0806BAB8
	ldr r0, _0806BAB0 @ =0x0000071A
	bl DecodeMsg
	adds r4, r0, #0
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetColor
	adds r0, r5, #0
	adds r1, r4, #0
	bl Text_DrawString
	adds r0, r5, #0
	movs r1, #0x10
	bl Text_Skip
	ldr r0, _0806BAB4 @ =0x0000071B
	b _0806BADE
	.align 2, 0
_0806BA9C: .4byte 0x00000725
_0806BAA0: .4byte gBg1Tm
_0806BAA4: .4byte 0x02017660
_0806BAA8: .4byte 0x081E1258
_0806BAAC: .4byte 0x060020C0
_0806BAB0: .4byte 0x0000071A
_0806BAB4: .4byte 0x0000071B
_0806BAB8:
	cmp r7, #1
	bne _0806BAFC
	adds r0, r5, #0
	movs r1, #0x10
	bl Text_Skip
	mov r0, r8
	bl GetItemName
	adds r4, r0, #0
	adds r0, r5, #0
	movs r1, #1
	bl Text_SetColor
	adds r0, r5, #0
	adds r1, r4, #0
	bl Text_DrawString
	ldr r0, _0806BAF8 @ =0x0000071C
_0806BADE:
	bl DecodeMsg
	adds r4, r0, #0
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetColor
	adds r0, r5, #0
	adds r1, r4, #0
	bl Text_DrawString
	b _0806BB1C
	.align 2, 0
_0806BAF8: .4byte 0x0000071C
_0806BAFC:
	adds r0, r5, #0
	movs r1, #0x10
	bl Text_Skip
	ldr r0, _0806BB54 @ =0x00000725
	bl DecodeMsg
	adds r4, r0, #0
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetColor
	adds r0, r5, #0
	adds r1, r4, #0
	bl Text_DrawString
_0806BB1C:
	adds r1, r6, #2
	lsls r1, r1, #3
	movs r0, #0xf0
	subs r0, r0, r1
	asrs r5, r0, #1
	rsbs r1, r5, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldr r2, _0806BB58 @ =0x0000FFD0
	movs r0, #1
	bl SetBgOffset
	movs r0, #2
	bl EnableBgSync
	bl InitIcons
	cmp r7, #0
	bne _0806BB5C
	movs r0, #1
	movs r1, #0x12
	bl ApplyIconPalette
	mov r0, r8
	bl GetItemType
	adds r0, #0x70
	b _0806BB6E
	.align 2, 0
_0806BB54: .4byte 0x00000725
_0806BB58: .4byte 0x0000FFD0
_0806BB5C:
	cmp r7, #1
	bne _0806BB76
	movs r0, #0
	movs r1, #0x12
	bl ApplyIconPalette
	mov r0, r8
	bl sub_08017808
_0806BB6E:
	movs r1, #0x40
	bl PutIconObjImg
	b _0806BB88
_0806BB76:
	movs r0, #1
	movs r1, #0x12
	bl ApplyIconPalette
	mov r0, r8
	adds r0, #0x70
	movs r1, #0x40
	bl PutIconObjImg
_0806BB88:
	ldr r0, _0806BBF0 @ =0x08C4C058
	movs r1, #0x96
	bl AnimCreate
	ldr r3, [sp]
	str r0, [r3, #0x60]
	movs r4, #0
	movs r1, #0x91
	lsls r1, r1, #6
	strh r1, [r0, #8]
	mov r1, sl
	adds r1, #8
	adds r1, r5, r1
	add r1, sb
	strh r1, [r0, #2]
	movs r1, #0x38
	strh r1, [r0, #4]
	bl EnablePalSync
	ldr r2, _0806BBF4 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r1, #8
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x45
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806BBF0: .4byte 0x08C4C058
_0806BBF4: .4byte gDispIo

	thumb_func_start sub_0806BBF8
sub_0806BBF8: @ 0x0806BBF8
	push {r4, r5, lr}
	ldr r0, _0806BC54 @ =gEkrDistanceType
	ldrh r0, [r0]
	cmp r0, #4
	bne _0806BC6C
	ldr r4, _0806BC58 @ =0x02020138
	ldr r0, _0806BC5C @ =0x08C4C0C8
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r5, [r4]
	ldr r1, _0806BC60 @ =0x0202013C
	movs r0, #0
	str r0, [r1]
	subs r0, #1
	str r0, [r5, #0x44]
	movs r1, #0
	ldr r3, _0806BC64 @ =gpEkrBattleUnitRight
	ldr r2, _0806BC68 @ =gpEkrBattleUnitLeft
_0806BC20:
	ldr r0, [r3]
	adds r0, #0x28
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #0
	bne _0806BC3A
	ldr r0, [r2]
	adds r0, #0x28
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #0
	beq _0806BC3A
	str r1, [r5, #0x44]
_0806BC3A:
	adds r1, #1
	cmp r1, #7
	ble _0806BC20
	ldr r1, [r5, #0x44]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _0806BD0A
	movs r0, #0x80
	bl SetBgmVolume
	b _0806BD36
	.align 2, 0
_0806BC54: .4byte gEkrDistanceType
_0806BC58: .4byte 0x02020138
_0806BC5C: .4byte 0x08C4C0C8
_0806BC60: .4byte 0x0202013C
_0806BC64: .4byte gpEkrBattleUnitRight
_0806BC68: .4byte gpEkrBattleUnitLeft
_0806BC6C:
	ldr r4, _0806BD18 @ =0x02020138
	ldr r0, _0806BD1C @ =0x08C4C060
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	str r5, [r4]
	ldr r1, _0806BD20 @ =0x0202013C
	movs r0, #0
	str r0, [r1]
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x48]
	str r0, [r5, #0x44]
	str r0, [r5, #0x50]
	str r0, [r5, #0x4c]
	ldr r0, _0806BD24 @ =0x0203DFF8
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _0806BCC2
	ldr r4, _0806BD28 @ =gpEkrBattleUnitLeft
	ldr r0, [r4]
	bl HasBattleUnitGainedWeaponLevel
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0806BCAC
	ldr r0, [r4]
	adds r0, #0x4a
	ldrh r0, [r0]
	str r0, [r5, #0x44]
_0806BCAC:
	ldr r0, [r4]
	bl DidBattleUnitBreakWeapon
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0806BCC2
	ldr r0, [r4]
	adds r0, #0x4a
	ldrh r0, [r0]
	str r0, [r5, #0x48]
_0806BCC2:
	ldr r0, _0806BD24 @ =0x0203DFF8
	movs r1, #2
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _0806BCFA
	ldr r4, _0806BD2C @ =gpEkrBattleUnitRight
	ldr r0, [r4]
	bl HasBattleUnitGainedWeaponLevel
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0806BCE4
	ldr r0, [r4]
	adds r0, #0x4a
	ldrh r0, [r0]
	str r0, [r5, #0x4c]
_0806BCE4:
	ldr r0, [r4]
	bl DidBattleUnitBreakWeapon
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0806BCFA
	ldr r0, [r4]
	adds r0, #0x4a
	ldrh r0, [r0]
	str r0, [r5, #0x50]
_0806BCFA:
	ldr r0, [r5, #0x44]
	ldr r1, [r5, #0x48]
	adds r0, r0, r1
	ldr r1, [r5, #0x4c]
	adds r0, r0, r1
	ldr r1, [r5, #0x50]
	cmn r0, r1
	bne _0806BD30
_0806BD0A:
	ldr r1, _0806BD20 @ =0x0202013C
	movs r0, #1
	str r0, [r1]
	bl sub_0806B85C
	b _0806BD36
	.align 2, 0
_0806BD18: .4byte 0x02020138
_0806BD1C: .4byte 0x08C4C060
_0806BD20: .4byte 0x0202013C
_0806BD24: .4byte 0x0203DFF8
_0806BD28: .4byte gpEkrBattleUnitLeft
_0806BD2C: .4byte gpEkrBattleUnitRight
_0806BD30:
	movs r0, #0x80
	bl SetBgmVolume
_0806BD36:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0806BD3C
sub_0806BD3C: @ 0x0806BD3C
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x2c]
	adds r0, #1
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x10
	ble _0806BD54
	adds r0, r1, #0
	bl Proc_Break
_0806BD54:
	pop {r0}
	bx r0

	thumb_func_start sub_0806BD58
sub_0806BD58: @ 0x0806BD58
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, [r4, #0x44]
	cmp r2, #0
	beq _0806BD74
	movs r1, #0
	bl DrawBattlePopup
	bl sub_0806B878
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x60
	strh r0, [r4, #0x2e]
_0806BD74:
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0806BD80
sub_0806BD80: @ 0x0806BD80
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x44]
	cmp r0, #0
	bne _0806BD92
	adds r0, r4, #0
	bl Proc_Break
	b _0806BDB2
_0806BD92:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0806BDB2
	ldr r0, [r4, #0x60]
	bl AnimDelete
	bl SpellFx_ClearBG1
	adds r0, r4, #0
	bl Proc_Break
_0806BDB2:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0806BDB8
sub_0806BDB8: @ 0x0806BDB8
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, [r4, #0x4c]
	cmp r2, #0
	beq _0806BDD4
	movs r1, #0
	bl DrawBattlePopup
	bl sub_0806B878
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x60
	strh r0, [r4, #0x2e]
_0806BDD4:
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0806BDE0
sub_0806BDE0: @ 0x0806BDE0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x4c]
	cmp r0, #0
	bne _0806BDF2
	adds r0, r4, #0
	bl Proc_Break
	b _0806BE12
_0806BDF2:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0806BE12
	ldr r0, [r4, #0x60]
	bl AnimDelete
	bl SpellFx_ClearBG1
	adds r0, r4, #0
	bl Proc_Break
_0806BE12:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0806BE18
sub_0806BE18: @ 0x0806BE18
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, [r4, #0x48]
	cmp r2, #0
	beq _0806BE34
	movs r1, #1
	bl DrawBattlePopup
	bl sub_0806B88C
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x6c
	strh r0, [r4, #0x2e]
_0806BE34:
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0806BE40
sub_0806BE40: @ 0x0806BE40
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x48]
	cmp r0, #0
	bne _0806BE52
	adds r0, r4, #0
	bl Proc_Break
	b _0806BE72
_0806BE52:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0806BE72
	ldr r0, [r4, #0x60]
	bl AnimDelete
	bl SpellFx_ClearBG1
	adds r0, r4, #0
	bl Proc_Break
_0806BE72:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0806BE78
sub_0806BE78: @ 0x0806BE78
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, [r4, #0x50]
	cmp r2, #0
	beq _0806BE94
	movs r1, #1
	bl DrawBattlePopup
	bl sub_0806B88C
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x6c
	strh r0, [r4, #0x2e]
_0806BE94:
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0806BEA0
sub_0806BEA0: @ 0x0806BEA0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x50]
	cmp r0, #0
	bne _0806BEB2
	adds r0, r4, #0
	bl Proc_Break
	b _0806BED6
_0806BEB2:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0806BED6
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r0, [r4, #0x60]
	bl AnimDelete
	bl SpellFx_ClearBG1
	adds r0, r4, #0
	bl Proc_Break
_0806BED6:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0806BEDC
sub_0806BEDC: @ 0x0806BEDC
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x10
	ble _0806BF02
	ldr r0, _0806BF08 @ =0x0202013C
	movs r1, #1
	str r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	bl SetBgmVolume
	adds r0, r4, #0
	bl Proc_Break
_0806BF02:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806BF08: .4byte 0x0202013C

	thumb_func_start nullsub_60
nullsub_60: @ 0x0806BF0C
	bx lr
	.align 2, 0

	thumb_func_start sub_0806BF10
sub_0806BF10: @ 0x0806BF10
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x4c]
	cmp r0, #0
	beq _0806BF30
	ldr r2, [r4, #0x44]
	adds r0, r4, #0
	movs r1, #2
	bl DrawBattlePopup
	bl sub_0806B878
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x60
	strh r0, [r4, #0x2e]
_0806BF30:
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0806BF3C
sub_0806BF3C: @ 0x0806BF3C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x50]
	cmp r0, #0
	bne _0806BF4E
	adds r0, r4, #0
	bl Proc_Break
	b _0806BF72
_0806BF4E:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0806BF72
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r0, [r4, #0x60]
	bl AnimDelete
	bl SpellFx_ClearBG1
	adds r0, r4, #0
	bl Proc_Break
_0806BF72:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0806BF78
sub_0806BF78: @ 0x0806BF78
	ldr r1, _0806BF8C @ =gBattleStats
	movs r0, #0x80
	lsls r0, r0, #1
	ldrh r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _0806BF90
	movs r0, #0
	b _0806BF92
	.align 2, 0
_0806BF8C: .4byte gBattleStats
_0806BF90:
	movs r0, #1
_0806BF92:
	bx lr

	thumb_func_start sub_0806BF94
sub_0806BF94: @ 0x0806BF94
	push {lr}
	bl NewEkrBattleDeamon
	bl AnimClearAll
	bl sub_0804DC18
	ldr r1, _0806BFB4 @ =0x02017744
	str r0, [r1]
	bl sub_0806BFD0
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0
	.align 2, 0
_0806BFB4: .4byte 0x02017744

	thumb_func_start sub_0806BFB8
sub_0806BFB8: @ 0x0806BFB8
	push {lr}
	bl AnimClearAll
	bl sub_0806C0D4
	ldr r0, _0806BFCC @ =sub_08051214
	bl SetMainFunc
	pop {r0}
	bx r0
	.align 2, 0
_0806BFCC: .4byte sub_08051214

	thumb_func_start sub_0806BFD0
sub_0806BFD0: @ 0x0806BFD0
	push {lr}
	ldr r0, _0806BFE0 @ =0x08C4C100
	movs r1, #3
	bl Proc_Start
	pop {r0}
	bx r0
	.align 2, 0
_0806BFE0: .4byte 0x08C4C100

	thumb_func_start sub_0806BFE4
sub_0806BFE4: @ 0x0806BFE4
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r0, #0
	bl InitOam
	bl sub_0804D738
	bl UpdateBanimFrame
	bl sub_0804C9AC
	bl sub_0804D540
	bl NewEkrBattle
	ldr r0, _0806C038 @ =0x0203DFE2
	movs r1, #0
	ldrsh r0, [r0, r1]
	subs r0, #1
	bl sub_0806B800
	ldr r4, _0806C03C @ =gPal
	ldr r1, _0806C040 @ =0x020165C8
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r4, #0
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x20
	movs r3, #0x10
	bl sub_080676D4
	bl EnablePalSync
	adds r0, r5, #0
	bl Proc_Break
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806C038: .4byte 0x0203DFE2
_0806C03C: .4byte gPal
_0806C040: .4byte 0x020165C8

	thumb_func_start sub_0806C044
sub_0806C044: @ 0x0806C044
	push {r4, lr}
	adds r4, r0, #0
	bl sub_0804CC48
	bl sub_0804D5A4
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x10
	strh r0, [r4, #0x2e]
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0806C064
sub_0806C064: @ 0x0806C064
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r6, r0]
	movs r1, #0x2e
	ldrsh r0, [r6, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	adds r5, r0, #0
	ldr r0, _0806C0C0 @ =0x020165C8
	ldr r4, _0806C0C4 @ =gPal
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r4, #0
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x20
	adds r3, r5, #0
	bl sub_080676D4
	bl EnablePalSync
	ldrh r1, [r6, #0x2c]
	adds r1, #1
	strh r1, [r6, #0x2c]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r2, #0x2e
	ldrsh r0, [r6, r2]
	adds r0, #1
	cmp r1, r0
	bne _0806C0B8
	adds r0, r6, #0
	bl Proc_Break
_0806C0B8:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806C0C0: .4byte 0x020165C8
_0806C0C4: .4byte gPal

	thumb_func_start sub_0806C0C8
sub_0806C0C8: @ 0x0806C0C8
	push {lr}
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806C0D4
sub_0806C0D4: @ 0x0806C0D4
	push {lr}
	ldr r0, _0806C0E4 @ =0x08C4C130
	movs r1, #3
	bl Proc_Start
	pop {r0}
	bx r0
	.align 2, 0
_0806C0E4: .4byte 0x08C4C130

	thumb_func_start sub_0806C0E8
sub_0806C0E8: @ 0x0806C0E8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0806C10C @ =gPal
	ldr r1, _0806C110 @ =0x020165C8
	movs r2, #0x80
	lsls r2, r2, #1
	bl CpuFastSet
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x10
	strh r0, [r4, #0x2e]
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806C10C: .4byte gPal
_0806C110: .4byte 0x020165C8

	thumb_func_start sub_0806C114
sub_0806C114: @ 0x0806C114
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r6, r0]
	movs r1, #0x2e
	ldrsh r0, [r6, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	adds r5, r0, #0
	ldr r0, _0806C170 @ =0x020165C8
	ldr r4, _0806C174 @ =gPal
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r4, #0
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x20
	adds r3, r5, #0
	bl sub_080676D4
	bl EnablePalSync
	ldrh r1, [r6, #0x2c]
	adds r1, #1
	strh r1, [r6, #0x2c]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r2, #0x2e
	ldrsh r0, [r6, r2]
	adds r0, #1
	cmp r1, r0
	bne _0806C168
	adds r0, r6, #0
	bl Proc_Break
_0806C168:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806C170: .4byte 0x020165C8
_0806C174: .4byte gPal

	thumb_func_start sub_0806C178
sub_0806C178: @ 0x0806C178
	push {r4, lr}
	adds r4, r0, #0
	bl EndEkrBattleDeamon
	bl EndEkrGauge
	ldr r0, _0806C19C @ =OnGameLoopMain
	bl SetMainFunc
	ldr r0, _0806C1A0 @ =OnVBlank
	bl SetOnVBlank
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806C19C: .4byte OnGameLoopMain
_0806C1A0: .4byte OnVBlank

	thumb_func_start sub_0806C1A4
sub_0806C1A4: @ 0x0806C1A4
	push {r4, lr}
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r4, _0806C1D0 @ =0x08D61678
	bl GetItemIndex
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r1, [r4]
	ldr r2, _0806C1D4 @ =0x0000FFFF
	cmp r1, r2
	beq _0806C1C8
_0806C1BC:
	cmp r1, r0
	beq _0806C1C8
	adds r4, #0x10
	ldrh r1, [r4]
	cmp r1, r2
	bne _0806C1BC
_0806C1C8:
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0806C1D0: .4byte 0x08D61678
_0806C1D4: .4byte 0x0000FFFF

	thumb_func_start sub_0806C1D8
sub_0806C1D8: @ 0x0806C1D8
	push {lr}
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_0806C1A4
	ldrb r0, [r0, #2]
	pop {r1}
	bx r1

	thumb_func_start sub_0806C1E8
sub_0806C1E8: @ 0x0806C1E8
	push {lr}
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_0806C1A4
	ldrh r0, [r0, #4]
	pop {r1}
	bx r1

	thumb_func_start sub_0806C1F8
sub_0806C1F8: @ 0x0806C1F8
	push {lr}
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_0806C1A4
	ldr r0, [r0, #8]
	pop {r1}
	bx r1

	thumb_func_start sub_0806C208
sub_0806C208: @ 0x0806C208
	push {lr}
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_0806C1A4
	ldrb r0, [r0, #0xc]
	pop {r1}
	bx r1

	thumb_func_start sub_0806C218
sub_0806C218: @ 0x0806C218
	push {lr}
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_0806C1A4
	ldrb r0, [r0, #0xd]
	pop {r1}
	bx r1

	thumb_func_start sub_0806C228
sub_0806C228: @ 0x0806C228
	push {lr}
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_0806C1A4
	ldrb r0, [r0, #0xe]
	pop {r1}
	bx r1

	thumb_func_start MU_Init
MU_Init: @ 0x0806C238
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	movs r0, #0
	str r0, [r7]
_0806C242:
	ldr r0, [r7]
	cmp r0, #3
	ble _0806C24A
	b _0806C26C
_0806C24A:
	ldr r0, _0806C268 @ =0x030014E8
	ldr r1, [r7]
	movs r2, #0x4c
	muls r1, r2, r1
	adds r0, r0, r1
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #1
	str r1, [r7]
	b _0806C242
	.align 2, 0
_0806C268: .4byte 0x030014E8
_0806C26C:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806C274
sub_0806C274: @ 0x0806C274
	push {r4, r7, lr}
	sub sp, #0x14
	add r7, sp, #4
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r0, [r7]
	movs r1, #0x10
	ldrsb r1, [r0, r1]
	adds r0, r1, #0
	lsls r1, r0, #0x10
	lsrs r0, r1, #0x10
	ldr r1, [r7]
	movs r2, #0x11
	ldrsb r2, [r1, r2]
	adds r1, r2, #0
	lsls r2, r1, #0x10
	lsrs r1, r2, #0x10
	ldr r3, [r7, #4]
	adds r2, r3, #0
	lsls r3, r2, #0x10
	lsrs r2, r3, #0x10
	movs r3, #1
	rsbs r3, r3, #0
	ldr r4, [r7, #8]
	str r4, [sp]
	bl sub_0806C4A0
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	adds r0, #0x3e
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7, #0xc]
	adds r0, r1, #0
	b _0806C2D2
_0806C2D2:
	add sp, #0x14
	pop {r4, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0806C2DC
sub_0806C2DC: @ 0x0806C2DC
	push {r4, r7, lr}
	sub sp, #0x10
	add r7, sp, #4
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #4]
	ldrb r0, [r1, #4]
	str r0, [r7, #8]
	ldr r0, [r7]
	ldr r1, [r0, #0xc]
	movs r2, #0x80
	lsls r2, r2, #4
	adds r0, r1, #0
	ands r0, r2
	cmp r0, #0
	beq _0806C330
	ldr r0, [r7]
	ldrb r1, [r0, #0x1c]
	adds r0, r1, #0
	bl GetTrap
	adds r1, r0, #0
	ldrb r0, [r1, #3]
	cmp r0, #0x35
	beq _0806C324
	cmp r0, #0x35
	bgt _0806C318
	cmp r0, #0x34
	beq _0806C31E
	b _0806C330
_0806C318:
	cmp r0, #0x36
	beq _0806C32A
	b _0806C330
_0806C31E:
	movs r0, #0x5b
	str r0, [r7, #8]
	b _0806C330
_0806C324:
	movs r0, #0x5c
	str r0, [r7, #8]
	b _0806C330
_0806C32A:
	movs r0, #0x5d
	str r0, [r7, #8]
	b _0806C330
_0806C330:
	ldr r0, [r7]
	bl sub_08025B80
	ldr r1, [r7]
	movs r2, #0x10
	ldrsb r2, [r1, r2]
	adds r1, r2, #0
	lsls r2, r1, #0x10
	lsrs r1, r2, #0x10
	ldr r2, [r7]
	movs r3, #0x11
	ldrsb r3, [r2, r3]
	adds r2, r3, #0
	lsls r3, r2, #0x10
	lsrs r2, r3, #0x10
	ldr r4, [r7, #8]
	adds r3, r4, #0
	lsls r4, r3, #0x10
	lsrs r3, r4, #0x10
	movs r4, #1
	rsbs r4, r4, #0
	str r0, [sp]
	adds r0, r1, #0
	adds r1, r2, #0
	adds r2, r3, #0
	adds r3, r4, #0
	bl sub_0806C4A0
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	ldr r0, [r7, #4]
	adds r1, r0, #0
	adds r0, #0x3e
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7, #4]
	adds r0, r1, #0
	b _0806C38E
_0806C38E:
	add sp, #0x10
	pop {r4, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0806C398
sub_0806C398: @ 0x0806C398
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	bl sub_0806D3F8
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806C3B0
sub_0806C3B0: @ 0x0806C3B0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x3e
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806C3D8
sub_0806C3D8: @ 0x0806C3D8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x3e
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806C3F8
sub_0806C3F8: @ 0x0806C3F8
	push {r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r0, [r7]
	bl sub_0806C2DC
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	cmp r0, #0
	bne _0806C416
	movs r0, #0
	b _0806C46C
_0806C416:
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r0, #0
	adds r0, #0x4c
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #8]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r0, #0
	adds r0, #0x4e
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	adds r0, #0x3f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #6
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7, #0xc]
	adds r0, r1, #0
	b _0806C46C
_0806C46C:
	add sp, #0x10
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_0806C474
sub_0806C474: @ 0x0806C474
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r2, [r1]
	adds r0, r2, #0
	bl GetClassSMSId
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x3c
	ldrb r1, [r2]
	bl sub_080251EC
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806C4A0
sub_0806C4A0: @ 0x0806C4A0
	push {r4, r7, lr}
	sub sp, #0x1c
	mov r7, sp
	adds r4, r0, #0
	adds r0, r2, #0
	str r3, [r7, #8]
	adds r2, r7, #0
	adds r3, r4, #0
	strh r3, [r2]
	adds r2, r7, #2
	strh r1, [r2]
	adds r1, r7, #4
	strh r0, [r1]
	adds r0, r7, #0
	adds r0, #0x18
	movs r1, #0
	strh r1, [r0]
	adds r0, r7, #0
	adds r0, #0x1a
	movs r1, #0
	strb r1, [r0]
	ldr r0, [r7, #8]
	movs r1, #1
	cmn r0, r1
	bne _0806C4E6
	movs r0, #0xe0
	lsls r0, r0, #2
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	adds r1, r7, #0
	adds r1, #0x1a
	bl sub_0806D6A0
	str r0, [r7, #0x14]
	b _0806C4F2
_0806C4E6:
	ldr r0, [r7, #8]
	adds r1, r7, #0
	adds r1, #0x1a
	bl sub_0806D744
	str r0, [r7, #0x14]
_0806C4F2:
	ldr r0, [r7, #0x14]
	cmp r0, #0
	bne _0806C4FC
	movs r0, #0
	b _0806C730
_0806C4FC:
	ldr r1, _0806C528 @ =0x08D64F4C
	adds r0, r1, #0
	bl Proc_Find
	cmp r0, #0
	beq _0806C510
	adds r0, r7, #0
	adds r0, #0x18
	movs r1, #0xfe
	strh r1, [r0]
_0806C510:
	ldr r1, _0806C528 @ =0x08D64F4C
	adds r0, r1, #0
	movs r1, #5
	bl Proc_Start
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	cmp r0, #0
	bne _0806C52C
	movs r0, #0
	b _0806C730
	.align 2, 0
_0806C528: .4byte 0x08D64F4C
_0806C52C:
	ldr r0, [r7, #0xc]
	movs r1, #0
	str r1, [r0, #0x2c]
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	adds r0, #0x3f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7, #0xc]
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r1, r2, #0
	lsls r2, r1, #4
	adds r3, r2, #0
	lsls r1, r3, #4
	adds r2, r0, #0
	adds r0, #0x4c
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7, #0xc]
	adds r1, r7, #2
	ldrh r2, [r1]
	adds r1, r2, #0
	lsls r2, r1, #4
	adds r3, r2, #0
	lsls r1, r3, #4
	adds r2, r0, #0
	adds r0, #0x4e
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	adds r0, #0x50
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	adds r0, #0x52
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	adds r0, #0x42
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xb
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	adds r0, #0x48
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r1, [r7, #0xc]
	adds r0, r7, #0
	adds r0, #0x18
	ldrh r2, [r0]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x43
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r1, [r7, #0xc]
	adds r0, r7, #4
	ldrh r2, [r0]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x41
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	adds r0, #0x40
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7, #0xc]
	ldr r2, [r7, #8]
	lsls r1, r2, #5
	ldr r3, _0806C72C @ =0x06010000
	adds r2, r1, r3
	str r2, [r0, #0x38]
	ldr r0, [r7, #0xc]
	adds r1, r7, #0
	adds r1, #0x1a
	adds r2, r0, #0
	adds r0, #0x3c
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	adds r0, #0x46
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x80
	lsls r3, r3, #4
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	adds r0, #0x4a
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7, #0x14]
	ldr r2, [r7, #0x28]
	adds r1, r2, #0
	ldrb r2, [r0, #1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #1]
	adds r0, r7, #4
	ldrh r1, [r0]
	adds r0, r1, #0
	bl sub_0806DD6C
	adds r1, r0, #0
	adds r0, r1, #0
	movs r1, #0xa
	bl StartSpriteAnim
	str r0, [r7, #0x10]
	ldr r1, [r7, #0x10]
	adds r0, r1, #0
	movs r1, #4
	bl sub_080128F0
	ldr r1, [r7, #0xc]
	adds r0, r1, #0
	bl sub_0806DD40
	adds r4, r0, #0
	ldr r0, [r7, #0x14]
	ldrb r1, [r0]
	adds r0, r1, #0
	bl sub_0806DD10
	adds r1, r0, #0
	adds r0, r4, #0
	bl sub_08013688
	ldr r0, [r7, #0x14]
	ldrb r1, [r0]
	adds r0, r1, #0
	bl sub_0806DD10
	ldr r1, [r7, #0x10]
	str r0, [r1, #0x24]
	ldr r0, [r7, #0x10]
	ldr r1, [r7, #0x14]
	ldr r2, [r7, #0x14]
	ldrb r3, [r2, #1]
	movs r4, #0xf
	adds r2, r3, #0
	ands r2, r4
	adds r4, r2, #0
	lsls r3, r4, #0x18
	lsrs r2, r3, #0x18
	adds r3, r2, #0
	lsls r2, r3, #0xc
	ldrh r1, [r1, #2]
	adds r1, r1, r2
	ldr r3, [r7, #0xc]
	adds r2, r3, #0
	adds r3, #0x46
	ldrh r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r0, #0x22]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x22]
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #0x10]
	str r1, [r0, #0x30]
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #0x14]
	str r1, [r0, #0x34]
	ldr r0, [r7, #0xc]
	ldr r1, [r0, #0x34]
	ldr r0, [r7, #0xc]
	str r0, [r1, #0x48]
	ldr r1, [r7, #0xc]
	adds r0, r1, #0
	b _0806C730
	.align 2, 0
_0806C72C: .4byte 0x06010000
_0806C730:
	add sp, #0x1c
	pop {r4, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_0806C738
sub_0806C738: @ 0x0806C738
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, [r7]
	ldr r2, [r7, #4]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x42
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r0, [r7, #4]
	cmp r0, #0xf
	bne _0806C774
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x3c
	ldrb r0, [r1]
	ldr r1, [r7]
	ldr r2, [r1, #0x38]
	adds r1, r2, #0
	bl sub_08025AE0
	b _0806C786
_0806C774:
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x42
	movs r1, #0
	ldrsb r1, [r2, r1]
	bl sub_080128F0
_0806C786:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806C790
sub_0806C790: @ 0x0806C790
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r2, [r1]
	adds r0, r2, #0
	bl GetClassData
	ldr r1, [r0, #0x28]
	movs r2, #1
	adds r0, r1, #0
	ands r0, r2
	cmp r0, #0
	beq _0806C7BC
	ldr r0, [r7]
	movs r1, #1
	bl sub_0806C738
	b _0806C7C4
_0806C7BC:
	ldr r0, [r7]
	movs r1, #2
	bl sub_0806C738
_0806C7C4:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806C7CC
sub_0806C7CC: @ 0x0806C7CC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	ldr r1, _0806C7E4 @ =0x08D64F4C
	adds r0, r1, #0
	bl Proc_Find
	str r0, [r7]
	ldr r0, [r7]
	cmp r0, #0
	bne _0806C7E8
	b _0806C7EE
	.align 2, 0
_0806C7E4: .4byte 0x08D64F4C
_0806C7E8:
	ldr r0, [r7]
	bl sub_0806C790
_0806C7EE:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806C7F8
sub_0806C7F8: @ 0x0806C7F8
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, _0806C814 @ =0x08D64F4C
	adds r0, r1, #0
	bl Proc_Find
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	cmp r0, #0
	bne _0806C818
	b _0806C822
	.align 2, 0
_0806C814: .4byte 0x08D64F4C
_0806C818:
	ldr r1, [r7, #4]
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_0806C8F0
_0806C822:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806C82C
sub_0806C82C: @ 0x0806C82C
	push {r7, lr}
	mov r7, sp
	ldr r1, _0806C844 @ =0x08D64F4C
	adds r0, r1, #0
	bl Proc_Find
	adds r1, r0, #0
	adds r0, r1, #0
	cmp r0, #0
	beq _0806C842
	movs r0, #1
_0806C842:
	b _0806C848
	.align 2, 0
_0806C844: .4byte 0x08D64F4C
_0806C848:
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0806C850
sub_0806C850: @ 0x0806C850
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	movs r0, #0
	str r0, [r7, #4]
_0806C85A:
	ldr r0, [r7, #4]
	cmp r0, #3
	ble _0806C862
	b _0806C8A2
_0806C862:
	ldr r0, _0806C890 @ =0x030014E8
	ldr r1, [r7, #4]
	movs r2, #0x4c
	muls r1, r2, r1
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0
	beq _0806C89A
	ldr r0, _0806C890 @ =0x030014E8
	ldr r1, [r7, #4]
	movs r2, #0x4c
	muls r1, r2, r1
	adds r0, #0x48
	adds r1, r0, r1
	ldr r0, [r1]
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x3f
	ldrb r0, [r1]
	cmp r0, #1
	beq _0806C894
	b _0806C896
	.align 2, 0
_0806C890: .4byte 0x030014E8
_0806C894:
	b _0806C89A
_0806C896:
	movs r0, #1
	b _0806C8B0
_0806C89A:
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _0806C85A
_0806C8A2:
	ldr r0, [r7, #4]
	cmp r0, #3
	ble _0806C8AC
	movs r0, #0
	b _0806C8B0
_0806C8AC:
	movs r0, #1
	b _0806C8B0
_0806C8B0:
	add sp, #8
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_0806C8B8
sub_0806C8B8: @ 0x0806C8B8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x34]
	ldrb r0, [r1]
	cmp r0, #0
	bne _0806C8CE
	movs r0, #0
	b _0806C8E8
_0806C8CE:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x3f
	ldrb r0, [r1]
	cmp r0, #1
	beq _0806C8DC
	b _0806C8E0
_0806C8DC:
	movs r0, #0
	b _0806C8E8
_0806C8E0:
	movs r0, #1
	b _0806C8E8
_0806C8E4:
	movs r0, #0
	b _0806C8E8
_0806C8E8:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_0806C8F0
sub_0806C8F0: @ 0x0806C8F0
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	movs r0, #0
	str r0, [r7, #8]
_0806C8FE:
	ldr r0, [r7, #8]
	cmp r0, #0x3f
	ble _0806C906
	b _0806C930
_0806C906:
	ldr r0, [r7]
	ldr r1, [r0, #0x34]
	adds r0, r1, #5
	ldr r1, [r7, #8]
	adds r0, r0, r1
	ldr r1, [r7, #4]
	ldr r2, [r7, #8]
	adds r1, r1, r2
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, [r7, #8]
	adds r1, r0, #1
	str r1, [r7, #8]
	b _0806C8FE
_0806C930:
	ldr r1, [r7]
	ldr r0, [r1, #0x34]
	ldrb r1, [r0, #4]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #4]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x3f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	bl sub_0806CAD0
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806C964
sub_0806C964: @ 0x0806C964
	push {r4, r7, lr}
	sub sp, #0x14
	add r7, sp, #4
	adds r4, r0, #0
	adds r0, r2, #0
	str r3, [r7, #8]
	adds r2, r7, #0
	adds r3, r4, #0
	strh r3, [r2]
	adds r2, r7, #2
	strh r1, [r2]
	adds r1, r7, #4
	strh r0, [r1]
	adds r1, r7, #0
	ldrh r0, [r1]
	adds r2, r7, #2
	ldrh r1, [r2]
	adds r3, r7, #4
	ldrh r2, [r3]
	movs r3, #1
	rsbs r3, r3, #0
	ldr r4, [r7, #8]
	str r4, [sp]
	bl sub_0806C4A0
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	cmp r0, #0
	bne _0806C9A2
	movs r0, #0
	b _0806C9B2
_0806C9A2:
	ldr r1, [r7, #0xc]
	adds r0, r1, #0
	ldr r1, [r7, #0x1c]
	bl sub_0806C8F0
	ldr r1, [r7, #0xc]
	adds r0, r1, #0
	b _0806C9B2
_0806C9B2:
	add sp, #0x14
	pop {r4, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0806C9BC
sub_0806C9BC: @ 0x0806C9BC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	movs r1, #0
	str r1, [r0, #0x58]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	movs r1, #0
	str r1, [r0, #0x5c]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x66
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806C9F8
sub_0806C9F8: @ 0x0806C9F8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	ldr r0, [r1, #0x58]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x64
	movs r3, #0
	ldrsh r1, [r2, r3]
	bl sub_080151FC
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806CA1C
sub_0806CA1C: @ 0x0806CA1C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x5c]
	cmp r1, #0
	beq _0806CA3E
	ldr r1, [r7]
	ldr r0, [r1, #0x5c]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x66
	movs r3, #0
	ldrsh r1, [r2, r3]
	bl sub_080151FC
_0806CA3E:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806CA48
sub_0806CA48: @ 0x0806CA48
	push {r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r1, _0806CA98 @ =0x08D64DB0
	adds r0, r1, #0
	bl Proc_Find
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	cmp r0, #0
	bne _0806CA70
	ldr r1, _0806CA98 @ =0x08D64DB0
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	str r0, [r7, #0xc]
_0806CA70:
	ldr r0, [r7, #0xc]
	ldr r1, [r0, #0x58]
	cmp r1, #0
	bne _0806CA9C
	ldr r0, [r7, #0xc]
	ldr r1, [r7]
	str r1, [r0, #0x58]
	ldr r1, [r7, #0xc]
	ldr r2, [r7, #8]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x64
	ldrh r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strh r2, [r1]
	b _0806CAC6
	.align 2, 0
_0806CA98: .4byte 0x08D64DB0
_0806CA9C:
	ldr r0, [r7, #0xc]
	ldr r1, [r0, #0x60]
	cmp r1, #0
	bne _0806CAC6
	ldr r0, [r7, #0xc]
	ldr r1, [r7]
	ldr r2, [r7, #4]
	adds r1, r1, r2
	str r1, [r0, #0x5c]
	ldr r1, [r7, #0xc]
	ldr r2, [r7, #8]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x66
	ldrh r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strh r2, [r1]
_0806CAC6:
	add sp, #0x10
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806CAD0
sub_0806CAD0: @ 0x0806CAD0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	bl sub_0806D2E4
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806CAE8
sub_0806CAE8: @ 0x0806CAE8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806CAF8
sub_0806CAF8: @ 0x0806CAF8
	push {r4, r5, r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
_0806CB00:
	b _0806CB04
_0806CB02:
	b _0806CD22
_0806CB04:
	adds r0, r7, #4
	ldr r2, [r7]
	ldr r1, [r2, #0x34]
	ldr r3, [r7]
	ldr r2, [r3, #0x34]
	ldrb r3, [r2, #4]
	adds r4, r3, #1
	adds r5, r4, #0
	strb r5, [r2, #4]
	lsls r3, r3, #0x18
	lsrs r2, r3, #0x18
	adds r1, #5
	adds r2, r1, r2
	movs r1, #0
	ldrsb r1, [r2, r1]
	adds r2, r1, #0
	strh r2, [r0]
	adds r0, r7, #4
	ldrh r1, [r0]
	adds r0, r1, #1
	adds r2, r0, #0
	lsls r1, r2, #0x10
	asrs r0, r1, #0x10
	cmp r0, #0xf
	bls _0806CB38
	b _0806CD1E
_0806CB38:
	lsls r1, r0, #2
	ldr r2, _0806CB44 @ =_0806CB48
	adds r0, r1, r2
	ldr r1, [r0]
	mov pc, r1
	.align 2, 0
_0806CB44: .4byte _0806CB48
_0806CB48: @ jump table
	.4byte _0806CC38 @ case 0
	.4byte _0806CC46 @ case 1
	.4byte _0806CC46 @ case 2
	.4byte _0806CC46 @ case 3
	.4byte _0806CC46 @ case 4
	.4byte _0806CC30 @ case 5
	.4byte _0806CC96 @ case 6
	.4byte _0806CC96 @ case 7
	.4byte _0806CC96 @ case 8
	.4byte _0806CC96 @ case 9
	.4byte _0806CB88 @ case 10
	.4byte _0806CBD4 @ case 11
	.4byte _0806CD1E @ case 12
	.4byte _0806CCDA @ case 13
	.4byte _0806CD0E @ case 14
	.4byte _0806CD16 @ case 15
_0806CB88:
	ldr r0, [r7]
	ldr r2, [r7]
	ldr r1, [r2, #0x34]
	ldr r3, [r7]
	ldr r2, [r3, #0x34]
	ldrb r3, [r2, #4]
	adds r4, r3, #1
	adds r5, r4, #0
	strb r5, [r2, #4]
	lsls r3, r3, #0x18
	lsrs r2, r3, #0x18
	adds r1, #5
	adds r2, r1, r2
	movs r3, #0
	ldrsb r3, [r2, r3]
	adds r1, r3, #0
	adds r2, r0, #0
	adds r0, #0x48
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x3f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #3
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	b _0806CD22
_0806CBD4:
	ldr r0, [r7]
	bl sub_0806CAE8
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x3f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #5
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x4c
	movs r2, #0
	ldrsh r0, [r1, r2]
	asrs r1, r0, #4
	adds r0, r1, #0
	lsls r1, r0, #0x10
	asrs r0, r1, #0x10
	ldr r1, _0806CC2C @ =gBmSt
	movs r3, #0xc
	ldrsh r2, [r1, r3]
	subs r0, r0, r2
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x4e
	movs r4, #0
	ldrsh r1, [r2, r4]
	asrs r2, r1, #4
	adds r1, r2, #0
	lsls r2, r1, #0x10
	asrs r1, r2, #0x10
	ldr r2, _0806CC2C @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	subs r1, r1, r3
	bl sub_0806CD2C
	b _0806CD22
	.align 2, 0
_0806CC2C: .4byte gBmSt
_0806CC30:
	ldr r0, [r7]
	bl sub_0806D4EC
	b _0806CD22
_0806CC38:
	ldr r0, [r7]
	bl sub_0806CAE8
	ldr r0, [r7]
	bl sub_0806D4BC
	b _0806CD22
_0806CC46:
	adds r0, r7, #4
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x42
	movs r3, #0
	ldrsb r3, [r2, r3]
	adds r1, r3, #0
	movs r2, #0
	ldrsh r0, [r0, r2]
	lsls r2, r1, #0x10
	asrs r1, r2, #0x10
	cmp r0, r1
	beq _0806CC94
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r2, [r1]
	adds r0, r2, #0
	bl sub_0806DD6C
	str r0, [r7, #8]
	adds r0, r7, #4
	movs r3, #0
	ldrsh r1, [r0, r3]
	ldr r0, [r7]
	bl sub_0806C738
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x3f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
_0806CC94:
	b _0806CD22
_0806CC96:
	adds r0, r7, #4
	adds r1, r7, #4
	ldrh r2, [r1]
	subs r1, r2, #5
	adds r2, r1, #0
	strh r2, [r0]
	adds r0, r7, #4
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x42
	movs r3, #0
	ldrsb r3, [r2, r3]
	adds r1, r3, #0
	movs r4, #0
	ldrsh r0, [r0, r4]
	lsls r2, r1, #0x10
	asrs r1, r2, #0x10
	cmp r0, r1
	beq _0806CCD8
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r2, [r1]
	adds r0, r2, #0
	bl sub_0806DD6C
	str r0, [r7, #8]
	adds r0, r7, #4
	movs r2, #0
	ldrsh r1, [r0, r2]
	ldr r0, [r7]
	bl sub_0806C738
_0806CCD8:
	b _0806CB00
_0806CCDA:
	ldr r0, [r7]
	ldr r2, [r7]
	ldr r1, [r2, #0x34]
	ldr r3, [r7]
	ldr r2, [r3, #0x34]
	ldrb r3, [r2, #4]
	adds r4, r3, #1
	adds r5, r4, #0
	strb r5, [r2, #4]
	lsls r3, r3, #0x18
	lsrs r2, r3, #0x18
	adds r1, #5
	adds r2, r1, r2
	movs r3, #0
	ldrsb r3, [r2, r3]
	adds r1, r3, #0
	adds r2, r0, #0
	adds r0, #0x4a
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	b _0806CB00
_0806CD0E:
	ldr r0, [r7]
	bl sub_0806C3B0
	b _0806CB00
_0806CD16:
	ldr r0, [r7]
	bl sub_0806C3D8
	b _0806CB00
_0806CD1E:
	b _0806CD20
_0806CD20:
	b _0806CB00
_0806CD22:
	add sp, #0xc
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806CD2C
sub_0806CD2C: @ 0x0806CD2C
	push {r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, _0806CD98 @ =0x083FB1AC
	ldr r1, _0806CD9C @ =0x06013000
	bl sub_08013688
	ldr r1, _0806CDA0 @ =0x083F641C
	adds r0, r1, #0
	movs r1, #2
	bl StartSpriteAnim
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	ldrh r1, [r0, #0x22]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x8c
	lsls r3, r3, #5
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x22]
	ldr r1, [r7, #0xc]
	adds r0, r1, #0
	movs r1, #0
	bl sub_080128F0
	ldr r1, _0806CDA4 @ =0x08D64DE0
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	ldr r1, [r7, #0xc]
	str r1, [r0, #0x50]
	ldr r0, [r7, #8]
	ldr r1, [r7]
	adds r2, r1, #0
	adds r2, #8
	str r2, [r0, #0x2c]
	ldr r0, [r7, #8]
	ldr r1, [r7, #4]
	subs r2, r1, #4
	str r2, [r0, #0x30]
	add sp, #0x10
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806CD98: .4byte 0x083FB1AC
_0806CD9C: .4byte 0x06013000
_0806CDA0: .4byte 0x083F641C
_0806CDA4: .4byte 0x08D64DE0

	thumb_func_start sub_0806CDA8
sub_0806CDA8: @ 0x0806CDA8
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	add r7, sp, #4
	str r0, [r7]
	ldr r1, _0806CE5C @ =gPlaySt
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r0, [r1]
	lsls r1, r0, #0x1e
	lsrs r0, r1, #0x1f
	cmp r0, #0
	bne _0806CDC8
	ldr r1, _0806CE60 @ =0x00000397
	adds r0, r1, #0
	bl m4aSongNumStart
_0806CDC8:
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r1, _0806CE64 @ =gSinLut
	adds r0, r1, #0
	adds r1, #0x80
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r1, r0, #4
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r1, #0
	adds r1, r2, #0
	bl Div
	adds r1, r0, #0
	lsls r0, r1, #0x10
	asrs r4, r0, #0x10
	ldr r0, _0806CE64 @ =gSinLut
	movs r2, #0
	ldrsh r1, [r0, r2]
	rsbs r0, r1, #0
	lsls r1, r0, #4
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r1, #0
	adds r1, r2, #0
	bl Div
	adds r1, r0, #0
	lsls r0, r1, #0x10
	asrs r5, r0, #0x10
	ldr r0, _0806CE64 @ =gSinLut
	movs r2, #0
	ldrsh r1, [r0, r2]
	lsls r0, r1, #4
	movs r1, #0x80
	lsls r1, r1, #2
	bl Div
	adds r1, r0, #0
	lsls r0, r1, #0x10
	asrs r6, r0, #0x10
	ldr r1, _0806CE64 @ =gSinLut
	adds r0, r1, #0
	adds r1, #0x80
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r1, r0, #4
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r1, #0
	adds r1, r2, #0
	bl Div
	adds r2, r0, #0
	lsls r1, r2, #0x10
	asrs r0, r1, #0x10
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	adds r2, r5, #0
	adds r3, r6, #0
	bl SetObjAffine
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806CE5C: .4byte gPlaySt
_0806CE60: .4byte 0x00000397
_0806CE64: .4byte gSinLut

	thumb_func_start sub_0806CE68
sub_0806CE68: @ 0x0806CE68
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r7, sp, #4
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	adds r2, r1, #1
	adds r3, r2, #0
	strh r3, [r0]
	lsls r1, r1, #0x10
	asrs r0, r1, #0x10
	cmp r0, #7
	ble _0806CE8C
	ldr r0, [r7]
	bl Proc_Break
_0806CE8C:
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, [r7]
	adds r0, r3, #0
	adds r4, r3, #0
	adds r4, #0x64
	movs r0, #0
	ldrsh r3, [r4, r0]
	movs r0, #8
	str r0, [sp]
	movs r0, #5
	bl Interpolate
	str r0, [r7, #4]
	ldr r1, _0806CF48 @ =gSinLut
	adds r0, r1, #0
	adds r1, #0x80
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r1, r0, #4
	ldr r2, [r7, #4]
	adds r0, r1, #0
	adds r1, r2, #0
	bl Div
	adds r1, r0, #0
	lsls r0, r1, #0x10
	asrs r4, r0, #0x10
	ldr r0, _0806CF48 @ =gSinLut
	movs r2, #0
	ldrsh r1, [r0, r2]
	rsbs r0, r1, #0
	lsls r1, r0, #4
	ldr r2, [r7, #4]
	adds r0, r1, #0
	adds r1, r2, #0
	bl Div
	adds r1, r0, #0
	lsls r0, r1, #0x10
	asrs r5, r0, #0x10
	ldr r0, _0806CF48 @ =gSinLut
	movs r2, #0
	ldrsh r1, [r0, r2]
	lsls r0, r1, #4
	ldr r1, [r7, #4]
	bl Div
	adds r1, r0, #0
	lsls r0, r1, #0x10
	asrs r6, r0, #0x10
	ldr r1, _0806CF48 @ =gSinLut
	adds r0, r1, #0
	adds r1, #0x80
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r1, r0, #4
	ldr r2, [r7, #4]
	adds r0, r1, #0
	adds r1, r2, #0
	bl Div
	adds r2, r0, #0
	lsls r1, r2, #0x10
	asrs r0, r1, #0x10
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	adds r2, r5, #0
	adds r3, r6, #0
	bl SetObjAffine
	ldr r1, [r7]
	ldr r0, [r1, #0x50]
	ldr r1, [r7]
	ldr r2, [r1, #0x2c]
	adds r1, r2, #0
	subs r1, #8
	ldr r2, [r7]
	ldr r3, [r2, #0x30]
	adds r2, r3, #0
	subs r2, #8
	movs r3, #0xc0
	lsls r3, r3, #2
	orrs r2, r3
	bl sub_08012694
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806CF48: .4byte gSinLut

	thumb_func_start sub_0806CF4C
sub_0806CF4C: @ 0x0806CF4C
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	adds r2, r1, #1
	adds r3, r2, #0
	strh r3, [r0]
	lsls r1, r1, #0x10
	asrs r0, r1, #0x10
	cmp r0, #0x27
	ble _0806CF70
	ldr r0, [r7]
	bl Proc_Break
_0806CF70:
	ldr r1, [r7]
	ldr r0, [r1, #0x50]
	ldr r2, [r7]
	ldr r1, [r2, #0x2c]
	ldr r2, [r7]
	ldr r3, [r2, #0x30]
	movs r4, #0x80
	lsls r4, r4, #1
	adds r2, r3, #0
	orrs r2, r4
	bl sub_08012694
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806CF90
sub_0806CF90: @ 0x0806CF90
	push {r7, lr}
	mov r7, sp
	ldr r1, _0806CFA8 @ =0x08D64DE0
	adds r0, r1, #0
	bl Proc_Find
	adds r1, r0, #0
	adds r0, r1, #0
	cmp r0, #0
	beq _0806CFA6
	movs r0, #1
_0806CFA6:
	b _0806CFAC
	.align 2, 0
_0806CFA8: .4byte 0x08D64DE0
_0806CFAC:
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0806CFB4
sub_0806CFB4: @ 0x0806CFB4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl sub_0806CF90
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	bne _0806CFE0
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x3f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #3
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
_0806CFE0:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806CFE8
sub_0806CFE8: @ 0x0806CFE8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x3f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806D010
sub_0806D010: @ 0x0806D010
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	ldrh r0, [r1]
	cmp r0, #0
	bne _0806D03E
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x3f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	b _0806D064
_0806D03E:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x48
	ldrh r3, [r2]
	subs r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x48
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
_0806D064:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806D06C
sub_0806D06C: @ 0x0806D06C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806D07C
sub_0806D07C: @ 0x0806D07C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806D08C
sub_0806D08C: @ 0x0806D08C
	push {r4, r5, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	bl sub_0806DB6C
	lsls r1, r0, #0x10
	lsrs r0, r1, #0x10
	str r0, [r7, #4]
	ldr r0, [r7]
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x48
	ldr r3, [r7, #4]
	adds r2, r3, #0
	ldrh r3, [r1]
	adds r1, r2, r3
	adds r2, r0, #0
	adds r0, #0x48
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x4c
	ldr r2, _0806D2D8 @ =0x08D64E00
	ldr r4, [r7]
	adds r3, r4, #0
	adds r4, #0x42
	movs r3, #0
	ldrsb r3, [r4, r3]
	adds r4, r3, #0
	lsls r3, r4, #2
	adds r2, r2, r3
	movs r4, #0
	ldrsh r3, [r2, r4]
	ldr r4, [r7, #4]
	adds r2, r3, #0
	muls r2, r4, r2
	ldrh r1, [r1]
	adds r1, r1, r2
	adds r2, r0, #0
	adds r0, #0x4c
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x4e
	ldr r2, _0806D2D8 @ =0x08D64E00
	ldr r4, [r7]
	adds r3, r4, #0
	adds r4, #0x42
	movs r3, #0
	ldrsb r3, [r4, r3]
	adds r4, r3, #0
	lsls r3, r4, #1
	adds r4, r3, #1
	adds r3, r4, #0
	lsls r4, r3, #1
	adds r2, r2, r4
	movs r5, #0
	ldrsh r3, [r2, r5]
	ldr r4, [r7, #4]
	adds r2, r3, #0
	muls r2, r4, r2
	ldrh r1, [r1]
	adds r1, r1, r2
	adds r2, r0, #0
	adds r0, #0x4e
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	ldrh r0, [r1]
	lsrs r1, r0, #4
	adds r0, r1, #0
	lsls r1, r0, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0xf
	bhi _0806D158
	b _0806D254
_0806D158:
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x48
	ldrh r3, [r2]
	ldr r2, _0806D2DC @ =0xFFFFFF00
	adds r1, r3, r2
	adds r2, r0, #0
	adds r0, #0x48
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x4c
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x48
	ldrh r2, [r3]
	ldr r3, _0806D2D8 @ =0x08D64E00
	ldr r5, [r7]
	adds r4, r5, #0
	adds r5, #0x42
	movs r4, #0
	ldrsb r4, [r5, r4]
	adds r5, r4, #0
	lsls r4, r5, #2
	adds r3, r3, r4
	movs r5, #0
	ldrsh r4, [r3, r5]
	muls r2, r4, r2
	ldrh r1, [r1]
	subs r1, r1, r2
	adds r2, r0, #0
	adds r0, #0x4c
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x4e
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x48
	ldrh r2, [r3]
	ldr r3, _0806D2D8 @ =0x08D64E00
	ldr r5, [r7]
	adds r4, r5, #0
	adds r5, #0x42
	movs r4, #0
	ldrsb r4, [r5, r4]
	adds r5, r4, #0
	lsls r4, r5, #1
	adds r5, r4, #1
	adds r4, r5, #0
	lsls r5, r4, #1
	adds r3, r3, r5
	movs r5, #0
	ldrsh r4, [r3, r5]
	muls r2, r4, r2
	ldrh r1, [r1]
	subs r1, r1, r2
	adds r2, r0, #0
	adds r0, #0x4e
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x48
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x4c
	ldrh r1, [r2]
	movs r2, #0xf
	bics r1, r2
	adds r2, r0, #0
	adds r0, #0x4c
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x4e
	ldrh r1, [r2]
	movs r2, #0xf
	bics r1, r2
	adds r2, r0, #0
	adds r0, #0x4e
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
_0806D254:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x3e
	ldrb r0, [r1]
	cmp r0, #0
	beq _0806D2B4
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x4c
	movs r2, #0
	ldrsh r0, [r1, r2]
	asrs r1, r0, #4
	adds r2, r1, #0
	lsls r0, r2, #0x10
	asrs r1, r0, #0x10
	adds r0, r1, #0
	bl sub_08015D10
	adds r1, r0, #0
	ldr r0, _0806D2E0 @ =gBmSt
	ldrh r2, [r0, #0xc]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0xc]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x4e
	movs r4, #0
	ldrsh r0, [r1, r4]
	asrs r1, r0, #4
	adds r2, r1, #0
	lsls r0, r2, #0x10
	asrs r1, r0, #0x10
	adds r0, r1, #0
	bl sub_08015D54
	adds r1, r0, #0
	ldr r0, _0806D2E0 @ =gBmSt
	ldrh r2, [r0, #0xe]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0xe]
_0806D2B4:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x4a
	ldrh r0, [r1]
	movs r1, #0x80
	ands r0, r1
	adds r2, r0, #0
	lsls r1, r2, #0x10
	asrs r0, r1, #0x10
	cmp r0, #0
	bne _0806D2D0
	ldr r0, [r7]
	bl sub_0806D2E4
_0806D2D0:
	add sp, #8
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806D2D8: .4byte 0x08D64E00
_0806D2DC: .4byte 0xFFFFFF00
_0806D2E0: .4byte gBmSt

	thumb_func_start sub_0806D2E4
sub_0806D2E4: @ 0x0806D2E4
	push {r4, r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r2, [r1]
	adds r0, r2, #0
	bl GetClassData
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r0, #0x28]
	movs r2, #1
	adds r0, r1, #0
	ands r0, r2
	cmp r0, #0
	beq _0806D346
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r0, [r1]
	cmp r0, #0x32
	blt _0806D338
	cmp r0, #0x33
	ble _0806D320
	cmp r0, #0x37
	bgt _0806D338
	b _0806D32C
_0806D320:
	ldr r0, _0806D328 @ =0x08D64ED2
	str r0, [r7, #8]
	b _0806D344
	.align 2, 0
_0806D328: .4byte 0x08D64ED2
_0806D32C:
	ldr r0, _0806D334 @ =0x08D64EA6
	str r0, [r7, #8]
	b _0806D344
	.align 2, 0
_0806D334: .4byte 0x08D64EA6
_0806D338:
	ldr r0, _0806D340 @ =0x08D64E78
	str r0, [r7, #8]
	b _0806D344
	.align 2, 0
_0806D340: .4byte 0x08D64E78
_0806D344:
	b _0806D394
_0806D346:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r0, [r1]
	cmp r0, #0x46
	beq _0806D37C
	cmp r0, #0x46
	bgt _0806D360
	cmp r0, #0x17
	bgt _0806D388
	cmp r0, #0x14
	blt _0806D388
	b _0806D372
_0806D360:
	cmp r0, #0x55
	beq _0806D372
	cmp r0, #0x55
	blt _0806D388
	cmp r0, #0x5d
	bgt _0806D388
	cmp r0, #0x5b
	blt _0806D388
	b _0806D372
_0806D372:
	ldr r0, _0806D378 @ =0x08D64E34
	str r0, [r7, #8]
	b _0806D394
	.align 2, 0
_0806D378: .4byte 0x08D64E34
_0806D37C:
	ldr r0, _0806D384 @ =0x08D64EFE
	str r0, [r7, #8]
	b _0806D394
	.align 2, 0
_0806D384: .4byte 0x08D64EFE
_0806D388:
	ldr r0, _0806D390 @ =0x08D64E10
	str r0, [r7, #8]
	b _0806D394
	.align 2, 0
_0806D390: .4byte 0x08D64E10
_0806D394:
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x43
	ldrb r1, [r0]
	adds r2, r1, #1
	adds r3, r2, #0
	strb r3, [r0]
	lsls r1, r1, #0x18
	lsrs r0, r1, #0x18
	ldr r1, [r7, #8]
	ldrh r2, [r1]
	adds r1, r2, #0
	bl DivRem
	str r0, [r7, #0xc]
	adds r1, r7, #0
	adds r1, #0x10
	ldr r0, [r7]
	bl sub_0806D7E8
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, [r7, #8]
	adds r0, r0, r1
	adds r1, r0, #4
	ldrh r0, [r1]
	cmp r0, #0
	beq _0806D3EE
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, [r7, #8]
	adds r0, r0, r1
	adds r1, r0, #4
	ldrh r0, [r1]
	ldr r1, [r7, #8]
	adds r2, r1, #2
	ldrh r1, [r2]
	adds r3, r7, #0
	adds r3, #0x10
	movs r4, #0
	ldrsh r2, [r3, r4]
	bl sub_0806CA48
_0806D3EE:
	add sp, #0x14
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806D3F8
sub_0806D3F8: @ 0x0806D3F8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x3f
	ldrb r0, [r1]
	cmp r0, #0
	beq _0806D450
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	ldrh r0, [r1]
	cmp r0, #0
	bne _0806D438
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x3f
	ldrb r0, [r1]
	cmp r0, #3
	beq _0806D432
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x3f
	ldrb r0, [r1]
	cmp r0, #2
	beq _0806D432
	b _0806D438
_0806D432:
	ldr r0, [r7]
	bl sub_0806CAF8
_0806D438:
	ldr r0, _0806D468 @ =0x08D64F2C
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x3f
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, [r7]
	bl _call_via_r1
_0806D450:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x42
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0xf
	bne _0806D46C
	ldr r0, [r7]
	bl sub_0806D934
	b _0806D472
	.align 2, 0
_0806D468: .4byte 0x08D64F2C
_0806D46C:
	ldr r0, [r7]
	bl sub_0806DA3C
_0806D472:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806D47C
sub_0806D47C: @ 0x0806D47C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	ldr r0, [r1, #0x34]
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	adds r0, r1, #0
	bl sub_08012680
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start MU_EndAll
MU_EndAll: @ 0x0806D4A4
	push {r7, lr}
	mov r7, sp
	ldr r1, _0806D4B8 @ =0x08D64F4C
	adds r0, r1, #0
	bl sub_08004748
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806D4B8: .4byte 0x08D64F4C

	thumb_func_start sub_0806D4BC
sub_0806D4BC: @ 0x0806D4BC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	bl sub_0806D4D4
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806D4D4
sub_0806D4D4: @ 0x0806D4D4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	bl Proc_End
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806D4EC
sub_0806D4EC: @ 0x0806D4EC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	bl sub_0806CAE8
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x3f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806D51C
sub_0806D51C: @ 0x0806D51C
	push {r7, lr}
	mov r7, sp
	movs r0, #4
	bl sub_080046C4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806D52C
sub_0806D52C: @ 0x0806D52C
	push {r7, lr}
	mov r7, sp
	movs r0, #4
	bl sub_080046E8
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806D53C
sub_0806D53C: @ 0x0806D53C
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
_0806D548:
	b _0806D54C
_0806D54A:
	b _0806D5E2
_0806D54C:
	adds r0, r7, #0
	adds r0, #8
	ldr r2, [r0]
	ldrb r3, [r2]
	adds r1, r3, #1
	adds r2, #1
	str r2, [r0]
	cmp r1, #0xa
	bhi _0806D5DE
	adds r0, r1, #0
	lsls r1, r0, #2
	ldr r2, _0806D56C @ =_0806D570
	adds r0, r1, r2
	ldr r1, [r0]
	mov pc, r1
	.align 2, 0
_0806D56C: .4byte _0806D570
_0806D570: @ jump table
	.4byte _0806D59C @ case 0
	.4byte _0806D59E @ case 1
	.4byte _0806D5AC @ case 2
	.4byte _0806D5C8 @ case 3
	.4byte _0806D5BA @ case 4
	.4byte _0806D59C @ case 5
	.4byte _0806D5DE @ case 6
	.4byte _0806D5DE @ case 7
	.4byte _0806D5DE @ case 8
	.4byte _0806D5DE @ case 9
	.4byte _0806D5D6 @ case 10
_0806D59C:
	b _0806D5E2
_0806D59E:
	ldr r1, [r7]
	ldr r0, [r7]
	ldr r1, [r7]
	ldr r2, [r1]
	subs r1, r2, #1
	str r1, [r0]
	b _0806D5E0
_0806D5AC:
	ldr r1, [r7]
	ldr r0, [r7]
	ldr r1, [r7]
	ldr r2, [r1]
	adds r1, r2, #1
	str r1, [r0]
	b _0806D5E0
_0806D5BA:
	ldr r1, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7, #4]
	ldr r2, [r1]
	subs r1, r2, #1
	str r1, [r0]
	b _0806D5E0
_0806D5C8:
	ldr r1, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7, #4]
	ldr r2, [r1]
	adds r1, r2, #1
	str r1, [r0]
	b _0806D5E0
_0806D5D6:
	ldr r0, [r7, #8]
	adds r1, r0, #1
	str r1, [r7, #8]
	b _0806D5E0
_0806D5DE:
	b _0806D5E0
_0806D5E0:
	b _0806D548
_0806D5E2:
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806D5EC
sub_0806D5EC: @ 0x0806D5EC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	movs r0, #0
	str r0, [r7]
_0806D5F6:
	ldr r0, [r7]
	cmp r0, #3
	ble _0806D5FE
	b _0806D620
_0806D5FE:
	ldr r0, _0806D614 @ =0x030014E8
	ldr r1, [r7]
	movs r2, #0x4c
	muls r1, r2, r1
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0
	bne _0806D618
	movs r0, #1
	b _0806D624
	.align 2, 0
_0806D614: .4byte 0x030014E8
_0806D618:
	ldr r0, [r7]
	adds r1, r0, #1
	str r1, [r7]
	b _0806D5F6
_0806D620:
	movs r0, #0
	b _0806D624
_0806D624:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_0806D62C
sub_0806D62C: @ 0x0806D62C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	movs r0, #0
	str r0, [r7]
_0806D636:
	ldr r0, [r7]
	cmp r0, #3
	ble _0806D63E
	b _0806D698
_0806D63E:
	ldr r0, _0806D694 @ =0x030014E8
	ldr r1, [r7]
	movs r2, #0x4c
	muls r1, r2, r1
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0
	beq _0806D68C
	ldr r0, _0806D694 @ =0x030014E8
	ldr r1, [r7]
	movs r2, #0x4c
	muls r1, r2, r1
	adds r0, #0x48
	adds r1, r0, r1
	ldr r2, [r1]
	ldr r0, [r2, #0x30]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r0, _0806D694 @ =0x030014E8
	ldr r1, [r7]
	movs r2, #0x4c
	muls r1, r2, r1
	adds r0, #0x48
	adds r1, r0, r1
	ldr r2, [r1]
	ldr r0, [r2, #0x30]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
_0806D68C:
	ldr r0, [r7]
	adds r1, r0, #1
	str r1, [r7]
	b _0806D636
	.align 2, 0
_0806D694: .4byte 0x030014E8
_0806D698:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806D6A0
sub_0806D6A0: @ 0x0806D6A0
	push {r4, r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	movs r0, #0
	str r0, [r7, #8]
_0806D6AE:
	ldr r0, [r7, #8]
	cmp r0, #3
	ble _0806D6B6
	b _0806D738
_0806D6B6:
	ldr r0, _0806D728 @ =0x030014E8
	ldr r1, [r7, #8]
	movs r2, #0x4c
	muls r1, r2, r1
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0
	bne _0806D730
	ldr r0, _0806D728 @ =0x030014E8
	ldr r1, [r7, #8]
	movs r2, #0x4c
	muls r1, r2, r1
	adds r0, r0, r1
	ldr r1, [r7, #8]
	adds r2, r1, #0
	adds r1, r2, #1
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, _0806D728 @ =0x030014E8
	ldr r1, [r7, #8]
	movs r2, #0x4c
	muls r1, r2, r1
	adds r0, r0, r1
	ldr r2, [r7]
	adds r1, r2, #0
	ldr r2, _0806D72C @ =0x08D64F6C
	ldr r3, [r7, #8]
	adds r4, r3, #0
	lsls r3, r4, #1
	adds r2, r2, r3
	ldrh r3, [r2]
	adds r1, r1, r3
	ldrh r2, [r0, #2]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #2]
	ldr r0, [r7, #4]
	ldr r1, [r7, #8]
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7, #8]
	movs r1, #0x4c
	muls r0, r1, r0
	ldr r2, _0806D728 @ =0x030014E8
	adds r1, r0, r2
	adds r0, r1, #0
	b _0806D73C
	.align 2, 0
_0806D728: .4byte 0x030014E8
_0806D72C: .4byte 0x08D64F6C
_0806D730:
	ldr r0, [r7, #8]
	adds r1, r0, #1
	str r1, [r7, #8]
	b _0806D6AE
_0806D738:
	movs r0, #0
	b _0806D73C
_0806D73C:
	add sp, #0xc
	pop {r4, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_0806D744
sub_0806D744: @ 0x0806D744
	push {r4, r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	movs r0, #0
	str r0, [r7, #8]
_0806D752:
	ldr r0, [r7, #8]
	cmp r0, #3
	ble _0806D75A
	b _0806D7DC
_0806D75A:
	ldr r0, _0806D7CC @ =0x030014E8
	ldr r1, [r7, #8]
	movs r2, #0x4c
	muls r1, r2, r1
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0
	bne _0806D7D4
	ldr r0, _0806D7CC @ =0x030014E8
	ldr r1, [r7, #8]
	movs r2, #0x4c
	muls r1, r2, r1
	adds r0, r0, r1
	ldr r1, [r7, #8]
	adds r2, r1, #0
	adds r1, r2, #1
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, _0806D7CC @ =0x030014E8
	ldr r1, [r7, #8]
	movs r2, #0x4c
	muls r1, r2, r1
	adds r0, r0, r1
	ldr r2, [r7]
	adds r1, r2, #0
	ldr r2, _0806D7D0 @ =0x08D64F74
	ldr r3, [r7, #8]
	adds r4, r3, #0
	lsls r3, r4, #1
	adds r2, r2, r3
	ldrh r3, [r2]
	adds r1, r1, r3
	ldrh r2, [r0, #2]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #2]
	ldr r0, [r7, #4]
	ldr r1, [r7, #8]
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7, #8]
	movs r1, #0x4c
	muls r0, r1, r0
	ldr r2, _0806D7CC @ =0x030014E8
	adds r1, r0, r2
	adds r0, r1, #0
	b _0806D7E0
	.align 2, 0
_0806D7CC: .4byte 0x030014E8
_0806D7D0: .4byte 0x08D64F74
_0806D7D4:
	ldr r0, [r7, #8]
	adds r1, r0, #1
	str r1, [r7, #8]
	b _0806D752
_0806D7DC:
	movs r0, #0
	b _0806D7E0
_0806D7E0:
	add sp, #0xc
	pop {r4, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_0806D7E8
sub_0806D7E8: @ 0x0806D7E8
	push {r4, r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x3f
	ldrb r0, [r1]
	cmp r0, #6
	beq _0806D800
	b _0806D858
_0806D800:
	ldr r0, [r7, #4]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x4c
	movs r3, #0
	ldrsh r1, [r2, r3]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x50
	movs r4, #0
	ldrsh r2, [r3, r4]
	adds r3, r1, r2
	asrs r1, r3, #4
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x4e
	movs r3, #0
	ldrsh r1, [r2, r3]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x52
	movs r4, #0
	ldrsh r2, [r3, r4]
	adds r3, r1, r2
	asrs r1, r3, #4
	ldrh r2, [r0, #2]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #2]
	movs r0, #1
	b _0806D92C
_0806D858:
	adds r0, r7, #0
	adds r0, #8
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x4c
	movs r3, #0
	ldrsh r1, [r2, r3]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x50
	movs r4, #0
	ldrsh r2, [r3, r4]
	adds r1, r1, r2
	asrs r2, r1, #4
	ldr r1, _0806D920 @ =gBmSt
	ldrh r1, [r1, #0xc]
	subs r2, r2, r1
	adds r1, r2, #0
	adds r2, r1, #0
	adds r2, #8
	adds r1, r2, #0
	strh r1, [r0]
	adds r0, r7, #0
	adds r0, #0xa
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x4e
	movs r3, #0
	ldrsh r1, [r2, r3]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x52
	movs r4, #0
	ldrsh r2, [r3, r4]
	adds r1, r1, r2
	asrs r2, r1, #4
	ldr r1, _0806D920 @ =gBmSt
	ldrh r1, [r1, #0xe]
	subs r2, r2, r1
	adds r1, r2, #0
	adds r2, r1, #0
	adds r2, #8
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7, #4]
	adds r1, r7, #0
	adds r1, #8
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrh r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7, #4]
	adds r1, r7, #0
	adds r1, #0xa
	ldrh r2, [r1]
	adds r1, r2, #0
	adds r1, #8
	ldrh r2, [r0, #2]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #2]
	adds r0, r7, #0
	adds r0, #8
	movs r2, #0
	ldrsh r1, [r0, r2]
	movs r0, #0x10
	cmn r1, r0
	blt _0806D924
	adds r0, r7, #0
	adds r0, #8
	movs r3, #0
	ldrsh r1, [r0, r3]
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r1, r0
	bgt _0806D924
	adds r0, r7, #0
	adds r0, #0xa
	movs r4, #0
	ldrsh r1, [r0, r4]
	movs r0, #0x10
	cmn r1, r0
	blt _0806D924
	adds r0, r7, #0
	adds r0, #0xa
	movs r2, #0
	ldrsh r1, [r0, r2]
	cmp r1, #0xb0
	bgt _0806D924
	b _0806D928
	.align 2, 0
_0806D920: .4byte gBmSt
_0806D924:
	movs r0, #0
	b _0806D92C
_0806D928:
	movs r0, #1
	b _0806D92C
_0806D92C:
	add sp, #0xc
	pop {r4, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_0806D934
sub_0806D934: @ 0x0806D934
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r7, sp, #8
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldrb r0, [r1]
	cmp r0, #0
	beq _0806D94A
	b _0806DA30
_0806D94A:
	adds r1, r7, #4
	ldr r0, [r7]
	bl sub_0806D7E8
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	bne _0806D95C
	b _0806DA30
_0806D95C:
	adds r0, r7, #4
	ldrh r1, [r0]
	lsls r0, r1, #0x17
	lsrs r1, r0, #0x17
	adds r0, r7, #4
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	adds r0, r7, #6
	ldrh r1, [r0]
	movs r0, #0xff
	ands r1, r0
	adds r0, r7, #6
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x3f
	ldrb r0, [r1]
	cmp r0, #7
	bne _0806D9B8
	adds r0, r7, #6
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r1, r0
	adds r0, r7, #6
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
_0806D9B8:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x3c
	ldrb r0, [r1]
	ldr r1, [r7]
	ldr r2, [r1, #0x38]
	adds r1, r2, #0
	bl sub_08025A6C
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	ldrh r0, [r1, #0x1e]
	adds r1, r7, #4
	movs r3, #0
	ldrsh r2, [r1, r3]
	adds r1, r2, #0
	subs r1, #8
	adds r2, r7, #6
	movs r4, #0
	ldrsh r3, [r2, r4]
	adds r2, r3, #0
	subs r2, #0x10
	ldr r3, [r7]
	ldr r4, [r3, #0x38]
	ldr r5, _0806DA38 @ =0xF9FF0000
	adds r3, r4, r5
	lsls r5, r3, #0xf
	lsrs r4, r5, #0xf
	lsrs r3, r4, #5
	ldr r4, [r7]
	ldr r5, [r4, #0x34]
	ldrb r4, [r5, #1]
	movs r5, #0xf
	ands r4, r5
	adds r6, r4, #0
	lsls r5, r6, #0x18
	lsrs r4, r5, #0x18
	adds r5, r4, #0
	lsls r4, r5, #0xc
	adds r3, r3, r4
	ldr r5, [r7]
	adds r4, r5, #0
	adds r5, #0x46
	ldrh r4, [r5]
	adds r3, r3, r4
	adds r5, r3, #0
	lsls r4, r5, #0x10
	lsrs r3, r4, #0x10
	ldr r5, [r7]
	adds r4, r5, #0
	adds r5, #0x41
	ldrb r4, [r5]
	str r4, [sp]
	ldr r5, [r7]
	adds r4, r5, #0
	adds r5, #0x3c
	ldrb r4, [r5]
	str r4, [sp, #4]
	bl sub_08026794
_0806DA30:
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806DA38: .4byte 0xF9FF0000

	thumb_func_start sub_0806DA3C
sub_0806DA3C: @ 0x0806DA3C
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldrb r0, [r1]
	cmp r0, #0
	beq _0806DA52
	b _0806DB64
_0806DA52:
	adds r1, r7, #4
	ldr r0, [r7]
	bl sub_0806D7E8
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	bne _0806DA64
	b _0806DB64
_0806DA64:
	adds r0, r7, #4
	ldrh r1, [r0]
	lsls r0, r1, #0x17
	lsrs r1, r0, #0x17
	adds r0, r7, #4
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	adds r0, r7, #6
	ldrh r1, [r0]
	movs r0, #0xff
	ands r1, r0
	adds r0, r7, #6
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x3f
	ldrb r0, [r1]
	cmp r0, #6
	beq _0806DAA6
	b _0806DAA8
_0806DAA6:
	b _0806DB28
_0806DAA8:
	ldr r0, [r7]
	ldr r1, [r0, #0x2c]
	cmp r1, #0
	bne _0806DAB2
	b _0806DB28
_0806DAB2:
	ldr r0, [r7]
	ldr r1, [r0, #0x2c]
	movs r0, #0xb
	ldrsb r0, [r1, r0]
	movs r1, #0xc0
	ands r0, r1
	cmp r0, #0x80
	beq _0806DAC4
	b _0806DB28
_0806DAC4:
	ldr r0, _0806DB20 @ =gPlaySt
	ldrb r1, [r0, #0xd]
	cmp r1, #0
	beq _0806DB28
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x4e
	movs r2, #0
	ldrsh r0, [r1, r2]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x52
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r0, r0, r1
	asrs r1, r0, #4
	adds r0, r1, #0
	adds r0, #8
	asrs r1, r0, #4
	adds r2, r1, #0
	lsls r0, r2, #2
	ldr r2, _0806DB24 @ =0x0202E3E8
	ldr r1, [r2]
	adds r0, r0, r1
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x4c
	movs r4, #0
	ldrsh r1, [r2, r4]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x50
	movs r4, #0
	ldrsh r2, [r3, r4]
	adds r1, r1, r2
	asrs r2, r1, #4
	adds r1, r2, #0
	adds r1, #8
	asrs r2, r1, #4
	ldr r1, [r0]
	adds r0, r2, r1
	ldrb r1, [r0]
	cmp r1, #0
	bne _0806DB28
	b _0806DB64
	.align 2, 0
_0806DB20: .4byte gPlaySt
_0806DB24: .4byte 0x0202E3E8
_0806DB28:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x3f
	ldrb r0, [r1]
	cmp r0, #7
	bne _0806DB50
	adds r0, r7, #6
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r1, r0
	adds r0, r7, #6
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
_0806DB50:
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	adds r2, r7, #4
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r3, r7, #6
	movs r4, #0
	ldrsh r2, [r3, r4]
	bl sub_08012694
_0806DB64:
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806DB6C
sub_0806DB6C: @ 0x0806DB6C
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x4a
	movs r2, #0
	ldrsh r0, [r1, r2]
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	movs r1, #0x80
	ands r0, r1
	cmp r0, #0
	beq _0806DB92
	ldr r0, [r7, #4]
	adds r1, r0, #0
	adds r1, #0x80
	str r1, [r7, #4]
_0806DB92:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x44
	ldrb r0, [r1]
	cmp r0, #0
	beq _0806DBA4
	movs r0, #0x80
	lsls r0, r0, #1
	b _0806DCAE
_0806DBA4:
	ldr r0, [r7, #4]
	cmp r0, #0x40
	bne _0806DBD4
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r2, [r1]
	adds r0, r2, #0
	bl GetClassData
	ldr r1, _0806DBD0 @ =0x08D64F7C
	ldrb r0, [r0, #7]
	adds r1, r1, r0
	ldrb r2, [r1]
	adds r0, r2, #0
	lsls r1, r0, #4
	adds r2, r1, #0
	lsls r0, r2, #0x10
	lsrs r1, r0, #0x10
	adds r0, r1, #0
	b _0806DCAE
	.align 2, 0
_0806DBD0: .4byte 0x08D64F7C
_0806DBD4:
	ldr r0, [r7, #4]
	cmp r0, #0
	beq _0806DC44
	ldr r0, [r7, #4]
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	movs r1, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0806DBF2
	ldr r0, [r7, #8]
	movs r1, #0x40
	eors r0, r1
	str r0, [r7, #8]
	b _0806DC2E
_0806DBF2:
	ldr r1, _0806DC20 @ =gPlaySt
	adds r0, r1, #0
	adds r1, #0x40
	ldrb r0, [r1]
	lsls r1, r0, #0x18
	lsrs r0, r1, #0x1f
	cmp r0, #0
	bne _0806DC28
	ldr r1, _0806DC24 @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #4]
	movs r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _0806DC1E
	ldr r0, [r7, #4]
	lsls r1, r0, #2
	str r1, [r7, #8]
_0806DC1E:
	b _0806DC2E
	.align 2, 0
_0806DC20: .4byte gPlaySt
_0806DC24: .4byte gpKeySt
_0806DC28:
	ldr r0, [r7, #4]
	lsls r1, r0, #2
	str r1, [r7, #8]
_0806DC2E:
	ldr r0, [r7, #8]
	cmp r0, #0x80
	ble _0806DC38
	movs r0, #0x80
	str r0, [r7, #8]
_0806DC38:
	ldr r1, [r7, #8]
	adds r0, r1, #0
	lsls r2, r0, #0x10
	lsrs r1, r2, #0x10
	adds r0, r1, #0
	b _0806DCAE
_0806DC44:
	bl IsFirstPlaythrough
	cmp r0, #0
	bne _0806DC6C
	ldr r1, _0806DC68 @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #4]
	movs r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _0806DC6C
	movs r0, #0x80
	b _0806DCAE
	.align 2, 0
_0806DC68: .4byte gpKeySt
_0806DC6C:
	ldr r1, _0806DCA0 @ =gPlaySt
	adds r0, r1, #0
	adds r1, #0x40
	ldrb r0, [r1]
	lsls r1, r0, #0x18
	lsrs r0, r1, #0x1f
	cmp r0, #0
	bne _0806DCAA
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r2, [r1]
	adds r0, r2, #0
	bl GetClassData
	ldr r1, _0806DCA4 @ =0x08D64F7C
	ldrb r0, [r0, #7]
	adds r1, r1, r0
	ldrb r2, [r1]
	adds r0, r2, #0
	lsls r1, r0, #4
	adds r2, r1, #0
	lsls r0, r2, #0x10
	lsrs r1, r0, #0x10
	adds r0, r1, #0
	b _0806DCAE
	.align 2, 0
_0806DCA0: .4byte gPlaySt
_0806DCA4: .4byte 0x08D64F7C
_0806DCA8:
	b _0806DCAE
_0806DCAA:
	movs r0, #0x40
	b _0806DCAE
_0806DCAE:
	add sp, #0xc
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0806DCB8
sub_0806DCB8: @ 0x0806DCB8
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	adds r0, r1, #0
	adds r1, r7, #4
	strh r0, [r1]
	adds r0, r7, #4
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r1, r0
	bls _0806DCEE
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x4a
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	b _0806DD08
_0806DCEE:
	ldr r0, [r7]
	adds r1, r7, #4
	adds r2, r0, #0
	adds r0, #0x4a
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrh r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
_0806DD08:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806DD10
sub_0806DD10: @ 0x0806DD10
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _0806DD30 @ =0x08D64F7E
	ldr r1, [r7]
	adds r2, r0, r1
	ldrb r0, [r2]
	adds r2, r0, #0
	lsls r1, r2, #4
	adds r1, r1, r0
	lsls r0, r1, #9
	ldr r2, _0806DD34 @ =0x020040F0
	adds r1, r0, r2
	adds r0, r1, #0
	b _0806DD38
	.align 2, 0
_0806DD30: .4byte 0x08D64F7E
_0806DD34: .4byte 0x020040F0
_0806DD38:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_0806DD40
sub_0806DD40: @ 0x0806DD40
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _0806DD60 @ =0x08D650B4
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x41
	ldrb r1, [r2]
	subs r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r0, r0, r2
	ldr r1, [r0]
	adds r0, r1, #0
	b _0806DD64
	.align 2, 0
_0806DD60: .4byte 0x08D650B4
_0806DD64:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_0806DD6C
sub_0806DD6C: @ 0x0806DD6C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	adds r1, r7, #0
	strh r0, [r1]
	ldr r0, _0806DD8C @ =0x08D650B4
	adds r1, r7, #0
	ldrh r2, [r1]
	subs r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	b _0806DD90
	.align 2, 0
_0806DD8C: .4byte 0x08D650B4
_0806DD90:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_0806DD98
sub_0806DD98: @ 0x0806DD98
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x3f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #7
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, _0806DEB8 @ =0x08D64F84
	adds r0, r1, #0
	ldr r1, [r7]
	bl Proc_Start
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7]
	str r1, [r0, #0x54]
	ldr r0, [r7, #4]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x20
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _0806DEBC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806DEBC @ =gDispIo
	ldr r2, [r7, #4]
	adds r1, r2, #0
	adds r2, #0x64
	movs r3, #0
	ldrsh r1, [r2, r3]
	asrs r2, r1, #1
	adds r1, r2, #0
	adds r2, r0, #0
	adds r0, #0x44
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806DEBC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806DEBC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	ldr r0, [r7]
	movs r1, #0
	bl sub_0806E840
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x1e]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xd
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x1e]
	ldr r1, _0806DEC0 @ =gPlaySt
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r0, [r1]
	lsls r1, r0, #0x1e
	lsrs r0, r1, #0x1f
	cmp r0, #0
	bne _0806DE8C
	movs r0, #0xd6
	bl m4aSongNumStart
_0806DE8C:
	ldr r0, [r7]
	ldr r1, [r0, #0x2c]
	ldr r0, [r1, #0xc]
	movs r1, #0x80
	lsls r1, r1, #4
	ands r0, r1
	cmp r0, #0
	beq _0806DEB0
	ldr r0, [r7]
	ldr r1, [r0, #0x2c]
	adds r0, r1, #0
	bl sub_08034C80
	ldr r0, [r7]
	ldr r1, [r0, #0x2c]
	adds r0, r1, #0
	bl HideUnitSprite
_0806DEB0:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806DEB8: .4byte 0x08D64F84
_0806DEBC: .4byte gDispIo
_0806DEC0: .4byte gPlaySt

	thumb_func_start sub_0806DEC4
sub_0806DEC4: @ 0x0806DEC4
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _0806DF54 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806DF54 @ =gDispIo
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x64
	ldrh r2, [r1]
	subs r3, r2, #1
	adds r4, r3, #0
	strh r4, [r1]
	lsls r2, r2, #0x10
	asrs r1, r2, #0x10
	asrs r2, r1, #1
	adds r1, r2, #0
	adds r2, r0, #0
	adds r0, #0x44
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806DF54 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806DF54 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0
	bne _0806DF4C
	ldr r0, [r7]
	ldr r1, [r0, #0x54]
	adds r0, r1, #0
	bl sub_0806D4BC
	ldr r0, [r7]
	bl Proc_Break
_0806DF4C:
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806DF54: .4byte gDispIo

	thumb_func_start sub_0806DF58
sub_0806DF58: @ 0x0806DF58
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x14]
	str r1, [r7, #4]
	ldr r1, [r7, #4]
	movs r0, #0
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x64
	ldrh r2, [r3]
	movs r3, #7
	ands r2, r3
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	cmp r2, #3
	bgt _0806DF82
	movs r0, #1
_0806DF82:
	adds r2, r1, #0
	adds r1, #0x40
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x64
	ldrh r3, [r2]
	subs r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x64
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0
	bge _0806DFE6
	ldr r0, [r7]
	bl Proc_Break
	ldr r0, [r7, #4]
	adds r1, r0, #0
	adds r0, #0x40
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
_0806DFE6:
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806DFF0
sub_0806DFF0: @ 0x0806DFF0
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x3f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #7
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, _0806E074 @ =0x08D64F9C
	adds r0, r1, #0
	ldr r1, [r7]
	bl Proc_Start
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7]
	str r1, [r0, #0x54]
	ldr r0, [r7, #4]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	ldr r1, _0806E078 @ =gPlaySt
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r0, [r1]
	lsls r1, r0, #0x1e
	lsrs r0, r1, #0x1f
	cmp r0, #0
	bne _0806E06C
	movs r0, #0xd6
	bl m4aSongNumStart
_0806E06C:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806E074: .4byte 0x08D64F9C
_0806E078: .4byte gPlaySt

	thumb_func_start sub_0806E07C
sub_0806E07C: @ 0x0806E07C
	push {r7, lr}
	sub sp, #0x1c
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, _0806E0E4 @ =0x08D64FAC
	ldr r1, [r7, #4]
	adds r0, r0, r1
	ldrb r1, [r0]
	movs r2, #7
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x18
	lsrs r0, r1, #0x18
	str r0, [r7, #0x10]
	ldr r0, _0806E0E4 @ =0x08D64FAC
	ldr r1, [r7, #4]
	adds r0, r0, r1
	ldrb r1, [r0]
	lsrs r0, r1, #3
	adds r2, r0, #0
	lsls r1, r2, #0x18
	lsrs r0, r1, #0x18
	str r0, [r7, #0x14]
	ldr r0, _0806E0E8 @ =0x030014E0
	movs r1, #1
	rsbs r1, r1, #0
	str r1, [r0]
	ldr r0, _0806E0EC @ =0x030014E4
	ldr r1, [r7, #0x10]
	adds r2, r1, #0
	lsls r1, r2, #2
	movs r2, #0xf
	adds r3, r2, #0
	lsls r3, r1
	adds r1, r3, #0
	str r1, [r0]
	ldr r0, _0806E0E8 @ =0x030014E0
	ldr r1, _0806E0E8 @ =0x030014E0
	ldr r2, _0806E0EC @ =0x030014E4
	ldr r3, [r2]
	mvns r2, r3
	ldr r1, [r1]
	ands r2, r1
	str r2, [r0]
	movs r0, #0
	str r0, [r7, #8]
_0806E0DC:
	ldr r0, [r7, #8]
	cmp r0, #3
	ble _0806E0F0
	b _0806E14A
	.align 2, 0
_0806E0E4: .4byte 0x08D64FAC
_0806E0E8: .4byte 0x030014E0
_0806E0EC: .4byte 0x030014E4
_0806E0F0:
	movs r0, #0
	str r0, [r7, #0xc]
_0806E0F4:
	ldr r0, [r7, #0xc]
	cmp r0, #3
	ble _0806E0FC
	b _0806E138
_0806E0FC:
	ldr r0, [r7, #0x14]
	adds r1, r0, #0
	lsls r0, r1, #2
	ldr r1, [r7]
	adds r0, r0, r1
	ldr r1, [r0]
	str r1, [r7, #0x18]
	ldr r0, _0806E134 @ =0x030014E0
	ldr r1, [r7, #0x18]
	ldr r0, [r0]
	ands r1, r0
	str r1, [r7, #0x18]
	ldr r0, [r7, #0x14]
	adds r1, r0, #0
	lsls r0, r1, #2
	ldr r1, [r7]
	adds r0, r0, r1
	ldr r1, [r7, #0x18]
	str r1, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r1, #0x20
	str r1, [r7]
	ldr r0, [r7, #0xc]
	adds r1, r0, #1
	str r1, [r7, #0xc]
	b _0806E0F4
	.align 2, 0
_0806E134: .4byte 0x030014E0
_0806E138:
	ldr r0, [r7]
	movs r2, #0xe0
	lsls r2, r2, #2
	adds r1, r0, r2
	str r1, [r7]
	ldr r0, [r7, #8]
	adds r1, r0, #1
	str r1, [r7, #8]
	b _0806E0DC
_0806E14A:
	add sp, #0x1c
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806E154
sub_0806E154: @ 0x0806E154
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x14]
	adds r0, r1, #0
	adds r1, #0x3c
	ldrb r2, [r1]
	adds r0, r2, #0
	bl sub_0806DD10
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x66
	movs r3, #0
	ldrsh r1, [r2, r3]
	bl sub_0806E07C
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x66
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x66
	ldrh r3, [r2]
	adds r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x66
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, _0806E1FC @ =0x020040F0
	ldr r1, _0806E200 @ =0x06017000
	movs r2, #0x80
	lsls r2, r2, #5
	bl RegisterDataMove
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x64
	ldrh r3, [r2]
	subs r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x64
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0
	bne _0806E1F4
	ldr r0, [r7]
	ldr r1, [r0, #0x54]
	adds r0, r1, #0
	bl sub_0806D4BC
	ldr r0, [r7]
	bl Proc_Break
_0806E1F4:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806E1FC: .4byte 0x020040F0
_0806E200: .4byte 0x06017000

	thumb_func_start sub_0806E204
sub_0806E204: @ 0x0806E204
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x3f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #7
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, _0806E298 @ =0x08D64FEC
	adds r0, r1, #0
	ldr r1, [r7]
	bl Proc_Start
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7]
	str r1, [r0, #0x54]
	ldr r0, [r7, #4]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7, #4]
	adds r1, r0, #0
	adds r0, #0x66
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	ldr r1, _0806E29C @ =gPlaySt
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r0, [r1]
	lsls r1, r0, #0x1e
	lsrs r0, r1, #0x1f
	cmp r0, #0
	bne _0806E290
	movs r0, #0xd6
	bl m4aSongNumStart
_0806E290:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806E298: .4byte 0x08D64FEC
_0806E29C: .4byte gPlaySt

	thumb_func_start sub_0806E2A0
sub_0806E2A0: @ 0x0806E2A0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x40
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806E2C8
sub_0806E2C8: @ 0x0806E2C8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x40
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806E2E8
sub_0806E2E8: @ 0x0806E2E8
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r0, [r7]
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r0, #0
	adds r0, #0x4c
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	ldr r1, [r7, #8]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r0, #0
	adds r0, #0x4e
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806E334
sub_0806E334: @ 0x0806E334
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r0, [r7]
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r0, #0
	adds r0, #0x50
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	ldr r1, [r7, #8]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r0, #0
	adds r0, #0x52
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806E380
sub_0806E380: @ 0x0806E380
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldr r2, [r7]
	ldr r1, [r2, #0x34]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x46
	ldrh r2, [r3]
	movs r4, #0xa0
	lsls r4, r4, #7
	adds r3, r2, r4
	ldrh r1, [r1, #2]
	adds r2, r3, #0
	adds r1, r1, r2
	ldrh r2, [r0, #0x22]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x22]
	ldr r0, [r7]
	ldr r1, [r0, #0x34]
	ldrb r0, [r1, #1]
	adds r1, r0, #0
	adds r1, #0x10
	adds r0, r1, #0
	lsls r1, r0, #5
	asrs r0, r1, #1
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, _0806E3F8 @ =gPal
	adds r0, r0, r1
	movs r1, #0xa8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0806E3FC @ =0x08D64D98
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	movs r1, #0x15
	movs r2, #8
	ldr r3, [r7]
	bl sub_08014020
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806E3F8: .4byte gPal
_0806E3FC: .4byte 0x08D64D98

	thumb_func_start sub_0806E400
sub_0806E400: @ 0x0806E400
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x34]
	ldrb r0, [r1, #1]
	adds r1, r0, #0
	adds r1, #0x10
	adds r0, r1, #0
	lsls r1, r0, #5
	asrs r0, r1, #1
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r2, _0806E448 @ =gPal
	adds r1, r0, r2
	adds r0, r1, #0
	movs r1, #0x15
	movs r2, #8
	ldr r3, [r7]
	bl sub_08014020
	ldr r1, _0806E44C @ =0x08D64FFC
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7]
	str r1, [r0, #0x54]
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806E448: .4byte gPal
_0806E44C: .4byte 0x08D64FFC

	thumb_func_start sub_0806E450
sub_0806E450: @ 0x0806E450
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x54]
	str r1, [r7, #4]
	ldr r1, [r7, #4]
	ldr r0, [r1, #0x30]
	ldr r2, [r7, #4]
	ldr r1, [r2, #0x34]
	ldr r2, [r7, #4]
	ldr r3, [r2, #0x34]
	ldrb r2, [r3, #1]
	movs r3, #0xf
	ands r2, r3
	adds r4, r2, #0
	lsls r3, r4, #0x18
	lsrs r2, r3, #0x18
	adds r3, r2, #0
	lsls r2, r3, #0xc
	ldrh r1, [r1, #2]
	adds r1, r1, r2
	ldr r3, [r7, #4]
	adds r2, r3, #0
	adds r3, #0x46
	ldrh r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r0, #0x22]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x22]
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806E4A0
sub_0806E4A0: @ 0x0806E4A0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	adds r0, r1, #0
	movs r1, #4
	bl sub_080128F0
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	ldr r0, _0806E4F0 @ =sub_0806E4F4
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	adds r1, r2, #0
	movs r2, #0x1e
	bl sub_08014FCC
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806E4F0: .4byte sub_0806E4F4

	thumb_func_start sub_0806E4F4
sub_0806E4F4: @ 0x0806E4F4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r0, [r7]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806E51C
sub_0806E51C: @ 0x0806E51C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	ldr r0, _0806E560 @ =sub_0806E564
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	adds r1, r2, #0
	movs r2, #0x1e
	bl sub_08014FCC
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806E560: .4byte sub_0806E564

	thumb_func_start sub_0806E564
sub_0806E564: @ 0x0806E564
	push {r4, r5, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _0806E5BC @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x58
	ldrb r4, [r1]
	ldr r1, _0806E5BC @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x58
	ldrb r0, [r1]
	movs r1, #1
	subs r5, r1, r0
	ldr r0, _0806E5BC @ =0x0203E0D4
	ldr r1, [r0, #4]
	adds r0, r1, #0
	adds r1, #0x4a
	ldrh r2, [r1]
	adds r0, r2, #0
	bl sub_0806C218
	lsls r1, r0, #0x18
	lsrs r2, r1, #0x18
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_0806F404
	ldr r0, [r7]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r0, [r7]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	add sp, #4
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806E5BC: .4byte 0x0203E0D4

	thumb_func_start sub_0806E5C0
sub_0806E5C0: @ 0x0806E5C0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	ldr r0, _0806E604 @ =sub_0806E608
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	adds r1, r2, #0
	movs r2, #0x14
	bl sub_08014FCC
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806E604: .4byte sub_0806E608

	thumb_func_start sub_0806E608
sub_0806E608: @ 0x0806E608
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r0, [r7]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806E630
sub_0806E630: @ 0x0806E630
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, _0806E670 @ =0x08D64D98
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r2, #0xa8
	lsls r2, r2, #2
	adds r0, r1, #0
	adds r1, r2, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r1, _0806E674 @ =0x08D65014
	adds r0, r1, #0
	ldr r1, [r7]
	bl Proc_Start
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806E670: .4byte 0x08D64D98
_0806E674: .4byte 0x08D65014

	thumb_func_start sub_0806E678
sub_0806E678: @ 0x0806E678
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x30
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806E698
sub_0806E698: @ 0x0806E698
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x2c]
	ldr r0, [r1, #0x30]
	ldr r1, [r7]
	ldr r2, [r1, #0x2c]
	ldr r1, [r2, #0x34]
	ldr r2, [r7]
	ldr r3, [r2, #0x2c]
	adds r2, r3, #0
	adds r3, #0x46
	ldrh r2, [r3]
	movs r4, #0xa0
	lsls r4, r4, #7
	adds r3, r2, r4
	ldrh r1, [r1, #2]
	adds r2, r3, #0
	adds r1, r1, r2
	ldrh r2, [r0, #0x22]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x22]
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806E6DC
sub_0806E6DC: @ 0x0806E6DC
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x2c]
	ldr r0, [r1, #0x30]
	ldr r1, [r7]
	ldr r2, [r1, #0x2c]
	ldr r1, [r2, #0x34]
	ldr r2, [r7]
	ldr r3, [r2, #0x2c]
	ldr r2, [r3, #0x34]
	ldrb r3, [r2, #1]
	movs r4, #0xf
	adds r2, r3, #0
	ands r2, r4
	adds r4, r2, #0
	lsls r3, r4, #0x18
	lsrs r2, r3, #0x18
	adds r3, r2, #0
	lsls r2, r3, #0xc
	ldrh r1, [r1, #2]
	adds r1, r1, r2
	ldr r2, [r7]
	ldr r3, [r2, #0x2c]
	adds r2, r3, #0
	adds r3, #0x46
	ldrh r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r0, #0x22]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x22]
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806E730
sub_0806E730: @ 0x0806E730
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x2c]
	ldr r0, [r1, #0x34]
	ldrb r1, [r0, #1]
	adds r0, r1, #0
	adds r0, #0x10
	adds r1, r0, #0
	lsls r0, r1, #5
	asrs r1, r0, #1
	adds r0, r1, #0
	lsls r1, r0, #1
	ldr r0, _0806E768 @ =gPal
	adds r1, r1, r0
	adds r0, r1, #0
	movs r1, #0x15
	movs r2, #0x14
	ldr r3, [r7]
	bl sub_08014020
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806E768: .4byte gPal

	thumb_func_start sub_0806E76C
sub_0806E76C: @ 0x0806E76C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x30
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x30
	ldrb r3, [r2]
	adds r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x30
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r1, [r7]
	ldr r0, [r1, #0x2c]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x30
	ldrb r1, [r2]
	movs r2, #1
	ands r1, r2
	adds r3, r1, #0
	lsls r2, r3, #0x18
	lsrs r1, r2, #0x18
	cmp r1, #0
	beq _0806E7B8
	movs r1, #2
	b _0806E7BC
_0806E7B8:
	movs r1, #2
	rsbs r1, r1, #0
_0806E7BC:
	movs r2, #0
	bl sub_0806E334
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x30
	ldrb r0, [r1]
	cmp r0, #0xb
	bls _0806E7E2
	ldr r0, [r7]
	ldr r1, [r0, #0x2c]
	adds r0, r1, #0
	movs r1, #0
	movs r2, #0
	bl sub_0806E334
	ldr r0, [r7]
	bl Proc_Break
_0806E7E2:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806E7EC
sub_0806E7EC: @ 0x0806E7EC
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x2c]
	ldr r0, [r1, #0x30]
	ldr r1, [r7]
	ldr r2, [r1, #0x2c]
	ldr r1, [r2, #0x34]
	ldr r2, [r7]
	ldr r3, [r2, #0x2c]
	ldr r2, [r3, #0x34]
	ldrb r3, [r2, #1]
	movs r4, #0xf
	adds r2, r3, #0
	ands r2, r4
	adds r4, r2, #0
	lsls r3, r4, #0x18
	lsrs r2, r3, #0x18
	adds r3, r2, #0
	lsls r2, r3, #0xc
	ldrh r1, [r1, #2]
	adds r1, r1, r2
	ldr r2, [r7]
	ldr r3, [r2, #0x2c]
	adds r2, r3, #0
	adds r3, #0x46
	ldrh r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r0, #0x22]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x22]
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806E840
sub_0806E840: @ 0x0806E840
	push {r4, r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, _0806E8D0 @ =0x08D64D98
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r2, #0xa8
	lsls r2, r2, #2
	adds r0, r1, #0
	adds r1, r2, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldr r2, [r7]
	ldr r1, [r2, #0x34]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x46
	ldrh r2, [r3]
	movs r4, #0xa0
	lsls r4, r4, #7
	adds r3, r2, r4
	ldrh r1, [r1, #2]
	adds r2, r3, #0
	adds r1, r1, r2
	ldrh r2, [r0, #0x22]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x22]
	ldr r0, [r7]
	ldr r1, [r0, #0x34]
	ldrb r0, [r1, #1]
	adds r1, r0, #0
	adds r1, #0x10
	adds r0, r1, #0
	lsls r1, r0, #5
	asrs r0, r1, #1
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r2, _0806E8D4 @ =gPal
	adds r1, r0, r2
	adds r0, r1, #0
	movs r1, #0x15
	movs r2, #0x14
	ldr r3, [r7]
	bl sub_08014020
	ldr r1, _0806E8D8 @ =0x08D6509C
	adds r0, r1, #0
	ldr r1, [r7]
	bl Proc_Start
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806E8D0: .4byte 0x08D64D98
_0806E8D4: .4byte gPal
_0806E8D8: .4byte 0x08D6509C

	thumb_func_start sub_0806E8DC
sub_0806E8DC: @ 0x0806E8DC
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x2c]
	ldr r0, [r1, #0x30]
	ldr r1, [r7]
	ldr r2, [r1, #0x2c]
	ldr r1, [r2, #0x34]
	ldr r2, [r7]
	ldr r3, [r2, #0x2c]
	ldr r2, [r3, #0x34]
	ldrb r3, [r2, #1]
	movs r4, #0xf
	adds r2, r3, #0
	ands r2, r4
	adds r4, r2, #0
	lsls r3, r4, #0x18
	lsrs r2, r3, #0x18
	adds r3, r2, #0
	lsls r2, r3, #0xc
	ldrh r1, [r1, #2]
	adds r1, r1, r2
	ldr r2, [r7]
	ldr r3, [r2, #0x2c]
	adds r2, r3, #0
	adds r3, #0x46
	ldrh r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r0, #0x22]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x22]
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806E930
sub_0806E930: @ 0x0806E930
	push {r7, lr}
	mov r7, sp
	ldr r0, _0806E944 @ =0x08D64F4C
	ldr r1, _0806E948 @ =sub_0806E94C
	bl sub_08004670
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806E944: .4byte 0x08D64F4C
_0806E948: .4byte sub_0806E94C

	thumb_func_start sub_0806E94C
sub_0806E94C: @ 0x0806E94C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806E974
sub_0806E974: @ 0x0806E974
	push {r4, r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	ldr r1, [r7]
	ldr r2, [r7, #4]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x41
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r0, [r7]
	ldr r4, [r0, #0x30]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r2, [r1]
	adds r0, r2, #0
	bl sub_0806DD6C
	adds r1, r0, #0
	adds r0, r4, #0
	bl sub_08012924
	ldr r0, [r7]
	bl sub_0806DD40
	adds r4, r0, #0
	ldr r0, [r7]
	ldr r1, [r0, #0x34]
	ldrb r2, [r1]
	adds r0, r2, #0
	bl sub_0806DD10
	adds r1, r0, #0
	adds r0, r4, #0
	bl sub_08013688
	ldr r0, [r7, #8]
	ldr r1, [r7]
	ldr r2, [r1, #0x34]
	ldrb r1, [r2, #1]
	adds r2, r1, #0
	adds r2, #0x10
	adds r1, r2, #0
	lsls r2, r1, #5
	adds r1, r2, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806EA0C
sub_0806EA0C: @ 0x0806EA0C
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, [r7]
	ldr r0, [r1, #0x34]
	ldr r2, [r7, #4]
	adds r1, r2, #0
	ldrb r2, [r0, #1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldr r2, [r7]
	ldr r1, [r2, #0x34]
	ldr r2, [r7, #4]
	movs r3, #0xf
	ands r2, r3
	adds r3, r2, #0
	lsls r2, r3, #0xc
	ldrh r1, [r1, #2]
	adds r1, r1, r2
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x46
	ldrh r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r0, #0x22]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x22]
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806EA64
sub_0806EA64: @ 0x0806EA64
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _0806EA80 @ =0x030014E8
	ldr r1, [r7]
	movs r2, #0x4c
	muls r1, r2, r1
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0
	bne _0806EA84
	movs r0, #0
	b _0806EA9C
	.align 2, 0
_0806EA80: .4byte 0x030014E8
_0806EA84:
	ldr r0, _0806EA98 @ =0x030014E8
	ldr r1, [r7]
	movs r2, #0x4c
	muls r1, r2, r1
	adds r0, #0x48
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	b _0806EA9C
	.align 2, 0
_0806EA98: .4byte 0x030014E8
_0806EA9C:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_0806EAA4
sub_0806EAA4: @ 0x0806EAA4
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	str r0, [r7, #4]
_0806EAB0:
	ldr r0, [r7, #4]
	cmp r0, #3
	ble _0806EAB8
	b _0806EADA
_0806EAB8:
	ldr r1, [r7, #4]
	adds r0, r1, #0
	bl sub_0806EA64
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	ldr r1, [r0, #0x2c]
	ldr r0, [r7]
	cmp r1, r0
	bne _0806EAD2
	ldr r1, [r7, #8]
	adds r0, r1, #0
	b _0806EADE
_0806EAD2:
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _0806EAB0
_0806EADA:
	movs r0, #0
	b _0806EADE
_0806EADE:
	add sp, #0xc
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0806EAE8
sub_0806EAE8: @ 0x0806EAE8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _0806EB00 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x62
	ldrb r0, [r1]
	cmp r0, #1
	beq _0806EB04
	b _0806EB06
	.align 2, 0
_0806EB00: .4byte 0x0203E0D4
_0806EB04:
	b _0806EB08
_0806EB06:
	b _0806EB1A
_0806EB08:
	ldr r0, _0806EB24 @ =0x0203E0D4
	ldr r1, [r0, #0x18]
	adds r0, r1, #0
	adds r1, #0x48
	ldrh r2, [r1]
	adds r0, r2, #0
	ldr r1, [r7]
	bl sub_0800EE00
_0806EB1A:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806EB24: .4byte 0x0203E0D4

	thumb_func_start sub_0806EB28
sub_0806EB28: @ 0x0806EB28
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	str r0, [r7, #4]
	ldr r1, _0806EB7C @ =gBattleActor
	adds r0, r1, #0
	bl sub_0806EB84
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _0806EB48
	ldr r0, _0806EB7C @ =gBattleActor
	str r0, [r7, #4]
_0806EB48:
	ldr r1, _0806EB80 @ =gBattleTarget
	adds r0, r1, #0
	bl sub_0806EB84
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _0806EB5C
	ldr r0, _0806EB80 @ =gBattleTarget
	str r0, [r7, #4]
_0806EB5C:
	ldr r0, [r7, #4]
	cmp r0, #0
	beq _0806EB72
	ldr r1, [r7, #4]
	adds r0, r1, #0
	adds r1, #0x4a
	ldrh r2, [r1]
	adds r0, r2, #0
	ldr r1, [r7]
	bl sub_0800ECEC
_0806EB72:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806EB7C: .4byte gBattleActor
_0806EB80: .4byte gBattleTarget

	thumb_func_start sub_0806EB84
sub_0806EB84: @ 0x0806EB84
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	movs r1, #0xb
	ldrsb r1, [r0, r1]
	movs r2, #0xc0
	adds r0, r1, #0
	ands r0, r2
	cmp r0, #0
	bne _0806EBAA
	ldr r0, [r7]
	bl DidBattleUnitBreakWeapon
	lsls r2, r0, #0x18
	asrs r1, r2, #0x18
	adds r0, r1, #0
	b _0806EBAE
_0806EBAA:
	movs r0, #0
	b _0806EBAE
_0806EBAE:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0806EBB8
sub_0806EBB8: @ 0x0806EBB8
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	str r0, [r7, #4]
	ldr r1, _0806EC0C @ =gBattleActor
	adds r0, r1, #0
	bl sub_0806EC14
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _0806EBD8
	ldr r0, _0806EC0C @ =gBattleActor
	str r0, [r7, #4]
_0806EBD8:
	ldr r1, _0806EC10 @ =gBattleTarget
	adds r0, r1, #0
	bl sub_0806EC14
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _0806EBEC
	ldr r0, _0806EC10 @ =gBattleTarget
	str r0, [r7, #4]
_0806EBEC:
	ldr r0, [r7, #4]
	cmp r0, #0
	beq _0806EC02
	ldr r1, [r7, #4]
	adds r0, r1, #0
	adds r1, #0x50
	ldrb r2, [r1]
	adds r0, r2, #0
	ldr r1, [r7]
	bl sub_0800ED34
_0806EC02:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806EC0C: .4byte gBattleActor
_0806EC10: .4byte gBattleTarget

	thumb_func_start sub_0806EC14
sub_0806EC14: @ 0x0806EC14
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	movs r1, #0xb
	ldrsb r1, [r0, r1]
	movs r2, #0xc0
	adds r0, r1, #0
	ands r0, r2
	cmp r0, #0
	bne _0806EC3E
	ldr r0, [r7]
	bl HasBattleUnitGainedWeaponLevel
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _0806EC3E
	movs r0, #1
	b _0806EC42
_0806EC3E:
	movs r0, #0
	b _0806EC42
_0806EC42:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0806EC4C
sub_0806EC4C: @ 0x0806EC4C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl ResetText
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806EC60
sub_0806EC60: @ 0x0806EC60
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl sub_0806D62C
	bl sub_08005308
	bl sub_0806FF58
	bl InitBmBgLayers
	bl sub_0804A9F8
	bl sub_08015A0C
	bl sub_0800EC2C
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _0806EC90
	bl MU_EndAll
_0806EC90:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806EC98
sub_0806EC98: @ 0x0806EC98
	push {r7, lr}
	mov r7, sp
	ldr r0, _0806ED74 @ =0x0203E0D4
	ldr r1, _0806ED74 @ =0x0203E0D4
	ldr r2, [r1, #0x50]
	ldrb r1, [r2, #2]
	lsrs r2, r1, #3
	adds r1, r2, #0
	movs r2, #1
	ands r1, r2
	adds r2, r0, #0
	adds r0, #0x58
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, _0806ED74 @ =0x0203E0D4
	ldr r2, _0806ED74 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	movs r2, #1
	subs r1, r2, r1
	adds r2, r0, #0
	adds r0, #0x59
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, _0806ED74 @ =0x0203E0D4
	ldr r2, _0806ED74 @ =0x0203E0D4
	ldr r1, [r2, #0x50]
	adds r2, r0, #0
	adds r0, #0x5a
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrh r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, _0806ED74 @ =0x0203E0D4
	ldr r2, _0806ED74 @ =0x0203E0D4
	ldr r1, [r2, #0x50]
	adds r2, r0, #0
	adds r0, #0x5c
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1, #2]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, _0806ED74 @ =0x0203E0D4
	ldr r2, _0806ED74 @ =0x0203E0D4
	ldr r1, [r2, #0x50]
	adds r2, r0, #0
	adds r0, #0x5d
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1, #3]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r1, _0806ED74 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	cmp r0, #1
	bne _0806ED62
	ldr r0, _0806ED74 @ =0x0203E0D4
	adds r1, r0, #0
	adds r0, #0x58
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806ED74 @ =0x0203E0D4
	adds r1, r0, #0
	adds r0, #0x59
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
_0806ED62:
	ldr r1, _0806ED74 @ =0x0203E0D4
	ldr r0, _0806ED74 @ =0x0203E0D4
	ldr r1, _0806ED74 @ =0x0203E0D4
	ldr r2, [r1, #0x50]
	adds r1, r2, #4
	str r1, [r0, #0x50]
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806ED74: .4byte 0x0203E0D4

	thumb_func_start sub_0806ED78
sub_0806ED78: @ 0x0806ED78
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _0806EDA4 @ =0x0203E0D4
	ldr r1, [r0, #0x50]
	ldrb r0, [r1, #2]
	movs r1, #0x80
	ands r0, r1
	adds r2, r0, #0
	lsls r1, r2, #0x18
	lsrs r0, r1, #0x18
	cmp r0, #0
	beq _0806EDAC
	ldr r0, [r7]
	bl Proc_Break
	ldr r1, _0806EDA8 @ =0x08D6561C
	ldr r0, [r7]
	bl sub_08004634
	b _0806EDB6
	.align 2, 0
_0806EDA4: .4byte 0x0203E0D4
_0806EDA8: .4byte 0x08D6561C
_0806EDAC:
	bl sub_0806EC98
	ldr r0, [r7]
	bl Proc_Break
_0806EDB6:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806EDC0
sub_0806EDC0: @ 0x0806EDC0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl sub_08075E08
	adds r1, r0, #0
	adds r0, r1, #0
	ldr r1, [r7]
	bl Proc_StartBlocking
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806EDE0
sub_0806EDE0: @ 0x0806EDE0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _0806EE2C @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5a
	ldrh r0, [r1]
	movs r1, #0x40
	ands r0, r1
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _0806EE22
	ldr r0, _0806EE2C @ =0x0203E0D4
	ldr r2, _0806EE2C @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_08071DF8
	ldr r0, [r7]
	movs r1, #0x64
	bl sub_080149B4
_0806EE22:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806EE2C: .4byte 0x0203E0D4

	thumb_func_start sub_0806EE30
sub_0806EE30: @ 0x0806EE30
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _0806EE58 @ =0x0203E0D4
	ldr r2, [r0]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	ldr r0, _0806EE58 @ =0x0203E0D4
	ldr r3, [r0]
	movs r2, #0x11
	ldrsb r2, [r3, r2]
	ldr r0, [r7]
	bl sub_0801615C
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806EE58: .4byte 0x0203E0D4

	thumb_func_start sub_0806EE5C
sub_0806EE5C: @ 0x0806EE5C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _0806EE74 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	cmp r0, #1
	bne _0806EE78
	b _0806EE8E
	.align 2, 0
_0806EE74: .4byte 0x0203E0D4
_0806EE78:
	ldr r0, _0806EE98 @ =0x0203E0D4
	ldr r2, [r0, #0x14]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	ldr r0, _0806EE98 @ =0x0203E0D4
	ldr r3, [r0, #0x14]
	movs r2, #0x11
	ldrsb r2, [r3, r2]
	ldr r0, [r7]
	bl sub_0801615C
_0806EE8E:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806EE98: .4byte 0x0203E0D4

	thumb_func_start sub_0806EE9C
sub_0806EE9C: @ 0x0806EE9C
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r7, #4]
	ldr r1, _0806EEBC @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	cmp r0, #1
	beq _0806EED0
	cmp r0, #2
	beq _0806EEC0
	b _0806EEE4
	.align 2, 0
_0806EEBC: .4byte 0x0203E0D4
_0806EEC0:
	ldr r1, _0806EEE0 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x21
	ldrb r0, [r1]
	cmp r0, #0
	bne _0806EED0
	movs r0, #1
	str r0, [r7, #4]
_0806EED0:
	ldr r0, _0806EEE0 @ =0x0203E0D4
	ldrb r1, [r0, #0xd]
	cmp r1, #0
	bne _0806EEDC
	movs r0, #0
	str r0, [r7, #4]
_0806EEDC:
	b _0806EEE4
	.align 2, 0
_0806EEE0: .4byte 0x0203E0D4
_0806EEE4:
	ldr r0, [r7, #4]
	movs r1, #1
	cmn r0, r1
	beq _0806EF2E
	ldr r0, _0806EF38 @ =0x0203E0D4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, [r1]
	ldrb r1, [r0, #4]
	str r1, [r7, #8]
	ldr r1, [r7, #8]
	adds r0, r1, #0
	lsls r2, r0, #0x18
	lsrs r1, r2, #0x18
	adds r0, r1, #0
	bl sub_08079CE4
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _0806EF2E
	bl sub_0806FF58
	ldr r1, [r7, #8]
	adds r0, r1, #0
	lsls r2, r0, #0x18
	lsrs r1, r2, #0x18
	adds r0, r1, #0
	bl sub_08079DF4
	bl sub_0800AD60
_0806EF2E:
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806EF38: .4byte 0x0203E0D4

	thumb_func_start sub_0806EF3C
sub_0806EF3C: @ 0x0806EF3C
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r7, #4]
	ldr r1, _0806EF5C @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	cmp r0, #1
	beq _0806EF70
	cmp r0, #2
	beq _0806EF60
	b _0806EF84
	.align 2, 0
_0806EF5C: .4byte 0x0203E0D4
_0806EF60:
	ldr r1, _0806EF80 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x21
	ldrb r0, [r1]
	cmp r0, #0
	bne _0806EF70
	movs r0, #1
	str r0, [r7, #4]
_0806EF70:
	ldr r0, _0806EF80 @ =0x0203E0D4
	ldrb r1, [r0, #0xd]
	cmp r1, #0
	bne _0806EF7C
	movs r0, #0
	str r0, [r7, #4]
_0806EF7C:
	b _0806EF84
	.align 2, 0
_0806EF80: .4byte 0x0203E0D4
_0806EF84:
	ldr r0, [r7, #4]
	movs r1, #1
	cmn r0, r1
	beq _0806EFA4
	ldr r0, _0806EFAC @ =0x0203E0D4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	bl sub_0806DD98
_0806EFA4:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806EFAC: .4byte 0x0203E0D4

	thumb_func_start sub_0806EFB0
sub_0806EFB0: @ 0x0806EFB0
	push {r4, r5, r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r7, #8]
	ldr r1, _0806EFD0 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	cmp r0, #1
	beq _0806EFE8
	cmp r0, #2
	beq _0806EFD4
	b _0806F004
	.align 2, 0
_0806EFD0: .4byte 0x0203E0D4
_0806EFD4:
	ldr r0, _0806F000 @ =0x0203E0D4
	ldr r1, [r0, #0x18]
	adds r0, r1, #0
	adds r1, #0x6e
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	beq _0806EFE8
	movs r0, #1
	str r0, [r7, #8]
_0806EFE8:
	ldr r0, _0806F000 @ =0x0203E0D4
	ldr r1, [r0, #4]
	adds r0, r1, #0
	adds r1, #0x6e
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	beq _0806EFFC
	movs r0, #0
	str r0, [r7, #8]
_0806EFFC:
	b _0806F004
	.align 2, 0
_0806F000: .4byte 0x0203E0D4
_0806F004:
	ldr r0, [r7, #8]
	cmp r0, #0
	blt _0806F0B4
	ldr r1, _0806F0BC @ =0x08D65760
	adds r0, r1, #0
	ldr r1, [r7]
	bl Proc_StartBlocking
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, _0806F0C0 @ =0x0203E0D4
	ldr r2, [r7, #8]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, #4
	adds r2, r1, r2
	ldr r3, [r2]
	adds r1, r3, #0
	adds r2, r3, #0
	adds r2, #0x71
	movs r3, #0
	ldrsb r3, [r2, r3]
	adds r1, r3, #0
	adds r2, r0, #0
	adds r0, #0x64
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7, #4]
	ldr r1, _0806F0C0 @ =0x0203E0D4
	ldr r2, [r7, #8]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, #4
	adds r2, r1, r2
	ldr r3, [r2]
	adds r1, r3, #0
	adds r2, r3, #0
	adds r2, #0x71
	movs r3, #0
	ldrsb r3, [r2, r3]
	adds r1, r3, #0
	ldr r2, _0806F0C0 @ =0x0203E0D4
	ldr r3, [r7, #8]
	adds r5, r3, #0
	lsls r4, r5, #2
	adds r4, r4, r3
	lsls r3, r4, #2
	adds r2, #4
	adds r3, r2, r3
	ldr r4, [r3]
	adds r2, r4, #0
	adds r3, r4, #0
	adds r3, #0x6e
	movs r4, #0
	ldrsb r4, [r3, r4]
	adds r2, r4, #0
	adds r1, r1, r2
	adds r2, r0, #0
	adds r0, #0x66
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7, #4]
	ldr r2, [r7, #8]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x68
	ldrh r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strh r2, [r1]
_0806F0B4:
	add sp, #0xc
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806F0BC: .4byte 0x08D65760
_0806F0C0: .4byte 0x0203E0D4

	thumb_func_start sub_0806F0C4
sub_0806F0C4: @ 0x0806F0C4
	push {r4, r7, lr}
	sub sp, #0x18
	mov r7, sp
	str r0, [r7]
	ldr r0, _0806F128 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806F128 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806F128 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806F128 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, _0806F12C @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x62
	ldrb r0, [r1]
	cmp r0, #2
	bgt _0806F132
	cmp r0, #1
	blt _0806F132
	b _0806F130
	.align 2, 0
_0806F128: .4byte gDispIo
_0806F12C: .4byte 0x0203E0D4
_0806F130:
	b _0806F276
_0806F132:
	b _0806F134
_0806F134:
	ldr r0, _0806F150 @ =0x0203E0D4
	ldr r1, [r0, #4]
	adds r0, r1, #0
	adds r1, #0x4a
	ldrh r2, [r1]
	adds r0, r2, #0
	bl sub_0806C208
	lsls r1, r0, #0x18
	lsrs r0, r1, #0x18
	cmp r0, #0
	bne _0806F154
	b _0806F276
	.align 2, 0
_0806F150: .4byte 0x0203E0D4
_0806F154:
	ldr r1, _0806F184 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	cmp r0, #1
	bne _0806F196
	ldr r0, _0806F184 @ =0x0203E0D4
	ldr r1, [r0]
	movs r2, #0x11
	ldrsb r2, [r1, r2]
	lsls r0, r2, #4
	ldr r1, _0806F188 @ =gBmSt
	movs r3, #0xe
	ldrsh r2, [r1, r3]
	subs r0, r0, r2
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	cmp r0, #0x6f
	ble _0806F18C
	ldr r0, [r7, #4]
	adds r1, r0, #0
	subs r1, #0x28
	str r1, [r7, #4]
	b _0806F194
	.align 2, 0
_0806F184: .4byte 0x0203E0D4
_0806F188: .4byte gBmSt
_0806F18C:
	ldr r0, [r7, #4]
	adds r1, r0, #0
	adds r1, #0x18
	str r1, [r7, #4]
_0806F194:
	b _0806F262
_0806F196:
	movs r0, #0
	str r0, [r7, #0x10]
_0806F19A:
	ldr r1, _0806F1AC @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	ldr r1, [r7, #0x10]
	cmp r1, r0
	blt _0806F1B0
	b _0806F1EC
	.align 2, 0
_0806F1AC: .4byte 0x0203E0D4
_0806F1B0:
	ldr r0, [r7, #0x10]
	adds r1, r0, #0
	lsls r0, r1, #2
	adds r1, r7, #0
	adds r1, #8
	adds r0, r1, r0
	ldr r1, _0806F1E4 @ =0x0203E0D4
	ldr r2, [r7, #0x10]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r3, #0x11
	ldrsb r3, [r2, r3]
	lsls r1, r3, #4
	ldr r2, _0806F1E8 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	subs r1, r1, r3
	str r1, [r0]
	ldr r0, [r7, #0x10]
	adds r1, r0, #1
	str r1, [r7, #0x10]
	b _0806F19A
	.align 2, 0
_0806F1E4: .4byte 0x0203E0D4
_0806F1E8: .4byte gBmSt
_0806F1EC:
	ldr r0, [r7, #8]
	ldr r1, [r7, #0xc]
	subs r0, r0, r1
	cmp r0, #0
	blt _0806F202
	ldr r0, [r7, #8]
	ldr r1, [r7, #0xc]
	subs r0, r0, r1
	cmp r0, #0x4f
	bgt _0806F20E
	b _0806F214
_0806F202:
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #8]
	subs r0, r0, r1
	cmp r0, #0x4f
	bgt _0806F20E
	b _0806F214
_0806F20E:
	movs r0, #0x40
	str r0, [r7, #4]
	b _0806F262
_0806F214:
	movs r0, #0
	ldr r1, [r7, #8]
	ldr r2, [r7, #0xc]
	cmp r1, r2
	bgt _0806F220
	movs r0, #1
_0806F220:
	str r0, [r7, #0x14]
	ldr r0, [r7, #0x14]
	adds r1, r0, #0
	lsls r0, r1, #2
	adds r1, r7, #0
	adds r1, #8
	adds r0, r1, r0
	ldr r1, [r0]
	cmp r1, #0x6f
	ble _0806F24E
	movs r0, #1
	ldr r1, [r7, #0x14]
	subs r0, r0, r1
	adds r1, r0, #0
	lsls r0, r1, #2
	adds r1, r7, #0
	adds r1, #8
	adds r0, r1, r0
	ldr r1, [r0]
	adds r0, r1, #0
	subs r0, #0x28
	str r0, [r7, #4]
	b _0806F262
_0806F24E:
	ldr r0, [r7, #0x14]
	adds r1, r0, #0
	lsls r0, r1, #2
	adds r1, r7, #0
	adds r1, #8
	adds r0, r1, r0
	ldr r1, [r0]
	adds r0, r1, #0
	adds r0, #0x18
	str r0, [r7, #4]
_0806F262:
	ldr r1, [r7, #4]
	adds r0, r1, #0
	cmp r0, #0
	bge _0806F26C
	adds r0, #7
_0806F26C:
	asrs r1, r0, #3
	movs r0, #0xf
	ldr r2, [r7]
	bl sub_0806FF70
_0806F276:
	add sp, #0x18
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806F280
sub_0806F280: @ 0x0806F280
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _0806F298 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	cmp r0, #2
	beq _0806F29C
	b _0806F2B8
	.align 2, 0
_0806F298: .4byte 0x0203E0D4
_0806F29C:
	ldr r0, _0806F2B4 @ =0x0203E0D4
	ldr r1, [r0]
	ldr r2, [r1]
	ldrb r0, [r2, #4]
	ldr r1, _0806F2B4 @ =0x0203E0D4
	ldr r2, [r1, #0x14]
	ldr r1, [r2]
	ldrb r2, [r1, #4]
	adds r1, r2, #0
	bl sub_08079C34
	b _0806F2BA
	.align 2, 0
_0806F2B4: .4byte 0x0203E0D4
_0806F2B8:
	b _0806F2BA
_0806F2BA:
	bl sub_0800AD60
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806F2C8
sub_0806F2C8: @ 0x0806F2C8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806F2D8
sub_0806F2D8: @ 0x0806F2D8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _0806F2F4 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	cmp r0, #1
	beq _0806F2FE
	cmp r0, #2
	beq _0806F2F8
	b _0806F304
	.align 2, 0
_0806F2F4: .4byte 0x0203E0D4
_0806F2F8:
	movs r0, #1
	bl sub_0806F2C8
_0806F2FE:
	movs r0, #0
	bl sub_0806F2C8
_0806F304:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806F30C
sub_0806F30C: @ 0x0806F30C
	push {r7, lr}
	mov r7, sp
	ldr r1, _0806F32C @ =gPlaySt
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r0, [r1]
	lsls r1, r0, #0x1e
	lsrs r0, r1, #0x1f
	cmp r0, #0
	bne _0806F326
	movs r0, #0xa0
	bl m4aSongNumStart
_0806F326:
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806F32C: .4byte gPlaySt

	thumb_func_start sub_0806F330
sub_0806F330: @ 0x0806F330
	push {r4, r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r0, [r7, #4]
	cmp r0, #0
	bne _0806F344
	b _0806F3F8
_0806F344:
	ldr r0, _0806F3DC @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r7, #8]
	str r1, [r0]
	ldr r0, _0806F3DC @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r0, [r7, #4]
	str r0, [r1]
	ldr r1, [r7, #8]
	adds r0, r1, #0
	bl sub_0806C2DC
	ldr r1, _0806F3DC @ =0x0203E0D4
	ldr r2, [r7]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, #8
	adds r2, r1, r2
	str r0, [r2]
	ldr r0, _0806F3DC @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	ldr r0, [r2, #0x30]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r0, _0806F3DC @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	ldr r0, [r2, #0x30]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	ldr r1, [r7, #4]
	adds r0, r1, #0
	adds r1, #0x55
	ldrb r0, [r1]
	cmp r0, #0x1b
	beq _0806F3E0
	ldr r1, [r7, #4]
	adds r0, r1, #0
	adds r1, #0x55
	ldrb r0, [r1]
	cmp r0, #0x33
	beq _0806F3E0
	b _0806F3F8
	.align 2, 0
_0806F3DC: .4byte 0x0203E0D4
_0806F3E0:
	ldr r0, _0806F400 @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	bl sub_0806E2A0
_0806F3F8:
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806F400: .4byte 0x0203E0D4

	thumb_func_start sub_0806F404
sub_0806F404: @ 0x0806F404
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r0, [r7, #8]
	cmp r0, #1
	beq _0806F49C
	cmp r0, #1
	bgt _0806F420
	cmp r0, #0
	beq _0806F426
	b _0806F506
_0806F420:
	cmp r0, #2
	beq _0806F4BC
	b _0806F506
_0806F426:
	ldr r0, _0806F498 @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x10
	ldrsb r0, [r1, r0]
	ldr r1, _0806F498 @ =0x0203E0D4
	ldr r2, [r7]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0x11
	ldrsb r1, [r2, r1]
	ldr r2, _0806F498 @ =0x0203E0D4
	ldr r3, [r7, #4]
	adds r5, r3, #0
	lsls r4, r5, #2
	adds r4, r4, r3
	lsls r3, r4, #2
	adds r2, r2, r3
	ldr r3, [r2]
	movs r2, #0x10
	ldrsb r2, [r3, r2]
	ldr r3, _0806F498 @ =0x0203E0D4
	ldr r4, [r7, #4]
	adds r6, r4, #0
	lsls r5, r6, #2
	adds r5, r5, r4
	lsls r4, r5, #2
	adds r3, r3, r4
	ldr r4, [r3]
	movs r3, #0x11
	ldrsb r3, [r4, r3]
	bl sub_0806FC64
	str r0, [r7, #0xc]
	ldr r0, _0806F498 @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r0, [r1]
	ldr r1, [r7, #0xc]
	bl sub_0806C738
	b _0806F506
	.align 2, 0
_0806F498: .4byte 0x0203E0D4
_0806F49C:
	ldr r0, _0806F4B8 @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	bl sub_0806C790
	b _0806F506
	.align 2, 0
_0806F4B8: .4byte 0x0203E0D4
_0806F4BC:
	ldr r0, _0806F510 @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x10
	ldrsb r0, [r1, r0]
	ldr r1, _0806F510 @ =0x0203E0D4
	ldr r2, [r7]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0x11
	ldrsb r1, [r2, r1]
	movs r2, #0
	movs r3, #0
	bl sub_0806FC64
	str r0, [r7, #0xc]
	ldr r0, _0806F510 @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r0, [r1]
	ldr r1, [r7, #0xc]
	bl sub_0806C738
_0806F506:
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806F510: .4byte 0x0203E0D4

	thumb_func_start sub_0806F514
sub_0806F514: @ 0x0806F514
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	ldr r0, _0806F548 @ =0x0203E0D4
	ldr r1, [r0, #4]
	adds r0, r1, #0
	adds r1, #0x4a
	ldrh r2, [r1]
	adds r0, r2, #0
	bl sub_0806C218
	lsls r1, r0, #0x18
	lsrs r0, r1, #0x18
	str r0, [r7]
	bl sub_0806F598
	ldr r1, _0806F548 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	cmp r0, #1
	beq _0806F580
	cmp r0, #2
	beq _0806F54C
	b _0806F590
	.align 2, 0
_0806F548: .4byte 0x0203E0D4
_0806F54C:
	ldr r0, _0806F58C @ =gBattleHitArray
	ldrh r1, [r0]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _0806F576
	movs r0, #2
	movs r1, #1
	ldr r2, [r7]
	bl sub_0806F404
	movs r0, #3
	movs r1, #1
	ldr r2, [r7]
	bl sub_0806F404
_0806F576:
	movs r0, #1
	movs r1, #0
	ldr r2, [r7]
	bl sub_0806F404
_0806F580:
	movs r0, #0
	movs r1, #1
	ldr r2, [r7]
	bl sub_0806F404
	b _0806F590
	.align 2, 0
_0806F58C: .4byte gBattleHitArray
_0806F590:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806F598
sub_0806F598: @ 0x0806F598
	push {r4, r7, lr}
	sub sp, #0x18
	mov r7, sp
	ldr r1, _0806F5BC @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	str r0, [r7, #0x14]
	ldr r1, _0806F5BC @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	cmp r0, #1
	beq _0806F5E4
	cmp r0, #2
	beq _0806F5C0
	b _0806F5E6
	.align 2, 0
_0806F5BC: .4byte 0x0203E0D4
_0806F5C0:
	ldr r0, _0806F5E0 @ =gBattleHitArray
	ldrh r1, [r0]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _0806F5DC
	ldr r0, [r7, #0x14]
	adds r1, r0, #2
	str r1, [r7, #0x14]
_0806F5DC:
	b _0806F5E6
	.align 2, 0
_0806F5E0: .4byte gBattleHitArray
_0806F5E4:
	b _0806F5E6
_0806F5E6:
	movs r0, #0
	str r0, [r7, #8]
_0806F5EA:
	ldr r0, [r7, #8]
	ldr r1, [r7, #0x14]
	cmp r0, r1
	blt _0806F5F4
	b _0806F614
_0806F5F4:
	adds r0, r7, #0
	ldr r1, [r7, #8]
	adds r0, r0, r1
	ldr r2, [r7, #8]
	adds r1, r2, #0
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7, #8]
	adds r1, r0, #1
	str r1, [r7, #8]
	b _0806F5EA
_0806F614:
	movs r0, #0
	str r0, [r7, #8]
_0806F618:
	ldr r1, [r7, #0x14]
	subs r0, r1, #1
	ldr r1, [r7, #8]
	cmp r1, r0
	blt _0806F624
	b _0806F758
_0806F624:
	ldr r0, [r7, #8]
	adds r1, r0, #1
	str r1, [r7, #0xc]
_0806F62A:
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #0x14]
	cmp r0, r1
	blt _0806F634
	b _0806F750
_0806F634:
	movs r0, #0
	str r0, [r7, #0x10]
	ldr r0, _0806F6B4 @ =0x0203E0D4
	adds r1, r7, #0
	ldr r2, [r7, #8]
	adds r3, r1, r2
	ldrb r1, [r3]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r2, r0, r1
	ldr r0, [r2]
	ldr r1, _0806F6B4 @ =0x0203E0D4
	adds r2, r7, #0
	ldr r3, [r7, #0xc]
	adds r4, r2, r3
	ldrb r2, [r4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	ldrb r0, [r0, #0x11]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r1, #0x11
	ldrsb r1, [r2, r1]
	cmp r0, r1
	bne _0806F6B8
	ldr r0, _0806F6B4 @ =0x0203E0D4
	adds r1, r7, #0
	ldr r2, [r7, #8]
	adds r3, r1, r2
	ldrb r1, [r3]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r2, r0, r1
	ldr r0, [r2]
	ldr r1, _0806F6B4 @ =0x0203E0D4
	adds r2, r7, #0
	ldr r3, [r7, #0xc]
	adds r4, r2, r3
	ldrb r2, [r4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	ldrb r0, [r0, #0x10]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	cmp r0, r1
	blt _0806F6B2
	ldr r0, [r7, #0x10]
	adds r1, r0, #1
	str r1, [r7, #0x10]
_0806F6B2:
	b _0806F6F8
	.align 2, 0
_0806F6B4: .4byte 0x0203E0D4
_0806F6B8:
	ldr r0, _0806F74C @ =0x0203E0D4
	adds r1, r7, #0
	ldr r2, [r7, #8]
	adds r3, r1, r2
	ldrb r1, [r3]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r2, r0, r1
	ldr r0, [r2]
	ldr r1, _0806F74C @ =0x0203E0D4
	adds r2, r7, #0
	ldr r3, [r7, #0xc]
	adds r4, r2, r3
	ldrb r2, [r4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	ldrb r0, [r0, #0x11]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r1, #0x11
	ldrsb r1, [r2, r1]
	cmp r0, r1
	blt _0806F6F8
	ldr r0, [r7, #0x10]
	adds r1, r0, #1
	str r1, [r7, #0x10]
_0806F6F8:
	ldr r0, [r7, #0x10]
	cmp r0, #0
	beq _0806F742
	adds r0, r7, #4
	adds r1, r7, #0
	ldr r2, [r7, #8]
	adds r1, r1, r2
	ldrb r2, [r1]
	strb r2, [r0]
	adds r0, r7, #0
	ldr r1, [r7, #8]
	adds r0, r0, r1
	adds r1, r7, #0
	ldr r2, [r7, #0xc]
	adds r1, r1, r2
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	adds r0, r7, #0
	ldr r1, [r7, #0xc]
	adds r0, r0, r1
	adds r1, r7, #4
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
_0806F742:
	ldr r0, [r7, #0xc]
	adds r1, r0, #1
	str r1, [r7, #0xc]
	b _0806F62A
	.align 2, 0
_0806F74C: .4byte 0x0203E0D4
_0806F750:
	ldr r0, [r7, #8]
	adds r1, r0, #1
	str r1, [r7, #8]
	b _0806F618
_0806F758:
	movs r0, #0
	str r0, [r7, #8]
_0806F75C:
	ldr r0, [r7, #8]
	ldr r1, [r7, #0x14]
	cmp r0, r1
	blt _0806F766
	b _0806F7A8
_0806F766:
	ldr r0, _0806F7A0 @ =0x0203E0D4
	adds r1, r7, #0
	ldr r2, [r7, #8]
	adds r3, r1, r2
	ldrb r1, [r3]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	ldr r0, [r2, #0x30]
	ldr r1, _0806F7A4 @ =0x08402BF0
	ldr r2, [r7, #8]
	adds r1, r1, r2
	ldrb r2, [r1]
	adds r1, r2, #0
	ldrh r2, [r0, #0x1e]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x1e]
	ldr r0, [r7, #8]
	adds r1, r0, #1
	str r1, [r7, #8]
	b _0806F75C
	.align 2, 0
_0806F7A0: .4byte 0x0203E0D4
_0806F7A4: .4byte 0x08402BF0
_0806F7A8:
	add sp, #0x18
	pop {r4, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806F7B0
sub_0806F7B0: @ 0x0806F7B0
	push {r7, lr}
	mov r7, sp
	ldr r0, _0806F828 @ =gBattleActor
	adds r1, r0, #0
	adds r0, #0x4a
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x6b
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _0806F82C @ =0x0203E0D4
	adds r1, r0, #0
	adds r0, #0x5f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806F82C @ =0x0203E0D4
	adds r1, r0, #0
	adds r0, #0x62
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806F82C @ =0x0203E0D4
	adds r1, r0, #0
	adds r0, #0x5e
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806F82C @ =0x0203E0D4
	ldr r1, _0806F830 @ =gBattleHitArray
	str r1, [r0, #0x50]
	bl sub_0806EC98
	ldr r0, _0806F828 @ =gBattleActor
	ldr r1, _0806F834 @ =gBattleTarget
	ldr r2, _0806F830 @ =gBattleHitArray
	bl sub_0806FAF8
	ldr r1, _0806F838 @ =0x08D653CC
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806F828: .4byte gBattleActor
_0806F82C: .4byte 0x0203E0D4
_0806F830: .4byte gBattleHitArray
_0806F834: .4byte gBattleTarget
_0806F838: .4byte 0x08D653CC

	thumb_func_start sub_0806F83C
sub_0806F83C: @ 0x0806F83C
	push {r7, lr}
	mov r7, sp
	ldr r0, _0806F8B4 @ =gBattleActor
	adds r1, r0, #0
	adds r0, #0x4a
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x6b
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _0806F8B8 @ =0x0203E0D4
	adds r1, r0, #0
	adds r0, #0x5f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806F8B8 @ =0x0203E0D4
	adds r1, r0, #0
	adds r0, #0x62
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806F8B8 @ =0x0203E0D4
	adds r1, r0, #0
	adds r0, #0x5e
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806F8B8 @ =0x0203E0D4
	ldr r1, _0806F8BC @ =gBattleHitArray
	str r1, [r0, #0x50]
	bl sub_0806EC98
	ldr r0, _0806F8B4 @ =gBattleActor
	ldr r1, _0806F8C0 @ =gBattleTarget
	ldr r2, _0806F8BC @ =gBattleHitArray
	bl sub_0806FAF8
	ldr r1, _0806F8C4 @ =0x08D6540C
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806F8B4: .4byte gBattleActor
_0806F8B8: .4byte 0x0203E0D4
_0806F8BC: .4byte gBattleHitArray
_0806F8C0: .4byte gBattleTarget
_0806F8C4: .4byte 0x08D6540C

	thumb_func_start sub_0806F8C8
sub_0806F8C8: @ 0x0806F8C8
	push {r7, lr}
	mov r7, sp
	ldr r0, _0806F968 @ =gBattleActor
	adds r1, r0, #0
	adds r0, #0x4a
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _0806F96C @ =0x0203E0D4
	adds r1, r0, #0
	adds r0, #0x5f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806F96C @ =0x0203E0D4
	adds r1, r0, #0
	adds r0, #0x62
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806F96C @ =0x0203E0D4
	adds r1, r0, #0
	adds r0, #0x5e
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806F96C @ =0x0203E0D4
	adds r1, r0, #0
	adds r0, #0x58
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806F96C @ =0x0203E0D4
	adds r1, r0, #0
	adds r0, #0x59
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806F968 @ =gBattleActor
	ldr r1, _0806F970 @ =gBattleTarget
	ldr r2, _0806F974 @ =gBattleHitArray
	bl sub_0806FAF8
	ldr r1, _0806F978 @ =0x08D6544C
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806F968: .4byte gBattleActor
_0806F96C: .4byte 0x0203E0D4
_0806F970: .4byte gBattleTarget
_0806F974: .4byte gBattleHitArray
_0806F978: .4byte 0x08D6544C

	thumb_func_start sub_0806F97C
sub_0806F97C: @ 0x0806F97C
	push {r7, lr}
	mov r7, sp
	ldr r0, _0806FA14 @ =gBattleActor
	adds r1, r0, #0
	adds r0, #0x4a
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x4e
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _0806FA18 @ =0x0203E0D4
	adds r1, r0, #0
	adds r0, #0x5f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806FA18 @ =0x0203E0D4
	adds r1, r0, #0
	adds r0, #0x62
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806FA18 @ =0x0203E0D4
	adds r1, r0, #0
	adds r0, #0x5e
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806FA18 @ =0x0203E0D4
	adds r1, r0, #0
	adds r0, #0x58
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806FA18 @ =0x0203E0D4
	adds r1, r0, #0
	adds r0, #0x59
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806FA14 @ =gBattleActor
	ldr r1, _0806FA1C @ =gBattleTarget
	ldr r2, _0806FA20 @ =gBattleHitArray
	bl sub_0806FAF8
	ldr r1, _0806FA24 @ =0x08D6551C
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806FA14: .4byte gBattleActor
_0806FA18: .4byte 0x0203E0D4
_0806FA1C: .4byte gBattleTarget
_0806FA20: .4byte gBattleHitArray
_0806FA24: .4byte 0x08D6551C

	thumb_func_start BeginBattleMapAnims
BeginBattleMapAnims: @ 0x0806FA28
	push {r7, lr}
	mov r7, sp
	ldr r0, _0806FA48 @ =gBattleStats
	ldrh r1, [r0]
	movs r2, #0x90
	lsls r2, r2, #2
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _0806FA4C
	bl sub_0806F97C
	b _0806FA8A
	.align 2, 0
_0806FA48: .4byte gBattleStats
_0806FA4C:
	ldr r0, _0806FA90 @ =0x0203E0D4
	adds r1, r0, #0
	adds r0, #0x5f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806FA90 @ =0x0203E0D4
	adds r1, r0, #0
	adds r0, #0x62
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806FA94 @ =gBattleActor
	ldr r1, _0806FA98 @ =gBattleTarget
	ldr r2, _0806FA9C @ =gBattleHitArray
	bl sub_0806FAA4
	ldr r0, _0806FA94 @ =gBattleActor
	ldr r1, _0806FA98 @ =gBattleTarget
	ldr r2, _0806FA9C @ =gBattleHitArray
	bl sub_0806FAF8
	ldr r1, _0806FAA0 @ =0x08D65574
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
_0806FA8A:
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806FA90: .4byte 0x0203E0D4
_0806FA94: .4byte gBattleActor
_0806FA98: .4byte gBattleTarget
_0806FA9C: .4byte gBattleHitArray
_0806FAA0: .4byte 0x08D65574

	thumb_func_start sub_0806FAA4
sub_0806FAA4: @ 0x0806FAA4
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x4a
	ldrh r2, [r1]
	adds r0, r2, #0
	bl sub_0806C1D8
	ldr r1, _0806FAF4 @ =0x0203E0D4
	adds r2, r1, #0
	adds r1, #0x5e
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r0, _0806FAF4 @ =0x0203E0D4
	ldr r1, [r7, #8]
	str r1, [r0, #0x50]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x4a
	ldrh r2, [r1]
	adds r0, r2, #0
	bl sub_0806C1F8
	ldr r1, _0806FAF4 @ =0x0203E0D4
	str r0, [r1, #0x54]
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806FAF4: .4byte 0x0203E0D4

	thumb_func_start sub_0806FAF8
sub_0806FAF8: @ 0x0806FAF8
	push {r4, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	movs r0, #0
	ldr r1, [r7]
	ldr r2, [r7]
	bl sub_0806F330
	ldr r1, _0806FB88 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	cmp r0, #1
	bls _0806FB2C
	ldr r1, _0806FB8C @ =gBattleTarget
	adds r0, r1, #0
	bl HideUnitSprite
	ldr r1, [r7, #4]
	ldr r2, [r7, #4]
	movs r0, #1
	bl sub_0806F330
_0806FB2C:
	ldr r0, _0806FB90 @ =gBattleHitArray
	ldrh r1, [r0]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _0806FB6E
	ldr r0, _0806FB94 @ =gBattleStats
	ldr r2, [r0, #0x10]
	movs r0, #2
	ldr r1, [r7]
	bl sub_0806F330
	ldr r0, _0806FB94 @ =gBattleStats
	ldr r2, [r0, #0x14]
	movs r0, #3
	ldr r1, [r7]
	bl sub_0806F330
	ldr r0, _0806FB94 @ =gBattleStats
	ldr r1, [r0, #0x10]
	adds r0, r1, #0
	bl HideUnitSprite
	ldr r0, _0806FB94 @ =gBattleStats
	ldr r1, [r0, #0x14]
	adds r0, r1, #0
	bl HideUnitSprite
_0806FB6E:
	bl sub_0806F514
	movs r0, #0
	str r0, [r7, #0xc]
_0806FB76:
	ldr r1, _0806FB88 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	ldr r1, [r7, #0xc]
	cmp r1, r0
	blt _0806FB98
	b _0806FC10
	.align 2, 0
_0806FB88: .4byte 0x0203E0D4
_0806FB8C: .4byte gBattleTarget
_0806FB90: .4byte gBattleHitArray
_0806FB94: .4byte gBattleStats
_0806FB98:
	ldr r0, _0806FC0C @ =0x0203E0D4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, _0806FC0C @ =0x0203E0D4
	ldr r2, [r7, #0xc]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, #4
	adds r2, r1, r2
	ldr r1, [r2]
	adds r2, r1, #0
	adds r1, #0x72
	ldrb r2, [r0, #0xd]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0, #0xd]
	ldr r0, _0806FC0C @ =0x0203E0D4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl GetUnitMaxHp
	ldr r1, _0806FC0C @ =0x0203E0D4
	ldr r2, [r7, #0xc]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrb r2, [r1, #0xc]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r0
	adds r0, r2, #0
	strb r0, [r1, #0xc]
	ldr r0, [r7, #0xc]
	adds r1, r0, #1
	str r1, [r7, #0xc]
	b _0806FB76
	.align 2, 0
_0806FC0C: .4byte 0x0203E0D4
_0806FC10:
	ldr r0, _0806FC60 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806FC60 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806FC60 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806FC60 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #0x10
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806FC60: .4byte gDispIo

	thumb_func_start sub_0806FC64
sub_0806FC64: @ 0x0806FC64
	push {r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, [r7, #8]
	ldr r2, [r7]
	subs r0, r0, r2
	cmp r0, #0
	blt _0806FC8A
	ldr r0, [r7, #8]
	ldr r2, [r7]
	subs r1, r0, r2
	adds r0, r1, #0
	lsls r2, r0, #1
	adds r1, r2, #0
	b _0806FC96
_0806FC8A:
	ldr r0, [r7]
	ldr r2, [r7, #8]
	subs r1, r0, r2
	adds r0, r1, #0
	lsls r2, r0, #1
	adds r1, r2, #0
_0806FC96:
	ldr r0, [r7, #0xc]
	ldr r2, [r7, #4]
	subs r0, r0, r2
	cmp r0, #0
	blt _0806FCAC
	ldr r0, [r7, #0xc]
	ldr r2, [r7, #4]
	subs r0, r0, r2
	cmp r1, r0
	blt _0806FCB8
	b _0806FCCC
_0806FCAC:
	ldr r0, [r7, #4]
	ldr r2, [r7, #0xc]
	subs r0, r0, r2
	cmp r1, r0
	blt _0806FCB8
	b _0806FCCC
_0806FCB8:
	ldr r0, [r7, #4]
	ldr r2, [r7, #0xc]
	cmp r0, r2
	bge _0806FCC6
	movs r0, #2
	b _0806FCDE
_0806FCC4:
	b _0806FCCA
_0806FCC6:
	movs r0, #3
	b _0806FCDE
_0806FCCA:
	b _0806FCDE
_0806FCCC:
	ldr r0, [r7]
	ldr r2, [r7, #8]
	cmp r0, r2
	bge _0806FCDA
	movs r0, #1
	b _0806FCDE
_0806FCD8:
	b _0806FCDE
_0806FCDA:
	movs r0, #0
	b _0806FCDE
_0806FCDE:
	add sp, #0x10
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0806FCE8
sub_0806FCE8: @ 0x0806FCE8
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r4, _0806FD18 @ =0x083FAA20
	movs r0, #0
	bl GetBgChrOffset
	ldr r1, [r7]
	lsls r2, r1, #0x16
	lsrs r1, r2, #0x16
	lsls r2, r1, #5
	movs r3, #0xc0
	lsls r3, r3, #0x13
	adds r1, r2, r3
	adds r2, r0, r1
	adds r0, r4, #0
	adds r1, r2, #0
	bl sub_08013688
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806FD18: .4byte 0x083FAA20

	thumb_func_start sub_0806FD1C
sub_0806FD1C: @ 0x0806FD1C
	push {r4, r7, lr}
	sub sp, #0x24
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, [r7, #0x30]
	adds r1, r7, #0
	adds r1, #0x10
	strh r0, [r1]
	movs r0, #7
	str r0, [r7, #0x1c]
_0806FD36:
	ldr r0, [r7, #0x1c]
	cmp r0, #0
	bge _0806FD3E
	b _0806FDB2
_0806FD3E:
	adds r0, r7, #0
	adds r0, #0x14
	ldr r1, [r7, #0x1c]
	adds r4, r0, r1
	ldr r1, [r7, #4]
	adds r0, r1, #0
	movs r1, #0xa
	bl __modsi3
	adds r1, r0, #0
	adds r0, r1, #0
	adds r0, #0x30
	ldrb r1, [r4]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	adds r1, r2, #0
	orrs r1, r0
	adds r0, r1, #0
	strb r0, [r4]
	ldr r1, [r7, #4]
	adds r0, r1, #0
	movs r1, #0xa
	bl __divsi3
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	cmp r0, #0
	bne _0806FDAA
	ldr r0, [r7, #0x1c]
	subs r1, r0, #1
	str r1, [r7, #0x20]
_0806FD7E:
	ldr r0, [r7, #0x20]
	cmp r0, #0
	bge _0806FD86
	b _0806FDA8
_0806FD86:
	adds r0, r7, #0
	adds r0, #0x14
	ldr r1, [r7, #0x20]
	adds r0, r0, r1
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x20
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7, #0x20]
	subs r1, r0, #1
	str r1, [r7, #0x20]
	b _0806FD7E
_0806FDA8:
	b _0806FDB2
_0806FDAA:
	ldr r0, [r7, #0x1c]
	subs r1, r0, #1
	str r1, [r7, #0x1c]
	b _0806FD36
_0806FDB2:
	adds r0, r7, #0
	adds r0, #0x14
	adds r1, r0, #7
	ldr r2, [r7, #8]
	ldr r3, [r7, #0xc]
	ldr r0, [r7]
	bl sub_08013870
	ldr r0, [r7, #0xc]
	subs r1, r0, #1
	str r1, [r7, #0x1c]
_0806FDC8:
	ldr r0, [r7, #0x1c]
	cmp r0, #0
	bgt _0806FDD0
	b _0806FDFE
_0806FDD0:
	adds r0, r7, #0
	adds r0, #0x14
	movs r1, #7
	ldr r2, [r7, #0x1c]
	subs r1, r1, r2
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0x20
	beq _0806FDE4
	b _0806FDFE
_0806FDE4:
	ldr r0, [r7, #0x1c]
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, [r7]
	subs r0, r1, r0
	adds r1, r7, #0
	adds r1, #0x10
	ldrh r2, [r1]
	strh r2, [r0]
	ldr r0, [r7, #0x1c]
	subs r1, r0, #1
	str r1, [r7, #0x1c]
	b _0806FDC8
_0806FDFE:
	add sp, #0x24
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806FE08
sub_0806FE08: @ 0x0806FE08
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #0x20
	bl sub_0806FCE8
	ldr r1, _0806FE34 @ =0x06000540
	ldr r0, [r7]
	bl sub_08013688
	ldr r1, _0806FE38 @ =0x08400BA8
	adds r0, r1, #0
	movs r1, #0xa0
	movs r2, #0x20
	bl ApplyPaletteExt
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806FE34: .4byte 0x06000540
_0806FE38: .4byte 0x08400BA8

	thumb_func_start sub_0806FE3C
sub_0806FE3C: @ 0x0806FE3C
	push {r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, [r7, #4]
	ldr r1, [r0]
	ldr r0, [r7, #0xc]
	cmp r1, r0
	ble _0806FE5A
	ldr r0, [r7, #0xc]
	str r0, [r7, #0x10]
	b _0806FE60
_0806FE5A:
	ldr r0, [r7, #4]
	ldr r1, [r0]
	str r1, [r7, #0x10]
_0806FE60:
	ldr r0, [r7]
	ldr r2, [r7, #0x1c]
	adds r1, r2, #0
	ldr r3, [r7, #0x10]
	adds r2, r3, #0
	adds r1, r1, r2
	ldr r3, [r7, #8]
	adds r2, r3, #0
	lsls r3, r2, #0xc
	adds r2, r3, #0
	adds r1, r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7, #4]
	ldr r1, [r7, #4]
	ldr r2, [r1]
	adds r1, r2, #1
	ldr r2, [r7, #0xc]
	subs r1, r1, r2
	str r1, [r0]
	ldr r0, [r7, #4]
	ldr r1, [r0]
	cmp r1, #0
	bge _0806FE96
	ldr r0, [r7, #4]
	movs r1, #0
	str r1, [r0]
_0806FE96:
	add sp, #0x14
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806FEA0
sub_0806FEA0: @ 0x0806FEA0
	push {r4, r7, lr}
	sub sp, #0x20
	add r7, sp, #4
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	movs r0, #0
	str r0, [r7, #0x14]
	ldr r0, [r7, #0x28]
	str r0, [r7, #0x18]
_0806FEB6:
	ldr r0, [r7, #0x18]
	ldrh r1, [r0]
	cmp r1, #0
	bne _0806FEC0
	b _0806FED4
_0806FEC0:
	ldr r1, [r7, #0x14]
	subs r0, r1, #1
	ldr r1, [r7, #0x18]
	ldrh r2, [r1]
	adds r0, r0, r2
	str r0, [r7, #0x14]
	ldr r0, [r7, #0x18]
	adds r1, r0, #4
	str r1, [r7, #0x18]
	b _0806FEB6
_0806FED4:
	ldr r0, [r7, #0x14]
	adds r1, r0, #1
	str r1, [r7, #0x14]
	ldr r0, [r7, #4]
	ldr r1, [r7, #8]
	cmp r0, r1
	bne _0806FEE8
	ldr r0, [r7, #0x14]
	str r0, [r7, #0x10]
	b _0806FEFC
_0806FEE8:
	ldr r0, [r7, #0x14]
	lsls r1, r0, #8
	adds r0, r1, #0
	ldr r1, [r7, #4]
	bl __divsi3
	ldr r1, [r7, #8]
	muls r0, r1, r0
	asrs r1, r0, #8
	str r1, [r7, #0x10]
_0806FEFC:
	ldr r0, [r7, #0x10]
	cmp r0, #0
	bne _0806FF0E
	ldr r0, [r7, #8]
	cmp r0, #0
	ble _0806FF0E
	ldr r0, [r7, #0x10]
	adds r1, r0, #1
	str r1, [r7, #0x10]
_0806FF0E:
	ldr r0, [r7, #0x28]
	str r0, [r7, #0x18]
_0806FF12:
	ldr r0, [r7, #0x18]
	ldrh r1, [r0]
	cmp r1, #0
	bne _0806FF1C
	b _0806FF50
_0806FF1C:
	adds r1, r7, #0
	adds r1, #0x10
	ldr r0, _0806FF4C @ =0x08D656D0
	ldr r2, [r7, #0xc]
	adds r3, r2, #0
	lsls r2, r3, #2
	adds r0, r0, r2
	ldr r2, [r0]
	ldr r0, [r7, #0x18]
	ldrh r3, [r0]
	ldr r4, [r7, #0x18]
	adds r0, r4, #2
	ldrh r4, [r0]
	str r4, [sp]
	ldr r0, [r7]
	bl sub_0806FE3C
	ldr r0, [r7]
	adds r1, r0, #2
	str r1, [r7]
	ldr r0, [r7, #0x18]
	adds r1, r0, #4
	str r1, [r7, #0x18]
	b _0806FF12
	.align 2, 0
_0806FF4C: .4byte 0x08D656D0
_0806FF50:
	add sp, #0x20
	pop {r4, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0806FF58
sub_0806FF58: @ 0x0806FF58
	push {r7, lr}
	mov r7, sp
	ldr r1, _0806FF6C @ =0x08D656F0
	adds r0, r1, #0
	bl sub_08004748
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806FF6C: .4byte 0x08D656F0

	thumb_func_start sub_0806FF70
sub_0806FF70: @ 0x0806FF70
	push {r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r1, _0806FFC8 @ =0x08D656F0
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	str r0, [r7, #0xc]
	ldr r1, [r7, #0xc]
	ldr r2, [r7]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x2e
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r1, [r7, #0xc]
	ldr r2, [r7, #4]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x2f
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #8]
	str r1, [r0, #0x30]
	add sp, #0x10
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806FFC8: .4byte 0x08D656F0

	thumb_func_start sub_0806FFCC
sub_0806FFCC: @ 0x0806FFCC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	bl SetOnHBlankA
	bl ClearBg0Bg1
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0806FFE8
sub_0806FFE8: @ 0x0806FFE8
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r4, _08070030 @ =0x083FAAE4
	movs r0, #1
	bl GetBgChrOffset
	ldr r2, _08070034 @ =0x06000020
	adds r1, r0, r2
	adds r0, r4, #0
	bl sub_08013688
	ldr r1, _08070038 @ =0x084009F0
	adds r0, r1, #0
	bl sub_0806FE08
	ldr r1, _0807003C @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	cmp r0, #1
	beq _08070040
	cmp r0, #2
	beq _0807004E
	b _080700B4
	.align 2, 0
_08070030: .4byte 0x083FAAE4
_08070034: .4byte 0x06000020
_08070038: .4byte 0x084009F0
_0807003C: .4byte 0x0203E0D4
_08070040:
	movs r2, #5
	rsbs r2, r2, #0
	ldr r0, [r7]
	movs r1, #0
	bl sub_08070390
	b _080700B4
_0807004E:
	movs r0, #0
	str r0, [r7, #4]
	ldr r1, _08070070 @ =0x0203E0D4
	ldr r0, [r1]
	ldr r1, _08070070 @ =0x0203E0D4
	ldr r2, [r1, #0x14]
	ldrb r0, [r0, #0x10]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	cmp r0, r1
	ble _08070074
	movs r0, #1
	str r0, [r7, #4]
	b _08070094
	.align 2, 0
_08070070: .4byte 0x0203E0D4
_08070074:
	ldr r0, _080700B0 @ =0x0203E0D4
	ldr r1, [r0]
	movs r0, #0xb
	ldrsb r0, [r1, r0]
	movs r1, #0xc0
	ands r0, r1
	ldr r1, _080700B0 @ =0x0203E0D4
	ldr r2, [r1, #0x14]
	movs r1, #0xb
	ldrsb r1, [r2, r1]
	movs r2, #0xc0
	ands r1, r2
	cmp r0, r1
	ble _08070094
	movs r0, #1
	str r0, [r7, #4]
_08070094:
	ldr r1, [r7, #4]
	movs r2, #0xa
	rsbs r2, r2, #0
	ldr r0, [r7]
	bl sub_08070390
	movs r0, #1
	ldr r2, [r7, #4]
	subs r1, r0, r2
	ldr r0, [r7]
	movs r2, #0
	bl sub_08070390
	b _080700B4
	.align 2, 0
_080700B0: .4byte 0x0203E0D4
_080700B4:
	bl sub_0807702C
	ldr r0, _080700F4 @ =0x0203E0D4
	ldrb r1, [r0, #0x11]
	adds r0, r1, #0
	lsls r1, r0, #3
	adds r0, r1, #0
	lsls r1, r0, #0x10
	lsrs r0, r1, #0x10
	ldr r1, _080700F4 @ =0x0203E0D4
	ldrb r2, [r1, #0x11]
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r1, r2, #0
	adds r2, r1, #0
	adds r2, #0x20
	adds r1, r2, #0
	lsls r2, r1, #0x10
	lsrs r1, r2, #0x10
	ldr r3, _080700F8 @ =gPal
	ldrh r2, [r3, #0x22]
	ldr r4, _080700F8 @ =gPal
	adds r3, r4, #0
	adds r4, #0x42
	ldrh r3, [r4]
	bl sub_08077420
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080700F4: .4byte 0x0203E0D4
_080700F8: .4byte gPal

	thumb_func_start sub_080700FC
sub_080700FC: @ 0x080700FC
	push {r4, r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	adds r0, r7, #0
	adds r0, #0xa
	movs r1, #0
	strb r1, [r0]
	movs r0, #0
	str r0, [r7, #4]
_08070110:
	ldr r1, _08070120 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	ldr r1, [r7, #4]
	cmp r1, r0
	blt _08070124
	b _08070224
	.align 2, 0
_08070120: .4byte 0x0203E0D4
_08070124:
	adds r0, r7, #0
	adds r0, #8
	ldr r1, _08070218 @ =0x0203E0D4
	ldr r2, [r7, #4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrh r2, [r1, #0xe]
	strh r2, [r0]
	adds r1, r7, #0
	adds r1, #8
	ldrh r0, [r1]
	ldr r1, _08070218 @ =0x0203E0D4
	ldr r2, [r7, #4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrb r2, [r1, #0xd]
	lsls r1, r2, #4
	cmp r0, r1
	ble _08070168
	adds r0, r7, #0
	adds r0, #8
	adds r1, r7, #0
	adds r1, #8
	ldrh r2, [r1]
	adds r1, r2, #0
	subs r1, #0x10
	adds r2, r1, #0
	strh r2, [r0]
_08070168:
	adds r1, r7, #0
	adds r1, #8
	ldrh r0, [r1]
	ldr r1, _08070218 @ =0x0203E0D4
	ldr r2, [r7, #4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrb r2, [r1, #0xd]
	lsls r1, r2, #4
	cmp r0, r1
	bge _080701C2
	adds r0, r7, #0
	adds r0, #8
	adds r1, r7, #0
	adds r1, #8
	ldrh r2, [r1]
	adds r1, r2, #4
	adds r2, r1, #0
	strh r2, [r0]
	adds r0, r7, #0
	adds r0, #8
	ldrh r1, [r0]
	movs r2, #0xf
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	bne _080701C2
	ldr r1, _0807021C @ =gPlaySt
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r0, [r1]
	lsls r1, r0, #0x1e
	lsrs r0, r1, #0x1f
	cmp r0, #0
	bne _080701C2
	ldr r1, _08070220 @ =0x00000395
	adds r0, r1, #0
	bl m4aSongNumStart
_080701C2:
	adds r0, r7, #0
	adds r0, #8
	ldr r1, _08070218 @ =0x0203E0D4
	ldr r2, [r7, #4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrh r0, [r0]
	ldrh r1, [r1, #0xe]
	cmp r0, r1
	beq _08070210
	ldr r0, _08070218 @ =0x0203E0D4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	adds r1, r7, #0
	adds r1, #8
	ldrh r2, [r0, #0xe]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrh r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0xe]
	ldr r1, [r7, #4]
	ldr r0, [r7]
	bl sub_08070258
	adds r0, r7, #0
	adds r0, #0xa
	movs r1, #1
	strb r1, [r0]
_08070210:
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _08070110
	.align 2, 0
_08070218: .4byte 0x0203E0D4
_0807021C: .4byte gPlaySt
_08070220: .4byte 0x00000395
_08070224:
	adds r0, r7, #0
	adds r0, #0xa
	movs r1, #0
	ldrsb r1, [r0, r1]
	cmp r1, #0
	bne _0807024C
	ldr r1, _08070254 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	cmp r0, #0
	beq _0807024C
	ldr r0, _08070254 @ =0x0203E0D4
	adds r1, r0, #0
	adds r0, #0x5f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
_0807024C:
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08070254: .4byte 0x0203E0D4

	thumb_func_start sub_08070258
sub_08070258: @ 0x08070258
	push {r4, r5, r7, lr}
	sub sp, #0xc
	add r7, sp, #4
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, _08070328 @ =0x0203E0D4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldrb r1, [r0, #0x11]
	adds r0, r1, #2
	lsls r1, r0, #5
	adds r0, r1, #2
	ldr r1, _08070328 @ =0x0203E0D4
	ldr r2, [r7, #4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrb r2, [r1, #0x10]
	adds r0, r0, r2
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, _0807032C @ =gBg0Tm
	adds r0, r0, r1
	ldr r1, _08070328 @ =0x0203E0D4
	ldr r2, [r7, #4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrh r2, [r1, #0xe]
	lsrs r1, r2, #4
	adds r3, r1, #0
	lsls r2, r3, #0x10
	lsrs r1, r2, #0x10
	ldr r2, _08070330 @ =0x00005020
	movs r3, #0
	str r3, [sp]
	movs r3, #3
	bl sub_0806FD1C
	ldr r0, _08070328 @ =0x0203E0D4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldrb r1, [r0, #0x11]
	adds r0, r1, #2
	lsls r1, r0, #5
	adds r0, r1, #3
	ldr r1, _08070328 @ =0x0203E0D4
	ldr r2, [r7, #4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrb r2, [r1, #0x10]
	adds r0, r0, r2
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, _0807032C @ =gBg0Tm
	adds r0, r0, r1
	ldr r1, _08070328 @ =0x0203E0D4
	ldr r2, [r7, #4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r3, r1, r2
	ldrb r1, [r3, #0xc]
	ldr r2, _08070328 @ =0x0203E0D4
	ldr r3, [r7, #4]
	adds r5, r3, #0
	lsls r4, r5, #2
	adds r4, r4, r3
	lsls r3, r4, #2
	adds r2, r2, r3
	ldrh r3, [r2, #0xe]
	lsrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	lsrs r2, r3, #0x10
	ldr r3, _08070334 @ =0x08D656B4
	str r3, [sp]
	movs r3, #0
	bl sub_0806FEA0
	movs r0, #1
	bl EnableBgSync
	add sp, #0xc
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08070328: .4byte 0x0203E0D4
_0807032C: .4byte gBg0Tm
_08070330: .4byte 0x00005020
_08070334: .4byte 0x08D656B4

	thumb_func_start sub_08070338
sub_08070338: @ 0x08070338
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	movs r1, #0xb
	ldrsb r1, [r0, r1]
	movs r2, #0xc0
	adds r0, r1, #0
	ands r0, r2
	cmp r0, #0x40
	beq _08070374
	cmp r0, #0x40
	bgt _0807035A
	cmp r0, #0
	beq _08070364
	b _08070384
_0807035A:
	cmp r0, #0x80
	beq _0807036C
	cmp r0, #0xc0
	beq _0807037C
	b _08070384
_08070364:
	ldr r0, _08070368 @ =0x083FAC48
	b _08070388
	.align 2, 0
_08070368: .4byte 0x083FAC48
_0807036C:
	ldr r0, _08070370 @ =0x083FAC68
	b _08070388
	.align 2, 0
_08070370: .4byte 0x083FAC68
_08070374:
	ldr r0, _08070378 @ =0x083FAC88
	b _08070388
	.align 2, 0
_08070378: .4byte 0x083FAC88
_0807037C:
	ldr r0, _08070380 @ =0x083FACA8
	b _08070388
	.align 2, 0
_08070380: .4byte 0x083FACA8
_08070384:
	movs r0, #0
	b _08070388
_08070388:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_08070390
sub_08070390: @ 0x08070390
	push {r4, r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r0, _08070520 @ =0x0203E0D4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x2e
	ldr r3, [r7, #8]
	adds r2, r3, #0
	ldrb r3, [r1]
	adds r1, r2, r3
	ldrb r2, [r0, #0x10]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0, #0x10]
	ldr r0, _08070520 @ =0x0203E0D4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x2f
	ldrb r2, [r0, #0x11]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0, #0x11]
	ldr r0, _08070520 @ =0x0203E0D4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_08070338
	ldr r2, [r7, #4]
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08070524 @ =0x08D656D8
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #2
	ldr r3, _08070520 @ =0x0203E0D4
	adds r2, r3, #0
	adds r3, #0x5e
	ldrb r2, [r3]
	adds r3, r2, #0
	lsls r2, r3, #3
	adds r1, r1, r2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r2, _08070528 @ =gBuf
	adds r0, r1, #0
	adds r1, r2, #0
	bl sub_08013688
	ldr r0, _08070520 @ =0x0203E0D4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldrb r1, [r0, #0x11]
	lsls r0, r1, #5
	ldr r1, _08070520 @ =0x0203E0D4
	ldr r2, [r7, #4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrb r2, [r1, #0x10]
	adds r0, r0, r2
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, _0807052C @ =gBg1Tm
	adds r0, r0, r1
	ldr r1, _08070528 @ =gBuf
	ldr r3, [r7, #4]
	adds r2, r3, #0
	adds r3, r2, #1
	adds r2, r3, #0
	lsls r3, r2, #0xc
	adds r2, r3, #0
	movs r3, #1
	orrs r2, r3
	adds r4, r2, #0
	lsls r3, r4, #0x10
	lsrs r2, r3, #0x10
	bl TmApplyTsa_thm
	movs r0, #2
	bl EnableBgSync
	ldr r0, _08070520 @ =0x0203E0D4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldrb r1, [r0, #0x11]
	lsls r2, r1, #5
	adds r0, r2, #1
	ldr r1, _08070520 @ =0x0203E0D4
	ldr r2, [r7, #4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrb r2, [r1, #0x10]
	adds r0, r0, r2
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, _08070530 @ =gBg0Tm
	adds r4, r0, r1
	ldr r0, _08070520 @ =0x0203E0D4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, [r1]
	ldrh r1, [r0]
	adds r0, r1, #0
	bl DecodeMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0
	movs r2, #8
	bl sub_08014AB0
	movs r0, #1
	bl EnableBgSync
	ldr r0, _08070520 @ =0x0203E0D4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, _08070520 @ =0x0203E0D4
	ldr r2, [r7, #4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrb r3, [r1, #0xd]
	adds r2, r3, #0
	lsls r1, r2, #4
	ldrh r2, [r0, #0xe]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0xe]
	ldr r1, [r7, #4]
	ldr r0, [r7]
	bl sub_08070258
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08070520: .4byte 0x0203E0D4
_08070524: .4byte 0x08D656D8
_08070528: .4byte gBuf
_0807052C: .4byte gBg1Tm
_08070530: .4byte gBg0Tm

	thumb_func_start sub_08070534
sub_08070534: @ 0x08070534
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldrh r1, [r0, #0x2a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x2a]
	ldr r0, [r7]
	bl sub_08070620
	ldr r0, _0807061C @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _0807061C @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xbf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _0807061C @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _0807061C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0807061C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0807061C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #4
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0807061C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0807061C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0807061C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0xfe
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0807061C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0xfd
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0807061C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #4
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0807061C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0807061C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807061C: .4byte gDispIo

	thumb_func_start sub_08070620
sub_08070620: @ 0x08070620
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08070700 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2d
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08070700 @ =gDispIo
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x2f
	ldrb r1, [r2]
	adds r2, r1, #2
	adds r3, r2, #0
	lsls r1, r3, #3
	ldr r2, [r7]
	ldrh r3, [r2, #0x2a]
	adds r2, r3, #0
	adds r3, r1, #0
	subs r1, r3, r2
	adds r2, r0, #0
	adds r0, #0x31
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, _08070700 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xf0
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08070700 @ =gDispIo
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x2f
	ldrb r1, [r2]
	adds r2, r1, #2
	adds r3, r2, #0
	lsls r1, r3, #3
	ldr r2, [r7]
	ldrh r3, [r2, #0x2a]
	adds r2, r3, #0
	adds r3, r1, #0
	adds r1, r2, r3
	adds r2, r0, #0
	adds r0, #0x30
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, [r7]
	ldr r1, [r7]
	ldrh r2, [r1, #0x2a]
	adds r1, r2, #2
	ldrh r2, [r0, #0x2a]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x2a]
	ldr r0, [r7]
	movs r2, #0x2a
	ldrsh r1, [r0, r2]
	cmp r1, #0x10
	ble _080706F8
	ldr r0, _08070700 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08070700 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xbf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08070700 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, [r7]
	bl Proc_Break
_080706F8:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08070700: .4byte gDispIo

	thumb_func_start sub_08070704
sub_08070704: @ 0x08070704
	push {r7, lr}
	sub sp, #0x10
	add r7, sp, #4
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r1, [r7, #4]
	adds r0, r1, #1
	lsls r1, r0, #5
	adds r0, r1, #2
	ldr r1, [r7]
	adds r0, r0, r1
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, _08070764 @ =gBg0Tm
	adds r0, r0, r1
	ldr r1, [r7, #8]
	ldr r2, _08070768 @ =0x0000521F
	ldr r3, _0807076C @ =0x00005229
	str r3, [sp]
	movs r3, #2
	bl sub_0806FD1C
	ldr r1, [r7, #4]
	adds r0, r1, #1
	lsls r1, r0, #5
	adds r0, r1, #3
	ldr r1, [r7]
	adds r0, r0, r1
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, _08070764 @ =gBg0Tm
	adds r0, r0, r1
	ldr r2, [r7, #8]
	ldr r1, _08070770 @ =0x08D65728
	str r1, [sp]
	movs r1, #0x63
	movs r3, #0
	bl sub_0806FEA0
	movs r0, #1
	bl EnableBgSync
	add sp, #0x10
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08070764: .4byte gBg0Tm
_08070768: .4byte 0x0000521F
_0807076C: .4byte 0x00005229
_08070770: .4byte 0x08D65728

	thumb_func_start sub_08070774
sub_08070774: @ 0x08070774
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r4, _08070804 @ =0x081DF464
	movs r0, #0
	bl GetBgChrOffset
	ldr r2, _08070808 @ =0x06004000
	adds r1, r0, r2
	adds r0, r4, #0
	movs r2, #0xe0
	bl RegisterDataMove
	ldr r4, _0807080C @ =0x081DF764
	movs r0, #0
	bl GetBgChrOffset
	ldr r2, _08070810 @ =0x060040E0
	adds r1, r0, r2
	movs r2, #0xc0
	lsls r2, r2, #2
	adds r0, r4, #0
	bl RegisterDataMove
	ldr r4, _08070814 @ =0x081DFA64
	movs r0, #0
	bl GetBgChrOffset
	ldr r2, _08070818 @ =0x060043E0
	adds r1, r0, r2
	movs r2, #0xb0
	lsls r2, r2, #1
	adds r0, r4, #0
	bl RegisterDataMove
	ldr r1, _0807081C @ =0x081DFC30
	adds r0, r1, #0
	movs r1, #0xa0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08070820 @ =0x02022E6C
	ldr r1, _08070824 @ =0x083FA9B8
	movs r2, #0xa4
	lsls r2, r2, #7
	bl TmApplyTsa_thm
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	movs r0, #0
	ldrsh r2, [r1, r0]
	movs r0, #6
	movs r1, #8
	bl sub_08070704
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08070804: .4byte 0x081DF464
_08070808: .4byte 0x06004000
_0807080C: .4byte 0x081DF764
_08070810: .4byte 0x060040E0
_08070814: .4byte 0x081DFA64
_08070818: .4byte 0x060043E0
_0807081C: .4byte 0x081DFC30
_08070820: .4byte 0x02022E6C
_08070824: .4byte 0x083FA9B8

	thumb_func_start sub_08070828
sub_08070828: @ 0x08070828
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _08070854 @ =gPlaySt
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r0, [r1]
	lsls r1, r0, #0x1e
	lsrs r0, r1, #0x1f
	cmp r0, #0
	bne _0807084A
	movs r1, #0xe5
	lsls r1, r1, #2
	adds r0, r1, #0
	bl m4aSongNumStart
_0807084A:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08070854: .4byte gPlaySt

	thumb_func_start sub_08070858
sub_08070858: @ 0x08070858
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x64
	ldrh r3, [r2]
	adds r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x64
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0x63
	ble _080708A4
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
_080708A4:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	movs r0, #0
	ldrsh r2, [r1, r0]
	movs r0, #6
	movs r1, #8
	bl sub_08070704
	ldr r1, [r7]
	adds r0, r1, #0
	adds r4, r1, #0
	adds r4, #0x64
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x66
	movs r0, #0
	ldrsh r2, [r1, r0]
	adds r0, r2, #0
	movs r1, #0x64
	bl __modsi3
	adds r1, r0, #0
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r2, r1, #0x10
	asrs r1, r2, #0x10
	cmp r0, r1
	bne _080708EE
	ldr r0, [r7]
	bl Proc_Break
	movs r1, #0xe5
	lsls r1, r1, #2
	adds r0, r1, #0
	bl m4aSongNumStop
_080708EE:
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080708F8
sub_080708F8: @ 0x080708F8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x6a
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	bl sub_080709E8
	ldr r0, _080709E4 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _080709E4 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xbf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _080709E4 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _080709E4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080709E4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080709E4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #4
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080709E4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080709E4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080709E4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0xfe
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080709E4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0xfd
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080709E4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #4
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080709E4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080709E4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080709E4: .4byte gDispIo

	thumb_func_start sub_080709E8
sub_080709E8: @ 0x080709E8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08070AC0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2d
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08070AC0 @ =gDispIo
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x6a
	ldrh r3, [r2]
	adds r1, r3, #0
	movs r2, #0x4c
	subs r1, r2, r1
	adds r2, r0, #0
	adds r0, #0x31
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, _08070AC0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xf0
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08070AC0 @ =gDispIo
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x6a
	ldrh r1, [r2]
	adds r2, r1, #0
	adds r1, r2, #0
	adds r1, #0x4c
	adds r2, r0, #0
	adds r0, #0x30
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x6a
	ldrh r3, [r2]
	adds r1, r3, #2
	adds r2, r0, #0
	adds r0, #0x6a
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x6a
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0xc
	ble _08070AB8
	ldr r0, _08070AC0 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08070AC0 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xbf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08070AC0 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, [r7]
	bl Proc_Break
_08070AB8:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08070AC0: .4byte gDispIo

	thumb_func_start sub_08070AC4
sub_08070AC4: @ 0x08070AC4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x66
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0x63
	bgt _08070ADC
	b _08070AEE
_08070ADC:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x68
	movs r0, #0
	ldrsh r2, [r1, r0]
	adds r0, r2, #0
	ldr r1, [r7]
	bl sub_08075098
_08070AEE:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08070AF8
sub_08070AF8: @ 0x08070AF8
	push {r7, lr}
	mov r7, sp
	ldr r1, _08070B0C @ =0x08D6587C
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08070B0C: .4byte 0x08D6587C

	thumb_func_start sub_08070B10
sub_08070B10: @ 0x08070B10
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x30
	add r7, sp, #8
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r1, _08070B9C @ =0x08D65878
	ldr r0, [r1]
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r0, r0, r1
	movs r2, #8
	ldrsh r1, [r0, r2]
	adds r0, r1, #0
	bl GetCharacterData
	str r0, [r7, #0xc]
	ldr r1, _08070B9C @ =0x08D65878
	ldr r0, [r1]
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r0, r0, r1
	movs r4, #0xe
	ldrsh r1, [r0, r4]
	adds r0, r1, #0
	bl GetClassData
	str r0, [r7, #0x10]
	ldr r1, _08070B9C @ =0x08D65878
	ldr r0, [r1]
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r0, r0, r1
	movs r5, #8
	ldrsh r1, [r0, r5]
	str r1, [r7, #0x14]
	ldr r1, _08070B9C @ =0x08D65878
	ldr r0, [r1]
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r0, r0, r1
	movs r6, #0xe
	ldrsh r1, [r0, r6]
	str r1, [r7, #0x18]
	ldr r1, _08070B9C @ =0x08D65878
	ldr r0, [r1]
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r0, r0, r1
	movs r2, #0x10
	ldrsh r1, [r0, r2]
	str r1, [r7, #0x1c]
	ldr r0, [r7, #4]
	cmp r0, #9
	bls _08070B8E
	b _08070F64
_08070B8E:
	ldr r0, [r7, #4]
	adds r1, r0, #0
	lsls r0, r1, #2
	ldr r1, _08070BA0 @ =_08070BA4
	adds r0, r0, r1
	ldr r1, [r0]
	mov pc, r1
	.align 2, 0
_08070B9C: .4byte 0x08D65878
_08070BA0: .4byte _08070BA4
_08070BA4: @ jump table
	.4byte _08070BCC @ case 0
	.4byte _08070C54 @ case 1
	.4byte _08070CD0 @ case 2
	.4byte _08070D4C @ case 3
	.4byte _08070DD4 @ case 4
	.4byte _08070E68 @ case 5
	.4byte _08070E68 @ case 6
	.4byte _08070E68 @ case 7
	.4byte _08070E68 @ case 8
	.4byte _08070E68 @ case 9
_08070BCC:
	ldr r0, _08070C4C @ =0x08D65878
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r1, [r0]
	adds r0, r2, r1
	adds r1, r0, #0
	adds r1, #0x14
	adds r0, r1, #0
	bl ClearText
	ldr r0, _08070C4C @ =0x08D65878
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r0, [r0]
	adds r1, r2, r0
	adds r0, r1, #0
	adds r0, #0x14
	ldr r2, [r7, #8]
	ldr r3, [r7, #0x14]
	movs r1, #0x10
	bl Text_InsertDrawNumberOrBlank
	ldr r0, [r7, #0xc]
	ldrh r1, [r0]
	adds r0, r1, #0
	bl DecodeMsg
	ldr r1, _08070C4C @ =0x08D65878
	ldr r2, [r7]
	movs r3, #0x64
	muls r2, r3, r2
	adds r3, r2, #0
	adds r3, #8
	ldr r1, [r1]
	adds r2, r3, r1
	adds r1, r2, #0
	adds r1, #0x14
	ldr r2, [r7]
	adds r4, r2, #0
	lsls r3, r4, #1
	adds r3, r3, r2
	lsls r2, r3, #3
	ldr r3, _08070C50 @ =0x02022C6C
	adds r2, r2, r3
	ldr r3, [r7, #8]
	movs r4, #0
	str r4, [sp]
	str r0, [sp, #4]
	adds r0, r1, #0
	adds r1, r2, #0
	adds r2, r3, #0
	movs r3, #0x18
	bl PutDrawText
	movs r0, #1
	bl EnableBgSync
	b _08070F64
	.align 2, 0
_08070C4C: .4byte 0x08D65878
_08070C50: .4byte 0x02022C6C
_08070C54:
	ldr r0, _08070CC8 @ =0x08D65878
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r1, [r0]
	adds r0, r2, r1
	adds r1, r0, #0
	adds r1, #0x1c
	adds r0, r1, #0
	bl ClearText
	ldr r0, _08070CC8 @ =0x08D65878
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r0, [r0]
	adds r1, r2, r0
	adds r0, r1, #0
	adds r0, #0x1c
	ldr r2, [r7, #8]
	ldr r3, _08070CC8 @ =0x08D65878
	ldr r1, [r3]
	ldr r3, [r7]
	movs r4, #0x64
	muls r3, r4, r3
	adds r1, r1, r3
	movs r4, #0xa
	ldrsh r3, [r1, r4]
	movs r1, #8
	bl Text_InsertDrawNumberOrBlank
	ldr r0, _08070CC8 @ =0x08D65878
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r0, [r0]
	adds r1, r2, r0
	adds r0, r1, #0
	adds r0, #0x1c
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #1
	adds r2, r2, r1
	lsls r1, r2, #3
	ldr r2, _08070CCC @ =0x02022CEE
	adds r1, r1, r2
	bl PutText
	movs r0, #1
	bl EnableBgSync
	b _08070F64
	.align 2, 0
_08070CC8: .4byte 0x08D65878
_08070CCC: .4byte 0x02022CEE
_08070CD0:
	ldr r0, _08070D44 @ =0x08D65878
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r1, [r0]
	adds r0, r2, r1
	adds r1, r0, #0
	adds r1, #0x24
	adds r0, r1, #0
	bl ClearText
	ldr r0, _08070D44 @ =0x08D65878
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r0, [r0]
	adds r1, r2, r0
	adds r0, r1, #0
	adds r0, #0x24
	ldr r2, [r7, #8]
	ldr r3, _08070D44 @ =0x08D65878
	ldr r1, [r3]
	ldr r3, [r7]
	movs r4, #0x64
	muls r3, r4, r3
	adds r1, r1, r3
	movs r5, #0xc
	ldrsh r3, [r1, r5]
	movs r1, #8
	bl Text_InsertDrawNumberOrBlank
	ldr r0, _08070D44 @ =0x08D65878
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r0, [r0]
	adds r1, r2, r0
	adds r0, r1, #0
	adds r0, #0x24
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #1
	adds r2, r2, r1
	lsls r1, r2, #3
	ldr r2, _08070D48 @ =0x02022CF4
	adds r1, r1, r2
	bl PutText
	movs r0, #1
	bl EnableBgSync
	b _08070F64
	.align 2, 0
_08070D44: .4byte 0x08D65878
_08070D48: .4byte 0x02022CF4
_08070D4C:
	ldr r0, _08070DCC @ =0x08D65878
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r1, [r0]
	adds r0, r2, r1
	adds r1, r0, #0
	adds r1, #0x2c
	adds r0, r1, #0
	bl ClearText
	ldr r0, _08070DCC @ =0x08D65878
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r0, [r0]
	adds r1, r2, r0
	adds r0, r1, #0
	adds r0, #0x2c
	ldr r2, [r7, #8]
	ldr r3, [r7, #0x18]
	movs r1, #0x10
	bl Text_InsertDrawNumberOrBlank
	ldr r0, [r7, #0x10]
	ldrh r1, [r0]
	adds r0, r1, #0
	bl DecodeMsg
	ldr r1, _08070DCC @ =0x08D65878
	ldr r2, [r7]
	movs r3, #0x64
	muls r2, r3, r2
	adds r3, r2, #0
	adds r3, #8
	ldr r1, [r1]
	adds r2, r3, r1
	adds r1, r2, #0
	adds r1, #0x2c
	ldr r2, [r7]
	adds r4, r2, #0
	lsls r3, r4, #1
	adds r3, r3, r2
	lsls r2, r3, #3
	ldr r3, _08070DD0 @ =0x02022D6C
	adds r2, r2, r3
	ldr r3, [r7, #8]
	movs r4, #0
	str r4, [sp]
	str r0, [sp, #4]
	adds r0, r1, #0
	adds r1, r2, #0
	adds r2, r3, #0
	movs r3, #0x18
	bl PutDrawText
	movs r0, #1
	bl EnableBgSync
	b _08070F64
	.align 2, 0
_08070DCC: .4byte 0x08D65878
_08070DD0: .4byte 0x02022D6C
_08070DD4:
	ldr r0, _08070E60 @ =0x08D65878
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r1, [r0]
	adds r0, r2, r1
	adds r1, r0, #0
	adds r1, #0x34
	adds r0, r1, #0
	bl ClearText
	ldr r0, _08070E60 @ =0x08D65878
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r0, [r0]
	adds r1, r2, r0
	adds r0, r1, #0
	adds r0, #0x34
	ldr r2, [r7, #8]
	ldr r3, [r7, #0x1c]
	movs r1, #0x10
	bl Text_InsertDrawNumberOrBlank
	ldr r1, _08070E60 @ =0x08D65878
	ldr r0, [r1]
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r0, r0, r1
	movs r6, #0x10
	ldrsh r1, [r0, r6]
	adds r0, r1, #0
	bl GetItemName
	ldr r1, _08070E60 @ =0x08D65878
	ldr r2, [r7]
	movs r3, #0x64
	muls r2, r3, r2
	adds r3, r2, #0
	adds r3, #8
	ldr r1, [r1]
	adds r2, r3, r1
	adds r1, r2, #0
	adds r1, #0x34
	ldr r2, [r7]
	adds r4, r2, #0
	lsls r3, r4, #1
	adds r3, r3, r2
	lsls r2, r3, #3
	ldr r3, _08070E64 @ =0x02022DEC
	adds r2, r2, r3
	ldr r3, [r7, #8]
	movs r4, #0
	str r4, [sp]
	str r0, [sp, #4]
	adds r0, r1, #0
	adds r1, r2, #0
	adds r2, r3, #0
	movs r3, #0x18
	bl PutDrawText
	movs r0, #1
	bl EnableBgSync
	b _08070F64
	.align 2, 0
_08070E60: .4byte 0x08D65878
_08070E64: .4byte 0x02022DEC
_08070E68:
	ldr r0, _08070F58 @ =0x08D65878
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r1, [r0]
	adds r0, r2, r1
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #3
	adds r2, r1, #0
	adds r2, #0x14
	adds r1, r0, r2
	adds r0, r1, #0
	bl ClearText
	ldr r0, _08070F58 @ =0x08D65878
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r1, [r0]
	adds r0, r2, r1
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #3
	adds r2, r1, #0
	adds r2, #0x14
	adds r0, r0, r2
	ldr r2, [r7, #8]
	ldr r3, _08070F58 @ =0x08D65878
	ldr r1, [r3]
	ldr r3, [r7, #4]
	adds r4, r3, #0
	lsls r3, r4, #1
	ldr r4, [r7]
	movs r5, #0x64
	muls r4, r5, r4
	adds r3, r3, r4
	adds r1, #8
	adds r4, r1, r3
	movs r1, #0
	ldrsh r3, [r4, r1]
	movs r1, #8
	bl Text_InsertDrawNumberOrBlank
	ldr r0, _08070F58 @ =0x08D65878
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r1, [r0]
	adds r0, r2, r1
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #3
	adds r2, r1, #0
	adds r2, #0x14
	adds r0, r0, r2
	ldr r2, [r7, #4]
	subs r1, r2, #5
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r2, r1, #0
	adds r2, #8
	lsls r3, r2, #5
	adds r1, r3, #7
	ldr r2, [r7]
	adds r4, r2, #0
	lsls r3, r4, #1
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r2, _08070F5C @ =gBg0Tm
	adds r1, r1, r2
	ldr r2, [r7, #8]
	movs r3, #0
	str r3, [sp]
	ldr r3, _08070F60 @ =0x08D657D8
	ldr r5, _08070F58 @ =0x08D65878
	ldr r4, [r5]
	ldr r5, [r7, #4]
	adds r6, r5, #0
	lsls r5, r6, #1
	str r5, [r7, #0x20]
	ldr r6, [r7]
	str r6, [r7, #0x24]
	movs r5, #0x64
	mov r8, r5
	ldr r5, [r7, #0x24]
	mov r6, r8
	muls r6, r5, r6
	str r6, [r7, #0x24]
	ldr r6, [r7, #0x20]
	ldr r5, [r7, #0x24]
	adds r6, r6, r5
	str r6, [r7, #0x20]
	adds r4, #8
	ldr r6, [r7, #0x20]
	adds r5, r4, r6
	movs r6, #0
	ldrsh r4, [r5, r6]
	adds r5, r4, #0
	lsls r4, r5, #2
	adds r3, r3, r4
	ldr r4, [r3]
	str r4, [sp, #4]
	movs r3, #0x10
	bl PutDrawText
	movs r0, #1
	bl EnableBgSync
	b _08070F64
	.align 2, 0
_08070F58: .4byte 0x08D65878
_08070F5C: .4byte gBg0Tm
_08070F60: .4byte 0x08D657D8
_08070F64:
	add sp, #0x30
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08070F70
sub_08070F70: @ 0x08070F70
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _08071164 @ =0x08C025F8
	adds r0, r1, #0
	bl sub_08004748
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x66
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r1, _08071168 @ =0x08D65878
	ldr r0, [r1]
	ldrh r1, [r0, #0xe]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0xe]
	ldr r1, _08071168 @ =0x08D65878
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #8]
	ldr r1, _08071168 @ =0x08D65878
	ldr r0, [r1]
	ldrh r1, [r0, #0x10]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x10]
	ldr r1, _08071168 @ =0x08D65878
	ldr r0, [r1]
	ldrh r1, [r0, #0xa]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #4
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0xa]
	ldr r1, _08071168 @ =0x08D65878
	ldr r0, [r1]
	ldrh r1, [r0, #0xc]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #8
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0xc]
	ldr r0, _08071168 @ =0x08D65878
	ldr r2, [r0]
	adds r1, r2, #0
	adds r0, r2, #0
	adds r0, #0x72
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08071168 @ =0x08D65878
	ldr r2, [r0]
	adds r1, r2, #0
	adds r0, r2, #0
	adds r0, #0x6c
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08071168 @ =0x08D65878
	ldr r2, [r0]
	adds r1, r2, #0
	adds r0, r2, #0
	adds r0, #0x74
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08071168 @ =0x08D65878
	ldr r2, [r0]
	adds r1, r2, #0
	adds r0, r2, #0
	adds r0, #0x6e
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #5
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08071168 @ =0x08D65878
	ldr r2, [r0]
	adds r1, r2, #0
	adds r0, r2, #0
	adds r0, #0x70
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #8
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r1, _08071168 @ =0x08D65878
	ldr r0, [r1]
	ldrh r1, [r0, #0x12]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x12]
	ldr r1, _08071168 @ =0x08D65878
	ldr r0, [r1]
	ldrh r1, [r0, #0x14]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #5
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x14]
	ldr r1, _08071168 @ =0x08D65878
	ldr r0, [r1]
	ldrh r1, [r0, #0x16]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x16]
	ldr r1, _08071168 @ =0x08D65878
	ldr r0, [r1]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r1, _08071168 @ =0x08D65878
	ldr r0, [r1]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	ldr r0, _08071168 @ =0x08D65878
	ldr r2, [r0]
	adds r1, r2, #0
	adds r0, r2, #0
	adds r0, #0x76
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08071168 @ =0x08D65878
	ldr r2, [r0]
	adds r1, r2, #0
	adds r0, r2, #0
	adds r0, #0x78
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08071168 @ =0x08D65878
	ldr r2, [r0]
	adds r1, r2, #0
	adds r0, r2, #0
	adds r0, #0x7a
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08071168 @ =0x08D65878
	ldr r2, [r0]
	adds r1, r2, #0
	adds r0, r2, #0
	adds r0, #0x7c
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08071168 @ =0x08D65878
	ldr r2, [r0]
	adds r1, r2, #0
	adds r0, r2, #0
	adds r0, #0x7e
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08071164: .4byte 0x08C025F8
_08071168: .4byte 0x08D65878

	thumb_func_start sub_0807116C
sub_0807116C: @ 0x0807116C
	push {r7, lr}
	sub sp, #0x10
	add r7, sp, #4
	str r0, [r7]
	bl MU_EndAll
	bl ResetText
	ldr r0, _08071260 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x80
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08071260 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #8
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08071260 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #8
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08071260 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08071264 @ =0x030027CC
	ldr r1, _08071264 @ =0x030027CC
	ldrh r2, [r1]
	ldr r3, _08071268 @ =0x0000FFE0
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08071264 @ =0x030027CC
	ldr r1, _08071264 @ =0x030027CC
	ldrh r2, [r1]
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08071264 @ =0x030027CC
	ldr r1, _08071264 @ =0x030027CC
	ldrh r2, [r1]
	ldr r3, _0807126C @ =0x0000E0FF
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08071264 @ =0x030027CC
	ldr r1, _08071264 @ =0x030027CC
	ldrh r2, [r1]
	movs r3, #0xe0
	lsls r3, r3, #5
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08071260 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08071260 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xbf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08071260 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1d
	movs r3, #0x13
	bl sub_0804A4CC
	movs r0, #0
	str r0, [r7, #4]
_0807124E:
	ldr r0, _08071270 @ =0x08D65850
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	cmp r1, #0
	bne _08071274
	b _080712A8
	.align 2, 0
_08071260: .4byte gDispIo
_08071264: .4byte 0x030027CC
_08071268: .4byte 0x0000FFE0
_0807126C: .4byte 0x0000E0FF
_08071270: .4byte 0x08D65850
_08071274:
	ldr r0, [r7, #4]
	adds r1, r0, #0
	lsls r0, r1, #1
	lsls r1, r0, #5
	adds r0, r1, #0
	lsls r1, r0, #1
	ldr r2, _080712A0 @ =0x02022C62
	adds r0, r1, r2
	ldr r1, _080712A4 @ =0x08D65850
	ldr r2, [r7, #4]
	adds r3, r2, #0
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0
	bl sub_08014B14
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _0807124E
	.align 2, 0
_080712A0: .4byte 0x02022C62
_080712A4: .4byte 0x08D65850
_080712A8:
	movs r0, #0
	str r0, [r7, #4]
_080712AC:
	ldr r0, [r7, #4]
	cmp r0, #9
	ble _080712B4
	b _0807133E
_080712B4:
	movs r0, #0
	str r0, [r7, #8]
_080712B8:
	ldr r0, [r7, #8]
	cmp r0, #1
	ble _080712C0
	b _08071336
_080712C0:
	ldr r0, _0807131C @ =0x08D65878
	ldr r1, [r7, #8]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r1, [r0]
	adds r0, r2, r1
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #3
	adds r2, r1, #0
	adds r2, #0x14
	adds r0, r0, r2
	ldr r1, _08071320 @ =0x08D65800
	ldr r2, [r7, #4]
	adds r3, r2, #0
	lsls r2, r3, #3
	adds r1, r1, r2
	ldrb r2, [r1]
	adds r1, r2, #0
	bl sub_0800536C
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	movs r2, #0
	ldrsh r0, [r1, r2]
	ldr r1, [r7, #8]
	cmp r1, r0
	bne _08071324
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x66
	movs r2, #0
	ldrsh r0, [r1, r2]
	ldr r1, [r7, #4]
	cmp r1, r0
	bne _08071324
	ldr r0, [r7, #8]
	ldr r1, [r7, #4]
	movs r2, #0
	bl sub_08070B10
	b _0807132E
	.align 2, 0
_0807131C: .4byte 0x08D65878
_08071320: .4byte 0x08D65800
_08071324:
	ldr r0, [r7, #8]
	ldr r1, [r7, #4]
	movs r2, #1
	bl sub_08070B10
_0807132E:
	ldr r0, [r7, #8]
	adds r1, r0, #1
	str r1, [r7, #8]
	b _080712B8
_08071336:
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _080712AC
_0807133E:
	movs r0, #1
	bl EnableBgSync
	add sp, #0x10
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0807134C
sub_0807134C: @ 0x0807134C
	push {r4, r5, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	movs r2, #0
	ldrsh r0, [r1, r2]
	str r0, [r7, #4]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x66
	movs r3, #0
	ldrsh r0, [r1, r3]
	str r0, [r7, #8]
	ldr r1, _08071390 @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #8
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _0807139A
	bl sub_08071960
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	bne _08071394
	b _08071860
	.align 2, 0
_08071390: .4byte gpKeySt
_08071394:
	ldr r0, [r7]
	bl Proc_Break
_0807139A:
	ldr r1, _080713B8 @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #4]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080713BC
	movs r0, #0xa
	str r0, [r7, #0xc]
	b _080713C0
	.align 2, 0
_080713B8: .4byte gpKeySt
_080713BC:
	movs r0, #1
	str r0, [r7, #0xc]
_080713C0:
	ldr r1, _080714D8 @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	movs r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	bne _080713D8
	b _08071534
_080713D8:
	ldr r1, _080714DC @ =0x08D65878
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x66
	movs r4, #0
	ldrsh r1, [r2, r4]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x64
	movs r5, #0
	ldrsh r2, [r3, r5]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	adds r2, r0, #0
	adds r2, #8
	adds r0, r2, r1
	ldr r2, _080714DC @ =0x08D65878
	ldr r1, [r2]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	movs r4, #0
	ldrsh r2, [r3, r4]
	adds r3, r2, #0
	lsls r2, r3, #1
	ldr r4, [r7]
	adds r3, r4, #0
	adds r4, #0x64
	movs r5, #0
	ldrsh r3, [r4, r5]
	movs r4, #0x64
	muls r3, r4, r3
	adds r2, r2, r3
	adds r3, r1, #0
	adds r3, #8
	adds r1, r3, r2
	ldr r3, [r7, #0xc]
	adds r2, r3, #0
	ldrh r3, [r1]
	adds r1, r2, r3
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, _080714DC @ =0x08D65878
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x66
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x64
	movs r4, #0
	ldrsh r2, [r3, r4]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	adds r0, #8
	adds r1, r0, r1
	movs r5, #0
	ldrsh r0, [r1, r5]
	ldr r1, _080714E0 @ =0x08D65800
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	movs r4, #0
	ldrsh r2, [r3, r4]
	adds r3, r2, #0
	lsls r2, r3, #3
	adds r1, r1, r2
	ldrb r2, [r1, #6]
	cmp r0, r2
	blt _08071534
	ldr r0, [r7, #0xc]
	cmp r0, #1
	bne _080714E4
	ldr r1, _080714DC @ =0x08D65878
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x66
	movs r5, #0
	ldrsh r1, [r2, r5]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x64
	movs r4, #0
	ldrsh r2, [r3, r4]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	adds r2, r0, #0
	adds r2, #8
	adds r0, r2, r1
	ldr r1, _080714E0 @ =0x08D65800
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	movs r5, #0
	ldrsh r2, [r3, r5]
	adds r3, r2, #0
	lsls r2, r3, #3
	adds r1, r1, r2
	ldrb r2, [r1, #5]
	adds r1, r2, #0
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	b _08071534
	.align 2, 0
_080714D8: .4byte gpKeySt
_080714DC: .4byte 0x08D65878
_080714E0: .4byte 0x08D65800
_080714E4:
	ldr r1, _08071650 @ =0x08D65878
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x66
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x64
	movs r4, #0
	ldrsh r2, [r3, r4]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	adds r2, r0, #0
	adds r2, #8
	adds r0, r2, r1
	ldr r1, _08071654 @ =0x08D65800
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	movs r5, #0
	ldrsh r2, [r3, r5]
	adds r3, r2, #0
	lsls r2, r3, #3
	adds r1, r1, r2
	ldrb r3, [r1, #6]
	adds r2, r3, #0
	subs r1, r2, #1
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
_08071534:
	ldr r1, _08071658 @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	movs r2, #2
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	bne _0807154C
	b _080716A8
_0807154C:
	ldr r1, _08071650 @ =0x08D65878
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x66
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x64
	movs r4, #0
	ldrsh r2, [r3, r4]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	adds r2, r0, #0
	adds r2, #8
	adds r0, r2, r1
	ldr r2, _08071650 @ =0x08D65878
	ldr r1, [r2]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	movs r5, #0
	ldrsh r2, [r3, r5]
	adds r3, r2, #0
	lsls r2, r3, #1
	ldr r4, [r7]
	adds r3, r4, #0
	adds r4, #0x64
	movs r5, #0
	ldrsh r3, [r4, r5]
	movs r4, #0x64
	muls r3, r4, r3
	adds r2, r2, r3
	adds r3, r1, #0
	adds r3, #8
	adds r1, r3, r2
	ldr r3, [r7, #0xc]
	adds r2, r3, #0
	ldrh r3, [r1]
	subs r1, r3, r2
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, _08071650 @ =0x08D65878
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x66
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x64
	movs r4, #0
	ldrsh r2, [r3, r4]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	adds r0, #8
	adds r1, r0, r1
	movs r5, #0
	ldrsh r0, [r1, r5]
	ldr r1, _08071654 @ =0x08D65800
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	movs r4, #0
	ldrsh r2, [r3, r4]
	adds r3, r2, #0
	lsls r2, r3, #3
	adds r1, r1, r2
	ldrb r2, [r1, #5]
	cmp r0, r2
	bge _080716A8
	ldr r0, [r7, #0xc]
	cmp r0, #1
	bne _0807165C
	ldr r1, _08071650 @ =0x08D65878
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x66
	movs r5, #0
	ldrsh r1, [r2, r5]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x64
	movs r4, #0
	ldrsh r2, [r3, r4]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	adds r2, r0, #0
	adds r2, #8
	adds r0, r2, r1
	ldr r1, _08071654 @ =0x08D65800
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	movs r5, #0
	ldrsh r2, [r3, r5]
	adds r3, r2, #0
	lsls r2, r3, #3
	adds r1, r1, r2
	ldrb r3, [r1, #6]
	adds r2, r3, #0
	subs r1, r2, #1
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	b _080716A8
	.align 2, 0
_08071650: .4byte 0x08D65878
_08071654: .4byte 0x08D65800
_08071658: .4byte gpKeySt
_0807165C:
	ldr r1, _08071868 @ =0x08D65878
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x66
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x64
	movs r4, #0
	ldrsh r2, [r3, r4]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	adds r2, r0, #0
	adds r2, #8
	adds r0, r2, r1
	ldr r1, _0807186C @ =0x08D65800
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	movs r5, #0
	ldrsh r2, [r3, r5]
	adds r3, r2, #0
	lsls r2, r3, #3
	adds r1, r1, r2
	ldrb r2, [r1, #5]
	adds r1, r2, #0
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
_080716A8:
	ldr r1, _08071870 @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	movs r2, #0x20
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _0807171A
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x66
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #2
	beq _080716EE
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x64
	ldrh r1, [r2]
	movs r2, #1
	subs r1, r2, r1
	adds r2, r0, #0
	adds r0, #0x64
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
_080716EE:
	ldr r0, [r7]
	ldr r1, _0807186C @ =0x08D65800
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	movs r4, #0
	ldrsh r2, [r3, r4]
	adds r3, r2, #0
	lsls r2, r3, #3
	adds r1, r1, r2
	movs r2, #3
	ldrsb r2, [r1, r2]
	adds r1, r2, #0
	adds r2, r0, #0
	adds r0, #0x66
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
_0807171A:
	ldr r1, _08071870 @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	movs r2, #0x10
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _0807178C
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x66
	movs r5, #0
	ldrsh r0, [r1, r5]
	cmp r0, #1
	beq _08071760
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x64
	ldrh r1, [r2]
	movs r2, #1
	subs r1, r2, r1
	adds r2, r0, #0
	adds r0, #0x64
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
_08071760:
	ldr r0, [r7]
	ldr r1, _0807186C @ =0x08D65800
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	movs r4, #0
	ldrsh r2, [r3, r4]
	adds r3, r2, #0
	lsls r2, r3, #3
	adds r1, r1, r2
	movs r2, #4
	ldrsb r2, [r1, r2]
	adds r1, r2, #0
	adds r2, r0, #0
	adds r0, #0x66
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
_0807178C:
	ldr r1, _08071870 @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	movs r2, #0x40
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080717CE
	ldr r0, [r7]
	ldr r1, _0807186C @ =0x08D65800
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	movs r5, #0
	ldrsh r2, [r3, r5]
	adds r3, r2, #0
	lsls r2, r3, #3
	adds r1, r1, r2
	movs r2, #1
	ldrsb r2, [r1, r2]
	adds r1, r2, #0
	adds r2, r0, #0
	adds r0, #0x66
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
_080717CE:
	ldr r1, _08071870 @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	movs r2, #0x80
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _08071810
	ldr r0, [r7]
	ldr r1, _0807186C @ =0x08D65800
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	movs r4, #0
	ldrsh r2, [r3, r4]
	adds r3, r2, #0
	lsls r2, r3, #3
	adds r1, r1, r2
	movs r2, #2
	ldrsb r2, [r1, r2]
	adds r1, r2, #0
	adds r2, r0, #0
	adds r0, #0x66
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
_08071810:
	ldr r1, _08071870 @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	movs r2, #0xf0
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _08071830
	ldr r0, [r7, #4]
	ldr r1, [r7, #8]
	movs r2, #1
	bl sub_08070B10
_08071830:
	ldr r1, _08071870 @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	movs r2, #0xf3
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _08071860
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	movs r5, #0
	ldrsh r0, [r1, r5]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x66
	movs r3, #0
	ldrsh r1, [r2, r3]
	movs r2, #0
	bl sub_08070B10
_08071860:
	add sp, #0x10
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08071868: .4byte 0x08D65878
_0807186C: .4byte 0x08D65800
_08071870: .4byte gpKeySt

	thumb_func_start sub_08071874
sub_08071874: @ 0x08071874
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x72
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x1e
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	ldrb r1, [r0, #0x12]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x3c
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x12]
	ldr r1, _0807195C @ =0x08D65878
	ldr r0, [r1]
	ldr r1, [r7, #4]
	movs r2, #0x64
	muls r1, r2, r1
	adds r0, r0, r1
	movs r2, #8
	ldrsh r1, [r0, r2]
	adds r0, r1, #0
	bl GetCharacterData
	ldr r1, [r7]
	str r0, [r1]
	ldr r1, _0807195C @ =0x08D65878
	ldr r0, [r1]
	ldr r1, [r7, #4]
	movs r2, #0x64
	muls r1, r2, r1
	adds r0, r0, r1
	movs r2, #0xe
	ldrsh r1, [r0, r2]
	adds r0, r1, #0
	bl GetClassData
	ldr r1, [r7]
	str r0, [r1, #4]
	ldr r0, [r7]
	ldr r2, _0807195C @ =0x08D65878
	ldr r1, [r2]
	ldr r2, [r7, #4]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	ldrh r2, [r1, #0xa]
	adds r1, r2, #0
	ldrb r2, [r0, #0x10]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x10]
	ldr r0, [r7]
	ldr r2, _0807195C @ =0x08D65878
	ldr r1, [r2]
	ldr r2, [r7, #4]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	ldrh r2, [r1, #0xc]
	adds r1, r2, #0
	ldrb r2, [r0, #0x11]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x11]
	ldr r0, [r7]
	ldr r2, _0807195C @ =0x08D65878
	ldr r1, [r2]
	ldr r2, [r7, #4]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	adds r2, r0, #0
	adds r0, #0x4a
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrh r1, [r1, #0x10]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x6e
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807195C: .4byte 0x08D65878

	thumb_func_start sub_08071960
sub_08071960: @ 0x08071960
	push {r7, lr}
	sub sp, #0x14
	mov r7, sp
	ldr r0, _08071994 @ =gBattleHitArray
	str r0, [r7, #0xc]
	ldr r1, _08071998 @ =gBattleActor
	adds r0, r1, #0
	movs r1, #0
	bl sub_08071874
	ldr r1, _0807199C @ =gBattleTarget
	adds r0, r1, #0
	movs r1, #1
	bl sub_08071874
	bl ClearBattleHits
	movs r0, #0
	str r0, [r7, #0x10]
	movs r0, #0
	str r0, [r7]
_0807198A:
	ldr r0, [r7]
	cmp r0, #4
	ble _080719A0
	b _080719F0
	.align 2, 0
_08071994: .4byte gBattleHitArray
_08071998: .4byte gBattleActor
_0807199C: .4byte gBattleTarget
_080719A0:
	movs r0, #0
	str r0, [r7, #4]
_080719A4:
	ldr r0, [r7, #4]
	cmp r0, #1
	ble _080719AC
	b _080719E0
_080719AC:
	ldr r1, _080719D4 @ =0x08D65878
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #5
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r2, [r7, #4]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	adds r0, #8
	adds r1, r0, r1
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0
	beq _080719D8
	movs r0, #1
	str r0, [r7, #0x10]
	b _080719E0
	.align 2, 0
_080719D4: .4byte 0x08D65878
_080719D8:
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _080719A4
_080719E0:
	ldr r0, [r7, #0x10]
	cmp r0, #0
	beq _080719E8
	b _080719F0
_080719E8:
	ldr r0, [r7]
	adds r1, r0, #1
	str r1, [r7]
	b _0807198A
_080719F0:
	ldr r0, [r7]
	cmp r0, #5
	bne _08071A00
	ldr r0, [r7, #4]
	cmp r0, #2
	bne _08071A00
	movs r0, #0
	b _08071BCE
_08071A00:
	ldr r0, [r7]
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, [r7, #4]
	adds r0, r0, r1
	str r0, [r7, #8]
_08071A0C:
	ldr r0, [r7, #8]
	cmp r0, #9
	ble _08071A14
	b _08071BAE
_08071A14:
	ldr r0, [r7, #8]
	asrs r1, r0, #0x1f
	lsrs r2, r1, #0x1f
	adds r1, r0, r2
	asrs r0, r1, #1
	str r0, [r7]
	ldr r0, [r7, #8]
	movs r1, #1
	ands r0, r1
	str r0, [r7, #4]
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #3
	ldrb r2, [r0, #2]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0, #2]
	ldr r1, _08071A70 @ =0x08D65878
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #5
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r2, [r7, #4]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	adds r0, #8
	adds r1, r0, r1
	movs r2, #0
	ldrsh r0, [r1, r2]
	str r0, [r7, #0x10]
	ldr r1, [r7, #0x10]
	subs r0, r1, #1
	cmp r0, #8
	bhi _08071B02
	lsls r1, r0, #2
	ldr r2, _08071A74 @ =_08071A78
	adds r0, r1, r2
	ldr r1, [r0]
	mov pc, r1
	.align 2, 0
_08071A70: .4byte 0x08D65878
_08071A74: .4byte _08071A78
_08071A78: @ jump table
	.4byte _08071ACE @ case 0
	.4byte _08071ACE @ case 1
	.4byte _08071ACE @ case 2
	.4byte _08071ACE @ case 3
	.4byte _08071A9C @ case 4
	.4byte _08071A9C @ case 5
	.4byte _08071A9C @ case 6
	.4byte _08071A9C @ case 7
	.4byte _08071AE4 @ case 8
_08071A9C:
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #0xc]
	ldrh r2, [r1]
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7, #0xc]
	ldrb r1, [r0, #3]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x14
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #3]
	b _08071B02
_08071ACE:
	ldr r0, [r7, #0xc]
	ldrb r1, [r0, #3]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xa
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #3]
	b _08071B02
_08071AE4:
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #0xc]
	ldrh r2, [r1]
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	b _08071B02
_08071B02:
	ldr r1, [r7, #0x10]
	subs r0, r1, #2
	cmp r0, #6
	bhi _08071B96
	lsls r1, r0, #2
	ldr r2, _08071B14 @ =_08071B18
	adds r0, r1, r2
	ldr r1, [r0]
	mov pc, r1
	.align 2, 0
_08071B14: .4byte _08071B18
_08071B18: @ jump table
	.4byte _08071B34 @ case 0
	.4byte _08071B54 @ case 1
	.4byte _08071B76 @ case 2
	.4byte _08071B96 @ case 3
	.4byte _08071B34 @ case 4
	.4byte _08071B54 @ case 5
	.4byte _08071B76 @ case 6
_08071B34:
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #0xc]
	ldrh r2, [r1]
	movs r3, #0x80
	adds r1, r2, #0
	orrs r1, r3
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	b _08071B96
_08071B52:
	b _08071B96
_08071B54:
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #0xc]
	ldrh r2, [r1]
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r2, #0
	orrs r1, r3
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	b _08071B96
_08071B74:
	b _08071B96
_08071B76:
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #0xc]
	ldrh r2, [r1]
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	b _08071B96
_08071B94:
	b _08071B96
_08071B96:
	ldr r0, [r7, #0x10]
	cmp r0, #0
	beq _08071B9E
	b _08071BA0
_08071B9E:
	b _08071BA6
_08071BA0:
	ldr r0, [r7, #0xc]
	adds r1, r0, #4
	str r1, [r7, #0xc]
_08071BA6:
	ldr r0, [r7, #8]
	adds r1, r0, #1
	str r1, [r7, #8]
	b _08071A0C
_08071BAE:
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #0xc]
	ldrb r2, [r1, #2]
	movs r3, #0x80
	adds r1, r2, #0
	orrs r1, r3
	ldrb r2, [r0, #2]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0, #2]
	movs r0, #1
	b _08071BCE
_08071BCE:
	add sp, #0x14
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08071BD8
sub_08071BD8: @ 0x08071BD8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _08071C08 @ =gBg0Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	ldr r1, _08071C0C @ =gBg1Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	movs r0, #3
	bl EnableBgSync
	bl BeginBattleMapAnims
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08071C08: .4byte gBg0Tm
_08071C0C: .4byte gBg1Tm

	thumb_func_start sub_08071C10
sub_08071C10: @ 0x08071C10
	push {r4, r5, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r0, _08071C7C @ =0x083F95C8
	ldr r1, _08071C80 @ =0x06013000
	bl sub_08013688
	ldr r0, _08071C84 @ =0x083F96B8
	ldr r2, [r7]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	ldr r2, _08071C88 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r1, r2, #0
	adds r1, #8
	ldr r3, [r7]
	movs r2, #0x11
	ldrsb r2, [r3, r2]
	ldr r3, _08071C88 @ =gBmSt
	movs r5, #0xe
	ldrsh r4, [r3, r5]
	asrs r3, r4, #4
	adds r5, r3, #0
	lsls r4, r5, #0x10
	asrs r3, r4, #0x10
	subs r2, r2, r3
	lsls r3, r2, #1
	adds r2, r3, #0
	lsls r3, r2, #3
	adds r2, r3, #0
	adds r2, #0x10
	movs r3, #0xc0
	lsls r3, r3, #1
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl sub_08012AF0
	add sp, #0xc
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08071C7C: .4byte 0x083F95C8
_08071C80: .4byte 0x06013000
_08071C84: .4byte 0x083F96B8
_08071C88: .4byte gBmSt

	thumb_func_start sub_08071C8C
sub_08071C8C: @ 0x08071C8C
	push {r4, r5, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r0, _08071CF8 @ =0x083F9820
	ldr r1, _08071CFC @ =0x06013000
	bl sub_08013688
	ldr r0, _08071D00 @ =0x083F9964
	ldr r2, [r7]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	ldr r2, _08071D04 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r1, r2, #0
	adds r1, #8
	ldr r3, [r7]
	movs r2, #0x11
	ldrsb r2, [r3, r2]
	ldr r3, _08071D04 @ =gBmSt
	movs r5, #0xe
	ldrsh r4, [r3, r5]
	asrs r3, r4, #4
	adds r5, r3, #0
	lsls r4, r5, #0x10
	asrs r3, r4, #0x10
	subs r2, r2, r3
	lsls r3, r2, #1
	adds r2, r3, #0
	lsls r3, r2, #3
	adds r2, r3, #0
	adds r2, #0x10
	movs r3, #0xc0
	lsls r3, r3, #1
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl sub_08012AF0
	add sp, #0xc
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08071CF8: .4byte 0x083F9820
_08071CFC: .4byte 0x06013000
_08071D00: .4byte 0x083F9964
_08071D04: .4byte gBmSt

	thumb_func_start sub_08071D08
sub_08071D08: @ 0x08071D08
	push {r4, r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, _08071D94 @ =0x08D658DC
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	ldr r0, [r7, #8]
	ldr r2, [r7]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	ldr r2, _08071D98 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r1, r2, #0
	adds r1, #8
	str r1, [r0, #0x30]
	ldr r0, [r7, #8]
	ldr r2, [r7]
	movs r1, #0x11
	ldrsb r1, [r2, r1]
	ldr r2, _08071D98 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r1, r2, #0
	subs r1, #8
	str r1, [r0, #0x34]
	ldr r0, [r7, #8]
	ldr r2, [r7, #4]
	adds r1, r2, #0
	movs r2, #1
	eors r1, r2
	adds r2, r0, #0
	adds r0, #0x48
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08071D94: .4byte 0x08D658DC
_08071D98: .4byte gBmSt

	thumb_func_start sub_08071D9C
sub_08071D9C: @ 0x08071D9C
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r0, _08071DE8 @ =0x083FAEE0
	ldr r1, _08071DEC @ =0x06013000
	bl sub_08013688
	ldr r0, _08071DF0 @ =0x083FB16C
	movs r1, #0x98
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08071DF4 @ =0x083F44FC
	ldr r2, [r7]
	ldr r1, [r2, #0x30]
	ldr r2, [r7]
	ldr r3, [r2, #0x34]
	adds r2, r3, #0
	adds r2, #0x10
	movs r3, #0xc6
	lsls r3, r3, #6
	ldr r5, [r7]
	adds r4, r5, #0
	adds r5, #0x48
	movs r6, #0
	ldrsh r4, [r5, r6]
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl sub_08012AF0
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08071DE8: .4byte 0x083FAEE0
_08071DEC: .4byte 0x06013000
_08071DF0: .4byte 0x083FB16C
_08071DF4: .4byte 0x083F44FC

	thumb_func_start sub_08071DF8
sub_08071DF8: @ 0x08071DF8
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, _08071E60 @ =0x08D658FC
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	ldr r2, _08071E64 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x30]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0x11
	ldrsb r1, [r2, r1]
	ldr r2, _08071E64 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x34]
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08071E60: .4byte 0x08D658FC
_08071E64: .4byte gBmSt

	thumb_func_start sub_08071E68
sub_08071E68: @ 0x08071E68
	push {r4, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0xb7
	bl sub_080151FC
	ldr r0, _08071EB8 @ =0x083FB310
	ldr r1, _08071EBC @ =0x06013800
	bl sub_08013688
	ldr r0, _08071EC0 @ =0x083FB664
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08071EC4 @ =0x083F4464
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	adds r1, r2, #0
	subs r1, #8
	ldr r2, [r7]
	ldr r3, [r2, #0x34]
	adds r2, r3, #0
	adds r2, #8
	ldr r3, _08071EC8 @ =0x000041C0
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl sub_08012AF0
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08071EB8: .4byte 0x083FB310
_08071EBC: .4byte 0x06013800
_08071EC0: .4byte 0x083FB664
_08071EC4: .4byte 0x083F4464
_08071EC8: .4byte 0x000041C0

	thumb_func_start sub_08071ECC
sub_08071ECC: @ 0x08071ECC
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, _08071F34 @ =0x08D6591C
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	ldr r2, _08071F38 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x30]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0x11
	ldrsb r1, [r2, r1]
	ldr r2, _08071F38 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x34]
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08071F34: .4byte 0x08D6591C
_08071F38: .4byte gBmSt

	thumb_func_start sub_08071F3C
sub_08071F3C: @ 0x08071F3C
	push {r4, r7, lr}
	sub sp, #8
	add r7, sp, #4
	str r0, [r7]
	bl sub_0807456C
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r4, _08072058 @ =0x083FCDB0
	movs r0, #2
	bl GetBgChrOffset
	ldr r2, _0807205C @ =0x06002800
	adds r1, r0, r2
	adds r0, r4, #0
	bl sub_08013688
	ldr r0, _08072060 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08072060 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08072060 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08072060 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08072064 @ =0x030027CC
	ldr r1, _08072064 @ =0x030027CC
	ldrh r2, [r1]
	ldr r3, _08072068 @ =0x0000FFE0
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08072064 @ =0x030027CC
	ldr r1, _08072064 @ =0x030027CC
	ldrh r2, [r1]
	movs r3, #4
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08072060 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08072064 @ =0x030027CC
	ldr r1, _08072064 @ =0x030027CC
	ldrh r2, [r1]
	ldr r3, _0807206C @ =0x0000E0FF
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08072064 @ =0x030027CC
	ldr r1, _08072064 @ =0x030027CC
	ldrh r2, [r1]
	movs r3, #0xc0
	lsls r3, r3, #5
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08072060 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3d
	ldrb r1, [r0]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x40
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x42
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08072070 @ =0x083FD3D8
	ldr r1, [r7]
	str r1, [sp]
	movs r1, #0x80
	movs r2, #0x20
	movs r3, #2
	bl sub_08014BA4
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08072058: .4byte 0x083FCDB0
_0807205C: .4byte 0x06002800
_08072060: .4byte gDispIo
_08072064: .4byte 0x030027CC
_08072068: .4byte 0x0000FFE0
_0807206C: .4byte 0x0000E0FF
_08072070: .4byte 0x083FD3D8

	thumb_func_start sub_08072074
sub_08072074: @ 0x08072074
	push {r4, r7, lr}
	sub sp, #0x14
	add r7, sp, #8
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x42
	ldrh r0, [r1]
	cmp r0, #2
	bls _080720FC
	bl sub_08014B58
	ldr r0, _080720F0 @ =0x083FD3D8
	ldr r1, [r7]
	str r1, [sp]
	movs r1, #0x80
	movs r2, #0x20
	movs r3, #4
	bl sub_08014BBC
	ldr r4, _080720F4 @ =0x083FD418
	movs r0, #2
	bl GetBgChrOffset
	ldr r2, _080720F8 @ =0x06002800
	adds r1, r0, r2
	adds r0, r4, #0
	bl sub_08013688
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	adds r0, r1, #0
	cmp r0, #0
	bge _080720BA
	adds r0, #7
_080720BA:
	asrs r1, r0, #3
	subs r0, r1, #4
	ldr r1, [r7]
	ldr r2, [r1, #0x34]
	adds r1, r2, #0
	cmp r1, #0
	bge _080720CA
	adds r1, #7
_080720CA:
	asrs r2, r1, #3
	subs r1, r2, #4
	movs r2, #0
	str r2, [sp]
	ldr r2, [r7]
	str r2, [sp, #4]
	movs r2, #8
	movs r3, #0x3c
	bl sub_08072320
	ldr r0, [r7]
	bl Proc_Break
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0x8c
	bl sub_080151FC
	b _08072196
	.align 2, 0
_080720F0: .4byte 0x083FD3D8
_080720F4: .4byte 0x083FD418
_080720F8: .4byte 0x06002800
_080720FC:
	ldr r0, _080721A0 @ =0x08D65954
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x42
	ldrh r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #2
	adds r0, r0, r1
	movs r2, #0
	ldrsh r1, [r0, r2]
	str r1, [r7, #4]
	ldr r0, _080721A0 @ =0x08D65954
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x42
	ldrh r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #1
	adds r0, r0, r2
	movs r2, #0
	ldrsh r1, [r0, r2]
	str r1, [r7, #8]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	adds r0, r1, #0
	cmp r0, #0
	bge _0807213A
	adds r0, #7
_0807213A:
	asrs r0, r0, #3
	ldr r2, [r7, #4]
	adds r1, r0, r2
	subs r0, r1, #3
	ldr r1, [r7]
	ldr r2, [r1, #0x34]
	adds r1, r2, #0
	cmp r1, #0
	bge _0807214E
	adds r1, #7
_0807214E:
	asrs r1, r1, #3
	ldr r3, [r7, #8]
	adds r2, r1, r3
	subs r1, r2, #3
	movs r2, #8
	str r2, [sp]
	ldr r2, [r7]
	str r2, [sp, #4]
	movs r2, #6
	movs r3, #0xa
	bl sub_08072320
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0x89
	bl sub_080151FC
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x42
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x42
	ldrh r3, [r2]
	adds r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x42
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
_08072196:
	add sp, #0x14
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080721A0: .4byte 0x08D65954

	thumb_func_start sub_080721A4
sub_080721A4: @ 0x080721A4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _080721C4 @ =gBg2Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080721C4: .4byte gBg2Tm

	thumb_func_start sub_080721C8
sub_080721C8: @ 0x080721C8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl sub_08014B58
	ldr r1, _0807223C @ =gBg2Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
	ldr r0, _08072240 @ =0x030027CC
	ldr r1, _08072240 @ =0x030027CC
	ldrh r2, [r1]
	ldr r3, _08072244 @ =0x0000FFE0
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08072240 @ =0x030027CC
	ldr r1, _08072240 @ =0x030027CC
	ldrh r2, [r1]
	movs r3, #0x1f
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08072248 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	bl sub_0807224C
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807223C: .4byte gBg2Tm
_08072240: .4byte 0x030027CC
_08072244: .4byte 0x0000FFE0
_08072248: .4byte gDispIo

	thumb_func_start sub_0807224C
sub_0807224C: @ 0x0807224C
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _0807231C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x80
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0807231C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0807231C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0807231C @ =gDispIo
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x64
	ldrh r2, [r1]
	subs r3, r2, #1
	adds r4, r3, #0
	strh r4, [r1]
	lsls r2, r2, #0x10
	asrs r1, r2, #0x10
	asrs r2, r1, #2
	adds r1, r2, #0
	adds r2, r0, #0
	adds r0, #0x46
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0
	bne _08072312
	ldr r0, _0807231C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0807231C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0807231C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0807231C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	bl Proc_Break
_08072312:
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807231C: .4byte gDispIo

	thumb_func_start sub_08072320
sub_08072320: @ 0x08072320
	push {r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, _08072370 @ =0x08D6597C
	ldr r1, [r7, #0x20]
	bl Proc_StartBlocking
	str r0, [r7, #0x10]
	ldr r0, [r7, #0x10]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	ldr r0, [r7, #0x10]
	ldr r1, [r7, #4]
	str r1, [r0, #0x30]
	ldr r0, [r7, #0x10]
	ldr r1, [r7, #8]
	str r1, [r0, #0x54]
	ldr r0, [r7, #0x10]
	ldr r1, [r7, #0x1c]
	str r1, [r0, #0x58]
	ldr r1, [r7, #0x10]
	ldr r2, [r7, #0xc]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x44
	ldrh r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strh r2, [r1]
	add sp, #0x14
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08072370: .4byte 0x08D6597C

	thumb_func_start sub_08072374
sub_08072374: @ 0x08072374
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _08072394 @ =gBg2Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08072394: .4byte gBg2Tm

	thumb_func_start sub_08072398
sub_08072398: @ 0x08072398
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _080723B8 @ =gBg2Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080723B8: .4byte gBg2Tm

	thumb_func_start sub_080723BC
sub_080723BC: @ 0x080723BC
	push {r4, r5, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r0, _08072450 @ =gBg2Tm
	ldr r2, [r7]
	ldr r1, [r2, #0x2c]
	ldr r3, [r7]
	ldr r2, [r3, #0x30]
	ldr r3, _08072454 @ =0x00004140
	ldr r4, [r7]
	ldr r5, [r4, #0x54]
	str r5, [sp]
	ldr r4, [r7]
	ldr r5, [r4, #0x54]
	str r5, [sp, #4]
	bl sub_08014C38
	movs r0, #4
	bl EnableBgSync
	ldr r0, _08072458 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08072458 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08072458 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08072458 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	add sp, #0xc
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08072450: .4byte gBg2Tm
_08072454: .4byte 0x00004140
_08072458: .4byte gDispIo

	thumb_func_start sub_0807245C
sub_0807245C: @ 0x0807245C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x64
	ldrh r3, [r2]
	adds r1, r3, #2
	adds r2, r0, #0
	adds r0, #0x64
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, _08072510 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, _08072510 @ =gDispIo
	ldr r2, [r7]
	adds r0, r2, #0
	adds r2, #0x64
	ldrh r3, [r2]
	adds r0, r3, #0
	adds r2, r1, #0
	adds r1, #0x44
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r0, _08072510 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08072510 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #7
	ble _08072506
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	bl Proc_Break
_08072506:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08072510: .4byte gDispIo

	thumb_func_start sub_08072514
sub_08072514: @ 0x08072514
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r2, r1, #0
	adds r2, #0x44
	ldr r1, [r7]
	ldr r2, [r7]
	adds r0, r2, #0
	adds r2, #0x44
	ldrh r3, [r2]
	subs r0, r3, #1
	adds r2, r1, #0
	adds r1, #0x44
	ldrh r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r0, #0
	orrs r3, r2
	adds r2, r3, #0
	strh r2, [r1]
	lsls r1, r0, #0x10
	asrs r0, r1, #0x10
	movs r1, #1
	cmn r0, r1
	bne _08072554
	ldr r0, [r7]
	bl Proc_Break
_08072554:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0807255C
sub_0807255C: @ 0x0807255C
	push {r7, lr}
	sub sp, #0xc
	add r7, sp, #4
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x58]
	cmp r1, #0
	bne _08072574
	ldr r0, [r7]
	bl Proc_Break
	b _08072628
_08072574:
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	adds r2, r1, #1
	adds r3, r2, #0
	strh r3, [r0]
	lsls r0, r1, #0x10
	asrs r3, r0, #0x10
	ldr r0, [r7]
	ldr r1, [r0, #0x58]
	str r1, [sp]
	movs r0, #0
	movs r1, #8
	movs r2, #0
	bl Interpolate
	str r0, [r7, #4]
	ldr r0, _08072630 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, _08072630 @ =gDispIo
	ldr r2, [r7, #4]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x44
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r0, _08072630 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08072630 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	movs r2, #0
	ldrsh r0, [r1, r2]
	ldr r1, [r7]
	ldr r2, [r1, #0x58]
	cmp r0, r2
	blt _08072628
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r1, _08072634 @ =gBg2Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
	ldr r0, [r7]
	bl Proc_Break
_08072628:
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08072630: .4byte gDispIo
_08072634: .4byte gBg2Tm

	thumb_func_start sub_08072638
sub_08072638: @ 0x08072638
	push {r4, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r1, _080726B0 @ =0x08D659BC
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	ldr r0, [r7, #0xc]
	ldr r2, [r7]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	ldr r2, _080726B4 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x30]
	ldr r0, [r7, #0xc]
	ldr r2, [r7]
	movs r1, #0x11
	ldrsb r1, [r2, r1]
	ldr r2, _080726B4 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x34]
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #4]
	str r1, [r0, #0x50]
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #8]
	str r1, [r0, #0x54]
	add sp, #0x10
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080726B0: .4byte 0x08D659BC
_080726B4: .4byte gBmSt

	thumb_func_start sub_080726B8
sub_080726B8: @ 0x080726B8
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0xb6
	bl sub_080151FC
	ldr r0, _080727B4 @ =gDispIo
	ldrb r1, [r0, #0xc]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0xc]
	ldr r0, _080727B4 @ =gDispIo
	ldrb r1, [r0, #0x10]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x10]
	ldr r0, _080727B4 @ =gDispIo
	ldrb r1, [r0, #0x14]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x14]
	ldr r0, _080727B4 @ =gDispIo
	ldrb r1, [r0, #0x18]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x18]
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, [r7]
	ldr r4, [r0, #0x50]
	movs r0, #2
	bl GetBgChrOffset
	ldr r2, _080727B8 @ =0x06002800
	adds r1, r0, r2
	adds r0, r4, #0
	bl sub_08013688
	ldr r0, [r7]
	ldr r1, [r0, #0x54]
	adds r0, r1, #0
	movs r1, #0x80
	movs r2, #0x20
	bl ApplyPaletteExt
	bl sub_0807456C
	ldr r0, _080727B4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080727B4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080727B4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080727B4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x40
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080727B4: .4byte gDispIo
_080727B8: .4byte 0x06002800

	thumb_func_start sub_080727BC
sub_080727BC: @ 0x080727BC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x14
	add r7, sp, #0x10
	str r0, [r7]
	ldr r0, _08072874 @ =gBg2Tm
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	adds r1, r2, #0
	cmp r1, #0
	bge _080727D6
	adds r1, #7
_080727D6:
	asrs r2, r1, #3
	subs r1, r2, #3
	ldr r2, [r7]
	ldr r3, [r2, #0x34]
	adds r2, r3, #0
	cmp r2, #0
	bge _080727E6
	adds r2, #7
_080727E6:
	asrs r3, r2, #3
	subs r2, r3, #3
	ldr r3, _08072878 @ =0x00004140
	movs r4, #6
	str r4, [sp]
	movs r4, #6
	str r4, [sp, #4]
	ldr r4, _0807287C @ =0x083FC770
	str r4, [sp, #8]
	ldr r4, _08072880 @ =0x08D659EC
	ldr r6, [r7]
	adds r5, r6, #0
	adds r6, #0x40
	ldrh r5, [r6]
	mov r8, r5
	mov r6, r8
	lsrs r5, r6, #1
	mov r8, r5
	mov r5, r8
	lsls r6, r5, #0x10
	lsrs r5, r6, #0x10
	adds r4, r4, r5
	ldrb r5, [r4]
	str r5, [sp, #0xc]
	bl sub_08014D78
	movs r0, #4
	bl EnableBgSync
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x40
	ldrh r3, [r2]
	adds r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x40
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, _08072880 @ =0x08D659EC
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x40
	ldrh r3, [r2]
	lsrs r1, r3, #1
	adds r3, r1, #0
	lsls r2, r3, #0x10
	lsrs r1, r2, #0x10
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0xff
	bne _08072866
	ldr r0, [r7]
	bl Proc_Break
_08072866:
	add sp, #0x14
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08072874: .4byte gBg2Tm
_08072878: .4byte 0x00004140
_0807287C: .4byte 0x083FC770
_08072880: .4byte 0x08D659EC

	thumb_func_start sub_08072884
sub_08072884: @ 0x08072884
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, _080728E8 @ =0x08D65A04
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	ldr r2, _080728EC @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r1, r2, #0
	adds r1, #8
	str r1, [r0, #0x30]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0x11
	ldrsb r1, [r2, r1]
	ldr r2, _080728EC @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r1, r2, #0
	adds r1, #8
	str r1, [r0, #0x34]
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080728E8: .4byte 0x08D65A04
_080728EC: .4byte gBmSt

	thumb_func_start sub_080728F0
sub_080728F0: @ 0x080728F0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _0807290C @ =0x0000010F
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	adds r1, r2, #0
	bl sub_080151FC
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807290C: .4byte 0x0000010F

	thumb_func_start sub_08072910
sub_08072910: @ 0x08072910
	push {r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	adds r0, r3, #0
	adds r1, r7, #0
	adds r1, #0xc
	strh r0, [r1]
	ldr r1, _08072968 @ =0x08D65A24
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	str r0, [r7, #0x10]
	ldr r0, [r7, #0x10]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	ldr r0, [r7, #0x10]
	ldr r1, [r7, #4]
	str r1, [r0, #0x50]
	ldr r0, [r7, #0x10]
	ldr r1, [r7, #8]
	str r1, [r0, #0x54]
	ldr r0, [r7, #0x10]
	adds r1, r7, #0
	adds r1, #0xc
	adds r2, r0, #0
	adds r0, #0x58
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrh r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	add sp, #0x14
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08072968: .4byte 0x08D65A24

	thumb_func_start sub_0807296C
sub_0807296C: @ 0x0807296C
	push {r4, r5, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r0, _08072A98 @ =gDispIo
	ldrb r1, [r0, #0xc]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0xc]
	ldr r0, _08072A98 @ =gDispIo
	ldrb r1, [r0, #0x10]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x10]
	ldr r0, _08072A98 @ =gDispIo
	ldrb r1, [r0, #0x14]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x14]
	ldr r0, _08072A98 @ =gDispIo
	ldrb r1, [r0, #0x18]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x18]
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, [r7]
	ldr r4, [r0, #0x50]
	movs r0, #2
	bl GetBgChrOffset
	ldr r2, _08072A9C @ =0x06002800
	adds r1, r0, r2
	adds r0, r4, #0
	bl sub_08013688
	ldr r0, _08072AA0 @ =gBg2Tm
	ldr r1, [r7]
	ldr r2, [r1, #0x2c]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	ldr r2, _08072AA4 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	subs r1, r2, #2
	ldr r2, [r7]
	ldr r3, [r2, #0x2c]
	movs r2, #0x11
	ldrsb r2, [r3, r2]
	ldr r3, _08072AA4 @ =gBmSt
	movs r5, #0xe
	ldrsh r4, [r3, r5]
	asrs r3, r4, #4
	adds r5, r3, #0
	lsls r4, r5, #0x10
	asrs r3, r4, #0x10
	subs r2, r2, r3
	lsls r3, r2, #1
	subs r2, r3, #2
	ldr r3, _08072AA8 @ =0x00004140
	movs r4, #6
	str r4, [sp]
	movs r4, #6
	str r4, [sp, #4]
	bl sub_08014C38
	movs r0, #4
	bl EnableBgSync
	ldr r1, [r7]
	ldr r0, [r1, #0x54]
	ldr r1, [r7]
	str r1, [sp]
	movs r1, #0x80
	movs r2, #0x20
	movs r3, #4
	bl sub_08014BBC
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x40
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x42
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x58
	ldrh r0, [r1]
	ldr r1, [r7]
	ldr r2, [r1, #0x2c]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	ldr r2, _08072AA4 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	bl sub_080151FC
	add sp, #0xc
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08072A98: .4byte gDispIo
_08072A9C: .4byte 0x06002800
_08072AA0: .4byte gBg2Tm
_08072AA4: .4byte gBmSt
_08072AA8: .4byte 0x00004140

	thumb_func_start sub_08072AAC
sub_08072AAC: @ 0x08072AAC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x40
	ldrh r3, [r2]
	adds r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x40
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldrh r0, [r1]
	cmp r0, #0x10
	bne _08072AEC
	ldr r0, [r7]
	bl Proc_Break
_08072AEC:
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x40
	ldrh r1, [r2]
	movs r2, #0x16
	subs r1, r2, r1
	adds r2, r0, #0
	adds r0, #0x42
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x42
	ldrh r0, [r1]
	cmp r0, #0x10
	bls _08072B32
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x42
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
_08072B32:
	ldr r0, _08072C00 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, _08072C00 @ =gDispIo
	ldr r2, [r7]
	adds r0, r2, #0
	adds r2, #0x40
	ldrh r3, [r2]
	adds r0, r3, #0
	adds r2, r1, #0
	adds r1, #0x44
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r1, _08072C00 @ =gDispIo
	ldr r2, [r7]
	adds r0, r2, #0
	adds r2, #0x42
	ldrh r3, [r2]
	adds r0, r3, #0
	adds r2, r1, #0
	adds r1, #0x45
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r0, _08072C00 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08072C04 @ =0x030027CC
	ldr r1, _08072C04 @ =0x030027CC
	ldrh r2, [r1]
	ldr r3, _08072C08 @ =0x0000FFE0
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08072C04 @ =0x030027CC
	ldr r1, _08072C04 @ =0x030027CC
	ldrh r2, [r1]
	movs r3, #4
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08072C00 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08072C04 @ =0x030027CC
	ldr r1, _08072C04 @ =0x030027CC
	ldrh r2, [r1]
	ldr r3, _08072C0C @ =0x0000E0FF
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08072C04 @ =0x030027CC
	ldr r1, _08072C04 @ =0x030027CC
	ldrh r2, [r1]
	movs r3, #0xc0
	lsls r3, r3, #5
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08072C00 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3d
	ldrb r1, [r0]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08072C00: .4byte gDispIo
_08072C04: .4byte 0x030027CC
_08072C08: .4byte 0x0000FFE0
_08072C0C: .4byte 0x0000E0FF

	thumb_func_start sub_08072C10
sub_08072C10: @ 0x08072C10
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x40
	ldrh r3, [r2]
	subs r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x40
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldrh r0, [r1]
	cmp r0, #0
	bne _08072C50
	ldr r0, [r7]
	bl Proc_Break
_08072C50:
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x40
	ldrh r1, [r2]
	movs r2, #0x16
	subs r1, r2, r1
	adds r2, r0, #0
	adds r0, #0x42
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x42
	ldrh r0, [r1]
	cmp r0, #0x10
	bls _08072C96
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x42
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
_08072C96:
	ldr r0, _08072D64 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, _08072D64 @ =gDispIo
	ldr r2, [r7]
	adds r0, r2, #0
	adds r2, #0x40
	ldrh r3, [r2]
	adds r0, r3, #0
	adds r2, r1, #0
	adds r1, #0x44
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r1, _08072D64 @ =gDispIo
	ldr r2, [r7]
	adds r0, r2, #0
	adds r2, #0x42
	ldrh r3, [r2]
	adds r0, r3, #0
	adds r2, r1, #0
	adds r1, #0x45
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r0, _08072D64 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08072D68 @ =0x030027CC
	ldr r1, _08072D68 @ =0x030027CC
	ldrh r2, [r1]
	ldr r3, _08072D6C @ =0x0000FFE0
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08072D68 @ =0x030027CC
	ldr r1, _08072D68 @ =0x030027CC
	ldrh r2, [r1]
	movs r3, #4
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08072D64 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08072D68 @ =0x030027CC
	ldr r1, _08072D68 @ =0x030027CC
	ldrh r2, [r1]
	ldr r3, _08072D70 @ =0x0000E0FF
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08072D68 @ =0x030027CC
	ldr r1, _08072D68 @ =0x030027CC
	ldrh r2, [r1]
	movs r3, #0xc0
	lsls r3, r3, #5
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08072D64 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3d
	ldrb r1, [r0]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08072D64: .4byte gDispIo
_08072D68: .4byte 0x030027CC
_08072D6C: .4byte 0x0000FFE0
_08072D70: .4byte 0x0000E0FF

	thumb_func_start sub_08072D74
sub_08072D74: @ 0x08072D74
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl sub_08014B58
	ldr r1, _08072E04 @ =gBg2Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
	ldr r0, _08072E08 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08072E08 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08072E08 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08072E08 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08072E08 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08072E08 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xbf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08072E08 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08072E04: .4byte gBg2Tm
_08072E08: .4byte gDispIo

	thumb_func_start sub_08072E0C
sub_08072E0C: @ 0x08072E0C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	bl SetOnHBlankA
	bl sub_08014B58
	ldr r1, _08072EA4 @ =gBg2Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
	ldr r0, _08072EA8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08072EA8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08072EA8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08072EA8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08072EA8 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08072EA8 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xbf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08072EA8 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08072EA4: .4byte gBg2Tm
_08072EA8: .4byte gDispIo

	thumb_func_start sub_08072EAC
sub_08072EAC: @ 0x08072EAC
	push {r4, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r1, _08072F10 @ =0x08D65A5C
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #0xc]
	ldr r2, [r1, #0x2c]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	ldr r2, _08072F14 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	str r2, [r0, #0x30]
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #0xc]
	ldr r2, [r1, #0x2c]
	movs r1, #0x11
	ldrsb r1, [r2, r1]
	ldr r2, _08072F14 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	str r2, [r0, #0x34]
	add sp, #0x10
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08072F10: .4byte 0x08D65A5C
_08072F14: .4byte gBmSt

	thumb_func_start sub_08072F18
sub_08072F18: @ 0x08072F18
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r4, _08072F64 @ =0x083FB684
	movs r0, #2
	bl GetBgChrOffset
	ldr r2, _08072F68 @ =0x06002800
	adds r1, r0, r2
	adds r0, r4, #0
	bl sub_08013688
	ldr r1, _08072F6C @ =0x083FB8E4
	adds r0, r1, #0
	movs r1, #0x80
	movs r2, #0x20
	bl ApplyPaletteExt
	bl sub_08075A98
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x40
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08072F64: .4byte 0x083FB684
_08072F68: .4byte 0x06002800
_08072F6C: .4byte 0x083FB8E4

	thumb_func_start sub_08072F70
sub_08072F70: @ 0x08072F70
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x14
	add r7, sp, #0x10
	str r0, [r7]
	ldr r0, _08073070 @ =gBg2Tm
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	subs r1, r2, #1
	ldr r2, [r7]
	ldr r3, [r2, #0x34]
	subs r2, r3, #3
	ldr r3, _08073074 @ =0x00004140
	movs r4, #4
	str r4, [sp]
	movs r4, #6
	str r4, [sp, #4]
	ldr r4, _08073078 @ =0x083FB904
	str r4, [sp, #8]
	ldr r4, _0807307C @ =0x08D65A8C
	ldr r6, [r7]
	adds r5, r6, #0
	adds r6, #0x40
	ldrh r5, [r6]
	mov r8, r5
	mov r6, r8
	lsrs r5, r6, #1
	mov r8, r5
	mov r5, r8
	lsls r6, r5, #0x10
	lsrs r5, r6, #0x10
	adds r4, r4, r5
	ldrb r5, [r4]
	str r5, [sp, #0xc]
	bl sub_08014D78
	movs r0, #4
	bl EnableBgSync
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x40
	ldrh r3, [r2]
	adds r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x40
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, _0807307C @ =0x08D65A8C
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x40
	ldrh r3, [r2]
	lsrs r1, r3, #1
	adds r3, r1, #0
	lsls r2, r3, #0x10
	lsrs r1, r2, #0x10
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0xff
	bne _08073006
	ldr r0, [r7]
	bl Proc_Break
_08073006:
	bl sub_0807456C
	ldr r0, _08073080 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08073080 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xc
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08073080 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xc
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08073080 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #0x14
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08073070: .4byte gBg2Tm
_08073074: .4byte 0x00004140
_08073078: .4byte 0x083FB904
_0807307C: .4byte 0x08D65A8C
_08073080: .4byte gDispIo

	thumb_func_start sub_08073084
sub_08073084: @ 0x08073084
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, _080730D0 @ =0x08D65AA4
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	ldr r0, [r7, #4]
	ldr r1, _080730D4 @ =gActionSt
	ldrb r2, [r1, #0x13]
	adds r3, r2, #0
	lsls r1, r3, #4
	ldr r2, _080730D8 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	subs r1, r1, r3
	str r1, [r0, #0x30]
	ldr r0, [r7, #4]
	ldr r1, _080730D4 @ =gActionSt
	ldrb r2, [r1, #0x14]
	adds r3, r2, #0
	lsls r1, r3, #4
	ldr r2, _080730D8 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	subs r1, r1, r3
	str r1, [r0, #0x34]
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080730D0: .4byte 0x08D65AA4
_080730D4: .4byte gActionSt
_080730D8: .4byte gBmSt

	thumb_func_start sub_080730DC
sub_080730DC: @ 0x080730DC
	push {r4, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r1, _080731D8 @ =gPlaySt
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r0, [r1]
	lsls r1, r0, #0x1e
	lsrs r0, r1, #0x1f
	cmp r0, #0
	bne _080730FA
	movs r0, #0xb3
	bl m4aSongNumStart
_080730FA:
	ldr r0, _080731DC @ =0x083FD7F4
	ldr r1, _080731E0 @ =0x06013800
	bl sub_08013688
	ldr r0, _080731E4 @ =0x083FDAAC
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #4
	bl sub_0801419C
	movs r0, #2
	bl GetBgChrOffset
	ldr r2, _080731E8 @ =0x06002800
	adds r1, r0, r2
	ldr r2, _080731EC @ =0x0000FFFF
	adds r0, r1, #0
	movs r1, #0x10
	bl sub_08015010
	ldr r0, _080731F0 @ =gBg2Tm
	movs r1, #0x80
	lsls r1, r1, #3
	ldr r2, _080731F4 @ =0x00004140
	bl sub_08015010
	movs r0, #4
	bl EnableBgSync
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x40
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x42
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _080731F8 @ =0x083F371C
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	adds r1, r2, #4
	ldr r3, [r7]
	ldr r2, [r3, #0x34]
	ldr r3, _080731FC @ =0x000041C0
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl sub_08012AF0
	bl sub_0807702C
	bl sub_0807706C
	bl sub_0807456C
	ldr r0, _08073200 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08073200 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08073200 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08073200 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080731D8: .4byte gPlaySt
_080731DC: .4byte 0x083FD7F4
_080731E0: .4byte 0x06013800
_080731E4: .4byte 0x083FDAAC
_080731E8: .4byte 0x06002800
_080731EC: .4byte 0x0000FFFF
_080731F0: .4byte gBg2Tm
_080731F4: .4byte 0x00004140
_080731F8: .4byte 0x083F371C
_080731FC: .4byte 0x000041C0
_08073200: .4byte gDispIo

	thumb_func_start sub_08073204
sub_08073204: @ 0x08073204
	push {r7, lr}
	sub sp, #0x10
	add r7, sp, #4
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldrh r3, [r1]
	movs r0, #0x50
	str r0, [sp]
	movs r0, #5
	movs r1, #1
	movs r2, #0xa0
	bl Interpolate
	str r0, [r7, #4]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	adds r0, r1, #0
	adds r0, #8
	ldr r1, [r7]
	ldr r2, [r1, #0x34]
	adds r1, r2, #0
	adds r1, #8
	ldr r2, [r7, #4]
	bl sub_0807719C
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x40
	ldrh r3, [r2]
	adds r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x40
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldrh r0, [r1]
	adds r1, r0, #0
	lsls r2, r1, #4
	adds r0, r2, #0
	movs r1, #0x28
	bl __divsi3
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	cmp r0, #0xf
	ble _08073280
	movs r0, #0x10
	str r0, [r7, #8]
_08073280:
	ldr r0, _080732F8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, _080732F8 @ =gDispIo
	ldr r2, [r7, #8]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x44
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r0, _080732F8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080732F8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldrh r0, [r1]
	cmp r0, #0x27
	bls _080732EE
	ldr r0, [r7]
	bl Proc_Break
	bl EndEachSpriteAnimProc
_080732EE:
	add sp, #0x10
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080732F8: .4byte gDispIo

	thumb_func_start sub_080732FC
sub_080732FC: @ 0x080732FC
	push {r7, lr}
	sub sp, #0x10
	add r7, sp, #4
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldrh r3, [r1]
	movs r0, #0x50
	str r0, [sp]
	movs r0, #5
	movs r1, #1
	movs r2, #0xa0
	bl Interpolate
	str r0, [r7, #4]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	adds r0, r1, #0
	adds r0, #8
	ldr r1, [r7]
	ldr r2, [r1, #0x34]
	adds r1, r2, #0
	adds r1, #8
	ldr r2, [r7, #4]
	bl sub_0807719C
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x40
	ldrh r3, [r2]
	adds r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x40
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldrh r0, [r1]
	adds r1, r0, #0
	subs r1, #0x28
	adds r0, r1, #0
	lsls r1, r0, #4
	adds r0, r1, #0
	movs r1, #0x1e
	bl __divsi3
	movs r1, #0x10
	subs r0, r1, r0
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	cmp r0, #0
	bgt _08073380
	movs r0, #0
	str r0, [r7, #8]
_08073380:
	ldr r0, _080733F4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, _080733F4 @ =gDispIo
	ldr r2, [r7, #8]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x44
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r0, _080733F4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080733F4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldrh r0, [r1]
	cmp r0, #0x45
	bls _080733EA
	ldr r0, [r7]
	bl Proc_Break
_080733EA:
	add sp, #0x10
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080733F4: .4byte gDispIo

	thumb_func_start sub_080733F8
sub_080733F8: @ 0x080733F8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl sub_080771D0
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0807340C
sub_0807340C: @ 0x0807340C
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, _08073474 @ =0x08D65AEC
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	ldr r2, _08073478 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x30]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0x11
	ldrsb r1, [r2, r1]
	ldr r2, _08073478 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x34]
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08073474: .4byte 0x08D65AEC
_08073478: .4byte gBmSt

	thumb_func_start sub_0807347C
sub_0807347C: @ 0x0807347C
	push {r4, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0x87
	bl sub_080151FC
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	bl sub_0807456C
	ldr r0, _080734E8 @ =0x083FF230
	ldr r1, _080734EC @ =0x06013800
	bl sub_08013688
	ldr r0, _080734F0 @ =0x083FF508
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080734F4 @ =0x083FF528
	ldr r2, [r7]
	ldr r1, [r2, #0x30]
	ldr r3, [r7]
	ldr r2, [r3, #0x34]
	ldr r3, _080734F8 @ =0x000041C0
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl sub_08012AF0
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x48
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080734E8: .4byte 0x083FF230
_080734EC: .4byte 0x06013800
_080734F0: .4byte 0x083FF508
_080734F4: .4byte 0x083FF528
_080734F8: .4byte 0x000041C0

	thumb_func_start sub_080734FC
sub_080734FC: @ 0x080734FC
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, _08073560 @ =0x08D65B14
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	ldr r2, _08073564 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r1, r2, #0
	adds r1, #8
	str r1, [r0, #0x30]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0x11
	ldrsb r1, [r2, r1]
	ldr r2, _08073564 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r1, r2, #0
	adds r1, #8
	str r1, [r0, #0x34]
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08073560: .4byte 0x08D65B14
_08073564: .4byte gBmSt

	thumb_func_start sub_08073568
sub_08073568: @ 0x08073568
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0x86
	bl sub_080151FC
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08073584
sub_08073584: @ 0x08073584
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	bl sub_0807456C
	ldr r0, _08073638 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08073638 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08073638 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08073638 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r4, _0807363C @ =0x083FDEF0
	movs r0, #2
	bl GetBgChrOffset
	ldr r2, _08073640 @ =0x06002800
	adds r1, r0, r2
	adds r0, r4, #0
	bl sub_08013688
	ldr r1, _08073644 @ =0x08278A30
	adds r0, r1, #0
	movs r1, #0x80
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x48
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x4a
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08073638: .4byte gDispIo
_0807363C: .4byte 0x083FDEF0
_08073640: .4byte 0x06002800
_08073644: .4byte 0x08278A30

	thumb_func_start sub_08073648
sub_08073648: @ 0x08073648
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0x18
	add r7, sp, #0x10
	str r0, [r7]
	ldr r0, _080736DC @ =gBg2Tm
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	adds r1, r2, #0
	cmp r1, #0
	bge _08073664
	adds r1, #7
_08073664:
	asrs r2, r1, #3
	subs r1, r2, #2
	ldr r2, [r7]
	ldr r3, [r2, #0x34]
	adds r2, r3, #0
	cmp r2, #0
	bge _08073674
	adds r2, #7
_08073674:
	asrs r3, r2, #3
	adds r2, r3, #0
	subs r2, #9
	ldr r3, _080736E0 @ =0x00004140
	movs r4, #4
	str r4, [sp]
	movs r4, #0xb
	str r4, [sp, #4]
	ldr r4, _080736E4 @ =0x083FEBC4
	str r4, [sp, #8]
	ldr r4, _080736E8 @ =0x08402F68
	str r4, [r7, #4]
	ldr r5, [r7]
	adds r6, r5, #0
	adds r5, #0x48
	ldrh r6, [r5]
	adds r4, r6, #1
	mov r8, r4
	mov sb, r8
	mov r4, sb
	strh r4, [r5]
	lsls r6, r6, #0x10
	asrs r5, r6, #0x10
	ldr r6, [r7, #4]
	adds r4, r6, r5
	ldrb r5, [r4]
	str r5, [sp, #0xc]
	bl sub_08014E24
	movs r0, #4
	bl EnableBgSync
	ldr r0, _080736E8 @ =0x08402F68
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x48
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0xff
	bne _080736CE
	ldr r0, [r7]
	bl Proc_Break
_080736CE:
	add sp, #0x18
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080736DC: .4byte gBg2Tm
_080736E0: .4byte 0x00004140
_080736E4: .4byte 0x083FEBC4
_080736E8: .4byte 0x08402F68

	thumb_func_start sub_080736EC
sub_080736EC: @ 0x080736EC
	push {r4, r5, r7, lr}
	sub sp, #0x18
	mov r7, sp
	str r0, [r7]
	adds r0, r7, #4
	adds r1, r7, #4
	ldr r2, _080737A4 @ =0x08402F84
	adds r0, r1, #0
	adds r1, r2, #0
	movs r2, #0x13
	bl memcpy
	ldr r0, _080737A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080737A8 @ =gDispIo
	adds r1, r7, #4
	ldr r2, [r7]
	adds r3, r2, #0
	adds r2, #0x4a
	ldrh r3, [r2]
	adds r4, r3, #1
	adds r5, r4, #0
	strh r5, [r2]
	lsls r3, r3, #0x10
	asrs r2, r3, #0x10
	adds r1, r1, r2
	adds r2, r0, #0
	adds r0, #0x44
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, _080737A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080737A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	adds r0, r7, #4
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x4a
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0xff
	bne _0807379C
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x4a
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	bl Proc_Break
_0807379C:
	add sp, #0x18
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080737A4: .4byte 0x08402F84
_080737A8: .4byte gDispIo

	thumb_func_start sub_080737AC
sub_080737AC: @ 0x080737AC
	push {r7, lr}
	sub sp, #8
	add r7, sp, #4
	str r0, [r7]
	ldr r0, _08073848 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x4a
	ldrh r1, [r0]
	adds r2, r1, #1
	adds r3, r2, #0
	strh r3, [r0]
	lsls r0, r1, #0x10
	asrs r3, r0, #0x10
	movs r0, #0x1e
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	ldr r1, _08073848 @ =gDispIo
	adds r2, r1, #0
	adds r1, #0x44
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r0
	adds r0, r2, #0
	strb r0, [r1]
	ldr r0, _08073848 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08073848 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x4a
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0x1e
	ble _0807383E
	ldr r0, [r7]
	bl Proc_Break
_0807383E:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08073848: .4byte gDispIo

	thumb_func_start sub_0807384C
sub_0807384C: @ 0x0807384C
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, _080738AC @ =0x08D65B54
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	ldr r2, _080738B0 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x30]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0x11
	ldrsb r1, [r2, r1]
	ldr r2, _080738B0 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x34]
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080738AC: .4byte 0x08D65B54
_080738B0: .4byte gBmSt

	thumb_func_start sub_080738B4
sub_080738B4: @ 0x080738B4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0x82
	bl sub_080151FC
	ldr r1, _080738DC @ =0x08275ECC
	adds r0, r1, #0
	movs r1, #0x80
	movs r2, #0x20
	bl ApplyPaletteExt
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080738DC: .4byte 0x08275ECC

	thumb_func_start sub_080738E0
sub_080738E0: @ 0x080738E0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0x18
	add r7, sp, #0x10
	str r0, [r7]
	ldr r0, _08073974 @ =gBg2Tm
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	adds r1, r2, #0
	cmp r1, #0
	bge _080738FC
	adds r1, #7
_080738FC:
	asrs r2, r1, #3
	subs r1, r2, #2
	ldr r2, [r7]
	ldr r3, [r2, #0x34]
	adds r2, r3, #0
	cmp r2, #0
	bge _0807390C
	adds r2, #7
_0807390C:
	asrs r3, r2, #3
	adds r2, r3, #0
	subs r2, #9
	ldr r3, _08073978 @ =0x00004140
	movs r4, #4
	str r4, [sp]
	movs r4, #0xb
	str r4, [sp, #4]
	ldr r4, _0807397C @ =0x083FDC84
	str r4, [sp, #8]
	ldr r4, _08073980 @ =0x08402FB0
	str r4, [r7, #4]
	ldr r5, [r7]
	adds r6, r5, #0
	adds r5, #0x48
	ldrh r6, [r5]
	adds r4, r6, #1
	mov r8, r4
	mov sb, r8
	mov r4, sb
	strh r4, [r5]
	lsls r6, r6, #0x10
	asrs r5, r6, #0x10
	ldr r6, [r7, #4]
	adds r4, r6, r5
	ldrb r5, [r4]
	str r5, [sp, #0xc]
	bl sub_08014E24
	movs r0, #4
	bl EnableBgSync
	ldr r0, _08073980 @ =0x08402FB0
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x48
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0xff
	bne _08073966
	ldr r0, [r7]
	bl Proc_Break
_08073966:
	add sp, #0x18
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08073974: .4byte gBg2Tm
_08073978: .4byte 0x00004140
_0807397C: .4byte 0x083FDC84
_08073980: .4byte 0x08402FB0

	thumb_func_start sub_08073984
sub_08073984: @ 0x08073984
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, _080739E4 @ =0x08D65B94
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	ldr r2, _080739E8 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x30]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0x11
	ldrsb r1, [r2, r1]
	ldr r2, _080739E8 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x34]
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080739E4: .4byte 0x08D65B94
_080739E8: .4byte gBmSt

	thumb_func_start sub_080739EC
sub_080739EC: @ 0x080739EC
	push {r4, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0x85
	bl sub_080151FC
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	bl sub_0807456C
	ldr r0, _08073A44 @ =0x0827BC24
	ldr r1, _08073A48 @ =0x06013800
	bl sub_08013688
	ldr r0, _08073A4C @ =0x0827BE0C
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08073A50 @ =0x083FEE30
	ldr r2, [r7]
	ldr r1, [r2, #0x30]
	ldr r2, [r7]
	ldr r3, [r2, #0x34]
	adds r2, r3, #0
	subs r2, #0x10
	ldr r3, _08073A54 @ =0x000041C0
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl sub_08012AF0
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08073A44: .4byte 0x0827BC24
_08073A48: .4byte 0x06013800
_08073A4C: .4byte 0x0827BE0C
_08073A50: .4byte 0x083FEE30
_08073A54: .4byte 0x000041C0

	thumb_func_start sub_08073A58
sub_08073A58: @ 0x08073A58
	push {r4, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0x85
	bl sub_080151FC
	ldr r0, _08073A90 @ =0x083FEE30
	ldr r2, [r7]
	ldr r1, [r2, #0x30]
	ldr r2, [r7]
	ldr r3, [r2, #0x34]
	adds r2, r3, #0
	subs r2, #8
	ldr r3, _08073A94 @ =0x000041C0
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl sub_08012AF0
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08073A90: .4byte 0x083FEE30
_08073A94: .4byte 0x000041C0

	thumb_func_start sub_08073A98
sub_08073A98: @ 0x08073A98
	push {r4, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0x85
	bl sub_080151FC
	ldr r0, _08073ACC @ =0x083FEE30
	ldr r2, [r7]
	ldr r1, [r2, #0x30]
	ldr r3, [r7]
	ldr r2, [r3, #0x34]
	ldr r3, _08073AD0 @ =0x000041C0
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl sub_08012AF0
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08073ACC: .4byte 0x083FEE30
_08073AD0: .4byte 0x000041C0

	thumb_func_start sub_08073AD4
sub_08073AD4: @ 0x08073AD4
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, _08073B38 @ =0x08D65BD4
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	ldr r2, _08073B3C @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x30]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0x11
	ldrsb r1, [r2, r1]
	ldr r2, _08073B3C @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r1, r2, #0
	adds r1, #0x12
	str r1, [r0, #0x34]
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08073B38: .4byte 0x08D65BD4
_08073B3C: .4byte gBmSt

	thumb_func_start sub_08073B40
sub_08073B40: @ 0x08073B40
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0xfd
	bl sub_080151FC
	bl sub_0807702C
	bl sub_0807706C
	ldr r1, _08073C0C @ =sub_08077248
	adds r0, r1, #0
	bl SetOnHBlankA
	bl sub_0807456C
	ldr r0, _08073C10 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08073C10 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08073C10 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08073C10 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08073C14 @ =gBg2Tm
	ldr r1, _08073C18 @ =gBuf
	ldr r2, _08073C1C @ =0x00004140
	bl TmApplyTsa_thm
	movs r0, #4
	bl EnableBgSync
	movs r0, #2
	movs r1, #0
	movs r2, #1
	ldr r3, [r7]
	bl sub_080746E0
	ldr r1, _08073C20 @ =0x08D668CC
	adds r0, r1, #0
	ldr r1, [r7]
	bl Proc_Start
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x48
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x4a
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08073C0C: .4byte sub_08077248
_08073C10: .4byte gDispIo
_08073C14: .4byte gBg2Tm
_08073C18: .4byte gBuf
_08073C1C: .4byte 0x00004140
_08073C20: .4byte 0x08D668CC

	thumb_func_start sub_08073C24
sub_08073C24: @ 0x08073C24
	push {r4, r5, r7, lr}
	sub sp, #8
	add r7, sp, #4
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0xb
	ble _08073C66
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x48
	ldrh r3, [r2]
	subs r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x48
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	bl Proc_Break
_08073C66:
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldr r2, [r7]
	ldr r1, [r2, #0x34]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r4, r3, #0
	adds r4, #0x48
	ldr r3, [r7]
	ldr r4, [r7]
	adds r2, r4, #0
	adds r4, #0x48
	ldrh r5, [r4]
	adds r2, r5, #1
	adds r4, r3, #0
	adds r3, #0x48
	ldrh r4, [r3]
	movs r5, #0
	ands r4, r5
	adds r5, r4, #0
	adds r4, r2, #0
	orrs r5, r4
	adds r4, r5, #0
	strh r4, [r3]
	lsls r3, r2, #0x10
	asrs r2, r3, #0x10
	ldr r3, _08073CAC @ =0x08D65C1C
	str r3, [sp]
	movs r3, #0xc
	bl sub_0807755C
	add sp, #8
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08073CAC: .4byte 0x08D65C1C

	thumb_func_start sub_08073CB0
sub_08073CB0: @ 0x08073CB0
	push {r4, r5, r7, lr}
	sub sp, #8
	add r7, sp, #4
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0
	bgt _08073CF2
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x48
	ldrh r3, [r2]
	adds r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x48
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	bl Proc_Break
_08073CF2:
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldr r2, [r7]
	ldr r1, [r2, #0x34]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r4, r3, #0
	adds r4, #0x48
	ldr r3, [r7]
	ldr r4, [r7]
	adds r2, r4, #0
	adds r4, #0x48
	ldrh r5, [r4]
	subs r2, r5, #1
	adds r4, r3, #0
	adds r3, #0x48
	ldrh r4, [r3]
	movs r5, #0
	ands r4, r5
	adds r5, r4, #0
	adds r4, r2, #0
	orrs r5, r4
	adds r4, r5, #0
	strh r4, [r3]
	lsls r3, r2, #0x10
	asrs r2, r3, #0x10
	ldr r3, _08073D38 @ =0x08D65C1C
	str r3, [sp]
	movs r3, #0xc
	bl sub_0807755C
	add sp, #8
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08073D38: .4byte 0x08D65C1C

	thumb_func_start sub_08073D3C
sub_08073D3C: @ 0x08073D3C
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, _08073D9C @ =0x08D65C24
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	ldr r2, _08073DA0 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x30]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0x11
	ldrsb r1, [r2, r1]
	ldr r2, _08073DA0 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x34]
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08073D9C: .4byte 0x08D65C24
_08073DA0: .4byte gBmSt

	thumb_func_start sub_08073DA4
sub_08073DA4: @ 0x08073DA4
	push {r4, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0x83
	bl sub_080151FC
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	bl sub_0807456C
	ldr r4, _08073EB0 @ =0x083FFA38
	movs r0, #2
	bl GetBgChrOffset
	ldr r2, _08073EB4 @ =0x06002800
	adds r1, r0, r2
	adds r0, r4, #0
	bl sub_08013688
	ldr r0, _08073EB8 @ =0x083FF5F8
	ldr r1, _08073EBC @ =0x06013800
	bl sub_08013688
	ldr r1, _08073EC0 @ =0x083FFB48
	adds r0, r1, #0
	movs r1, #0x80
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08073EC0 @ =0x083FFB48
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08073EC4 @ =0x083FFB68
	ldr r2, [r7]
	ldr r1, [r2, #0x30]
	ldr r2, [r7]
	ldr r3, [r2, #0x34]
	movs r4, #0x80
	lsls r4, r4, #3
	adds r2, r3, #0
	orrs r2, r4
	ldr r3, _08073EC8 @ =0x000041C0
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl sub_08012AF0
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x48
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08073ECC @ =0x030027CC
	ldr r1, _08073ECC @ =0x030027CC
	ldrh r2, [r1]
	ldr r3, _08073ED0 @ =0x0000FFE0
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08073ECC @ =0x030027CC
	ldr r1, _08073ECC @ =0x030027CC
	ldrh r2, [r1]
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08073ED4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08073ED4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08073ED4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08073ED4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08073ED4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08073EB0: .4byte 0x083FFA38
_08073EB4: .4byte 0x06002800
_08073EB8: .4byte 0x083FF5F8
_08073EBC: .4byte 0x06013800
_08073EC0: .4byte 0x083FFB48
_08073EC4: .4byte 0x083FFB68
_08073EC8: .4byte 0x000041C0
_08073ECC: .4byte 0x030027CC
_08073ED0: .4byte 0x0000FFE0
_08073ED4: .4byte gDispIo

	thumb_func_start sub_08073ED8
sub_08073ED8: @ 0x08073ED8
	push {r4, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0x84
	bl sub_080151FC
	ldr r0, _08073FB0 @ =gBg2Tm
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	adds r1, r2, #0
	cmp r1, #0
	bge _08073EF8
	adds r1, #7
_08073EF8:
	asrs r2, r1, #3
	subs r1, r2, #2
	ldr r2, [r7]
	ldr r3, [r2, #0x34]
	adds r2, r3, #0
	cmp r2, #0
	bge _08073F08
	adds r2, #7
_08073F08:
	asrs r3, r2, #3
	subs r2, r3, #2
	ldr r3, _08073FB4 @ =0x00004140
	movs r4, #4
	str r4, [sp]
	movs r4, #4
	str r4, [sp, #4]
	bl sub_08014C38
	movs r0, #4
	bl EnableBgSync
	ldr r0, _08073FB8 @ =0x030027CC
	ldr r1, _08073FB8 @ =0x030027CC
	ldrh r2, [r1]
	ldr r3, _08073FBC @ =0x0000FFE0
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08073FB8 @ =0x030027CC
	ldr r1, _08073FB8 @ =0x030027CC
	ldrh r2, [r1]
	movs r3, #4
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08073FC0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08073FC0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08073FC0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08073FC0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08073FC0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08073FB0: .4byte gBg2Tm
_08073FB4: .4byte 0x00004140
_08073FB8: .4byte 0x030027CC
_08073FBC: .4byte 0x0000FFE0
_08073FC0: .4byte gDispIo

	thumb_func_start sub_08073FC4
sub_08073FC4: @ 0x08073FC4
	push {r7, lr}
	sub sp, #8
	add r7, sp, #4
	str r0, [r7]
	ldr r0, _08074060 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x48
	ldrh r1, [r0]
	adds r2, r1, #1
	adds r3, r2, #0
	strh r3, [r0]
	lsls r0, r1, #0x10
	asrs r3, r0, #0x10
	movs r0, #0x1e
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	ldr r1, _08074060 @ =gDispIo
	adds r2, r1, #0
	adds r1, #0x44
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r0
	adds r0, r2, #0
	strb r0, [r1]
	ldr r0, _08074060 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08074060 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0x1d
	ble _08074056
	ldr r0, [r7]
	bl Proc_Break
_08074056:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08074060: .4byte gDispIo

	thumb_func_start sub_08074064
sub_08074064: @ 0x08074064
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, _080740C4 @ =0x08D65C64
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	ldr r2, _080740C8 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x30]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0x11
	ldrsb r1, [r2, r1]
	ldr r2, _080740C8 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x34]
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080740C4: .4byte 0x08D65C64
_080740C8: .4byte gBmSt

	thumb_func_start sub_080740CC
sub_080740CC: @ 0x080740CC
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0x88
	bl sub_080151FC
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	bl sub_0807456C
	ldr r0, _0807418C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0807418C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0807418C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0807418C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r4, _08074190 @ =0x083FFCA0
	movs r0, #2
	bl GetBgChrOffset
	ldr r2, _08074194 @ =0x06002800
	adds r1, r0, r2
	adds r0, r4, #0
	bl sub_08013688
	ldr r1, _08074198 @ =0x0827D0F0
	adds r0, r1, #0
	movs r1, #0x80
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x48
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x4a
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807418C: .4byte gDispIo
_08074190: .4byte 0x083FFCA0
_08074194: .4byte 0x06002800
_08074198: .4byte 0x0827D0F0

	thumb_func_start sub_0807419C
sub_0807419C: @ 0x0807419C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0x18
	add r7, sp, #0x10
	str r0, [r7]
	ldr r0, _08074230 @ =gBg2Tm
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	adds r1, r2, #0
	cmp r1, #0
	bge _080741B8
	adds r1, #7
_080741B8:
	asrs r2, r1, #3
	subs r1, r2, #2
	ldr r2, [r7]
	ldr r3, [r2, #0x34]
	adds r2, r3, #0
	cmp r2, #0
	bge _080741C8
	adds r2, #7
_080741C8:
	asrs r3, r2, #3
	adds r2, r3, #0
	subs r2, #8
	ldr r3, _08074234 @ =0x00004140
	movs r4, #4
	str r4, [sp]
	movs r4, #0xa
	str r4, [sp, #4]
	ldr r4, _08074238 @ =0x0840085C
	str r4, [sp, #8]
	ldr r4, _0807423C @ =0x08403050
	str r4, [r7, #4]
	ldr r5, [r7]
	adds r6, r5, #0
	adds r5, #0x48
	ldrh r6, [r5]
	adds r4, r6, #1
	mov r8, r4
	mov sb, r8
	mov r4, sb
	strh r4, [r5]
	lsls r6, r6, #0x10
	asrs r5, r6, #0x10
	ldr r6, [r7, #4]
	adds r4, r6, r5
	ldrb r5, [r4]
	str r5, [sp, #0xc]
	bl sub_08014E24
	movs r0, #4
	bl EnableBgSync
	ldr r0, _0807423C @ =0x08403050
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x48
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0xff
	bne _08074222
	ldr r0, [r7]
	bl Proc_Break
_08074222:
	add sp, #0x18
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08074230: .4byte gBg2Tm
_08074234: .4byte 0x00004140
_08074238: .4byte 0x0840085C
_0807423C: .4byte 0x08403050

	thumb_func_start sub_08074240
sub_08074240: @ 0x08074240
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, _080742A0 @ =0x08D65C8C
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	ldr r1, _080742A4 @ =gBmSt
	movs r3, #0xc
	ldrsh r2, [r1, r3]
	asrs r1, r2, #4
	adds r3, r1, #0
	lsls r2, r3, #0x10
	asrs r1, r2, #0x10
	ldr r2, [r7]
	subs r1, r2, r1
	lsls r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r1, r2, #0
	adds r1, #8
	str r1, [r0, #0x30]
	ldr r0, [r7, #8]
	ldr r1, _080742A4 @ =gBmSt
	movs r3, #0xe
	ldrsh r2, [r1, r3]
	asrs r1, r2, #4
	adds r3, r1, #0
	lsls r2, r3, #0x10
	asrs r1, r2, #0x10
	ldr r2, [r7, #4]
	subs r1, r2, r1
	lsls r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r1, r2, #0
	adds r1, #8
	str r1, [r0, #0x34]
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080742A0: .4byte 0x08D65C8C
_080742A4: .4byte gBmSt

	thumb_func_start sub_080742A8
sub_080742A8: @ 0x080742A8
	push {r4, r7, lr}
	mov r7, sp
	ldr r0, _080742D8 @ =gActionSt
	ldrb r1, [r0, #0xc]
	adds r0, r1, #0
	bl GetUnit
	adds r4, r0, #0
	ldr r0, [r4, #0xc]
	movs r1, #1
	orrs r0, r1
	str r0, [r4, #0xc]
	ldr r1, _080742D8 @ =gActionSt
	movs r0, #0x13
	ldrsb r0, [r1, r0]
	ldr r1, _080742D8 @ =gActionSt
	movs r2, #0x14
	ldrsb r2, [r1, r2]
	adds r1, r2, #0
	bl sub_08079710
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080742D8: .4byte gActionSt

	thumb_func_start sub_080742DC
sub_080742DC: @ 0x080742DC
	push {r4, r7, lr}
	mov r7, sp
	ldr r0, _080742FC @ =gActionSt
	ldrb r1, [r0, #0xc]
	adds r0, r1, #0
	bl GetUnit
	adds r4, r0, #0
	ldr r0, [r4, #0xc]
	movs r1, #1
	bics r0, r1
	str r0, [r4, #0xc]
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080742FC: .4byte gActionSt

	thumb_func_start sub_08074300
sub_08074300: @ 0x08074300
	push {r4, r7, lr}
	sub sp, #0x14
	add r7, sp, #0x10
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0x8d
	bl sub_080151FC
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r4, _08074414 @ =0x083FDB40
	movs r0, #2
	bl GetBgChrOffset
	ldr r2, _08074418 @ =0x06002800
	adds r1, r0, r2
	adds r0, r4, #0
	bl sub_08013688
	ldr r0, _0807441C @ =gBg2Tm
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	adds r1, r2, #0
	cmp r1, #0
	bge _0807433C
	adds r1, #7
_0807433C:
	asrs r2, r1, #3
	subs r1, r2, #2
	ldr r2, [r7]
	ldr r3, [r2, #0x34]
	adds r2, r3, #0
	cmp r2, #0
	bge _0807434C
	adds r2, #7
_0807434C:
	asrs r3, r2, #3
	subs r2, r3, #2
	ldr r3, _08074420 @ =0x00004140
	movs r4, #4
	str r4, [sp]
	movs r4, #4
	str r4, [sp, #4]
	ldr r4, _08074424 @ =0x083FDC60
	str r4, [sp, #8]
	movs r4, #0
	str r4, [sp, #0xc]
	bl sub_08014E24
	movs r0, #4
	bl EnableBgSync
	ldr r0, _08074428 @ =0x083FDACC
	ldr r1, _0807442C @ =0x06013800
	bl sub_08013688
	ldr r0, _08074430 @ =0x083FDB20
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08074434 @ =0x083FDC40
	ldr r1, [r7]
	str r1, [sp]
	movs r1, #0x80
	movs r2, #0x20
	movs r3, #4
	bl sub_08014BA4
	bl sub_0807702C
	bl sub_0807706C
	bl sub_0807456C
	ldr r0, _08074438 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08074438 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08074438 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08074438 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x48
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	add sp, #0x14
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08074414: .4byte 0x083FDB40
_08074418: .4byte 0x06002800
_0807441C: .4byte gBg2Tm
_08074420: .4byte 0x00004140
_08074424: .4byte 0x083FDC60
_08074428: .4byte 0x083FDACC
_0807442C: .4byte 0x06013800
_08074430: .4byte 0x083FDB20
_08074434: .4byte 0x083FDC40
_08074438: .4byte gDispIo

	thumb_func_start sub_0807443C
sub_0807443C: @ 0x0807443C
	push {r4, r7, lr}
	sub sp, #0x10
	add r7, sp, #8
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	movs r0, #0
	ldrsh r3, [r1, r0]
	movs r0, #0x1e
	str r0, [sp]
	movs r0, #5
	movs r1, #1
	movs r2, #0x10
	bl Interpolate
	str r0, [r7, #4]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x48
	ldrh r3, [r2]
	adds r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x48
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldr r2, [r7]
	ldr r1, [r2, #0x34]
	ldr r2, [r7, #4]
	bl sub_0807719C
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0x1d
	ble _080744E6
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x48
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	bl Proc_Break
	ldr r0, _080744F0 @ =0x083F3778
	ldr r2, [r7]
	ldr r1, [r2, #0x30]
	ldr r3, [r7]
	ldr r2, [r3, #0x34]
	ldr r3, _080744F4 @ =0x000041C0
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl sub_08012AF0
	ldr r0, _080744F0 @ =0x083F3778
	ldr r2, [r7]
	ldr r1, [r2, #0x30]
	ldr r3, [r7]
	ldr r2, [r3, #0x34]
	ldr r3, _080744F4 @ =0x000041C0
	movs r4, #1
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl sub_08012AF0
_080744E6:
	add sp, #0x10
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080744F0: .4byte 0x083F3778
_080744F4: .4byte 0x000041C0

	thumb_func_start sub_080744F8
sub_080744F8: @ 0x080744F8
	push {r7, lr}
	sub sp, #0xc
	add r7, sp, #4
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	movs r0, #0
	ldrsh r3, [r1, r0]
	movs r0, #0x1e
	str r0, [sp]
	movs r0, #5
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	str r0, [r7, #4]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x48
	ldrh r3, [r2]
	adds r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x48
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldr r2, [r7]
	ldr r1, [r2, #0x34]
	ldr r2, [r7, #4]
	bl sub_0807719C
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0x1d
	ble _08074562
	ldr r0, [r7]
	bl Proc_Break
_08074562:
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807456C
sub_0807456C: @ 0x0807456C
	push {r7, lr}
	mov r7, sp
	ldr r0, _080746D0 @ =gDispIo
	ldrb r1, [r0, #0xc]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0xc]
	ldr r0, _080746D0 @ =gDispIo
	ldrb r1, [r0, #0x10]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0x10]
	ldr r0, _080746D0 @ =gDispIo
	ldrb r1, [r0, #0x14]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0x14]
	ldr r0, _080746D0 @ =gDispIo
	ldrb r1, [r0, #0x18]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x18]
	ldr r0, _080746D4 @ =0x030027CC
	ldr r1, _080746D4 @ =0x030027CC
	ldrh r2, [r1]
	ldr r3, _080746D8 @ =0x0000FFE0
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _080746D4 @ =0x030027CC
	ldr r1, _080746D4 @ =0x030027CC
	ldrh r2, [r1]
	movs r3, #4
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _080746D0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080746D4 @ =0x030027CC
	ldr r1, _080746D4 @ =0x030027CC
	ldrh r2, [r1]
	ldr r3, _080746DC @ =0x0000E0FF
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _080746D4 @ =0x030027CC
	ldr r1, _080746D4 @ =0x030027CC
	ldrh r2, [r1]
	movs r3, #0xc0
	lsls r3, r3, #5
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _080746D0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3d
	ldrb r1, [r0]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080746D0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080746D0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080746D0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080746D0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080746D0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #4
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080746D0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080746D0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080746D0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080746D0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080746D0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0xfb
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080746D0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080746D0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080746D0: .4byte gDispIo
_080746D4: .4byte 0x030027CC
_080746D8: .4byte 0x0000FFE0
_080746DC: .4byte 0x0000E0FF

	thumb_func_start sub_080746E0
sub_080746E0: @ 0x080746E0
	push {r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, _08074758 @ =0x08D65CE4
	ldr r1, [r7, #0xc]
	bl Proc_Start
	str r0, [r7, #0x10]
	ldr r0, [r7, #0x10]
	ldr r1, [r7]
	str r1, [r0, #0x58]
	ldr r0, [r7, #0x10]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r1, [r7, #0x10]
	ldr r2, [r7, #4]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x66
	ldrh r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strh r2, [r1]
	ldr r0, [r7, #0x10]
	adds r1, r0, #0
	adds r0, #0x68
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r1, [r7, #0x10]
	ldr r2, [r7, #8]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x6a
	ldrh r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strh r2, [r1]
	add sp, #0x14
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08074758: .4byte 0x08D65CE4

	thumb_func_start sub_0807475C
sub_0807475C: @ 0x0807475C
	push {r7, lr}
	mov r7, sp
	ldr r1, _08074770 @ =0x08D65CE4
	adds r0, r1, #0
	bl sub_08004748
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08074770: .4byte 0x08D65CE4

	thumb_func_start sub_08074774
sub_08074774: @ 0x08074774
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x58]
	adds r0, r1, #0
	lsls r1, r0, #0x10
	lsrs r0, r1, #0x10
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x64
	ldrh r1, [r2]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x68
	ldrh r2, [r3]
	bl SetBgOffset
	ldr r0, [r7]
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x64
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	ldrh r1, [r1]
	ldrh r2, [r3]
	adds r1, r1, r2
	adds r2, r0, #0
	adds r0, #0x64
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x68
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x6a
	ldrh r1, [r1]
	ldrh r2, [r3]
	adds r1, r1, r2
	adds r2, r0, #0
	adds r0, #0x68
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080747F4
sub_080747F4: @ 0x080747F4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r1, _08074894 @ =gBg1Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	ldr r5, _08074898 @ =0x081E0C60
	movs r0, #1
	bl GetBgChrOffset
	ldr r2, _0807489C @ =0x06004000
	adds r1, r0, r2
	adds r0, r5, #0
	bl sub_08013688
	ldr r0, _080748A0 @ =0x081E0EAC
	ldr r1, _080748A4 @ =gBuf
	bl sub_08013688
	ldr r0, _080748A4 @ =gBuf
	ldr r1, _08074894 @ =gBg1Tm
	movs r2, #0xe0
	lsls r2, r2, #2
	movs r3, #0xa4
	lsls r3, r3, #7
	bl sub_080150CC
	ldr r1, _080748A8 @ =0x081E0FA8
	adds r0, r1, #0
	movs r1, #0xa0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r1, [r7, #8]
	lsls r0, r1, #5
	adds r1, r0, #1
	ldr r2, [r7, #4]
	adds r0, r1, r2
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, _080748AC @ =gBg0Tm
	adds r5, r0, r1
	ldr r0, _080748B0 @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, [r1, #4]
	ldrh r1, [r0]
	adds r0, r1, #0
	bl DecodeMsg
	adds r2, r0, #0
	adds r0, r5, #0
	movs r1, #0
	bl sub_08014B14
	movs r0, #0
	str r0, [r7, #0xc]
_0807487E:
	ldr r0, _080748B4 @ =0x08D65CF4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #1
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0xff
	bne _080748B8
	b _08074954
	.align 2, 0
_08074894: .4byte gBg1Tm
_08074898: .4byte 0x081E0C60
_0807489C: .4byte 0x06004000
_080748A0: .4byte 0x081E0EAC
_080748A4: .4byte gBuf
_080748A8: .4byte 0x081E0FA8
_080748AC: .4byte gBg0Tm
_080748B0: .4byte 0x0203E0D4
_080748B4: .4byte 0x08D65CF4
_080748B8:
	ldr r0, _08074928 @ =0x08D65CF4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #1
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldrb r1, [r0, #1]
	ldr r0, [r7, #8]
	adds r1, r1, r0
	lsls r0, r1, #5
	ldr r1, _08074928 @ =0x08D65CF4
	ldr r2, [r7, #0xc]
	adds r5, r2, #0
	lsls r3, r5, #1
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrb r2, [r1]
	ldr r3, [r7, #4]
	adds r1, r2, r3
	adds r0, r0, r1
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, _0807492C @ =gBg0Tm
	adds r5, r0, r1
	ldr r0, _08074930 @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl UnitHasMagicRank
	strb r0, [r7, #0x10]
	bl GetLang
	ldr r1, _08074928 @ =0x08D65CF4
	ldr r2, [r7, #0xc]
	mov r8, r2
	mov r6, r8
	lsls r3, r6, #1
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r4, r2, #0
	ldrb r2, [r7, #0x10]
	lsls r3, r2, #0x18
	asrs r2, r3, #0x18
	cmp r2, #1
	bne _08074934
	adds r2, r4, #4
	b _08074936
	.align 2, 0
_08074928: .4byte 0x08D65CF4
_0807492C: .4byte gBg0Tm
_08074930: .4byte 0x0203E0D4
_08074934:
	adds r2, r4, #0
_08074936:
	adds r3, r1, #4
	adds r1, r3, r2
	lsls r2, r0, #2
	ldr r1, [r1]
	adds r0, r2, r1
	ldr r3, [r0]
	adds r0, r5, #0
	movs r1, #3
	movs r2, #3
	bl sub_08014AB0
	ldr r0, [r7, #0xc]
	adds r1, r0, #1
	str r1, [r7, #0xc]
	b _0807487E
_08074954:
	movs r0, #3
	bl EnableBgSync
	add sp, #0x14
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08074968
sub_08074968: @ 0x08074968
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, [r7, #0x28]
	adds r1, r7, #0
	adds r1, #0x10
	strb r0, [r1]
	ldr r0, _080749E8 @ =0x08D65CF4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #1
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldrb r1, [r0, #1]
	ldr r2, [r7, #8]
	adds r0, r1, r2
	lsls r1, r0, #5
	adds r0, r1, #4
	ldr r1, _080749E8 @ =0x08D65CF4
	ldr r2, [r7, #0xc]
	adds r5, r2, #0
	lsls r3, r5, #1
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrb r2, [r1]
	ldr r3, [r7, #4]
	adds r1, r2, r3
	adds r0, r0, r1
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, _080749EC @ =gBg0Tm
	adds r5, r0, r1
	ldr r1, [r7, #0xc]
	ldr r0, [r7]
	bl sub_08074B68
	adds r4, r0, #0
	adds r6, r4, #0
	adds r0, r7, #0
	adds r0, #0x10
	movs r1, #0
	ldrsb r1, [r0, r1]
	cmp r1, #0
	beq _080749D6
	ldr r1, [r7, #0xc]
	ldr r0, [r7]
	bl sub_080749F0
	adds r6, r6, r0
_080749D6:
	adds r0, r5, #0
	movs r1, #2
	adds r2, r6, #0
	bl sub_08006074
	add sp, #0x14
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080749E8: .4byte 0x08D65CF4
_080749EC: .4byte gBg0Tm

	thumb_func_start sub_080749F0
sub_080749F0: @ 0x080749F0
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, [r7, #4]
	cmp r0, #8
	bls _08074A02
	b _08074B5C
_08074A02:
	ldr r0, [r7, #4]
	adds r1, r0, #0
	lsls r0, r1, #2
	ldr r1, _08074A10 @ =_08074A14
	adds r0, r0, r1
	ldr r1, [r0]
	mov pc, r1
	.align 2, 0
_08074A10: .4byte _08074A14
_08074A14: @ jump table
	.4byte _08074A38 @ case 0
	.4byte _08074A3C @ case 1
	.4byte _08074A60 @ case 2
	.4byte _08074A84 @ case 3
	.4byte _08074AA8 @ case 4
	.4byte _08074ACC @ case 5
	.4byte _08074AF0 @ case 6
	.4byte _08074B14 @ case 7
	.4byte _08074B38 @ case 8
_08074A38:
	movs r0, #1
	b _08074B60
_08074A3C:
	ldr r0, _08074A5C @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	adds r2, #0x73
	movs r1, #0
	ldrsb r1, [r2, r1]
	adds r0, r1, #0
	b _08074B60
	.align 2, 0
_08074A5C: .4byte 0x0203E0D4
_08074A60:
	ldr r0, _08074A80 @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	adds r2, #0x74
	movs r1, #0
	ldrsb r1, [r2, r1]
	adds r0, r1, #0
	b _08074B60
	.align 2, 0
_08074A80: .4byte 0x0203E0D4
_08074A84:
	ldr r0, _08074AA4 @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	adds r2, #0x75
	movs r1, #0
	ldrsb r1, [r2, r1]
	adds r0, r1, #0
	b _08074B60
	.align 2, 0
_08074AA4: .4byte 0x0203E0D4
_08074AA8:
	ldr r0, _08074AC8 @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	adds r2, #0x76
	movs r1, #0
	ldrsb r1, [r2, r1]
	adds r0, r1, #0
	b _08074B60
	.align 2, 0
_08074AC8: .4byte 0x0203E0D4
_08074ACC:
	ldr r0, _08074AEC @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	adds r2, #0x79
	movs r1, #0
	ldrsb r1, [r2, r1]
	adds r0, r1, #0
	b _08074B60
	.align 2, 0
_08074AEC: .4byte 0x0203E0D4
_08074AF0:
	ldr r0, _08074B10 @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	adds r2, #0x77
	movs r1, #0
	ldrsb r1, [r2, r1]
	adds r0, r1, #0
	b _08074B60
	.align 2, 0
_08074B10: .4byte 0x0203E0D4
_08074B14:
	ldr r0, _08074B34 @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	adds r2, #0x78
	movs r1, #0
	ldrsb r1, [r2, r1]
	adds r0, r1, #0
	b _08074B60
	.align 2, 0
_08074B34: .4byte 0x0203E0D4
_08074B38:
	ldr r0, _08074B58 @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	adds r2, #0x7a
	movs r1, #0
	ldrsb r1, [r2, r1]
	adds r0, r1, #0
	b _08074B60
	.align 2, 0
_08074B58: .4byte 0x0203E0D4
_08074B5C:
	movs r0, #0
	b _08074B60
_08074B60:
	add sp, #8
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_08074B68
sub_08074B68: @ 0x08074B68
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, _08074BA4 @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r2, #0xb
	ldrsb r2, [r1, r2]
	adds r0, r2, #0
	bl GetUnit
	str r0, [r7, #8]
	ldr r0, [r7, #4]
	cmp r0, #8
	bhi _08074C50
	ldr r0, [r7, #4]
	adds r1, r0, #0
	lsls r0, r1, #2
	ldr r1, _08074BA8 @ =_08074BAC
	adds r0, r0, r1
	ldr r1, [r0]
	mov pc, r1
	.align 2, 0
_08074BA4: .4byte 0x0203E0D4
_08074BA8: .4byte _08074BAC
_08074BAC: @ jump table
	.4byte _08074BD0 @ case 0
	.4byte _08074BF4 @ case 1
	.4byte _08074BFE @ case 2
	.4byte _08074C08 @ case 3
	.4byte _08074C12 @ case 4
	.4byte _08074C1C @ case 5
	.4byte _08074C26 @ case 6
	.4byte _08074C30 @ case 7
	.4byte _08074C3A @ case 8
_08074BD0:
	ldr r0, _08074BF0 @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	adds r2, #0x70
	movs r1, #0
	ldrsb r1, [r2, r1]
	adds r0, r1, #0
	b _08074C54
	.align 2, 0
_08074BF0: .4byte 0x0203E0D4
_08074BF4:
	ldr r0, [r7, #8]
	movs r1, #0x12
	ldrsb r1, [r0, r1]
	adds r0, r1, #0
	b _08074C54
_08074BFE:
	ldr r0, [r7, #8]
	movs r1, #0x14
	ldrsb r1, [r0, r1]
	adds r0, r1, #0
	b _08074C54
_08074C08:
	ldr r0, [r7, #8]
	movs r1, #0x15
	ldrsb r1, [r0, r1]
	adds r0, r1, #0
	b _08074C54
_08074C12:
	ldr r0, [r7, #8]
	movs r1, #0x16
	ldrsb r1, [r0, r1]
	adds r0, r1, #0
	b _08074C54
_08074C1C:
	ldr r0, [r7, #8]
	movs r1, #0x19
	ldrsb r1, [r0, r1]
	adds r0, r1, #0
	b _08074C54
_08074C26:
	ldr r0, [r7, #8]
	movs r1, #0x17
	ldrsb r1, [r0, r1]
	adds r0, r1, #0
	b _08074C54
_08074C30:
	ldr r0, [r7, #8]
	movs r1, #0x18
	ldrsb r1, [r0, r1]
	adds r0, r1, #0
	b _08074C54
_08074C3A:
	ldr r0, [r7, #8]
	ldr r2, [r0, #4]
	movs r1, #0x11
	ldrsb r1, [r2, r1]
	ldr r0, [r7, #8]
	ldr r2, [r0]
	movs r0, #0x13
	ldrsb r0, [r2, r0]
	adds r1, r1, r0
	adds r0, r1, #0
	b _08074C54
_08074C50:
	movs r0, #0
	b _08074C54
_08074C54:
	add sp, #0xc
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_08074C5C
sub_08074C5C: @ 0x08074C5C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl EndEachSpriteAnimProc
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08074C70
sub_08074C70: @ 0x08074C70
	push {r7, lr}
	sub sp, #0x18
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, _08074D24 @ =0x08D65D6C
	ldr r1, [r7, #0xc]
	bl Proc_Start
	str r0, [r7, #0x10]
	ldr r0, [r7, #0x10]
	ldr r2, [r7]
	adds r1, r2, #0
	ldrh r2, [r0, #0x2a]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x2a]
	ldr r0, [r7, #0x10]
	ldr r2, [r7, #4]
	adds r1, r2, #0
	ldrh r2, [r0, #0x2c]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x2c]
	ldr r0, [r7, #0x10]
	ldr r2, [r7, #8]
	adds r1, r2, #0
	ldrh r2, [r0, #0x2e]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x2e]
	ldr r0, _08074D28 @ =0x083F9F2C
	ldr r1, [r7]
	lsls r2, r1, #0x16
	lsrs r1, r2, #0x16
	lsls r2, r1, #5
	ldr r3, _08074D2C @ =0x06010000
	adds r1, r2, r3
	bl sub_08013688
	ldr r0, _08074D30 @ =0x083F9ECC
	ldr r2, [r7, #4]
	adds r1, r2, #0
	adds r1, #0x10
	adds r2, r1, #0
	lsls r1, r2, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08074D30 @ =0x083F9ECC
	ldr r2, [r7, #4]
	adds r1, r2, #0
	adds r1, #0x11
	adds r2, r1, #0
	lsls r1, r2, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08074D34 @ =0x08D65D7C
	ldr r1, [r7, #0x10]
	bl Proc_Start
	str r0, [r7, #0x14]
	ldr r1, [r7, #0x14]
	ldr r2, [r7, #4]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x64
	ldrh r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strh r2, [r1]
	add sp, #0x18
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08074D24: .4byte 0x08D65D6C
_08074D28: .4byte 0x083F9F2C
_08074D2C: .4byte 0x06010000
_08074D30: .4byte 0x083F9ECC
_08074D34: .4byte 0x08D65D7C

	thumb_func_start sub_08074D38
sub_08074D38: @ 0x08074D38
	push {r7, lr}
	mov r7, sp
	ldr r1, _08074D4C @ =0x08D65D6C
	adds r0, r1, #0
	bl sub_08004748
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08074D4C: .4byte 0x08D65D6C

	thumb_func_start sub_08074D50
sub_08074D50: @ 0x08074D50
	push {r4, r5, r6, r7, lr}
	sub sp, #0x2c
	add r7, sp, #8
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, _08074DD0 @ =0x083FA1B8
	str r0, [r7, #0x20]
	ldr r1, _08074DD4 @ =0x08D65D6C
	adds r0, r1, #0
	bl Proc_Find
	str r0, [r7, #0x1c]
	ldr r0, [r7, #0x1c]
	ldrh r1, [r0, #0x2a]
	str r1, [r7, #0x14]
	ldr r1, [r7, #0x1c]
	ldrh r0, [r1, #0x2a]
	ldr r2, [r7, #8]
	subs r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r0, r0, r1
	str r0, [r7, #0x18]
	ldr r0, [r7, #8]
	cmp r0, #0
	bne _08074DDC
	ldr r0, _08074DD8 @ =0x083F28D0
	ldr r2, [r7]
	adds r1, r2, #0
	subs r1, #0x12
	ldr r3, [r7, #4]
	subs r2, r3, #4
	ldr r3, [r7, #0x1c]
	ldrh r4, [r3, #0x2c]
	movs r5, #0xf
	adds r3, r4, #0
	ands r3, r5
	adds r5, r3, #0
	lsls r4, r5, #0x10
	lsrs r3, r4, #0x10
	adds r4, r3, #0
	lsls r3, r4, #0xc
	ldr r4, [r7, #0x14]
	adds r3, r3, r4
	ldr r4, [r7, #0x1c]
	ldrh r5, [r4, #0x2e]
	movs r6, #3
	adds r4, r5, #0
	ands r4, r6
	adds r6, r4, #0
	lsls r5, r6, #0x10
	lsrs r4, r5, #0x10
	adds r5, r4, #0
	lsls r4, r5, #0xa
	adds r3, r3, r4
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl sub_08012AF0
	b _08074F30
	.align 2, 0
_08074DD0: .4byte 0x083FA1B8
_08074DD4: .4byte 0x08D65D6C
_08074DD8: .4byte 0x083F28D0
_08074DDC:
	ldr r0, [r7, #0xc]
	cmp r0, #0
	ble _08074DE8
	movs r0, #0
	str r0, [r7, #0x10]
	b _08074DEC
_08074DE8:
	movs r0, #1
	str r0, [r7, #0x10]
_08074DEC:
	ldr r0, _08074F38 @ =0x083F28D0
	ldr r2, [r7, #4]
	ldr r1, [r7, #0x1c]
	ldrh r3, [r1, #0x2c]
	ldr r4, [r7, #0x10]
	adds r1, r3, r4
	movs r3, #0xf
	ands r1, r3
	adds r3, r1, #0
	lsls r1, r3, #0xc
	ldr r3, [r7, #0x14]
	adds r1, r1, r3
	ldr r3, [r7, #0x1c]
	ldrh r4, [r3, #0x2e]
	movs r5, #3
	adds r3, r4, #0
	ands r3, r5
	adds r5, r3, #0
	lsls r4, r5, #0x10
	lsrs r3, r4, #0x10
	adds r4, r3, #0
	lsls r5, r4, #0xa
	adds r3, r1, r5
	ldr r1, [r7, #0x10]
	adds r4, r1, #1
	str r4, [sp]
	movs r1, #2
	str r1, [sp, #4]
	ldr r1, [r7]
	bl sub_08012AF0
	ldr r0, _08074F38 @ =0x083F28D0
	ldr r2, [r7]
	subs r1, r2, #3
	ldr r2, [r7, #4]
	ldr r3, [r7, #0x1c]
	ldrh r4, [r3, #0x2c]
	movs r5, #0xf
	adds r3, r4, #0
	ands r3, r5
	adds r5, r3, #0
	lsls r4, r5, #0x10
	lsrs r3, r4, #0x10
	adds r4, r3, #0
	lsls r3, r4, #0xc
	ldr r4, [r7, #0x18]
	adds r3, r3, r4
	ldr r4, [r7, #0x1c]
	ldrh r5, [r4, #0x2e]
	movs r6, #3
	adds r4, r5, #0
	ands r4, r6
	adds r6, r4, #0
	lsls r5, r6, #0x10
	lsrs r4, r5, #0x10
	adds r5, r4, #0
	lsls r4, r5, #0xa
	adds r3, r3, r4
	ldr r4, [r7, #0x10]
	adds r5, r4, #3
	str r5, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl sub_08012AF0
	ldr r0, [r7, #0xc]
	cmp r0, #0
	ble _08074EBA
	ldr r0, _08074F38 @ =0x083F28D0
	ldr r2, [r7]
	adds r1, r2, #0
	subs r1, #0x12
	ldr r3, [r7, #4]
	subs r2, r3, #4
	ldr r3, [r7, #0x1c]
	ldrh r4, [r3, #0x2c]
	movs r5, #0xf
	adds r3, r4, #0
	ands r3, r5
	adds r5, r3, #0
	lsls r4, r5, #0x10
	lsrs r3, r4, #0x10
	adds r4, r3, #0
	lsls r3, r4, #0xc
	ldr r4, [r7, #0x14]
	adds r3, r3, r4
	ldr r4, [r7, #0x1c]
	ldrh r5, [r4, #0x2e]
	movs r6, #3
	adds r4, r5, #0
	ands r4, r6
	adds r6, r4, #0
	lsls r5, r6, #0x10
	lsrs r4, r5, #0x10
	adds r5, r4, #0
	lsls r4, r5, #0xa
	adds r3, r3, r4
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl sub_08012AF0
_08074EBA:
	ldr r0, [r7, #0xc]
	cmp r0, #0
	bge _08074EDE
	ldr r1, [r7, #0x20]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r1, r2
	ldr r2, [r7, #0x18]
	adds r1, r2, #0
	adds r1, #0x4c
	lsls r2, r1, #0x16
	lsrs r1, r2, #0x16
	lsls r2, r1, #5
	ldr r3, _08074F3C @ =0x06010000
	adds r1, r2, r3
	movs r2, #0x20
	bl sub_08015068
_08074EDE:
	ldr r0, [r7, #0xc]
	cmp r0, #0
	bge _08074EE6
	rsbs r0, r0, #0
_08074EE6:
	lsls r1, r0, #0x16
	lsrs r0, r1, #0x16
	lsls r1, r0, #5
	ldr r2, [r7, #0x20]
	adds r0, r1, r2
	ldr r2, [r7, #0x18]
	adds r1, r2, #0
	adds r1, #0x2d
	lsls r2, r1, #0x16
	lsrs r1, r2, #0x16
	lsls r2, r1, #5
	ldr r3, _08074F3C @ =0x06010000
	adds r1, r2, r3
	movs r2, #0x20
	bl sub_08015068
	ldr r0, [r7, #0xc]
	cmp r0, #0
	bge _08074F0E
	rsbs r0, r0, #0
_08074F0E:
	adds r0, #0x20
	lsls r1, r0, #0x16
	lsrs r0, r1, #0x16
	lsls r1, r0, #5
	ldr r2, [r7, #0x20]
	adds r0, r1, r2
	ldr r2, [r7, #0x18]
	adds r1, r2, #0
	adds r1, #0x4d
	lsls r2, r1, #0x16
	lsrs r1, r2, #0x16
	lsls r2, r1, #5
	ldr r3, _08074F3C @ =0x06010000
	adds r1, r2, r3
	movs r2, #0x20
	bl sub_08015068
_08074F30:
	add sp, #0x2c
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08074F38: .4byte 0x083F28D0
_08074F3C: .4byte 0x06010000

	thumb_func_start sub_08074F40
sub_08074F40: @ 0x08074F40
	push {r4, r5, r6, r7, lr}
	sub sp, #0x24
	add r7, sp, #8
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r0, _08075088 @ =0x083FA1B8
	str r0, [r7, #0x18]
	ldr r1, _0807508C @ =0x08D65D6C
	adds r0, r1, #0
	bl Proc_Find
	str r0, [r7, #0x14]
	ldr r0, [r7, #0x14]
	ldrh r1, [r0, #0x2a]
	str r1, [r7, #0xc]
	ldr r1, [r7, #0x14]
	ldrh r0, [r1, #0x2a]
	ldr r2, [r7, #8]
	subs r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r0, r0, r1
	str r0, [r7, #0x10]
	ldr r0, _08075090 @ =0x083F28D0
	ldr r2, [r7, #4]
	ldr r1, [r7, #0x14]
	ldrh r3, [r1, #0x2c]
	movs r4, #0xf
	adds r1, r3, #0
	ands r1, r4
	adds r4, r1, #0
	lsls r3, r4, #0x10
	lsrs r1, r3, #0x10
	adds r3, r1, #0
	lsls r1, r3, #0xc
	ldr r3, [r7, #0xc]
	adds r1, r1, r3
	ldr r3, [r7, #0x14]
	ldrh r4, [r3, #0x2e]
	movs r5, #3
	adds r3, r4, #0
	ands r3, r5
	adds r5, r3, #0
	lsls r4, r5, #0x10
	lsrs r3, r4, #0x10
	adds r4, r3, #0
	lsls r5, r4, #0xa
	adds r3, r1, r5
	movs r1, #5
	str r1, [sp]
	movs r1, #2
	str r1, [sp, #4]
	ldr r1, [r7]
	bl sub_08012AF0
	ldr r0, _08075090 @ =0x083F28D0
	ldr r2, [r7]
	subs r1, r2, #3
	ldr r2, [r7, #4]
	ldr r3, [r7, #0x14]
	ldrh r4, [r3, #0x2c]
	movs r5, #0xf
	adds r3, r4, #0
	ands r3, r5
	adds r5, r3, #0
	lsls r4, r5, #0x10
	lsrs r3, r4, #0x10
	adds r4, r3, #0
	lsls r3, r4, #0xc
	ldr r4, [r7, #0x10]
	adds r3, r3, r4
	ldr r4, [r7, #0x14]
	ldrh r5, [r4, #0x2e]
	movs r6, #3
	adds r4, r5, #0
	ands r4, r6
	adds r6, r4, #0
	lsls r5, r6, #0x10
	lsrs r4, r5, #0x10
	adds r5, r4, #0
	lsls r4, r5, #0xa
	adds r3, r3, r4
	movs r4, #3
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl sub_08012AF0
	ldr r0, _08075090 @ =0x083F28D0
	ldr r2, [r7]
	adds r1, r2, #0
	subs r1, #0x12
	ldr r3, [r7, #4]
	subs r2, r3, #4
	ldr r3, [r7, #0x14]
	ldrh r4, [r3, #0x2c]
	movs r5, #0xf
	adds r3, r4, #0
	ands r3, r5
	adds r5, r3, #0
	lsls r4, r5, #0x10
	lsrs r3, r4, #0x10
	adds r4, r3, #0
	lsls r3, r4, #0xc
	ldr r4, [r7, #0xc]
	adds r3, r3, r4
	ldr r4, [r7, #0x14]
	ldrh r5, [r4, #0x2e]
	movs r6, #3
	adds r4, r5, #0
	ands r4, r6
	adds r6, r4, #0
	lsls r5, r6, #0x10
	lsrs r4, r5, #0x10
	adds r5, r4, #0
	lsls r4, r5, #0xa
	adds r3, r3, r4
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl sub_08012AF0
	ldr r0, [r7, #8]
	lsls r1, r0, #0x16
	lsrs r0, r1, #0x16
	lsls r1, r0, #5
	ldr r2, [r7, #0x18]
	adds r0, r1, r2
	ldr r2, [r7, #0x10]
	adds r1, r2, #0
	adds r1, #0x2d
	lsls r2, r1, #0x16
	lsrs r1, r2, #0x16
	lsls r2, r1, #5
	ldr r3, _08075094 @ =0x06010000
	adds r1, r2, r3
	movs r2, #0x20
	bl sub_08015068
	ldr r1, [r7, #8]
	adds r0, r1, #0
	adds r0, #0x20
	lsls r1, r0, #0x16
	lsrs r0, r1, #0x16
	lsls r1, r0, #5
	ldr r2, [r7, #0x18]
	adds r0, r1, r2
	ldr r2, [r7, #0x10]
	adds r1, r2, #0
	adds r1, #0x4d
	lsls r2, r1, #0x16
	lsrs r1, r2, #0x16
	lsls r2, r1, #5
	ldr r3, _08075094 @ =0x06010000
	adds r1, r2, r3
	movs r2, #0x20
	bl sub_08015068
	add sp, #0x24
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08075088: .4byte 0x083FA1B8
_0807508C: .4byte 0x08D65D6C
_08075090: .4byte 0x083F28D0
_08075094: .4byte 0x06010000

	thumb_func_start sub_08075098
sub_08075098: @ 0x08075098
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, _080750C8 @ =0x08D65D94
	ldr r1, [r7, #4]
	bl Proc_StartBlocking
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	ldr r2, [r7]
	adds r1, r2, #0
	ldrh r2, [r0, #0x2e]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x2e]
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080750C8: .4byte 0x08D65D94

	thumb_func_start sub_080750CC
sub_080750CC: @ 0x080750CC
	push {r7, lr}
	mov r7, sp
	ldr r0, _080751EC @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _080751EC @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xbf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _080751EC @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _080751EC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2d
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080751EC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x31
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080751EC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xf0
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080751EC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x30
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x30
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080751EC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0xfe
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080751EC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0xfd
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080751EC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #4
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080751EC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080751EC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080751EC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080751EC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080751EC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #4
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080751EC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080751EC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080751EC: .4byte gDispIo

	thumb_func_start sub_080751F0
sub_080751F0: @ 0x080751F0
	push {r7, lr}
	mov r7, sp
	ldr r0, _08075220 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08075220 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xbf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08075220 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08075220: .4byte gDispIo

	thumb_func_start sub_08075224
sub_08075224: @ 0x08075224
	push {r7, lr}
	sub sp, #0xc
	add r7, sp, #4
	str r0, [r7]
	bl sub_08005308
	ldr r1, _08075258 @ =gBg0Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	ldr r0, [r7]
	movs r2, #0x2e
	ldrsh r1, [r0, r2]
	adds r0, r1, #0
	movs r1, #1
	movs r2, #1
	bl sub_080747F4
	movs r0, #0
	str r0, [r7, #4]
_0807524E:
	ldr r0, [r7, #4]
	cmp r0, #8
	ble _0807525C
	b _08075278
	.align 2, 0
_08075258: .4byte gBg0Tm
_0807525C:
	ldr r1, [r7]
	movs r3, #0x2e
	ldrsh r0, [r1, r3]
	ldr r3, [r7, #4]
	movs r1, #0
	str r1, [sp]
	movs r1, #1
	movs r2, #1
	bl sub_08074968
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _0807524E
_08075278:
	movs r0, #1
	bl EnableBgSync
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x30
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x31
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	ldrh r1, [r0, #0x32]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	ldr r3, _080753E0 @ =0x0000FF70
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x32]
	ldr r0, _080753E4 @ =gDispIo
	ldrb r1, [r0, #0xc]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0xc]
	ldr r0, _080753E4 @ =gDispIo
	ldrb r1, [r0, #0x10]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x10]
	ldr r0, _080753E4 @ =gDispIo
	ldrb r1, [r0, #0x14]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x14]
	ldr r0, _080753E4 @ =gDispIo
	ldrb r1, [r0, #0x18]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x18]
	ldr r0, _080753E4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080753E4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080753E4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080753E4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080753E4 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _080753E4 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xbf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _080753E4 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, [r7]
	ldrh r2, [r0, #0x32]
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	ldr r0, [r7]
	ldrh r2, [r0, #0x32]
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	ldr r0, _080753E8 @ =0x0203E0D4
	ldr r2, [r7]
	movs r3, #0x2e
	ldrsh r1, [r2, r3]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	ldr r0, [r7]
	movs r3, #0x32
	ldrsh r2, [r0, r3]
	movs r0, #0x20
	subs r3, r0, r2
	ldr r0, _080753EC @ =0x00001042
	str r0, [sp]
	movs r0, #0
	movs r2, #0xb8
	bl sub_08006AC4
	ldr r1, _080753F0 @ =0x030040E0
	ldr r0, [r1]
	ldr r1, [r7]
	ldrh r2, [r1, #0x32]
	movs r3, #0x20
	subs r1, r3, r2
	ldrh r2, [r0, #0x36]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x36]
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r1, #0
	movs r1, #3
	movs r2, #1
	ldr r3, [r7]
	bl sub_08074C70
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080753E0: .4byte 0x0000FF70
_080753E4: .4byte gDispIo
_080753E8: .4byte 0x0203E0D4
_080753EC: .4byte 0x00001042
_080753F0: .4byte 0x030040E0

	thumb_func_start sub_080753F4
sub_080753F4: @ 0x080753F4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	movs r1, #0
	str r1, [r0, #0x54]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807540C
sub_0807540C: @ 0x0807540C
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	ldr r0, _08075434 @ =0x083F9AF0
	str r0, [r7, #8]
	ldr r1, [r7]
	ldr r0, [r7]
	ldr r1, [r7]
	ldr r2, [r1, #0x54]
	adds r1, r2, #1
	str r1, [r0, #0x54]
	ldr r0, [r7]
	ldr r1, [r0, #0x54]
	movs r2, #3
	adds r0, r1, #0
	ands r0, r2
	cmp r0, #0
	beq _08075438
	b _08075494
	.align 2, 0
_08075434: .4byte 0x083F9AF0
_08075438:
	ldr r0, [r7]
	ldr r1, [r0, #0x54]
	asrs r0, r1, #2
	movs r1, #0xf
	ands r0, r1
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, [r7, #8]
	adds r0, r0, r1
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x64
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r2, r1, #0
	adds r2, #0x10
	adds r1, r2, #0
	lsls r2, r1, #5
	adds r1, r2, #0
	adds r1, #0x12
	movs r2, #0xe
	bl ApplyPaletteExt
	ldr r0, [r7, #4]
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r2, [r7, #8]
	adds r1, r0, r2
	adds r0, r1, #0
	adds r0, #0x40
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x64
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r2, r1, #0
	adds r2, #0x11
	adds r1, r2, #0
	lsls r2, r1, #5
	adds r1, r2, #0
	adds r1, #0x12
	movs r2, #0xe
	bl ApplyPaletteExt
_08075494:
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0807549C
sub_0807549C: @ 0x0807549C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r7]
	ldrh r2, [r1, #0x32]
	adds r1, r2, #0
	adds r1, #8
	ldrh r2, [r0, #0x32]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x32]
	ldr r0, [r7]
	ldrh r2, [r0, #0x32]
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	ldr r0, [r7]
	ldrh r2, [r0, #0x32]
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	ldr r1, _0807550C @ =0x030040E0
	ldr r0, [r1]
	ldr r1, [r7]
	ldrh r2, [r1, #0x32]
	movs r3, #0x20
	subs r1, r3, r2
	ldrh r2, [r0, #0x36]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x36]
	ldr r0, [r7]
	movs r2, #0x32
	ldrsh r1, [r0, r2]
	movs r0, #0x30
	cmn r1, r0
	blt _08075504
	ldr r0, [r7]
	bl Proc_Break
_08075504:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807550C: .4byte 0x030040E0

	thumb_func_start sub_08075510
sub_08075510: @ 0x08075510
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r7]
	ldrh r2, [r1, #0x32]
	adds r1, r2, #0
	subs r1, #8
	ldrh r2, [r0, #0x32]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x32]
	ldr r0, [r7]
	ldrh r2, [r0, #0x32]
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	ldr r0, [r7]
	ldrh r2, [r0, #0x32]
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	ldr r1, _08075580 @ =0x030040E0
	ldr r0, [r1]
	ldr r1, [r7]
	ldrh r2, [r1, #0x32]
	movs r3, #0x20
	subs r1, r3, r2
	ldrh r2, [r0, #0x36]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x36]
	ldr r0, [r7]
	movs r2, #0x32
	ldrsh r1, [r0, r2]
	movs r0, #0x90
	cmn r1, r0
	bgt _08075578
	ldr r0, [r7]
	bl Proc_Break
_08075578:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08075580: .4byte 0x030040E0

	thumb_func_start sub_08075584
sub_08075584: @ 0x08075584
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r7, sp, #4
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x31
	ldrb r0, [r1]
	cmp r0, #0
	beq _080755C0
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x31
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x31
	ldrb r3, [r2]
	subs r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x31
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	b _080756BA
_080755C0:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x30
	ldrb r0, [r1]
	str r0, [r7, #4]
_080755CA:
	ldr r0, [r7, #4]
	cmp r0, #8
	ble _080755D2
	b _080755F0
_080755D2:
	ldr r0, [r7]
	movs r2, #0x2e
	ldrsh r1, [r0, r2]
	ldr r2, [r7, #4]
	adds r0, r1, #0
	adds r1, r2, #0
	bl sub_080749F0
	cmp r0, #0
	beq _080755E8
	b _080755F0
_080755E8:
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _080755CA
_080755F0:
	ldr r0, [r7, #4]
	cmp r0, #8
	ble _080755FE
	ldr r0, [r7]
	bl Proc_Break
	b _080756BA
_080755FE:
	ldr r1, [r7]
	movs r3, #0x2e
	ldrsh r0, [r1, r3]
	ldr r3, [r7, #4]
	movs r1, #1
	str r1, [sp]
	movs r1, #1
	movs r2, #1
	bl sub_08074968
	movs r0, #1
	bl EnableBgSync
	ldr r0, _080756C4 @ =0x08D65CF4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #1
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldrb r1, [r0]
	adds r0, r1, #0
	lsls r1, r0, #3
	adds r4, r1, #0
	adds r4, #0x3e
	ldr r0, _080756C4 @ =0x08D65CF4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #1
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldrb r1, [r0, #1]
	adds r2, r1, #0
	lsls r0, r2, #3
	ldr r1, [r7]
	movs r3, #0x32
	ldrsh r2, [r1, r3]
	adds r1, r2, #0
	subs r1, #0x17
	subs r5, r0, r1
	ldr r6, [r7, #4]
	ldr r0, [r7]
	movs r2, #0x2e
	ldrsh r1, [r0, r2]
	ldr r2, [r7, #4]
	adds r0, r1, #0
	adds r1, r2, #0
	bl sub_080749F0
	adds r3, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl sub_08074D50
	ldr r1, _080756C8 @ =gPlaySt
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r0, [r1]
	lsls r1, r0, #0x1e
	lsrs r0, r1, #0x1f
	cmp r0, #0
	bne _08075686
	ldr r1, _080756CC @ =0x00000396
	adds r0, r1, #0
	bl m4aSongNumStart
_08075686:
	ldr r0, [r7]
	ldr r1, [r7, #4]
	adds r2, r1, #0
	adds r1, r2, #1
	adds r2, r0, #0
	adds r0, #0x30
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x31
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x14
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
_080756BA:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080756C4: .4byte 0x08D65CF4
_080756C8: .4byte gPlaySt
_080756CC: .4byte 0x00000396

	thumb_func_start sub_080756D0
sub_080756D0: @ 0x080756D0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	movs r1, #0x80
	movs r2, #0x10
	ldr r3, [r7]
	bl StartBgmVolumeChange
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080756F0
sub_080756F0: @ 0x080756F0
	push {r4, r7, lr}
	sub sp, #0x14
	add r7, sp, #8
	str r0, [r7]
	ldr r0, _08075844 @ =0x083F9CB8
	ldr r1, _08075848 @ =0x06013800
	bl sub_08013688
	ldr r0, _0807584C @ =0x083F9ECC
	movs r1, #0x98
	lsls r1, r1, #2
	movs r2, #0x60
	bl ApplyPaletteExt
	ldr r0, _08075850 @ =0x0203E0D4
	ldr r2, [r7]
	movs r3, #0x2e
	ldrsh r1, [r2, r3]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x10
	ldrsb r0, [r1, r0]
	ldr r1, _08075854 @ =gBmSt
	movs r3, #0xc
	ldrsh r2, [r1, r3]
	asrs r1, r2, #4
	adds r3, r1, #0
	lsls r2, r3, #0x10
	asrs r1, r2, #0x10
	subs r0, r0, r1
	lsls r1, r0, #1
	adds r0, r1, #0
	lsls r1, r0, #3
	adds r0, r1, #0
	adds r0, #0x10
	str r0, [r7, #4]
	ldr r0, _08075850 @ =0x0203E0D4
	ldr r2, [r7]
	movs r3, #0x2e
	ldrsh r1, [r2, r3]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x11
	ldrsb r0, [r1, r0]
	ldr r1, _08075854 @ =gBmSt
	movs r3, #0xe
	ldrsh r2, [r1, r3]
	asrs r1, r2, #4
	adds r3, r1, #0
	lsls r2, r3, #0x10
	asrs r1, r2, #0x10
	subs r0, r0, r1
	lsls r1, r0, #1
	adds r0, r1, #0
	lsls r1, r0, #3
	adds r0, r1, #0
	subs r0, #8
	str r0, [r7, #8]
	ldr r0, _08075850 @ =0x0203E0D4
	ldr r2, [r7]
	movs r3, #0x2e
	ldrsh r1, [r2, r3]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x11
	ldrsb r0, [r1, r0]
	ldr r1, _08075854 @ =gBmSt
	movs r3, #0xe
	ldrsh r2, [r1, r3]
	asrs r1, r2, #4
	adds r3, r1, #0
	lsls r2, r3, #0x10
	asrs r1, r2, #0x10
	subs r0, r0, r1
	lsls r1, r0, #1
	cmp r1, #3
	bgt _080757AA
	ldr r0, [r7, #8]
	adds r1, r0, #0
	adds r1, #0x20
	str r1, [r7, #8]
_080757AA:
	ldr r0, _08075850 @ =0x0203E0D4
	ldr r2, [r7]
	movs r3, #0x2e
	ldrsh r1, [r2, r3]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x10
	ldrsb r0, [r1, r0]
	ldr r1, _08075854 @ =gBmSt
	movs r3, #0xc
	ldrsh r2, [r1, r3]
	asrs r1, r2, #4
	adds r3, r1, #0
	lsls r2, r3, #0x10
	asrs r1, r2, #0x10
	subs r0, r0, r1
	lsls r1, r0, #1
	cmp r1, #3
	bgt _080757DC
	movs r0, #0x30
	str r0, [r7, #4]
_080757DC:
	ldr r0, _08075850 @ =0x0203E0D4
	ldr r2, [r7]
	movs r3, #0x2e
	ldrsh r1, [r2, r3]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x10
	ldrsb r0, [r1, r0]
	ldr r1, _08075854 @ =gBmSt
	movs r3, #0xc
	ldrsh r2, [r1, r3]
	asrs r1, r2, #4
	adds r3, r1, #0
	lsls r2, r3, #0x10
	asrs r1, r2, #0x10
	subs r0, r0, r1
	lsls r1, r0, #1
	cmp r1, #0x19
	ble _0807580E
	movs r0, #0xd0
	str r0, [r7, #4]
_0807580E:
	ldr r0, _08075858 @ =0x083F2F90
	ldr r1, [r7, #4]
	ldr r2, [r7, #8]
	movs r3, #0xc7
	lsls r3, r3, #6
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl sub_08012AF0
	ldr r1, _0807585C @ =gPlaySt
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r0, [r1]
	lsls r1, r0, #0x1e
	lsrs r0, r1, #0x1f
	cmp r0, #0
	bne _0807583C
	ldr r1, _08075860 @ =0x0000037B
	adds r0, r1, #0
	bl m4aSongNumStart
_0807583C:
	add sp, #0x14
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08075844: .4byte 0x083F9CB8
_08075848: .4byte 0x06013800
_0807584C: .4byte 0x083F9ECC
_08075850: .4byte 0x0203E0D4
_08075854: .4byte gBmSt
_08075858: .4byte 0x083F2F90
_0807585C: .4byte gPlaySt
_08075860: .4byte 0x0000037B

	thumb_func_start sub_08075864
sub_08075864: @ 0x08075864
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl EndEachSpriteAnimProc
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08075878
sub_08075878: @ 0x08075878
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x80
	movs r2, #0x10
	ldr r3, [r7]
	bl StartBgmVolumeChange
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08075898
sub_08075898: @ 0x08075898
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl sub_0800EC08
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080758AC
sub_080758AC: @ 0x080758AC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	cmp r0, #0
	beq _080758CC
	ldr r1, _080758C8 @ =0x08D65E54
	adds r0, r1, #0
	ldr r1, [r7]
	bl Proc_StartBlocking
	b _080758D6
	.align 2, 0
_080758C8: .4byte 0x08D65E54
_080758CC:
	ldr r1, _080758E0 @ =0x08D65E54
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
_080758D6:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080758E0: .4byte 0x08D65E54

	thumb_func_start sub_080758E4
sub_080758E4: @ 0x080758E4
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r0, _08075904 @ =0x02022920
	ldr r1, _08075908 @ =0x030048B0
	movs r2, #0x50
	bl CpuFastSet
	movs r0, #0
	str r0, [r7, #4]
_080758FA:
	ldr r0, [r7, #4]
	cmp r0, #9
	ble _0807590C
	b _08075930
	.align 2, 0
_08075904: .4byte 0x02022920
_08075908: .4byte 0x030048B0
_0807590C:
	ldr r0, _0807592C @ =0x08C01CEC
	ldr r2, [r7, #4]
	adds r1, r2, #6
	movs r2, #0x3c
	ldr r3, [r7]
	bl sub_08014020
	adds r1, r0, #0
	adds r0, r1, #0
	movs r1, #0xf
	bl sub_08014090
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _080758FA
	.align 2, 0
_0807592C: .4byte 0x08C01CEC
_08075930:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08075938
sub_08075938: @ 0x08075938
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	cmp r0, #0
	beq _08075958
	ldr r1, _08075954 @ =0x08D65E6C
	adds r0, r1, #0
	ldr r1, [r7]
	bl Proc_StartBlocking
	b _08075962
	.align 2, 0
_08075954: .4byte 0x08D65E6C
_08075958:
	ldr r1, _0807596C @ =0x08D65E6C
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
_08075962:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807596C: .4byte 0x08D65E6C

	thumb_func_start sub_08075970
sub_08075970: @ 0x08075970
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	str r0, [r7, #4]
_0807597C:
	ldr r0, [r7, #4]
	cmp r0, #9
	ble _08075984
	b _080759A8
_08075984:
	ldr r0, [r7, #4]
	adds r1, r0, #0
	lsls r0, r1, #5
	ldr r1, _080759A4 @ =0x030048B0
	adds r0, r0, r1
	ldr r2, [r7, #4]
	adds r1, r2, #6
	movs r2, #0xf
	ldr r3, [r7]
	bl sub_08014020
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _0807597C
	.align 2, 0
_080759A4: .4byte 0x030048B0
_080759A8:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080759B0
sub_080759B0: @ 0x080759B0
	push {r7, lr}
	mov r7, sp
	ldr r1, _080759C4 @ =0x08D65E84
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080759C4: .4byte 0x08D65E84

	thumb_func_start sub_080759C8
sub_080759C8: @ 0x080759C8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080759E8
sub_080759E8: @ 0x080759E8
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl RandNextB
	adds r1, r0, #0
	adds r0, r1, #0
	movs r1, #9
	bl DivRem
	adds r1, r0, #0
	subs r0, r1, #4
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r4, r0, #0x10
	bl RandNextB
	adds r1, r0, #0
	adds r0, r1, #0
	movs r1, #9
	bl DivRem
	adds r1, r0, #0
	subs r0, r1, #4
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r2, r0, #0x10
	movs r0, #0
	adds r1, r4, #0
	bl SetBgOffset
	bl RandNextB
	adds r1, r0, #0
	adds r0, r1, #0
	movs r1, #9
	bl DivRem
	adds r1, r0, #0
	subs r0, r1, #4
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r4, r0, #0x10
	bl RandNextB
	adds r1, r0, #0
	adds r0, r1, #0
	movs r1, #9
	bl DivRem
	adds r1, r0, #0
	subs r0, r1, #4
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r2, r0, #0x10
	movs r0, #1
	adds r1, r4, #0
	bl SetBgOffset
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	adds r2, r1, #1
	adds r3, r2, #0
	strh r3, [r0]
	lsls r1, r1, #0x10
	asrs r0, r1, #0x10
	cmp r0, #0xf
	ble _08075A90
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, [r7]
	bl Proc_Break
_08075A90:
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08075A98
sub_08075A98: @ 0x08075A98
	push {r7, lr}
	mov r7, sp
	ldr r0, _08075AB8 @ =0x083FBC04
	ldr r1, _08075ABC @ =0x06013800
	bl sub_08013688
	ldr r0, _08075AC0 @ =0x083FBC24
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08075AB8: .4byte 0x083FBC04
_08075ABC: .4byte 0x06013800
_08075AC0: .4byte 0x083FBC24

	thumb_func_start sub_08075AC4
sub_08075AC4: @ 0x08075AC4
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, [r7]
	movs r1, #4
	cmn r0, r1
	bge _08075AD8
	b _08075B0A
_08075AD8:
	ldr r0, [r7]
	cmp r0, #0xeb
	ble _08075AE0
	b _08075B0A
_08075AE0:
	ldr r0, [r7, #4]
	movs r1, #4
	cmn r0, r1
	bge _08075AEA
	b _08075B0A
_08075AEA:
	ldr r0, [r7, #4]
	cmp r0, #0x9b
	ble _08075AF2
	b _08075B0A
_08075AF2:
	ldr r1, [r7]
	subs r0, r1, #4
	lsls r1, r0, #0x17
	lsrs r0, r1, #0x17
	ldr r2, [r7, #4]
	subs r1, r2, #4
	movs r2, #0xff
	ands r1, r2
	ldr r2, _08075B14 @ =0x08BFF760
	ldr r3, _08075B18 @ =0x000041C0
	bl PutOamHiRam
_08075B0A:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08075B14: .4byte 0x08BFF760
_08075B18: .4byte 0x000041C0

	thumb_func_start sub_08075B1C
sub_08075B1C: @ 0x08075B1C
	push {r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, _08075B78 @ =gSinLut
	ldr r1, [r7, #0xc]
	movs r2, #0xff
	ands r1, r2
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r0, r0, r1
	movs r2, #0
	ldrsh r1, [r0, r2]
	ldr r2, [r7, #8]
	adds r0, r1, #0
	muls r0, r2, r0
	asrs r1, r0, #0xc
	ldr r2, [r7]
	adds r0, r1, r2
	ldr r1, _08075B78 @ =gSinLut
	ldr r2, [r7, #0xc]
	movs r3, #0xff
	ands r2, r3
	adds r3, r2, #0
	adds r3, #0x40
	adds r2, r3, #0
	lsls r3, r2, #1
	adds r1, r1, r3
	movs r3, #0
	ldrsh r2, [r1, r3]
	ldr r3, [r7, #8]
	adds r1, r2, #0
	muls r1, r3, r1
	asrs r2, r1, #0xc
	ldr r3, [r7, #4]
	adds r1, r2, r3
	bl sub_08075AC4
	add sp, #0x10
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08075B78: .4byte gSinLut

	thumb_func_start sub_08075B7C
sub_08075B7C: @ 0x08075B7C
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	bl sub_08075A98
	movs r0, #0
	str r0, [r7, #4]
_08075B8C:
	ldr r0, [r7, #4]
	cmp r0, #0xf
	ble _08075B94
	b _08075BE0
_08075B94:
	ldr r0, _08075BDC @ =0x03004830
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08075BDC @ =0x03004830
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #3
	adds r0, r0, r1
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r1, #0
	lsls r1, r2, #4
	ldrh r2, [r0, #2]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #2]
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _08075B8C
	.align 2, 0
_08075BDC: .4byte 0x03004830
_08075BE0:
	ldr r0, [r7]
	ldrh r1, [r0, #0x36]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x36]
	ldr r0, [r7]
	ldrh r1, [r0, #0x38]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x38]
	ldr r0, [r7]
	ldr r1, [r7]
	ldrh r2, [r0, #0x3a]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrh r1, [r1, #0x3c]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x3a]
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08075C18
sub_08075C18: @ 0x08075C18
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r7, sp, #4
	str r0, [r7]
	ldr r0, [r7]
	movs r2, #0x2e
	ldrsh r1, [r0, r2]
	ldr r0, [r7]
	movs r3, #0x30
	ldrsh r2, [r0, r3]
	ldr r0, [r7]
	ldrh r3, [r0, #0x3a]
	ldr r0, [r7]
	ldrh r4, [r0, #0x3e]
	str r4, [sp]
	movs r0, #5
	bl Interpolate
	lsls r1, r0, #4
	str r1, [r7, #8]
	ldr r0, [r7]
	ldr r2, [r7, #8]
	adds r1, r2, #0
	ldrh r2, [r0, #0x36]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x36]
	ldr r0, [r7]
	ldr r1, [r7, #8]
	asrs r2, r1, #0x1f
	lsrs r3, r2, #0x1f
	adds r2, r1, r3
	asrs r1, r2, #1
	ldrh r2, [r0, #0x38]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x38]
	movs r0, #0
	str r0, [r7, #4]
_08075C74:
	ldr r0, [r7, #4]
	cmp r0, #0xf
	ble _08075C7C
	b _08075CC0
_08075C7C:
	ldr r1, [r7]
	movs r2, #0x2a
	ldrsh r0, [r1, r2]
	ldr r2, [r7]
	movs r3, #0x2c
	ldrsh r1, [r2, r3]
	ldr r3, [r7]
	ldrh r2, [r3, #0x36]
	ldr r3, _08075CBC @ =0x03004830
	ldr r4, [r7, #4]
	adds r5, r4, #0
	lsls r4, r5, #3
	adds r3, r3, r4
	ldrh r4, [r3]
	adds r3, r2, r4
	asrs r2, r3, #4
	ldr r4, [r7]
	ldrh r3, [r4, #0x38]
	ldr r4, _08075CBC @ =0x03004830
	ldr r5, [r7, #4]
	adds r6, r5, #0
	lsls r5, r6, #3
	adds r4, r4, r5
	ldrh r5, [r4, #2]
	adds r4, r3, r5
	asrs r3, r4, #4
	bl sub_08075B1C
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _08075C74
	.align 2, 0
_08075CBC: .4byte 0x03004830
_08075CC0:
	ldr r1, [r7]
	ldr r0, [r7]
	ldr r1, [r7]
	ldrh r2, [r1, #0x3a]
	adds r1, r2, #1
	ldrh r2, [r0, #0x3a]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x3a]
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x40
	ldrh r0, [r0, #0x3a]
	ldrh r1, [r2]
	cmp r0, r1
	bls _08075CF0
	ldr r0, [r7]
	bl Proc_Break
_08075CF0:
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08075CF8
sub_08075CF8: @ 0x08075CF8
	push {r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r1, _08075DAC @ =0x08D65E9C
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	str r0, [r7, #0x10]
	ldr r0, [r7, #0x10]
	ldr r2, [r7]
	adds r1, r2, #0
	ldrh r2, [r0, #0x2a]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x2a]
	ldr r0, [r7, #0x10]
	ldr r2, [r7, #4]
	adds r1, r2, #0
	ldrh r2, [r0, #0x2c]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x2c]
	ldr r0, [r7, #0x10]
	ldr r2, [r7, #8]
	adds r1, r2, #0
	ldrh r2, [r0, #0x2e]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x2e]
	ldr r0, [r7, #0x10]
	ldr r2, [r7, #0xc]
	adds r1, r2, #0
	ldrh r2, [r0, #0x30]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x30]
	ldr r0, [r7, #0x10]
	ldr r2, [r7, #0x1c]
	adds r1, r2, #0
	ldrh r2, [r0, #0x3c]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x3c]
	ldr r0, [r7, #0x10]
	ldr r2, [r7, #0x20]
	adds r1, r2, #0
	ldrh r2, [r0, #0x3e]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x3e]
	ldr r1, [r7, #0x10]
	ldr r2, [r7, #0x24]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x40
	ldrh r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strh r2, [r1]
	add sp, #0x14
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08075DAC: .4byte 0x08D65E9C

	thumb_func_start sub_08075DB0
sub_08075DB0: @ 0x08075DB0
	push {r7, lr}
	sub sp, #0x14
	add r7, sp, #0xc
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, [r7, #4]
	movs r0, #0
	str r0, [sp]
	movs r0, #0x50
	str r0, [sp, #4]
	movs r0, #0x28
	str r0, [sp, #8]
	ldr r0, [r7]
	movs r2, #1
	movs r3, #0xc8
	bl sub_08075CF8
	add sp, #0x14
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08075DDC
sub_08075DDC: @ 0x08075DDC
	push {r7, lr}
	sub sp, #0x14
	add r7, sp, #0xc
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, [r7, #4]
	movs r0, #0
	str r0, [sp]
	movs r0, #0x3c
	str r0, [sp, #4]
	movs r0, #0x37
	str r0, [sp, #8]
	ldr r0, [r7]
	movs r2, #0xc8
	movs r3, #1
	bl sub_08075CF8
	add sp, #0x14
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08075E08
sub_08075E08: @ 0x08075E08
	push {r7, lr}
	mov r7, sp
	ldr r0, _08075E18 @ =0x0203E0D4
	ldr r1, [r0, #0x54]
	cmp r1, #0
	bne _08075E20
	ldr r0, _08075E1C @ =0x08D65ECC
	b _08075E2C
	.align 2, 0
_08075E18: .4byte 0x0203E0D4
_08075E1C: .4byte 0x08D65ECC
_08075E20:
	ldr r0, _08075E28 @ =0x0203E0D4
	ldr r1, [r0, #0x54]
	adds r0, r1, #0
	b _08075E2C
	.align 2, 0
_08075E28: .4byte 0x0203E0D4
_08075E2C:
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08075E34
sub_08075E34: @ 0x08075E34
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08075E64 @ =0x0203E0D4
	ldr r2, _08075E64 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	bl sub_0806E4A0
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08075E64: .4byte 0x0203E0D4

	thumb_func_start sub_08075E68
sub_08075E68: @ 0x08075E68
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08075E98 @ =0x0203E0D4
	ldr r2, _08075E98 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	bl sub_0806E51C
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08075E98: .4byte 0x0203E0D4

	thumb_func_start sub_08075E9C
sub_08075E9C: @ 0x08075E9C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08075ED0 @ =0x0203E0D4
	ldr r2, _08075ED0 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, [r1, #4]
	ldrb r1, [r0, #4]
	cmp r1, #0x40
	bne _08075ED8
	ldr r1, _08075ED4 @ =sub_08075F68
	adds r0, r1, #0
	movs r1, #9
	bl sub_08014FB0
	b _08075EE2
	.align 2, 0
_08075ED0: .4byte 0x0203E0D4
_08075ED4: .4byte sub_08075F68
_08075ED8:
	ldr r1, _08075F60 @ =sub_08075FAC
	adds r0, r1, #0
	movs r1, #0xc
	bl sub_08014FB0
_08075EE2:
	ldr r0, _08075F64 @ =0x0203E0D4
	ldr r2, _08075F64 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	ldr r0, [r2, #0x30]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r0, _08075F64 @ =0x0203E0D4
	ldr r2, _08075F64 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	ldr r0, [r2, #0x30]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	ldr r0, _08075F64 @ =0x0203E0D4
	ldr r2, _08075F64 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r0, [r1]
	ldr r1, [r0, #0x30]
	adds r0, r1, #0
	movs r1, #5
	bl sub_080128F0
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08075F60: .4byte sub_08075FAC
_08075F64: .4byte 0x0203E0D4

	thumb_func_start sub_08075F68
sub_08075F68: @ 0x08075F68
	push {r4, r7, lr}
	mov r7, sp
	ldr r0, _08075FA0 @ =0x000002D5
	ldr r1, _08075FA4 @ =0x0203E0D4
	ldr r3, _08075FA4 @ =0x0203E0D4
	adds r2, r3, #0
	adds r3, #0x58
	ldrb r2, [r3]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	adds r2, r1, #0
	lsls r1, r2, #4
	ldr r2, _08075FA8 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	subs r1, r1, r3
	bl sub_080151FC
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08075FA0: .4byte 0x000002D5
_08075FA4: .4byte 0x0203E0D4
_08075FA8: .4byte gBmSt

	thumb_func_start sub_08075FAC
sub_08075FAC: @ 0x08075FAC
	push {r4, r7, lr}
	mov r7, sp
	ldr r0, _08075FE4 @ =0x000002D6
	ldr r1, _08075FE8 @ =0x0203E0D4
	ldr r3, _08075FE8 @ =0x0203E0D4
	adds r2, r3, #0
	adds r3, #0x58
	ldrb r2, [r3]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	adds r2, r1, #0
	lsls r1, r2, #4
	ldr r2, _08075FEC @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	subs r1, r1, r3
	bl sub_080151FC
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08075FE4: .4byte 0x000002D6
_08075FE8: .4byte 0x0203E0D4
_08075FEC: .4byte gBmSt

	thumb_func_start sub_08075FF0
sub_08075FF0: @ 0x08075FF0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08076048 @ =0x0203E0D4
	ldr r2, _08076048 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	ldr r0, [r2, #0x30]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r0, _08076048 @ =0x0203E0D4
	ldr r2, _08076048 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	ldr r0, [r2, #0x30]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076048: .4byte 0x0203E0D4

	thumb_func_start sub_0807604C
sub_0807604C: @ 0x0807604C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _0807607C @ =0x0203E0D4
	ldr r2, _0807607C @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	bl sub_0806E5C0
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807607C: .4byte 0x0203E0D4

	thumb_func_start sub_08076080
sub_08076080: @ 0x08076080
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r2, [r7]
	ldr r4, [r7]
	adds r3, r4, #0
	adds r4, #0x4c
	movs r3, #0
	ldrsh r0, [r4, r3]
	ldr r4, [r7, #4]
	adds r3, r4, #0
	adds r4, #0x4c
	movs r5, #0
	ldrsh r3, [r4, r5]
	ldr r5, [r7]
	adds r4, r5, #0
	adds r5, #0x4c
	movs r6, #0
	ldrsh r4, [r5, r6]
	subs r3, r3, r4
	cmp r3, #0
	bgt _080760DA
	adds r3, r0, #0
	ldr r5, [r7, #4]
	adds r4, r5, #0
	adds r5, #0x4c
	movs r6, #0
	ldrsh r4, [r5, r6]
	ldr r6, [r7]
	adds r5, r6, #0
	adds r5, r6, #0
	adds r5, #0x4c
	str r5, [r7, #8]
	ldr r6, [r7, #8]
	movs r5, #0
	ldrsh r6, [r6, r5]
	str r6, [r7, #0xc]
	ldr r6, [r7, #0xc]
	subs r4, r4, r6
	cmp r4, #0
	bge _080760D8
	subs r3, #0x10
_080760D8:
	b _080760E0
_080760DA:
	adds r4, r0, #0
	adds r4, #0x10
	adds r3, r4, #0
_080760E0:
	adds r4, r2, #0
	adds r2, #0x4c
	ldrh r4, [r2]
	movs r5, #0
	ands r4, r5
	adds r5, r4, #0
	orrs r3, r5
	adds r4, r3, #0
	strh r4, [r2]
	ldr r2, [r7]
	ldr r4, [r7]
	adds r3, r4, #0
	adds r4, #0x4e
	movs r3, #0
	ldrsh r1, [r4, r3]
	ldr r4, [r7, #4]
	adds r3, r4, #0
	adds r4, #0x4e
	movs r5, #0
	ldrsh r3, [r4, r5]
	ldr r5, [r7]
	adds r4, r5, #0
	adds r5, #0x4e
	movs r6, #0
	ldrsh r4, [r5, r6]
	subs r3, r3, r4
	cmp r3, #0
	bgt _08076142
	adds r3, r1, #0
	ldr r5, [r7, #4]
	adds r4, r5, #0
	adds r5, #0x4e
	movs r6, #0
	ldrsh r4, [r5, r6]
	ldr r6, [r7]
	adds r5, r6, #0
	adds r5, r6, #0
	adds r5, #0x4e
	str r5, [r7, #8]
	ldr r6, [r7, #8]
	movs r5, #0
	ldrsh r6, [r6, r5]
	str r6, [r7, #0xc]
	ldr r6, [r7, #0xc]
	subs r4, r4, r6
	cmp r4, #0
	bge _08076140
	subs r3, #0x10
_08076140:
	b _08076148
_08076142:
	adds r4, r1, #0
	adds r4, #0x10
	adds r3, r4, #0
_08076148:
	adds r4, r2, #0
	adds r2, #0x4e
	ldrh r4, [r2]
	movs r5, #0
	ands r4, r5
	adds r5, r4, #0
	orrs r3, r5
	adds r4, r3, #0
	strh r4, [r2]
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08076164
sub_08076164: @ 0x08076164
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r2, [r7]
	ldr r4, [r7]
	adds r3, r4, #0
	adds r4, #0x4c
	movs r3, #0
	ldrsh r0, [r4, r3]
	ldr r4, [r7]
	adds r3, r4, #0
	adds r4, #0x4c
	movs r5, #0
	ldrsh r3, [r4, r5]
	ldr r5, [r7, #4]
	adds r4, r5, #0
	adds r5, #0x4c
	movs r6, #0
	ldrsh r4, [r5, r6]
	subs r3, r3, r4
	cmp r3, #0
	bgt _080761BE
	adds r3, r0, #0
	ldr r5, [r7]
	adds r4, r5, #0
	adds r5, #0x4c
	movs r6, #0
	ldrsh r4, [r5, r6]
	ldr r6, [r7, #4]
	adds r5, r6, #0
	adds r5, r6, #0
	adds r5, #0x4c
	str r5, [r7, #8]
	ldr r6, [r7, #8]
	movs r5, #0
	ldrsh r6, [r6, r5]
	str r6, [r7, #0xc]
	ldr r6, [r7, #0xc]
	subs r4, r4, r6
	cmp r4, #0
	bge _080761BC
	subs r3, #0x10
_080761BC:
	b _080761C4
_080761BE:
	adds r4, r0, #0
	adds r4, #0x10
	adds r3, r4, #0
_080761C4:
	adds r4, r2, #0
	adds r2, #0x4c
	ldrh r4, [r2]
	movs r5, #0
	ands r4, r5
	adds r5, r4, #0
	orrs r3, r5
	adds r4, r3, #0
	strh r4, [r2]
	ldr r2, [r7]
	ldr r4, [r7]
	adds r3, r4, #0
	adds r4, #0x4e
	movs r3, #0
	ldrsh r1, [r4, r3]
	ldr r4, [r7]
	adds r3, r4, #0
	adds r4, #0x4e
	movs r5, #0
	ldrsh r3, [r4, r5]
	ldr r5, [r7, #4]
	adds r4, r5, #0
	adds r5, #0x4e
	movs r6, #0
	ldrsh r4, [r5, r6]
	subs r3, r3, r4
	cmp r3, #0
	bgt _08076226
	adds r3, r1, #0
	ldr r5, [r7]
	adds r4, r5, #0
	adds r5, #0x4e
	movs r6, #0
	ldrsh r4, [r5, r6]
	ldr r6, [r7, #4]
	adds r5, r6, #0
	adds r5, r6, #0
	adds r5, #0x4e
	str r5, [r7, #8]
	ldr r6, [r7, #8]
	movs r5, #0
	ldrsh r6, [r6, r5]
	str r6, [r7, #0xc]
	ldr r6, [r7, #0xc]
	subs r4, r4, r6
	cmp r4, #0
	bge _08076224
	subs r3, #0x10
_08076224:
	b _0807622C
_08076226:
	adds r4, r1, #0
	adds r4, #0x10
	adds r3, r4, #0
_0807622C:
	adds r4, r2, #0
	adds r2, #0x4e
	ldrh r4, [r2]
	movs r5, #0
	ands r4, r5
	adds r5, r4, #0
	orrs r3, r5
	adds r4, r3, #0
	strh r4, [r2]
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08076248
sub_08076248: @ 0x08076248
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	ldr r0, _080762C8 @ =0x0203E0D4
	ldr r2, _080762C8 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r0, [r1]
	str r0, [r7, #4]
	ldr r0, _080762C8 @ =0x0203E0D4
	ldr r2, _080762C8 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r0, [r1]
	str r0, [r7, #8]
	ldr r0, [r7, #4]
	ldr r1, [r7, #8]
	bl sub_08076080
	ldr r1, _080762C8 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5a
	ldrh r0, [r1]
	movs r1, #0x80
	lsls r1, r1, #3
	ands r0, r1
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080762C0
	ldr r0, _080762C8 @ =0x0203E0D4
	ldr r1, [r0, #0x30]
	str r1, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7, #8]
	bl sub_08076080
	ldr r0, _080762C8 @ =0x0203E0D4
	ldr r1, [r0, #0x44]
	str r1, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7, #8]
	bl sub_08076080
_080762C0:
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080762C8: .4byte 0x0203E0D4

	thumb_func_start sub_080762CC
sub_080762CC: @ 0x080762CC
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	ldr r0, _0807634C @ =0x0203E0D4
	ldr r2, _0807634C @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r0, [r1]
	str r0, [r7, #4]
	ldr r0, _0807634C @ =0x0203E0D4
	ldr r2, _0807634C @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r0, [r1]
	str r0, [r7, #8]
	ldr r0, [r7, #4]
	ldr r1, [r7, #8]
	bl sub_08076164
	ldr r1, _0807634C @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5a
	ldrh r0, [r1]
	movs r1, #0x80
	lsls r1, r1, #3
	ands r0, r1
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _08076344
	ldr r0, _0807634C @ =0x0203E0D4
	ldr r1, [r0, #0x30]
	str r1, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7, #8]
	bl sub_08076164
	ldr r0, _0807634C @ =0x0203E0D4
	ldr r1, [r0, #0x44]
	str r1, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7, #8]
	bl sub_08076164
_08076344:
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807634C: .4byte 0x0203E0D4

	thumb_func_start sub_08076350
sub_08076350: @ 0x08076350
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _0807639C @ =0x0203E0D4
	ldr r2, _0807639C @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r2, [r0]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	ldr r0, _0807639C @ =0x0203E0D4
	ldr r3, _0807639C @ =0x0203E0D4
	adds r2, r3, #0
	adds r3, #0x58
	ldrb r2, [r3]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r0, r0, r2
	ldr r3, [r0]
	movs r2, #0x11
	ldrsb r2, [r3, r2]
	ldr r0, [r7]
	bl sub_0801615C
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807639C: .4byte 0x0203E0D4

	thumb_func_start sub_080763A0
sub_080763A0: @ 0x080763A0
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _080763EC @ =0x0203E0D4
	ldr r2, _080763EC @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r2, [r0]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	ldr r0, _080763EC @ =0x0203E0D4
	ldr r3, _080763EC @ =0x0203E0D4
	adds r2, r3, #0
	adds r3, #0x59
	ldrb r2, [r3]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r0, r0, r2
	ldr r3, [r0]
	movs r2, #0x11
	ldrsb r2, [r3, r2]
	ldr r0, [r7]
	bl sub_0801615C
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080763EC: .4byte 0x0203E0D4

	thumb_func_start sub_080763F0
sub_080763F0: @ 0x080763F0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08076458 @ =0x0203E0D4
	ldr r1, _0807645C @ =gBattleTarget
	adds r2, r1, #0
	adds r1, #0x73
	adds r2, r0, #0
	adds r0, #0x60
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, _08076458 @ =0x0203E0D4
	ldr r1, _0807645C @ =gBattleTarget
	adds r2, r1, #0
	adds r1, #0x74
	adds r2, r0, #0
	adds r0, #0x61
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r1, _08076458 @ =0x0203E0D4
	adds r0, r1, #0
	adds r2, r1, #0
	adds r2, #0x60
	ldrb r1, [r2]
	ldr r2, _08076458 @ =0x0203E0D4
	adds r0, r2, #0
	adds r3, r2, #0
	adds r3, #0x61
	ldrb r2, [r3]
	ldr r0, [r7]
	bl sub_0801615C
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076458: .4byte 0x0203E0D4
_0807645C: .4byte gBattleTarget

	thumb_func_start sub_08076460
sub_08076460: @ 0x08076460
	push {r4, r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	ldr r1, _08076494 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x58
	ldrb r0, [r1]
	str r0, [r7, #8]
	ldr r1, _08076494 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5a
	ldrh r0, [r1]
	movs r1, #0x80
	ands r0, r1
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _08076498
	ldr r1, _08076494 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x58
	ldrb r0, [r1]
	str r0, [r7, #0xc]
	b _080764A2
	.align 2, 0
_08076494: .4byte 0x0203E0D4
_08076498:
	ldr r1, _080764F8 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x59
	ldrb r0, [r1]
	str r0, [r7, #0xc]
_080764A2:
	ldr r0, _080764F8 @ =0x0203E0D4
	ldr r1, [r7, #8]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	adds r1, r2, #0
	adds r1, #0x4a
	ldrh r2, [r1]
	adds r0, r2, #0
	bl sub_0806C208
	lsls r1, r0, #0x18
	lsrs r0, r1, #0x18
	cmp r0, #0
	bne _080764FC
	ldr r1, _080764F8 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5a
	ldrh r0, [r1]
	movs r1, #2
	ands r0, r1
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080764F6
	ldr r0, _080764F8 @ =0x0203E0D4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_08071C10
_080764F6:
	b _0807680E
	.align 2, 0
_080764F8: .4byte 0x0203E0D4
_080764FC:
	ldr r0, _08076560 @ =0x0203E0D4
	adds r1, r0, #0
	adds r0, #0x5f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7, #0xc]
	ldr r2, _08076560 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x5d
	movs r1, #0
	ldrsb r1, [r2, r1]
	bl sub_08076820
	ldr r1, _08076560 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5a
	ldrh r0, [r1]
	movs r1, #0x80
	lsls r1, r1, #1
	ands r0, r1
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _08076550
	ldr r0, [r7, #8]
	ldr r2, _08076560 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x5d
	movs r1, #0
	ldrsb r1, [r2, r1]
	rsbs r2, r1, #0
	adds r1, r2, #0
	bl sub_08076820
_08076550:
	ldr r1, _08076560 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5d
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bge _08076564
	b _0807680E
	.align 2, 0
_08076560: .4byte 0x0203E0D4
_08076564:
	ldr r1, _080765B8 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5a
	ldrh r0, [r1]
	movs r1, #2
	ands r0, r1
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080765C0
	ldr r0, _080765B8 @ =0x0203E0D4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x10
	ldrsb r0, [r1, r0]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r1, _080765BC @ =gBmSt
	movs r3, #0xc
	ldrsh r2, [r1, r3]
	subs r1, r0, r2
	movs r0, #0xc8
	bl sub_080151FC
	ldr r0, _080765B8 @ =0x0203E0D4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_08071C10
	b _0807680E
	.align 2, 0
_080765B8: .4byte 0x0203E0D4
_080765BC: .4byte gBmSt
_080765C0:
	ldr r1, _0807660C @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5d
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bne _08076618
	ldr r0, _08076610 @ =0x000002CE
	ldr r1, _0807660C @ =0x0203E0D4
	ldr r2, [r7, #0xc]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	adds r2, r1, #0
	lsls r1, r2, #4
	ldr r2, _08076614 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	subs r1, r1, r3
	bl sub_080151FC
	ldr r0, _0807660C @ =0x0203E0D4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_08071C8C
	b _0807680E
	.align 2, 0
_0807660C: .4byte 0x0203E0D4
_08076610: .4byte 0x000002CE
_08076614: .4byte gBmSt
_08076618:
	movs r0, #0
	ldr r1, _08076658 @ =0x0203E0D4
	ldr r2, [r7, #0xc]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, #4
	adds r2, r1, r2
	ldr r3, [r2]
	adds r1, r3, #0
	adds r2, r3, #0
	adds r2, #0x55
	ldrb r1, [r2]
	cmp r1, #0x1b
	beq _0807665C
	ldr r1, _08076658 @ =0x0203E0D4
	ldr r2, [r7, #0xc]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, #4
	adds r2, r1, r2
	ldr r3, [r2]
	adds r1, r3, #0
	adds r2, r3, #0
	adds r2, #0x55
	ldrb r1, [r2]
	cmp r1, #0x33
	beq _0807665C
	b _0807665E
	.align 2, 0
_08076658: .4byte 0x0203E0D4
_0807665C:
	movs r0, #1
_0807665E:
	str r0, [r7, #0x10]
	ldr r0, [r7, #0x10]
	cmp r0, #0
	beq _080766C4
	ldr r1, _0807669C @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	movs r1, #2
	ands r0, r1
	adds r2, r0, #0
	lsls r1, r2, #0x18
	lsrs r0, r1, #0x18
	cmp r0, #0
	beq _080766A0
	movs r0, #0xaf
	str r0, [r7, #4]
	ldr r0, _0807669C @ =0x0203E0D4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	movs r1, #1
	bl sub_08071D08
	b _080766BC
	.align 2, 0
_0807669C: .4byte 0x0203E0D4
_080766A0:
	movs r0, #0xb0
	str r0, [r7, #4]
	ldr r0, _080766C0 @ =0x0203E0D4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	movs r1, #0
	bl sub_08071D08
_080766BC:
	b _080766E8
	.align 2, 0
_080766C0: .4byte 0x0203E0D4
_080766C4:
	ldr r1, _080766E0 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	movs r1, #2
	ands r0, r1
	adds r2, r0, #0
	lsls r1, r2, #0x18
	lsrs r0, r1, #0x18
	cmp r0, #0
	beq _080766E4
	movs r0, #0xd5
	str r0, [r7, #4]
	b _080766E8
	.align 2, 0
_080766E0: .4byte 0x0203E0D4
_080766E4:
	movs r0, #0xd2
	str r0, [r7, #4]
_080766E8:
	ldr r1, _080767A4 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5a
	ldrh r0, [r1]
	movs r1, #1
	ands r0, r1
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080767AC
	ldr r0, [r7, #4]
	ldr r1, _080767A4 @ =0x0203E0D4
	ldr r2, [r7, #0xc]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	adds r2, r1, #0
	lsls r1, r2, #4
	ldr r2, _080767A8 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	subs r1, r1, r3
	bl sub_080151FC
	ldr r0, _080767A4 @ =0x0203E0D4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r4, [r1]
	ldr r0, _080767A4 @ =0x0203E0D4
	ldr r1, [r7, #8]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	adds r1, r2, #0
	adds r1, #0x4a
	ldrh r2, [r1]
	adds r0, r2, #0
	bl sub_0806C228
	lsls r2, r0, #0x18
	lsrs r1, r2, #0x18
	adds r0, r4, #0
	bl sub_0806E630
	bl sub_080759B0
	ldr r0, _080767A4 @ =0x0203E0D4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x10
	ldrsb r0, [r1, r0]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r1, _080767A8 @ =gBmSt
	movs r3, #0xc
	ldrsh r2, [r1, r3]
	subs r1, r0, r2
	movs r0, #0xd8
	bl sub_080151FC
	ldr r0, _080767A4 @ =0x0203E0D4
	ldr r1, [r7, #8]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	bl sub_0806E5C0
	b _0807680E
	.align 2, 0
_080767A4: .4byte 0x0203E0D4
_080767A8: .4byte gBmSt
_080767AC:
	ldr r0, [r7, #4]
	ldr r1, _08076818 @ =0x0203E0D4
	ldr r2, [r7, #0xc]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	adds r2, r1, #0
	lsls r1, r2, #4
	ldr r2, _0807681C @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	subs r1, r1, r3
	bl sub_080151FC
	ldr r0, _08076818 @ =0x0203E0D4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r4, [r1]
	ldr r0, _08076818 @ =0x0203E0D4
	ldr r1, [r7, #8]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	adds r1, r2, #0
	adds r1, #0x4a
	ldrh r2, [r1]
	adds r0, r2, #0
	bl sub_0806C228
	lsls r2, r0, #0x18
	lsrs r1, r2, #0x18
	adds r0, r4, #0
	bl sub_0806E840
_0807680E:
	add sp, #0x14
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076818: .4byte 0x0203E0D4
_0807681C: .4byte gBmSt

	thumb_func_start sub_08076820
sub_08076820: @ 0x08076820
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, _0807685C @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldrb r1, [r0, #0xd]
	ldr r0, [r7, #4]
	cmp r1, r0
	bgt _08076860
	ldr r0, _0807685C @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldrb r1, [r0, #0xd]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0xd]
	b _08076894
	.align 2, 0
_0807685C: .4byte 0x0203E0D4
_08076860:
	ldr r0, _080768F0 @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, _080768F0 @ =0x0203E0D4
	ldr r2, [r7]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r3, [r7, #4]
	adds r2, r3, #0
	ldrb r3, [r1, #0xd]
	subs r1, r3, r2
	ldrb r2, [r0, #0xd]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0, #0xd]
_08076894:
	ldr r0, _080768F0 @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, _080768F0 @ =0x0203E0D4
	ldr r2, [r7]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrb r0, [r0, #0xd]
	ldrb r1, [r1, #0xc]
	cmp r0, r1
	bls _080768E6
	ldr r0, _080768F0 @ =0x0203E0D4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, _080768F0 @ =0x0203E0D4
	ldr r2, [r7]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrb r2, [r0, #0xd]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1, #0xc]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0, #0xd]
_080768E6:
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080768F0: .4byte 0x0203E0D4

	thumb_func_start sub_080768F4
sub_080768F4: @ 0x080768F4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _0807690C @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	cmp r0, #0
	beq _08076910
	b _08076916
	.align 2, 0
_0807690C: .4byte 0x0203E0D4
_08076910:
	ldr r0, [r7]
	bl Proc_Break
_08076916:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08076920
sub_08076920: @ 0x08076920
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _0807694C @ =0x0203E0D4
	ldr r2, _0807694C @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_08071DF8
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807694C: .4byte 0x0203E0D4

	thumb_func_start sub_08076950
sub_08076950: @ 0x08076950
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _0807697C @ =0x0203E0D4
	ldr r2, _0807697C @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_08073D3C
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807697C: .4byte 0x0203E0D4

	thumb_func_start sub_08076980
sub_08076980: @ 0x08076980
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _080769AC @ =0x0203E0D4
	ldr r2, _080769AC @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_08074064
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080769AC: .4byte 0x0203E0D4

	thumb_func_start sub_080769B0
sub_080769B0: @ 0x080769B0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _080769DC @ =0x0203E0D4
	ldr r2, _080769DC @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_08071ECC
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080769DC: .4byte 0x0203E0D4

	thumb_func_start sub_080769E0
sub_080769E0: @ 0x080769E0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08076A10 @ =0x0203E0D4
	ldr r2, _08076A10 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r2, r0, r1
	ldr r0, [r2]
	ldr r1, _08076A14 @ =0x083FBC64
	ldr r2, _08076A18 @ =0x083FCD90
	bl sub_08072638
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076A10: .4byte 0x0203E0D4
_08076A14: .4byte 0x083FBC64
_08076A18: .4byte 0x083FCD90

	thumb_func_start sub_08076A1C
sub_08076A1C: @ 0x08076A1C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08076A4C @ =0x0203E0D4
	ldr r2, _08076A4C @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r2, r0, r1
	ldr r0, [r2]
	ldr r1, _08076A50 @ =0x083FBC64
	ldr r2, _08076A54 @ =0x083FCD70
	bl sub_08072638
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076A4C: .4byte 0x0203E0D4
_08076A50: .4byte 0x083FBC64
_08076A54: .4byte 0x083FCD70

	thumb_func_start sub_08076A58
sub_08076A58: @ 0x08076A58
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08076A88 @ =0x0203E0D4
	ldr r2, _08076A88 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r2, r0, r1
	ldr r0, [r2]
	ldr r1, _08076A8C @ =0x083FD11C
	ldr r2, _08076A90 @ =0x083FD3D8
	movs r3, #0x8b
	bl sub_08072910
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076A88: .4byte 0x0203E0D4
_08076A8C: .4byte 0x083FD11C
_08076A90: .4byte 0x083FD3D8

	thumb_func_start sub_08076A94
sub_08076A94: @ 0x08076A94
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08076AC4 @ =0x0203E0D4
	ldr r2, _08076AC4 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r2, r0, r1
	ldr r0, [r2]
	ldr r1, _08076AC8 @ =0x083FCDB0
	ldr r2, _08076ACC @ =0x083FD3D8
	movs r3, #0x89
	bl sub_08072910
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076AC4: .4byte 0x0203E0D4
_08076AC8: .4byte 0x083FCDB0
_08076ACC: .4byte 0x083FD3D8

	thumb_func_start sub_08076AD0
sub_08076AD0: @ 0x08076AD0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08076B00 @ =0x0203E0D4
	ldr r2, _08076B00 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r2, r0, r1
	ldr r0, [r2]
	ldr r1, _08076B04 @ =0x083FCF24
	ldr r2, _08076B08 @ =0x083FD3D8
	movs r3, #0x8a
	bl sub_08072910
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076B00: .4byte 0x0203E0D4
_08076B04: .4byte 0x083FCF24
_08076B08: .4byte 0x083FD3D8

	thumb_func_start sub_08076B0C
sub_08076B0C: @ 0x08076B0C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08076B3C @ =0x0203E0D4
	ldr r2, _08076B3C @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r2, r0, r1
	ldr r0, [r2]
	ldr r1, _08076B40 @ =0x083FD11C
	ldr r2, _08076B44 @ =0x083FD3D8
	movs r3, #0x8b
	bl sub_08072910
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076B3C: .4byte 0x0203E0D4
_08076B40: .4byte 0x083FD11C
_08076B44: .4byte 0x083FD3D8

	thumb_func_start sub_08076B48
sub_08076B48: @ 0x08076B48
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08076B78 @ =0x0203E0D4
	ldr r2, _08076B78 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r2, r0, r1
	ldr r0, [r2]
	ldr r1, _08076B7C @ =0x083FCDB0
	ldr r2, _08076B80 @ =0x083FD3D8
	movs r3, #0x89
	bl sub_08072910
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076B78: .4byte 0x0203E0D4
_08076B7C: .4byte 0x083FCDB0
_08076B80: .4byte 0x083FD3D8

	thumb_func_start sub_08076B84
sub_08076B84: @ 0x08076B84
	push {r4, r5, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _08076C34 @ =gPlaySt
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r0, [r1]
	lsls r1, r0, #0x1e
	lsrs r0, r1, #0x1f
	cmp r0, #0
	bne _08076BA2
	movs r0, #0xb4
	bl m4aSongNumStart
_08076BA2:
	ldr r0, _08076C38 @ =0x0203E0D4
	ldr r1, _08076C3C @ =gBattleTarget
	adds r2, r1, #0
	adds r1, #0x73
	adds r2, r0, #0
	adds r0, #0x60
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, _08076C38 @ =0x0203E0D4
	ldr r1, _08076C3C @ =gBattleTarget
	adds r2, r1, #0
	adds r1, #0x74
	adds r2, r0, #0
	adds r0, #0x61
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, _08076C38 @ =0x0203E0D4
	ldr r2, _08076C38 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r2, r0, r1
	ldr r0, [r2]
	ldr r1, _08076C38 @ =0x0203E0D4
	ldr r3, _08076C38 @ =0x0203E0D4
	adds r2, r3, #0
	adds r3, #0x59
	ldrb r2, [r3]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	ldr r2, _08076C38 @ =0x0203E0D4
	ldr r4, _08076C38 @ =0x0203E0D4
	adds r3, r4, #0
	adds r4, #0x59
	ldrb r3, [r4]
	adds r5, r3, #0
	lsls r4, r5, #2
	adds r4, r4, r3
	lsls r3, r4, #2
	adds r2, r2, r3
	ldr r3, [r2]
	movs r2, #0x11
	ldrsb r2, [r3, r2]
	bl sub_08072EAC
	add sp, #4
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076C34: .4byte gPlaySt
_08076C38: .4byte 0x0203E0D4
_08076C3C: .4byte gBattleTarget

	thumb_func_start sub_08076C40
sub_08076C40: @ 0x08076C40
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08076C7C @ =0x0203E0D4
	ldr r2, _08076C7C @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r2, r0, r1
	ldr r0, [r2]
	ldr r2, _08076C7C @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x60
	ldrb r1, [r2]
	ldr r3, _08076C7C @ =0x0203E0D4
	adds r2, r3, #0
	adds r3, #0x61
	ldrb r2, [r3]
	bl sub_08072EAC
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076C7C: .4byte 0x0203E0D4

	thumb_func_start sub_08076C80
sub_08076C80: @ 0x08076C80
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08076CAC @ =0x0203E0D4
	ldr r2, _08076CAC @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_08073084
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076CAC: .4byte 0x0203E0D4

	thumb_func_start sub_08076CB0
sub_08076CB0: @ 0x08076CB0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _08076CD4 @ =0x0203E0D4
	adds r0, r1, #0
	adds r1, #0x60
	ldrb r0, [r1]
	ldr r2, _08076CD4 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x61
	ldrb r1, [r2]
	bl sub_08074240
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076CD4: .4byte 0x0203E0D4

	thumb_func_start sub_08076CD8
sub_08076CD8: @ 0x08076CD8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08076D04 @ =0x0203E0D4
	ldr r2, _08076D04 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_0807340C
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076D04: .4byte 0x0203E0D4

	thumb_func_start sub_08076D08
sub_08076D08: @ 0x08076D08
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08076D34 @ =0x0203E0D4
	ldr r2, _08076D34 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_0807384C
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076D34: .4byte 0x0203E0D4

	thumb_func_start sub_08076D38
sub_08076D38: @ 0x08076D38
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08076D64 @ =0x0203E0D4
	ldr r2, _08076D64 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_08073984
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076D64: .4byte 0x0203E0D4

	thumb_func_start sub_08076D68
sub_08076D68: @ 0x08076D68
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08076D94 @ =0x0203E0D4
	ldr r2, _08076D94 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_080734FC
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076D94: .4byte 0x0203E0D4

	thumb_func_start sub_08076D98
sub_08076D98: @ 0x08076D98
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08076DC8 @ =0x0203E0D4
	ldr r2, _08076DC8 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	movs r1, #0
	bl sub_0806E380
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076DC8: .4byte 0x0203E0D4

	thumb_func_start sub_08076DCC
sub_08076DCC: @ 0x08076DCC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08076DFC @ =0x0203E0D4
	ldr r2, _08076DFC @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	bl sub_0806E400
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076DFC: .4byte 0x0203E0D4

	thumb_func_start sub_08076E00
sub_08076E00: @ 0x08076E00
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08076E30 @ =0x0203E0D4
	ldr r2, _08076E30 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	bl sub_0806E2A0
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076E30: .4byte 0x0203E0D4

	thumb_func_start sub_08076E34
sub_08076E34: @ 0x08076E34
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08076EA0 @ =0x0203E0D4
	ldr r2, _08076EA0 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x10
	ldrsb r0, [r1, r0]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r1, _08076EA4 @ =gBmSt
	movs r3, #0xc
	ldrsh r2, [r1, r3]
	subs r1, r0, r2
	adds r0, r1, #0
	adds r0, #8
	ldr r1, _08076EA0 @ =0x0203E0D4
	ldr r3, _08076EA0 @ =0x0203E0D4
	adds r2, r3, #0
	adds r3, #0x59
	ldrb r2, [r3]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0x11
	ldrsb r1, [r2, r1]
	adds r2, r1, #0
	lsls r1, r2, #4
	ldr r2, _08076EA4 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	subs r1, r1, r3
	adds r2, r1, #0
	adds r2, #8
	adds r1, r2, #0
	bl sub_08075DB0
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076EA0: .4byte 0x0203E0D4
_08076EA4: .4byte gBmSt

	thumb_func_start sub_08076EA8
sub_08076EA8: @ 0x08076EA8
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _08076F28 @ =gPlaySt
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r0, [r1]
	lsls r1, r0, #0x1e
	lsrs r0, r1, #0x1f
	cmp r0, #0
	bne _08076EC6
	movs r0, #0xb5
	bl m4aSongNumStart
_08076EC6:
	ldr r0, _08076F2C @ =0x0203E0D4
	ldr r2, _08076F2C @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x10
	ldrsb r0, [r1, r0]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r1, _08076F30 @ =gBmSt
	movs r3, #0xc
	ldrsh r2, [r1, r3]
	subs r1, r0, r2
	adds r0, r1, #0
	adds r0, #8
	ldr r1, _08076F2C @ =0x0203E0D4
	ldr r3, _08076F2C @ =0x0203E0D4
	adds r2, r3, #0
	adds r3, #0x59
	ldrb r2, [r3]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0x11
	ldrsb r1, [r2, r1]
	adds r2, r1, #0
	lsls r1, r2, #4
	ldr r2, _08076F30 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	subs r1, r1, r3
	adds r2, r1, #0
	adds r2, #8
	adds r1, r2, #0
	bl sub_08075DDC
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076F28: .4byte gPlaySt
_08076F2C: .4byte 0x0203E0D4
_08076F30: .4byte gBmSt

	thumb_func_start sub_08076F34
sub_08076F34: @ 0x08076F34
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08076F64 @ =0x0203E0D4
	ldr r2, _08076F64 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	bl sub_0806E2C8
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076F64: .4byte 0x0203E0D4

	thumb_func_start sub_08076F68
sub_08076F68: @ 0x08076F68
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r0, _08076FF8 @ =0x0203E0D4
	ldr r2, _08076FF8 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	str r1, [r7, #4]
	ldr r0, _08076FF8 @ =0x0203E0D4
	ldr r2, _08076FF8 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r0, [r1]
	ldr r2, _08076FF8 @ =0x0203E0D4
	adds r1, r2, #0
	adds r2, #0x60
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #4
	ldr r3, _08076FF8 @ =0x0203E0D4
	adds r2, r3, #0
	adds r3, #0x61
	ldrb r2, [r3]
	adds r3, r2, #0
	lsls r2, r3, #4
	bl sub_0806E2E8
	ldr r0, [r7, #4]
	ldr r1, _08076FF8 @ =0x0203E0D4
	adds r2, r1, #0
	adds r1, #0x60
	ldrb r2, [r0, #0x10]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0, #0x10]
	ldr r0, [r7, #4]
	ldr r1, _08076FF8 @ =0x0203E0D4
	adds r2, r1, #0
	adds r1, #0x61
	ldrb r2, [r0, #0x11]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0, #0x11]
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076FF8: .4byte 0x0203E0D4

	thumb_func_start sub_08076FFC
sub_08076FFC: @ 0x08076FFC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	bl sub_080758AC
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08077014
sub_08077014: @ 0x08077014
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	bl sub_08075938
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807702C
sub_0807702C: @ 0x0807702C
	push {r7, lr}
	mov r7, sp
	ldr r1, _0807705C @ =0x0203E138
	adds r0, r1, #0
	bl sub_080778C0
	ldr r1, _08077060 @ =0x0203E3B8
	adds r0, r1, #0
	bl sub_080778C0
	ldr r0, _08077064 @ =0x0203E638
	ldr r1, _0807705C @ =0x0203E138
	str r1, [r0]
	ldr r0, _08077064 @ =0x0203E638
	ldr r1, _08077060 @ =0x0203E3B8
	str r1, [r0, #4]
	ldr r0, _08077068 @ =0x0203E640
	ldr r1, _08077064 @ =0x0203E638
	ldr r2, [r1]
	str r2, [r0]
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807705C: .4byte 0x0203E138
_08077060: .4byte 0x0203E3B8
_08077064: .4byte 0x0203E638
_08077068: .4byte 0x0203E640

	thumb_func_start sub_0807706C
sub_0807706C: @ 0x0807706C
	push {r7, lr}
	mov r7, sp
	ldr r0, _08077194 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08077194 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xbf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08077194 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08077194 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2d
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08077194 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x31
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08077194 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xf0
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08077194 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x30
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xa0
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08077194 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0xfe
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08077194 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0xfd
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08077194 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0xfb
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08077194 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0xf7
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08077194 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0xef
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08077194 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08077194 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08077194 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #4
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08077194 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08077194 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, _08077198 @ =sub_080771E0
	adds r0, r1, #0
	bl SetOnHBlankA
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08077194: .4byte gDispIo
_08077198: .4byte sub_080771E0

	thumb_func_start sub_0807719C
sub_0807719C: @ 0x0807719C
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r0, _080771CC @ =0x0203E638
	ldr r1, [r0, #4]
	adds r0, r1, #0
	bl sub_080778C0
	ldr r1, _080771CC @ =0x0203E638
	ldr r0, [r1, #4]
	ldr r2, [r7, #4]
	ldr r3, [r7, #8]
	ldr r1, [r7]
	bl sub_0807798C
	bl sub_08077898
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080771CC: .4byte 0x0203E638

	thumb_func_start sub_080771D0
sub_080771D0: @ 0x080771D0
	push {r7, lr}
	mov r7, sp
	movs r0, #0
	bl SetOnHBlankA
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080771E0
sub_080771E0: @ 0x080771E0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	adds r0, r7, #0
	ldr r1, _08077208 @ =0x04000006
	ldrh r2, [r1]
	strh r2, [r0]
	adds r0, r7, #0
	ldrh r1, [r0]
	cmp r1, #0x9f
	bls _08077214
	ldr r0, _0807720C @ =0x0203E640
	ldr r1, _08077210 @ =0x0203E638
	ldr r2, [r1]
	str r2, [r0]
	adds r0, r7, #0
	movs r1, #0
	strh r1, [r0]
	b _08077222
	.align 2, 0
_08077208: .4byte 0x04000006
_0807720C: .4byte 0x0203E640
_08077210: .4byte 0x0203E638
_08077214:
	adds r1, r7, #0
	adds r0, r7, #0
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r1, r2, #1
	adds r2, r1, #0
	strh r2, [r0]
_08077222:
	ldr r0, _08077240 @ =0x04000040
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _08077244 @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r1]
	strh r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08077240: .4byte 0x04000040
_08077244: .4byte 0x0203E640

	thumb_func_start sub_08077248
sub_08077248: @ 0x08077248
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	adds r0, r7, #0
	ldr r1, _08077270 @ =0x04000006
	ldrh r2, [r1]
	strh r2, [r0]
	adds r0, r7, #0
	ldrh r1, [r0]
	cmp r1, #0x9f
	bls _0807727C
	ldr r0, _08077274 @ =0x0203E640
	ldr r1, _08077278 @ =0x0203E638
	ldr r2, [r1]
	str r2, [r0]
	adds r0, r7, #0
	movs r1, #0
	strh r1, [r0]
	b _0807728A
	.align 2, 0
_08077270: .4byte 0x04000006
_08077274: .4byte 0x0203E640
_08077278: .4byte 0x0203E638
_0807727C:
	adds r1, r7, #0
	adds r0, r7, #0
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r1, r2, #1
	adds r2, r1, #0
	strh r2, [r0]
_0807728A:
	ldr r0, _080772C0 @ =0x04000040
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _080772C4 @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r1]
	strh r2, [r0]
	ldr r0, _080772C8 @ =0x04000018
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _080772C4 @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	movs r3, #0xa0
	lsls r3, r3, #1
	adds r2, r1, r3
	ldrh r1, [r2]
	strh r1, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080772C0: .4byte 0x04000040
_080772C4: .4byte 0x0203E640
_080772C8: .4byte 0x04000018

	thumb_func_start sub_080772CC
sub_080772CC: @ 0x080772CC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	adds r0, r7, #0
	ldr r1, _080772F4 @ =0x04000006
	ldrh r2, [r1]
	strh r2, [r0]
	adds r0, r7, #0
	ldrh r1, [r0]
	cmp r1, #0x9f
	bls _08077300
	ldr r0, _080772F8 @ =0x0203E640
	ldr r1, _080772FC @ =0x0203E638
	ldr r2, [r1]
	str r2, [r0]
	adds r0, r7, #0
	movs r1, #0
	strh r1, [r0]
	b _0807730E
	.align 2, 0
_080772F4: .4byte 0x04000006
_080772F8: .4byte 0x0203E640
_080772FC: .4byte 0x0203E638
_08077300:
	adds r1, r7, #0
	adds r0, r7, #0
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r1, r2, #1
	adds r2, r1, #0
	strh r2, [r0]
_0807730E:
	ldr r0, _08077344 @ =0x05000022
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _08077348 @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r1]
	strh r2, [r0]
	ldr r0, _0807734C @ =0x05000042
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _08077348 @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	movs r3, #0xa0
	lsls r3, r3, #1
	adds r2, r1, r3
	ldrh r1, [r2]
	strh r1, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08077344: .4byte 0x05000022
_08077348: .4byte 0x0203E640
_0807734C: .4byte 0x05000042

	thumb_func_start sub_08077350
sub_08077350: @ 0x08077350
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	adds r0, r7, #0
	ldr r1, _08077378 @ =0x04000006
	ldrh r2, [r1]
	strh r2, [r0]
	adds r0, r7, #0
	ldrh r1, [r0]
	cmp r1, #0x9f
	bls _08077384
	ldr r0, _0807737C @ =0x0203E640
	ldr r1, _08077380 @ =0x0203E638
	ldr r2, [r1]
	str r2, [r0]
	adds r0, r7, #0
	movs r1, #0
	strh r1, [r0]
	b _08077392
	.align 2, 0
_08077378: .4byte 0x04000006
_0807737C: .4byte 0x0203E640
_08077380: .4byte 0x0203E638
_08077384:
	adds r1, r7, #0
	adds r0, r7, #0
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r1, r2, #1
	adds r2, r1, #0
	strh r2, [r0]
_08077392:
	ldr r0, _080773B0 @ =0x04000052
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _080773B4 @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r1]
	strh r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080773B0: .4byte 0x04000052
_080773B4: .4byte 0x0203E640

	thumb_func_start sub_080773B8
sub_080773B8: @ 0x080773B8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	adds r0, r7, #0
	ldr r1, _080773E0 @ =0x04000006
	ldrh r2, [r1]
	strh r2, [r0]
	adds r0, r7, #0
	ldrh r1, [r0]
	cmp r1, #0x9f
	bls _080773EC
	ldr r0, _080773E4 @ =0x0203E640
	ldr r1, _080773E8 @ =0x0203E638
	ldr r2, [r1]
	str r2, [r0]
	adds r0, r7, #0
	movs r1, #0
	strh r1, [r0]
	b _080773FA
	.align 2, 0
_080773E0: .4byte 0x04000006
_080773E4: .4byte 0x0203E640
_080773E8: .4byte 0x0203E638
_080773EC:
	adds r1, r7, #0
	adds r0, r7, #0
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r1, r2, #1
	adds r2, r1, #0
	strh r2, [r0]
_080773FA:
	ldr r0, _08077418 @ =0x04000054
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _0807741C @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r1]
	strh r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08077418: .4byte 0x04000054
_0807741C: .4byte 0x0203E640

	thumb_func_start sub_08077420
sub_08077420: @ 0x08077420
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0xc
	add r7, sp, #4
	adds r5, r0, #0
	adds r4, r1, #0
	adds r1, r2, #0
	adds r0, r3, #0
	adds r2, r7, #0
	adds r3, r5, #0
	strh r3, [r2]
	adds r2, r7, #2
	adds r3, r4, #0
	strh r3, [r2]
	adds r2, r7, #4
	strh r1, [r2]
	adds r1, r7, #6
	strh r0, [r1]
	ldr r1, _08077554 @ =0x0203E638
	ldr r0, [r1, #4]
	adds r2, r7, #0
	ldrh r1, [r2]
	adds r3, r7, #2
	ldrh r2, [r3]
	adds r4, r7, #4
	ldrh r3, [r4]
	adds r4, r7, #4
	ldrh r5, [r4]
	movs r6, #0x1f
	adds r4, r5, #0
	ands r4, r6
	adds r6, r4, #0
	lsls r5, r6, #0x10
	lsrs r4, r5, #0x10
	lsrs r5, r4, #1
	adds r4, r5, #0
	movs r5, #0x1f
	ands r4, r5
	adds r5, r7, #4
	ldrh r6, [r5]
	movs r5, #0xf8
	lsls r5, r5, #2
	mov r8, r5
	mov r5, r8
	ands r5, r6
	mov r8, r5
	mov r5, r8
	lsls r6, r5, #0x10
	lsrs r5, r6, #0x10
	lsrs r6, r5, #1
	adds r5, r6, #0
	movs r6, #0xf8
	lsls r6, r6, #2
	ands r5, r6
	orrs r4, r5
	adds r5, r7, #4
	ldrh r6, [r5]
	movs r5, #0xf8
	lsls r5, r5, #7
	mov r8, r5
	mov r5, r8
	ands r5, r6
	mov r8, r5
	mov r5, r8
	lsls r6, r5, #0x10
	lsrs r5, r6, #0x10
	lsrs r6, r5, #1
	adds r5, r6, #0
	movs r6, #0xf8
	lsls r6, r6, #7
	ands r5, r6
	orrs r4, r5
	adds r6, r4, #0
	lsls r5, r6, #0x10
	lsrs r4, r5, #0x10
	str r4, [sp]
	bl sub_08077A70
	ldr r0, _08077554 @ =0x0203E638
	ldr r1, [r0, #4]
	movs r2, #0xa0
	lsls r2, r2, #1
	adds r0, r1, r2
	adds r2, r7, #0
	ldrh r1, [r2]
	adds r3, r7, #2
	ldrh r2, [r3]
	adds r4, r7, #6
	ldrh r3, [r4]
	adds r4, r7, #6
	ldrh r5, [r4]
	movs r6, #0x1f
	adds r4, r5, #0
	ands r4, r6
	adds r6, r4, #0
	lsls r5, r6, #0x10
	lsrs r4, r5, #0x10
	lsrs r5, r4, #1
	adds r4, r5, #0
	movs r5, #0x1f
	ands r4, r5
	adds r5, r7, #6
	ldrh r6, [r5]
	movs r5, #0xf8
	lsls r5, r5, #2
	mov r8, r5
	mov r5, r8
	ands r5, r6
	mov r8, r5
	mov r5, r8
	lsls r6, r5, #0x10
	lsrs r5, r6, #0x10
	lsrs r6, r5, #1
	adds r5, r6, #0
	movs r6, #0xf8
	lsls r6, r6, #2
	ands r5, r6
	orrs r4, r5
	adds r5, r7, #6
	ldrh r6, [r5]
	movs r5, #0xf8
	lsls r5, r5, #7
	mov r8, r5
	mov r5, r8
	ands r5, r6
	mov r8, r5
	mov r5, r8
	lsls r6, r5, #0x10
	lsrs r5, r6, #0x10
	lsrs r6, r5, #1
	adds r5, r6, #0
	movs r6, #0xf8
	lsls r6, r6, #7
	ands r5, r6
	orrs r4, r5
	adds r6, r4, #0
	lsls r5, r6, #0x10
	lsrs r4, r5, #0x10
	str r4, [sp]
	bl sub_08077A70
	bl sub_08077898
	ldr r1, _08077558 @ =sub_080772CC
	adds r0, r1, #0
	bl SetOnHBlankA
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08077554: .4byte 0x0203E638
_08077558: .4byte sub_080772CC

	thumb_func_start sub_0807755C
sub_0807755C: @ 0x0807755C
	push {r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, _08077584 @ =0x0203E638
	ldr r1, [r0, #4]
	adds r0, r1, #0
	bl sub_080778C0
_08077574:
	ldr r0, [r7, #0x1c]
	ldrb r1, [r0]
	cmp r1, #0xff
	beq _08077588
	ldr r0, [r7, #4]
	cmp r0, #0
	bge _0807758A
	b _08077588
	.align 2, 0
_08077584: .4byte 0x0203E638
_08077588:
	b _080775D8
_0807758A:
	ldr r0, [r7, #0x1c]
	ldrb r1, [r0]
	ldr r2, [r7, #8]
	adds r0, r1, #0
	muls r0, r2, r0
	ldr r1, [r7, #0xc]
	bl Div
	str r0, [r7, #0x10]
	ldr r0, [r7, #0x1c]
	adds r1, r0, #1
	str r1, [r7, #0x1c]
	ldr r0, [r7, #0x10]
	cmp r0, #0
	ble _080775CA
	ldr r1, _080775D4 @ =0x0203E638
	ldr r0, [r1, #4]
	ldr r1, [r7]
	ldr r3, [r7, #0x10]
	adds r2, r1, r3
	subs r1, r2, #1
	ldr r2, [r7, #4]
	bl sub_08077944
	ldr r1, _080775D4 @ =0x0203E638
	ldr r0, [r1, #4]
	ldr r1, [r7]
	ldr r2, [r7, #0x10]
	subs r1, r1, r2
	ldr r2, [r7, #4]
	bl sub_080778FC
_080775CA:
	ldr r0, [r7, #4]
	subs r1, r0, #1
	str r1, [r7, #4]
	b _08077574
	.align 2, 0
_080775D4: .4byte 0x0203E638
_080775D8:
	ldr r0, [r7, #0x10]
	cmp r0, #0
	ble _08077614
_080775DE:
	ldr r0, [r7, #4]
	cmp r0, #0
	bge _080775E6
	b _08077614
_080775E6:
	ldr r1, _08077610 @ =0x0203E638
	ldr r0, [r1, #4]
	ldr r1, [r7]
	ldr r3, [r7, #0x10]
	adds r2, r1, r3
	subs r1, r2, #1
	ldr r2, [r7, #4]
	bl sub_08077944
	ldr r1, _08077610 @ =0x0203E638
	ldr r0, [r1, #4]
	ldr r1, [r7]
	ldr r2, [r7, #0x10]
	subs r1, r1, r2
	ldr r2, [r7, #4]
	bl sub_080778FC
	ldr r0, [r7, #4]
	subs r1, r0, #1
	str r1, [r7, #4]
	b _080775DE
	.align 2, 0
_08077610: .4byte 0x0203E638
_08077614:
	add sp, #0x14
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0807761C
sub_0807761C: @ 0x0807761C
	push {r4, r5, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	adds r4, r1, #0
	adds r1, r2, #0
	adds r0, r3, #0
	adds r2, r7, #4
	adds r3, r4, #0
	strh r3, [r2]
	adds r2, r7, #6
	strh r1, [r2]
	adds r1, r7, #0
	adds r1, #8
	strh r0, [r1]
	movs r0, #0
	str r0, [r7, #0xc]
_0807763E:
	ldr r0, [r7, #0xc]
	cmp r0, #0x9f
	ble _08077646
	b _0807768C
_08077646:
	ldr r0, [r7]
	ldr r1, _08077688 @ =gSinLut
	adds r2, r7, #0
	adds r2, #8
	movs r4, #0
	ldrsh r3, [r2, r4]
	ldr r4, [r7, #0xc]
	adds r2, r3, #0
	muls r2, r4, r2
	adds r3, r7, #4
	movs r5, #0
	ldrsh r4, [r3, r5]
	adds r2, r2, r4
	movs r3, #0xff
	ands r2, r3
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r3, r1, r2
	movs r2, #0
	ldrsh r1, [r3, r2]
	adds r2, r7, #6
	movs r4, #0
	ldrsh r3, [r2, r4]
	muls r1, r3, r1
	asrs r2, r1, #0xc
	adds r1, r2, #0
	strh r1, [r0]
	adds r0, #2
	str r0, [r7]
	ldr r0, [r7, #0xc]
	adds r1, r0, #1
	str r1, [r7, #0xc]
	b _0807763E
	.align 2, 0
_08077688: .4byte gSinLut
_0807768C:
	add sp, #0x10
	pop {r4, r5, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08077694
sub_08077694: @ 0x08077694
	push {r4, r5, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	adds r4, r1, #0
	adds r1, r2, #0
	adds r0, r3, #0
	adds r2, r7, #4
	adds r3, r4, #0
	strh r3, [r2]
	adds r2, r7, #6
	strh r1, [r2]
	adds r1, r7, #0
	adds r1, #8
	strh r0, [r1]
	movs r0, #0
	str r0, [r7, #0xc]
_080776B6:
	ldr r0, [r7, #0xc]
	cmp r0, #0x9f
	ble _080776BE
	b _0807770C
_080776BE:
	ldr r0, [r7]
	ldr r1, _08077708 @ =gSinLut
	adds r2, r7, #0
	adds r2, #8
	movs r4, #0
	ldrsh r3, [r2, r4]
	ldr r4, [r7, #0xc]
	adds r2, r3, #0
	muls r2, r4, r2
	adds r3, r7, #4
	movs r5, #0
	ldrsh r4, [r3, r5]
	adds r2, r2, r4
	movs r3, #0xff
	ands r2, r3
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r3, r1, r2
	movs r2, #0
	ldrsh r1, [r3, r2]
	adds r2, r7, #6
	movs r4, #0
	ldrsh r3, [r2, r4]
	muls r1, r3, r1
	asrs r2, r1, #0xc
	adds r1, r2, #0
	ldr r3, [r7, #0x20]
	adds r2, r3, #0
	adds r1, r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	adds r0, #2
	str r0, [r7]
	ldr r0, [r7, #0xc]
	adds r1, r0, #1
	str r1, [r7, #0xc]
	b _080776B6
	.align 2, 0
_08077708: .4byte gSinLut
_0807770C:
	add sp, #0x10
	pop {r4, r5, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08077714
sub_08077714: @ 0x08077714
	push {r4, r5, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	adds r4, r1, #0
	adds r1, r2, #0
	adds r0, r3, #0
	adds r2, r7, #4
	adds r3, r4, #0
	strh r3, [r2]
	adds r2, r7, #6
	strh r1, [r2]
	adds r1, r7, #0
	adds r1, #8
	strh r0, [r1]
	ldr r0, [r7]
	adds r1, r0, #2
	str r1, [r7]
	movs r0, #1
	str r0, [r7, #0xc]
_0807773C:
	ldr r0, [r7, #0xc]
	cmp r0, #0x9f
	ble _08077744
	b _0807778C
_08077744:
	ldr r0, [r7]
	ldr r1, _08077788 @ =gSinLut
	adds r2, r7, #0
	adds r2, #8
	movs r4, #0
	ldrsh r3, [r2, r4]
	ldr r4, [r7, #0xc]
	adds r2, r3, #0
	muls r2, r4, r2
	adds r3, r7, #4
	movs r5, #0
	ldrsh r4, [r3, r5]
	adds r2, r2, r4
	movs r3, #0xff
	ands r2, r3
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r3, r1, r2
	movs r2, #0
	ldrsh r1, [r3, r2]
	adds r2, r7, #6
	movs r4, #0
	ldrsh r3, [r2, r4]
	muls r1, r3, r1
	asrs r2, r1, #0xc
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	adds r1, r0, #4
	str r1, [r7]
	ldr r0, [r7, #0xc]
	adds r1, r0, #2
	str r1, [r7, #0xc]
	b _0807773C
	.align 2, 0
_08077788: .4byte gSinLut
_0807778C:
	add sp, #0x10
	pop {r4, r5, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08077794
sub_08077794: @ 0x08077794
	push {r4, r5, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	adds r4, r1, #0
	adds r1, r2, #0
	adds r0, r3, #0
	adds r2, r7, #4
	adds r3, r4, #0
	strh r3, [r2]
	adds r2, r7, #6
	strh r1, [r2]
	adds r1, r7, #0
	adds r1, #8
	strh r0, [r1]
	ldr r0, [r7]
	adds r1, r0, #2
	str r1, [r7]
	movs r0, #1
	str r0, [r7, #0xc]
_080777BC:
	ldr r0, [r7, #0xc]
	cmp r0, #0x9f
	ble _080777C4
	b _08077814
_080777C4:
	ldr r0, [r7]
	ldr r1, _08077810 @ =gSinLut
	adds r2, r7, #0
	adds r2, #8
	movs r4, #0
	ldrsh r3, [r2, r4]
	ldr r4, [r7, #0xc]
	adds r2, r3, #0
	muls r2, r4, r2
	adds r3, r7, #4
	movs r5, #0
	ldrsh r4, [r3, r5]
	adds r2, r2, r4
	movs r3, #0xff
	ands r2, r3
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r3, r1, r2
	movs r2, #0
	ldrsh r1, [r3, r2]
	adds r2, r7, #6
	movs r4, #0
	ldrsh r3, [r2, r4]
	adds r2, r1, #0
	muls r2, r3, r2
	asrs r1, r2, #0xc
	ldr r3, [r7, #0x20]
	adds r2, r3, #0
	adds r2, r1, r2
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	adds r1, r0, #4
	str r1, [r7]
	ldr r0, [r7, #0xc]
	adds r1, r0, #2
	str r1, [r7, #0xc]
	b _080777BC
	.align 2, 0
_08077810: .4byte gSinLut
_08077814:
	add sp, #0x10
	pop {r4, r5, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0807781C
sub_0807781C: @ 0x0807781C
	push {r4, r5, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	adds r4, r1, #0
	adds r1, r2, #0
	adds r0, r3, #0
	adds r2, r7, #4
	adds r3, r4, #0
	strh r3, [r2]
	adds r2, r7, #6
	strh r1, [r2]
	adds r1, r7, #0
	adds r1, #8
	strh r0, [r1]
	ldr r0, [r7, #0x20]
	str r0, [r7, #0xc]
_0807783E:
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #0x24]
	cmp r0, r1
	blt _08077848
	b _08077890
_08077848:
	ldr r0, [r7]
	ldr r1, _0807788C @ =gSinLut
	adds r2, r7, #0
	adds r2, #8
	movs r4, #0
	ldrsh r3, [r2, r4]
	ldr r4, [r7, #0xc]
	adds r2, r3, #0
	muls r2, r4, r2
	adds r3, r7, #4
	movs r5, #0
	ldrsh r4, [r3, r5]
	adds r2, r2, r4
	movs r3, #0xff
	ands r2, r3
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r3, r1, r2
	movs r2, #0
	ldrsh r1, [r3, r2]
	adds r2, r7, #6
	movs r4, #0
	ldrsh r3, [r2, r4]
	muls r1, r3, r1
	asrs r2, r1, #0xc
	adds r1, r2, #0
	strh r1, [r0]
	adds r0, #2
	str r0, [r7]
	ldr r0, [r7, #0xc]
	adds r1, r0, #1
	str r1, [r7, #0xc]
	b _0807783E
	.align 2, 0
_0807788C: .4byte gSinLut
_08077890:
	add sp, #0x10
	pop {r4, r5, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08077898
sub_08077898: @ 0x08077898
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	ldr r0, _080778BC @ =0x0203E638
	ldr r1, [r0]
	str r1, [r7]
	ldr r0, _080778BC @ =0x0203E638
	ldr r1, _080778BC @ =0x0203E638
	ldr r2, [r1, #4]
	str r2, [r0]
	ldr r0, _080778BC @ =0x0203E638
	ldr r1, [r7]
	str r1, [r0, #4]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080778BC: .4byte 0x0203E638

	thumb_func_start sub_080778C0
sub_080778C0: @ 0x080778C0
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	str r0, [r7, #8]
	movs r0, #0
	str r0, [r7, #4]
_080778D0:
	ldr r0, [r7, #4]
	cmp r0, #0x9f
	ble _080778D8
	b _080778F4
_080778D8:
	adds r0, r7, #0
	adds r0, #8
	ldr r1, [r0]
	ldr r3, _080778F0 @ =0x0000F0F0
	adds r2, r3, #0
	strh r2, [r1]
	adds r1, #2
	str r1, [r0]
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _080778D0
	.align 2, 0
_080778F0: .4byte 0x0000F0F0
_080778F4:
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080778FC
sub_080778FC: @ 0x080778FC
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r0, [r7, #8]
	cmp r0, #0
	blt _08077916
	ldr r0, [r7, #8]
	cmp r0, #0x9f
	bgt _08077916
	b _08077918
_08077916:
	b _0807793C
_08077918:
	ldr r0, [r7, #4]
	cmp r0, #0
	bge _08077922
	movs r0, #0
	str r0, [r7, #4]
_08077922:
	ldr r0, [r7, #4]
	cmp r0, #0xf0
	ble _0807792C
	movs r0, #0xf0
	str r0, [r7, #4]
_0807792C:
	ldr r1, [r7, #8]
	lsls r0, r1, #1
	ldr r2, [r7]
	adds r1, r0, r2
	adds r0, r1, #1
	ldr r1, [r7, #4]
	adds r2, r1, #0
	strb r2, [r0]
_0807793C:
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08077944
sub_08077944: @ 0x08077944
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r0, [r7, #8]
	cmp r0, #0
	blt _0807795E
	ldr r0, [r7, #8]
	cmp r0, #0x9f
	bgt _0807795E
	b _08077960
_0807795E:
	b _08077982
_08077960:
	ldr r0, [r7, #4]
	cmp r0, #0
	bge _0807796A
	movs r0, #0
	str r0, [r7, #4]
_0807796A:
	ldr r0, [r7, #4]
	cmp r0, #0xf0
	ble _08077974
	movs r0, #0xf0
	str r0, [r7, #4]
_08077974:
	ldr r1, [r7, #8]
	lsls r0, r1, #1
	ldr r1, [r7]
	adds r0, r0, r1
	ldr r1, [r7, #4]
	adds r2, r1, #0
	strb r2, [r0]
_08077982:
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807798C
sub_0807798C: @ 0x0807798C
	push {r7, lr}
	sub sp, #0x18
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, [r7, #0xc]
	str r0, [r7, #0x10]
	movs r0, #0
	str r0, [r7, #0x14]
_080779A2:
	ldr r0, [r7, #0x10]
	ldr r1, [r7, #0x14]
	cmp r0, r1
	bge _080779AC
	b _08077A68
_080779AC:
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x10]
	adds r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x14]
	adds r2, r0, r3
	ldr r0, [r7]
	bl sub_08077944
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x10]
	adds r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x14]
	subs r2, r0, r3
	ldr r0, [r7]
	bl sub_08077944
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x14]
	adds r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x10]
	adds r2, r0, r3
	ldr r0, [r7]
	bl sub_08077944
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x14]
	adds r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x10]
	subs r2, r0, r3
	ldr r0, [r7]
	bl sub_08077944
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x10]
	subs r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x14]
	adds r2, r0, r3
	ldr r0, [r7]
	bl sub_080778FC
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x10]
	subs r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x14]
	subs r2, r0, r3
	ldr r0, [r7]
	bl sub_080778FC
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x14]
	subs r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x10]
	adds r2, r0, r3
	ldr r0, [r7]
	bl sub_080778FC
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x14]
	subs r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x10]
	subs r2, r0, r3
	ldr r0, [r7]
	bl sub_080778FC
	ldr r1, [r7, #0xc]
	adds r0, r1, #1
	ldr r2, [r7, #0x14]
	lsls r1, r2, #1
	subs r0, r0, r1
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	cmp r0, #0
	bge _08077A60
	ldr r1, [r7, #0x10]
	subs r0, r1, #1
	lsls r1, r0, #1
	ldr r0, [r7, #0xc]
	adds r1, r0, r1
	str r1, [r7, #0xc]
	ldr r0, [r7, #0x10]
	subs r1, r0, #1
	str r1, [r7, #0x10]
_08077A60:
	ldr r0, [r7, #0x14]
	adds r1, r0, #1
	str r1, [r7, #0x14]
	b _080779A2
_08077A68:
	add sp, #0x18
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08077A70
sub_08077A70: @ 0x08077A70
	push {r4, r7, lr}
	sub sp, #0x28
	add r7, sp, #4
	str r0, [r7]
	adds r4, r1, #0
	adds r1, r3, #0
	ldr r0, [r7, #0x30]
	adds r3, r7, #4
	strh r4, [r3]
	adds r3, r7, #6
	strh r2, [r3]
	adds r2, r7, #0
	adds r2, #8
	strh r1, [r2]
	adds r1, r7, #0
	adds r1, #0xa
	strh r0, [r1]
	adds r1, r7, #6
	ldrh r0, [r1]
	adds r1, r7, #4
	ldrh r2, [r1]
	subs r0, r0, r2
	str r0, [r7, #0x20]
	movs r0, #0
	str r0, [r7, #0x10]
	movs r0, #0
	str r0, [r7, #0xc]
_08077AA6:
	ldr r0, [r7, #0xc]
	cmp r0, #0x9f
	ble _08077AAE
	b _08077BB8
_08077AAE:
	adds r0, r7, #4
	ldrh r1, [r0]
	ldr r0, [r7, #0xc]
	cmp r0, r1
	bge _08077AC8
	ldr r0, [r7]
	adds r1, r7, #0
	adds r1, #8
	ldrh r2, [r1]
	strh r2, [r0]
	adds r0, #2
	str r0, [r7]
	b _08077BB0
_08077AC8:
	adds r0, r7, #6
	ldrh r1, [r0]
	ldr r0, [r7, #0xc]
	cmp r0, r1
	ble _08077AE2
	ldr r0, [r7]
	adds r1, r7, #0
	adds r1, #0xa
	ldrh r2, [r1]
	strh r2, [r0]
	adds r0, #2
	str r0, [r7]
	b _08077BB0
_08077AE2:
	adds r0, r7, #0
	adds r0, #8
	ldrh r1, [r0]
	movs r2, #0x1f
	adds r0, r1, #0
	ands r0, r2
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r1, r0, #0x10
	adds r0, r7, #0
	adds r0, #0xa
	ldrh r2, [r0]
	movs r3, #0x1f
	adds r0, r2, #0
	ands r0, r3
	adds r2, r0, #0
	lsls r0, r2, #0x10
	lsrs r2, r0, #0x10
	ldr r3, [r7, #0x10]
	ldr r0, [r7, #0x20]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	str r0, [r7, #0x14]
	adds r0, r7, #0
	adds r0, #8
	ldrh r1, [r0]
	movs r2, #0xf8
	lsls r2, r2, #2
	adds r0, r1, #0
	ands r0, r2
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r1, r0, #0x10
	adds r0, r7, #0
	adds r0, #0xa
	ldrh r2, [r0]
	movs r3, #0xf8
	lsls r3, r3, #2
	adds r0, r2, #0
	ands r0, r3
	adds r2, r0, #0
	lsls r0, r2, #0x10
	lsrs r2, r0, #0x10
	ldr r3, [r7, #0x10]
	ldr r0, [r7, #0x20]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	str r0, [r7, #0x18]
	adds r0, r7, #0
	adds r0, #8
	ldrh r1, [r0]
	movs r2, #0xf8
	lsls r2, r2, #7
	adds r0, r1, #0
	ands r0, r2
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r1, r0, #0x10
	adds r0, r7, #0
	adds r0, #0xa
	ldrh r2, [r0]
	movs r3, #0xf8
	lsls r3, r3, #7
	adds r0, r2, #0
	ands r0, r3
	adds r2, r0, #0
	lsls r0, r2, #0x10
	lsrs r2, r0, #0x10
	ldr r3, [r7, #0x10]
	ldr r0, [r7, #0x20]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	str r0, [r7, #0x1c]
	ldr r0, [r7]
	ldr r2, [r7, #0x14]
	adds r1, r2, #0
	movs r2, #0x1f
	ands r1, r2
	ldr r3, [r7, #0x18]
	adds r2, r3, #0
	movs r3, #0xf8
	lsls r3, r3, #2
	ands r2, r3
	orrs r1, r2
	ldr r3, [r7, #0x1c]
	adds r2, r3, #0
	movs r3, #0xf8
	lsls r3, r3, #7
	ands r2, r3
	orrs r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	adds r0, #2
	str r0, [r7]
	ldr r0, [r7, #0x10]
	adds r1, r0, #1
	str r1, [r7, #0x10]
_08077BB0:
	ldr r0, [r7, #0xc]
	adds r1, r0, #1
	str r1, [r7, #0xc]
	b _08077AA6
_08077BB8:
	add sp, #0x28
	pop {r4, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08077BC0
sub_08077BC0: @ 0x08077BC0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08077BE0
sub_08077BE0: @ 0x08077BE0
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08077C18 @ =0x0203E638
	ldr r1, [r0, #4]
	movs r2, #0xa0
	lsls r2, r2, #1
	adds r0, r1, r2
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x64
	ldrh r2, [r1]
	adds r3, r2, #1
	adds r4, r3, #0
	strh r4, [r1]
	lsls r2, r2, #0x10
	asrs r1, r2, #0x10
	movs r2, #0x10
	movs r3, #8
	bl sub_0807761C
	bl sub_08077898
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08077C18: .4byte 0x0203E638

	thumb_func_start sub_08077C1C
sub_08077C1C: @ 0x08077C1C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	movs r0, #0
	str r0, [r7]
_08077C26:
	ldr r0, [r7]
	cmp r0, #0x9f
	ble _08077C2E
	b _08077C50
_08077C2E:
	ldr r0, _08077C4C @ =0x0203E638
	ldr r1, [r7]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r2, [r0]
	adds r0, r1, r2
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	adds r1, r0, #1
	str r1, [r7]
	b _08077C26
	.align 2, 0
_08077C4C: .4byte 0x0203E638
_08077C50:
	movs r0, #8
	str r0, [r7]
_08077C54:
	ldr r0, [r7]
	cmp r0, #0x97
	ble _08077C5C
	b _08077C78
_08077C5C:
	ldr r0, _08077C74 @ =0x0203E638
	ldr r1, [r7]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r2, [r0]
	adds r0, r1, r2
	movs r1, #0x10
	strh r1, [r0]
	ldr r0, [r7]
	adds r1, r0, #1
	str r1, [r7]
	b _08077C54
	.align 2, 0
_08077C74: .4byte 0x0203E638
_08077C78:
	movs r0, #0
	str r0, [r7]
_08077C7C:
	ldr r0, [r7]
	cmp r0, #0x20
	ble _08077C84
	b _08077CE4
_08077C84:
	ldr r0, _08077CDC @ =0x0203E638
	ldr r1, [r7]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r0, [r0]
	adds r1, r1, r0
	adds r0, r1, #0
	adds r0, #0x10
	ldr r2, [r7]
	asrs r1, r2, #1
	adds r2, r1, #0
	movs r3, #0x10
	subs r1, r3, r2
	adds r2, r1, #0
	lsls r1, r2, #8
	ldr r3, [r7]
	asrs r2, r3, #1
	orrs r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08077CDC @ =0x0203E638
	ldr r1, [r7]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r3, _08077CE0 @ =0xFFFFFED0
	adds r2, r1, r3
	ldr r1, [r0]
	subs r0, r1, r2
	ldr r2, [r7]
	asrs r1, r2, #1
	adds r2, r1, #0
	movs r3, #0x10
	subs r1, r3, r2
	adds r2, r1, #0
	lsls r1, r2, #8
	ldr r3, [r7]
	asrs r2, r3, #1
	orrs r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #1
	str r1, [r7]
	b _08077C7C
	.align 2, 0
_08077CDC: .4byte 0x0203E638
_08077CE0: .4byte 0xFFFFFED0
_08077CE4:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08077CEC
sub_08077CEC: @ 0x08077CEC
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, _08077D10 @ =0x0203E638
	ldr r1, [r7]
	adds r2, r1, #0
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r0, [r0]
	adds r1, r1, r0
	adds r0, r1, #0
	b _08077D14
	.align 2, 0
_08077D10: .4byte 0x0203E638
_08077D14:
	add sp, #8
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_08077D1C
sub_08077D1C: @ 0x08077D1C
	push {r7, lr}
	sub sp, #0x18
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, [r7, #0xc]
	str r0, [r7, #0x10]
	movs r0, #0
	str r0, [r7, #0x14]
_08077D32:
	ldr r0, [r7, #0x10]
	ldr r1, [r7, #0x14]
	cmp r0, r1
	bge _08077D3C
	b _08077E14
_08077D3C:
	ldr r0, [r7, #8]
	ldr r1, [r7, #0x14]
	adds r0, r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	bne _08077D92
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x10]
	adds r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x14]
	adds r2, r0, r3
	ldr r0, [r7]
	bl sub_08077944
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x10]
	adds r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x14]
	subs r2, r0, r3
	ldr r0, [r7]
	bl sub_08077944
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x10]
	subs r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x14]
	adds r2, r0, r3
	ldr r0, [r7]
	bl sub_080778FC
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x10]
	subs r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x14]
	subs r2, r0, r3
	ldr r0, [r7]
	bl sub_080778FC
_08077D92:
	ldr r0, [r7, #8]
	ldr r1, [r7, #0x10]
	adds r0, r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	bne _08077DE8
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x14]
	adds r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x10]
	adds r2, r0, r3
	ldr r0, [r7]
	bl sub_08077944
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x14]
	adds r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x10]
	subs r2, r0, r3
	ldr r0, [r7]
	bl sub_08077944
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x14]
	subs r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x10]
	adds r2, r0, r3
	ldr r0, [r7]
	bl sub_080778FC
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x14]
	subs r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x10]
	subs r2, r0, r3
	ldr r0, [r7]
	bl sub_080778FC
_08077DE8:
	ldr r1, [r7, #0xc]
	adds r0, r1, #1
	ldr r2, [r7, #0x14]
	lsls r1, r2, #1
	subs r0, r0, r1
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	cmp r0, #0
	bge _08077E0C
	ldr r1, [r7, #0x10]
	subs r0, r1, #1
	lsls r1, r0, #1
	ldr r0, [r7, #0xc]
	adds r1, r0, r1
	str r1, [r7, #0xc]
	ldr r0, [r7, #0x10]
	subs r1, r0, #1
	str r1, [r7, #0x10]
_08077E0C:
	ldr r0, [r7, #0x14]
	adds r1, r0, #1
	str r1, [r7, #0x14]
	b _08077D32
_08077E14:
	add sp, #0x18
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08077E1C
sub_08077E1C: @ 0x08077E1C
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r0, _08077E4C @ =0x0203E638
	ldr r1, [r0, #4]
	adds r0, r1, #0
	bl sub_080778C0
	ldr r1, _08077E4C @ =0x0203E638
	ldr r0, [r1, #4]
	ldr r2, [r7, #4]
	ldr r3, [r7, #8]
	ldr r1, [r7]
	bl sub_08077D1C
	bl sub_08077898
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08077E4C: .4byte 0x0203E638

	thumb_func_start sub_08077E50
sub_08077E50: @ 0x08077E50
	push {r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	cmp r0, #0x70
	ble _08077E62
	movs r0, #0x70
	str r0, [r7]
_08077E62:
	movs r0, #0x50
	ldr r1, [r7]
	subs r0, r0, r1
	str r0, [r7, #8]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r1, #0x50
	str r1, [r7, #0xc]
	movs r0, #0
	str r0, [r7, #4]
_08077E76:
	ldr r0, [r7, #4]
	ldr r1, [r7, #8]
	cmp r0, r1
	blt _08077E80
	b _08077EA0
_08077E80:
	ldr r0, _08077E9C @ =0x0203E638
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r2, [r0, #4]
	adds r0, r1, r2
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _08077E76
	.align 2, 0
_08077E9C: .4byte 0x0203E638
_08077EA0:
	ldr r0, [r7, #0xc]
	str r0, [r7, #4]
_08077EA4:
	ldr r0, [r7, #4]
	cmp r0, #0x9f
	ble _08077EAC
	b _08077ECC
_08077EAC:
	ldr r0, _08077EC8 @ =0x0203E638
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r2, [r0, #4]
	adds r0, r1, r2
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _08077EA4
	.align 2, 0
_08077EC8: .4byte 0x0203E638
_08077ECC:
	ldr r0, [r7, #8]
	str r0, [r7, #4]
_08077ED0:
	ldr r0, [r7, #4]
	cmp r0, #0x4f
	bgt _08077EE4
	ldr r1, [r7, #8]
	adds r0, r1, #0
	adds r0, #0x20
	ldr r1, [r7, #4]
	cmp r1, r0
	blt _08077EE6
	b _08077EE4
_08077EE4:
	b _08077F20
_08077EE6:
	ldr r0, [r7, #4]
	ldr r1, [r7, #8]
	subs r0, r0, r1
	asrs r1, r0, #1
	str r1, [r7, #0x10]
	ldr r0, _08077F1C @ =0x0203E638
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r2, [r0, #4]
	adds r0, r1, r2
	ldr r2, [r7, #0x10]
	adds r1, r2, #0
	movs r2, #0x10
	subs r1, r2, r1
	adds r2, r1, #0
	lsls r1, r2, #8
	ldr r3, [r7, #0x10]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _08077ED0
	.align 2, 0
_08077F1C: .4byte 0x0203E638
_08077F20:
	ldr r0, [r7, #0xc]
	subs r1, r0, #1
	str r1, [r7, #4]
_08077F26:
	ldr r0, [r7, #4]
	cmp r0, #0x4f
	ble _08077F3A
	ldr r1, [r7, #0xc]
	adds r0, r1, #0
	subs r0, #0x20
	ldr r1, [r7, #4]
	cmp r1, r0
	bge _08077F3C
	b _08077F3A
_08077F3A:
	b _08077F74
_08077F3C:
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #4]
	subs r0, r0, r1
	asrs r1, r0, #1
	str r1, [r7, #0x10]
	ldr r0, _08077F70 @ =0x0203E638
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r2, [r0, #4]
	adds r0, r1, r2
	ldr r2, [r7, #0x10]
	adds r1, r2, #0
	movs r2, #0x10
	subs r1, r2, r1
	adds r2, r1, #0
	lsls r1, r2, #8
	ldr r3, [r7, #0x10]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7, #4]
	subs r1, r0, #1
	str r1, [r7, #4]
	b _08077F26
	.align 2, 0
_08077F70: .4byte 0x0203E638
_08077F74:
	ldr r0, [r7, #8]
	adds r1, r0, #0
	adds r1, #0x20
	str r1, [r7, #4]
_08077F7C:
	ldr r1, [r7, #0xc]
	adds r0, r1, #0
	subs r0, #0x20
	ldr r1, [r7, #4]
	cmp r1, r0
	blt _08077F8A
	b _08077FA8
_08077F8A:
	ldr r0, _08077FA4 @ =0x0203E638
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r2, [r0, #4]
	adds r0, r1, r2
	movs r1, #0x10
	strh r1, [r0]
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _08077F7C
	.align 2, 0
_08077FA4: .4byte 0x0203E638
_08077FA8:
	bl sub_08077898
	add sp, #0x14
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08077FB4
sub_08077FB4: @ 0x08077FB4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	adds r0, r7, #0
	ldr r1, _08077FDC @ =0x04000006
	ldrh r2, [r1]
	strh r2, [r0]
	adds r0, r7, #0
	ldrh r1, [r0]
	cmp r1, #0x9e
	bls _08077FE8
	ldr r0, _08077FE0 @ =0x0203E640
	ldr r1, _08077FE4 @ =0x0203E638
	ldr r2, [r1]
	str r2, [r0]
	adds r0, r7, #0
	movs r1, #0
	strh r1, [r0]
	b _08077FF6
	.align 2, 0
_08077FDC: .4byte 0x04000006
_08077FE0: .4byte 0x0203E640
_08077FE4: .4byte 0x0203E638
_08077FE8:
	adds r1, r7, #0
	adds r0, r7, #0
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r1, r2, #1
	adds r2, r1, #0
	strh r2, [r0]
_08077FF6:
	adds r0, r7, #0
	ldrh r1, [r0]
	movs r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	bne _0807801E
	ldr r0, _08078028 @ =0x04000040
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _0807802C @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r1]
	strh r2, [r0]
_0807801E:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08078028: .4byte 0x04000040
_0807802C: .4byte 0x0203E640

	thumb_func_start sub_08078030
sub_08078030: @ 0x08078030
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	adds r0, r7, #0
	ldr r1, _08078058 @ =0x04000006
	ldrh r2, [r1]
	strh r2, [r0]
	adds r0, r7, #0
	ldrh r1, [r0]
	cmp r1, #0x9e
	bls _08078064
	ldr r0, _0807805C @ =0x0203E640
	ldr r1, _08078060 @ =0x0203E638
	ldr r2, [r1]
	str r2, [r0]
	adds r0, r7, #0
	movs r1, #0
	strh r1, [r0]
	b _08078072
	.align 2, 0
_08078058: .4byte 0x04000006
_0807805C: .4byte 0x0203E640
_08078060: .4byte 0x0203E638
_08078064:
	adds r1, r7, #0
	adds r0, r7, #0
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r1, r2, #1
	adds r2, r1, #0
	strh r2, [r0]
_08078072:
	ldr r0, _08078090 @ =0x04000052
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _08078094 @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r1]
	strh r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08078090: .4byte 0x04000052
_08078094: .4byte 0x0203E640

	thumb_func_start sub_08078098
sub_08078098: @ 0x08078098
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	adds r0, r7, #0
	ldr r1, _080780D4 @ =0x04000006
	ldrh r2, [r1]
	adds r1, r2, #1
	adds r2, r1, #0
	strh r2, [r0]
	adds r0, r7, #0
	ldrh r1, [r0]
	cmp r1, #0x9f
	bls _080780B8
	adds r0, r7, #0
	movs r1, #0
	strh r1, [r0]
_080780B8:
	ldr r0, _080780D8 @ =0x0400001A
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _080780DC @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r1]
	strh r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080780D4: .4byte 0x04000006
_080780D8: .4byte 0x0400001A
_080780DC: .4byte 0x0203E640

	thumb_func_start sub_080780E0
sub_080780E0: @ 0x080780E0
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	movs r0, #0
	str r0, [r7, #8]
_080780EE:
	ldr r0, [r7, #8]
	cmp r0, #0x9f
	ble _080780F6
	b _08078124
_080780F6:
	ldr r0, [r7, #8]
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r2, _08078120 @ =0x0203E640
	ldr r1, [r2]
	adds r0, r0, r1
	ldr r2, [r7, #8]
	adds r1, r2, #0
	movs r2, #1
	ands r1, r2
	ldr r3, [r7, #8]
	asrs r2, r3, #1
	adds r1, r1, r2
	adds r2, r1, #0
	rsbs r1, r2, #0
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7, #8]
	adds r1, r0, #1
	str r1, [r7, #8]
	b _080780EE
	.align 2, 0
_08078120: .4byte 0x0203E640
_08078124:
	bl sub_08077898
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08078130
sub_08078130: @ 0x08078130
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	adds r0, r7, #0
	ldr r1, _08078158 @ =0x04000006
	ldrh r2, [r1]
	strh r2, [r0]
	adds r0, r7, #0
	ldrh r1, [r0]
	cmp r1, #0x9f
	bls _08078164
	ldr r0, _0807815C @ =0x0203E640
	ldr r1, _08078160 @ =0x0203E638
	ldr r2, [r1]
	str r2, [r0]
	adds r0, r7, #0
	movs r1, #0
	strh r1, [r0]
	b _08078172
	.align 2, 0
_08078158: .4byte 0x04000006
_0807815C: .4byte 0x0203E640
_08078160: .4byte 0x0203E638
_08078164:
	adds r1, r7, #0
	adds r0, r7, #0
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r1, r2, #1
	adds r2, r1, #0
	strh r2, [r0]
_08078172:
	adds r0, r7, #0
	ldrh r1, [r0]
	movs r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080781B4
	ldr r0, _080781BC @ =0x04000014
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _080781C0 @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	movs r3, #0xa0
	lsls r3, r3, #1
	adds r2, r1, r3
	ldrh r1, [r2]
	strh r1, [r0]
	ldr r0, _080781C4 @ =0x04000016
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _080781C0 @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r1]
	strh r2, [r0]
_080781B4:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080781BC: .4byte 0x04000014
_080781C0: .4byte 0x0203E640
_080781C4: .4byte 0x04000016

	thumb_func_start sub_080781C8
sub_080781C8: @ 0x080781C8
	push {r4, r5, r6, r7, lr}
	sub sp, #0x18
	mov r7, sp
	str r0, [r7]
	adds r5, r1, #0
	adds r4, r2, #0
	ldr r2, [r7, #0x2c]
	ldr r1, [r7, #0x30]
	ldr r0, [r7, #0x34]
	adds r6, r7, #4
	strh r5, [r6]
	adds r5, r7, #6
	strh r4, [r5]
	adds r4, r7, #0
	adds r4, #8
	strh r3, [r4]
	adds r3, r7, #0
	adds r3, #0xa
	strh r2, [r3]
	adds r2, r7, #0
	adds r2, #0xc
	strh r1, [r2]
	adds r1, r7, #0
	adds r1, #0xe
	strh r0, [r1]
	ldr r1, [r7]
	adds r2, r1, #2
	str r2, [r7]
	movs r1, #1
	str r1, [r7, #0x10]
_08078204:
	ldr r1, [r7, #0x10]
	cmp r1, #0x9f
	ble _0807820C
	b _080782A2
_0807820C:
	ldr r1, _08078268 @ =gSinLut
	adds r2, r7, #0
	adds r2, #8
	movs r4, #0
	ldrsh r3, [r2, r4]
	ldr r4, [r7, #0x10]
	adds r2, r3, #0
	muls r2, r4, r2
	adds r3, r7, #4
	movs r5, #0
	ldrsh r4, [r3, r5]
	adds r2, r2, r4
	movs r3, #0xff
	ands r2, r3
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r3, r1, r2
	movs r2, #0
	ldrsh r1, [r3, r2]
	adds r2, r7, #6
	movs r4, #0
	ldrsh r3, [r2, r4]
	muls r1, r3, r1
	str r1, [r7, #0x14]
	adds r1, r7, #0
	adds r1, #0xe
	movs r5, #0
	ldrsh r0, [r1, r5]
	adds r1, r7, #0
	adds r1, #0xc
	movs r3, #0
	ldrsh r2, [r1, r3]
	ldr r3, [r7, #0x10]
	subs r1, r3, r2
	cmp r1, #0
	blt _0807826C
	adds r1, r7, #0
	adds r1, #0xc
	movs r4, #0
	ldrsh r2, [r1, r4]
	ldr r3, [r7, #0x10]
	subs r1, r3, r2
	ldr r2, [r7, #0x14]
	muls r1, r2, r1
	muls r1, r0, r1
	b _08078280
	.align 2, 0
_08078268: .4byte gSinLut
_0807826C:
	adds r2, r7, #0
	adds r2, #0xc
	movs r5, #0
	ldrsh r3, [r2, r5]
	ldr r4, [r7, #0x10]
	subs r2, r3, r4
	ldr r3, [r7, #0x14]
	adds r1, r2, #0
	muls r1, r3, r1
	muls r1, r0, r1
_08078280:
	str r1, [r7, #0x14]
	ldr r1, [r7]
	ldr r3, [r7, #0x14]
	asrs r2, r3, #0x14
	adds r3, r7, #0
	adds r3, #0xa
	ldrh r3, [r3]
	adds r2, r2, r3
	adds r3, r2, #0
	strh r3, [r1]
	ldr r1, [r7]
	adds r2, r1, #4
	str r2, [r7]
	ldr r1, [r7, #0x10]
	adds r2, r1, #2
	str r2, [r7, #0x10]
	b _08078204
_080782A2:
	add sp, #0x18
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080782AC
sub_080782AC: @ 0x080782AC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	adds r0, r7, #0
	ldr r1, _080782D4 @ =0x04000006
	ldrh r2, [r1]
	strh r2, [r0]
	adds r0, r7, #0
	ldrh r1, [r0]
	cmp r1, #0x9f
	bls _080782E0
	ldr r0, _080782D8 @ =0x0203E640
	ldr r1, _080782DC @ =0x0203E638
	ldr r2, [r1]
	str r2, [r0]
	adds r0, r7, #0
	movs r1, #0
	strh r1, [r0]
	b _080782EE
	.align 2, 0
_080782D4: .4byte 0x04000006
_080782D8: .4byte 0x0203E640
_080782DC: .4byte 0x0203E638
_080782E0:
	adds r1, r7, #0
	adds r0, r7, #0
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r1, r2, #1
	adds r2, r1, #0
	strh r2, [r0]
_080782EE:
	adds r0, r7, #0
	ldrh r1, [r0]
	movs r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _08078330
	ldr r0, _08078338 @ =0x04000010
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _0807833C @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	movs r3, #0xa0
	lsls r3, r3, #1
	adds r2, r1, r3
	ldrh r1, [r2]
	strh r1, [r0]
	ldr r0, _08078340 @ =0x04000012
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _0807833C @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r1]
	strh r2, [r0]
_08078330:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08078338: .4byte 0x04000010
_0807833C: .4byte 0x0203E640
_08078340: .4byte 0x04000012

	thumb_func_start sub_08078344
sub_08078344: @ 0x08078344
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	adds r0, r7, #0
	ldr r1, _0807836C @ =0x04000006
	ldrh r2, [r1]
	strh r2, [r0]
	adds r0, r7, #0
	ldrh r1, [r0]
	cmp r1, #0x9f
	bls _08078378
	ldr r0, _08078370 @ =0x0203E640
	ldr r1, _08078374 @ =0x0203E638
	ldr r2, [r1]
	str r2, [r0]
	adds r0, r7, #0
	movs r1, #0
	strh r1, [r0]
	b _08078386
	.align 2, 0
_0807836C: .4byte 0x04000006
_08078370: .4byte 0x0203E640
_08078374: .4byte 0x0203E638
_08078378:
	adds r1, r7, #0
	adds r0, r7, #0
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r1, r2, #1
	adds r2, r1, #0
	strh r2, [r0]
_08078386:
	adds r0, r7, #0
	ldrh r1, [r0]
	movs r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080783C8
	ldr r0, _080783D0 @ =0x04000014
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _080783D4 @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	movs r3, #0xa0
	lsls r3, r3, #1
	adds r2, r1, r3
	ldrh r1, [r2]
	strh r1, [r0]
	ldr r0, _080783D8 @ =0x04000016
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _080783D4 @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r1]
	strh r2, [r0]
_080783C8:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080783D0: .4byte 0x04000014
_080783D4: .4byte 0x0203E640
_080783D8: .4byte 0x04000016

	thumb_func_start sub_080783DC
sub_080783DC: @ 0x080783DC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	adds r0, r7, #0
	ldr r1, _08078404 @ =0x04000006
	ldrh r2, [r1]
	strh r2, [r0]
	adds r0, r7, #0
	ldrh r1, [r0]
	cmp r1, #0x9f
	bls _08078410
	ldr r0, _08078408 @ =0x0203E640
	ldr r1, _0807840C @ =0x0203E638
	ldr r2, [r1]
	str r2, [r0]
	adds r0, r7, #0
	movs r1, #0
	strh r1, [r0]
	b _0807841E
	.align 2, 0
_08078404: .4byte 0x04000006
_08078408: .4byte 0x0203E640
_0807840C: .4byte 0x0203E638
_08078410:
	adds r1, r7, #0
	adds r0, r7, #0
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r1, r2, #1
	adds r2, r1, #0
	strh r2, [r0]
_0807841E:
	adds r0, r7, #0
	ldrh r1, [r0]
	movs r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _08078460
	ldr r0, _08078468 @ =0x04000018
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _0807846C @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	movs r3, #0xa0
	lsls r3, r3, #1
	adds r2, r1, r3
	ldrh r1, [r2]
	strh r1, [r0]
	ldr r0, _08078470 @ =0x0400001A
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _0807846C @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r1]
	strh r2, [r0]
_08078460:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08078468: .4byte 0x04000018
_0807846C: .4byte 0x0203E640
_08078470: .4byte 0x0400001A

	thumb_func_start sub_08078474
sub_08078474: @ 0x08078474
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	adds r0, r7, #0
	ldr r1, _0807849C @ =0x04000006
	ldrh r2, [r1]
	strh r2, [r0]
	adds r0, r7, #0
	ldrh r1, [r0]
	cmp r1, #0x9f
	bls _080784A8
	ldr r0, _080784A0 @ =0x0203E640
	ldr r1, _080784A4 @ =0x0203E638
	ldr r2, [r1]
	str r2, [r0]
	adds r0, r7, #0
	movs r1, #0
	strh r1, [r0]
	b _080784B6
	.align 2, 0
_0807849C: .4byte 0x04000006
_080784A0: .4byte 0x0203E640
_080784A4: .4byte 0x0203E638
_080784A8:
	adds r1, r7, #0
	adds r0, r7, #0
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r1, r2, #1
	adds r2, r1, #0
	strh r2, [r0]
_080784B6:
	adds r0, r7, #0
	ldrh r1, [r0]
	movs r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080784F8
	ldr r0, _08078500 @ =0x0400001C
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _08078504 @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	movs r3, #0xa0
	lsls r3, r3, #1
	adds r2, r1, r3
	ldrh r1, [r2]
	strh r1, [r0]
	ldr r0, _08078508 @ =0x0400001E
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _08078504 @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r1]
	strh r2, [r0]
_080784F8:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08078500: .4byte 0x0400001C
_08078504: .4byte 0x0203E640
_08078508: .4byte 0x0400001E

	thumb_func_start sub_0807850C
sub_0807850C: @ 0x0807850C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	adds r0, r7, #0
	ldr r1, _08078534 @ =0x04000006
	ldrh r2, [r1]
	strh r2, [r0]
	adds r0, r7, #0
	ldrh r1, [r0]
	cmp r1, #0x9f
	bls _08078540
	ldr r0, _08078538 @ =0x0203E640
	ldr r1, _0807853C @ =0x0203E638
	ldr r2, [r1]
	str r2, [r0]
	adds r0, r7, #0
	movs r1, #0
	strh r1, [r0]
	b _0807854E
	.align 2, 0
_08078534: .4byte 0x04000006
_08078538: .4byte 0x0203E640
_0807853C: .4byte 0x0203E638
_08078540:
	adds r1, r7, #0
	adds r0, r7, #0
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r1, r2, #1
	adds r2, r1, #0
	strh r2, [r0]
_0807854E:
	adds r0, r7, #0
	ldrh r1, [r0]
	movs r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080785A0
	ldr r0, _080785A8 @ =0x04000018
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _080785AC @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	movs r3, #0xa0
	lsls r3, r3, #1
	adds r2, r1, r3
	ldr r1, _080785B0 @ =gDispIo
	ldrh r2, [r2]
	ldrh r1, [r1, #0x24]
	adds r2, r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, _080785B4 @ =0x0400001A
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _080785AC @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	ldr r2, _080785B0 @ =gDispIo
	ldrh r1, [r1]
	ldrh r2, [r2, #0x26]
	adds r1, r1, r2
	adds r2, r1, #0
	strh r2, [r0]
_080785A0:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080785A8: .4byte 0x04000018
_080785AC: .4byte 0x0203E640
_080785B0: .4byte gDispIo
_080785B4: .4byte 0x0400001A

	thumb_func_start sub_080785B8
sub_080785B8: @ 0x080785B8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	adds r0, r7, #0
	ldr r1, _080785E0 @ =0x04000006
	ldrh r2, [r1]
	strh r2, [r0]
	adds r0, r7, #0
	ldrh r1, [r0]
	cmp r1, #0x9f
	bls _080785EC
	ldr r0, _080785E4 @ =0x0203E640
	ldr r1, _080785E8 @ =0x0203E638
	ldr r2, [r1]
	str r2, [r0]
	adds r0, r7, #0
	movs r1, #0
	strh r1, [r0]
	b _080785FA
	.align 2, 0
_080785E0: .4byte 0x04000006
_080785E4: .4byte 0x0203E640
_080785E8: .4byte 0x0203E638
_080785EC:
	adds r1, r7, #0
	adds r0, r7, #0
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r1, r2, #1
	adds r2, r1, #0
	strh r2, [r0]
_080785FA:
	adds r0, r7, #0
	ldrh r1, [r0]
	movs r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _0807866A
	ldr r0, _08078674 @ =0x04000014
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _08078678 @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	movs r3, #0xa0
	lsls r3, r3, #1
	adds r2, r1, r3
	ldrh r1, [r2]
	strh r1, [r0]
	ldr r0, _0807867C @ =0x04000016
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _08078678 @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r1]
	strh r2, [r0]
	ldr r0, _08078680 @ =0x04000018
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _08078678 @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	movs r3, #0xa0
	lsls r3, r3, #1
	adds r2, r1, r3
	ldrh r1, [r2]
	strh r1, [r0]
	ldr r0, _08078684 @ =0x0400001A
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _08078678 @ =0x0203E640
	ldr r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r1]
	strh r2, [r0]
_0807866A:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08078674: .4byte 0x04000014
_08078678: .4byte 0x0203E640
_0807867C: .4byte 0x04000016
_08078680: .4byte 0x04000018
_08078684: .4byte 0x0400001A

	thumb_func_start sub_08078688
sub_08078688: @ 0x08078688
	push {r7, lr}
	sub sp, #0x24
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #0x2c]
	cmp r0, r1
	bgt _080786A0
	b _08078796
_080786A0:
	ldr r0, [r7, #0xc]
	str r0, [r7, #0x20]
	str r0, [r7, #0x10]
	movs r0, #0
	str r0, [r7, #0x14]
_080786AA:
	ldr r0, [r7, #0x10]
	ldr r1, [r7, #0x14]
	cmp r0, r1
	bge _080786B4
	b _08078794
_080786B4:
	ldr r0, [r7, #0x10]
	ldr r2, [r7, #0x2c]
	adds r1, r0, #0
	muls r1, r2, r1
	adds r0, r1, #0
	ldr r1, [r7, #0xc]
	bl __divsi3
	str r0, [r7, #0x18]
	ldr r0, [r7, #0x14]
	ldr r2, [r7, #0x2c]
	adds r1, r0, #0
	muls r1, r2, r1
	adds r0, r1, #0
	ldr r1, [r7, #0xc]
	bl __divsi3
	str r0, [r7, #0x1c]
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x10]
	adds r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x1c]
	adds r2, r0, r3
	ldr r0, [r7]
	bl sub_08077944
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x10]
	adds r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x1c]
	subs r2, r0, r3
	ldr r0, [r7]
	bl sub_08077944
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x10]
	subs r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x1c]
	adds r2, r0, r3
	ldr r0, [r7]
	bl sub_080778FC
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x10]
	subs r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x1c]
	subs r2, r0, r3
	ldr r0, [r7]
	bl sub_080778FC
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x14]
	adds r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x18]
	adds r2, r0, r3
	ldr r0, [r7]
	bl sub_08077944
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x14]
	adds r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x18]
	subs r2, r0, r3
	ldr r0, [r7]
	bl sub_08077944
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x14]
	subs r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x18]
	adds r2, r0, r3
	ldr r0, [r7]
	bl sub_080778FC
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x14]
	subs r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x18]
	subs r2, r0, r3
	ldr r0, [r7]
	bl sub_080778FC
	ldr r1, [r7, #0x20]
	adds r0, r1, #1
	ldr r2, [r7, #0x14]
	lsls r1, r2, #1
	subs r0, r0, r1
	str r0, [r7, #0x20]
	ldr r0, [r7, #0x20]
	cmp r0, #0
	bge _0807878C
	ldr r1, [r7, #0x10]
	subs r0, r1, #1
	lsls r1, r0, #1
	ldr r0, [r7, #0x20]
	adds r1, r0, r1
	str r1, [r7, #0x20]
	ldr r0, [r7, #0x10]
	subs r1, r0, #1
	str r1, [r7, #0x10]
_0807878C:
	ldr r0, [r7, #0x14]
	adds r1, r0, #1
	str r1, [r7, #0x14]
	b _080786AA
_08078794:
	b _0807888A
_08078796:
	ldr r0, [r7, #0x2c]
	str r0, [r7, #0x20]
	str r0, [r7, #0x10]
	movs r0, #0
	str r0, [r7, #0x14]
_080787A0:
	ldr r0, [r7, #0x10]
	ldr r1, [r7, #0x14]
	cmp r0, r1
	bge _080787AA
	b _0807888A
_080787AA:
	ldr r0, [r7, #0x10]
	ldr r2, [r7, #0xc]
	adds r1, r0, #0
	muls r1, r2, r1
	adds r0, r1, #0
	ldr r1, [r7, #0x2c]
	bl __divsi3
	str r0, [r7, #0x18]
	ldr r0, [r7, #0x14]
	ldr r2, [r7, #0xc]
	adds r1, r0, #0
	muls r1, r2, r1
	adds r0, r1, #0
	ldr r1, [r7, #0x2c]
	bl __divsi3
	str r0, [r7, #0x1c]
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x18]
	adds r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x14]
	adds r2, r0, r3
	ldr r0, [r7]
	bl sub_08077944
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x18]
	adds r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x14]
	subs r2, r0, r3
	ldr r0, [r7]
	bl sub_08077944
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x18]
	subs r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x14]
	adds r2, r0, r3
	ldr r0, [r7]
	bl sub_080778FC
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x18]
	subs r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x14]
	subs r2, r0, r3
	ldr r0, [r7]
	bl sub_080778FC
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x1c]
	adds r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x10]
	adds r2, r0, r3
	ldr r0, [r7]
	bl sub_08077944
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x1c]
	adds r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x10]
	subs r2, r0, r3
	ldr r0, [r7]
	bl sub_08077944
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x1c]
	subs r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x10]
	adds r2, r0, r3
	ldr r0, [r7]
	bl sub_080778FC
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x1c]
	subs r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x10]
	subs r2, r0, r3
	ldr r0, [r7]
	bl sub_080778FC
	ldr r1, [r7, #0x20]
	adds r0, r1, #1
	ldr r2, [r7, #0x14]
	lsls r1, r2, #1
	subs r0, r0, r1
	str r0, [r7, #0x20]
	ldr r0, [r7, #0x20]
	cmp r0, #0
	bge _08078882
	ldr r1, [r7, #0x10]
	subs r0, r1, #1
	lsls r1, r0, #1
	ldr r0, [r7, #0x20]
	adds r1, r0, r1
	str r1, [r7, #0x20]
	ldr r0, [r7, #0x10]
	subs r1, r0, #1
	str r1, [r7, #0x10]
_08078882:
	ldr r0, [r7, #0x14]
	adds r1, r0, #1
	str r1, [r7, #0x14]
	b _080787A0
_0807888A:
	add sp, #0x24
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08078894
sub_08078894: @ 0x08078894
	push {r7, lr}
	sub sp, #0x14
	add r7, sp, #4
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, _080788CC @ =0x0203E638
	ldr r1, [r0, #4]
	adds r0, r1, #0
	bl sub_080778C0
	ldr r1, _080788CC @ =0x0203E638
	ldr r0, [r1, #4]
	ldr r2, [r7, #4]
	ldr r3, [r7, #8]
	ldr r1, [r7, #0xc]
	str r1, [sp]
	ldr r1, [r7]
	bl sub_08078688
	bl sub_08077898
	add sp, #0x14
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080788CC: .4byte 0x0203E638

	thumb_func_start sub_080788D0
sub_080788D0: @ 0x080788D0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #4]
	cmp r0, #0
	beq _080788EA
	ldr r0, [r4, #8]
	bl sub_0807A0B4
	ldr r0, [r4, #4]
	cmp r0, #1
	beq _080788EA
	bl sub_0800AE98
_080788EA:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080788F0
sub_080788F0: @ 0x080788F0
	push {lr}
	ldr r0, [r0, #8]
	bl sub_0807A0B4
	pop {r0}
	bx r0

	thumb_func_start sub_080788FC
sub_080788FC: @ 0x080788FC
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	movs r0, #0
	str r0, [r4, #4]
	str r0, [r4, #8]
	ldr r6, _0807890C @ =0x08D668E4
	adds r7, r6, #4
	b _0807891E
	.align 2, 0
_0807890C: .4byte 0x08D668E4
_08078910:
	lsls r0, r5, #3
	adds r0, r0, r7
	ldr r1, [r0]
	lsls r1, r1, #2
	ldr r0, [r4]
	adds r0, r0, r1
	str r0, [r4]
_0807891E:
	ldr r0, [r4]
	ldrh r5, [r0]
	ldrh r0, [r0, #2]
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08078910
	lsls r0, r5, #3
	adds r0, r0, r6
	ldr r1, [r0]
	adds r0, r4, #0
	bl _call_via_r1
	cmp r0, #1
	bne _08078910
	ldr r0, [r4, #4]
	cmp r0, #0
	bne _08078948
	movs r0, #0
	b _0807894A
_08078948:
	adds r0, r4, #0
_0807894A:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_08078950
sub_08078950: @ 0x08078950
	push {r4, lr}
	adds r3, r0, #0
	cmp r3, #0
	bne _0807895C
	movs r0, #0
	b _08078976
_0807895C:
	ldr r2, [r3]
	ldr r0, _0807897C @ =0x08D668E4
	ldrh r4, [r2]
	lsls r1, r4, #3
	adds r0, #4
	adds r1, r1, r0
	ldr r0, [r1]
	lsls r0, r0, #2
	adds r2, r2, r0
	str r2, [r3]
	adds r0, r3, #0
	bl sub_080788FC
_08078976:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0807897C: .4byte 0x08D668E4

	thumb_func_start sub_08078980
sub_08078980: @ 0x08078980
	movs r0, #1
	bx lr

	thumb_func_start sub_08078984
sub_08078984: @ 0x08078984
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4]
	ldrh r0, [r0, #8]
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0807899A
	movs r0, #0
	b _080789A6
_0807899A:
	ldr r0, [r4]
	ldr r1, [r0, #4]
	str r1, [r4, #4]
	ldrh r0, [r0, #2]
	str r0, [r4, #8]
	movs r0, #1
_080789A6:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_080789AC
sub_080789AC: @ 0x080789AC
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4]
	ldrh r5, [r0, #0xc]
	ldr r6, _080789E0 @ =0xFFFF0000
	ldrh r0, [r0, #2]
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080789E4
	adds r0, r5, #0
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080789E4
	ldr r1, [r4]
	ldr r0, [r1, #8]
	str r0, [r4, #4]
	ldr r0, [r1]
	ands r0, r6
	lsrs r0, r0, #0x10
	str r0, [r4, #8]
	movs r0, #1
	b _080789E6
	.align 2, 0
_080789E0: .4byte 0xFFFF0000
_080789E4:
	movs r0, #0
_080789E6:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_080789EC
sub_080789EC: @ 0x080789EC
	push {r4, r5, r6, lr}
	movs r3, #0
	ldr r1, _08078A10 @ =gBmSt
	ldrb r5, [r1, #0x14]
	ldrb r4, [r1, #0x16]
	adds r6, r4, #0
	ldr r0, [r0]
	ldr r2, [r0, #4]
	cmp r2, #0
	beq _08078A6C
	ldrh r0, [r0]
	cmp r0, #0xf
	beq _08078A14
	cmp r0, #0x10
	beq _08078A3C
_08078A0A:
	movs r0, #1
	b _08078A82
	.align 2, 0
_08078A10: .4byte gBmSt
_08078A14:
	ldrb r0, [r2]
	cmp r0, #0xff
	beq _08078A80
_08078A1A:
	lsls r0, r3, #2
	adds r0, r0, r2
	ldrb r1, [r0]
	cmp r5, r1
	bne _08078A2A
	ldrb r0, [r0, #1]
	cmp r6, r0
	beq _08078A0A
_08078A2A:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	lsls r0, r3, #2
	adds r0, r0, r2
	ldrb r0, [r0]
	cmp r0, #0xff
	bne _08078A1A
	b _08078A80
_08078A3C:
	ldr r0, _08078A68 @ =gBmMapMovement
	ldr r1, [r0]
	lsls r0, r4, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, r0, r5
	ldrb r0, [r0]
	cmp r0, #0x77
	bhi _08078A80
	ldrb r0, [r2]
	cmp r5, r0
	blo _08078A80
	ldrb r1, [r2, #1]
	cmp r4, r1
	blo _08078A80
	ldrb r0, [r2, #4]
	cmp r5, r0
	bhi _08078A80
	ldrb r2, [r2, #5]
	cmp r4, r2
	bhi _08078A80
	b _08078A0A
	.align 2, 0
_08078A68: .4byte gBmMapMovement
_08078A6C:
	ldr r0, _08078A88 @ =gActiveUnit
	ldr r1, [r0]
	movs r0, #0x10
	ldrsb r0, [r1, r0]
	cmp r5, r0
	bne _08078A80
	movs r0, #0x11
	ldrsb r0, [r1, r0]
	cmp r6, r0
	beq _08078A0A
_08078A80:
	movs r0, #0
_08078A82:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_08078A88: .4byte gActiveUnit

	thumb_func_start sub_08078A8C
sub_08078A8C: @ 0x08078A8C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4]
	ldrh r5, [r0, #0xc]
	ldr r6, _08078AC0 @ =0xFFFF0000
	ldrh r0, [r0, #2]
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08078AC4
	adds r0, r5, #0
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08078AC4
	ldr r1, [r4]
	ldr r0, [r1, #8]
	str r0, [r4, #4]
	ldr r0, [r1]
	ands r0, r6
	lsrs r0, r0, #0x10
	str r0, [r4, #8]
	movs r0, #1
	b _08078AC6
	.align 2, 0
_08078AC0: .4byte 0xFFFF0000
_08078AC4:
	movs r0, #0
_08078AC6:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_08078ACC
sub_08078ACC: @ 0x08078ACC
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r2, [r4]
	ldr r1, [r2, #8]
	ldrb r6, [r2, #8]
	movs r0, #0xff
	lsls r0, r0, #8
	ands r0, r1
	lsrs r5, r0, #8
	movs r0, #0xff
	lsls r0, r0, #0x10
	ands r1, r0
	lsrs r7, r1, #0x10
	ldr r0, [r2, #0xc]
	subs r0, #1
	cmp r0, #4
	bhi _08078B80
	lsls r0, r0, #2
	ldr r1, _08078AF8 @ =_08078AFC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08078AF8: .4byte _08078AFC
_08078AFC: @ jump table
	.4byte _08078B10 @ case 0
	.4byte _08078B20 @ case 1
	.4byte _08078B38 @ case 2
	.4byte _08078B50 @ case 3
	.4byte _08078B68 @ case 4
_08078B10:
	ldr r1, _08078B1C @ =gPlaySt
	ldrb r0, [r1, #0x1b]
	cmp r0, #2
	bne _08078BBC
	b _08078B28
	.align 2, 0
_08078B1C: .4byte gPlaySt
_08078B20:
	ldr r1, _08078B34 @ =gPlaySt
	ldrb r2, [r1, #0x1b]
	cmp r2, #3
	bne _08078BBC
_08078B28:
	movs r0, #0x40
	ldrb r1, [r1, #0x14]
	ands r0, r1
	cmp r0, #0
	beq _08078B74
	b _08078BBC
	.align 2, 0
_08078B34: .4byte gPlaySt
_08078B38:
	ldr r1, _08078B4C @ =gPlaySt
	movs r0, #0x40
	ldrb r2, [r1, #0x14]
	ands r0, r2
	cmp r0, #0
	beq _08078BBC
	ldrb r1, [r1, #0x1b]
	cmp r1, #2
	beq _08078B74
	b _08078BBC
	.align 2, 0
_08078B4C: .4byte gPlaySt
_08078B50:
	ldr r1, _08078B64 @ =gPlaySt
	movs r0, #0x40
	ldrb r2, [r1, #0x14]
	ands r0, r2
	cmp r0, #0
	beq _08078BBC
	ldrb r1, [r1, #0x1b]
	cmp r1, #3
	beq _08078B74
	b _08078BBC
	.align 2, 0
_08078B64: .4byte gPlaySt
_08078B68:
	ldr r1, _08078B94 @ =gPlaySt
	movs r0, #0x40
	ldrb r1, [r1, #0x14]
	ands r0, r1
	cmp r0, #0
	beq _08078BBC
_08078B74:
	movs r0, #2
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08078BBC
_08078B80:
	cmp r5, #0
	bne _08078B98
	ldr r0, _08078B94 @ =gPlaySt
	ldrh r1, [r0, #0x10]
	cmp r1, r6
	bne _08078BBC
	ldrb r0, [r0, #0xf]
	cmp r0, r7
	bne _08078BBC
	b _08078BAA
	.align 2, 0
_08078B94: .4byte gPlaySt
_08078B98:
	ldr r1, _08078BB8 @ =gPlaySt
	ldrh r0, [r1, #0x10]
	cmp r0, r6
	blt _08078BBC
	cmp r0, r5
	bgt _08078BBC
	ldrb r1, [r1, #0xf]
	cmp r1, r7
	bne _08078BBC
_08078BAA:
	ldr r0, [r4]
	ldr r1, [r0, #4]
	str r1, [r4, #4]
	ldrh r0, [r0, #2]
	str r0, [r4, #8]
	movs r0, #1
	b _08078BBE
	.align 2, 0
_08078BB8: .4byte gPlaySt
_08078BBC:
	movs r0, #0
_08078BBE:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_08078BC4
sub_08078BC4: @ 0x08078BC4
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r2, [r4]
	ldr r1, [r2, #8]
	movs r3, #0xff
	adds r5, r1, #0
	ands r5, r3
	movs r0, #0xff
	lsls r0, r0, #8
	ands r1, r0
	lsrs r6, r1, #8
	ldr r0, [r2, #0xc]
	adds r1, r0, #0
	ands r1, r3
	cmp r1, #2
	beq _08078C04
	cmp r1, #2
	bhi _08078BEE
	cmp r1, #1
	beq _08078BF4
	b _08078C20
_08078BEE:
	cmp r1, #3
	beq _08078C14
	b _08078C20
_08078BF4:
	ldr r0, _08078C00 @ =gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #2
	beq _08078C20
	b _08078C3E
	.align 2, 0
_08078C00: .4byte gPlaySt
_08078C04:
	ldr r0, _08078C10 @ =gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #3
	beq _08078C20
	b _08078C3E
	.align 2, 0
_08078C10: .4byte gPlaySt
_08078C14:
	lsrs r0, r0, #0x10
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08078C3E
_08078C20:
	ldrb r0, [r4, #0x1a]
	cmp r0, r5
	beq _08078C2A
	cmp r5, #0
	bne _08078C3E
_08078C2A:
	ldrb r0, [r4, #0x1b]
	cmp r0, r6
	bne _08078C3E
	ldr r0, [r4]
	ldr r1, [r0, #4]
	str r1, [r4, #4]
	ldrh r0, [r0, #2]
	str r0, [r4, #8]
	movs r0, #1
	b _08078C40
_08078C3E:
	movs r0, #0
_08078C40:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08078C48
sub_08078C48: @ 0x08078C48
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r2, [r4]
	ldr r0, [r2, #8]
	ldrb r5, [r2, #8]
	movs r1, #0xff
	lsls r1, r1, #8
	ands r0, r1
	lsrs r6, r0, #8
	ldr r1, [r2, #0xc]
	adds r0, r4, #0
	bl _call_via_r1
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08078C86
	ldrb r0, [r4, #0x1a]
	cmp r0, r5
	beq _08078C72
	cmp r5, #0
	bne _08078C86
_08078C72:
	ldrb r0, [r4, #0x1b]
	cmp r0, r6
	bne _08078C86
	ldr r0, [r4]
	ldr r1, [r0, #4]
	str r1, [r4, #4]
	ldrh r0, [r0, #2]
	str r0, [r4, #8]
	movs r0, #1
	b _08078C88
_08078C86:
	movs r0, #0
_08078C88:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08078C90
sub_08078C90: @ 0x08078C90
	push {r4, r5, r6, lr}
	adds r3, r0, #0
	ldr r4, [r3]
	ldr r1, [r4, #8]
	ldrb r2, [r4, #8]
	movs r0, #0xff
	lsls r0, r0, #8
	ands r0, r1
	lsrs r5, r0, #8
	movs r0, #0xff
	lsls r0, r0, #0x10
	ands r1, r0
	lsrs r1, r1, #0x10
	movs r6, #0
	str r6, [r3, #0x10]
	movs r0, #0x18
	ldrsb r0, [r3, r0]
	cmp r2, r0
	bne _08078CD2
	movs r0, #0x19
	ldrsb r0, [r3, r0]
	cmp r5, r0
	bne _08078CD2
	ldr r0, [r4, #4]
	str r0, [r3, #4]
	ldrh r0, [r4, #2]
	str r0, [r3, #8]
	str r1, [r3, #0xc]
	cmp r1, #0x12
	bne _08078CCE
	str r6, [r3, #0x14]
_08078CCE:
	movs r0, #1
	b _08078CD4
_08078CD2:
	movs r0, #0
_08078CD4:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08078CDC
sub_08078CDC: @ 0x08078CDC
	push {r4, lr}
	adds r4, r0, #0
	bl sub_08078C90
	movs r1, #3
	str r1, [r4, #0x10]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08078CF0
sub_08078CF0: @ 0x08078CF0
	push {r4, r5, r6, lr}
	adds r2, r0, #0
	ldr r3, [r2]
	ldr r0, [r3, #8]
	movs r1, #0xff
	lsls r1, r1, #8
	ands r1, r0
	lsrs r4, r1, #8
	movs r1, #0xff
	lsls r1, r1, #0x10
	ands r1, r0
	lsrs r5, r1, #0x10
	lsrs r1, r0, #0x18
	ldrb r0, [r3, #8]
	ldrb r6, [r2, #0x18]
	cmp r0, r6
	bne _08078D32
	movs r0, #0x19
	ldrsb r0, [r2, r0]
	cmp r4, r0
	bne _08078D32
	movs r0, #1
	str r0, [r2, #4]
	ldrh r0, [r3, #2]
	str r0, [r2, #8]
	str r5, [r2, #0xc]
	str r1, [r2, #0x10]
	ldrh r0, [r3, #4]
	str r0, [r2, #0x14]
	ldrh r0, [r3, #6]
	str r0, [r2, #0x10]
	movs r0, #1
	b _08078D34
_08078D32:
	movs r0, #0
_08078D34:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08078D3C
sub_08078D3C: @ 0x08078D3C
	push {r4, r5, r6, lr}
	adds r2, r0, #0
	ldr r3, [r2]
	ldr r0, [r3, #8]
	movs r1, #0xff
	lsls r1, r1, #8
	ands r1, r0
	lsrs r4, r1, #8
	movs r1, #0xff
	lsls r1, r1, #0x10
	ands r1, r0
	lsrs r5, r1, #0x10
	lsrs r1, r0, #0x18
	ldrb r0, [r3, #8]
	ldrb r6, [r2, #0x18]
	cmp r0, r6
	bne _08078D78
	movs r0, #0x19
	ldrsb r0, [r2, r0]
	cmp r4, r0
	bne _08078D78
	ldr r0, [r3, #4]
	str r0, [r2, #4]
	ldr r0, [r2]
	ldrh r0, [r0, #2]
	str r0, [r2, #8]
	str r5, [r2, #0xc]
	str r1, [r2, #0x10]
	movs r0, #1
	b _08078D7A
_08078D78:
	movs r0, #0
_08078D7A:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_08078D80
sub_08078D80: @ 0x08078D80
	push {r4, r5, r6, lr}
	adds r2, r0, #0
	ldr r3, [r2]
	ldr r0, [r3, #8]
	movs r1, #0xff
	lsls r1, r1, #8
	ands r1, r0
	lsrs r4, r1, #8
	movs r1, #0xff
	lsls r1, r1, #0x10
	ands r1, r0
	lsrs r5, r1, #0x10
	lsrs r1, r0, #0x18
	ldrb r0, [r3, #8]
	ldrb r6, [r2, #0x18]
	cmp r0, r6
	bne _08078DBC
	movs r0, #0x19
	ldrsb r0, [r2, r0]
	cmp r4, r0
	bne _08078DBC
	ldr r0, [r3, #4]
	str r0, [r2, #4]
	ldr r0, [r2]
	ldrh r0, [r0, #2]
	str r0, [r2, #8]
	str r5, [r2, #0xc]
	str r1, [r2, #0x10]
	movs r0, #1
	b _08078DBE
_08078DBC:
	movs r0, #0
_08078DBE:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_08078DC4
sub_08078DC4: @ 0x08078DC4
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r2, [r4]
	ldr r1, [r2, #8]
	movs r0, #0xff
	lsls r0, r0, #8
	ands r0, r1
	lsrs r3, r0, #8
	movs r0, #0xff
	lsls r0, r0, #0x10
	ands r1, r0
	lsrs r5, r1, #0x10
	ldrb r2, [r2, #8]
	ldrb r0, [r4, #0x18]
	cmp r2, r0
	bne _08078E18
	movs r0, #0x19
	ldrsb r0, [r4, r0]
	cmp r3, r0
	bne _08078E18
	cmp r5, #0x15
	bne _08078E02
	ldr r0, _08078E14 @ =gActiveUnit
	ldr r0, [r0]
	movs r1, #0x71
	bl GetUnitItemSlot
	movs r1, #1
	rsbs r1, r1, #0
	cmp r0, r1
	beq _08078E18
_08078E02:
	ldr r0, [r4]
	ldr r1, [r0, #4]
	str r1, [r4, #4]
	ldrh r0, [r0, #2]
	str r0, [r4, #8]
	str r5, [r4, #0xc]
	movs r0, #1
	b _08078E1A
	.align 2, 0
_08078E14: .4byte gActiveUnit
_08078E18:
	movs r0, #0
_08078E1A:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_08078E20
sub_08078E20: @ 0x08078E20
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r0, _08078E78 @ =gActiveUnit
	ldr r2, [r0]
	ldrb r0, [r2, #0x11]
	mov ip, r0
	ldr r3, [r5]
	ldr r1, [r3, #8]
	movs r0, #0xff
	lsls r0, r0, #8
	ands r0, r1
	lsrs r4, r0, #8
	movs r0, #0xff
	lsls r0, r0, #0x10
	ands r0, r1
	lsrs r7, r0, #0x10
	lsrs r6, r1, #0x18
	movs r0, #8
	ldrsb r0, [r3, r0]
	ldrb r2, [r2, #0x10]
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	cmp r0, r2
	bgt _08078E7C
	lsls r1, r4, #0x18
	mov r4, ip
	lsls r0, r4, #0x18
	asrs r4, r0, #0x18
	cmp r1, r0
	bgt _08078E7C
	lsls r0, r7, #0x18
	asrs r0, r0, #0x18
	cmp r0, r2
	blt _08078E7C
	lsls r0, r6, #0x18
	asrs r0, r0, #0x18
	cmp r0, r4
	blt _08078E7C
	ldr r0, [r3, #4]
	str r0, [r5, #4]
	ldrh r0, [r3, #2]
	str r0, [r5, #8]
	movs r0, #1
	b _08078E7E
	.align 2, 0
_08078E78: .4byte gActiveUnit
_08078E7C:
	movs r0, #0
_08078E7E:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_08078E84
sub_08078E84: @ 0x08078E84
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08078EA4 @ =gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #2
	bne _08078EA8
	movs r0, #2
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08078EA8
	adds r0, r4, #0
	bl sub_08078E20
	b _08078EAA
	.align 2, 0
_08078EA4: .4byte gPlaySt
_08078EA8:
	movs r0, #0
_08078EAA:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_08078EB0
sub_08078EB0: @ 0x08078EB0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08078ED0 @ =gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #3
	bne _08078ED4
	movs r0, #2
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08078ED4
	adds r0, r4, #0
	bl sub_08078E20
	b _08078ED6
	.align 2, 0
_08078ED0: .4byte gPlaySt
_08078ED4:
	movs r0, #0
_08078ED6:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_08078EDC
sub_08078EDC: @ 0x08078EDC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4]
	ldr r1, [r0, #8]
	adds r0, r4, #0
	bl _call_via_r1
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08078EF4
	movs r0, #0
	b _08078F00
_08078EF4:
	ldr r0, [r4]
	ldr r1, [r0, #4]
	str r1, [r4, #4]
	ldrh r0, [r0, #2]
	str r0, [r4, #8]
	movs r0, #1
_08078F00:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08078F08
sub_08078F08: @ 0x08078F08
	adds r3, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	ldrb r0, [r3, #0x1a]
	cmp r0, r1
	bne _08078F2C
	ldrb r0, [r3, #0x1b]
	cmp r0, r2
	bne _08078F2C
	ldr r0, [r3]
	ldr r1, [r0, #4]
	str r1, [r3, #4]
	ldrh r0, [r0, #2]
	str r0, [r3, #8]
	movs r0, #1
	b _08078F2E
_08078F2C:
	movs r0, #0
_08078F2E:
	bx lr

	thumb_func_start sub_08078F30
sub_08078F30: @ 0x08078F30
	push {r4, r5, lr}
	adds r5, r1, #0
	adds r4, r2, #0
	ldr r1, _08078F58 @ =gActiveUnit
	ldr r2, [r1]
	movs r1, #0x10
	ldrsb r1, [r2, r1]
	cmp r1, r0
	blt _08078F5C
	cmp r1, r4
	bgt _08078F5C
	movs r1, #0x11
	ldrsb r1, [r2, r1]
	cmp r1, r5
	blt _08078F5C
	cmp r1, r3
	bgt _08078F5C
	movs r0, #1
	b _08078F5E
	.align 2, 0
_08078F58: .4byte gActiveUnit
_08078F5C:
	movs r0, #0
_08078F5E:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_08078F64
sub_08078F64: @ 0x08078F64
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	adds r7, r1, #0
	adds r6, r2, #0
	adds r5, r3, #0
	movs r4, #1
_08078F74:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _08078FB0
	ldr r0, [r2]
	cmp r0, #0
	beq _08078FB0
	ldr r0, [r2, #0xc]
	ldr r1, _08078FAC @ =0x00010004
	ands r0, r1
	cmp r0, #0
	bne _08078FB0
	movs r0, #0x10
	ldrsb r0, [r2, r0]
	cmp r0, r8
	blt _08078FB0
	cmp r0, r6
	bgt _08078FB0
	movs r0, #0x11
	ldrsb r0, [r2, r0]
	cmp r0, r7
	blt _08078FB0
	cmp r0, r5
	bgt _08078FB0
	movs r0, #1
	b _08078FB8
	.align 2, 0
_08078FAC: .4byte 0x00010004
_08078FB0:
	adds r4, #1
	cmp r4, #0x3f
	ble _08078F74
	movs r0, #0
_08078FB8:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08078FC4
sub_08078FC4: @ 0x08078FC4
	push {lr}
	ldr r0, _08078FE4 @ =gPlaySt
	ldrb r0, [r0, #0xf]
	cmp r0, #0x80
	bne _08078FE8
	movs r0, #0
	movs r1, #0xf
	movs r2, #0x19
	movs r3, #0x17
	bl sub_08078F64
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08078FE8
	movs r0, #1
	b _08078FEA
	.align 2, 0
_08078FE4: .4byte gPlaySt
_08078FE8:
	movs r0, #0
_08078FEA:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08078FF0
sub_08078FF0: @ 0x08078FF0
	push {lr}
	ldr r0, _08079034 @ =gPlaySt
	ldrb r0, [r0, #0xf]
	cmp r0, #0x80
	bne _08079030
	movs r0, #0
	movs r1, #0x18
	movs r2, #0x10
	movs r3, #0x1b
	bl sub_08078F64
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08079038
	movs r0, #0
	movs r1, #0x15
	movs r2, #2
	movs r3, #0x17
	bl sub_08078F64
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08079038
	movs r0, #3
	movs r1, #0x14
	movs r2, #5
	movs r3, #0x16
	bl sub_08078F64
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08079038
_08079030:
	movs r0, #0
	b _0807903A
	.align 2, 0
_08079034: .4byte gPlaySt
_08079038:
	movs r0, #1
_0807903A:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08079040
sub_08079040: @ 0x08079040
	push {lr}
	movs r0, #0xc
	movs r1, #0x15
	movs r2, #0x1f
	movs r3, #0x18
	bl sub_08078F64
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08079058
sub_08079058: @ 0x08079058
	push {lr}
	ldr r0, _08079074 @ =gPlaySt
	ldrb r0, [r0, #0xf]
	cmp r0, #0x80
	bne _08079078
	movs r0, #0x11
	movs r1, #0x15
	movs r2, #0x1f
	movs r3, #0x23
	bl sub_08078F64
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _0807907A
	.align 2, 0
_08079074: .4byte gPlaySt
_08079078:
	movs r0, #0
_0807907A:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08079080
sub_08079080: @ 0x08079080
	push {lr}
	ldr r0, _0807909C @ =gPlaySt
	ldrb r0, [r0, #0xf]
	cmp r0, #0x80
	bne _080790A0
	movs r0, #0
	movs r1, #0xf
	movs r2, #8
	movs r3, #0x12
	bl sub_08078F64
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _080790A2
	.align 2, 0
_0807909C: .4byte gPlaySt
_080790A0:
	movs r0, #0
_080790A2:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080790A8
sub_080790A8: @ 0x080790A8
	push {lr}
	ldr r0, _080790C4 @ =gPlaySt
	ldrb r0, [r0, #0xf]
	cmp r0, #0x80
	bne _080790C8
	movs r0, #0
	movs r1, #0x18
	movs r2, #0xc
	movs r3, #0x1b
	bl sub_08078F64
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _080790CA
	.align 2, 0
_080790C4: .4byte gPlaySt
_080790C8:
	movs r0, #0
_080790CA:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080790D0
sub_080790D0: @ 0x080790D0
	push {lr}
	ldr r0, _080790EC @ =gPlaySt
	ldrb r0, [r0, #0xf]
	cmp r0, #0x80
	bne _080790F0
	movs r0, #0x15
	movs r1, #0
	movs r2, #0x1e
	movs r3, #6
	bl sub_08078F64
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _080790F2
	.align 2, 0
_080790EC: .4byte gPlaySt
_080790F0:
	movs r0, #0
_080790F2:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080790F8
sub_080790F8: @ 0x080790F8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	adds r7, r1, #0
	adds r6, r2, #0
	adds r5, r3, #0
	movs r4, #0x81
_08079108:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _08079144
	ldr r0, [r2]
	cmp r0, #0
	beq _08079144
	ldr r0, [r2, #0xc]
	ldr r1, _08079140 @ =0x00010004
	ands r0, r1
	cmp r0, #0
	bne _08079144
	movs r0, #0x10
	ldrsb r0, [r2, r0]
	cmp r0, r8
	blt _08079144
	cmp r0, r6
	bgt _08079144
	movs r0, #0x11
	ldrsb r0, [r2, r0]
	cmp r0, r7
	blt _08079144
	cmp r0, r5
	bgt _08079144
	movs r0, #1
	b _0807914C
	.align 2, 0
_08079140: .4byte 0x00010004
_08079144:
	adds r4, #1
	cmp r4, #0xbf
	ble _08079108
	movs r0, #0
_0807914C:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08079158
sub_08079158: @ 0x08079158
	push {lr}
	sub sp, #0x1c
	ldr r0, _0807917C @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl sub_08031AEC
	ldr r0, [r0]
	str r0, [sp]
	mov r0, sp
	bl sub_080788FC
	cmp r0, #0
	bne _08079180
	movs r0, #0
	b _08079182
	.align 2, 0
_0807917C: .4byte gPlaySt
_08079180:
	movs r0, #1
_08079182:
	add sp, #0x1c
	pop {r1}
	bx r1

	thumb_func_start sub_08079188
sub_08079188: @ 0x08079188
	push {lr}
	sub sp, #0x1c
	ldr r0, _080791B0 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl sub_08031AEC
	ldr r0, [r0]
	str r0, [sp]
	mov r0, sp
	bl sub_080788FC
	cmp r0, #0
	beq _080791C4
	mov r0, sp
	bl sub_080788D0
	b _080791BA
	.align 2, 0
_080791B0: .4byte gPlaySt
_080791B4:
	mov r0, sp
	bl sub_080788D0
_080791BA:
	mov r0, sp
	bl sub_08078950
	cmp r0, #0
	bne _080791B4
_080791C4:
	add sp, #0x1c
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080791CC
sub_080791CC: @ 0x080791CC
	push {r4, r5, lr}
	sub sp, #0x1c
	adds r4, r0, #0
	adds r5, r1, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r0, _08079200 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl sub_08031AEC
	ldr r0, [r0, #4]
	str r0, [sp]
	mov r0, sp
	strb r4, [r0, #0x1a]
	strb r5, [r0, #0x1b]
	bl sub_080788FC
	cmp r0, #0
	bne _08079204
	movs r0, #0
	b _08079206
	.align 2, 0
_08079200: .4byte gPlaySt
_08079204:
	movs r0, #1
_08079206:
	add sp, #0x1c
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08079210
sub_08079210: @ 0x08079210
	push {r4, r5, lr}
	sub sp, #0x1c
	adds r4, r0, #0
	adds r5, r1, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r0, _0807924C @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl sub_08031AEC
	ldr r0, [r0, #4]
	str r0, [sp]
	mov r0, sp
	strb r4, [r0, #0x1a]
	strb r5, [r0, #0x1b]
	bl sub_080788FC
	cmp r0, #0
	beq _08079244
	mov r0, sp
	bl sub_080788D0
_08079244:
	add sp, #0x1c
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807924C: .4byte gPlaySt

	thumb_func_start sub_08079250
sub_08079250: @ 0x08079250
	push {r4, r5, r6, r7, lr}
	adds r4, r2, #0
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r6, r1, #0x18
	movs r5, #0
	ldr r0, _08079264 @ =0x08D67934
	b _08079292
	.align 2, 0
_08079264: .4byte 0x08D67934
_08079268:
	adds r2, r1, #0
	ldrb r1, [r0, #1]
	cmp r2, r7
	bne _08079274
	cmp r1, r6
	beq _0807927C
_08079274:
	cmp r1, r7
	bne _08079290
	cmp r2, r6
	bne _08079290
_0807927C:
	cmp r4, #1
	bne _08079282
	ldr r5, [r0, #4]
_08079282:
	cmp r4, #2
	bne _08079288
	ldr r5, [r0, #8]
_08079288:
	cmp r4, #3
	bne _08079298
	ldr r5, [r0, #0xc]
	b _08079298
_08079290:
	adds r0, #0x14
_08079292:
	ldrb r1, [r0]
	cmp r1, #0
	bne _08079268
_08079298:
	cmp r5, #0
	beq _080792BC
	adds r1, r7, #0
	adds r2, r6, #0
	adds r3, r4, #0
	bl sub_0807931C
	adds r1, r0, #0
	adds r0, r5, #0
	bl sub_0800EC9C
	bl sub_0800AD60
	adds r0, r7, #0
	adds r1, r6, #0
	adds r2, r4, #0
	bl sub_0809F88C
_080792BC:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080792C4
sub_080792C4: @ 0x080792C4
	push {r4, r5, r6, lr}
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r4, r1, #0x18
	movs r5, #0
	ldr r1, _080792D4 @ =0x08D67934
	b _08079302
	.align 2, 0
_080792D4: .4byte 0x08D67934
_080792D8:
	adds r0, r3, #0
	ldrb r3, [r1, #1]
	cmp r0, r6
	bne _080792E4
	cmp r3, r4
	beq _080792EC
_080792E4:
	cmp r3, r6
	bne _08079300
	cmp r0, r4
	bne _08079300
_080792EC:
	cmp r2, #1
	bne _080792F2
	ldr r5, [r1, #4]
_080792F2:
	cmp r2, #2
	bne _080792F8
	ldr r5, [r1, #8]
_080792F8:
	cmp r2, #3
	bne _08079308
	ldr r5, [r1, #0xc]
	b _08079308
_08079300:
	adds r1, #0x14
_08079302:
	ldrb r3, [r1]
	cmp r3, #0
	bne _080792D8
_08079308:
	cmp r5, #0
	beq _08079316
	adds r0, r5, #0
	bl sub_0800ECD4
	bl sub_0800AD60
_08079316:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_0807931C
sub_0807931C: @ 0x0807931C
	push {r4, r5, lr}
	adds r5, r3, #0
	lsls r1, r1, #0x18
	lsrs r4, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r3, r2, #0x18
	adds r2, r0, #0
	cmp r2, #0
	bne _08079352
	ldr r2, _08079334 @ =0x08D67934
	b _0807933A
	.align 2, 0
_08079334: .4byte 0x08D67934
_08079338:
	adds r2, #0x14
_0807933A:
	ldrb r0, [r2]
	cmp r0, #0
	beq _08079352
	ldrb r1, [r2, #1]
	cmp r0, r4
	bne _0807934A
	cmp r1, r3
	beq _08079352
_0807934A:
	cmp r1, r4
	bne _08079338
	cmp r0, r3
	bne _08079338
_08079352:
	ldr r1, [r2, #0x10]
	cmp r1, #0
	beq _08079398
	subs r0, r5, #1
	lsls r0, r0, #3
	adds r3, r1, #0
	lsrs r3, r0
	movs r0, #0xff
	ands r3, r0
	cmp r3, #4
	bhi _08079398
	lsls r0, r3, #2
	ldr r1, _08079374 @ =_08079378
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08079374: .4byte _08079378
_08079378: @ jump table
	.4byte _08079398 @ case 0
	.4byte _0807938C @ case 1
	.4byte _08079390 @ case 2
	.4byte _08079394 @ case 3
	.4byte _08079394 @ case 4
_0807938C:
	movs r0, #0x41
	b _0807939A
_08079390:
	movs r0, #0x4c
	b _0807939A
_08079394:
	movs r0, #0x6a
	b _0807939A
_08079398:
	movs r0, #0
_0807939A:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_080793A0
sub_080793A0: @ 0x080793A0
	push {r4, r5, lr}
	sub sp, #0x1c
	adds r4, r0, #0
	adds r5, r1, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r0, _080793D4 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl sub_08031AEC
	ldr r0, [r0, #8]
	str r0, [sp]
	mov r0, sp
	strb r4, [r0, #0x18]
	strb r5, [r0, #0x19]
	bl sub_080788FC
	cmp r0, #0
	beq _080793D8
	ldr r0, [sp, #0xc]
	b _080793DA
	.align 2, 0
_080793D4: .4byte gPlaySt
_080793D8:
	movs r0, #0
_080793DA:
	add sp, #0x1c
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080793E4
sub_080793E4: @ 0x080793E4
	push {r4, r5, lr}
	sub sp, #0x1c
	adds r4, r0, #0
	adds r5, r1, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r0, _08079428 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl sub_08031AEC
	ldr r0, [r0, #8]
	str r0, [sp]
	mov r0, sp
	strb r4, [r0, #0x18]
	strb r5, [r0, #0x19]
	bl sub_080788FC
	cmp r0, #0
	bne _08079414
	b _080795C2
_08079414:
	ldr r0, [sp, #0xc]
	cmp r0, #0x1d
	bls _0807941C
	b _080795C2
_0807941C:
	lsls r0, r0, #2
	ldr r1, _0807942C @ =_08079430
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08079428: .4byte gPlaySt
_0807942C: .4byte _08079430
_08079430: @ jump table
	.4byte _080795C0 @ case 0
	.4byte _080795C2 @ case 1
	.4byte _080795C2 @ case 2
	.4byte _080795C2 @ case 3
	.4byte _080795C2 @ case 4
	.4byte _080795C2 @ case 5
	.4byte _080795C2 @ case 6
	.4byte _080795C2 @ case 7
	.4byte _080795C2 @ case 8
	.4byte _080795C2 @ case 9
	.4byte _080795C2 @ case 10
	.4byte _080795C2 @ case 11
	.4byte _080795C2 @ case 12
	.4byte _080795C2 @ case 13
	.4byte _080794A8 @ case 14
	.4byte _080794A8 @ case 15
	.4byte _080794D8 @ case 16
	.4byte _080794D8 @ case 17
	.4byte _0807950A @ case 18
	.4byte _0807958C @ case 19
	.4byte _0807959C @ case 20
	.4byte _080795AC @ case 21
	.4byte _080795BC @ case 22
	.4byte _080795C2 @ case 23
	.4byte _080795C2 @ case 24
	.4byte _080795C2 @ case 25
	.4byte _080795C2 @ case 26
	.4byte _080795C2 @ case 27
	.4byte _080795C2 @ case 28
	.4byte _080794B6 @ case 29
_080794A8:
	mov r0, sp
	bl sub_080788D0
	ldr r0, [sp, #0x10]
	cmp r0, #3
	beq _080794B6
	b _080795C2
_080794B6:
	mov r0, sp
	ldrb r0, [r0, #0x18]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	mov r1, sp
	ldrb r1, [r1, #0x19]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl GetMapChangeIdAt
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl sub_0800EF34
_080794D2:
	bl sub_0800AD60
	b _080795C2
_080794D8:
	ldr r0, [sp, #4]
	cmp r0, #1
	bne _08079502
	mov r0, sp
	ldrb r0, [r0, #0x18]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	mov r1, sp
	ldrb r1, [r1, #0x19]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl GetMapChangeIdAt
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl sub_0800EF34
	ldr r0, [sp, #8]
	bl sub_0807A0B4
	b _080794D2
_08079502:
	mov r0, sp
	bl sub_080788D0
	b _080794D2
_0807950A:
	ldr r4, [sp, #0x14]
	cmp r4, #0
	bne _08079534
	mov r0, sp
	ldrb r0, [r0, #0x18]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	mov r1, sp
	ldrb r1, [r1, #0x19]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl GetMapChangeIdAt
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl sub_0800EF34
	mov r0, sp
	bl sub_080788D0
	b _08079580
_08079534:
	cmp r4, #0x76
	beq _0807955E
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	mov r0, sp
	ldrb r0, [r0, #0x18]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	mov r1, sp
	ldrb r1, [r1, #0x19]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl GetMapChangeIdAt
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	adds r0, r4, #0
	bl sub_0800EF50
	b _08079580
_0807955E:
	ldr r4, [sp, #0x10]
	mov r0, sp
	ldrb r0, [r0, #0x18]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	mov r1, sp
	ldrb r1, [r1, #0x19]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl GetMapChangeIdAt
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	adds r0, r4, #0
	bl sub_0800EF78
_08079580:
	bl sub_0800AD60
	ldr r0, [sp, #8]
	bl sub_0807A0B4
	b _080795C2
_0807958C:
	ldr r0, _08079598 @ =gActiveUnit
	ldr r0, [r0]
	ldr r1, [sp, #4]
	bl sub_080B11FC
	b _080795C2
	.align 2, 0
_08079598: .4byte gActiveUnit
_0807959C:
	ldr r0, _080795A8 @ =gActiveUnit
	ldr r0, [r0]
	ldr r1, [sp, #4]
	bl sub_080B121C
	b _080795C2
	.align 2, 0
_080795A8: .4byte gActiveUnit
_080795AC:
	ldr r0, _080795B8 @ =gActiveUnit
	ldr r0, [r0]
	ldr r1, [sp, #4]
	bl sub_080B123C
	b _080795C2
	.align 2, 0
_080795B8: .4byte gActiveUnit
_080795BC:
	mov r8, r8
	b _080795C2
_080795C0:
	mov r8, r8
_080795C2:
	add sp, #0x1c
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080795CC
sub_080795CC: @ 0x080795CC
	push {lr}
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_080793E4
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080795E0
sub_080795E0: @ 0x080795E0
	push {lr}
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_080793A0
	cmp r0, #0xe
	beq _080795F6
	movs r0, #0
	b _080795F8
_080795F6:
	movs r0, #1
_080795F8:
	pop {r1}
	bx r1

	thumb_func_start sub_080795FC
sub_080795FC: @ 0x080795FC
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	asrs r5, r0, #0x18
	lsls r1, r1, #0x18
	asrs r4, r1, #0x18
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_080795E0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807961C
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_080793E4
_0807961C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08079624
sub_08079624: @ 0x08079624
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r6, r0, #0x18
	asrs r5, r0, #0x18
	lsrs r7, r1, #0x18
	asrs r4, r1, #0x18
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_080793A0
	cmp r0, #0x13
	beq _08079680
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_080793A0
	cmp r0, #0x14
	beq _08079680
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_080793A0
	cmp r0, #0x15
	bne _08079668
	ldr r0, _0807967C @ =gActiveUnit
	ldr r0, [r0]
	movs r1, #0x71
	bl GetUnitItemSlot
	movs r1, #1
	rsbs r1, r1, #0
	cmp r0, r1
	bne _08079680
_08079668:
	lsls r0, r6, #0x18
	asrs r0, r0, #0x18
	lsls r1, r7, #0x18
	asrs r1, r1, #0x18
	bl sub_080793A0
	cmp r0, #0x16
	beq _08079680
	movs r0, #0
	b _08079682
	.align 2, 0
_0807967C: .4byte gActiveUnit
_08079680:
	movs r0, #1
_08079682:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_08079688
sub_08079688: @ 0x08079688
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	asrs r5, r0, #0x18
	lsls r1, r1, #0x18
	asrs r4, r1, #0x18
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_08079624
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080796A8
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_080793E4
_080796A8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080796B0
sub_080796B0: @ 0x080796B0
	push {lr}
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_080793A0
	cmp r0, #0x12
	beq _080796C6
	movs r0, #0
	b _080796C8
_080796C6:
	movs r0, #1
_080796C8:
	pop {r1}
	bx r1

	thumb_func_start sub_080796CC
sub_080796CC: @ 0x080796CC
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	asrs r5, r0, #0x18
	lsls r1, r1, #0x18
	asrs r4, r1, #0x18
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_080796B0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080796EC
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_080793E4
_080796EC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080796F4
sub_080796F4: @ 0x080796F4
	push {lr}
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_080793A0
	cmp r0, #0x10
	beq _0807970A
	movs r0, #0
	b _0807970C
_0807970A:
	movs r0, #1
_0807970C:
	pop {r1}
	bx r1

	thumb_func_start sub_08079710
sub_08079710: @ 0x08079710
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	asrs r5, r0, #0x18
	lsls r1, r1, #0x18
	asrs r4, r1, #0x18
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_080796F4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08079730
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_080793E4
_08079730:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08079738
sub_08079738: @ 0x08079738
	push {lr}
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_080793A0
	cmp r0, #0x11
	beq _0807974E
	movs r0, #0
	b _08079750
_0807974E:
	movs r0, #1
_08079750:
	pop {r1}
	bx r1

	thumb_func_start sub_08079754
sub_08079754: @ 0x08079754
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	asrs r5, r0, #0x18
	lsls r1, r1, #0x18
	asrs r4, r1, #0x18
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_08079738
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08079774
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_080793E4
_08079774:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807977C
sub_0807977C: @ 0x0807977C
	push {lr}
	bl sub_08079990
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807978C
sub_0807978C: @ 0x0807978C
	push {lr}
	bl sub_080799A0
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08079798
sub_08079798: @ 0x08079798
	push {lr}
	sub sp, #0x1c
	ldr r0, _080797CC @ =gPlaySt
	movs r1, #0xe
	ldrsb r1, [r0, r1]
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldr r2, _080797D0 @ =0x08D6696C
	lsls r0, r1, #4
	adds r0, r0, r2
	ldr r0, [r0]
	str r0, [sp]
	cmp r1, #0xb
	bhi _080797C4
	mov r0, sp
	bl sub_080788FC
	cmp r0, #0
	beq _080797C4
	mov r0, sp
	bl sub_080788D0
_080797C4:
	movs r0, #0
	add sp, #0x1c
	pop {r1}
	bx r1
	.align 2, 0
_080797CC: .4byte gPlaySt
_080797D0: .4byte 0x08D6696C

	thumb_func_start sub_080797D4
sub_080797D4: @ 0x080797D4
	push {r4, lr}
	sub sp, #0x1c
	ldr r0, _08079818 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	ldr r0, _0807981C @ =0x08D6696C
	lsls r1, r4, #4
	adds r0, #8
	adds r1, r1, r0
	ldr r0, [r1]
	str r0, [sp]
	cmp r4, #0xb
	bhi _08079820
	mov r0, sp
	bl sub_080788FC
	cmp r0, #0
	beq _08079820
	mov r0, sp
	bl sub_080788D0
	cmp r4, #1
	bne _08079820
	bl sub_0807D97C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08079820
	movs r0, #1
	b _08079822
	.align 2, 0
_08079818: .4byte gPlaySt
_0807981C: .4byte 0x08D6696C
_08079820:
	movs r0, #0
_08079822:
	add sp, #0x1c
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807982C
sub_0807982C: @ 0x0807982C
	push {lr}
	sub sp, #0x1c
	ldr r0, _0807986C @ =gPlaySt
	movs r2, #0xe
	ldrsb r2, [r0, r2]
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	ldr r0, _08079870 @ =0x08D6696C
	lsls r1, r2, #4
	adds r0, #4
	adds r1, r1, r0
	ldr r0, [r1]
	str r0, [sp]
	cmp r2, #0xb
	bhi _0807987A
	mov r0, sp
	bl sub_080788FC
	cmp r0, #0
	beq _0807987A
	mov r0, sp
	bl sub_080789EC
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _08079874
	mov r0, sp
	bl sub_080788D0
	movs r0, #1
	b _0807987C
	.align 2, 0
_0807986C: .4byte gPlaySt
_08079870: .4byte 0x08D6696C
_08079874:
	mov r0, sp
	bl sub_080788F0
_0807987A:
	movs r0, #0
_0807987C:
	add sp, #0x1c
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08079884
sub_08079884: @ 0x08079884
	movs r0, #0
	bx lr

	thumb_func_start sub_08079888
sub_08079888: @ 0x08079888
	movs r0, #0
	bx lr

	thumb_func_start sub_0807988C
sub_0807988C: @ 0x0807988C
	movs r0, #0
	bx lr

	thumb_func_start sub_08079890
sub_08079890: @ 0x08079890
	movs r0, #0
	bx lr

	thumb_func_start sub_08079894
sub_08079894: @ 0x08079894
	push {lr}
	sub sp, #0x1c
	ldr r0, _080798CC @ =gPlaySt
	movs r2, #0xe
	ldrsb r2, [r0, r2]
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	ldr r0, _080798D0 @ =0x08D6696C
	lsls r1, r2, #4
	adds r0, #0xc
	adds r1, r1, r0
	ldr r0, [r1]
	str r0, [sp]
	cmp r2, #0xb
	bhi _080798C2
	mov r0, sp
	bl sub_080788FC
	cmp r0, #0
	beq _080798C2
	mov r0, sp
	bl sub_080788D0
_080798C2:
	movs r0, #0
	add sp, #0x1c
	pop {r1}
	bx r1
	.align 2, 0
_080798CC: .4byte gPlaySt
_080798D0: .4byte 0x08D6696C

	thumb_func_start sub_080798D4
sub_080798D4: @ 0x080798D4
	push {lr}
	sub sp, #0x1c
	ldr r0, _08079900 @ =gPlaySt
	movs r2, #0xe
	ldrsb r2, [r0, r2]
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	ldr r0, _08079904 @ =0x08D6696C
	lsls r1, r2, #4
	adds r0, #0xc
	adds r1, r1, r0
	ldr r0, [r1]
	str r0, [sp]
	cmp r2, #0xb
	bhi _08079908
	mov r0, sp
	bl sub_080788FC
	cmp r0, #0
	beq _08079908
	movs r0, #1
	b _0807990A
	.align 2, 0
_08079900: .4byte gPlaySt
_08079904: .4byte 0x08D6696C
_08079908:
	movs r0, #0
_0807990A:
	add sp, #0x1c
	pop {r1}
	bx r1

	thumb_func_start sub_08079910
sub_08079910: @ 0x08079910
	push {lr}
	sub sp, #0x1c
	ldr r0, _08079940 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl sub_08031AEC
	ldr r0, [r0, #0xc]
	str r0, [sp]
	mov r1, sp
	ldr r0, _08079944 @ =gActiveUnit
	ldr r2, [r0]
	ldrb r0, [r2, #0x10]
	strb r0, [r1, #0x18]
	ldrb r0, [r2, #0x11]
	strb r0, [r1, #0x19]
	mov r0, sp
	bl sub_080788FC
	cmp r0, #0
	bne _08079948
	movs r0, #0
	b _0807994A
	.align 2, 0
_08079940: .4byte gPlaySt
_08079944: .4byte gActiveUnit
_08079948:
	movs r0, #1
_0807994A:
	add sp, #0x1c
	pop {r1}
	bx r1

	thumb_func_start sub_08079950
sub_08079950: @ 0x08079950
	push {lr}
	sub sp, #0x1c
	ldr r0, _08079988 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl sub_08031AEC
	ldr r0, [r0, #0xc]
	str r0, [sp]
	mov r1, sp
	ldr r0, _0807998C @ =gActiveUnit
	ldr r2, [r0]
	ldrb r0, [r2, #0x10]
	strb r0, [r1, #0x18]
	ldrb r0, [r2, #0x11]
	strb r0, [r1, #0x19]
	mov r0, sp
	bl sub_080788FC
	cmp r0, #0
	beq _08079982
	mov r0, sp
	bl sub_080788D0
_08079982:
	add sp, #0x1c
	pop {r0}
	bx r0
	.align 2, 0
_08079988: .4byte gPlaySt
_0807998C: .4byte gActiveUnit

	thumb_func_start sub_08079990
sub_08079990: @ 0x08079990
	push {lr}
	movs r0, #3
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_080799A0
sub_080799A0: @ 0x080799A0
	push {lr}
	movs r0, #3
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080799BC
	bl sub_0807977C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080799BC
	bl sub_0807A208
_080799BC:
	pop {r0}
	bx r0

	thumb_func_start sub_080799C0
sub_080799C0: @ 0x080799C0
	push {r4, lr}
	ldr r4, _080799D8 @ =gPlaySt
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl sub_08031AEC
	ldrb r4, [r4, #0x1b]
	cmp r4, #3
	beq _080799DC
	ldr r0, [r0, #0x10]
	b _080799DE
	.align 2, 0
_080799D8: .4byte gPlaySt
_080799DC:
	ldr r0, [r0, #0x14]
_080799DE:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_080799E4
sub_080799E4: @ 0x080799E4
	push {r4, r5, lr}
	sub sp, #0x1c
	ldr r5, _08079A18 @ =gPlaySt
	movs r0, #0xe
	ldrsb r0, [r5, r0]
	bl sub_08031AEC
	adds r4, r0, #0
	movs r0, #0
	str r0, [sp, #8]
	ldrb r0, [r5, #0xe]
	cmp r0, #0x27
	bne _08079A02
	bl sub_0807E514
_08079A02:
	ldrb r0, [r5, #0x1b]
	cmp r0, #3
	bne _08079A20
	movs r0, #0x40
	ldrb r5, [r5, #0x14]
	ands r0, r5
	cmp r0, #0
	beq _08079A1C
	ldr r0, [r4, #0x24]
	b _08079A2C
	.align 2, 0
_08079A18: .4byte gPlaySt
_08079A1C:
	ldr r0, [r4, #0x20]
	b _08079A2C
_08079A20:
	movs r0, #0x40
	ldrb r5, [r5, #0x14]
	ands r0, r5
	cmp r0, #0
	beq _08079A34
	ldr r0, [r4, #0x1c]
_08079A2C:
	str r0, [sp, #4]
	bl LoadUnits
	b _08079A3C
_08079A34:
	ldr r0, [r4, #0x18]
	str r0, [sp, #4]
	bl LoadUnits
_08079A3C:
	bl sub_0807A198
	bl RefreshEntityMaps
	bl RefreshUnitSprites
	add sp, #0x1c
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08079A50
sub_08079A50: @ 0x08079A50
	push {r4, lr}
	ldr r4, _08079A74 @ =gPlaySt
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl sub_08031AEC
	adds r1, r0, #0
	ldrb r0, [r4, #0x1b]
	cmp r0, #3
	bne _08079A7C
	movs r0, #0x40
	ldrb r4, [r4, #0x14]
	ands r0, r4
	cmp r0, #0
	beq _08079A78
	ldr r0, [r1, #0x34]
	b _08079A8C
	.align 2, 0
_08079A74: .4byte gPlaySt
_08079A78:
	ldr r0, [r1, #0x30]
	b _08079A8C
_08079A7C:
	movs r0, #0x40
	ldrb r4, [r4, #0x14]
	ands r0, r4
	cmp r0, #0
	bne _08079A8A
	ldr r0, [r1, #0x28]
	b _08079A8C
_08079A8A:
	ldr r0, [r1, #0x2c]
_08079A8C:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08079A94
sub_08079A94: @ 0x08079A94
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r4, r1, #0x18
	ldr r3, _08079AB0 @ =0x08D66CE0
	ldr r1, _08079AB4 @ =gPlaySt
	movs r0, #0x80
	ldrb r2, [r1, #0x14]
	ands r0, r2
	cmp r0, #0
	beq _08079AE0
	b _08079AE6
	.align 2, 0
_08079AB0: .4byte 0x08D66CE0
_08079AB4: .4byte gPlaySt
_08079AB8:
	adds r0, r3, #0
	b _08079AE8
_08079ABC:
	ldrb r2, [r3]
	cmp r5, r2
	bne _08079AC6
	cmp r4, r0
	beq _08079AD0
_08079AC6:
	ldrb r0, [r3, #1]
	cmp r5, r0
	bne _08079ADE
	cmp r4, r2
	bne _08079ADE
_08079AD0:
	ldrb r2, [r3, #2]
	cmp r2, #0x45
	beq _08079AB8
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	cmp r0, r2
	beq _08079AB8
_08079ADE:
	adds r3, #0x10
_08079AE0:
	ldrb r0, [r3, #1]
	cmp r0, #0
	bne _08079ABC
_08079AE6:
	movs r0, #0
_08079AE8:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08079AF0
sub_08079AF0: @ 0x08079AF0
	push {r4, r5, lr}
	adds r4, r1, #0
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	b _08079B2A
_08079AFA:
	ldr r0, [r4, #8]
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08079B28
	ldrb r0, [r4]
	cmp r5, r0
	bne _08079B28
	ldrb r1, [r4, #1]
	cmp r1, #0x45
	beq _08079B20
	ldr r0, _08079B24 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldrb r1, [r4, #1]
	cmp r0, r1
	bne _08079B28
_08079B20:
	adds r0, r4, #0
	b _08079B32
	.align 2, 0
_08079B24: .4byte gPlaySt
_08079B28:
	adds r4, #0xc
_08079B2A:
	ldrb r0, [r4]
	cmp r0, #0
	bne _08079AFA
	movs r0, #0
_08079B32:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_08079B38
sub_08079B38: @ 0x08079B38
	push {r4, r5, lr}
	adds r4, r1, #0
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	b _08079B72
_08079B42:
	ldr r0, [r4, #0xc]
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08079B70
	ldrb r0, [r4]
	cmp r5, r0
	bne _08079B70
	ldrb r1, [r4, #1]
	cmp r1, #0x45
	beq _08079B68
	ldr r0, _08079B6C @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldrb r1, [r4, #1]
	cmp r0, r1
	bne _08079B70
_08079B68:
	adds r0, r4, #0
	b _08079B7A
	.align 2, 0
_08079B6C: .4byte gPlaySt
_08079B70:
	adds r4, #0x10
_08079B72:
	ldrb r0, [r4]
	cmp r0, #0
	bne _08079B42
	movs r0, #0
_08079B7A:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_08079B80
sub_08079B80: @ 0x08079B80
	push {r4, r5, lr}
	adds r4, r1, #0
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	b _08079BBA
_08079B8A:
	ldr r0, [r4, #8]
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08079BB8
	ldrb r0, [r4]
	cmp r5, r0
	bne _08079BB8
	ldrb r1, [r4, #1]
	cmp r1, #0x45
	beq _08079BB0
	ldr r0, _08079BB4 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldrb r1, [r4, #1]
	cmp r0, r1
	bne _08079BB8
_08079BB0:
	adds r0, r4, #0
	b _08079BC2
	.align 2, 0
_08079BB4: .4byte gPlaySt
_08079BB8:
	adds r4, #0xc
_08079BBA:
	ldrb r0, [r4]
	cmp r0, #0
	bne _08079B8A
	movs r0, #0
_08079BC2:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_08079BC8
sub_08079BC8: @ 0x08079BC8
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r7, r4, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	adds r5, r1, #0
	adds r0, r4, #0
	bl sub_08079A94
	cmp r0, #0
	beq _08079BEE
	ldr r0, [r0, #0xc]
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08079C2C
	b _08079C1E
_08079BEE:
	ldr r6, _08079C24 @ =0x08D66A34
	adds r0, r4, #0
	adds r1, r6, #0
	bl sub_08079AF0
	cmp r0, #0
	bne _08079C1E
	adds r0, r5, #0
	adds r1, r6, #0
	bl sub_08079AF0
	cmp r0, #0
	bne _08079C1E
	ldr r1, _08079C28 @ =0x08D67070
	adds r0, r7, #0
	bl sub_08079AF0
	cmp r0, #0
	beq _08079C2C
	bl BattleIsTriangleAttack
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08079C2C
_08079C1E:
	movs r0, #1
	b _08079C2E
	.align 2, 0
_08079C24: .4byte 0x08D66A34
_08079C28: .4byte 0x08D67070
_08079C2C:
	movs r0, #0
_08079C2E:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_08079C34
sub_08079C34: @ 0x08079C34
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r7, r4, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	adds r6, r1, #0
	adds r0, r4, #0
	bl sub_08079A94
	adds r5, r0, #0
	cmp r5, #0
	beq _08079C78
	ldr r0, [r5, #0xc]
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08079CD8
	ldr r0, [r5, #4]
	cmp r0, #0
	beq _08079C66
	bl sub_0800EC84
	b _08079C6C
_08079C66:
	ldr r0, [r5, #8]
	bl sub_0800AE98
_08079C6C:
	bl sub_0800AD60
	ldr r0, [r5, #0xc]
	bl sub_0807A0B4
	b _08079CD8
_08079C78:
	ldr r5, _08079CAC @ =0x08D66A34
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_08079AF0
	adds r4, r0, #0
	cmp r4, #0
	bne _08079C96
	adds r0, r6, #0
	adds r1, r5, #0
	bl sub_08079AF0
	adds r4, r0, #0
	cmp r4, #0
	beq _08079CB0
_08079C96:
	ldr r0, [r4, #4]
	cmp r0, #0
	beq _08079CA4
	bl sub_0800EC84
	bl sub_0800AD60
_08079CA4:
	ldr r0, [r4, #8]
	bl sub_0807A0B4
	b _08079CD8
	.align 2, 0
_08079CAC: .4byte 0x08D66A34
_08079CB0:
	ldr r1, _08079CE0 @ =0x08D67070
	adds r0, r7, #0
	bl sub_08079AF0
	adds r4, r0, #0
	cmp r4, #0
	beq _08079CD8
	bl BattleIsTriangleAttack
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08079CD8
	ldr r0, [r4, #4]
	bl sub_0800EC84
	bl sub_0800AD60
	ldr r0, [r4, #8]
	bl sub_0807A0B4
_08079CD8:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08079CE0: .4byte 0x08D67070

	thumb_func_start sub_08079CE4
sub_08079CE4: @ 0x08079CE4
	push {r4, r5, r6, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r5, r4, #0
	ldr r1, _08079D20 @ =0x08D6722C
	adds r0, r4, #0
	bl sub_08079B38
	cmp r0, #0
	bne _08079D1C
	ldr r6, _08079D24 @ =gPlaySt
	ldr r1, _08079D28 @ =0x08D6716C
	ldrb r0, [r6, #0x1b]
	cmp r0, #1
	bne _08079D04
	ldr r1, _08079D2C @ =0x08D670AC
_08079D04:
	adds r0, r4, #0
	bl sub_08079B80
	cmp r0, #0
	bne _08079D1C
	ldrb r6, [r6, #0x1b]
	cmp r6, #1
	beq _08079D30
	cmp r5, #0xf
	beq _08079D1C
	cmp r5, #0x15
	bne _08079D30
_08079D1C:
	movs r0, #1
	b _08079D32
	.align 2, 0
_08079D20: .4byte 0x08D6722C
_08079D24: .4byte gPlaySt
_08079D28: .4byte 0x08D6716C
_08079D2C: .4byte 0x08D670AC
_08079D30:
	movs r0, #0
_08079D32:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_08079D38
sub_08079D38: @ 0x08079D38
	push {r4, r5, r6, lr}
	sub sp, #8
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	movs r5, #1
_08079D42:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _08079DE4
	ldr r0, [r4]
	cmp r0, #0
	beq _08079DE4
	ldrb r0, [r0, #4]
	cmp r0, r6
	bne _08079DE4
	ldr r0, [r4, #0xc]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	bne _08079DE4
	lsls r0, r6, #0x18
	lsrs r0, r0, #0x18
	movs r1, #0
	movs r2, #7
	bl sub_080A08B4
	adds r0, r4, #0
	bl UnitKill
	adds r0, r4, #0
	movs r1, #0
	bl SetUnitHp
	ldr r0, _08079DDC @ =gBattleActor
	ldrb r1, [r0, #0xb]
	ldrb r2, [r4, #0xb]
	cmp r1, r2
	bne _08079D90
	adds r1, r4, #0
	movs r2, #0x48
	bl memcpy
_08079D90:
	ldr r0, _08079DE0 @ =gBattleTarget
	ldrb r1, [r0, #0xb]
	ldrb r2, [r4, #0xb]
	cmp r1, r2
	bne _08079DA2
	adds r1, r4, #0
	movs r2, #0x48
	bl memcpy
_08079DA2:
	ldr r0, [r4, #0xc]
	movs r1, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08079DBA
	ldrb r0, [r4, #0x1b]
	bl GetUnit
	movs r1, #0
	movs r2, #0
	bl UnitDrop
_08079DBA:
	ldr r0, [r4, #0xc]
	movs r1, #0x10
	ands r0, r1
	cmp r0, #0
	beq _08079DEA
	adds r0, r4, #0
	mov r1, sp
	add r2, sp, #4
	bl UnitGetDeathDropLocation
	ldr r1, [sp]
	ldr r2, [sp, #4]
	adds r0, r4, #0
	bl UnitDrop
	b _08079DEA
	.align 2, 0
_08079DDC: .4byte gBattleActor
_08079DE0: .4byte gBattleTarget
_08079DE4:
	adds r5, #1
	cmp r5, #0x3f
	ble _08079D42
_08079DEA:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08079DF4
sub_08079DF4: @ 0x08079DF4
	push {r4, r5, r6, lr}
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r6, _08079E44 @ =gPlaySt
	ldr r1, _08079E48 @ =0x08D6716C
	ldrb r0, [r6, #0x1b]
	cmp r0, #1
	bne _08079E06
	ldr r1, _08079E4C @ =0x08D670AC
_08079E06:
	adds r0, r5, #0
	bl sub_08079B80
	adds r4, r0, #0
	cmp r4, #0
	beq _08079E6A
	ldr r0, [r4, #4]
	cmp r0, #0
	beq _08079E1C
	bl sub_0800AE98
_08079E1C:
	bl sub_0800AD60
	ldr r0, [r4, #8]
	bl sub_0807A0B4
	ldr r0, [r4, #8]
	cmp r0, #0x65
	bne _08079E50
	movs r0, #0x2b
	movs r1, #0
	bl sub_0800376C
	adds r1, r6, #0
	adds r1, #0x41
	movs r0, #1
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	b _08079ECC
	.align 2, 0
_08079E44: .4byte gPlaySt
_08079E48: .4byte 0x08D6716C
_08079E4C: .4byte 0x08D670AC
_08079E50:
	adds r0, r5, #0
	bl GetUnitFromCharId
	movs r1, #0xc0
	ldrb r0, [r0, #0xb]
	ands r1, r0
	cmp r1, #0
	bne _08079ECC
	movs r0, #0x2c
	movs r1, #0
	bl sub_0800376C
	b _08079ECC
_08079E6A:
	ldr r1, _08079E84 @ =0x08D6722C
	adds r0, r5, #0
	bl sub_08079B38
	adds r4, r0, #0
	cmp r4, #0
	beq _08079EB4
	ldr r0, [r4, #4]
	cmp r0, #0
	beq _08079E88
	bl sub_0800EC84
	b _08079E92
	.align 2, 0
_08079E84: .4byte 0x08D6722C
_08079E88:
	ldr r0, [r4, #8]
	cmp r0, #0
	beq _08079E92
	bl sub_0800AE98
_08079E92:
	bl sub_0800AD60
	ldr r0, [r4, #0xc]
	bl sub_0807A0B4
	adds r0, r5, #0
	bl GetUnitFromCharId
	movs r1, #0xc0
	ldrb r0, [r0, #0xb]
	ands r1, r0
	cmp r1, #0
	bne _08079EB4
	movs r0, #0x2c
	movs r1, #0
	bl sub_0800376C
_08079EB4:
	cmp r5, #0xf
	beq _08079EBE
	cmp r5, #0x15
	beq _08079EC6
	b _08079ECC
_08079EBE:
	movs r0, #0x15
	bl sub_08079D38
	b _08079ECC
_08079EC6:
	movs r0, #0xf
	bl sub_08079D38
_08079ECC:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08079ED4
sub_08079ED4: @ 0x08079ED4
	push {lr}
	movs r0, #0x65
	bl sub_0807A0B4
	movs r0, #0x2b
	movs r1, #0
	bl sub_0800376C
	ldr r0, _08079EFC @ =gPlaySt
	adds r0, #0x41
	movs r1, #1
	ldrb r2, [r0]
	orrs r1, r2
	strb r1, [r0]
	ldr r0, _08079F00 @ =0x08D6F71C
	bl sub_0800AE98
	pop {r0}
	bx r0
	.align 2, 0
_08079EFC: .4byte gPlaySt
_08079F00: .4byte 0x08D6F71C

	thumb_func_start sub_08079F04
sub_08079F04: @ 0x08079F04
	movs r0, #0
	bx lr

	thumb_func_start nullsub_61
nullsub_61: @ 0x08079F08
	bx lr
	.align 2, 0

	thumb_func_start nullsub_62
nullsub_62: @ 0x08079F0C
	bx lr
	.align 2, 0

	thumb_func_start sub_08079F10
sub_08079F10: @ 0x08079F10
	movs r0, #0
	bx lr

	thumb_func_start nullsub_63
nullsub_63: @ 0x08079F14
	bx lr
	.align 2, 0

	thumb_func_start sub_08079F18
sub_08079F18: @ 0x08079F18
	movs r0, #0
	bx lr

	thumb_func_start sub_08079F1C
sub_08079F1C: @ 0x08079F1C
	movs r0, #0
	bx lr

	thumb_func_start nullsub_64
nullsub_64: @ 0x08079F20
	bx lr
	.align 2, 0

	thumb_func_start nullsub_65
nullsub_65: @ 0x08079F24
	bx lr
	.align 2, 0

	thumb_func_start nullsub_66
nullsub_66: @ 0x08079F28
	bx lr
	.align 2, 0

	thumb_func_start nullsub_67
nullsub_67: @ 0x08079F2C
	bx lr
	.align 2, 0

	thumb_func_start nullsub_68
nullsub_68: @ 0x08079F30
	bx lr
	.align 2, 0

	thumb_func_start sub_08079F34
sub_08079F34: @ 0x08079F34
	adds r3, r0, #0
	cmp r3, #0
	beq _08079F5C
	subs r3, #1
	ldr r1, _08079F60 @ =0x030049F8
	adds r0, r3, #0
	cmp r3, #0
	bge _08079F46
	adds r0, r3, #7
_08079F46:
	asrs r0, r0, #3
	adds r2, r0, r1
	ldr r1, _08079F64 @ =0x08D66A2C
	lsls r0, r0, #3
	subs r0, r3, r0
	adds r0, r0, r1
	ldrb r1, [r2]
	ldrb r0, [r0]
	orrs r1, r0
	adds r0, r1, #0
	strb r0, [r2]
_08079F5C:
	bx lr
	.align 2, 0
_08079F60: .4byte 0x030049F8
_08079F64: .4byte 0x08D66A2C

	thumb_func_start sub_08079F68
sub_08079F68: @ 0x08079F68
	adds r3, r0, #0
	cmp r3, #0
	beq _08079F92
	subs r3, #1
	ldr r1, _08079F98 @ =0x030049F8
	adds r0, r3, #0
	cmp r3, #0
	bge _08079F7A
	adds r0, r3, #7
_08079F7A:
	asrs r0, r0, #3
	adds r2, r0, r1
	ldr r1, _08079F9C @ =0x08D66A2C
	lsls r0, r0, #3
	subs r0, r3, r0
	adds r0, r0, r1
	ldrb r2, [r2]
	ldrb r0, [r0]
	ands r2, r0
	adds r0, r2, #0
	cmp r0, #0
	bne _08079FA0
_08079F92:
	movs r0, #0
	b _08079FA2
	.align 2, 0
_08079F98: .4byte 0x030049F8
_08079F9C: .4byte 0x08D66A2C
_08079FA0:
	movs r0, #1
_08079FA2:
	bx lr

	thumb_func_start sub_08079FA4
sub_08079FA4: @ 0x08079FA4
	adds r2, r0, #0
	cmp r2, #0
	beq _08079FD2
	subs r2, #1
	ldr r3, _08079FD4 @ =0x08D66A2C
	adds r1, r2, #0
	cmp r2, #0
	bge _08079FB6
	adds r1, r2, #7
_08079FB6:
	asrs r1, r1, #3
	lsls r0, r1, #3
	subs r0, r2, r0
	adds r0, r0, r3
	ldrb r0, [r0]
	mvns r0, r0
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	ldr r0, _08079FD8 @ =0x030049F8
	adds r1, r1, r0
	adds r0, r3, #0
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
_08079FD2:
	bx lr
	.align 2, 0
_08079FD4: .4byte 0x08D66A2C
_08079FD8: .4byte 0x030049F8

	thumb_func_start sub_08079FDC
sub_08079FDC: @ 0x08079FDC
	ldr r1, _08079FEC @ =0x030049F8
	movs r2, #0
	adds r0, r1, #5
_08079FE2:
	strb r2, [r0]
	subs r0, #1
	cmp r0, r1
	bge _08079FE2
	bx lr
	.align 2, 0
_08079FEC: .4byte 0x030049F8

	thumb_func_start sub_08079FF0
sub_08079FF0: @ 0x08079FF0
	adds r3, r0, #0
	cmp r3, #0x63
	ble _0807A01C
	cmp r3, #0x64
	beq _0807A01C
	subs r3, #0x65
	ldr r1, _0807A020 @ =0x030049F0
	adds r0, r3, #0
	cmp r3, #0
	bge _0807A006
	adds r0, r3, #7
_0807A006:
	asrs r0, r0, #3
	adds r2, r0, r1
	ldr r1, _0807A024 @ =0x08D66A2C
	lsls r0, r0, #3
	subs r0, r3, r0
	adds r0, r0, r1
	ldrb r1, [r2]
	ldrb r0, [r0]
	orrs r1, r0
	adds r0, r1, #0
	strb r0, [r2]
_0807A01C:
	bx lr
	.align 2, 0
_0807A020: .4byte 0x030049F0
_0807A024: .4byte 0x08D66A2C

	thumb_func_start sub_0807A028
sub_0807A028: @ 0x0807A028
	adds r3, r0, #0
	cmp r3, #0x64
	ble _0807A052
	subs r3, #0x65
	ldr r1, _0807A058 @ =0x030049F0
	adds r0, r3, #0
	cmp r3, #0
	bge _0807A03A
	adds r0, r3, #7
_0807A03A:
	asrs r0, r0, #3
	adds r2, r0, r1
	ldr r1, _0807A05C @ =0x08D66A2C
	lsls r0, r0, #3
	subs r0, r3, r0
	adds r0, r0, r1
	ldrb r2, [r2]
	ldrb r0, [r0]
	ands r2, r0
	adds r0, r2, #0
	cmp r0, #0
	bne _0807A060
_0807A052:
	movs r0, #0
	b _0807A062
	.align 2, 0
_0807A058: .4byte 0x030049F0
_0807A05C: .4byte 0x08D66A2C
_0807A060:
	movs r0, #1
_0807A062:
	bx lr

	thumb_func_start sub_0807A064
sub_0807A064: @ 0x0807A064
	adds r2, r0, #0
	cmp r2, #0x63
	ble _0807A096
	cmp r2, #0x64
	beq _0807A096
	subs r2, #0x65
	ldr r3, _0807A098 @ =0x08D66A2C
	adds r1, r2, #0
	cmp r2, #0
	bge _0807A07A
	adds r1, r2, #7
_0807A07A:
	asrs r1, r1, #3
	lsls r0, r1, #3
	subs r0, r2, r0
	adds r0, r0, r3
	ldrb r0, [r0]
	mvns r0, r0
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	ldr r0, _0807A09C @ =0x030049F0
	adds r1, r1, r0
	adds r0, r3, #0
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
_0807A096:
	bx lr
	.align 2, 0
_0807A098: .4byte 0x08D66A2C
_0807A09C: .4byte 0x030049F0

	thumb_func_start sub_0807A0A0
sub_0807A0A0: @ 0x0807A0A0
	ldr r1, _0807A0B0 @ =0x030049F0
	movs r2, #0
	adds r0, r1, #7
_0807A0A6:
	strb r2, [r0]
	subs r0, #1
	cmp r0, r1
	bge _0807A0A6
	bx lr
	.align 2, 0
_0807A0B0: .4byte 0x030049F0

	thumb_func_start sub_0807A0B4
sub_0807A0B4: @ 0x0807A0B4
	push {lr}
	cmp r0, #0x63
	bgt _0807A0C0
	bl sub_08079F34
	b _0807A0C4
_0807A0C0:
	bl sub_08079FF0
_0807A0C4:
	pop {r0}
	bx r0

	thumb_func_start sub_0807A0C8
sub_0807A0C8: @ 0x0807A0C8
	push {lr}
	cmp r0, #0x63
	ble _0807A0D4
	bl sub_0807A028
	b _0807A0D8
_0807A0D4:
	bl sub_08079F68
_0807A0D8:
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A0E0
sub_0807A0E0: @ 0x0807A0E0
	push {lr}
	cmp r0, #0x63
	bgt _0807A0EC
	bl sub_08079FA4
	b _0807A0F0
_0807A0EC:
	bl sub_0807A064
_0807A0F0:
	pop {r0}
	bx r0

	thumb_func_start sub_0807A0F4
sub_0807A0F4: @ 0x0807A0F4
	ldr r0, _0807A0F8 @ =0x030049F0
	bx lr
	.align 2, 0
_0807A0F8: .4byte 0x030049F0

	thumb_func_start sub_0807A0FC
sub_0807A0FC: @ 0x0807A0FC
	movs r0, #8
	bx lr

	thumb_func_start sub_0807A100
sub_0807A100: @ 0x0807A100
	ldr r0, _0807A104 @ =0x030049F8
	bx lr
	.align 2, 0
_0807A104: .4byte 0x030049F8

	thumb_func_start sub_0807A108
sub_0807A108: @ 0x0807A108
	movs r0, #6
	bx lr

	thumb_func_start sub_0807A10C
sub_0807A10C: @ 0x0807A10C
	ldr r1, _0807A11C @ =gPlaySt
	movs r0, #0x40
	ldrb r1, [r1, #0x14]
	ands r0, r1
	cmp r0, #0
	bne _0807A120
	movs r0, #0
	b _0807A122
	.align 2, 0
_0807A11C: .4byte gPlaySt
_0807A120:
	movs r0, #1
_0807A122:
	bx lr

	thumb_func_start sub_0807A124
sub_0807A124: @ 0x0807A124
	push {r4, lr}
	adds r2, r0, #0
	ldr r1, _0807A14C @ =0x08D68388
	ldrb r0, [r1]
	cmp r0, #0
	beq _0807A158
	ldr r0, [r2]
	ldrb r3, [r0, #4]
	movs r4, #0x80
	lsls r4, r4, #9
_0807A138:
	ldrb r0, [r1, #1]
	cmp r3, r0
	bne _0807A150
	ldr r0, [r2, #0xc]
	ands r0, r4
	cmp r0, #0
	beq _0807A150
	movs r0, #1
	b _0807A15A
	.align 2, 0
_0807A14C: .4byte 0x08D68388
_0807A150:
	adds r1, #8
	ldrb r0, [r1]
	cmp r0, #0
	bne _0807A138
_0807A158:
	movs r0, #0
_0807A15A:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_0807A160
sub_0807A160: @ 0x0807A160
	push {lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r2, _0807A16C @ =0x08D6792C
	b _0807A17A
	.align 2, 0
_0807A16C: .4byte 0x08D6792C
_0807A170:
	cmp r1, r0
	bne _0807A178
	ldr r0, [r2, #4]
	b _0807A18E
_0807A178:
	adds r2, #8
_0807A17A:
	ldrb r1, [r2]
	cmp r1, #0
	bne _0807A170
	ldr r0, _0807A194 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetROMChapterStruct
	ldrb r0, [r0, #0x14]
_0807A18E:
	pop {r1}
	bx r1
	.align 2, 0
_0807A194: .4byte gPlaySt

	thumb_func_start sub_0807A198
sub_0807A198: @ 0x0807A198
	push {r4, r5, lr}
	ldr r1, _0807A1E0 @ =gPlaySt
	movs r0, #0x40
	ldrb r2, [r1, #0x14]
	ands r0, r2
	cmp r0, #0
	beq _0807A1D8
	ldrb r1, [r1, #0x1b]
	cmp r1, #3
	bne _0807A1D8
	movs r5, #0x81
_0807A1AE:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _0807A1D2
	ldr r0, [r4]
	cmp r0, #0
	beq _0807A1D2
	ldrb r0, [r0, #4]
	bl sub_0807A160
	adds r1, r0, #0
	cmp r1, #0
	beq _0807A1D2
	adds r0, r4, #0
	bl UnitApplyBonusLevels
_0807A1D2:
	adds r5, #1
	cmp r5, #0xbf
	ble _0807A1AE
_0807A1D8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807A1E0: .4byte gPlaySt

	thumb_func_start sub_0807A1E4
sub_0807A1E4: @ 0x0807A1E4
	ldr r1, _0807A1EC @ =0x08D68478
	ldr r0, [r0]
	ldrb r2, [r0, #4]
	b _0807A1FC
	.align 2, 0
_0807A1EC: .4byte 0x08D68478
_0807A1F0:
	ldrb r0, [r1]
	cmp r0, r2
	bne _0807A1FA
	movs r0, #1
	b _0807A204
_0807A1FA:
	adds r1, #1
_0807A1FC:
	ldrb r0, [r1]
	cmp r0, #0
	bne _0807A1F0
	movs r0, #0
_0807A204:
	bx lr
	.align 2, 0

	thumb_func_start sub_0807A208
sub_0807A208: @ 0x0807A208
	push {lr}
	ldr r0, _0807A228 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl sub_08031AEC
	ldr r0, [r0, #0x3c]
	bl sub_0800AE98
	movs r0, #0x91
	bl sub_0807A0B4
	pop {r0}
	bx r0
	.align 2, 0
_0807A228: .4byte gPlaySt

	thumb_func_start sub_0807A22C
sub_0807A22C: @ 0x0807A22C
	push {r4, lr}
	movs r4, #0
	ldr r1, _0807A25C @ =gPlaySt
	movs r0, #0x40
	ldrb r1, [r1, #0x14]
	ands r0, r1
	cmp r0, #0
	bne _0807A254
	bl sub_0807AE5C
	cmp r0, #0
	bne _0807A254
	movs r0, #0x9c
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	rsbs r1, r0, #0
	orrs r1, r0
	lsrs r4, r1, #0x1f
_0807A254:
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0807A25C: .4byte gPlaySt

	thumb_func_start sub_0807A260
sub_0807A260: @ 0x0807A260
	push {lr}
	movs r0, #0x8f
	bl sub_0807A0B4
	pop {r0}
	bx r0

	thumb_func_start sub_0807A26C
sub_0807A26C: @ 0x0807A26C
	push {lr}
	movs r0, #0x8f
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0807A27E
	movs r0, #0
	b _0807A280
_0807A27E:
	movs r0, #1
_0807A280:
	pop {r1}
	bx r1

	thumb_func_start sub_0807A284
sub_0807A284: @ 0x0807A284
	push {r4, r5, r6, lr}
	sub sp, #0x20
	movs r6, #0
	movs r5, #0
	ldr r1, _0807A2D4 @ =0x08D68480
	ldr r0, [r1, #0xc]
	cmp r0, #0
	beq _0807A2B8
	adds r4, r1, #0
	adds r4, #0xc
_0807A298:
	ldr r0, [r4]
	bl _call_via_r0
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0807A2AE
	mov r1, sp
	adds r0, r1, r5
	strb r6, [r0]
	adds r5, #1
_0807A2AE:
	adds r4, #0x18
	adds r6, #1
	ldr r0, [r4]
	cmp r0, #0
	bne _0807A298
_0807A2B8:
	cmp r5, #0
	beq _0807A2D8
	bl GetGameTime
	adds r1, r0, #0
	movs r0, #0x3f
	ands r0, r1
	adds r1, r5, #0
	bl __umodsi3
	add r0, sp
	ldrb r0, [r0]
	b _0807A2DA
	.align 2, 0
_0807A2D4: .4byte 0x08D68480
_0807A2D8:
	movs r0, #0xff
_0807A2DA:
	add sp, #0x20
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807A2E4
sub_0807A2E4: @ 0x0807A2E4
	push {r4, r5, r6, lr}
	sub sp, #0x20
	movs r6, #0
	movs r5, #0
	ldr r1, _0807A334 @ =0x08D68498
	ldr r0, [r1, #0xc]
	cmp r0, #0
	beq _0807A318
	adds r4, r1, #0
	adds r4, #0xc
_0807A2F8:
	ldr r0, [r4]
	bl _call_via_r0
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0807A30E
	mov r1, sp
	adds r0, r1, r5
	strb r6, [r0]
	adds r5, #1
_0807A30E:
	adds r4, #0x18
	adds r6, #1
	ldr r0, [r4]
	cmp r0, #0
	bne _0807A2F8
_0807A318:
	cmp r5, #0
	beq _0807A338
	bl GetGameTime
	adds r1, r0, #0
	movs r0, #0x3f
	ands r0, r1
	adds r1, r5, #0
	bl __umodsi3
	add r0, sp
	ldrb r0, [r0]
	b _0807A33A
	.align 2, 0
_0807A334: .4byte 0x08D68498
_0807A338:
	movs r0, #0xff
_0807A33A:
	add sp, #0x20
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807A344
sub_0807A344: @ 0x0807A344
	push {r4, r5, r6, lr}
	sub sp, #0x20
	movs r6, #0
	movs r5, #0
	ldr r1, _0807A394 @ =0x08D684B0
	ldr r0, [r1, #0xc]
	cmp r0, #0
	beq _0807A378
	adds r4, r1, #0
	adds r4, #0xc
_0807A358:
	ldr r0, [r4]
	bl _call_via_r0
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0807A36E
	mov r1, sp
	adds r0, r1, r5
	strb r6, [r0]
	adds r5, #1
_0807A36E:
	adds r4, #0x18
	adds r6, #1
	ldr r0, [r4]
	cmp r0, #0
	bne _0807A358
_0807A378:
	cmp r5, #0
	beq _0807A398
	bl GetGameTime
	adds r1, r0, #0
	movs r0, #0x3f
	ands r0, r1
	adds r1, r5, #0
	bl __umodsi3
	add r0, sp
	ldrb r0, [r0]
	b _0807A39A
	.align 2, 0
_0807A394: .4byte 0x08D684B0
_0807A398:
	movs r0, #0xff
_0807A39A:
	add sp, #0x20
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807A3A4
sub_0807A3A4: @ 0x0807A3A4
	push {r4, lr}
	movs r4, #0
	ldr r1, _0807A3D8 @ =0x08D684B0
	ldr r0, [r1, #0xc]
	cmp r0, #0
	beq _0807A3BC
	adds r1, #0xc
_0807A3B2:
	adds r1, #0x18
	adds r4, #1
	ldr r0, [r1]
	cmp r0, #0
	bne _0807A3B2
_0807A3BC:
	bl GetGameTime
	movs r1, #0xf
	ands r1, r0
	adds r0, r1, #0
	adds r1, r4, #0
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0807A3D8: .4byte 0x08D684B0

	thumb_func_start sub_0807A3DC
sub_0807A3DC: @ 0x0807A3DC
	push {r4, lr}
	movs r4, #0
	ldr r1, _0807A410 @ =0x08D684B0
	ldr r0, [r1, #0xc]
	cmp r0, #0
	beq _0807A3F4
	adds r1, #0xc
_0807A3EA:
	adds r1, #0x18
	adds r4, #1
	ldr r0, [r1]
	cmp r0, #0
	bne _0807A3EA
_0807A3F4:
	bl GetGameTime
	lsrs r0, r0, #1
	movs r1, #0xf
	ands r0, r1
	adds r1, r4, #0
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0807A410: .4byte 0x08D684B0

	thumb_func_start sub_0807A414
sub_0807A414: @ 0x0807A414
	push {r4, lr}
	movs r4, #0
	ldr r1, _0807A448 @ =0x08D684B0
	ldr r0, [r1, #0xc]
	cmp r0, #0
	beq _0807A42C
	adds r1, #0xc
_0807A422:
	adds r1, #0x18
	adds r4, #1
	ldr r0, [r1]
	cmp r0, #0
	bne _0807A422
_0807A42C:
	bl GetGameTime
	lsrs r0, r0, #2
	movs r1, #0xf
	ands r0, r1
	adds r1, r4, #0
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0807A448: .4byte 0x08D684B0

	thumb_func_start sub_0807A44C
sub_0807A44C: @ 0x0807A44C
	push {r4, r5, lr}
	movs r4, #0
	movs r5, #1
_0807A452:
	adds r0, r5, #0
	bl GetUnit
	cmp r0, #0
	beq _0807A47A
	ldr r2, [r0]
	cmp r2, #0
	beq _0807A47A
	ldr r0, [r0, #0xc]
	ldr r1, _0807A488 @ =0x00010004
	ands r0, r1
	cmp r0, #0
	bne _0807A47A
	ldrb r0, [r2, #4]
	cmp r0, #0x14
	bne _0807A474
	adds r4, #1
_0807A474:
	cmp r0, #0x24
	bne _0807A47A
	adds r4, #1
_0807A47A:
	adds r5, #1
	cmp r5, #0x3f
	ble _0807A452
	cmp r4, #2
	beq _0807A48C
	movs r0, #0
	b _0807A48E
	.align 2, 0
_0807A488: .4byte 0x00010004
_0807A48C:
	movs r0, #1
_0807A48E:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_0807A494
sub_0807A494: @ 0x0807A494
	push {r4, lr}
	movs r4, #1
_0807A498:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _0807A4C0
	ldr r2, [r0]
	cmp r2, #0
	beq _0807A4C0
	ldr r0, [r0, #0xc]
	ldr r1, _0807A4BC @ =0x00010004
	ands r0, r1
	cmp r0, #0
	bne _0807A4C0
	ldrb r2, [r2, #4]
	cmp r2, #5
	bne _0807A4C0
	movs r0, #1
	b _0807A4C8
	.align 2, 0
_0807A4BC: .4byte 0x00010004
_0807A4C0:
	adds r4, #1
	cmp r4, #0x3f
	ble _0807A498
	movs r0, #0
_0807A4C8:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807A4D0
sub_0807A4D0: @ 0x0807A4D0
	movs r0, #1
	bx lr

	thumb_func_start sub_0807A4D4
sub_0807A4D4: @ 0x0807A4D4
	movs r0, #0
	bx lr

	thumb_func_start sub_0807A4D8
sub_0807A4D8: @ 0x0807A4D8
	movs r0, #0
	bx lr

	thumb_func_start sub_0807A4DC
sub_0807A4DC: @ 0x0807A4DC
	movs r0, #0
	bx lr

	thumb_func_start sub_0807A4E0
sub_0807A4E0: @ 0x0807A4E0
	movs r0, #0
	bx lr

	thumb_func_start sub_0807A4E4
sub_0807A4E4: @ 0x0807A4E4
	movs r0, #0
	bx lr

	thumb_func_start sub_0807A4E8
sub_0807A4E8: @ 0x0807A4E8
	movs r0, #0
	bx lr

	thumb_func_start sub_0807A4EC
sub_0807A4EC: @ 0x0807A4EC
	movs r0, #0
	bx lr

	thumb_func_start sub_0807A4F0
sub_0807A4F0: @ 0x0807A4F0
	movs r0, #0
	bx lr

	thumb_func_start sub_0807A4F4
sub_0807A4F4: @ 0x0807A4F4
	movs r0, #0
	bx lr

	thumb_func_start sub_0807A4F8
sub_0807A4F8: @ 0x0807A4F8
	movs r0, #0
	bx lr

	thumb_func_start sub_0807A4FC
sub_0807A4FC: @ 0x0807A4FC
	movs r0, #0
	bx lr

	thumb_func_start sub_0807A500
sub_0807A500: @ 0x0807A500
	movs r0, #0
	bx lr

	thumb_func_start sub_0807A504
sub_0807A504: @ 0x0807A504
	movs r0, #0
	bx lr

	thumb_func_start sub_0807A508
sub_0807A508: @ 0x0807A508
	movs r0, #0
	bx lr

	thumb_func_start sub_0807A50C
sub_0807A50C: @ 0x0807A50C
	movs r0, #0
	bx lr

	thumb_func_start sub_0807A510
sub_0807A510: @ 0x0807A510
	movs r0, #0
	bx lr

	thumb_func_start sub_0807A514
sub_0807A514: @ 0x0807A514
	movs r0, #0
	bx lr

	thumb_func_start sub_0807A518
sub_0807A518: @ 0x0807A518
	movs r0, #0
	bx lr

	thumb_func_start sub_0807A51C
sub_0807A51C: @ 0x0807A51C
	movs r0, #0
	bx lr

	thumb_func_start sub_0807A520
sub_0807A520: @ 0x0807A520
	movs r0, #0
	bx lr

	thumb_func_start sub_0807A524
sub_0807A524: @ 0x0807A524
	movs r0, #0
	bx lr

	thumb_func_start sub_0807A528
sub_0807A528: @ 0x0807A528
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #0x81
_0807A52E:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0807A54C
	ldr r0, [r1]
	cmp r0, #0
	beq _0807A54C
	ldr r0, [r1, #0xc]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	bne _0807A54C
	adds r5, #1
_0807A54C:
	adds r4, #1
	cmp r4, #0xbf
	ble _0807A52E
	cmp r5, #3
	ble _0807A55A
	movs r0, #0
	b _0807A55C
_0807A55A:
	movs r0, #1
_0807A55C:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807A564
sub_0807A564: @ 0x0807A564
	movs r0, #0
	bx lr

	thumb_func_start sub_0807A568
sub_0807A568: @ 0x0807A568
	push {lr}
	bl sub_0808667C
	ldr r0, _0807A58C @ =gPlaySt
	movs r1, #2
	ldrb r0, [r0, #0x1b]
	cmp r0, #2
	bne _0807A57A
	movs r1, #1
_0807A57A:
	adds r0, r1, #0
	bl GetUnitFromCharId
	movs r1, #0
	bl sub_0802D148
	pop {r0}
	bx r0
	.align 2, 0
_0807A58C: .4byte gPlaySt

	thumb_func_start sub_0807A590
sub_0807A590: @ 0x0807A590
	push {r4, lr}
	movs r4, #1
_0807A594:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _0807A5C2
	ldr r3, [r2]
	cmp r3, #0
	beq _0807A5C2
	ldr r0, [r2, #0xc]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	bne _0807A5C2
	ldrb r3, [r3, #4]
	cmp r3, #0x28
	bne _0807A5C2
	movs r0, #8
	ldrsb r0, [r2, r0]
	cmp r0, #0x13
	ble _0807A5C8
	movs r0, #1
	b _0807A5CA
_0807A5C2:
	adds r4, #1
	cmp r4, #0x3f
	ble _0807A594
_0807A5C8:
	movs r0, #0
_0807A5CA:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_0807A5D0
sub_0807A5D0: @ 0x0807A5D0
	push {r4, lr}
	bl sub_0807A620
	movs r4, #1
_0807A5D8:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _0807A614
	ldr r3, [r2]
	cmp r3, #0
	beq _0807A614
	ldr r1, [r2, #0xc]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	bne _0807A614
	ldr r0, _0807A610 @ =0x0001000C
	ands r1, r0
	cmp r1, #0
	bne _0807A614
	ldrb r3, [r3, #4]
	cmp r3, #0x28
	bne _0807A614
	adds r0, r2, #0
	bl UnitLevelUp
	movs r0, #0x90
	bl sub_0807A0B4
	b _0807A61A
	.align 2, 0
_0807A610: .4byte 0x0001000C
_0807A614:
	adds r4, #1
	cmp r4, #0x3f
	ble _0807A5D8
_0807A61A:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0807A620
sub_0807A620: @ 0x0807A620
	push {r4, lr}
	movs r0, #0
	bl GetTrap
	adds r4, r0, #0
	b _0807A63A
_0807A62C:
	cmp r0, #0xc
	bne _0807A638
	adds r0, r4, #0
	bl sub_0802C6DC
	subs r4, #8
_0807A638:
	adds r4, #8
_0807A63A:
	ldrb r0, [r4, #2]
	cmp r0, #0
	bne _0807A62C
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807A648
sub_0807A648: @ 0x0807A648
	push {lr}
	movs r0, #0xfe
	bl SoftReset
	pop {r0}
	bx r0

	thumb_func_start sub_0807A654
sub_0807A654: @ 0x0807A654
	ldr r0, _0807A668 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	bne _0807A66C
	movs r0, #1
	b _0807A66E
	.align 2, 0
_0807A668: .4byte gpKeySt
_0807A66C:
	movs r0, #0
_0807A66E:
	bx lr

	thumb_func_start sub_0807A670
sub_0807A670: @ 0x0807A670
	push {lr}
	movs r0, #0xfe
	bl SoftReset
	pop {r0}
	bx r0

	thumb_func_start sub_0807A67C
sub_0807A67C: @ 0x0807A67C
	ldr r0, _0807A690 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	bne _0807A694
	movs r0, #0
	b _0807A696
	.align 2, 0
_0807A690: .4byte gpKeySt
_0807A694:
	movs r0, #1
_0807A696:
	bx lr

	thumb_func_start sub_0807A698
sub_0807A698: @ 0x0807A698
	push {lr}
	movs r0, #0
	bl sub_0801DEFC
	pop {r0}
	bx r0

	thumb_func_start sub_0807A6A4
sub_0807A6A4: @ 0x0807A6A4
	push {lr}
	bl GetGold
	ldr r1, _0807A6B8 @ =0x00001388
	adds r0, r0, r1
	bl SetGold
	pop {r0}
	bx r0
	.align 2, 0
_0807A6B8: .4byte 0x00001388

	thumb_func_start sub_0807A6BC
sub_0807A6BC: @ 0x0807A6BC
	push {r4, lr}
	adds r4, r0, #0
	bl GetGold
	cmp r0, r4
	blt _0807A6D2
	bl GetGold
	subs r0, r0, r4
	bl SetGold
_0807A6D2:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0807A6D8
sub_0807A6D8: @ 0x0807A6D8
	adds r1, r0, #0
	ldrb r2, [r1, #0x12]
	movs r0, #0x12
	ldrsb r0, [r1, r0]
	cmp r0, #0
	ble _0807A6E8
	subs r0, r2, #1
	strb r0, [r1, #0x12]
_0807A6E8:
	ldrb r2, [r1, #0x14]
	movs r0, #0x14
	ldrsb r0, [r1, r0]
	cmp r0, #0
	ble _0807A6F6
	subs r0, r2, #1
	strb r0, [r1, #0x14]
_0807A6F6:
	ldrb r2, [r1, #0x15]
	movs r0, #0x15
	ldrsb r0, [r1, r0]
	cmp r0, #0
	ble _0807A704
	subs r0, r2, #1
	strb r0, [r1, #0x15]
_0807A704:
	ldrb r2, [r1, #0x16]
	movs r0, #0x16
	ldrsb r0, [r1, r0]
	cmp r0, #0
	ble _0807A712
	subs r0, r2, #1
	strb r0, [r1, #0x16]
_0807A712:
	ldrb r2, [r1, #0x17]
	movs r0, #0x17
	ldrsb r0, [r1, r0]
	cmp r0, #0
	ble _0807A720
	subs r0, r2, #1
	strb r0, [r1, #0x17]
_0807A720:
	ldrb r2, [r1, #0x18]
	movs r0, #0x18
	ldrsb r0, [r1, r0]
	cmp r0, #0
	ble _0807A72E
	subs r0, r2, #1
	strb r0, [r1, #0x18]
_0807A72E:
	ldrb r2, [r1, #0x19]
	movs r0, #0x19
	ldrsb r0, [r1, r0]
	cmp r0, #0
	ble _0807A73C
	subs r0, r2, #1
	strb r0, [r1, #0x19]
_0807A73C:
	bx lr
	.align 2, 0

	thumb_func_start sub_0807A740
sub_0807A740: @ 0x0807A740
	push {lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl GetUnitFromCharId
	bl sub_0807A6D8
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807A754
sub_0807A754: @ 0x0807A754
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	movs r4, #1
_0807A75C:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _0807A784
	ldr r2, [r0]
	cmp r2, #0
	beq _0807A784
	ldr r0, [r0, #0xc]
	ldr r1, _0807A780 @ =0x0001000C
	ands r0, r1
	cmp r0, #0
	bne _0807A784
	ldrb r2, [r2, #4]
	cmp r2, r5
	bne _0807A784
	movs r0, #1
	b _0807A78C
	.align 2, 0
_0807A780: .4byte 0x0001000C
_0807A784:
	adds r4, #1
	cmp r4, #0x3f
	ble _0807A75C
	movs r0, #0
_0807A78C:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807A794
sub_0807A794: @ 0x0807A794
	push {lr}
	movs r0, #9
	bl sub_0807A754
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A7A4
sub_0807A7A4: @ 0x0807A7A4
	push {lr}
	movs r0, #0x28
	bl sub_0807A754
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A7B4
sub_0807A7B4: @ 0x0807A7B4
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	movs r4, #1
_0807A7BC:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _0807A7E0
	ldr r2, [r0]
	cmp r2, #0
	beq _0807A7E0
	ldr r0, [r0, #0xc]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	bne _0807A7E0
	ldrb r2, [r2, #4]
	cmp r2, r5
	bne _0807A7E0
	movs r0, #1
	b _0807A7E8
_0807A7E0:
	adds r4, #1
	cmp r4, #0x3f
	ble _0807A7BC
	movs r0, #0
_0807A7E8:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807A7F0
sub_0807A7F0: @ 0x0807A7F0
	push {lr}
	movs r0, #0x1a
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A800
sub_0807A800: @ 0x0807A800
	push {lr}
	movs r0, #0xe
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A810
sub_0807A810: @ 0x0807A810
	push {lr}
	movs r0, #0x28
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A820
sub_0807A820: @ 0x0807A820
	push {lr}
	movs r0, #0x25
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A830
sub_0807A830: @ 0x0807A830
	push {lr}
	movs r0, #0x23
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A840
sub_0807A840: @ 0x0807A840
	push {lr}
	movs r0, #0x14
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A850
sub_0807A850: @ 0x0807A850
	push {lr}
	movs r0, #0x24
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A860
sub_0807A860: @ 0x0807A860
	push {lr}
	movs r0, #0x1b
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A870
sub_0807A870: @ 0x0807A870
	push {lr}
	movs r0, #8
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A880
sub_0807A880: @ 0x0807A880
	push {lr}
	movs r0, #0x11
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A890
sub_0807A890: @ 0x0807A890
	push {lr}
	movs r0, #0x13
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A8A0
sub_0807A8A0: @ 0x0807A8A0
	push {lr}
	movs r0, #0x1c
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A8B0
sub_0807A8B0: @ 0x0807A8B0
	push {lr}
	movs r0, #0x17
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A8C0
sub_0807A8C0: @ 0x0807A8C0
	push {lr}
	movs r0, #0x2f
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A8D0
sub_0807A8D0: @ 0x0807A8D0
	push {lr}
	movs r0, #0x18
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A8E0
sub_0807A8E0: @ 0x0807A8E0
	push {lr}
	movs r0, #0x30
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A8F0
sub_0807A8F0: @ 0x0807A8F0
	push {lr}
	movs r0, #0xd
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A900
sub_0807A900: @ 0x0807A900
	push {lr}
	movs r0, #0x2e
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A910
sub_0807A910: @ 0x0807A910
	push {lr}
	movs r0, #0x1d
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A920
sub_0807A920: @ 0x0807A920
	push {lr}
	movs r0, #0x31
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A930
sub_0807A930: @ 0x0807A930
	push {lr}
	movs r0, #0x33
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A940
sub_0807A940: @ 0x0807A940
	push {lr}
	movs r0, #0x15
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A950
sub_0807A950: @ 0x0807A950
	push {lr}
	movs r0, #0xf
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A960
sub_0807A960: @ 0x0807A960
	push {lr}
	movs r0, #0x36
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A970
sub_0807A970: @ 0x0807A970
	push {lr}
	movs r0, #0x22
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A980
sub_0807A980: @ 0x0807A980
	push {lr}
	movs r0, #0x27
	bl sub_0807A7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A990
sub_0807A990: @ 0x0807A990
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	movs r4, #1
_0807A998:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _0807A9B2
	ldr r0, [r0]
	cmp r0, #0
	beq _0807A9B2
	ldrb r0, [r0, #4]
	cmp r0, r5
	bne _0807A9B2
	movs r0, #1
	b _0807A9BA
_0807A9B2:
	adds r4, #1
	cmp r4, #0x3f
	ble _0807A998
	movs r0, #0
_0807A9BA:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_0807A9C0
sub_0807A9C0: @ 0x0807A9C0
	push {lr}
	movs r0, #0x11
	bl sub_0807A990
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A9D0
sub_0807A9D0: @ 0x0807A9D0
	push {lr}
	movs r0, #0x13
	bl sub_0807A990
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A9E0
sub_0807A9E0: @ 0x0807A9E0
	push {lr}
	movs r0, #0x1b
	bl sub_0807A990
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807A9F0
sub_0807A9F0: @ 0x0807A9F0
	push {r4, lr}
	movs r4, #0x81
_0807A9F4:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0807AA14
	ldr r0, [r1]
	cmp r0, #0
	beq _0807AA14
	ldr r0, [r1, #0xc]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	bne _0807AA14
	movs r0, #1
	b _0807AA1C
_0807AA14:
	adds r4, #1
	cmp r4, #0xbf
	ble _0807A9F4
	movs r0, #0
_0807AA1C:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807AA24
sub_0807AA24: @ 0x0807AA24
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #0x81
_0807AA2A:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0807AA4C
	ldr r0, [r1]
	cmp r0, #0
	beq _0807AA4C
	ldr r0, [r1, #0xc]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	bne _0807AA4C
	adds r0, r5, #1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
_0807AA4C:
	adds r4, #1
	cmp r4, #0xbf
	ble _0807AA2A
	adds r0, r5, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807AA5C
sub_0807AA5C: @ 0x0807AA5C
	push {lr}
	bl sub_0807A9F0
	movs r1, #0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0807AA6C
	movs r1, #1
_0807AA6C:
	adds r0, r1, #0
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807AA74
sub_0807AA74: @ 0x0807AA74
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	movs r4, #0x41
_0807AA7C:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _0807AAA0
	ldr r2, [r0]
	cmp r2, #0
	beq _0807AAA0
	ldr r0, [r0, #0xc]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	bne _0807AAA0
	ldrb r2, [r2, #4]
	cmp r2, r5
	bne _0807AAA0
	movs r0, #1
	b _0807AAA8
_0807AAA0:
	adds r4, #1
	cmp r4, #0xbf
	ble _0807AA7C
	movs r0, #0
_0807AAA8:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807AAB0
sub_0807AAB0: @ 0x0807AAB0
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #1
_0807AAB6:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0807AADC
	ldr r0, [r1]
	cmp r0, #0
	beq _0807AADC
	ldr r1, [r1, #0xc]
	movs r0, #0xc
	ands r0, r1
	cmp r0, #0
	bne _0807AADC
	movs r0, #2
	ands r1, r0
	cmp r1, #0
	bne _0807AADC
	adds r5, #1
_0807AADC:
	adds r4, #1
	cmp r4, #0x3f
	ble _0807AAB6
	adds r0, r5, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807AAEC
sub_0807AAEC: @ 0x0807AAEC
	push {r4, lr}
	movs r4, #0x41
_0807AAF0:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0807AB10
	ldr r0, [r1]
	cmp r0, #0
	beq _0807AB10
	ldr r0, [r1, #0xc]
	movs r1, #2
	ands r0, r1
	cmp r0, #0
	bne _0807AB10
	movs r0, #0
	b _0807AB18
_0807AB10:
	adds r4, #1
	cmp r4, #0x7f
	ble _0807AAF0
	movs r0, #1
_0807AB18:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807AB20
sub_0807AB20: @ 0x0807AB20
	push {lr}
	movs r0, #0x45
	bl sub_0807AA74
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807AB30
sub_0807AB30: @ 0x0807AB30
	push {lr}
	movs r0, #0x3b
	bl sub_0807AA74
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807AB40
sub_0807AB40: @ 0x0807AB40
	push {lr}
	movs r0, #0x7f
	bl sub_0807AA74
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807AB50
sub_0807AB50: @ 0x0807AB50
	push {lr}
	movs r0, #0x80
	bl sub_0807AA74
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807AB60
sub_0807AB60: @ 0x0807AB60
	push {lr}
	movs r0, #0x81
	bl sub_0807AA74
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807AB70
sub_0807AB70: @ 0x0807AB70
	push {lr}
	movs r0, #0x82
	bl sub_0807AA74
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807AB80
sub_0807AB80: @ 0x0807AB80
	push {lr}
	movs r0, #0x24
	bl sub_0807AA74
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807AB90
sub_0807AB90: @ 0x0807AB90
	push {lr}
	movs r0, #0x20
	bl sub_0807AA74
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807ABA0
sub_0807ABA0: @ 0x0807ABA0
	push {lr}
	movs r0, #0x2b
	bl sub_0807AA74
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807ABB0
sub_0807ABB0: @ 0x0807ABB0
	push {lr}
	movs r0, #0x37
	bl sub_0807AA74
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807ABC0
sub_0807ABC0: @ 0x0807ABC0
	push {lr}
	movs r0, #0x11
	bl sub_0807AA74
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807ABD0
sub_0807ABD0: @ 0x0807ABD0
	push {lr}
	movs r0, #0x13
	bl sub_0807AA74
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807ABE0
sub_0807ABE0: @ 0x0807ABE0
	push {lr}
	movs r0, #8
	bl sub_0807AA74
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807ABF0
sub_0807ABF0: @ 0x0807ABF0
	push {lr}
	movs r0, #0x4c
	bl sub_0807AA74
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807AC00
sub_0807AC00: @ 0x0807AC00
	push {lr}
	movs r0, #0x65
	bl sub_0807AA74
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807AC10
sub_0807AC10: @ 0x0807AC10
	push {lr}
	movs r0, #0x66
	bl sub_0807AA74
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807AC20
sub_0807AC20: @ 0x0807AC20
	push {lr}
	movs r0, #0xa3
	bl sub_0807AA74
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807AC30
sub_0807AC30: @ 0x0807AC30
	push {lr}
	movs r0, #1
	movs r1, #0x2d
	bl sub_08027090
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807AC44
sub_0807AC44: @ 0x0807AC44
	push {lr}
	movs r0, #1
	movs r1, #0x25
	bl sub_08027090
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807AC58
sub_0807AC58: @ 0x0807AC58
	push {lr}
	movs r0, #1
	movs r1, #0x1e
	bl sub_08027090
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807AC6C
sub_0807AC6C: @ 0x0807AC6C
	push {lr}
	movs r0, #2
	movs r1, #0x2d
	bl sub_08027090
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807AC80
sub_0807AC80: @ 0x0807AC80
	push {lr}
	movs r0, #2
	movs r1, #0x31
	bl sub_08027090
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807AC94
sub_0807AC94: @ 0x0807AC94
	push {lr}
	movs r0, #2
	movs r1, #0x1f
	bl sub_08027090
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807ACA8
sub_0807ACA8: @ 0x0807ACA8
	push {r4, r5, r6, r7, lr}
	adds r5, r1, #0
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	movs r6, #0
	adds r4, r5, #1
	b _0807ACDA
_0807ACB6:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _0807ACD8
	ldr r2, [r0]
	cmp r2, #0
	beq _0807ACD8
	ldr r0, [r0, #0xc]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	bne _0807ACD8
	ldrb r2, [r2, #4]
	cmp r2, r7
	bne _0807ACD8
	adds r6, #1
_0807ACD8:
	adds r4, #1
_0807ACDA:
	adds r0, r5, #0
	adds r0, #0x40
	cmp r4, r0
	blt _0807ACB6
	adds r0, r6, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807ACEC
sub_0807ACEC: @ 0x0807ACEC
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r6, #0
	adds r4, r5, #1
	b _0807AD18
_0807ACF6:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0807AD14
	ldr r0, [r1]
	cmp r0, #0
	beq _0807AD14
	ldr r0, [r1, #0xc]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	bne _0807AD14
	adds r6, #1
_0807AD14:
	adds r4, #1
	adds r0, r5, #0
_0807AD18:
	adds r0, #0x40
	cmp r4, r0
	blt _0807ACF6
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807AD28
sub_0807AD28: @ 0x0807AD28
	movs r1, #0
	ldr r0, _0807AD38 @ =gPlaySt
	ldrh r0, [r0, #0x10]
	cmp r0, #0x14
	bls _0807AD34
	movs r1, #1
_0807AD34:
	adds r0, r1, #0
	bx lr
	.align 2, 0
_0807AD38: .4byte gPlaySt

	thumb_func_start sub_0807AD3C
sub_0807AD3C: @ 0x0807AD3C
	movs r1, #0
	ldr r0, _0807AD4C @ =gPlaySt
	ldrh r0, [r0, #0x10]
	cmp r0, #0x19
	bls _0807AD48
	movs r1, #1
_0807AD48:
	adds r0, r1, #0
	bx lr
	.align 2, 0
_0807AD4C: .4byte gPlaySt

	thumb_func_start sub_0807AD50
sub_0807AD50: @ 0x0807AD50
	movs r1, #0
	ldr r0, _0807AD60 @ =gPlaySt
	ldrh r0, [r0, #0x10]
	cmp r0, #0x1e
	bls _0807AD5C
	movs r1, #1
_0807AD5C:
	adds r0, r1, #0
	bx lr
	.align 2, 0
_0807AD60: .4byte gPlaySt

	thumb_func_start sub_0807AD64
sub_0807AD64: @ 0x0807AD64
	movs r1, #0
	ldr r0, _0807AD74 @ =gPlaySt
	ldrb r0, [r0, #0xf]
	cmp r0, #0
	bne _0807AD70
	movs r1, #1
_0807AD70:
	adds r0, r1, #0
	bx lr
	.align 2, 0
_0807AD74: .4byte gPlaySt

	thumb_func_start sub_0807AD78
sub_0807AD78: @ 0x0807AD78
	movs r1, #0
	ldr r0, _0807AD88 @ =gPlaySt
	ldrb r0, [r0, #0xf]
	cmp r0, #0x80
	bne _0807AD84
	movs r1, #1
_0807AD84:
	adds r0, r1, #0
	bx lr
	.align 2, 0
_0807AD88: .4byte gPlaySt

	thumb_func_start sub_0807AD8C
sub_0807AD8C: @ 0x0807AD8C
	ldr r0, _0807ADA4 @ =gActiveUnit
	ldr r0, [r0]
	ldr r1, [r0]
	ldr r0, [r0, #4]
	ldr r1, [r1, #0x28]
	ldr r0, [r0, #0x28]
	orrs r1, r0
	lsrs r1, r1, #0xe
	movs r0, #1
	bics r0, r1
	bx lr
	.align 2, 0
_0807ADA4: .4byte gActiveUnit

	thumb_func_start sub_0807ADA8
sub_0807ADA8: @ 0x0807ADA8
	push {lr}
	bl GetGold
	movs r2, #0
	ldr r1, _0807ADC0 @ =0x0000270F
	cmp r0, r1
	ble _0807ADB8
	movs r2, #1
_0807ADB8:
	adds r0, r2, #0
	pop {r1}
	bx r1
	.align 2, 0
_0807ADC0: .4byte 0x0000270F

	thumb_func_start sub_0807ADC4
sub_0807ADC4: @ 0x0807ADC4
	push {lr}
	bl GetGold
	movs r2, #0
	ldr r1, _0807ADDC @ =0x00001F3F
	cmp r0, r1
	ble _0807ADD4
	movs r2, #1
_0807ADD4:
	adds r0, r2, #0
	pop {r1}
	bx r1
	.align 2, 0
_0807ADDC: .4byte 0x00001F3F

	thumb_func_start sub_0807ADE0
sub_0807ADE0: @ 0x0807ADE0
	push {lr}
	bl GetGold
	movs r2, #0
	ldr r1, _0807ADF8 @ =0x0000176F
	cmp r0, r1
	ble _0807ADF0
	movs r2, #1
_0807ADF0:
	adds r0, r2, #0
	pop {r1}
	bx r1
	.align 2, 0
_0807ADF8: .4byte 0x0000176F

	thumb_func_start sub_0807ADFC
sub_0807ADFC: @ 0x0807ADFC
	push {lr}
	bl GetGold
	movs r2, #0
	ldr r1, _0807AE14 @ =0x00001387
	cmp r0, r1
	ble _0807AE0C
	movs r2, #1
_0807AE0C:
	adds r0, r2, #0
	pop {r1}
	bx r1
	.align 2, 0
_0807AE14: .4byte 0x00001387

	thumb_func_start sub_0807AE18
sub_0807AE18: @ 0x0807AE18
	push {lr}
	bl sub_08009E60
	movs r1, #0
	cmp r0, #1
	bne _0807AE26
	movs r1, #1
_0807AE26:
	adds r0, r1, #0
	pop {r1}
	bx r1

	thumb_func_start sub_0807AE2C
sub_0807AE2C: @ 0x0807AE2C
	ldr r0, _0807AE38 @ =gPlaySt
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	lsrs r0, r0, #0x1f
	bx lr
	.align 2, 0
_0807AE38: .4byte gPlaySt

	thumb_func_start sub_0807AE3C
sub_0807AE3C: @ 0x0807AE3C
	ldr r0, _0807AE48 @ =gPlaySt
	adds r0, #0x2c
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	lsrs r0, r0, #0x1f
	bx lr
	.align 2, 0
_0807AE48: .4byte gPlaySt

	thumb_func_start sub_0807AE4C
sub_0807AE4C: @ 0x0807AE4C
	push {lr}
	movs r0, #0x9b
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807AE5C
sub_0807AE5C: @ 0x0807AE5C
	ldr r0, _0807AE68 @ =gPlaySt
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x1a
	lsrs r0, r0, #0x1f
	bx lr
	.align 2, 0
_0807AE68: .4byte gPlaySt

	thumb_func_start sub_0807AE6C
sub_0807AE6C: @ 0x0807AE6C
	push {lr}
	bl sub_0809F9F8
	cmp r0, #0
	beq _0807AE78
	movs r0, #1
_0807AE78:
	pop {r1}
	bx r1

	thumb_func_start sub_0807AE7C
sub_0807AE7C: @ 0x0807AE7C
	push {lr}
	bl sub_0807AA24
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x31
	bhi _0807AE8E
	movs r0, #0
	b _0807AE90
_0807AE8E:
	movs r0, #1
_0807AE90:
	pop {r1}
	bx r1

	thumb_func_start sub_0807AE94
sub_0807AE94: @ 0x0807AE94
	movs r1, #0
	ldr r0, _0807AEA4 @ =gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #3
	bne _0807AEA0
	movs r1, #1
_0807AEA0:
	adds r0, r1, #0
	bx lr
	.align 2, 0
_0807AEA4: .4byte gPlaySt

	thumb_func_start sub_0807AEA8
sub_0807AEA8: @ 0x0807AEA8
	push {lr}
	ldr r0, _0807AEC0 @ =gActiveUnit
	ldr r0, [r0]
	bl GetUnitCurrentHp
	movs r1, #0
	cmp r0, #0
	bne _0807AEBA
	movs r1, #1
_0807AEBA:
	adds r0, r1, #0
	pop {r1}
	bx r1
	.align 2, 0
_0807AEC0: .4byte gActiveUnit

	thumb_func_start sub_0807AEC4
sub_0807AEC4: @ 0x0807AEC4
	movs r0, #0
	bx lr

	thumb_func_start sub_0807AEC8
sub_0807AEC8: @ 0x0807AEC8
	push {lr}
	ldr r1, _0807AEEC @ =gPlaySt
	movs r0, #8
	ldrb r2, [r1, #0x14]
	ands r0, r2
	cmp r0, #0
	bne _0807AEE2
	adds r0, r1, #0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	cmp r0, #0
	bne _0807AEE8
_0807AEE2:
	movs r0, #4
	bl sub_080034C8
_0807AEE8:
	pop {r0}
	bx r0
	.align 2, 0
_0807AEEC: .4byte gPlaySt

	thumb_func_start sub_0807AEF0
sub_0807AEF0: @ 0x0807AEF0
	ldr r0, _0807AF08 @ =gPlaySt
	ldrb r1, [r0, #0x14]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	bne _0807AF0C
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	bne _0807AF0C
	movs r0, #0
	b _0807AF0E
	.align 2, 0
_0807AF08: .4byte gPlaySt
_0807AF0C:
	movs r0, #1
_0807AF0E:
	bx lr

	thumb_func_start sub_0807AF10
sub_0807AF10: @ 0x0807AF10
	movs r1, #0
	ldr r0, _0807AF20 @ =gActionSt
	ldrb r0, [r0, #0x11]
	cmp r0, #1
	bne _0807AF1C
	movs r1, #1
_0807AF1C:
	adds r0, r1, #0
	bx lr
	.align 2, 0
_0807AF20: .4byte gActionSt

	thumb_func_start sub_0807AF24
sub_0807AF24: @ 0x0807AF24
	push {lr}
	movs r0, #0
	bl SetkeyStIgnoredMask
	pop {r0}
	bx r0

	thumb_func_start sub_0807AF30
sub_0807AF30: @ 0x0807AF30
	push {lr}
	movs r0, #2
	bl NewKeyStSetter
	pop {r0}
	bx r0

	thumb_func_start sub_0807AF3C
sub_0807AF3C: @ 0x0807AF3C
	push {lr}
	ldr r0, _0807AF4C @ =0x08D6F770
	movs r1, #4
	bl Proc_Start
	pop {r0}
	bx r0
	.align 2, 0
_0807AF4C: .4byte 0x08D6F770

	thumb_func_start sub_0807AF50
sub_0807AF50: @ 0x0807AF50
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r1, #0
	adds r3, r2, #0
	movs r0, #8
	str r0, [sp]
	movs r0, #1
	adds r1, r4, #0
	adds r2, r5, #0
	bl Interpolate
	adds r5, r0, #0
	ldr r0, _0807AF94 @ =0x0843F164
	ldr r4, _0807AF98 @ =0x02022AA0
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	ldr r0, _0807AF9C @ =0xFFFFFDC0
	adds r4, r4, r0
	adds r0, r4, #0
	movs r1, #0x12
	movs r2, #1
	adds r3, r5, #0
	bl sub_08067750
	bl EnablePalSync
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807AF94: .4byte 0x0843F164
_0807AF98: .4byte 0x02022AA0
_0807AF9C: .4byte 0xFFFFFDC0

	thumb_func_start sub_0807AFA0
sub_0807AFA0: @ 0x0807AFA0
	push {lr}
	adds r1, r0, #0
	adds r1, #0x64
	movs r2, #0
	strh r2, [r1]
	adds r0, #0x66
	strh r2, [r0]
	ldr r0, _0807AFC4 @ =0x08D6F7D4
	bl sub_08004748
	ldr r0, _0807AFC8 @ =0x0843F164
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r0}
	bx r0
	.align 2, 0
_0807AFC4: .4byte 0x08D6F7D4
_0807AFC8: .4byte 0x0843F164

	thumb_func_start sub_0807AFCC
sub_0807AFCC: @ 0x0807AFCC
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	mov r8, r0
	ldr r1, [r0, #0x54]
	cmp r1, #0
	bne _0807B044
	movs r5, #0
	ldr r0, _0807B030 @ =0x0203E644
	ldrb r0, [r0]
	cmp r5, r0
	bge _0807B0D6
	ldr r6, _0807B034 @ =gBmSt
_0807AFE8:
	adds r0, r5, #0
	bl sub_0804B95C
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r1, r1, #4
	movs r3, #0xc
	ldrsh r2, [r6, r3]
	subs r4, r1, r2
	ldrb r0, [r0, #1]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #4
	movs r2, #0xe
	ldrsh r1, [r6, r2]
	subs r2, r0, r1
	movs r3, #0x80
	lsls r3, r3, #2
	adds r0, r4, r3
	ldr r1, _0807B038 @ =0x000001FF
	ands r0, r1
	movs r4, #0x80
	lsls r4, r4, #1
	adds r1, r2, r4
	movs r2, #0xff
	ands r1, r2
	ldr r2, _0807B03C @ =0x08D6F798
	ldr r3, _0807B040 @ =0x00002822
	bl PutOamHiRam
	adds r5, #1
	ldr r0, _0807B030 @ =0x0203E644
	ldrb r0, [r0]
	cmp r5, r0
	blt _0807AFE8
	b _0807B0D6
	.align 2, 0
_0807B030: .4byte 0x0203E644
_0807B034: .4byte gBmSt
_0807B038: .4byte 0x000001FF
_0807B03C: .4byte 0x08D6F798
_0807B040: .4byte 0x00002822
_0807B044:
	cmp r1, #1
	bne _0807B094
	ldr r0, _0807B084 @ =gActiveUnit
	ldr r3, [r0]
	movs r0, #0x10
	ldrsb r0, [r3, r0]
	lsls r0, r0, #4
	ldr r2, _0807B088 @ =gBmSt
	movs r4, #0xc
	ldrsh r1, [r2, r4]
	subs r4, r0, r1
	movs r0, #0x11
	ldrsb r0, [r3, r0]
	lsls r0, r0, #4
	movs r3, #0xe
	ldrsh r1, [r2, r3]
	subs r2, r0, r1
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r4, r1
	subs r1, #1
	ands r0, r1
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r2, r3
	movs r2, #0xff
	ands r1, r2
	ldr r2, _0807B08C @ =0x08D6F798
	ldr r3, _0807B090 @ =0x00002822
	bl PutOamHiRam
	b _0807B0D6
	.align 2, 0
_0807B084: .4byte gActiveUnit
_0807B088: .4byte gBmSt
_0807B08C: .4byte 0x08D6F798
_0807B090: .4byte 0x00002822
_0807B094:
	ldrb r0, [r1]
	cmp r0, #0xff
	beq _0807B0D6
	ldr r6, _0807B118 @ =gBmSt
	adds r5, r1, #0
_0807B09E:
	ldrb r4, [r5]
	lsls r1, r4, #4
	movs r2, #0xc
	ldrsh r0, [r6, r2]
	subs r4, r1, r0
	ldrb r3, [r5, #1]
	lsls r1, r3, #4
	movs r2, #0xe
	ldrsh r0, [r6, r2]
	subs r2, r1, r0
	movs r3, #0x80
	lsls r3, r3, #2
	adds r0, r4, r3
	ldr r1, _0807B11C @ =0x000001FF
	ands r0, r1
	movs r4, #0x80
	lsls r4, r4, #1
	adds r1, r2, r4
	movs r2, #0xff
	ands r1, r2
	ldr r2, _0807B120 @ =0x08D6F798
	ldr r3, _0807B124 @ =0x00002822
	bl PutOamHiRam
	adds r5, #4
	ldrb r0, [r5]
	cmp r0, #0xff
	bne _0807B09E
_0807B0D6:
	bl GetGameTime
	adds r5, r0, #0
	movs r0, #1
	mov sb, r0
	ands r5, r0
	cmp r5, #0
	bne _0807B14C
	mov r6, r8
	adds r6, #0x66
	movs r1, #0
	ldrsh r7, [r6, r1]
	cmp r7, #0
	beq _0807B128
	mov r4, r8
	adds r4, #0x64
	movs r3, #0
	ldrsh r2, [r4, r3]
	movs r0, #0x10
	movs r1, #0
	bl sub_0807AF50
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #8
	ble _0807B14C
	strh r5, [r4]
	strh r5, [r6]
	b _0807B14C
	.align 2, 0
_0807B118: .4byte gBmSt
_0807B11C: .4byte 0x000001FF
_0807B120: .4byte 0x08D6F798
_0807B124: .4byte 0x00002822
_0807B128:
	mov r4, r8
	adds r4, #0x64
	movs r0, #0
	ldrsh r2, [r4, r0]
	movs r0, #0
	movs r1, #0x10
	bl sub_0807AF50
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #8
	ble _0807B14C
	strh r7, [r4]
	mov r1, sb
	strh r1, [r6]
_0807B14C:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0807B158
sub_0807B158: @ 0x0807B158
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r6, _0807B1A8 @ =gActiveUnit
	ldr r0, [r6]
	bl sub_08031994
	ldr r4, _0807B1AC @ =0x0203E644
	bl sub_0804B950
	strb r0, [r4]
	cmp r5, #0
	bne _0807B1B4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807B1CE
	ldr r0, _0807B1B0 @ =0x08D6F7B4
	movs r1, #3
	bl Proc_Start
	str r5, [r0, #0x54]
	movs r0, #0
	bl sub_0804B95C
	movs r1, #0
	ldrsb r1, [r0, r1]
	movs r2, #1
	ldrsb r2, [r0, r2]
	movs r0, #0
	bl sub_0801615C
	ldr r1, [r6]
	movs r0, #0x10
	ldrsb r0, [r1, r0]
	ldrb r1, [r1, #0x11]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_08015F0C
	b _0807B1CE
	.align 2, 0
_0807B1A8: .4byte gActiveUnit
_0807B1AC: .4byte 0x0203E644
_0807B1B0: .4byte 0x08D6F7B4
_0807B1B4:
	ldr r0, _0807B1D4 @ =0x08D6F7B4
	movs r1, #3
	bl Proc_Start
	str r5, [r0, #0x54]
	ldr r1, [r6]
	movs r0, #0x10
	ldrsb r0, [r1, r0]
	ldrb r1, [r1, #0x11]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_08015F0C
_0807B1CE:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807B1D4: .4byte 0x08D6F7B4

	thumb_func_start sub_0807B1D8
sub_0807B1D8: @ 0x0807B1D8
	adds r0, #0x64
	movs r1, #0xf
	strh r1, [r0]
	bx lr

	thumb_func_start sub_0807B1E0
sub_0807B1E0: @ 0x0807B1E0
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x64
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0807B20E
	bl sub_08083B80
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0807B21A
	ldr r0, _0807B220 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0807B21A
_0807B20E:
	ldr r0, _0807B224 @ =0x08D6F7B4
	bl sub_08004748
	adds r0, r4, #0
	bl Proc_Break
_0807B21A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807B220: .4byte gpKeySt
_0807B224: .4byte 0x08D6F7B4

	thumb_func_start sub_0807B228
sub_0807B228: @ 0x0807B228
	push {r4, lr}
	bl sub_08083B80
	lsls r0, r0, #0x18
	asrs r4, r0, #0x18
	cmp r4, #0
	bne _0807B23E
	ldr r0, _0807B248 @ =0x08D6F7D4
	movs r1, #3
	bl Proc_Start
_0807B23E:
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0807B248: .4byte 0x08D6F7D4

	thumb_func_start sub_0807B24C
sub_0807B24C: @ 0x0807B24C
	push {r4, r5, r6, r7, lr}
	bl GetPlayerLeaderUnitId
	bl GetUnitFromCharId
	adds r5, r0, #0
	movs r7, #0x10
	ldrsb r7, [r5, r7]
	movs r6, #0x11
	ldrsb r6, [r5, r6]
	movs r4, #1
_0807B262:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _0807B298
	ldr r0, [r2]
	cmp r0, #0
	beq _0807B298
	cmp r2, r5
	beq _0807B298
	movs r0, #0x10
	ldrsb r0, [r2, r0]
	cmp r0, r7
	bne _0807B298
	movs r0, #0x11
	ldrsb r0, [r2, r0]
	cmp r0, r6
	bne _0807B298
	ldr r1, [r2, #0xc]
	movs r0, #0x30
	ands r0, r1
	cmp r0, #0
	bne _0807B298
	movs r0, #9
	orrs r1, r0
	str r1, [r2, #0xc]
_0807B298:
	adds r4, #1
	cmp r4, #0x3f
	ble _0807B262
	bl RefreshUnitSprites
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0807B2A8
sub_0807B2A8: @ 0x0807B2A8
	push {r4, lr}
	movs r4, #1
_0807B2AC:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _0807B2CE
	ldr r0, [r2]
	cmp r0, #0
	beq _0807B2CE
	ldr r1, [r2, #0xc]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	bne _0807B2CE
	movs r0, #1
	orrs r1, r0
	str r1, [r2, #0xc]
_0807B2CE:
	adds r4, #1
	cmp r4, #0x3f
	ble _0807B2AC
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807B2DC
sub_0807B2DC: @ 0x0807B2DC
	push {r4, lr}
	movs r4, #0x41
_0807B2E0:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0807B2F8
	ldr r0, [r1]
	cmp r0, #0
	beq _0807B2F8
	adds r0, r1, #0
	bl ClearUnit
_0807B2F8:
	adds r4, #1
	cmp r4, #0xbf
	ble _0807B2E0
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0807B304
sub_0807B304: @ 0x0807B304
	push {r4, lr}
	movs r4, #0x81
_0807B308:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0807B320
	ldr r0, [r1]
	cmp r0, #0
	beq _0807B320
	adds r0, r1, #0
	bl ClearUnit
_0807B320:
	adds r4, #1
	cmp r4, #0xbf
	ble _0807B308
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0807B32C
sub_0807B32C: @ 0x0807B32C
	push {r4, r5, r6, lr}
	movs r4, #0x41
_0807B330:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0807B348
	ldr r0, [r1]
	cmp r0, #0
	beq _0807B348
	adds r0, r1, #0
	bl ClearUnit
_0807B348:
	adds r4, #1
	cmp r4, #0xbf
	ble _0807B330
	movs r5, #1
	movs r6, #0
_0807B352:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _0807B392
	ldr r0, [r4]
	cmp r0, #0
	beq _0807B392
	adds r0, r4, #0
	bl GetUnitMaxHp
	adds r1, r0, #0
	adds r0, r4, #0
	bl SetUnitHp
	adds r0, r4, #0
	movs r1, #0
	bl SetUnitStatus
	adds r0, r4, #0
	adds r0, #0x31
	strb r6, [r0]
	ldr r1, [r4, #0xc]
	ldr r0, _0807B3A8 @ =0x0671E00C
	ands r1, r0
	movs r0, #0xff
	strb r0, [r4, #0x10]
	movs r0, #1
	orrs r1, r0
	str r1, [r4, #0xc]
	strb r6, [r4, #0x1b]
_0807B392:
	adds r5, #1
	cmp r5, #0x3f
	ble _0807B352
	bl RefreshEntityMaps
	bl MU_EndAll
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807B3A8: .4byte 0x0671E00C

	thumb_func_start sub_0807B3AC
sub_0807B3AC: @ 0x0807B3AC
	push {r4, lr}
	adds r4, r0, #0
	adds r4, #0x4c
	movs r1, #0
	ldrsb r1, [r4, r1]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0807B3CA
	bl sub_0802D874
	bl sub_0806D51C
	movs r0, #0
	strb r0, [r4]
_0807B3CA:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0807B3D0
sub_0807B3D0: @ 0x0807B3D0
	push {lr}
	adds r2, r0, #0
	adds r2, #0x4c
	ldrb r3, [r2]
	movs r1, #0
	ldrsb r1, [r2, r1]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _0807B3F6
	movs r0, #0xff
	strb r0, [r2]
	bl sub_0802E834
	bl sub_0802D8A8
	bl sub_0806D52C
	b _0807B3FA
_0807B3F6:
	bl sub_0802E834
_0807B3FA:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807B400
sub_0807B400: @ 0x0807B400
	push {lr}
	adds r2, r0, #0
	adds r2, #0x4c
	ldrb r3, [r2]
	movs r1, #0
	ldrsb r1, [r2, r1]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _0807B426
	movs r0, #0xff
	strb r0, [r2]
	bl sub_0802E804
	bl sub_0802D8A8
	bl sub_0806D52C
	b _0807B42A
_0807B426:
	bl sub_0802E804
_0807B42A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807B430
sub_0807B430: @ 0x0807B430
	push {lr}
	ldr r0, [r0, #0x14]
	bl sub_08091618
	pop {r0}
	bx r0

	thumb_func_start sub_0807B43C
sub_0807B43C: @ 0x0807B43C
	push {lr}
	ldr r0, [r0, #0x14]
	bl sub_08091628
	pop {r0}
	bx r0

	thumb_func_start sub_0807B448
sub_0807B448: @ 0x0807B448
	push {lr}
	movs r0, #0
	bl InitBgs
	ldr r2, _0807B474 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	pop {r0}
	bx r0
	.align 2, 0
_0807B474: .4byte gDispIo

	thumb_func_start sub_0807B478
sub_0807B478: @ 0x0807B478
	push {r4, lr}
	movs r0, #0x26
	bl GetUnitFromCharId
	adds r4, r0, #0
	movs r0, #0x25
	bl GetUnitFromCharId
	adds r1, r0, #0
	adds r0, r4, #0
	bl SwapUnitStats
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807B498
sub_0807B498: @ 0x0807B498
	push {lr}
	sub sp, #0x10
	movs r2, #1
	rsbs r2, r2, #0
	movs r1, #0xc0
	lsls r1, r1, #1
	str r1, [sp]
	str r1, [sp, #4]
	str r1, [sp, #8]
	str r0, [sp, #0xc]
	adds r0, r2, #0
	movs r1, #2
	movs r2, #0x20
	movs r3, #4
	bl sub_08012030
	add sp, #0x10
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807B4C0
sub_0807B4C0: @ 0x0807B4C0
	push {lr}
	sub sp, #0x10
	movs r2, #1
	rsbs r2, r2, #0
	movs r1, #0x80
	lsls r1, r1, #2
	str r1, [sp]
	subs r1, #0xc0
	str r1, [sp, #4]
	str r1, [sp, #8]
	str r0, [sp, #0xc]
	adds r0, r2, #0
	movs r1, #2
	movs r2, #0x20
	movs r3, #4
	bl sub_08012030
	add sp, #0x10
	pop {r0}
	bx r0

	thumb_func_start sub_0807B4E8
sub_0807B4E8: @ 0x0807B4E8
	adds r0, #0x4d
	movs r3, #0
	movs r1, #1
	strb r1, [r0]
	ldr r0, _0807B52C @ =gDispIo
	mov ip, r0
	mov r2, ip
	adds r2, #0x3c
	movs r0, #0xc0
	ldrb r1, [r2]
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x44
	strb r3, [r0]
	adds r0, #1
	strb r3, [r0]
	mov r1, ip
	adds r1, #0x46
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _0807B530 @ =0x0000FFE0
	mov r3, ip
	ldrh r3, [r3, #0x3c]
	ands r0, r3
	movs r1, #0x1f
	orrs r0, r1
	mov r1, ip
	strh r0, [r1, #0x3c]
	movs r0, #0x20
	ldrb r3, [r2]
	orrs r0, r3
	strb r0, [r2]
	bx lr
	.align 2, 0
_0807B52C: .4byte gDispIo
_0807B530: .4byte 0x0000FFE0

	thumb_func_start sub_0807B534
sub_0807B534: @ 0x0807B534
	ldr r2, _0807B554 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_0807B554: .4byte gDispIo

	thumb_func_start sub_0807B558
sub_0807B558: @ 0x0807B558
	ldr r2, _0807B574 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_0807B574: .4byte gDispIo

	thumb_func_start sub_0807B578
sub_0807B578: @ 0x0807B578
	push {lr}
	ldr r0, [r0, #0x14]
	adds r0, #0x4c
	movs r1, #0
	ldrsb r1, [r0, r1]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0807B5A8
	bl GetGameTime
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0807B5CA
	ldr r1, _0807B5A4 @ =gBmSt
	movs r0, #2
	ldrh r2, [r1, #0xc]
	eors r0, r2
	strh r0, [r1, #0xc]
	b _0807B5CA
	.align 2, 0
_0807B5A4: .4byte gBmSt
_0807B5A8:
	bl GetGameTime
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0807B5CA
	bl GetGameTime
	adds r1, r0, #0
	movs r0, #2
	ands r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	movs r0, #3
	movs r2, #0
	bl SetBgOffset
_0807B5CA:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807B5D0
sub_0807B5D0: @ 0x0807B5D0
	push {lr}
	ldr r0, [r0, #0x14]
	adds r0, #0x4c
	movs r1, #0
	ldrsb r1, [r0, r1]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0807B608
	bl GetGameTime
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0807B62C
	ldr r0, _0807B600 @ =gBmSt
	ldr r1, _0807B604 @ =0x0000FFFD
	ldrh r2, [r0, #0xc]
	ands r1, r2
	movs r2, #1
	eors r1, r2
	strh r1, [r0, #0xc]
	b _0807B62C
	.align 2, 0
_0807B600: .4byte gBmSt
_0807B604: .4byte 0x0000FFFD
_0807B608:
	bl GetGameTime
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0807B62C
	movs r0, #3
	bl sub_080AB8B4
	adds r1, r0, #0
	movs r0, #1
	eors r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	movs r0, #3
	movs r2, #0
	bl SetBgOffset
_0807B62C:
	pop {r0}
	bx r0

	thumb_func_start sub_0807B630
sub_0807B630: @ 0x0807B630
	push {lr}
	ldr r0, [r0, #0x14]
	adds r0, #0x4c
	ldrb r0, [r0]
	cmp r0, #0x61
	bne _0807B65C
	bl GetGameTime
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0807B676
	bl GetGameTime
	adds r1, r0, #0
	movs r0, #1
	ands r1, r0
	movs r0, #3
	movs r2, #0
	bl SetBgOffset
	b _0807B676
_0807B65C:
	bl GetGameTime
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0807B676
	ldr r0, _0807B67C @ =gBmSt
	ldr r1, _0807B680 @ =0x0000FFFD
	ldrh r2, [r0, #0xe]
	ands r1, r2
	movs r2, #1
	eors r1, r2
	strh r1, [r0, #0xe]
_0807B676:
	pop {r0}
	bx r0
	.align 2, 0
_0807B67C: .4byte gBmSt
_0807B680: .4byte 0x0000FFFD

	thumb_func_start sub_0807B684
sub_0807B684: @ 0x0807B684
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, _0807B6BC @ =0x08D6F81C
	adds r0, r5, #0
	bl Proc_Find
	cmp r0, #0
	bne _0807B69C
	adds r0, r5, #0
	adds r1, r4, #0
	bl Proc_Start
_0807B69C:
	movs r1, #0
	bl Proc_Goto
	ldr r0, _0807B6C0 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807B6B4
	ldr r0, _0807B6C4 @ =0x0000026A
	bl m4aSongNumStart
_0807B6B4:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807B6BC: .4byte 0x08D6F81C
_0807B6C0: .4byte gPlaySt
_0807B6C4: .4byte 0x0000026A

	thumb_func_start sub_0807B6C8
sub_0807B6C8: @ 0x0807B6C8
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, _0807B700 @ =0x08D6F7EC
	adds r0, r5, #0
	bl Proc_Find
	cmp r0, #0
	bne _0807B6F2
	ldr r0, _0807B704 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807B6EA
	ldr r0, _0807B708 @ =0x0000026A
	bl m4aSongNumStart
_0807B6EA:
	adds r0, r5, #0
	adds r1, r4, #0
	bl Proc_Start
_0807B6F2:
	movs r1, #0
	bl Proc_Goto
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807B700: .4byte 0x08D6F7EC
_0807B704: .4byte gPlaySt
_0807B708: .4byte 0x0000026A

	thumb_func_start sub_0807B70C
sub_0807B70C: @ 0x0807B70C
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, _0807B744 @ =0x08D6F7EC
	adds r0, r5, #0
	bl Proc_Find
	cmp r0, #0
	bne _0807B736
	ldr r0, _0807B748 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807B72E
	ldr r0, _0807B74C @ =0x0000026A
	bl m4aSongNumStart
_0807B72E:
	adds r0, r5, #0
	adds r1, r4, #0
	bl Proc_Start
_0807B736:
	movs r1, #1
	bl Proc_Goto
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807B744: .4byte 0x08D6F7EC
_0807B748: .4byte gPlaySt
_0807B74C: .4byte 0x0000026A

	thumb_func_start sub_0807B750
sub_0807B750: @ 0x0807B750
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, _0807B774 @ =0x08D6F7EC
	adds r0, r5, #0
	bl Proc_Find
	cmp r0, #0
	bne _0807B768
	adds r0, r5, #0
	adds r1, r4, #0
	bl Proc_Start
_0807B768:
	movs r1, #0
	bl Proc_Goto
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807B774: .4byte 0x08D6F7EC

	thumb_func_start sub_0807B778
sub_0807B778: @ 0x0807B778
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, _0807B79C @ =0x08D6F7EC
	adds r0, r5, #0
	bl Proc_Find
	cmp r0, #0
	bne _0807B790
	adds r0, r5, #0
	adds r1, r4, #0
	bl Proc_Start
_0807B790:
	movs r1, #1
	bl Proc_Goto
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807B79C: .4byte 0x08D6F7EC

	thumb_func_start sub_0807B7A0
sub_0807B7A0: @ 0x0807B7A0
	push {lr}
	ldr r0, _0807B7BC @ =gBmSt
	ldr r1, _0807B7C0 @ =0x0000FFFC
	ldrh r2, [r0, #0xc]
	ands r1, r2
	strh r1, [r0, #0xc]
	ldr r0, _0807B7C4 @ =0x08D6F7EC
	bl sub_08004748
	movs r0, #4
	bl sub_080035EC
	pop {r0}
	bx r0
	.align 2, 0
_0807B7BC: .4byte gBmSt
_0807B7C0: .4byte 0x0000FFFC
_0807B7C4: .4byte 0x08D6F7EC

	thumb_func_start sub_0807B7C8
sub_0807B7C8: @ 0x0807B7C8
	push {lr}
	ldr r0, _0807B7E4 @ =gBmSt
	ldr r1, _0807B7E8 @ =0x0000FFFC
	ldrh r2, [r0, #0xe]
	ands r1, r2
	strh r1, [r0, #0xe]
	ldr r0, _0807B7EC @ =0x08D6F81C
	bl sub_08004748
	movs r0, #4
	bl sub_080035EC
	pop {r0}
	bx r0
	.align 2, 0
_0807B7E4: .4byte gBmSt
_0807B7E8: .4byte 0x0000FFFC
_0807B7EC: .4byte 0x08D6F81C

	thumb_func_start sub_0807B7F0
sub_0807B7F0: @ 0x0807B7F0
	adds r0, #0x4c
	movs r1, #0
	strh r1, [r0]
	bx lr

	thumb_func_start sub_0807B7F8
sub_0807B7F8: @ 0x0807B7F8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x14]
	adds r0, #0x4c
	movs r1, #0
	ldrsb r1, [r0, r1]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0807B830
	bl GetGameTime
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0807B854
	ldr r0, _0807B828 @ =gBmSt
	ldr r1, _0807B82C @ =0x0000FFFD
	ldrh r2, [r0, #0xc]
	ands r1, r2
	movs r2, #1
	eors r1, r2
	strh r1, [r0, #0xc]
	b _0807B854
	.align 2, 0
_0807B828: .4byte gBmSt
_0807B82C: .4byte 0x0000FFFD
_0807B830:
	bl GetGameTime
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0807B854
	movs r0, #3
	bl sub_080AB8B4
	adds r1, r0, #0
	movs r0, #1
	eors r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	movs r0, #3
	movs r2, #0
	bl SetBgOffset
_0807B854:
	adds r1, r4, #0
	adds r1, #0x4c
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x10
	bne _0807B872
	adds r0, r4, #0
	bl Proc_Break
	movs r0, #4
	bl sub_080035EC
_0807B872:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0807B878
sub_0807B878: @ 0x0807B878
	push {lr}
	adds r1, r0, #0
	ldr r0, _0807B898 @ =0x08D6F834
	bl Proc_Start
	ldr r0, _0807B89C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807B894
	ldr r0, _0807B8A0 @ =0x0000026A
	bl m4aSongNumStart
_0807B894:
	pop {r0}
	bx r0
	.align 2, 0
_0807B898: .4byte 0x08D6F834
_0807B89C: .4byte gPlaySt
_0807B8A0: .4byte 0x0000026A

	thumb_func_start sub_0807B8A4
sub_0807B8A4: @ 0x0807B8A4
	push {lr}
	ldr r0, _0807B8C0 @ =gBmSt
	ldr r1, _0807B8C4 @ =0x0000FFFC
	ldrh r2, [r0, #0xe]
	ands r1, r2
	strh r1, [r0, #0xe]
	movs r0, #4
	bl sub_080035EC
	ldr r0, _0807B8C8 @ =0x08D6F834
	bl sub_08004748
	pop {r0}
	bx r0
	.align 2, 0
_0807B8C0: .4byte gBmSt
_0807B8C4: .4byte 0x0000FFFC
_0807B8C8: .4byte 0x08D6F834

	thumb_func_start sub_0807B8CC
sub_0807B8CC: @ 0x0807B8CC
	push {lr}
	movs r0, #0x91
	bl sub_0807A0B4
	pop {r0}
	bx r0

	thumb_func_start sub_0807B8D8
sub_0807B8D8: @ 0x0807B8D8
	push {lr}
	movs r0, #0x91
	bl sub_0807A0E0
	pop {r0}
	bx r0

	thumb_func_start sub_0807B8E4
sub_0807B8E4: @ 0x0807B8E4
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, [r4, #0x58]
	adds r0, #1
	str r0, [r4, #0x58]
	movs r0, #1
	movs r1, #0
	bl sub_08077CEC
	ldr r1, [r4, #0x58]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r2, #8
	movs r3, #3
	bl sub_08077714
	movs r0, #1
	movs r1, #0xa0
	bl sub_08077CEC
	adds r5, r0, #0
	movs r0, #3
	bl sub_080AB8B4
	ldr r1, [r4, #0x58]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	str r0, [sp]
	adds r0, r5, #0
	movs r2, #8
	movs r3, #3
	bl sub_08077794
	bl sub_08077898
	adds r4, #0x64
	ldrh r4, [r4]
	movs r0, #3
	bl sub_080AB8B4
	adds r1, r0, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	adds r0, r4, #0
	movs r2, #0
	bl SetBgOffset
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0807B94C
sub_0807B94C: @ 0x0807B94C
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	movs r1, #0
	str r1, [r4, #0x58]
	adds r0, #0x4c
	strh r1, [r0]
	movs r0, #1
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r3, _0807B9F0 @ =gDispIo
	movs r2, #4
	rsbs r2, r2, #0
	adds r0, r2, #0
	ldrb r1, [r3, #0xc]
	ands r0, r1
	strb r0, [r3, #0xc]
	adds r0, r2, #0
	ldrb r1, [r3, #0x10]
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	strb r0, [r3, #0x10]
	movs r0, #3
	ldrb r1, [r3, #0x14]
	orrs r0, r1
	strb r0, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	ands r2, r0
	movs r0, #2
	orrs r2, r0
	strb r2, [r3, #0x18]
	ldr r0, _0807B9F4 @ =0x081BF61C
	ldr r1, _0807B9F8 @ =0x06004000
	bl sub_08013688
	ldr r0, _0807B9FC @ =gBg2Tm
	ldr r1, _0807BA00 @ =0x081C0A90
	movs r2, #0xc4
	lsls r2, r2, #7
	bl TmApplyTsa_thm
	ldr r5, _0807BA04 @ =0x081C0A50
	adds r0, r5, #0
	movs r1, #0xc0
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #4
	bl EnableBgSync
	ldr r1, _0807BA08 @ =0x081C0A70
	movs r0, #1
	str r0, [sp]
	str r4, [sp, #4]
	adds r0, r5, #0
	movs r2, #2
	movs r3, #6
	bl sub_080AB7F4
	bl sub_0807702C
	ldr r0, _0807BA0C @ =sub_080783DC
	bl SetOnHBlankA
	ldr r0, _0807BA10 @ =sub_0807B8E4
	adds r1, r4, #0
	bl sub_080AA20C
	adds r4, #0x64
	movs r0, #2
	strh r0, [r4]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807B9F0: .4byte gDispIo
_0807B9F4: .4byte 0x081BF61C
_0807B9F8: .4byte 0x06004000
_0807B9FC: .4byte gBg2Tm
_0807BA00: .4byte 0x081C0A90
_0807BA04: .4byte 0x081C0A50
_0807BA08: .4byte 0x081C0A70
_0807BA0C: .4byte sub_080783DC
_0807BA10: .4byte sub_0807B8E4

	thumb_func_start sub_0807BA14
sub_0807BA14: @ 0x0807BA14
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _0807BAC0 @ =sub_080785B8
	bl SetOnHBlankA
	ldr r3, _0807BAC4 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r5, #0
	strb r5, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r5, [r0]
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	movs r0, #3
	ldrb r2, [r3, #0x10]
	orrs r2, r0
	strb r2, [r3, #0x10]
	ldrb r2, [r3, #0x14]
	orrs r0, r2
	strb r0, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x18]
	ldr r0, _0807BAC8 @ =0x0000FFE0
	ldrh r1, [r3, #0x3c]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	ldr r1, _0807BACC @ =0x0000E0FF
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	ldr r0, _0807BAD0 @ =0x081C1068
	ldr r1, _0807BAD4 @ =0x06003000
	bl sub_08013688
	ldr r0, _0807BAD8 @ =gBg1Tm
	ldr r1, _0807BADC @ =0x081C1EA4
	movs r2, #0xe3
	lsls r2, r2, #7
	bl TmApplyTsa_thm
	ldr r0, _0807BAE0 @ =0x081C1CA4
	movs r1, #0xe0
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #2
	bl EnableBgSync
	adds r0, r4, #0
	adds r0, #0x4c
	strh r5, [r0]
	ldr r0, [r4, #0x14]
	bl sub_08091618
	adds r4, #0x64
	movs r0, #1
	strh r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807BAC0: .4byte sub_080785B8
_0807BAC4: .4byte gDispIo
_0807BAC8: .4byte 0x0000FFE0
_0807BACC: .4byte 0x0000E0FF
_0807BAD0: .4byte 0x081C1068
_0807BAD4: .4byte 0x06003000
_0807BAD8: .4byte gBg1Tm
_0807BADC: .4byte 0x081C1EA4
_0807BAE0: .4byte 0x081C1CA4

	thumb_func_start sub_0807BAE4
sub_0807BAE4: @ 0x0807BAE4
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, #0x4c
	ldrh r2, [r0]
	adds r2, #1
	movs r4, #0
	strh r2, [r0]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x12
	ldr r0, _0807BB40 @ =gDispIo
	mov ip, r0
	mov r3, ip
	adds r3, #0x3c
	movs r0, #0x3f
	ldrb r1, [r3]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r3]
	mov r0, ip
	adds r0, #0x44
	strb r2, [r0]
	movs r0, #0x10
	subs r0, r0, r2
	mov r1, ip
	adds r1, #0x45
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x46
	strb r4, [r0]
	cmp r2, #0x10
	bne _0807BB38
	adds r0, r5, #0
	bl Proc_Break
	ldr r0, _0807BB44 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
_0807BB38:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807BB40: .4byte gDispIo
_0807BB44: .4byte gBg2Tm

	thumb_func_start sub_0807BB48
sub_0807BB48: @ 0x0807BB48
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, _0807BBD4 @ =gDispIo
	adds r1, r5, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r2, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	ldr r0, _0807BBD8 @ =0x06003000
	ldr r1, _0807BBDC @ =0x06004000
	movs r2, #0x80
	lsls r2, r2, #3
	bl CpuFastSet
	ldr r0, _0807BBE0 @ =gBg2Tm
	ldr r1, _0807BBE4 @ =0x081C1EA4
	movs r2, #0xe4
	lsls r2, r2, #7
	bl TmApplyTsa_thm
	movs r0, #4
	bl EnableBgSync
	ldr r0, _0807BBE8 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl EnableBgSync
	movs r2, #4
	rsbs r2, r2, #0
	adds r0, r2, #0
	ldrb r1, [r5, #0xc]
	ands r0, r1
	strb r0, [r5, #0xc]
	adds r0, r2, #0
	ldrb r1, [r5, #0x10]
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	strb r0, [r5, #0x10]
	movs r0, #3
	ldrb r1, [r5, #0x14]
	orrs r0, r1
	strb r0, [r5, #0x14]
	ldrb r0, [r5, #0x18]
	ands r2, r0
	movs r0, #2
	orrs r2, r0
	strb r2, [r5, #0x18]
	ldr r0, [r4, #0x14]
	bl sub_08091628
	adds r4, #0x64
	movs r0, #2
	strh r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807BBD4: .4byte gDispIo
_0807BBD8: .4byte 0x06003000
_0807BBDC: .4byte 0x06004000
_0807BBE0: .4byte gBg2Tm
_0807BBE4: .4byte 0x081C1EA4
_0807BBE8: .4byte gBg1Tm

	thumb_func_start sub_0807BBEC
sub_0807BBEC: @ 0x0807BBEC
	push {lr}
	ldr r0, _0807BBF8 @ =sub_080783DC
	bl SetOnHBlankA
	pop {r0}
	bx r0
	.align 2, 0
_0807BBF8: .4byte sub_080783DC

	thumb_func_start sub_0807BBFC
sub_0807BBFC: @ 0x0807BBFC
	push {lr}
	sub sp, #4
	movs r0, #0
	str r0, [sp]
	ldr r1, _0807BC48 @ =0x06003000
	ldr r2, _0807BC4C @ =0x01000C00
	mov r0, sp
	bl CpuFastSet
	movs r0, #0
	bl SetOnHBlankA
	ldr r3, _0807BC50 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_0807BC48: .4byte 0x06003000
_0807BC4C: .4byte 0x01000C00
_0807BC50: .4byte gDispIo

	thumb_func_start sub_0807BC54
sub_0807BC54: @ 0x0807BC54
	push {lr}
	adds r1, r0, #0
	ldr r0, _0807BC64 @ =0x08D6F854
	bl Proc_Start
	pop {r0}
	bx r0
	.align 2, 0
_0807BC64: .4byte 0x08D6F854

	thumb_func_start sub_0807BC68
sub_0807BC68: @ 0x0807BC68
	push {lr}
	ldr r0, _0807BC7C @ =0x08D6F854
	bl Proc_Find
	movs r1, #0
	bl Proc_Goto
	pop {r0}
	bx r0
	.align 2, 0
_0807BC7C: .4byte 0x08D6F854

	thumb_func_start sub_0807BC80
sub_0807BC80: @ 0x0807BC80
	push {lr}
	ldr r0, _0807BC90 @ =0x08D6F854
	bl Proc_Find
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_0807BC90: .4byte 0x08D6F854

	thumb_func_start sub_0807BC94
sub_0807BC94: @ 0x0807BC94
	adds r0, #0x4c
	movs r1, #0
	strh r1, [r0]
	bx lr

	thumb_func_start sub_0807BC9C
sub_0807BC9C: @ 0x0807BC9C
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0x86
	bl GetUnitFromCharId
	adds r2, r0, #0
	adds r4, #0x4c
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	cmp r2, #0
	beq _0807BCD2
	movs r3, #1
	ands r0, r3
	cmp r0, #0
	beq _0807BCD2
	ldr r1, [r2, #0xc]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	bne _0807BCD2
	eors r1, r3
	str r1, [r2, #0xc]
	bl RefreshEntityMaps
	bl RefreshUnitSprites
_0807BCD2:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0807BCD8
sub_0807BCD8: @ 0x0807BCD8
	push {lr}
	adds r1, r0, #0
	ldr r0, _0807BCE8 @ =0x08D6F8AC
	bl Proc_Start
	pop {r0}
	bx r0
	.align 2, 0
_0807BCE8: .4byte 0x08D6F8AC

	thumb_func_start sub_0807BCEC
sub_0807BCEC: @ 0x0807BCEC
	push {lr}
	ldr r0, _0807BCFC @ =0x08D6F8AC
	bl Proc_Find
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_0807BCFC: .4byte 0x08D6F8AC

	thumb_func_start sub_0807BD00
sub_0807BD00: @ 0x0807BD00
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r2, _0807BD54 @ =gBmSt
	movs r1, #0xc
	ldrsh r0, [r2, r1]
	subs r4, r0, r4
	movs r1, #0xff
	ands r4, r1
	movs r3, #0xe
	ldrsh r0, [r2, r3]
	subs r5, r0, r5
	ands r5, r1
	ldr r0, _0807BD58 @ =0x081BD514
	movs r1, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0807BD5C @ =0x081BD14C
	ldr r1, _0807BD60 @ =0x06000800
	bl sub_08013688
	ldr r0, _0807BD64 @ =gBg0Tm
	ldr r1, _0807BD68 @ =0x081BD534
	movs r2, #0x40
	bl TmApplyTsa_thm
	movs r0, #1
	bl EnableBgSync
	adds r1, r4, #0
	adds r2, r5, #0
	movs r0, #0
	bl SetBgOffset
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807BD54: .4byte gBmSt
_0807BD58: .4byte 0x081BD514
_0807BD5C: .4byte 0x081BD14C
_0807BD60: .4byte 0x06000800
_0807BD64: .4byte gBg0Tm
_0807BD68: .4byte 0x081BD534

	thumb_func_start sub_0807BD6C
sub_0807BD6C: @ 0x0807BD6C
	push {r4, r5, r6, lr}
	sub sp, #0x18
	adds r3, r0, #0
	ldr r2, _0807BDB4 @ =gBmSt
	movs r4, #0xc
	ldrsh r0, [r2, r4]
	subs r3, r3, r0
	ldr r5, _0807BDB8 @ =0x000001FF
	movs r4, #0xe
	ldrsh r0, [r2, r4]
	subs r1, r1, r0
	movs r4, #0xff
	ldr r0, _0807BDBC @ =0x0819381C
	ldr r6, _0807BDC0 @ =0x08193CB8
	ldr r2, _0807BDC4 @ =0x0819438C
	ands r3, r5
	ands r1, r4
	str r1, [sp]
	movs r1, #0
	str r1, [sp, #4]
	movs r1, #5
	str r1, [sp, #8]
	movs r1, #1
	str r1, [sp, #0xc]
	movs r1, #0xd0
	lsls r1, r1, #3
	str r1, [sp, #0x10]
	movs r1, #4
	str r1, [sp, #0x14]
	adds r1, r6, #0
	bl sub_080AB840
	add sp, #0x18
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807BDB4: .4byte gBmSt
_0807BDB8: .4byte 0x000001FF
_0807BDBC: .4byte 0x0819381C
_0807BDC0: .4byte 0x08193CB8
_0807BDC4: .4byte 0x0819438C

	thumb_func_start sub_0807BDC8
sub_0807BDC8: @ 0x0807BDC8
	push {lr}
	ldr r1, [r0, #0x58]
	adds r1, #1
	str r1, [r0, #0x58]
	adds r0, #0x64
	movs r2, #0
	ldrsh r0, [r0, r2]
	cmp r0, #0
	beq _0807BDF4
	movs r0, #0x1f
	ands r1, r0
	cmp r1, #0
	bne _0807BDF4
	ldr r0, _0807BDF8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807BDF4
	movs r0, #0xf8
	bl m4aSongNumStart
_0807BDF4:
	pop {r0}
	bx r0
	.align 2, 0
_0807BDF8: .4byte gPlaySt

	thumb_func_start sub_0807BDFC
sub_0807BDFC: @ 0x0807BDFC
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	adds r4, r0, #0
	bl sub_080AB82C
	bl sub_08013BCC
	adds r6, r4, #0
	adds r6, #0x4c
	movs r3, #0
	movs r5, #0
	strh r5, [r6]
	ldr r7, _0807BEF0 @ =gDispIo
	adds r2, r7, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r7, #0
	adds r0, #0x44
	strb r3, [r0]
	adds r1, r7, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x46
	strb r3, [r0]
	ldr r0, _0807BEF4 @ =0x0000FFE0
	ldrh r2, [r7, #0x3c]
	ands r0, r2
	movs r1, #4
	orrs r0, r1
	ldr r1, _0807BEF8 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xf8
	lsls r2, r2, #5
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r7, #0x3c]
	bl sub_0807702C
	movs r0, #0
	movs r1, #0
	bl sub_080780E0
	movs r0, #0
	bl SetOnHBlankA
	ldr r0, _0807BEFC @ =sub_08078098
	bl SetOnHBlankA
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r7, #0xc]
	ands r0, r2
	strb r0, [r7, #0xc]
	adds r0, r1, #0
	ldrb r2, [r7, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r7, #0x10]
	ldrb r0, [r7, #0x14]
	ands r1, r0
	orrs r1, r2
	strb r1, [r7, #0x14]
	movs r0, #3
	ldrb r1, [r7, #0x18]
	orrs r0, r1
	strb r0, [r7, #0x18]
	movs r0, #7
	bl EnableBgSync
	strh r5, [r6]
	ldr r0, _0807BF00 @ =0x08DBA9FC
	movs r1, #0x80
	lsls r1, r1, #7
	str r1, [sp]
	movs r1, #0x80
	lsls r1, r1, #5
	str r1, [sp, #4]
	str r5, [sp, #8]
	str r5, [sp, #0xc]
	str r4, [sp, #0x10]
	movs r1, #2
	movs r2, #0
	movs r3, #0
	bl sub_080AB654
	movs r3, #0x80
	lsls r3, r3, #1
	movs r0, #0x80
	str r0, [sp]
	str r0, [sp, #4]
	subs r0, #0x90
	str r0, [sp, #8]
	movs r0, #8
	str r0, [sp, #0xc]
	str r4, [sp, #0x10]
	adds r0, r3, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08013EF8
	str r5, [r4, #0x58]
	adds r1, r4, #0
	adds r1, #0x64
	movs r0, #1
	strh r0, [r1]
	ldr r0, _0807BF04 @ =sub_0807BDC8
	adds r1, r4, #0
	bl sub_080AA20C
	add sp, #0x14
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807BEF0: .4byte gDispIo
_0807BEF4: .4byte 0x0000FFE0
_0807BEF8: .4byte 0x0000E0FF
_0807BEFC: .4byte sub_08078098
_0807BF00: .4byte 0x08DBA9FC
_0807BF04: .4byte sub_0807BDC8

	thumb_func_start sub_0807BF08
sub_0807BF08: @ 0x0807BF08
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r6, #0
	adds r5, #0x4c
	ldrh r2, [r5]
	adds r2, #1
	movs r4, #0
	strh r2, [r5]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x11
	ldr r0, _0807BF58 @ =gDispIo
	mov ip, r0
	mov r3, ip
	adds r3, #0x3c
	movs r0, #0x3f
	ldrb r1, [r3]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r3]
	mov r0, ip
	adds r0, #0x44
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x46
	strb r4, [r0]
	cmp r2, #0x10
	bne _0807BF52
	movs r0, #0
	strh r0, [r5]
	adds r0, r6, #0
	bl Proc_Break
_0807BF52:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807BF58: .4byte gDispIo

	thumb_func_start sub_0807BF5C
sub_0807BF5C: @ 0x0807BF5C
	push {r4, r5, lr}
	sub sp, #0x14
	adds r4, r0, #0
	adds r0, #0x4c
	movs r5, #0
	strh r5, [r0]
	movs r0, #0
	bl sub_080AB634
	movs r2, #0x80
	lsls r2, r2, #1
	movs r3, #0x80
	lsls r3, r3, #2
	str r3, [sp]
	str r3, [sp, #4]
	movs r0, #0x10
	rsbs r0, r0, #0
	str r0, [sp, #8]
	movs r0, #4
	str r0, [sp, #0xc]
	str r4, [sp, #0x10]
	adds r0, r2, #0
	adds r1, r2, #0
	bl sub_08013EF8
	adds r4, #0x64
	strh r5, [r4]
	add sp, #0x14
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807BF9C
sub_0807BF9C: @ 0x0807BF9C
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, #0x4c
	ldrh r2, [r0]
	adds r2, #1
	movs r4, #0
	strh r2, [r0]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x11
	ldr r0, _0807BFE8 @ =gDispIo
	mov ip, r0
	mov r3, ip
	adds r3, #0x3c
	movs r0, #0x3f
	ldrb r1, [r3]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r3]
	movs r0, #0x10
	subs r0, r0, r2
	mov r1, ip
	adds r1, #0x44
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x10
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x46
	strb r4, [r0]
	cmp r2, #0x10
	bne _0807BFE2
	adds r0, r5, #0
	bl Proc_Break
_0807BFE2:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807BFE8: .4byte gDispIo

	thumb_func_start sub_0807BFEC
sub_0807BFEC: @ 0x0807BFEC
	push {r4, r5, lr}
	sub sp, #0x14
	adds r5, r0, #0
	ldr r3, _0807C070 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r4, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r4, [r0]
	ldr r0, _0807C074 @ =0x0000FFE0
	ldrh r2, [r3, #0x3c]
	ands r0, r2
	movs r1, #1
	orrs r0, r1
	ldr r1, _0807C078 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xf8
	lsls r2, r2, #5
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	ldr r0, _0807C07C @ =0x08C01674
	bl Proc_Find
	bl Proc_End
	movs r0, #0x70
	movs r1, #0x20
	bl sub_0807BD00
	adds r0, r5, #0
	adds r0, #0x4c
	strh r4, [r0]
	movs r2, #0x80
	lsls r2, r2, #2
	movs r3, #0x80
	lsls r3, r3, #1
	str r3, [sp]
	str r3, [sp, #4]
	movs r0, #0x10
	rsbs r0, r0, #0
	str r0, [sp, #8]
	movs r0, #4
	str r0, [sp, #0xc]
	str r5, [sp, #0x10]
	adds r0, r2, #0
	adds r1, r2, #0
	bl sub_08013EF8
	add sp, #0x14
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807C070: .4byte gDispIo
_0807C074: .4byte 0x0000FFE0
_0807C078: .4byte 0x0000E0FF
_0807C07C: .4byte 0x08C01674

	thumb_func_start sub_0807C080
sub_0807C080: @ 0x0807C080
	push {r4, r5, r6, lr}
	sub sp, #0x14
	adds r5, r0, #0
	ldr r0, _0807C100 @ =0x02022C00
	adds r1, r0, #0
	subs r1, #0x40
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
	movs r0, #0x1b
	bl sub_08013C18
	movs r2, #0x80
	lsls r2, r2, #1
	movs r3, #0x80
	lsls r3, r3, #2
	movs r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	movs r6, #0x80
	lsls r6, r6, #0x14
	str r6, [sp, #8]
	movs r0, #8
	str r0, [sp, #0xc]
	str r5, [sp, #0x10]
	adds r0, r2, #0
	adds r1, r2, #0
	bl sub_08013EF8
	movs r0, #0xda
	bl GetUnitFromCharId
	adds r4, r0, #0
	cmp r4, #0
	beq _0807C0D2
	adds r1, r5, #0
	bl sub_0807CDD4
	str r6, [r4, #0xc]
_0807C0D2:
	movs r0, #0x86
	bl GetUnitFromCharId
	adds r4, r0, #0
	cmp r4, #0
	beq _0807C0E6
	adds r1, r5, #0
	bl sub_0807CDD4
	str r6, [r4, #0xc]
_0807C0E6:
	ldr r0, _0807C104 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807C0F8
	movs r0, #0xd6
	bl m4aSongNumStart
_0807C0F8:
	add sp, #0x14
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807C100: .4byte 0x02022C00
_0807C104: .4byte gPlaySt

	thumb_func_start sub_0807C108
sub_0807C108: @ 0x0807C108
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x4c
	movs r1, #0
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _0807C126
	adds r0, r5, #0
	bl sub_0807C080
	movs r0, #0xc8
	movs r1, #0x40
	bl sub_0807BD6C
_0807C126:
	ldrh r2, [r4]
	adds r0, r2, #1
	strh r0, [r4]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x13
	ldr r0, _0807C16C @ =gDispIo
	mov ip, r0
	mov r3, ip
	adds r3, #0x3c
	movs r0, #0x3f
	ldrb r1, [r3]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r3]
	movs r0, #0x10
	subs r0, r0, r2
	mov r1, ip
	adds r1, #0x44
	movs r3, #0
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x10
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x46
	strb r3, [r0]
	cmp r2, #0x10
	bne _0807C166
	adds r0, r5, #0
	bl Proc_Break
_0807C166:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807C16C: .4byte gDispIo

	thumb_func_start sub_0807C170
sub_0807C170: @ 0x0807C170
	push {lr}
	movs r0, #0
	bl SetOnHBlankA
	ldr r0, _0807C1DC @ =gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r0, _0807C1E0 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	movs r0, #5
	bl EnableBgSync
	ldr r3, _0807C1E4 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_0807C1DC: .4byte gBg2Tm
_0807C1E0: .4byte gBg0Tm
_0807C1E4: .4byte gDispIo

	thumb_func_start sub_0807C1E8
sub_0807C1E8: @ 0x0807C1E8
	push {lr}
	adds r1, r0, #0
	ldr r0, _0807C1F8 @ =0x08D6F8BC
	bl Proc_Start
	pop {r0}
	bx r0
	.align 2, 0
_0807C1F8: .4byte 0x08D6F8BC

	thumb_func_start sub_0807C1FC
sub_0807C1FC: @ 0x0807C1FC
	push {lr}
	ldr r0, _0807C20C @ =0x08D6F8BC
	bl Proc_Find
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_0807C20C: .4byte 0x08D6F8BC

	thumb_func_start sub_0807C210
sub_0807C210: @ 0x0807C210
	push {lr}
	ldr r0, _0807C224 @ =0x08D6F8BC
	bl Proc_Find
	movs r1, #0
	bl Proc_Goto
	pop {r0}
	bx r0
	.align 2, 0
_0807C224: .4byte 0x08D6F8BC

	thumb_func_start sub_0807C228
sub_0807C228: @ 0x0807C228
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x39
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0807C25C
	ldr r0, [r4, #0x54]
	cmp r0, #1
	bne _0807C25C
	ldr r0, _0807C288 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807C250
	movs r0, #0xe5
	bl m4aSongNumStart
_0807C250:
	movs r0, #0
	str r0, [r4, #0x50]
	ldr r0, [r4, #0x14]
	movs r1, #0
	bl Proc_Goto
_0807C25C:
	ldr r0, [r4, #0x54]
	cmp r0, #0
	bne _0807C27E
	ldr r0, [r4, #0x50]
	movs r1, #0x1f
	ands r0, r1
	cmp r0, #0
	bne _0807C27E
	ldr r0, _0807C288 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807C27E
	movs r0, #0xf8
	bl m4aSongNumStart
_0807C27E:
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0807C288: .4byte gPlaySt

	thumb_func_start sub_0807C28C
sub_0807C28C: @ 0x0807C28C
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	adds r5, r0, #0
	bl sub_08013BCC
	adds r6, r5, #0
	adds r6, #0x4c
	movs r3, #0
	movs r4, #0
	strh r4, [r6]
	ldr r7, _0807C36C @ =gDispIo
	adds r2, r7, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r7, #0
	adds r0, #0x44
	strb r3, [r0]
	adds r1, r7, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x46
	strb r3, [r0]
	ldr r0, _0807C370 @ =0x0000FFE0
	ldrh r2, [r7, #0x3c]
	ands r0, r2
	movs r1, #4
	orrs r0, r1
	ldr r1, _0807C374 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xf8
	lsls r2, r2, #5
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r7, #0x3c]
	bl sub_0807702C
	movs r0, #0
	movs r1, #0
	bl sub_080780E0
	movs r0, #0
	bl SetOnHBlankA
	ldr r0, _0807C378 @ =sub_08078098
	bl SetOnHBlankA
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r7, #0xc]
	ands r0, r2
	strb r0, [r7, #0xc]
	adds r0, r1, #0
	ldrb r2, [r7, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r7, #0x10]
	ldrb r0, [r7, #0x14]
	ands r1, r0
	orrs r1, r2
	strb r1, [r7, #0x14]
	movs r0, #3
	ldrb r1, [r7, #0x18]
	orrs r0, r1
	strb r0, [r7, #0x18]
	movs r0, #7
	bl EnableBgSync
	strh r4, [r6]
	ldr r0, _0807C37C @ =0x08DBA258
	movs r1, #0x80
	lsls r1, r1, #5
	str r1, [sp]
	movs r1, #0xa0
	lsls r1, r1, #6
	str r1, [sp, #4]
	str r4, [sp, #8]
	ldr r1, _0807C380 @ =sub_0807C228
	str r1, [sp, #0xc]
	str r5, [sp, #0x10]
	movs r1, #2
	movs r2, #0
	movs r3, #0
	bl sub_080AB654
	movs r3, #0x80
	lsls r3, r3, #1
	movs r0, #0x80
	str r0, [sp]
	str r0, [sp, #4]
	subs r0, #0x82
	str r0, [sp, #8]
	movs r0, #8
	str r0, [sp, #0xc]
	str r5, [sp, #0x10]
	adds r0, r3, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_08013EF8
	add sp, #0x14
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807C36C: .4byte gDispIo
_0807C370: .4byte 0x0000FFE0
_0807C374: .4byte 0x0000E0FF
_0807C378: .4byte sub_08078098
_0807C37C: .4byte 0x08DBA258
_0807C380: .4byte sub_0807C228

	thumb_func_start sub_0807C384
sub_0807C384: @ 0x0807C384
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x4c
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r4, r0, #0x12
	ldr r2, _0807C3BC @ =gDispIo
	adds r3, r2, #0
	adds r3, #0x3c
	movs r0, #0x3f
	ldrb r1, [r3]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r3]
	adds r0, r2, #0
	adds r0, #0x44
	strb r4, [r0]
	adds r3, r2, #0
	cmp r4, #6
	bgt _0807C3C0
	movs r0, #0x10
	subs r1, r0, r4
	b _0807C3C2
	.align 2, 0
_0807C3BC: .4byte gDispIo
_0807C3C0:
	movs r1, #0xa
_0807C3C2:
	adds r0, r3, #0
	adds r0, #0x45
	movs r3, #0
	strb r1, [r0]
	adds r0, r2, #0
	adds r0, #0x46
	strb r3, [r0]
	cmp r4, #0x10
	bne _0807C3E0
	adds r0, r5, #0
	adds r0, #0x4c
	strh r3, [r0]
	adds r0, r5, #0
	bl Proc_Break
_0807C3E0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807C3E8
sub_0807C3E8: @ 0x0807C3E8
	push {r4, r5, r6, lr}
	sub sp, #0x14
	adds r5, r0, #0
	adds r0, #0x4c
	ldrh r2, [r0]
	adds r2, #1
	movs r4, #0
	strh r2, [r0]
	lsls r2, r2, #0x10
	asrs r6, r2, #0x13
	ldr r0, _0807C460 @ =gDispIo
	mov ip, r0
	mov r3, ip
	adds r3, #0x3c
	movs r0, #0x3f
	ldrb r1, [r3]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r3]
	movs r0, #0x10
	subs r0, r0, r6
	mov r1, ip
	adds r1, #0x44
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x10
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x46
	strb r4, [r0]
	asrs r2, r2, #0x10
	cmp r2, #0x50
	bne _0807C44C
	movs r0, #0x80
	lsls r0, r0, #1
	movs r3, #0x80
	lsls r3, r3, #2
	str r3, [sp]
	str r3, [sp, #4]
	movs r1, #2
	rsbs r1, r1, #0
	str r1, [sp, #8]
	movs r1, #8
	str r1, [sp, #0xc]
	str r5, [sp, #0x10]
	movs r1, #0x80
	movs r2, #0x80
	bl sub_08013EF8
_0807C44C:
	cmp r6, #0x10
	bne _0807C456
	adds r0, r5, #0
	bl Proc_Break
_0807C456:
	add sp, #0x14
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807C460: .4byte gDispIo

	thumb_func_start sub_0807C464
sub_0807C464: @ 0x0807C464
	push {r4, lr}
	movs r4, #0x41
_0807C468:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _0807C482
	ldr r1, [r0]
	cmp r1, #0
	beq _0807C482
	ldrb r1, [r1, #4]
	cmp r1, #0x86
	beq _0807C482
	bl ClearUnit
_0807C482:
	adds r4, #1
	cmp r4, #0xbf
	ble _0807C468
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807C490
sub_0807C490: @ 0x0807C490
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	mov sb, r0
	ldr r0, _0807C574 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
	movs r0, #0
	bl SetOnHBlankA
	ldr r0, _0807C578 @ =gDispIo
	mov ip, r0
	mov r5, ip
	adds r5, #0x3c
	movs r3, #0x3f
	ldrb r1, [r5]
	ands r3, r1
	mov r6, ip
	adds r6, #0x44
	movs r2, #0
	mov r8, r2
	movs r7, #0x45
	add r7, ip
	mov sl, r7
	movs r4, #0x10
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	mov r2, ip
	ldrb r2, [r2, #0xc]
	ands r0, r2
	mov r7, ip
	strb r0, [r7, #0xc]
	adds r0, r1, #0
	ldrb r2, [r7, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r7, #0x10]
	ldrb r7, [r7, #0x14]
	ands r1, r7
	movs r0, #2
	orrs r1, r0
	mov r0, ip
	strb r1, [r0, #0x14]
	movs r0, #3
	mov r1, ip
	ldrb r1, [r1, #0x18]
	orrs r0, r1
	mov r2, ip
	strb r0, [r2, #0x18]
	movs r0, #0x40
	orrs r3, r0
	strb r3, [r5]
	strb r4, [r6]
	mov r7, sl
	strb r4, [r7]
	mov r1, r8
	ldr r0, _0807C57C @ =0x030027D6
	strb r1, [r0]
	ldr r0, _0807C580 @ =0x0000FFE0
	ldrh r2, [r2, #0x3c]
	ands r0, r2
	movs r1, #1
	orrs r0, r1
	ldr r1, _0807C584 @ =0x0000E0FF
	ands r0, r1
	movs r7, #0xf8
	lsls r7, r7, #5
	adds r1, r7, #0
	orrs r0, r1
	mov r1, ip
	strh r0, [r1, #0x3c]
	movs r0, #0x70
	movs r1, #0x20
	bl sub_0807BD00
	bl sub_0807C464
	bl RefreshEntityMaps
	bl RefreshUnitSprites
	movs r2, #0x80
	lsls r2, r2, #2
	movs r3, #0x80
	lsls r3, r3, #1
	str r3, [sp]
	str r3, [sp, #4]
	ldr r0, _0807C588 @ =0xFFDFFFFE
	str r0, [sp, #8]
	movs r0, #4
	str r0, [sp, #0xc]
	mov r7, sb
	str r7, [sp, #0x10]
	adds r0, r2, #0
	adds r1, r2, #0
	bl sub_08013EF8
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807C574: .4byte gBg2Tm
_0807C578: .4byte gDispIo
_0807C57C: .4byte 0x030027D6
_0807C580: .4byte 0x0000FFE0
_0807C584: .4byte 0x0000E0FF
_0807C588: .4byte 0xFFDFFFFE

	thumb_func_start sub_0807C58C
sub_0807C58C: @ 0x0807C58C
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0xc8
	movs r1, #0x40
	bl sub_0807BD6C
	adds r4, #0x4c
	movs r0, #0
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0807C5A4
sub_0807C5A4: @ 0x0807C5A4
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x4c
	ldrh r0, [r4]
	adds r2, r0, #1
	strh r2, [r4]
	lsls r0, r0, #0x10
	asrs r6, r0, #0x13
	ldr r0, _0807C64C @ =gDispIo
	mov ip, r0
	mov r3, ip
	adds r3, #0x3c
	movs r0, #0x3f
	ldrb r1, [r3]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r3]
	movs r0, #0x10
	subs r0, r0, r6
	mov r1, ip
	adds r1, #0x44
	movs r3, #0
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x10
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x46
	strb r3, [r0]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	cmp r2, #8
	bne _0807C5F6
	movs r0, #0x86
	bl GetUnitFromCharId
	adds r1, r5, #0
	bl sub_0807CDD4
_0807C5F6:
	ldrh r4, [r4]
	cmp r4, #0x10
	bne _0807C60E
	ldr r0, _0807C650 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807C60E
	movs r0, #0xd6
	bl m4aSongNumStart
_0807C60E:
	cmp r6, #0x10
	bne _0807C644
	ldr r0, _0807C654 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl EnableBgSync
	ldr r2, _0807C64C @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, r5, #0
	bl Proc_Break
_0807C644:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807C64C: .4byte gDispIo
_0807C650: .4byte gPlaySt
_0807C654: .4byte gBg0Tm

	thumb_func_start sub_0807C658
sub_0807C658: @ 0x0807C658
	push {lr}
	adds r1, r0, #0
	ldr r0, _0807C668 @ =0x08D6F95C
	bl Proc_StartBlocking
	pop {r0}
	bx r0
	.align 2, 0
_0807C668: .4byte 0x08D6F95C

	thumb_func_start sub_0807C66C
sub_0807C66C: @ 0x0807C66C
	push {r4, r5, r6, lr}
	sub sp, #0x28
	adds r6, r0, #0
	movs r0, #0
	bl InitBgs
	bl ResetText
	ldr r1, _0807C6E0 @ =0x06009000
	mov r0, sp
	movs r2, #0x80
	movs r3, #0
	bl InitTextFont
	mov r0, sp
	bl SetTextFont
	movs r4, #0
	str r4, [sp, #0x18]
	add r0, sp, #0x18
	movs r1, #0xc0
	lsls r1, r1, #0x13
	ldr r5, _0807C6E4 @ =0x01000008
	adds r2, r5, #0
	bl CpuFastSet
	str r4, [sp, #0x1c]
	add r0, sp, #0x1c
	ldr r1, _0807C6E8 @ =0x06008000
	adds r2, r5, #0
	bl CpuFastSet
	add r4, sp, #0x20
	adds r0, r4, #0
	movs r1, #0x14
	bl InitText
	ldr r1, _0807C6EC @ =0x020246AA
	adds r0, r4, #0
	bl PutText
	movs r0, #0xa0
	adds r1, r6, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #0
	adds r3, r6, #0
	bl Text_InsertDrawString
	movs r0, #0
	bl SetTextFont
	add sp, #0x28
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807C6E0: .4byte 0x06009000
_0807C6E4: .4byte 0x01000008
_0807C6E8: .4byte 0x06008000
_0807C6EC: .4byte 0x020246AA

	thumb_func_start sub_0807C6F0
sub_0807C6F0: @ 0x0807C6F0
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #0xc
	adds r4, r0, #0
	ldr r0, [r4, #0x58]
	adds r0, #2
	str r0, [r4, #0x58]
	movs r0, #1
	movs r1, #0
	bl sub_08077CEC
	ldr r1, [r4, #0x58]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r2, #0
	mov r8, r2
	str r2, [sp]
	movs r6, #0x1e
	str r6, [sp, #4]
	movs r5, #8
	str r5, [sp, #8]
	movs r2, #7
	movs r3, #7
	bl sub_080781C8
	movs r0, #1
	movs r1, #0xa0
	bl sub_08077CEC
	ldr r1, [r4, #0x58]
	lsls r1, r1, #0x11
	asrs r1, r1, #0x10
	mov r2, r8
	str r2, [sp]
	str r6, [sp, #4]
	str r5, [sp, #8]
	movs r2, #3
	movs r3, #0xf
	bl sub_080781C8
	bl sub_08077898
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807C754
sub_0807C754: @ 0x0807C754
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	ldr r4, _0807C7B4 @ =gBg1Tm
	adds r0, r4, #0
	movs r1, #0
	bl TmFill
	ldr r0, _0807C7B8 @ =0x08452D90
	ldr r1, _0807C7BC @ =0x06000800
	bl sub_08013688
	ldr r1, _0807C7C0 @ =0x08452E90
	ldr r2, _0807C7C4 @ =0x00007040
	adds r0, r4, #0
	bl TmApplyTsa_thm
	ldr r0, _0807C7C8 @ =0x08452E70
	movs r1, #0xe0
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #2
	bl EnableBgSync
	bl sub_0807702C
	ldr r0, _0807C7CC @ =sub_08078130
	bl SetOnHBlankA
	ldr r0, _0807C7D0 @ =sub_0807C6F0
	adds r1, r5, #0
	bl sub_080AA20C
	ldr r0, _0807C7D4 @ =0x0857E570
	ldr r1, _0807C7D8 @ =0x08453438
	movs r2, #7
	str r2, [sp]
	str r5, [sp, #4]
	movs r2, #2
	movs r3, #8
	bl sub_080AB7F4
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807C7B4: .4byte gBg1Tm
_0807C7B8: .4byte 0x08452D90
_0807C7BC: .4byte 0x06000800
_0807C7C0: .4byte 0x08452E90
_0807C7C4: .4byte 0x00007040
_0807C7C8: .4byte 0x08452E70
_0807C7CC: .4byte sub_08078130
_0807C7D0: .4byte sub_0807C6F0
_0807C7D4: .4byte 0x0857E570
_0807C7D8: .4byte 0x08453438

	thumb_func_start sub_0807C7DC
sub_0807C7DC: @ 0x0807C7DC
	push {lr}
	bl sub_080AB82C
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807C7E8
sub_0807C7E8: @ 0x0807C7E8
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	bl sub_080AB82C
	ldr r3, _0807C894 @ =gDispIo
	movs r0, #1
	ldrb r1, [r3, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r3, #1]
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r6, [r2]
	ands r0, r6
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r2, #9
	movs r0, #0x10
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x46
	strb r1, [r0]
	ldr r0, _0807C898 @ =0x0000FFE0
	ldrh r1, [r3, #0x3c]
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	ldr r1, _0807C89C @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xc0
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	ldr r0, _0807C8A0 @ =0x06008000
	ldr r1, _0807C8A4 @ =0x06001000
	movs r2, #0xa0
	lsls r2, r2, #5
	bl CpuFastSet
	ldr r0, _0807C8A8 @ =0x02022960
	ldr r6, _0807C8AC @ =0xFFFFFF00
	adds r1, r0, r6
	movs r2, #0x38
	bl CpuFastSet
	ldr r0, _0807C8B0 @ =0x00008080
	adds r3, r0, #0
	ldr r2, _0807C8B4 @ =gBg3Tm
	ldr r1, _0807C8B8 @ =gBg2Tm
	movs r4, #0x80
	lsls r4, r4, #3
_0807C86C:
	ldrh r6, [r2]
	adds r0, r3, r6
	strh r0, [r1]
	adds r2, #2
	adds r1, #2
	subs r4, #1
	cmp r4, #0
	bne _0807C86C
	bl EnablePalSync
	movs r0, #4
	bl EnableBgSync
	adds r0, r5, #0
	adds r0, #0x4c
	strh r4, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807C894: .4byte gDispIo
_0807C898: .4byte 0x0000FFE0
_0807C89C: .4byte 0x0000E0FF
_0807C8A0: .4byte 0x06008000
_0807C8A4: .4byte 0x06001000
_0807C8A8: .4byte 0x02022960
_0807C8AC: .4byte 0xFFFFFF00
_0807C8B0: .4byte 0x00008080
_0807C8B4: .4byte gBg3Tm
_0807C8B8: .4byte gBg2Tm

	thumb_func_start sub_0807C8BC
sub_0807C8BC: @ 0x0807C8BC
	ldr r2, _0807C8D8 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_0807C8D8: .4byte gDispIo

	thumb_func_start sub_0807C8DC
sub_0807C8DC: @ 0x0807C8DC
	push {r4, lr}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, _0807C944 @ =gBg3Tm
	movs r1, #0x80
	lsls r1, r1, #8
	movs r2, #0x37
	str r2, [sp]
	movs r2, #8
	movs r3, #8
	bl sub_080B7980
	movs r0, #8
	bl EnableBgSync
	ldr r3, _0807C948 @ =gDispIo
	movs r2, #4
	rsbs r2, r2, #0
	adds r0, r2, #0
	ldrb r1, [r3, #0xc]
	ands r0, r1
	strb r0, [r3, #0xc]
	adds r0, r2, #0
	ldrb r1, [r3, #0x10]
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	strb r0, [r3, #0x10]
	adds r0, r2, #0
	ldrb r1, [r3, #0x14]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	ands r2, r0
	strb r2, [r3, #0x18]
	ldr r0, _0807C94C @ =0x08583EE4
	ldr r1, _0807C950 @ =0x08453538
	movs r2, #7
	str r2, [sp]
	ldr r2, [r4, #0x14]
	str r2, [sp, #4]
	movs r2, #2
	movs r3, #8
	bl sub_080AB7F4
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807C944: .4byte gBg3Tm
_0807C948: .4byte gDispIo
_0807C94C: .4byte 0x08583EE4
_0807C950: .4byte 0x08453538

	thumb_func_start sub_0807C954
sub_0807C954: @ 0x0807C954
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x4c
	ldrh r2, [r1]
	adds r0, r2, #1
	strh r0, [r1]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x11
	ldr r0, _0807C9A0 @ =gDispIo
	mov ip, r0
	mov r3, ip
	adds r3, #0x3c
	movs r0, #0x3f
	ldrb r1, [r3]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r3]
	mov r0, ip
	adds r0, #0x44
	movs r1, #0
	strb r2, [r0]
	movs r0, #0x10
	subs r0, r0, r2
	adds r3, #9
	strb r0, [r3]
	mov r0, ip
	adds r0, #0x46
	strb r1, [r0]
	cmp r2, #0x10
	bne _0807C99A
	adds r0, r4, #0
	bl Proc_Break
_0807C99A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807C9A0: .4byte gDispIo

	thumb_func_start sub_0807C9A4
sub_0807C9A4: @ 0x0807C9A4
	push {lr}
	ldr r0, _0807CA10 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _0807CA14 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	movs r0, #6
	bl EnableBgSync
	ldr r3, _0807CA18 @ =gDispIo
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r0, #0
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	bl sub_080AA230
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0
	.align 2, 0
_0807CA10: .4byte gBg1Tm
_0807CA14: .4byte gBg2Tm
_0807CA18: .4byte gDispIo

	thumb_func_start sub_0807CA1C
sub_0807CA1C: @ 0x0807CA1C
	push {lr}
	adds r1, r0, #0
	ldr r0, _0807CA2C @ =0x08D6F9D4
	bl Proc_StartBlocking
	pop {r0}
	bx r0
	.align 2, 0
_0807CA2C: .4byte 0x08D6F9D4

	thumb_func_start sub_0807CA30
sub_0807CA30: @ 0x0807CA30
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #0xc
	adds r4, r0, #0
	ldr r0, [r4, #0x58]
	adds r0, #1
	str r0, [r4, #0x58]
	movs r0, #1
	movs r1, #0
	bl sub_08077CEC
	ldr r1, [r4, #0x58]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r2, #0
	mov r8, r2
	str r2, [sp]
	movs r6, #0x3c
	str r6, [sp, #4]
	movs r5, #0x10
	str r5, [sp, #8]
	movs r2, #3
	movs r3, #2
	bl sub_080781C8
	movs r0, #1
	movs r1, #0xa0
	bl sub_08077CEC
	ldr r1, [r4, #0x58]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	mov r2, r8
	str r2, [sp]
	str r6, [sp, #4]
	str r5, [sp, #8]
	movs r2, #2
	movs r3, #4
	bl sub_080781C8
	bl sub_08077898
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807CA94
sub_0807CA94: @ 0x0807CA94
	movs r1, #0
	str r1, [r0, #0x58]
	bx lr
	.align 2, 0

	thumb_func_start sub_0807CA9C
sub_0807CA9C: @ 0x0807CA9C
	push {lr}
	ldr r2, [r0, #0x58]
	adds r2, #1
	str r2, [r0, #0x58]
	lsls r1, r2, #0xe
	lsrs r1, r1, #0x10
	lsls r2, r2, #0xf
	lsrs r2, r2, #0x10
	movs r0, #2
	bl SetBgOffset
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807CAB8
sub_0807CAB8: @ 0x0807CAB8
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r3, _0807CB54 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r4, #0
	strb r4, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r4, [r0]
	ldr r0, _0807CB58 @ =0x0000FFE0
	ldrh r2, [r3, #0x3c]
	ands r0, r2
	movs r1, #4
	orrs r0, r1
	ldr r1, _0807CB5C @ =0x0000E0FF
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	ldr r0, _0807CB60 @ =0x081BD6C4
	movs r1, #0xa0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0807CB64 @ =0x08406218
	ldr r1, _0807CB68 @ =0x06004000
	bl sub_08013688
	ldr r0, _0807CB6C @ =gBg2Tm
	ldr r1, _0807CB70 @ =0x081BD6E4
	movs r2, #0xa4
	lsls r2, r2, #7
	bl TmApplyTsa_thm
	movs r0, #0xc
	bl EnableBgSync
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	adds r0, r5, #0
	adds r0, #0x4c
	strh r4, [r0]
	str r4, [r5, #0x58]
	bl sub_0807702C
	ldr r0, _0807CB74 @ =sub_0807850C
	bl SetOnHBlankA
	ldr r0, _0807CB78 @ =sub_0807CA30
	adds r1, r5, #0
	bl sub_080AA20C
	ldr r0, _0807CB7C @ =0x08D6FA14
	movs r1, #0
	bl Proc_Start
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807CB54: .4byte gDispIo
_0807CB58: .4byte 0x0000FFE0
_0807CB5C: .4byte 0x0000E0FF
_0807CB60: .4byte 0x081BD6C4
_0807CB64: .4byte 0x08406218
_0807CB68: .4byte 0x06004000
_0807CB6C: .4byte gBg2Tm
_0807CB70: .4byte 0x081BD6E4
_0807CB74: .4byte sub_0807850C
_0807CB78: .4byte sub_0807CA30
_0807CB7C: .4byte 0x08D6FA14

	thumb_func_start sub_0807CB80
sub_0807CB80: @ 0x0807CB80
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x4c
	ldrh r2, [r1]
	adds r0, r2, #1
	strh r0, [r1]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x11
	ldr r0, _0807CBCC @ =gDispIo
	mov ip, r0
	mov r3, ip
	adds r3, #0x3c
	movs r0, #0x3f
	ldrb r1, [r3]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r3]
	mov r0, ip
	adds r0, #0x44
	movs r1, #0
	strb r2, [r0]
	movs r0, #0x10
	subs r0, r0, r2
	adds r3, #9
	strb r0, [r3]
	mov r0, ip
	adds r0, #0x46
	strb r1, [r0]
	cmp r2, #0x10
	bne _0807CBC6
	adds r0, r4, #0
	bl Proc_Break
_0807CBC6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807CBCC: .4byte gDispIo

	thumb_func_start sub_0807CBD0
sub_0807CBD0: @ 0x0807CBD0
	push {r4, lr}
	ldr r1, _0807CC20 @ =gDispIo
	mov ip, r1
	mov r3, ip
	adds r3, #0x3c
	movs r1, #0x3f
	ldrb r2, [r3]
	ands r1, r2
	movs r2, #0x40
	orrs r1, r2
	strb r1, [r3]
	mov r2, ip
	adds r2, #0x44
	movs r3, #0
	movs r1, #0x10
	strb r1, [r2]
	mov r1, ip
	adds r1, #0x45
	strb r3, [r1]
	adds r1, #1
	strb r3, [r1]
	ldr r1, _0807CC24 @ =0x0000FFE0
	mov r4, ip
	ldrh r4, [r4, #0x3c]
	ands r1, r4
	movs r2, #4
	orrs r1, r2
	ldr r2, _0807CC28 @ =0x0000E0FF
	ands r1, r2
	movs r4, #0xc0
	lsls r4, r4, #5
	adds r2, r4, #0
	orrs r1, r2
	mov r2, ip
	strh r1, [r2, #0x3c]
	adds r0, #0x4c
	strh r3, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807CC20: .4byte gDispIo
_0807CC24: .4byte 0x0000FFE0
_0807CC28: .4byte 0x0000E0FF

	thumb_func_start sub_0807CC2C
sub_0807CC2C: @ 0x0807CC2C
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x4c
	ldrh r2, [r1]
	adds r0, r2, #1
	strh r0, [r1]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x12
	ldr r0, _0807CC78 @ =gDispIo
	mov ip, r0
	mov r3, ip
	adds r3, #0x3c
	movs r0, #0x3f
	ldrb r1, [r3]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r3]
	movs r0, #0x10
	subs r0, r0, r2
	mov r1, ip
	adds r1, #0x44
	movs r3, #0
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r3, [r0]
	cmp r2, #0xa
	bne _0807CC72
	adds r0, r4, #0
	bl Proc_Break
_0807CC72:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807CC78: .4byte gDispIo

	thumb_func_start sub_0807CC7C
sub_0807CC7C: @ 0x0807CC7C
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x4c
	ldrh r2, [r1]
	adds r0, r2, #1
	strh r0, [r1]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x12
	ldr r0, _0807CCC8 @ =gDispIo
	mov ip, r0
	mov r3, ip
	adds r3, #0x3c
	movs r0, #0x3f
	ldrb r1, [r3]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r3]
	movs r0, #0x10
	subs r0, r0, r2
	mov r1, ip
	adds r1, #0x44
	movs r3, #0
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r3, [r0]
	cmp r2, #0x10
	bne _0807CCC2
	adds r0, r4, #0
	bl Proc_Break
_0807CCC2:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807CCC8: .4byte gDispIo

	thumb_func_start sub_0807CCCC
sub_0807CCCC: @ 0x0807CCCC
	push {lr}
	ldr r0, _0807CD28 @ =0x08D6FA14
	bl Proc_Find
	bl Proc_End
	movs r0, #0
	bl SetOnHBlankA
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, _0807CD2C @ =gBg2Tm
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
	ldr r3, _0807CD30 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	pop {r0}
	bx r0
	.align 2, 0
_0807CD28: .4byte 0x08D6FA14
_0807CD2C: .4byte gBg2Tm
_0807CD30: .4byte gDispIo

	thumb_func_start sub_0807CD34
sub_0807CD34: @ 0x0807CD34
	push {lr}
	adds r1, r0, #0
	ldr r0, _0807CD44 @ =0x08D6FA2C
	bl Proc_Start
	pop {r0}
	bx r0
	.align 2, 0
_0807CD44: .4byte 0x08D6FA2C

	thumb_func_start sub_0807CD48
sub_0807CD48: @ 0x0807CD48
	push {lr}
	ldr r0, _0807CD5C @ =0x08D6FA2C
	bl Proc_Find
	movs r1, #0
	bl Proc_Goto
	pop {r0}
	bx r0
	.align 2, 0
_0807CD5C: .4byte 0x08D6FA2C

	thumb_func_start sub_0807CD60
sub_0807CD60: @ 0x0807CD60
	push {lr}
	ldr r0, _0807CD74 @ =0x08D6FA2C
	bl Proc_Find
	movs r1, #1
	bl Proc_Goto
	pop {r0}
	bx r0
	.align 2, 0
_0807CD74: .4byte 0x08D6FA2C

	thumb_func_start sub_0807CD78
sub_0807CD78: @ 0x0807CD78
	push {lr}
	ldr r0, _0807CD88 @ =0x08D6FA2C
	bl Proc_Find
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_0807CD88: .4byte 0x08D6FA2C

	thumb_func_start sub_0807CD8C
sub_0807CD8C: @ 0x0807CD8C
	adds r0, #0x4c
	movs r1, #0
	strh r1, [r0]
	bx lr

	thumb_func_start sub_0807CD94
sub_0807CD94: @ 0x0807CD94
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r5, [r6, #0x54]
	adds r4, r6, #0
	adds r4, #0x4c
	movs r0, #0
	ldrsh r1, [r4, r0]
	adds r0, r5, #0
	bl sub_08025698
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x40
	bne _0807CDCC
	ldr r0, [r5, #0xc]
	movs r1, #9
	orrs r0, r1
	str r0, [r5, #0xc]
	bl RefreshEntityMaps
	bl RefreshUnitSprites
	adds r0, r6, #0
	bl Proc_Break
_0807CDCC:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807CDD4
sub_0807CDD4: @ 0x0807CDD4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0807CDE8 @ =0x08D6FAC4
	bl Proc_Start
	str r4, [r0, #0x54]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807CDE8: .4byte 0x08D6FAC4

	thumb_func_start sub_0807CDEC
sub_0807CDEC: @ 0x0807CDEC
	push {lr}
	bl sub_0809F9F8
	cmp r0, #0
	bgt _0807CDFA
	movs r0, #0
	b _0807CDFC
_0807CDFA:
	movs r0, #1
_0807CDFC:
	pop {r1}
	bx r1

	thumb_func_start sub_0807CE00
sub_0807CE00: @ 0x0807CE00
	push {lr}
	bl sub_0809F9F8
	cmp r0, #1
	bgt _0807CE0E
	movs r0, #0
	b _0807CE10
_0807CE0E:
	movs r0, #1
_0807CE10:
	pop {r1}
	bx r1

	thumb_func_start sub_0807CE14
sub_0807CE14: @ 0x0807CE14
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #0xc
	adds r4, r0, #0
	adds r4, #0x64
	ldrh r0, [r4]
	adds r0, #8
	strh r0, [r4]
	movs r0, #1
	movs r1, #0
	bl sub_08077CEC
	adds r5, r0, #0
	movs r0, #0
	bl sub_080AB8FC
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r2, #0
	ldrsh r1, [r4, r2]
	str r0, [sp]
	movs r0, #0x50
	mov r8, r0
	str r0, [sp, #4]
	movs r6, #1
	str r6, [sp, #8]
	adds r0, r5, #0
	movs r2, #2
	movs r3, #2
	bl sub_080781C8
	movs r0, #1
	movs r1, #0xa0
	bl sub_08077CEC
	adds r5, r0, #0
	movs r0, #0
	bl sub_080AB8B4
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r2, #0
	ldrsh r1, [r4, r2]
	str r0, [sp]
	mov r0, r8
	str r0, [sp, #4]
	str r6, [sp, #8]
	adds r0, r5, #0
	movs r2, #3
	movs r3, #2
	bl sub_080781C8
	bl sub_08077898
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807CE90
sub_0807CE90: @ 0x0807CE90
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	ldr r0, _0807CF68 @ =0x08403398
	ldr r1, [r0, #4]
	ldr r0, [r0]
	str r0, [sp]
	str r1, [sp, #4]
	ldr r3, _0807CF6C @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r4, #0
	strb r4, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r4, [r0]
	ldr r0, _0807CF70 @ =0x0000FFE0
	ldrh r2, [r3, #0x3c]
	ands r0, r2
	movs r1, #1
	orrs r0, r1
	ldr r1, _0807CF74 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xf0
	lsls r2, r2, #5
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	ldr r0, _0807CF78 @ =0x081A7634
	ldr r1, _0807CF7C @ =0x06000800
	bl sub_08013688
	ldr r0, _0807CF80 @ =0x081A7F00
	movs r1, #0xa0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0807CF84 @ =gBg0Tm
	ldr r1, [r5, #0x58]
	lsls r1, r1, #2
	add r1, sp
	ldr r1, [r1]
	ldr r2, _0807CF88 @ =0x00005040
	bl TmApplyTsa_thm
	ldr r1, [r5, #0x2c]
	rsbs r1, r1, #0
	movs r0, #0xff
	ands r1, r0
	ldr r2, [r5, #0x30]
	rsbs r2, r2, #0
	ands r2, r0
	movs r0, #0
	bl SetBgOffset
	movs r0, #1
	bl EnableBgSync
	adds r0, r5, #0
	adds r0, #0x4c
	strh r4, [r0]
	bl sub_0807702C
	ldr r0, _0807CF8C @ =sub_080782AC
	bl SetOnHBlankA
	ldr r0, _0807CF90 @ =sub_0807CE14
	adds r1, r5, #0
	bl sub_080AA20C
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807CF68: .4byte 0x08403398
_0807CF6C: .4byte gDispIo
_0807CF70: .4byte 0x0000FFE0
_0807CF74: .4byte 0x0000E0FF
_0807CF78: .4byte 0x081A7634
_0807CF7C: .4byte 0x06000800
_0807CF80: .4byte 0x081A7F00
_0807CF84: .4byte gBg0Tm
_0807CF88: .4byte 0x00005040
_0807CF8C: .4byte sub_080782AC
_0807CF90: .4byte sub_0807CE14

	thumb_func_start sub_0807CF94
sub_0807CF94: @ 0x0807CF94
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x4c
	ldrh r2, [r4]
	adds r0, r2, #1
	strh r0, [r4]
	lsls r2, r2, #0x10
	asrs r2, r2, #0xf
	ldr r0, _0807CFE8 @ =gDispIo
	mov ip, r0
	mov r3, ip
	adds r3, #0x3c
	movs r0, #0x3f
	ldrb r1, [r3]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r3]
	mov r0, ip
	adds r0, #0x44
	movs r3, #0
	strb r2, [r0]
	asrs r1, r2, #1
	movs r0, #0x10
	subs r0, r0, r1
	mov r1, ip
	adds r1, #0x45
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x46
	strb r3, [r0]
	cmp r2, #0x10
	bne _0807CFE0
	strh r3, [r4]
	adds r0, r5, #0
	bl Proc_Break
_0807CFE0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807CFE8: .4byte gDispIo

	thumb_func_start sub_0807CFEC
sub_0807CFEC: @ 0x0807CFEC
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, #0x4c
	ldrh r1, [r0]
	adds r1, #2
	strh r1, [r0]
	movs r2, #0
	ldrsh r1, [r0, r2]
	adds r0, r1, #0
	cmp r1, #0
	bge _0807D004
	adds r0, #0xf
_0807D004:
	asrs r0, r0, #4
	lsls r0, r0, #4
	subs r0, r1, r0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #7
	bgt _0807D02A
	adds r0, r1, #0
	cmp r1, #0
	bge _0807D01A
	adds r0, r1, #7
_0807D01A:
	asrs r0, r0, #3
	lsls r0, r0, #3
	subs r0, r1, r0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r1, #0x10
	subs r4, r1, r0
	b _0807D040
_0807D02A:
	adds r0, r1, #0
	cmp r1, #0
	bge _0807D032
	adds r0, r1, #7
_0807D032:
	asrs r0, r0, #3
	lsls r0, r0, #3
	subs r0, r1, r0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r4, r0, #0
	adds r4, #8
_0807D040:
	ldr r3, _0807D084 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r2, #0
	strb r4, [r0]
	asrs r1, r4, #1
	movs r0, #0x10
	subs r0, r0, r1
	adds r1, r3, #0
	adds r1, #0x45
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r2, [r0]
	adds r0, r5, #0
	adds r0, #0x4c
	ldrh r1, [r0]
	cmp r1, #0x10
	bne _0807D07E
	strh r2, [r0]
	adds r0, r5, #0
	bl Proc_Break
_0807D07E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807D084: .4byte gDispIo

	thumb_func_start sub_0807D088
sub_0807D088: @ 0x0807D088
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x4c
	ldrh r2, [r1]
	adds r0, r2, #1
	strh r0, [r1]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x11
	lsls r2, r2, #0x10
	asrs r4, r2, #0x10
	ldr r0, _0807D0DC @ =gDispIo
	mov ip, r0
	mov r3, ip
	adds r3, #0x3c
	movs r0, #0x3f
	ldrb r1, [r3]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r3]
	movs r0, #0x10
	subs r0, r0, r4
	mov r1, ip
	adds r1, #0x44
	movs r3, #0
	strb r0, [r1]
	asrs r2, r2, #0x11
	adds r2, #8
	mov r0, ip
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r3, [r0]
	cmp r4, #0x10
	bne _0807D0D6
	adds r0, r5, #0
	bl Proc_Break
_0807D0D6:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807D0DC: .4byte gDispIo

	thumb_func_start sub_0807D0E0
sub_0807D0E0: @ 0x0807D0E0
	push {lr}
	ldr r0, _0807D118 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl EnableBgSync
	movs r0, #0
	bl SetOnHBlankA
	ldr r2, _0807D11C @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_0807D118: .4byte gBg0Tm
_0807D11C: .4byte gDispIo

	thumb_func_start sub_0807D120
sub_0807D120: @ 0x0807D120
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r1, r3, #0
	ldr r0, _0807D13C @ =0x08D6FAE4
	bl Proc_StartBlocking
	str r4, [r0, #0x58]
	str r5, [r0, #0x2c]
	str r6, [r0, #0x30]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807D13C: .4byte 0x08D6FAE4

	thumb_func_start sub_0807D140
sub_0807D140: @ 0x0807D140
	push {r4, r5, r6, lr}
	sub sp, #0x14
	adds r5, r0, #0
	bl sub_08013BCC
	adds r0, r5, #0
	adds r0, #0x4c
	movs r3, #0
	movs r4, #0
	strh r4, [r0]
	ldr r6, _0807D20C @ =gDispIo
	adds r2, r6, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r6, #0
	adds r0, #0x44
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r3, [r0]
	ldr r0, _0807D210 @ =0x0000FFE0
	ldrh r2, [r6, #0x3c]
	ands r0, r2
	movs r1, #4
	orrs r0, r1
	ldr r1, _0807D214 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xf8
	lsls r2, r2, #5
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r6, #0x3c]
	bl sub_0807702C
	movs r0, #0
	movs r1, #0
	bl sub_080780E0
	movs r0, #0
	bl SetOnHBlankA
	ldr r0, _0807D218 @ =sub_08078098
	bl SetOnHBlankA
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r6, #0xc]
	ands r0, r2
	strb r0, [r6, #0xc]
	adds r0, r1, #0
	ldrb r2, [r6, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r6, #0x10]
	ldrb r0, [r6, #0x14]
	ands r1, r0
	orrs r1, r2
	strb r1, [r6, #0x14]
	movs r0, #3
	ldrb r1, [r6, #0x18]
	orrs r0, r1
	strb r0, [r6, #0x18]
	movs r0, #7
	bl EnableBgSync
	ldr r0, _0807D21C @ =0x08DBABD0
	movs r1, #0x80
	lsls r1, r1, #5
	str r1, [sp]
	movs r1, #0x80
	lsls r1, r1, #6
	str r1, [sp, #4]
	str r4, [sp, #8]
	str r4, [sp, #0xc]
	str r5, [sp, #0x10]
	movs r1, #2
	movs r2, #0
	movs r3, #0
	bl sub_080AB654
	ldr r0, _0807D220 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807D204
	ldr r0, _0807D224 @ =0x000002FA
	bl m4aSongNumStart
_0807D204:
	add sp, #0x14
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807D20C: .4byte gDispIo
_0807D210: .4byte 0x0000FFE0
_0807D214: .4byte 0x0000E0FF
_0807D218: .4byte sub_08078098
_0807D21C: .4byte 0x08DBABD0
_0807D220: .4byte gPlaySt
_0807D224: .4byte 0x000002FA

	thumb_func_start sub_0807D228
sub_0807D228: @ 0x0807D228
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x4c
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r1]
	bl sub_08013BCC
	adds r0, r4, #0
	bl sub_0807B750
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807D248
sub_0807D248: @ 0x0807D248
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x4c
	ldrh r0, [r4]
	adds r0, #0x10
	strh r0, [r4]
	movs r0, #0
	ldrsh r2, [r4, r0]
	adds r0, r2, #0
	adds r1, r2, #0
	movs r3, #1
	bl sub_08013C48
	movs r0, #0x80
	lsls r0, r0, #2
	ldrh r1, [r4]
	cmp r1, r0
	bne _0807D27E
	adds r0, r5, #0
	bl sub_0807B778
	movs r0, #0
	strh r0, [r4]
	adds r0, r5, #0
	bl Proc_Break
_0807D27E:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0807D284
sub_0807D284: @ 0x0807D284
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r0, #0x4c
	ldrh r2, [r0]
	adds r2, #1
	movs r4, #0
	strh r2, [r0]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x12
	ldr r5, _0807D30C @ =gDispIo
	adds r3, r5, #0
	adds r3, #0x3c
	movs r0, #0x3f
	ldrb r1, [r3]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r3]
	movs r0, #0x10
	subs r0, r0, r2
	adds r1, r5, #0
	adds r1, #0x44
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x46
	strb r4, [r0]
	cmp r2, #0x10
	bne _0807D306
	ldr r0, _0807D310 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r5, #0xc]
	ands r0, r2
	strb r0, [r5, #0xc]
	adds r0, r1, #0
	ldrb r2, [r5, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r5, #0x10]
	ldrb r0, [r5, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r5, #0x14]
	movs r0, #3
	ldrb r1, [r5, #0x18]
	orrs r0, r1
	strb r0, [r5, #0x18]
	movs r0, #0
	bl SetOnHBlankA
	adds r0, r6, #0
	bl Proc_Break
_0807D306:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807D30C: .4byte gDispIo
_0807D310: .4byte gBg2Tm

	thumb_func_start sub_0807D314
sub_0807D314: @ 0x0807D314
	push {lr}
	adds r1, r0, #0
	ldr r0, _0807D324 @ =0x08D6FB1C
	bl Proc_StartBlocking
	pop {r0}
	bx r0
	.align 2, 0
_0807D324: .4byte 0x08D6FB1C

	thumb_func_start sub_0807D328
sub_0807D328: @ 0x0807D328
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	ldr r4, _0807D368 @ =0x06013000
	adds r0, r4, #0
	movs r1, #0xe
	bl sub_08083C54
	movs r1, #4
	rsbs r1, r1, #0
	ldr r2, _0807D36C @ =0x00000FBD
	movs r0, #0xe
	str r0, [sp]
	str r5, [sp, #4]
	movs r0, #0
	adds r3, r4, #0
	bl sub_08084068
	bl sub_08083BA8
	movs r2, #0xd8
	lsls r2, r2, #1
	adds r1, r2, #0
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_08083B9C
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807D368: .4byte 0x06013000
_0807D36C: .4byte 0x00000FBD

	thumb_func_start sub_0807D370
sub_0807D370: @ 0x0807D370
	push {r4, lr}
	ldr r2, _0807D3D0 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0xc0
	ldrb r3, [r1]
	orrs r0, r3
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x46
	movs r0, #0x10
	strb r0, [r1]
	bl sub_08009E60
	cmp r0, #1
	bne _0807D3DA
	movs r4, #1
_0807D39E:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _0807D3D4
	ldr r1, [r2]
	cmp r1, #0
	beq _0807D3D4
	ldr r0, [r2, #4]
	ldr r1, [r1, #0x28]
	ldr r0, [r0, #0x28]
	orrs r1, r0
	movs r0, #0x80
	lsls r0, r0, #2
	ands r1, r0
	cmp r1, #0
	beq _0807D3D4
	ldr r0, [r2, #0xc]
	movs r1, #0xb
	rsbs r1, r1, #0
	ands r0, r1
	str r0, [r2, #0xc]
	b _0807D3DA
	.align 2, 0
_0807D3D0: .4byte gDispIo
_0807D3D4:
	adds r4, #1
	cmp r4, #0x3f
	ble _0807D39E
_0807D3DA:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0807D3E0
sub_0807D3E0: @ 0x0807D3E0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0807D3F8 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x11
	beq _0807D3FC
	cmp r0, #0x14
	beq _0807D40A
	b _0807D416
	.align 2, 0
_0807D3F8: .4byte gPlaySt
_0807D3FC:
	movs r0, #0x6a
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0807D41E
	b _0807D416
_0807D40A:
	movs r0, #0x6a
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807D41E
_0807D416:
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
_0807D41E:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0807D424
sub_0807D424: @ 0x0807D424
	push {lr}
	ldr r2, _0807D470 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0xc0
	ldrb r3, [r1]
	orrs r0, r3
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x46
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _0807D474 @ =0x0000FFE0
	ldrh r1, [r2, #0x3c]
	ands r0, r1
	movs r1, #0x1f
	orrs r0, r1
	strh r0, [r2, #0x3c]
	movs r0, #0x1c
	bl sub_0800B72C
	bl sub_08013BCC
	movs r3, #0xf0
	lsls r3, r3, #4
	movs r0, #0xc0
	movs r1, #0xc0
	movs r2, #0xc0
	bl sub_08013C48
	pop {r0}
	bx r0
	.align 2, 0
_0807D470: .4byte gDispIo
_0807D474: .4byte 0x0000FFE0

	thumb_func_start sub_0807D478
sub_0807D478: @ 0x0807D478
	push {r4, lr}
	movs r0, #0x80
	movs r1, #2
	movs r2, #1
	bl InitTalk
	ldr r4, _0807D4AC @ =gPlaySt
	ldrb r0, [r4, #0x1b]
	cmp r0, #2
	bne _0807D496
	ldr r2, _0807D4B0 @ =0x00000FBA
	movs r0, #1
	movs r1, #1
	bl sub_08007EAC
_0807D496:
	ldrb r4, [r4, #0x1b]
	cmp r4, #3
	bne _0807D4A6
	ldr r2, _0807D4B4 @ =0x00000FBB
	movs r0, #1
	movs r1, #1
	bl sub_08007EAC
_0807D4A6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807D4AC: .4byte gPlaySt
_0807D4B0: .4byte 0x00000FBA
_0807D4B4: .4byte 0x00000FBB

	thumb_func_start sub_0807D4B8
sub_0807D4B8: @ 0x0807D4B8
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	bl sub_0800EC08
	movs r0, #0
	bl InitBgs
	ldr r2, _0807D528 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x46
	movs r0, #0x10
	strb r0, [r1]
	bl sub_08015A0C
	ldr r4, _0807D52C @ =0x06013000
	adds r0, r4, #0
	movs r1, #0xe
	bl sub_08083C54
	ldr r2, _0807D530 @ =0x00000FBC
	movs r0, #0xe
	str r0, [sp]
	str r5, [sp, #4]
	movs r0, #0
	movs r1, #0
	adds r3, r4, #0
	bl sub_08084068
	bl sub_08083BA8
	movs r2, #0x88
	lsls r2, r2, #1
	adds r1, r2, #0
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_08083B9C
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807D528: .4byte gDispIo
_0807D52C: .4byte 0x06013000
_0807D530: .4byte 0x00000FBC

	thumb_func_start sub_0807D534
sub_0807D534: @ 0x0807D534
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	bl InitBgs
	ldr r2, _0807D590 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x46
	movs r0, #0x10
	strb r0, [r1]
	bl sub_08015A0C
	ldr r1, _0807D594 @ =gPlaySt
	movs r0, #0x80
	ldrb r1, [r1, #0x14]
	ands r0, r1
	cmp r0, #0
	bne _0807D58A
	movs r0, #0x90
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807D58A
	ldr r0, _0807D598 @ =0x08D6FC14
	adds r1, r4, #0
	bl Proc_StartBlocking
	movs r0, #0x90
	bl sub_0807A0E0
_0807D58A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807D590: .4byte gDispIo
_0807D594: .4byte gPlaySt
_0807D598: .4byte 0x08D6FC14

	thumb_func_start sub_0807D59C
sub_0807D59C: @ 0x0807D59C
	push {lr}
	adds r3, r0, #0
	movs r0, #0x80
	lsls r0, r0, #1
	movs r1, #0x90
	movs r2, #0xa
	bl StartBgmVolumeChange
	pop {r0}
	bx r0

	thumb_func_start sub_0807D5B0
sub_0807D5B0: @ 0x0807D5B0
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r7, r0, #0
	movs r0, #0x28
	bl GetUnitFromCharId
	adds r6, r0, #0
	bl sub_0804A9F8
	bl ResetText
	movs r0, #0
	str r0, [sp]
	movs r0, #7
	movs r1, #8
	movs r2, #0x11
	movs r3, #4
	bl sub_0804A4CC
	ldr r0, _0807D650 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807D5E8
	ldr r0, _0807D654 @ =0x0000037B
	bl m4aSongNumStart
_0807D5E8:
	ldr r5, _0807D658 @ =0x02022EA2
	adds r1, r5, #0
	adds r1, #0xe
	movs r4, #8
	str r4, [sp]
	ldr r0, _0807D65C @ =0x084033A0
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	adds r1, r5, #0
	adds r1, #0x18
	movs r0, #2
	str r0, [sp]
	ldr r0, _0807D660 @ =0x084033AC
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	adds r0, r5, #0
	adds r0, #0x1e
	movs r2, #8
	ldrsb r2, [r6, r2]
	movs r1, #2
	bl sub_08006068
	adds r1, r5, #0
	adds r1, #0x20
	str r4, [sp]
	ldr r0, _0807D664 @ =0x084033B4
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	adds r1, r7, #0
	adds r1, #0x4c
	movs r0, #0x78
	strh r0, [r1]
	movs r0, #3
	bl EnableBgSync
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807D650: .4byte gPlaySt
_0807D654: .4byte 0x0000037B
_0807D658: .4byte 0x02022EA2
_0807D65C: .4byte 0x084033A0
_0807D660: .4byte 0x084033AC
_0807D664: .4byte 0x084033B4

	thumb_func_start sub_0807D668
sub_0807D668: @ 0x0807D668
	push {lr}
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x4c
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0807D68A
	ldr r0, _0807D694 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #3
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0807D690
_0807D68A:
	adds r0, r2, #0
	bl Proc_Break
_0807D690:
	pop {r0}
	bx r0
	.align 2, 0
_0807D694: .4byte gpKeySt

	thumb_func_start sub_0807D698
sub_0807D698: @ 0x0807D698
	push {lr}
	ldr r0, _0807D6B4 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _0807D6B8 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	movs r0, #3
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
_0807D6B4: .4byte gBg1Tm
_0807D6B8: .4byte gBg0Tm

	thumb_func_start sub_0807D6BC
sub_0807D6BC: @ 0x0807D6BC
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #1
	bl sub_0808F834
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807D6D4
	ldr r0, _0807D6DC @ =0x08D6FB5C
	adds r1, r4, #0
	bl Proc_StartBlocking
_0807D6D4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807D6DC: .4byte 0x08D6FB5C

	thumb_func_start sub_0807D6E0
sub_0807D6E0: @ 0x0807D6E0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	movs r1, #0
	str r1, [r0, #0x2c]
	bl sub_0807702C
	ldr r2, _0807D7BC @ =0x030027CC
	mov ip, r2
	ldr r0, _0807D7C0 @ =0x0000FFE0
	ldrh r1, [r2]
	ands r0, r1
	movs r1, #0x1f
	orrs r0, r1
	strh r0, [r2]
	subs r2, #0x3c
	mov r0, ip
	subs r0, #0xf
	movs r1, #0
	strb r1, [r0]
	adds r0, #4
	strb r1, [r0]
	mov r1, ip
	subs r1, #0x10
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	movs r0, #0x20
	mov r8, r0
	mov r0, r8
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	movs r2, #8
	rsbs r2, r2, #0
	add r2, ip
	mov sb, r2
	mov r1, r8
	ldrb r0, [r2]
	orrs r1, r0
	mov r7, ip
	subs r7, #6
	movs r2, #0x21
	rsbs r2, r2, #0
	mov sl, r2
	mov r0, sl
	ldrb r2, [r7]
	ands r0, r2
	movs r6, #1
	orrs r1, r6
	movs r5, #2
	orrs r1, r5
	movs r4, #4
	orrs r1, r4
	movs r3, #8
	orrs r1, r3
	movs r2, #0x10
	orrs r1, r2
	orrs r0, r6
	orrs r0, r5
	orrs r0, r4
	orrs r0, r3
	orrs r0, r2
	mov r2, r8
	orrs r1, r2
	mov r2, sb
	strb r1, [r2]
	mov r1, sl
	ands r0, r1
	strb r0, [r7]
	movs r0, #0x3f
	mov r2, ip
	ldrb r2, [r2]
	ands r0, r2
	movs r1, #0x80
	orrs r0, r1
	mov r1, ip
	strb r0, [r1]
	movs r2, #0
	strb r2, [r1, #8]
	strb r2, [r1, #9]
	strb r2, [r1, #0xa]
	ldr r0, _0807D7C4 @ =sub_08077FB4
	bl SetOnHBlankA
	ldr r0, _0807D7C8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807D7AE
	ldr r0, _0807D7CC @ =0x00000269
	bl m4aSongNumStart
_0807D7AE:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807D7BC: .4byte 0x030027CC
_0807D7C0: .4byte 0x0000FFE0
_0807D7C4: .4byte sub_08077FB4
_0807D7C8: .4byte gPlaySt
_0807D7CC: .4byte 0x00000269

	thumb_func_start sub_0807D7D0
sub_0807D7D0: @ 0x0807D7D0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	movs r5, #0x40
	movs r0, #0xf0
	ldr r4, [r7, #0x2c]
	adds r4, #1
	str r4, [r7, #0x2c]
	muls r0, r4, r0
	muls r0, r4, r0
	movs r6, #0x80
	lsls r6, r6, #5
	adds r1, r6, #0
	bl __divsi3
	mov r8, r0
	subs r5, r5, r4
	lsls r0, r5, #4
	muls r0, r5, r0
	adds r1, r6, #0
	bl __divsi3
	movs r4, #0x10
	subs r4, r4, r0
	movs r0, #0x78
	movs r1, #0x68
	mov r2, r8
	bl sub_08077E1C
	ldr r3, _0807D844 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x80
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r4, [r0]
	ldr r0, [r7, #0x2c]
	cmp r0, #0x40
	blt _0807D83A
	adds r0, r7, #0
	bl Proc_Break
_0807D83A:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807D844: .4byte gDispIo

	thumb_func_start sub_0807D848
sub_0807D848: @ 0x0807D848
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #1
	bl ApplyMapChange
	movs r0, #1
	bl AddMapChangeTrap
	bl RefreshTerrainMap
	bl sub_0802C300
	bl RenderMap
	movs r0, #0
	str r0, [r4, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807D870
sub_0807D870: @ 0x0807D870
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	movs r1, #0x80
	movs r5, #0xf0
	ldr r4, [r7, #0x2c]
	adds r4, #1
	str r4, [r7, #0x2c]
	subs r1, r1, r4
	adds r0, r1, #0
	muls r0, r5, r0
	muls r0, r1, r0
	movs r6, #0x80
	lsls r6, r6, #7
	adds r1, r6, #0
	bl __divsi3
	adds r5, r0, #0
	lsls r0, r4, #4
	muls r0, r4, r0
	adds r1, r6, #0
	bl __divsi3
	movs r4, #0x10
	subs r4, r4, r0
	movs r0, #0x78
	movs r1, #0x30
	adds r2, r5, #0
	bl sub_08077E1C
	ldr r3, _0807D8E0 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x80
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r4, [r0]
	ldr r0, [r7, #0x2c]
	cmp r0, #0x80
	blt _0807D8D8
	adds r0, r7, #0
	bl Proc_Break
_0807D8D8:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807D8E0: .4byte gDispIo

	thumb_func_start sub_0807D8E4
sub_0807D8E4: @ 0x0807D8E4
	push {lr}
	movs r0, #0
	bl SetOnHBlankA
	ldr r3, _0807D934 @ =gDispIo
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r0, #0
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	subs r0, #0x21
	ldrb r1, [r3, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r3, #1]
	adds r2, r3, #0
	adds r2, #0x34
	movs r0, #0x20
	ldrb r1, [r2]
	orrs r1, r0
	strb r1, [r2]
	adds r1, r3, #0
	adds r1, #0x36
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0807D934: .4byte gDispIo

	thumb_func_start sub_0807D938
sub_0807D938: @ 0x0807D938
	push {lr}
	adds r1, r0, #0
	ldr r0, _0807D948 @ =0x08D6FC44
	bl Proc_StartBlocking
	pop {r0}
	bx r0
	.align 2, 0
_0807D948: .4byte 0x08D6FC44

	thumb_func_start sub_0807D94C
sub_0807D94C: @ 0x0807D94C
	push {lr}
	movs r0, #0xf
	movs r1, #0x15
	movs r2, #1
	bl sub_0809F88C
	pop {r0}
	bx r0

	thumb_func_start sub_0807D95C
sub_0807D95C: @ 0x0807D95C
	push {lr}
	movs r0, #0xf
	movs r1, #0x15
	movs r2, #2
	bl sub_0809F88C
	pop {r0}
	bx r0

	thumb_func_start sub_0807D96C
sub_0807D96C: @ 0x0807D96C
	push {lr}
	movs r0, #0xf
	movs r1, #0x15
	movs r2, #3
	bl sub_0809F88C
	pop {r0}
	bx r0

	thumb_func_start sub_0807D97C
sub_0807D97C: @ 0x0807D97C
	ldr r1, _0807D98C @ =gBmSt
	adds r1, #0x3d
	movs r0, #2
	ldrb r1, [r1]
	ands r0, r1
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bx lr
	.align 2, 0
_0807D98C: .4byte gBmSt

	thumb_func_start sub_0807D990
sub_0807D990: @ 0x0807D990
	push {lr}
	movs r0, #0x18
	bl GetUnitFromCharId
	movs r1, #0x6b
	bl GetUnitItemSlot
	adds r1, r0, #0
	mvns r1, r1
	rsbs r0, r1, #0
	orrs r0, r1
	lsrs r0, r0, #0x1f
	pop {r1}
	bx r1

	thumb_func_start sub_0807D9AC
sub_0807D9AC: @ 0x0807D9AC
	push {r4, lr}
	ldr r4, _0807D9DC @ =gActionSt
	ldrb r0, [r4, #0x11]
	cmp r0, #0x17
	bne _0807D9E0
	ldrb r0, [r4, #0xc]
	bl GetUnit
	ldrb r4, [r4, #0x12]
	lsls r1, r4, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r0, [r0]
	bl GetItemIndex
	adds r4, r0, #0
	movs r0, #0x6b
	bl GetItemIndex
	cmp r4, r0
	bne _0807D9E0
	movs r0, #1
	b _0807D9E2
	.align 2, 0
_0807D9DC: .4byte gActionSt
_0807D9E0:
	movs r0, #0
_0807D9E2:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_0807D9E8
sub_0807D9E8: @ 0x0807D9E8
	push {lr}
	bl RefreshEntityMaps
	bl RenderMap
	bl RefreshUnitSprites
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807D9FC
sub_0807D9FC: @ 0x0807D9FC
	push {lr}
	movs r0, #8
	bl GetUnitFromCharId
	adds r1, r0, #0
	movs r0, #0xc0
	ldrb r2, [r1, #0xb]
	ands r0, r2
	cmp r0, #0
	bne _0807DA20
	ldr r0, _0807DA1C @ =0x00000407
	ldrh r1, [r1, #0x10]
	cmp r1, r0
	bne _0807DA20
	movs r0, #1
	b _0807DA22
	.align 2, 0
_0807DA1C: .4byte 0x00000407
_0807DA20:
	movs r0, #0
_0807DA22:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807DA28
sub_0807DA28: @ 0x0807DA28
	push {lr}
	bl sub_0807AAB0
	movs r1, #0
	cmp r0, #1
	bgt _0807DA36
	movs r1, #1
_0807DA36:
	adds r0, r1, #0
	pop {r1}
	bx r1

	thumb_func_start sub_0807DA3C
sub_0807DA3C: @ 0x0807DA3C
	push {lr}
	movs r0, #0x17
	bl sub_0807A0B4
	pop {r0}
	bx r0

	thumb_func_start sub_0807DA48
sub_0807DA48: @ 0x0807DA48
	push {lr}
	movs r0, #8
	bl GetUnitFromCharId
	movs r2, #0
	movs r1, #0xc0
	ldrb r0, [r0, #0xb]
	ands r1, r0
	cmp r1, #0
	bne _0807DA5E
	movs r2, #1
_0807DA5E:
	adds r0, r2, #0
	pop {r1}
	bx r1

	thumb_func_start sub_0807DA64
sub_0807DA64: @ 0x0807DA64
	push {lr}
	ldr r0, _0807DA70 @ =0x00002710
	bl SetGold
	pop {r0}
	bx r0
	.align 2, 0
_0807DA70: .4byte 0x00002710

	thumb_func_start sub_0807DA74
sub_0807DA74: @ 0x0807DA74
	push {lr}
	movs r0, #8
	bl sub_0807A0C8
	bl sub_0807AA5C
	pop {r0}
	bx r0

	thumb_func_start sub_0807DA84
sub_0807DA84: @ 0x0807DA84
	push {lr}
	movs r0, #8
	bl sub_0807A0C8
	bl sub_0807AA5C
	pop {r0}
	bx r0

	thumb_func_start sub_0807DA94
sub_0807DA94: @ 0x0807DA94
	push {lr}
	movs r0, #8
	bl sub_0807A0C8
	movs r0, #7
	bl sub_0807A0C8
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807DAA8
sub_0807DAA8: @ 0x0807DAA8
	push {lr}
	movs r0, #8
	bl sub_0807A0C8
	movs r0, #9
	bl sub_0807A0C8
	movs r0, #7
	bl sub_0807A0C8
	bl sub_0807AA5C
	pop {r0}
	bx r0

	thumb_func_start sub_0807DAC4
sub_0807DAC4: @ 0x0807DAC4
	push {lr}
	movs r0, #8
	bl sub_0807A0C8
	bl sub_0807AA5C
	pop {r0}
	bx r0

	thumb_func_start sub_0807DAD4
sub_0807DAD4: @ 0x0807DAD4
	push {lr}
	movs r0, #9
	bl sub_0807A0C8
	movs r0, #0xa
	bl sub_0807A0C8
	movs r0, #7
	bl sub_0807A0C8
	movs r0, #8
	bl sub_0807A0C8
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807DAF4
sub_0807DAF4: @ 0x0807DAF4
	push {lr}
	movs r0, #8
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807DB06
	movs r0, #0
	b _0807DB18
_0807DB06:
	ldr r0, _0807DB1C @ =gBmMapTerrain
	ldr r0, [r0]
	ldr r0, [r0, #0x38]
	movs r1, #0x25
	ldrb r0, [r0, #6]
	eors r1, r0
	rsbs r0, r1, #0
	orrs r0, r1
	lsrs r0, r0, #0x1f
_0807DB18:
	pop {r1}
	bx r1
	.align 2, 0
_0807DB1C: .4byte gBmMapTerrain

	thumb_func_start sub_0807DB20
sub_0807DB20: @ 0x0807DB20
	push {lr}
	movs r0, #6
	bl sub_0807A0C8
	movs r0, #7
	bl sub_0807A0C8
	bl sub_0807AA5C
	movs r0, #2
	bl sub_0807A0C8
	pop {r0}
	bx r0

	thumb_func_start sub_0807DB3C
sub_0807DB3C: @ 0x0807DB3C
	push {r4, r5, lr}
	movs r5, #0
	movs r0, #0x85
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807DB5E
	movs r0, #0x84
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	movs r5, #0x74
	cmp r0, #0
	beq _0807DB6C
	movs r5, #0x73
	b _0807DB70
_0807DB5E:
	movs r0, #0x84
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807DB6C
	movs r5, #0x75
_0807DB6C:
	cmp r5, #0
	beq _0807DB86
_0807DB70:
	movs r0, #0x2d
	bl GetUnitFromCharId
	adds r4, r0, #0
	adds r0, r5, #0
	bl MakeNewItem
	adds r1, r0, #0
	adds r0, r4, #0
	bl UnitAddItem
_0807DB86:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0807DB8C
sub_0807DB8C: @ 0x0807DB8C
	ldr r0, _0807DBA8 @ =gActiveUnit
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	cmp r0, #0x2f
	beq _0807DBAC
	cmp r0, #0x30
	beq _0807DBAC
	cmp r0, #0x31
	beq _0807DBAC
	cmp r0, #0x2e
	beq _0807DBAC
	movs r0, #0
	b _0807DBAE
	.align 2, 0
_0807DBA8: .4byte gActiveUnit
_0807DBAC:
	movs r0, #1
_0807DBAE:
	bx lr

	thumb_func_start sub_0807DBB0
sub_0807DBB0: @ 0x0807DBB0
	push {lr}
	movs r0, #0xb
	bl sub_0807A0C8
	movs r0, #0xc
	bl sub_0807A0C8
	bl sub_0807AA5C
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807DBC8
sub_0807DBC8: @ 0x0807DBC8
	push {r4, lr}
	movs r0, #0x10
	bl GetUnitFromCharId
	adds r4, r0, #0
	movs r0, #0x3e
	bl MakeNewItem
	adds r1, r0, #0
	adds r0, r4, #0
	bl UnitAddItem
	movs r0, #0x10
	bl GetUnitFromCharId
	adds r4, r0, #0
	movs r0, #0x6b
	bl MakeNewItem
	adds r1, r0, #0
	adds r0, r4, #0
	bl UnitAddItem
	movs r0, #0x75
	bl GetUnitFromCharId
	adds r4, r0, #0
	movs r0, #0x16
	bl MakeNewItem
	adds r1, r0, #0
	adds r0, r4, #0
	bl UnitAddItem
	movs r0, #0x75
	bl GetUnitFromCharId
	adds r4, r0, #0
	movs r0, #0x6b
	bl MakeNewItem
	adds r1, r0, #0
	adds r0, r4, #0
	bl UnitAddItem
	movs r0, #0x76
	bl GetUnitFromCharId
	adds r4, r0, #0
	movs r0, #0x16
	bl MakeNewItem
	adds r1, r0, #0
	adds r0, r4, #0
	bl UnitAddItem
	movs r0, #0x76
	bl GetUnitFromCharId
	adds r4, r0, #0
	movs r0, #0x6b
	bl MakeNewItem
	adds r1, r0, #0
	adds r0, r4, #0
	bl UnitAddItem
	movs r0, #0x77
	bl GetUnitFromCharId
	adds r4, r0, #0
	movs r0, #0x1c
	bl MakeNewItem
	adds r1, r0, #0
	adds r0, r4, #0
	bl UnitAddItem
	movs r0, #0x77
	bl GetUnitFromCharId
	adds r4, r0, #0
	movs r0, #0x6b
	bl MakeNewItem
	adds r1, r0, #0
	adds r0, r4, #0
	bl UnitAddItem
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0807DC80
sub_0807DC80: @ 0x0807DC80
	push {lr}
	movs r0, #0x10
	bl GetUnitFromCharId
	movs r2, #0
	movs r1, #0xc0
	ldrb r0, [r0, #0xb]
	ands r1, r0
	cmp r1, #0
	bne _0807DC96
	movs r2, #1
_0807DC96:
	adds r0, r2, #0
	pop {r1}
	bx r1

	thumb_func_start sub_0807DC9C
sub_0807DC9C: @ 0x0807DC9C
	push {lr}
	movs r0, #0xa
	bl sub_0807A0C8
	movs r0, #0xb
	bl sub_0807A0C8
	movs r0, #0xc
	bl sub_0807A0C8
	movs r0, #0xd
	bl sub_0807A0C8
	bl sub_0807AA5C
	movs r0, #0xe
	bl sub_0807A0C8
	movs r0, #0xf
	bl sub_0807A0C8
	movs r0, #0x10
	bl sub_0807A0C8
	pop {r0}
	bx r0

	thumb_func_start sub_0807DCD0
sub_0807DCD0: @ 0x0807DCD0
	push {r4, lr}
	movs r0, #0xe
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	rsbs r1, r0, #0
	orrs r1, r0
	lsrs r4, r1, #0x1f
	movs r0, #0xf
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807DCF0
	adds r4, #1
_0807DCF0:
	movs r0, #0x10
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807DD02
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_0807DD02:
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807DD0C
sub_0807DD0C: @ 0x0807DD0C
	push {lr}
	bl sub_0807DCD0
	movs r1, #0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0807DD1C
	movs r1, #1
_0807DD1C:
	adds r0, r1, #0
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807DD24
sub_0807DD24: @ 0x0807DD24
	push {lr}
	bl sub_0807DCD0
	movs r1, #0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _0807DD36
	movs r1, #1
_0807DD36:
	adds r0, r1, #0
	pop {r1}
	bx r1

	thumb_func_start sub_0807DD3C
sub_0807DD3C: @ 0x0807DD3C
	push {lr}
	bl sub_0807DCD0
	movs r1, #0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #2
	bhi _0807DD4E
	movs r1, #1
_0807DD4E:
	adds r0, r1, #0
	pop {r1}
	bx r1

	thumb_func_start sub_0807DD54
sub_0807DD54: @ 0x0807DD54
	push {lr}
	ldr r0, _0807DD78 @ =gBmMapUnit
	ldr r0, [r0]
	ldr r0, [r0, #0x20]
	ldrb r0, [r0, #3]
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0807DD7C
	movs r0, #0xc0
	ldrb r1, [r1, #0xb]
	ands r0, r1
	cmp r0, #0
	bne _0807DD7C
	movs r0, #1
	b _0807DD7E
	.align 2, 0
_0807DD78: .4byte gBmMapUnit
_0807DD7C:
	movs r0, #0
_0807DD7E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807DD84
sub_0807DD84: @ 0x0807DD84
	push {lr}
	movs r0, #8
	bl sub_0807A0C8
	movs r0, #9
	bl sub_0807A0C8
	movs r0, #0xa
	bl sub_0807A0C8
	movs r0, #0xb
	bl sub_0807A0C8
	movs r0, #0xc
	bl sub_0807A0C8
	bl sub_0807AA5C
	pop {r0}
	bx r0

	thumb_func_start sub_0807DDAC
sub_0807DDAC: @ 0x0807DDAC
	push {lr}
	bl sub_0807AA5C
	movs r0, #2
	bl sub_0807A0C8
	pop {r0}
	bx r0

	thumb_func_start sub_0807DDBC
sub_0807DDBC: @ 0x0807DDBC
	push {lr}
	bl sub_0807AA5C
	movs r0, #7
	bl sub_0807A0C8
	pop {r0}
	bx r0

	thumb_func_start sub_0807DDCC
sub_0807DDCC: @ 0x0807DDCC
	push {lr}
	movs r0, #8
	bl sub_0807A0C8
	bl sub_0807AA5C
	pop {r0}
	bx r0

	thumb_func_start sub_0807DDDC
sub_0807DDDC: @ 0x0807DDDC
	push {lr}
	movs r0, #0x26
	bl GetUnitFromCharId
	cmp r0, #0
	beq _0807DE02
	ldrb r0, [r0, #8]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #6
	ble _0807DE02
	movs r0, #0xa
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807DE02
	movs r0, #1
	b _0807DE04
_0807DE02:
	movs r0, #0
_0807DE04:
	pop {r1}
	bx r1

	thumb_func_start nullsub_69
nullsub_69: @ 0x0807DE08
	bx lr
	.align 2, 0

	thumb_func_start sub_0807DE0C
sub_0807DE0C: @ 0x0807DE0C
	push {lr}
	movs r0, #0xb
	bl sub_0807A0C8
	movs r0, #0xc
	bl sub_0807A0C8
	movs r0, #0xd
	bl sub_0807A0C8
	movs r0, #0xe
	bl sub_0807A0C8
	movs r0, #0xf
	bl sub_0807A0C8
	bl sub_0807AA5C
	movs r0, #7
	bl sub_0807A0C8
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807DE3C
sub_0807DE3C: @ 0x0807DE3C
	ldr r2, _0807DE68 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r3, [r2, #0xc]
	ands r0, r3
	strb r0, [r2, #0xc]
	adds r0, r1, #0
	ldrb r3, [r2, #0x10]
	ands r0, r3
	movs r3, #1
	orrs r0, r3
	strb r0, [r2, #0x10]
	ldrb r0, [r2, #0x14]
	ands r1, r0
	orrs r1, r3
	strb r1, [r2, #0x14]
	movs r0, #3
	ldrb r1, [r2, #0x18]
	orrs r0, r1
	strb r0, [r2, #0x18]
	bx lr
	.align 2, 0
_0807DE68: .4byte gDispIo

	thumb_func_start sub_0807DE6C
sub_0807DE6C: @ 0x0807DE6C
	push {lr}
	movs r0, #1
	bl GetUnitFromCharId
	movs r1, #6
	movs r2, #2
	bl SetUnitStatusExt
	pop {r0}
	bx r0

	thumb_func_start sub_0807DE80
sub_0807DE80: @ 0x0807DE80
	push {lr}
	movs r0, #9
	bl sub_0807A0C8
	movs r0, #0xa
	bl sub_0807A0C8
	movs r0, #0xb
	bl sub_0807A0C8
	movs r0, #0xc
	bl sub_0807A0C8
	bl sub_0807AA5C
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807DEA4
sub_0807DEA4: @ 0x0807DEA4
	push {lr}
	movs r0, #0xa
	bl sub_0807A0C8
	movs r0, #0xb
	bl sub_0807A0C8
	bl sub_0807AA5C
	movs r0, #2
	bl sub_0807A0C8
	pop {r0}
	bx r0

	thumb_func_start sub_0807DEC0
sub_0807DEC0: @ 0x0807DEC0
	push {lr}
	ldr r0, _0807DEEC @ =gPlaySt
	ldrb r0, [r0, #0xf]
	cmp r0, #0
	bne _0807DEE8
	ldr r0, _0807DEF0 @ =gActiveUnit
	ldr r0, [r0]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #4]
	cmp r0, #0x3c
	beq _0807DEF4
	cmp r0, #0x3d
	beq _0807DEF4
	bl RandNextB
	movs r1, #0xb
	bl DivRem
	cmp r0, #0
	beq _0807DEF4
_0807DEE8:
	movs r0, #0
	b _0807DEF6
	.align 2, 0
_0807DEEC: .4byte gPlaySt
_0807DEF0: .4byte gActiveUnit
_0807DEF4:
	movs r0, #1
_0807DEF6:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807DEFC
sub_0807DEFC: @ 0x0807DEFC
	push {lr}
	bl sub_0807AA5C
	movs r0, #2
	bl sub_0807A0C8
	pop {r0}
	bx r0

	thumb_func_start sub_0807DF0C
sub_0807DF0C: @ 0x0807DF0C
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #1
_0807DF12:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _0807DF2E
	ldr r0, [r0]
	cmp r0, #0
	beq _0807DF2E
	ldrb r0, [r0, #4]
	bl sub_080A0BA8
	adds r0, r5, r0
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
_0807DF2E:
	adds r4, #1
	cmp r4, #0x3f
	ble _0807DF12
	ldr r0, _0807DF40 @ =0x030049FC
	strh r5, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807DF40: .4byte 0x030049FC

	thumb_func_start sub_0807DF44
sub_0807DF44: @ 0x0807DF44
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #1
_0807DF4A:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _0807DF62
	ldr r0, [r0]
	cmp r0, #0
	beq _0807DF62
	ldrb r0, [r0, #4]
	bl sub_080A0BA8
	adds r5, r5, r0
_0807DF62:
	adds r4, #1
	cmp r4, #0x3f
	ble _0807DF4A
	ldr r0, _0807DF78 @ =0x030049FA
	ldrh r0, [r0]
	subs r5, r5, r0
	ldr r0, _0807DF7C @ =0x000002BB
	cmp r5, r0
	bgt _0807DF80
	movs r0, #0
	b _0807DF82
	.align 2, 0
_0807DF78: .4byte 0x030049FA
_0807DF7C: .4byte 0x000002BB
_0807DF80:
	movs r0, #1
_0807DF82:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_0807DF88
sub_0807DF88: @ 0x0807DF88
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #1
_0807DF8E:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _0807DFC4
	ldr r3, [r2]
	cmp r3, #0
	beq _0807DFC4
	ldr r0, [r2, #0xc]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	bne _0807DFC4
	ldrb r1, [r3, #4]
	subs r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bls _0807DFBA
	cmp r1, #0x2d
	bne _0807DFC4
_0807DFBA:
	movs r0, #8
	ldrsb r0, [r2, r0]
	adds r0, r5, r0
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
_0807DFC4:
	adds r4, #1
	cmp r4, #0x3f
	ble _0807DF8E
	cmp r5, #0x31
	bhi _0807DFD2
	movs r0, #0
	b _0807DFD4
_0807DFD2:
	movs r0, #1
_0807DFD4:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807DFDC
sub_0807DFDC: @ 0x0807DFDC
	push {lr}
	sub sp, #4
	movs r1, #3
	str r1, [sp]
	movs r1, #0x10
	movs r2, #1
	movs r3, #2
	bl sub_0801F208
	add sp, #4
	pop {r0}
	bx r0

	thumb_func_start sub_0807DFF4
sub_0807DFF4: @ 0x0807DFF4
	push {lr}
	movs r0, #0x25
	bl GetUnitFromCharId
	ldrb r1, [r0, #0x11]
	ldrb r0, [r0, #0x10]
	subs r0, #0x10
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #2
	bhi _0807E012
	cmp r1, #2
	bhi _0807E012
	movs r0, #1
	b _0807E014
_0807E012:
	movs r0, #0
_0807E014:
	pop {r1}
	bx r1

	thumb_func_start sub_0807E018
sub_0807E018: @ 0x0807E018
	push {lr}
	movs r0, #0xb
	bl sub_0807A0C8
	movs r0, #0xc
	bl sub_0807A0C8
	movs r0, #0xd
	bl sub_0807A0C8
	movs r0, #2
	bl sub_0807A0C8
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807E038
sub_0807E038: @ 0x0807E038
	push {lr}
	movs r0, #8
	bl sub_0807A0C8
	movs r0, #9
	bl sub_0807A0C8
	movs r0, #7
	bl sub_0807A0C8
	pop {r0}
	bx r0

	thumb_func_start sub_0807E050
sub_0807E050: @ 0x0807E050
	push {lr}
	movs r0, #8
	bl sub_0807A0C8
	movs r0, #9
	bl sub_0807A0C8
	movs r0, #0xa
	bl sub_0807A0C8
	movs r0, #7
	bl sub_0807A0C8
	bl sub_0807AA5C
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807E074
sub_0807E074: @ 0x0807E074
	push {lr}
	bl GetGold
	movs r2, #0
	ldr r1, _0807E08C @ =0x00004E1F
	cmp r0, r1
	ble _0807E084
	movs r2, #1
_0807E084:
	adds r0, r2, #0
	pop {r1}
	bx r1
	.align 2, 0
_0807E08C: .4byte 0x00004E1F

	thumb_func_start sub_0807E090
sub_0807E090: @ 0x0807E090
	push {lr}
	ldr r0, _0807E09C @ =0x00004E20
	bl sub_0807A6BC
	pop {r0}
	bx r0
	.align 2, 0
_0807E09C: .4byte 0x00004E20

	thumb_func_start sub_0807E0A0
sub_0807E0A0: @ 0x0807E0A0
	push {lr}
	movs r0, #7
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807E0BE
	movs r0, #0xd
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0807E0BE
	movs r0, #1
	b _0807E0C0
_0807E0BE:
	movs r0, #0
_0807E0C0:
	pop {r1}
	bx r1

	thumb_func_start sub_0807E0C4
sub_0807E0C4: @ 0x0807E0C4
	push {lr}
	movs r0, #0xe
	bl sub_0807A0C8
	bl sub_0807AA5C
	pop {r0}
	bx r0

	thumb_func_start sub_0807E0D4
sub_0807E0D4: @ 0x0807E0D4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	mov r8, r0
	movs r2, #0
	movs r6, #0
	movs r4, #1
_0807E0E4:
	adds r0, r4, #0
	str r2, [sp]
	bl GetUnit
	adds r5, r0, #0
	adds r7, r4, #1
	ldr r2, [sp]
	cmp r5, #0
	beq _0807E134
	ldr r0, [r5]
	cmp r0, #0
	beq _0807E134
	ldr r0, [r5, #0xc]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	bne _0807E134
	lsls r0, r2, #1
	mov r2, r8
	adds r1, r0, r2
	ldrh r0, [r1]
	cmp r0, #0
	beq _0807E132
	adds r4, r1, #0
_0807E114:
	ldr r0, [r5]
	ldrh r1, [r4]
	ldrb r0, [r0, #4]
	ldrb r2, [r4]
	cmp r0, r2
	bne _0807E12A
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	bl sub_080A0BA8
	adds r6, r6, r0
_0807E12A:
	adds r4, #2
	ldrh r0, [r4]
	cmp r0, #0
	bne _0807E114
_0807E132:
	movs r2, #0
_0807E134:
	adds r4, r7, #0
	cmp r4, #0x3f
	ble _0807E0E4
	lsls r0, r6, #0x10
	lsrs r0, r0, #0x10
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807E14C
sub_0807E14C: @ 0x0807E14C
	push {r4, lr}
	ldr r0, _0807E168 @ =0x08D80D24
	bl sub_0807E0D4
	adds r4, r0, #0
	ldr r0, _0807E16C @ =0x08D80D2E
	bl sub_0807E0D4
	lsls r4, r4, #0x10
	lsls r0, r0, #0x10
	cmp r4, r0
	bhi _0807E170
	movs r0, #0
	b _0807E172
	.align 2, 0
_0807E168: .4byte 0x08D80D24
_0807E16C: .4byte 0x08D80D2E
_0807E170:
	movs r0, #1
_0807E172:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_0807E178
sub_0807E178: @ 0x0807E178
	push {lr}
	movs r0, #8
	bl sub_0807A0C8
	bl sub_0807AA5C
	pop {r0}
	bx r0

	thumb_func_start sub_0807E188
sub_0807E188: @ 0x0807E188
	push {r4, lr}
	movs r0, #9
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	rsbs r1, r0, #0
	orrs r1, r0
	lsrs r4, r1, #0x1f
	movs r0, #0xa
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807E1A8
	adds r4, #1
_0807E1A8:
	movs r0, #0xb
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807E1B6
	adds r4, #1
_0807E1B6:
	movs r0, #0
	cmp r4, #1
	bgt _0807E1BE
	movs r0, #1
_0807E1BE:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_0807E1C4
sub_0807E1C4: @ 0x0807E1C4
	push {lr}
	movs r0, #0xc
	bl sub_0807A0C8
	movs r0, #0xd
	bl sub_0807A0C8
	movs r0, #0xe
	bl sub_0807A0C8
	bl sub_0807AA5C
	movs r0, #7
	bl sub_0807A0C8
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807E1E8
sub_0807E1E8: @ 0x0807E1E8
	push {r4, lr}
	movs r0, #9
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	rsbs r1, r0, #0
	orrs r1, r0
	lsrs r4, r1, #0x1f
	movs r0, #0xa
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807E208
	adds r4, #1
_0807E208:
	movs r0, #0xb
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807E216
	adds r4, #1
_0807E216:
	movs r0, #0xc
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807E224
	adds r4, #1
_0807E224:
	movs r0, #0xd
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807E232
	adds r4, #1
_0807E232:
	movs r0, #0xe
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807E240
	adds r4, #1
_0807E240:
	movs r0, #0xf
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807E24E
	adds r4, #1
_0807E24E:
	movs r0, #0x10
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807E25C
	adds r4, #1
_0807E25C:
	movs r0, #0x11
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807E26A
	adds r4, #1
_0807E26A:
	cmp r4, #3
	ble _0807E272
	movs r0, #0
	b _0807E274
_0807E272:
	movs r0, #1
_0807E274:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807E27C
sub_0807E27C: @ 0x0807E27C
	push {lr}
	movs r0, #0x12
	bl sub_0807A0C8
	movs r0, #0x13
	bl sub_0807A0C8
	movs r0, #0x14
	bl sub_0807A0C8
	movs r0, #0x15
	bl sub_0807A0C8
	movs r0, #7
	bl sub_0807A0C8
	pop {r0}
	bx r0

	thumb_func_start sub_0807E2A0
sub_0807E2A0: @ 0x0807E2A0
	push {lr}
	movs r0, #0xd
	bl sub_0807A0C8
	movs r0, #0xe
	bl sub_0807A0C8
	movs r0, #0xf
	bl sub_0807A0C8
	movs r0, #0x10
	bl sub_0807A0C8
	movs r0, #7
	bl sub_0807A0C8
	movs r0, #8
	bl sub_0807A0C8
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807E2CC
sub_0807E2CC: @ 0x0807E2CC
	push {lr}
	movs r0, #0xa
	bl sub_0807A0C8
	movs r0, #0xb
	bl sub_0807A0C8
	movs r0, #0xc
	bl sub_0807A0C8
	movs r0, #0xd
	bl sub_0807A0C8
	bl sub_0807AA5C
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807E2F0
sub_0807E2F0: @ 0x0807E2F0
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x5e
	movs r0, #4
	ldrh r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _0807E334
	movs r0, #0x5b
	bl GetUnitFromCharId
	movs r1, #0x10
	ldrsb r1, [r0, r1]
	lsls r1, r1, #4
	ldr r3, _0807E33C @ =gBmSt
	movs r5, #0xc
	ldrsh r2, [r3, r5]
	subs r2, #8
	subs r1, r1, r2
	movs r2, #0x11
	ldrsb r2, [r0, r2]
	lsls r2, r2, #4
	movs r5, #0xe
	ldrsh r0, [r3, r5]
	subs r0, #8
	subs r2, r2, r0
	adds r0, r4, #0
	bl sub_080211D8
	adds r1, r4, #0
	adds r1, #0x4d
	movs r0, #1
	strb r0, [r1]
_0807E334:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807E33C: .4byte gBmSt

	thumb_func_start sub_0807E340
sub_0807E340: @ 0x0807E340
	push {r4, lr}
	adds r4, r0, #0
	bl GetGameTime
	movs r2, #1
	ands r0, r2
	cmp r0, #0
	bne _0807E372
	adds r1, r4, #0
	adds r1, #0x4c
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	ldr r1, _0807E368 @ =gBmSt
	ands r0, r2
	cmp r0, #0
	beq _0807E36C
	ldrh r0, [r4, #0x2c]
	subs r0, #1
	b _0807E370
	.align 2, 0
_0807E368: .4byte gBmSt
_0807E36C:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
_0807E370:
	strh r0, [r1, #0xc]
_0807E372:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0807E378
sub_0807E378: @ 0x0807E378
	push {lr}
	adds r0, #0x5e
	movs r1, #4
	ldrh r0, [r0]
	ands r1, r0
	cmp r1, #0
	bne _0807E3A8
	ldr r0, _0807E3AC @ =0x08D837E8
	movs r1, #0
	bl Proc_Start
	ldr r1, _0807E3B0 @ =gBmSt
	movs r2, #0xc
	ldrsh r1, [r1, r2]
	str r1, [r0, #0x2c]
	ldr r0, _0807E3B4 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807E3A8
	ldr r0, _0807E3B8 @ =0x0000026A
	bl m4aSongNumStart
_0807E3A8:
	pop {r0}
	bx r0
	.align 2, 0
_0807E3AC: .4byte 0x08D837E8
_0807E3B0: .4byte gBmSt
_0807E3B4: .4byte gPlaySt
_0807E3B8: .4byte 0x0000026A

	thumb_func_start sub_0807E3BC
sub_0807E3BC: @ 0x0807E3BC
	push {lr}
	ldr r0, _0807E3E0 @ =0x08D837E8
	bl sub_08004748
	ldr r2, _0807E3E4 @ =gBmSt
	ldrh r0, [r2, #0xc]
	adds r0, #0xf
	movs r3, #0x10
	rsbs r3, r3, #0
	adds r1, r3, #0
	ands r0, r1
	strh r0, [r2, #0xc]
	movs r0, #4
	bl sub_080035EC
	pop {r0}
	bx r0
	.align 2, 0
_0807E3E0: .4byte 0x08D837E8
_0807E3E4: .4byte gBmSt

	thumb_func_start sub_0807E3E8
sub_0807E3E8: @ 0x0807E3E8
	push {r4, lr}
	adds r4, r0, #0
	bl ColorFadeTick_thm
	bl EnablePalSync
	adds r1, r4, #0
	adds r1, #0x4c
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0807E40A
	adds r0, r4, #0
	bl Proc_Break
_0807E40A:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start nullsub_70
nullsub_70: @ 0x0807E410
	bx lr
	.align 2, 0

	thumb_func_start sub_0807E414
sub_0807E414: @ 0x0807E414
	push {lr}
	adds r2, r0, #0
	adds r2, #0x4c
	movs r1, #0xf
	strh r1, [r2]
	bl sub_0807E3E8
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807E428
sub_0807E428: @ 0x0807E428
	push {lr}
	ldr r2, _0807E440 @ =gFadeComponentStep
	movs r1, #0xff
	strb r1, [r2, #0x1b]
	adds r2, r0, #0
	adds r2, #0x4c
	movs r1, #0xf
	strh r1, [r2]
	bl sub_0807E3E8
	pop {r0}
	bx r0
	.align 2, 0
_0807E440: .4byte gFadeComponentStep

	thumb_func_start sub_0807E444
sub_0807E444: @ 0x0807E444
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x5e
	movs r0, #4
	ldrh r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _0807E492
	movs r0, #0x85
	bl GetUnitFromCharId
	adds r4, r0, #0
	ldrb r0, [r4, #0xb]
	adds r0, #0x40
	strb r0, [r4, #0xb]
	bl RefreshUnitSprites
	ldrb r0, [r4, #0xb]
	subs r0, #0x40
	strb r0, [r4, #0xb]
	ldr r0, _0807E498 @ =0x02022C00
	adds r1, r0, #0
	subs r1, #0x40
	movs r2, #8
	bl CpuFastSet
	movs r0, #1
	bl ColorFadeSetupFromColorToWhite
	bl ColorFadeInit
	ldr r1, _0807E49C @ =gFadeComponentStep
	movs r0, #1
	strb r0, [r1, #0x1b]
	ldr r0, _0807E4A0 @ =0x08D837F8
	adds r1, r5, #0
	bl Proc_Start
_0807E492:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807E498: .4byte 0x02022C00
_0807E49C: .4byte gFadeComponentStep
_0807E4A0: .4byte 0x08D837F8

	thumb_func_start sub_0807E4A4
sub_0807E4A4: @ 0x0807E4A4
	push {lr}
	adds r0, #0x5e
	movs r1, #4
	ldrh r0, [r0]
	ands r1, r0
	cmp r1, #0
	bne _0807E4B8
	ldr r0, _0807E4BC @ =0x08D837F8
	bl sub_08004764
_0807E4B8:
	pop {r0}
	bx r0
	.align 2, 0
_0807E4BC: .4byte 0x08D837F8

	thumb_func_start sub_0807E4C0
sub_0807E4C0: @ 0x0807E4C0
	push {r4, lr}
	adds r0, #0x5e
	movs r1, #4
	ldrh r0, [r0]
	ands r1, r0
	cmp r1, #0
	bne _0807E4E2
	movs r0, #0x84
	bl GetUnitFromCharId
	adds r4, r0, #0
	movs r0, #0x56
	bl GetClassData
	str r0, [r4, #4]
	bl RefreshUnitSprites
_0807E4E2:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0807E4E8
sub_0807E4E8: @ 0x0807E4E8
	push {r4, lr}
	adds r0, #0x5e
	movs r1, #4
	ldrh r0, [r0]
	ands r1, r0
	cmp r1, #0
	bne _0807E50C
	movs r0, #0x84
	bl GetUnitFromCharId
	adds r4, r0, #0
	bl HideUnitSprite
	adds r0, r4, #0
	bl sub_0806C2DC
	bl sub_0806DD98
_0807E50C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807E514
sub_0807E514: @ 0x0807E514
	push {lr}
	movs r0, #0x70
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807E530
	ldr r0, _0807E52C @ =0x08DA4190
	bl LoadUnit
	b _0807E536
	.align 2, 0
_0807E52C: .4byte 0x08DA4190
_0807E530:
	ldr r0, _0807E53C @ =0x08DA41B0
	bl LoadUnit
_0807E536:
	pop {r0}
	bx r0
	.align 2, 0
_0807E53C: .4byte 0x08DA41B0

	thumb_func_start sub_0807E540
sub_0807E540: @ 0x0807E540
	push {r4, lr}
	ldr r0, _0807E564 @ =gBattleActor
	ldr r0, [r0]
	ldrb r4, [r0, #4]
	bl GetPlayerLeaderUnitId
	cmp r4, r0
	beq _0807E56C
	ldr r0, _0807E568 @ =gBattleTarget
	ldr r0, [r0]
	ldrb r4, [r0, #4]
	bl GetPlayerLeaderUnitId
	cmp r4, r0
	beq _0807E56C
	movs r0, #0
	b _0807E56E
	.align 2, 0
_0807E564: .4byte gBattleActor
_0807E568: .4byte gBattleTarget
_0807E56C:
	movs r0, #1
_0807E56E:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_0807E574
sub_0807E574: @ 0x0807E574
	push {lr}
	movs r0, #0xa
	bl sub_0807A0C8
	bl sub_0807AA5C
	pop {r0}
	bx r0

	thumb_func_start sub_0807E584
sub_0807E584: @ 0x0807E584
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x5e
	movs r0, #4
	ldrh r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _0807E5C8
	movs r0, #0x44
	bl GetUnitFromCharId
	movs r1, #0x10
	ldrsb r1, [r0, r1]
	lsls r1, r1, #4
	ldr r3, _0807E5D0 @ =gBmSt
	movs r5, #0xc
	ldrsh r2, [r3, r5]
	subs r2, #8
	subs r1, r1, r2
	movs r2, #0x11
	ldrsb r2, [r0, r2]
	lsls r2, r2, #4
	movs r5, #0xe
	ldrsh r0, [r3, r5]
	subs r0, #8
	subs r2, r2, r0
	adds r0, r4, #0
	bl sub_080211D8
	adds r1, r4, #0
	adds r1, #0x4d
	movs r0, #1
	strb r0, [r1]
_0807E5C8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807E5D0: .4byte gBmSt

	thumb_func_start sub_0807E5D4
sub_0807E5D4: @ 0x0807E5D4
	push {lr}
	bl sub_0807AA5C
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807E5E0
sub_0807E5E0: @ 0x0807E5E0
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r1, r6, #0
	adds r1, #0x5e
	movs r0, #4
	ldrh r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _0807E616
	ldr r0, _0807E620 @ =gBmSt
	movs r1, #0xc
	ldrsh r5, [r0, r1]
	movs r1, #0x7f
	subs r1, r1, r5
	movs r2, #0xe
	ldrsh r4, [r0, r2]
	movs r2, #0x18
	subs r2, r2, r4
	movs r3, #0x87
	subs r3, r3, r5
	movs r0, #0x30
	subs r0, r0, r4
	str r0, [sp]
	adds r0, r6, #0
	bl sub_08021550
_0807E616:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807E620: .4byte gBmSt

	thumb_func_start sub_0807E624
sub_0807E624: @ 0x0807E624
	push {lr}
	adds r0, #0x5e
	movs r1, #4
	ldrh r0, [r0]
	ands r1, r0
	cmp r1, #0
	bne _0807E636
	bl sub_080215B8
_0807E636:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807E63C
sub_0807E63C: @ 0x0807E63C
	push {lr}
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x5e
	movs r0, #4
	ldrh r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _0807E654
	adds r0, r2, #0
	bl sub_080216A0
_0807E654:
	pop {r0}
	bx r0

	thumb_func_start sub_0807E658
sub_0807E658: @ 0x0807E658
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x5e
	movs r0, #4
	ldrh r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _0807E68E
	movs r0, #0xda
	bl GetUnitFromCharId
	adds r4, r0, #0
	movs r1, #0x10
	ldrsb r1, [r4, r1]
	movs r2, #0x11
	ldrsb r2, [r4, r2]
	adds r0, r5, #0
	bl sub_0802196C
	adds r0, r4, #0
	bl ClearUnit
	bl RefreshUnitSprites
	bl RefreshEntityMaps
_0807E68E:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0807E694
sub_0807E694: @ 0x0807E694
	push {lr}
	movs r0, #0xda
	bl GetUnitFromCharId
	bl HideUnitSprite
	pop {r0}
	bx r0

	thumb_func_start sub_0807E6A4
sub_0807E6A4: @ 0x0807E6A4
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r0, #0x5e
	movs r1, #4
	ldrh r0, [r0]
	ands r1, r0
	lsls r1, r1, #0x10
	lsrs r6, r1, #0x10
	cmp r6, #0
	bne _0807E6FA
	movs r0, #0xda
	bl GetUnitFromCharId
	movs r4, #0x10
	ldrsb r4, [r0, r4]
	lsls r4, r4, #4
	ldr r2, _0807E704 @ =gBmSt
	movs r3, #0xc
	ldrsh r1, [r2, r3]
	subs r4, r4, r1
	adds r4, #8
	movs r5, #0x11
	ldrsb r5, [r0, r5]
	lsls r5, r5, #4
	movs r1, #0xe
	ldrsh r0, [r2, r1]
	subs r5, r5, r0
	ldr r0, _0807E708 @ =0x081C2974
	ldr r1, _0807E70C @ =0x06013000
	bl sub_08013688
	ldr r0, _0807E710 @ =0x081C2D44
	ldr r3, _0807E714 @ =0x0000C180
	str r6, [sp]
	str r6, [sp, #4]
	adds r1, r4, #0
	adds r2, r5, #0
	bl sub_08012AF0
	ldr r0, _0807E718 @ =sub_0807E694
	movs r1, #1
	bl sub_08014FB0
_0807E6FA:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807E704: .4byte gBmSt
_0807E708: .4byte 0x081C2974
_0807E70C: .4byte 0x06013000
_0807E710: .4byte 0x081C2D44
_0807E714: .4byte 0x0000C180
_0807E718: .4byte sub_0807E694

	thumb_func_start sub_0807E71C
sub_0807E71C: @ 0x0807E71C
	push {lr}
	movs r0, #0xda
	bl GetUnitFromCharId
	cmp r0, #0
	beq _0807E730
	bl ShowUnitSprite
	bl EndEachSpriteAnimProc
_0807E730:
	pop {r0}
	bx r0

	thumb_func_start sub_0807E734
sub_0807E734: @ 0x0807E734
	push {lr}
	movs r0, #8
	bl sub_0807A0C8
	movs r0, #9
	bl sub_0807A0C8
	movs r0, #0xa
	bl sub_0807A0C8
	bl sub_0807AA5C
	pop {r0}
	bx r0

	thumb_func_start sub_0807E750
sub_0807E750: @ 0x0807E750
	push {lr}
	movs r0, #8
	bl sub_0807A0C8
	movs r0, #9
	bl sub_0807A0C8
	movs r0, #0xa
	bl sub_0807A0C8
	bl sub_0807AA5C
	movs r0, #2
	bl sub_0807A0C8
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807E774
sub_0807E774: @ 0x0807E774
	push {r4, lr}
	movs r0, #9
	bl GetUnitFromCharId
	adds r4, r0, #0
	bl sub_0807A794
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807E79C
	ldr r0, [r4, #4]
	ldrb r0, [r0, #4]
	cmp r0, #0x13
	bne _0807E79C
	movs r0, #8
	ldrsb r0, [r4, r0]
	cmp r0, #4
	ble _0807E79C
	movs r0, #1
	b _0807E79E
_0807E79C:
	movs r0, #0
_0807E79E:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_0807E7A4
sub_0807E7A4: @ 0x0807E7A4
	push {r4, r5, r6, lr}
	movs r0, #9
	bl GetUnitFromCharId
	adds r6, r0, #0
	movs r5, #0
	ldrh r4, [r6, #0x1e]
	cmp r4, #0
	beq _0807E7EE
_0807E7B6:
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0807E7D6
	adds r0, r6, #0
	adds r1, r4, #0
	bl CanUnitUseWeaponNow
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807E7D6
	movs r0, #1
	b _0807E7F0
_0807E7D6:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #4
	bhi _0807E7EE
	lsls r1, r5, #1
	adds r0, r6, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r4, [r0]
	cmp r4, #0
	bne _0807E7B6
_0807E7EE:
	movs r0, #0
_0807E7F0:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807E7F8
sub_0807E7F8: @ 0x0807E7F8
	push {lr}
	movs r0, #0x37
	bl GetUnitFromCharId
	adds r1, r0, #0
	movs r0, #0x10
	ldrsb r0, [r1, r0]
	cmp r0, #1
	bgt _0807E816
	movs r0, #0x11
	ldrsb r0, [r1, r0]
	cmp r0, #1
	bgt _0807E816
	movs r0, #1
	b _0807E818
_0807E816:
	movs r0, #0
_0807E818:
	pop {r1}
	bx r1

	thumb_func_start sub_0807E81C
sub_0807E81C: @ 0x0807E81C
	push {lr}
	movs r0, #9
	bl GetUnitFromCharId
	bl GetUnitCurrentHp
	movs r1, #0
	cmp r0, #0
	bne _0807E830
	movs r1, #1
_0807E830:
	adds r0, r1, #0
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807E838
sub_0807E838: @ 0x0807E838
	push {lr}
	movs r0, #0x37
	bl GetUnitFromCharId
	bl GetUnitCurrentHp
	movs r1, #0
	cmp r0, #0
	bne _0807E84C
	movs r1, #1
_0807E84C:
	adds r0, r1, #0
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807E854
sub_0807E854: @ 0x0807E854
	push {r4, r5, r6, lr}
	sub sp, #8
	movs r6, #9
	movs r5, #1
_0807E85C:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _0807E8F4
	ldr r0, [r4]
	cmp r0, #0
	beq _0807E8F4
	ldrb r0, [r0, #4]
	cmp r0, r6
	bne _0807E8F4
	lsls r0, r6, #0x18
	lsrs r0, r0, #0x18
	movs r1, #0
	movs r2, #6
	bl sub_080A08B4
	adds r0, r4, #0
	bl UnitKill
	adds r0, r4, #0
	movs r1, #0
	bl SetUnitHp
	ldr r0, _0807E8EC @ =gBattleActor
	ldrb r1, [r0, #0xb]
	ldrb r2, [r4, #0xb]
	cmp r1, r2
	bne _0807E8A0
	adds r1, r4, #0
	movs r2, #0x48
	bl memcpy
_0807E8A0:
	ldr r0, _0807E8F0 @ =gBattleTarget
	ldrb r1, [r0, #0xb]
	ldrb r2, [r4, #0xb]
	cmp r1, r2
	bne _0807E8B2
	adds r1, r4, #0
	movs r2, #0x48
	bl memcpy
_0807E8B2:
	ldr r0, [r4, #0xc]
	movs r1, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0807E8CA
	ldrb r0, [r4, #0x1b]
	bl GetUnit
	movs r1, #0
	movs r2, #0
	bl UnitDrop
_0807E8CA:
	ldr r0, [r4, #0xc]
	movs r1, #0x10
	ands r0, r1
	cmp r0, #0
	beq _0807E8FA
	adds r0, r4, #0
	mov r1, sp
	add r2, sp, #4
	bl UnitGetDeathDropLocation
	ldr r1, [sp]
	ldr r2, [sp, #4]
	adds r0, r4, #0
	bl UnitDrop
	b _0807E8FA
	.align 2, 0
_0807E8EC: .4byte gBattleActor
_0807E8F0: .4byte gBattleTarget
_0807E8F4:
	adds r5, #1
	cmp r5, #0x3f
	ble _0807E85C
_0807E8FA:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start nullsub_20
nullsub_20: @ 0x0807E904
	bx lr
	.align 2, 0

	thumb_func_start sub_0807E908
sub_0807E908: @ 0x0807E908
	push {lr}
	bl sub_0807AD78
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807E92C
	movs r1, #0
	ldr r0, _0807E928 @ =gBmMapTerrain
	ldr r0, [r0]
	ldr r0, [r0, #8]
	ldrb r0, [r0, #5]
	cmp r0, #0x25
	bne _0807E924
	movs r1, #1
_0807E924:
	adds r0, r1, #0
	b _0807E92E
	.align 2, 0
_0807E928: .4byte gBmMapTerrain
_0807E92C:
	movs r0, #0
_0807E92E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807E934
sub_0807E934: @ 0x0807E934
	push {lr}
	movs r0, #8
	bl sub_0807A0C8
	movs r0, #9
	bl sub_0807A0C8
	movs r0, #0xa
	bl sub_0807A0C8
	bl sub_0807AA5C
	pop {r0}
	bx r0

	thumb_func_start sub_0807E950
sub_0807E950: @ 0x0807E950
	push {r4, r5, lr}
	sub sp, #0x14
	ldr r1, _0807E988 @ =0x084033C4
	mov r0, sp
	movs r2, #0x14
	bl memcpy
	movs r3, #0
	ldr r0, _0807E98C @ =gBmMapUnit
	ldr r4, [r0]
	mov r2, sp
	movs r5, #0xc0
_0807E968:
	movs r0, #1
	ldrsb r0, [r2, r0]
	lsls r0, r0, #2
	adds r0, r0, r4
	movs r1, #0
	ldrsb r1, [r2, r1]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #0
	beq _0807E990
	ands r0, r5
	cmp r0, #0
	bne _0807E990
	movs r0, #1
	b _0807E99A
	.align 2, 0
_0807E988: .4byte 0x084033C4
_0807E98C: .4byte gBmMapUnit
_0807E990:
	adds r2, #2
	adds r3, #1
	cmp r3, #8
	ble _0807E968
	movs r0, #0
_0807E99A:
	add sp, #0x14
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807E9A4
sub_0807E9A4: @ 0x0807E9A4
	push {r4, lr}
	movs r0, #0x27
	bl GetUnitFromCharId
	adds r4, r0, #0
	movs r0, #0x8c
	bl MakeNewItem
	adds r1, r0, #0
	adds r0, r4, #0
	bl UnitAddItem
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807E9C4
sub_0807E9C4: @ 0x0807E9C4
	push {lr}
	adds r0, #0x60
	movs r1, #0
	strb r1, [r0]
	strb r1, [r0, #1]
	strb r1, [r0, #2]
	strh r1, [r0, #4]
	movs r0, #0x80
	movs r1, #2
	movs r2, #1
	bl InitTalk
	pop {r0}
	bx r0

	thumb_func_start sub_0807E9E0
sub_0807E9E0: @ 0x0807E9E0
	adds r3, r0, #0
	ldr r1, _0807E9F8 @ =0x08D87684
	ldr r0, [r1]
	cmp r0, #0
	beq _0807EA06
	adds r2, r1, #0
_0807E9EC:
	ldr r0, [r2]
	cmp r3, r0
	bne _0807E9FC
	ldr r0, [r1, #4]
	b _0807EA08
	.align 2, 0
_0807E9F8: .4byte 0x08D87684
_0807E9FC:
	adds r1, #8
	adds r2, #8
	ldr r0, [r1]
	cmp r0, #0
	bne _0807E9EC
_0807EA06:
	movs r0, #0
_0807EA08:
	bx lr
	.align 2, 0

	thumb_func_start sub_0807EA0C
sub_0807EA0C: @ 0x0807EA0C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r6, #0
	adds r5, #0x60
	adds r1, r6, #0
	adds r1, #0x5e
	movs r0, #4
	ldrh r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0807EA2A
	bl sub_08007EF8
	movs r0, #0
	b _0807EB3E
_0807EA2A:
	bl sub_08009E30
	lsls r0, r0, #0x18
	asrs r4, r0, #0x18
	cmp r4, #0
	beq _0807EA38
	b _0807EB3C
_0807EA38:
	ldrb r0, [r5]
	cmp r0, #1
	beq _0807EAA0
	cmp r0, #1
	bgt _0807EA48
	cmp r0, #0
	beq _0807EA52
	b _0807EB3C
_0807EA48:
	cmp r0, #2
	beq _0807EAC8
	cmp r0, #3
	beq _0807EB06
	b _0807EB3C
_0807EA52:
	movs r6, #1
	ldrb r0, [r5, #1]
	cmp r0, #0
	beq _0807EA94
	adds r6, r0, #0
	b _0807EA94
_0807EA5E:
	adds r0, r6, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _0807EA92
	ldr r2, [r4]
	cmp r2, #0
	beq _0807EA92
	ldr r0, [r4, #0xc]
	ldr r1, _0807EA9C @ =0x0001000C
	ands r0, r1
	cmp r0, #0
	bne _0807EA92
	ldrb r0, [r2, #4]
	strb r0, [r5, #2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	beq _0807EA92
	cmp r0, #2
	beq _0807EA92
	cmp r0, #0x2d
	beq _0807EA92
	cmp r0, #0x26
	bne _0807EAF8
_0807EA92:
	adds r6, #1
_0807EA94:
	cmp r6, #0x3f
	ble _0807EA5E
	movs r0, #0
	b _0807EB3E
	.align 2, 0
_0807EA9C: .4byte 0x0001000C
_0807EAA0:
	ldrb r0, [r5, #2]
	bl GetUnitFromCharId
	adds r4, r0, #0
	cmp r4, #0
	beq _0807EAE8
	movs r1, #0x10
	ldrsb r1, [r4, r1]
	movs r2, #0x11
	ldrsb r2, [r4, r2]
	adds r0, r6, #0
	bl sub_0801615C
	movs r0, #0x10
	ldrsb r0, [r4, r0]
	movs r1, #0x11
	ldrsb r1, [r4, r1]
	bl sub_08015F0C
	b _0807EAE8
_0807EAC8:
	ldr r4, _0807EAF0 @ =0x08BFF970
	adds r0, r4, #0
	bl Proc_Find
	cmp r0, #0
	beq _0807EAE8
	bl sub_080095E4
	ldr r1, _0807EAF4 @ =sub_080073F4
	adds r0, r4, #0
	bl sub_08004670
	adds r0, r6, #0
	movs r1, #8
	bl sub_080149B4
_0807EAE8:
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	b _0807EB3C
	.align 2, 0
_0807EAF0: .4byte 0x08BFF970
_0807EAF4: .4byte sub_080073F4
_0807EAF8:
	ldrb r0, [r5, #2]
	bl sub_0807E9E0
	strh r0, [r5, #4]
	adds r0, r6, #1
	strb r0, [r5, #1]
	b _0807EAE8
_0807EB06:
	ldrh r0, [r5, #4]
	cmp r0, #0
	beq _0807EB3A
	bl sub_08007DF4
	bl sub_0800968C
	bl sub_08009628
	bl sub_0800EC08
	ldrh r0, [r5, #4]
	bl DecodeMsg
	adds r2, r0, #0
	movs r0, #0xa
	movs r1, #0xe
	movs r3, #0
	bl sub_08007E08
	movs r0, #1
	bl sub_08007F84
	movs r0, #1
	bl sub_08008CB8
_0807EB3A:
	strb r4, [r5]
_0807EB3C:
	movs r0, #1
_0807EB3E:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_0807EB44
sub_0807EB44: @ 0x0807EB44
	push {lr}
	sub sp, #4
	movs r0, #0
	str r0, [sp]
	movs r1, #0xc0
	lsls r1, r1, #0x13
	ldr r2, _0807EB74 @ =0x01000008
	mov r0, sp
	bl CpuFastSet
	ldr r0, _0807EB78 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _0807EB7C @ =gBg1Tm
	movs r1, #0
	bl TmFill
	movs r0, #3
	bl EnableBgSync
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_0807EB74: .4byte 0x01000008
_0807EB78: .4byte gBg0Tm
_0807EB7C: .4byte gBg1Tm

	thumb_func_start sub_0807EB80
sub_0807EB80: @ 0x0807EB80
	push {lr}
	bl sub_0800EFD4
	bl sub_0800F070
	bl RefreshEntityMaps
	bl RefreshUnitSprites
	bl RenderMap
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807EB9C
sub_0807EB9C: @ 0x0807EB9C
	push {lr}
	ldr r0, _0807EBC0 @ =gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #3
	bne _0807EBC4
	bl sub_0807AC6C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807EBC4
	movs r0, #7
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807EBC4
	movs r0, #1
	b _0807EBC6
	.align 2, 0
_0807EBC0: .4byte gPlaySt
_0807EBC4:
	movs r0, #0
_0807EBC6:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0807EBCC
sub_0807EBCC: @ 0x0807EBCC
	push {r4, r5, r6, r7, lr}
	sub sp, #0x2c
	add r0, sp, #0x10
	ldr r1, _0807EC50 @ =0x084033D8
	ldm r1!, {r2, r3, r4}
	stm r0!, {r2, r3, r4}
	ldm r1!, {r2, r3, r4}
	stm r0!, {r2, r3, r4}
	ldr r1, [r1]
	str r1, [r0]
	movs r7, #0
	movs r6, #1
	add r5, sp, #0x10
_0807EBE6:
	adds r0, r6, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0807EC3C
	ldr r0, [r1]
	cmp r0, #0
	beq _0807EC3C
	ldrb r4, [r0, #4]
	cmp r4, #1
	beq _0807EC3C
	cmp r4, #2
	beq _0807EC3C
	cmp r4, #0x2d
	beq _0807EC3C
	cmp r4, #0x26
	beq _0807EC3C
	cmp r4, #0x27
	beq _0807EC3C
	ldr r1, [r1, #0xc]
	ldr r0, _0807EC54 @ =0x0001000C
	ands r1, r0
	cmp r1, #0
	bne _0807EC3C
	movs r2, #0
	ldrsb r2, [r5, r2]
	movs r3, #1
	ldrsb r3, [r5, r3]
	str r2, [sp]
	movs r0, #1
	ldrsb r0, [r5, r0]
	str r0, [sp, #4]
	str r1, [sp, #8]
	str r1, [sp, #0xc]
	adds r0, r4, #0
	movs r1, #0
	bl sub_080123C8
	adds r5, #4
	adds r7, #1
	cmp r7, #6
	bgt _0807EC42
_0807EC3C:
	adds r6, #1
	cmp r6, #0x3f
	ble _0807EBE6
_0807EC42:
	bl RefreshUnitSprites
	add sp, #0x2c
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807EC50: .4byte 0x084033D8
_0807EC54: .4byte 0x0001000C

	thumb_func_start sub_0807EC58
sub_0807EC58: @ 0x0807EC58
	push {r4, r5, r6, r7, lr}
	sub sp, #0x28
	adds r6, r0, #0
	add r2, sp, #0x1c
	adds r1, r2, #0
	ldr r0, _0807EC7C @ =0x084033F4
	ldm r0!, {r3, r4, r5}
	stm r1!, {r3, r4, r5}
	ldr r0, _0807EC80 @ =gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #3
	bne _0807EC84
	movs r0, #2
	str r0, [sp, #0x10]
	movs r0, #0x2d
	str r0, [sp, #0x14]
	movs r0, #1
	b _0807EC8E
	.align 2, 0
_0807EC7C: .4byte 0x084033F4
_0807EC80: .4byte gPlaySt
_0807EC84:
	movs r0, #1
	str r0, [sp, #0x10]
	movs r0, #0x2d
	str r0, [sp, #0x14]
	movs r0, #2
_0807EC8E:
	str r0, [sp, #0x18]
	adds r1, r6, #0
	adds r1, #0x5e
	movs r0, #4
	ldrh r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _0807ECCC
	adds r4, r2, #0
	add r7, sp, #0x10
	movs r5, #2
_0807ECA4:
	ldm r7!, {r0}
	movs r2, #0
	ldrsb r2, [r4, r2]
	movs r3, #1
	ldrsb r3, [r4, r3]
	movs r1, #2
	ldrsb r1, [r4, r1]
	str r1, [sp]
	movs r1, #3
	ldrsb r1, [r4, r1]
	str r1, [sp, #4]
	movs r1, #0
	str r1, [sp, #8]
	str r6, [sp, #0xc]
	bl sub_080123C8
	adds r4, #4
	subs r5, #1
	cmp r5, #0
	bge _0807ECA4
_0807ECCC:
	add sp, #0x28
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0807ECD4
sub_0807ECD4: @ 0x0807ECD4
	push {r4, r5, lr}
	sub sp, #0x1c
	adds r5, r0, #0
	add r0, sp, #0x10
	ldr r1, _0807ED84 @ =0x08403400
	ldm r1!, {r2, r3, r4}
	stm r0!, {r2, r3, r4}
	adds r1, r5, #0
	adds r1, #0x5e
	movs r0, #4
	ldrh r1, [r1]
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	bne _0807ED7C
	add r0, sp, #0x10
	movs r2, #0
	ldrsb r2, [r0, r2]
	movs r3, #1
	ldrsb r3, [r0, r3]
	ldrb r0, [r0, #2]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	str r0, [sp]
	add r0, sp, #0x10
	ldrb r0, [r0, #3]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	str r0, [sp, #4]
	str r4, [sp, #8]
	str r5, [sp, #0xc]
	movs r0, #0x27
	movs r1, #0
	bl sub_080123C8
	add r0, sp, #0x10
	movs r2, #4
	ldrsb r2, [r0, r2]
	movs r3, #5
	ldrsb r3, [r0, r3]
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	str r0, [sp]
	add r0, sp, #0x10
	ldrb r0, [r0, #7]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	str r0, [sp, #4]
	str r4, [sp, #8]
	str r5, [sp, #0xc]
	movs r0, #0x26
	movs r1, #0
	bl sub_080123C8
	ldr r1, _0807ED88 @ =gPlaySt
	adds r1, #0x2b
	movs r4, #1
	adds r0, r4, #0
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0807ED7C
	add r0, sp, #0x10
	movs r2, #8
	ldrsb r2, [r0, r2]
	movs r3, #9
	ldrsb r3, [r0, r3]
	ldrb r0, [r0, #0xa]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	str r0, [sp]
	add r0, sp, #0x10
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	str r0, [sp, #4]
	str r4, [sp, #8]
	str r5, [sp, #0xc]
	movs r0, #0xcd
	movs r1, #0x51
	bl sub_080123C8
_0807ED7C:
	add sp, #0x1c
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807ED84: .4byte 0x08403400
_0807ED88: .4byte gPlaySt

	thumb_func_start sub_0807ED8C
sub_0807ED8C: @ 0x0807ED8C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x20
	adds r7, r0, #0
	movs r0, #0
	mov r8, r0
	add r1, sp, #0x10
	ldr r0, _0807EE2C @ =0x0840340C
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldr r0, [r0]
	str r0, [r1]
	adds r1, r7, #0
	adds r1, #0x5e
	movs r0, #4
	ldrh r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _0807EE20
	movs r6, #1
	add r5, sp, #0x10
_0807EDB8:
	adds r0, r6, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0807EE16
	ldr r0, [r1]
	cmp r0, #0
	beq _0807EE16
	ldrb r4, [r0, #4]
	cmp r4, #1
	beq _0807EE16
	cmp r4, #2
	beq _0807EE16
	cmp r4, #0x2d
	beq _0807EE16
	cmp r4, #0x26
	beq _0807EE16
	cmp r4, #0x27
	beq _0807EE16
	ldr r1, [r1, #0xc]
	ldr r0, _0807EE30 @ =0x0001000C
	ands r1, r0
	cmp r1, #0
	bne _0807EE16
	movs r2, #0
	ldrsb r2, [r5, r2]
	movs r3, #1
	ldrsb r3, [r5, r3]
	movs r0, #2
	ldrsb r0, [r5, r0]
	str r0, [sp]
	movs r0, #3
	ldrsb r0, [r5, r0]
	str r0, [sp, #4]
	str r1, [sp, #8]
	str r7, [sp, #0xc]
	adds r0, r4, #0
	movs r1, #0
	bl sub_080123C8
	adds r5, #4
	movs r0, #1
	add r8, r0
	mov r2, r8
	cmp r2, #3
	bgt _0807EE1C
_0807EE16:
	adds r6, #1
	cmp r6, #0x3f
	ble _0807EDB8
_0807EE1C:
	bl RefreshUnitSprites
_0807EE20:
	add sp, #0x20
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807EE2C: .4byte 0x0840340C
_0807EE30: .4byte 0x0001000C

	thumb_func_start sub_0807EE34
sub_0807EE34: @ 0x0807EE34
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x1c
	mov r8, r0
	movs r7, #0
	add r0, sp, #0x10
	ldr r1, _0807EED0 @ =0x0840341C
	ldm r1!, {r2, r3, r4}
	stm r0!, {r2, r3, r4}
	mov r1, r8
	adds r1, #0x5e
	movs r0, #4
	ldrh r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _0807EEC4
	movs r6, #1
	mov r5, sp
_0807EE5A:
	adds r0, r6, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0807EEBA
	ldr r0, [r1]
	cmp r0, #0
	beq _0807EEBA
	ldrb r4, [r0, #4]
	cmp r4, #1
	beq _0807EEBA
	cmp r4, #2
	beq _0807EEBA
	cmp r4, #0x2d
	beq _0807EEBA
	cmp r4, #0x26
	beq _0807EEBA
	cmp r4, #0x27
	beq _0807EEBA
	ldr r1, [r1, #0xc]
	ldr r0, _0807EED4 @ =0x0001000C
	ands r1, r0
	cmp r1, #0
	bne _0807EEBA
	cmp r7, #3
	ble _0807EEB2
	movs r2, #0
	ldrsb r2, [r5, r2]
	movs r3, #1
	ldrsb r3, [r5, r3]
	movs r0, #2
	ldrsb r0, [r5, r0]
	str r0, [sp]
	movs r0, #3
	ldrsb r0, [r5, r0]
	str r0, [sp, #4]
	str r1, [sp, #8]
	mov r0, r8
	str r0, [sp, #0xc]
	adds r0, r4, #0
	movs r1, #0
	bl sub_080123C8
_0807EEB2:
	adds r5, #4
	adds r7, #1
	cmp r7, #6
	bgt _0807EEC0
_0807EEBA:
	adds r6, #1
	cmp r6, #0x3f
	ble _0807EE5A
_0807EEC0:
	bl RefreshUnitSprites
_0807EEC4:
	add sp, #0x1c
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807EED0: .4byte 0x0840341C
_0807EED4: .4byte 0x0001000C

	thumb_func_start sub_0807EED8
sub_0807EED8: @ 0x0807EED8
	push {r4, r5, r6, r7, lr}
	sub sp, #0x28
	adds r6, r0, #0
	add r2, sp, #0x1c
	adds r1, r2, #0
	ldr r0, _0807EF0C @ =0x08403428
	ldm r0!, {r3, r4, r5}
	stm r1!, {r3, r4, r5}
	adds r1, r6, #0
	adds r1, #0x5e
	movs r0, #4
	ldrh r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _0807EF52
	ldr r0, _0807EF10 @ =gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #3
	bne _0807EF14
	movs r0, #2
	str r0, [sp, #0x10]
	movs r0, #0x2d
	str r0, [sp, #0x14]
	movs r0, #1
	b _0807EF1E
	.align 2, 0
_0807EF0C: .4byte 0x08403428
_0807EF10: .4byte gPlaySt
_0807EF14:
	movs r0, #1
	str r0, [sp, #0x10]
	movs r0, #0x2d
	str r0, [sp, #0x14]
	movs r0, #2
_0807EF1E:
	str r0, [sp, #0x18]
	adds r4, r2, #0
	add r7, sp, #0x10
	movs r5, #2
_0807EF26:
	ldm r7!, {r0}
	movs r2, #0
	ldrsb r2, [r4, r2]
	movs r3, #1
	ldrsb r3, [r4, r3]
	movs r1, #2
	ldrsb r1, [r4, r1]
	str r1, [sp]
	movs r1, #3
	ldrsb r1, [r4, r1]
	str r1, [sp, #4]
	movs r1, #0
	str r1, [sp, #8]
	str r6, [sp, #0xc]
	bl sub_080123C8
	adds r4, #4
	subs r5, #1
	cmp r5, #0
	bge _0807EF26
	bl RefreshUnitSprites
_0807EF52:
	add sp, #0x28
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807EF5C
sub_0807EF5C: @ 0x0807EF5C
	push {lr}
	bl sub_0807AA5C
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807EF68
sub_0807EF68: @ 0x0807EF68
	push {lr}
	movs r0, #0x27
	bl GetUnitFromCharId
	movs r1, #0
	bl StartStatusHealEffect
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807EF7C
sub_0807EF7C: @ 0x0807EF7C
	push {r4, r5, lr}
	ldr r5, _0807EFFC @ =0x08DA9AF8
	ldr r0, _0807F000 @ =0x0202E3F0
	ldr r0, [r0]
	movs r1, #0
	bl BmMapFillg
	movs r0, #0x27
	bl GetUnitFromCharId
	adds r1, r0, #0
	ldr r0, _0807F004 @ =0x08DA9B78
	bl sub_0800A70C
	movs r0, #1
	bl GetUnitFromCharId
	adds r1, r0, #0
	ldr r0, _0807F008 @ =0x08DA9B98
	bl sub_0800A70C
	movs r0, #1
	bl GetUnitFromCharId
	adds r1, r0, #0
	ldr r0, _0807F00C @ =0x08DA9A98
	bl sub_0800A70C
	movs r0, #2
	bl GetUnitFromCharId
	adds r1, r0, #0
	ldr r0, _0807F010 @ =0x08DA9AB8
	bl sub_0800A70C
	movs r0, #0x2d
	bl GetUnitFromCharId
	adds r1, r0, #0
	ldr r0, _0807F014 @ =0x08DA9AD8
	bl sub_0800A70C
	movs r4, #1
_0807EFD2:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	bne _0807EFE0
	b _0807F0EA
_0807EFE0:
	ldr r0, [r2]
	cmp r0, #0
	bne _0807EFE8
	b _0807F0EA
_0807EFE8:
	ldrb r0, [r0, #4]
	subs r0, #1
	cmp r0, #0x2c
	bhi _0807F0D0
	lsls r0, r0, #2
	ldr r1, _0807F018 @ =_0807F01C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0807EFFC: .4byte 0x08DA9AF8
_0807F000: .4byte 0x0202E3F0
_0807F004: .4byte 0x08DA9B78
_0807F008: .4byte 0x08DA9B98
_0807F00C: .4byte 0x08DA9A98
_0807F010: .4byte 0x08DA9AB8
_0807F014: .4byte 0x08DA9AD8
_0807F018: .4byte _0807F01C
_0807F01C: @ jump table
	.4byte _0807F0EA @ case 0
	.4byte _0807F0EA @ case 1
	.4byte _0807F0D0 @ case 2
	.4byte _0807F0D0 @ case 3
	.4byte _0807F0D0 @ case 4
	.4byte _0807F0D0 @ case 5
	.4byte _0807F0D0 @ case 6
	.4byte _0807F0D0 @ case 7
	.4byte _0807F0D0 @ case 8
	.4byte _0807F0D0 @ case 9
	.4byte _0807F0D0 @ case 10
	.4byte _0807F0D0 @ case 11
	.4byte _0807F0D0 @ case 12
	.4byte _0807F0D0 @ case 13
	.4byte _0807F0D0 @ case 14
	.4byte _0807F0D0 @ case 15
	.4byte _0807F0D0 @ case 16
	.4byte _0807F0D0 @ case 17
	.4byte _0807F0D0 @ case 18
	.4byte _0807F0D0 @ case 19
	.4byte _0807F0D0 @ case 20
	.4byte _0807F0D0 @ case 21
	.4byte _0807F0D0 @ case 22
	.4byte _0807F0D0 @ case 23
	.4byte _0807F0D0 @ case 24
	.4byte _0807F0D0 @ case 25
	.4byte _0807F0D0 @ case 26
	.4byte _0807F0D0 @ case 27
	.4byte _0807F0D0 @ case 28
	.4byte _0807F0D0 @ case 29
	.4byte _0807F0D0 @ case 30
	.4byte _0807F0D0 @ case 31
	.4byte _0807F0D0 @ case 32
	.4byte _0807F0D0 @ case 33
	.4byte _0807F0D0 @ case 34
	.4byte _0807F0D0 @ case 35
	.4byte _0807F0D0 @ case 36
	.4byte _0807F0EA @ case 37
	.4byte _0807F0EA @ case 38
	.4byte _0807F0D0 @ case 39
	.4byte _0807F0D0 @ case 40
	.4byte _0807F0D0 @ case 41
	.4byte _0807F0D0 @ case 42
	.4byte _0807F0D0 @ case 43
	.4byte _0807F0EA @ case 44
_0807F0D0:
	ldr r0, [r2, #0xc]
	ldr r1, _0807F100 @ =0x0001000C
	ands r0, r1
	cmp r0, #0
	bne _0807F0EA
	adds r0, r5, #0
	adds r1, r2, #0
	bl sub_0800A70C
	adds r5, #0x10
	ldrb r0, [r5]
	cmp r0, #0
	beq _0807F0F2
_0807F0EA:
	adds r4, #1
	cmp r4, #0x3f
	bgt _0807F0F2
	b _0807EFD2
_0807F0F2:
	bl RefreshEntityMaps
	bl RefreshUnitSprites
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807F100: .4byte 0x0001000C

	thumb_func_start sub_0807F104
sub_0807F104: @ 0x0807F104
	push {r4, r5, lr}
	ldr r5, _0807F160 @ =0x08DA9BB8
	ldr r0, _0807F164 @ =0x0202E3F0
	ldr r0, [r0]
	movs r1, #0
	bl BmMapFillg
	movs r4, #1
_0807F114:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _0807F14A
	ldr r0, [r2]
	cmp r0, #0
	beq _0807F14A
	ldrb r0, [r0, #4]
	cmp r0, #0x26
	beq _0807F14A
	cmp r0, #0x27
	beq _0807F14A
	ldr r0, [r2, #0xc]
	ldr r1, _0807F168 @ =0x0001000C
	ands r0, r1
	cmp r0, #0
	bne _0807F14A
	adds r0, r5, #0
	adds r1, r2, #0
	bl sub_0800A70C
	adds r5, #0x10
	ldrb r0, [r5]
	cmp r0, #0
	beq _0807F150
_0807F14A:
	adds r4, #1
	cmp r4, #0x3f
	ble _0807F114
_0807F150:
	bl RefreshEntityMaps
	bl RefreshUnitSprites
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807F160: .4byte 0x08DA9BB8
_0807F164: .4byte 0x0202E3F0
_0807F168: .4byte 0x0001000C

	thumb_func_start sub_0807F16C
sub_0807F16C: @ 0x0807F16C
	push {r4, lr}
	adds r4, r0, #0
	adds r0, r1, #0
	bl GetUnitFromCharId
	adds r2, r0, #0
	ldr r1, [r2, #0xc]
	movs r0, #0xc
	ands r0, r1
	cmp r0, #0
	bne _0807F18C
	adds r0, r4, #0
	movs r1, #0
	bl sub_08012440
	b _0807F192
_0807F18C:
	movs r0, #9
	orrs r1, r0
	str r1, [r2, #0xc]
_0807F192:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0807F198
sub_0807F198: @ 0x0807F198
	push {lr}
	ldr r0, _0807F1B0 @ =0x08DA9D18
	movs r1, #0x27
	bl sub_0807F16C
	ldr r0, _0807F1B4 @ =0x08DA9D38
	movs r1, #0x26
	bl sub_0807F16C
	pop {r0}
	bx r0
	.align 2, 0
_0807F1B0: .4byte 0x08DA9D18
_0807F1B4: .4byte 0x08DA9D38

	thumb_func_start sub_0807F1B8
sub_0807F1B8: @ 0x0807F1B8
	push {lr}
	sub sp, #0x10
	movs r0, #0xe
	str r0, [sp]
	movs r0, #0x12
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	str r0, [sp, #0xc]
	movs r0, #0x26
	movs r1, #0
	movs r2, #0xe
	movs r3, #0x12
	bl sub_080123C8
	add sp, #0x10
	pop {r0}
	bx r0

	thumb_func_start sub_0807F1DC
sub_0807F1DC: @ 0x0807F1DC
	push {lr}
	movs r0, #0x25
	bl GetUnitFromCharId
	adds r2, r0, #0
	cmp r2, #0
	beq _0807F1F2
	ldr r0, [r2, #0xc]
	ldr r1, _0807F1F8 @ =0xFFFEFFFF
	ands r0, r1
	str r0, [r2, #0xc]
_0807F1F2:
	pop {r0}
	bx r0
	.align 2, 0
_0807F1F8: .4byte 0xFFFEFFFF

	thumb_func_start sub_0807F1FC
sub_0807F1FC: @ 0x0807F1FC
	push {r4, r5, r6, lr}
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x6b
	movs r0, #0
	strb r0, [r1]
	movs r3, #0
	movs r4, #0
	subs r1, #0x33
	adds r5, r2, #0
	adds r5, #0x2c
	ldr r0, _0807F234 @ =0x0000FFFF
	adds r6, r0, #0
	adds r2, #0x5c
_0807F218:
	stm r5!, {r4}
	ldrh r0, [r1]
	orrs r0, r6
	strh r0, [r1]
	strh r4, [r2]
	adds r1, #2
	adds r2, #2
	adds r3, #1
	cmp r3, #2
	ble _0807F218
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807F234: .4byte 0x0000FFFF

	thumb_func_start sub_0807F238
sub_0807F238: @ 0x0807F238
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r4, #0x2c
	movs r5, #2
_0807F240:
	ldr r0, [r4]
	cmp r0, #0
	beq _0807F24A
	bl EndSpriteAnimProc
_0807F24A:
	adds r4, #4
	subs r5, #1
	cmp r5, #0
	bge _0807F240
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0807F258
sub_0807F258: @ 0x0807F258
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	mov r8, r0
	movs r5, #0
	movs r0, #0
	str r0, [sp]
	mov sl, r0
	mov r1, r8
	adds r1, #0x2c
	str r1, [sp, #0xc]
_0807F274:
	ldr r2, [sp, #0xc]
	ldr r0, [r2]
	cmp r0, #0
	bne _0807F27E
	b _0807F396
_0807F27E:
	mov r0, r8
	adds r0, #0x38
	add r0, sl
	mov sb, r0
	mov r0, r8
	adds r0, #0x44
	add r0, sl
	str r0, [sp, #4]
	mov r4, r8
	adds r4, #0x3e
	mov r3, r8
	adds r3, #0x4a
	str r3, [sp, #8]
	mov r6, sb
	ldrh r6, [r6]
	ldrh r7, [r0]
	cmp r6, r7
	bne _0807F2B2
	mov r0, sl
	adds r1, r4, r0
	adds r0, r3, #0
	add r0, sl
	ldrh r2, [r1]
	ldrh r0, [r0]
	cmp r2, r0
	beq _0807F354
_0807F2B2:
	mov r0, r8
	adds r0, #0x56
	mov r3, sl
	adds r5, r0, r3
	subs r0, #6
	adds r1, r0, r3
	ldrh r6, [r5]
	ldrh r7, [r1]
	adds r0, r6, r7
	strh r0, [r5]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x80
	lsls r2, r2, #1
	mov ip, r2
	cmp r0, ip
	ble _0807F2D8
	mov r3, ip
	strh r3, [r5]
_0807F2D8:
	movs r6, #0
	ldrsh r0, [r1, r6]
	cmp r0, #0
	bne _0807F2E4
	mov r7, ip
	strh r7, [r5]
_0807F2E4:
	mov r1, sb
	movs r2, #0
	ldrsh r0, [r1, r2]
	movs r3, #0
	ldrsh r2, [r5, r3]
	mov r6, ip
	subs r3, r6, r2
	adds r1, r0, #0
	muls r1, r3, r1
	ldr r7, [sp, #4]
	movs r6, #0
	ldrsh r0, [r7, r6]
	muls r0, r2, r0
	adds r1, r1, r0
	cmp r1, #0
	bge _0807F306
	adds r1, #0xff
_0807F306:
	asrs r6, r1, #8
	mov r0, sl
	adds r7, r4, r0
	movs r1, #0
	ldrsh r0, [r7, r1]
	adds r1, r0, #0
	muls r1, r3, r1
	ldr r3, [sp, #8]
	add r3, sl
	movs r4, #0
	ldrsh r0, [r3, r4]
	muls r0, r2, r0
	adds r1, r1, r0
	cmp r1, #0
	bge _0807F326
	adds r1, #0xff
_0807F326:
	asrs r4, r1, #8
	movs r1, #0
	ldrsh r0, [r5, r1]
	cmp r0, ip
	bne _0807F350
	ldr r2, [sp, #4]
	ldrh r0, [r2]
	mov r1, sb
	strh r0, [r1]
	ldrh r0, [r3]
	strh r0, [r7]
	ldr r2, [sp, #0xc]
	ldr r0, [r2]
	ldr r0, [r0, #0x50]
	mov r1, r8
	adds r1, #0x62
	ldr r3, [sp]
	adds r1, r1, r3
	ldrb r1, [r1]
	bl sub_080128F0
_0807F350:
	movs r5, #1
	b _0807F35E
_0807F354:
	mov r4, sb
	movs r7, #0
	ldrsh r6, [r4, r7]
	movs r0, #0
	ldrsh r4, [r1, r0]
_0807F35E:
	ldr r1, _0807F3F0 @ =gBmSt
	movs r2, #0xc
	ldrsh r0, [r1, r2]
	subs r6, r6, r0
	movs r3, #0xe
	ldrsh r0, [r1, r3]
	subs r4, r4, r0
	movs r0, #0x40
	rsbs r0, r0, #0
	cmp r4, r0
	bge _0807F376
	movs r4, #0xcc
_0807F376:
	ldr r0, _0807F3F4 @ =0x000001FF
	ands r6, r0
	movs r0, #0xff
	ands r4, r0
	ldr r7, [sp, #0xc]
	ldr r0, [r7]
	mov r1, r8
	adds r1, #0x5c
	add r1, sl
	ldrh r1, [r1]
	adds r2, r1, r4
	adds r1, r6, #0
	movs r3, #1
	rsbs r3, r3, #0
	bl sub_08012B70
_0807F396:
	movs r0, #2
	add sl, r0
	ldr r1, [sp, #0xc]
	adds r1, #4
	str r1, [sp, #0xc]
	ldr r2, [sp]
	adds r2, #1
	str r2, [sp]
	cmp r2, #2
	bgt _0807F3AC
	b _0807F274
_0807F3AC:
	cmp r5, #0
	beq _0807F3DE
	mov r2, r8
	adds r2, #0x6b
	ldrb r0, [r2]
	adds r1, r0, #1
	strb r1, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r1, #0x18
	bl __umodsi3
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0807F3DE
	ldr r0, _0807F3F8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807F3DE
	movs r0, #0xb8
	lsls r0, r0, #2
	bl m4aSongNumStart
_0807F3DE:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807F3F0: .4byte gBmSt
_0807F3F4: .4byte 0x000001FF
_0807F3F8: .4byte gPlaySt

	thumb_func_start sub_0807F3FC
sub_0807F3FC: @ 0x0807F3FC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0807F428 @ =0x08D87F28
	bl Proc_Start
	adds r0, #0x6a
	strb r4, [r0]
	cmp r4, #0
	bne _0807F416
	ldr r0, _0807F42C @ =0x081C3850
	ldr r1, _0807F430 @ =0x06013000
	bl sub_08013688
_0807F416:
	cmp r4, #1
	bne _0807F422
	ldr r0, _0807F434 @ =0x081C564C
	ldr r1, _0807F430 @ =0x06013000
	bl sub_08013688
_0807F422:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807F428: .4byte 0x08D87F28
_0807F42C: .4byte 0x081C3850
_0807F430: .4byte 0x06013000
_0807F434: .4byte 0x081C564C

	thumb_func_start sub_0807F438
sub_0807F438: @ 0x0807F438
	push {lr}
	ldr r0, _0807F444 @ =0x08D87F28
	bl sub_08004748
	pop {r0}
	bx r0
	.align 2, 0
_0807F444: .4byte 0x08D87F28

	thumb_func_start sub_0807F448
sub_0807F448: @ 0x0807F448
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0x10
	adds r6, r0, #0
	mov r8, r1
	adds r7, r2, #0
	mov sb, r3
	ldr r5, [sp, #0x2c]
	ldr r0, _0807F4D8 @ =0x08403434
	ldr r1, [r0, #4]
	ldr r0, [r0]
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	ldr r0, _0807F4DC @ =0x08D87F28
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	beq _0807F542
	adds r0, #0x62
	adds r0, r0, r6
	mov r1, r8
	strb r1, [r0]
	lsls r0, r5, #1
	mov r2, r8
	adds r5, r0, r2
	lsls r1, r6, #2
	adds r0, r4, #0
	adds r0, #0x2c
	adds r0, r0, r1
	mov r8, r0
	ldr r0, [r0]
	cmp r0, #0
	bne _0807F4E4
	adds r0, r4, #0
	adds r0, #0x6a
	ldrb r0, [r0]
	lsls r0, r0, #2
	add r0, sp
	adds r0, #8
	ldr r0, [r0]
	ldr r3, _0807F4E0 @ =0x0000A980
	str r5, [sp]
	movs r1, #0xd
	str r1, [sp, #4]
	adds r1, r7, #0
	mov r2, sb
	bl sub_08012AF0
	mov r3, r8
	str r0, [r3]
	lsls r2, r6, #1
	adds r1, r4, #0
	adds r1, #0x38
	adds r1, r1, r2
	adds r0, r4, #0
	adds r0, #0x44
	adds r0, r0, r2
	strh r7, [r0]
	strh r7, [r1]
	adds r1, r4, #0
	adds r1, #0x3e
	adds r1, r1, r2
	adds r0, r4, #0
	adds r0, #0x4a
	adds r0, r0, r2
	mov r2, sb
	strh r2, [r0]
	strh r2, [r1]
	b _0807F542
	.align 2, 0
_0807F4D8: .4byte 0x08403434
_0807F4DC: .4byte 0x08D87F28
_0807F4E0: .4byte 0x0000A980
_0807F4E4:
	ldr r3, [sp, #0x30]
	cmp r3, #0
	bne _0807F4F4
	ldr r0, [r0, #0x50]
	adds r1, r5, #0
	bl sub_080128F0
	b _0807F542
_0807F4F4:
	ldr r0, [r0, #0x50]
	adds r1, r5, #0
	bl sub_080128F0
	lsls r2, r6, #1
	adds r0, r4, #0
	adds r0, #0x38
	adds r0, r0, r2
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, r7
	bne _0807F51A
	adds r0, r4, #0
	adds r0, #0x3e
	adds r0, r0, r2
	movs r3, #0
	ldrsh r0, [r0, r3]
	cmp r0, sb
	beq _0807F542
_0807F51A:
	adds r0, r4, #0
	adds r0, #0x56
	adds r0, r0, r2
	movs r1, #0
	strh r1, [r0]
	adds r0, r4, #0
	adds r0, #0x50
	adds r0, r0, r2
	mov r1, sp
	ldrh r1, [r1, #0x30]
	strh r1, [r0]
	adds r0, r4, #0
	adds r0, #0x44
	adds r0, r0, r2
	strh r7, [r0]
	adds r0, r4, #0
	adds r0, #0x4a
	adds r0, r0, r2
	mov r2, sb
	strh r2, [r0]
_0807F542:
	add sp, #0x10
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0807F550
sub_0807F550: @ 0x0807F550
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, _0807F588 @ =0x08D87F28
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	beq _0807F580
	lsls r1, r6, #2
	adds r0, #0x2c
	adds r5, r0, r1
	ldr r0, [r5]
	cmp r0, #0
	beq _0807F580
	bl EndSpriteAnimProc
	lsls r1, r6, #1
	adds r0, r4, #0
	adds r0, #0x38
	adds r0, r0, r1
	ldr r1, _0807F58C @ =0x0000FFFF
	strh r1, [r0]
	movs r0, #0
	str r0, [r5]
_0807F580:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807F588: .4byte 0x08D87F28
_0807F58C: .4byte 0x0000FFFF

	thumb_func_start sub_0807F590
sub_0807F590: @ 0x0807F590
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0807F5C4 @ =0x08D87F28
	bl Proc_Find
	adds r2, r0, #0
	cmp r2, #0
	beq _0807F5BC
	lsls r0, r4, #2
	adds r1, r2, #0
	adds r1, #0x2c
	adds r1, r1, r0
	ldr r0, [r1]
	cmp r0, #0
	beq _0807F5BC
	lsls r0, r4, #1
	adds r1, r2, #0
	adds r1, #0x5c
	adds r1, r1, r0
	movs r0, #0x80
	lsls r0, r0, #3
	strh r0, [r1]
_0807F5BC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807F5C4: .4byte 0x08D87F28

	thumb_func_start sub_0807F5C8
sub_0807F5C8: @ 0x0807F5C8
	push {r4, lr}
	sub sp, #8
	adds r1, r0, #0
	movs r0, #0
	bl sub_0807F3FC
	movs r4, #0
	str r4, [sp]
	str r4, [sp, #4]
	movs r0, #0
	movs r1, #0
	movs r2, #0xc8
	movs r3, #0x48
	bl sub_0807F448
	str r4, [sp]
	str r4, [sp, #4]
	movs r0, #1
	movs r1, #1
	movs r2, #0x98
	movs r3, #0x58
	bl sub_0807F448
	str r4, [sp]
	str r4, [sp, #4]
	movs r0, #2
	movs r1, #0
	movs r2, #0xf8
	movs r3, #0x58
	bl sub_0807F448
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807F610
sub_0807F610: @ 0x0807F610
	push {lr}
	sub sp, #8
	movs r0, #2
	str r0, [sp]
	str r0, [sp, #4]
	movs r0, #1
	movs r1, #1
	movs r2, #0xa8
	movs r3, #0x80
	bl sub_0807F448
	add sp, #8
	pop {r0}
	bx r0

	thumb_func_start sub_0807F62C
sub_0807F62C: @ 0x0807F62C
	push {lr}
	sub sp, #8
	movs r0, #2
	str r0, [sp]
	str r0, [sp, #4]
	movs r1, #0
	movs r2, #0xe8
	movs r3, #0x80
	bl sub_0807F448
	add sp, #8
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807F648
sub_0807F648: @ 0x0807F648
	push {r4, lr}
	sub sp, #8
	adds r1, r0, #0
	movs r0, #0
	bl sub_0807F3FC
	movs r4, #0
	str r4, [sp]
	str r4, [sp, #4]
	movs r0, #0
	movs r1, #0
	movs r2, #0xc8
	movs r3, #0x48
	bl sub_0807F448
	str r4, [sp]
	str r4, [sp, #4]
	movs r0, #1
	movs r1, #1
	movs r2, #0xa8
	movs r3, #0x80
	bl sub_0807F448
	str r4, [sp]
	str r4, [sp, #4]
	movs r0, #2
	movs r1, #0
	movs r2, #0xe8
	movs r3, #0x80
	bl sub_0807F448
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807F690
sub_0807F690: @ 0x0807F690
	push {lr}
	sub sp, #8
	movs r0, #3
	str r0, [sp]
	movs r0, #8
	str r0, [sp, #4]
	movs r0, #1
	movs r1, #1
	movs r2, #0xa8
	movs r3, #0x68
	bl sub_0807F448
	add sp, #8
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807F6B0
sub_0807F6B0: @ 0x0807F6B0
	push {lr}
	sub sp, #8
	movs r0, #3
	str r0, [sp]
	movs r0, #8
	str r0, [sp, #4]
	movs r0, #2
	movs r1, #0
	movs r2, #0xe8
	movs r3, #0x68
	bl sub_0807F448
	add sp, #8
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807F6D0
sub_0807F6D0: @ 0x0807F6D0
	push {r4, lr}
	sub sp, #8
	adds r1, r0, #0
	movs r0, #1
	bl sub_0807F3FC
	movs r4, #0
	str r4, [sp]
	str r4, [sp, #4]
	movs r0, #0
	movs r1, #0
	movs r2, #0xc8
	movs r3, #0x48
	bl sub_0807F448
	str r4, [sp]
	str r4, [sp, #4]
	movs r0, #1
	movs r1, #1
	movs r2, #0xa8
	movs r3, #0x70
	bl sub_0807F448
	str r4, [sp]
	str r4, [sp, #4]
	movs r0, #2
	movs r1, #0
	movs r2, #0xe8
	movs r3, #0x70
	bl sub_0807F448
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807F718
sub_0807F718: @ 0x0807F718
	push {lr}
	sub sp, #8
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	str r0, [sp, #4]
	movs r0, #1
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_0807F448
	add sp, #8
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807F738
sub_0807F738: @ 0x0807F738
	push {lr}
	sub sp, #8
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	str r0, [sp, #4]
	movs r0, #2
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_0807F448
	add sp, #8
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807F758
sub_0807F758: @ 0x0807F758
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0807F784 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807F76E
	ldr r0, _0807F788 @ =0x000002FB
	bl m4aSongNumStart
_0807F76E:
	movs r1, #6
	rsbs r1, r1, #0
	movs r0, #0
	movs r2, #8
	adds r3, r4, #0
	bl sub_0807D120
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807F784: .4byte gPlaySt
_0807F788: .4byte 0x000002FB

	thumb_func_start sub_0807F78C
sub_0807F78C: @ 0x0807F78C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0807F7B8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807F7A4
	movs r0, #0xbf
	lsls r0, r0, #2
	bl m4aSongNumStart
_0807F7A4:
	movs r0, #1
	movs r1, #2
	movs r2, #8
	adds r3, r4, #0
	bl sub_0807D120
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807F7B8: .4byte gPlaySt

	thumb_func_start sub_0807F7BC
sub_0807F7BC: @ 0x0807F7BC
	push {r4, lr}
	sub sp, #8
	movs r4, #0
	str r4, [sp]
	str r4, [sp, #4]
	movs r0, #1
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_0807F448
	str r4, [sp]
	str r4, [sp, #4]
	movs r0, #2
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_0807F448
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807F7EC
sub_0807F7EC: @ 0x0807F7EC
	push {r4, r5, lr}
	movs r1, #0xc0
	str r1, [r0, #0x2c]
	movs r1, #0x98
	str r1, [r0, #0x30]
	adds r0, #0x4c
	movs r1, #0
	strh r1, [r0]
	ldr r0, _0807F884 @ =0x081C6BAC
	ldr r1, _0807F888 @ =0x06005000
	bl sub_08013688
	ldr r0, _0807F88C @ =0x081C6C34
	movs r1, #0x80
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0807F890 @ =gBg2Tm
	ldr r1, _0807F894 @ =0x081C6E34
	movs r2, #0x85
	lsls r2, r2, #7
	bl TmApplyTsa_thm
	movs r0, #4
	bl EnableBgSync
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r3, _0807F898 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r3, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	movs r1, #0x80
	orrs r0, r1
	strb r0, [r3, #1]
	movs r2, #0x36
	adds r2, r2, r3
	mov ip, r2
	movs r1, #1
	ldrb r0, [r2]
	orrs r0, r1
	movs r5, #2
	orrs r0, r5
	movs r2, #5
	rsbs r2, r2, #0
	ands r0, r2
	movs r4, #8
	orrs r0, r4
	movs r2, #0x10
	orrs r0, r2
	mov r2, ip
	strb r0, [r2]
	adds r3, #0x37
	ldrb r0, [r3]
	orrs r1, r0
	orrs r1, r5
	movs r0, #4
	orrs r1, r0
	orrs r1, r4
	movs r0, #0x11
	rsbs r0, r0, #0
	ands r1, r0
	strb r1, [r3]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807F884: .4byte 0x081C6BAC
_0807F888: .4byte 0x06005000
_0807F88C: .4byte 0x081C6C34
_0807F890: .4byte gBg2Tm
_0807F894: .4byte 0x081C6E34
_0807F898: .4byte gDispIo

	thumb_func_start sub_0807F89C
sub_0807F89C: @ 0x0807F89C
	push {r4, r5, lr}
	ldr r2, _0807F8D8 @ =gBmSt
	movs r3, #0xc
	ldrsh r1, [r2, r3]
	ldr r5, [r0, #0x2c]
	subs r5, r5, r1
	movs r3, #0xe
	ldrsh r1, [r2, r3]
	ldr r4, [r0, #0x30]
	subs r4, r4, r1
	adds r4, #8
	adds r0, #0x4c
	ldrh r1, [r0]
	adds r1, #2
	strh r1, [r0]
	ldrh r2, [r0]
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r4, #0
	movs r3, #0x42
	bl sub_080266DC
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807F8D8: .4byte gBmSt

	thumb_func_start sub_0807F8DC
sub_0807F8DC: @ 0x0807F8DC
	push {lr}
	ldr r0, _0807F8F0 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
_0807F8F0: .4byte gBg2Tm

	thumb_func_start sub_0807F8F4
sub_0807F8F4: @ 0x0807F8F4
	push {lr}
	adds r1, r0, #0
	ldr r0, _0807F904 @ =0x08D87F48
	bl Proc_Start
	pop {r0}
	bx r0
	.align 2, 0
_0807F904: .4byte 0x08D87F48

	thumb_func_start sub_0807F908
sub_0807F908: @ 0x0807F908
	push {lr}
	ldr r0, _0807F914 @ =0x08D87F48
	bl sub_08004748
	pop {r0}
	bx r0
	.align 2, 0
_0807F914: .4byte 0x08D87F48

	thumb_func_start sub_0807F918
sub_0807F918: @ 0x0807F918
	push {r4, r5, lr}
	sub sp, #8
	movs r5, #1
	str r5, [sp]
	movs r4, #0
	str r4, [sp, #4]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_0807F448
	str r5, [sp]
	str r4, [sp, #4]
	movs r0, #1
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_0807F448
	str r5, [sp]
	str r4, [sp, #4]
	movs r0, #2
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_0807F448
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0807F958
sub_0807F958: @ 0x0807F958
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r6, r0, #0
	movs r5, #2
	str r5, [sp]
	movs r4, #0
	str r4, [sp, #4]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_0807F448
	str r5, [sp]
	str r4, [sp, #4]
	movs r0, #1
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_0807F448
	str r5, [sp]
	str r4, [sp, #4]
	movs r0, #2
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_0807F448
	adds r0, r6, #0
	bl sub_0807B878
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_0807F9A0
sub_0807F9A0: @ 0x0807F9A0
	push {r4, r5, lr}
	sub sp, #8
	movs r5, #3
	str r5, [sp]
	movs r4, #0
	str r4, [sp, #4]
	movs r0, #1
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_0807F448
	str r5, [sp]
	str r4, [sp, #4]
	movs r0, #2
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_0807F448
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0807F9D0
sub_0807F9D0: @ 0x0807F9D0
	push {lr}
	sub sp, #8
	movs r0, #4
	str r0, [sp]
	movs r0, #0
	str r0, [sp, #4]
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_0807F448
	add sp, #8
	pop {r0}
	bx r0

	thumb_func_start sub_0807F9EC
sub_0807F9EC: @ 0x0807F9EC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r3, _0807FA54 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r4, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	ldr r0, _0807FA58 @ =0x0000FFE0
	ldrh r2, [r3, #0x3c]
	ands r0, r2
	ldr r1, _0807FA5C @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xf8
	lsls r2, r2, #5
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	movs r0, #1
	bl sub_0807F590
	movs r0, #2
	bl sub_0807F590
	adds r5, #0x4c
	strh r4, [r5]
	ldr r0, _0807FA60 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807FA4C
	movs r0, #0xe5
	bl m4aSongNumStart
_0807FA4C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807FA54: .4byte gDispIo
_0807FA58: .4byte 0x0000FFE0
_0807FA5C: .4byte 0x0000E0FF
_0807FA60: .4byte gPlaySt

	thumb_func_start sub_0807FA64
sub_0807FA64: @ 0x0807FA64
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sb, r0
	adds r0, #0x4c
	ldrh r1, [r0]
	adds r2, r1, #1
	strh r2, [r0]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x12
	lsls r3, r1, #1
	cmp r3, #0x10
	ble _0807FA84
	movs r3, #0x10
_0807FA84:
	ldr r2, _0807FAE4 @ =gDispIo
	adds r5, r2, #0
	adds r5, #0x3c
	movs r0, #0x3f
	mov sl, r0
	ldrb r4, [r5]
	ands r0, r4
	strb r0, [r5]
	movs r0, #0x10
	subs r0, r0, r1
	movs r6, #0x44
	adds r6, r6, r2
	mov r8, r6
	movs r4, #0
	strb r0, [r6]
	adds r7, r2, #0
	adds r7, #0x45
	strb r3, [r7]
	adds r6, r2, #0
	adds r6, #0x46
	strb r4, [r6]
	cmp r1, #0x10
	bne _0807FAD4
	movs r0, #1
	bl sub_0807F550
	movs r0, #2
	bl sub_0807F550
	mov r0, sl
	ldrb r1, [r5]
	ands r0, r1
	strb r0, [r5]
	mov r0, r8
	strb r4, [r0]
	strb r4, [r7]
	strb r4, [r6]
	mov r0, sb
	bl Proc_Break
_0807FAD4:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807FAE4: .4byte gDispIo

	thumb_func_start sub_0807FAE8
sub_0807FAE8: @ 0x0807FAE8
	push {lr}
	adds r1, r0, #0
	ldr r0, _0807FAF8 @ =0x08D87F68
	bl Proc_StartBlocking
	pop {r0}
	bx r0
	.align 2, 0
_0807FAF8: .4byte 0x08D87F68

	thumb_func_start sub_0807FAFC
sub_0807FAFC: @ 0x0807FAFC
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r0, #0x86
	bl GetUnitFromCharId
	adds r4, r0, #0
	movs r0, #0x91
	bl sub_0807A0B4
	adds r0, r4, #0
	movs r1, #1
	bl SetUnitHp
	ldr r0, [r4, #0xc]
	movs r1, #7
	rsbs r1, r1, #0
	ands r0, r1
	str r0, [r4, #0xc]
	movs r1, #0x10
	ldrsb r1, [r4, r1]
	movs r2, #0x11
	ldrsb r2, [r4, r2]
	adds r0, r5, #0
	bl sub_080160D4
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0807FB34
sub_0807FB34: @ 0x0807FB34
	push {lr}
	bl sub_0807AA5C
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807FB40
sub_0807FB40: @ 0x0807FB40
	ldr r0, _0807FB50 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #8
	ldrb r1, [r1, #4]
	ands r0, r1
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bx lr
	.align 2, 0
_0807FB50: .4byte gpKeySt

	thumb_func_start sub_0807FB54
sub_0807FB54: @ 0x0807FB54
	ldr r0, _0807FB64 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #4
	ldrb r1, [r1, #4]
	ands r0, r1
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bx lr
	.align 2, 0
_0807FB64: .4byte gpKeySt

	thumb_func_start sub_0807FB68
sub_0807FB68: @ 0x0807FB68
	movs r0, #0
	bx lr

	thumb_func_start sub_0807FB6C
sub_0807FB6C: @ 0x0807FB6C
	ldr r0, _0807FB7C @ =gpKeySt
	ldr r1, [r0]
	movs r0, #2
	ldrb r1, [r1, #4]
	ands r0, r1
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bx lr
	.align 2, 0
_0807FB7C: .4byte gpKeySt

	thumb_func_start sub_0807FB80
sub_0807FB80: @ 0x0807FB80
	push {lr}
	ldr r0, _0807FB90 @ =0x03005A30
	ldr r1, _0807FB94 @ =0x0000FFFF
	movs r2, #0x20
	bl MPlayVolumeControl
	pop {r0}
	bx r0
	.align 2, 0
_0807FB90: .4byte 0x03005A30
_0807FB94: .4byte 0x0000FFFF

	thumb_func_start sub_0807FB98
sub_0807FB98: @ 0x0807FB98
	push {lr}
	ldr r0, _0807FBA8 @ =0x03005CC0
	ldr r1, _0807FBAC @ =0x0000FFFF
	movs r2, #0x20
	bl MPlayVolumeControl
	pop {r0}
	bx r0
	.align 2, 0
_0807FBA8: .4byte 0x03005CC0
_0807FBAC: .4byte 0x0000FFFF

	thumb_func_start sub_0807FBB0
sub_0807FBB0: @ 0x0807FBB0
	push {lr}
	ldr r0, _0807FBC4 @ =0x03005A30
	ldr r1, _0807FBC8 @ =0x0000FFFF
	movs r2, #0x80
	lsls r2, r2, #1
	bl MPlayVolumeControl
	pop {r0}
	bx r0
	.align 2, 0
_0807FBC4: .4byte 0x03005A30
_0807FBC8: .4byte 0x0000FFFF

	thumb_func_start sub_0807FBCC
sub_0807FBCC: @ 0x0807FBCC
	push {lr}
	ldr r0, _0807FBE0 @ =0x03005CC0
	ldr r1, _0807FBE4 @ =0x0000FFFF
	movs r2, #0x80
	lsls r2, r2, #1
	bl MPlayVolumeControl
	pop {r0}
	bx r0
	.align 2, 0
_0807FBE0: .4byte 0x03005CC0
_0807FBE4: .4byte 0x0000FFFF

	thumb_func_start sub_0807FBE8
sub_0807FBE8: @ 0x0807FBE8
	ldr r0, _0807FBFC @ =gpKeySt
	ldr r1, [r0]
	movs r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	bne _0807FC00
	movs r0, #1
	b _0807FC02
	.align 2, 0
_0807FBFC: .4byte gpKeySt
_0807FC00:
	movs r0, #0
_0807FC02:
	bx lr

	thumb_func_start sub_0807FC04
sub_0807FC04: @ 0x0807FC04
	push {lr}
	movs r0, #0x9d
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_0807FC14
sub_0807FC14: @ 0x0807FC14
	push {lr}
	movs r0, #0x9d
	bl sub_0807A0B4
	pop {r0}
	bx r0

	thumb_func_start sub_0807FC20
sub_0807FC20: @ 0x0807FC20
	push {lr}
	movs r0, #8
	bl GetUnitFromCharId
	movs r2, #0
	movs r1, #0xc0
	ldrb r0, [r0, #0xb]
	ands r1, r0
	cmp r1, #0
	bne _0807FC36
	movs r2, #1
_0807FC36:
	adds r0, r2, #0
	pop {r1}
	bx r1

	thumb_func_start sub_0807FC3C
sub_0807FC3C: @ 0x0807FC3C
	push {lr}
	movs r0, #0x11
	bl GetUnitFromCharId
	movs r2, #0
	movs r1, #0xc0
	ldrb r0, [r0, #0xb]
	ands r1, r0
	cmp r1, #0
	bne _0807FC52
	movs r2, #1
_0807FC52:
	adds r0, r2, #0
	pop {r1}
	bx r1

	thumb_func_start sub_0807FC58
sub_0807FC58: @ 0x0807FC58
	push {lr}
	movs r0, #0x13
	bl GetUnitFromCharId
	movs r2, #0
	movs r1, #0xc0
	ldrb r0, [r0, #0xb]
	ands r1, r0
	cmp r1, #0
	bne _0807FC6E
	movs r2, #1
_0807FC6E:
	adds r0, r2, #0
	pop {r1}
	bx r1

	thumb_func_start sub_0807FC74
sub_0807FC74: @ 0x0807FC74
	movs r1, #0
	ldr r0, _0807FC84 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	cmp r0, #4
	bne _0807FC80
	movs r1, #1
_0807FC80:
	adds r0, r1, #0
	bx lr
	.align 2, 0
_0807FC84: .4byte gPlaySt

	thumb_func_start sub_0807FC88
sub_0807FC88: @ 0x0807FC88
	movs r1, #0
	ldr r0, _0807FC98 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	cmp r0, #5
	bne _0807FC94
	movs r1, #1
_0807FC94:
	adds r0, r1, #0
	bx lr
	.align 2, 0
_0807FC98: .4byte gPlaySt

	thumb_func_start sub_0807FC9C
sub_0807FC9C: @ 0x0807FC9C
	movs r1, #0
	ldr r0, _0807FCAC @ =gPlaySt
	ldrb r0, [r0, #0xe]
	cmp r0, #6
	bne _0807FCA8
	movs r1, #1
_0807FCA8:
	adds r0, r1, #0
	bx lr
	.align 2, 0
_0807FCAC: .4byte gPlaySt

	thumb_func_start sub_0807FCB0
sub_0807FCB0: @ 0x0807FCB0
	movs r1, #0
	ldr r0, _0807FCC0 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	cmp r0, #0x26
	bne _0807FCBC
	movs r1, #1
_0807FCBC:
	adds r0, r1, #0
	bx lr
	.align 2, 0
_0807FCC0: .4byte gPlaySt

	thumb_func_start sub_0807FCC4
sub_0807FCC4: @ 0x0807FCC4
	ldr r0, _0807FCF0 @ =gBattleActor
	ldr r0, [r0]
	ldrb r1, [r0, #4]
	ldr r0, _0807FCF4 @ =gBattleTarget
	ldr r0, [r0]
	ldrb r2, [r0, #4]
	subs r0, r1, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #1
	bls _0807FCEC
	cmp r1, #0x2d
	beq _0807FCEC
	subs r0, r2, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #1
	bls _0807FCEC
	cmp r2, #0x2d
	bne _0807FCF8
_0807FCEC:
	movs r0, #1
	b _0807FCFA
	.align 2, 0
_0807FCF0: .4byte gBattleActor
_0807FCF4: .4byte gBattleTarget
_0807FCF8:
	movs r0, #0
_0807FCFA:
	bx lr

	thumb_func_start sub_0807FCFC
sub_0807FCFC: @ 0x0807FCFC
	push {lr}
	movs r0, #0x14
	bl GetUnitFromCharId
	movs r2, #0
	movs r1, #0xc0
	ldrb r0, [r0, #0xb]
	ands r1, r0
	cmp r1, #0
	bne _0807FD12
	movs r2, #1
_0807FD12:
	adds r0, r2, #0
	pop {r1}
	bx r1

	thumb_func_start sub_0807FD18
sub_0807FD18: @ 0x0807FD18
	push {lr}
	movs r0, #0x32
	bl GetUnitFromCharId
	movs r2, #0
	movs r1, #0xc0
	ldrb r0, [r0, #0xb]
	ands r1, r0
	cmp r1, #0
	bne _0807FD2E
	movs r2, #1
_0807FD2E:
	adds r0, r2, #0
	pop {r1}
	bx r1

	thumb_func_start sub_0807FD34
sub_0807FD34: @ 0x0807FD34
	ldr r0, _0807FD4C @ =gBattleActor
	ldr r1, [r0]
	ldr r0, _0807FD50 @ =gBattleTarget
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	ldrb r1, [r1, #4]
	cmp r1, #2
	beq _0807FD48
	cmp r0, #2
	bne _0807FD54
_0807FD48:
	movs r0, #1
	b _0807FD56
	.align 2, 0
_0807FD4C: .4byte gBattleActor
_0807FD50: .4byte gBattleTarget
_0807FD54:
	movs r0, #0
_0807FD56:
	bx lr

	thumb_func_start sub_0807FD58
sub_0807FD58: @ 0x0807FD58
	push {r4, lr}
	bl sub_08017574
	adds r4, r0, #0
	ldr r0, _0807FD7C @ =0x0000752F
	cmp r4, r0
	ble _0807FD84
	movs r0, #0x85
	bl sub_0807A0B4
	ldr r0, _0807FD80 @ =0x000080E7
	cmp r4, r0
	ble _0807FD90
	movs r0, #0x84
	bl sub_0807A0B4
	b _0807FD90
	.align 2, 0
_0807FD7C: .4byte 0x0000752F
_0807FD80: .4byte 0x000080E7
_0807FD84:
	ldr r0, _0807FD98 @ =0x00004E1F
	cmp r4, r0
	ble _0807FD90
	movs r0, #0x84
	bl sub_0807A0B4
_0807FD90:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807FD98: .4byte 0x00004E1F

	thumb_func_start sub_0807FD9C
sub_0807FD9C: @ 0x0807FD9C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	movs r7, #0
	movs r6, #1
	ldr r0, _0807FDE4 @ =gPlaySt
	bl sub_080A05A0
	bl sub_080B7880
	bl sub_080A0054
	bl sub_0807FD58
	movs r5, #1
_0807FDBA:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	adds r5, #1
	mov r8, r5
	cmp r4, #0
	beq _0807FE64
	ldr r0, [r4]
	cmp r0, #0
	beq _0807FE64
	adds r0, r4, #0
	bl UnitLoadSupports
	ldr r5, _0807FDE8 @ =0x08D68388
	ldrb r2, [r5]
	adds r1, r2, #0
	cmp r1, #0
	beq _0807FE64
	ldr r0, [r4]
	b _0807FE52
	.align 2, 0
_0807FDE4: .4byte gPlaySt
_0807FDE8: .4byte 0x08D68388
_0807FDEC:
	ldrb r0, [r5, #1]
	cmp r0, r2
	beq _0807FDFA
	ldrb r0, [r5, #1]
	bl GetCharacterData
	str r0, [r4]
_0807FDFA:
	ldr r0, [r4, #0xc]
	ldr r1, _0807FE20 @ =0x00010008
	orrs r0, r1
	str r0, [r4, #0xc]
	adds r0, r4, #0
	bl UnitClearInventory
	ldr r0, [r5, #4]
	cmp r0, #0
	beq _0807FE12
	bl sub_0807A0E0
_0807FE12:
	ldr r0, [r4, #0xc]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	beq _0807FE26
	b _0807FE40
	.align 2, 0
_0807FE20: .4byte 0x00010008
_0807FE24:
	adds r6, #1
_0807FE26:
	cmp r6, #0x3f
	bgt _0807FE38
	adds r0, r6, #0
	bl GetUnit
	adds r7, r0, #0
	ldr r0, [r7]
	cmp r0, #0
	bne _0807FE24
_0807FE38:
	adds r0, r4, #0
	adds r1, r7, #0
	bl CopyUnit
_0807FE40:
	adds r0, r4, #0
	bl ClearUnit
	b _0807FE64
_0807FE48:
	adds r5, #8
	ldrb r2, [r5]
	adds r1, r2, #0
	cmp r1, #0
	beq _0807FE64
_0807FE52:
	ldrb r3, [r0, #4]
	cmp r3, r1
	bne _0807FE48
	ldr r0, [r4, #0xc]
	movs r1, #0x80
	lsls r1, r1, #9
	ands r0, r1
	cmp r0, #0
	beq _0807FDEC
_0807FE64:
	mov r5, r8
	cmp r5, #0x3f
	ble _0807FDBA
	bl ClearPidStats_ret
	ldr r1, _0807FE88 @ =gPlaySt
	movs r0, #0xc
	strb r0, [r1, #0xe]
	bl sub_0802E8A0
	bl sub_080A0DCC
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807FE88: .4byte gPlaySt

	thumb_func_start sub_0807FE8C
sub_0807FE8C: @ 0x0807FE8C
	push {r4, lr}
	ldr r4, _0807FE9C @ =gPlaySt
	ldrb r0, [r4, #0x1b]
	cmp r0, #2
	beq _0807FEA0
	cmp r0, #3
	beq _0807FEAA
	b _0807FEB4
	.align 2, 0
_0807FE9C: .4byte gPlaySt
_0807FEA0:
	movs r0, #0xc
	bl sub_08013214
	movs r0, #0xc
	b _0807FEB2
_0807FEAA:
	movs r0, #0xd
	bl sub_08013214
	movs r0, #0xd
_0807FEB2:
	strb r0, [r4, #0xe]
_0807FEB4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0807FEBC
sub_0807FEBC: @ 0x0807FEBC
	push {lr}
	ldr r3, _0807FF2C @ =gDispIo
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0xc0
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x46
	movs r2, #0x10
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _0807FF30 @ =0x0000FFE0
	ldrh r1, [r3, #0x3c]
	ands r0, r1
	movs r1, #0x1f
	orrs r0, r1
	strh r0, [r3, #0x3c]
	movs r0, #1
	ldrb r1, [r3, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	orrs r0, r2
	strb r0, [r3, #1]
	ldr r0, _0807FF34 @ =0x081C8610
	ldr r1, _0807FF38 @ =0x06000800
	bl sub_08013688
	ldr r0, _0807FF3C @ =0x081C8AF8
	movs r1, #0xa0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0807FF40 @ =gBg0Tm
	ldr r1, _0807FF44 @ =0x081C8B18
	ldr r2, _0807FF48 @ =0x00005040
	bl TmApplyTsa_thm
	movs r0, #1
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
_0807FF2C: .4byte gDispIo
_0807FF30: .4byte 0x0000FFE0
_0807FF34: .4byte 0x081C8610
_0807FF38: .4byte 0x06000800
_0807FF3C: .4byte 0x081C8AF8
_0807FF40: .4byte gBg0Tm
_0807FF44: .4byte 0x081C8B18
_0807FF48: .4byte 0x00005040

	thumb_func_start sub_0807FF4C
sub_0807FF4C: @ 0x0807FF4C
	push {lr}
	ldr r0, _0807FF58 @ =0x0840343C
	bl sub_0807C66C
	pop {r0}
	bx r0
	.align 2, 0
_0807FF58: .4byte 0x0840343C

	thumb_func_start sub_0807FF5C
sub_0807FF5C: @ 0x0807FF5C
	push {lr}
	ldr r0, _0807FF68 @ =0x08403454
	bl sub_0807C66C
	pop {r0}
	bx r0
	.align 2, 0
_0807FF68: .4byte 0x08403454

	thumb_func_start sub_0807FF6C
sub_0807FF6C: @ 0x0807FF6C
	push {lr}
	ldr r0, _0807FF78 @ =0x08403464
	bl sub_0807C66C
	pop {r0}
	bx r0
	.align 2, 0
_0807FF78: .4byte 0x08403464

	thumb_func_start sub_0807FF7C
sub_0807FF7C: @ 0x0807FF7C
	push {lr}
	ldr r0, _0807FF88 @ =0x08403474
	bl sub_0807C66C
	pop {r0}
	bx r0
	.align 2, 0
_0807FF88: .4byte 0x08403474

	thumb_func_start sub_0807FF8C
sub_0807FF8C: @ 0x0807FF8C
	push {lr}
	ldr r0, _0807FF98 @ =0x0840348C
	bl sub_0807C66C
	pop {r0}
	bx r0
	.align 2, 0
_0807FF98: .4byte 0x0840348C

	thumb_func_start sub_0807FF9C
sub_0807FF9C: @ 0x0807FF9C
	ldr r3, _0807FFE0 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	movs r0, #3
	ldrb r2, [r3, #0x10]
	orrs r2, r0
	strb r2, [r3, #0x10]
	ldrb r2, [r3, #0x14]
	orrs r0, r2
	strb r0, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x18]
	movs r0, #1
	ldrb r1, [r3, #1]
	orrs r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r3, #1]
	bx lr
	.align 2, 0
_0807FFE0: .4byte gDispIo

	thumb_func_start sub_0807FFE4
sub_0807FFE4: @ 0x0807FFE4
	push {r4, r5, r6, r7, lr}
	ldr r7, _08080078 @ =gDispIo
	movs r4, #1
	ldrb r0, [r7, #1]
	orrs r0, r4
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	movs r6, #4
	orrs r0, r6
	movs r1, #8
	orrs r0, r1
	movs r5, #0x10
	orrs r0, r5
	strb r0, [r7, #1]
	ldr r0, _0808007C @ =0x06008000
	movs r1, #0xc0
	lsls r1, r1, #0x13
	movs r2, #0x80
	lsls r2, r2, #5
	bl CpuFastSet
	ldr r0, _08080080 @ =gBg3Tm
	ldr r1, _08080084 @ =gBg1Tm
	movs r2, #0x80
	lsls r2, r2, #2
	bl CpuFastSet
	movs r0, #2
	bl EnableBgSync
	ldrb r0, [r7, #1]
	orrs r4, r0
	movs r0, #2
	orrs r4, r0
	orrs r4, r6
	movs r0, #9
	rsbs r0, r0, #0
	ands r4, r0
	orrs r4, r5
	strb r4, [r7, #1]
	adds r2, r7, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r7, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r2, #9
	movs r0, #0x10
	strb r0, [r2]
	adds r0, r7, #0
	adds r0, #0x46
	strb r1, [r0]
	ldr r0, _08080088 @ =0x0000FFE0
	ldrh r2, [r7, #0x3c]
	ands r0, r2
	movs r1, #8
	orrs r0, r1
	ldr r1, _0808008C @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xf8
	lsls r2, r2, #5
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r7, #0x3c]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08080078: .4byte gDispIo
_0808007C: .4byte 0x06008000
_08080080: .4byte gBg3Tm
_08080084: .4byte gBg1Tm
_08080088: .4byte 0x0000FFE0
_0808008C: .4byte 0x0000E0FF

	thumb_func_start sub_08080090
sub_08080090: @ 0x08080090
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, _080800D8 @ =gBg3Tm
	movs r1, #0x80
	lsls r1, r1, #8
	movs r2, #0x2c
	str r2, [sp]
	movs r2, #0
	movs r3, #6
	bl sub_080B7980
	ldr r2, _080800DC @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #8
	bl EnableBgSync
	adds r4, #0x4c
	movs r0, #0
	strh r0, [r4]
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080800D8: .4byte gBg3Tm
_080800DC: .4byte gDispIo

	thumb_func_start sub_080800E0
sub_080800E0: @ 0x080800E0
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x4c
	ldrh r2, [r1]
	adds r0, r2, #1
	strh r0, [r1]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x12
	ldr r0, _08080148 @ =gDispIo
	mov ip, r0
	mov r3, ip
	adds r3, #0x3c
	movs r0, #0x3f
	ldrb r1, [r3]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r3]
	mov r0, ip
	adds r0, #0x44
	movs r1, #0
	strb r2, [r0]
	movs r4, #0x10
	subs r0, r4, r2
	adds r3, #9
	strb r0, [r3]
	mov r0, ip
	adds r0, #0x46
	strb r1, [r0]
	cmp r2, #0x10
	bne _08080140
	movs r0, #1
	mov r2, ip
	ldrb r2, [r2, #1]
	orrs r0, r2
	subs r1, #3
	ands r0, r1
	subs r1, #2
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	orrs r0, r4
	mov r1, ip
	strb r0, [r1, #1]
	adds r0, r5, #0
	bl Proc_Break
_08080140:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08080148: .4byte gDispIo

	thumb_func_start sub_0808014C
sub_0808014C: @ 0x0808014C
	push {r4, lr}
	ldr r1, _080801C4 @ =gDispIo
	mov ip, r1
	movs r2, #4
	rsbs r2, r2, #0
	adds r1, r2, #0
	mov r3, ip
	ldrb r3, [r3, #0xc]
	ands r1, r3
	mov r4, ip
	strb r1, [r4, #0xc]
	adds r1, r2, #0
	ldrb r3, [r4, #0x10]
	ands r1, r3
	movs r3, #1
	orrs r1, r3
	strb r1, [r4, #0x10]
	ldrb r4, [r4, #0x14]
	ands r2, r4
	movs r1, #2
	orrs r2, r1
	mov r1, ip
	strb r2, [r1, #0x14]
	movs r1, #3
	mov r2, ip
	ldrb r2, [r2, #0x18]
	orrs r1, r2
	mov r3, ip
	strb r1, [r3, #0x18]
	mov r2, ip
	adds r2, #0x3c
	movs r1, #0x3f
	ldrb r4, [r2]
	ands r1, r4
	strb r1, [r2]
	mov r1, ip
	adds r1, #0x44
	movs r2, #0
	strb r2, [r1]
	adds r1, #1
	strb r2, [r1]
	adds r1, #1
	strb r2, [r1]
	bl sub_0807BC80
	ldr r0, _080801C8 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _080801CC @ =gBg2Tm
	movs r1, #0
	bl TmFill
	movs r0, #6
	bl EnableBgSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080801C4: .4byte gDispIo
_080801C8: .4byte gBg1Tm
_080801CC: .4byte gBg2Tm

	thumb_func_start sub_080801D0
sub_080801D0: @ 0x080801D0
	push {lr}
	sub sp, #4
	ldr r0, _0808020C @ =gBg3Tm
	movs r1, #0x80
	lsls r1, r1, #8
	movs r2, #0x2c
	str r2, [sp]
	movs r2, #8
	movs r3, #6
	bl sub_080B7980
	movs r0, #8
	bl EnableBgSync
	ldr r2, _08080210 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_0808020C: .4byte gBg3Tm
_08080210: .4byte gDispIo

	thumb_func_start sub_08080214
sub_08080214: @ 0x08080214
	push {lr}
	adds r1, r0, #0
	ldr r0, _08080224 @ =0x08D8977C
	bl Proc_StartBlocking
	pop {r0}
	bx r0
	.align 2, 0
_08080224: .4byte 0x08D8977C

	thumb_func_start sub_08080228
sub_08080228: @ 0x08080228
	push {r4, lr}
	sub sp, #4
	ldr r4, _080802B4 @ =gDispIo
	movs r2, #4
	rsbs r2, r2, #0
	adds r0, r2, #0
	ldrb r1, [r4, #0xc]
	ands r0, r1
	strb r0, [r4, #0xc]
	adds r0, r2, #0
	ldrb r1, [r4, #0x10]
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	strb r0, [r4, #0x10]
	movs r0, #3
	ldrb r1, [r4, #0x14]
	orrs r0, r1
	strb r0, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	ands r2, r0
	movs r0, #2
	orrs r2, r0
	strb r2, [r4, #0x18]
	ldr r0, _080802B8 @ =gBg0Tm
	movs r1, #0x80
	lsls r1, r1, #4
	movs r2, #0x2c
	str r2, [sp]
	movs r2, #0
	movs r3, #6
	bl sub_080B7980
	movs r0, #1
	bl EnableBgSync
	adds r2, r4, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r4, #0
	adds r1, #0x44
	movs r2, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	ldr r0, _080802BC @ =0x0000FFE0
	ldrh r2, [r4, #0x3c]
	ands r0, r2
	movs r1, #1
	orrs r0, r1
	ldr r1, _080802C0 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xf8
	lsls r2, r2, #5
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r4, #0x3c]
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080802B4: .4byte gDispIo
_080802B8: .4byte gBg0Tm
_080802BC: .4byte 0x0000FFE0
_080802C0: .4byte 0x0000E0FF

	thumb_func_start sub_080802C4
sub_080802C4: @ 0x080802C4
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _08080324 @ =0x0818BC3C
	movs r1, #0xe0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08080328 @ =0x0818B408
	ldr r1, _0808032C @ =0x06005800
	bl sub_08013688
	ldr r0, _08080330 @ =gBg2Tm
	ldr r1, _08080334 @ =0x0818B760
	ldr r2, _08080338 @ =0x000072C0
	bl TmApplyTsa_thm
	ldr r4, _0808033C @ =0x08187B5C
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl sub_08013688
	ldr r0, _08080340 @ =gBg3Tm
	ldr r1, _08080344 @ =0x0818AE2C
	movs r2, #0x80
	lsls r2, r2, #8
	bl TmApplyTsa_thm
	ldr r0, _08080348 @ =0x0818B308
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r2, #0
	bl ApplyPaletteExt
	movs r0, #0xc
	bl EnableBgSync
	adds r5, #0x4c
	movs r0, #0
	strh r0, [r5]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08080324: .4byte 0x0818BC3C
_08080328: .4byte 0x0818B408
_0808032C: .4byte 0x06005800
_08080330: .4byte gBg2Tm
_08080334: .4byte 0x0818B760
_08080338: .4byte 0x000072C0
_0808033C: .4byte 0x08187B5C
_08080340: .4byte gBg3Tm
_08080344: .4byte 0x0818AE2C
_08080348: .4byte 0x0818B308

	thumb_func_start sub_0808034C
sub_0808034C: @ 0x0808034C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x4c
	ldrh r2, [r1]
	adds r0, r2, #1
	strh r0, [r1]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x12
	ldr r0, _080803B4 @ =gDispIo
	mov ip, r0
	mov r3, ip
	adds r3, #0x3c
	movs r0, #0x3f
	ldrb r1, [r3]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r3]
	movs r5, #0x10
	subs r1, r5, r2
	mov r0, ip
	adds r0, #0x44
	movs r3, #0
	strb r1, [r0]
	adds r0, #1
	strb r2, [r0]
	adds r0, #1
	strb r3, [r0]
	cmp r2, #0x10
	bne _080803AC
	movs r0, #2
	rsbs r0, r0, #0
	mov r2, ip
	ldrb r2, [r2, #1]
	ands r0, r2
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	orrs r0, r5
	mov r1, ip
	strb r0, [r1, #1]
	adds r0, r4, #0
	bl Proc_Break
_080803AC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080803B4: .4byte gDispIo

	thumb_func_start sub_080803B8
sub_080803B8: @ 0x080803B8
	push {lr}
	ldr r0, _080803CC @ =gBg0Tm
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
_080803CC: .4byte gBg0Tm

	thumb_func_start sub_080803D0
sub_080803D0: @ 0x080803D0
	push {r4, lr}
	sub sp, #0x14
	adds r4, r0, #0
	ldr r3, _08080438 @ =gDispIo
	movs r0, #1
	ldrb r1, [r3, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r3, #1]
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r2, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	bl sub_08013BCC
	movs r2, #0x80
	lsls r2, r2, #1
	movs r3, #0x80
	lsls r3, r3, #2
	str r3, [sp]
	str r3, [sp, #4]
	movs r0, #0x80
	str r0, [sp, #8]
	movs r0, #4
	str r0, [sp, #0xc]
	str r4, [sp, #0x10]
	adds r0, r2, #0
	adds r1, r2, #0
	bl sub_08013EF8
	add sp, #0x14
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08080438: .4byte gDispIo

	thumb_func_start sub_0808043C
sub_0808043C: @ 0x0808043C
	push {r4, lr}
	sub sp, #0x14
	adds r4, r0, #0
	bl sub_08013BCC
	movs r2, #0x80
	lsls r2, r2, #1
	movs r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	movs r0, #0x80
	str r0, [sp, #8]
	movs r0, #2
	str r0, [sp, #0xc]
	str r4, [sp, #0x10]
	adds r0, r2, #0
	adds r1, r2, #0
	movs r3, #0
	bl sub_08013EF8
	add sp, #0x14
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0808046C
sub_0808046C: @ 0x0808046C
	push {lr}
	adds r1, r0, #0
	ldr r0, _0808047C @ =0x08D897EC
	bl Proc_StartBlocking
	pop {r0}
	bx r0
	.align 2, 0
_0808047C: .4byte 0x08D897EC

	thumb_func_start sub_08080480
sub_08080480: @ 0x08080480
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0x98
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0808049C
	movs r0, #0x98
	bl sub_0807A0B4
	adds r0, r4, #0
	bl sub_080A5AF8
_0808049C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080804A4
sub_080804A4: @ 0x080804A4
	push {r4, r5, lr}
	adds r3, r1, r2
	adds r3, r0, r3
	movs r4, #4
	strb r4, [r3]
	lsls r4, r1, #1
	adds r3, r4, r2
	adds r3, r0, r3
	movs r5, #0xe
	strb r5, [r3]
	adds r4, r4, r1
	adds r4, r4, r2
	adds r0, r0, r4
	movs r1, #3
	strb r1, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080804C8
sub_080804C8: @ 0x080804C8
	push {r4, r5, lr}
	adds r4, r0, r2
	movs r3, #4
	strb r3, [r4]
	adds r3, r1, r2
	adds r3, r0, r3
	movs r5, #0xe
	strb r5, [r3]
	lsls r4, r1, #1
	adds r3, r4, r2
	adds r3, r0, r3
	strb r5, [r3]
	adds r4, r4, r1
	adds r4, r4, r2
	adds r4, r0, r4
	strb r5, [r4]
	lsls r1, r1, #2
	adds r1, r1, r2
	adds r0, r0, r1
	movs r1, #3
	strb r1, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080804F8
sub_080804F8: @ 0x080804F8
	push {r4, lr}
	adds r3, r1, r2
	adds r3, r0, r3
	movs r4, #1
	strb r4, [r3]
	lsls r1, r1, #1
	adds r1, r1, r2
	adds r0, r0, r1
	movs r1, #5
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08080514
sub_08080514: @ 0x08080514
	push {r4, lr}
	adds r3, r1, r2
	adds r3, r0, r3
	movs r4, #0xd
	strb r4, [r3]
	lsls r1, r1, #1
	adds r1, r1, r2
	adds r0, r0, r1
	movs r1, #0xc
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08080530
sub_08080530: @ 0x08080530
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	str r0, [sp, #4]
	mov sb, r1
	adds r6, r2, #0
	adds r5, r3, #0
	ldr r0, [sp, #0x28]
	mov sl, r0
	ldr r1, _080805F8 @ =gBuf
	mov r8, r1
	movs r0, #0
	str r0, [sp]
	lsls r2, r6, #4
	ldr r0, _080805FC @ =0x001FFFFF
	ands r2, r0
	movs r0, #0x80
	lsls r0, r0, #0x11
	orrs r2, r0
	mov r0, sp
	bl CpuFastSet
	lsls r4, r6, #3
	mov r0, r8
	adds r1, r4, #0
	mov r2, sb
	bl sub_080804A4
	mov r0, sb
	adds r2, r0, r5
	adds r2, #3
	mov r0, r8
	adds r1, r4, #0
	bl sub_080804A4
	movs r4, #0
	adds r5, #2
	cmp r4, r5
	bge _08080598
	mov r7, sb
	adds r7, #1
_08080588:
	adds r2, r4, r7
	mov r0, r8
	lsls r1, r6, #3
	bl sub_080804C8
	adds r4, #1
	cmp r4, r5
	blt _08080588
_08080598:
	movs r4, #0
	ldr r1, [sp, #4]
	lsls r7, r1, #5
	cmp r4, sl
	bge _080805B6
	mov r5, sb
	adds r5, #2
_080805A6:
	adds r2, r4, r5
	mov r0, r8
	lsls r1, r6, #3
	bl sub_080804F8
	adds r4, #1
	cmp r4, sl
	blt _080805A6
_080805B6:
	ldr r0, [sp, #0x2c]
	cmp r0, #0
	ble _080805D8
	mov r0, sb
	adds r0, #2
	mov r1, sl
	adds r5, r1, r0
	ldr r4, [sp, #0x2c]
_080805C6:
	mov r0, r8
	lsls r1, r6, #3
	adds r2, r5, #0
	bl sub_08080514
	adds r5, #1
	subs r4, #1
	cmp r4, #0
	bne _080805C6
_080805D8:
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r7, r0
	mov r0, r8
	adds r2, r6, #0
	movs r3, #1
	bl sub_08013790
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080805F8: .4byte gBuf
_080805FC: .4byte 0x001FFFFF

	thumb_func_start sub_08080600
sub_08080600: @ 0x08080600
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #8
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	adds r4, r3, #0
	ldr r3, [sp, #0x1c]
	ldr r0, [sp, #0x20]
	ldr r1, [sp, #0x24]
	str r0, [sp]
	str r1, [sp, #4]
	adds r0, r5, #0
	movs r1, #2
	adds r2, r6, #0
	bl sub_08080530
	ldr r0, _08080644 @ =0x000003FF
	ands r0, r5
	adds r4, r4, r0
	mov r0, r8
	adds r1, r4, #0
	adds r2, r6, #0
	movs r3, #1
	bl sub_0801383C
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08080644: .4byte 0x000003FF

	thumb_func_start sub_08080648
sub_08080648: @ 0x08080648
	adds r0, #0x4c
	movs r1, #0
	strh r1, [r0]
	bx lr

	thumb_func_start sub_08080650
sub_08080650: @ 0x08080650
	push {r4, lr}
	adds r4, r0, #0
	adds r4, #0x4c
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	movs r0, #0
	ldrsh r1, [r4, r0]
	cmp r1, #0
	bge _08080666
	adds r1, #3
_08080666:
	lsls r1, r1, #0xe
	lsrs r1, r1, #0x10
	movs r0, #3
	movs r2, #0
	bl SetBgOffset
	movs r1, #0
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bge _0808067C
	adds r0, #3
_0808067C:
	asrs r1, r0, #2
	ldr r0, _08080688 @ =0x0400001C
	strh r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08080688: .4byte 0x0400001C

	thumb_func_start sub_0808068C
sub_0808068C: @ 0x0808068C
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	ldr r6, _080806C4 @ =gBg3Tm
	cmp r4, #0
	bne _080806A6
	movs r0, #3
	bl GetBgChrOffset
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r4, r0, r1
_080806A6:
	cmp r5, #0
	bge _080806AC
	movs r5, #0xe
_080806AC:
	ldr r1, _080806C8 @ =gBmSt
	movs r0, #0x40
	ldrb r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _080806D0
	ldr r0, _080806CC @ =0x081CDA18
	lsls r1, r5, #5
	movs r2, #0x40
	bl ApplyPaletteExt
	b _080806DA
	.align 2, 0
_080806C4: .4byte gBg3Tm
_080806C8: .4byte gBmSt
_080806CC: .4byte 0x081CDA18
_080806D0:
	ldr r0, _08080714 @ =0x0843F084
	lsls r1, r5, #5
	movs r2, #0x40
	bl ApplyPaletteExt
_080806DA:
	ldr r0, _08080718 @ =0x08439BF0
	adds r1, r4, #0
	bl sub_08013688
	movs r0, #3
	bl GetBgChrOffset
	subs r0, r4, r0
	lsls r0, r0, #0xf
	lsrs r0, r0, #0x14
	movs r1, #0xf
	ands r1, r5
	lsls r1, r1, #0xc
	adds r1, r0, r1
	movs r2, #0
	ldr r3, _0808071C @ =0x0000027F
_080806FA:
	adds r0, r2, r1
	strh r0, [r6]
	adds r6, #2
	adds r2, #1
	cmp r2, r3
	ble _080806FA
	ldr r0, _08080720 @ =0x08D8A220
	adds r1, r7, #0
	bl Proc_Start
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08080714: .4byte 0x0843F084
_08080718: .4byte 0x08439BF0
_0808071C: .4byte 0x0000027F
_08080720: .4byte 0x08D8A220

	thumb_func_start sub_08080724
sub_08080724: @ 0x08080724
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	adds r4, r1, #0
	adds r5, r2, #0
	lsls r3, r3, #0x18
	lsrs r6, r3, #0x18
	ldr r7, _0808075C @ =gBg3Tm
	cmp r4, #0
	bne _08080746
	movs r0, #3
	bl GetBgChrOffset
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r4, r0, r1
_08080746:
	cmp r5, #0
	bge _0808074C
	movs r5, #0xe
_0808074C:
	cmp r6, #0
	beq _08080764
	ldr r0, _08080760 @ =0x081CDA18
	lsls r1, r5, #5
	movs r2, #0x40
	bl ApplyPaletteExt
	b _0808076E
	.align 2, 0
_0808075C: .4byte gBg3Tm
_08080760: .4byte 0x081CDA18
_08080764:
	ldr r0, _080807AC @ =0x0843F084
	lsls r1, r5, #5
	movs r2, #0x40
	bl ApplyPaletteExt
_0808076E:
	ldr r0, _080807B0 @ =0x08439BF0
	adds r1, r4, #0
	bl sub_08013688
	movs r0, #3
	bl GetBgChrOffset
	subs r0, r4, r0
	lsls r0, r0, #0xf
	lsrs r0, r0, #0x14
	movs r1, #0xf
	ands r1, r5
	lsls r1, r1, #0xc
	adds r1, r0, r1
	movs r2, #0
	ldr r3, _080807B4 @ =0x0000027F
_0808078E:
	adds r0, r2, r1
	strh r0, [r7]
	adds r7, #2
	adds r2, #1
	cmp r2, r3
	ble _0808078E
	ldr r0, _080807B8 @ =0x08D8A220
	mov r1, r8
	bl Proc_Start
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080807AC: .4byte 0x0843F084
_080807B0: .4byte 0x08439BF0
_080807B4: .4byte 0x0000027F
_080807B8: .4byte 0x08D8A220

	thumb_func_start sub_080807BC
sub_080807BC: @ 0x080807BC
	push {lr}
	ldr r0, _080807C8 @ =0x08D8A220
	bl sub_08004748
	pop {r0}
	bx r0
	.align 2, 0
_080807C8: .4byte 0x08D8A220

	thumb_func_start sub_080807CC
sub_080807CC: @ 0x080807CC
	ldr r0, _080807D4 @ =0x0203E648
	ldrb r0, [r0, #1]
	bx lr
	.align 2, 0
_080807D4: .4byte 0x0203E648

	thumb_func_start sub_080807D8
sub_080807D8: @ 0x080807D8
	ldr r1, _080807E0 @ =0x0203E648
	strb r0, [r1, #1]
	bx lr
	.align 2, 0
_080807E0: .4byte 0x0203E648

	thumb_func_start sub_080807E4
sub_080807E4: @ 0x080807E4
	ldr r1, _080807EC @ =0x0203E648
	strh r0, [r1, #2]
	bx lr
	.align 2, 0
_080807EC: .4byte 0x0203E648

	thumb_func_start sub_080807F0
sub_080807F0: @ 0x080807F0
	push {lr}
	ldr r0, _080807FC @ =0x08D8A238
	bl sub_08005394
	pop {r0}
	bx r0
	.align 2, 0
_080807FC: .4byte 0x08D8A238

	thumb_func_start sub_08080800
sub_08080800: @ 0x08080800
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r6, r0, #0
	b _0808083A
_08080808:
	ldr r0, [r6, #0xc]
	cmp r0, #0
	beq _08080830
	bl GetLang
	ldr r1, [r6, #0xc]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r5, [r6]
	ldr r1, [r6, #4]
	ldrb r2, [r6, #8]
	ldrb r3, [r6, #9]
	movs r4, #0
	str r4, [sp]
	ldr r0, [r0]
	str r0, [sp, #4]
	adds r0, r5, #0
	bl PutDrawText
	b _08080838
_08080830:
	ldr r0, [r6]
	ldr r1, [r6, #4]
	bl PutText
_08080838:
	adds r6, #0x10
_0808083A:
	ldr r0, [r6]
	cmp r0, #0
	bne _08080808
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_08080848
sub_08080848: @ 0x08080848
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	ldr r7, _0808092C @ =gStatScreenSt
	ldr r0, [r7, #0xc]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r5, r0, #0
	movs r0, #0x38
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r6, r0, #0
	ldr r0, _08080930 @ =gBg0Tm
	mov r8, r0
	movs r1, #0
	bl TmFill
	ldr r4, [r7, #0xc]
	adds r0, r4, #0
	bl GetUnitEquippedWeaponSlot
	adds r1, r0, #0
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r4, #0
	bl BattleGenerateUiStats
	adds r0, r7, #0
	adds r0, #0x18
	movs r1, #0xa2
	lsls r1, r1, #2
	add r1, r8
	movs r4, #0
	str r4, [sp]
	str r5, [sp, #4]
	movs r2, #0
	adds r3, r6, #0
	bl PutDrawText
	ldr r0, [r7, #0xc]
	ldr r0, [r0, #4]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r2, r7, #0
	adds r2, #0x20
	ldr r1, _08080934 @ =0x00000342
	add r1, r8
	str r4, [sp]
	str r0, [sp, #4]
	adds r0, r2, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	ldr r0, _08080938 @ =0x000003C2
	add r0, r8
	movs r1, #3
	movs r2, #0x24
	movs r3, #0x25
	bl PutTwoSpecialChar
	ldr r0, _0808093C @ =0x000003CA
	add r0, r8
	movs r1, #3
	movs r2, #0x1f
	bl sub_08005FEC
	ldr r0, _08080940 @ =0x00000442
	add r0, r8
	movs r1, #3
	movs r2, #0x22
	movs r3, #0x23
	bl PutTwoSpecialChar
	ldr r0, _08080944 @ =0x0000044A
	add r0, r8
	movs r1, #3
	movs r2, #0x16
	bl sub_08005FEC
	movs r0, #0xf2
	lsls r0, r0, #2
	add r0, r8
	ldr r1, [r7, #0xc]
	movs r2, #8
	ldrsb r2, [r1, r2]
	movs r1, #2
	bl sub_08006074
	ldr r0, _08080948 @ =0x000003CE
	add r0, r8
	ldr r1, [r7, #0xc]
	ldrb r2, [r1, #9]
	movs r1, #2
	bl sub_08006074
	ldr r0, [r7, #0xc]
	bl GetUnitCurrentHp
	cmp r0, #0x63
	ble _08080950
	ldr r0, _0808094C @ =0x00000446
	add r0, r8
	movs r1, #2
	movs r2, #0x14
	movs r3, #0x14
	bl PutTwoSpecialChar
	b _08080966
	.align 2, 0
_0808092C: .4byte gStatScreenSt
_08080930: .4byte gBg0Tm
_08080934: .4byte 0x00000342
_08080938: .4byte 0x000003C2
_0808093C: .4byte 0x000003CA
_08080940: .4byte 0x00000442
_08080944: .4byte 0x0000044A
_08080948: .4byte 0x000003CE
_0808094C: .4byte 0x00000446
_08080950:
	movs r4, #0x89
	lsls r4, r4, #3
	add r4, r8
	ldr r0, [r7, #0xc]
	bl GetUnitCurrentHp
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	bl sub_08006074
_08080966:
	ldr r5, _08080980 @ =gStatScreenSt
	ldr r0, [r5, #0xc]
	bl GetUnitMaxHp
	cmp r0, #0x63
	ble _08080988
	ldr r0, _08080984 @ =0x020230AC
	movs r1, #2
	movs r2, #0x14
	movs r3, #0x14
	bl PutTwoSpecialChar
	b _0808099A
	.align 2, 0
_08080980: .4byte gStatScreenSt
_08080984: .4byte 0x020230AC
_08080988:
	ldr r4, _080809A8 @ =0x020230AE
	ldr r0, [r5, #0xc]
	bl GetUnitMaxHp
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	bl sub_08006074
_0808099A:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080809A8: .4byte 0x020230AE

	thumb_func_start DisplayBwl
DisplayBwl: @ 0x080809AC
	push {r4, r5, r6, lr}
	ldr r5, _08080A70 @ =gStatScreenSt
	ldr r0, [r5, #0xc]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl GetPidStats
	adds r6, r0, #0
	cmp r6, #0
	beq _08080A6A
	ldr r1, _08080A74 @ =gBmSt
	movs r0, #0x40
	ldrb r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	bne _08080A6A
	ldr r0, _08080A78 @ =gPlaySt
	ldrb r1, [r0, #0x14]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	bne _08080A6A
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	bne _08080A6A
	bl IsFirstPlaythrough
	cmp r0, #1
	beq _08080A6A
	ldr r1, [r5, #0xc]
	movs r0, #0xc0
	ldrb r1, [r1, #0xb]
	ands r0, r1
	cmp r0, #0
	bne _08080A6A
	movs r0, #0x94
	lsls r0, r0, #1
	adds r5, r5, r0
	adds r0, r5, #0
	bl ClearText
	ldr r3, _08080A7C @ =0x0841CD78
	adds r0, r5, #0
	movs r1, #0x18
	movs r2, #3
	bl Text_InsertDrawString
	ldr r3, _08080A80 @ =0x0841CD7C
	adds r0, r5, #0
	movs r1, #0x38
	movs r2, #3
	bl Text_InsertDrawString
	ldr r3, _08080A84 @ =0x0841CD80
	adds r0, r5, #0
	movs r1, #0x58
	movs r2, #3
	bl Text_InsertDrawString
	ldr r4, _08080A88 @ =0x020035C2
	adds r0, r5, #0
	adds r1, r4, #0
	bl PutText
	adds r0, r4, #4
	ldrh r1, [r6, #0xc]
	lsls r2, r1, #0x12
	lsrs r2, r2, #0x14
	movs r1, #2
	bl sub_08006068
	adds r0, r4, #0
	adds r0, #0xc
	movs r2, #3
	ldrb r1, [r6, #0xc]
	ands r2, r1
	lsls r2, r2, #8
	ldrb r1, [r6, #0xb]
	orrs r2, r1
	movs r1, #2
	bl sub_08006068
	adds r4, #0x14
	ldrb r2, [r6]
	adds r0, r4, #0
	movs r1, #2
	bl sub_08006068
	ldr r0, _08080A8C @ =0x02003FC0
	ldr r1, _08080A90 @ =0x08404124
	movs r2, #0x83
	lsls r2, r2, #5
	bl TmApplyTsa_thm
_08080A6A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08080A70: .4byte gStatScreenSt
_08080A74: .4byte gBmSt
_08080A78: .4byte gPlaySt
_08080A7C: .4byte 0x0841CD78
_08080A80: .4byte 0x0841CD7C
_08080A84: .4byte 0x0841CD80
_08080A88: .4byte 0x020035C2
_08080A8C: .4byte 0x02003FC0
_08080A90: .4byte 0x08404124

	thumb_func_start sub_08080A94
sub_08080A94: @ 0x08080A94
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	mov sl, r0
	mov r8, r1
	str r2, [sp, #0xc]
	adds r7, r3, #0
	ldr r5, [sp, #0x30]
	subs r0, r5, r7
	mov sb, r0
	lsls r6, r2, #5
	adds r0, r6, r1
	lsls r0, r0, #1
	ldr r4, _08080B50 @ =gBmFrameTmap0
	adds r0, r0, r4
	movs r1, #2
	ldr r2, [sp, #0x34]
	cmp r7, r2
	bne _08080AC2
	movs r1, #4
_08080AC2:
	adds r2, r7, #0
	bl sub_08006074
	adds r1, r6, #1
	add r1, r8
	lsls r1, r1, #1
	adds r1, r1, r4
	mov r0, sb
	bl sub_080060D0
	cmp r5, #0x1e
	ble _08080AE0
	movs r5, #0x1e
	subs r5, r5, r7
	mov sb, r5
_08080AE0:
	mov r0, sl
	lsls r5, r0, #1
	add r5, sl
	lsls r5, r5, #1
	ldr r1, _08080B54 @ =0x00000401
	adds r5, r5, r1
	ldr r4, [sp, #0xc]
	adds r4, #1
	lsls r4, r4, #5
	subs r4, #2
	add r4, r8
	lsls r4, r4, #1
	ldr r0, _08080B58 @ =0x02003C3C
	adds r4, r4, r0
	movs r6, #0xc0
	lsls r6, r6, #7
	ldr r2, [sp, #0x34]
	lsls r0, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #3
	adds r0, r0, r2
	movs r1, #0x1e
	bl __divsi3
	str r0, [sp]
	lsls r0, r7, #2
	adds r0, r0, r7
	lsls r0, r0, #3
	adds r0, r0, r7
	movs r1, #0x1e
	bl __divsi3
	str r0, [sp, #4]
	mov r1, sb
	lsls r0, r1, #2
	add r0, sb
	lsls r0, r0, #3
	add r0, sb
	movs r1, #0x1e
	bl __divsi3
	str r0, [sp, #8]
	adds r0, r5, #0
	movs r1, #6
	adds r2, r4, #0
	adds r3, r6, #0
	bl sub_08080600
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08080B50: .4byte gBmFrameTmap0
_08080B54: .4byte 0x00000401
_08080B58: .4byte 0x02003C3C

	thumb_func_start sub_08080B5C
sub_08080B5C: @ 0x08080B5C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	ldr r0, _08080BA8 @ =0x084034EC
	ldr r4, _08080BAC @ =gBuf
	adds r1, r4, #0
	bl sub_08013688
	ldr r0, _08080BB0 @ =0x0200373C
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl TmApplyTsa_thm
	ldr r0, _08080BB4 @ =0x0841CBB8
	bl sub_08080800
	ldr r4, _08080BB8 @ =gStatScreenSt
	ldr r0, [r4, #0xc]
	bl UnitHasMagicRank
	lsls r0, r0, #0x18
	asrs r2, r0, #0x18
	cmp r2, #0
	beq _08080BC4
	adds r0, r4, #0
	adds r0, #0x30
	ldr r1, _08080BBC @ =0x0200327E
	movs r2, #0
	str r2, [sp]
	ldr r2, _08080BC0 @ =0x0841CD84
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	b _08080BD8
	.align 2, 0
_08080BA8: .4byte 0x084034EC
_08080BAC: .4byte gBuf
_08080BB0: .4byte 0x0200373C
_08080BB4: .4byte 0x0841CBB8
_08080BB8: .4byte gStatScreenSt
_08080BBC: .4byte 0x0200327E
_08080BC0: .4byte 0x0841CD84
_08080BC4:
	adds r0, r4, #0
	adds r0, #0x30
	ldr r1, _08080DF4 @ =0x0200327E
	str r2, [sp]
	ldr r2, _08080DF8 @ =0x0841CD8C
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #4
	bl PutDrawText
_08080BD8:
	ldr r6, _08080DFC @ =gStatScreenSt
	ldr r0, [r6, #0xc]
	bl GetUnitPower
	ldr r1, [r6, #0xc]
	movs r3, #0x14
	ldrsb r3, [r1, r3]
	str r0, [sp]
	ldr r0, [r1, #4]
	ldrb r0, [r0, #0x14]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	str r0, [sp, #4]
	movs r0, #0
	movs r1, #5
	movs r2, #1
	bl sub_08080A94
	ldr r0, [r6, #0xc]
	bl GetUnitSkill
	adds r4, r0, #0
	ldr r2, [r6, #0xc]
	ldrb r1, [r2, #0x15]
	ldr r0, [r2, #0xc]
	movs r5, #0x10
	ands r0, r5
	cmp r0, #0
	beq _08080C1C
	lsls r0, r1, #0x18
	asrs r1, r0, #0x18
	lsrs r0, r0, #0x1f
	adds r1, r1, r0
	lsrs r1, r1, #1
_08080C1C:
	lsls r0, r1, #0x18
	asrs r3, r0, #0x18
	str r4, [sp]
	ldr r0, [r2, #4]
	ldrb r1, [r0, #0x15]
	ldr r0, [r2, #0xc]
	ands r0, r5
	cmp r0, #0
	beq _08080C38
	lsls r0, r1, #0x18
	asrs r1, r0, #0x18
	lsrs r0, r0, #0x1f
	adds r1, r1, r0
	lsrs r1, r1, #1
_08080C38:
	lsls r0, r1, #0x18
	asrs r0, r0, #0x18
	str r0, [sp, #4]
	movs r0, #1
	movs r1, #5
	movs r2, #3
	bl sub_08080A94
	ldr r0, [r6, #0xc]
	bl GetUnitSpeed
	adds r4, r0, #0
	ldr r2, [r6, #0xc]
	ldrb r1, [r2, #0x16]
	ldr r0, [r2, #0xc]
	ands r0, r5
	cmp r0, #0
	beq _08080C66
	lsls r0, r1, #0x18
	asrs r1, r0, #0x18
	lsrs r0, r0, #0x1f
	adds r1, r1, r0
	lsrs r1, r1, #1
_08080C66:
	lsls r0, r1, #0x18
	asrs r3, r0, #0x18
	str r4, [sp]
	ldr r0, [r2, #4]
	ldrb r1, [r0, #0x16]
	ldr r0, [r2, #0xc]
	ands r0, r5
	cmp r0, #0
	beq _08080C82
	lsls r0, r1, #0x18
	asrs r1, r0, #0x18
	lsrs r0, r0, #0x1f
	adds r1, r1, r0
	lsrs r1, r1, #1
_08080C82:
	lsls r0, r1, #0x18
	asrs r0, r0, #0x18
	str r0, [sp, #4]
	movs r0, #2
	movs r1, #5
	movs r2, #5
	bl sub_08080A94
	ldr r0, [r6, #0xc]
	bl GetUnitLuck
	ldr r1, [r6, #0xc]
	movs r3, #0x19
	ldrsb r3, [r1, r3]
	str r0, [sp]
	movs r0, #0x1e
	str r0, [sp, #4]
	movs r0, #3
	movs r1, #5
	movs r2, #7
	bl sub_08080A94
	ldr r0, [r6, #0xc]
	bl GetUnitDefense
	ldr r1, [r6, #0xc]
	movs r3, #0x17
	ldrsb r3, [r1, r3]
	str r0, [sp]
	ldr r0, [r1, #4]
	ldrb r0, [r0, #0x17]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	str r0, [sp, #4]
	movs r0, #4
	movs r1, #5
	movs r2, #9
	bl sub_08080A94
	ldr r0, [r6, #0xc]
	bl GetUnitResistance
	ldr r1, [r6, #0xc]
	movs r3, #0x18
	ldrsb r3, [r1, r3]
	str r0, [sp]
	ldr r0, [r1, #4]
	ldrb r0, [r0, #0x18]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	str r0, [sp, #4]
	movs r0, #5
	movs r1, #5
	movs r2, #0xb
	bl sub_08080A94
	ldr r1, [r6, #0xc]
	ldr r0, [r1, #4]
	movs r3, #0x12
	ldrsb r3, [r0, r3]
	movs r0, #0x1d
	ldrsb r0, [r1, r0]
	adds r0, r0, r3
	str r0, [sp]
	movs r5, #0xf
	str r5, [sp, #4]
	movs r0, #6
	movs r1, #0xd
	movs r2, #1
	bl sub_08080A94
	ldr r1, [r6, #0xc]
	ldr r0, [r1, #4]
	movs r3, #0x11
	ldrsb r3, [r0, r3]
	ldr r0, [r1]
	ldrb r0, [r0, #0x13]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r3, r3, r0
	movs r0, #0x1a
	ldrsb r0, [r1, r0]
	adds r0, r3, r0
	str r0, [sp]
	ldr r0, [r1, #4]
	ldrb r0, [r0, #0x19]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	str r0, [sp, #4]
	movs r0, #7
	movs r1, #0xd
	movs r2, #3
	bl sub_08080A94
	ldr r7, _08080E00 @ =0x02003396
	ldr r0, [r6, #0xc]
	bl GetUnitAid
	adds r2, r0, #0
	adds r0, r7, #0
	movs r1, #2
	bl sub_08006068
	adds r4, r7, #2
	ldr r0, [r6, #0xc]
	ldr r1, [r0]
	ldr r2, [r0, #4]
	ldr r0, [r1, #0x28]
	ldr r1, [r2, #0x28]
	orrs r0, r1
	bl GetUnitAidIconId
	adds r1, r0, #0
	movs r0, #0xa0
	lsls r0, r0, #7
	mov r8, r0
	adds r0, r4, #0
	mov r2, r8
	bl PutIcon
	adds r4, r6, #0
	adds r4, #0x78
	ldr r0, [r6, #0xc]
	bl GetUnitRescueName
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x18
	movs r2, #2
	bl Text_InsertDrawString
	adds r4, #0x10
	ldr r0, [r6, #0xc]
	bl GetUnitStatusName
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x18
	movs r2, #2
	bl Text_InsertDrawString
	ldr r0, [r6, #0xc]
	adds r0, #0x30
	ldrb r2, [r0]
	ands r5, r2
	cmp r5, #0
	beq _08080DB6
	movs r1, #0xc3
	lsls r1, r1, #1
	adds r0, r7, r1
	lsrs r2, r2, #4
	movs r1, #0
	bl sub_080060C4
_08080DB6:
	adds r4, r7, #0
	adds r4, #0xfe
	ldr r0, [r6, #0xc]
	bl sub_08026FB0
	adds r1, r0, #0
	adds r0, r4, #0
	mov r2, r8
	bl PutIcon
	adds r4, r6, #0
	adds r4, #0x80
	ldr r0, [r6, #0xc]
	ldr r0, [r0]
	ldrb r0, [r0, #9]
	bl sub_08027000
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x28
	movs r2, #2
	bl Text_InsertDrawString
	bl DisplayBwl
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08080DF4: .4byte 0x0200327E
_08080DF8: .4byte 0x0841CD8C
_08080DFC: .4byte gStatScreenSt
_08080E00: .4byte 0x02003396

	thumb_func_start sub_08080E04
sub_08080E04: @ 0x08080E04
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r0, _08080E68 @ =0x08403560
	ldr r4, _08080E6C @ =gBuf
	adds r1, r4, #0
	bl sub_08013688
	ldr r0, _08080E70 @ =0x0200373C
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl TmApplyTsa_thm
	ldr r0, _08080E74 @ =0x084038CC
	adds r1, r4, #0
	bl sub_08013688
	ldr r0, _08080E78 @ =0x02003EFE
	ldr r2, _08080E7C @ =0x00007060
	adds r1, r4, #0
	bl TmApplyTsa_thm
	ldr r0, _08080E80 @ =0x0841CC78
	bl sub_08080800
	movs r4, #0
	ldr r1, _08080E84 @ =gStatScreenSt
	ldr r0, [r1, #0xc]
	ldrh r5, [r0, #0x1e]
	cmp r5, #0
	beq _08080EC2
	adds r7, r1, #0
	mov r8, r4
	movs r6, #0x40
_08080E4A:
	ldr r2, [r7, #0xc]
	ldr r0, [r2, #0xc]
	movs r1, #0x80
	lsls r1, r1, #5
	ands r0, r1
	cmp r0, #0
	beq _08080E88
	adds r0, r2, #0
	bl GetUnitItemCount
	subs r0, #1
	cmp r4, r0
	bne _08080E88
	movs r2, #4
	b _08080E9A
	.align 2, 0
_08080E68: .4byte 0x08403560
_08080E6C: .4byte gBuf
_08080E70: .4byte 0x0200373C
_08080E74: .4byte 0x084038CC
_08080E78: .4byte 0x02003EFE
_08080E7C: .4byte 0x00007060
_08080E80: .4byte 0x0841CC78
_08080E84: .4byte gStatScreenSt
_08080E88:
	ldr r0, [r7, #0xc]
	adds r1, r5, #0
	bl sub_08016F04
	movs r2, #0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08080E9A
	movs r2, #1
_08080E9A:
	lsls r0, r4, #3
	ldr r1, _08080F8C @ =0x0200319C
	adds r0, r0, r1
	ldr r3, _08080F90 @ =0x0200323E
	adds r3, r6, r3
	adds r1, r5, #0
	bl sub_08016AD0
	movs r0, #2
	add r8, r0
	adds r6, #0x80
	adds r4, #1
	cmp r4, #4
	bgt _08080EC2
	ldr r0, [r7, #0xc]
	adds r0, #0x1e
	add r0, r8
	ldrh r5, [r0]
	cmp r5, #0
	bne _08080E4A
_08080EC2:
	ldr r7, _08080F94 @ =gStatScreenSt
	ldr r0, [r7, #0xc]
	bl GetUnitEquippedWeaponSlot
	adds r4, r0, #0
	movs r5, #0
	cmp r4, #0
	blt _08080EFC
	lsls r4, r4, #1
	adds r0, r4, #1
	lsls r0, r0, #6
	ldr r1, _08080F98 @ =0x0200325C
	adds r0, r0, r1
	movs r1, #0
	movs r2, #0x1f
	bl sub_08005FEC
	adds r0, r4, #2
	lsls r0, r0, #6
	ldr r1, _08080F9C @ =0x02003C3E
	adds r0, r0, r1
	ldr r1, _08080FA0 @ =0x08403908
	ldr r2, _08080FA4 @ =0x00007060
	bl TmApplyTsa_thm
	ldr r0, [r7, #0xc]
	adds r0, #0x1e
	adds r0, r0, r4
	ldrh r5, [r0]
_08080EFC:
	ldr r6, _08080FA8 @ =0x0200358C
	ldr r4, _08080FAC @ =gBattleActor
	adds r0, r4, #0
	adds r0, #0x5a
	movs r1, #0
	ldrsh r2, [r0, r1]
	adds r0, r6, #0
	movs r1, #2
	bl sub_08006074
	adds r0, r6, #0
	adds r0, #0x80
	adds r1, r4, #0
	adds r1, #0x60
	movs r3, #0
	ldrsh r2, [r1, r3]
	movs r1, #2
	bl sub_08006074
	adds r0, r6, #0
	adds r0, #0xe
	adds r1, r4, #0
	adds r1, #0x66
	movs r3, #0
	ldrsh r2, [r1, r3]
	movs r1, #2
	bl sub_08006074
	adds r0, r6, #0
	adds r0, #0x8e
	adds r1, r4, #0
	adds r1, #0x62
	movs r3, #0
	ldrsh r2, [r1, r3]
	movs r1, #2
	bl sub_08006074
	adds r4, r7, #0
	adds r4, #0xb8
	adds r0, r5, #0
	bl GetItemDisplayRangeString
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x10
	movs r2, #2
	bl Text_InsertDrawString
	movs r4, #0
	ldr r0, _08080FB0 @ =0x00005278
	adds r5, r0, #0
	adds r2, r6, #0
	subs r2, #0x8c
	ldr r1, _08080FB4 @ =0x00005270
	adds r3, r1, #0
	adds r1, r6, #0
	subs r1, #0x4c
_08080F6E:
	adds r0, r4, r5
	strh r0, [r2]
	adds r0, r4, r3
	strh r0, [r1]
	adds r2, #2
	adds r1, #2
	adds r4, #1
	cmp r4, #7
	ble _08080F6E
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08080F8C: .4byte 0x0200319C
_08080F90: .4byte 0x0200323E
_08080F94: .4byte gStatScreenSt
_08080F98: .4byte 0x0200325C
_08080F9C: .4byte 0x02003C3E
_08080FA0: .4byte 0x08403908
_08080FA4: .4byte 0x00007060
_08080FA8: .4byte 0x0200358C
_08080FAC: .4byte gBattleActor
_08080FB0: .4byte 0x00005278
_08080FB4: .4byte 0x00005270

	thumb_func_start sub_08080FB8
sub_08080FB8: @ 0x08080FB8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	movs r0, #6
	str r0, [sp, #8]
	ldr r4, _080810A0 @ =gStatScreenSt
	ldr r0, [r4, #0xc]
	bl sub_08026B44
	movs r1, #0
	str r1, [sp, #0xc]
	cmp r0, #5
	bne _08080FDC
	movs r0, #4
	str r0, [sp, #0xc]
_08080FDC:
	ldr r0, [r4, #0xc]
	bl GetUnitSupporterCount
	mov sl, r0
	movs r1, #0
	mov sb, r1
	movs r0, #0
	cmp r0, sl
	bge _08081090
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, _080810A0 @ =gStatScreenSt
	adds r1, r0, r1
	str r1, [sp, #0x10]
_08080FF8:
	ldr r1, _080810A0 @ =gStatScreenSt
	ldr r0, [r1, #0xc]
	mov r1, sb
	bl sub_08026B20
	adds r7, r0, #0
	cmp r7, #0
	beq _08081088
	ldr r1, _080810A0 @ =gStatScreenSt
	ldr r0, [r1, #0xc]
	mov r1, sb
	bl sub_08026AC4
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, [sp, #8]
	lsls r6, r0, #6
	ldr r1, _080810A4 @ =0x02003244
	mov r8, r1
	adds r5, r6, r1
	adds r0, r4, #0
	bl sub_08026FC4
	adds r1, r0, #0
	adds r0, r5, #0
	movs r2, #0xa0
	lsls r2, r2, #7
	bl PutIcon
	adds r0, r4, #0
	bl GetCharacterData
	ldrh r0, [r0]
	bl DecodeMsg
	mov r1, r8
	adds r1, #6
	adds r1, r6, r1
	movs r2, #0
	str r2, [sp]
	str r0, [sp, #4]
	ldr r0, [sp, #0x10]
	ldr r2, [sp, #0xc]
	movs r3, #0
	bl PutDrawText
	movs r5, #2
	cmp r7, #3
	bne _0808105E
	movs r5, #4
_0808105E:
	ldr r0, [sp, #0xc]
	cmp r0, #4
	bne _08081066
	movs r5, #4
_08081066:
	mov r4, r8
	adds r4, #0x12
	adds r4, r6, r4
	adds r0, r7, #0
	bl GetSupportLevelUiChar
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_08005FEC
	ldr r1, [sp, #8]
	adds r1, #2
	str r1, [sp, #8]
	ldr r0, [sp, #0x10]
	adds r0, #8
	str r0, [sp, #0x10]
_08081088:
	movs r1, #1
	add sb, r1
	cmp sb, sl
	blt _08080FF8
_08081090:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080810A0: .4byte gStatScreenSt
_080810A4: .4byte 0x02003244

	thumb_func_start sub_080810A8
sub_080810A8: @ 0x080810A8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	mov sb, r0
	adds r6, r1, #0
	mov sl, r2
	adds r1, r3, #0
	ldr r0, _0808115C @ =gStatScreenSt
	ldr r0, [r0, #0xc]
	adds r0, #0x28
	adds r0, r0, r1
	ldrb r5, [r0]
	lsls r4, r2, #5
	adds r0, r4, r6
	lsls r0, r0, #1
	ldr r2, _08081160 @ =gBmFrameTmap0
	mov r8, r2
	add r0, r8
	adds r1, #0x70
	movs r2, #0xa0
	lsls r2, r2, #7
	bl PutIcon
	movs r7, #2
	cmp r5, #0xfa
	ble _080810E4
	movs r7, #4
_080810E4:
	adds r4, #5
	adds r4, r4, r6
	lsls r4, r4, #1
	add r4, r8
	adds r0, r5, #0
	bl sub_08016E38
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r7, #0
	bl sub_08005FEC
	add r2, sp, #0x10
	adds r0, r5, #0
	add r1, sp, #0xc
	bl sub_08016E8C
	mov r0, sb
	lsls r5, r0, #1
	add r5, sb
	lsls r5, r5, #1
	ldr r2, _08081164 @ =0x00000401
	adds r5, r5, r2
	mov r4, sl
	adds r4, #1
	lsls r4, r4, #5
	adds r4, #3
	adds r4, r4, r6
	lsls r4, r4, #1
	ldr r0, _08081168 @ =0x02003C3C
	adds r4, r4, r0
	movs r6, #0xc0
	lsls r6, r6, #7
	movs r0, #0x22
	str r0, [sp]
	ldr r1, [sp, #0xc]
	lsls r0, r1, #4
	adds r0, r0, r1
	lsls r0, r0, #1
	ldr r1, [sp, #0x10]
	subs r1, #1
	bl __divsi3
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	adds r0, r5, #0
	movs r1, #5
	adds r2, r4, #0
	adds r3, r6, #0
	bl sub_08080600
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808115C: .4byte gStatScreenSt
_08081160: .4byte gBmFrameTmap0
_08081164: .4byte 0x00000401
_08081168: .4byte 0x02003C3C

	thumb_func_start sub_0808116C
sub_0808116C: @ 0x0808116C
	push {r4, lr}
	ldr r0, _080811CC @ =0x084035D0
	ldr r4, _080811D0 @ =gBuf
	adds r1, r4, #0
	bl sub_08013688
	ldr r0, _080811D4 @ =0x0200373C
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl TmApplyTsa_thm
	ldr r0, _080811D8 @ =gStatScreenSt
	ldr r0, [r0, #0xc]
	bl UnitHasMagicRank
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080811E0
	ldr r0, _080811DC @ =0x0841CD28
	bl sub_08080800
	movs r0, #0
	movs r1, #1
	movs r2, #1
	movs r3, #5
	bl sub_080810A8
	movs r0, #1
	movs r1, #1
	movs r2, #3
	movs r3, #6
	bl sub_080810A8
	movs r0, #2
	movs r1, #9
	movs r2, #1
	movs r3, #7
	bl sub_080810A8
	movs r0, #3
	movs r1, #9
	movs r2, #3
	movs r3, #4
	bl sub_080810A8
	b _08081216
	.align 2, 0
_080811CC: .4byte 0x084035D0
_080811D0: .4byte gBuf
_080811D4: .4byte 0x0200373C
_080811D8: .4byte gStatScreenSt
_080811DC: .4byte 0x0841CD28
_080811E0:
	ldr r0, _08081220 @ =0x0841CCD8
	bl sub_08080800
	movs r0, #0
	movs r1, #1
	movs r2, #1
	movs r3, #0
	bl sub_080810A8
	movs r0, #1
	movs r1, #1
	movs r2, #3
	movs r3, #1
	bl sub_080810A8
	movs r0, #2
	movs r1, #9
	movs r2, #1
	movs r3, #2
	bl sub_080810A8
	movs r0, #3
	movs r1, #9
	movs r2, #3
	movs r3, #3
	bl sub_080810A8
_08081216:
	bl sub_08080FB8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08081220: .4byte 0x0841CCD8

	thumb_func_start sub_08081224
sub_08081224: @ 0x08081224
	push {r4, r5, lr}
	sub sp, #0x18
	adds r4, r0, #0
	mov r1, sp
	ldr r0, _08081264 @ =0x0841CD90
	ldm r0!, {r2, r3, r5}
	stm r1!, {r2, r3, r5}
	ldr r0, [r0]
	str r0, [r1]
	movs r5, #0
	str r5, [sp, #0x10]
	add r0, sp, #0x10
	ldr r1, _08081268 @ =gBmFrameTmap0
	ldr r2, _0808126C @ =0x01000140
	bl CpuFastSet
	str r5, [sp, #0x14]
	add r0, sp, #0x14
	ldr r1, _08081270 @ =0x02003C3C
	ldr r2, _08081274 @ =0x01000120
	bl CpuFastSet
	lsls r4, r4, #2
	mov r1, sp
	adds r0, r1, r4
	ldr r0, [r0]
	bl _call_via_r0

	thumb_func_start sub_0808125C
sub_0808125C: @ 0x0808125C
	add sp, #0x18
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08081264: .4byte 0x0841CD90
_08081268: .4byte gBmFrameTmap0
_0808126C: .4byte 0x01000140
_08081270: .4byte 0x02003C3C
_08081274: .4byte 0x01000120

	thumb_func_start sub_08081278
sub_08081278: @ 0x08081278
	push {r4, r5, r6, r7, lr}
	adds r7, r1, #0
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r6, #0xc0
	ands r6, r0
	adds r4, r0, #0
_08081288:
	adds r4, r4, r7
	movs r0, #0x3f
	ands r4, r0
	adds r0, r6, r4
	bl GetUnit
	adds r3, r0, #0
	cmp r3, #0
	beq _08081288
	ldr r5, [r3]
	cmp r5, #0
	beq _08081288
	ldr r0, _08081330 @ =0x0203E648
	ldrh r2, [r0, #2]
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	beq _080812B6
	ldr r0, [r3, #0xc]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	bne _08081288
_080812B6:
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _080812C8
	ldr r0, [r3, #0xc]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	bne _08081288
_080812C8:
	movs r0, #4
	ands r0, r2
	cmp r0, #0
	beq _080812DC
	ldr r0, [r3, #0xc]
	movs r1, #0x80
	lsls r1, r1, #2
	ands r0, r1
	cmp r0, #0
	bne _08081288
_080812DC:
	movs r0, #8
	ands r0, r2
	cmp r0, #0
	beq _080812EE
	ldr r0, [r3, #0xc]
	movs r1, #0x80
	ands r0, r1
	cmp r0, #0
	bne _08081288
_080812EE:
	movs r0, #0x10
	ands r0, r2
	cmp r0, #0
	beq _08081302
	ldr r0, [r3, #0xc]
	movs r1, #0x80
	lsls r1, r1, #9
	ands r0, r1
	cmp r0, #0
	bne _08081288
_08081302:
	movs r0, #0x20
	ands r0, r2
	ldr r2, [r3, #4]
	cmp r0, #0
	beq _0808131C
	ldr r0, [r5, #0x28]
	ldr r1, [r2, #0x28]
	orrs r0, r1
	movs r1, #0x80
	lsls r1, r1, #2
	ands r0, r1
	cmp r0, #0
	bne _08081288
_0808131C:
	ldrb r2, [r2, #4]
	cmp r2, #0x49
	beq _08081288
	ldrb r5, [r5, #4]
	cmp r5, #0x9e
	beq _08081288
	adds r0, r3, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08081330: .4byte 0x0203E648

	thumb_func_start sub_08081334
sub_08081334: @ 0x08081334
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	ldr r0, _080813B4 @ =0x02022CF8
	movs r1, #0x12
	movs r2, #0x12
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, _080813B8 @ =0x020234F8
	movs r1, #0x12
	movs r2, #0x12
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, _080813BC @ =0x02023CF8
	movs r1, #0x12
	movs r2, #0x12
	movs r3, #0
	bl TmFillRect_thm
	ldr r6, _080813C0 @ =0x08D8A358
	adds r4, r7, #0
	adds r4, #0x4c
	movs r1, #0
	ldrsh r0, [r4, r1]
	adds r0, r0, r6
	movs r5, #0
	ldrsb r5, [r0, r5]
	cmp r5, #0x7f
	bne _0808138C
	adds r0, r7, #0
	adds r0, #0x4a
	movs r2, #0
	ldrsh r0, [r0, r2]
	bl sub_08081224
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	movs r1, #0
	ldrsh r0, [r4, r1]
	adds r0, r0, r6
	movs r5, #0
	ldrsb r5, [r0, r5]
_0808138C:
	adds r1, r7, #0
	adds r1, #0x52
	movs r0, #0x20
	ldrh r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0808139C
	rsbs r5, r5, #0
_0808139C:
	adds r2, r5, #0
	cmp r5, #0
	bge _080813A4
	rsbs r2, r5, #0
_080813A4:
	movs r0, #0x12
	subs r6, r0, r2
	cmp r5, #0
	bge _080813C4
	movs r4, #0
	rsbs r5, r5, #0
	b _080813C8
	.align 2, 0
_080813B4: .4byte 0x02022CF8
_080813B8: .4byte 0x020234F8
_080813BC: .4byte 0x02023CF8
_080813C0: .4byte 0x08D8A358
_080813C4:
	adds r4, r5, #0
	movs r5, #0
_080813C8:
	lsls r5, r5, #1
	ldr r0, _08081430 @ =gBmFrameTmap0
	adds r0, r5, r0
	lsls r4, r4, #1
	ldr r1, _08081434 @ =0x02022CF8
	adds r1, r4, r1
	adds r2, r6, #0
	movs r3, #0x12
	bl TmCopyRect_thm
	ldr r0, _08081438 @ =0x0200373C
	adds r0, r5, r0
	ldr r1, _0808143C @ =0x020234F8
	adds r1, r4, r1
	adds r2, r6, #0
	movs r3, #0x12
	bl TmCopyRect_thm
	ldr r0, _08081440 @ =0x02003C3C
	adds r5, r5, r0
	ldr r0, _08081444 @ =0x02023CF8
	adds r4, r4, r0
	adds r0, r5, #0
	adds r1, r4, #0
	adds r2, r6, #0
	movs r3, #0x12
	bl TmCopyRect_thm
	movs r0, #7
	bl EnableBgSync
	adds r0, r7, #0
	adds r0, #0x4c
	ldrh r1, [r0]
	adds r1, #1
	strh r1, [r0]
	ldr r1, _08081448 @ =0x08D8A358
	movs r2, #0
	ldrsh r0, [r0, r2]
	adds r0, r0, r1
	movs r5, #0
	ldrsb r5, [r0, r5]
	movs r0, #0x80
	rsbs r0, r0, #0
	cmp r5, r0
	bne _0808142A
	adds r0, r7, #0
	bl Proc_Break
_0808142A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08081430: .4byte gBmFrameTmap0
_08081434: .4byte 0x02022CF8
_08081438: .4byte 0x0200373C
_0808143C: .4byte 0x020234F8
_08081440: .4byte 0x02003C3C
_08081444: .4byte 0x02023CF8
_08081448: .4byte 0x08D8A358

	thumb_func_start sub_0808144C
sub_0808144C: @ 0x0808144C
	ldr r1, _08081454 @ =gStatScreenSt
	movs r0, #0
	strb r0, [r1, #8]
	bx lr
	.align 2, 0
_08081454: .4byte gStatScreenSt

	thumb_func_start sub_08081458
sub_08081458: @ 0x08081458
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r1
	adds r6, r2, #0
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	ldr r7, _080814B4 @ =0x08D8A368
	adds r0, r7, #0
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	bne _080814A8
	ldr r0, _080814B8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08081486
	ldr r0, _080814BC @ =0x0000038F
	bl m4aSongNumStart
_08081486:
	adds r0, r7, #0
	adds r1, r6, #0
	bl Proc_StartBlocking
	adds r1, r0, #0
	adds r0, #0x4c
	strh r4, [r0]
	subs r0, #2
	mov r2, r8
	strh r2, [r0]
	adds r0, #8
	strh r5, [r0]
	ldr r0, _080814C0 @ =gStatScreenSt
	strh r5, [r0, #2]
	str r4, [r0, #0x14]
	movs r1, #1
	strb r1, [r0, #8]
_080814A8:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080814B4: .4byte 0x08D8A368
_080814B8: .4byte gPlaySt
_080814BC: .4byte 0x0000038F
_080814C0: .4byte gStatScreenSt

	thumb_func_start sub_080814C4
sub_080814C4: @ 0x080814C4
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r1, _08081538 @ =gStatScreenSt
	movs r6, #0
	movs r4, #1
	movs r0, #1
	strb r0, [r1, #8]
	adds r1, r5, #0
	adds r1, #0x4c
	movs r0, #4
	strh r0, [r1]
	ldr r3, _0808153C @ =gDispIo
	movs r2, #4
	rsbs r2, r2, #0
	adds r0, r2, #0
	ldrb r1, [r3, #0xc]
	ands r0, r1
	orrs r0, r4
	strb r0, [r3, #0xc]
	movs r0, #3
	ldrb r1, [r3, #0x10]
	orrs r0, r1
	strb r0, [r3, #0x10]
	adds r0, r2, #0
	ldrb r1, [r3, #0x14]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	ands r2, r0
	strb r2, [r3, #0x18]
	ldr r0, _08081540 @ =0x0000FFE0
	ldrh r1, [r3, #0x3c]
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	ldr r1, _08081544 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xb8
	lsls r2, r2, #5
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	adds r3, #0x3d
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r3]
	ands r0, r1
	strb r0, [r3]
	ldr r0, [r5, #0x38]
	cmp r0, #0
	ble _08081548
	str r6, [r5, #0x3c]
	movs r0, #0x3c
	rsbs r0, r0, #0
	b _0808154C
	.align 2, 0
_08081538: .4byte gStatScreenSt
_0808153C: .4byte gDispIo
_08081540: .4byte 0x0000FFE0
_08081544: .4byte 0x0000E0FF
_08081548:
	str r6, [r5, #0x3c]
	movs r0, #0x3c
_0808154C:
	str r0, [r5, #0x40]
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_08081554
sub_08081554: @ 0x08081554
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r3, _080815CC @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r5, r6, #0
	adds r5, #0x4c
	ldrh r1, [r5]
	adds r0, r3, #0
	adds r0, #0x44
	movs r2, #0
	strb r1, [r0]
	movs r0, #0x10
	subs r0, r0, r1
	adds r1, r3, #0
	adds r1, #0x45
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r2, [r0]
	ldr r4, _080815D0 @ =gStatScreenSt
	ldr r0, [r4, #0x10]
	movs r1, #6
	ldrsh r2, [r4, r1]
	adds r2, #0x8a
	movs r1, #0x50
	bl sub_0806E2E8
	ldr r1, [r6, #0x3c]
	ldr r2, [r6, #0x40]
	movs r0, #0
	ldrsh r3, [r5, r0]
	movs r0, #0x10
	str r0, [sp]
	movs r0, #2
	bl Interpolate
	strh r0, [r4, #6]
	ldrh r0, [r5]
	adds r0, #3
	strh r0, [r5]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x10
	ble _080815C2
	adds r0, r6, #0
	bl Proc_Break
_080815C2:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080815CC: .4byte gDispIo
_080815D0: .4byte gStatScreenSt

	thumb_func_start sub_080815D4
sub_080815D4: @ 0x080815D4
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x4c
	movs r5, #0
	movs r0, #1
	strh r0, [r1]
	ldr r3, _08081630 @ =gDispIo
	movs r2, #4
	rsbs r2, r2, #0
	adds r0, r2, #0
	ldrb r1, [r3, #0xc]
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	strb r0, [r3, #0xc]
	movs r0, #3
	ldrb r1, [r3, #0x10]
	orrs r0, r1
	strb r0, [r3, #0x10]
	adds r0, r2, #0
	ldrb r1, [r3, #0x14]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	ands r2, r0
	strb r2, [r3, #0x18]
	ldr r0, _08081634 @ =0x0000FFE0
	ldrh r1, [r3, #0x3c]
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	ldr r1, _08081638 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xb8
	lsls r2, r2, #5
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	ldr r0, [r4, #0x38]
	cmp r0, #0
	ble _0808163C
	movs r0, #0x3c
	b _08081640
	.align 2, 0
_08081630: .4byte gDispIo
_08081634: .4byte 0x0000FFE0
_08081638: .4byte 0x0000E0FF
_0808163C:
	movs r0, #0x3c
	rsbs r0, r0, #0
_08081640:
	str r0, [r4, #0x3c]
	str r5, [r4, #0x40]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0808164C
sub_0808164C: @ 0x0808164C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r4, _080816C0 @ =gDispIo
	adds r2, r4, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r5, r6, #0
	adds r5, #0x4c
	ldrh r2, [r5]
	movs r0, #0x10
	subs r0, r0, r2
	adds r1, r4, #0
	adds r1, #0x44
	movs r3, #0
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r3, [r0]
	ldr r4, _080816C4 @ =gStatScreenSt
	ldr r0, [r4, #0x10]
	movs r1, #6
	ldrsh r2, [r4, r1]
	adds r2, #0x8a
	movs r1, #0x50
	bl sub_0806E2E8
	ldr r1, [r6, #0x3c]
	ldr r2, [r6, #0x40]
	movs r0, #0
	ldrsh r3, [r5, r0]
	movs r0, #0x10
	str r0, [sp]
	movs r0, #5
	bl Interpolate
	strh r0, [r4, #6]
	ldrh r0, [r5]
	adds r0, #3
	strh r0, [r5]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xf
	ble _080816B8
	adds r0, r6, #0
	bl Proc_Break
_080816B8:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080816C0: .4byte gDispIo
_080816C4: .4byte gStatScreenSt

	thumb_func_start sub_080816C8
sub_080816C8: @ 0x080816C8
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x4a
	movs r1, #0
	ldrsh r0, [r0, r1]
	bl GetUnit
	ldr r1, _080816F0 @ =gStatScreenSt
	str r0, [r1, #0xc]
	ldr r0, _080816F4 @ =0x08D8A530
	bl Proc_Find
	bl sub_08081EF8
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080816F0: .4byte gStatScreenSt
_080816F4: .4byte 0x08D8A530

	thumb_func_start sub_080816F8
sub_080816F8: @ 0x080816F8
	push {r4, r5, lr}
	ldr r4, _0808177C @ =gStatScreenSt
	ldr r0, [r4, #0x10]
	cmp r0, #0
	beq _0808170A
	movs r1, #0x50
	movs r2, #0x8a
	bl sub_0806E2E8
_0808170A:
	ldr r3, _08081780 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0xc]
	movs r2, #3
	ldrb r0, [r3, #0x10]
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r5, [r3, #0x14]
	ands r1, r5
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	orrs r2, r0
	strb r2, [r3, #0x18]
	adds r2, r3, #0
	adds r2, #0x3c
	ldr r0, _08081784 @ =0x0000FFE0
	ldrh r1, [r3, #0x3c]
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	ldr r1, _08081788 @ =0x0000E0FF
	ands r0, r1
	movs r5, #0x80
	lsls r5, r5, #4
	adds r1, r5, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r2, #0
	movs r0, #6
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r2, [r0]
	strb r2, [r4, #8]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808177C: .4byte gStatScreenSt
_08081780: .4byte gDispIo
_08081784: .4byte 0x0000FFE0
_08081788: .4byte 0x0000E0FF

	thumb_func_start sub_0808178C
sub_0808178C: @ 0x0808178C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r1, r2, #0
	ldr r0, _080817C0 @ =0x08D8A380
	bl Proc_StartBlocking
	movs r1, #0xb
	ldrsb r1, [r4, r1]
	adds r2, r0, #0
	adds r2, #0x4a
	strh r1, [r2]
	str r5, [r0, #0x38]
	ldr r0, _080817C4 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080817B8
	movs r0, #0xc8
	bl m4aSongNumStart
_080817B8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080817C0: .4byte 0x08D8A380
_080817C4: .4byte gPlaySt

	thumb_func_start sub_080817C8
sub_080817C8: @ 0x080817C8
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, _08081820 @ =gStatScreenSt
	movs r2, #4
	ldrsh r1, [r0, r2]
	adds r1, #0x6d
	movs r3, #6
	ldrsh r2, [r0, r3]
	adds r2, #5
	ldr r3, _08081824 @ =0x08D8A3C0
	ldr r4, _08081828 @ =0x08D8A3D4
	lsls r0, r5, #1
	adds r0, r0, r4
	ldrh r0, [r0]
	movs r4, #0xf9
	lsls r4, r4, #6
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #4
	bl sub_08006884
	bl GetGameTime
	lsrs r0, r0, #2
	movs r1, #0xf
	ands r0, r1
	lsls r5, r5, #6
	lsls r0, r0, #1
	ldr r1, _0808182C @ =0x08404024
	adds r0, r0, r1
	adds r5, r5, r0
	ldr r1, _08081830 @ =0x02022AC8
	adds r0, r5, #0
	movs r2, #0xb
	bl CpuSet
	bl EnablePalSync
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08081820: .4byte gStatScreenSt
_08081824: .4byte 0x08D8A3C0
_08081828: .4byte 0x08D8A3D4
_0808182C: .4byte 0x08404024
_08081830: .4byte 0x02022AC8

	thumb_func_start sub_08081834
sub_08081834: @ 0x08081834
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, sb
	mov r4, r8
	push {r4, r5, r6}
	sub sp, #4
	mov sb, r0
	ldr r4, _080818C4 @ =gSinLut
	movs r0, #0x80
	adds r0, r0, r4
	mov sl, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov r8, r2
	mov r1, r8
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, sl
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #8
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	ldr r0, _080818C8 @ =gStatScreenSt
	ldrb r0, [r0]
	movs r1, #0x36
	add sb, r1
	mov r2, sb
	strb r0, [r2]
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080818C4: .4byte gSinLut
_080818C8: .4byte gStatScreenSt

	thumb_func_start sub_080818CC
sub_080818CC: @ 0x080818CC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x36
	ldrb r0, [r5]
	bl sub_080817C8
	ldr r1, _080818F0 @ =gStatScreenSt
	ldrh r0, [r1, #2]
	cmp r0, #0
	beq _080818F4
	movs r0, #5
	strh r0, [r4, #0x38]
	adds r0, r4, #0
	bl Proc_Break
	b _080818F8
	.align 2, 0
_080818F0: .4byte gStatScreenSt
_080818F4:
	ldrb r0, [r1]
	strb r0, [r5]
_080818F8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08081900
sub_08081900: @ 0x08081900
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r5, _080819C4 @ =gSinLut
	movs r0, #0x80
	adds r0, r0, r5
	mov sl, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov sb, r2
	mov r1, sb
	bl Div
	mov r8, r0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	mov r8, r0
	movs r1, #0
	ldrsh r4, [r5, r1]
	rsbs r4, r4, #0
	lsls r4, r4, #4
	movs r2, #0x38
	ldrsh r0, [r7, r2]
	lsls r0, r0, #8
	movs r1, #6
	bl __divsi3
	adds r1, r0, #0
	adds r0, r4, #0
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r5, r1]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	mov r2, sl
	movs r0, #0
	ldrsh r4, [r2, r0]
	lsls r4, r4, #4
	movs r1, #0x38
	ldrsh r0, [r7, r1]
	lsls r0, r0, #8
	movs r1, #6
	bl __divsi3
	adds r1, r0, #0
	adds r0, r4, #0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #8
	mov r1, r8
	adds r2, r6, #0
	adds r3, r5, #0
	bl SetObjAffine
	adds r0, r7, #0
	adds r0, #0x36
	ldrb r0, [r0]
	bl sub_080817C8
	ldrh r0, [r7, #0x38]
	subs r0, #1
	strh r0, [r7, #0x38]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080819B2
	movs r0, #1
	strh r0, [r7, #0x38]
	adds r0, r7, #0
	bl Proc_Break
_080819B2:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080819C4: .4byte gSinLut

	thumb_func_start sub_080819C8
sub_080819C8: @ 0x080819C8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r5, _08081A90 @ =gSinLut
	movs r0, #0x80
	adds r0, r0, r5
	mov sl, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov sb, r2
	mov r1, sb
	bl Div
	mov r8, r0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	mov r8, r0
	movs r1, #0
	ldrsh r4, [r5, r1]
	rsbs r4, r4, #0
	lsls r4, r4, #4
	movs r2, #0x38
	ldrsh r0, [r7, r2]
	lsls r0, r0, #8
	movs r1, #6
	bl __divsi3
	adds r1, r0, #0
	adds r0, r4, #0
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r5, r1]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	mov r2, sl
	movs r0, #0
	ldrsh r4, [r2, r0]
	lsls r4, r4, #4
	movs r1, #0x38
	ldrsh r0, [r7, r1]
	lsls r0, r0, #8
	movs r1, #6
	bl __divsi3
	adds r1, r0, #0
	adds r0, r4, #0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #8
	mov r1, r8
	adds r2, r6, #0
	adds r3, r5, #0
	bl SetObjAffine
	ldr r4, _08081A94 @ =gStatScreenSt
	ldrb r0, [r4]
	bl sub_080817C8
	ldrh r0, [r7, #0x38]
	adds r0, #1
	strh r0, [r7, #0x38]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #6
	ble _08081A7E
	ldrb r0, [r4]
	adds r1, r7, #0
	adds r1, #0x36
	strb r0, [r1]
	adds r0, r7, #0
	bl Proc_Break
_08081A7E:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08081A90: .4byte gSinLut
_08081A94: .4byte gStatScreenSt

	thumb_func_start sub_08081A98
sub_08081A98: @ 0x08081A98
	movs r2, #0
	movs r1, #0x69
	strh r1, [r0, #0x2a]
	movs r1, #0xca
	strh r1, [r0, #0x2c]
	strh r2, [r0, #0x30]
	strh r2, [r0, #0x2e]
	movs r1, #4
	strh r1, [r0, #0x34]
	strh r1, [r0, #0x32]
	bx lr
	.align 2, 0

	thumb_func_start sub_08081AB0
sub_08081AB0: @ 0x08081AB0
	adds r1, r0, #0
	ldr r2, _08081AE0 @ =gStatScreenSt
	movs r0, #0x20
	ldrh r3, [r2, #2]
	ands r0, r3
	cmp r0, #0
	beq _08081AC6
	movs r0, #0x1f
	strh r0, [r1, #0x32]
	movs r0, #0x63
	strh r0, [r1, #0x2a]
_08081AC6:
	movs r0, #0x10
	ldrh r3, [r2, #2]
	ands r0, r3
	cmp r0, #0
	beq _08081AD8
	movs r0, #0x1f
	strh r0, [r1, #0x34]
	movs r0, #0xd0
	strh r0, [r1, #0x2c]
_08081AD8:
	movs r0, #0
	strh r0, [r2, #2]
	bx lr
	.align 2, 0
_08081AE0: .4byte gStatScreenSt

	thumb_func_start sub_08081AE4
sub_08081AE4: @ 0x08081AE4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r0, _08081BBC @ =0x00004640
	mov sb, r0
	ldrh r1, [r7, #0x32]
	ldrh r2, [r7, #0x2e]
	adds r0, r1, r2
	strh r0, [r7, #0x2e]
	ldrh r3, [r7, #0x30]
	ldrh r2, [r7, #0x34]
	adds r0, r3, r2
	strh r0, [r7, #0x30]
	lsls r0, r1, #0x10
	asrs r0, r0, #0x10
	cmp r0, #4
	ble _08081B10
	subs r0, r1, #1
	strh r0, [r7, #0x32]
_08081B10:
	ldrh r1, [r7, #0x34]
	movs r3, #0x34
	ldrsh r0, [r7, r3]
	cmp r0, #4
	ble _08081B1E
	subs r0, r1, #1
	strh r0, [r7, #0x34]
_08081B1E:
	bl GetGameTime
	movs r1, #3
	ands r1, r0
	cmp r1, #0
	bne _08081B46
	ldrh r1, [r7, #0x2a]
	movs r2, #0x2a
	ldrsh r0, [r7, r2]
	cmp r0, #0x68
	bgt _08081B38
	adds r0, r1, #1
	strh r0, [r7, #0x2a]
_08081B38:
	ldrh r1, [r7, #0x2c]
	movs r3, #0x2c
	ldrsh r0, [r7, r3]
	cmp r0, #0xca
	ble _08081B46
	subs r0, r1, #1
	strh r0, [r7, #0x2c]
_08081B46:
	ldr r6, _08081BC0 @ =gStatScreenSt
	movs r0, #4
	ldrsh r5, [r6, r0]
	movs r1, #0x2a
	ldrsh r0, [r7, r1]
	adds r5, r5, r0
	movs r2, #6
	ldrsh r4, [r6, r2]
	adds r4, #6
	ldr r3, _08081BC4 @ =0x08BFF780
	mov r8, r3
	ldrh r1, [r7, #0x2e]
	lsrs r0, r1, #5
	movs r1, #6
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r0, #0x4a
	add r0, sb
	str r0, [sp]
	movs r0, #0
	adds r1, r5, #0
	adds r2, r4, #0
	mov r3, r8
	bl sub_08006884
	movs r2, #4
	ldrsh r5, [r6, r2]
	movs r3, #0x2c
	ldrsh r0, [r7, r3]
	adds r5, r5, r0
	movs r0, #6
	ldrsh r4, [r6, r0]
	adds r4, #6
	ldr r6, _08081BC8 @ =0x08BFF7D0
	ldrh r7, [r7, #0x30]
	lsrs r0, r7, #5
	movs r1, #6
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r0, #0x4a
	add r0, sb
	str r0, [sp]
	movs r0, #0
	adds r1, r5, #0
	adds r2, r4, #0
	adds r3, r6, #0
	bl sub_08006884
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08081BBC: .4byte 0x00004640
_08081BC0: .4byte gStatScreenSt
_08081BC4: .4byte 0x08BFF780
_08081BC8: .4byte 0x08BFF7D0

	thumb_func_start sub_08081BCC
sub_08081BCC: @ 0x08081BCC
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r4, _08081C2C @ =gStatScreenSt
	movs r0, #4
	ldrsh r1, [r4, r0]
	adds r1, #0xe3
	movs r3, #6
	ldrsh r2, [r4, r3]
	adds r2, #0xc
	ldr r5, _08081C30 @ =0x08BFF760
	ldrb r6, [r4, #1]
	ldr r3, _08081C34 @ =0x00004EA4
	adds r0, r6, r3
	str r0, [sp]
	movs r0, #2
	adds r3, r5, #0
	bl sub_08006884
	movs r6, #4
	ldrsh r1, [r4, r6]
	adds r1, #0xdd
	movs r0, #6
	ldrsh r2, [r4, r0]
	adds r2, #0xc
	ldr r0, _08081C38 @ =0x00004E45
	str r0, [sp]
	movs r0, #2
	adds r3, r5, #0
	bl sub_08006884
	movs r3, #4
	ldrsh r1, [r4, r3]
	adds r1, #0xd6
	movs r6, #6
	ldrsh r2, [r4, r6]
	adds r2, #0xc
	ldrb r4, [r4]
	ldr r3, _08081C3C @ =0x00004EA5
	adds r0, r4, r3
	str r0, [sp]
	movs r0, #2
	adds r3, r5, #0
	bl sub_08006884
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08081C2C: .4byte gStatScreenSt
_08081C30: .4byte 0x08BFF760
_08081C34: .4byte 0x00004EA4
_08081C38: .4byte 0x00004E45
_08081C3C: .4byte 0x00004EA5

	thumb_func_start sub_08081C40
sub_08081C40: @ 0x08081C40
	push {r4, lr}
	sub sp, #4
	ldr r4, _08081C94 @ =gStatScreenSt
	movs r0, #4
	ldrsh r1, [r4, r0]
	movs r0, #6
	ldrsh r2, [r4, r0]
	ldr r3, _08081C98 @ =0x08D8A41C
	movs r0, #0xb9
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #0xc
	bl sub_08006884
	movs r0, #4
	ldrsh r1, [r4, r0]
	adds r1, #0x40
	movs r0, #6
	ldrsh r2, [r4, r0]
	adds r2, #0x83
	ldr r3, _08081C9C @ =0x08BFF7A8
	ldr r0, _08081CA0 @ =0x00004E90
	str r0, [sp]
	movs r0, #0xb
	bl sub_08006884
	movs r0, #4
	ldrsh r1, [r4, r0]
	adds r1, #0x60
	ldr r0, _08081CA4 @ =0x000001FF
	ands r1, r0
	ldrb r2, [r4, #6]
	ldr r3, _08081CA8 @ =0x08D8A466
	ldr r0, _08081CAC @ =0x0000A460
	str r0, [sp]
	movs r0, #2
	bl sub_080068C4
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08081C94: .4byte gStatScreenSt
_08081C98: .4byte 0x08D8A41C
_08081C9C: .4byte 0x08BFF7A8
_08081CA0: .4byte 0x00004E90
_08081CA4: .4byte 0x000001FF
_08081CA8: .4byte 0x08D8A466
_08081CAC: .4byte 0x0000A460

	thumb_func_start sub_08081CB0
sub_08081CB0: @ 0x08081CB0
	push {r4, r5, lr}
	sub sp, #0xc
	bl GetGameTime
	movs r2, #0
	movs r1, #0x1f
	ands r1, r0
	cmp r1, #0x13
	bhi _08081CC4
	movs r2, #1
_08081CC4:
	adds r5, r2, #0
	ldr r1, _08081D6C @ =0x0841CDA0
	add r0, sp, #4
	movs r2, #6
	bl memcpy
	ldr r4, _08081D70 @ =gStatScreenSt
	movs r0, #8
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bne _08081D64
	ldrb r0, [r4]
	cmp r0, #0
	bne _08081D2C
	ldr r0, [r4, #0xc]
	ldr r0, [r0, #0xc]
	movs r1, #0x10
	ands r0, r1
	cmp r0, #0
	beq _08081D2C
	movs r0, #0x78
	movs r1, #0x28
	movs r2, #1
	bl sub_08015F24
	movs r0, #0x78
	movs r1, #0x38
	movs r2, #1
	bl sub_08015F24
	cmp r5, #0
	beq _08081D2C
	ldr r3, _08081D74 @ =0x08BFF760
	ldr r0, [r4, #0xc]
	ldrb r0, [r0, #0x1b]
	lsrs r0, r0, #6
	lsls r0, r0, #1
	mov r1, sp
	adds r1, r1, r0
	adds r1, #4
	movs r0, #0xf
	ldrh r1, [r1]
	ands r0, r1
	lsls r0, r0, #0xc
	ldr r1, _08081D78 @ =0x00000803
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #4
	movs r1, #0xb8
	movs r2, #0x4e
	bl sub_08006884
_08081D2C:
	ldr r0, _08081D70 @ =gStatScreenSt
	ldr r2, [r0, #0xc]
	ldr r0, [r2, #0xc]
	movs r1, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08081D64
	cmp r5, #0
	beq _08081D64
	ldr r3, _08081D74 @ =0x08BFF760
	ldrb r2, [r2, #0x1b]
	lsrs r0, r2, #6
	lsls r0, r0, #1
	mov r1, sp
	adds r1, r1, r0
	adds r1, #4
	movs r0, #0xf
	ldrh r1, [r1]
	ands r0, r1
	lsls r0, r0, #0xc
	ldr r1, _08081D78 @ =0x00000803
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #4
	movs r1, #0x20
	movs r2, #0x56
	bl sub_08006884
_08081D64:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08081D6C: .4byte 0x0841CDA0
_08081D70: .4byte gStatScreenSt
_08081D74: .4byte 0x08BFF760
_08081D78: .4byte 0x00000803

	thumb_func_start sub_08081D7C
sub_08081D7C: @ 0x08081D7C
	push {r4, lr}
	ldr r3, _08081DD8 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r3, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r3, #1]
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0xc0
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x44
	movs r2, #0
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	movs r4, #0x46
	movs r0, #0x10
	strb r0, [r4, r3]
	ldr r0, _08081DDC @ =0x0000FFE0
	ldrh r4, [r3, #0x3c]
	ands r0, r4
	strh r0, [r3, #0x3c]
	movs r0, #0x20
	ldrb r3, [r1]
	orrs r0, r3
	strb r0, [r1]
	ldr r0, _08081DE0 @ =gPal
	strh r2, [r0]
	bl EnablePalSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08081DD8: .4byte gDispIo
_08081DDC: .4byte 0x0000FFE0
_08081DE0: .4byte gPal

	thumb_func_start sub_08081DE4
sub_08081DE4: @ 0x08081DE4
	push {r4, r5, lr}
	sub sp, #0x18
	adds r5, r0, #0
	ldr r1, _08081EB0 @ =0x0841CDA6
	mov r0, sp
	movs r2, #0x18
	bl memcpy
	mov r0, sp
	bl InitBgs
	movs r0, #0x80
	lsls r0, r0, #3
	bl SetBlankChr
	ldr r0, _08081EB4 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
	bl sub_08015A48
	bl ApplyUnitSpritePalettes
	ldr r1, _08081EB8 @ =0x0600B000
	movs r2, #1
	rsbs r2, r2, #0
	movs r0, #0
	bl sub_0808068C
	ldr r0, _08081EBC @ =0x0840392C
	ldr r1, _08081EC0 @ =0x06014800
	bl sub_08013688
	movs r0, #4
	bl ApplyIconPalettes
	movs r0, #6
	bl sub_0804A2DC
	movs r0, #1
	movs r1, #0x13
	bl ApplyIconPalette
	ldr r0, _08081EC4 @ =0x0840349C
	ldr r4, _08081EC8 @ =gBuf
	adds r1, r4, #0
	bl sub_08013688
	ldr r0, _08081ECC @ =gBg1Tm
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl TmApplyTsa_thm
	ldr r0, _08081ED0 @ =0x08403730
	ldr r1, _08081ED4 @ =0x06008C00
	bl sub_08013688
	ldr r0, _08081ED8 @ =0x084038AC
	movs r1, #0xe0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08081EDC @ =0x02022880
	movs r2, #0x88
	lsls r2, r2, #2
	adds r1, r0, r2
	movs r2, #8
	bl CpuFastSet
	movs r0, #1
	movs r1, #0x14
	bl ApplyIconPalette
	ldr r0, _08081EE0 @ =0x0840417C
	ldr r1, _08081EE4 @ =0x06004E00
	bl sub_08013688
	ldr r0, _08081EE8 @ =0x0840368C
	ldr r1, _08081EEC @ =0x06010C00
	bl sub_08013688
	ldr r0, _08081EF0 @ =0x081DBD64
	movs r1, #0xd0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r1, _08081EF4 @ =gStatScreenSt
	movs r0, #0
	str r0, [r1, #0x10]
	adds r0, r5, #0
	bl sub_080816F8
	add sp, #0x18
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08081EB0: .4byte 0x0841CDA6
_08081EB4: .4byte gBg2Tm
_08081EB8: .4byte 0x0600B000
_08081EBC: .4byte 0x0840392C
_08081EC0: .4byte 0x06014800
_08081EC4: .4byte 0x0840349C
_08081EC8: .4byte gBuf
_08081ECC: .4byte gBg1Tm
_08081ED0: .4byte 0x08403730
_08081ED4: .4byte 0x06008C00
_08081ED8: .4byte 0x084038AC
_08081EDC: .4byte 0x02022880
_08081EE0: .4byte 0x0840417C
_08081EE4: .4byte 0x06004E00
_08081EE8: .4byte 0x0840368C
_08081EEC: .4byte 0x06010C00
_08081EF0: .4byte 0x081DBD64
_08081EF4: .4byte gStatScreenSt

	thumb_func_start sub_08081EF8
sub_08081EF8: @ 0x08081EF8
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r5, _08081F54 @ =gStatScreenSt
	ldr r0, [r5, #0xc]
	bl GetUnitPortraitId
	adds r4, r0, #0
	ldr r0, [r5, #0xc]
	ldr r0, [r0, #0xc]
	movs r1, #0x80
	lsls r1, r1, #0x10
	ands r0, r1
	cmp r0, #0
	beq _08081F18
	adds r4, #1
_08081F18:
	movs r0, #3
	strb r0, [r5, #1]
	bl ResetText
	bl InitIcons
	bl sub_080807F0
	ldr r1, _08081F58 @ =0x02023CA4
	movs r3, #0x9c
	lsls r3, r3, #3
	movs r0, #0xd
	str r0, [sp]
	adds r0, r6, #0
	adds r2, r4, #0
	bl sub_08007354
	adds r0, r4, #0
	bl GetPortraitData
	ldr r0, [r0]
	cmp r0, #0
	beq _08081F60
	ldr r0, _08081F5C @ =0x0840364C
	movs r1, #0x40
	movs r2, #0x20
	bl ApplyPaletteExt
	b _08081F6A
	.align 2, 0
_08081F54: .4byte gStatScreenSt
_08081F58: .4byte 0x02023CA4
_08081F5C: .4byte 0x0840364C
_08081F60:
	ldr r0, _08081FB8 @ =0x0840366C
	movs r1, #0x40
	movs r2, #0x20
	bl ApplyPaletteExt
_08081F6A:
	bl MU_EndAll
	ldr r4, _08081FBC @ =gStatScreenSt
	ldr r0, [r4, #0xc]
	movs r1, #0x50
	movs r2, #0x8a
	bl sub_0806C3F8
	str r0, [r4, #0x10]
	bl sub_08080848
	ldrb r0, [r4]
	bl sub_08081224
	ldr r0, _08081FC0 @ =gBmFrameTmap0
	ldr r1, _08081FC4 @ =0x02022CF8
	movs r2, #0x12
	movs r3, #0x12
	bl TmCopyRect_thm
	ldr r0, _08081FC8 @ =0x0200373C
	ldr r1, _08081FCC @ =0x020234F8
	movs r2, #0x12
	movs r3, #0x12
	bl TmCopyRect_thm
	ldr r0, _08081FD0 @ =0x02003C3C
	ldr r1, _08081FD4 @ =0x02023CF8
	movs r2, #0x12
	movs r3, #0x12
	bl TmCopyRect_thm
	movs r0, #7
	bl EnableBgSync
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08081FB8: .4byte 0x0840366C
_08081FBC: .4byte gStatScreenSt
_08081FC0: .4byte gBmFrameTmap0
_08081FC4: .4byte 0x02022CF8
_08081FC8: .4byte 0x0200373C
_08081FCC: .4byte 0x020234F8
_08081FD0: .4byte 0x02003C3C
_08081FD4: .4byte 0x02023CF8

	thumb_func_start sub_08081FD8
sub_08081FD8: @ 0x08081FD8
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r1, _08082060 @ =gpKeySt
	ldr r2, [r1]
	movs r0, #2
	ldrh r3, [r2, #8]
	ands r0, r3
	adds r3, r1, #0
	cmp r0, #0
	beq _08082078
	ldr r3, _08082064 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r4, [r3, #1]
	ands r0, r4
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r3, #1]
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0xc0
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x44
	movs r2, #0
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	adds r4, r3, #0
	adds r4, #0x46
	movs r0, #0x10
	strb r0, [r4]
	ldr r0, _08082068 @ =0x0000FFE0
	ldrh r4, [r3, #0x3c]
	ands r0, r4
	strh r0, [r3, #0x3c]
	movs r0, #0x20
	ldrb r3, [r1]
	orrs r0, r3
	strb r0, [r1]
	ldr r0, _0808206C @ =gPal
	strh r2, [r0]
	bl EnablePalSync
	adds r0, r5, #0
	bl Proc_Break
	ldr r0, _08082070 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _08082056
	b _0808215C
_08082056:
	ldr r0, _08082074 @ =0x0000038B
	bl m4aSongNumStart
	b _0808215C
	.align 2, 0
_08082060: .4byte gpKeySt
_08082064: .4byte gDispIo
_08082068: .4byte 0x0000FFE0
_0808206C: .4byte gPal
_08082070: .4byte gPlaySt
_08082074: .4byte 0x0000038B
_08082078:
	ldrh r1, [r2, #6]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0808209C
	ldr r4, _08082098 @ =gStatScreenSt
	ldrb r1, [r4, #1]
	ldrb r2, [r4]
	adds r0, r2, r1
	subs r0, #1
	bl __modsi3
	strb r0, [r4]
	ldrb r1, [r4]
	movs r0, #0x20
	b _080820BA
	.align 2, 0
_08082098: .4byte gStatScreenSt
_0808209C:
	movs r6, #0x10
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _080820C8
	ldr r4, _080820C4 @ =gStatScreenSt
	ldrb r1, [r4, #1]
	ldrb r3, [r4]
	adds r0, r3, r1
	adds r0, #1
	bl __modsi3
	strb r0, [r4]
	ldrb r1, [r4]
	movs r0, #0x10
_080820BA:
	adds r2, r5, #0
	bl sub_08081458
	b _0808215C
	.align 2, 0
_080820C4: .4byte gStatScreenSt
_080820C8:
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080820E8
	ldr r0, _080820E4 @ =gStatScreenSt
	ldr r0, [r0, #0xc]
	movs r4, #1
	rsbs r4, r4, #0
	adds r1, r4, #0
	bl sub_08081278
	adds r2, r0, #0
	adds r1, r4, #0
	b _0808212E
	.align 2, 0
_080820E4: .4byte gStatScreenSt
_080820E8:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _08082104
	ldr r0, _08082100 @ =gStatScreenSt
	ldr r0, [r0, #0xc]
	movs r1, #1
	bl sub_08081278
	adds r2, r0, #0
	movs r1, #1
	b _0808212E
	.align 2, 0
_08082100: .4byte gStatScreenSt
_08082104:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0808213C
	ldr r4, _08082138 @ =gStatScreenSt
	ldr r2, [r4, #0xc]
	ldrb r0, [r2, #0x1b]
	cmp r0, #0
	beq _0808213C
	bl GetUnit
	adds r2, r0, #0
	ldr r0, [r4, #0xc]
	ldr r0, [r0, #0xc]
	ands r0, r6
	movs r1, #1
	rsbs r1, r1, #0
	cmp r0, #0
	beq _0808212C
	movs r1, #1
_0808212C:
	adds r0, r2, #0
_0808212E:
	adds r2, r5, #0
	bl sub_0808178C
	b _0808215C
	.align 2, 0
_08082138: .4byte gStatScreenSt
_0808213C:
	ldr r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0808215C
	adds r0, r5, #0
	movs r1, #0
	bl Proc_Goto
	ldr r0, _08082164 @ =gStatScreenSt
	ldrb r0, [r0]
	adds r1, r5, #0
	bl StartStatScreenHelp
_0808215C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08082164: .4byte gStatScreenSt

	thumb_func_start sub_08082168
sub_08082168: @ 0x08082168
	push {r4, lr}
	ldr r3, _08082194 @ =gPlaySt
	movs r1, #0xfc
	ldrb r0, [r3, #0x14]
	ands r1, r0
	ldr r2, _08082198 @ =gStatScreenSt
	movs r0, #3
	ldrb r4, [r2]
	ands r0, r4
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldr r1, _0808219C @ =0x0203E648
	ldr r0, [r2, #0xc]
	ldrb r0, [r0, #0xb]
	strb r0, [r1, #1]
	movs r0, #0
	bl SetOnVMatch
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08082194: .4byte gPlaySt
_08082198: .4byte gStatScreenSt
_0808219C: .4byte 0x0203E648

	thumb_func_start sub_080821A0
sub_080821A0: @ 0x080821A0
	push {lr}
	bl sub_08082DAC
	ldr r1, _080821B0 @ =gStatScreenSt
	str r0, [r1, #0x14]
	pop {r0}
	bx r0
	.align 2, 0
_080821B0: .4byte gStatScreenSt

	thumb_func_start sub_080821B4
sub_080821B4: @ 0x080821B4
	push {r4, lr}
	ldr r0, _080821E8 @ =gStatScreenSt
	movs r1, #6
	ldrsh r4, [r0, r1]
	rsbs r4, r4, #0
	movs r0, #0xff
	ands r4, r0
	movs r0, #0
	movs r1, #0
	adds r2, r4, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	adds r2, r4, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	adds r2, r4, #0
	bl SetBgOffset
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080821E8: .4byte gStatScreenSt

	thumb_func_start sub_080821EC
sub_080821EC: @ 0x080821EC
	push {lr}
	bl sub_080807BC
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080821F8
sub_080821F8: @ 0x080821F8
	push {r4, r5, r6, r7, lr}
	adds r6, r1, #0
	ldr r2, _08082240 @ =gStatScreenSt
	movs r5, #0
	movs r3, #0
	strh r3, [r2, #4]
	strh r3, [r2, #6]
	ldr r4, _08082244 @ =gPlaySt
	movs r1, #3
	ldrb r7, [r4, #0x14]
	ands r1, r7
	strb r1, [r2]
	str r0, [r2, #0xc]
	str r3, [r2, #0x14]
	strh r3, [r2, #2]
	strb r5, [r2, #8]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl sub_080A0978
	adds r4, #0x41
	ldrb r4, [r4]
	lsls r0, r4, #0x1e
	cmp r0, #0
	blt _08082230
	ldr r0, _08082248 @ =0x0000038A
	bl m4aSongNumStart
_08082230:
	ldr r0, _0808224C @ =0x08D8A530
	adds r1, r6, #0
	bl Proc_StartBlocking
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08082240: .4byte gStatScreenSt
_08082244: .4byte gPlaySt
_08082248: .4byte 0x0000038A
_0808224C: .4byte 0x08D8A530

	thumb_func_start StartStatScreenHelp
StartStatScreenHelp: @ 0x08082250
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	movs r1, #1
	rsbs r1, r1, #0
	movs r0, #0
	bl sub_08082F74
	ldr r1, _08082278 @ =gStatScreenSt
	ldr r0, [r1, #0x14]
	cmp r0, #0
	bne _08082298
	cmp r4, #1
	beq _0808228C
	cmp r4, #1
	bgt _0808227C
	cmp r4, #0
	beq _08082282
	b _08082298
	.align 2, 0
_08082278: .4byte gStatScreenSt
_0808227C:
	cmp r4, #2
	beq _08082294
	b _08082298
_08082282:
	ldr r0, _08082288 @ =0x08D8A704
	b _08082296
	.align 2, 0
_08082288: .4byte 0x08D8A704
_0808228C:
	ldr r0, _08082290 @ =0x08D8A8E0
	b _08082296
	.align 2, 0
_08082290: .4byte 0x08D8A8E0
_08082294:
	ldr r0, _080822A8 @ =0x08D8AA84
_08082296:
	str r0, [r1, #0x14]
_08082298:
	ldr r0, _080822AC @ =gStatScreenSt
	ldr r0, [r0, #0x14]
	adds r1, r5, #0
	bl sub_080829F4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080822A8: .4byte 0x08D8AA84
_080822AC: .4byte gStatScreenSt

	thumb_func_start sub_080822B0
sub_080822B0: @ 0x080822B0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080822D8 @ =gStatScreenSt
	ldr r0, [r0, #0xc]
	ldr r1, [r4, #0x2c]
	ldrh r1, [r1, #0x12]
	lsls r1, r1, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r0, [r0]
	adds r1, r4, #0
	adds r1, #0x4e
	strh r0, [r1]
	bl GetItemDescId
	adds r4, #0x4c
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080822D8: .4byte gStatScreenSt

	thumb_func_start sub_080822DC
sub_080822DC: @ 0x080822DC
	adds r2, r0, #0
	ldr r0, _080822F8 @ =gStatScreenSt
	ldr r0, [r0, #0xc]
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	cmp r0, #8
	bhi _0808238C
	lsls r0, r0, #2
	ldr r1, _080822FC @ =_08082300
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080822F8: .4byte gStatScreenSt
_080822FC: .4byte _08082300
_08082300: @ jump table
	.4byte _08082324 @ case 0
	.4byte _08082330 @ case 1
	.4byte _0808233A @ case 2
	.4byte _08082348 @ case 3
	.4byte _08082354 @ case 4
	.4byte _08082360 @ case 5
	.4byte _0808236A @ case 6
	.4byte _08082378 @ case 7
	.4byte _08082384 @ case 8
_08082324:
	adds r1, r2, #0
	adds r1, #0x4c
	ldr r0, _0808232C @ =0x00000273
	b _0808238A
	.align 2, 0
_0808232C: .4byte 0x00000273
_08082330:
	adds r1, r2, #0
	adds r1, #0x4c
	movs r0, #0x9d
	lsls r0, r0, #2
	b _0808238A
_0808233A:
	adds r1, r2, #0
	adds r1, #0x4c
	ldr r0, _08082344 @ =0x00000275
	b _0808238A
	.align 2, 0
_08082344: .4byte 0x00000275
_08082348:
	adds r1, r2, #0
	adds r1, #0x4c
	ldr r0, _08082350 @ =0x00000277
	b _0808238A
	.align 2, 0
_08082350: .4byte 0x00000277
_08082354:
	adds r1, r2, #0
	adds r1, #0x4c
	ldr r0, _0808235C @ =0x00000276
	b _0808238A
	.align 2, 0
_0808235C: .4byte 0x00000276
_08082360:
	adds r1, r2, #0
	adds r1, #0x4c
	movs r0, #0x9e
	lsls r0, r0, #2
	b _0808238A
_0808236A:
	adds r1, r2, #0
	adds r1, #0x4c
	ldr r0, _08082374 @ =0x00000279
	b _0808238A
	.align 2, 0
_08082374: .4byte 0x00000279
_08082378:
	adds r1, r2, #0
	adds r1, #0x4c
	ldr r0, _08082380 @ =0x0000027A
	b _0808238A
	.align 2, 0
_08082380: .4byte 0x0000027A
_08082384:
	adds r1, r2, #0
	adds r1, #0x4c
	ldr r0, _08082390 @ =0x0000027B
_0808238A:
	strh r0, [r1]
_0808238C:
	bx lr
	.align 2, 0
_08082390: .4byte 0x0000027B

	thumb_func_start sub_08082394
sub_08082394: @ 0x08082394
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080823B0 @ =gStatScreenSt
	ldr r0, [r0, #0xc]
	bl UnitHasMagicRank
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080823B4
	adds r1, r4, #0
	adds r1, #0x4c
	movs r0, #0x9a
	lsls r0, r0, #2
	b _080823BA
	.align 2, 0
_080823B0: .4byte gStatScreenSt
_080823B4:
	adds r1, r4, #0
	adds r1, #0x4c
	ldr r0, _080823C4 @ =0x00000267
_080823BA:
	strh r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080823C4: .4byte 0x00000267

	thumb_func_start sub_080823C8
sub_080823C8: @ 0x080823C8
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, _08082408 @ =gStatScreenSt
	ldr r0, [r5, #0xc]
	ldrh r0, [r0, #0x1e]
	cmp r0, #0
	bne _080823DC
	adds r0, r4, #0
	bl HelpBoxTryRelocateLeft
_080823DC:
	ldr r0, [r5, #0xc]
	ldr r1, [r4, #0x2c]
	ldrh r1, [r1, #0x12]
	lsls r1, r1, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r0, [r0]
	cmp r0, #0
	bne _08082416
	adds r0, r4, #0
	adds r0, #0x50
	ldrh r0, [r0]
	cmp r0, #0
	beq _08082400
	cmp r0, #0x10
	beq _08082400
	cmp r0, #0x40
	bne _0808240C
_08082400:
	adds r0, r4, #0
	bl HelpBoxTryRelocateUp
	b _08082416
	.align 2, 0
_08082408: .4byte gStatScreenSt
_0808240C:
	cmp r0, #0x80
	bne _08082416
	adds r0, r4, #0
	bl HelpBoxTryRelocateDown
_08082416:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0808241C
sub_0808241C: @ 0x0808241C
	push {r4, r5, lr}
	sub sp, #0x10
	adds r5, r0, #0
	ldr r1, _08082454 @ =0x0841CDBE
	mov r0, sp
	movs r2, #0x10
	bl memcpy
	ldr r0, [r5, #0x2c]
	ldrh r4, [r0, #0x12]
	ldr r0, _08082458 @ =gStatScreenSt
	ldr r0, [r0, #0xc]
	bl UnitHasMagicRank
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08082440
	adds r4, #4
_08082440:
	lsls r0, r4, #1
	add r0, sp
	ldrh r1, [r0]
	adds r0, r5, #0
	adds r0, #0x4c
	strh r1, [r0]
	add sp, #0x10
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08082454: .4byte 0x0841CDBE
_08082458: .4byte gStatScreenSt

	thumb_func_start sub_0808245C
sub_0808245C: @ 0x0808245C
	adds r1, r0, #0
	ldr r0, _08082474 @ =gStatScreenSt
	ldr r0, [r0, #0xc]
	ldr r0, [r0]
	ldrh r2, [r0, #2]
	cmp r2, #0
	beq _08082478
	adds r0, r1, #0
	adds r0, #0x4c
	strh r2, [r0]
	b _0808247E
	.align 2, 0
_08082474: .4byte gStatScreenSt
_08082478:
	adds r1, #0x4c
	ldr r0, _08082480 @ =0x0000039B
	strh r0, [r1]
_0808247E:
	bx lr
	.align 2, 0
_08082480: .4byte 0x0000039B

	thumb_func_start sub_08082484
sub_08082484: @ 0x08082484
	ldr r1, _08082494 @ =gStatScreenSt
	ldr r1, [r1, #0xc]
	ldr r1, [r1, #4]
	ldrh r1, [r1, #2]
	adds r0, #0x4c
	strh r1, [r0]
	bx lr
	.align 2, 0
_08082494: .4byte gStatScreenSt

	thumb_func_start sub_08082498
sub_08082498: @ 0x08082498
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080824BC @ =gStatScreenSt
	ldr r0, [r0, #0xc]
	bl sub_08026B44
	cmp r0, #0
	bne _080824C6
	adds r0, r4, #0
	adds r0, #0x50
	ldrh r0, [r0]
	cmp r0, #0x80
	bne _080824C0
	adds r0, r4, #0
	bl HelpBoxTryRelocateDown
	b _080824C6
	.align 2, 0
_080824BC: .4byte gStatScreenSt
_080824C0:
	adds r0, r4, #0
	bl HelpBoxTryRelocateUp
_080824C6:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080824CC
sub_080824CC: @ 0x080824CC
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r5, r1, #0
	movs r0, #0x38
	ldrsh r1, [r6, r0]
	movs r3, #0x3c
	ldrsh r2, [r6, r3]
	adds r4, r6, #0
	adds r4, #0x48
	movs r3, #0
	ldrsh r0, [r4, r3]
	mov ip, r0
	adds r7, r6, #0
	adds r7, #0x4a
	movs r3, #0
	ldrsh r0, [r7, r3]
	str r0, [sp]
	adds r0, r5, #0
	mov r3, ip
	bl Interpolate
	strh r0, [r6, #0x30]
	movs r0, #0x3a
	ldrsh r1, [r6, r0]
	movs r3, #0x3e
	ldrsh r2, [r6, r3]
	movs r3, #0
	ldrsh r0, [r4, r3]
	mov ip, r0
	movs r3, #0
	ldrsh r0, [r7, r3]
	str r0, [sp]
	adds r0, r5, #0
	mov r3, ip
	bl Interpolate
	strh r0, [r6, #0x32]
	adds r0, r6, #0
	adds r0, #0x40
	movs r2, #0
	ldrsh r1, [r0, r2]
	adds r0, #4
	movs r3, #0
	ldrsh r2, [r0, r3]
	movs r3, #0
	ldrsh r0, [r4, r3]
	mov ip, r0
	movs r3, #0
	ldrsh r0, [r7, r3]
	str r0, [sp]
	adds r0, r5, #0
	mov r3, ip
	bl Interpolate
	strh r0, [r6, #0x34]
	adds r0, r6, #0
	adds r0, #0x42
	movs r2, #0
	ldrsh r1, [r0, r2]
	adds r0, #4
	movs r3, #0
	ldrsh r2, [r0, r3]
	movs r0, #0
	ldrsh r3, [r4, r0]
	movs r4, #0
	ldrsh r0, [r7, r4]
	str r0, [sp]
	adds r0, r5, #0
	bl Interpolate
	strh r0, [r6, #0x36]
	movs r1, #0x30
	ldrsh r0, [r6, r1]
	movs r2, #0x32
	ldrsh r1, [r6, r2]
	movs r3, #0x34
	ldrsh r2, [r6, r3]
	movs r4, #0x36
	ldrsh r3, [r6, r4]
	adds r4, r6, #0
	adds r4, #0x52
	ldrb r4, [r4]
	str r4, [sp]
	bl sub_08083088
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08082580
sub_08082580: @ 0x08082580
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080825BC @ =0x08D8A660
	bl Proc_Find
	cmp r0, #0
	beq _08082596
	adds r1, r0, #0
	adds r1, #0x28
	movs r0, #1
	strb r0, [r1]
_08082596:
	adds r0, r4, #0
	adds r0, #0x52
	ldrb r0, [r0]
	cmp r0, #0
	bne _080825B4
	ldr r0, _080825C0 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080825B4
	movs r0, #0xe4
	lsls r0, r0, #2
	bl m4aSongNumStart
_080825B4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080825BC: .4byte 0x08D8A660
_080825C0: .4byte gPlaySt

	thumb_func_start sub_080825C4
sub_080825C4: @ 0x080825C4
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r1, #5
	bl sub_080824CC
	adds r2, r4, #0
	adds r2, #0x48
	adds r4, #0x4a
	ldrh r3, [r2]
	movs r0, #0
	ldrsh r1, [r2, r0]
	movs r5, #0
	ldrsh r0, [r4, r5]
	cmp r1, r0
	bge _080825E6
	adds r0, r3, #1
	strh r0, [r2]
_080825E6:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080825EC
sub_080825EC: @ 0x080825EC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08082638 @ =0x08D8A660
	bl Proc_Find
	cmp r0, #0
	beq _08082602
	adds r1, r0, #0
	adds r1, #0x28
	movs r0, #0
	strb r0, [r1]
_08082602:
	adds r0, r4, #0
	adds r0, #0x52
	ldrb r0, [r0]
	cmp r0, #0
	bne _08082630
	ldr r0, _0808263C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808261E
	ldr r0, _08082640 @ =0x00000391
	bl m4aSongNumStart
_0808261E:
	adds r0, r4, #0
	bl sub_08082B50
	ldr r0, [r4, #0x2c]
	ldrb r1, [r0, #0x10]
	ldrb r2, [r0, #0x11]
	adds r0, r4, #0
	bl sub_08082B2C
_08082630:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08082638: .4byte 0x08D8A660
_0808263C: .4byte gPlaySt
_08082640: .4byte 0x00000391

	thumb_func_start sub_08082644
sub_08082644: @ 0x08082644
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0
	bl sub_080824CC
	adds r1, r4, #0
	adds r1, #0x48
	ldrh r0, [r1]
	subs r0, #3
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _08082664
	adds r0, r4, #0
	bl Proc_Break
_08082664:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0808266C
sub_0808266C: @ 0x0808266C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08082698 @ =0x0203E64C
	movs r3, #0
	str r3, [r0]
	str r3, [r0, #4]
	str r3, [r0, #8]
	str r3, [r0, #0xc]
	strb r4, [r0, #0x10]
	strb r1, [r0, #0x11]
	strh r2, [r0, #0x12]
	str r3, [r0, #0x14]
	str r3, [r0, #0x18]
	ldr r1, _0808269C @ =0x0203E66C
	strh r3, [r1]
	strh r3, [r1, #2]
	movs r1, #0
	bl sub_08082728
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08082698: .4byte 0x0203E64C
_0808269C: .4byte 0x0203E66C

	thumb_func_start sub_080826A0
sub_080826A0: @ 0x080826A0
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r3, r1, #0
	adds r5, r2, #0
	cmp r4, #0
	bge _080826BC
	cmp r3, #0
	bge _080826BC
	bl sub_0804A810
	adds r4, r0, #0
	bl sub_0804A81C
	adds r3, r0, #0
_080826BC:
	ldr r0, _080826E4 @ =0x0203E64C
	movs r1, #0
	str r1, [r0]
	str r1, [r0, #4]
	str r1, [r0, #8]
	str r1, [r0, #0xc]
	strb r4, [r0, #0x10]
	strb r3, [r0, #0x11]
	strh r5, [r0, #0x12]
	str r1, [r0, #0x14]
	str r1, [r0, #0x18]
	ldr r2, _080826E8 @ =0x0203E66C
	strh r1, [r2]
	strh r1, [r2, #2]
	movs r1, #1
	bl sub_08082728
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080826E4: .4byte 0x0203E64C
_080826E8: .4byte 0x0203E66C

	thumb_func_start sub_080826EC
sub_080826EC: @ 0x080826EC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0808271C @ =0x0203E64C
	movs r3, #0
	str r3, [r0]
	str r3, [r0, #4]
	str r3, [r0, #8]
	str r3, [r0, #0xc]
	strb r4, [r0, #0x10]
	strb r1, [r0, #0x11]
	strh r2, [r0, #0x12]
	str r3, [r0, #0x14]
	ldr r1, _08082720 @ =HelpBoxPopulateAutoItem
	str r1, [r0, #0x18]
	ldr r1, _08082724 @ =0x0203E66C
	strh r3, [r1]
	strh r3, [r1, #2]
	movs r1, #0
	bl sub_08082728
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808271C: .4byte 0x0203E64C
_08082720: .4byte HelpBoxPopulateAutoItem
_08082724: .4byte 0x0203E66C

	thumb_func_start sub_08082728
sub_08082728: @ 0x08082728
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r5, r0, #0
	adds r7, r1, #0
	ldr r6, _08082760 @ =0x08D8A5D8
	adds r0, r6, #0
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	bne _08082764
	adds r0, r6, #0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	adds r0, #0x52
	strb r7, [r0]
	ldrb r1, [r5, #0x10]
	ldrb r2, [r5, #0x11]
	adds r0, r4, #0
	bl sub_08082B2C
	adds r0, r4, #0
	bl sub_08082B50
	b _0808277C
	.align 2, 0
_08082760: .4byte 0x08D8A5D8
_08082764:
	ldrh r0, [r4, #0x30]
	strh r0, [r4, #0x38]
	ldrh r0, [r4, #0x32]
	strh r0, [r4, #0x3a]
	ldrh r1, [r4, #0x34]
	adds r0, r4, #0
	adds r0, #0x40
	strh r1, [r0]
	ldrh r0, [r4, #0x36]
	adds r1, r4, #0
	adds r1, #0x42
	strh r0, [r1]
_0808277C:
	str r5, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x48
	movs r1, #0
	strh r1, [r0]
	adds r2, r4, #0
	adds r2, #0x4a
	movs r0, #0xc
	strh r0, [r2]
	adds r7, r4, #0
	adds r7, #0x4e
	strh r1, [r7]
	ldrh r0, [r5, #0x12]
	adds r6, r4, #0
	adds r6, #0x4c
	strh r0, [r6]
	ldr r0, [r4, #0x2c]
	ldr r1, [r0, #0x18]
	cmp r1, #0
	beq _080827AA
	adds r0, r4, #0
	bl _call_via_r1
_080827AA:
	movs r0, #1
	bl SetTextFontGlyphs
	ldrh r0, [r6]
	bl DecodeMsg
	add r2, sp, #4
	mov r1, sp
	bl GetStringTextBox
	movs r0, #0
	bl SetTextFontGlyphs
	ldr r1, [sp]
	ldr r2, [sp, #4]
	adds r0, r4, #0
	bl sub_08082A3C
	ldrb r1, [r5, #0x10]
	ldrb r2, [r5, #0x11]
	adds r0, r4, #0
	bl sub_08082AA0
	bl sub_08083798
	ldrh r0, [r7]
	ldrh r1, [r6]
	bl sub_0808377C
	ldr r0, _080827F0 @ =0x0203E668
	str r5, [r0]
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080827F0: .4byte 0x0203E668

	thumb_func_start sub_080827F4
sub_080827F4: @ 0x080827F4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r7, r0, #0
	adds r6, r1, #0
	mov sb, r2
	ldr r0, _080828A0 @ =0x08D8A5D8
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x52
	movs r0, #1
	strb r0, [r1]
	cmp r7, #0
	bge _0808282A
	cmp r6, #0
	bge _0808282A
	bl sub_0804A810
	adds r7, r0, #0
	bl sub_0804A81C
	adds r6, r0, #0
_0808282A:
	adds r0, r5, #0
	adds r0, #0x48
	movs r1, #0
	strh r1, [r0]
	adds r2, r5, #0
	adds r2, #0x4a
	movs r0, #0xc
	strh r0, [r2]
	movs r0, #0x4e
	adds r0, r0, r5
	mov r8, r0
	strh r1, [r0]
	adds r4, r5, #0
	adds r4, #0x4c
	mov r1, sb
	strh r1, [r4]
	movs r0, #1
	bl SetTextFontGlyphs
	ldrh r0, [r4]
	bl DecodeMsg
	add r2, sp, #4
	mov r1, sp
	bl GetStringTextBox
	movs r0, #0
	bl SetTextFontGlyphs
	adds r0, r5, #0
	bl sub_08082B50
	ldr r1, [sp]
	ldr r2, [sp, #4]
	adds r0, r5, #0
	bl sub_08082A3C
	adds r1, r7, #0
	adds r1, #8
	strh r1, [r5, #0x38]
	adds r0, r6, #0
	adds r0, #8
	strh r0, [r5, #0x3a]
	strh r1, [r5, #0x3c]
	strh r0, [r5, #0x3e]
	bl sub_08083798
	mov r1, r8
	ldrh r0, [r1]
	ldrh r1, [r4]
	bl sub_0808377C
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080828A0: .4byte 0x08D8A5D8

	thumb_func_start sub_080828A4
sub_080828A4: @ 0x080828A4
	push {r4, lr}
	ldr r0, _080828C4 @ =0x08D8A5D8
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	beq _080828BE
	bl sub_08083798
	adds r0, r4, #0
	movs r1, #0x63
	bl Proc_Goto
_080828BE:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080828C4: .4byte 0x08D8A5D8

	thumb_func_start sub_080828C8
sub_080828C8: @ 0x080828C8
	push {r4, lr}
	ldr r0, _080828E8 @ =0x08D8A5D8
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	beq _080828E0
	bl sub_08083798
	adds r0, r4, #0
	bl Proc_End
_080828E0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080828E8: .4byte 0x08D8A5D8

	thumb_func_start sub_080828EC
sub_080828EC: @ 0x080828EC
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x50
	movs r1, #0
	strh r1, [r0]
	ldr r0, [r4, #0x2c]
	ldr r1, [r0, #0x14]
	cmp r1, #0
	beq _08082904
	adds r0, r4, #0
	bl _call_via_r1
_08082904:
	ldr r0, [r4, #0x2c]
	movs r1, #0
	bl sub_08082728
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08082914
sub_08082914: @ 0x08082914
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r4, #0
	ldr r1, _080829AC @ =0x0203E66C
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #3
	ldr r2, [r5, #0x2c]
	ldrb r3, [r2, #0x10]
	adds r0, r3, r0
	movs r3, #2
	ldrsh r1, [r1, r3]
	lsls r1, r1, #3
	ldrb r2, [r2, #0x11]
	adds r1, r2, r1
	bl sub_0804A740
	ldr r6, _080829B0 @ =gpKeySt
	ldr r1, [r6]
	movs r0, #0x40
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _0808294E
	adds r0, r5, #0
	bl HelpBoxTryRelocateUp
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_0808294E:
	ldr r1, [r6]
	movs r0, #0x80
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _08082966
	adds r0, r5, #0
	bl HelpBoxTryRelocateDown
	orrs r4, r0
	lsls r0, r4, #0x18
	lsrs r4, r0, #0x18
_08082966:
	ldr r1, [r6]
	movs r0, #0x20
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _0808297E
	adds r0, r5, #0
	bl HelpBoxTryRelocateLeft
	orrs r4, r0
	lsls r0, r4, #0x18
	lsrs r4, r0, #0x18
_0808297E:
	ldr r1, [r6]
	movs r0, #0x10
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _08082996
	adds r0, r5, #0
	bl HelpBoxTryRelocateRight
	orrs r4, r0
	lsls r0, r4, #0x18
	lsrs r4, r0, #0x18
_08082996:
	ldr r1, [r6]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080829B4
	adds r0, r5, #0
	bl Proc_Break
	b _080829D2
	.align 2, 0
_080829AC: .4byte 0x0203E66C
_080829B0: .4byte gpKeySt
_080829B4:
	cmp r4, #0
	beq _080829D2
	ldr r0, _080829D8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080829CA
	ldr r0, _080829DC @ =0x00000387
	bl m4aSongNumStart
_080829CA:
	adds r0, r5, #0
	movs r1, #0
	bl Proc_Goto
_080829D2:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080829D8: .4byte gPlaySt
_080829DC: .4byte 0x00000387

	thumb_func_start sub_080829E0
sub_080829E0: @ 0x080829E0
	push {r4, lr}
	adds r4, r0, #0
	bl sub_080828A4
	adds r0, r4, #0
	bl Proc_End
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080829F4
sub_080829F4: @ 0x080829F4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08082A10 @ =0x08D8A610
	bl Proc_StartBlocking
	ldr r2, _08082A14 @ =0x0203E66C
	movs r1, #0
	strh r1, [r2]
	strh r1, [r2, #2]
	str r4, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08082A10: .4byte 0x08D8A610
_08082A14: .4byte 0x0203E66C

	thumb_func_start sub_08082A18
sub_08082A18: @ 0x08082A18
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r2, #0
	adds r5, r3, #0
	ldr r0, _08082A34 @ =0x08D8A610
	bl Proc_StartBlocking
	ldr r1, _08082A38 @ =0x0203E66C
	strh r4, [r1]
	strh r5, [r1, #2]
	str r6, [r0, #0x2c]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08082A34: .4byte 0x08D8A610
_08082A38: .4byte 0x0203E66C

	thumb_func_start sub_08082A3C
sub_08082A3C: @ 0x08082A3C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	adds r4, #0x1f
	movs r0, #0xe0
	ands r4, r0
	adds r0, r6, #0
	adds r0, #0x4e
	ldrh r0, [r0]
	bl sub_08082B60
	cmp r0, #2
	beq _08082A6E
	cmp r0, #2
	bgt _08082A62
	cmp r0, #1
	beq _08082A68
	b _08082A8A
_08082A62:
	cmp r0, #3
	beq _08082A76
	b _08082A8A
_08082A68:
	movs r4, #0xa0
	adds r5, #0x20
	b _08082A8A
_08082A6E:
	cmp r4, #0x5f
	bgt _08082A88
	movs r4, #0x60
	b _08082A88
_08082A76:
	ldr r0, _08082A9C @ =gPlaySt
	adds r0, #0x2b
	movs r1, #1
	ldrb r0, [r0]
	ands r1, r0
	movs r4, #0x40
	cmp r1, #0
	beq _08082A88
	movs r4, #0xa0
_08082A88:
	adds r5, #0x10
_08082A8A:
	adds r0, r6, #0
	adds r0, #0x44
	strh r4, [r0]
	adds r0, #2
	strh r5, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08082A9C: .4byte gPlaySt

	thumb_func_start sub_08082AA0
sub_08082AA0: @ 0x08082AA0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r4, r1, #0
	adds r7, r2, #0
	adds r0, #0x44
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r6, r0, #0
	adds r6, #0x10
	adds r0, r5, #0
	adds r0, #0x46
	movs r2, #0
	ldrsh r0, [r0, r2]
	adds r0, #0x10
	mov r8, r0
	ldr r1, _08082B28 @ =0x0203E66C
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #3
	adds r4, r4, r0
	movs r2, #2
	ldrsh r0, [r1, r2]
	lsls r0, r0, #3
	adds r7, r7, r0
	adds r0, r6, #0
	movs r1, #6
	bl __divsi3
	adds r0, #0x10
	subs r4, r4, r0
	strh r4, [r5, #0x3c]
	lsls r4, r4, #0x10
	cmp r4, #0
	bge _08082AEC
	movs r0, #0
	strh r0, [r5, #0x3c]
_08082AEC:
	movs r1, #0x3c
	ldrsh r0, [r5, r1]
	adds r0, r0, r6
	cmp r0, #0xf0
	ble _08082AFC
	movs r0, #0xf0
	subs r0, r0, r6
	strh r0, [r5, #0x3c]
_08082AFC:
	adds r0, r7, #0
	adds r0, #0x10
	strh r0, [r5, #0x3e]
	movs r2, #0x3e
	ldrsh r0, [r5, r2]
	add r0, r8
	cmp r0, #0xa0
	ble _08082B12
	mov r1, r8
	subs r0, r7, r1
	strh r0, [r5, #0x3e]
_08082B12:
	ldrh r0, [r5, #0x3c]
	adds r0, #8
	strh r0, [r5, #0x3c]
	ldrh r0, [r5, #0x3e]
	adds r0, #8
	strh r0, [r5, #0x3e]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08082B28: .4byte 0x0203E66C

	thumb_func_start sub_08082B2C
sub_08082B2C: @ 0x08082B2C
	push {r4, r5, lr}
	ldr r4, _08082B4C @ =0x0203E66C
	movs r5, #0
	ldrsh r3, [r4, r5]
	lsls r3, r3, #3
	adds r1, r1, r3
	movs r5, #2
	ldrsh r3, [r4, r5]
	lsls r3, r3, #3
	adds r2, r2, r3
	strh r1, [r0, #0x38]
	strh r2, [r0, #0x3a]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08082B4C: .4byte 0x0203E66C

	thumb_func_start sub_08082B50
sub_08082B50: @ 0x08082B50
	adds r2, r0, #0
	adds r2, #0x40
	movs r1, #0x20
	strh r1, [r2]
	adds r0, #0x42
	movs r1, #0x10
	strh r1, [r0]
	bx lr

	thumb_func_start sub_08082B60
sub_08082B60: @ 0x08082B60
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08082B70 @ =0x0000FFFF
	cmp r4, r0
	bne _08082B74
	movs r0, #3
	b _08082BAA
	.align 2, 0
_08082B70: .4byte 0x0000FFFF
_08082B74:
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #0x80
	lsls r1, r1, #3
	ands r1, r0
	cmp r1, #0
	bne _08082BA4
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _08082B96
	movs r0, #1
	b _08082BAA
_08082B96:
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #4
	ands r1, r0
	cmp r1, #0
	bne _08082BA8
_08082BA4:
	movs r0, #0
	b _08082BAA
_08082BA8:
	movs r0, #2
_08082BAA:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start HelpBoxPopulateAutoItem
HelpBoxPopulateAutoItem: @ 0x08082BB0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	ldrh r5, [r0, #0x12]
	adds r0, r4, #0
	adds r0, #0x4e
	strh r5, [r0]
	ldrh r0, [r0]
	bl sub_08082B60
	cmp r0, #3
	bne _08082BD0
	adds r1, r4, #0
	adds r1, #0x4c
	movs r0, #0
	b _08082BDA
_08082BD0:
	adds r0, r5, #0
	bl GetItemDescId
	adds r1, r4, #0
	adds r1, #0x4c
_08082BDA:
	strh r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start HelpBoxTryRelocateUp
HelpBoxTryRelocateUp: @ 0x08082BE4
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0x2c]
	ldr r0, [r0]
	cmp r0, #0
	bne _08082BF4
	movs r0, #0
	b _08082C0E
_08082BF4:
	str r0, [r2, #0x2c]
	adds r0, r2, #0
	adds r0, #0x50
	movs r1, #0x40
	strh r1, [r0]
	ldr r0, [r2, #0x2c]
	ldr r1, [r0, #0x14]
	cmp r1, #0
	beq _08082C0C
	adds r0, r2, #0
	bl _call_via_r1
_08082C0C:
	movs r0, #1
_08082C0E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start HelpBoxTryRelocateDown
HelpBoxTryRelocateDown: @ 0x08082C14
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0x2c]
	ldr r0, [r0, #4]
	cmp r0, #0
	bne _08082C24
	movs r0, #0
	b _08082C3E
_08082C24:
	str r0, [r2, #0x2c]
	adds r0, r2, #0
	adds r0, #0x50
	movs r1, #0x80
	strh r1, [r0]
	ldr r0, [r2, #0x2c]
	ldr r1, [r0, #0x14]
	cmp r1, #0
	beq _08082C3C
	adds r0, r2, #0
	bl _call_via_r1
_08082C3C:
	movs r0, #1
_08082C3E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start HelpBoxTryRelocateLeft
HelpBoxTryRelocateLeft: @ 0x08082C44
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0x2c]
	ldr r0, [r0, #8]
	cmp r0, #0
	bne _08082C54
	movs r0, #0
	b _08082C6E
_08082C54:
	str r0, [r2, #0x2c]
	adds r0, r2, #0
	adds r0, #0x50
	movs r1, #0x20
	strh r1, [r0]
	ldr r0, [r2, #0x2c]
	ldr r1, [r0, #0x14]
	cmp r1, #0
	beq _08082C6C
	adds r0, r2, #0
	bl _call_via_r1
_08082C6C:
	movs r0, #1
_08082C6E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start HelpBoxTryRelocateRight
HelpBoxTryRelocateRight: @ 0x08082C74
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0x2c]
	ldr r0, [r0, #0xc]
	cmp r0, #0
	bne _08082C84
	movs r0, #0
	b _08082C9E
_08082C84:
	str r0, [r2, #0x2c]
	adds r0, r2, #0
	adds r0, #0x50
	movs r1, #0x10
	strh r1, [r0]
	ldr r0, [r2, #0x2c]
	ldr r1, [r0, #0x14]
	cmp r1, #0
	beq _08082C9C
	adds r0, r2, #0
	bl _call_via_r1
_08082C9C:
	movs r0, #1
_08082C9E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08082CA4
sub_08082CA4: @ 0x08082CA4
	push {lr}
	adds r2, r0, #0
	ldr r0, _08082CC4 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08082CBE
	adds r0, r2, #0
	bl Proc_Break
_08082CBE:
	pop {r0}
	bx r0
	.align 2, 0
_08082CC4: .4byte gpKeySt

	thumb_func_start sub_08082CC8
sub_08082CC8: @ 0x08082CC8
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	movs r1, #1
	rsbs r1, r1, #0
	movs r0, #0
	bl sub_08082F74
	bl sub_0804A810
	adds r4, r0, #0
	bl sub_0804A81C
	adds r1, r0, #0
	adds r0, r4, #0
	adds r2, r5, #0
	bl sub_0808266C
	ldr r0, _08082CFC @ =0x08D8A640
	adds r1, r6, #0
	bl Proc_StartBlocking
	movs r0, #1
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_08082CFC: .4byte 0x08D8A640

	thumb_func_start sub_08082D00
sub_08082D00: @ 0x08082D00
	push {lr}
	sub sp, #4
	ldr r1, [r0, #0x2c]
	ldr r2, [r0, #0x30]
	ldr r3, _08082D18 @ =0x08D8A650
	movs r0, #0
	str r0, [sp]
	bl sub_08006884
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_08082D18: .4byte 0x08D8A650

	thumb_func_start sub_08082D1C
sub_08082D1C: @ 0x08082D1C
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	adds r7, r1, #0
	adds r4, r2, #0
	ldr r5, _08082D44 @ =0x08D8A660
	adds r0, r5, #0
	bl Proc_Find
	cmp r0, #0
	bne _08082D38
	adds r0, r5, #0
	adds r1, r4, #0
	bl Proc_Start
_08082D38:
	str r6, [r0, #0x2c]
	str r7, [r0, #0x30]
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08082D44: .4byte 0x08D8A660

	thumb_func_start sub_08082D48
sub_08082D48: @ 0x08082D48
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	adds r7, r1, #0
	adds r4, r2, #0
	ldr r5, _08082D70 @ =0x08D8A660
	adds r0, r5, #0
	bl Proc_Find
	cmp r0, #0
	bne _08082D64
	adds r0, r5, #0
	adds r1, r4, #0
	bl Proc_StartBlocking
_08082D64:
	str r6, [r0, #0x2c]
	str r7, [r0, #0x30]
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08082D70: .4byte 0x08D8A660

	thumb_func_start sub_08082D74
sub_08082D74: @ 0x08082D74
	push {lr}
	ldr r0, _08082D88 @ =0x08D8A660
	bl Proc_Find
	cmp r0, #0
	beq _08082D84
	bl Proc_End
_08082D84:
	pop {r0}
	bx r0
	.align 2, 0
_08082D88: .4byte 0x08D8A660

	thumb_func_start sub_08082D8C
sub_08082D8C: @ 0x08082D8C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _08082DA8 @ =0x08D8A660
	bl Proc_Find
	cmp r0, #0
	beq _08082DA0
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
_08082DA0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08082DA8: .4byte 0x08D8A660

	thumb_func_start sub_08082DAC
sub_08082DAC: @ 0x08082DAC
	ldr r0, _08082DB4 @ =0x0203E668
	ldr r0, [r0]
	bx lr
	.align 2, 0
_08082DB4: .4byte 0x0203E668

	thumb_func_start sub_08082DB8
sub_08082DB8: @ 0x08082DB8
	push {lr}
	adds r2, r0, #0
	movs r0, #8
	ands r0, r2
	cmp r0, #0
	beq _08082DD4
	ldr r0, _08082DD0 @ =0x08408CC8
	lsls r1, r1, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	b _08082E20
	.align 2, 0
_08082DD0: .4byte 0x08408CC8
_08082DD4:
	movs r0, #1
	ands r0, r2
	ldr r3, _08082E24 @ =0x08404ED0
	cmp r0, #0
	beq _08082DE0
	ldr r3, _08082E28 @ =0x08404D90
_08082DE0:
	movs r0, #0x10
	ands r0, r2
	cmp r0, #0
	beq _08082DEA
	adds r3, #0x40
_08082DEA:
	movs r0, #0x20
	ands r0, r2
	cmp r0, #0
	beq _08082DF4
	adds r3, #0x80
_08082DF4:
	movs r0, #0x40
	ands r0, r2
	cmp r0, #0
	beq _08082DFE
	adds r3, #0xc0
_08082DFE:
	movs r0, #0x80
	ands r0, r2
	cmp r0, #0
	beq _08082E0C
	movs r0, #0x80
	lsls r0, r0, #1
	adds r3, r3, r0
_08082E0C:
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _08082E16
	adds r3, #0x20
_08082E16:
	lsls r1, r1, #5
	adds r0, r3, #0
	movs r2, #0x20
	bl ApplyPaletteExt
_08082E20:
	pop {r0}
	bx r0
	.align 2, 0
_08082E24: .4byte 0x08404ED0
_08082E28: .4byte 0x08404D90

	thumb_func_start sub_08082E2C
sub_08082E2C: @ 0x08082E2C
	push {r4, lr}
	adds r4, r0, #0
	adds r3, r1, #0
	cmp r3, #0x4d
	bls _08082E38
	movs r3, #0x4a
_08082E38:
	ldr r2, _08082E60 @ =0x0203E670
	ldr r0, _08082E64 @ =0x000003FF
	adds r1, r0, #0
	adds r0, r4, #0
	ands r0, r1
	strh r0, [r2, #2]
	ldr r1, _08082E68 @ =0x08D8AE00
	lsls r0, r3, #2
	adds r0, r0, r1
	ldr r0, [r0]
	lsls r1, r4, #5
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r1, r2
	bl sub_08013688
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08082E60: .4byte 0x0203E670
_08082E64: .4byte 0x000003FF
_08082E68: .4byte 0x08D8AE00

	thumb_func_start sub_08082E6C
sub_08082E6C: @ 0x08082E6C
	push {lr}
	adds r1, r0, #0
	ldr r3, _08082E90 @ =0x0203E670
	ldr r0, _08082E94 @ =0x000003FF
	adds r2, r0, #0
	adds r0, r1, #0
	ands r0, r2
	strh r0, [r3]
	ldr r0, _08082E98 @ =0x0840828C
	lsls r1, r1, #5
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r1, r2
	bl sub_08013688
	pop {r0}
	bx r0
	.align 2, 0
_08082E90: .4byte 0x0203E670
_08082E94: .4byte 0x000003FF
_08082E98: .4byte 0x0840828C

	thumb_func_start sub_08082E9C
sub_08082E9C: @ 0x08082E9C
	push {lr}
	adds r1, r0, #0
	ldr r3, _08082EC0 @ =0x0203E670
	ldr r0, _08082EC4 @ =0x000003FF
	adds r2, r0, #0
	adds r0, r1, #0
	ands r0, r2
	strh r0, [r3]
	ldr r0, _08082EC8 @ =0x084086C4
	lsls r1, r1, #5
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r1, r2
	bl sub_08013688
	pop {r0}
	bx r0
	.align 2, 0
_08082EC0: .4byte 0x0203E670
_08082EC4: .4byte 0x000003FF
_08082EC8: .4byte 0x084086C4

	thumb_func_start sub_08082ECC
sub_08082ECC: @ 0x08082ECC
	adds r2, r0, #0
	ldr r0, _08082EE8 @ =0x0203E670
	lsls r1, r1, #0xc
	ldrh r0, [r0, #2]
	adds r0, r0, r1
	movs r1, #0x3f
_08082ED8:
	strh r0, [r2]
	adds r0, #1
	adds r2, #2
	subs r1, #1
	cmp r1, #0
	bge _08082ED8
	bx lr
	.align 2, 0
_08082EE8: .4byte 0x0203E670

	thumb_func_start sub_08082EEC
sub_08082EEC: @ 0x08082EEC
	adds r2, r0, #0
	ldr r0, _08082F08 @ =0x0203E670
	lsls r1, r1, #0xc
	ldrh r0, [r0]
	adds r0, r0, r1
	movs r1, #0x7f
_08082EF8:
	strh r0, [r2]
	adds r0, #1
	adds r2, #2
	subs r1, #1
	cmp r1, #0
	bge _08082EF8
	bx lr
	.align 2, 0
_08082F08: .4byte 0x0203E670

	thumb_func_start sub_08082F0C
sub_08082F0C: @ 0x08082F0C
	push {lr}
	adds r2, r1, #0
	ldr r1, _08082F28 @ =0x08408BD4
	ldr r3, _08082F2C @ =0x0203E670
	lsls r2, r2, #0xc
	ldrh r3, [r3]
	adds r2, r3, r2
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	bl TmApplyTsa_thm
	pop {r0}
	bx r0
	.align 2, 0
_08082F28: .4byte 0x08408BD4
_08082F2C: .4byte 0x0203E670

	thumb_func_start sub_08082F30
sub_08082F30: @ 0x08082F30
	push {lr}
	adds r1, r0, #0
	cmp r1, #0
	bne _08082F3C
	movs r0, #0x4a
	b _08082F6E
_08082F3C:
	movs r2, #0xe
	ldrsb r2, [r1, r2]
	cmp r2, #0x30
	bne _08082F48
	movs r0, #0x4c
	b _08082F6E
_08082F48:
	movs r0, #0x20
	ldrb r3, [r1, #0x14]
	ands r0, r3
	cmp r0, #0
	beq _08082F56
	movs r0, #0x4b
	b _08082F6E
_08082F56:
	ldrb r1, [r1, #0x1b]
	cmp r1, #3
	beq _08082F66
	adds r0, r2, #0
	bl GetROMChapterStruct
	ldrb r0, [r0, #0xe]
	b _08082F6E
_08082F66:
	adds r0, r2, #0
	bl GetROMChapterStruct
	ldrb r0, [r0, #0xf]
_08082F6E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08082F74
sub_08082F74: @ 0x08082F74
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r5, r1, #0
	cmp r7, #0
	bne _08082F80
	ldr r7, _08082FEC @ =0x06013000
_08082F80:
	cmp r5, #0
	bge _08082F86
	movs r5, #5
_08082F86:
	movs r4, #0xf
	adds r0, r4, #0
	ands r0, r5
	adds r5, r0, #0
	adds r5, #0x10
	ldr r0, _08082FF0 @ =0x084041FC
	adds r1, r7, #0
	bl sub_08013688
	ldr r0, _08082FF4 @ =0x0841BCA8
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r7, r2
	bl sub_08013688
	ldr r6, _08082FF8 @ =0x0203E678
	adds r0, r6, #0
	adds r1, r7, #0
	adds r2, r5, #0
	bl InitSpriteTextFont
	adds r0, r6, #0
	adds r0, #0x18
	bl InitSpriteText
	adds r0, r6, #0
	adds r0, #0x20
	bl InitSpriteText
	adds r0, r6, #0
	adds r0, #0x28
	bl InitSpriteText
	movs r0, #0
	bl SetTextFont
	ldr r0, _08082FFC @ =0x08190208
	lsls r1, r5, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	lsls r0, r7, #0x11
	lsrs r0, r0, #0x16
	ands r5, r4
	lsls r1, r5, #0xc
	adds r0, r0, r1
	strh r0, [r6, #0x30]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08082FEC: .4byte 0x06013000
_08082FF0: .4byte 0x084041FC
_08082FF4: .4byte 0x0841BCA8
_08082FF8: .4byte 0x0203E678
_08082FFC: .4byte 0x08190208

	thumb_func_start sub_08083000
sub_08083000: @ 0x08083000
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r5, r1, #0
	cmp r7, #0
	bne _0808300C
	ldr r7, _08083074 @ =0x06013000
_0808300C:
	cmp r5, #0
	bge _08083012
	movs r5, #5
_08083012:
	movs r4, #0xf
	adds r0, r4, #0
	ands r0, r5
	adds r5, r0, #0
	adds r5, #0x10
	ldr r0, _08083078 @ =0x084041FC
	adds r1, r7, #0
	bl sub_08013688
	ldr r0, _0808307C @ =0x0841BCA8
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r7, r2
	bl sub_08013688
	ldr r6, _08083080 @ =0x0203E678
	adds r0, r6, #0
	adds r1, r7, #0
	adds r2, r5, #0
	bl InitSpriteTextFont
	adds r0, r6, #0
	adds r0, #0x18
	bl InitSpriteText
	adds r0, r6, #0
	adds r0, #0x20
	bl InitSpriteText
	adds r1, r6, #0
	adds r1, #0x2c
	movs r0, #0
	strb r0, [r1]
	bl SetTextFont
	ldr r0, _08083084 @ =0x08190208
	lsls r1, r5, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	lsls r0, r7, #0x11
	lsrs r0, r0, #0x16
	ands r5, r4
	lsls r1, r5, #0xc
	adds r0, r0, r1
	strh r0, [r6, #0x30]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08083074: .4byte 0x06013000
_08083078: .4byte 0x084041FC
_0808307C: .4byte 0x0841BCA8
_08083080: .4byte 0x0203E678
_08083084: .4byte 0x08190208

	thumb_func_start sub_08083088
sub_08083088: @ 0x08083088
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	mov sl, r0
	mov sb, r1
	adds r7, r2, #0
	mov r8, r3
	cmp r7, #0x1f
	bgt _080830A2
	movs r7, #0x20
_080830A2:
	cmp r7, #0xc0
	ble _080830A8
	movs r7, #0xc0
_080830A8:
	mov r0, r8
	cmp r0, #0xf
	bgt _080830B2
	movs r1, #0x10
	mov r8, r1
_080830B2:
	mov r3, r8
	cmp r3, #0x30
	ble _080830BC
	movs r0, #0x30
	mov r8, r0
_080830BC:
	adds r0, r7, #0
	adds r0, #0x1f
	cmp r0, #0
	bge _080830C6
	adds r0, #0x1f
_080830C6:
	asrs r0, r0, #5
	mov r1, r8
	adds r1, #0xf
	cmp r1, #0
	bge _080830D2
	adds r1, #0xf
_080830D2:
	asrs r1, r1, #4
	str r1, [sp, #4]
	subs r6, r0, #1
	str r6, [sp, #0x18]
	mov r1, sb
	subs r1, #8
	str r1, [sp, #0x14]
	mov r3, sb
	add r3, r8
	str r3, [sp, #0xc]
	mov r0, sl
	subs r0, #8
	str r0, [sp, #0x10]
	mov r1, sl
	adds r1, r1, r7
	str r1, [sp, #8]
	cmp r6, #0
	blt _0808313E
_080830F6:
	ldr r5, [sp, #4]
	subs r4, r6, #1
	cmp r5, #0
	blt _08083138
_080830FE:
	adds r0, r6, #1
	lsls r1, r0, #5
	cmp r1, r7
	ble _08083108
	adds r1, r7, #0
_08083108:
	subs r1, #0x20
	adds r0, r5, #1
	lsls r0, r0, #4
	cmp r0, r8
	ble _08083114
	mov r0, r8
_08083114:
	subs r0, #0x10
	add r1, sl
	mov r3, sb
	adds r2, r3, r0
	ldr r3, _0808323C @ =0x0203E678
	lsls r0, r6, #2
	ldrh r3, [r3, #0x30]
	adds r0, r3, r0
	lsls r3, r5, #6
	adds r0, r0, r3
	str r0, [sp]
	movs r0, #0
	ldr r3, _08083240 @ =0x08BFF7A8
	bl sub_08006884
	subs r5, #1
	cmp r5, #0
	bge _080830FE
_08083138:
	adds r6, r4, #0
	cmp r6, #0
	bge _080830F6
_0808313E:
	ldr r6, [sp, #0x18]
	cmp r6, #0
	blt _08083180
	ldr r5, _0808323C @ =0x0203E678
_08083146:
	adds r0, r6, #1
	lsls r1, r0, #5
	cmp r1, r7
	ble _08083150
	adds r1, r7, #0
_08083150:
	subs r1, #0x20
	mov r0, sl
	adds r4, r0, r1
	ldrh r0, [r5, #0x30]
	adds r0, #0x1b
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	ldr r2, [sp, #0x14]
	ldr r3, _08083244 @ =0x08BFF7B8
	bl sub_08006884
	ldrh r0, [r5, #0x30]
	adds r0, #0x1b
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	ldr r2, [sp, #0xc]
	ldr r3, _08083248 @ =0x08BFF7C8
	bl sub_08006884
	subs r6, #1
	cmp r6, #0
	bge _08083146
_08083180:
	ldr r5, [sp, #4]
	cmp r5, #0
	blt _080831C2
	ldr r6, _0808323C @ =0x0203E678
_08083188:
	adds r0, r5, #1
	lsls r0, r0, #4
	cmp r0, r8
	ble _08083192
	mov r0, r8
_08083192:
	subs r0, #0x10
	mov r1, sb
	adds r4, r1, r0
	ldrh r0, [r6, #0x30]
	adds r0, #0x1f
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #0x10]
	adds r2, r4, #0
	ldr r3, _0808324C @ =0x08BFF780
	bl sub_08006884
	ldrh r0, [r6, #0x30]
	adds r0, #0x1f
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #8]
	adds r2, r4, #0
	ldr r3, _08083250 @ =0x08BFF7D0
	bl sub_08006884
	subs r5, #1
	cmp r5, #0
	bge _08083188
_080831C2:
	ldr r3, _08083254 @ =0x08BFF760
	ldr r4, _0808323C @ =0x0203E678
	ldrh r0, [r4, #0x30]
	adds r0, #0x3e
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #0x10]
	ldr r2, [sp, #0x14]
	bl sub_08006884
	ldr r3, _08083258 @ =0x08BFF7D8
	ldrh r0, [r4, #0x30]
	adds r0, #0x3e
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #8]
	ldr r2, [sp, #0x14]
	bl sub_08006884
	ldr r3, _0808325C @ =0x08BFF7E0
	ldrh r0, [r4, #0x30]
	adds r0, #0x3e
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #0x10]
	ldr r2, [sp, #0xc]
	bl sub_08006884
	ldr r3, _08083260 @ =0x08BFF7E8
	ldrh r0, [r4, #0x30]
	adds r0, #0x3e
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #8]
	ldr r2, [sp, #0xc]
	bl sub_08006884
	ldr r0, [sp, #0x3c]
	cmp r0, #0
	bne _0808322A
	mov r2, sb
	subs r2, #0xb
	ldr r3, _08083240 @ =0x08BFF7A8
	ldr r0, _08083264 @ =0x000003FF
	ldrh r4, [r4, #0x30]
	ands r0, r4
	adds r0, #0x5c
	str r0, [sp]
	movs r0, #0
	mov r1, sl
	bl sub_08006884
_0808322A:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808323C: .4byte 0x0203E678
_08083240: .4byte 0x08BFF7A8
_08083244: .4byte 0x08BFF7B8
_08083248: .4byte 0x08BFF7C8
_0808324C: .4byte 0x08BFF780
_08083250: .4byte 0x08BFF7D0
_08083254: .4byte 0x08BFF760
_08083258: .4byte 0x08BFF7D8
_0808325C: .4byte 0x08BFF7E0
_08083260: .4byte 0x08BFF7E8
_08083264: .4byte 0x000003FF

	thumb_func_start sub_08083268
sub_08083268: @ 0x08083268
	push {r4, lr}
	ldr r4, _080832C8 @ =0x0203E690
	bl GetItemType
	bl sub_08016E60
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0
	movs r2, #8
	bl Text_InsertDrawString
	ldr r3, _080832CC @ =0x0841D06C
	adds r0, r4, #0
	movs r1, #0x24
	movs r2, #8
	bl Text_InsertDrawString
	ldr r3, _080832D0 @ =0x0841D074
	adds r0, r4, #0
	movs r1, #0x60
	movs r2, #8
	bl Text_InsertDrawString
	adds r4, #8
	ldr r3, _080832D4 @ =0x0841D07C
	adds r0, r4, #0
	movs r1, #0
	movs r2, #8
	bl Text_InsertDrawString
	ldr r3, _080832D8 @ =0x0841D084
	adds r0, r4, #0
	movs r1, #0x30
	movs r2, #8
	bl Text_InsertDrawString
	ldr r3, _080832DC @ =0x0841D08C
	adds r0, r4, #0
	movs r1, #0x60
	movs r2, #8
	bl Text_InsertDrawString
	movs r0, #2
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080832C8: .4byte 0x0203E690
_080832CC: .4byte 0x0841D06C
_080832D0: .4byte 0x0841D074
_080832D4: .4byte 0x0841D07C
_080832D8: .4byte 0x0841D084
_080832DC: .4byte 0x0841D08C

	thumb_func_start sub_080832E0
sub_080832E0: @ 0x080832E0
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _08083358 @ =0x0203E690
	bl sub_08016DD8
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #7
	bl Text_InsertDrawString
	adds r0, r5, #0
	bl GetItemDisplayRangeString
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x38
	movs r2, #7
	bl Text_InsertDrawString
	adds r0, r5, #0
	bl GetItemWeight
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x80
	movs r2, #7
	bl Text_InsertDrawNumberOrBlank
	adds r4, #8
	adds r0, r5, #0
	bl GetItemMight
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x20
	movs r2, #7
	bl Text_InsertDrawNumberOrBlank
	adds r0, r5, #0
	bl GetItemHit
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x50
	movs r2, #7
	bl Text_InsertDrawNumberOrBlank
	adds r0, r5, #0
	bl GetItemCrit
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x80
	movs r2, #7
	bl Text_InsertDrawNumberOrBlank
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08083358: .4byte 0x0203E690

	thumb_func_start sub_0808335C
sub_0808335C: @ 0x0808335C
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _080833A8 @ =0x0203E690
	ldr r3, _080833AC @ =0x0841D094
	adds r0, r4, #0
	movs r1, #0
	movs r2, #8
	bl Text_InsertDrawString
	adds r0, r5, #0
	bl sub_08016DD8
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #7
	bl Text_InsertDrawString
	ldr r3, _080833B0 @ =0x0841D06C
	adds r0, r4, #0
	movs r1, #0x24
	movs r2, #8
	bl Text_InsertDrawString
	adds r0, r5, #0
	bl GetItemDisplayRangeString
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x38
	movs r2, #7
	bl Text_InsertDrawString
	movs r0, #1
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080833A8: .4byte 0x0203E690
_080833AC: .4byte 0x0841D094
_080833B0: .4byte 0x0841D06C

	thumb_func_start sub_080833B4
sub_080833B4: @ 0x080833B4
	push {r4, lr}
	ldr r1, _080833EC @ =gPlaySt
	adds r1, #0x2b
	movs r0, #1
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _08083400
	ldr r4, _080833F0 @ =0x0203E690
	ldr r3, _080833F4 @ =0x0841D098
	adds r0, r4, #0
	movs r1, #0
	movs r2, #8
	bl Text_InsertDrawString
	ldr r3, _080833F8 @ =0x0841D0A0
	adds r0, r4, #0
	movs r1, #0x28
	movs r2, #8
	bl Text_InsertDrawString
	ldr r3, _080833FC @ =0x0841D0A8
	adds r0, r4, #0
	movs r1, #0x50
	movs r2, #8
	bl Text_InsertDrawString
	b _0808340C
	.align 2, 0
_080833EC: .4byte gPlaySt
_080833F0: .4byte 0x0203E690
_080833F4: .4byte 0x0841D098
_080833F8: .4byte 0x0841D0A0
_080833FC: .4byte 0x0841D0A8
_08083400:
	ldr r0, _08083414 @ =0x0203E690
	ldr r3, _08083418 @ =0x0841D0B0
	movs r1, #0
	movs r2, #7
	bl Text_InsertDrawString
_0808340C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08083414: .4byte 0x0203E690
_08083418: .4byte 0x0841D0B0

	thumb_func_start sub_0808341C
sub_0808341C: @ 0x0808341C
	push {r4, r5, r6, r7, lr}
	ldr r7, _08083464 @ =gPlaySt
	adds r5, r7, #0
	adds r5, #0x2b
	movs r0, #1
	ldrb r1, [r5]
	ands r0, r1
	cmp r0, #0
	beq _080834C8
	bl sub_0802EBB0
	adds r6, r0, #0
	ldrb r0, [r6]
	cmp r0, #0
	bne _08083474
	ldr r4, _08083468 @ =0x0203E690
	ldr r5, _0808346C @ =0x0841D0BC
	adds r0, r4, #0
	movs r1, #0x14
	movs r2, #7
	adds r3, r5, #0
	bl Text_InsertDrawString
	adds r0, r4, #0
	movs r1, #0x3c
	movs r2, #7
	adds r3, r5, #0
	bl Text_InsertDrawString
	ldr r3, _08083470 @ =0x0841D0C0
	adds r0, r4, #0
	movs r1, #0x64
	movs r2, #7
	bl Text_InsertDrawString
	b _080834C8
	.align 2, 0
_08083464: .4byte gPlaySt
_08083468: .4byte 0x0203E690
_0808346C: .4byte 0x0841D0BC
_08083470: .4byte 0x0841D0C0
_08083474:
	ldr r4, _080834D0 @ =0x0203E690
	ldr r2, _080834D4 @ =Unk_081C8FCC
	ldrb r1, [r5]
	lsls r0, r1, #0x1c
	lsrs r0, r0, #0x1d
	lsls r0, r0, #2
	lsrs r1, r1, #4
	lsls r1, r1, #4
	adds r0, r0, r1
	adds r0, r0, r2
	ldr r0, [r0]
	bl sub_080A7AD8
	bl DecodeMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x14
	movs r2, #7
	bl Text_InsertDrawString
	adds r0, r7, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	lsrs r0, r0, #0x1f
	bl sub_080A7AC8
	bl DecodeMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x3c
	movs r2, #7
	bl Text_InsertDrawString
	adds r0, r4, #0
	movs r1, #0x64
	movs r2, #7
	adds r3, r6, #0
	bl Text_InsertDrawString
_080834C8:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080834D0: .4byte 0x0203E690
_080834D4: .4byte Unk_081C8FCC

	thumb_func_start sub_080834D8
sub_080834D8: @ 0x080834D8
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x5e
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	bgt _08083566
	adds r0, r4, #0
	adds r0, #0x60
	ldrh r0, [r0]
	strh r0, [r1]
	ldr r0, [r4, #0x30]
	bl SetTextFont
	movs r6, #0
	adds r0, r4, #0
	adds r0, #0x62
	movs r2, #0
	ldrsh r1, [r0, r2]
	adds r7, r0, #0
	cmp r6, r1
	bge _08083560
	adds r5, r4, #0
	adds r5, #0x5c
_0808350E:
	ldr r0, [r4, #0x2c]
	ldrb r2, [r0]
	adds r3, r0, #0
	cmp r2, #1
	beq _08083530
	cmp r2, #1
	bgt _08083522
	cmp r2, #0
	beq _08083528
	b _08083540
_08083522:
	cmp r2, #4
	beq _0808353C
	b _08083540
_08083528:
	adds r0, r4, #0
	bl Proc_Break
	b _08083560
_08083530:
	adds r0, r3, #1
	str r0, [r4, #0x2c]
	ldrh r0, [r5]
	adds r0, #1
	strh r0, [r5]
	b _08083556
_0808353C:
	adds r0, r3, #1
	b _08083554
_08083540:
	movs r0, #0
	ldrsh r1, [r5, r0]
	lsls r1, r1, #2
	adds r0, r4, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	adds r1, r3, #0
	bl Text_DrawCharacter
_08083554:
	str r0, [r4, #0x2c]
_08083556:
	adds r6, #1
	movs r1, #0
	ldrsh r0, [r7, r1]
	cmp r6, r0
	blt _0808350E
_08083560:
	movs r0, #0
	bl SetTextFont
_08083566:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0808356C
sub_0808356C: @ 0x0808356C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x30]
	bl SetTextFont
	movs r6, #0
_08083578:
	lsls r1, r6, #2
	adds r0, r4, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r5, [r0]
	ldrb r1, [r5, #4]
	lsls r0, r1, #3
	ldr r1, [r4, #0x2c]
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_SetCursor
_08083594:
	ldr r0, [r4, #0x2c]
	ldrb r1, [r0]
	cmp r1, #1
	beq _080835B4
	cmp r1, #1
	bgt _080835A6
	cmp r1, #0
	beq _080835CC
	b _080835C0
_080835A6:
	cmp r1, #5
	bgt _080835C0
	cmp r1, #4
	blt _080835C0
	adds r0, #1
	str r0, [r4, #0x2c]
	b _08083594
_080835B4:
	adds r0, #1
	str r0, [r4, #0x2c]
	adds r6, #1
	cmp r6, #5
	ble _08083578
	b _080835CC
_080835C0:
	ldr r1, [r4, #0x2c]
	adds r0, r5, #0
	bl Text_DrawCharacter
	str r0, [r4, #0x2c]
	b _08083594
_080835CC:
	ldr r0, [r4, #0x30]
	bl SetTextFont
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_080835D8
sub_080835D8: @ 0x080835D8
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, [r5, #0x58]
	ldr r0, _08083600 @ =0x0203E678
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	adds r0, r4, #0
	bl sub_08082B60
	adds r1, r0, #0
	cmp r1, #1
	beq _08083616
	cmp r1, #1
	bgt _08083604
	cmp r1, #0
	beq _0808360E
	b _08083638
	.align 2, 0
_08083600: .4byte 0x0203E678
_08083604:
	cmp r1, #2
	beq _08083624
	cmp r1, #3
	beq _0808362C
	b _08083638
_0808360E:
	adds r0, r5, #0
	adds r0, #0x64
	strh r1, [r0]
	b _08083638
_08083616:
	adds r0, r4, #0
	bl sub_08083268
	adds r1, r5, #0
	adds r1, #0x64
	movs r0, #2
	b _08083636
_08083624:
	adds r0, r4, #0
	bl sub_0808335C
	b _08083630
_0808362C:
	bl sub_080833B4
_08083630:
	adds r1, r5, #0
	adds r1, #0x64
	movs r0, #1
_08083636:
	strh r0, [r1]
_08083638:
	movs r0, #0
	bl SetTextFont
	adds r0, r5, #0
	bl Proc_Break
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0808364C
sub_0808364C: @ 0x0808364C
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, [r5, #0x58]
	ldr r0, _08083668 @ =0x0203E678
	bl SetTextFont
	adds r0, r4, #0
	bl sub_08082B60
	cmp r0, #1
	beq _0808366C
	cmp r0, #3
	beq _08083674
	b _08083678
	.align 2, 0
_08083668: .4byte 0x0203E678
_0808366C:
	adds r0, r4, #0
	bl sub_080832E0
	b _08083678
_08083674:
	bl sub_0808341C
_08083678:
	movs r0, #0
	bl SetTextFont
	adds r0, r5, #0
	bl Proc_Break
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0808368C
sub_0808368C: @ 0x0808368C
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, sb
	mov r4, r8
	push {r4, r5, r6}
	mov sl, r0
	ldr r5, _08083734 @ =0x0203E678
	adds r0, r5, #0
	bl SetTextFont
	movs r0, #1
	bl SetTextFontGlyphs
	movs r0, #0x18
	adds r0, r0, r5
	mov sb, r0
	movs r1, #6
	bl Text_SetColor
	movs r1, #0x20
	adds r1, r1, r5
	mov r8, r1
	mov r0, r8
	movs r1, #6
	bl Text_SetColor
	adds r6, r5, #0
	adds r6, #0x28
	adds r0, r6, #0
	movs r1, #6
	bl Text_SetColor
	movs r0, #0
	bl SetTextFont
	ldr r4, _08083738 @ =0x08D8AF34
	adds r0, r4, #0
	bl sub_08004748
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x30]
	mov r0, sb
	str r0, [r4, #0x34]
	mov r1, r8
	str r1, [r4, #0x38]
	str r6, [r4, #0x3c]
	mov r0, sl
	adds r0, #0x64
	ldrh r1, [r0]
	adds r0, r4, #0
	adds r0, #0x5c
	movs r5, #0
	strh r1, [r0]
	mov r1, sl
	ldr r0, [r1, #0x5c]
	bl DecodeMsg
	bl sub_08013374
	str r0, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x62
	movs r3, #1
	strh r3, [r1]
	adds r0, r4, #0
	adds r0, #0x5e
	strh r5, [r0]
	ldr r0, _0808373C @ =gPlaySt
	adds r0, #0x40
	ldrb r0, [r0]
	lsls r0, r0, #0x19
	lsrs r2, r0, #0x1e
	cmp r2, #1
	beq _08083752
	cmp r2, #1
	bgt _08083740
	cmp r2, #0
	beq _0808374A
	b _0808376E
	.align 2, 0
_08083734: .4byte 0x0203E678
_08083738: .4byte 0x08D8AF34
_0808373C: .4byte gPlaySt
_08083740:
	cmp r2, #2
	beq _0808375A
	cmp r2, #3
	beq _08083764
	b _0808376E
_0808374A:
	adds r1, r4, #0
	adds r1, #0x60
	movs r0, #2
	b _0808376C
_08083752:
	adds r0, r4, #0
	adds r0, #0x60
	strh r2, [r0]
	b _0808376E
_0808375A:
	adds r0, r4, #0
	adds r0, #0x60
	strh r3, [r0]
	strh r2, [r1]
	b _0808376E
_08083764:
	adds r0, r4, #0
	adds r0, #0x60
	strh r5, [r0]
	movs r0, #0x7f
_0808376C:
	strh r0, [r1]
_0808376E:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_0808377C
sub_0808377C: @ 0x0808377C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _08083794 @ =0x08D8AF5C
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x58]
	str r5, [r0, #0x5c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08083794: .4byte 0x08D8AF5C

	thumb_func_start sub_08083798
sub_08083798: @ 0x08083798
	push {r4, lr}
	ldr r4, _080837D4 @ =0x0203E678
	adds r0, r4, #0
	bl SetTextFont
	adds r0, r4, #0
	adds r0, #0x18
	bl SpriteText_DrawBackground
	adds r0, r4, #0
	adds r0, #0x20
	bl SpriteText_DrawBackground
	adds r4, #0x28
	adds r0, r4, #0
	bl SpriteText_DrawBackground
	ldr r0, _080837D8 @ =0x08D8AF34
	bl sub_08004748
	ldr r0, _080837DC @ =0x08D8AF5C
	bl sub_08004748
	movs r0, #0
	bl SetTextFont
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080837D4: .4byte 0x0203E678
_080837D8: .4byte 0x08D8AF34
_080837DC: .4byte 0x08D8AF5C

	thumb_func_start sub_080837E0
sub_080837E0: @ 0x080837E0
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r1, #5
	bl sub_080824CC
	adds r2, r4, #0
	adds r2, #0x48
	adds r4, #0x4a
	ldrh r3, [r2]
	movs r0, #0
	ldrsh r1, [r2, r0]
	movs r5, #0
	ldrsh r0, [r4, r5]
	cmp r1, r0
	bge _08083802
	adds r0, r3, #1
	strh r0, [r2]
_08083802:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08083808
sub_08083808: @ 0x08083808
	push {r4, r5, lr}
	adds r4, r0, #0
	bl sub_08083AC8
	ldr r0, [r4, #0x2c]
	ldrb r1, [r0, #0x10]
	ldrb r2, [r0, #0x11]
	adds r0, r4, #0
	bl sub_08083AC0
	adds r5, r4, #0
	adds r5, #0x4a
	movs r1, #0
	ldrsh r0, [r5, r1]
	movs r1, #3
	bl __divsi3
	strh r0, [r5]
	adds r4, #0x48
	strh r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08083838
sub_08083838: @ 0x08083838
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0
	bl sub_080824CC
	adds r1, r4, #0
	adds r1, #0x48
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _08083858
	adds r0, r4, #0
	bl Proc_Break
_08083858:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08083860
sub_08083860: @ 0x08083860
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0808387C @ =0x0203E6AC
	movs r3, #0
	strb r4, [r0, #0x10]
	strb r1, [r0, #0x11]
	strh r2, [r0, #0x12]
	str r3, [r0, #0x14]
	str r3, [r0, #0x18]
	bl sub_080839D8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808387C: .4byte 0x0203E6AC

	thumb_func_start sub_08083880
sub_08083880: @ 0x08083880
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r6, r0, #0
	ldr r4, _080838C4 @ =0x08D8AF84
	adds r0, r4, #0
	bl Proc_Find
	adds r5, r0, #0
	cmp r5, #0
	bne _080838CC
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Start
	adds r5, r0, #0
	ldr r0, _080838C8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080838B2
	movs r0, #0xe4
	lsls r0, r0, #2
	bl m4aSongNumStart
_080838B2:
	ldrb r1, [r6, #0x10]
	ldrb r2, [r6, #0x11]
	adds r0, r5, #0
	bl sub_08083AC0
	adds r0, r5, #0
	bl sub_08083AC8
	b _080838E8
	.align 2, 0
_080838C4: .4byte 0x08D8AF84
_080838C8: .4byte gPlaySt
_080838CC:
	ldrh r0, [r5, #0x30]
	strh r0, [r5, #0x38]
	ldrh r0, [r5, #0x32]
	strh r0, [r5, #0x3a]
	adds r0, r5, #0
	adds r0, #0x44
	ldrh r1, [r0]
	subs r0, #4
	strh r1, [r0]
	adds r0, #6
	ldrh r0, [r0]
	adds r1, r5, #0
	adds r1, #0x42
	strh r0, [r1]
_080838E8:
	str r6, [r5, #0x2c]
	adds r1, r5, #0
	adds r1, #0x48
	movs r0, #0
	strh r0, [r1]
	adds r1, #2
	movs r0, #0xc
	strh r0, [r1]
	ldrh r0, [r6, #0x12]
	adds r4, r5, #0
	adds r4, #0x4c
	strh r0, [r4]
	movs r0, #1
	bl SetTextFontGlyphs
	ldrh r0, [r4]
	bl DecodeMsg
	add r2, sp, #4
	mov r1, sp
	bl GetStringTextBox
	movs r0, #0
	bl SetTextFontGlyphs
	ldr r1, [sp]
	ldr r2, [sp, #4]
	adds r0, r5, #0
	bl sub_08083A08
	ldrb r1, [r6, #0x10]
	ldrb r2, [r6, #0x11]
	adds r0, r5, #0
	bl sub_08083A48
	bl sub_08083798
	adds r0, r5, #0
	adds r0, #0x4e
	ldrh r0, [r0]
	ldrh r1, [r4]
	bl sub_0808377C
	ldr r0, _0808394C @ =0x0203E6C8
	str r6, [r0]
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808394C: .4byte 0x0203E6C8

	thumb_func_start sub_08083950
sub_08083950: @ 0x08083950
	push {lr}
	ldr r0, _08083974 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08083964
	ldr r0, _08083978 @ =0x00000391
	bl m4aSongNumStart
_08083964:
	bl sub_08083798
	ldr r0, _0808397C @ =0x08D8AF84
	bl sub_08004764
	pop {r0}
	bx r0
	.align 2, 0
_08083974: .4byte gPlaySt
_08083978: .4byte 0x00000391
_0808397C: .4byte 0x08D8AF84

	thumb_func_start sub_08083980
sub_08083980: @ 0x08083980
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x50
	movs r1, #0
	strh r1, [r0]
	ldr r0, [r4, #0x2c]
	ldr r1, [r0, #0x14]
	cmp r1, #0
	beq _08083998
	adds r0, r4, #0
	bl _call_via_r1
_08083998:
	ldr r0, [r4, #0x2c]
	bl sub_08083880
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080839A4
sub_080839A4: @ 0x080839A4
	push {lr}
	adds r2, r0, #0
	ldr r0, _080839C0 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080839BC
	adds r0, r2, #0
	bl Proc_Break
_080839BC:
	pop {r0}
	bx r0
	.align 2, 0
_080839C0: .4byte gpKeySt

	thumb_func_start sub_080839C4
sub_080839C4: @ 0x080839C4
	push {r4, lr}
	adds r4, r0, #0
	bl sub_08083950
	adds r0, r4, #0
	bl Proc_End
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080839D8
sub_080839D8: @ 0x080839D8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080839EC @ =0x08D8AFA4
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080839EC: .4byte 0x08D8AFA4

	thumb_func_start sub_080839F0
sub_080839F0: @ 0x080839F0
	push {lr}
	ldr r0, _08083A04 @ =0x08D8AFA4
	bl Proc_Find
	cmp r0, #0
	beq _080839FE
	movs r0, #1
_080839FE:
	pop {r1}
	bx r1
	.align 2, 0
_08083A04: .4byte 0x08D8AFA4

	thumb_func_start sub_08083A08
sub_08083A08: @ 0x08083A08
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	adds r4, #0x1f
	movs r0, #0xe0
	ands r4, r0
	adds r0, r6, #0
	adds r0, #0x4e
	ldrh r0, [r0]
	bl sub_08083AD8
	cmp r0, #1
	beq _08083A2A
	cmp r0, #2
	beq _08083A30
	b _08083A38
_08083A2A:
	movs r4, #0xa0
	adds r5, #0x20
	b _08083A38
_08083A30:
	cmp r4, #0x5f
	bgt _08083A36
	movs r4, #0x60
_08083A36:
	adds r5, #0x10
_08083A38:
	adds r0, r6, #0
	adds r0, #0x44
	strh r4, [r0]
	adds r0, #2
	strh r5, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_08083A48
sub_08083A48: @ 0x08083A48
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r4, r1, #0
	mov r8, r2
	adds r0, #0x44
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r6, r0, #0
	adds r6, #0x10
	adds r0, r5, #0
	adds r0, #0x46
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r7, r0, #0
	adds r7, #0x10
	adds r0, r6, #0
	movs r1, #6
	bl __divsi3
	adds r0, #0x10
	subs r4, r4, r0
	strh r4, [r5, #0x3c]
	lsls r4, r4, #0x10
	cmp r4, #0
	bge _08083A82
	movs r0, #0
	strh r0, [r5, #0x3c]
_08083A82:
	movs r1, #0x3c
	ldrsh r0, [r5, r1]
	adds r0, r0, r6
	cmp r0, #0xf0
	ble _08083A92
	movs r0, #0xf0
	subs r0, r0, r6
	strh r0, [r5, #0x3c]
_08083A92:
	mov r0, r8
	adds r0, #0x10
	strh r0, [r5, #0x3e]
	movs r1, #0x3e
	ldrsh r0, [r5, r1]
	adds r0, r0, r7
	cmp r0, #0xa0
	ble _08083AA8
	mov r1, r8
	subs r0, r1, r7
	strh r0, [r5, #0x3e]
_08083AA8:
	ldrh r0, [r5, #0x3c]
	adds r0, #8
	strh r0, [r5, #0x3c]
	ldrh r0, [r5, #0x3e]
	adds r0, #8
	strh r0, [r5, #0x3e]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08083AC0
sub_08083AC0: @ 0x08083AC0
	strh r1, [r0, #0x38]
	strh r2, [r0, #0x3a]
	bx lr
	.align 2, 0

	thumb_func_start sub_08083AC8
sub_08083AC8: @ 0x08083AC8
	adds r2, r0, #0
	adds r2, #0x40
	movs r1, #0x20
	strh r1, [r2]
	adds r0, #0x42
	movs r1, #0x10
	strh r1, [r0]
	bx lr

	thumb_func_start sub_08083AD8
sub_08083AD8: @ 0x08083AD8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08083AE8 @ =0x0000FFFF
	cmp r4, r0
	bne _08083AEC
	movs r0, #3
	b _08083B22
	.align 2, 0
_08083AE8: .4byte 0x0000FFFF
_08083AEC:
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #0x80
	lsls r1, r1, #3
	ands r1, r0
	cmp r1, #0
	bne _08083B1C
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _08083B0E
	movs r0, #1
	b _08083B22
_08083B0E:
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #4
	ands r1, r0
	cmp r1, #0
	bne _08083B20
_08083B1C:
	movs r0, #0
	b _08083B22
_08083B20:
	movs r0, #2
_08083B22:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_08083B28
sub_08083B28: @ 0x08083B28
	push {lr}
	adds r2, r0, #0
	ldr r0, _08083B44 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08083B40
	adds r0, r2, #0
	bl Proc_Break
_08083B40:
	pop {r0}
	bx r0
	.align 2, 0
_08083B44: .4byte gpKeySt

	thumb_func_start sub_08083B48
sub_08083B48: @ 0x08083B48
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	movs r1, #1
	rsbs r1, r1, #0
	movs r0, #0
	bl sub_08082F74
	bl sub_0804A810
	adds r4, r0, #0
	bl sub_0804A81C
	adds r1, r0, #0
	adds r0, r4, #0
	adds r2, r5, #0
	bl sub_08083860
	ldr r0, _08083B7C @ =0x08D8AFD4
	adds r1, r6, #0
	bl Proc_StartBlocking
	movs r0, #1
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_08083B7C: .4byte 0x08D8AFD4

	thumb_func_start sub_08083B80
sub_08083B80: @ 0x08083B80
	push {lr}
	ldr r0, _08083B90 @ =0x08D8AFEC
	bl Proc_Find
	cmp r0, #0
	bne _08083B94
	movs r0, #0
	b _08083B96
	.align 2, 0
_08083B90: .4byte 0x08D8AFEC
_08083B94:
	movs r0, #1
_08083B96:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08083B9C
sub_08083B9C: @ 0x08083B9C
	ldr r1, _08083BA4 @ =0x0203E6CC
	adds r1, #0x42
	strh r0, [r1]
	bx lr
	.align 2, 0
_08083BA4: .4byte 0x0203E6CC

	thumb_func_start sub_08083BA8
sub_08083BA8: @ 0x08083BA8
	ldr r0, _08083BB0 @ =0x0203E6CC
	adds r0, #0x42
	ldrh r0, [r0]
	bx lr
	.align 2, 0
_08083BB0: .4byte 0x0203E6CC

	thumb_func_start sub_08083BB4
sub_08083BB4: @ 0x08083BB4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	mov sb, r0
	ldr r3, _08083C14 @ =0x0203E6CC
	adds r2, r3, #0
	adds r2, #0x40
	ldr r0, _08083C18 @ =0x000003FF
	ldrh r2, [r2]
	ands r0, r2
	ldrh r3, [r3, #0x18]
	adds r0, r3, r0
	lsls r0, r0, #5
	ldr r2, _08083C1C @ =0x06010000
	adds r5, r0, r2
	movs r7, #0
	lsls r0, r1, #1
	cmp r7, r0
	bge _08083C46
	adds r3, r0, #0
_08083BE0:
	adds r4, r5, #0
	movs r2, #0
	adds r0, r7, #1
	mov r8, r0
	cmp r2, sb
	bge _08083C3A
_08083BEC:
	adds r6, r2, #1
	movs r1, #6
_08083BF0:
	ldr r0, [r4, #4]
	stm r4!, {r0}
	subs r1, #1
	cmp r1, #0
	bge _08083BF0
	subs r0, r3, #1
	cmp r7, r0
	bne _08083C28
	str r3, [sp]
	bl sub_08083BA8
	movs r1, #1
	ands r1, r0
	ldr r3, [sp]
	cmp r1, #0
	bne _08083C24
	ldr r0, _08083C20 @ =0x44444444
	b _08083C32
	.align 2, 0
_08083C14: .4byte 0x0203E6CC
_08083C18: .4byte 0x000003FF
_08083C1C: .4byte 0x06010000
_08083C20: .4byte 0x44444444
_08083C24:
	movs r0, #0
	b _08083C32
_08083C28:
	adds r0, r2, #0
	adds r0, #0x20
	lsls r0, r0, #5
	adds r0, r0, r5
	ldr r0, [r0]
_08083C32:
	stm r4!, {r0}
	adds r2, r6, #0
	cmp r2, sb
	blt _08083BEC
_08083C3A:
	movs r2, #0x80
	lsls r2, r2, #3
	adds r5, r5, r2
	mov r7, r8
	cmp r7, r3
	blt _08083BE0
_08083C46:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08083C54
sub_08083C54: @ 0x08083C54
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	cmp r6, #0
	bne _08083C60
	ldr r6, _08083C84 @ =0x06013000
_08083C60:
	cmp r5, #0
	bge _08083C66
	movs r5, #5
_08083C66:
	movs r0, #0xf
	ands r0, r5
	adds r5, r0, #0
	adds r5, #0x10
	bl sub_08083BA8
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq _08083C8C
	ldr r0, _08083C88 @ =0x0840431C
	adds r1, r6, #0
	bl sub_08013688
	b _08083C94
	.align 2, 0
_08083C84: .4byte 0x06013000
_08083C88: .4byte 0x0840431C
_08083C8C:
	ldr r0, _08083D08 @ =0x084041FC
	adds r1, r6, #0
	bl sub_08013688
_08083C94:
	bl sub_08007F14
	bl sub_08083BA8
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	bne _08083D24
	ldr r4, _08083D0C @ =0x0203E6CC
	adds r0, r4, #0
	adds r1, r6, #0
	adds r2, r5, #0
	bl InitSpriteTextFont
	adds r0, r4, #0
	adds r0, #0x18
	bl InitSpriteText
	adds r0, r4, #0
	adds r0, #0x20
	bl InitSpriteText
	adds r0, r4, #0
	adds r0, #0x28
	bl InitSpriteText
	bl sub_08083BA8
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq _08083CF0
	bl sub_08083BA8
	movs r1, #0x20
	ands r1, r0
	cmp r1, #0
	bne _08083CF0
	adds r0, r4, #0
	adds r0, #0x30
	bl InitSpriteText
	adds r0, r4, #0
	adds r0, #0x38
	bl InitSpriteText
_08083CF0:
	movs r0, #0
	bl SetTextFont
	bl sub_08083BA8
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq _08083D14
	ldr r0, _08083D10 @ =0x08190248
	b _08083D16
	.align 2, 0
_08083D08: .4byte 0x084041FC
_08083D0C: .4byte 0x0203E6CC
_08083D10: .4byte 0x08190248
_08083D14:
	ldr r0, _08083D20 @ =0x08190228
_08083D16:
	lsls r1, r5, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	b _08083D60
	.align 2, 0
_08083D20: .4byte 0x08190228
_08083D24:
	ldr r0, _08083D34 @ =0x0203E6CC
	adds r1, r6, #0
	adds r2, r5, #0
	bl InitSpriteTextFont
	movs r4, #0
	lsls r7, r5, #5
	b _08083D44
	.align 2, 0
_08083D34: .4byte 0x0203E6CC
_08083D38:
	lsls r0, r4, #3
	ldr r1, _08083D98 @ =0x0203E6E4
	adds r0, r0, r1
	bl InitSpriteText
	adds r4, #1
_08083D44:
	bl sub_08083BA8
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	cmp r4, r0
	blt _08083D38
	movs r0, #0
	bl SetTextFont
	ldr r0, _08083D9C @ =0x081901C8
	adds r1, r7, #0
	movs r2, #0x20
	bl ApplyPaletteExt
_08083D60:
	ldr r2, _08083DA0 @ =0x0203E6CC
	lsls r1, r6, #0x11
	lsrs r1, r1, #0x16
	movs r0, #0xf
	ands r0, r5
	lsls r0, r0, #0xc
	adds r1, r1, r0
	adds r2, #0x40
	strh r1, [r2]
	bl sub_08083BA8
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq _08083D90
	ldr r0, _08083DA4 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08083D90
	ldr r0, _08083DA8 @ =0x000002E6
	bl m4aSongNumStart
_08083D90:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08083D98: .4byte 0x0203E6E4
_08083D9C: .4byte 0x081901C8
_08083DA0: .4byte 0x0203E6CC
_08083DA4: .4byte gPlaySt
_08083DA8: .4byte 0x000002E6

	thumb_func_start sub_08083DAC
sub_08083DAC: @ 0x08083DAC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r0, #0x46
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r0, #0x10
	mov r8, r0
	adds r1, r4, #0
	adds r1, #0x44
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0xbf
	ble _08083DD2
	movs r0, #0xc0
	strh r0, [r1]
_08083DD2:
	movs r2, #0
	ldrsh r0, [r1, r2]
	adds r7, r0, #0
	adds r7, #0x10
	bl sub_08083BA8
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	bne _08083E24
	strh r5, [r4, #0x3c]
	adds r0, r6, #0
	adds r0, #8
	strh r0, [r4, #0x3e]
	bl sub_08083BA8
	movs r1, #0x40
	ands r1, r0
	cmp r1, #0
	bne _08083E1C
	movs r1, #0x3c
	ldrsh r0, [r4, r1]
	adds r0, r0, r7
	cmp r0, #0xf0
	ble _08083E0A
	movs r0, #0xf0
	subs r0, r0, r7
	strh r0, [r4, #0x3c]
_08083E0A:
	movs r2, #0x3e
	ldrsh r0, [r4, r2]
	add r0, r8
	cmp r0, #0xa0
	ble _08083E1C
	movs r0, #0x98
	mov r1, r8
	subs r0, r0, r1
	strh r0, [r4, #0x3e]
_08083E1C:
	ldrh r0, [r4, #0x3c]
	adds r0, #8
	strh r0, [r4, #0x3c]
	b _08083E28
_08083E24:
	strh r5, [r4, #0x3c]
	strh r6, [r4, #0x3e]
_08083E28:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08083E34
sub_08083E34: @ 0x08083E34
	movs r3, #0xf8
	ands r3, r1
	adds r1, r0, #0
	adds r1, #0x44
	strh r3, [r1]
	adds r0, #0x46
	strh r2, [r0]
	bx lr

	thumb_func_start sub_08083E44
sub_08083E44: @ 0x08083E44
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x40
	ldrb r0, [r1]
	cmp r0, #0xff
	bne _08083E5E
	movs r1, #1
	rsbs r1, r1, #0
	movs r0, #0
	bl sub_08083C54
	b _08083E66
_08083E5E:
	ldr r0, [r4, #0x3c]
	ldrb r1, [r1]
	bl sub_08083C54
_08083E66:
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	ldr r2, [r4, #0x34]
	bl sub_08084208
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08083E78
sub_08083E78: @ 0x08083E78
	push {r4, lr}
	adds r4, r0, #0
	bl sub_08083BA8
	movs r1, #0x82
	ands r1, r0
	cmp r1, #0
	bne _08083E9E
	ldr r0, _08083EA4 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0xa
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08083E9E
	adds r0, r4, #0
	movs r1, #2
	bl Proc_Goto
_08083E9E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08083EA4: .4byte gpKeySt

	thumb_func_start sub_08083EA8
sub_08083EA8: @ 0x08083EA8
	push {lr}
	bl sub_08083BA8
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq _08083EC8
	ldr r0, _08083ED8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08083EC8
	ldr r0, _08083EDC @ =0x000002E7
	bl m4aSongNumStart
_08083EC8:
	movs r0, #0
	bl SetTextFontGlyphs
	bl sub_08083FEC
	pop {r0}
	bx r0
	.align 2, 0
_08083ED8: .4byte gPlaySt
_08083EDC: .4byte 0x000002E7

	thumb_func_start sub_08083EE0
sub_08083EE0: @ 0x08083EE0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r7, r0, #0
	adds r5, r1, #0
	movs r1, #0x3c
	ldrsh r0, [r7, r1]
	mov r8, r0
	movs r3, #0x3e
	ldrsh r2, [r7, r3]
	mov sb, r2
	adds r0, r7, #0
	adds r0, #0x40
	movs r4, #0
	ldrsh r1, [r0, r4]
	adds r0, #4
	movs r6, #0
	ldrsh r2, [r0, r6]
	adds r4, r7, #0
	adds r4, #0x48
	movs r3, #0
	ldrsh r0, [r4, r3]
	mov ip, r0
	movs r6, #0x4a
	adds r6, r6, r7
	mov sl, r6
	movs r3, #0
	ldrsh r0, [r6, r3]
	str r0, [sp]
	adds r0, r5, #0
	mov r3, ip
	bl Interpolate
	str r0, [sp, #4]
	adds r0, r7, #0
	adds r0, #0x42
	movs r6, #0
	ldrsh r1, [r0, r6]
	adds r0, #4
	movs r3, #0
	ldrsh r2, [r0, r3]
	movs r6, #0
	ldrsh r3, [r4, r6]
	mov r4, sl
	movs r6, #0
	ldrsh r0, [r4, r6]
	str r0, [sp]
	adds r0, r5, #0
	bl Interpolate
	adds r3, r0, #0
	mov r0, r8
	strh r0, [r7, #0x30]
	mov r1, sb
	strh r1, [r7, #0x32]
	mov r0, r8
	mov r1, sb
	ldr r2, [sp, #4]
	bl sub_080842F8
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08083F70
sub_08083F70: @ 0x08083F70
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r1, #5
	bl sub_08083EE0
	adds r2, r4, #0
	adds r2, #0x48
	adds r4, #0x4a
	ldrh r3, [r2]
	movs r0, #0
	ldrsh r1, [r2, r0]
	movs r5, #0
	ldrsh r0, [r4, r5]
	cmp r1, r0
	bge _08083F92
	adds r0, r3, #1
	strh r0, [r2]
_08083F92:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08083F98
sub_08083F98: @ 0x08083F98
	push {r4, r5, lr}
	adds r4, r0, #0
	bl sub_08082B50
	adds r5, r4, #0
	adds r5, #0x4a
	movs r1, #0
	ldrsh r0, [r5, r1]
	movs r1, #3
	bl __divsi3
	strh r0, [r5]
	adds r4, #0x48
	strh r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08083FBC
sub_08083FBC: @ 0x08083FBC
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0
	bl sub_08083EE0
	adds r1, r4, #0
	adds r1, #0x48
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _08083FE2
	adds r0, r4, #0
	bl Proc_Break
	ldr r0, _08083FE8 @ =0x08D8B124
	bl sub_08004748
_08083FE2:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08083FE8: .4byte 0x08D8B124

	thumb_func_start sub_08083FEC
sub_08083FEC: @ 0x08083FEC
	push {lr}
	bl sub_08085008
	ldr r0, _08083FFC @ =0x08D8B04C
	bl sub_08004764
	pop {r0}
	bx r0
	.align 2, 0
_08083FFC: .4byte 0x08D8B04C

	thumb_func_start sub_08084000
sub_08084000: @ 0x08084000
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	adds r7, r1, #0
	mov r8, r2
	adds r5, r3, #0
	ldr r4, _0808402C @ =0x08D8AFEC
	adds r0, r4, #0
	bl sub_08004748
	movs r0, #0
	bl sub_08083B9C
	cmp r5, #0
	bne _08084030
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Start
	b _08084038
	.align 2, 0
_0808402C: .4byte 0x08D8AFEC
_08084030:
	adds r0, r4, #0
	adds r1, r5, #0
	bl Proc_StartBlocking
_08084038:
	adds r2, r0, #0
	str r6, [r2, #0x2c]
	str r7, [r2, #0x30]
	mov r0, r8
	str r0, [r2, #0x34]
	adds r1, r2, #0
	adds r1, #0x40
	movs r0, #0xff
	strb r0, [r1]
	subs r1, #8
	movs r0, #1
	strb r0, [r1]
	ldr r0, _08084064 @ =0x08D8B124
	movs r1, #0
	bl Proc_Start
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08084064: .4byte 0x08D8B124

	thumb_func_start sub_08084068
sub_08084068: @ 0x08084068
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r6, r0, #0
	adds r7, r1, #0
	mov r8, r2
	mov sb, r3
	ldr r5, [sp, #0x20]
	ldr r4, _08084098 @ =0x08D8AFEC
	adds r0, r4, #0
	bl sub_08004748
	movs r0, #0
	bl sub_08083B9C
	cmp r5, #0
	bne _0808409C
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Start
	b _080840A4
	.align 2, 0
_08084098: .4byte 0x08D8AFEC
_0808409C:
	adds r0, r4, #0
	adds r1, r5, #0
	bl Proc_StartBlocking
_080840A4:
	adds r2, r0, #0
	str r6, [r2, #0x2c]
	str r7, [r2, #0x30]
	mov r0, r8
	str r0, [r2, #0x34]
	adds r1, r2, #0
	adds r1, #0x40
	ldr r0, [sp, #0x1c]
	strb r0, [r1]
	mov r0, sb
	str r0, [r2, #0x3c]
	subs r1, #8
	movs r0, #1
	strb r0, [r1]
	ldr r0, _080840D4 @ =0x08D8B124
	movs r1, #0
	bl Proc_Start
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080840D4: .4byte 0x08D8B124

	thumb_func_start sub_080840D8
sub_080840D8: @ 0x080840D8
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r3, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	movs r7, #0
	movs r6, #0x10
	str r7, [r4]
	str r7, [r5]
_080840EA:
	ldrb r0, [r3]
	cmp r0, #7
	bgt _0808410C
	cmp r0, #4
	bge _08084134
	cmp r0, #1
	beq _08084128
	cmp r0, #1
	bgt _08084102
	cmp r0, #0
	beq _0808416A
	b _0808417C
_08084102:
	cmp r0, #2
	beq _08084138
	cmp r0, #3
	beq _0808414E
	b _0808417C
_0808410C:
	cmp r0, #0x19
	ble _08084116
	cmp r0, #0x80
	beq _08084124
	b _0808417C
_08084116:
	cmp r0, #0x18
	bge _08084132
	cmp r0, #0x14
	bgt _0808417C
	cmp r0, #0x12
	blt _0808417C
	b _0808416A
_08084124:
	adds r3, #2
	b _080840EA
_08084128:
	adds r6, #0x10
	ldr r0, [r4]
	cmp r0, r7
	bge _08084132
	str r7, [r4]
_08084132:
	movs r7, #0
_08084134:
	adds r3, #1
	b _080840EA
_08084138:
	adds r3, #1
	ldr r0, [r5]
	cmp r0, r6
	bge _08084142
	str r6, [r5]
_08084142:
	movs r6, #0
	ldr r0, [r4]
	cmp r0, r7
	bge _08084166
	str r7, [r4]
	b _08084166
_0808414E:
	adds r3, #1
	ldr r0, [r5]
	cmp r0, r6
	bge _08084158
	str r6, [r5]
_08084158:
	movs r6, #0
	adds r1, r7, #0
	adds r1, #8
	ldr r0, [r4]
	cmp r0, r1
	bge _08084166
	str r1, [r4]
_08084166:
	movs r7, #0
	b _080840EA
_0808416A:
	ldr r0, [r4]
	cmp r0, r7
	bge _08084172
	str r7, [r4]
_08084172:
	ldr r0, [r5]
	cmp r0, r6
	bge _0808418C
	str r6, [r5]
	b _0808418C
_0808417C:
	adds r0, r3, #0
	mov r1, sp
	bl GetCharTextLen
	adds r3, r0, #0
	ldr r0, [sp]
	adds r7, r7, r0
	b _080840EA
_0808418C:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08084194
sub_08084194: @ 0x08084194
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r1, #0
	movs r5, #0
	adds r4, r0, #0
	strb r5, [r6]
	movs r0, #1
	bl SetTextFontGlyphs
_080841A6:
	ldrb r0, [r4]
	cmp r0, #7
	bgt _080841C8
	cmp r0, #4
	bge _080841DE
	cmp r0, #1
	beq _080841E2
	cmp r0, #1
	bgt _080841BE
	cmp r0, #0
	beq _080841FC
	b _080841EC
_080841BE:
	cmp r0, #2
	beq _080841DE
	cmp r0, #3
	beq _080841FC
	b _080841EC
_080841C8:
	cmp r0, #0x19
	ble _080841D2
	cmp r0, #0x80
	beq _080841E8
	b _080841EC
_080841D2:
	cmp r0, #0x18
	bge _080841E2
	cmp r0, #0x14
	bgt _080841EC
	cmp r0, #0x12
	blt _080841EC
_080841DE:
	adds r4, #1
	b _080841A6
_080841E2:
	adds r4, #1
	movs r5, #0
	b _080841A6
_080841E8:
	adds r4, #2
	b _080841A6
_080841EC:
	adds r0, r4, #0
	mov r1, sp
	bl GetCharTextLen
	adds r4, r0, #0
	ldr r0, [sp]
	adds r5, r5, r0
	b _080841A6
_080841FC:
	adds r0, r5, #2
	strb r0, [r6]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_08084208
sub_08084208: @ 0x08084208
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r6, r0, #0
	adds r7, r1, #0
	mov r8, r2
	movs r5, #0
	str r5, [sp]
	str r5, [sp, #4]
	ldr r4, _08084258 @ =0x08D8B04C
	adds r0, r4, #0
	bl sub_08004748
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	adds r1, r6, #0
	adds r2, r7, #0
	bl sub_08082B2C
	adds r0, r4, #0
	bl sub_08082B50
	str r5, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x48
	strh r5, [r0]
	bl sub_08083BA8
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0808425C
	adds r0, r4, #0
	adds r0, #0x4a
	strh r5, [r0]
	b _08084264
	.align 2, 0
_08084258: .4byte 0x08D8B04C
_0808425C:
	adds r1, r4, #0
	adds r1, #0x4a
	movs r0, #0xc
	strh r0, [r1]
_08084264:
	adds r1, r4, #0
	adds r1, #0x4e
	movs r0, #0
	strh r0, [r1]
	adds r5, r4, #0
	adds r5, #0x4c
	mov r0, r8
	strh r0, [r5]
	movs r0, #1
	bl SetTextFontGlyphs
	ldrh r0, [r5]
	bl DecodeMsg
	bl sub_08013374
	add r2, sp, #4
	mov r1, sp
	bl sub_080840D8
	movs r0, #0
	bl SetTextFontGlyphs
	ldr r1, [sp]
	ldr r2, [sp, #4]
	adds r0, r4, #0
	bl sub_08083E34
	bl sub_08083BA8
	movs r1, #0x80
	lsls r1, r1, #1
	ands r1, r0
	cmp r1, #0
	beq _080842D2
	adds r0, r4, #0
	adds r0, #0x44
	movs r2, #0
	ldrsh r1, [r0, r2]
	movs r0, #0xd8
	subs r0, r0, r1
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	adds r6, r6, r0
	adds r0, r4, #0
	adds r0, #0x46
	movs r2, #0
	ldrsh r1, [r0, r2]
	movs r0, #0x90
	subs r0, r0, r1
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	adds r7, r7, r0
_080842D2:
	adds r0, r4, #0
	adds r1, r6, #0
	adds r2, r7, #0
	bl sub_08083DAC
	bl sub_08085008
	ldrh r0, [r5]
	ldr r1, [sp]
	ldr r2, [sp, #4]
	bl sub_08084FC4
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080842F8
sub_080842F8: @ 0x080842F8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x24
	mov sb, r0
	str r1, [sp, #4]
	adds r4, r2, #0
	mov r8, r3
	cmp r4, #0x1f
	bgt _08084312
	movs r4, #0x20
_08084312:
	cmp r4, #0xc0
	ble _08084318
	movs r4, #0xc0
_08084318:
	mov r0, r8
	cmp r0, #0xf
	bgt _08084322
	movs r1, #0x10
	mov r8, r1
_08084322:
	mov r2, r8
	cmp r2, #0x50
	ble _0808432C
	movs r3, #0x50
	mov r8, r3
_0808432C:
	bl sub_08083BA8
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0808433A
	b _0808458C
_0808433A:
	mov r0, r8
	adds r0, #0xf
	cmp r0, #0
	bge _08084344
	adds r0, #0xf
_08084344:
	asrs r0, r0, #4
	str r0, [sp, #0xc]
	adds r0, r4, #7
	cmp r0, #0
	bge _08084350
	adds r0, #7
_08084350:
	asrs r0, r0, #3
	adds r1, r0, #1
	str r1, [sp, #8]
	movs r6, #0
	subs r0, #3
	ldr r2, [sp, #4]
	subs r2, #8
	str r2, [sp, #0x14]
	ldr r3, [sp, #4]
	add r3, r8
	str r3, [sp, #0x20]
	mov r1, sb
	subs r1, #8
	str r1, [sp, #0x10]
	cmp r6, r0
	bge _080843B6
	str r0, [sp, #0x18]
_08084372:
	lsls r7, r6, #3
	ldr r5, [sp, #0xc]
	adds r4, r6, #4
	cmp r5, #0
	blt _080843AE
	ldr r2, _0808455C @ =0x0203E70C
	mov sl, r2
_08084380:
	adds r0, r5, #1
	lsls r0, r0, #4
	cmp r0, r8
	ble _0808438A
	mov r0, r8
_0808438A:
	subs r0, #0x10
	ldr r3, [sp, #4]
	adds r2, r3, r0
	mov r1, sl
	ldrh r1, [r1]
	adds r0, r1, r6
	lsls r1, r5, #6
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #2
	mov r3, sb
	adds r1, r3, r7
	ldr r3, _08084560 @ =0x08BFF7A8
	bl sub_08006884
	subs r5, #1
	cmp r5, #0
	bge _08084380
_080843AE:
	adds r6, r4, #0
	ldr r0, [sp, #0x18]
	cmp r6, r0
	blt _08084372
_080843B6:
	ldr r1, [sp, #8]
	subs r1, #2
	str r1, [sp, #0x1c]
	cmp r6, r1
	bge _08084404
_080843C0:
	lsls r7, r6, #3
	ldr r5, [sp, #0xc]
	adds r4, r6, #2
	cmp r5, #0
	blt _080843FC
	ldr r2, _0808455C @ =0x0203E70C
	mov sl, r2
_080843CE:
	adds r0, r5, #1
	lsls r0, r0, #4
	cmp r0, r8
	ble _080843D8
	mov r0, r8
_080843D8:
	subs r0, #0x10
	ldr r3, [sp, #4]
	adds r2, r3, r0
	mov r1, sl
	ldrh r1, [r1]
	adds r0, r1, r6
	lsls r1, r5, #6
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #2
	mov r3, sb
	adds r1, r3, r7
	ldr r3, _08084564 @ =0x08BFF768
	bl sub_08006884
	subs r5, #1
	cmp r5, #0
	bge _080843CE
_080843FC:
	adds r6, r4, #0
	ldr r0, [sp, #0x1c]
	cmp r6, r0
	blt _080843C0
_08084404:
	ldr r1, [sp, #8]
	cmp r6, r1
	bge _0808444E
_0808440A:
	lsls r7, r6, #3
	ldr r5, [sp, #0xc]
	adds r4, r6, #1
	cmp r5, #0
	blt _08084446
	ldr r2, _0808455C @ =0x0203E70C
	mov sl, r2
_08084418:
	adds r0, r5, #1
	lsls r0, r0, #4
	cmp r0, r8
	ble _08084422
	mov r0, r8
_08084422:
	subs r0, #0x10
	ldr r3, [sp, #4]
	adds r2, r3, r0
	mov r1, sl
	ldrh r1, [r1]
	adds r0, r1, r6
	lsls r1, r5, #6
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #2
	mov r3, sb
	adds r1, r3, r7
	ldr r3, _08084568 @ =0x08BFF780
	bl sub_08006884
	subs r5, #1
	cmp r5, #0
	bge _08084418
_08084446:
	adds r6, r4, #0
	ldr r0, [sp, #8]
	cmp r6, r0
	blt _0808440A
_0808444E:
	movs r6, #0
	ldr r1, [sp, #0x1c]
	cmp r6, r1
	bge _08084488
	ldr r5, _0808455C @ =0x0203E70C
	mov r4, sb
_0808445A:
	ldrh r0, [r5]
	adds r0, #0x1b
	str r0, [sp]
	movs r0, #2
	adds r1, r4, #0
	ldr r2, [sp, #0x14]
	ldr r3, _0808456C @ =0x08BFF798
	bl sub_08006884
	ldrh r0, [r5]
	adds r0, #0x1b
	str r0, [sp]
	movs r0, #2
	adds r1, r4, #0
	ldr r2, [sp, #0x20]
	ldr r3, _08084570 @ =0x08BFF7A0
	bl sub_08006884
	adds r4, #0x10
	adds r6, #2
	ldr r2, [sp, #0x1c]
	cmp r6, r2
	blt _0808445A
_08084488:
	ldr r3, [sp, #8]
	cmp r6, r3
	bge _080844C4
	ldr r5, _0808455C @ =0x0203E70C
	lsls r0, r6, #3
	mov r1, sb
	adds r4, r0, r1
_08084496:
	ldrh r0, [r5]
	adds r0, #0x1b
	str r0, [sp]
	movs r0, #2
	adds r1, r4, #0
	ldr r2, [sp, #0x14]
	ldr r3, _08084574 @ =0x08BFF760
	bl sub_08006884
	ldrh r0, [r5]
	adds r0, #0x1b
	str r0, [sp]
	movs r0, #2
	adds r1, r4, #0
	ldr r2, [sp, #0x20]
	ldr r3, _08084578 @ =0x08BFF7E0
	bl sub_08006884
	adds r4, #8
	adds r6, #1
	ldr r2, [sp, #8]
	cmp r6, r2
	blt _08084496
_080844C4:
	ldr r5, [sp, #0xc]
	lsls r6, r6, #3
	cmp r5, #0
	blt _0808450A
	ldr r7, _0808455C @ =0x0203E70C
_080844CE:
	adds r0, r5, #1
	lsls r0, r0, #4
	cmp r0, r8
	ble _080844D8
	mov r0, r8
_080844D8:
	subs r0, #0x10
	ldr r3, [sp, #4]
	adds r4, r3, r0
	ldrh r0, [r7]
	adds r0, #0x1f
	str r0, [sp]
	movs r0, #2
	ldr r1, [sp, #0x10]
	adds r2, r4, #0
	ldr r3, _08084568 @ =0x08BFF780
	bl sub_08006884
	ldrh r0, [r7]
	adds r0, #0x1f
	str r0, [sp]
	movs r0, #2
	mov r2, sb
	adds r1, r2, r6
	adds r2, r4, #0
	ldr r3, _0808457C @ =0x08BFF7D0
	bl sub_08006884
	subs r5, #1
	cmp r5, #0
	bge _080844CE
_0808450A:
	ldr r3, _08084574 @ =0x08BFF760
	ldr r4, _08084580 @ =0x0203E6CC
	adds r4, #0x40
	ldrh r0, [r4]
	adds r0, #0x3e
	str r0, [sp]
	movs r0, #2
	ldr r1, [sp, #0x10]
	ldr r2, [sp, #0x14]
	bl sub_08006884
	mov r3, sb
	adds r5, r3, r6
	ldr r3, _08084584 @ =0x08BFF7D8
	ldrh r0, [r4]
	adds r0, #0x3e
	str r0, [sp]
	movs r0, #2
	adds r1, r5, #0
	ldr r2, [sp, #0x14]
	bl sub_08006884
	ldr r3, _08084578 @ =0x08BFF7E0
	ldrh r0, [r4]
	adds r0, #0x3e
	str r0, [sp]
	movs r0, #2
	ldr r1, [sp, #0x10]
	ldr r2, [sp, #0x20]
	bl sub_08006884
	ldr r3, _08084588 @ =0x08BFF7E8
	ldrh r0, [r4]
	adds r0, #0x3e
	str r0, [sp]
	movs r0, #2
	adds r1, r5, #0
	ldr r2, [sp, #0x20]
	bl sub_08006884
	b _080845EE
	.align 2, 0
_0808455C: .4byte 0x0203E70C
_08084560: .4byte 0x08BFF7A8
_08084564: .4byte 0x08BFF768
_08084568: .4byte 0x08BFF780
_0808456C: .4byte 0x08BFF798
_08084570: .4byte 0x08BFF7A0
_08084574: .4byte 0x08BFF760
_08084578: .4byte 0x08BFF7E0
_0808457C: .4byte 0x08BFF7D0
_08084580: .4byte 0x0203E6CC
_08084584: .4byte 0x08BFF7D8
_08084588: .4byte 0x08BFF7E8
_0808458C:
	adds r0, r4, #0
	adds r0, #0x1f
	cmp r0, #0
	bge _08084596
	adds r0, #0x1f
_08084596:
	asrs r0, r0, #5
	str r0, [sp, #8]
	bl sub_08083BA8
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	subs r0, #1
	str r0, [sp, #0xc]
	ldr r6, [sp, #8]
	subs r6, #1
	cmp r6, #0
	blt _080845EE
_080845AE:
	ldr r5, [sp, #0xc]
	subs r0, r6, #1
	mov r8, r0
	cmp r5, #0
	blt _080845E8
	lsls r7, r6, #5
	ldr r1, _08084600 @ =0x0203E70C
	mov sl, r1
	lsls r0, r5, #4
	ldr r2, [sp, #4]
	adds r4, r0, r2
_080845C4:
	lsls r0, r6, #2
	mov r3, sl
	ldrh r3, [r3]
	adds r0, r3, r0
	lsls r1, r5, #6
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #2
	mov r2, sb
	adds r1, r2, r7
	adds r2, r4, #0
	ldr r3, _08084604 @ =0x08BFF7A8
	bl sub_08006884
	subs r4, #0x10
	subs r5, #1
	cmp r5, #0
	bge _080845C4
_080845E8:
	mov r6, r8
	cmp r6, #0
	bge _080845AE
_080845EE:
	add sp, #0x24
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08084600: .4byte 0x0203E70C
_08084604: .4byte 0x08BFF7A8

	thumb_func_start sub_08084608
sub_08084608: @ 0x08084608
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0808463C @ =0x08D8B04C
	bl Proc_Find
	adds r2, r4, #0
	adds r2, #0x59
	movs r1, #0
	strb r1, [r2]
	ldrh r2, [r0, #0x30]
	subs r2, #8
	adds r1, r4, #0
	adds r1, #0x50
	strb r2, [r1]
	ldrh r0, [r0, #0x32]
	subs r0, #8
	adds r1, #1
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	adds r1, #1
	bl sub_08084194
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808463C: .4byte 0x08D8B04C

	thumb_func_start sub_08084640
sub_08084640: @ 0x08084640
	push {lr}
	bl sub_08083BA8
	movs r1, #4
	ands r1, r0
	cmp r1, #0
	beq _08084660
	movs r0, #0
	bl sub_08006C30
	movs r1, #0x11
	rsbs r1, r1, #0
	ands r1, r0
	movs r0, #0
	bl sub_08006C14
_08084660:
	pop {r0}
	bx r0

	thumb_func_start sub_08084664
sub_08084664: @ 0x08084664
	push {lr}
	bl sub_08083BA8
	movs r1, #4
	ands r1, r0
	cmp r1, #0
	beq _08084682
	movs r0, #0
	bl sub_08006C30
	movs r1, #0x10
	orrs r1, r0
	movs r0, #0
	bl sub_08006C14
_08084682:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08084688
sub_08084688: @ 0x08084688
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _080846E0 @ =0x0203E6E4
	adds r0, r4, #0
	bl SpriteText_DrawBackground
	adds r0, r4, #0
	adds r0, #8
	bl SpriteText_DrawBackground
	adds r0, r4, #0
	adds r0, #0x10
	bl SpriteText_DrawBackground
	bl sub_08083BA8
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq _080846CC
	bl sub_08083BA8
	movs r1, #0x20
	ands r1, r0
	cmp r1, #0
	bne _080846CC
	adds r0, r4, #0
	adds r0, #0x18
	bl SpriteText_DrawBackground
	adds r0, r4, #0
	adds r0, #0x20
	bl SpriteText_DrawBackground
_080846CC:
	adds r0, r5, #0
	adds r0, #0x58
	movs r1, #0
	strb r1, [r0]
	subs r0, #0x10
	strh r1, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080846E0: .4byte 0x0203E6E4

	thumb_func_start sub_080846E4
sub_080846E4: @ 0x080846E4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x14
	adds r6, r0, #0
	adds r0, #0x4e
	movs r2, #0
	ldrsh r1, [r0, r2]
	mov r8, r1
	ldr r0, _08084718 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0xf3
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08084766
	bl sub_08083BA8
	movs r1, #8
	ands r1, r0
	cmp r1, #0
	bne _08084766
	movs r3, #0x80
	mov r8, r3
	b _08084780
	.align 2, 0
_08084718: .4byte gpKeySt
_0808471C:
	bl sub_08084640
	ldr r0, _0808473C @ =0x08D8AFEC
	bl Proc_Find
	movs r1, #1
	bl Proc_Goto
	adds r0, r6, #0
	movs r1, #1
	bl Proc_Goto
	ldr r0, _08084740 @ =0x08D8B124
	bl sub_08004748
	b _08084A24
	.align 2, 0
_0808473C: .4byte 0x08D8AFEC
_08084740: .4byte 0x08D8B124
_08084744:
	adds r1, r6, #0
	adds r1, #0x58
	movs r0, #0
	strb r0, [r1]
	adds r0, r6, #0
	movs r1, #4
	bl Proc_Goto
	b _08084CD2
_08084756:
	adds r0, r6, #0
	bl Proc_Break
	b _08084CD2
_0808475E:
	adds r0, r6, #0
	bl sub_08084688
	b _08084CD2
_08084766:
	adds r1, r6, #0
	adds r1, #0x4a
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	ble _08084778
	b _08084CD8
_08084778:
	adds r0, r6, #0
	adds r0, #0x4c
	ldrh r0, [r0]
	strh r0, [r1]
_08084780:
	bl sub_08084664
	ldr r0, [r6, #0x30]
	bl SetTextFont
	movs r7, #0
	cmp r7, r8
	blt _08084792
	b _08084CD2
_08084792:
	ldr r0, [r6, #0x2c]
	ldrb r1, [r0]
	adds r2, r0, #0
	cmp r1, #0x80
	bls _0808479E
	b _08084C08
_0808479E:
	lsls r0, r1, #2
	ldr r1, _080847A8 @ =_080847AC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080847A8: .4byte _080847AC
_080847AC: @ jump table
	.4byte _08084ACC @ case 0
	.4byte _08084AD2 @ case 1
	.4byte _08084B4A @ case 2
	.4byte _08084BC4 @ case 3
	.4byte _08084AFA @ case 4
	.4byte _08084B0E @ case 5
	.4byte _08084B22 @ case 6
	.4byte _08084B36 @ case 7
	.4byte _08084C08 @ case 8
	.4byte _08084C08 @ case 9
	.4byte _08084C08 @ case 10
	.4byte _08084C08 @ case 11
	.4byte _08084C08 @ case 12
	.4byte _08084C08 @ case 13
	.4byte _08084C08 @ case 14
	.4byte _08084C08 @ case 15
	.4byte _08084C08 @ case 16
	.4byte _08084C08 @ case 17
	.4byte _08084A5C @ case 18
	.4byte _08084A5C @ case 19
	.4byte _08084A5C @ case 20
	.4byte _08084C08 @ case 21
	.4byte _08084C08 @ case 22
	.4byte _08084C08 @ case 23
	.4byte _080849B0 @ case 24
	.4byte _080849EC @ case 25
	.4byte _08084C08 @ case 26
	.4byte _08084C08 @ case 27
	.4byte _08084C08 @ case 28
	.4byte _08084C08 @ case 29
	.4byte _08084C08 @ case 30
	.4byte _08084C08 @ case 31
	.4byte _08084C08 @ case 32
	.4byte _08084C08 @ case 33
	.4byte _08084C08 @ case 34
	.4byte _08084C08 @ case 35
	.4byte _08084C08 @ case 36
	.4byte _08084C08 @ case 37
	.4byte _08084C08 @ case 38
	.4byte _08084C08 @ case 39
	.4byte _08084C08 @ case 40
	.4byte _08084C08 @ case 41
	.4byte _08084C08 @ case 42
	.4byte _08084C08 @ case 43
	.4byte _08084C08 @ case 44
	.4byte _08084C08 @ case 45
	.4byte _08084C08 @ case 46
	.4byte _08084C08 @ case 47
	.4byte _08084C08 @ case 48
	.4byte _08084C08 @ case 49
	.4byte _08084C08 @ case 50
	.4byte _08084C08 @ case 51
	.4byte _08084C08 @ case 52
	.4byte _08084C08 @ case 53
	.4byte _08084C08 @ case 54
	.4byte _08084C08 @ case 55
	.4byte _08084C08 @ case 56
	.4byte _08084C08 @ case 57
	.4byte _08084C08 @ case 58
	.4byte _08084C08 @ case 59
	.4byte _08084C08 @ case 60
	.4byte _08084C08 @ case 61
	.4byte _08084C08 @ case 62
	.4byte _08084C08 @ case 63
	.4byte _08084C08 @ case 64
	.4byte _08084C08 @ case 65
	.4byte _08084C08 @ case 66
	.4byte _08084C08 @ case 67
	.4byte _08084C08 @ case 68
	.4byte _08084C08 @ case 69
	.4byte _08084C08 @ case 70
	.4byte _08084C08 @ case 71
	.4byte _08084C08 @ case 72
	.4byte _08084C08 @ case 73
	.4byte _08084C08 @ case 74
	.4byte _08084C08 @ case 75
	.4byte _08084C08 @ case 76
	.4byte _08084C08 @ case 77
	.4byte _08084C08 @ case 78
	.4byte _08084C08 @ case 79
	.4byte _08084C08 @ case 80
	.4byte _08084C08 @ case 81
	.4byte _08084C08 @ case 82
	.4byte _08084C08 @ case 83
	.4byte _08084C08 @ case 84
	.4byte _08084C08 @ case 85
	.4byte _08084C08 @ case 86
	.4byte _08084C08 @ case 87
	.4byte _08084C08 @ case 88
	.4byte _08084C08 @ case 89
	.4byte _08084C08 @ case 90
	.4byte _08084C08 @ case 91
	.4byte _08084C08 @ case 92
	.4byte _08084C08 @ case 93
	.4byte _08084C08 @ case 94
	.4byte _08084C08 @ case 95
	.4byte _08084C08 @ case 96
	.4byte _08084C08 @ case 97
	.4byte _08084C08 @ case 98
	.4byte _08084C08 @ case 99
	.4byte _08084C08 @ case 100
	.4byte _08084C08 @ case 101
	.4byte _08084C08 @ case 102
	.4byte _08084C08 @ case 103
	.4byte _08084C08 @ case 104
	.4byte _08084C08 @ case 105
	.4byte _08084C08 @ case 106
	.4byte _08084C08 @ case 107
	.4byte _08084C08 @ case 108
	.4byte _08084C08 @ case 109
	.4byte _08084C08 @ case 110
	.4byte _08084C08 @ case 111
	.4byte _08084C08 @ case 112
	.4byte _08084C08 @ case 113
	.4byte _08084C08 @ case 114
	.4byte _08084C08 @ case 115
	.4byte _08084C08 @ case 116
	.4byte _08084C08 @ case 117
	.4byte _08084C08 @ case 118
	.4byte _08084C08 @ case 119
	.4byte _08084C08 @ case 120
	.4byte _08084C08 @ case 121
	.4byte _08084C08 @ case 122
	.4byte _08084C08 @ case 123
	.4byte _08084C08 @ case 124
	.4byte _08084C08 @ case 125
	.4byte _08084C08 @ case 126
	.4byte _08084C08 @ case 127
	.4byte _08084A34 @ case 128
_080849B0:
	bl sub_08084640
	ldr r0, _080849E4 @ =0x08D8B04C
	bl Proc_Find
	adds r3, r0, #0
	ldr r0, _080849E8 @ =0x08D8AFE4
	adds r1, r6, #0
	adds r1, #0x48
	movs r5, #0
	ldrsh r4, [r1, r5]
	lsls r2, r4, #2
	subs r1, #0x14
	adds r1, r1, r2
	ldr r1, [r1]
	movs r5, #0x3c
	ldrsh r2, [r3, r5]
	movs r5, #0x3e
	ldrsh r3, [r3, r5]
	lsls r4, r4, #4
	adds r3, r3, r4
	movs r4, #6
	str r4, [sp]
	movs r4, #1
	b _08084A1C
	.align 2, 0
_080849E4: .4byte 0x08D8B04C
_080849E8: .4byte 0x08D8AFE4
_080849EC:
	bl sub_08084640
	ldr r0, _08084A2C @ =0x08D8B04C
	bl Proc_Find
	adds r3, r0, #0
	ldr r0, _08084A30 @ =0x08D8AFE4
	adds r1, r6, #0
	adds r1, #0x48
	movs r2, #0
	ldrsh r4, [r1, r2]
	lsls r2, r4, #2
	subs r1, #0x14
	adds r1, r1, r2
	ldr r1, [r1]
	movs r5, #0x3c
	ldrsh r2, [r3, r5]
	movs r5, #0x3e
	ldrsh r3, [r3, r5]
	lsls r4, r4, #4
	adds r3, r3, r4
	movs r4, #6
	str r4, [sp]
	movs r4, #2
_08084A1C:
	str r4, [sp, #4]
	str r6, [sp, #8]
	bl sub_080894EC
_08084A24:
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	b _08084CD2
	.align 2, 0
_08084A2C: .4byte 0x08D8B04C
_08084A30: .4byte 0x08D8AFE4
_08084A34:
	adds r0, r2, #1
	str r0, [r6, #0x2c]
	ldrb r0, [r2, #1]
	cmp r0, #0x21
	bne _08084A56
	adds r2, r6, #0
	adds r2, #0x59
	ldrb r0, [r2]
	adds r0, #1
	movs r1, #1
	ands r0, r1
	strb r0, [r2]
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	subs r7, #1
	b _08084CCA
_08084A56:
	cmp r0, #4
	bne _08084A5C
	b _0808471C
_08084A5C:
	ldr r0, _08084AC8 @ =0x08D8B04C
	bl Proc_Find
	adds r4, r0, #0
	bl sub_08084640
	ldr r0, [r6, #0x2c]
	adds r1, r0, #1
	str r1, [r6, #0x2c]
	ldrb r0, [r0, #1]
	cmp r0, #1
	bne _08084A78
	adds r0, r1, #1
	str r0, [r6, #0x2c]
_08084A78:
	cmp r4, #0
	bne _08084A7E
	b _08084CD2
_08084A7E:
	adds r0, r6, #0
	bl sub_08084688
	ldr r0, [r6, #0x2c]
	add r2, sp, #0x10
	add r1, sp, #0xc
	bl sub_080840D8
	ldr r0, [sp, #0xc]
	adds r1, r6, #0
	adds r1, #0x56
	movs r2, #0
	strb r0, [r1]
	ldr r0, [sp, #0x10]
	adds r1, #1
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x44
	ldrh r1, [r0]
	adds r0, r6, #0
	adds r0, #0x54
	strb r1, [r0]
	adds r0, r4, #0
	adds r0, #0x46
	ldrh r0, [r0]
	adds r1, r6, #0
	adds r1, #0x55
	strb r0, [r1]
	adds r0, r6, #0
	adds r0, #0x58
	strb r2, [r0]
	adds r0, r6, #0
	movs r1, #6
	bl Proc_Goto
	b _08084CD2
	.align 2, 0
_08084AC8: .4byte 0x08D8B04C
_08084ACC:
	bl sub_08084640
	b _08084B66
_08084AD2:
	bl sub_08084640
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	adds r0, r6, #0
	adds r0, #0x55
	ldrb r1, [r0]
	adds r2, r6, #0
	adds r2, #0x48
	movs r3, #0
	ldrsh r0, [r2, r3]
	adds r0, #1
	cmp r1, r0
	bne _08084AF2
	b _08084744
_08084AF2:
	ldrh r0, [r2]
	adds r0, #1
	strh r0, [r2]
	b _08084CCA
_08084AFA:
	bl sub_08084640
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	adds r1, r6, #0
	adds r1, #0x4a
	movs r0, #8
	strh r0, [r1]
	b _08084CD2
_08084B0E:
	bl sub_08084640
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	adds r1, r6, #0
	adds r1, #0x4a
	movs r0, #0x10
	strh r0, [r1]
	b _08084CD2
_08084B22:
	bl sub_08084640
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	adds r1, r6, #0
	adds r1, #0x4a
	movs r0, #0x20
	strh r0, [r1]
	b _08084CD2
_08084B36:
	bl sub_08084640
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	adds r1, r6, #0
	adds r1, #0x4a
	movs r0, #0x40
	strh r0, [r1]
	b _08084CD2
_08084B4A:
	bl sub_08084640
	ldr r0, [r6, #0x2c]
	adds r1, r0, #1
	str r1, [r6, #0x2c]
	ldrb r0, [r0, #1]
	cmp r0, #1
	bne _08084B5E
	adds r0, r1, #1
	str r0, [r6, #0x2c]
_08084B5E:
	ldr r0, [r6, #0x2c]
	ldrb r0, [r0]
	cmp r0, #0
	bne _08084B98
_08084B66:
	bl sub_08083BA8
	movs r1, #2
	ands r1, r0
	cmp r1, #0
	bne _08084B74
	b _08084756
_08084B74:
	ldr r0, _08084B90 @ =0x08D8AFEC
	bl Proc_Find
	movs r1, #1
	bl Proc_Goto
	adds r0, r6, #0
	movs r1, #1
	bl Proc_Goto
	ldr r0, _08084B94 @ =0x08D8B124
	bl sub_08004748
	b _08084CD2
	.align 2, 0
_08084B90: .4byte 0x08D8AFEC
_08084B94: .4byte 0x08D8B124
_08084B98:
	bl sub_08083BA8
	movs r1, #0x10
	ands r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	cmp r1, #0
	beq _08084BAA
	b _0808475E
_08084BAA:
	ldr r0, [r6, #0x2c]
	ldrb r0, [r0]
	cmp r0, #0
	bne _08084BB4
	b _08084CD2
_08084BB4:
	adds r0, r6, #0
	adds r0, #0x58
	strb r1, [r0]
	adds r0, r6, #0
	movs r1, #5
	bl Proc_Goto
	b _08084CD2
_08084BC4:
	bl sub_08084640
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	ldr r0, _08084C04 @ =0x08D8B04C
	bl Proc_Find
	movs r5, #0x3c
	ldrsh r1, [r0, r5]
	adds r4, r6, #0
	adds r4, #0x52
	ldrb r2, [r4]
	adds r1, r2, r1
	movs r3, #0x3e
	ldrsh r2, [r0, r3]
	adds r0, r6, #0
	adds r0, #0x48
	movs r5, #0
	ldrsh r0, [r0, r5]
	lsls r0, r0, #4
	adds r2, r2, r0
	adds r2, #8
	adds r0, r6, #0
	bl sub_0800914C
	ldr r0, [r6, #0x2c]
	adds r1, r4, #0
	bl sub_08084194
	b _08084CD2
	.align 2, 0
_08084C04: .4byte 0x08D8B04C
_08084C08:
	bl sub_08083BA8
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _08084C2E
	adds r5, r6, #0
	adds r5, #0x48
	movs r1, #0
	ldrsh r0, [r5, r1]
	lsls r0, r0, #2
	adds r4, r6, #0
	adds r4, #0x34
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #1
	bl Text_SetColor
	b _08084C6A
_08084C2E:
	adds r0, r6, #0
	adds r0, #0x59
	ldrb r0, [r0]
	cmp r0, #0
	beq _08084C52
	adds r5, r6, #0
	adds r5, #0x48
	movs r2, #0
	ldrsh r0, [r5, r2]
	lsls r0, r0, #2
	adds r4, r6, #0
	adds r4, #0x34
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0xa
	bl Text_SetColor
	b _08084C6A
_08084C52:
	adds r5, r6, #0
	adds r5, #0x48
	movs r3, #0
	ldrsh r0, [r5, r3]
	lsls r0, r0, #2
	adds r4, r6, #0
	adds r4, #0x34
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #6
	bl Text_SetColor
_08084C6A:
	movs r1, #0
	ldrsh r0, [r5, r1]
	lsls r0, r0, #2
	adds r0, r4, r0
	ldr r0, [r0]
	ldr r1, [r6, #0x2c]
	bl Text_DrawCharacter
	str r0, [r6, #0x2c]
	bl GetTextPrintDelay
	adds r4, r0, #0
	cmp r4, #1
	bne _08084C90
	bl GetGameTime
	ands r0, r4
	cmp r0, #0
	beq _08084CCA
_08084C90:
	bl sub_08083BA8
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq _08084CB8
	ldr r0, _08084CB0 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08084CCA
	ldr r0, _08084CB4 @ =0x000002E5
	bl m4aSongNumStart
	b _08084CCA
	.align 2, 0
_08084CB0: .4byte gPlaySt
_08084CB4: .4byte 0x000002E5
_08084CB8:
	ldr r0, _08084CE4 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08084CCA
	ldr r0, _08084CE8 @ =0x0000038E
	bl m4aSongNumStart
_08084CCA:
	adds r7, #1
	cmp r7, r8
	bge _08084CD2
	b _08084792
_08084CD2:
	movs r0, #0
	bl SetTextFont
_08084CD8:
	add sp, #0x14
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08084CE4: .4byte gPlaySt
_08084CE8: .4byte 0x0000038E

	thumb_func_start sub_08084CEC
sub_08084CEC: @ 0x08084CEC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08084D14 @ =0x08D8B124
	bl Proc_Find
	cmp r0, #0
	beq _08084D0E
	ldr r0, _08084D18 @ =0x08D8AFEC
	bl Proc_Find
	movs r1, #0
	bl Proc_Goto
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
_08084D0E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08084D14: .4byte 0x08D8B124
_08084D18: .4byte 0x08D8AFEC

	thumb_func_start sub_08084D1C
sub_08084D1C: @ 0x08084D1C
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x54
	ldrb r0, [r0]
	adds r0, #1
	adds r1, r4, #0
	adds r1, #0x55
	ldrb r1, [r1]
	bl sub_08083BB4
	adds r1, r4, #0
	adds r1, #0x58
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x10
	bne _08084D5C
	adds r0, r4, #0
	adds r0, #0x48
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #3
	ldr r1, _08084D64 @ =0x0203E6E4
	adds r0, r0, r1
	movs r1, #0
	bl Text_SetCursor
	adds r0, r4, #0
	bl Proc_Break
_08084D5C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08084D64: .4byte 0x0203E6E4

	thumb_func_start sub_08084D68
sub_08084D68: @ 0x08084D68
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x48
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _08084D7E
	adds r0, r4, #0
	bl Proc_Break
	b _08084D86
_08084D7E:
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
_08084D86:
	adds r1, r4, #0
	adds r1, #0x48
	ldrh r2, [r1]
	movs r3, #0
	ldrsh r0, [r1, r3]
	cmp r0, #0
	beq _08084D98
	subs r0, r2, #1
	strh r0, [r1]
_08084D98:
	adds r1, r4, #0
	adds r1, #0x58
	movs r0, #0
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08084DA8
sub_08084DA8: @ 0x08084DA8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08084DD0 @ =0x08D8AFEC
	bl Proc_Find
	movs r1, #3
	bl Proc_Goto
	adds r0, r4, #0
	bl Proc_Break
	movs r0, #0
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08084DD0: .4byte 0x08D8AFEC

	thumb_func_start sub_08084DD4
sub_08084DD4: @ 0x08084DD4
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, _08084E64 @ =0x08D8B04C
	bl Proc_Find
	adds r6, r0, #0
	adds r5, r4, #0
	adds r5, #0x58
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	cmp r6, #0
	beq _08084E2C
	adds r0, r4, #0
	adds r0, #0x54
	ldrb r3, [r5]
	movs r2, #2
	subs r2, r2, r3
	ldrb r0, [r0]
	adds r1, r0, #0
	muls r1, r2, r1
	adds r0, r4, #0
	adds r0, #0x56
	ldrb r0, [r0]
	muls r0, r3, r0
	adds r1, r1, r0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	adds r0, r4, #0
	adds r0, #0x55
	ldrb r0, [r0]
	muls r2, r0, r2
	adds r0, r4, #0
	adds r0, #0x57
	ldrb r0, [r0]
	muls r0, r3, r0
	adds r2, r2, r0
	lsrs r0, r2, #0x1f
	adds r2, r2, r0
	asrs r2, r2, #1
	adds r0, r6, #0
	bl sub_08083E34
_08084E2C:
	ldrb r5, [r5]
	cmp r5, #2
	bne _08084E5C
	adds r0, r4, #0
	adds r0, #0x56
	ldrb r0, [r0]
	lsrs r0, r0, #3
	adds r1, r4, #0
	adds r1, #0x54
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x57
	ldrb r0, [r0]
	lsrs r0, r0, #4
	adds r1, r0, #0
	cmp r0, #5
	bls _08084E50
	movs r1, #5
_08084E50:
	adds r0, r4, #0
	adds r0, #0x55
	strb r1, [r0]
	adds r0, r4, #0
	bl Proc_Break
_08084E5C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08084E64: .4byte 0x08D8B04C

	thumb_func_start sub_08084E68
sub_08084E68: @ 0x08084E68
	push {lr}
	ldr r0, _08084E80 @ =0x08D8AFEC
	bl Proc_Find
	cmp r0, #0
	beq _08084E84
	adds r0, #0x38
	ldrb r0, [r0]
	cmp r0, #0
	bne _08084E84
	movs r0, #0
	b _08084E86
	.align 2, 0
_08084E80: .4byte 0x08D8AFEC
_08084E84:
	movs r0, #1
_08084E86:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08084E8C
sub_08084E8C: @ 0x08084E8C
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _08084EFC @ =0x0203E6CC
	adds r0, r4, #0
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	movs r0, #1
	bl SetTextFontGlyphs
	bl sub_08083BA8
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	bne _08084F00
	adds r0, r4, #0
	adds r0, #0x18
	movs r1, #6
	bl Text_SetColor
	adds r0, r4, #0
	adds r0, #0x20
	movs r1, #6
	bl Text_SetColor
	adds r0, r4, #0
	adds r0, #0x28
	movs r1, #6
	bl Text_SetColor
	bl sub_08083BA8
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq _08084F1E
	bl sub_08083BA8
	movs r1, #0x20
	ands r1, r0
	cmp r1, #0
	bne _08084F1E
	adds r0, r4, #0
	adds r0, #0x30
	movs r1, #6
	bl Text_SetColor
	adds r0, r4, #0
	adds r0, #0x38
	movs r1, #6
	bl Text_SetColor
	b _08084F1E
	.align 2, 0
_08084EFC: .4byte 0x0203E6CC
_08084F00:
	movs r4, #0
	b _08084F12
_08084F04:
	lsls r0, r4, #3
	ldr r1, _08084F9C @ =0x0203E6E4
	adds r0, r0, r1
	movs r1, #0
	bl Text_SetColor
	adds r4, #1
_08084F12:
	bl sub_08083BA8
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	cmp r4, r0
	blt _08084F04
_08084F1E:
	movs r0, #0
	bl SetTextFont
	ldr r4, _08084FA0 @ =0x08D8B06C
	adds r0, r4, #0
	bl sub_08004748
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Start
	adds r4, r0, #0
	ldr r1, _08084FA4 @ =0x0203E6CC
	str r1, [r4, #0x30]
	adds r0, r1, #0
	adds r0, #0x18
	str r0, [r4, #0x34]
	adds r0, #8
	str r0, [r4, #0x38]
	adds r0, #8
	str r0, [r4, #0x3c]
	adds r0, #8
	str r0, [r4, #0x40]
	adds r0, #8
	str r0, [r4, #0x44]
	adds r1, r4, #0
	adds r1, #0x48
	movs r0, #0
	strh r0, [r1]
	ldr r0, [r5, #0x5c]
	bl DecodeMsg
	bl sub_08013374
	str r0, [r4, #0x2c]
	ldr r1, [r5, #0x2c]
	adds r0, r4, #0
	adds r0, #0x54
	strb r1, [r0]
	ldr r0, [r5, #0x30]
	adds r1, r4, #0
	adds r1, #0x55
	strb r0, [r1]
	bl sub_08084E68
	lsls r0, r0, #0x18
	asrs r1, r0, #0x18
	cmp r1, #0
	beq _08084FA8
	bl GetTextPrintDelay
	adds r1, r4, #0
	adds r1, #0x4c
	strh r0, [r1]
	lsls r0, r0, #0x10
	movs r1, #0x80
	cmp r0, #0
	beq _08084F94
	movs r1, #1
_08084F94:
	adds r0, r4, #0
	adds r0, #0x4e
	strh r1, [r0]
	b _08084FB6
	.align 2, 0
_08084F9C: .4byte 0x0203E6E4
_08084FA0: .4byte 0x08D8B06C
_08084FA4: .4byte 0x0203E6CC
_08084FA8:
	adds r0, r4, #0
	adds r0, #0x4c
	strh r1, [r0]
	adds r1, r4, #0
	adds r1, #0x4e
	movs r0, #0x80
	strh r0, [r1]
_08084FB6:
	adds r1, r4, #0
	adds r1, #0x4a
	movs r0, #0
	strh r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08084FC4
sub_08084FC4: @ 0x08084FC4
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	ldr r0, _08084FF8 @ =0x08D8B10C
	movs r1, #3
	bl Proc_Start
	adds r1, r0, #0
	str r4, [r1, #0x5c]
	cmp r5, #0
	bge _08084FDE
	adds r5, #7
_08084FDE:
	asrs r0, r5, #3
	str r0, [r1, #0x2c]
	adds r0, r6, #0
	cmp r6, #0
	bge _08084FEA
	adds r0, #0xf
_08084FEA:
	asrs r0, r0, #4
	cmp r0, #5
	bgt _08084FFC
	cmp r0, #0
	bge _08084FFE
	movs r0, #0
	b _08084FFE
	.align 2, 0
_08084FF8: .4byte 0x08D8B10C
_08084FFC:
	movs r0, #5
_08084FFE:
	str r0, [r1, #0x30]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08085008
sub_08085008: @ 0x08085008
	push {r4, lr}
	ldr r4, _08085060 @ =0x0203E6CC
	adds r0, r4, #0
	bl SetTextFont
	bl sub_08083BA8
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	bne _08085064
	adds r0, r4, #0
	adds r0, #0x18
	bl SpriteText_DrawBackground
	adds r0, r4, #0
	adds r0, #0x20
	bl SpriteText_DrawBackground
	adds r0, r4, #0
	adds r0, #0x28
	bl SpriteText_DrawBackground
	bl sub_08083BA8
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq _08085082
	bl sub_08083BA8
	movs r1, #0x20
	ands r1, r0
	cmp r1, #0
	bne _08085082
	adds r0, r4, #0
	adds r0, #0x30
	bl SpriteText_DrawBackground
	adds r0, r4, #0
	adds r0, #0x38
	bl SpriteText_DrawBackground
	b _08085082
	.align 2, 0
_08085060: .4byte 0x0203E6CC
_08085064:
	movs r4, #0
	b _08085076
_08085068:
	lsls r0, r4, #3
	ldr r1, _0808509C @ =0x0203E6E4
	adds r0, r0, r1
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	adds r4, #1
_08085076:
	bl sub_08083BA8
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	cmp r4, r0
	blt _08085068
_08085082:
	ldr r0, _080850A0 @ =0x08D8B06C
	bl sub_08004748
	ldr r0, _080850A4 @ =0x08D8B10C
	bl sub_08004748
	movs r0, #0
	bl SetTextFont
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808509C: .4byte 0x0203E6E4
_080850A0: .4byte 0x08D8B06C
_080850A4: .4byte 0x08D8B10C

	thumb_func_start sub_080850A8
sub_080850A8: @ 0x080850A8
	push {lr}
	ldr r0, _080850B8 @ =0x08D8B124
	movs r1, #0
	bl Proc_Start
	pop {r0}
	bx r0
	.align 2, 0
_080850B8: .4byte 0x08D8B124

	thumb_func_start sub_080850BC
sub_080850BC: @ 0x080850BC
	push {lr}
	ldr r0, _080850CC @ =0x08D8B124
	bl Proc_Find
	cmp r0, #0
	bne _080850D0
	movs r0, #0
	b _080850D2
	.align 2, 0
_080850CC: .4byte 0x08D8B124
_080850D0:
	movs r0, #1
_080850D2:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080850D8
sub_080850D8: @ 0x080850D8
	push {lr}
	ldr r0, _080850FC @ =0x08D8AFEC
	bl sub_08004748
	ldr r0, _08085100 @ =0x08D8B124
	bl sub_08004748
	ldr r0, _08085104 @ =0x08D8B04C
	bl sub_08004748
	ldr r0, _08085108 @ =0x08D8B06C
	bl sub_08004748
	ldr r0, _0808510C @ =0x08D8B10C
	bl sub_08004748
	pop {r0}
	bx r0
	.align 2, 0
_080850FC: .4byte 0x08D8AFEC
_08085100: .4byte 0x08D8B124
_08085104: .4byte 0x08D8B04C
_08085108: .4byte 0x08D8B06C
_0808510C: .4byte 0x08D8B10C

	thumb_func_start sub_08085110
sub_08085110: @ 0x08085110
	cmp r0, #0
	bge _08085120
	cmp r1, #0
	bge _0808511C
	movs r0, #0
	b _0808512A
_0808511C:
	movs r0, #1
	b _0808512A
_08085120:
	cmp r1, #0
	blt _08085128
	movs r0, #3
	b _0808512A
_08085128:
	movs r0, #2
_0808512A:
	bx lr

	thumb_func_start sub_0808512C
sub_0808512C: @ 0x0808512C
	push {r4, lr}
	ldr r2, _08085158 @ =gBmSt
	movs r0, #0x14
	ldrsh r3, [r2, r0]
	lsls r3, r3, #4
	movs r1, #0xc
	ldrsh r0, [r2, r1]
	subs r0, #8
	subs r3, r3, r0
	movs r4, #0x16
	ldrsh r1, [r2, r4]
	lsls r1, r1, #4
	movs r4, #0xe
	ldrsh r0, [r2, r4]
	subs r0, #8
	subs r1, r1, r0
	cmp r3, #0x78
	bgt _0808515C
	cmp r1, #0x50
	bgt _08085164
	movs r0, #0
	b _0808516A
	.align 2, 0
_08085158: .4byte gBmSt
_0808515C:
	cmp r1, #0x50
	bgt _08085168
	movs r0, #1
	b _0808516A
_08085164:
	movs r0, #2
	b _0808516A
_08085168:
	movs r0, #3
_0808516A:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_08085170
sub_08085170: @ 0x08085170
	adds r3, r0, #0
	lsls r1, r1, #0x10
	lsrs r0, r1, #0x10
	asrs r1, r1, #0x10
	cmp r1, #5
	ble _0808517E
	movs r0, #5
_0808517E:
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r0, r0, r2
	strh r0, [r3]
	bx lr

	thumb_func_start sub_08085188
sub_08085188: @ 0x08085188
	push {r4, r5, lr}
	adds r3, r0, #0
	lsls r1, r1, #0x10
	asrs r4, r1, #0x13
	movs r0, #0xe0
	lsls r0, r0, #0xb
	ands r0, r1
	asrs r0, r0, #0x10
	movs r1, #0
	adds r5, r2, #0
	adds r5, #0xe
	adds r2, #6
	adds r0, r2, r0
_080851A2:
	cmp r1, r4
	bge _080851AA
	strh r5, [r3]
	b _080851B4
_080851AA:
	cmp r1, r4
	bne _080851B2
	strh r0, [r3]
	b _080851B4
_080851B2:
	strh r2, [r3]
_080851B4:
	adds r3, #2
	adds r1, #1
	cmp r1, #3
	ble _080851A2
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080851C4
sub_080851C4: @ 0x080851C4
	push {r4, lr}
	adds r4, r0, #0
	lsls r1, r1, #0x10
	lsrs r3, r1, #0x10
	asrs r1, r1, #0x10
	cmp r1, #4
	ble _080851D4
	movs r3, #5
_080851D4:
	lsls r0, r3, #0x10
	cmp r0, #0
	bge _080851DC
	movs r3, #0
_080851DC:
	adds r1, r2, #0
	adds r1, #0xf
	lsls r0, r3, #0x10
	asrs r0, r0, #0x10
	adds r0, r0, r1
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080851F0
sub_080851F0: @ 0x080851F0
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	adds r0, r6, #0
	bl GetUnitCurrentHp
	movs r1, #0x2a
	adds r4, r0, #0
	muls r4, r1, r4
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	adds r0, r6, #0
	bl GetUnitMaxHp
	adds r1, r0, #0
	adds r0, r4, #0
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	adds r0, r5, #0
	adds r1, r4, #0
	mov r2, r8
	bl sub_08085170
	adds r0, r5, #2
	subs r1, r4, #5
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	mov r2, r8
	bl sub_08085188
	adds r5, #0xa
	subs r4, #0x25
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	adds r0, r5, #0
	adds r1, r4, #0
	mov r2, r8
	bl sub_080851C4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_08085254
sub_08085254: @ 0x08085254
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	ldr r1, _080852A0 @ =0x08D8B134
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r1, r0, r1
	movs r0, #3
	ldrsb r0, [r1, r0]
	movs r4, #0
	cmp r0, #0
	blt _08085276
	movs r4, #0xe
_08085276:
	movs r0, #2
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bge _080852AC
	lsls r5, r4, #5
	lsls r4, r4, #6
	ldr r0, _080852A4 @ =gBg0Tm
	adds r0, r4, r0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, _080852A8 @ =gBg1Tm
	adds r0, r4, r0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	b _080852CC
	.align 2, 0
_080852A0: .4byte 0x08D8B134
_080852A4: .4byte gBg0Tm
_080852A8: .4byte gBg1Tm
_080852AC:
	lsls r5, r4, #5
	lsls r4, r4, #6
	ldr r0, _08085324 @ =0x02022C84
	adds r0, r4, r0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, _08085328 @ =0x02023484
	adds r0, r4, r0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
_080852CC:
	mov r8, r5
	adds r6, r4, #0
	movs r0, #3
	bl EnableBgSync
	ldr r1, _0808532C @ =0x08D8B190
	ldr r0, [r7, #0x58]
	adds r0, r0, r1
	movs r5, #0
	ldrsb r5, [r0, r5]
	ldr r1, _08085330 @ =0x08D8B134
	adds r0, r7, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0, #2]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _08085344
	movs r4, #0xc
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r0, _08085334 @ =gBmFrameTmap0
	adds r0, r4, r0
	ldr r1, _08085338 @ =gBg0Tm
	adds r1, r6, r1
	adds r2, r5, #0
	movs r3, #6
	bl TmCopyRect_thm
	ldr r0, _0808533C @ =0x0200373C
	adds r4, r4, r0
	ldr r1, _08085340 @ =gBg1Tm
	adds r1, r6, r1
	adds r0, r4, #0
	adds r2, r5, #0
	movs r3, #6
	bl TmCopyRect_thm
	b _0808536A
	.align 2, 0
_08085324: .4byte 0x02022C84
_08085328: .4byte 0x02023484
_0808532C: .4byte 0x08D8B190
_08085330: .4byte 0x08D8B134
_08085334: .4byte gBmFrameTmap0
_08085338: .4byte gBg0Tm
_0808533C: .4byte 0x0200373C
_08085340: .4byte gBg1Tm
_08085344:
	ldr r0, _080853B4 @ =gBmFrameTmap0
	mov r4, r8
	adds r4, #0x1e
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r1, _080853B8 @ =gBg0Tm
	adds r1, r4, r1
	adds r2, r5, #0
	movs r3, #6
	bl TmCopyRect_thm
	ldr r0, _080853BC @ =0x0200373C
	ldr r1, _080853C0 @ =gBg1Tm
	adds r4, r4, r1
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #6
	bl TmCopyRect_thm
_0808536A:
	ldr r0, [r7, #0x58]
	adds r0, #1
	str r0, [r7, #0x58]
	cmp r0, #4
	bne _080853A8
	adds r1, r7, #0
	adds r1, #0x55
	movs r0, #0
	strb r0, [r1]
	str r0, [r7, #0x58]
	adds r0, r7, #0
	bl Proc_Break
	ldr r2, _080853C4 @ =gBmSt
	movs r1, #0x16
	ldrsh r0, [r2, r1]
	ldr r1, _080853C8 @ =gBmMapUnit
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r3, #0x14
	ldrsh r1, [r2, r3]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl GetUnit
	adds r1, r0, #0
	adds r0, r7, #0
	bl sub_080859B0
_080853A8:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080853B4: .4byte gBmFrameTmap0
_080853B8: .4byte gBg0Tm
_080853BC: .4byte 0x0200373C
_080853C0: .4byte gBg1Tm
_080853C4: .4byte gBmSt
_080853C8: .4byte gBmMapUnit

	thumb_func_start sub_080853CC
sub_080853CC: @ 0x080853CC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	ldr r3, _0808542C @ =0x08D8B134
	adds r2, r6, #0
	adds r2, #0x50
	movs r0, #0
	ldrsb r0, [r2, r0]
	lsls r0, r0, #3
	adds r0, r0, r3
	ldrb r0, [r0, #3]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r4, #0
	cmp r0, #0
	blt _080853F0
	movs r4, #0xe
_080853F0:
	adds r1, r6, #0
	adds r1, #0x55
	movs r0, #1
	strb r0, [r1]
	movs r0, #0
	ldrsb r0, [r2, r0]
	lsls r0, r0, #3
	adds r0, r0, r3
	ldrb r0, [r0, #2]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _08085438
	lsls r5, r4, #5
	lsls r4, r4, #6
	ldr r0, _08085430 @ =gBg0Tm
	adds r0, r4, r0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, _08085434 @ =gBg1Tm
	adds r0, r4, r0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	b _08085458
	.align 2, 0
_0808542C: .4byte 0x08D8B134
_08085430: .4byte gBg0Tm
_08085434: .4byte gBg1Tm
_08085438:
	lsls r5, r4, #5
	lsls r4, r4, #6
	ldr r0, _080854B0 @ =0x02022C84
	adds r0, r4, r0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, _080854B4 @ =0x02023484
	adds r0, r4, r0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
_08085458:
	mov r8, r5
	adds r7, r4, #0
	movs r0, #3
	bl EnableBgSync
	ldr r1, _080854B8 @ =0x08D8B194
	ldr r0, [r6, #0x58]
	adds r0, r0, r1
	movs r5, #0
	ldrsb r5, [r0, r5]
	ldr r1, _080854BC @ =0x08D8B134
	adds r0, r6, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0, #2]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _080854D0
	movs r4, #0xc
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r0, _080854C0 @ =gBmFrameTmap0
	adds r0, r4, r0
	ldr r1, _080854C4 @ =gBg0Tm
	adds r1, r7, r1
	adds r2, r5, #0
	movs r3, #6
	bl TmCopyRect_thm
	ldr r0, _080854C8 @ =0x0200373C
	adds r4, r4, r0
	ldr r1, _080854CC @ =gBg1Tm
	adds r1, r7, r1
	adds r0, r4, #0
	adds r2, r5, #0
	movs r3, #6
	bl TmCopyRect_thm
	b _080854F6
	.align 2, 0
_080854B0: .4byte 0x02022C84
_080854B4: .4byte 0x02023484
_080854B8: .4byte 0x08D8B194
_080854BC: .4byte 0x08D8B134
_080854C0: .4byte gBmFrameTmap0
_080854C4: .4byte gBg0Tm
_080854C8: .4byte 0x0200373C
_080854CC: .4byte gBg1Tm
_080854D0:
	ldr r0, _08085520 @ =gBmFrameTmap0
	mov r4, r8
	adds r4, #0x1e
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r1, _08085524 @ =gBg0Tm
	adds r1, r4, r1
	adds r2, r5, #0
	movs r3, #6
	bl TmCopyRect_thm
	ldr r0, _08085528 @ =0x0200373C
	ldr r1, _0808552C @ =gBg1Tm
	adds r4, r4, r1
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #6
	bl TmCopyRect_thm
_080854F6:
	ldr r0, [r6, #0x58]
	adds r0, #1
	str r0, [r6, #0x58]
	cmp r0, #3
	bne _08085516
	adds r1, r6, #0
	adds r1, #0x56
	movs r0, #0
	strb r0, [r1]
	str r0, [r6, #0x58]
	adds r1, #1
	movs r0, #0xff
	strb r0, [r1]
	adds r0, r6, #0
	bl Proc_Break
_08085516:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08085520: .4byte gBmFrameTmap0
_08085524: .4byte gBg0Tm
_08085528: .4byte 0x0200373C
_0808552C: .4byte gBg1Tm

	thumb_func_start sub_08085530
sub_08085530: @ 0x08085530
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r1, _08085568 @ =0x08D8B134
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _08085574
	ldr r0, _0808556C @ =0x02022FA0
	movs r1, #6
	movs r2, #7
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, _08085570 @ =0x020237A0
	movs r1, #6
	movs r2, #7
	movs r3, #0
	bl TmFillRect_thm
	b _0808558C
	.align 2, 0
_08085568: .4byte 0x08D8B134
_0808556C: .4byte 0x02022FA0
_08085570: .4byte 0x020237A0
_08085574:
	ldr r0, _080855E0 @ =0x02022FD0
	movs r1, #6
	movs r2, #7
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, _080855E4 @ =0x020237D0
	movs r1, #6
	movs r2, #7
	movs r3, #0
	bl TmFillRect_thm
_0808558C:
	movs r0, #3
	bl EnableBgSync
	ldr r1, _080855E8 @ =0x08D8B197
	ldr r0, [r6, #0x58]
	adds r0, r0, r1
	movs r5, #0
	ldrsb r5, [r0, r5]
	ldr r1, _080855EC @ =0x08D8B134
	adds r0, r6, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _08085600
	movs r4, #0xa3
	lsls r4, r4, #1
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r0, _080855F0 @ =gBmFrameTmap0
	adds r0, r4, r0
	ldr r1, _080855F4 @ =0x02022FA0
	adds r2, r5, #0
	movs r3, #7
	bl TmCopyRect_thm
	ldr r0, _080855F8 @ =0x0200373C
	adds r4, r4, r0
	ldr r1, _080855FC @ =0x020237A0
	adds r0, r4, #0
	adds r2, r5, #0
	movs r3, #7
	bl TmCopyRect_thm
	b _08085626
	.align 2, 0
_080855E0: .4byte 0x02022FD0
_080855E4: .4byte 0x020237D0
_080855E8: .4byte 0x08D8B197
_080855EC: .4byte 0x08D8B134
_080855F0: .4byte gBmFrameTmap0
_080855F4: .4byte 0x02022FA0
_080855F8: .4byte 0x0200373C
_080855FC: .4byte 0x020237A0
_08085600:
	ldr r0, _08085648 @ =0x020034BC
	movs r4, #0xdf
	lsls r4, r4, #1
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r1, _0808564C @ =gBg0Tm
	adds r1, r4, r1
	adds r2, r5, #0
	movs r3, #7
	bl TmCopyRect_thm
	ldr r0, _08085650 @ =0x020039BC
	ldr r1, _08085654 @ =gBg1Tm
	adds r4, r4, r1
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #7
	bl TmCopyRect_thm
_08085626:
	ldr r0, [r6, #0x58]
	adds r0, #1
	str r0, [r6, #0x58]
	cmp r0, #3
	bne _08085640
	movs r0, #0
	str r0, [r6, #0x58]
	adds r1, r6, #0
	adds r1, #0x55
	strb r0, [r1]
	adds r0, r6, #0
	bl Proc_Break
_08085640:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08085648: .4byte 0x020034BC
_0808564C: .4byte gBg0Tm
_08085650: .4byte 0x020039BC
_08085654: .4byte gBg1Tm

	thumb_func_start sub_08085658
sub_08085658: @ 0x08085658
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r1, r6, #0
	adds r1, #0x55
	movs r0, #1
	strb r0, [r1]
	ldr r1, _08085698 @ =0x08D8B134
	adds r0, r6, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _080856A4
	ldr r0, _0808569C @ =0x02022FA0
	movs r1, #6
	movs r2, #7
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, _080856A0 @ =0x020237A0
	movs r1, #6
	movs r2, #7
	movs r3, #0
	bl TmFillRect_thm
	b _080856BC
	.align 2, 0
_08085698: .4byte 0x08D8B134
_0808569C: .4byte 0x02022FA0
_080856A0: .4byte 0x020237A0
_080856A4:
	ldr r0, _08085710 @ =0x02022FD0
	movs r1, #6
	movs r2, #7
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, _08085714 @ =0x020237D0
	movs r1, #6
	movs r2, #7
	movs r3, #0
	bl TmFillRect_thm
_080856BC:
	movs r0, #3
	bl EnableBgSync
	ldr r1, _08085718 @ =0x08D8B19A
	ldr r0, [r6, #0x58]
	adds r0, r0, r1
	movs r5, #0
	ldrsb r5, [r0, r5]
	ldr r1, _0808571C @ =0x08D8B134
	adds r0, r6, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _08085730
	movs r4, #0xa3
	lsls r4, r4, #1
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r0, _08085720 @ =gBmFrameTmap0
	adds r0, r4, r0
	ldr r1, _08085724 @ =0x02022FA0
	adds r2, r5, #0
	movs r3, #7
	bl TmCopyRect_thm
	ldr r0, _08085728 @ =0x0200373C
	adds r4, r4, r0
	ldr r1, _0808572C @ =0x020237A0
	adds r0, r4, #0
	adds r2, r5, #0
	movs r3, #7
	bl TmCopyRect_thm
	b _08085756
	.align 2, 0
_08085710: .4byte 0x02022FD0
_08085714: .4byte 0x020237D0
_08085718: .4byte 0x08D8B19A
_0808571C: .4byte 0x08D8B134
_08085720: .4byte gBmFrameTmap0
_08085724: .4byte 0x02022FA0
_08085728: .4byte 0x0200373C
_0808572C: .4byte 0x020237A0
_08085730:
	ldr r0, _0808577C @ =0x020034BC
	movs r4, #0xdf
	lsls r4, r4, #1
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r1, _08085780 @ =gBg0Tm
	adds r1, r4, r1
	adds r2, r5, #0
	movs r3, #7
	bl TmCopyRect_thm
	ldr r0, _08085784 @ =0x020039BC
	ldr r1, _08085788 @ =gBg1Tm
	adds r4, r4, r1
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #7
	bl TmCopyRect_thm
_08085756:
	ldr r0, [r6, #0x58]
	adds r0, #1
	str r0, [r6, #0x58]
	cmp r0, #3
	bne _08085774
	movs r0, #0
	str r0, [r6, #0x58]
	adds r1, r6, #0
	adds r1, #0x55
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r0, r6, #0
	bl Proc_Break
_08085774:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808577C: .4byte 0x020034BC
_08085780: .4byte gBg0Tm
_08085784: .4byte 0x020039BC
_08085788: .4byte gBg1Tm

	thumb_func_start sub_0808578C
sub_0808578C: @ 0x0808578C
	push {lr}
	ldr r1, _080857D4 @ =0x08D8B134
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r1, r0, r1
	movs r0, #2
	ldrsb r0, [r1, r0]
	movs r2, #0x12
	cmp r0, #0
	bge _080857A8
	movs r2, #0
_080857A8:
	movs r0, #3
	ldrsb r0, [r1, r0]
	movs r1, #0xe
	cmp r0, #0
	bge _080857B4
	movs r1, #0
_080857B4:
	ldr r0, _080857D8 @ =gBmFrameTmap0
	lsls r1, r1, #5
	adds r1, r1, r2
	lsls r1, r1, #1
	ldr r2, _080857DC @ =gBg0Tm
	adds r1, r1, r2
	movs r2, #0xc
	movs r3, #6
	bl TmCopyRect_thm
	movs r0, #3
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
_080857D4: .4byte 0x08D8B134
_080857D8: .4byte gBmFrameTmap0
_080857DC: .4byte gBg0Tm

	thumb_func_start sub_080857E0
sub_080857E0: @ 0x080857E0
	push {lr}
	ldr r1, _08085818 @ =0x08D8B134
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r1, #0x18
	cmp r0, #0
	bge _080857FE
	movs r1, #0
_080857FE:
	ldr r0, _0808581C @ =0x020034BC
	lsls r1, r1, #1
	ldr r2, _08085820 @ =0x02022FA0
	adds r1, r1, r2
	movs r2, #6
	movs r3, #7
	bl TmCopyRect_thm
	movs r0, #3
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
_08085818: .4byte 0x08D8B134
_0808581C: .4byte 0x020034BC
_08085820: .4byte 0x02022FA0

	thumb_func_start sub_08085824
sub_08085824: @ 0x08085824
	push {r4, r5, lr}
	adds r5, r1, #0
	movs r4, #0
	cmp r0, #0x40
	beq _08085850
	cmp r0, #0x40
	bgt _08085838
	cmp r0, #0
	beq _0808583E
	b _08085858
_08085838:
	cmp r0, #0x80
	beq _08085848
	b _08085858
_0808583E:
	ldr r4, _08085844 @ =0x0841C754
	b _0808585C
	.align 2, 0
_08085844: .4byte 0x0841C754
_08085848:
	ldr r4, _0808584C @ =0x0841C774
	b _0808585C
	.align 2, 0
_0808584C: .4byte 0x0841C774
_08085850:
	ldr r4, _08085854 @ =0x0841C794
	b _0808585C
	.align 2, 0
_08085854: .4byte 0x0841C794
_08085858:
	bl nullsub_7
_0808585C:
	lsls r1, r5, #5
	adds r0, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0808586C
sub_0808586C: @ 0x0808586C
	ldr r0, _08085884 @ =gBmSt
	movs r2, #0x14
	ldrsh r1, [r0, r2]
	lsls r1, r1, #4
	movs r2, #0xc
	ldrsh r0, [r0, r2]
	subs r1, r1, r0
	cmp r1, #0x6f
	ble _08085888
	movs r0, #1
	rsbs r0, r0, #0
	b _0808588A
	.align 2, 0
_08085884: .4byte gBmSt
_08085888:
	movs r0, #1
_0808588A:
	bx lr

	thumb_func_start sub_0808588C
sub_0808588C: @ 0x0808588C
	ldr r0, _080858A4 @ =gBmSt
	movs r2, #0x14
	ldrsh r1, [r0, r2]
	lsls r1, r1, #4
	movs r2, #0xc
	ldrsh r0, [r0, r2]
	subs r1, r1, r0
	cmp r1, #0x70
	bgt _080858A8
	movs r0, #1
	b _080858AC
	.align 2, 0
_080858A4: .4byte gBmSt
_080858A8:
	movs r0, #1
	rsbs r0, r0, #0
_080858AC:
	bx lr
	.align 2, 0

	thumb_func_start sub_080858B0
sub_080858B0: @ 0x080858B0
	movs r2, #0x90
	lsls r2, r2, #1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r3, _080858D4 @ =0x00000121
	adds r1, r3, #0
	strh r1, [r0, #2]
	movs r2, #0
	strh r2, [r0, #4]
	adds r3, #0x1d
	adds r1, r3, #0
	strh r1, [r0, #6]
	adds r3, #1
	adds r1, r3, #0
	strh r1, [r0, #8]
	strh r2, [r0, #0xa]
	bx lr
	.align 2, 0
_080858D4: .4byte 0x00000121

	thumb_func_start sub_080858D8
sub_080858D8: @ 0x080858D8
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r4, #0x80
	lsls r4, r4, #1
	cmp r1, #0
	beq _080859A0
	adds r1, #0x30
	ldrb r2, [r1]
	lsls r0, r2, #0x1c
	lsrs r0, r0, #0x1c
	adds r6, r1, #0
	cmp r0, #8
	bhi _08085936
	lsls r0, r0, #2
	ldr r1, _080858FC @ =_08085900
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080858FC: .4byte _08085900
_08085900: @ jump table
	.4byte _080859A0 @ case 0
	.4byte _08085928 @ case 1
	.4byte _08085924 @ case 2
	.4byte _08085930 @ case 3
	.4byte _0808592C @ case 4
	.4byte _08085934 @ case 5
	.4byte _08085934 @ case 6
	.4byte _08085934 @ case 7
	.4byte _08085934 @ case 8
_08085924:
	adds r4, #0x60
	b _08085936
_08085928:
	adds r4, #0x64
	b _08085936
_0808592C:
	adds r4, #0x68
	b _08085936
_08085930:
	adds r4, #0x6c
	b _08085936
_08085934:
	adds r4, #0x70
_08085936:
	ldrb r1, [r6]
	lsls r0, r1, #0x1c
	lsrs r0, r0, #0x1c
	cmp r0, #6
	beq _0808595C
	cmp r0, #6
	bgt _0808594A
	cmp r0, #5
	beq _08085954
	b _08085982
_0808594A:
	cmp r0, #7
	beq _08085964
	cmp r0, #8
	beq _08085978
	b _08085982
_08085954:
	ldr r0, _08085958 @ =0x0841C554
	b _08085966
	.align 2, 0
_08085958: .4byte 0x0841C554
_0808595C:
	ldr r0, _08085960 @ =0x0841C5D4
	b _08085966
	.align 2, 0
_08085960: .4byte 0x0841C5D4
_08085964:
	ldr r0, _08085970 @ =0x0841C654
_08085966:
	ldr r1, _08085974 @ =0x06002E00
	movs r2, #0x20
	bl CpuFastSet
	b _08085982
	.align 2, 0
_08085970: .4byte 0x0841C654
_08085974: .4byte 0x06002E00
_08085978:
	ldr r0, _080859A8 @ =0x0841C6D4
	ldr r1, _080859AC @ =0x06002E00
	movs r2, #0x20
	bl CpuFastSet
_08085982:
	strh r4, [r5]
	adds r4, #1
	strh r4, [r5, #2]
	adds r4, #1
	strh r4, [r5, #4]
	adds r4, #1
	strh r4, [r5, #6]
	movs r0, #0
	strh r0, [r5, #8]
	ldrb r6, [r6]
	lsrs r0, r6, #4
	movs r2, #0x94
	lsls r2, r2, #1
	adds r0, r0, r2
	strh r0, [r5, #0xa]
_080859A0:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080859A8: .4byte 0x0841C6D4
_080859AC: .4byte 0x06002E00

	thumb_func_start sub_080859B0
sub_080859B0: @ 0x080859B0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	adds r4, r1, #0
	adds r0, #0x44
	ldrh r1, [r0]
	movs r0, #0x3f
	ands r0, r1
	cmp r0, #0
	bne _08085A54
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080859DE
	ldr r0, [r6, #0x40]
	adds r1, r4, #0
	bl sub_080858D8
	movs r0, #1
	bl EnableBgSync
	b _08085A54
_080859DE:
	ldr r0, [r6, #0x40]
	adds r1, r4, #0
	bl sub_080858B0
	movs r0, #1
	bl EnableBgSync
	adds r0, r4, #0
	bl GetUnitCurrentHp
	cmp r0, #0x63
	ble _080859FE
	movs r0, #0xff
	bl sub_08004F5C
	b _08085A08
_080859FE:
	adds r0, r4, #0
	bl GetUnitCurrentHp
	bl sub_08004F5C
_08085A08:
	ldr r1, _08085A30 @ =0x02028D3C
	ldrb r0, [r1, #6]
	subs r0, #0x30
	adds r2, r6, #0
	adds r2, #0x51
	strb r0, [r2]
	ldrb r0, [r1, #7]
	subs r0, #0x30
	adds r1, r6, #0
	adds r1, #0x52
	strb r0, [r1]
	adds r0, r4, #0
	bl GetUnitMaxHp
	cmp r0, #0x63
	ble _08085A34
	movs r0, #0xff
	bl sub_08004F5C
	b _08085A3E
	.align 2, 0
_08085A30: .4byte 0x02028D3C
_08085A34:
	adds r0, r4, #0
	bl GetUnitMaxHp
	bl sub_08004F5C
_08085A3E:
	ldr r1, _08085B00 @ =0x02028D3C
	ldrb r0, [r1, #6]
	subs r0, #0x30
	adds r2, r6, #0
	adds r2, #0x53
	strb r0, [r2]
	ldrb r1, [r1, #7]
	subs r1, #0x30
	adds r0, r6, #0
	adds r0, #0x54
	strb r1, [r0]
_08085A54:
	adds r0, r6, #0
	adds r0, #0x55
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _08085AF4
	adds r1, r6, #0
	adds r1, #0x44
	movs r0, #0x40
	ldrh r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _08085A7E
	adds r1, r4, #0
	adds r1, #0x30
	movs r0, #0xf
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _08085AF4
_08085A7E:
	adds r0, r6, #0
	adds r0, #0x46
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r7, r0, #3
	adds r1, r7, #0
	adds r1, #0x10
	adds r0, r6, #0
	adds r0, #0x48
	movs r2, #0
	ldrsh r0, [r0, r2]
	lsls r5, r0, #3
	adds r0, r6, #0
	adds r0, #0x51
	ldrb r4, [r0]
	cmp r4, #0xf0
	beq _08085AB0
	ldr r2, _08085B04 @ =0x08BFF760
	adds r0, r4, #0
	ldr r4, _08085B08 @ =0x000082E0
	adds r3, r0, r4
	adds r0, r1, #0
	adds r1, r5, #0
	bl PutOamHiRam
_08085AB0:
	adds r0, r7, #0
	adds r0, #0x17
	ldr r1, _08085B04 @ =0x08BFF760
	mov r8, r1
	adds r1, r6, #0
	adds r1, #0x52
	ldr r4, _08085B08 @ =0x000082E0
	ldrb r1, [r1]
	adds r3, r1, r4
	adds r1, r5, #0
	mov r2, r8
	bl PutOamHiRam
	adds r0, r7, #0
	adds r0, #0x22
	adds r1, r6, #0
	adds r1, #0x53
	ldrb r1, [r1]
	adds r3, r1, r4
	adds r1, r5, #0
	mov r2, r8
	bl PutOamHiRam
	adds r0, r7, #0
	adds r0, #0x29
	adds r1, r6, #0
	adds r1, #0x54
	ldrb r1, [r1]
	adds r4, r1, r4
	adds r1, r5, #0
	mov r2, r8
	adds r3, r4, #0
	bl PutOamHiRam
_08085AF4:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08085B00: .4byte 0x02028D3C
_08085B04: .4byte 0x08BFF760
_08085B08: .4byte 0x000082E0

	thumb_func_start sub_08085B0C
sub_08085B0C: @ 0x08085B0C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r7, r0, #0
	mov r8, r1
	movs r0, #0
	mov sl, r0
	str r0, [sp, #4]
	ldr r1, _08085BC4 @ =gBmFrameTmap0
	mov sb, r1
	ldr r2, _08085BC8 @ =0x01000060
	add r0, sp, #4
	bl CpuFastSet
	mov r2, r8
	ldr r0, [r2]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r6, r0, #0
	movs r0, #0x30
	adds r1, r6, #0
	bl GetStringTextCenteredPos
	adds r5, r0, #0
	adds r4, r7, #0
	adds r4, #0x2c
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #5
	bl Text_SetParams
	adds r0, r4, #0
	adds r1, r6, #0
	bl Text_DrawString
	mov r1, sb
	adds r1, #0x4a
	adds r0, r4, #0
	bl PutText
	mov r0, r8
	bl GetUnitMiniPortraitId
	adds r2, r0, #0
	mov r1, r8
	ldr r0, [r1, #0xc]
	movs r1, #0x80
	lsls r1, r1, #0x10
	ands r0, r1
	cmp r0, #0
	beq _08085B82
	adds r2, #1
_08085B82:
	mov r1, sb
	adds r1, #0x42
	mov r0, sl
	str r0, [sp]
	adds r0, r2, #0
	movs r2, #0xf0
	movs r3, #4
	bl sub_08006E10
	mov r0, sb
	adds r0, #0xca
	str r0, [r7, #0x40]
	adds r0, r7, #0
	adds r0, #0x44
	mov r1, sl
	strh r1, [r0]
	ldr r2, _08085BCC @ =0x08D8B134
	adds r1, r7, #0
	adds r1, #0x50
	movs r0, #0
	ldrsb r0, [r1, r0]
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrb r0, [r0, #2]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _08085BD0
	adds r2, r7, #0
	adds r2, #0x46
	movs r0, #5
	b _08085BD6
	.align 2, 0
_08085BC4: .4byte gBmFrameTmap0
_08085BC8: .4byte 0x01000060
_08085BCC: .4byte 0x08D8B134
_08085BD0:
	adds r2, r7, #0
	adds r2, #0x46
	movs r0, #0x17
_08085BD6:
	strh r0, [r2]
	ldr r0, _08085BF4 @ =0x08D8B134
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #3
	adds r1, r1, r0
	movs r0, #3
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bge _08085BF8
	adds r1, r7, #0
	adds r1, #0x48
	movs r0, #3
	b _08085BFE
	.align 2, 0
_08085BF4: .4byte 0x08D8B134
_08085BF8:
	adds r1, r7, #0
	adds r1, #0x48
	movs r0, #0x11
_08085BFE:
	strh r0, [r1]
	adds r0, r7, #0
	mov r1, r8
	bl sub_080859B0
	ldr r0, _08085C40 @ =0x02003346
	movs r2, #0xc5
	lsls r2, r2, #6
	mov r1, r8
	bl sub_080851F0
	ldr r0, _08085C44 @ =0x0200373C
	ldr r1, _08085C48 @ =0x0841C80C
	movs r2, #0xc4
	lsls r2, r2, #6
	bl TmApplyTsa_thm
	movs r0, #0xc0
	mov r2, r8
	ldrb r2, [r2, #0xb]
	ands r0, r2
	movs r1, #3
	bl sub_08085824
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08085C40: .4byte 0x02003346
_08085C44: .4byte 0x0200373C
_08085C48: .4byte 0x0841C80C

	thumb_func_start sub_08085C4C
sub_08085C4C: @ 0x08085C4C
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	bl sub_0808512C
	adds r1, r0, #0
	movs r2, #1
	cmp r4, #5
	ble _08085C70
	cmp r4, #0xb
	bgt _08085C72
	ldr r0, _08085C88 @ =0x08D8B134
	lsls r1, r1, #3
	adds r1, r1, r0
	movs r0, #5
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bge _08085C72
_08085C70:
	movs r2, #4
_08085C72:
	cmp r5, #1
	bgt _08085C78
	subs r2, #1
_08085C78:
	cmp r5, #0x16
	ble _08085C7E
	adds r2, #1
_08085C7E:
	adds r0, r2, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08085C88: .4byte 0x08D8B134

	thumb_func_start sub_08085C8C
sub_08085C8C: @ 0x08085C8C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	str r1, [sp]
	movs r0, #0x10
	ldrsb r0, [r1, r0]
	lsls r0, r0, #4
	ldr r2, _08085DD4 @ =gBmSt
	movs r3, #0xc
	ldrsh r1, [r2, r3]
	subs r0, r0, r1
	cmp r0, #0
	bge _08085CB0
	adds r0, #7
_08085CB0:
	asrs r0, r0, #3
	mov sl, r0
	ldr r1, [sp]
	movs r0, #0x11
	ldrsb r0, [r1, r0]
	lsls r0, r0, #4
	movs r3, #0xe
	ldrsh r1, [r2, r3]
	subs r0, r0, r1
	cmp r0, #0
	bge _08085CC8
	adds r0, #7
_08085CC8:
	asrs r4, r0, #3
	mov r0, sl
	adds r1, r4, #0
	bl sub_08085C4C
	mov r8, r0
	ldr r0, _08085DD8 @ =0x08D8B16C
	add r0, r8
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	add sl, r0
	ldr r0, _08085DDC @ =0x08D8B172
	add r0, r8
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r4, r4, r0
	adds r0, r7, #0
	adds r0, #0x3c
	mov r1, sl
	strb r1, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r1, r7, #0
	adds r1, #0x3e
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #5
	strb r0, [r1]
	ldr r2, [sp]
	ldr r0, [r2]
	ldrh r0, [r0]
	bl DecodeMsg
	mov sb, r0
	movs r0, #0x30
	mov r1, sb
	bl GetStringTextCenteredPos
	adds r6, r0, #0
	adds r5, r7, #0
	adds r5, #0x2c
	adds r0, r5, #0
	bl ClearText
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #5
	bl Text_SetParams
	adds r0, r5, #0
	mov r1, sb
	bl Text_DrawString
	ldr r0, _08085DE0 @ =0x08D8B15A
	add r0, r8
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r1, r4, r1
	lsls r1, r1, #5
	ldr r0, _08085DE4 @ =0x08D8B154
	add r0, r8
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	add r0, sl
	adds r1, r1, r0
	lsls r1, r1, #1
	ldr r6, _08085DE8 @ =gBg0Tm
	adds r1, r1, r6
	adds r0, r5, #0
	bl PutText
	adds r1, r4, #3
	lsls r0, r1, #5
	adds r0, #1
	add r0, sl
	lsls r0, r0, #1
	adds r0, r0, r6
	str r0, [r7, #0x40]
	adds r0, r7, #0
	adds r0, #0x44
	movs r3, #0
	strh r3, [r0]
	mov r0, sl
	adds r0, #1
	adds r2, r7, #0
	adds r2, #0x46
	strh r0, [r2]
	adds r0, r7, #0
	adds r0, #0x48
	strh r1, [r0]
	adds r0, r7, #0
	ldr r1, [sp]
	bl sub_080859B0
	lsls r4, r4, #5
	add r4, sl
	lsls r4, r4, #1
	ldr r0, _08085DEC @ =gBg1Tm
	adds r4, r4, r0
	ldr r0, _08085DF0 @ =0x08D8B178
	mov r1, r8
	lsls r1, r1, #2
	mov r8, r1
	add r8, r0
	mov r2, r8
	ldr r1, [r2]
	movs r2, #0xc4
	lsls r2, r2, #6
	adds r0, r4, #0
	bl TmApplyTsa_thm
	movs r0, #3
	bl EnableBgSync
	movs r0, #0xc0
	ldr r3, [sp]
	ldrb r3, [r3, #0xb]
	ands r0, r3
	movs r1, #3
	bl sub_08085824
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08085DD4: .4byte gBmSt
_08085DD8: .4byte 0x08D8B16C
_08085DDC: .4byte 0x08D8B172
_08085DE0: .4byte 0x08D8B15A
_08085DE4: .4byte 0x08D8B154
_08085DE8: .4byte gBg0Tm
_08085DEC: .4byte gBg1Tm
_08085DF0: .4byte 0x08D8B178

	thumb_func_start sub_08085DF4
sub_08085DF4: @ 0x08085DF4
	push {r4, r5, r6, r7, lr}
	adds r2, r0, #0
	movs r0, #0xa1
	lsls r0, r0, #3
	ldrh r1, [r2, #0x3e]
	cmp r1, r0
	bne _08085E5E
	adds r7, r2, #0
	adds r7, #0x3d
	movs r0, #0
	ldrsb r0, [r7, r0]
	lsls r0, r0, #5
	adds r5, r2, #0
	adds r5, #0x3c
	movs r1, #0
	ldrsb r1, [r5, r1]
	adds r0, r0, r1
	lsls r0, r0, #1
	ldr r1, _08085E64 @ =gBg0Tm
	adds r0, r0, r1
	adds r6, r2, #0
	adds r6, #0x3e
	movs r1, #0
	ldrsb r1, [r6, r1]
	adds r4, r2, #0
	adds r4, #0x3f
	movs r2, #0
	ldrsb r2, [r4, r2]
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #0
	ldrsb r0, [r7, r0]
	lsls r0, r0, #5
	movs r1, #0
	ldrsb r1, [r5, r1]
	adds r0, r0, r1
	lsls r0, r0, #1
	ldr r1, _08085E68 @ =gBg1Tm
	adds r0, r0, r1
	movs r1, #0
	ldrsb r1, [r6, r1]
	movs r2, #0
	ldrsb r2, [r4, r2]
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #3
	bl EnableBgSync
	movs r0, #0
	strb r0, [r6]
	strb r0, [r4]
_08085E5E:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08085E64: .4byte gBg0Tm
_08085E68: .4byte gBg1Tm

	thumb_func_start sub_08085E6C
sub_08085E6C: @ 0x08085E6C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r4, r0, #0
	ldr r0, _08085F64 @ =gBmSt
	mov sb, r0
	movs r1, #0x16
	ldrsh r0, [r0, r1]
	ldr r1, _08085F68 @ =gBmMapTerrain
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	mov r2, sb
	movs r3, #0x14
	ldrsh r1, [r2, r3]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r7, [r0]
	bl sub_08031B40
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08085EA0
	b _08086026
_08085EA0:
	ldr r0, _08085F6C @ =0x020034BC
	mov r8, r0
	movs r1, #0xe
	movs r2, #7
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, _08085F70 @ =0x020039BC
	movs r1, #0xe
	movs r2, #7
	movs r3, #0
	bl TmFillRect_thm
	adds r0, r7, #0
	bl sub_08019EF0
	adds r5, r0, #0
	movs r0, #0x20
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r6, r0, #0
	adds r4, #0x2c
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #0
	bl Text_SetParams
	adds r0, r4, #0
	adds r1, r5, #0
	bl Text_DrawString
	mov r1, r8
	adds r1, #0x82
	adds r0, r4, #0
	bl PutText
	movs r6, #0x81
	lsls r6, r6, #1
	add r6, r8
	ldr r1, _08085F74 @ =0x0841CA98
	movs r2, #0x80
	lsls r2, r2, #1
	mov sl, r2
	adds r0, r6, #0
	bl TmApplyTsa_thm
	ldr r0, _08085F78 @ =0x08C52C98
	adds r0, r7, r0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble _08085F54
	ldr r0, _08085F7C @ =0x08C53846
	adds r0, r7, r0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl sub_08004F20
	movs r0, #0x84
	lsls r0, r0, #1
	add r0, r8
	ldr r4, _08085F80 @ =0x02028D43
	movs r5, #0x94
	lsls r5, r5, #1
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #2
	bl sub_08013870
	ldr r0, _08085F84 @ =0x08C53805
	adds r0, r7, r0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl sub_08004F20
	movs r0, #0xa4
	lsls r0, r0, #1
	add r0, r8
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #2
	bl sub_08013870
_08085F54:
	cmp r7, #0x29
	bgt _08085F88
	cmp r7, #0x27
	bge _08085FEC
	cmp r7, #0x1b
	beq _08085F8C
	b _0808601A
	.align 2, 0
_08085F64: .4byte gBmSt
_08085F68: .4byte gBmMapTerrain
_08085F6C: .4byte 0x020034BC
_08085F70: .4byte 0x020039BC
_08085F74: .4byte 0x0841CA98
_08085F78: .4byte 0x08C52C98
_08085F7C: .4byte 0x08C53846
_08085F80: .4byte 0x02028D43
_08085F84: .4byte 0x08C53805
_08085F88:
	cmp r7, #0x33
	bne _0808601A
_08085F8C:
	ldr r4, _08085FC0 @ =0x020035BE
	ldr r1, _08085FC4 @ =0x0841CAAC
	movs r2, #0x84
	lsls r2, r2, #6
	adds r0, r4, #0
	bl TmApplyTsa_thm
	ldr r1, _08085FC8 @ =gBmSt
	movs r3, #0x14
	ldrsh r0, [r1, r3]
	movs r2, #0x16
	ldrsh r1, [r1, r2]
	bl sub_0802C17C
	adds r6, r0, #0
	cmp r6, #0x64
	bne _08085FD0
	adds r0, r4, #0
	adds r0, #0x44
	ldr r1, _08085FCC @ =0x0841CAB8
	movs r2, #0x80
	lsls r2, r2, #1
	bl TmApplyTsa_thm
	b _0808601A
	.align 2, 0
_08085FC0: .4byte 0x020035BE
_08085FC4: .4byte 0x0841CAAC
_08085FC8: .4byte gBmSt
_08085FCC: .4byte 0x0841CAB8
_08085FD0:
	adds r0, r6, #0
	bl sub_08004F20
	adds r0, r4, #0
	adds r0, #0x46
	ldr r1, _08085FE8 @ =0x02028D43
	movs r2, #0x94
	lsls r2, r2, #1
	movs r3, #2
	bl sub_08013870
	b _0808601A
	.align 2, 0
_08085FE8: .4byte 0x02028D43
_08085FEC:
	ldr r1, _08086034 @ =0x0841CAA4
	adds r0, r6, #0
	mov r2, sl
	bl TmApplyTsa_thm
	mov r3, sb
	movs r1, #0x14
	ldrsh r0, [r3, r1]
	movs r2, #0x16
	ldrsh r1, [r3, r2]
	bl sub_0802C17C
	bl sub_08004F20
	movs r0, #0x84
	lsls r0, r0, #1
	add r0, r8
	ldr r1, _08086038 @ =0x02028D43
	movs r2, #0x94
	lsls r2, r2, #1
	movs r3, #2
	bl sub_08013870
_0808601A:
	ldr r0, _0808603C @ =0x020039BC
	ldr r1, _08086040 @ =0x0841C7B4
	movs r2, #0x88
	lsls r2, r2, #5
	bl TmApplyTsa_thm
_08086026:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08086034: .4byte 0x0841CAA4
_08086038: .4byte 0x02028D43
_0808603C: .4byte 0x020039BC
_08086040: .4byte 0x0841C7B4

	thumb_func_start sub_08086044
sub_08086044: @ 0x08086044
	push {lr}
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x57
	movs r0, #0xff
	strb r0, [r1]
	subs r1, #1
	movs r0, #0
	strb r0, [r1]
	str r0, [r2, #0x58]
	subs r1, #6
	movs r0, #1
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x2c
	movs r1, #4
	bl sub_0800536C
	pop {r0}
	bx r0

	thumb_func_start sub_0808606C
sub_0808606C: @ 0x0808606C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x55
	movs r0, #1
	strb r0, [r1]
	bl sub_0808512C
	adds r1, r5, #0
	adds r1, #0x50
	strb r0, [r1]
	ldr r0, _08086100 @ =0x08D8B134
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #3
	adds r1, r1, r0
	movs r0, #0
	ldrsb r0, [r1, r0]
	ldrb r1, [r1, #1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_08085110
	adds r6, r0, #0
	ldr r0, _08086104 @ =0x08D8B200
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	beq _080860BA
	adds r1, r4, #0
	adds r1, #0x57
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	blt _080860BA
	cmp r0, r6
	beq _080860F8
_080860BA:
	ldr r0, _08086108 @ =0x08D8B2D8
	bl Proc_Find
	cmp r4, #0
	beq _080860D4
	adds r1, r0, #0
	adds r1, #0x57
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	blt _080860D4
	cmp r0, r6
	beq _080860F8
_080860D4:
	adds r0, r5, #0
	adds r0, #0x57
	strb r6, [r0]
	adds r0, r5, #0
	bl sub_08085E6C
	ldr r0, _0808610C @ =gBmSt
	ldrh r1, [r0, #0x14]
	adds r2, r5, #0
	adds r2, #0x4e
	strb r1, [r2]
	ldrh r0, [r0, #0x16]
	adds r1, r5, #0
	adds r1, #0x4f
	strb r0, [r1]
	adds r0, r5, #0
	bl Proc_Break
_080860F8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08086100: .4byte 0x08D8B134
_08086104: .4byte 0x08D8B200
_08086108: .4byte 0x08D8B2D8
_0808610C: .4byte gBmSt

	thumb_func_start sub_08086110
sub_08086110: @ 0x08086110
	push {r4, lr}
	adds r4, r0, #0
	adds r3, r4, #0
	adds r3, #0x4e
	ldrb r0, [r3]
	adds r2, r4, #0
	adds r2, #0x4c
	strb r0, [r2]
	movs r0, #0x4f
	adds r0, r0, r4
	mov ip, r0
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x4d
	strb r0, [r1]
	ldr r1, _08086190 @ =gBmSt
	ldrh r0, [r1, #0x14]
	strb r0, [r3]
	ldrh r0, [r1, #0x16]
	mov r1, ip
	strb r0, [r1]
	ldr r0, _08086194 @ =0x0000FFFF
	adds r1, r0, #0
	ldrh r3, [r3]
	ands r1, r3
	ldrh r2, [r2]
	ands r0, r2
	cmp r1, r0
	beq _080861AE
	ldr r0, _08086198 @ =0x08C020F4
	bl Proc_Find
	cmp r0, #0
	bne _080861A0
	bl sub_0808512C
	adds r1, r0, #0
	adds r0, r4, #0
	adds r0, #0x50
	movs r2, #0
	ldrsb r2, [r0, r2]
	cmp r1, r2
	beq _08086180
	ldr r0, _0808619C @ =0x08D8B134
	lsls r1, r1, #3
	adds r3, r1, r0
	lsls r1, r2, #3
	adds r1, r1, r0
	ldrb r2, [r3]
	ldrb r0, [r1]
	cmp r2, r0
	bne _080861A0
	ldrb r3, [r3, #1]
	ldrb r1, [r1, #1]
	cmp r3, r1
	bne _080861A0
_08086180:
	adds r0, r4, #0
	bl sub_08085E6C
	adds r0, r4, #0
	bl sub_080857E0
	b _080861AE
	.align 2, 0
_08086190: .4byte gBmSt
_08086194: .4byte 0x0000FFFF
_08086198: .4byte 0x08C020F4
_0808619C: .4byte 0x08D8B134
_080861A0:
	adds r1, r4, #0
	adds r1, #0x56
	movs r0, #1
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_080861AE:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080861B4
sub_080861B4: @ 0x080861B4
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x57
	movs r0, #0xff
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x2c
	movs r1, #6
	bl sub_0800536C
	movs r1, #0
	str r1, [r4, #0x58]
	adds r0, r4, #0
	adds r0, #0x56
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080861DC
sub_080861DC: @ 0x080861DC
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r2, _08086278 @ =gBmSt
	movs r1, #0x16
	ldrsh r0, [r2, r1]
	ldr r1, _0808627C @ =gBmMapUnit
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r3, #0x14
	ldrsh r1, [r2, r3]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl GetUnit
	adds r6, r0, #0
	cmp r6, #0
	beq _08086270
	adds r1, r4, #0
	adds r1, #0x55
	movs r0, #1
	strb r0, [r1]
	bl sub_0808512C
	adds r1, r4, #0
	adds r1, #0x50
	strb r0, [r1]
	ldr r0, _08086280 @ =0x08D8B134
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #3
	adds r1, r1, r0
	movs r0, #2
	ldrsb r0, [r1, r0]
	ldrb r1, [r1, #3]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_08085110
	adds r5, r0, #0
	ldr r0, _08086284 @ =0x08D8B1A0
	bl Proc_Find
	cmp r0, #0
	beq _0808624A
	adds r1, r0, #0
	adds r1, #0x57
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	blt _0808624A
	cmp r0, r5
	beq _08086270
_0808624A:
	adds r0, r4, #0
	adds r0, #0x57
	strb r5, [r0]
	ldr r0, _08086278 @ =gBmSt
	ldrh r1, [r0, #0x14]
	adds r2, r4, #0
	adds r2, #0x4e
	strb r1, [r2]
	ldrh r0, [r0, #0x16]
	adds r1, r4, #0
	adds r1, #0x4f
	strb r0, [r1]
	adds r0, r4, #0
	adds r1, r6, #0
	bl sub_08085B0C
	adds r0, r4, #0
	bl Proc_Break
_08086270:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08086278: .4byte gBmSt
_0808627C: .4byte gBmMapUnit
_08086280: .4byte 0x08D8B134
_08086284: .4byte 0x08D8B1A0

	thumb_func_start sub_08086288
sub_08086288: @ 0x08086288
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r6, _08086340 @ =gBmSt
	movs r1, #0x16
	ldrsh r0, [r6, r1]
	ldr r1, _08086344 @ =gBmMapUnit
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r2, #0x14
	ldrsh r1, [r6, r2]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl GetUnit
	adds r7, r0, #0
	adds r4, r5, #0
	adds r4, #0x44
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	adds r0, r5, #0
	adds r1, r7, #0
	bl sub_080859B0
	movs r0, #0x3f
	ldrh r4, [r4]
	ands r0, r4
	cmp r0, #0
	bne _080862CC
	adds r0, r5, #0
	bl sub_0808578C
_080862CC:
	adds r3, r5, #0
	adds r3, #0x4e
	ldrb r0, [r3]
	adds r2, r5, #0
	adds r2, #0x4c
	strb r0, [r2]
	adds r4, r5, #0
	adds r4, #0x4f
	ldrb r0, [r4]
	adds r1, r5, #0
	adds r1, #0x4d
	strb r0, [r1]
	ldrh r0, [r6, #0x14]
	strb r0, [r3]
	ldrh r0, [r6, #0x16]
	strb r0, [r4]
	ldr r0, _08086348 @ =0x0000FFFF
	adds r1, r0, #0
	ldrh r3, [r3]
	ands r1, r3
	ldrh r2, [r2]
	ands r0, r2
	cmp r1, r0
	beq _08086362
	cmp r7, #0
	beq _08086354
	ldr r0, _0808634C @ =0x08C020F4
	bl Proc_Find
	cmp r0, #0
	bne _08086354
	bl sub_0808512C
	adds r1, r0, #0
	adds r0, r5, #0
	adds r0, #0x50
	movs r2, #0
	ldrsb r2, [r0, r2]
	cmp r1, r2
	beq _08086336
	ldr r0, _08086350 @ =0x08D8B134
	lsls r1, r1, #3
	adds r3, r1, r0
	lsls r1, r2, #3
	adds r1, r1, r0
	ldrb r0, [r3, #2]
	ldrb r2, [r1, #2]
	cmp r0, r2
	bne _08086354
	ldrb r3, [r3, #3]
	ldrb r1, [r1, #3]
	cmp r3, r1
	bne _08086354
_08086336:
	adds r0, r5, #0
	movs r1, #1
	bl Proc_Goto
	b _08086362
	.align 2, 0
_08086340: .4byte gBmSt
_08086344: .4byte gBmMapUnit
_08086348: .4byte 0x0000FFFF
_0808634C: .4byte 0x08C020F4
_08086350: .4byte 0x08D8B134
_08086354:
	adds r1, r5, #0
	adds r1, #0x56
	movs r0, #1
	strb r0, [r1]
	adds r0, r5, #0
	bl Proc_Break
_08086362:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08086368
sub_08086368: @ 0x08086368
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, _08086398 @ =gBmSt
	movs r1, #0x16
	ldrsh r0, [r2, r1]
	ldr r1, _0808639C @ =gBmMapUnit
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r3, #0x14
	ldrsh r1, [r2, r3]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	bne _080863A0
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
	b _080863AC
	.align 2, 0
_08086398: .4byte gBmSt
_0808639C: .4byte gBmMapUnit
_080863A0:
	adds r0, r4, #0
	bl sub_08085B0C
	adds r0, r4, #0
	bl sub_0808578C
_080863AC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080863B4
sub_080863B4: @ 0x080863B4
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	movs r1, #6
	bl sub_0800536C
	adds r0, r4, #0
	adds r0, #0x4b
	movs r1, #0
	strb r1, [r0]
	adds r0, #0xa
	strb r1, [r0]
	str r1, [r4, #0x58]
	subs r0, #0x17
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #0x17
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080863E0
sub_080863E0: @ 0x080863E0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x4b
	ldrb r0, [r5]
	adds r3, r4, #0
	adds r3, #0x4a
	strb r0, [r3]
	ldr r2, _08086424 @ =gBmSt
	movs r1, #0x16
	ldrsh r0, [r2, r1]
	ldr r1, _08086428 @ =gBmMapUnit
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r6, #0x14
	ldrsh r1, [r2, r6]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	strb r0, [r5]
	ldrb r1, [r3]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r1, r0
	beq _0808642C
	cmp r1, #0
	beq _0808642C
	adds r0, r4, #0
	bl sub_08085DF4
	movs r0, #0
	str r0, [r4, #0x58]
	b _080864D4
	.align 2, 0
_08086424: .4byte gBmSt
_08086428: .4byte gBmMapUnit
_0808642C:
	adds r0, r4, #0
	adds r0, #0x4b
	ldrb r1, [r0]
	adds r6, r0, #0
	cmp r1, #0
	beq _080864D4
	ldr r0, _0808647C @ =0x08C020F4
	bl Proc_Find
	cmp r0, #0
	bne _080864D4
	ldr r0, _08086480 @ =0x08D8B1A0
	bl Proc_Find
	adds r5, r0, #0
	cmp r5, #0
	beq _0808645A
	adds r0, #0x55
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _08086470
_0808645A:
	ldr r0, _08086484 @ =0x08D8B2D8
	bl Proc_Find
	cmp r0, #0
	beq _08086488
	adds r0, #0x55
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _08086488
_08086470:
	ldr r0, [r4, #0x58]
	cmp r0, #3
	bgt _080864D4
	adds r0, #1
	str r0, [r4, #0x58]
	b _080864D4
	.align 2, 0
_0808647C: .4byte 0x08C020F4
_08086480: .4byte 0x08D8B1A0
_08086484: .4byte 0x08D8B2D8
_08086488:
	ldr r0, [r4, #0x58]
	adds r0, #1
	str r0, [r4, #0x58]
	cmp r0, #7
	ble _080864D4
	cmp r0, #8
	bne _080864A6
	ldrb r0, [r6]
	bl GetUnit
	adds r1, r0, #0
	adds r0, r4, #0
	bl sub_08085C8C
	b _080864D4
_080864A6:
	adds r1, r4, #0
	adds r1, #0x44
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	cmp r5, #0
	beq _080864BE
	adds r0, r5, #0
	adds r0, #0x55
	ldrb r0, [r0]
	adds r1, #0x11
	b _080864C4
_080864BE:
	adds r1, r4, #0
	adds r1, #0x55
	movs r0, #0
_080864C4:
	strb r0, [r1]
	ldrb r0, [r6]
	bl GetUnit
	adds r1, r0, #0
	adds r0, r4, #0
	bl sub_080859B0
_080864D4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080864DC
sub_080864DC: @ 0x080864DC
	push {r4, r5, lr}
	ldr r5, _080865DC @ =gDispIo
	movs r4, #0x21
	rsbs r4, r4, #0
	adds r0, r4, #0
	ldrb r1, [r5, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r5, #1]
	adds r2, r5, #0
	adds r2, #0x36
	movs r0, #1
	ldrb r1, [r2]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	movs r1, #0x20
	orrs r0, r1
	strb r0, [r2]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	adds r2, r5, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r5, #0
	adds r1, #0x44
	movs r3, #0
	movs r0, #0xf
	strb r0, [r1]
	adds r1, #1
	movs r0, #4
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x46
	strb r3, [r0]
	ldr r0, _080865E0 @ =0x0000FFE0
	ldrh r1, [r5, #0x3c]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strh r0, [r5, #0x3c]
	ldrb r0, [r2]
	ands r4, r0
	strb r4, [r2]
	ldr r0, _080865E4 @ =0x0000E0FF
	ldrh r1, [r5, #0x3c]
	ands r0, r1
	movs r2, #0xe0
	lsls r2, r2, #5
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r5, #0x3c]
	ldr r0, _080865E8 @ =0x0841BE00
	ldr r1, _080865EC @ =0x06002000
	bl sub_08013688
	ldr r0, _080865F0 @ =0x06002500
	ldr r1, _080865F4 @ =0x06015C00
	movs r2, #0x50
	bl CpuFastSet
	ldr r0, _080865F8 @ =0x06002EA0
	ldr r1, _080865FC @ =0x06015D40
	movs r2, #8
	bl CpuFastSet
	ldr r0, _08086600 @ =gPal
	movs r1, #0xc0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #1
	movs r1, #2
	bl ApplyIconPalette
	bl sub_08005308
	ldr r4, _08086604 @ =gPlaySt
	adds r0, r4, #0
	adds r0, #0x40
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080865C6
	ldr r0, _08086608 @ =0x08D8B1A0
	movs r1, #3
	bl Proc_Start
_080865C6:
	ldr r1, _0808660C @ =gBmSt
	movs r0, #0x10
	ldrb r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _08086614
	ldr r0, _08086610 @ =0x08D8B338
	movs r1, #3
	bl Proc_Start
	b _08086628
	.align 2, 0
_080865DC: .4byte gDispIo
_080865E0: .4byte 0x0000FFE0
_080865E4: .4byte 0x0000E0FF
_080865E8: .4byte 0x0841BE00
_080865EC: .4byte 0x06002000
_080865F0: .4byte 0x06002500
_080865F4: .4byte 0x06015C00
_080865F8: .4byte 0x06002EA0
_080865FC: .4byte 0x06015D40
_08086600: .4byte gPal
_08086604: .4byte gPlaySt
_08086608: .4byte 0x08D8B1A0
_0808660C: .4byte gBmSt
_08086610: .4byte 0x08D8B338
_08086614:
	adds r0, r4, #0
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	cmp r0, #0
	bne _08086628
	ldr r0, _08086658 @ =0x08D8B2D8
	movs r1, #3
	bl Proc_Start
_08086628:
	ldr r0, _0808665C @ =gPlaySt
	adds r4, r0, #0
	adds r4, #0x40
	ldrb r1, [r4]
	lsls r0, r1, #0x1c
	lsrs r0, r0, #0x1e
	cmp r0, #0
	bne _08086640
	ldr r0, _08086660 @ =0x08D8B200
	movs r1, #3
	bl Proc_Start
_08086640:
	ldrb r4, [r4]
	lsls r0, r4, #0x1c
	lsrs r0, r0, #0x1e
	cmp r0, #1
	bne _08086652
	ldr r0, _08086664 @ =0x08D8B288
	movs r1, #3
	bl Proc_Start
_08086652:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08086658: .4byte 0x08D8B2D8
_0808665C: .4byte gPlaySt
_08086660: .4byte 0x08D8B200
_08086664: .4byte 0x08D8B288

	thumb_func_start sub_08086668
sub_08086668: @ 0x08086668
	push {lr}
	ldr r0, _08086678 @ =0x08D8B2B8
	movs r1, #3
	bl Proc_Start
	pop {r0}
	bx r0
	.align 2, 0
_08086678: .4byte 0x08D8B2B8

	thumb_func_start sub_0808667C
sub_0808667C: @ 0x0808667C
	push {lr}
	ldr r0, _080866C4 @ =0x08D8B200
	bl sub_08004748
	ldr r0, _080866C8 @ =0x08D8B288
	bl sub_08004748
	ldr r0, _080866CC @ =0x08D8B1A0
	bl sub_08004748
	ldr r0, _080866D0 @ =0x08D8B2D8
	bl sub_08004748
	ldr r0, _080866D4 @ =0x08D8B338
	bl sub_08004748
	ldr r3, _080866D8 @ =gDispIo
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r2, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	bl ClearBg0Bg1
	pop {r0}
	bx r0
	.align 2, 0
_080866C4: .4byte 0x08D8B200
_080866C8: .4byte 0x08D8B288
_080866CC: .4byte 0x08D8B1A0
_080866D0: .4byte 0x08D8B2D8
_080866D4: .4byte 0x08D8B338
_080866D8: .4byte gDispIo

	thumb_func_start sub_080866DC
sub_080866DC: @ 0x080866DC
	ldr r0, _080866F4 @ =gBmSt
	movs r2, #0x16
	ldrsh r1, [r0, r2]
	lsls r1, r1, #4
	movs r2, #0xe
	ldrsh r0, [r0, r2]
	subs r1, r1, r0
	cmp r1, #0x40
	bgt _080866F8
	movs r0, #0
	b _080866FA
	.align 2, 0
_080866F4: .4byte gBmSt
_080866F8:
	movs r0, #1
_080866FA:
	bx lr

	thumb_func_start sub_080866FC
sub_080866FC: @ 0x080866FC
	push {lr}
	bl sub_080866DC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08086724
	bl sub_0808586C
	movs r1, #1
	rsbs r1, r1, #0
	cmp r0, r1
	bne _08086718
	movs r0, #2
	b _08086742
_08086718:
	bl sub_0808586C
	cmp r0, #1
	bne _08086740
	movs r0, #1
	b _08086742
_08086724:
	bl sub_0808588C
	movs r1, #1
	rsbs r1, r1, #0
	cmp r0, r1
	bne _08086734
	movs r0, #4
	b _08086742
_08086734:
	bl sub_0808588C
	cmp r0, #1
	bne _08086740
	movs r0, #3
	b _08086742
_08086740:
	movs r0, #0
_08086742:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08086748
sub_08086748: @ 0x08086748
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	bl sub_08031B40
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080867C0
	ldr r7, _080867C8 @ =0x020039E4
	adds r0, r7, #0
	movs r1, #0xb
	movs r2, #9
	movs r3, #0
	bl TmFillRect_thm
	ldr r6, _080867CC @ =0x02003564
	adds r0, r6, #0
	movs r1, #0xb
	movs r2, #9
	movs r3, #0
	bl TmFillRect_thm
	adds r5, r4, #0
	adds r5, #0x44
	movs r1, #0
	ldrsh r0, [r5, r1]
	cmp r0, #0
	bne _08086796
	ldr r1, _080867D0 @ =0x0841CB54
	movs r2, #0x88
	lsls r2, r2, #5
	adds r0, r7, #0
	bl TmApplyTsa_thm
	adds r0, r4, #0
	adds r0, #0x2c
	adds r1, r6, #0
	adds r1, #0x42
	bl PutText
_08086796:
	ldrh r5, [r5]
	cmp r5, #1
	bne _080867C0
	ldr r1, _080867D4 @ =0x0841CACC
	movs r2, #0x88
	lsls r2, r2, #5
	adds r0, r7, #0
	bl TmApplyTsa_thm
	adds r0, r4, #0
	adds r0, #0x2c
	adds r1, r6, #0
	adds r1, #0x42
	bl PutText
	adds r0, r4, #0
	adds r0, #0x34
	adds r1, r6, #0
	adds r1, #0xc2
	bl PutText
_080867C0:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080867C8: .4byte 0x020039E4
_080867CC: .4byte 0x02003564
_080867D0: .4byte 0x0841CB54
_080867D4: .4byte 0x0841CACC

	thumb_func_start sub_080867D8
sub_080867D8: @ 0x080867D8
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	movs r1, #0
	str r1, [r7, #0x58]
	adds r0, #0x56
	strb r1, [r0]
	subs r0, #6
	strb r1, [r0]
	adds r1, r7, #0
	adds r1, #0x57
	movs r0, #0xff
	strb r0, [r1]
	adds r5, r7, #0
	adds r5, #0x2c
	adds r0, r5, #0
	movs r1, #8
	bl InitText
	adds r4, r7, #0
	adds r4, #0x34
	adds r0, r4, #0
	movs r1, #8
	bl InitText
	adds r0, r7, #0
	bl sub_08005E88
	adds r0, r5, #0
	bl ClearText
	adds r0, r4, #0
	bl ClearText
	ldr r6, _08086860 @ =gPlaySt
	movs r0, #0xe
	ldrsb r0, [r6, r0]
	bl GetROMChapterStruct
	adds r0, #0x8a
	ldrh r0, [r0]
	bl DecodeMsg
	adds r4, r0, #0
	movs r0, #0x40
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r5, #0
	movs r2, #0
	adds r3, r4, #0
	bl Text_InsertDrawString
	movs r0, #0xe
	ldrsb r0, [r6, r0]
	bl GetROMChapterStruct
	adds r0, #0x8c
	ldrb r0, [r0]
	cmp r0, #4
	bls _08086854
	b _08086950
_08086854:
	lsls r0, r0, #2
	ldr r1, _08086864 @ =_08086868
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08086860: .4byte gPlaySt
_08086864: .4byte _08086868
_08086868: @ jump table
	.4byte _0808687C @ case 0
	.4byte _08086884 @ case 1
	.4byte _080868CC @ case 2
	.4byte _0808687C @ case 3
	.4byte _0808687C @ case 4
_0808687C:
	adds r1, r7, #0
	adds r1, #0x44
	movs r0, #0
	b _0808694E
_08086884:
	adds r4, r7, #0
	adds r4, #0x34
	ldr r3, _080868AC @ =0x0841D0CC
	adds r0, r4, #0
	movs r1, #0x14
	movs r2, #0
	bl Text_InsertDrawString
	ldr r0, _080868B0 @ =gPlaySt
	ldrb r0, [r0, #0xd]
	cmp r0, #0
	beq _080868B8
	ldr r3, _080868B4 @ =0x0841D0D4
	adds r0, r4, #0
	movs r1, #0x24
	movs r2, #1
	bl Text_InsertDrawString
	b _08086948
	.align 2, 0
_080868AC: .4byte 0x0841D0CC
_080868B0: .4byte gPlaySt
_080868B4: .4byte 0x0841D0D4
_080868B8:
	movs r0, #0x80
	bl sub_080872A4
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x2c
	movs r2, #2
	bl Text_InsertDrawNumberOrBlank
	b _08086948
_080868CC:
	ldr r5, _08086900 @ =gPlaySt
	ldrh r4, [r5, #0x10]
	movs r0, #0xe
	ldrsb r0, [r5, r0]
	bl GetROMChapterStruct
	adds r0, #0x8d
	ldrb r0, [r0]
	subs r0, #1
	cmp r4, r0
	blt _08086908
	ldr r5, _08086904 @ =0x0841D0DC
	adds r4, r7, #0
	adds r4, #0x34
	movs r0, #0x40
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #4
	adds r3, r5, #0
	bl Text_InsertDrawString
	b _08086948
	.align 2, 0
_08086900: .4byte gPlaySt
_08086904: .4byte 0x0841D0DC
_08086908:
	adds r4, r7, #0
	adds r4, #0x34
	ldrh r3, [r5, #0x10]
	adds r0, r4, #0
	movs r1, #0xa
	movs r2, #2
	bl Text_InsertDrawNumberOrBlank
	ldr r3, _08086958 @ =0x0841D0E8
	adds r0, r4, #0
	movs r1, #0x12
	movs r2, #0
	bl Text_InsertDrawString
	movs r0, #0xe
	ldrsb r0, [r5, r0]
	bl GetROMChapterStruct
	adds r0, #0x8d
	ldrb r3, [r0]
	subs r3, #1
	adds r0, r4, #0
	movs r1, #0x22
	movs r2, #2
	bl Text_InsertDrawNumberOrBlank
	ldr r3, _0808695C @ =0x0841D0EC
	adds r0, r4, #0
	movs r1, #0x2a
	movs r2, #0
	bl Text_InsertDrawString
_08086948:
	adds r1, r7, #0
	adds r1, #0x44
	movs r0, #1
_0808694E:
	strh r0, [r1]
_08086950:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08086958: .4byte 0x0841D0E8
_0808695C: .4byte 0x0841D0EC

	thumb_func_start sub_08086960
sub_08086960: @ 0x08086960
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r0, #0
	str r0, [r4, #0x58]
	adds r1, r4, #0
	adds r1, #0x55
	movs r0, #1
	strb r0, [r1]
	bl sub_0808512C
	adds r1, r4, #0
	adds r1, #0x50
	strb r0, [r1]
	ldr r0, _080869EC @ =0x08D8B134
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #3
	adds r1, r1, r0
	movs r0, #4
	ldrsb r0, [r1, r0]
	ldrb r1, [r1, #5]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_08085110
	adds r5, r0, #0
	ldr r0, _080869F0 @ =0x08D8B1A0
	bl Proc_Find
	cmp r0, #0
	beq _080869B0
	adds r1, r0, #0
	adds r1, #0x57
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	blt _080869B0
	cmp r0, r5
	beq _080869E4
_080869B0:
	adds r0, r4, #0
	adds r0, #0x57
	strb r5, [r0]
	adds r0, r4, #0
	bl sub_08086748
	ldr r1, _080869F4 @ =gBmSt
	ldrh r0, [r1, #0x14]
	adds r2, r4, #0
	adds r2, #0x4e
	strb r0, [r2]
	ldrh r0, [r1, #0x16]
	adds r3, r4, #0
	adds r3, #0x4f
	strb r0, [r3]
	ldrb r1, [r2]
	adds r0, r4, #0
	adds r0, #0x4c
	strb r1, [r0]
	ldrb r0, [r3]
	adds r1, r4, #0
	adds r1, #0x4d
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_080869E4:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080869EC: .4byte 0x08D8B134
_080869F0: .4byte 0x08D8B1A0
_080869F4: .4byte gBmSt

	thumb_func_start sub_080869F8
sub_080869F8: @ 0x080869F8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r1, #0
	mov sl, r2
	ldr r1, _08086B80 @ =0x08D8B134
	lsls r0, r0, #3
	adds r0, r0, r1
	movs r1, #4
	ldrsb r1, [r0, r1]
	mov r8, r1
	ldrb r0, [r0, #5]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	mov sb, r0
	cmp r1, #0
	bge _08086A66
	cmp r0, #0
	bge _08086A66
	ldr r4, _08086B84 @ =gBg1Tm
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r5, _08086B88 @ =gBg0Tm
	adds r0, r5, #0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #0x10
	subs r0, r0, r7
	lsls r0, r0, #6
	ldr r1, _08086B8C @ =0x02003764
	adds r0, r0, r1
	adds r1, r4, #0
	movs r2, #0xc
	adds r3, r7, #0
	bl TmCopyRect_thm
	movs r0, #0x12
	subs r0, r0, r7
	lsls r0, r0, #6
	ldr r1, _08086B90 @ =0x02003264
	adds r0, r0, r1
	adds r1, r5, #0
	movs r2, #0xc
	adds r3, r7, #0
	bl TmCopyRect_thm
_08086A66:
	mov r0, r8
	cmp r0, #0
	ble _08086AB6
	mov r1, sb
	cmp r1, #0
	bge _08086AB6
	ldr r4, _08086B94 @ =0x02023486
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r5, _08086B98 @ =0x02022C86
	adds r0, r5, #0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #0x10
	subs r0, r0, r7
	lsls r0, r0, #6
	ldr r1, _08086B8C @ =0x02003764
	adds r0, r0, r1
	adds r1, r4, #0
	movs r2, #0xc
	adds r3, r7, #0
	bl TmCopyRect_thm
	movs r0, #0x12
	subs r0, r0, r7
	lsls r0, r0, #6
	ldr r1, _08086B90 @ =0x02003264
	adds r0, r0, r1
	adds r1, r5, #0
	movs r2, #0xc
	adds r3, r7, #0
	bl TmCopyRect_thm
_08086AB6:
	mov r0, r8
	cmp r0, #0
	bge _08086B10
	mov r1, sb
	cmp r1, #0
	ble _08086B10
	ldr r5, _08086B9C @ =0x020237E0
	adds r0, r5, #0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r6, _08086BA0 @ =0x02022FE0
	adds r0, r6, #0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, _08086BA4 @ =0x020039E4
	movs r4, #1
	mov r1, sl
	subs r4, r4, r1
	lsls r4, r4, #1
	adds r4, #0x14
	subs r4, r4, r7
	lsls r4, r4, #6
	ldr r1, _08086BA8 @ =0xFFFFFC80
	adds r5, r5, r1
	adds r5, r4, r5
	adds r1, r5, #0
	movs r2, #0xc
	adds r3, r7, #0
	bl TmCopyRect_thm
	ldr r0, _08086BAC @ =0x02003564
	ldr r1, _08086BA8 @ =0xFFFFFC80
	adds r6, r6, r1
	adds r4, r4, r6
	adds r1, r4, #0
	movs r2, #0xc
	adds r3, r7, #0
	bl TmCopyRect_thm
_08086B10:
	mov r0, r8
	cmp r0, #0
	ble _08086B6A
	mov r1, sb
	cmp r1, #0
	ble _08086B6A
	ldr r5, _08086BB0 @ =0x02023806
	adds r0, r5, #0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r6, _08086BB4 @ =0x02023006
	adds r0, r6, #0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, _08086BA4 @ =0x020039E4
	movs r4, #1
	mov r1, sl
	subs r4, r4, r1
	lsls r4, r4, #1
	adds r4, #0x14
	subs r4, r4, r7
	lsls r4, r4, #6
	ldr r1, _08086BA8 @ =0xFFFFFC80
	adds r5, r5, r1
	adds r5, r4, r5
	adds r1, r5, #0
	movs r2, #0xc
	adds r3, r7, #0
	bl TmCopyRect_thm
	ldr r0, _08086BAC @ =0x02003564
	ldr r1, _08086BA8 @ =0xFFFFFC80
	adds r6, r6, r1
	adds r4, r4, r6
	adds r1, r4, #0
	movs r2, #0xc
	adds r3, r7, #0
	bl TmCopyRect_thm
_08086B6A:
	movs r0, #3
	bl EnableBgSync
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08086B80: .4byte 0x08D8B134
_08086B84: .4byte gBg1Tm
_08086B88: .4byte gBg0Tm
_08086B8C: .4byte 0x02003764
_08086B90: .4byte 0x02003264
_08086B94: .4byte 0x02023486
_08086B98: .4byte 0x02022C86
_08086B9C: .4byte 0x020237E0
_08086BA0: .4byte 0x02022FE0
_08086BA4: .4byte 0x020039E4
_08086BA8: .4byte 0xFFFFFC80
_08086BAC: .4byte 0x02003564
_08086BB0: .4byte 0x02023806
_08086BB4: .4byte 0x02023006

	thumb_func_start sub_08086BB8
sub_08086BB8: @ 0x08086BB8
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08086BFC @ =0x08D8B2D0
	ldr r0, [r4, #0x58]
	adds r0, r0, r1
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r4, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r4, #0
	adds r2, #0x44
	movs r3, #0
	ldrsh r2, [r2, r3]
	bl sub_080869F8
	ldr r0, [r4, #0x58]
	adds r0, #1
	str r0, [r4, #0x58]
	cmp r0, #5
	bne _08086BF6
	movs r0, #0
	str r0, [r4, #0x58]
	adds r1, r4, #0
	adds r1, #0x55
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08086BF6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08086BFC: .4byte 0x08D8B2D0

	thumb_func_start sub_08086C00
sub_08086C00: @ 0x08086C00
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r4, #0
	adds r6, #0x55
	movs r5, #0
	movs r0, #1
	strb r0, [r6]
	ldr r1, _08086C58 @ =0x08D8B2D5
	ldr r0, [r4, #0x58]
	adds r0, r0, r1
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r4, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r4, #0
	adds r2, #0x44
	movs r3, #0
	ldrsh r2, [r2, r3]
	bl sub_080869F8
	ldr r0, [r4, #0x58]
	adds r0, #1
	str r0, [r4, #0x58]
	cmp r0, #3
	bne _08086C50
	str r5, [r4, #0x58]
	strb r5, [r6]
	adds r0, r4, #0
	adds r0, #0x56
	strb r5, [r0]
	adds r1, r4, #0
	adds r1, #0x57
	movs r0, #0xff
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08086C50:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08086C58: .4byte 0x08D8B2D5

	thumb_func_start nullsub_71
nullsub_71: @ 0x08086C5C
	bx lr
	.align 2, 0

	thumb_func_start nullsub_72
nullsub_72: @ 0x08086C60
	bx lr
	.align 2, 0

	thumb_func_start nullsub_73
nullsub_73: @ 0x08086C64
	bx lr
	.align 2, 0

	thumb_func_start sub_08086C68
sub_08086C68: @ 0x08086C68
	push {r4, lr}
	adds r4, r0, #0
	adds r3, r4, #0
	adds r3, #0x4e
	ldrb r0, [r3]
	adds r2, r4, #0
	adds r2, #0x4c
	strb r0, [r2]
	movs r0, #0x4f
	adds r0, r0, r4
	mov ip, r0
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x4d
	strb r0, [r1]
	ldr r1, _08086CEC @ =gBmSt
	ldrh r0, [r1, #0x14]
	strb r0, [r3]
	ldrh r0, [r1, #0x16]
	mov r1, ip
	strb r0, [r1]
	ldr r0, _08086CF0 @ =0x0000FFFF
	adds r1, r0, #0
	ldrh r3, [r3]
	ands r1, r3
	ldrh r2, [r2]
	ands r0, r2
	cmp r1, r0
	beq _08086CE6
	ldr r0, _08086CF4 @ =0x08C020F4
	bl Proc_Find
	cmp r0, #0
	bne _08086CD8
	bl sub_0808512C
	adds r1, r0, #0
	adds r0, r4, #0
	adds r0, #0x50
	movs r2, #0
	ldrsb r2, [r0, r2]
	cmp r1, r2
	beq _08086CE6
	ldr r0, _08086CF8 @ =0x08D8B134
	lsls r1, r1, #3
	adds r3, r1, r0
	lsls r1, r2, #3
	adds r1, r1, r0
	ldrb r2, [r3, #4]
	ldrb r0, [r1, #4]
	cmp r2, r0
	bne _08086CD8
	ldrb r3, [r3, #5]
	ldrb r1, [r1, #5]
	cmp r3, r1
	beq _08086CE6
_08086CD8:
	adds r1, r4, #0
	adds r1, #0x56
	movs r0, #1
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08086CE6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08086CEC: .4byte gBmSt
_08086CF0: .4byte 0x0000FFFF
_08086CF4: .4byte 0x08C020F4
_08086CF8: .4byte 0x08D8B134

	thumb_func_start sub_08086CFC
sub_08086CFC: @ 0x08086CFC
	push {lr}
	ldr r0, _08086D44 @ =0x08D8B200
	bl Proc_Find
	cmp r0, #0
	beq _08086D14
	adds r0, #0x56
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _08086D40
_08086D14:
	ldr r0, _08086D48 @ =0x08D8B1A0
	bl Proc_Find
	cmp r0, #0
	beq _08086D2A
	adds r0, #0x56
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _08086D40
_08086D2A:
	ldr r0, _08086D4C @ =0x08D8B2D8
	bl Proc_Find
	cmp r0, #0
	beq _08086D50
	adds r0, #0x56
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _08086D50
_08086D40:
	movs r0, #1
	b _08086D52
	.align 2, 0
_08086D44: .4byte 0x08D8B200
_08086D48: .4byte 0x08D8B1A0
_08086D4C: .4byte 0x08D8B2D8
_08086D50:
	movs r0, #0
_08086D52:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08086D58
sub_08086D58: @ 0x08086D58
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08086D80 @ =0x0841D838
	ldr r1, _08086D84 @ =0x06015000
	bl sub_08013688
	adds r1, r4, #0
	adds r1, #0x46
	movs r2, #0
	movs r0, #0x88
	strh r0, [r1]
	adds r1, #2
	movs r0, #0x8c
	strh r0, [r1]
	adds r0, r4, #0
	adds r0, #0x56
	strb r2, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08086D80: .4byte 0x0841D838
_08086D84: .4byte 0x06015000

	thumb_func_start sub_08086D88
sub_08086D88: @ 0x08086D88
	push {r4, r5, lr}
	adds r3, r0, #0
	adds r5, r2, #0
	ldr r0, _08086E08 @ =0x08D8B134
	lsls r1, r1, #3
	adds r1, r1, r0
	movs r2, #4
	ldrsb r2, [r1, r2]
	movs r4, #5
	ldrsb r4, [r1, r4]
	cmp r2, #0
	bge _08086DB6
	cmp r4, #0
	bge _08086DB6
	adds r1, r3, #0
	adds r1, #0x46
	movs r0, #8
	strh r0, [r1]
	adds r1, r5, #0
	subs r1, #0x18
	adds r0, r3, #0
	adds r0, #0x48
	strh r1, [r0]
_08086DB6:
	cmp r2, #0
	ble _08086DD0
	cmp r4, #0
	bge _08086DD0
	adds r1, r3, #0
	adds r1, #0x46
	movs r0, #0x88
	strh r0, [r1]
	adds r1, r5, #0
	subs r1, #0x18
	adds r0, r3, #0
	adds r0, #0x48
	strh r1, [r0]
_08086DD0:
	cmp r2, #0
	bge _08086DE8
	cmp r4, #0
	ble _08086DE8
	adds r1, r3, #0
	adds r1, #0x46
	movs r0, #8
	strh r0, [r1]
	movs r0, #0xa0
	subs r0, r0, r5
	adds r1, #2
	strh r0, [r1]
_08086DE8:
	cmp r2, #0
	ble _08086E00
	cmp r4, #0
	ble _08086E00
	adds r1, r3, #0
	adds r1, #0x46
	movs r0, #0x88
	strh r0, [r1]
	movs r0, #0xa0
	subs r0, r0, r5
	adds r1, #2
	strh r0, [r1]
_08086E00:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08086E08: .4byte 0x08D8B134

	thumb_func_start sub_08086E0C
sub_08086E0C: @ 0x08086E0C
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _08086E8C @ =0x000001FF
	mov r8, r0
	adds r1, r4, #0
	ands r1, r0
	movs r0, #0xff
	ands r5, r0
	ldr r6, _08086E90 @ =0x08BFF7A8
	movs r0, #0xa0
	lsls r0, r0, #2
	str r0, [sp]
	movs r0, #4
	adds r2, r5, #0
	adds r3, r6, #0
	bl sub_08006884
	adds r1, r4, #0
	adds r1, #0x20
	mov r0, r8
	ands r1, r0
	movs r0, #0xa1
	lsls r0, r0, #2
	str r0, [sp]
	movs r0, #4
	adds r2, r5, #0
	adds r3, r6, #0
	bl sub_08006884
	adds r1, r4, #0
	adds r1, #0x40
	mov r0, r8
	ands r1, r0
	movs r0, #0xa2
	lsls r0, r0, #2
	str r0, [sp]
	movs r0, #4
	adds r2, r5, #0
	adds r3, r6, #0
	bl sub_08006884
	adds r4, #0x60
	mov r0, r8
	ands r4, r0
	ldr r3, _08086E94 @ =0x08BFF780
	movs r0, #0xa3
	lsls r0, r0, #2
	str r0, [sp]
	movs r0, #4
	adds r1, r4, #0
	adds r2, r5, #0
	bl sub_08006884
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08086E8C: .4byte 0x000001FF
_08086E90: .4byte 0x08BFF7A8
_08086E94: .4byte 0x08BFF780

	thumb_func_start sub_08086E98
sub_08086E98: @ 0x08086E98
	push {r4, r5, lr}
	adds r4, r0, #0
	bl sub_0808512C
	adds r1, r4, #0
	adds r1, #0x50
	movs r5, #0
	strb r0, [r1]
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	ldr r2, [r4, #0x58]
	adds r0, r4, #0
	bl sub_08086D88
	str r5, [r4, #0x58]
	ldr r1, _08086ED0 @ =gBmSt
	ldrh r0, [r1, #0x14]
	adds r2, r4, #0
	adds r2, #0x4e
	strb r0, [r2]
	ldrh r0, [r1, #0x16]
	adds r4, #0x4f
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08086ED0: .4byte gBmSt

	thumb_func_start sub_08086ED4
sub_08086ED4: @ 0x08086ED4
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, [r4, #0x58]
	adds r2, #4
	str r2, [r4, #0x58]
	adds r0, #0x50
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r4, #0
	bl sub_08086D88
	adds r0, r4, #0
	adds r0, #0x46
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r1, r4, #0
	adds r1, #0x48
	movs r2, #0
	ldrsh r1, [r1, r2]
	bl sub_08086E0C
	ldr r0, [r4, #0x58]
	cmp r0, #0x18
	bne _08086F12
	adds r0, r4, #0
	bl Proc_Break
	adds r1, r4, #0
	adds r1, #0x56
	movs r0, #0
	strb r0, [r1]
_08086F12:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_08086F18
sub_08086F18: @ 0x08086F18
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x46
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r1, r4, #0
	adds r1, #0x48
	movs r2, #0
	ldrsh r1, [r1, r2]
	bl sub_08086E0C
	adds r3, r4, #0
	adds r3, #0x4e
	ldrb r0, [r3]
	adds r2, r4, #0
	adds r2, #0x4c
	strb r0, [r2]
	movs r0, #0x4f
	adds r0, r0, r4
	mov ip, r0
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x4d
	strb r0, [r1]
	ldr r1, _08086FB0 @ =gBmSt
	ldrh r0, [r1, #0x14]
	strb r0, [r3]
	ldrh r0, [r1, #0x16]
	mov r1, ip
	strb r0, [r1]
	ldr r0, _08086FB4 @ =0x0000FFFF
	adds r1, r0, #0
	ldrh r3, [r3]
	ands r1, r3
	ldrh r2, [r2]
	ands r0, r2
	cmp r1, r0
	beq _08086FA8
	ldr r0, _08086FB8 @ =0x08C020F4
	bl Proc_Find
	cmp r0, #0
	bne _08086F9A
	bl sub_0808512C
	adds r1, r0, #0
	adds r0, r4, #0
	adds r0, #0x50
	movs r2, #0
	ldrsb r2, [r0, r2]
	cmp r1, r2
	beq _08086FA8
	ldr r0, _08086FBC @ =0x08D8B134
	lsls r1, r1, #3
	adds r3, r1, r0
	lsls r1, r2, #3
	adds r1, r1, r0
	ldrb r2, [r3, #4]
	ldrb r0, [r1, #4]
	cmp r2, r0
	bne _08086F9A
	ldrb r3, [r3, #5]
	ldrb r1, [r1, #5]
	cmp r3, r1
	beq _08086FA8
_08086F9A:
	adds r1, r4, #0
	adds r1, #0x56
	movs r0, #1
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08086FA8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08086FB0: .4byte gBmSt
_08086FB4: .4byte 0x0000FFFF
_08086FB8: .4byte 0x08C020F4
_08086FBC: .4byte 0x08D8B134

	thumb_func_start sub_08086FC0
sub_08086FC0: @ 0x08086FC0
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, [r4, #0x58]
	subs r2, #4
	str r2, [r4, #0x58]
	adds r0, #0x50
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r4, #0
	bl sub_08086D88
	adds r0, r4, #0
	adds r0, #0x46
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r1, r4, #0
	adds r1, #0x48
	movs r2, #0
	ldrsh r1, [r1, r2]
	bl sub_08086E0C
	ldr r1, [r4, #0x58]
	cmp r1, #0
	bne _08086FFC
	adds r0, r4, #0
	adds r0, #0x56
	strb r1, [r0]
	adds r0, r4, #0
	bl Proc_Break
_08086FFC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08087004
sub_08087004: @ 0x08087004
	push {lr}
	ldr r1, _08087024 @ =0x03007FF8
	movs r0, #1
	strh r0, [r1]
	bl SyncDispIo
	bl SyncBgsAndPal
	bl ApplyDataMoves
	bl SoundVSync_rev01
	bl m4aSoundMain
	pop {r0}
	bx r0
	.align 2, 0
_08087024: .4byte 0x03007FF8

	thumb_func_start sub_08087028
sub_08087028: @ 0x08087028
	push {r4, lr}
	ldr r4, _08087050 @ =gpKeySt
	ldr r0, [r4]
	bl RefreshKeySt
	ldr r1, [r4]
	movs r0, #9
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08087044
	movs r0, #0xff
	bl SoftReset
_08087044:
	bl VBlankIntrWait
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08087050: .4byte gpKeySt

	thumb_func_start sub_08087054
sub_08087054: @ 0x08087054
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x7c
	add r5, sp, #0x18
	bl ResetText
	bl InitTalkTextFont
	add r7, sp, #8
	add r0, sp, #0x10
	mov r8, r0
	mov r4, sp
	movs r6, #2
_08087070:
	adds r0, r4, #0
	movs r1, #0x16
	bl InitText
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	adds r4, #8
	subs r6, #1
	cmp r6, #0
	bge _08087070
	movs r1, #0
	str r1, [r5, #0x30]
	mov r0, sp
	str r0, [r5, #0x34]
	str r7, [r5, #0x38]
	mov r0, r8
	str r0, [r5, #0x3c]
	adds r0, r5, #0
	adds r0, #0x5c
	strh r1, [r0]
	ldr r0, _080870E0 @ =0x00000719
	bl DecodeMsg
	str r0, [r5, #0x2c]
	adds r0, r5, #0
	bl sub_0808356C
	ldr r4, _080870E4 @ =0x02022DE8
	mov r0, sp
	adds r1, r4, #0
	bl PutText
	adds r1, r4, #0
	adds r1, #0xc0
	adds r0, r7, #0
	bl PutText
	movs r0, #0xa0
	lsls r0, r0, #1
	adds r4, r4, r0
	mov r0, r8
	adds r1, r4, #0
	bl PutText
	movs r0, #1
	bl EnableBgSync
	add sp, #0x7c
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080870E0: .4byte 0x00000719
_080870E4: .4byte 0x02022DE8

	thumb_func_start sub_080870E8
sub_080870E8: @ 0x080870E8
	push {r4, r5, lr}
	sub sp, #8
	movs r0, #0
	bl InitBgs
	bl m4aSoundInit
	bl Proc_Init
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r5, _08087198 @ =gDispIo
	movs r0, #1
	ldrb r1, [r5, #1]
	orrs r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	subs r1, #0x10
	ands r0, r1
	subs r1, #0x20
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r5, #1]
	adds r1, r5, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r4, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x45
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	movs r0, #0
	bl SetOnHBlankA
	strh r4, [r5, #0x38]
	bl SyncDispIo
	str r4, [sp]
	movs r1, #0xc0
	lsls r1, r1, #0x13
	ldr r5, _0808719C @ =0x01000008
	mov r0, sp
	adds r2, r5, #0
	bl CpuFastSet
	str r4, [sp, #4]
	add r0, sp, #4
	ldr r1, _080871A0 @ =0x06008000
	adds r2, r5, #0
	bl CpuFastSet
	bl sub_08087054
	ldr r0, _080871A4 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08087188
	movs r0, #0x7b
	bl m4aSongNumStart
_08087188:
	ldr r0, _080871A8 @ =sub_08087028
	bl SetMainFunc
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08087198: .4byte gDispIo
_0808719C: .4byte 0x01000008
_080871A0: .4byte 0x06008000
_080871A4: .4byte gPlaySt
_080871A8: .4byte sub_08087028

	thumb_func_start sub_080871AC
sub_080871AC: @ 0x080871AC
	push {lr}
	ldr r1, _080871D4 @ =0x04000004
	movs r0, #8
	strh r0, [r1]
	ldr r1, _080871D8 @ =0x04000208
	movs r0, #1
	strh r0, [r1]
	movs r1, #0x80
	lsls r1, r1, #0x13
	movs r0, #0
	strh r0, [r1]
	ldr r0, _080871DC @ =sub_08087004
	bl SetOnVBlank
	ldr r0, _080871E0 @ =sub_080870E8
	bl SetMainFunc
	pop {r0}
	bx r0
	.align 2, 0
_080871D4: .4byte 0x04000004
_080871D8: .4byte 0x04000208
_080871DC: .4byte sub_08087004
_080871E0: .4byte sub_080870E8

	thumb_func_start sub_080871E4
sub_080871E4: @ 0x080871E4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08087200 @ =0x06014800
	movs r1, #9
	bl sub_08082F74
	ldr r0, _08087204 @ =0x08DAF58C
	adds r1, r4, #0
	bl sub_080829F4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08087200: .4byte 0x06014800
_08087204: .4byte 0x08DAF58C

	thumb_func_start sub_08087208
sub_08087208: @ 0x08087208
	push {r4, lr}
	movs r4, #1
_0808720C:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _08087222
	ldr r0, [r1]
	cmp r0, #0
	beq _08087222
	adds r0, r1, #0
	b _0808722A
_08087222:
	adds r4, #1
	cmp r4, #0x3f
	ble _0808720C
	movs r0, #0
_0808722A:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_08087230
sub_08087230: @ 0x08087230
	push {r4, lr}
	movs r4, #0x81
_08087234:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _0808725C
	ldr r1, [r2]
	cmp r1, #0
	beq _0808725C
	ldr r0, [r2, #4]
	ldr r1, [r1, #0x28]
	ldr r0, [r0, #0x28]
	orrs r1, r0
	movs r0, #0x80
	lsls r0, r0, #8
	ands r1, r0
	cmp r1, #0
	beq _0808725C
	adds r0, r2, #0
	b _08087264
_0808725C:
	adds r4, #1
	cmp r4, #0xbf
	ble _08087234
	movs r0, #0
_08087264:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0808726C
sub_0808726C: @ 0x0808726C
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #0x81
_08087272:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _08087296
	ldr r1, [r0]
	cmp r1, #0
	beq _08087296
	ldr r0, [r0, #4]
	ldr r1, [r1, #0x28]
	ldr r0, [r0, #0x28]
	orrs r1, r0
	movs r0, #0x80
	lsls r0, r0, #8
	ands r1, r0
	cmp r1, #0
	beq _08087296
	adds r5, #1
_08087296:
	adds r4, #1
	cmp r4, #0xbf
	ble _08087272
	adds r0, r5, #0
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_080872A4
sub_080872A4: @ 0x080872A4
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r6, #0
	adds r4, r5, #1
	b _080872D0
_080872AE:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _080872CC
	ldr r0, [r1]
	cmp r0, #0
	beq _080872CC
	ldr r0, [r1, #0xc]
	ldr r1, _080872E0 @ =0x0001000C
	ands r0, r1
	cmp r0, #0
	bne _080872CC
	adds r6, #1
_080872CC:
	adds r4, #1
	adds r0, r5, #0
_080872D0:
	adds r0, #0x40
	cmp r4, r0
	blt _080872AE
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080872E0: .4byte 0x0001000C

	thumb_func_start sub_080872E4
sub_080872E4: @ 0x080872E4
	push {r4, r5, lr}
	bl GetGameTime
	lsrs r1, r0, #1
	movs r2, #0x1f
	ands r1, r2
	ldr r0, _08087344 @ =0x0841BBB0
	adds r0, #0x5e
	ldrh r4, [r0]
	ldr r5, _08087348 @ =0x02022B56
	cmp r1, #0x10
	ble _08087304
	movs r0, #0xf
	ands r0, r1
	movs r1, #0x10
	subs r1, r1, r0
_08087304:
	movs r3, #0x1f
	adds r0, r4, #0
	ands r0, r2
	movs r2, #0x10
	subs r2, r2, r1
	adds r1, r0, #0
	muls r1, r2, r1
	asrs r1, r1, #4
	ands r1, r3
	movs r3, #0xf8
	lsls r3, r3, #2
	adds r0, r4, #0
	ands r0, r3
	muls r0, r2, r0
	asrs r0, r0, #4
	ands r0, r3
	adds r1, r1, r0
	movs r3, #0xf8
	lsls r3, r3, #7
	ands r4, r3
	adds r0, r4, #0
	muls r0, r2, r0
	asrs r0, r0, #4
	ands r0, r3
	adds r1, r1, r0
	strh r1, [r5]
	strh r1, [r5, #0x20]
	bl EnablePalSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08087344: .4byte 0x0841BBB0
_08087348: .4byte 0x02022B56

	thumb_func_start sub_0808734C
sub_0808734C: @ 0x0808734C
	push {lr}
	sub sp, #4
	adds r1, r0, #0
	cmp r1, #0
	beq _0808736A
	ldrb r0, [r1]
	cmp r0, #0
	beq _0808736A
_0808735C:
	ldrb r0, [r1]
	cmp r0, #0
	beq _0808736A
	cmp r0, #1
	bne _0808736E
	adds r0, r1, #1
	b _0808737A
_0808736A:
	movs r0, #0
	b _0808737A
_0808736E:
	adds r0, r1, #0
	mov r1, sp
	bl GetCharTextLen
	adds r1, r0, #0
	b _0808735C
_0808737A:
	add sp, #4
	pop {r1}
	bx r1

	thumb_func_start sub_08087380
sub_08087380: @ 0x08087380
	push {lr}
	sub sp, #4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080873A8
	movs r0, #0
	str r0, [sp]
	ldr r1, _080873A0 @ =0x02022C00
	ldr r2, _080873A4 @ =0x01000008
	mov r0, sp
	bl CpuFastSet
	bl EnablePalSync
	b _080873AC
	.align 2, 0
_080873A0: .4byte 0x02022C00
_080873A4: .4byte 0x01000008
_080873A8:
	bl ApplyUnitSpritePalettes
_080873AC:
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080873B4
sub_080873B4: @ 0x080873B4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	movs r0, #0
	bl InitBgs
	ldr r7, _080874CC @ =gDispIo
	movs r4, #4
	rsbs r4, r4, #0
	adds r2, r4, #0
	ldrb r0, [r7, #0x10]
	ands r2, r0
	movs r1, #1
	mov ip, r1
	mov r6, ip
	orrs r2, r6
	adds r1, r4, #0
	ldrb r0, [r7, #0x14]
	ands r1, r0
	movs r5, #2
	orrs r1, r5
	movs r3, #3
	ldrb r6, [r7, #0x18]
	orrs r3, r6
	adds r0, r4, #0
	ldrb r6, [r7, #0xc]
	ands r0, r6
	strb r0, [r7, #0xc]
	ands r2, r4
	mov r0, ip
	orrs r2, r0
	strb r2, [r7, #0x10]
	ands r1, r4
	orrs r1, r5
	strb r1, [r7, #0x14]
	ands r3, r4
	orrs r3, r5
	strb r3, [r7, #0x18]
	bl ResetText
	movs r5, #0
	movs r0, #0
	mov r1, r8
	strh r0, [r1, #0x3c]
	mov r0, r8
	adds r0, #0x3e
	strb r5, [r0]
	subs r0, #0x14
	strb r5, [r0]
	ldr r4, _080874D0 @ =0x0000FFFE
	ldr r2, _080874D4 @ =0x0000FFFC
	movs r0, #0
	adds r1, r4, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	adds r2, r4, #0
	bl SetBgOffset
	ldr r2, _080874D8 @ =0x0000FFEC
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	bl ClearBg0Bg1
	ldr r0, _080874DC @ =0x0841B080
	movs r1, #0x20
	movs r2, #0x60
	bl ApplyPaletteExt
	ldr r0, _080874E0 @ =0x0841ADDC
	ldr r1, _080874E4 @ =0x06005800
	bl sub_08013688
	ldr r0, _080874E8 @ =gBg2Tm
	ldr r1, _080874EC @ =0x0841B0E0
	movs r2, #0x96
	lsls r2, r2, #5
	bl TmApplyTsa_thm
	adds r1, r7, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x45
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
	movs r0, #0xf
	bl EnableBgSync
	mov r0, r8
	adds r0, #0x2d
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
	bl sub_08087208
	mov r4, r8
	str r0, [r4, #0x34]
	movs r0, #0
	bl sub_080872A4
	mov r1, r8
	adds r1, #0x2f
	strb r0, [r1]
	bl sub_080A0D74
	mov r1, r8
	adds r1, #0x2b
	strb r0, [r1]
	ldr r2, [r4, #0x34]
	ldr r1, [r2, #0xc]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080874F0
	movs r0, #3
	rsbs r0, r0, #0
	ands r1, r0
	str r1, [r2, #0xc]
	mov r1, r8
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	b _080874F6
	.align 2, 0
_080874CC: .4byte gDispIo
_080874D0: .4byte 0x0000FFFE
_080874D4: .4byte 0x0000FFFC
_080874D8: .4byte 0x0000FFEC
_080874DC: .4byte 0x0841B080
_080874E0: .4byte 0x0841ADDC
_080874E4: .4byte 0x06005800
_080874E8: .4byte gBg2Tm
_080874EC: .4byte 0x0841B0E0
_080874F0:
	mov r0, r8
	adds r0, #0x29
	strb r5, [r0]
_080874F6:
	bl sub_0808726C
	cmp r0, #0
	beq _08087508
	bl sub_08087230
	mov r6, r8
	str r0, [r6, #0x38]
	b _0808750C
_08087508:
	mov r1, r8
	str r0, [r1, #0x38]
_0808750C:
	movs r0, #0x80
	bl sub_080872A4
	mov r1, r8
	adds r1, #0x30
	strb r0, [r1]
	bl ApplyUnitSpritePalettes
	mov r4, r8
	adds r4, #0x34
	movs r5, #1
_08087522:
	ldr r0, [r4]
	cmp r0, #0
	beq _08087530
	bl GetUnitSMSId
	bl sub_08025278
_08087530:
	adds r4, #4
	subs r5, #1
	cmp r5, #0
	bge _08087522
	bl sub_08025A0C
	ldr r6, _080875F0 @ =gDispIo
	movs r0, #0x20
	ldrb r2, [r6, #1]
	orrs r0, r2
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r6, #1]
	adds r1, r6, #0
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x28
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x48
	strb r0, [r1]
	adds r4, r6, #0
	adds r4, #0x34
	movs r1, #1
	ldrb r0, [r4]
	orrs r0, r1
	movs r2, #2
	orrs r0, r2
	movs r5, #4
	orrs r0, r5
	movs r3, #8
	orrs r0, r3
	movs r2, #0x10
	orrs r0, r2
	strb r0, [r4]
	adds r0, r6, #0
	adds r0, #0x36
	ldrb r4, [r0]
	orrs r1, r4
	movs r4, #3
	rsbs r4, r4, #0
	ands r1, r4
	orrs r1, r5
	orrs r1, r3
	orrs r1, r2
	strb r1, [r0]
	mov r0, r8
	movs r1, #0
	movs r2, #0xe
	bl sub_0808068C
	ldr r0, _080875F4 @ =0x0841BC44
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x40
	bl ApplyPaletteExt
	movs r0, #0xc0
	movs r1, #0xe
	mov r2, r8
	bl sub_08082D1C
	ldr r0, _080875F8 @ =0x08D8B5A0
	mov r1, r8
	bl Proc_Start
	mov r0, r8
	bl sub_080AA0C0
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r6, #1]
	ands r0, r1
	ands r0, r4
	movs r1, #5
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r6, #1]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080875F0: .4byte gDispIo
_080875F4: .4byte 0x0841BC44
_080875F8: .4byte 0x08D8B5A0

	thumb_func_start sub_080875FC
sub_080875FC: @ 0x080875FC
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r5, _0808767C @ =0x020040CC
	ldr r0, _08087680 @ =0x02022F12
	movs r1, #3
	movs r2, #4
	movs r3, #0
	bl TmFillRect_thm
	adds r0, r5, #0
	adds r0, #8
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	adds r0, r5, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	cmp r4, #0
	bne _0808762C
	b _0808774C
_0808762C:
	ldr r0, [r4, #0xc]
	movs r1, #0xa0
	lsls r1, r1, #2
	ands r0, r1
	cmp r0, #0
	beq _08087688
	adds r0, r5, #0
	movs r1, #2
	bl Text_SetColor
	adds r0, r5, #0
	movs r1, #0x80
	bl Text_SetCursor
	ldr r4, _08087684 @ =0x0841D0F4
	adds r0, r5, #0
	adds r1, r4, #0
	bl Text_DrawString
	adds r0, r5, #0
	movs r1, #0xa0
	bl Text_SetCursor
	adds r0, r5, #0
	adds r1, r4, #0
	bl Text_DrawString
	adds r0, r5, #0
	movs r1, #0xb8
	bl Text_SetCursor
	adds r0, r5, #0
	adds r1, r4, #0
	bl Text_DrawString
	movs r0, #1
	bl sub_08087380
	b _08087786
	.align 2, 0
_0808767C: .4byte 0x020040CC
_08087680: .4byte 0x02022F12
_08087684: .4byte 0x0841D0F4
_08087688:
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetColor
	ldr r0, [r4]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_DrawString
	adds r0, r5, #0
	movs r1, #2
	bl Text_SetColor
	adds r0, r5, #0
	movs r1, #0x88
	bl Text_SetCursor
	movs r1, #8
	ldrsb r1, [r4, r1]
	adds r0, r5, #0
	bl Text_DrawNumberOrBlank
	adds r0, r4, #0
	bl GetUnitCurrentHp
	cmp r0, #0x63
	ble _080876DC
	adds r0, r5, #0
	movs r1, #0xa0
	bl Text_SetCursor
	ldr r1, _080876D8 @ =0x0841D0F4
	adds r0, r5, #0
	bl Text_DrawString
	b _080876F2
	.align 2, 0
_080876D8: .4byte 0x0841D0F4
_080876DC:
	adds r0, r5, #0
	movs r1, #0xa8
	bl Text_SetCursor
	adds r0, r4, #0
	bl GetUnitCurrentHp
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_DrawNumberOrBlank
_080876F2:
	adds r0, r4, #0
	bl GetUnitMaxHp
	cmp r0, #0x63
	ble _08087714
	adds r0, r5, #0
	movs r1, #0xb8
	bl Text_SetCursor
	ldr r1, _08087710 @ =0x0841D0F4
	adds r0, r5, #0
	bl Text_DrawString
	b _0808772A
	.align 2, 0
_08087710: .4byte 0x0841D0F4
_08087714:
	adds r0, r5, #0
	movs r1, #0xc0
	bl Text_SetCursor
	adds r0, r4, #0
	bl GetUnitMaxHp
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_DrawNumberOrBlank
_0808772A:
	adds r0, r4, #0
	bl GetUnitMiniPortraitId
	ldr r1, _08087748 @ =0x02022F12
	movs r2, #0xa0
	lsls r2, r2, #2
	movs r3, #0
	str r3, [sp]
	movs r3, #4
	bl sub_08006E10
	movs r0, #0
	bl sub_08087380
	b _08087786
	.align 2, 0
_08087748: .4byte 0x02022F12
_0808774C:
	adds r0, r5, #0
	movs r1, #2
	bl Text_SetColor
	adds r0, r5, #0
	movs r1, #0x80
	bl Text_SetCursor
	ldr r4, _080877E8 @ =0x0841D0F4
	adds r0, r5, #0
	adds r1, r4, #0
	bl Text_DrawString
	adds r0, r5, #0
	movs r1, #0xa0
	bl Text_SetCursor
	adds r0, r5, #0
	adds r1, r4, #0
	bl Text_DrawString
	adds r0, r5, #0
	movs r1, #0xb8
	bl Text_SetCursor
	adds r0, r5, #0
	adds r1, r4, #0
	bl Text_DrawString
_08087786:
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetColor
	adds r0, r5, #0
	movs r1, #0xaf
	bl Text_SetCursor
	ldr r1, _080877EC @ =0x0841D0FC
	adds r0, r5, #0
	bl Text_DrawString
	movs r0, #0
	bl SetTextFont
	movs r0, #1
	bl EnableBgSync
	ldr r2, _080877F0 @ =0x030027CC
	ldr r0, _080877F4 @ =0x0000FFE0
	ldrh r1, [r2]
	ands r0, r1
	ldr r1, _080877F8 @ =0x0000E0FF
	ands r0, r1
	movs r3, #0x80
	lsls r3, r3, #4
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	movs r1, #0x3f
	ldrb r0, [r2]
	ands r1, r0
	movs r0, #0x40
	orrs r1, r0
	movs r3, #0
	movs r0, #7
	strb r0, [r2, #8]
	strb r0, [r2, #9]
	strb r3, [r2, #0xa]
	subs r0, #0x28
	ands r1, r0
	strb r1, [r2]
	ldrb r1, [r2, #1]
	ands r0, r1
	strb r0, [r2, #1]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080877E8: .4byte 0x0841D0F4
_080877EC: .4byte 0x0841D0FC
_080877F0: .4byte 0x030027CC
_080877F4: .4byte 0x0000FFE0
_080877F8: .4byte 0x0000E0FF

	thumb_func_start sub_080877FC
sub_080877FC: @ 0x080877FC
	ldr r2, _08087818 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_08087818: .4byte gDispIo

	thumb_func_start sub_0808781C
sub_0808781C: @ 0x0808781C
	push {r4, lr}
	ldr r0, _08087858 @ =0x081901C8
	movs r1, #0xd0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r4, _0808785C @ =0x020040D4
	ldr r1, _08087860 @ =0x06017800
	adds r0, r4, #0
	movs r2, #0x1a
	bl InitSpriteTextFont
	adds r0, r4, #0
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	subs r4, #8
	adds r0, r4, #0
	bl InitSpriteText
	movs r0, #0
	bl SetTextFont
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08087858: .4byte 0x081901C8
_0808785C: .4byte 0x020040D4
_08087860: .4byte 0x06017800

	thumb_func_start sub_08087864
sub_08087864: @ 0x08087864
	push {r4, lr}
	ldr r4, _080878A0 @ =0x02022FA0
	adds r0, r4, #0
	movs r1, #0xf
	movs r2, #7
	movs r3, #0
	bl TmFillRect_thm
	adds r0, r4, #0
	adds r0, #0x18
	ldr r1, _080878A4 @ =gPlaySt
	ldrh r2, [r1, #0x10]
	movs r1, #2
	bl sub_08006068
	adds r4, #0x96
	bl GetGold
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	bl sub_08006068
	movs r0, #1
	bl EnableBgSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080878A0: .4byte 0x02022FA0
_080878A4: .4byte gPlaySt

	thumb_func_start sub_080878A8
sub_080878A8: @ 0x080878A8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	ldr r0, _08087904 @ =0x08D8B428
	bl sub_08005394
	adds r0, r6, #0
	bl sub_0808781C
	adds r0, r6, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	lsls r1, r0, #2
	adds r0, r6, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	bl sub_080875FC
	ldr r4, _08087908 @ =0x02023608
	adds r0, r6, #0
	adds r0, #0x2f
	ldrb r2, [r0]
	adds r0, r4, #0
	movs r1, #2
	bl sub_08006068
	ldr r0, _0808790C @ =gPlaySt
	ldrb r0, [r0, #0xd]
	cmp r0, #0
	beq _08087910
	adds r0, r4, #0
	adds r0, #0xa
	movs r1, #2
	movs r2, #0x14
	bl sub_08005FEC
	adds r0, r4, #0
	adds r0, #0xc
	movs r1, #2
	movs r2, #0x14
	bl sub_08005FEC
	b _08087920
	.align 2, 0
_08087904: .4byte 0x08D8B428
_08087908: .4byte 0x02023608
_0808790C: .4byte gPlaySt
_08087910:
	adds r0, r4, #0
	adds r0, #0xc
	adds r1, r6, #0
	adds r1, #0x30
	ldrb r2, [r1]
	movs r1, #2
	bl sub_08006068
_08087920:
	adds r7, r6, #0
	adds r7, #0x2c
	movs r0, #1
	strb r0, [r7]
	ldr r0, _0808799C @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetROMChapterStruct
	adds r0, #0x88
	ldrh r0, [r0]
	bl DecodeMsg
	adds r5, r0, #0
	ldr r0, _080879A0 @ =0x020040BC
	mov r8, r0
	movs r0, #0x60
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	mov r0, r8
	movs r2, #0
	adds r3, r5, #0
	bl Text_InsertDrawString
	adds r0, r5, #0
	bl sub_0808734C
	adds r5, r0, #0
	cmp r5, #0
	beq _0808797E
	mov r4, r8
	adds r4, #8
	movs r0, #0x60
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #0
	adds r3, r5, #0
	bl Text_InsertDrawString
	movs r0, #2
	strb r0, [r7]
_0808797E:
	ldrb r7, [r7]
	cmp r7, #2
	bne _080879A8
	ldr r4, _080879A4 @ =0x02022E64
	mov r0, r8
	adds r1, r4, #0
	bl PutText
	mov r0, r8
	adds r0, #8
	adds r4, #0x80
	adds r1, r4, #0
	bl PutText
	b _080879B0
	.align 2, 0
_0808799C: .4byte gPlaySt
_080879A0: .4byte 0x020040BC
_080879A4: .4byte 0x02022E64
_080879A8:
	ldr r1, _080879DC @ =0x02022EA4
	mov r0, r8
	bl PutText
_080879B0:
	adds r1, r6, #0
	adds r1, #0x2b
	ldrb r0, [r1]
	cmp r0, #0
	beq _080879C6
	ldr r0, _080879E0 @ =0x02022C92
	ldrb r2, [r1]
	adds r2, #1
	movs r1, #2
	bl sub_08006074
_080879C6:
	bl sub_08087864
	movs r0, #1
	bl EnableBgSync
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080879DC: .4byte 0x02022EA4
_080879E0: .4byte 0x02022C92

	thumb_func_start sub_080879E4
sub_080879E4: @ 0x080879E4
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r3, r5, #0
	adds r3, #0x2e
	ldrb r7, [r3]
	adds r4, r5, #0
	adds r4, #0x3e
	movs r0, #0
	strb r0, [r4]
	ldr r1, _08087A14 @ =gpKeySt
	ldr r6, [r1]
	ldrh r2, [r6, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r2
	cmp r0, #0
	beq _08087A18
	movs r0, #1
	strb r0, [r4]
	adds r0, r5, #0
	bl sub_080871E4
	b _08087AF2
	.align 2, 0
_08087A14: .4byte gpKeySt
_08087A18:
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	beq _08087A70
	ldrb r3, [r3]
	lsls r1, r3, #2
	adds r0, r5, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r2, [r0]
	cmp r2, #0
	beq _08087A4C
	ldr r0, [r2, #0xc]
	movs r1, #0xa0
	lsls r1, r1, #2
	ands r0, r1
	cmp r0, #0
	bne _08087A4C
	movs r0, #0xb
	ldrsb r0, [r2, r0]
	bl sub_080807D8
	adds r1, r5, #0
	adds r1, #0x2a
	movs r0, #1
	strb r0, [r1]
_08087A4C:
	ldr r0, _08087A68 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08087A5E
	ldr r0, _08087A6C @ =0x0000038A
	bl m4aSongNumStart
_08087A5E:
	adds r0, r5, #0
	movs r1, #1
	bl Proc_Goto
	b _08087AF2
	.align 2, 0
_08087A68: .4byte gPlaySt
_08087A6C: .4byte 0x0000038A
_08087A70:
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _08087A9C
	adds r0, r5, #0
	movs r1, #1
	bl Proc_Goto
	ldr r0, _08087A94 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08087AF2
	ldr r0, _08087A98 @ =0x0000038B
	bl m4aSongNumStart
	b _08087AF2
	.align 2, 0
_08087A94: .4byte gPlaySt
_08087A98: .4byte 0x0000038B
_08087A9C:
	movs r0, #0x20
	ldrh r6, [r6, #6]
	ands r0, r6
	cmp r0, #0
	beq _08087AB0
	ldrb r0, [r3]
	cmp r0, #0
	beq _08087AB0
	subs r0, #1
	strb r0, [r3]
_08087AB0:
	ldr r1, [r1]
	movs r0, #0x10
	ldrh r1, [r1, #6]
	ands r0, r1
	adds r4, r5, #0
	adds r4, #0x2e
	cmp r0, #0
	beq _08087ACA
	ldrb r0, [r4]
	cmp r0, #0
	bne _08087ACA
	adds r0, #1
	strb r0, [r4]
_08087ACA:
	ldrb r0, [r4]
	cmp r0, r7
	beq _08087AF2
	ldr r0, _08087AF8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08087AE2
	ldr r0, _08087AFC @ =0x00000386
	bl m4aSongNumStart
_08087AE2:
	ldrb r4, [r4]
	lsls r0, r4, #2
	adds r1, r5, #0
	adds r1, #0x34
	adds r1, r1, r0
	ldr r0, [r1]
	bl sub_080875FC
_08087AF2:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08087AF8: .4byte gPlaySt
_08087AFC: .4byte 0x00000386

	thumb_func_start sub_08087B00
sub_08087B00: @ 0x08087B00
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08087B28 @ =0x08D8B5A0
	bl sub_08004748
	bl sub_08082D74
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	beq _08087B22
	ldr r0, [r4, #0x34]
	ldr r1, [r0, #0xc]
	movs r2, #2
	orrs r1, r2
	str r1, [r0, #0xc]
_08087B22:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08087B28: .4byte 0x08D8B5A0

	thumb_func_start sub_08087B2C
sub_08087B2C: @ 0x08087B2C
	push {lr}
	adds r1, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	beq _08087B3E
	ldr r0, _08087B44 @ =0x08C02938
	bl Proc_StartBlocking
_08087B3E:
	pop {r0}
	bx r0
	.align 2, 0
_08087B44: .4byte 0x08C02938

	thumb_func_start sub_08087B48
sub_08087B48: @ 0x08087B48
	push {r4, lr}
	adds r4, r0, #0
	cmp r4, #0
	beq _08087B68
	ldr r0, _08087B64 @ =0x08D8B440
	adds r1, r4, #0
	bl Proc_StartBlocking
	adds r1, r0, #0
	adds r1, #0x3f
	movs r0, #0
	strb r0, [r1]
	b _08087B74
	.align 2, 0
_08087B64: .4byte 0x08D8B440
_08087B68:
	ldr r0, _08087B7C @ =0x08D8B440
	movs r1, #3
	bl Proc_Start
	adds r0, #0x3f
	strb r4, [r0]
_08087B74:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08087B7C: .4byte 0x08D8B440

	thumb_func_start sub_08087B80
sub_08087B80: @ 0x08087B80
	push {lr}
	adds r1, r0, #0
	ldr r0, _08087B94 @ =0x08D8B4F8
	bl Proc_StartBlocking
	adds r0, #0x3f
	movs r1, #1
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_08087B94: .4byte 0x08D8B4F8

	thumb_func_start sub_08087B98
sub_08087B98: @ 0x08087B98
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	ldr r5, [r4, #0x14]
	bl sub_08015A0C
	ldr r0, _08087C4C @ =0x0841BB50
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x60
	bl ApplyPaletteExt
	ldr r0, _08087C50 @ =0x0841BBB0
	movs r1, #0xb8
	lsls r1, r1, #2
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, _08087C54 @ =0x0841B594
	ldr r1, _08087C58 @ =0x06016000
	bl sub_08013688
	adds r4, #0x64
	movs r0, #0
	strh r0, [r4]
	movs r0, #0xc0
	lsls r0, r0, #2
	bl sub_080AA0E4
	adds r0, r5, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0
	bne _08087BF2
	ldr r2, _08087C5C @ =0x00000405
	movs r0, #3
	str r0, [sp]
	movs r0, #0x80
	lsls r0, r0, #4
	str r0, [sp, #4]
	movs r0, #0
	movs r1, #7
	movs r3, #0x17
	bl sub_080AA118
_08087BF2:
	adds r0, r5, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, #0
	beq _08087C12
	ldr r2, _08087C60 @ =0x00000404
	movs r0, #2
	str r0, [sp]
	movs r0, #0x80
	lsls r0, r0, #4
	str r0, [sp, #4]
	movs r0, #1
	movs r1, #0xc2
	movs r3, #5
	bl sub_080AA118
_08087C12:
	ldr r2, _08087C64 @ =0x0000044E
	movs r0, #6
	str r0, [sp]
	movs r0, #0x80
	lsls r0, r0, #4
	str r0, [sp, #4]
	movs r0, #2
	movs r1, #0x84
	movs r3, #0xd
	bl sub_080AA118
	movs r0, #0x80
	movs r1, #0x13
	bl sub_08082DB8
	movs r4, #0xb8
	lsls r4, r4, #4
	ldr r0, _08087C68 @ =gPlaySt
	bl sub_08082F30
	adds r1, r0, #0
	adds r0, r4, #0
	bl sub_08082E2C
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08087C4C: .4byte 0x0841BB50
_08087C50: .4byte 0x0841BBB0
_08087C54: .4byte 0x0841B594
_08087C58: .4byte 0x06016000
_08087C5C: .4byte 0x00000405
_08087C60: .4byte 0x00000404
_08087C64: .4byte 0x0000044E
_08087C68: .4byte gPlaySt

	thumb_func_start sub_08087C6C
sub_08087C6C: @ 0x08087C6C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	ldr r6, [r0, #0x14]
	adds r0, r6, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0
	bne _08087C90
	ldr r3, _08087DE8 @ =0x08D8B578
	str r0, [sp]
	movs r0, #4
	movs r1, #4
	movs r2, #8
	bl sub_08006884
_08087C90:
	adds r5, r6, #0
	adds r5, #0x2e
	ldrb r2, [r5]
	movs r0, #0x34
	adds r1, r2, #0
	muls r1, r0, r1
	adds r1, #0x80
	ldr r3, _08087DEC @ =0x08D8B40C
	movs r0, #0xf
	ands r2, r0
	lsls r2, r2, #0xc
	str r2, [sp]
	movs r0, #4
	movs r2, #0x1c
	bl sub_08006884
	ldr r3, _08087DF0 @ =0x08D8B398
	movs r4, #0
	str r4, [sp]
	movs r0, #4
	movs r1, #0x8a
	movs r2, #0x83
	bl sub_08006884
	ldr r3, _08087DF4 @ =0x08D8B3AE
	str r4, [sp]
	movs r0, #4
	movs r1, #0x8c
	movs r2, #0x26
	bl sub_08006884
	ldr r3, _08087DF8 @ =0x08D8B3BC
	str r4, [sp]
	movs r0, #4
	movs r1, #0xc0
	movs r2, #0x26
	bl sub_08006884
	ldr r3, _08087DFC @ =0x08D8B3CA
	str r4, [sp]
	movs r0, #4
	movs r1, #0x12
	movs r2, #0x6a
	bl sub_08006884
	ldr r3, _08087E00 @ =0x08D8B3E6
	str r4, [sp]
	movs r0, #4
	movs r1, #0x12
	movs r2, #0x7a
	bl sub_08006884
	ldr r3, _08087E04 @ =0x08D8B3EE
	str r4, [sp]
	movs r0, #4
	movs r1, #0x63
	movs r2, #0x7c
	bl sub_08006884
	ldr r3, _08087E08 @ =0x08D8B3D2
	str r4, [sp]
	movs r0, #4
	movs r1, #0x28
	movs r2, #0x30
	bl sub_08006884
	adds r7, r5, #0
	movs r0, #0x34
	adds r0, r0, r6
	mov r8, r0
	adds r6, #0x2b
	mov sb, r6
	ldr r6, _08087E0C @ =0x0000A3C0
	movs r5, #0xa0
	movs r4, #1
_08087D26:
	str r6, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x56
	ldr r3, _08087E10 @ =0x08BFF7A8
	bl sub_08006884
	adds r6, #4
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge _08087D26
	ldr r3, _08087E14 @ =0x08D8B3F6
	movs r4, #0
	str r4, [sp]
	movs r0, #4
	movs r1, #0x88
	movs r2, #0x5f
	bl sub_08006884
	ldr r3, _08087E10 @ =0x08BFF7A8
	ldr r0, _08087E18 @ =0x0000A3D0
	str r0, [sp]
	movs r0, #4
	movs r1, #0xb4
	movs r2, #0x60
	bl sub_08006884
	ldr r3, _08087E1C @ =0x08D8B3FE
	str r4, [sp]
	movs r0, #4
	movs r1, #0x88
	movs r2, #0x6c
	bl sub_08006884
	ldr r6, _08087E20 @ =0x0000A3D4
	movs r5, #0x9c
	movs r4, #1
_08087D72:
	str r6, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x6d
	ldr r3, _08087E10 @ =0x08BFF7A8
	bl sub_08006884
	adds r6, #4
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge _08087D72
	ldr r4, _08087E24 @ =0x02023086
	bl GetGameTime
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	movs r3, #0
	bl PutTime
	movs r0, #1
	bl EnableBgSync
	ldrb r7, [r7]
	lsls r0, r7, #2
	add r0, r8
	ldr r3, [r0]
	cmp r3, #0
	beq _08087DB8
	movs r0, #4
	movs r1, #0x88
	movs r2, #0x52
	bl sub_08026540
_08087DB8:
	bl sub_080259A4
	mov r1, sb
	ldrb r0, [r1]
	cmp r0, #0
	beq _08087DD4
	ldr r3, _08087E28 @ =0x08D8B3A6
	movs r0, #0
	str r0, [sp]
	movs r0, #4
	movs r1, #0xd4
	movs r2, #3
	bl sub_08006884
_08087DD4:
	bl sub_080872E4
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08087DE8: .4byte 0x08D8B578
_08087DEC: .4byte 0x08D8B40C
_08087DF0: .4byte 0x08D8B398
_08087DF4: .4byte 0x08D8B3AE
_08087DF8: .4byte 0x08D8B3BC
_08087DFC: .4byte 0x08D8B3CA
_08087E00: .4byte 0x08D8B3E6
_08087E04: .4byte 0x08D8B3EE
_08087E08: .4byte 0x08D8B3D2
_08087E0C: .4byte 0x0000A3C0
_08087E10: .4byte 0x08BFF7A8
_08087E14: .4byte 0x08D8B3F6
_08087E18: .4byte 0x0000A3D0
_08087E1C: .4byte 0x08D8B3FE
_08087E20: .4byte 0x0000A3D4
_08087E24: .4byte 0x02023086
_08087E28: .4byte 0x08D8B3A6

	thumb_func_start sub_08087E2C
sub_08087E2C: @ 0x08087E2C
	ldr r3, _08087E3C @ =0x0203E710
	lsls r0, r0, #0xa
	ldr r1, [r3, #0x48]
	ldr r2, _08087E40 @ =0x000003FF
	ands r1, r2
	orrs r1, r0
	str r1, [r3, #0x48]
	bx lr
	.align 2, 0
_08087E3C: .4byte 0x0203E710
_08087E40: .4byte 0x000003FF

	thumb_func_start sub_08087E44
sub_08087E44: @ 0x08087E44
	push {r4, lr}
	ldr r4, _08087E64 @ =0x0203E710
	ldr r3, [r4, #0x48]
	lsrs r2, r3, #0xa
	ldr r1, _08087E68 @ =0x003FFFFF
	ands r1, r0
	orrs r2, r1
	lsls r2, r2, #0xa
	ldr r0, _08087E6C @ =0x000003FF
	ands r0, r3
	orrs r0, r2
	str r0, [r4, #0x48]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08087E64: .4byte 0x0203E710
_08087E68: .4byte 0x003FFFFF
_08087E6C: .4byte 0x000003FF

	thumb_func_start sub_08087E70
sub_08087E70: @ 0x08087E70
	push {r4, lr}
	adds r4, r0, #0
	bl sub_08087E90
	adds r1, r0, #0
	ldr r0, _08087E8C @ =0x003FFFFF
	eors r0, r4
	ands r0, r1
	bl sub_08087E2C
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08087E8C: .4byte 0x003FFFFF

	thumb_func_start sub_08087E90
sub_08087E90: @ 0x08087E90
	ldr r0, _08087E98 @ =0x0203E710
	ldr r0, [r0, #0x48]
	lsrs r0, r0, #0xa
	bx lr
	.align 2, 0
_08087E98: .4byte 0x0203E710

	thumb_func_start sub_08087E9C
sub_08087E9C: @ 0x08087E9C
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	movs r2, #0x20
	orrs r1, r2
	ldr r2, _08087EB8 @ =0x0203E710
	lsls r1, r1, #8
	adds r1, #0x40
	adds r0, r0, r1
	adds r2, #0x4c
	strh r0, [r2]
	bx lr
	.align 2, 0
_08087EB8: .4byte 0x0203E710

	thumb_func_start sub_08087EBC
sub_08087EBC: @ 0x08087EBC
	ldr r0, _08087EC4 @ =0x0203E710
	adds r0, #0x4c
	ldrh r0, [r0]
	bx lr
	.align 2, 0
_08087EC4: .4byte 0x0203E710

	thumb_func_start sub_08087EC8
sub_08087EC8: @ 0x08087EC8
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r1, r1, #0x10
	ldr r2, _08087EDC @ =0x0203E710
	lsrs r1, r1, #8
	adds r0, r0, r1
	adds r2, #0x4e
	strh r0, [r2]
	bx lr
	.align 2, 0
_08087EDC: .4byte 0x0203E710

	thumb_func_start sub_08087EE0
sub_08087EE0: @ 0x08087EE0
	ldr r0, _08087EE8 @ =0x0203E710
	adds r0, #0x4e
	ldrh r0, [r0]
	bx lr
	.align 2, 0
_08087EE8: .4byte 0x0203E710

	thumb_func_start sub_08087EEC
sub_08087EEC: @ 0x08087EEC
	push {r4, r5, lr}
	ldr r0, _08087F4C @ =0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0xa0
	bls _08087EFE
	movs r4, #0
_08087EFE:
	ldr r0, _08087F50 @ =0x0203E710
	adds r5, r0, #0
	adds r5, #0x48
	ldrb r1, [r5]
	lsls r0, r1, #0x1b
	lsrs r0, r0, #0x18
	subs r0, #0x20
	cmp r4, r0
	bne _08087F20
	bl sub_08087EBC
	ldr r1, _08087F54 @ =0x04000050
	strh r0, [r1]
	bl sub_08087EE0
	ldr r1, _08087F58 @ =0x04000052
	strh r0, [r1]
_08087F20:
	cmp r4, #0
	beq _08087F32
	ldrh r5, [r5]
	lsls r0, r5, #0x16
	lsrs r0, r0, #0x1b
	lsls r0, r0, #3
	adds r0, #4
	cmp r4, r0
	bne _08087F46
_08087F32:
	ldr r2, _08087F54 @ =0x04000050
	ldr r1, _08087F5C @ =0x030027CC
	ldrh r0, [r1]
	strh r0, [r2]
	adds r2, #2
	ldrb r3, [r1, #9]
	lsls r0, r3, #8
	ldrb r1, [r1, #8]
	orrs r0, r1
	strh r0, [r2]
_08087F46:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08087F4C: .4byte 0x04000006
_08087F50: .4byte 0x0203E710
_08087F54: .4byte 0x04000050
_08087F58: .4byte 0x04000052
_08087F5C: .4byte 0x030027CC

	thumb_func_start sub_08087F60
sub_08087F60: @ 0x08087F60
	push {r4, r5, lr}
	sub sp, #0x40
	adds r3, r0, #0
	add r2, sp, #0x18
	ldr r1, [r3, #0x2c]
	adds r5, r2, #0
	ldrb r0, [r1]
	cmp r0, #0x80
	bne _08088006
	ldrb r0, [r1, #1]
	cmp r0, #0x23
	bne _08088006
	adds r0, r1, #2
	str r0, [r3, #0x2c]
	add r4, sp, #0x38
	b _08087F90
_08087F80:
	ldr r1, [r3, #0x2c]
	ldrb r0, [r1]
	strb r0, [r2]
	ldrb r0, [r1, #1]
	strb r0, [r2, #1]
	adds r0, r1, #2
	str r0, [r3, #0x2c]
	adds r2, #2
_08087F90:
	ldrb r1, [r1, #2]
	cmp r1, #1
	bne _08087F80
	ldr r0, [r3, #0x2c]
	adds r0, #1
	str r0, [r3, #0x2c]
	movs r0, #0
	strb r0, [r2]
	movs r0, #0x80
	lsls r0, r0, #9
	bl sub_08087E44
	ldr r1, _08088010 @ =0x06017800
	mov r0, sp
	movs r2, #0x12
	bl InitSpriteTextFont
	mov r0, sp
	bl SetTextFont
	adds r0, r4, #0
	bl InitSpriteText
	adds r0, r4, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	movs r0, #0
	bl SetTextFontGlyphs
	movs r0, #0x30
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #0
	adds r3, r5, #0
	bl Text_InsertDrawString
	movs r0, #0
	bl SetTextFont
	ldr r0, _08088014 @ =0x081901C8
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08088018 @ =0x08198D78
	movs r1, #0x88
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0808801C @ =0x08198CC8
	ldr r1, _08088020 @ =0x06017900
	bl sub_08013688
_08088006:
	add sp, #0x40
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08088010: .4byte 0x06017800
_08088014: .4byte 0x081901C8
_08088018: .4byte 0x08198D78
_0808801C: .4byte 0x08198CC8
_08088020: .4byte 0x06017900

	thumb_func_start sub_08088024
sub_08088024: @ 0x08088024
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	adds r6, r0, #0
	movs r0, #0
	str r0, [sp, #4]
	str r0, [sp, #8]
	adds r1, r6, #0
	adds r1, #0x55
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	bl sub_08087E90
	lsrs r0, r0, #0xb
	movs r1, #7
	ands r0, r1
	cmp r0, #0
	beq _0808805E
	bl sub_08087E90
	lsrs r0, r0, #0xb
	movs r1, #7
	ands r0, r1
	subs r0, #1
	b _08088062
_0808805E:
	bl GetTextPrintDelay
_08088062:
	adds r1, r6, #0
	adds r1, #0x52
	strb r0, [r1]
	movs r0, #0
	ldrsb r0, [r1, r0]
	movs r2, #0x7f
	cmp r0, #0
	beq _08088074
	movs r2, #1
_08088074:
	adds r0, r6, #0
	adds r0, #0x53
	movs r1, #0
	strb r2, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #0xa
	strb r1, [r0]
	adds r0, r6, #0
	bl sub_08087F60
	adds r0, r6, #0
	adds r0, #0x5b
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r7, r0, #0
	movs r0, #0x5c
	adds r0, r0, r6
	mov sb, r0
	cmp r1, #0
	blt _080880A8
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _080880DA
_080880A8:
	movs r0, #1
	bl SetTextFontGlyphs
	ldr r0, [r6, #0x2c]
	add r2, sp, #8
	add r1, sp, #4
	bl sub_08088884
	movs r0, #0
	bl SetTextFontGlyphs
	ldr r1, [sp, #4]
	adds r0, r1, #7
	cmp r0, #0
	bge _080880C8
	adds r0, #7
_080880C8:
	asrs r0, r0, #3
	strb r0, [r7]
	ldr r0, [sp, #8]
	cmp r0, #0
	bge _080880D4
	adds r0, #7
_080880D4:
	asrs r0, r0, #3
	mov r1, sb
	strb r0, [r1]
_080880DA:
	bl sub_08087E90
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _080880E8
	b _08088234
_080880E8:
	movs r2, #0x58
	adds r2, r2, r6
	mov r8, r2
	mov r3, sb
	movs r0, #0
	ldrsb r0, [r3, r0]
	ldrb r5, [r2]
	subs r0, r5, r0
	subs r0, #1
	str r0, [sp, #0x10]
	bl sub_08087E90
	movs r1, #2
	ands r1, r0
	cmp r1, #0
	beq _08088186
	adds r5, r6, #0
	adds r5, #0x57
	movs r0, #0
	ldrsb r0, [r7, r0]
	ldrb r1, [r5]
	subs r0, r1, r0
	subs r0, #2
	str r0, [sp, #0xc]
	bl sub_08087E90
	movs r2, #0xc0
	lsls r2, r2, #8
	mov sl, r2
	ands r0, r2
	lsrs r0, r0, #0xe
	movs r3, #0
	ldrsb r3, [r7, r3]
	ldrb r7, [r5]
	subs r1, r7, r3
	subs r1, #2
	mov r2, sb
	movs r4, #0
	ldrsb r4, [r2, r4]
	mov r7, r8
	ldrb r2, [r7]
	subs r2, r2, r4
	mov ip, r2
	subs r2, #1
	adds r3, #2
	adds r4, #2
	str r4, [sp]
	bl sub_08009AA8
	bl sub_08087E90
	movs r1, #0x80
	lsls r1, r1, #3
	ands r1, r0
	cmp r1, #0
	bne _080881F8
	bl sub_08087E90
	movs r1, #0x80
	lsls r1, r1, #0xb
	ands r1, r0
	movs r4, #3
	cmp r1, #0
	beq _0808816A
	movs r4, #5
_0808816A:
	bl sub_08087E90
	mov r3, sl
	ands r0, r3
	lsrs r0, r0, #0xe
	ldrb r1, [r5]
	subs r1, #1
	mov r5, r8
	ldrb r2, [r5]
	subs r2, #2
	adds r3, r4, #0
	bl sub_08009920
	b _080881F8
_08088186:
	adds r5, r6, #0
	adds r5, #0x57
	ldrb r0, [r5]
	adds r0, #1
	str r0, [sp, #0xc]
	bl sub_08087E90
	movs r1, #0xc0
	lsls r1, r1, #8
	mov sl, r1
	ands r0, r1
	lsrs r0, r0, #0xe
	ldrb r1, [r5]
	adds r1, #1
	mov r2, sb
	movs r4, #0
	ldrsb r4, [r2, r4]
	mov r3, r8
	ldrb r2, [r3]
	subs r2, r2, r4
	mov ip, r2
	subs r2, #1
	movs r3, #0
	ldrsb r3, [r7, r3]
	adds r3, #2
	adds r4, #2
	str r4, [sp]
	bl sub_08009AA8
	bl sub_08087E90
	movs r1, #0x80
	lsls r1, r1, #3
	ands r1, r0
	cmp r1, #0
	bne _080881F8
	bl sub_08087E90
	movs r1, #0x80
	lsls r1, r1, #0xb
	ands r1, r0
	movs r4, #2
	cmp r1, #0
	beq _080881E0
	movs r4, #5
_080881E0:
	bl sub_08087E90
	mov r3, sl
	ands r0, r3
	lsrs r0, r0, #0xe
	ldrb r1, [r5]
	mov r5, r8
	ldrb r2, [r5]
	subs r2, #2
	adds r3, r4, #0
	bl sub_08009920
_080881F8:
	bl sub_08087E90
	movs r1, #0x80
	lsls r1, r1, #9
	ands r1, r0
	cmp r1, #0
	beq _0808822E
	bl sub_08087E90
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #8
	ands r0, r1
	lsrs r0, r0, #0xe
	bl GetBgTilemap
	ldr r7, [sp, #0x10]
	lsls r1, r7, #6
	adds r0, r0, r1
	ldr r2, [sp, #0xc]
	lsls r1, r2, #1
	adds r0, r0, r1
	movs r1, #6
	movs r2, #0
	movs r3, #0
	bl TmFillRect_thm
_0808822E:
	movs r0, #0xf
	bl EnableBgSync
_08088234:
	adds r0, r6, #0
	bl sub_08088834
	ldr r0, _080882A8 @ =sub_08088A20
	adds r1, r6, #0
	bl sub_080AA20C
	ldr r0, [r6, #0x30]
	bl SetTextFont
	movs r0, #1
	bl SetTextFontGlyphs
	mov r3, sb
	movs r0, #0
	ldrsb r0, [r3, r0]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	movs r5, #0
	cmp r0, #0
	blt _08088286
_0808825E:
	lsls r0, r5, #2
	adds r4, r6, #0
	adds r4, #0x34
	adds r4, r4, r0
	ldr r0, [r4]
	bl InitSpriteText
	ldr r0, [r4]
	movs r1, #0xb
	bl Text_SetColor
	adds r5, #1
	mov r7, sb
	movs r0, #0
	ldrsb r0, [r7, r0]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	cmp r5, r0
	ble _0808825E
_08088286:
	adds r0, r6, #0
	bl sub_08088718
	movs r0, #0
	bl SetTextFont
	bl sub_08087E90
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _080882AC
	adds r0, r6, #0
	movs r1, #3
	bl Proc_Goto
	b _0808838C
	.align 2, 0
_080882A8: .4byte sub_08088A20
_080882AC:
	bl sub_08087E90
	movs r1, #0x80
	ands r1, r0
	cmp r1, #0
	beq _080882CA
	movs r0, #0x10
	movs r1, #1
	bl sub_08087EC8
	adds r0, r6, #0
	movs r1, #3
	bl Proc_Goto
	b _080882D2
_080882CA:
	movs r0, #0
	movs r1, #0x10
	bl sub_08087EC8
_080882D2:
	bl sub_08087E90
	movs r1, #0x80
	lsls r1, r1, #9
	ands r1, r0
	cmp r1, #0
	beq _08088300
	ldr r4, _080882FC @ =0x0203E710
	adds r3, r6, #0
	adds r3, #0x58
	ldrb r1, [r3]
	subs r1, #5
	adds r2, r4, #0
	adds r2, #0x48
	movs r0, #0x1f
	ands r1, r0
	movs r0, #0x20
	rsbs r0, r0, #0
	ldrb r5, [r2]
	ands r0, r5
	b _0808831A
	.align 2, 0
_080882FC: .4byte 0x0203E710
_08088300:
	ldr r4, _080883B4 @ =0x0203E710
	adds r3, r6, #0
	adds r3, #0x58
	ldrb r1, [r3]
	subs r1, #1
	adds r2, r4, #0
	adds r2, #0x48
	movs r0, #0x1f
	ands r1, r0
	movs r0, #0x20
	rsbs r0, r0, #0
	ldrb r7, [r2]
	ands r0, r7
_0808831A:
	orrs r0, r1
	strb r0, [r2]
	mov r0, sb
	movs r1, #0
	ldrsb r1, [r0, r1]
	ldrb r3, [r3]
	adds r1, r3, r1
	adds r1, #1
	adds r2, r4, #0
	adds r2, #0x48
	movs r3, #0x1f
	mov r8, r3
	mov r5, r8
	ands r1, r5
	lsls r1, r1, #5
	ldr r0, _080883B8 @ =0xFFFFFC1F
	ldrh r7, [r2]
	ands r0, r7
	orrs r0, r1
	strh r0, [r2]
	bl sub_08087E90
	movs r6, #0xc0
	lsls r6, r6, #8
	ands r0, r6
	lsrs r0, r0, #0xe
	movs r4, #1
	adds r5, r4, #0
	lsls r5, r0
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	bl sub_08087E90
	ands r0, r6
	lsrs r0, r0, #0xe
	lsls r4, r0
	mov r0, r8
	eors r4, r0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_08087E9C
	bl sub_08087E90
	movs r1, #0x80
	lsls r1, r1, #0xc
	ands r1, r0
	cmp r1, #0
	bne _0808838C
	movs r0, #0
	bl SetOnHBlankB
	ldr r0, _080883BC @ =sub_08087EEC
	bl SetOnHBlankB
_0808838C:
	bl sub_08087E90
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #8
	ands r0, r1
	lsrs r0, r0, #0xe
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080883B4: .4byte 0x0203E710
_080883B8: .4byte 0xFFFFFC1F
_080883BC: .4byte sub_08087EEC

	thumb_func_start sub_080883C0
sub_080883C0: @ 0x080883C0
	adds r0, #0x56
	movs r1, #0
	strb r1, [r0]
	bx lr

	thumb_func_start sub_080883C8
sub_080883C8: @ 0x080883C8
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x56
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r2, [r1]
	cmp r2, #0x10
	beq _080883E6
	movs r0, #0x10
	subs r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	b _080883E8
_080883E6:
	movs r1, #1
_080883E8:
	adds r0, r2, #0
	bl sub_08087EC8
	adds r0, r4, #0
	adds r0, #0x56
	ldrb r0, [r0]
	cmp r0, #0x10
	bne _080883FE
	adds r0, r4, #0
	bl Proc_Break
_080883FE:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_08088404
sub_08088404: @ 0x08088404
	push {r4, lr}
	adds r4, r0, #0
	bl sub_08088718
	movs r0, #0
	bl sub_08006C30
	movs r1, #0x11
	rsbs r1, r1, #0
	ands r1, r0
	movs r0, #0
	bl sub_08006C14
	bl sub_080893E0
	bl sub_08087E90
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _08088438
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
	b _08088440
_08088438:
	adds r1, r4, #0
	adds r1, #0x56
	movs r0, #0x10
	strb r0, [r1]
_08088440:
	bl sub_08087E90
	movs r1, #0x80
	lsls r1, r1, #0xa
	ands r1, r0
	cmp r1, #0
	beq _08088458
	ldr r0, _08088460 @ =0x08BFF970
	bl Proc_Find
	bl sub_080073F4
_08088458:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08088460: .4byte 0x08BFF970

	thumb_func_start sub_08088464
sub_08088464: @ 0x08088464
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x56
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	ldrb r2, [r1]
	cmp r2, #0x10
	beq _08088482
	movs r0, #0x10
	subs r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	b _08088484
_08088482:
	movs r1, #1
_08088484:
	adds r0, r2, #0
	bl sub_08087EC8
	adds r0, r4, #0
	adds r0, #0x56
	ldrb r0, [r0]
	cmp r0, #0
	bne _080884A2
	movs r0, #0x80
	lsls r0, r0, #9
	bl sub_08087E70
	adds r0, r4, #0
	bl Proc_Break
_080884A2:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080884A8
sub_080884A8: @ 0x080884A8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080884DC @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0xa
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080884D6
	bl sub_08087E90
	movs r1, #0x40
	ands r1, r0
	cmp r1, #0
	bne _080884D6
	bl sub_0800EF98
	bl sub_080893E0
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
_080884D6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080884DC: .4byte gpKeySt

	thumb_func_start sub_080884E0
sub_080884E0: @ 0x080884E0
	push {r4, lr}
	adds r4, r0, #0
	bl sub_08087E90
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #8
	ands r0, r1
	lsrs r0, r0, #0xe
	bl GetBgTilemap
	adds r1, r4, #0
	adds r1, #0x58
	ldrb r1, [r1]
	subs r1, #1
	lsls r1, r1, #6
	adds r0, r0, r1
	adds r4, #0x5c
	movs r2, #0
	ldrsb r2, [r4, r2]
	adds r2, #1
	movs r1, #0x1f
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #0xf
	bl EnableBgSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08088520
sub_08088520: @ 0x08088520
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	bl sub_08006C30
	movs r1, #0x11
	rsbs r1, r1, #0
	ands r1, r0
	movs r0, #0
	bl sub_08006C14
	adds r0, r4, #0
	bl sub_080884E0
	movs r0, #0
	bl SetOnHBlankB
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_08088548
sub_08088548: @ 0x08088548
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_08088718
	adds r0, r5, #0
	adds r0, #0x54
	movs r4, #0
	strb r4, [r0]
	movs r0, #1
	bl SetTextFontGlyphs
	adds r1, r5, #0
	adds r1, #0x59
	strb r4, [r1]
	adds r2, r5, #0
	adds r2, #0x5a
	strb r4, [r2]
	ldr r0, [r5, #0x2c]
	bl sub_080887B4
	movs r0, #0
	bl SetTextFontGlyphs
	adds r0, r5, #0
	bl sub_080893BC
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08088584
sub_08088584: @ 0x08088584
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	mov sl, r0
	str r1, [sp]
	str r2, [sp, #4]
	str r3, [sp, #8]
	ldr r7, [sp, #0x30]
	ldr r5, [sp, #0x34]
	ldr r6, _080885D8 @ =0x08D8B5F4
	adds r0, r6, #0
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	beq _080885E6
	ldr r0, [sp, #0x2c]
	bl DecodeMsg
	str r0, [r4, #0x2c]
	bl _080889FC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080885C2
	bl sub_08013374
	str r0, [r4, #0x2c]
_080885C2:
	adds r0, r4, #0
	adds r0, #0x56
	ldrb r0, [r0]
	cmp r0, #0x10
	bne _080885DC
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
	b _080886B0
	.align 2, 0
_080885D8: .4byte 0x08D8B5F4
_080885DC:
	adds r0, r4, #0
	movs r1, #2
	bl Proc_Goto
	b _080886B0
_080885E6:
	ldr r0, [sp, #0x38]
	cmp r0, #0
	beq _080885F6
	adds r0, r6, #0
	ldr r1, [sp, #0x38]
	bl Proc_StartBlocking
	b _080885FE
_080885F6:
	adds r0, r6, #0
	movs r1, #3
	bl Proc_Start
_080885FE:
	adds r4, r0, #0
	movs r0, #0x80
	lsls r0, r0, #7
	bl sub_08087E2C
	bl sub_08007F14
	ldr r0, _080886C0 @ =0x0203E710
	str r0, [r4, #0x30]
	adds r3, r4, #0
	adds r3, #0x57
	adds r6, r4, #0
	adds r6, #0x58
	movs r1, #0x5b
	adds r1, r1, r4
	mov ip, r1
	movs r1, #0x5c
	adds r1, r1, r4
	mov r8, r1
	movs r1, #0x50
	adds r1, r1, r4
	mov sb, r1
	adds r2, r4, #0
	adds r2, #0x34
	adds r0, #0x40
	adds r1, r4, #0
	adds r1, #0x48
_08088634:
	str r0, [r1]
	subs r0, #8
	subs r1, #4
	cmp r1, r2
	bge _08088634
	mov r0, sl
	strb r0, [r3]
	mov r1, sp
	ldrb r1, [r1]
	strb r1, [r6]
	mov r0, sp
	ldrb r1, [r0, #4]
	mov r0, ip
	strb r1, [r0]
	mov r0, sp
	ldrb r1, [r0, #8]
	mov r0, r8
	strb r1, [r0]
	str r7, [r4, #0x4c]
	cmp r5, #0
	bge _08088660
	movs r5, #5
_08088660:
	movs r6, #0xf
	adds r0, r6, #0
	ands r0, r5
	adds r5, r0, #0
	adds r5, #0x10
	cmp r7, #0
	bne _08088670
	ldr r7, _080886C4 @ =0x06013000
_08088670:
	ldr r0, [r4, #0x30]
	adds r1, r7, #0
	adds r2, r5, #0
	bl InitSpriteTextFont
	movs r0, #0
	bl SetTextFont
	ldr r0, _080886C8 @ =0x08190228
	lsls r1, r5, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	lsls r0, r7, #0x11
	lsrs r0, r0, #0x16
	ands r5, r6
	lsls r1, r5, #0xc
	adds r0, r0, r1
	mov r1, sb
	strh r0, [r1]
	ldr r0, [sp, #0x2c]
	bl DecodeMsg
	str r0, [r4, #0x2c]
	bl _080889FC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080886B0
	bl sub_08013374
	str r0, [r4, #0x2c]
_080886B0:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080886C0: .4byte 0x0203E710
_080886C4: .4byte 0x06013000
_080886C8: .4byte 0x08190228

	thumb_func_start sub_080886CC
sub_080886CC: @ 0x080886CC
	push {lr}
	ldr r0, _080886DC @ =0x08D8B5F4
	bl Proc_Find
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_080886DC: .4byte 0x08D8B5F4

	thumb_func_start sub_080886E0
sub_080886E0: @ 0x080886E0
	push {lr}
	ldr r0, _080886F0 @ =0x08D8B5F4
	bl Proc_Find
	cmp r0, #0
	bne _080886F4
	movs r0, #0
	b _080886F6
	.align 2, 0
_080886F0: .4byte 0x08D8B5F4
_080886F4:
	movs r0, #1
_080886F6:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080886FC
sub_080886FC: @ 0x080886FC
	push {lr}
	ldr r0, _08088714 @ =0x08D8B5F4
	bl Proc_Find
	cmp r0, #0
	beq _0808870E
	movs r1, #0
	bl Proc_Goto
_0808870E:
	pop {r0}
	bx r0
	.align 2, 0
_08088714: .4byte 0x08D8B5F4

	thumb_func_start sub_08088718
sub_08088718: @ 0x08088718
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x30]
	bl SetTextFont
	adds r0, r5, #0
	adds r0, #0x5c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	movs r4, #0
	cmp r0, #0
	blt _0808875C
_08088736:
	lsls r1, r4, #2
	adds r0, r5, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	adds r4, #1
	adds r0, r5, #0
	adds r0, #0x5c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	cmp r4, r0
	ble _08088736
_0808875C:
	movs r0, #0
	bl SetTextFont
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08088768
sub_08088768: @ 0x08088768
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x30]
	bl SetTextFont
	adds r0, r5, #0
	adds r0, #0x5c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	movs r4, #0
	cmp r0, #0
	blt _080887AC
_08088786:
	lsls r1, r4, #2
	adds r0, r5, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	movs r1, #0
	bl Text_SetCursor
	adds r4, #1
	adds r0, r5, #0
	adds r0, #0x5c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	cmp r4, r0
	ble _08088786
_080887AC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080887B4
sub_080887B4: @ 0x080887B4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r4, r0, #0
	mov r8, r1
	adds r7, r2, #0
	movs r6, #0
	ldrb r5, [r7]
	movs r0, #1
	bl SetTextFontGlyphs
_080887CC:
	ldrb r0, [r4]
	cmp r0, #7
	bgt _080887EE
	cmp r0, #4
	bge _08088800
	cmp r0, #1
	beq _08088804
	cmp r0, #1
	bgt _080887E4
	cmp r0, #0
	beq _08088820
	b _08088810
_080887E4:
	cmp r0, #2
	beq _08088800
	cmp r0, #3
	beq _08088820
	b _08088810
_080887EE:
	cmp r0, #0x19
	ble _080887F8
	cmp r0, #0x80
	beq _0808880C
	b _08088810
_080887F8:
	cmp r0, #0x18
	bge _08088820
	cmp r0, #0x16
	blt _08088810
_08088800:
	adds r4, #1
	b _080887CC
_08088804:
	adds r4, #1
	adds r5, #0x10
	movs r6, #0
	b _080887CC
_0808880C:
	adds r4, #2
	b _080887CC
_08088810:
	adds r0, r4, #0
	mov r1, sp
	bl GetCharTextLen
	adds r4, r0, #0
	ldr r0, [sp]
	adds r6, r6, r0
	b _080887CC
_08088820:
	mov r0, r8
	strb r6, [r0]
	strb r5, [r7]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08088834
sub_08088834: @ 0x08088834
	push {r4, lr}
	adds r4, r0, #0
	bl sub_08087E90
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	bne _0808887C
	bl sub_08087E90
	movs r1, #2
	ands r1, r0
	cmp r1, #0
	beq _08088862
	adds r1, r4, #0
	adds r1, #0x57
	adds r0, r4, #0
	adds r0, #0x5b
	ldrb r2, [r1]
	ldrb r0, [r0]
	subs r0, r2, r0
	subs r0, #1
	b _0808886A
_08088862:
	adds r1, r4, #0
	adds r1, #0x57
	ldrb r0, [r1]
	adds r0, #2
_0808886A:
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x58
	adds r1, r4, #0
	adds r1, #0x5c
	ldrb r2, [r0]
	ldrb r1, [r1]
	subs r1, r2, r1
	strb r1, [r0]
_0808887C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08088884
sub_08088884: @ 0x08088884
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r4, r0, #0
	mov r8, r1
	adds r7, r2, #0
	movs r5, #0
	movs r6, #0x10
	str r5, [r1]
	str r5, [r7]
	movs r0, #1
	bl SetTextFontGlyphs
_080888A0:
	ldrb r2, [r4]
	cmp r2, #0x19
	bhi _0808892C
	lsls r0, r2, #2
	ldr r1, _080888B0 @ =_080888B4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080888B0: .4byte _080888B4
_080888B4: @ jump table
	.4byte _0808891E @ case 0
	.4byte _0808891E @ case 1
	.4byte _0808891E @ case 2
	.4byte _0808891C @ case 3
	.4byte _0808892C @ case 4
	.4byte _0808892C @ case 5
	.4byte _0808892C @ case 6
	.4byte _0808892C @ case 7
	.4byte _0808892C @ case 8
	.4byte _0808892C @ case 9
	.4byte _0808892C @ case 10
	.4byte _0808892C @ case 11
	.4byte _0808892C @ case 12
	.4byte _0808892C @ case 13
	.4byte _0808892C @ case 14
	.4byte _0808892C @ case 15
	.4byte _0808892C @ case 16
	.4byte _0808892C @ case 17
	.4byte _0808892C @ case 18
	.4byte _0808892C @ case 19
	.4byte _0808892C @ case 20
	.4byte _0808892C @ case 21
	.4byte _0808892C @ case 22
	.4byte _0808892C @ case 23
	.4byte _0808891E @ case 24
	.4byte _0808891E @ case 25
_0808891C:
	adds r5, #8
_0808891E:
	mov r1, r8
	ldr r0, [r1]
	cmp r0, r5
	bge _08088928
	str r5, [r1]
_08088928:
	movs r5, #0
	ldrb r2, [r4]
_0808892C:
	cmp r2, #0x19
	bhi _080889B8
	lsls r0, r2, #2
	ldr r1, _0808893C @ =_08088940
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0808893C: .4byte _08088940
_08088940: @ jump table
	.4byte _080889AC @ case 0
	.4byte _080889A8 @ case 1
	.4byte _080889AC @ case 2
	.4byte _080889B8 @ case 3
	.4byte _080889B8 @ case 4
	.4byte _080889B8 @ case 5
	.4byte _080889B8 @ case 6
	.4byte _080889B8 @ case 7
	.4byte _080889B8 @ case 8
	.4byte _080889B8 @ case 9
	.4byte _080889B8 @ case 10
	.4byte _080889B8 @ case 11
	.4byte _080889B8 @ case 12
	.4byte _080889B8 @ case 13
	.4byte _080889B8 @ case 14
	.4byte _080889B8 @ case 15
	.4byte _080889B8 @ case 16
	.4byte _080889B8 @ case 17
	.4byte _080889B8 @ case 18
	.4byte _080889B8 @ case 19
	.4byte _080889B8 @ case 20
	.4byte _080889B8 @ case 21
	.4byte _080889B8 @ case 22
	.4byte _080889B8 @ case 23
	.4byte _080889A8 @ case 24
	.4byte _080889A8 @ case 25
_080889A8:
	adds r6, #0x10
	b _080889B8
_080889AC:
	ldr r0, [r7]
	cmp r0, r6
	bge _080889B4
	str r6, [r7]
_080889B4:
	movs r6, #0
	ldrb r2, [r4]
_080889B8:
	adds r0, r2, #0
	cmp r0, #7
	bgt _080889C8
	cmp r0, #1
	bge _080889D6
	cmp r0, #0
	beq _080889EE
	b _080889DE
_080889C8:
	cmp r2, #0x16
	blt _080889DE
	cmp r2, #0x19
	ble _080889D6
	cmp r2, #0x80
	beq _080889DA
	b _080889DE
_080889D6:
	adds r4, #1
	b _080888A0
_080889DA:
	adds r4, #2
	b _080888A0
_080889DE:
	adds r0, r4, #0
	mov r1, sp
	bl GetCharTextLen
	adds r4, r0, #0
	ldr r0, [sp]
	adds r5, r5, r0
	b _080888A0
_080889EE:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080889FC:
	ldrb r1, [r0]
	cmp r1, #0
	beq _08088A08
	cmp r1, #0x80
	beq _08088A0C
	b _08088A18
_08088A08:
	movs r0, #0
	b _08088A1C
_08088A0C:
	adds r0, #1
	ldrb r1, [r0]
	cmp r1, #0x20
	bne _08088A18
	movs r0, #1
	b _08088A1C
_08088A18:
	adds r0, #1
	b _080889FC
_08088A1C:
	bx lr
	.align 2, 0

	thumb_func_start sub_08088A20
sub_08088A20: @ 0x08088A20
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	mov r8, r0
	adds r0, #0x57
	ldrb r0, [r0]
	lsls r6, r0, #3
	mov r0, r8
	adds r0, #0x58
	ldrb r0, [r0]
	lsls r7, r0, #3
	movs r0, #0
	mov sb, r0
	bl sub_08087E90
	movs r1, #0x80
	lsls r1, r1, #1
	ands r1, r0
	rsbs r1, r1, #0
	asrs r1, r1, #0x1f
	movs r0, #0x80
	lsls r0, r0, #3
	ands r1, r0
	str r1, [sp, #4]
	bl sub_08087E90
	adds r1, r0, #0
	movs r2, #0xc0
	lsls r2, r2, #8
	ands r1, r2
	movs r0, #0x80
	lsls r0, r0, #7
	cmp r1, r0
	beq _08088A90
	cmp r1, r0
	bhi _08088A74
	cmp r1, #0
	beq _08088A82
	b _08088ABA
_08088A74:
	movs r0, #0x80
	lsls r0, r0, #8
	cmp r1, r0
	beq _08088AA0
	cmp r1, r2
	beq _08088AB0
	b _08088ABA
_08088A82:
	ldr r0, _08088A8C @ =gDispIo
	ldrh r1, [r0, #0x1c]
	subs r6, r6, r1
	ldrh r0, [r0, #0x1e]
	b _08088AB8
	.align 2, 0
_08088A8C: .4byte gDispIo
_08088A90:
	ldr r0, _08088A9C @ =gDispIo
	ldrh r2, [r0, #0x20]
	subs r6, r6, r2
	ldrh r0, [r0, #0x22]
	b _08088AB8
	.align 2, 0
_08088A9C: .4byte gDispIo
_08088AA0:
	ldr r0, _08088AAC @ =gDispIo
	ldrh r3, [r0, #0x24]
	subs r6, r6, r3
	ldrh r0, [r0, #0x26]
	b _08088AB8
	.align 2, 0
_08088AAC: .4byte gDispIo
_08088AB0:
	ldr r0, _08088B28 @ =gDispIo
	ldrh r4, [r0, #0x28]
	subs r6, r6, r4
	ldrh r0, [r0, #0x2a]
_08088AB8:
	subs r7, r7, r0
_08088ABA:
	bl sub_08087E90
	movs r1, #0x80
	lsls r1, r1, #9
	ands r1, r0
	cmp r1, #0
	beq _08088AFE
	adds r1, r6, #0
	subs r1, #0x10
	ldr r5, _08088B2C @ =0x000001FF
	ands r1, r5
	adds r2, r7, #0
	subs r2, #0x18
	movs r4, #0xff
	ands r2, r4
	ldr r3, _08088B30 @ =0x08D8B5C0
	ldr r0, _08088B34 @ =0x000013C8
	str r0, [sp]
	movs r0, #0
	bl sub_080068C4
	adds r1, r6, #0
	subs r1, #8
	ands r1, r5
	adds r2, r7, #0
	subs r2, #0x14
	ands r2, r4
	ldr r3, _08088B38 @ =0x08D8B5E6
	movs r0, #0x8f
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #0
	bl sub_080068C4
_08088AFE:
	movs r4, #0
	mov r0, r8
	adds r0, #0x5c
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsrs r2, r1, #0x1f
	adds r1, r1, r2
	asrs r1, r1, #1
	str r0, [sp, #0xc]
	movs r5, #0x50
	add r5, r8
	mov sl, r5
	movs r0, #0x5b
	add r8, r0
	cmp r4, r1
	bge _08088B90
_08088B1E:
	movs r1, #0
	mov sb, r1
	adds r2, r4, #1
	str r2, [sp, #0x10]
	b _08088B6C
	.align 2, 0
_08088B28: .4byte gDispIo
_08088B2C: .4byte 0x000001FF
_08088B30: .4byte 0x08D8B5C0
_08088B34: .4byte 0x000013C8
_08088B38: .4byte 0x08D8B5E6
_08088B3C:
	mov r3, sb
	lsls r1, r3, #5
	adds r1, r6, r1
	ldr r0, _08088BB8 @ =0x000001FF
	ands r1, r0
	lsls r2, r4, #4
	adds r2, r7, r2
	movs r0, #0xff
	ands r2, r0
	lsls r0, r3, #2
	mov r5, sl
	ldrh r5, [r5]
	adds r0, r5, r0
	lsls r3, r4, #6
	adds r0, r0, r3
	ldr r3, [sp, #4]
	adds r0, r0, r3
	str r0, [sp]
	movs r0, #2
	ldr r3, _08088BBC @ =0x08BFF7A8
	bl sub_080068C4
	movs r5, #1
	add sb, r5
_08088B6C:
	mov r1, r8
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bge _08088B78
	adds r0, #3
_08088B78:
	asrs r0, r0, #2
	cmp sb, r0
	blt _08088B3C
	ldr r4, [sp, #0x10]
	ldr r2, [sp, #0xc]
	movs r0, #0
	ldrsb r0, [r2, r0]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	cmp r4, r0
	blt _08088B1E
_08088B90:
	movs r0, #3
	mov r3, r8
	ldrb r3, [r3]
	ands r0, r3
	cmp r0, #0
	beq _08088C2E
	mov r4, r8
	movs r1, #0
	ldrsb r1, [r4, r1]
	adds r0, r1, #0
	cmp r1, #0
	bge _08088BAA
	adds r0, r1, #3
_08088BAA:
	asrs r0, r0, #2
	lsls r5, r0, #2
	str r5, [sp, #8]
	lsls r0, r0, #5
	adds r6, r6, r0
	movs r4, #0
	b _08088C1E
	.align 2, 0
_08088BB8: .4byte 0x000001FF
_08088BBC: .4byte 0x08BFF7A8
_08088BC0:
	movs r2, #0
	mov sb, r2
	adds r3, r4, #1
	str r3, [sp, #0x10]
	b _08088C00
_08088BCA:
	mov r5, sb
	lsls r1, r5, #3
	adds r1, r6, r1
	ldr r0, _08088C6C @ =0x000001FF
	ands r1, r0
	lsls r2, r4, #4
	adds r2, r7, r2
	movs r0, #0xff
	ands r2, r0
	mov r0, sl
	ldrh r3, [r0]
	ldr r0, [sp, #8]
	adds r3, r3, r0
	mov ip, r3
	mov r0, ip
	add r0, sb
	lsls r3, r4, #6
	adds r0, r0, r3
	ldr r3, [sp, #4]
	adds r0, r0, r3
	str r0, [sp]
	movs r0, #2
	ldr r3, _08088C70 @ =0x08BFF780
	bl sub_080068C4
	movs r5, #1
	add sb, r5
_08088C00:
	mov r0, r8
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r1, #0
	cmp r1, #0
	bge _08088C0E
	adds r0, r1, #3
_08088C0E:
	asrs r0, r0, #2
	lsls r0, r0, #2
	subs r0, r1, r0
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp sb, r0
	blt _08088BCA
	ldr r4, [sp, #0x10]
_08088C1E:
	ldr r1, [sp, #0xc]
	movs r0, #0
	ldrsb r0, [r1, r0]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	cmp r4, r0
	blt _08088BC0
_08088C2E:
	mov r2, sb
	lsls r1, r2, #5
	adds r1, r6, r1
	ldr r0, _08088C6C @ =0x000001FF
	ands r1, r0
	lsls r2, r4, #4
	adds r2, r7, r2
	movs r0, #0xff
	ands r2, r0
	ldr r3, _08088C74 @ =0x08BFF7A8
	mov r5, sb
	lsls r0, r5, #2
	mov r6, sl
	ldrh r6, [r6]
	adds r0, r6, r0
	lsls r4, r4, #6
	adds r0, r0, r4
	ldr r4, [sp, #4]
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #2
	bl sub_080068C4
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08088C6C: .4byte 0x000001FF
_08088C70: .4byte 0x08BFF780
_08088C74: .4byte 0x08BFF7A8

	thumb_func_start sub_08088C78
sub_08088C78: @ 0x08088C78
	push {lr}
	subs r0, #0x16
	cmp r0, #9
	bhi _08088D00
	lsls r0, r0, #2
	ldr r1, _08088C8C @ =_08088C90
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08088C8C: .4byte _08088C90
_08088C90: @ jump table
	.4byte _08088CB8 @ case 0
	.4byte _08088CBE @ case 1
	.4byte _08088CC4 @ case 2
	.4byte _08088CCA @ case 3
	.4byte _08088CD0 @ case 4
	.4byte _08088CD6 @ case 5
	.4byte _08088CE2 @ case 6
	.4byte _08088CE8 @ case 7
	.4byte _08088CEE @ case 8
	.4byte _08088CF4 @ case 9
_08088CB8:
	movs r0, #0
	movs r1, #0
	b _08088CDA
_08088CBE:
	movs r0, #0
	movs r1, #1
	b _08088CDA
_08088CC4:
	movs r0, #0
	movs r1, #3
	b _08088CDA
_08088CCA:
	movs r0, #0
	movs r1, #2
	b _08088CDA
_08088CD0:
	movs r0, #0
	movs r1, #4
	b _08088CDA
_08088CD6:
	movs r0, #0
	movs r1, #5
_08088CDA:
	bl sub_080078F4
	movs r0, #1
	b _08088D02
_08088CE2:
	movs r0, #0
	movs r1, #0
	b _08088CF8
_08088CE8:
	movs r0, #0
	movs r1, #2
	b _08088CF8
_08088CEE:
	movs r0, #0
	movs r1, #3
	b _08088CF8
_08088CF4:
	movs r0, #0
	movs r1, #4
_08088CF8:
	bl sub_08007974
	movs r0, #1
	b _08088D02
_08088D00:
	movs r0, #0
_08088D02:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08088D08
sub_08088D08: @ 0x08088D08
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	mov r8, r0
	ldr r6, [r0, #0x14]
	adds r0, r6, #0
	adds r0, #0x53
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	mov sl, r0
	ldr r0, _08088D44 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0xf3
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08088D5A
	bl sub_08087E90
	movs r1, #0x20
	ands r1, r0
	cmp r1, #0
	bne _08088D5A
	movs r0, #0x7f
	mov sl, r0
	b _08088D74
	.align 2, 0
_08088D44: .4byte gpKeySt
_08088D48:
	adds r1, r6, #0
	adds r1, #0x5f
	movs r0, #1
	strb r0, [r1]
	mov r0, r8
	movs r1, #1
	bl Proc_Goto
	b _08089274
_08088D5A:
	adds r1, r6, #0
	adds r1, #0x55
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	ble _08088D6C
	b _08089282
_08088D6C:
	adds r0, r6, #0
	adds r0, #0x52
	ldrb r0, [r0]
	strb r0, [r1]
_08088D74:
	ldr r0, [r6, #0x30]
	bl SetTextFont
	movs r0, #0
	bl sub_08006C30
	movs r1, #0x10
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	movs r0, #0
	movs r1, #3
	bl sub_080078F4
	movs r2, #0
	mov sb, r2
	cmp sb, sl
	blt _08088D9A
	b _08089274
_08088D9A:
	ldr r0, [r6, #0x2c]
	ldrb r1, [r0]
	adds r2, r0, #0
	cmp r1, #0x80
	bls _08088DA6
	b _080891EA
_08088DA6:
	lsls r0, r1, #2
	ldr r1, _08088DB0 @ =_08088DB4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08088DB0: .4byte _08088DB4
_08088DB4: @ jump table
	.4byte _08089068 @ case 0
	.4byte _08089096 @ case 1
	.4byte _08089106 @ case 2
	.4byte _08089148 @ case 3
	.4byte _080890C2 @ case 4
	.4byte _080890CC @ case 5
	.4byte _080890D6 @ case 6
	.4byte _080890E0 @ case 7
	.4byte _080891EA @ case 8
	.4byte _080891EA @ case 9
	.4byte _080891EA @ case 10
	.4byte _080891EA @ case 11
	.4byte _080891EA @ case 12
	.4byte _080891EA @ case 13
	.4byte _080891EA @ case 14
	.4byte _080891EA @ case 15
	.4byte _080891EA @ case 16
	.4byte _080891EA @ case 17
	.4byte _080891EA @ case 18
	.4byte _080891EA @ case 19
	.4byte _080891EA @ case 20
	.4byte _080891EA @ case 21
	.4byte _080890EA @ case 22
	.4byte _080890F8 @ case 23
	.4byte _08088FB8 @ case 24
	.4byte _08089018 @ case 25
	.4byte _080891EA @ case 26
	.4byte _080891EA @ case 27
	.4byte _080891EA @ case 28
	.4byte _080891EA @ case 29
	.4byte _080891EA @ case 30
	.4byte _080891EA @ case 31
	.4byte _080891EA @ case 32
	.4byte _080891EA @ case 33
	.4byte _080891EA @ case 34
	.4byte _080891EA @ case 35
	.4byte _080891EA @ case 36
	.4byte _080891EA @ case 37
	.4byte _080891EA @ case 38
	.4byte _080891EA @ case 39
	.4byte _080891EA @ case 40
	.4byte _080891EA @ case 41
	.4byte _080891EA @ case 42
	.4byte _080891EA @ case 43
	.4byte _080891EA @ case 44
	.4byte _080891EA @ case 45
	.4byte _080891EA @ case 46
	.4byte _080891EA @ case 47
	.4byte _080891EA @ case 48
	.4byte _080891EA @ case 49
	.4byte _080891EA @ case 50
	.4byte _080891EA @ case 51
	.4byte _080891EA @ case 52
	.4byte _080891EA @ case 53
	.4byte _080891EA @ case 54
	.4byte _080891EA @ case 55
	.4byte _080891EA @ case 56
	.4byte _080891EA @ case 57
	.4byte _080891EA @ case 58
	.4byte _080891EA @ case 59
	.4byte _080891EA @ case 60
	.4byte _080891EA @ case 61
	.4byte _080891EA @ case 62
	.4byte _080891EA @ case 63
	.4byte _080891EA @ case 64
	.4byte _080891EA @ case 65
	.4byte _080891EA @ case 66
	.4byte _080891EA @ case 67
	.4byte _080891EA @ case 68
	.4byte _080891EA @ case 69
	.4byte _080891EA @ case 70
	.4byte _080891EA @ case 71
	.4byte _080891EA @ case 72
	.4byte _080891EA @ case 73
	.4byte _080891EA @ case 74
	.4byte _080891EA @ case 75
	.4byte _080891EA @ case 76
	.4byte _080891EA @ case 77
	.4byte _080891EA @ case 78
	.4byte _080891EA @ case 79
	.4byte _080891EA @ case 80
	.4byte _080891EA @ case 81
	.4byte _080891EA @ case 82
	.4byte _080891EA @ case 83
	.4byte _080891EA @ case 84
	.4byte _080891EA @ case 85
	.4byte _080891EA @ case 86
	.4byte _080891EA @ case 87
	.4byte _080891EA @ case 88
	.4byte _080891EA @ case 89
	.4byte _080891EA @ case 90
	.4byte _080891EA @ case 91
	.4byte _080891EA @ case 92
	.4byte _080891EA @ case 93
	.4byte _080891EA @ case 94
	.4byte _080891EA @ case 95
	.4byte _080891EA @ case 96
	.4byte _080891EA @ case 97
	.4byte _080891EA @ case 98
	.4byte _080891EA @ case 99
	.4byte _080891EA @ case 100
	.4byte _080891EA @ case 101
	.4byte _080891EA @ case 102
	.4byte _080891EA @ case 103
	.4byte _080891EA @ case 104
	.4byte _080891EA @ case 105
	.4byte _080891EA @ case 106
	.4byte _080891EA @ case 107
	.4byte _080891EA @ case 108
	.4byte _080891EA @ case 109
	.4byte _080891EA @ case 110
	.4byte _080891EA @ case 111
	.4byte _080891EA @ case 112
	.4byte _080891EA @ case 113
	.4byte _080891EA @ case 114
	.4byte _080891EA @ case 115
	.4byte _080891EA @ case 116
	.4byte _080891EA @ case 117
	.4byte _080891EA @ case 118
	.4byte _080891EA @ case 119
	.4byte _080891EA @ case 120
	.4byte _080891EA @ case 121
	.4byte _080891EA @ case 122
	.4byte _080891EA @ case 123
	.4byte _080891EA @ case 124
	.4byte _080891EA @ case 125
	.4byte _080891EA @ case 126
	.4byte _080891EA @ case 127
	.4byte _080891CA @ case 128
_08088FB8:
	adds r4, r6, #0
	adds r4, #0x54
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	bl sub_08087E90
	movs r1, #0x80
	lsls r1, r1, #2
	ands r1, r0
	ldr r5, _08089010 @ =0x08D8B694
	cmp r1, #0
	beq _08088FD4
	ldr r5, _08089014 @ =0x08D8B68C
_08088FD4:
	movs r3, #0
	ldrsb r3, [r4, r3]
	lsls r1, r3, #2
	adds r0, r6, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r6, #0
	adds r0, #0x57
	ldrb r0, [r0]
	lsls r2, r0, #3
	adds r0, r6, #0
	adds r0, #0x58
	lsls r3, r3, #1
	ldrb r0, [r0]
	adds r3, r0, r3
	lsls r3, r3, #3
	movs r0, #0xb
	str r0, [sp]
	movs r0, #1
_08088FFC:
	str r0, [sp, #4]
	mov r0, r8
	str r0, [sp, #8]
	adds r0, r5, #0
	bl sub_080894EC
_08089008:
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	b _0808913E
	.align 2, 0
_08089010: .4byte 0x08D8B694
_08089014: .4byte 0x08D8B68C
_08089018:
	adds r4, r6, #0
	adds r4, #0x54
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	bl sub_08087E90
	movs r1, #0x80
	lsls r1, r1, #2
	ands r1, r0
	ldr r5, _08089060 @ =0x08D8B694
	cmp r1, #0
	beq _08089034
	ldr r5, _08089064 @ =0x08D8B68C
_08089034:
	movs r3, #0
	ldrsb r3, [r4, r3]
	lsls r1, r3, #2
	adds r0, r6, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r6, #0
	adds r0, #0x57
	ldrb r0, [r0]
	lsls r2, r0, #3
	adds r0, r6, #0
	adds r0, #0x58
	lsls r3, r3, #1
	ldrb r0, [r0]
	adds r3, r0, r3
	lsls r3, r3, #3
	movs r0, #0xb
	str r0, [sp]
	movs r0, #2
	b _08088FFC
	.align 2, 0
_08089060: .4byte 0x08D8B694
_08089064: .4byte 0x08D8B68C
_08089068:
	bl sub_08087E90
	movs r1, #4
	ands r1, r0
	cmp r1, #0
	beq _08089084
	movs r0, #4
	bl sub_08087E70
	adds r0, r6, #0
	movs r1, #4
	bl Proc_Goto
	b _0808908C
_08089084:
	adds r0, r6, #0
	movs r1, #0
	bl Proc_Goto
_0808908C:
	mov r0, r8
	movs r1, #0x63
	bl Proc_Goto
	b _0808913E
_08089096:
	adds r0, r2, #1
	str r0, [r6, #0x2c]
	adds r3, r6, #0
	adds r3, #0x54
	movs r2, #0
	ldrsb r2, [r3, r2]
	adds r2, #1
	adds r0, r6, #0
	adds r0, #0x5c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	cmp r2, r0
	blt _080890BA
	b _08088D48
_080890BA:
	ldrb r0, [r3]
	adds r0, #1
	strb r0, [r3]
	b _0808926A
_080890C2:
	adds r1, r6, #0
	adds r1, #0x55
	movs r0, #8
	strb r0, [r1]
	b _08089008
_080890CC:
	adds r1, r6, #0
	adds r1, #0x55
	movs r0, #0x10
	strb r0, [r1]
	b _08089008
_080890D6:
	adds r1, r6, #0
	adds r1, #0x55
	movs r0, #0x20
	strb r0, [r1]
	b _08089008
_080890E0:
	adds r1, r6, #0
	adds r1, #0x55
	movs r0, #0x80
	strb r0, [r1]
	b _08089008
_080890EA:
	adds r0, r2, #1
	str r0, [r6, #0x2c]
	ldr r0, _080890F4 @ =0x0000FFF7
	ands r7, r0
	b _0808926A
	.align 2, 0
_080890F4: .4byte 0x0000FFF7
_080890F8:
	adds r0, r2, #1
	str r0, [r6, #0x2c]
	movs r0, #8
	orrs r7, r0
	lsls r0, r7, #0x10
	lsrs r7, r0, #0x10
	b _0808926A
_08089106:
	adds r0, r2, #1
	str r0, [r6, #0x2c]
	ldrb r2, [r2, #1]
	cmp r2, #1
	bne _08089114
	adds r0, #1
	str r0, [r6, #0x2c]
_08089114:
	bl sub_08087E90
	movs r1, #8
	ands r1, r0
	cmp r1, #0
	beq _0808912A
	mov r0, r8
	movs r1, #2
	bl Proc_Goto
	b _0808913E
_0808912A:
	adds r0, r6, #0
	adds r0, #0x54
	ldrb r1, [r0]
	adds r1, #1
	adds r0, #0xb
	strb r1, [r0]
	mov r0, r8
	movs r1, #1
	bl Proc_Goto
_0808913E:
	ldr r0, _08089144 @ =0x0000FFEF
	ands r7, r0
	b _08089274
	.align 2, 0
_08089144: .4byte 0x0000FFEF
_08089148:
	ldr r0, _08089190 @ =0x0000FFEF
	ands r7, r0
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	bl sub_08087E90
	movs r1, #0x80
	lsls r1, r1, #1
	ands r1, r0
	cmp r1, #0
	beq _08089194
	adds r0, r6, #0
	adds r0, #0x57
	ldrb r0, [r0]
	lsls r1, r0, #3
	adds r5, r6, #0
	adds r5, #0x59
	ldrb r2, [r5]
	adds r1, r2, r1
	adds r1, #4
	adds r0, r6, #0
	adds r0, #0x58
	ldrb r0, [r0]
	lsls r2, r0, #3
	adds r4, r6, #0
	adds r4, #0x5a
	ldrb r0, [r4]
	adds r2, r0, r2
	adds r2, #8
	movs r3, #0x80
	lsls r3, r3, #3
	mov r0, r8
	bl sub_08009178
	b _080891BE
	.align 2, 0
_08089190: .4byte 0x0000FFEF
_08089194:
	adds r0, r6, #0
	adds r0, #0x57
	ldrb r0, [r0]
	lsls r1, r0, #3
	adds r5, r6, #0
	adds r5, #0x59
	ldrb r2, [r5]
	adds r1, r2, r1
	adds r1, #4
	adds r0, r6, #0
	adds r0, #0x58
	ldrb r0, [r0]
	lsls r2, r0, #3
	adds r4, r6, #0
	adds r4, #0x5a
	ldrb r0, [r4]
	adds r2, r0, r2
	adds r2, #8
	mov r0, r8
	bl sub_0800914C
_080891BE:
	adds r1, r5, #0
	adds r2, r4, #0
	ldr r0, [r6, #0x2c]
	bl sub_080887B4
	b _08089274
_080891CA:
	ldr r1, [r6, #0x2c]
	adds r0, r1, #1
	str r0, [r6, #0x2c]
	ldrb r1, [r1, #1]
	cmp r1, #0x21
	bne _080891E2
	adds r1, r6, #0
	adds r1, #0x5e
	movs r0, #1
	ldrb r2, [r1]
	subs r0, r0, r2
	strb r0, [r1]
_080891E2:
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	b _0808926A
_080891EA:
	adds r0, r6, #0
	adds r0, #0x5e
	ldrb r0, [r0]
	cmp r0, #0
	beq _0808920E
	adds r5, r6, #0
	adds r5, #0x54
	movs r0, #0
	ldrsb r0, [r5, r0]
	lsls r0, r0, #2
	adds r4, r6, #0
	adds r4, #0x34
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0xc
	bl Text_SetColor
	b _08089226
_0808920E:
	adds r5, r6, #0
	adds r5, #0x54
	movs r0, #0
	ldrsb r0, [r5, r0]
	lsls r0, r0, #2
	adds r4, r6, #0
	adds r4, #0x34
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0xb
	bl Text_SetColor
_08089226:
	movs r0, #0
	ldrsb r0, [r5, r0]
	lsls r0, r0, #2
	adds r0, r4, r0
	ldr r0, [r0]
	ldr r1, [r6, #0x2c]
	bl Text_DrawCharacter
	str r0, [r6, #0x2c]
	bl GetTextPrintDelay
	adds r4, r0, #0
	cmp r4, #1
	bne _0808924C
	bl GetGameTime
	ands r0, r4
	cmp r0, #0
	beq _0808926A
_0808924C:
	bl sub_08087E90
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	bne _0808926A
	ldr r0, _08089294 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808926A
	ldr r0, _08089298 @ =0x0000038E
	bl m4aSongNumStart
_0808926A:
	movs r0, #1
	add sb, r0
	cmp sb, sl
	bge _08089274
	b _08088D9A
_08089274:
	movs r0, #0
	bl SetTextFont
	movs r0, #0
	adds r1, r7, #0
	bl sub_08006C14
_08089282:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08089294: .4byte gPlaySt
_08089298: .4byte 0x0000038E

	thumb_func_start sub_0808929C
sub_0808929C: @ 0x0808929C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r1
	mov ip, r2
	adds r4, r0, #0
	movs r6, #0
	cmp r6, ip
	bge _080892F8
_080892B2:
	adds r1, r4, #0
	movs r2, #0
	adds r0, r6, #1
	mov sb, r0
	cmp r2, r8
	bge _080892EC
	mov r7, ip
	subs r7, #1
	mov sl, r2
_080892C4:
	adds r5, r2, #1
	movs r3, #6
_080892C8:
	ldr r0, [r1, #4]
	stm r1!, {r0}
	subs r3, #1
	cmp r3, #0
	bge _080892C8
	cmp r6, r7
	bne _080892DA
	mov r0, sl
	b _080892E4
_080892DA:
	adds r0, r2, #0
	adds r0, #0x20
	lsls r0, r0, #5
	adds r0, r0, r4
	ldr r0, [r0]
_080892E4:
	stm r1!, {r0}
	adds r2, r5, #0
	cmp r2, r8
	blt _080892C4
_080892EC:
	movs r0, #0x80
	lsls r0, r0, #3
	adds r4, r4, r0
	mov r6, sb
	cmp r6, ip
	blt _080892B2
_080892F8:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08089308
sub_08089308: @ 0x08089308
	adds r0, #0x4c
	movs r1, #0
	strh r1, [r0]
	bx lr

	thumb_func_start sub_08089310
sub_08089310: @ 0x08089310
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	ldr r5, [r7, #0x14]
	adds r6, r5, #0
	adds r6, #0x54
	movs r2, #0
	ldrsb r2, [r6, r2]
	adds r2, #1
	lsls r2, r2, #1
	ldr r0, [r5, #0x4c]
	adds r1, r5, #0
	adds r1, #0x5b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_0808929C
	adds r0, r7, #0
	adds r0, #0x4c
	ldrh r1, [r0]
	adds r1, #1
	movs r2, #0
	mov r8, r2
	strh r1, [r0]
	movs r2, #0
	ldrsh r1, [r0, r2]
	adds r4, r5, #0
	adds r4, #0x5f
	ldrb r2, [r4]
	lsls r0, r2, #4
	cmp r1, r0
	bne _0808938A
	adds r0, r5, #0
	bl sub_08088768
	ldrb r0, [r4]
	subs r0, #1
	ldrb r1, [r6]
	subs r0, r1, r0
	strb r0, [r6]
	adds r1, r5, #0
	adds r1, #0x59
	mov r2, r8
	strb r2, [r1]
	subs r4, #5
	strb r2, [r4]
	ldr r0, [r5, #0x2c]
	adds r2, r4, #0
	bl sub_080887B4
	movs r0, #0
	ldrsb r0, [r6, r0]
	lsls r0, r0, #4
	ldrb r1, [r4]
	adds r0, r1, r0
	strb r0, [r4]
	adds r0, r7, #0
	bl Proc_Break
_0808938A:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08089394
sub_08089394: @ 0x08089394
	push {r4, lr}
	ldr r4, [r0, #0x14]
	adds r0, r4, #0
	bl sub_08088718
	adds r1, r4, #0
	adds r1, #0x54
	movs r0, #0
	strb r0, [r1]
	adds r1, #5
	strb r0, [r1]
	adds r2, r4, #0
	adds r2, #0x5a
	strb r0, [r2]
	ldr r0, [r4, #0x2c]
	bl sub_080887B4
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080893BC
sub_080893BC: @ 0x080893BC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _080893DC @ =0x08D8B69C
	adds r0, r4, #0
	bl Proc_Find
	bl Proc_End
	adds r0, r4, #0
	adds r1, r5, #0
	bl Proc_Start
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080893DC: .4byte 0x08D8B69C

	thumb_func_start sub_080893E0
sub_080893E0: @ 0x080893E0
	push {lr}
	ldr r0, _080893F0 @ =0x08D8B69C
	bl Proc_Find
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_080893F0: .4byte 0x08D8B69C

	thumb_func_start sub_080893F4
sub_080893F4: @ 0x080893F4
	push {lr}
	bl sub_08087E90
	movs r1, #4
	ands r1, r0
	cmp r1, #0
	bne _08089406
	movs r0, #0
	b _08089408
_08089406:
	movs r0, #1
_08089408:
	pop {r1}
	bx r1

	thumb_func_start sub_0808940C
sub_0808940C: @ 0x0808940C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r1, _08089438 @ =gpKeySt
	ldr r0, [r1]
	ldrh r2, [r0, #8]
	movs r0, #2
	ands r0, r2
	adds r5, r1, #0
	cmp r0, #0
	beq _08089444
	ldr r0, _0808943C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08089432
	ldr r0, _08089440 @ =0x0000038B
	bl m4aSongNumStart
_08089432:
	movs r0, #0
	b _08089464
	.align 2, 0
_08089438: .4byte gpKeySt
_0808943C: .4byte gPlaySt
_08089440: .4byte 0x0000038B
_08089444:
	movs r6, #1
	adds r0, r6, #0
	ands r0, r2
	cmp r0, #0
	beq _08089478
	ldr r0, _08089470 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08089460
	ldr r0, _08089474 @ =0x0000038A
	bl m4aSongNumStart
_08089460:
	movs r1, #0x2a
	ldrsh r0, [r4, r1]
_08089464:
	bl sub_08009E6C
	adds r0, r4, #0
	bl Proc_Break
	b _080894DE
	.align 2, 0
_08089470: .4byte gPlaySt
_08089474: .4byte 0x0000038A
_08089478:
	movs r0, #0x20
	ands r0, r2
	cmp r0, #0
	beq _0808949A
	ldrh r2, [r4, #0x2a]
	cmp r2, #2
	bne _0808949A
	ldr r0, _080894E4 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08089498
	ldr r0, _080894E8 @ =0x00000387
	bl m4aSongNumStart
_08089498:
	strh r6, [r4, #0x2a]
_0808949A:
	ldr r1, [r5]
	movs r0, #0x10
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080894C2
	ldrh r0, [r4, #0x2a]
	cmp r0, #1
	bne _080894C2
	ldr r0, _080894E4 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080894BE
	ldr r0, _080894E8 @ =0x00000387
	bl m4aSongNumStart
_080894BE:
	movs r0, #2
	strh r0, [r4, #0x2a]
_080894C2:
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	movs r1, #0x2a
	ldrsh r2, [r4, r1]
	subs r2, #1
	lsls r1, r2, #2
	adds r1, r1, r2
	lsls r1, r1, #3
	adds r0, r0, r1
	subs r0, #4
	movs r2, #0x2e
	ldrsh r1, [r4, r2]
	bl sub_0804A740
_080894DE:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080894E4: .4byte gPlaySt
_080894E8: .4byte 0x00000387

	thumb_func_start sub_080894EC
sub_080894EC: @ 0x080894EC
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r5, r0, #0
	mov r8, r1
	adds r4, r2, #0
	mov sb, r3
	ldr r6, [sp, #0x1c]
	ldr r7, [sp, #0x24]
	ldr r0, [r5]
	bl DecodeMsg
	adds r3, r0, #0
	mov r0, r8
	movs r1, #0x10
	adds r2, r6, #0
	bl Text_InsertDrawString
	ldr r0, [r5, #4]
	bl DecodeMsg
	adds r3, r0, #0
	mov r0, r8
	movs r1, #0x38
	adds r2, r6, #0
	bl Text_InsertDrawString
	ldr r0, _08089548 @ =0x08D8B6FC
	adds r1, r7, #0
	bl Proc_StartBlocking
	mov r1, sp
	ldrh r1, [r1, #0x20]
	strh r1, [r0, #0x2a]
	adds r4, #0x10
	strh r4, [r0, #0x2c]
	mov r2, sb
	strh r2, [r0, #0x2e]
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08089548: .4byte 0x08D8B6FC

	thumb_func_start sub_0808954C
sub_0808954C: @ 0x0808954C
	push {r4, r5, lr}
	ldr r0, _080895B8 @ =0x0200D668
	bl InitUnitStack
	movs r5, #1
_08089556:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _0808957A
	ldr r0, [r4]
	cmp r0, #0
	beq _0808957A
	adds r0, r4, #0
	bl sub_0808E81C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808957A
	adds r0, r4, #0
	bl PushUnit
_0808957A:
	adds r5, #1
	cmp r5, #0x3f
	ble _08089556
	movs r5, #1
_08089582:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _080895A6
	ldr r0, [r4]
	cmp r0, #0
	beq _080895A6
	adds r0, r4, #0
	bl sub_0808E81C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080895A6
	adds r0, r4, #0
	bl PushUnit
_080895A6:
	adds r5, #1
	cmp r5, #0x3f
	ble _08089582
	bl LoadPlayerUnitsFromUnitStack
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080895B8: .4byte 0x0200D668

	thumb_func_start sub_080895BC
sub_080895BC: @ 0x080895BC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	lsls r1, r1, #0x18
	lsrs r7, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r6, r2, #0x18
	ldr r0, _08089634 @ =0x08D8BA04
	ldr r3, [r0]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0xd
	mov r1, r8
	adds r2, r7, #0
	bl sub_080068C4
	movs r5, #0
	subs r0, r6, #1
	cmp r5, r0
	bge _08089610
	mov r4, r8
	adds r4, #8
_080895F2:
	ldr r0, _08089634 @ =0x08D8BA04
	ldr r3, [r0, #4]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0xd
	adds r1, r4, #0
	adds r2, r7, #0
	bl sub_080068C4
	adds r4, #0x10
	adds r5, #1
	subs r0, r6, #1
	cmp r5, r0
	blt _080895F2
_08089610:
	lsls r1, r5, #4
	add r1, r8
	adds r1, #8
	ldr r0, _08089634 @ =0x08D8BA04
	ldr r3, [r0, #8]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0xd
	adds r2, r7, #0
	bl sub_080068C4
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08089634: .4byte 0x08D8BA04

	thumb_func_start sub_08089638
sub_08089638: @ 0x08089638
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldr r0, _08089694 @ =0x02023CC8
	movs r1, #4
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	ldr r4, _08089698 @ =0x0200D660
	adds r0, r4, #0
	bl ClearText
	movs r3, #0
	ldr r0, _0808969C @ =0x08D8BB00
	mov r8, r0
	adds r5, r4, #0
	mov sb, r8
_08089662:
	movs r2, #0
	lsls r1, r3, #3
	adds r6, r3, #1
	adds r1, r1, r3
	lsls r1, r1, #4
	mov r0, sb
	adds r0, #4
	adds r4, r1, r0
	add r1, r8
_08089674:
	ldrb r0, [r1]
	cmp r0, r7
	bne _080896C8
	cmp r3, #5
	bne _080896A0
	cmp r2, #0
	beq _080896A0
	adds r1, r2, #0
	adds r1, #0x6f
	ldr r0, _08089694 @ =0x02023CC8
	movs r2, #0xa0
	lsls r2, r2, #7
	bl PutIcon
	b _080896D2
	.align 2, 0
_08089694: .4byte 0x02023CC8
_08089698: .4byte 0x0200D660
_0808969C: .4byte 0x08D8BB00
_080896A0:
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetCursor
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetColor
	ldr r1, [r4]
	adds r0, r5, #0
	bl Text_DrawString
	adds r0, r5, #0
	ldr r1, _080896C4 @ =0x02023CC8
	bl PutText
	b _080896D2
	.align 2, 0
_080896C4: .4byte 0x02023CC8
_080896C8:
	adds r4, #0x10
	adds r1, #0x10
	adds r2, #1
	cmp r2, #8
	ble _08089674
_080896D2:
	adds r3, r6, #0
	cmp r3, #9
	ble _08089662
	movs r0, #4
	bl EnableBgSync
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080896EC
sub_080896EC: @ 0x080896EC
	adds r3, r0, #0
	movs r2, #0
	ldr r1, _08089710 @ =0x0200E66C
_080896F2:
	ldr r0, [r1]
	cmp r0, r3
	beq _0808971C
	adds r1, #4
	adds r2, #1
	cmp r2, #7
	ble _080896F2
	movs r2, #0
	ldr r1, _08089710 @ =0x0200E66C
_08089704:
	ldr r0, [r1]
	cmp r0, #0xff
	bne _08089714
	str r3, [r1]
	b _0808971C
	.align 2, 0
_08089710: .4byte 0x0200E66C
_08089714:
	adds r1, #4
	adds r2, #1
	cmp r2, #7
	ble _08089704
_0808971C:
	bx lr
	.align 2, 0

	thumb_func_start sub_08089720
sub_08089720: @ 0x08089720
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x28
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x14
	ldr r3, _080897D4 @ =0x0200E668
	movs r2, #0xff
	add r1, sp, #0x1c
_08089732:
	str r2, [r1]
	subs r1, #4
	cmp r1, sp
	bge _08089732
	cmp r0, #0
	ble _08089740
	subs r0, #1
_08089740:
	movs r6, #0
	ldrb r3, [r3]
	cmp r0, r3
	bge _08089786
	ldr r1, _080897D8 @ =0x0200CBF0
	adds r5, r0, #0
	mov r7, sp
	lsls r0, r5, #2
	adds r4, r0, r1
_08089752:
	ldr r0, [r4]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _08089772
	ldr r0, [r4]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_08017808
	str r0, [r7]
_08089772:
	adds r5, #1
	adds r7, #4
	adds r4, #4
	adds r6, #1
	cmp r6, #7
	bgt _08089786
	ldr r0, _080897D4 @ =0x0200E668
	ldrb r0, [r0]
	cmp r5, r0
	blt _08089752
_08089786:
	movs r6, #0
	ldr r7, _080897DC @ =0x0200E66C
	mov r8, r7
_0808978C:
	lsls r1, r6, #2
	mov r2, r8
	adds r0, r1, r2
	ldr r0, [r0]
	adds r4, r1, #0
	adds r6, #1
	cmp r0, #0xff
	beq _080897C4
	movs r5, #0
	adds r1, r0, #0
	mov r2, sp
	movs r3, #7
_080897A4:
	ldr r0, [r2]
	cmp r0, r1
	bne _080897AC
	movs r5, #1
_080897AC:
	adds r2, #4
	subs r3, #1
	cmp r3, #0
	bge _080897A4
	cmp r5, #0
	bne _080897C4
	adds r4, r4, r7
	ldr r0, [r4]
	bl ClearIcon
	movs r0, #0xff
	str r0, [r4]
_080897C4:
	cmp r6, #7
	ble _0808978C
	add sp, #0x28
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080897D4: .4byte 0x0200E668
_080897D8: .4byte 0x0200CBF0
_080897DC: .4byte 0x0200E66C

	thumb_func_start sub_080897E0
sub_080897E0: @ 0x080897E0
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, r1, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r0, r0, #0x18
	lsls r2, r2, #0x18
	lsrs r5, r2, #0x18
	lsrs r0, r0, #0x1b
	movs r1, #6
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r4, #0
	bne _08089848
	lsls r0, r5, #0x18
	asrs r2, r0, #0x18
	cmp r2, #0
	beq _08089830
	ldr r2, _08089824 @ =gBg2Tm
	ldr r0, _08089828 @ =0xFFFFF368
	adds r1, r3, r0
	movs r4, #0x80
	lsls r4, r4, #1
	adds r0, r2, r4
	strh r1, [r0]
	ldr r0, _0808982C @ =0xFFFFF36E
	adds r1, r3, r0
	movs r3, #0xa0
	lsls r3, r3, #1
	adds r0, r2, r3
	strh r1, [r0]
	b _0808988A
	.align 2, 0
_08089824: .4byte gBg2Tm
_08089828: .4byte 0xFFFFF368
_0808982C: .4byte 0xFFFFF36E
_08089830:
	ldr r1, _08089844 @ =gBg2Tm
	movs r4, #0x80
	lsls r4, r4, #1
	adds r0, r1, r4
	strh r2, [r0]
	movs r3, #0xa0
	lsls r3, r3, #1
	adds r0, r1, r3
	strh r2, [r0]
	b _0808988A
	.align 2, 0
_08089844: .4byte gBg2Tm
_08089848:
	lsls r0, r5, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _08089878
	ldr r2, _0808986C @ =gBg2Tm
	ldr r4, _08089870 @ =0xFFFFF768
	adds r0, r3, r4
	movs r4, #0x9d
	lsls r4, r4, #1
	adds r1, r2, r4
	strh r0, [r1]
	ldr r1, _08089874 @ =0xFFFFF76E
	adds r0, r3, r1
	movs r3, #0xbd
	lsls r3, r3, #1
	adds r1, r2, r3
	b _08089888
	.align 2, 0
_0808986C: .4byte gBg2Tm
_08089870: .4byte 0xFFFFF768
_08089874: .4byte 0xFFFFF76E
_08089878:
	ldr r1, _08089898 @ =gBg2Tm
	movs r4, #0x9d
	lsls r4, r4, #1
	adds r2, r1, r4
	strh r0, [r2]
	movs r2, #0xbd
	lsls r2, r2, #1
	adds r1, r1, r2
_08089888:
	strh r0, [r1]
_0808988A:
	movs r0, #4
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08089898: .4byte gBg2Tm

	thumb_func_start sub_0808989C
sub_0808989C: @ 0x0808989C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r4, r0, #0
	lsls r1, r1, #0x18
	lsrs r5, r1, #0x18
	cmp r1, #0
	beq _080898DE
	bl sub_0808E684
	b _080898E2
_080898B4:
	adds r0, r4, #0
	adds r0, #0x2c
	strb r3, [r0]
	strh r3, [r4, #0x3e]
	b _0808998C
_080898BE:
	adds r0, r4, #0
	adds r0, #0x2c
	strb r3, [r0]
	strh r1, [r4, #0x3e]
	b _0808998C
_080898C8:
	subs r1, r3, r1
	adds r0, r4, #0
	adds r0, #0x2c
	strb r1, [r0]
	b _0808998C
_080898D2:
	adds r1, r4, #0
	adds r1, #0x2c
	movs r0, #1
	strb r0, [r1]
	strh r7, [r4, #0x3e]
	b _0808998C
_080898DE:
	bl sub_080807CC
_080898E2:
	adds r1, r0, #0
	movs r3, #0
	ldr r0, _0808991C @ =0x0200E668
	ldrb r6, [r0]
	mov sb, r0
	cmp r3, r6
	bge _0808998C
	lsls r0, r5, #0x18
	asrs r0, r0, #0x18
	mov r8, r0
	movs r0, #0x2c
	adds r0, r0, r4
	mov ip, r0
	movs r5, #0x40
	rsbs r5, r5, #0
	movs r7, #0x10
	rsbs r7, r7, #0
	ldr r2, _08089920 @ =0x0200CBF0
_08089906:
	mov r0, r8
	cmp r0, #0
	beq _08089924
	ldr r0, [r2]
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	cmp r0, r1
	beq _08089932
	b _08089980
	.align 2, 0
_0808991C: .4byte 0x0200E668
_08089920: .4byte 0x0200CBF0
_08089924:
	ldr r0, [r2]
	ldr r0, [r0]
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, r1
	bne _08089980
_08089932:
	adds r0, r4, #0
	adds r0, #0x30
	movs r1, #0
	strb r3, [r0]
	cmp r3, #0
	beq _080898B4
	mov r0, sb
	ldrb r2, [r0]
	subs r0, r2, #1
	cmp r3, r0
	bne _0808995E
	cmp r2, #6
	bls _080898BE
	movs r0, #5
	mov r1, ip
	strb r0, [r1]
	mov r1, sb
	ldrb r0, [r1]
	subs r0, #6
	lsls r0, r0, #4
	strh r0, [r4, #0x3e]
	b _0808998C
_0808995E:
	ldrh r2, [r4, #0x3e]
	lsrs r1, r2, #4
	adds r0, r1, #0
	cmp r3, r0
	ble _0808996E
	adds r0, #5
	cmp r3, r0
	blt _080898C8
_0808996E:
	cmp r2, r7
	bgt _080898D2
	cmp r2, r5
	bge _0808998C
	movs r0, #4
	mov r1, ip
	strb r0, [r1]
	strh r5, [r4, #0x3e]
	b _0808998C
_08089980:
	adds r5, #0x10
	adds r7, #0x10
	adds r2, #4
	adds r3, #1
	cmp r3, r6
	blt _08089906
_0808998C:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08089998
sub_08089998: @ 0x08089998
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x18
	asrs r2, r0, #0x18
	cmp r2, #0
	beq _08089A3C
	ldr r0, _08089A38 @ =gDispIo
	mov ip, r0
	movs r0, #0x20
	mov r1, ip
	ldrb r1, [r1, #1]
	orrs r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r2, ip
	strb r0, [r2, #1]
	mov r0, ip
	adds r0, #0x2d
	movs r2, #0
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x31
	movs r0, #0x38
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x2c
	movs r3, #0xf0
	strb r3, [r0]
	subs r1, #1
	movs r0, #0x98
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x2f
	strb r2, [r0]
	adds r0, #4
	strb r2, [r0]
	subs r0, #5
	strb r3, [r0]
	adds r1, #2
	movs r0, #0x20
	strb r0, [r1]
	adds r1, #2
	movs r0, #1
	ldrb r3, [r1]
	orrs r0, r3
	movs r4, #2
	orrs r0, r4
	movs r3, #4
	orrs r0, r3
	movs r2, #8
	orrs r0, r2
	movs r5, #0x10
	orrs r0, r5
	strb r0, [r1]
	mov r6, ip
	adds r6, #0x35
	movs r1, #2
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r7, [r6]
	ands r0, r7
	orrs r0, r4
	orrs r0, r3
	orrs r0, r2
	orrs r0, r5
	strb r0, [r6]
	mov r5, ip
	adds r5, #0x36
	ldrb r0, [r5]
	ands r1, r0
	orrs r1, r4
	orrs r1, r3
	orrs r1, r2
	movs r0, #0x11
	rsbs r0, r0, #0
	ands r1, r0
	strb r1, [r5]
	b _08089A9C
	.align 2, 0
_08089A38: .4byte gDispIo
_08089A3C:
	ldr r1, _08089AA4 @ =gDispIo
	mov ip, r1
	movs r0, #0x20
	ldrb r3, [r1, #1]
	orrs r0, r3
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r6, ip
	strb r0, [r6, #1]
	mov r0, ip
	adds r0, #0x2d
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x31
	movs r0, #0x38
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x98
	strb r0, [r1]
	adds r1, #4
	movs r0, #1
	ldrb r7, [r1]
	orrs r0, r7
	movs r5, #2
	orrs r0, r5
	movs r4, #4
	orrs r0, r4
	movs r3, #8
	orrs r0, r3
	movs r2, #0x10
	orrs r0, r2
	strb r0, [r1]
	adds r1, #2
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r6, [r1]
	ands r0, r6
	orrs r0, r5
	orrs r0, r4
	orrs r0, r3
	orrs r0, r2
	strb r0, [r1]
_08089A9C:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08089AA4: .4byte gDispIo

	thumb_func_start sub_08089AA8
sub_08089AA8: @ 0x08089AA8
	push {r4, lr}
	adds r4, r0, #0
	bl MU_EndAll
	ldr r0, [r4, #0x40]
	bl Proc_End
	ldr r0, [r4, #0x44]
	bl Proc_End
	bl sub_08005EAC
	ldr r2, _08089AE8 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r0, r4, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	bne _08089AEC
	movs r0, #0x11
	bl sub_080807E4
	b _08089AF2
	.align 2, 0
_08089AE8: .4byte gDispIo
_08089AEC:
	movs r0, #0x1f
	bl sub_080807E4
_08089AF2:
	ldr r1, _08089B2C @ =0x0200CBF0
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	adds r1, r4, #0
	bl sub_080821F8
	ldr r1, _08089B30 @ =gPlaySt
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r0, [r0]
	lsls r0, r0, #7
	adds r2, r4, #0
	adds r2, #0x32
	ldrb r2, [r2]
	adds r0, r2, r0
	strb r0, [r1, #0x1a]
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #4
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08089B2C: .4byte 0x0200CBF0
_08089B30: .4byte gPlaySt

	thumb_func_start sub_08089B34
sub_08089B34: @ 0x08089B34
	push {lr}
	bl sub_0808A0F4
	ldr r2, _08089B5C @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	pop {r0}
	bx r0
	.align 2, 0
_08089B5C: .4byte gDispIo

	thumb_func_start sub_08089B60
sub_08089B60: @ 0x08089B60
	ldr r2, _08089B7C @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_08089B7C: .4byte gDispIo

	thumb_func_start sub_08089B80
sub_08089B80: @ 0x08089B80
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x14]
	str r0, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x3b
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r0, [r4, #0x2c]
	ldrh r0, [r0, #0x3e]
	strh r0, [r4, #0x38]
	adds r0, r4, #0
	adds r0, #0x3a
	strb r1, [r0]
	subs r0, #0xa
	strb r1, [r0]
	adds r0, r4, #0
	bl sub_08090DD0
	str r0, [r4, #0x34]
	movs r0, #0xe0
	movs r1, #0x40
	bl sub_08090DE4
	ldr r0, [r4, #0x2c]
	ldrh r1, [r0, #0x3e]
	ldr r0, _08089BD8 @ =0x0200E668
	ldrb r2, [r0]
	movs r0, #0xa
	movs r3, #6
	bl sub_08090E04
	movs r0, #0xe4
	lsls r0, r0, #7
	movs r1, #1
	bl sub_08090E38
	bl sub_08025A0C
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08089BD8: .4byte 0x0200E668

	thumb_func_start sub_08089BDC
sub_08089BDC: @ 0x08089BDC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x20
	adds r6, r0, #0
	add r1, sp, #4
	ldr r0, _08089C28 @ =0x0842CE04
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldr r0, [r0]
	str r0, [r1]
	ldr r0, [r6, #0x2c]
	adds r0, #0x34
	ldrb r0, [r0]
	cmp r0, #0
	bne _08089C30
	adds r4, r6, #0
	adds r4, #0x3b
	ldrb r5, [r4]
	lsrs r0, r5, #3
	movs r1, #3
	ands r0, r1
	lsls r0, r0, #2
	add r0, sp
	adds r0, #4
	ldr r2, [r0]
	adds r2, #7
	ldr r3, _08089C2C @ =0x08D8BA10
	movs r0, #0x90
	lsls r0, r0, #8
	str r0, [sp]
	movs r0, #0xb
	movs r1, #0xb8
	bl sub_080068C4
	b _08089C56
	.align 2, 0
_08089C28: .4byte 0x0842CE04
_08089C2C: .4byte 0x08D8BA10
_08089C30:
	ldr r1, _08089CCC @ =0x000020B8
	adds r4, r6, #0
	adds r4, #0x3b
	ldrb r2, [r4]
	lsrs r0, r2, #3
	movs r2, #3
	ands r0, r2
	lsls r0, r0, #2
	add r0, sp
	adds r0, #4
	ldr r2, [r0]
	adds r2, #7
	ldr r3, _08089CD0 @ =0x08D8BA10
	movs r0, #0x90
	lsls r0, r0, #8
	str r0, [sp]
	movs r0, #0xb
	bl sub_080068C4
_08089C56:
	str r4, [sp, #0x14]
	ldr r1, _08089CD4 @ =0x08D8BAD8
	ldr r0, [r6, #0x2c]
	adds r0, #0x2f
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r3, [r0]
	movs r5, #0x90
	lsls r5, r5, #8
	str r5, [sp]
	movs r0, #0xd
	movs r1, #0x20
	movs r2, #8
	bl sub_080068C4
	ldr r3, _08089CD8 @ =0x08D8BA18
	str r5, [sp]
	movs r0, #0xd
	movs r1, #0xa0
	movs r2, #0
	bl sub_080068C4
	ldr r0, [r6, #0x2c]
	ldrh r1, [r0, #0x3e]
	ldr r0, _08089CDC @ =0x0200E668
	ldrb r2, [r0]
	movs r0, #0xa
	movs r3, #6
	bl sub_08090E04
	ldr r4, [r6, #0x2c]
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #2
	bls _08089CE4
	ldr r1, _08089CE0 @ =0x08D8BB00
	adds r3, r4, #0
	adds r3, #0x2d
	adds r2, r4, #0
	adds r2, #0x2f
	ldrb r5, [r2]
	lsls r0, r5, #3
	adds r0, r0, r5
	ldrb r3, [r3]
	adds r0, r3, r0
	lsls r0, r0, #4
	adds r0, r0, r1
	ldrb r0, [r0, #8]
	adds r1, r4, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	lsls r1, r1, #4
	adds r1, #0x28
	bl sub_0804A740
	b _08089CFA
	.align 2, 0
_08089CCC: .4byte 0x000020B8
_08089CD0: .4byte 0x08D8BA10
_08089CD4: .4byte 0x08D8BAD8
_08089CD8: .4byte 0x08D8BA18
_08089CDC: .4byte 0x0200E668
_08089CE0: .4byte 0x08D8BB00
_08089CE4:
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	lsls r2, r0, #4
	adds r2, #0x40
	ldr r3, _08089D48 @ =0x08D8BA20
	str r5, [sp]
	movs r0, #0xd
	movs r1, #4
	bl sub_080068C4
_08089CFA:
	ldr r1, [r6, #0x2c]
	ldrh r0, [r6, #0x38]
	ldrh r2, [r1, #0x3e]
	cmp r0, r2
	bne _08089D0C
	movs r0, #0xf
	ands r0, r2
	cmp r0, #0
	beq _08089D54
_08089D0C:
	ldr r0, _08089D4C @ =gPal
	ldr r1, _08089D50 @ =0x02012970
	ldrh r1, [r1, #0x10]
	movs r3, #0xcf
	lsls r3, r3, #2
	adds r0, r0, r3
	strh r1, [r0]
	bl EnablePalSync
	adds r2, r6, #0
	adds r2, #0x3c
	movs r0, #0x20
	strb r0, [r2]
	ldr r0, [r6, #0x2c]
	ldrh r0, [r0, #0x3e]
	strh r0, [r6, #0x38]
	adds r0, r6, #0
	adds r0, #0x3a
	ldrb r1, [r0]
	str r2, [sp, #0x18]
	mov r8, r0
	cmp r1, #0
	bne _08089D90
	movs r0, #1
	bl sub_08089998
	movs r0, #1
	mov r4, r8
	strb r0, [r4]
	b _08089D90
	.align 2, 0
_08089D48: .4byte 0x08D8BA20
_08089D4C: .4byte gPal
_08089D50: .4byte 0x02012970
_08089D54:
	ldr r2, _08089E38 @ =gPal
	ldr r3, _08089E3C @ =0x02012970
	adds r4, r6, #0
	adds r4, #0x3c
	ldrb r5, [r4]
	lsrs r0, r5, #2
	movs r1, #0xf
	ands r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	movs r1, #0xcf
	lsls r1, r1, #2
	adds r2, r2, r1
	strh r0, [r2]
	bl EnablePalSync
	adds r0, r6, #0
	adds r0, #0x3a
	str r4, [sp, #0x18]
	mov r8, r0
	ldrb r2, [r0]
	cmp r2, #1
	bne _08089D90
	movs r0, #0
	bl sub_08089998
	movs r0, #0
	mov r3, r8
	strb r0, [r3]
_08089D90:
	bl sub_080259A4
	ldrh r0, [r6, #0x38]
	lsrs r7, r0, #4
	movs r1, #0xf
	ands r0, r1
	rsbs r0, r0, #0
	mov sl, r0
	movs r5, #0
	ldr r0, _08089E40 @ =0x0200E668
	movs r4, #0x30
	adds r4, r4, r6
	mov sb, r4
	ldrb r0, [r0]
	cmp r7, r0
	bge _08089DE2
	ldr r1, _08089E44 @ =0x0200CBF0
	adds r4, r7, #0
	lsls r0, r7, #2
	adds r0, r0, r1
	str r0, [sp, #0x1c]
_08089DBA:
	lsls r2, r5, #4
	mov r0, sl
	adds r0, #0x38
	adds r2, r2, r0
	ldr r1, [sp, #0x1c]
	ldm r1!, {r0}
	str r1, [sp, #0x1c]
	ldr r3, [r0]
	movs r0, #4
	movs r1, #8
	bl sub_08026540
	adds r4, #1
	adds r5, #1
	cmp r5, #5
	bgt _08089DE2
	ldr r0, _08089E40 @ =0x0200E668
	ldrb r0, [r0]
	cmp r4, r0
	blt _08089DBA
_08089DE2:
	mov r2, r8
	ldrb r0, [r2]
	cmp r0, #0
	beq _08089E0E
	adds r3, r5, r7
	ldr r0, _08089E40 @ =0x0200E668
	ldrb r0, [r0]
	cmp r3, r0
	bge _08089E0E
	lsls r2, r5, #4
	mov r0, sl
	adds r0, #0x38
	adds r2, r2, r0
	ldr r1, _08089E44 @ =0x0200CBF0
	lsls r0, r3, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r3, [r0]
	movs r0, #4
	movs r1, #8
	bl sub_08026540
_08089E0E:
	ldr r0, [r6, #0x2c]
	adds r1, r0, #0
	adds r1, #0x2f
	adds r2, r0, #0
	adds r2, #0x2e
	ldrb r1, [r1]
	ldrb r2, [r2]
	cmp r1, r2
	bhs _08089E48
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #3
	beq _08089E48
	mov r3, sb
	ldrb r1, [r3]
	movs r0, #1
	movs r2, #1
	bl sub_080897E0
	b _08089E54
	.align 2, 0
_08089E38: .4byte gPal
_08089E3C: .4byte 0x02012970
_08089E40: .4byte 0x0200E668
_08089E44: .4byte 0x0200CBF0
_08089E48:
	mov r4, sb
	ldrb r1, [r4]
	movs r0, #1
	movs r2, #0
	bl sub_080897E0
_08089E54:
	ldr r0, [r6, #0x2c]
	adds r1, r0, #0
	adds r1, #0x2f
	ldrb r1, [r1]
	cmp r1, #1
	bls _08089E76
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #3
	beq _08089E76
	mov r5, sb
	ldrb r1, [r5]
	movs r0, #0
	movs r2, #1
	bl sub_080897E0
	b _08089E82
_08089E76:
	mov r0, sb
	ldrb r1, [r0]
	movs r0, #0
	movs r2, #0
	bl sub_080897E0
_08089E82:
	mov r1, sb
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x1b
	cmp r0, #5
	bls _08089E96
	movs r0, #0
	strb r0, [r1]
_08089E96:
	ldr r2, [sp, #0x14]
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	ldr r3, [sp, #0x18]
	ldrb r0, [r3]
	adds r0, #1
	strb r0, [r3]
	add sp, #0x20
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start nullsub_21
nullsub_21: @ 0x08089EB8
	bx lr
	.align 2, 0

	thumb_func_start sub_08089EBC
sub_08089EBC: @ 0x08089EBC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	mov r8, r1
	ldr r0, [r7, #0xc]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	bne _08089EDA
	mov r1, r8
	adds r1, #0x3b
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_08089EDA:
	ldr r5, _08089FBC @ =0x0200C8F0
	ldr r4, _08089FC0 @ =0x0200E668
	ldrb r1, [r4]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r5
	str r7, [r0]
	movs r1, #1
	rsbs r1, r1, #0
	adds r0, r7, #0
	bl BattleGenerateUiStats
	ldrb r0, [r4]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #2
	adds r1, r1, r5
	ldr r3, _08089FC4 @ =gBattleActor
	adds r0, r3, #0
	adds r0, #0x5a
	ldrh r0, [r0]
	adds r0, #1
	movs r2, #0xff
	ands r0, r2
	subs r0, #1
	strh r0, [r1, #4]
	ldrb r0, [r4]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #2
	adds r1, r1, r5
	adds r0, r3, #0
	adds r0, #0x60
	ldrh r0, [r0]
	adds r0, #1
	ands r0, r2
	subs r0, #1
	strh r0, [r1, #6]
	ldrb r0, [r4]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #2
	adds r1, r1, r5
	adds r0, r3, #0
	adds r0, #0x62
	ldrh r0, [r0]
	adds r0, #1
	ands r0, r2
	subs r0, #1
	strh r0, [r1, #8]
	adds r0, r7, #0
	bl GetUnitSupporterCount
	adds r5, r0, #0
	movs r6, #0
	movs r4, #0
	cmp r6, r5
	bge _08089F66
_08089F50:
	adds r0, r7, #0
	adds r1, r4, #0
	bl sub_08026C04
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08089F60
	adds r6, #1
_08089F60:
	adds r4, #1
	cmp r4, r5
	blt _08089F50
_08089F66:
	cmp r6, #3
	ble _08089F80
	mov r5, r8
	adds r5, #0x2e
	ldrb r4, [r5]
	subs r0, r6, #1
	movs r1, #3
	bl __divsi3
	adds r0, #6
	cmp r4, r0
	bge _08089F80
	strb r0, [r5]
_08089F80:
	ldr r4, _08089FBC @ =0x0200C8F0
	ldr r3, _08089FC0 @ =0x0200E668
	ldrb r1, [r3]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r4
	strb r6, [r0, #0xa]
	ldr r0, _08089FC8 @ =0x0200CBF0
	ldrb r1, [r3]
	lsls r2, r1, #2
	adds r2, r2, r0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r4
	str r0, [r2]
	ldrb r0, [r3]
	adds r0, #1
	strb r0, [r3]
	adds r0, r7, #0
	bl GetUnitSMSId
	bl sub_08025278
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08089FBC: .4byte 0x0200C8F0
_08089FC0: .4byte 0x0200E668
_08089FC4: .4byte gBattleActor
_08089FC8: .4byte 0x0200CBF0

	thumb_func_start sub_08089FCC
sub_08089FCC: @ 0x08089FCC
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r1, _0808A020 @ =0x0200E668
	movs r0, #0
	strb r0, [r1]
	adds r0, r6, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	bne _0808A028
	ldr r0, _0808A024 @ =gPlaySt
	ldrb r0, [r0, #0xf]
	adds r5, r0, #1
	adds r0, #0x40
	cmp r5, r0
	bge _0808A064
_08089FEC:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _0808A012
	ldr r0, [r4]
	cmp r0, #0
	beq _0808A012
	adds r0, r4, #0
	bl sub_0808E81C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808A012
	adds r0, r4, #0
	adds r1, r6, #0
	bl sub_08089EBC
_0808A012:
	adds r5, #1
	ldr r0, _0808A024 @ =gPlaySt
	ldrb r0, [r0, #0xf]
	adds r0, #0x40
	cmp r5, r0
	blt _08089FEC
	b _0808A064
	.align 2, 0
_0808A020: .4byte 0x0200E668
_0808A024: .4byte gPlaySt
_0808A028:
	ldr r0, _0808A030 @ =gPlaySt
	ldrb r0, [r0, #0xf]
	adds r4, r0, #1
	b _0808A05E
	.align 2, 0
_0808A030: .4byte gPlaySt
_0808A034:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _0808A058
	ldr r0, [r2]
	cmp r0, #0
	beq _0808A058
	ldr r0, [r2, #0xc]
	ldr r1, _0808A06C @ =0x0001000C
	ands r0, r1
	cmp r0, #0
	bne _0808A058
	adds r0, r2, #0
	adds r1, r6, #0
	bl sub_08089EBC
_0808A058:
	adds r4, #1
	ldr r0, _0808A070 @ =gPlaySt
	ldrb r0, [r0, #0xf]
_0808A05E:
	adds r0, #0x40
	cmp r4, r0
	blt _0808A034
_0808A064:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808A06C: .4byte 0x0001000C
_0808A070: .4byte gPlaySt

	thumb_func_start sub_0808A074
sub_0808A074: @ 0x0808A074
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r1, _0808A0B8 @ =0x0200E668
	movs r0, #0
	strb r0, [r1]
	adds r0, r6, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	bne _0808A0BC
	movs r5, #1
_0808A08A:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _0808A0B0
	ldr r0, [r4]
	cmp r0, #0
	beq _0808A0B0
	adds r0, r4, #0
	bl sub_0808E81C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808A0B0
	adds r0, r4, #0
	adds r1, r6, #0
	bl sub_08089EBC
_0808A0B0:
	adds r5, #1
	cmp r5, #0x3f
	ble _0808A08A
	b _0808A0E8
	.align 2, 0
_0808A0B8: .4byte 0x0200E668
_0808A0BC:
	movs r4, #1
_0808A0BE:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _0808A0E2
	ldr r0, [r2]
	cmp r0, #0
	beq _0808A0E2
	ldr r0, [r2, #0xc]
	ldr r1, _0808A0F0 @ =0x0001000C
	ands r0, r1
	cmp r0, #0
	bne _0808A0E2
	adds r0, r2, #0
	adds r1, r6, #0
	bl sub_08089EBC
_0808A0E2:
	adds r4, #1
	cmp r4, #0x3f
	ble _0808A0BE
_0808A0E8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808A0F0: .4byte 0x0001000C

	thumb_func_start sub_0808A0F4
sub_0808A0F4: @ 0x0808A0F4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	mov r8, r0
	ldr r2, _0808A1D8 @ =gDispIo
	movs r6, #1
	ldrb r0, [r2, #1]
	orrs r0, r6
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #0
	bl SetOnVMatch
	movs r0, #0
	bl InitBgs
	bl ResetText
	bl sub_08005308
	bl ClearIcons
	bl ApplyUnitSpritePalettes
	movs r4, #0
	str r4, [sp, #4]
	ldr r1, _0808A1DC @ =0x02022BC0
	ldr r2, _0808A1E0 @ =0x01000008
	add r0, sp, #4
	bl CpuFastSet
	bl sub_08015A0C
	mov r0, r8
	bl sub_08005E88
	mov r0, r8
	adds r0, #0x3b
	strb r4, [r0]
	subs r0, #0xd
	movs r5, #6
	strb r5, [r0]
	mov r0, r8
	bl sub_0808A074
	mov r0, r8
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	bne _0808A188
	mov r0, r8
	adds r0, #0x2a
	mov r1, r8
	adds r1, #0x32
	str r1, [sp, #0x14]
	mov r2, r8
	adds r2, #0x29
	str r2, [sp, #8]
	movs r1, #0x2f
	add r1, r8
	mov sl, r1
	ldrb r0, [r0]
	cmp r0, #1
	bne _0808A200
_0808A188:
	ldr r4, _0808A1E4 @ =gPlaySt
	ldrb r1, [r4, #0x1a]
	mov r3, r8
	adds r3, #0x34
	mov r2, r8
	adds r2, #0x32
	str r2, [sp, #0x14]
	cmp r1, #0
	beq _0808A1AC
	lsrs r0, r1, #7
	ands r0, r6
	adds r2, #1
	strb r0, [r2]
	strb r0, [r3]
	movs r0, #0x7f
	ands r1, r0
	ldr r6, [sp, #0x14]
	strb r1, [r6]
_0808A1AC:
	mov r0, r8
	adds r0, #0x29
	str r0, [sp, #8]
	movs r0, #0x2f
	add r0, r8
	mov sl, r0
	ldr r1, [sp, #8]
	ldrb r1, [r1]
	cmp r1, #4
	beq _0808A1F6
	ldrb r0, [r0]
	cmp r0, #0
	beq _0808A1F6
	ldrb r4, [r4, #0x19]
	lsrs r1, r4, #4
	cmp r1, #0
	beq _0808A1F6
	cmp r1, #6
	bls _0808A1E8
	mov r2, sl
	strb r5, [r2]
	b _0808A1EC
	.align 2, 0
_0808A1D8: .4byte gDispIo
_0808A1DC: .4byte 0x02022BC0
_0808A1E0: .4byte 0x01000008
_0808A1E4: .4byte gPlaySt
_0808A1E8:
	mov r6, sl
	strb r1, [r6]
_0808A1EC:
	mov r1, sl
	ldrb r0, [r1]
	mov r1, r8
	adds r1, #0x36
	strb r0, [r1]
_0808A1F6:
	ldr r2, [sp, #0x14]
	ldrb r0, [r2]
	ldrb r1, [r3]
	bl sub_0808BF20
_0808A200:
	ldr r0, _0808A2DC @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r4, _0808A2E0 @ =gBg1Tm
	adds r0, r4, #0
	movs r1, #0
	bl TmFill
	ldr r0, _0808A2E4 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	bl InitIcons
	movs r0, #4
	bl ApplyIconPalettes
	bl sub_0804A9F8
	ldr r0, _0808A2E8 @ =0x08428114
	ldr r1, _0808A2EC @ =0x06014800
	bl sub_08013688
	ldr r0, _0808A2F0 @ =0x08428A40
	movs r1, #0xc8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	bl sub_0809186C
	ldr r1, _0808A2F4 @ =0x08427BFC
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r4, #0
	bl TmApplyTsa_thm
	movs r4, #0
	mov r6, r8
	adds r6, #0x2e
	str r6, [sp, #0x10]
	mov r0, r8
	adds r0, #0x39
	str r0, [sp, #0x18]
	mov r1, r8
	adds r1, #0x2b
	str r1, [sp, #0xc]
	ldr r6, _0808A2F8 @ =0x0200D5A8
	movs r2, #0x10
	adds r2, r2, r6
	mov sb, r2
	adds r5, r6, #0
	movs r7, #0
_0808A26C:
	lsls r0, r4, #3
	ldr r1, _0808A2FC @ =0x0200D570
	adds r0, r0, r1
	movs r1, #5
	bl InitText
	adds r0, r5, #0
	movs r1, #7
	bl sub_0800536C
	adds r0, r6, #0
	adds r0, #8
	adds r0, r7, r0
	movs r1, #7
	bl InitText
	mov r0, sb
	movs r1, #5
	bl InitText
	movs r0, #0x18
	add sb, r0
	adds r5, #0x18
	adds r7, #0x18
	adds r4, #1
	cmp r4, #6
	ble _0808A26C
	ldr r0, _0808A300 @ =0x0200D650
	movs r1, #4
	bl InitText
	ldr r0, _0808A304 @ =0x0200D658
	movs r1, #0x14
	bl InitText
	ldr r0, _0808A308 @ =0x0200D660
	movs r1, #4
	bl InitText
	ldr r1, [sp, #0x14]
	ldrb r0, [r1]
	bl sub_08089638
	ldr r2, [sp, #8]
	ldrb r2, [r2]
	cmp r2, #4
	bne _0808A30C
	mov r0, r8
	movs r1, #0
	bl sub_0808989C
	movs r0, #0
	ldr r6, [sp, #8]
	strb r0, [r6]
	b _0808A31C
	.align 2, 0
_0808A2DC: .4byte gBg0Tm
_0808A2E0: .4byte gBg1Tm
_0808A2E4: .4byte gBg2Tm
_0808A2E8: .4byte 0x08428114
_0808A2EC: .4byte 0x06014800
_0808A2F0: .4byte 0x08428A40
_0808A2F4: .4byte 0x08427BFC
_0808A2F8: .4byte 0x0200D5A8
_0808A2FC: .4byte 0x0200D570
_0808A300: .4byte 0x0200D650
_0808A304: .4byte 0x0200D658
_0808A308: .4byte 0x0200D660
_0808A30C:
	ldr r0, [sp, #0x18]
	ldrb r0, [r0]
	cmp r0, #1
	bne _0808A31C
	mov r0, r8
	movs r1, #1
	bl sub_0808989C
_0808A31C:
	movs r1, #0
	movs r0, #0
	mov r2, r8
	strh r0, [r2, #0x3c]
	ldr r6, [sp, #0xc]
	strb r1, [r6]
	ldr r4, _0808A36C @ =0x0200D650
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	ldr r1, _0808A370 @ =0x0842CE14
	adds r0, r4, #0
	bl Text_DrawString
	ldr r1, _0808A374 @ =0x02023DA6
	adds r0, r4, #0
	bl PutText
	ldr r1, _0808A378 @ =0x0200E66C
	movs r2, #0xff
	adds r0, r1, #0
	adds r0, #0x4c
_0808A358:
	str r2, [r0]
	subs r0, #4
	cmp r0, r1
	bge _0808A358
	mov r0, r8
	ldrh r0, [r0, #0x3e]
	lsrs r4, r0, #4
	adds r0, r4, #6
	b _0808A39A
	.align 2, 0
_0808A36C: .4byte 0x0200D650
_0808A370: .4byte 0x0842CE14
_0808A374: .4byte 0x02023DA6
_0808A378: .4byte 0x0200E66C
_0808A37C:
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	mov r2, sl
	ldrb r3, [r2]
	movs r0, #1
	str r0, [sp]
	mov r0, r8
	ldr r2, _0808A4B4 @ =gBg0Tm
	bl sub_0808B654
	adds r4, #1
	mov r6, r8
	ldrh r6, [r6, #0x3e]
	lsrs r0, r6, #4
	adds r0, #6
_0808A39A:
	cmp r4, r0
	bge _0808A3A6
	ldr r0, _0808A4B8 @ =0x0200E668
	ldrb r0, [r0]
	cmp r4, r0
	blt _0808A37C
_0808A3A6:
	ldr r1, [sp, #0x10]
	ldrb r0, [r1]
	mov r2, sl
	ldrb r1, [r2]
	movs r2, #1
	bl sub_0808B5E4
	ldr r7, _0808A4BC @ =gDispIo
	movs r0, #0x20
	ldrb r6, [r7, #1]
	orrs r0, r6
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r7, #1]
	adds r1, r7, #0
	adds r1, #0x2d
	movs r5, #0x10
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x38
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xe0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x98
	strb r0, [r1]
	adds r2, r7, #0
	adds r2, #0x34
	movs r0, #1
	mov sb, r0
	ldrb r0, [r2]
	mov r1, sb
	orrs r0, r1
	movs r4, #2
	orrs r0, r4
	movs r3, #4
	orrs r0, r3
	movs r1, #8
	orrs r0, r1
	orrs r0, r5
	strb r0, [r2]
	adds r2, #2
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r6, [r2]
	ands r0, r6
	orrs r0, r4
	orrs r0, r3
	orrs r0, r1
	orrs r0, r5
	strb r0, [r2]
	movs r0, #0xf
	bl EnableBgSync
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	mov r0, r8
	ldrh r2, [r0, #0x3e]
	subs r2, #0x38
	movs r0, #0xff
	ands r2, r0
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r7, #0xc]
	ands r0, r2
	strb r0, [r7, #0xc]
	adds r0, r1, #0
	ldrb r6, [r7, #0x10]
	ands r0, r6
	orrs r0, r4
	strb r0, [r7, #0x10]
	ldrb r0, [r7, #0x14]
	ands r1, r0
	mov r2, sb
	orrs r1, r2
	strb r1, [r7, #0x14]
	movs r0, #3
	ldrb r6, [r7, #0x18]
	orrs r0, r6
	strb r0, [r7, #0x18]
	ldr r0, _0808A4C0 @ =0x08427A48
	ldr r1, _0808A4C4 @ =0x02023960
	bl sub_08013688
	ldr r0, _0808A4C8 @ =0x0841E45C
	movs r1, #0xf0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0808A4CC @ =0x08D8B98C
	mov r1, r8
	bl Proc_Start
	mov r1, r8
	str r0, [r1, #0x40]
	ldr r2, [sp, #0x18]
	ldrb r2, [r2]
	cmp r2, #1
	bne _0808A4D0
	bl sub_0803DEC4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0808A4D0
	movs r0, #0
	movs r1, #0xa
	bl sub_080910B0
	mov r6, r8
	str r0, [r6, #0x44]
	b _0808A4DE
	.align 2, 0
_0808A4B4: .4byte gBg0Tm
_0808A4B8: .4byte 0x0200E668
_0808A4BC: .4byte gDispIo
_0808A4C0: .4byte 0x08427A48
_0808A4C4: .4byte 0x02023960
_0808A4C8: .4byte 0x0841E45C
_0808A4CC: .4byte 0x08D8B98C
_0808A4D0:
	movs r0, #0
	movs r1, #0
	movs r2, #0xa
	bl sub_0808068C
	mov r1, r8
	str r0, [r1, #0x44]
_0808A4DE:
	movs r1, #1
	rsbs r1, r1, #0
	movs r0, #0
	bl sub_08082F74
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0808A4F8
sub_0808A4F8: @ 0x0808A4F8
	push {lr}
	adds r3, r0, #0
	adds r0, #0x29
	movs r1, #0
	strb r1, [r0]
	adds r0, #8
	movs r2, #1
	strb r2, [r0]
	subs r0, #5
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #3
	strb r1, [r0]
	adds r0, #9
	ldrb r0, [r0]
	cmp r0, #3
	bne _0808A524
	adds r0, r3, #0
	adds r0, #0x2f
	strb r1, [r0]
	b _0808A52A
_0808A524:
	adds r0, r3, #0
	adds r0, #0x2f
	strb r2, [r0]
_0808A52A:
	ldrb r0, [r0]
	adds r2, r3, #0
	adds r2, #0x36
	movs r1, #0
	strb r0, [r2]
	movs r2, #0
	strh r1, [r3, #0x3e]
	adds r1, r3, #0
	adds r1, #0x32
	movs r0, #1
	strb r0, [r1]
	subs r1, #8
	strb r2, [r1]
	adds r1, #9
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x34
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	adds r0, r3, #0
	bl sub_0808A0F4
	pop {r0}
	bx r0

	thumb_func_start sub_0808A55C
sub_0808A55C: @ 0x0808A55C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r2, r0, #0
	adds r5, r1, #0
	adds r0, r5, #0
	adds r0, #0x3a
	adds r6, r5, #0
	adds r6, #0x3b
	ldrb r0, [r0]
	ldrb r1, [r6]
	cmp r0, r1
	bls _0808A5E4
	ldr r0, [r2, #0xc]
	movs r1, #0xb
	rsbs r1, r1, #0
	ands r0, r1
	str r0, [r2, #0xc]
	ldr r0, [r2]
	ldrb r0, [r0, #4]
	bl sub_0808E5DC
	ldrh r0, [r5, #0x3e]
	lsrs r4, r0, #4
	adds r0, r4, #6
	b _0808A5AC
_0808A58E:
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	movs r0, #1
	str r0, [sp]
	adds r0, r5, #0
	ldr r2, _0808A5D4 @ =gBg0Tm
	bl sub_0808B654
	adds r4, #1
	ldrh r1, [r5, #0x3e]
	lsrs r0, r1, #4
	adds r0, #6
_0808A5AC:
	cmp r4, r0
	bge _0808A5B8
	ldr r0, _0808A5D8 @ =0x0200E668
	ldrb r0, [r0]
	cmp r4, r0
	blt _0808A58E
_0808A5B8:
	ldrb r0, [r6]
	adds r0, #1
	strb r0, [r6]
	ldr r0, _0808A5DC @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808A5F8
	ldr r0, _0808A5E0 @ =0x0000038A
	bl m4aSongNumStart
	b _0808A5F8
	.align 2, 0
_0808A5D4: .4byte gBg0Tm
_0808A5D8: .4byte 0x0200E668
_0808A5DC: .4byte gPlaySt
_0808A5E0: .4byte 0x0000038A
_0808A5E4:
	ldr r0, _0808A600 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808A5F8
	movs r0, #0xe3
	lsls r0, r0, #2
	bl m4aSongNumStart
_0808A5F8:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808A600: .4byte gPlaySt

	thumb_func_start sub_0808A604
sub_0808A604: @ 0x0808A604
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	bl sub_0808E6A4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0808A68C
	ldr r0, [r4, #0xc]
	movs r1, #0xa
	orrs r0, r1
	str r0, [r4, #0xc]
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	bl sub_0808E604
	ldrh r0, [r5, #0x3e]
	lsrs r4, r0, #4
	adds r0, r4, #6
	adds r6, r5, #0
	adds r6, #0x3b
	b _0808A654
_0808A636:
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	movs r0, #1
	str r0, [sp]
	adds r0, r5, #0
	ldr r2, _0808A67C @ =gBg0Tm
	bl sub_0808B654
	adds r4, #1
	ldrh r1, [r5, #0x3e]
	lsrs r0, r1, #4
	adds r0, #6
_0808A654:
	cmp r4, r0
	bge _0808A660
	ldr r0, _0808A680 @ =0x0200E668
	ldrb r0, [r0]
	cmp r4, r0
	blt _0808A636
_0808A660:
	ldrb r0, [r6]
	subs r0, #1
	strb r0, [r6]
	ldr r0, _0808A684 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808A6A0
	ldr r0, _0808A688 @ =0x0000038B
	bl m4aSongNumStart
	b _0808A6A0
	.align 2, 0
_0808A67C: .4byte gBg0Tm
_0808A680: .4byte 0x0200E668
_0808A684: .4byte gPlaySt
_0808A688: .4byte 0x0000038B
_0808A68C:
	ldr r0, _0808A6A8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808A6A0
	movs r0, #0xe3
	lsls r0, r0, #2
	bl m4aSongNumStart
_0808A6A0:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808A6A8: .4byte gPlaySt

	thumb_func_start sub_0808A6AC
sub_0808A6AC: @ 0x0808A6AC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x30
	ldr r1, _0808A6D8 @ =0x0200CBF0
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r5, [r0]
	ldr r1, [r5, #0xc]
	movs r0, #0x80
	lsls r0, r0, #0x12
	ands r0, r1
	cmp r0, #0
	beq _0808A6E0
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	lsls r1, r0, #4
	adds r1, #0x38
	ldr r2, _0808A6DC @ =0x000003B6
	b _0808A70A
	.align 2, 0
_0808A6D8: .4byte 0x0200CBF0
_0808A6DC: .4byte 0x000003B6
_0808A6E0:
	movs r0, #8
	ands r1, r0
	cmp r1, #0
	beq _0808A722
	bl sub_0803DEC4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808A718
	adds r0, r5, #0
	bl sub_080916F4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0808A718
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	lsls r1, r0, #4
	adds r1, #0x38
	ldr r2, _0808A714 @ =0x000003B2
_0808A70A:
	movs r0, #0
	adds r3, r4, #0
	bl sub_08091664
	b _0808A72A
	.align 2, 0
_0808A714: .4byte 0x000003B2
_0808A718:
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_0808A55C
	b _0808A72A
_0808A722:
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_0808A604
_0808A72A:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0808A730
sub_0808A730: @ 0x0808A730
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r2, r1, #0
	ldr r0, [r6]
	ldr r1, [r6, #4]
	ldr r0, [r0, #0x28]
	ldr r1, [r1, #0x28]
	orrs r0, r1
	movs r1, #0x80
	lsls r1, r1, #2
	ands r0, r1
	cmp r0, #0
	beq _0808A764
	ldr r0, _0808A760 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808A7BE
	movs r0, #0xe3
	lsls r0, r0, #2
	bl m4aSongNumStart
	b _0808A7BE
	.align 2, 0
_0808A760: .4byte gPlaySt
_0808A764:
	ldr r4, [r6, #0xc]
	movs r5, #0xc0
	lsls r5, r5, #8
	adds r0, r4, #0
	ands r0, r5
	lsrs r1, r0, #0xe
	adds r0, r1, r2
	adds r0, #3
	movs r1, #3
	bl __modsi3
	lsls r1, r0, #0xe
	ldr r0, _0808A7A0 @ =0xFFFF3FFF
	ands r4, r0
	orrs r4, r1
	str r4, [r6, #0xc]
	ands r1, r5
	cmp r1, #0
	beq _0808A7AC
	ldr r0, _0808A7A4 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808A7BE
	ldr r0, _0808A7A8 @ =0x0000038A
	bl m4aSongNumStart
	b _0808A7BE
	.align 2, 0
_0808A7A0: .4byte 0xFFFF3FFF
_0808A7A4: .4byte gPlaySt
_0808A7A8: .4byte 0x0000038A
_0808A7AC:
	ldr r0, _0808A7C4 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808A7BE
	ldr r0, _0808A7C8 @ =0x0000038B
	bl m4aSongNumStart
_0808A7BE:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808A7C4: .4byte gPlaySt
_0808A7C8: .4byte 0x0000038B

	thumb_func_start sub_0808A7CC
sub_0808A7CC: @ 0x0808A7CC
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r5, r0, #0
	ldr r2, _0808A7F4 @ =gpKeySt
	ldr r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ldrh r1, [r1, #4]
	ands r0, r1
	mov ip, r2
	cmp r0, #0
	beq _0808A7F8
	adds r1, r5, #0
	adds r1, #0x31
	movs r0, #2
	b _0808A7FE
	.align 2, 0
_0808A7F4: .4byte gpKeySt
_0808A7F8:
	adds r1, r5, #0
	adds r1, #0x31
	movs r0, #1
_0808A7FE:
	strb r0, [r1]
	mov r8, r1
	mov r0, ip
	ldr r3, [r0]
	ldrh r4, [r3, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r4
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	cmp r7, #0
	beq _0808A820
	adds r0, r5, #0
	movs r1, #3
	bl Proc_Goto
	b _0808AB62
_0808A820:
	movs r1, #1
	mov sb, r1
	mov r6, sb
	ands r6, r4
	cmp r6, #0
	beq _0808A890
	adds r0, r5, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	beq _0808A848
	cmp r0, #1
	bgt _0808A840
	cmp r0, #0
	beq _0808A850
	b _0808AB62
_0808A840:
	cmp r0, #3
	bne _0808A846
	b _0808A946
_0808A846:
	b _0808AB62
_0808A848:
	adds r0, r5, #0
	bl sub_0808A6AC
	b _0808AB62
_0808A850:
	ldr r1, _0808A884 @ =0x0200CBF0
	adds r0, r5, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl sub_080807D8
	ldr r0, _0808A888 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808A87C
	ldr r0, _0808A88C @ =0x0000038A
	bl m4aSongNumStart
_0808A87C:
	adds r0, r5, #0
	bl Proc_Break
	b _0808AB62
	.align 2, 0
_0808A884: .4byte 0x0200CBF0
_0808A888: .4byte gPlaySt
_0808A88C: .4byte 0x0000038A
_0808A890:
	ldrh r1, [r3, #6]
	movs r2, #0x20
	adds r0, r2, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	cmp r7, #0
	beq _0808A928
	adds r0, r5, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #3
	bne _0808A8E4
	adds r0, r2, #0
	ands r0, r4
	cmp r0, #0
	bne _0808A8B4
	b _0808AB62
_0808A8B4:
	ldr r1, _0808A8DC @ =0x0200CBF0
	adds r4, r5, #0
	adds r4, #0x30
	ldrb r3, [r4]
	lsls r0, r3, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_0808A730
	ldrb r1, [r4]
	ldr r2, _0808A8E0 @ =gBg0Tm
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	str r6, [sp]
	b _0808A968
	.align 2, 0
_0808A8DC: .4byte 0x0200CBF0
_0808A8E0: .4byte gBg0Tm
_0808A8E4:
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #1
	bhi _0808A8F0
	b _0808AB62
_0808A8F0:
	adds r1, r5, #0
	adds r1, #0x36
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	adds r0, r5, #0
	movs r1, #2
	bl Proc_Goto
	adds r0, r5, #0
	adds r0, #0x2d
	strb r6, [r0]
	ldr r0, _0808A920 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _0808A916
	b _0808AB62
_0808A916:
	ldr r0, _0808A924 @ =0x0000038F
	bl m4aSongNumStart
	b _0808AB62
	.align 2, 0
_0808A920: .4byte gPlaySt
_0808A924: .4byte 0x0000038F
_0808A928:
	movs r6, #0x10
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _0808A9C0
	adds r0, r5, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #3
	bne _0808A978
	adds r0, r6, #0
	ands r0, r4
	cmp r0, #0
	bne _0808A946
	b _0808AB62
_0808A946:
	ldr r1, _0808A970 @ =0x0200CBF0
	adds r4, r5, #0
	adds r4, #0x30
	ldrb r2, [r4]
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	movs r1, #1
	bl sub_0808A730
	ldrb r1, [r4]
	ldr r2, _0808A974 @ =gBg0Tm
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	str r7, [sp]
_0808A968:
	adds r0, r5, #0
	bl sub_0808B654
	b _0808AB62
	.align 2, 0
_0808A970: .4byte 0x0200CBF0
_0808A974: .4byte gBg0Tm
_0808A978:
	adds r0, r5, #0
	adds r0, #0x2f
	adds r1, r5, #0
	adds r1, #0x2e
	ldrb r0, [r0]
	ldrb r1, [r1]
	cmp r0, r1
	blo _0808A98A
	b _0808AB62
_0808A98A:
	adds r1, r5, #0
	adds r1, #0x36
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x2d
	strb r7, [r0]
	ldr r0, _0808A9B8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808A9AC
	ldr r0, _0808A9BC @ =0x0000038F
	bl m4aSongNumStart
_0808A9AC:
	adds r0, r5, #0
	movs r1, #2
	bl Proc_Goto
	b _0808AB62
	.align 2, 0
_0808A9B8: .4byte gPlaySt
_0808A9BC: .4byte 0x0000038F
_0808A9C0:
	movs r7, #0x40
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	bne _0808A9E0
	movs r0, #0x80
	lsls r0, r0, #2
	ldrh r1, [r3, #4]
	ands r0, r1
	cmp r0, #0
	beq _0808AAAA
	adds r0, r7, #0
	ldrh r3, [r3, #0x10]
	ands r0, r3
	cmp r0, #0
	beq _0808AAAA
_0808A9E0:
	adds r6, r5, #0
	adds r6, #0x30
	ldrb r0, [r6]
	cmp r0, #0
	bne _0808AA18
	adds r0, r7, #0
	ands r0, r4
	cmp r0, #0
	bne _0808A9F4
	b _0808AB62
_0808A9F4:
	ldr r0, _0808AA10 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808AA06
	ldr r0, _0808AA14 @ =0x00000386
	bl m4aSongNumStart
_0808AA06:
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #3
	strb r0, [r1]
	b _0808AB62
	.align 2, 0
_0808AA10: .4byte gPlaySt
_0808AA14: .4byte 0x00000386
_0808AA18:
	subs r0, #1
	strb r0, [r6]
	ldr r0, _0808AA98 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808AA2E
	ldr r0, _0808AA9C @ =0x00000386
	bl m4aSongNumStart
_0808AA2E:
	adds r0, r5, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	adds r4, r0, #0
	cmp r1, #1
	bhi _0808AAA4
	ldrh r2, [r5, #0x3e]
	lsrs r0, r2, #4
	cmp r0, #0
	beq _0808AAA4
	cmp r1, #0
	bne _0808AA50
	ldrb r0, [r6]
	adds r0, #1
	strb r0, [r6]
	movs r0, #1
	strb r0, [r4]
_0808AA50:
	ldrh r3, [r5, #0x3e]
	lsrs r1, r3, #4
	subs r1, #1
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	ldr r2, _0808AAA0 @ =gBg0Tm
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	mov r0, sb
	str r0, [sp]
	adds r0, r5, #0
	bl sub_0808B654
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #2
	strb r0, [r1]
	mov r1, r8
	ldrb r1, [r1]
	lsls r2, r1, #2
	ldrh r3, [r5, #0x3e]
	subs r2, r3, r2
	strh r2, [r5, #0x3e]
	subs r2, #0x38
	movs r0, #0xff
	ands r2, r0
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	ldrb r0, [r4]
	cmp r0, #0
	bne _0808AB62
	b _0808AB5E
	.align 2, 0
_0808AA98: .4byte gPlaySt
_0808AA9C: .4byte 0x00000386
_0808AAA0: .4byte gBg0Tm
_0808AAA4:
	ldrb r0, [r4]
	subs r0, #1
	b _0808AB60
_0808AAAA:
	mov r0, ip
	ldr r2, [r0]
	movs r1, #0x80
	adds r0, r1, #0
	ldrh r3, [r2, #6]
	ands r0, r3
	cmp r0, #0
	bne _0808AAD0
	movs r0, #0x80
	lsls r0, r0, #2
	ldrh r3, [r2, #4]
	ands r0, r3
	cmp r0, #0
	beq _0808AB62
	adds r0, r1, #0
	ldrh r2, [r2, #0x10]
	ands r0, r2
	cmp r0, #0
	beq _0808AB62
_0808AAD0:
	adds r6, r5, #0
	adds r6, #0x30
	ldrb r1, [r6]
	ldr r7, _0808AB4C @ =0x0200E668
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	bge _0808AB62
	adds r0, r1, #1
	strb r0, [r6]
	ldr r0, _0808AB50 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808AAF6
	ldr r0, _0808AB54 @ =0x00000386
	bl m4aSongNumStart
_0808AAF6:
	adds r0, r5, #0
	adds r0, #0x2c
	adds r4, r0, #0
	ldrb r0, [r4]
	cmp r0, #4
	bne _0808AB5C
	ldrb r1, [r6]
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	beq _0808AB5C
	ldrh r2, [r5, #0x3e]
	lsrs r1, r2, #4
	adds r1, #6
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	ldr r2, _0808AB58 @ =gBg0Tm
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	movs r4, #1
	str r4, [sp]
	adds r0, r5, #0
	bl sub_0808B654
	adds r0, r5, #0
	adds r0, #0x29
	strb r4, [r0]
	mov r3, r8
	ldrb r3, [r3]
	lsls r2, r3, #2
	ldrh r0, [r5, #0x3e]
	adds r2, r0, r2
	strh r2, [r5, #0x3e]
	subs r2, #0x38
	movs r0, #0xff
	ands r2, r0
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	b _0808AB62
	.align 2, 0
_0808AB4C: .4byte 0x0200E668
_0808AB50: .4byte gPlaySt
_0808AB54: .4byte 0x00000386
_0808AB58: .4byte gBg0Tm
_0808AB5C:
	ldrb r0, [r4]
_0808AB5E:
	adds r0, #1
_0808AB60:
	strb r0, [r4]
_0808AB62:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0808AB70
sub_0808AB70: @ 0x0808AB70
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r7, r0, #0
	adds r4, r7, #0
	adds r4, #0x2b
	ldrb r0, [r4]
	ldr r2, _0808ABA4 @ =gpKeySt
	cmp r0, #0
	beq _0808ABA8
	ldr r1, [r2]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0808ABA8
	bl sub_080828A4
	movs r0, #0
	strb r0, [r4]
	b _0808AE50
	.align 2, 0
_0808ABA4: .4byte gpKeySt
_0808ABA8:
	ldr r1, [r2]
	movs r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0808AC94
	adds r0, r7, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, #0
	bne _0808AC94
	adds r1, r7, #0
	adds r1, #0x32
	ldrb r0, [r1]
	str r0, [sp, #4]
	adds r2, r7, #0
	adds r2, #0x2a
	movs r0, #1
	strb r0, [r2]
	ldr r0, _0808AC30 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	mov r8, r1
	cmp r0, #0
	blt _0808ABE2
	ldr r0, _0808AC34 @ =0x0000038A
	bl m4aSongNumStart
_0808ABE2:
	ldr r1, _0808AC38 @ =0x08D8BB00
	adds r6, r7, #0
	adds r6, #0x2d
	adds r5, r7, #0
	adds r5, #0x2f
	ldrb r2, [r5]
	lsls r0, r2, #3
	adds r0, r0, r2
	ldrb r3, [r6]
	adds r0, r3, r0
	lsls r0, r0, #4
	adds r0, r0, r1
	ldrb r0, [r0]
	mov r4, r8
	strb r0, [r4]
	adds r4, r7, #0
	adds r4, #0x33
	ldrb r0, [r4]
	adds r0, #1
	movs r1, #1
	ands r0, r1
	strb r0, [r4]
	mov r1, r8
	ldrb r0, [r1]
	ldrb r1, [r4]
	bl sub_0808BF20
	lsls r0, r0, #0x18
	mov sb, r4
	movs r2, #0x34
	adds r2, r2, r7
	mov sl, r2
	adds r3, r7, #0
	adds r3, #0x35
	str r3, [sp, #8]
	cmp r0, #0
	beq _0808AC68
	movs r4, #0
	b _0808AC54
	.align 2, 0
_0808AC30: .4byte gPlaySt
_0808AC34: .4byte 0x0000038A
_0808AC38: .4byte 0x08D8BB00
_0808AC3C:
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	ldrb r3, [r5]
	movs r0, #1
	str r0, [sp]
	adds r0, r7, #0
	ldr r2, _0808AC8C @ =gBg0Tm
	bl sub_0808B654
	adds r4, #1
	cmp r4, #5
	bgt _0808AC5C
_0808AC54:
	ldr r0, _0808AC90 @ =0x0200E668
	ldrb r0, [r0]
	cmp r4, r0
	blt _0808AC3C
_0808AC5C:
	ldrh r0, [r7, #0x3e]
	bl sub_08089720
	movs r0, #1
	bl EnableBgSync
_0808AC68:
	mov r4, sb
	ldrb r0, [r4]
	mov r1, sl
	strb r0, [r1]
	ldrb r0, [r6]
	ldr r2, [sp, #8]
	strb r0, [r2]
	mov r3, r8
	ldrb r3, [r3]
	ldr r4, [sp, #4]
	cmp r3, r4
	bne _0808AC82
	b _0808AE50
_0808AC82:
	mov r6, r8
	ldrb r0, [r6]
	bl sub_08089638
	b _0808AE50
	.align 2, 0
_0808AC8C: .4byte gBg0Tm
_0808AC90: .4byte 0x0200E668
_0808AC94:
	ldr r1, [r2]
	movs r0, #0x80
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _0808ACD4
	adds r0, r7, #0
	adds r0, #0x2b
	ldrb r4, [r0]
	cmp r4, #0
	bne _0808ACD4
	ldr r0, _0808ACCC @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808ACBC
	ldr r0, _0808ACD0 @ =0x00000386
	bl m4aSongNumStart
_0808ACBC:
	adds r1, r7, #0
	adds r1, #0x33
	movs r0, #1
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x29
	strb r4, [r0]
	b _0808AE50
	.align 2, 0
_0808ACCC: .4byte gPlaySt
_0808ACD0: .4byte 0x00000386
_0808ACD4:
	ldr r1, [r2]
	ldrh r2, [r1, #6]
	movs r0, #0x20
	ands r0, r2
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	beq _0808AD6E
	adds r1, r7, #0
	adds r1, #0x33
	movs r0, #1
	strb r0, [r1]
	subs r1, #6
	ldrb r0, [r1]
	adds r6, r1, #0
	cmp r0, #0
	bne _0808AD68
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #1
	bhi _0808AD02
	b _0808AE50
_0808AD02:
	adds r0, r7, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #3
	bne _0808AD0E
	b _0808AE50
_0808AD0E:
	ldr r0, _0808AD5C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808AD20
	ldr r0, _0808AD60 @ =0x0000038F
	bl m4aSongNumStart
_0808AD20:
	adds r1, r7, #0
	adds r1, #0x36
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	movs r4, #8
	ldr r2, _0808AD64 @ =0x08D8BB00
	lsls r0, r0, #3
	ldrb r1, [r1]
	adds r0, r0, r1
	lsls r1, r0, #4
	adds r0, r1, #0
	adds r0, #0x80
	adds r0, r0, r2
	ldrb r0, [r0, #8]
	cmp r0, #0
	bne _0808AD56
	adds r0, r1, r2
	adds r1, r0, #0
	adds r1, #0x80
_0808AD48:
	subs r1, #0x10
	subs r4, #1
	cmp r4, #0
	ble _0808AD56
	ldrb r0, [r1, #8]
	cmp r0, #0
	beq _0808AD48
_0808AD56:
	strb r4, [r6]
	b _0808ADD8
	.align 2, 0
_0808AD5C: .4byte gPlaySt
_0808AD60: .4byte 0x0000038F
_0808AD64: .4byte 0x08D8BB00
_0808AD68:
	subs r0, #1
	strb r0, [r1]
	b _0808ADF2
_0808AD6E:
	movs r0, #0x10
	ands r0, r2
	cmp r0, #0
	beq _0808AE10
	adds r1, r7, #0
	adds r1, #0x33
	movs r0, #1
	strb r0, [r1]
	adds r2, r7, #0
	adds r2, #0x2d
	adds r5, r7, #0
	adds r5, #0x2f
	ldrb r0, [r2]
	cmp r0, #8
	beq _0808ADA4
	ldr r0, _0808ADE4 @ =0x08D8BB00
	ldrb r3, [r2]
	adds r3, #1
	ldrb r6, [r5]
	lsls r1, r6, #3
	adds r1, r1, r6
	adds r1, r1, r3
	lsls r1, r1, #4
	adds r1, r1, r0
	ldrb r0, [r1, #8]
	cmp r0, #0
	bne _0808ADF0
_0808ADA4:
	adds r0, r7, #0
	adds r0, #0x2e
	ldrb r5, [r5]
	ldrb r0, [r0]
	cmp r5, r0
	bhs _0808AE50
	adds r0, r7, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #3
	beq _0808AE50
	strb r4, [r2]
	ldr r0, _0808ADE8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808ADCE
	ldr r0, _0808ADEC @ =0x0000038F
	bl m4aSongNumStart
_0808ADCE:
	adds r1, r7, #0
	adds r1, #0x36
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_0808ADD8:
	adds r0, r7, #0
	movs r1, #2
	bl Proc_Goto
	b _0808AE50
	.align 2, 0
_0808ADE4: .4byte 0x08D8BB00
_0808ADE8: .4byte gPlaySt
_0808ADEC: .4byte 0x0000038F
_0808ADF0:
	strb r3, [r2]
_0808ADF2:
	ldr r0, _0808AE08 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808AE50
	ldr r0, _0808AE0C @ =0x00000387
	bl m4aSongNumStart
	b _0808AE50
	.align 2, 0
_0808AE08: .4byte gPlaySt
_0808AE0C: .4byte 0x00000387
_0808AE10:
	movs r0, #0x80
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0808AE50
	adds r1, r7, #0
	adds r1, #0x2b
	ldrb r0, [r1]
	cmp r0, #0
	bne _0808AE50
	movs r0, #1
	strb r0, [r1]
	ldr r2, _0808AE60 @ =0x08D8BB00
	adds r3, r7, #0
	adds r3, #0x2d
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r4, [r0]
	lsls r1, r4, #3
	adds r1, r1, r4
	ldrb r3, [r3]
	adds r1, r3, r1
	lsls r1, r1, #4
	adds r0, r1, r2
	ldrb r0, [r0, #8]
	adds r2, #0xc
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0x28
	bl sub_0808266C
_0808AE50:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808AE60: .4byte 0x08D8BB00

	thumb_func_start sub_0808AE64
sub_0808AE64: @ 0x0808AE64
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r0, #0x2d
	ldrb r6, [r0]
	adds r5, r4, #0
	adds r5, #0x29
	ldrb r0, [r5]
	cmp r0, #1
	beq _0808AE9A
	cmp r0, #1
	bgt _0808AE80
	cmp r0, #0
	beq _0808AE8A
	b _0808AEFC
_0808AE80:
	cmp r0, #2
	beq _0808AECC
	cmp r0, #3
	beq _0808AE92
	b _0808AEFC
_0808AE8A:
	adds r0, r4, #0
	bl sub_0808A7CC
	b _0808AEFC
_0808AE92:
	adds r0, r4, #0
	bl sub_0808AB70
	b _0808AEFC
_0808AE9A:
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsls r2, r0, #2
	ldrh r0, [r4, #0x3e]
	adds r2, r0, r2
	strh r2, [r4, #0x3e]
	subs r2, #0x38
	movs r0, #0xff
	ands r2, r0
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	movs r0, #0xf
	ldrh r1, [r4, #0x3e]
	ands r0, r1
	cmp r0, #0
	bne _0808AEFC
	movs r0, #0
	strb r0, [r5]
	ldrh r0, [r4, #0x3e]
	bl sub_08089720
	b _0808AEFC
_0808AECC:
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsls r2, r0, #2
	ldrh r0, [r4, #0x3e]
	subs r2, r0, r2
	strh r2, [r4, #0x3e]
	subs r2, #0x38
	movs r0, #0xff
	ands r2, r0
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	movs r0, #0xf
	ldrh r1, [r4, #0x3e]
	ands r0, r1
	cmp r0, #0
	bne _0808AEFC
	movs r0, #0
	strb r0, [r5]
	ldrh r0, [r4, #0x3e]
	bl sub_08089720
_0808AEFC:
	ldr r0, _0808AF68 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #2
	ldrh r1, [r1, #8]
	ands r0, r1
	adds r5, r4, #0
	adds r5, #0x2b
	cmp r0, #0
	beq _0808AF32
	ldrb r0, [r5]
	cmp r0, #0
	bne _0808AF38
	ldr r0, _0808AF6C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808AF26
	ldr r0, _0808AF70 @ =0x0000038B
	bl m4aSongNumStart
_0808AF26:
	movs r0, #0
	bl sub_080807D8
	adds r0, r4, #0
	bl Proc_Break
_0808AF32:
	ldrb r0, [r5]
	cmp r0, #0
	beq _0808AF60
_0808AF38:
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r3, [r0]
	cmp r6, r3
	beq _0808AF60
	ldr r2, _0808AF74 @ =0x08D8BB00
	adds r0, #9
	ldrb r4, [r0]
	lsls r1, r4, #3
	adds r1, r1, r4
	adds r1, r1, r3
	lsls r1, r1, #4
	adds r0, r1, r2
	ldrb r0, [r0, #8]
	adds r2, #0xc
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0x28
	bl sub_0808266C
_0808AF60:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808AF68: .4byte gpKeySt
_0808AF6C: .4byte gPlaySt
_0808AF70: .4byte 0x0000038B
_0808AF74: .4byte 0x08D8BB00

	thumb_func_start sub_0808AF78
sub_0808AF78: @ 0x0808AF78
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	bne _0808AFA0
	ldr r1, _0808B020 @ =0x0200CBF0
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl sub_0808E694
	bl sub_0808954C
_0808AFA0:
	ldr r2, _0808B024 @ =gPlaySt
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r0, [r0]
	lsls r0, r0, #7
	adds r1, r4, #0
	adds r1, #0x32
	ldrb r1, [r1]
	adds r0, r1, r0
	strb r0, [r2, #0x1a]
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	cmp r1, #0
	beq _0808AFCA
	lsls r1, r1, #4
	movs r0, #0xf
	ldrb r3, [r2, #0x19]
	ands r0, r3
	orrs r0, r1
	strb r0, [r2, #0x19]
_0808AFCA:
	ldr r0, [r4, #0x40]
	bl Proc_End
	ldr r0, [r4, #0x44]
	cmp r0, #0
	beq _0808AFDA
	bl Proc_End
_0808AFDA:
	bl sub_08005EAC
	ldr r0, _0808B028 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _0808B02C @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _0808B030 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	movs r0, #0xf
	bl EnableBgSync
	ldr r2, _0808B034 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	bl sub_08005308
	bl ClearIcons
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808B020: .4byte 0x0200CBF0
_0808B024: .4byte gPlaySt
_0808B028: .4byte gBg0Tm
_0808B02C: .4byte gBg1Tm
_0808B030: .4byte gBg2Tm
_0808B034: .4byte gDispIo

	thumb_func_start sub_0808B038
sub_0808B038: @ 0x0808B038
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, _0808B05C @ =0x0200CCF0
	movs r1, #0x1f
	movs r2, #0x1f
	movs r3, #0
	bl TmFillRect_thm
	ldrh r0, [r5, #0x3e]
	lsrs r4, r0, #4
	adds r0, r4, #6
	cmp r4, r0
	bge _0808B08A
	ldr r0, _0808B060 @ =0x0200E668
	adds r6, r5, #0
	adds r6, #0x2f
	b _0808B084
	.align 2, 0
_0808B05C: .4byte 0x0200CCF0
_0808B060: .4byte 0x0200E668
_0808B064:
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	ldrb r3, [r6]
	movs r0, #0
	str r0, [sp]
	adds r0, r5, #0
	ldr r2, _0808B0C0 @ =0x0200CCF0
	bl sub_0808B654
	adds r4, #1
	ldrh r1, [r5, #0x3e]
	lsrs r0, r1, #4
	adds r0, #6
	cmp r4, r0
	bge _0808B08A
	ldr r0, _0808B0C4 @ =0x0200E668
_0808B084:
	ldrb r0, [r0]
	cmp r4, r0
	blt _0808B064
_0808B08A:
	ldr r4, _0808B0C8 @ =0x0200D4F0
	adds r0, r4, #0
	movs r1, #0x1f
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	adds r6, r5, #0
	adds r6, #0x2f
	ldrb r1, [r6]
	adds r0, r4, #0
	bl sub_0808B520
	movs r1, #0
	movs r0, #0
	strh r0, [r5, #0x3c]
	ldrb r0, [r6]
	adds r2, r5, #0
	adds r2, #0x37
	strb r0, [r2]
	adds r0, r5, #0
	adds r0, #0x38
	strb r1, [r0]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808B0C0: .4byte 0x0200CCF0
_0808B0C4: .4byte 0x0200E668
_0808B0C8: .4byte 0x0200D4F0

	thumb_func_start sub_0808B0CC
sub_0808B0CC: @ 0x0808B0CC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x38
	ldr r0, _0808B12C @ =0x08D8B9B4
	ldrh r2, [r5, #0x3c]
	adds r0, r2, r0
	ldrb r2, [r1]
	ldrb r0, [r0]
	adds r0, r2, r0
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x14
	bls _0808B0F8
	movs r0, #0x14
	strb r0, [r1]
_0808B0F8:
	ldrh r0, [r5, #0x3c]
	adds r0, #1
	strh r0, [r5, #0x3c]
	movs r3, #0
	str r1, [sp, #0xc]
	adds r0, r5, #0
	adds r0, #0x36
	str r0, [sp, #8]
	movs r1, #0x2f
	adds r1, r1, r5
	mov sl, r1
	ldr r2, [sp, #0xc]
	str r2, [sp, #4]
_0808B112:
	ldr r0, [sp, #8]
	ldrb r1, [r0]
	mov r0, sl
	ldrb r0, [r0]
	cmp r1, r0
	bls _0808B130
	ldr r1, [sp, #4]
	ldrb r1, [r1]
	adds r0, r1, r3
	cmp r0, #0x14
	bgt _0808B138
	b _0808B13E
	.align 2, 0
_0808B12C: .4byte 0x08D8B9B4
_0808B130:
	ldr r2, [sp, #4]
	ldrb r0, [r2]
	cmp r3, r0
	bge _0808B13C
_0808B138:
	movs r1, #0
	b _0808B144
_0808B13C:
	subs r0, r3, r0
_0808B13E:
	adds r0, #8
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
_0808B144:
	ldrh r0, [r5, #0x3e]
	lsrs r4, r0, #3
	adds r0, r4, #0
	adds r0, #0xc
	lsls r6, r1, #1
	adds r1, r3, #1
	mov sb, r1
	cmp r4, r0
	bge _0808B188
	movs r2, #0x1f
	mov r8, r2
	ldr r0, _0808B204 @ =gBg0Tm
	mov ip, r0
	ldr r7, _0808B208 @ =0x0200CCF0
	adds r2, r6, #0
_0808B162:
	adds r0, r4, #0
	mov r1, r8
	ands r0, r1
	lsls r1, r0, #5
	adds r1, #8
	adds r1, r1, r3
	lsls r1, r1, #1
	add r1, ip
	lsls r0, r0, #6
	adds r0, r2, r0
	adds r0, r0, r7
	ldrh r0, [r0]
	strh r0, [r1]
	adds r4, #1
	ldrh r1, [r5, #0x3e]
	lsrs r0, r1, #3
	adds r0, #0xc
	cmp r4, r0
	blt _0808B162
_0808B188:
	ldr r0, _0808B20C @ =gBg2Tm
	ldr r1, _0808B210 @ =0x0200D4F0
	adds r2, r6, r1
	adds r1, r3, #0
	adds r1, #0xa8
	movs r4, #1
	lsls r1, r1, #1
	adds r1, r1, r0
_0808B198:
	ldrh r0, [r2]
	strh r0, [r1]
	adds r2, #0x40
	adds r1, #0x40
	subs r4, #1
	cmp r4, #0
	bge _0808B198
	mov r3, sb
	cmp r3, #0x13
	ble _0808B112
	movs r0, #5
	bl EnableBgSync
	ldr r2, [sp, #0xc]
	ldrb r2, [r2]
	cmp r2, #0x13
	bls _0808B26C
	ldr r1, [sp, #8]
	ldrb r0, [r1]
	mov r2, sl
	strb r0, [r2]
	ldr r0, _0808B214 @ =0x02023DB0
	movs r1, #0x16
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, _0808B218 @ =0x02022C70
	movs r1, #0x16
	movs r2, #0x1f
	movs r3, #0
	bl TmFillRect_thm
	adds r4, r5, #0
	adds r4, #0x32
	adds r6, r5, #0
	adds r6, #0x2e
	ldr r1, _0808B21C @ =0x0200E66C
	movs r2, #0xff
	adds r0, r1, #0
	adds r0, #0x4c
_0808B1EA:
	str r2, [r0]
	subs r0, #4
	cmp r0, r1
	bge _0808B1EA
	bl ClearIcons
	ldrb r0, [r4]
	bl sub_08089638
	ldrh r0, [r5, #0x3e]
	lsrs r4, r0, #4
	adds r0, r4, #6
	b _0808B23C
	.align 2, 0
_0808B204: .4byte gBg0Tm
_0808B208: .4byte 0x0200CCF0
_0808B20C: .4byte gBg2Tm
_0808B210: .4byte 0x0200D4F0
_0808B214: .4byte 0x02023DB0
_0808B218: .4byte 0x02022C70
_0808B21C: .4byte 0x0200E66C
_0808B220:
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	mov r2, sl
	ldrb r3, [r2]
	movs r0, #0
	str r0, [sp]
	adds r0, r5, #0
	ldr r2, _0808B27C @ =0x0200CCF0
	bl sub_0808B654
	adds r4, #1
	ldrh r1, [r5, #0x3e]
	lsrs r0, r1, #4
	adds r0, #6
_0808B23C:
	cmp r4, r0
	bge _0808B248
	ldr r0, _0808B280 @ =0x0200E668
	ldrb r0, [r0]
	cmp r4, r0
	blt _0808B220
_0808B248:
	ldr r0, _0808B284 @ =0x0200D4F0
	mov r2, sl
	ldrb r1, [r2]
	bl sub_0808B520
	ldrb r0, [r6]
	mov r2, sl
	ldrb r1, [r2]
	movs r2, #0
	bl sub_0808B5E4
	movs r0, #0
	ldr r1, [sp, #0xc]
	strb r0, [r1]
	strh r0, [r5, #0x3c]
	adds r0, r5, #0
	bl Proc_Break
_0808B26C:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808B27C: .4byte 0x0200CCF0
_0808B280: .4byte 0x0200E668
_0808B284: .4byte 0x0200D4F0

	thumb_func_start sub_0808B288
sub_0808B288: @ 0x0808B288
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	mov r8, r0
	mov r2, r8
	adds r2, #0x38
	ldr r0, _0808B370 @ =0x08D8B9BA
	mov r1, r8
	ldrh r1, [r1, #0x3c]
	adds r0, r1, r0
	ldrb r3, [r2]
	ldrb r0, [r0]
	adds r0, r3, r0
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x14
	bls _0808B2B6
	movs r0, #0x14
	strb r0, [r2]
_0808B2B6:
	mov r5, r8
	ldrh r0, [r5, #0x3c]
	adds r0, #1
	strh r0, [r5, #0x3c]
	mov r0, r8
	adds r0, #0x36
	mov r1, r8
	adds r1, #0x37
	ldrb r0, [r0]
	ldrb r1, [r1]
	cmp r0, r1
	bls _0808B384
	movs r5, #0
	str r2, [sp]
	ldrb r6, [r2]
	cmp r5, r6
	blt _0808B2DA
	b _0808B41C
_0808B2DA:
	str r2, [sp, #8]
_0808B2DC:
	mov r7, r8
	ldrh r7, [r7, #0x3e]
	lsrs r4, r7, #3
	adds r0, r4, #0
	adds r0, #0xc
	adds r6, r5, #0
	adds r6, #0x1c
	movs r1, #8
	adds r1, r1, r5
	mov ip, r1
	adds r5, #1
	mov sl, r5
	cmp r4, r0
	bge _0808B336
	str r6, [sp, #4]
	lsls r1, r1, #1
	str r1, [sp, #0xc]
	movs r2, #0x1f
	mov sb, r2
_0808B302:
	adds r3, r4, #0
	mov r5, sb
	ands r3, r5
	lsls r1, r3, #5
	ldr r2, [sp, #4]
	ldr r7, [sp, #8]
	ldrb r7, [r7]
	subs r0, r2, r7
	adds r1, r1, r0
	lsls r1, r1, #1
	ldr r0, _0808B374 @ =gBg0Tm
	adds r1, r1, r0
	lsls r0, r3, #6
	ldr r2, [sp, #0xc]
	adds r0, r2, r0
	ldr r3, _0808B378 @ =0x0200CCF0
	adds r0, r0, r3
	ldrh r0, [r0]
	strh r0, [r1]
	adds r4, #1
	mov r5, r8
	ldrh r5, [r5, #0x3e]
	lsrs r0, r5, #3
	adds r0, #0xc
	cmp r4, r0
	blt _0808B302
_0808B336:
	ldr r7, _0808B37C @ =gBg2Tm
	mov sb, r7
	adds r5, r6, #0
	mov r1, ip
	lsls r0, r1, #1
	ldr r3, _0808B380 @ =0x0200D4F0
	adds r2, r0, r3
	movs r3, #0xa0
	movs r4, #1
_0808B348:
	ldr r6, [sp, #8]
	ldrb r6, [r6]
	subs r0, r5, r6
	adds r0, r3, r0
	lsls r0, r0, #1
	add r0, sb
	ldrh r1, [r2]
	strh r1, [r0]
	adds r2, #0x40
	adds r3, #0x20
	subs r4, #1
	cmp r4, #0
	bge _0808B348
	mov r5, sl
	ldr r7, [sp, #8]
	ldrb r7, [r7]
	cmp r5, r7
	blt _0808B2DC
	b _0808B41C
	.align 2, 0
_0808B370: .4byte 0x08D8B9BA
_0808B374: .4byte gBg0Tm
_0808B378: .4byte 0x0200CCF0
_0808B37C: .4byte gBg2Tm
_0808B380: .4byte 0x0200D4F0
_0808B384:
	movs r5, #0
	str r2, [sp]
	ldrb r0, [r2]
	cmp r5, r0
	bge _0808B41C
	str r2, [sp, #8]
_0808B390:
	mov r1, r8
	ldrh r1, [r1, #0x3e]
	lsrs r4, r1, #3
	adds r0, r4, #0
	adds r0, #0xc
	adds r6, r5, #0
	adds r6, #0x1c
	adds r2, r5, #1
	mov sl, r2
	cmp r4, r0
	bge _0808B3E6
	mov ip, r6
	movs r3, #0x1f
	mov sb, r3
_0808B3AC:
	adds r3, r4, #0
	mov r7, sb
	ands r3, r7
	lsls r2, r3, #5
	adds r2, #8
	adds r2, r2, r5
	lsls r2, r2, #1
	ldr r0, _0808B440 @ =gBg0Tm
	adds r2, r2, r0
	str r2, [sp, #0xc]
	mov r2, ip
	ldr r1, [sp, #8]
	ldrb r1, [r1]
	subs r0, r2, r1
	lsls r0, r0, #1
	lsls r1, r3, #6
	adds r0, r0, r1
	ldr r2, _0808B444 @ =0x0200CCF0
	adds r0, r0, r2
	ldrh r0, [r0]
	ldr r3, [sp, #0xc]
	strh r0, [r3]
	adds r4, #1
	mov r7, r8
	ldrh r7, [r7, #0x3e]
	lsrs r0, r7, #3
	adds r0, #0xc
	cmp r4, r0
	blt _0808B3AC
_0808B3E6:
	movs r4, #0
	ldr r0, _0808B448 @ =0x0200D4F0
	mov ip, r0
	adds r3, r6, #0
	adds r0, r5, #0
	adds r0, #0xa8
	lsls r0, r0, #1
	ldr r1, _0808B44C @ =gBg2Tm
	adds r2, r0, r1
_0808B3F8:
	ldr r5, [sp, #8]
	ldrb r5, [r5]
	subs r0, r3, r5
	lsls r0, r0, #1
	lsls r1, r4, #6
	adds r0, r0, r1
	add r0, ip
	ldrh r0, [r0]
	strh r0, [r2]
	adds r2, #0x40
	adds r4, #1
	cmp r4, #1
	ble _0808B3F8
	mov r5, sl
	ldr r6, [sp, #8]
	ldrb r6, [r6]
	cmp r5, r6
	blt _0808B390
_0808B41C:
	movs r0, #5
	bl EnableBgSync
	ldr r7, [sp]
	ldrb r7, [r7]
	cmp r7, #0x13
	bls _0808B430
	mov r0, r8
	bl Proc_Break
_0808B430:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808B440: .4byte gBg0Tm
_0808B444: .4byte 0x0200CCF0
_0808B448: .4byte 0x0200D4F0
_0808B44C: .4byte gBg2Tm

	thumb_func_start sub_0808B450
sub_0808B450: @ 0x0808B450
	push {lr}
	ldr r0, _0808B464 @ =0x08D8B71C
	movs r1, #3
	bl Proc_Start
	adds r0, #0x39
	movs r1, #0
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_0808B464: .4byte 0x08D8B71C

	thumb_func_start sub_0808B468
sub_0808B468: @ 0x0808B468
	push {r4, lr}
	adds r1, r0, #0
	cmp r1, #0
	bne _0808B480
	ldr r0, _0808B47C @ =0x08D8B82C
	movs r1, #3
	bl Proc_Start
	b _0808B486
	.align 2, 0
_0808B47C: .4byte 0x08D8B82C
_0808B480:
	ldr r0, _0808B4A4 @ =0x08D8B82C
	bl Proc_StartBlocking
_0808B486:
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x39
	movs r0, #1
	strb r0, [r1]
	bl sub_0803DEC4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0808B4A8
	adds r1, r4, #0
	adds r1, #0x3a
	movs r0, #5
	b _0808B4B0
	.align 2, 0
_0808B4A4: .4byte 0x08D8B82C
_0808B4A8:
	bl sub_0800EFB8
	adds r1, r4, #0
	adds r1, #0x3a
_0808B4B0:
	strb r0, [r1]
	adds r1, r4, #0
	adds r1, #0x3b
	movs r0, #0
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0808B4C0
sub_0808B4C0: @ 0x0808B4C0
	push {lr}
	adds r1, r0, #0
	cmp r1, #0
	bne _0808B4D8
	ldr r0, _0808B4D4 @ =0x08D8B8F4
	movs r1, #3
	bl Proc_Start
	b _0808B4DE
	.align 2, 0
_0808B4D4: .4byte 0x08D8B8F4
_0808B4D8:
	ldr r0, _0808B4EC @ =0x08D8B8F4
	bl Proc_StartBlocking
_0808B4DE:
	adds r1, r0, #0
	adds r1, #0x39
	movs r0, #3
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0808B4EC: .4byte 0x08D8B8F4

	thumb_func_start sub_0808B4F0
sub_0808B4F0: @ 0x0808B4F0
	push {lr}
	adds r1, r0, #0
	cmp r1, #0
	bne _0808B508
	ldr r0, _0808B504 @ =0x08D8B82C
	movs r1, #3
	bl Proc_Start
	b _0808B50E
	.align 2, 0
_0808B504: .4byte 0x08D8B82C
_0808B508:
	ldr r0, _0808B51C @ =0x08D8B82C
	bl Proc_StartBlocking
_0808B50E:
	adds r1, r0, #0
	adds r1, #0x39
	movs r0, #4
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0808B51C: .4byte 0x08D8B82C

	thumb_func_start sub_0808B520
sub_0808B520: @ 0x0808B520
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	lsls r1, r1, #0x18
	lsrs r4, r1, #0x18
	adds r6, r7, #0
	adds r6, #0x12
	adds r0, r6, #0
	movs r1, #0x13
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, _0808B568 @ =0x0200D658
	mov r8, r0
	bl ClearText
	cmp r4, #5
	bne _0808B56C
	movs r5, #0
	adds r4, r6, #0
_0808B54E:
	adds r1, r5, #0
	adds r1, #0x70
	adds r0, r4, #0
	movs r2, #0xa0
	lsls r2, r2, #7
	bl PutIcon
	adds r4, #4
	adds r5, #1
	cmp r5, #7
	ble _0808B54E
	b _0808B5CA
	.align 2, 0
_0808B568: .4byte 0x0200D658
_0808B56C:
	movs r5, #1
	ldr r3, _0808B5DC @ =0x08D8BB00
	lsls r0, r4, #3
	adds r0, r0, r4
	lsls r1, r0, #4
	adds r2, r1, #0
	adds r2, #0x10
	adds r0, r2, r3
	ldrb r0, [r0, #8]
	adds r7, #0x10
	mov sb, r7
	cmp r0, #0
	beq _0808B5C2
	mov r7, r8
	mov r8, r3
	adds r0, r1, r3
	adds r4, r0, #0
	adds r4, #0x10
	adds r6, r2, #0
_0808B592:
	ldrb r1, [r4, #8]
	subs r1, #0x40
	adds r0, r7, #0
	bl Text_SetCursor
	adds r0, r7, #0
	movs r1, #0
	bl Text_SetColor
	mov r0, r8
	adds r0, #4
	adds r0, r6, r0
	ldr r1, [r0]
	adds r0, r7, #0
	bl Text_DrawString
	adds r4, #0x10
	adds r6, #0x10
	adds r5, #1
	cmp r5, #8
	bgt _0808B5C2
	ldrb r0, [r4, #8]
	cmp r0, #0
	bne _0808B592
_0808B5C2:
	ldr r0, _0808B5E0 @ =0x0200D658
	mov r1, sb
	bl PutText
_0808B5CA:
	movs r0, #4
	bl EnableBgSync
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808B5DC: .4byte 0x08D8BB00
_0808B5E0: .4byte 0x0200D658

	thumb_func_start sub_0808B5E4
sub_0808B5E4: @ 0x0808B5E4
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r5, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r7, r2, #0x18
	cmp r5, #0
	beq _0808B620
	ldr r4, _0808B61C @ =0x02023CD4
	adds r0, r4, #0
	movs r1, #2
	adds r2, r5, #0
	bl sub_08006068
	adds r0, r4, #2
	movs r1, #0
	movs r2, #0x16
	bl sub_08005FEC
	adds r4, #4
	adds r0, r4, #0
	movs r1, #2
	adds r2, r6, #0
	bl sub_08006068
	b _0808B632
	.align 2, 0
_0808B61C: .4byte 0x02023CD4
_0808B620:
	ldr r0, _0808B64C @ =0x02023492
	movs r1, #6
	movs r2, #3
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #2
	bl EnableBgSync
_0808B632:
	cmp r7, #0
	beq _0808B63E
	ldr r0, _0808B650 @ =0x02023DA0
	adds r1, r5, #0
	bl sub_0808B520
_0808B63E:
	movs r0, #4
	bl EnableBgSync
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808B64C: .4byte 0x02023492
_0808B650: .4byte 0x02023DA0

	thumb_func_start sub_0808B654
sub_0808B654: @ 0x0808B654
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x58
	str r0, [sp, #0x24]
	mov sl, r2
	ldr r4, [sp, #0x78]
	lsls r1, r1, #0x18
	lsrs r7, r1, #0x18
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	str r3, [sp, #0x28]
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	adds r0, r7, #0
	movs r1, #7
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x2c]
	lsls r0, r7, #1
	str r0, [sp, #0x30]
	movs r0, #0x1f
	ldr r1, [sp, #0x30]
	ands r1, r0
	str r1, [sp, #0x30]
	ldr r1, _0808B6F0 @ =0x0200CBF0
	lsls r0, r7, #2
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	ldr r0, [r0, #0xc]
	movs r1, #8
	ands r0, r1
	rsbs r0, r0, #0
	lsrs r0, r0, #0x1f
	mov sb, r0
	cmp r4, #0
	beq _0808B72E
	ldr r2, [sp, #0x2c]
	lsls r4, r2, #3
	ldr r0, _0808B6F4 @ =0x0200D570
	adds r5, r4, r0
	adds r0, r5, #0
	bl ClearText
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetCursor
	bl sub_0803DEC4
	lsls r0, r0, #0x18
	mov r8, r4
	cmp r0, #0
	bne _0808B6F8
	ldr r0, [sp, #0x24]
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	bne _0808B6F8
	ldr r0, [r6]
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl sub_0808E6A4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808B6F8
	adds r0, r5, #0
	movs r1, #4
	bl Text_SetColor
	b _0808B702
	.align 2, 0
_0808B6F0: .4byte 0x0200CBF0
_0808B6F4: .4byte 0x0200D570
_0808B6F8:
	ldr r0, _0808B778 @ =0x0200D570
	add r0, r8
	mov r1, sb
	bl Text_SetColor
_0808B702:
	ldr r4, _0808B778 @ =0x0200D570
	add r4, r8
	ldr r1, _0808B77C @ =0x0200CBF0
	lsls r0, r7, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	ldr r3, [sp, #0x30]
	lsls r1, r3, #6
	add r1, sl
	adds r1, #6
	adds r0, r4, #0
	bl PutText
_0808B72E:
	ldr r4, [sp, #0x2c]
	lsls r5, r4, #1
	adds r0, r5, r4
	lsls r0, r0, #3
	mov r8, r0
	ldr r6, _0808B780 @ =0x0200D5A8
	adds r0, r0, r6
	bl ClearText
	adds r0, r6, #0
	adds r0, #8
	add r0, r8
	bl ClearText
	ldr r0, [sp, #0x30]
	lsls r4, r0, #6
	mov r1, sl
	adds r1, r1, r4
	str r1, [sp, #0x34]
	adds r0, r1, #0
	adds r0, #0x10
	movs r1, #0x18
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	str r4, [sp, #0x54]
	str r5, [sp, #0x50]
	ldr r2, [sp, #0x28]
	cmp r2, #5
	bls _0808B76E
	b _0808BD8C
_0808B76E:
	lsls r0, r2, #2
	ldr r1, _0808B784 @ =_0808B788
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0808B778: .4byte 0x0200D570
_0808B77C: .4byte 0x0200CBF0
_0808B780: .4byte 0x0200D5A8
_0808B784: .4byte _0808B788
_0808B788: @ jump table
	.4byte _0808B7A0 @ case 0
	.4byte _0808B910 @ case 1
	.4byte _0808B9D4 @ case 2
	.4byte _0808BAF2 @ case 3
	.4byte _0808BC00 @ case 4
	.4byte _0808BD2C @ case 5
_0808B7A0:
	ldr r0, _0808B810 @ =0x0200CBF0
	lsls r6, r7, #2
	adds r0, r0, r6
	mov r8, r0
	ldr r0, [r0]
	ldr r0, [r0]
	ldr r0, [r0, #4]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r2, r0, #0
	ldr r3, [sp, #0x50]
	ldr r4, [sp, #0x2c]
	adds r5, r3, r4
	lsls r5, r5, #3
	ldr r4, _0808B814 @ =0x0200D5A8
	adds r0, r5, r4
	ldr r7, [sp, #0x54]
	add r7, sl
	adds r1, r7, #0
	adds r1, #0x10
	movs r3, #0
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #0
	bl PutDrawText
	adds r4, #8
	adds r5, r5, r4
	mov r4, sb
	adds r0, r5, #0
	adds r1, r4, #0
	bl Text_SetColor
	mov r1, r8
	ldr r0, [r1]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	str r6, [sp, #0x4c]
	cmp r0, #0
	bne _0808B81C
	adds r1, r7, #0
	adds r1, #0x22
	movs r2, #0
	str r2, [sp]
	ldr r0, _0808B818 @ =0x0842CE1C
	str r0, [sp, #4]
	adds r0, r5, #0
	adds r2, r4, #0
	movs r3, #0
	bl PutDrawText
	b _0808B87A
	.align 2, 0
_0808B810: .4byte 0x0200CBF0
_0808B814: .4byte 0x0200D5A8
_0808B818: .4byte 0x0842CE1C
_0808B81C:
	mov r3, r8
	ldr r0, [r3]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemName
	adds r1, r7, #0
	adds r1, #0x22
	movs r6, #0
	str r6, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	adds r2, r4, #0
	movs r3, #0
	bl PutDrawText
	adds r4, r7, #0
	adds r4, #0x1e
	mov r1, r8
	ldr r0, [r1]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_08017808
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r4, #0
	bl PutIcon
	mov r2, r8
	ldr r0, [r2]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_08017808
	bl sub_080896EC
_0808B87A:
	ldr r3, [sp, #0x50]
	ldr r4, [sp, #0x2c]
	adds r0, r3, r4
	lsls r0, r0, #3
	ldr r1, _0808B8B0 @ =0x0200D5B8
	adds r5, r0, r1
	adds r0, r5, #0
	bl ClearText
	ldr r0, _0808B8B4 @ =0x0200CBF0
	ldr r6, [sp, #0x4c]
	adds r0, r6, r0
	ldr r0, [r0]
	ldr r0, [r0]
	ldr r4, [r0, #0xc]
	movs r0, #0xc0
	lsls r0, r0, #8
	ands r4, r0
	movs r0, #0x80
	lsls r0, r0, #7
	cmp r4, r0
	beq _0808B8C2
	cmp r4, r0
	bhi _0808B8B8
	cmp r4, #0
	beq _0808B8F4
	b _0808BEF4
	.align 2, 0
_0808B8B0: .4byte 0x0200D5B8
_0808B8B4: .4byte 0x0200CBF0
_0808B8B8:
	movs r0, #0x80
	lsls r0, r0, #8
	cmp r4, r0
	beq _0808B8D4
	b _0808BEF4
_0808B8C2:
	ldr r1, [sp, #0x54]
	add r1, sl
	adds r1, #0x30
	movs r0, #0
	str r0, [sp]
	ldr r0, _0808B8D0 @ =0x0842CE28
	b _0808B8E0
	.align 2, 0
_0808B8D0: .4byte 0x0842CE28
_0808B8D4:
	ldr r1, [sp, #0x54]
	add r1, sl
	adds r1, #0x30
	movs r0, #0
	str r0, [sp]
	ldr r0, _0808B8F0 @ =0x0842CE2C
_0808B8E0:
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r2, #4
	movs r3, #8
	bl PutDrawText
	b _0808BEF4
	.align 2, 0
_0808B8F0: .4byte 0x0842CE2C
_0808B8F4:
	ldr r1, [sp, #0x54]
	add r1, sl
	adds r1, #0x30
	str r4, [sp]
	ldr r0, _0808B90C @ =0x0842CE30
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r2, #1
	movs r3, #4
	bl PutDrawText
	b _0808BEF4
	.align 2, 0
_0808B90C: .4byte 0x0842CE30
_0808B910:
	ldr r1, _0808B9CC @ =0x0200CBF0
	lsls r0, r7, #2
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	ldr r0, [r0, #4]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r3, r0, #0
	ldr r1, [sp, #0x50]
	ldr r2, [sp, #0x2c]
	adds r0, r1, r2
	lsls r0, r0, #3
	ldr r1, _0808B9D0 @ =0x0200D5A8
	adds r0, r0, r1
	ldr r4, [sp, #0x54]
	add r4, sl
	adds r1, r4, #0
	adds r1, #0x10
	mov r8, sb
	movs r2, #0
	str r2, [sp]
	str r3, [sp, #4]
	mov r2, r8
	movs r3, #0
	bl PutDrawText
	adds r3, r4, #0
	adds r3, #0x22
	movs r1, #2
	mov r0, sb
	cmp r0, #0
	beq _0808B956
	movs r1, #1
_0808B956:
	ldr r0, [r6]
	ldr r0, [r0]
	movs r2, #8
	ldrsb r2, [r0, r2]
	adds r0, r3, #0
	bl sub_08006074
	adds r3, r4, #0
	adds r3, #0x28
	movs r1, #2
	mov r2, sb
	cmp r2, #0
	beq _0808B972
	movs r1, #1
_0808B972:
	ldr r0, [r6]
	ldr r0, [r0]
	ldrb r2, [r0, #9]
	adds r0, r3, #0
	bl sub_08006074
	adds r5, r4, #0
	adds r5, #0x2e
	movs r7, #2
	mov r3, sb
	cmp r3, #0
	beq _0808B98C
	movs r7, #1
_0808B98C:
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitCurrentHp
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r7, #0
	bl sub_08006074
	adds r0, r4, #0
	adds r0, #0x30
	mov r1, r8
	movs r2, #0x16
	bl sub_08005FEC
	adds r4, #0x34
	movs r5, #2
	mov r0, sb
	cmp r0, #0
	beq _0808B9B6
	movs r5, #1
_0808B9B6:
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitMaxHp
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_08006074
	b _0808BEF4
	.align 2, 0
_0808B9CC: .4byte 0x0200CBF0
_0808B9D0: .4byte 0x0200D5A8
_0808B9D4:
	ldr r5, [sp, #0x54]
	add r5, sl
	movs r1, #0x12
	adds r1, r1, r5
	mov r8, r1
	ldr r1, _0808BAE0 @ =0x0200CBF0
	lsls r0, r7, #2
	adds r4, r0, r1
	ldr r0, [r4]
	ldr r1, [r0]
	ldr r0, [r1, #4]
	movs r6, #2
	ldrb r0, [r0, #0x14]
	ldrb r2, [r1, #0x14]
	cmp r0, r2
	bne _0808B9F6
	movs r6, #4
_0808B9F6:
	adds r0, r1, #0
	bl GetUnitPower
	adds r2, r0, #0
	mov r0, r8
	adds r1, r6, #0
	bl sub_08006074
	adds r7, r5, #0
	adds r7, #0x18
	ldr r0, [r4]
	ldr r1, [r0]
	ldr r0, [r1, #4]
	movs r6, #2
	ldrb r0, [r0, #0x15]
	ldrb r3, [r1, #0x15]
	cmp r0, r3
	bne _0808BA1C
	movs r6, #4
_0808BA1C:
	adds r0, r1, #0
	bl GetUnitSkill
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl sub_08006074
	adds r7, r5, #0
	adds r7, #0x1e
	ldr r0, [r4]
	ldr r1, [r0]
	ldr r0, [r1, #4]
	movs r6, #2
	ldrb r0, [r0, #0x16]
	ldrb r2, [r1, #0x16]
	cmp r0, r2
	bne _0808BA42
	movs r6, #4
_0808BA42:
	adds r0, r1, #0
	bl GetUnitSpeed
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl sub_08006074
	adds r7, r5, #0
	adds r7, #0x24
	ldr r0, [r4]
	ldr r0, [r0]
	movs r6, #2
	ldrb r3, [r0, #0x19]
	cmp r3, #0x1e
	bne _0808BA64
	movs r6, #4
_0808BA64:
	bl GetUnitLuck
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl sub_08006074
	adds r7, r5, #0
	adds r7, #0x2a
	ldr r0, [r4]
	ldr r1, [r0]
	ldr r0, [r1, #4]
	movs r6, #2
	ldrb r0, [r0, #0x17]
	ldrb r2, [r1, #0x17]
	cmp r0, r2
	bne _0808BA88
	movs r6, #4
_0808BA88:
	adds r0, r1, #0
	bl GetUnitDefense
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl sub_08006074
	adds r7, r5, #0
	adds r7, #0x30
	ldr r0, [r4]
	ldr r1, [r0]
	ldr r0, [r1, #4]
	movs r6, #2
	ldrb r0, [r0, #0x18]
	ldrb r3, [r1, #0x18]
	cmp r0, r3
	bne _0808BAAE
	movs r6, #4
_0808BAAE:
	adds r0, r1, #0
	bl GetUnitResistance
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl sub_08006074
	ldr r0, [r4]
	ldr r0, [r0]
	bl sub_08026FB0
	adds r1, r0, #0
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0808BAE4
	adds r0, r5, #0
	adds r0, #0x34
	movs r1, #2
	movs r2, #0x14
	bl sub_08005FEC
	b _0808BEF4
	.align 2, 0
_0808BAE0: .4byte 0x0200CBF0
_0808BAE4:
	adds r0, r5, #0
	adds r0, #0x34
	movs r2, #0xa0
	lsls r2, r2, #7
	bl PutIcon
	b _0808BEF4
_0808BAF2:
	ldr r0, _0808BB2C @ =0x0200CBF0
	lsls r4, r7, #2
	adds r7, r4, r0
	ldr r0, [r7]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	str r4, [sp, #0x4c]
	cmp r3, #0
	bne _0808BB38
	ldr r4, [sp, #0x50]
	ldr r6, [sp, #0x2c]
	adds r0, r4, r6
	lsls r0, r0, #3
	ldr r1, _0808BB30 @ =0x0200D5A8
	adds r0, r0, r1
	ldr r1, [sp, #0x54]
	add r1, sl
	adds r1, #0x14
	mov r2, sb
	str r3, [sp]
	ldr r3, _0808BB34 @ =0x0842CE1C
	str r3, [sp, #4]
	movs r3, #0
	bl PutDrawText
	b _0808BB9C
	.align 2, 0
_0808BB2C: .4byte 0x0200CBF0
_0808BB30: .4byte 0x0200D5A8
_0808BB34: .4byte 0x0842CE1C
_0808BB38:
	ldr r0, [r7]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemName
	adds r5, r0, #0
	ldr r1, [sp, #0x50]
	ldr r2, [sp, #0x2c]
	adds r0, r1, r2
	lsls r0, r0, #3
	ldr r1, _0808BBF8 @ =0x0200D5A8
	adds r0, r0, r1
	ldr r4, [sp, #0x54]
	add r4, sl
	adds r1, r4, #0
	adds r1, #0x14
	mov r2, sb
	movs r3, #0
	str r3, [sp]
	str r5, [sp, #4]
	bl PutDrawText
	adds r4, #0x10
	ldr r0, [r7]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_08017808
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r4, #0
	bl PutIcon
	ldr r0, [r7]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_08017808
	bl sub_080896EC
_0808BB9C:
	ldr r5, [sp, #0x54]
	add r5, sl
	adds r3, r5, #0
	adds r3, #0x24
	movs r1, #2
	mov r4, sb
	cmp r4, #0
	beq _0808BBAE
	movs r1, #1
_0808BBAE:
	ldr r0, _0808BBFC @ =0x0200CBF0
	ldr r6, [sp, #0x4c]
	adds r4, r6, r0
	ldr r0, [r4]
	movs r6, #4
	ldrsh r2, [r0, r6]
	adds r0, r3, #0
	bl sub_08006074
	adds r3, r5, #0
	adds r3, #0x2c
	movs r1, #2
	mov r0, sb
	cmp r0, #0
	beq _0808BBCE
	movs r1, #1
_0808BBCE:
	ldr r0, [r4]
	movs r6, #6
	ldrsh r2, [r0, r6]
	adds r0, r3, #0
	bl sub_08006074
	adds r1, r5, #0
	adds r1, #0x34
	movs r3, #2
	mov r0, sb
	cmp r0, #0
	beq _0808BBE8
	movs r3, #1
_0808BBE8:
	ldr r0, [r4]
	movs r4, #8
	ldrsh r2, [r0, r4]
	adds r0, r1, #0
	adds r1, r3, #0
	bl sub_08006074
	b _0808BEF4
	.align 2, 0
_0808BBF8: .4byte 0x0200D5A8
_0808BBFC: .4byte 0x0200CBF0
_0808BC00:
	ldr r0, _0808BC40 @ =0x0200CBF0
	lsls r1, r7, #2
	adds r0, r1, r0
	ldr r0, [r0]
	ldr r2, [r0]
	ldr r3, [r2, #0xc]
	movs r0, #0x10
	ands r3, r0
	str r1, [sp, #0x4c]
	cmp r3, #0
	beq _0808BC48
	adds r0, r2, #0
	bl GetUnitRescueName
	adds r5, r0, #0
	ldr r6, [sp, #0x50]
	ldr r1, [sp, #0x2c]
	adds r0, r6, r1
	lsls r0, r0, #3
	ldr r1, _0808BC44 @ =0x0200D5B0
	adds r0, r0, r1
	ldr r1, [sp, #0x54]
	add r1, sl
	adds r1, #0x24
	mov r2, sb
	rsbs r4, r2, #0
	movs r3, #0
	str r3, [sp]
	str r5, [sp, #4]
	bl PutDrawText
	b _0808BC6A
	.align 2, 0
_0808BC40: .4byte 0x0200CBF0
_0808BC44: .4byte 0x0200D5B0
_0808BC48:
	ldr r4, [sp, #0x50]
	ldr r6, [sp, #0x2c]
	adds r0, r4, r6
	lsls r0, r0, #3
	ldr r1, _0808BD1C @ =0x0200D5B0
	adds r0, r0, r1
	ldr r1, [sp, #0x54]
	add r1, sl
	adds r1, #0x24
	mov r2, sb
	rsbs r4, r2, #0
	str r3, [sp]
	ldr r3, _0808BD20 @ =0x0842CE38
	str r3, [sp, #4]
	movs r3, #0
	bl PutDrawText
_0808BC6A:
	mov r8, r4
	ldr r7, [sp, #0x54]
	add r7, sl
	adds r3, r7, #0
	adds r3, #0x14
	movs r1, #2
	mov r4, sb
	cmp r4, #0
	beq _0808BC7E
	movs r1, #1
_0808BC7E:
	ldr r0, _0808BD24 @ =0x0200CBF0
	ldr r6, [sp, #0x4c]
	adds r4, r6, r0
	ldr r0, [r4]
	ldr r0, [r0]
	movs r2, #0x1d
	ldrsb r2, [r0, r2]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #0x12]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r2, r0
	adds r0, r3, #0
	bl sub_08006074
	adds r3, r7, #0
	adds r3, #0x1a
	movs r5, #2
	mov r0, sb
	cmp r0, #0
	beq _0808BCAA
	movs r5, #1
_0808BCAA:
	ldr r0, [r4]
	ldr r1, [r0]
	ldr r0, [r1, #4]
	movs r2, #0x11
	ldrsb r2, [r0, r2]
	ldr r0, [r1]
	ldrb r0, [r0, #0x13]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r2, r0
	movs r0, #0x1a
	ldrsb r0, [r1, r0]
	adds r2, r2, r0
	adds r0, r3, #0
	adds r1, r5, #0
	bl sub_08006074
	adds r5, r7, #0
	adds r5, #0x20
	movs r6, #2
	mov r1, sb
	cmp r1, #0
	beq _0808BCDA
	movs r6, #1
_0808BCDA:
	ldr r0, [r4]
	ldr r0, [r0]
	bl GetUnitAid
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r6, #0
	bl sub_08006074
	ldr r0, [r4]
	ldr r0, [r0]
	bl GetUnitStatusName
	adds r4, r0, #0
	ldr r2, [sp, #0x50]
	ldr r3, [sp, #0x2c]
	adds r0, r2, r3
	lsls r0, r0, #3
	ldr r1, _0808BD28 @ =0x0200D5A8
	adds r0, r0, r1
	adds r1, r7, #0
	adds r1, #0x2e
	mov r6, r8
	mov r2, sb
	orrs r6, r2
	lsrs r2, r6, #0x1f
	movs r3, #0
	str r3, [sp]
	str r4, [sp, #4]
	bl PutDrawText
	b _0808BEF4
	.align 2, 0
_0808BD1C: .4byte 0x0200D5B0
_0808BD20: .4byte 0x0842CE38
_0808BD24: .4byte 0x0200CBF0
_0808BD28: .4byte 0x0200D5A8
_0808BD2C:
	movs r6, #0
	lsls r3, r7, #2
	ldr r0, _0808BD84 @ =0x0200CBF0
	adds r7, r3, r0
	ldr r5, [sp, #0x54]
	add r5, sl
_0808BD38:
	add r1, sp, #8
	ldr r0, _0808BD88 @ =0x0842CE40
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldr r0, [r0]
	str r0, [r1]
	ldr r0, [r7]
	ldr r0, [r0]
	adds r0, #0x28
	adds r0, r0, r6
	ldrb r0, [r0]
	bl GetWeaponLevelFromExp
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	lsls r0, r6, #2
	adds r0, #0x14
	adds r3, r5, r0
	movs r1, #2
	cmp r4, #6
	bne _0808BD68
	movs r1, #4
_0808BD68:
	lsls r0, r4, #2
	add r0, sp
	adds r0, #8
	ldr r2, [r0]
	adds r0, r3, #0
	bl sub_08005FEC
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #7
	bls _0808BD38
	b _0808BEF4
	.align 2, 0
_0808BD84: .4byte 0x0200CBF0
_0808BD88: .4byte 0x0842CE40
_0808BD8C:
	ldr r1, [sp, #0x28]
	subs r1, #6
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x38]
	movs r4, #0
	str r4, [sp, #0x3c]
	ldr r1, _0808BE44 @ =0x0200CBF0
	lsls r0, r7, #2
	adds r5, r0, r1
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitSupporterCount
	str r0, [sp, #0x40]
	adds r0, r6, #0
	adds r0, #0x10
	add r0, r8
	bl ClearText
	movs r6, #0
	ldr r0, [sp, #0x40]
	cmp r4, r0
	bge _0808BEB2
	adds r7, r5, #0
	mov r1, r8
	str r1, [sp, #0x44]
	ldr r2, [sp, #0x34]
	str r2, [sp, #0x48]
	mov r3, sb
	rsbs r3, r3, #0
	mov r0, sb
	orrs r3, r0
	mov r8, r3
_0808BDD4:
	ldr r0, [r7]
	ldr r0, [r0]
	adds r1, r6, #0
	bl sub_08026C04
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808BEA6
	ldr r1, [sp, #0x3c]
	ldr r2, [sp, #0x38]
	cmp r1, r2
	blo _0808BE9C
	ldr r0, [r7]
	ldr r0, [r0]
	adds r1, r6, #0
	bl sub_08026AD8
	ldr r0, [r0, #0xc]
	movs r1, #8
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	bne _0808BE4C
	ldr r0, [r7]
	ldr r0, [r0]
	adds r1, r6, #0
	bl sub_08026AC4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl GetCharacterData
	ldrh r0, [r0]
	bl DecodeMsg
	adds r2, r0, #0
	lsls r0, r4, #3
	ldr r1, _0808BE48 @ =0x0200D5A8
	adds r0, r0, r1
	ldr r3, [sp, #0x44]
	adds r0, r3, r0
	lsls r1, r4, #1
	adds r1, r1, r4
	lsls r1, r1, #2
	adds r1, #0x12
	ldr r3, [sp, #0x48]
	adds r1, r3, r1
	str r5, [sp]
	str r2, [sp, #4]
	mov r3, r8
	lsrs r2, r3, #0x1f
	movs r3, #0
	bl PutDrawText
	b _0808BE8A
	.align 2, 0
_0808BE44: .4byte 0x0200CBF0
_0808BE48: .4byte 0x0200D5A8
_0808BE4C:
	ldr r0, [r7]
	ldr r0, [r0]
	adds r1, r6, #0
	bl sub_08026AC4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl GetCharacterData
	ldrh r0, [r0]
	bl DecodeMsg
	adds r3, r0, #0
	lsls r0, r4, #3
	ldr r1, _0808BE98 @ =0x0200D5A8
	adds r0, r0, r1
	ldr r1, [sp, #0x44]
	adds r0, r1, r0
	lsls r1, r4, #1
	adds r1, r1, r4
	lsls r1, r1, #2
	adds r1, #0x12
	ldr r2, [sp, #0x48]
	adds r1, r2, r1
	movs r2, #0
	str r2, [sp]
	str r3, [sp, #4]
	movs r2, #1
	movs r3, #0
	bl PutDrawText
_0808BE8A:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #3
	beq _0808BEB2
	b _0808BEA6
	.align 2, 0
_0808BE98: .4byte 0x0200D5A8
_0808BE9C:
	ldr r0, [sp, #0x3c]
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x3c]
_0808BEA6:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldr r3, [sp, #0x40]
	cmp r6, r3
	blt _0808BDD4
_0808BEB2:
	cmp r4, #2
	bhi _0808BEF4
	ldr r6, [sp, #0x50]
	ldr r1, [sp, #0x2c]
	adds r0, r6, r1
	lsls r5, r0, #3
	ldr r7, [sp, #0x54]
	add r7, sl
	mov r2, sb
	rsbs r6, r2, #0
	orrs r6, r2
_0808BEC8:
	lsls r0, r4, #3
	ldr r1, _0808BF0C @ =0x0200D5A8
	adds r0, r0, r1
	adds r0, r5, r0
	lsls r1, r4, #1
	adds r1, r1, r4
	lsls r1, r1, #2
	adds r1, #0x12
	adds r1, r7, r1
	movs r2, #0
	str r2, [sp]
	ldr r2, _0808BF10 @ =0x0842CE38
	str r2, [sp, #4]
	lsrs r2, r6, #0x1f
	movs r3, #0
	bl PutDrawText
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #2
	bls _0808BEC8
_0808BEF4:
	movs r0, #1
	bl EnableBgSync
	add sp, #0x58
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808BF0C: .4byte 0x0200D5A8
_0808BF10: .4byte 0x0842CE38

	thumb_func_start sub_0808BF14
sub_0808BF14: @ 0x0808BF14
	ldr r0, [r0, #0xc]
	movs r1, #0xc0
	lsls r1, r1, #8
	ands r0, r1
	bx lr
	.align 2, 0

	thumb_func_start sub_0808BF20
sub_0808BF20: @ 0x0808BF20
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x68
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r2, r1, #0x18
	movs r1, #1
	ands r2, r1
	subs r0, #1
	cmp r0, #0x1f
	bls _0808BF42
	bl _0808E330
_0808BF42:
	lsls r0, r0, #2
	ldr r1, _0808BF4C @ =_0808BF50
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0808BF4C: .4byte _0808BF50
_0808BF50: @ jump table
	.4byte _0808BFD0 @ case 0
	.4byte _0808C2D4 @ case 1
	.4byte _0808C1C8 @ case 2
	.4byte _0808C3D8 @ case 3
	.4byte _0808C4D4 @ case 4
	.4byte _0808C5DC @ case 5
	.4byte _0808C6E4 @ case 6
	.4byte _0808C7F0 @ case 7
	.4byte _0808C8F8 @ case 8
	.4byte _0808CA00 @ case 9
	.4byte _0808CB0C @ case 10
	.4byte _0808CC14 @ case 11
	.4byte _0808CF84 @ case 12
	.4byte _0808D08C @ case 13
	.4byte _0808D298 @ case 14
	.4byte _0808D38C @ case 15
	.4byte _0808D480 @ case 16
	.4byte _0808D574 @ case 17
	.4byte _0808CD1C @ case 18
	.4byte _0808CE78 @ case 19
	.4byte _0808D6A4 @ case 20
	.4byte _0808D7B0 @ case 21
	.4byte _0808D93C @ case 22
	.4byte _0808DA40 @ case 23
	.4byte _0808DB44 @ case 24
	.4byte _0808DC40 @ case 25
	.4byte _0808DD3C @ case 26
	.4byte _0808DE38 @ case 27
	.4byte _0808DF34 @ case 28
	.4byte _0808E030 @ case 29
	.4byte _0808E12C @ case 30
	.4byte _0808E224 @ case 31
_0808BFD0:
	cmp r2, #0
	bne _0808C0CC
	movs r0, #0
	str r0, [sp, #0x40]
	movs r1, #0
	ldr r3, _0808C0C4 @ =0x0200E668
	mov sl, r3
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	bge _0808C046
	adds r4, r3, #0
	mov sb, r4
	ldr r6, _0808C0C8 @ =0x0200CBF0
	mov ip, r6
_0808BFEE:
	movs r2, #0
	adds r0, r1, #1
	mov r7, sb
	ldrb r7, [r7]
	subs r1, r7, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808C038
	mov r8, ip
_0808C000:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r0, [r4]
	ldr r1, [r0]
	lsls r0, r2, #2
	mov r2, r8
	adds r3, r0, r2
	ldr r2, [r3]
	ldr r0, [r2]
	ldr r0, [r0]
	ldrb r1, [r1, #0xa]
	ldrb r0, [r0, #0xa]
	cmp r1, r0
	bhs _0808C02A
	str r4, [r3]
	str r2, [r5]
	movs r3, #1
	str r3, [sp, #0x40]
_0808C02A:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r4, sb
	ldrb r4, [r4]
	subs r0, r4, r7
	cmp r2, r0
	blt _0808C000
_0808C038:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r6, sl
	ldrb r0, [r6]
	subs r0, #1
	cmp r1, r0
	blt _0808BFEE
_0808C046:
	movs r1, #0
	ldr r7, _0808C0C4 @ =0x0200E668
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	bge _0808C0BE
	mov sl, r7
_0808C054:
	movs r2, #0
	adds r0, r1, #1
	mov r3, sl
	ldrb r3, [r3]
	subs r1, r3, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808C0B0
	ldr r4, _0808C0C8 @ =0x0200CBF0
	mov sb, r4
	movs r6, #2
	mov r8, r6
	mov ip, r7
_0808C06E:
	adds r0, r2, #1
	str r0, [sp, #0x60]
	lsls r0, r0, #2
	mov r1, sb
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r0, [r4]
	ldr r1, [r0, #0xc]
	mov r3, r8
	ands r1, r3
	lsls r0, r2, #2
	mov r6, sb
	adds r3, r0, r6
	ldr r2, [r3]
	ldr r0, [r2]
	ldr r0, [r0, #0xc]
	mov r6, r8
	ands r0, r6
	cmp r1, r0
	bhs _0808C09E
	str r4, [r3]
	str r2, [r5]
	movs r0, #1
	str r0, [sp, #0x40]
_0808C09E:
	ldr r1, [sp, #0x60]
	lsls r0, r1, #0x18
	lsrs r2, r0, #0x18
	mov r3, sl
	ldrb r3, [r3]
	mov r4, ip
	subs r0, r3, r4
	cmp r2, r0
	blt _0808C06E
_0808C0B0:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r6, _0808C0C4 @ =0x0200E668
	ldrb r0, [r6]
	subs r0, #1
	cmp r1, r0
	blt _0808C054
_0808C0BE:
	ldr r7, [sp, #0x40]
	bl _0808E29C
	.align 2, 0
_0808C0C4: .4byte 0x0200E668
_0808C0C8: .4byte 0x0200CBF0
_0808C0CC:
	movs r0, #0
	str r0, [sp, #0x44]
	movs r1, #0
	ldr r2, _0808C1C0 @ =0x0200E668
	mov sl, r2
	ldrb r0, [r2]
	subs r0, #1
	ldr r3, [sp, #0x44]
	cmp r3, r0
	bge _0808C140
	adds r4, r2, #0
	mov sb, r4
	ldr r6, _0808C1C4 @ =0x0200CBF0
	mov ip, r6
_0808C0E8:
	movs r2, #0
	adds r0, r1, #1
	mov r7, sb
	ldrb r7, [r7]
	subs r1, r7, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808C132
	mov r8, ip
_0808C0FA:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r0, [r4]
	ldr r1, [r0]
	lsls r0, r2, #2
	mov r2, r8
	adds r3, r0, r2
	ldr r2, [r3]
	ldr r0, [r2]
	ldr r0, [r0]
	ldrb r1, [r1, #0xa]
	ldrb r0, [r0, #0xa]
	cmp r1, r0
	bls _0808C124
	str r4, [r3]
	str r2, [r5]
	movs r3, #1
	str r3, [sp, #0x44]
_0808C124:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r4, sb
	ldrb r4, [r4]
	subs r0, r4, r7
	cmp r2, r0
	blt _0808C0FA
_0808C132:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r6, sl
	ldrb r0, [r6]
	subs r0, #1
	cmp r1, r0
	blt _0808C0E8
_0808C140:
	movs r1, #0
	ldr r7, _0808C1C0 @ =0x0200E668
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	bge _0808C1B8
	mov sl, r7
_0808C14E:
	movs r2, #0
	adds r0, r1, #1
	mov r3, sl
	ldrb r3, [r3]
	subs r1, r3, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808C1AA
	ldr r4, _0808C1C4 @ =0x0200CBF0
	mov sb, r4
	movs r6, #2
	mov r8, r6
	mov ip, r7
_0808C168:
	adds r0, r2, #1
	str r0, [sp, #0x60]
	lsls r0, r0, #2
	mov r1, sb
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r0, [r4]
	ldr r1, [r0, #0xc]
	mov r3, r8
	ands r1, r3
	lsls r0, r2, #2
	mov r6, sb
	adds r3, r0, r6
	ldr r2, [r3]
	ldr r0, [r2]
	ldr r0, [r0, #0xc]
	mov r6, r8
	ands r0, r6
	cmp r1, r0
	bls _0808C198
	str r4, [r3]
	str r2, [r5]
	movs r0, #1
	str r0, [sp, #0x44]
_0808C198:
	ldr r1, [sp, #0x60]
	lsls r0, r1, #0x18
	lsrs r2, r0, #0x18
	mov r3, sl
	ldrb r3, [r3]
	mov r4, ip
	subs r0, r3, r4
	cmp r2, r0
	blt _0808C168
_0808C1AA:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r6, _0808C1C0 @ =0x0200E668
	ldrb r0, [r6]
	subs r0, #1
	cmp r1, r0
	blt _0808C14E
_0808C1B8:
	ldr r7, [sp, #0x44]
	bl _0808E29C
	.align 2, 0
_0808C1C0: .4byte 0x0200E668
_0808C1C4: .4byte 0x0200CBF0
_0808C1C8:
	cmp r2, #0
	bne _0808C250
	movs r0, #0
	mov sl, r0
	movs r1, #0
	ldr r3, _0808C248 @ =0x0200E668
	mov ip, r3
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0808C1E2
	bl _0808E31E
_0808C1E2:
	adds r4, r3, #0
	mov sb, r4
_0808C1E6:
	movs r2, #0
	adds r0, r1, #1
	mov r6, sb
	ldrb r6, [r6]
	subs r1, r6, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808C236
	ldr r0, _0808C24C @ =0x0200CBF0
	mov r8, r0
_0808C1FA:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	ldrb r1, [r1, #8]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	ldrb r0, [r0, #8]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r1, r0
	ble _0808C228
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0808C228:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r6, sb
	ldrb r6, [r6]
	subs r0, r6, r7
	cmp r2, r0
	blt _0808C1FA
_0808C236:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r7, ip
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0808C1E6
	bl _0808E31E
	.align 2, 0
_0808C248: .4byte 0x0200E668
_0808C24C: .4byte 0x0200CBF0
_0808C250:
	movs r1, #0
	mov sl, r1
	ldr r2, _0808C2CC @ =0x0200E668
	mov ip, r2
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0808C264
	bl _0808E31E
_0808C264:
	adds r3, r2, #0
	mov sb, r3
_0808C268:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sb
	ldrb r4, [r4]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808C2B8
	ldr r6, _0808C2D0 @ =0x0200CBF0
	mov r8, r6
_0808C27C:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	ldrb r1, [r1, #8]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	ldrb r0, [r0, #8]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r1, r0
	bge _0808C2AA
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0808C2AA:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r6, sb
	ldrb r6, [r6]
	subs r0, r6, r7
	cmp r2, r0
	blt _0808C27C
_0808C2B8:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r7, ip
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0808C268
	bl _0808E31E
	.align 2, 0
_0808C2CC: .4byte 0x0200E668
_0808C2D0: .4byte 0x0200CBF0
_0808C2D4:
	cmp r2, #0
	bne _0808C358
	movs r1, #0
	mov sl, r1
	ldr r3, _0808C350 @ =0x0200E668
	mov ip, r3
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0808C2EC
	bl _0808E31E
_0808C2EC:
	adds r4, r3, #0
	mov sb, r4
_0808C2F0:
	movs r2, #0
	adds r0, r1, #1
	mov r6, sb
	ldrb r6, [r6]
	subs r1, r6, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808C33C
	ldr r0, _0808C354 @ =0x0200CBF0
	mov r8, r0
_0808C304:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r0, [r4]
	ldr r1, [r0, #4]
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	ldr r0, [r0, #4]
	ldrb r1, [r1, #0xa]
	ldrb r0, [r0, #0xa]
	cmp r1, r0
	bhs _0808C32E
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0808C32E:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r6, sb
	ldrb r6, [r6]
	subs r0, r6, r7
	cmp r2, r0
	blt _0808C304
_0808C33C:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r7, ip
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0808C2F0
	bl _0808E31E
	.align 2, 0
_0808C350: .4byte 0x0200E668
_0808C354: .4byte 0x0200CBF0
_0808C358:
	movs r1, #0
	mov sl, r1
	ldr r2, _0808C3D0 @ =0x0200E668
	mov ip, r2
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0808C36C
	bl _0808E31E
_0808C36C:
	adds r3, r2, #0
	mov sb, r3
_0808C370:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sb
	ldrb r4, [r4]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808C3BC
	ldr r6, _0808C3D4 @ =0x0200CBF0
	mov r8, r6
_0808C384:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r0, [r4]
	ldr r1, [r0, #4]
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	ldr r0, [r0, #4]
	ldrb r1, [r1, #0xa]
	ldrb r0, [r0, #0xa]
	cmp r1, r0
	bls _0808C3AE
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0808C3AE:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r6, sb
	ldrb r6, [r6]
	subs r0, r6, r7
	cmp r2, r0
	blt _0808C384
_0808C3BC:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r7, ip
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0808C370
	bl _0808E31E
	.align 2, 0
_0808C3D0: .4byte 0x0200E668
_0808C3D4: .4byte 0x0200CBF0
_0808C3D8:
	cmp r2, #0
	bne _0808C458
	movs r1, #0
	mov sl, r1
	ldr r3, _0808C450 @ =0x0200E668
	mov ip, r3
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0808C3F0
	bl _0808E31E
_0808C3F0:
	adds r4, r3, #0
	mov sb, r4
_0808C3F4:
	movs r2, #0
	adds r0, r1, #1
	mov r6, sb
	ldrb r6, [r6]
	subs r1, r6, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808C43C
	ldr r0, _0808C454 @ =0x0200CBF0
	mov r8, r0
_0808C408:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	ldrb r1, [r1, #9]
	ldrb r0, [r0, #9]
	cmp r1, r0
	bls _0808C42E
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0808C42E:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r6, sb
	ldrb r6, [r6]
	subs r0, r6, r7
	cmp r2, r0
	blt _0808C408
_0808C43C:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r7, ip
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0808C3F4
	bl _0808E31E
	.align 2, 0
_0808C450: .4byte 0x0200E668
_0808C454: .4byte 0x0200CBF0
_0808C458:
	movs r1, #0
	mov sl, r1
	ldr r2, _0808C4CC @ =0x0200E668
	mov ip, r2
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0808C46C
	bl _0808E31E
_0808C46C:
	adds r3, r2, #0
	mov sb, r3
_0808C470:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sb
	ldrb r4, [r4]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808C4B8
	ldr r6, _0808C4D0 @ =0x0200CBF0
	mov r8, r6
_0808C484:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	ldrb r1, [r1, #9]
	ldrb r0, [r0, #9]
	cmp r1, r0
	bhs _0808C4AA
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0808C4AA:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r6, sb
	ldrb r6, [r6]
	subs r0, r6, r7
	cmp r2, r0
	blt _0808C484
_0808C4B8:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r7, ip
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0808C470
	bl _0808E31E
	.align 2, 0
_0808C4CC: .4byte 0x0200E668
_0808C4D0: .4byte 0x0200CBF0
_0808C4D4:
	cmp r2, #0
	bne _0808C558
	movs r1, #0
	mov sl, r1
	ldr r3, _0808C550 @ =0x0200E668
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0808C4EA
	bl _0808E20E
_0808C4EA:
	movs r5, #0
	adds r0, r1, #1
	ldrb r3, [r3]
	subs r1, r3, r0
	mov r8, r0
	cmp r5, r1
	bge _0808C53C
	ldr r2, _0808C554 @ =0x0200CBF0
	mov sb, r2
_0808C4FC:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r3, sb
	adds r6, r0, r3
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitCurrentHp
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r1, sb
	adds r5, r0, r1
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitCurrentHp
	cmp r4, r0
	ble _0808C52C
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r2, #1
	mov sl, r2
_0808C52C:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0808C550 @ =0x0200E668
	ldrb r0, [r0]
	mov r3, r8
	subs r0, r0, r3
	cmp r5, r0
	blt _0808C4FC
_0808C53C:
	mov r4, r8
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _0808C550 @ =0x0200E668
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _0808C4EA
	bl _0808E20E
	.align 2, 0
_0808C550: .4byte 0x0200E668
_0808C554: .4byte 0x0200CBF0
_0808C558:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r2, _0808C5D4 @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0808C56C
	bl _0808E29A
_0808C56C:
	movs r5, #0
	adds r0, r1, #1
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r5, r1
	bge _0808C5BE
	ldr r0, _0808C5D8 @ =0x0200CBF0
	mov sb, r0
_0808C57E:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, sb
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitCurrentHp
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, sb
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitCurrentHp
	cmp r4, r0
	bge _0808C5AE
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_0808C5AE:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0808C5D4 @ =0x0200E668
	ldrb r0, [r0]
	mov r4, r8
	subs r0, r0, r4
	cmp r5, r0
	blt _0808C57E
_0808C5BE:
	mov r6, r8
	lsls r0, r6, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _0808C5D4 @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _0808C56C
	bl _0808E29A
	.align 2, 0
_0808C5D4: .4byte 0x0200E668
_0808C5D8: .4byte 0x0200CBF0
_0808C5DC:
	cmp r2, #0
	bne _0808C664
	movs r0, #0
	mov sl, r0
	movs r1, #0
	ldr r3, _0808C65C @ =0x0200E668
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0808C5F4
	bl _0808E31E
_0808C5F4:
	movs r5, #0
	adds r0, r1, #1
	ldrb r3, [r3]
	subs r1, r3, r0
	mov r8, r0
	cmp r5, r1
	bge _0808C646
	ldr r1, _0808C660 @ =0x0200CBF0
	mov sb, r1
_0808C606:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r2, sb
	adds r6, r0, r2
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitMaxHp
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r3, sb
	adds r5, r0, r3
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitMaxHp
	cmp r4, r0
	ble _0808C636
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r4, #1
	mov sl, r4
_0808C636:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0808C65C @ =0x0200E668
	ldrb r0, [r0]
	mov r6, r8
	subs r0, r0, r6
	cmp r5, r0
	blt _0808C606
_0808C646:
	mov r7, r8
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _0808C65C @ =0x0200E668
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _0808C5F4
	bl _0808E31E
	.align 2, 0
_0808C65C: .4byte 0x0200E668
_0808C660: .4byte 0x0200CBF0
_0808C664:
	movs r1, #0
	mov sl, r1
	ldr r2, _0808C6DC @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0808C676
	bl _0808E20E
_0808C676:
	movs r5, #0
	adds r0, r1, #1
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r5, r1
	bge _0808C6C8
	ldr r2, _0808C6E0 @ =0x0200CBF0
	mov sb, r2
_0808C688:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r3, sb
	adds r6, r0, r3
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitMaxHp
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r1, sb
	adds r5, r0, r1
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitMaxHp
	cmp r4, r0
	bge _0808C6B8
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r2, #1
	mov sl, r2
_0808C6B8:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0808C6DC @ =0x0200E668
	ldrb r0, [r0]
	mov r3, r8
	subs r0, r0, r3
	cmp r5, r0
	blt _0808C688
_0808C6C8:
	mov r4, r8
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _0808C6DC @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _0808C676
	bl _0808E20E
	.align 2, 0
_0808C6DC: .4byte 0x0200E668
_0808C6E0: .4byte 0x0200CBF0
_0808C6E4:
	cmp r2, #0
	bne _0808C76C
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r3, _0808C764 @ =0x0200E668
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0808C6FC
	bl _0808E29A
_0808C6FC:
	movs r5, #0
	adds r0, r1, #1
	ldrb r3, [r3]
	subs r1, r3, r0
	mov r8, r0
	cmp r5, r1
	bge _0808C74E
	ldr r0, _0808C768 @ =0x0200CBF0
	mov sb, r0
_0808C70E:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, sb
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitPower
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, sb
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitPower
	cmp r4, r0
	ble _0808C73E
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_0808C73E:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0808C764 @ =0x0200E668
	ldrb r0, [r0]
	mov r4, r8
	subs r0, r0, r4
	cmp r5, r0
	blt _0808C70E
_0808C74E:
	mov r6, r8
	lsls r0, r6, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _0808C764 @ =0x0200E668
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _0808C6FC
	bl _0808E29A
	.align 2, 0
_0808C764: .4byte 0x0200E668
_0808C768: .4byte 0x0200CBF0
_0808C76C:
	movs r0, #0
	mov sl, r0
	movs r1, #0
	ldr r2, _0808C7E8 @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0808C780
	bl _0808E31E
_0808C780:
	movs r5, #0
	adds r0, r1, #1
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r5, r1
	bge _0808C7D2
	ldr r1, _0808C7EC @ =0x0200CBF0
	mov sb, r1
_0808C792:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r2, sb
	adds r6, r0, r2
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitPower
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r3, sb
	adds r5, r0, r3
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitPower
	cmp r4, r0
	bge _0808C7C2
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r4, #1
	mov sl, r4
_0808C7C2:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0808C7E8 @ =0x0200E668
	ldrb r0, [r0]
	mov r6, r8
	subs r0, r0, r6
	cmp r5, r0
	blt _0808C792
_0808C7D2:
	mov r7, r8
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _0808C7E8 @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _0808C780
	bl _0808E31E
	.align 2, 0
_0808C7E8: .4byte 0x0200E668
_0808C7EC: .4byte 0x0200CBF0
_0808C7F0:
	cmp r2, #0
	bne _0808C874
	movs r1, #0
	mov sl, r1
	ldr r3, _0808C86C @ =0x0200E668
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0808C806
	bl _0808E20E
_0808C806:
	movs r5, #0
	adds r0, r1, #1
	ldrb r3, [r3]
	subs r1, r3, r0
	mov r8, r0
	cmp r5, r1
	bge _0808C858
	ldr r2, _0808C870 @ =0x0200CBF0
	mov sb, r2
_0808C818:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r3, sb
	adds r6, r0, r3
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitSkill
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r1, sb
	adds r5, r0, r1
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitSkill
	cmp r4, r0
	ble _0808C848
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r2, #1
	mov sl, r2
_0808C848:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0808C86C @ =0x0200E668
	ldrb r0, [r0]
	mov r3, r8
	subs r0, r0, r3
	cmp r5, r0
	blt _0808C818
_0808C858:
	mov r4, r8
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _0808C86C @ =0x0200E668
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _0808C806
	bl _0808E20E
	.align 2, 0
_0808C86C: .4byte 0x0200E668
_0808C870: .4byte 0x0200CBF0
_0808C874:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r2, _0808C8F0 @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0808C888
	bl _0808E29A
_0808C888:
	movs r5, #0
	adds r0, r1, #1
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r5, r1
	bge _0808C8DA
	ldr r0, _0808C8F4 @ =0x0200CBF0
	mov sb, r0
_0808C89A:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, sb
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitSkill
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, sb
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitSkill
	cmp r4, r0
	bge _0808C8CA
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_0808C8CA:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0808C8F0 @ =0x0200E668
	ldrb r0, [r0]
	mov r4, r8
	subs r0, r0, r4
	cmp r5, r0
	blt _0808C89A
_0808C8DA:
	mov r6, r8
	lsls r0, r6, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _0808C8F0 @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _0808C888
	bl _0808E29A
	.align 2, 0
_0808C8F0: .4byte 0x0200E668
_0808C8F4: .4byte 0x0200CBF0
_0808C8F8:
	cmp r2, #0
	bne _0808C980
	movs r0, #0
	mov sl, r0
	movs r1, #0
	ldr r3, _0808C978 @ =0x0200E668
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0808C910
	bl _0808E31E
_0808C910:
	movs r5, #0
	adds r0, r1, #1
	ldrb r3, [r3]
	subs r1, r3, r0
	mov r8, r0
	cmp r5, r1
	bge _0808C962
	ldr r1, _0808C97C @ =0x0200CBF0
	mov sb, r1
_0808C922:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r2, sb
	adds r6, r0, r2
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitSpeed
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r3, sb
	adds r5, r0, r3
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitSpeed
	cmp r4, r0
	ble _0808C952
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r4, #1
	mov sl, r4
_0808C952:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0808C978 @ =0x0200E668
	ldrb r0, [r0]
	mov r6, r8
	subs r0, r0, r6
	cmp r5, r0
	blt _0808C922
_0808C962:
	mov r7, r8
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _0808C978 @ =0x0200E668
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _0808C910
	bl _0808E31E
	.align 2, 0
_0808C978: .4byte 0x0200E668
_0808C97C: .4byte 0x0200CBF0
_0808C980:
	movs r1, #0
	mov sl, r1
	ldr r2, _0808C9F8 @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0808C992
	bl _0808E20E
_0808C992:
	movs r5, #0
	adds r0, r1, #1
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r5, r1
	bge _0808C9E4
	ldr r2, _0808C9FC @ =0x0200CBF0
	mov sb, r2
_0808C9A4:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r3, sb
	adds r6, r0, r3
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitSpeed
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r1, sb
	adds r5, r0, r1
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitSpeed
	cmp r4, r0
	bge _0808C9D4
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r2, #1
	mov sl, r2
_0808C9D4:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0808C9F8 @ =0x0200E668
	ldrb r0, [r0]
	mov r3, r8
	subs r0, r0, r3
	cmp r5, r0
	blt _0808C9A4
_0808C9E4:
	mov r4, r8
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _0808C9F8 @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _0808C992
	bl _0808E20E
	.align 2, 0
_0808C9F8: .4byte 0x0200E668
_0808C9FC: .4byte 0x0200CBF0
_0808CA00:
	cmp r2, #0
	bne _0808CA88
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r3, _0808CA80 @ =0x0200E668
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0808CA18
	bl _0808E29A
_0808CA18:
	movs r5, #0
	adds r0, r1, #1
	ldrb r3, [r3]
	subs r1, r3, r0
	mov r8, r0
	cmp r5, r1
	bge _0808CA6A
	ldr r0, _0808CA84 @ =0x0200CBF0
	mov sb, r0
_0808CA2A:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, sb
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitLuck
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, sb
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitLuck
	cmp r4, r0
	ble _0808CA5A
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_0808CA5A:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0808CA80 @ =0x0200E668
	ldrb r0, [r0]
	mov r4, r8
	subs r0, r0, r4
	cmp r5, r0
	blt _0808CA2A
_0808CA6A:
	mov r6, r8
	lsls r0, r6, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _0808CA80 @ =0x0200E668
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _0808CA18
	bl _0808E29A
	.align 2, 0
_0808CA80: .4byte 0x0200E668
_0808CA84: .4byte 0x0200CBF0
_0808CA88:
	movs r0, #0
	mov sl, r0
	movs r1, #0
	ldr r2, _0808CB04 @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0808CA9C
	bl _0808E31E
_0808CA9C:
	movs r5, #0
	adds r0, r1, #1
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r5, r1
	bge _0808CAEE
	ldr r1, _0808CB08 @ =0x0200CBF0
	mov sb, r1
_0808CAAE:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r2, sb
	adds r6, r0, r2
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitLuck
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r3, sb
	adds r5, r0, r3
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitLuck
	cmp r4, r0
	bge _0808CADE
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r4, #1
	mov sl, r4
_0808CADE:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0808CB04 @ =0x0200E668
	ldrb r0, [r0]
	mov r6, r8
	subs r0, r0, r6
	cmp r5, r0
	blt _0808CAAE
_0808CAEE:
	mov r7, r8
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _0808CB04 @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _0808CA9C
	bl _0808E31E
	.align 2, 0
_0808CB04: .4byte 0x0200E668
_0808CB08: .4byte 0x0200CBF0
_0808CB0C:
	cmp r2, #0
	bne _0808CB90
	movs r1, #0
	mov sl, r1
	ldr r3, _0808CB88 @ =0x0200E668
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0808CB22
	bl _0808E20E
_0808CB22:
	movs r5, #0
	adds r0, r1, #1
	ldrb r3, [r3]
	subs r1, r3, r0
	mov r8, r0
	cmp r5, r1
	bge _0808CB74
	ldr r2, _0808CB8C @ =0x0200CBF0
	mov sb, r2
_0808CB34:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r3, sb
	adds r6, r0, r3
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitDefense
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r1, sb
	adds r5, r0, r1
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitDefense
	cmp r4, r0
	ble _0808CB64
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r2, #1
	mov sl, r2
_0808CB64:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0808CB88 @ =0x0200E668
	ldrb r0, [r0]
	mov r3, r8
	subs r0, r0, r3
	cmp r5, r0
	blt _0808CB34
_0808CB74:
	mov r4, r8
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _0808CB88 @ =0x0200E668
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _0808CB22
	bl _0808E20E
	.align 2, 0
_0808CB88: .4byte 0x0200E668
_0808CB8C: .4byte 0x0200CBF0
_0808CB90:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r2, _0808CC0C @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0808CBA4
	bl _0808E29A
_0808CBA4:
	movs r5, #0
	adds r0, r1, #1
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r5, r1
	bge _0808CBF6
	ldr r0, _0808CC10 @ =0x0200CBF0
	mov sb, r0
_0808CBB6:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, sb
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitDefense
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, sb
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitDefense
	cmp r4, r0
	bge _0808CBE6
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_0808CBE6:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0808CC0C @ =0x0200E668
	ldrb r0, [r0]
	mov r4, r8
	subs r0, r0, r4
	cmp r5, r0
	blt _0808CBB6
_0808CBF6:
	mov r6, r8
	lsls r0, r6, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _0808CC0C @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _0808CBA4
	bl _0808E29A
	.align 2, 0
_0808CC0C: .4byte 0x0200E668
_0808CC10: .4byte 0x0200CBF0
_0808CC14:
	cmp r2, #0
	bne _0808CC9C
	movs r0, #0
	mov sl, r0
	movs r1, #0
	ldr r3, _0808CC94 @ =0x0200E668
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0808CC2C
	bl _0808E31E
_0808CC2C:
	movs r5, #0
	adds r0, r1, #1
	ldrb r3, [r3]
	subs r1, r3, r0
	mov r8, r0
	cmp r5, r1
	bge _0808CC7E
	ldr r1, _0808CC98 @ =0x0200CBF0
	mov sb, r1
_0808CC3E:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r2, sb
	adds r6, r0, r2
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitResistance
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r3, sb
	adds r5, r0, r3
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitResistance
	cmp r4, r0
	ble _0808CC6E
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r4, #1
	mov sl, r4
_0808CC6E:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0808CC94 @ =0x0200E668
	ldrb r0, [r0]
	mov r6, r8
	subs r0, r0, r6
	cmp r5, r0
	blt _0808CC3E
_0808CC7E:
	mov r7, r8
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _0808CC94 @ =0x0200E668
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _0808CC2C
	bl _0808E31E
	.align 2, 0
_0808CC94: .4byte 0x0200E668
_0808CC98: .4byte 0x0200CBF0
_0808CC9C:
	movs r1, #0
	mov sl, r1
	ldr r2, _0808CD14 @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0808CCAE
	bl _0808E20E
_0808CCAE:
	movs r5, #0
	adds r0, r1, #1
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r5, r1
	bge _0808CD00
	ldr r2, _0808CD18 @ =0x0200CBF0
	mov sb, r2
_0808CCC0:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r3, sb
	adds r6, r0, r3
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitResistance
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r1, sb
	adds r5, r0, r1
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitResistance
	cmp r4, r0
	bge _0808CCF0
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r2, #1
	mov sl, r2
_0808CCF0:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0808CD14 @ =0x0200E668
	ldrb r0, [r0]
	mov r3, r8
	subs r0, r0, r3
	cmp r5, r0
	blt _0808CCC0
_0808CD00:
	mov r4, r8
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _0808CD14 @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _0808CCAE
	bl _0808E20E
	.align 2, 0
_0808CD14: .4byte 0x0200E668
_0808CD18: .4byte 0x0200CBF0
_0808CD1C:
	cmp r2, #0
	bne _0808CDCC
	movs r7, #0
	str r7, [sp, #0x48]
	movs r1, #0
	ldr r3, _0808CDC4 @ =0x0200E668
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	bge _0808CDBC
	adds r4, r3, #0
	mov sl, r4
_0808CD34:
	movs r2, #0
	adds r0, r1, #1
	mov r6, sl
	ldrb r6, [r6]
	subs r1, r6, r0
	mov sb, r0
	cmp r2, r1
	bge _0808CDAC
	ldr r7, _0808CDC8 @ =0x0200CBF0
	mov ip, r7
_0808CD48:
	adds r0, r2, #1
	mov r8, r0
	lsls r0, r0, #2
	mov r1, ip
	adds r7, r0, r1
	ldr r6, [r7]
	ldr r1, [r6]
	ldr r0, [r1, #4]
	movs r3, #0x11
	ldrsb r3, [r0, r3]
	ldr r0, [r1]
	ldrb r0, [r0, #0x13]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r3, r3, r0
	movs r0, #0x1a
	ldrsb r0, [r1, r0]
	adds r3, r3, r0
	lsls r0, r2, #2
	mov r2, ip
	adds r4, r0, r2
	ldr r5, [r4]
	ldr r2, [r5]
	ldr r0, [r2, #4]
	ldrb r0, [r0, #0x11]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r1, [r2]
	ldrb r1, [r1, #0x13]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	movs r1, #0x1a
	ldrsb r1, [r2, r1]
	adds r0, r0, r1
	cmp r3, r0
	ble _0808CD9A
	str r6, [r4]
	str r5, [r7]
	movs r3, #1
	str r3, [sp, #0x48]
_0808CD9A:
	mov r4, r8
	lsls r0, r4, #0x18
	lsrs r2, r0, #0x18
	mov r6, sl
	ldrb r6, [r6]
	mov r7, sb
	subs r0, r6, r7
	cmp r2, r0
	blt _0808CD48
_0808CDAC:
	mov r1, sb
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _0808CDC4 @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _0808CD34
_0808CDBC:
	ldr r3, [sp, #0x48]
	bl _0808D68E
	.align 2, 0
_0808CDC4: .4byte 0x0200E668
_0808CDC8: .4byte 0x0200CBF0
_0808CDCC:
	movs r4, #0
	str r4, [sp, #0x4c]
	movs r1, #0
	ldr r6, _0808CE70 @ =0x0200E668
	ldrb r0, [r6]
	subs r0, #1
	cmp r4, r0
	bge _0808CE68
	adds r7, r6, #0
	mov sl, r7
_0808CDE0:
	movs r2, #0
	adds r0, r1, #1
	mov r3, sl
	ldrb r3, [r3]
	subs r1, r3, r0
	mov sb, r0
	cmp r2, r1
	bge _0808CE58
	ldr r4, _0808CE74 @ =0x0200CBF0
	mov ip, r4
_0808CDF4:
	adds r6, r2, #1
	mov r8, r6
	lsls r0, r6, #2
	mov r1, ip
	adds r7, r0, r1
	ldr r6, [r7]
	ldr r1, [r6]
	ldr r0, [r1, #4]
	movs r3, #0x11
	ldrsb r3, [r0, r3]
	ldr r0, [r1]
	ldrb r0, [r0, #0x13]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r3, r3, r0
	movs r0, #0x1a
	ldrsb r0, [r1, r0]
	adds r3, r3, r0
	lsls r0, r2, #2
	mov r2, ip
	adds r4, r0, r2
	ldr r5, [r4]
	ldr r2, [r5]
	ldr r0, [r2, #4]
	ldrb r0, [r0, #0x11]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r1, [r2]
	ldrb r1, [r1, #0x13]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	movs r1, #0x1a
	ldrsb r1, [r2, r1]
	adds r0, r0, r1
	cmp r3, r0
	bge _0808CE46
	str r6, [r4]
	str r5, [r7]
	movs r3, #1
	str r3, [sp, #0x4c]
_0808CE46:
	mov r4, r8
	lsls r0, r4, #0x18
	lsrs r2, r0, #0x18
	mov r6, sl
	ldrb r6, [r6]
	mov r7, sb
	subs r0, r6, r7
	cmp r2, r0
	blt _0808CDF4
_0808CE58:
	mov r1, sb
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _0808CE70 @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _0808CDE0
_0808CE68:
	ldr r3, [sp, #0x4c]
	bl _0808D68E
	.align 2, 0
_0808CE70: .4byte 0x0200E668
_0808CE74: .4byte 0x0200CBF0
_0808CE78:
	cmp r2, #0
	bne _0808CF00
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r3, _0808CEF8 @ =0x0200E668
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0808CE90
	bl _0808E29A
_0808CE90:
	movs r5, #0
	adds r0, r1, #1
	ldrb r3, [r3]
	subs r1, r3, r0
	mov r8, r0
	cmp r5, r1
	bge _0808CEE2
	ldr r6, _0808CEFC @ =0x0200CBF0
	mov sb, r6
_0808CEA2:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, sb
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitAid
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, sb
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitAid
	cmp r4, r0
	ble _0808CED2
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_0808CED2:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0808CEF8 @ =0x0200E668
	ldrb r0, [r0]
	mov r4, r8
	subs r0, r0, r4
	cmp r5, r0
	blt _0808CEA2
_0808CEE2:
	mov r6, r8
	lsls r0, r6, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _0808CEF8 @ =0x0200E668
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _0808CE90
	bl _0808E29A
	.align 2, 0
_0808CEF8: .4byte 0x0200E668
_0808CEFC: .4byte 0x0200CBF0
_0808CF00:
	movs r0, #0
	mov sl, r0
	movs r1, #0
	ldr r2, _0808CF7C @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0808CF14
	bl _0808E31E
_0808CF14:
	movs r5, #0
	adds r0, r1, #1
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r5, r1
	bge _0808CF66
	ldr r1, _0808CF80 @ =0x0200CBF0
	mov sb, r1
_0808CF26:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r2, sb
	adds r6, r0, r2
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitAid
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r3, sb
	adds r5, r0, r3
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitAid
	cmp r4, r0
	bge _0808CF56
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r4, #1
	mov sl, r4
_0808CF56:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0808CF7C @ =0x0200E668
	ldrb r0, [r0]
	mov r6, r8
	subs r0, r0, r6
	cmp r5, r0
	blt _0808CF26
_0808CF66:
	mov r7, r8
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _0808CF7C @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _0808CF14
	bl _0808E31E
	.align 2, 0
_0808CF7C: .4byte 0x0200E668
_0808CF80: .4byte 0x0200CBF0
_0808CF84:
	cmp r2, #0
	bne _0808D008
	movs r1, #0
	mov sl, r1
	ldr r3, _0808D000 @ =0x0200E668
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0808CF9A
	bl _0808E20E
_0808CF9A:
	movs r5, #0
	adds r0, r1, #1
	ldrb r3, [r3]
	subs r1, r3, r0
	mov r8, r0
	cmp r5, r1
	bge _0808CFEC
	ldr r2, _0808D004 @ =0x0200CBF0
	mov sb, r2
_0808CFAC:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r3, sb
	adds r6, r0, r3
	ldr r0, [r6]
	ldr r0, [r0]
	bl sub_08026FB0
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r1, sb
	adds r5, r0, r1
	ldr r0, [r5]
	ldr r0, [r0]
	bl sub_08026FB0
	cmp r4, r0
	bge _0808CFDC
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r2, #1
	mov sl, r2
_0808CFDC:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0808D000 @ =0x0200E668
	ldrb r0, [r0]
	mov r3, r8
	subs r0, r0, r3
	cmp r5, r0
	blt _0808CFAC
_0808CFEC:
	mov r4, r8
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _0808D000 @ =0x0200E668
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _0808CF9A
	bl _0808E20E
	.align 2, 0
_0808D000: .4byte 0x0200E668
_0808D004: .4byte 0x0200CBF0
_0808D008:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r2, _0808D084 @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0808D01C
	bl _0808E29A
_0808D01C:
	movs r5, #0
	adds r0, r1, #1
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r5, r1
	bge _0808D06E
	ldr r0, _0808D088 @ =0x0200CBF0
	mov sb, r0
_0808D02E:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, sb
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl sub_08026FB0
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, sb
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl sub_08026FB0
	cmp r4, r0
	ble _0808D05E
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_0808D05E:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0808D084 @ =0x0200E668
	ldrb r0, [r0]
	mov r4, r8
	subs r0, r0, r4
	cmp r5, r0
	blt _0808D02E
_0808D06E:
	mov r6, r8
	lsls r0, r6, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _0808D084 @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _0808D01C
	bl _0808E29A
	.align 2, 0
_0808D084: .4byte 0x0200E668
_0808D088: .4byte 0x0200CBF0
_0808D08C:
	cmp r2, #0
	beq _0808D092
	b _0808D194
_0808D092:
	movs r0, #0
	str r0, [sp, #0x50]
	movs r4, #0
	ldr r0, _0808D0D0 @ =0x0200E668
	ldrb r0, [r0]
	cmp r2, r0
	bhs _0808D0CA
	ldr r5, _0808D0D4 @ =0x0200CBF0
_0808D0A2:
	lsls r0, r4, #2
	adds r0, r0, r5
	ldr r0, [r0]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemIndex
	mov r2, sp
	adds r1, r2, r4
	strb r0, [r1]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r0, _0808D0D0 @ =0x0200E668
	ldrb r0, [r0]
	cmp r4, r0
	blo _0808D0A2
_0808D0CA:
	movs r4, #0
	b _0808D182
	.align 2, 0
_0808D0D0: .4byte 0x0200E668
_0808D0D4: .4byte 0x0200CBF0
_0808D0D8:
	movs r6, #0
	adds r0, r4, #1
	ldrb r1, [r1]
	subs r1, r1, r0
	str r0, [sp, #0x58]
	cmp r6, r1
	bge _0808D17C
	ldr r3, _0808D124 @ =0x0200CBF0
	mov sl, r3
_0808D0EA:
	adds r0, r6, #1
	mov r4, sp
	adds r4, r4, r0
	mov r8, r4
	mov r7, sp
	adds r5, r7, r6
	ldrb r4, [r4]
	adds r3, r4, #0
	ldrb r2, [r5]
	mov sb, r0
	cmp r3, r2
	bls _0808D128
	adds r1, r2, #0
	strb r4, [r5]
	mov r0, r8
	strb r1, [r0]
	lsls r2, r6, #2
	add r2, sl
	ldr r3, [r2]
	mov r4, sb
	lsls r1, r4, #2
	add r1, sl
	ldr r0, [r1]
	str r0, [r2]
	str r3, [r1]
	movs r6, #1
	str r6, [sp, #0x50]
	b _0808D16A
	.align 2, 0
_0808D124: .4byte 0x0200CBF0
_0808D128:
	cmp r3, r2
	bne _0808D16A
	mov r7, sb
	lsls r0, r7, #2
	mov r1, sl
	adds r7, r0, r1
	ldr r0, [r7]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	adds r4, r0, #0
	lsls r0, r6, #2
	mov r2, sl
	adds r6, r0, r2
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r4, r4, #0x10
	lsls r0, r0, #0x10
	cmp r4, r0
	bls _0808D16A
	ldrb r1, [r5]
	mov r3, r8
	ldrb r0, [r3]
	strb r0, [r5]
	strb r1, [r3]
	ldr r3, [r6]
	ldr r0, [r7]
	str r0, [r6]
	str r3, [r7]
	movs r4, #1
	str r4, [sp, #0x50]
_0808D16A:
	mov r6, sb
	lsls r0, r6, #0x18
	lsrs r6, r0, #0x18
	ldr r0, _0808D190 @ =0x0200E668
	ldrb r0, [r0]
	ldr r7, [sp, #0x58]
	subs r0, r0, r7
	cmp r6, r0
	blt _0808D0EA
_0808D17C:
	ldr r1, [sp, #0x58]
	lsls r0, r1, #0x18
	lsrs r4, r0, #0x18
_0808D182:
	ldr r1, _0808D190 @ =0x0200E668
	ldrb r0, [r1]
	subs r0, #1
	cmp r4, r0
	blt _0808D0D8
	ldr r2, [sp, #0x50]
	b _0808D286
	.align 2, 0
_0808D190: .4byte 0x0200E668
_0808D194:
	movs r3, #0
	str r3, [sp, #0x54]
	movs r4, #0
	ldr r0, _0808D1D0 @ =0x0200E668
	ldrb r0, [r0]
	cmp r3, r0
	bhs _0808D1CC
	ldr r5, _0808D1D4 @ =0x0200CBF0
_0808D1A4:
	lsls r0, r4, #2
	adds r0, r0, r5
	ldr r0, [r0]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemIndex
	mov r6, sp
	adds r1, r6, r4
	strb r0, [r1]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r0, _0808D1D0 @ =0x0200E668
	ldrb r0, [r0]
	cmp r4, r0
	blo _0808D1A4
_0808D1CC:
	movs r4, #0
	b _0808D27A
	.align 2, 0
_0808D1D0: .4byte 0x0200E668
_0808D1D4: .4byte 0x0200CBF0
_0808D1D8:
	movs r6, #0
	adds r0, r4, #1
	ldrb r1, [r1]
	subs r1, r1, r0
	str r0, [sp, #0x5c]
	cmp r6, r1
	bge _0808D274
	ldr r7, _0808D21C @ =0x0200CBF0
	mov sl, r7
_0808D1EA:
	adds r0, r6, #1
	mov r1, sp
	adds r1, r1, r0
	mov r8, r1
	mov r2, sp
	adds r5, r2, r6
	ldrb r4, [r1]
	adds r3, r4, #0
	ldrb r2, [r5]
	mov sb, r0
	cmp r3, r2
	bhs _0808D220
	adds r1, r2, #0
	strb r4, [r5]
	mov r3, r8
	strb r1, [r3]
	lsls r2, r6, #2
	add r2, sl
	ldr r3, [r2]
	lsls r1, r0, #2
	add r1, sl
	ldr r0, [r1]
	str r0, [r2]
	str r3, [r1]
	b _0808D25E
	.align 2, 0
_0808D21C: .4byte 0x0200CBF0
_0808D220:
	cmp r3, r2
	bne _0808D262
	mov r7, sb
	lsls r0, r7, #2
	mov r1, sl
	adds r7, r0, r1
	ldr r0, [r7]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	adds r4, r0, #0
	lsls r0, r6, #2
	mov r2, sl
	adds r6, r0, r2
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r4, r4, #0x10
	lsls r0, r0, #0x10
	cmp r4, r0
	bhs _0808D262
	ldrb r1, [r5]
	mov r3, r8
	ldrb r0, [r3]
	strb r0, [r5]
	strb r1, [r3]
	ldr r3, [r6]
	ldr r0, [r7]
	str r0, [r6]
	str r3, [r7]
_0808D25E:
	movs r4, #1
	str r4, [sp, #0x54]
_0808D262:
	mov r6, sb
	lsls r0, r6, #0x18
	lsrs r6, r0, #0x18
	ldr r0, _0808D294 @ =0x0200E668
	ldrb r0, [r0]
	ldr r7, [sp, #0x5c]
	subs r0, r0, r7
	cmp r6, r0
	blt _0808D1EA
_0808D274:
	ldr r1, [sp, #0x5c]
	lsls r0, r1, #0x18
	lsrs r4, r0, #0x18
_0808D27A:
	ldr r1, _0808D294 @ =0x0200E668
	ldrb r0, [r1]
	subs r0, #1
	cmp r4, r0
	blt _0808D1D8
	ldr r2, [sp, #0x54]
_0808D286:
	cmp r2, #0
	bne _0808D28E
	bl _0808E330
_0808D28E:
	movs r0, #1
	bl _0808E332
	.align 2, 0
_0808D294: .4byte 0x0200E668
_0808D298:
	cmp r2, #0
	bne _0808D314
	movs r3, #0
	mov ip, r3
	movs r1, #0
	ldr r4, _0808D30C @ =0x0200E668
	ldrb r0, [r4]
	subs r0, #1
	cmp r2, r0
	bge _0808D306
	adds r6, r4, #0
	mov sl, r6
_0808D2B0:
	movs r2, #0
	adds r0, r1, #1
	mov r7, sl
	ldrb r7, [r7]
	subs r1, r7, r0
	mov sb, r0
	cmp r2, r1
	bge _0808D2F6
	mov r8, sb
_0808D2C2:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r1, _0808D310 @ =0x0200CBF0
	adds r5, r0, r1
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r1
	ldr r3, [r2]
	movs r7, #4
	ldrsh r1, [r4, r7]
	movs r7, #4
	ldrsh r0, [r3, r7]
	cmp r1, r0
	ble _0808D2E6
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov ip, r0
_0808D2E6:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r1, [r1]
	mov r3, r8
	subs r0, r1, r3
	cmp r2, r0
	blt _0808D2C2
_0808D2F6:
	mov r4, sb
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	ldr r6, _0808D30C @ =0x0200E668
	ldrb r0, [r6]
	subs r0, #1
	cmp r1, r0
	blt _0808D2B0
_0808D306:
	mov r7, ip
	bl _0808E29C
	.align 2, 0
_0808D30C: .4byte 0x0200E668
_0808D310: .4byte 0x0200CBF0
_0808D314:
	movs r0, #0
	mov ip, r0
	movs r1, #0
	ldr r2, _0808D384 @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp ip, r0
	bge _0808D37E
	adds r3, r2, #0
	mov sl, r3
_0808D328:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sl
	ldrb r4, [r4]
	subs r1, r4, r0
	mov sb, r0
	cmp r2, r1
	bge _0808D36E
	mov r8, sb
_0808D33A:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r7, _0808D388 @ =0x0200CBF0
	adds r5, r0, r7
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r7
	ldr r3, [r2]
	movs r0, #4
	ldrsh r1, [r4, r0]
	movs r7, #4
	ldrsh r0, [r3, r7]
	cmp r1, r0
	bge _0808D35E
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov ip, r0
_0808D35E:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r1, [r1]
	mov r3, r8
	subs r0, r1, r3
	cmp r2, r0
	blt _0808D33A
_0808D36E:
	mov r4, sb
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	ldr r6, _0808D384 @ =0x0200E668
	ldrb r0, [r6]
	subs r0, #1
	cmp r1, r0
	blt _0808D328
_0808D37E:
	mov r7, ip
	bl _0808E29C
	.align 2, 0
_0808D384: .4byte 0x0200E668
_0808D388: .4byte 0x0200CBF0
_0808D38C:
	cmp r2, #0
	bne _0808D408
	movs r0, #0
	mov ip, r0
	movs r1, #0
	ldr r3, _0808D400 @ =0x0200E668
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	bge _0808D3FA
	adds r4, r3, #0
	mov sl, r4
_0808D3A4:
	movs r2, #0
	adds r0, r1, #1
	mov r6, sl
	ldrb r6, [r6]
	subs r1, r6, r0
	mov sb, r0
	cmp r2, r1
	bge _0808D3EA
	mov r8, sb
_0808D3B6:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r7, _0808D404 @ =0x0200CBF0
	adds r5, r0, r7
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r7
	ldr r3, [r2]
	movs r0, #6
	ldrsh r1, [r4, r0]
	movs r7, #6
	ldrsh r0, [r3, r7]
	cmp r1, r0
	ble _0808D3DA
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov ip, r0
_0808D3DA:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r1, [r1]
	mov r3, r8
	subs r0, r1, r3
	cmp r2, r0
	blt _0808D3B6
_0808D3EA:
	mov r4, sb
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	ldr r6, _0808D400 @ =0x0200E668
	ldrb r0, [r6]
	subs r0, #1
	cmp r1, r0
	blt _0808D3A4
_0808D3FA:
	mov r7, ip
	bl _0808E29C
	.align 2, 0
_0808D400: .4byte 0x0200E668
_0808D404: .4byte 0x0200CBF0
_0808D408:
	movs r0, #0
	mov ip, r0
	movs r1, #0
	ldr r2, _0808D478 @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp ip, r0
	bge _0808D472
	adds r3, r2, #0
	mov sl, r3
_0808D41C:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sl
	ldrb r4, [r4]
	subs r1, r4, r0
	mov sb, r0
	cmp r2, r1
	bge _0808D462
	mov r8, sb
_0808D42E:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r7, _0808D47C @ =0x0200CBF0
	adds r5, r0, r7
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r7
	ldr r3, [r2]
	movs r0, #6
	ldrsh r1, [r4, r0]
	movs r7, #6
	ldrsh r0, [r3, r7]
	cmp r1, r0
	bge _0808D452
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov ip, r0
_0808D452:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r1, [r1]
	mov r3, r8
	subs r0, r1, r3
	cmp r2, r0
	blt _0808D42E
_0808D462:
	mov r4, sb
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	ldr r6, _0808D478 @ =0x0200E668
	ldrb r0, [r6]
	subs r0, #1
	cmp r1, r0
	blt _0808D41C
_0808D472:
	mov r7, ip
	bl _0808E29C
	.align 2, 0
_0808D478: .4byte 0x0200E668
_0808D47C: .4byte 0x0200CBF0
_0808D480:
	cmp r2, #0
	bne _0808D4FC
	movs r0, #0
	mov ip, r0
	movs r1, #0
	ldr r3, _0808D4F4 @ =0x0200E668
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	bge _0808D4EE
	adds r4, r3, #0
	mov sl, r4
_0808D498:
	movs r2, #0
	adds r0, r1, #1
	mov r6, sl
	ldrb r6, [r6]
	subs r1, r6, r0
	mov sb, r0
	cmp r2, r1
	bge _0808D4DE
	mov r8, sb
_0808D4AA:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r7, _0808D4F8 @ =0x0200CBF0
	adds r5, r0, r7
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r7
	ldr r3, [r2]
	movs r0, #8
	ldrsh r1, [r4, r0]
	movs r7, #8
	ldrsh r0, [r3, r7]
	cmp r1, r0
	ble _0808D4CE
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov ip, r0
_0808D4CE:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r1, [r1]
	mov r3, r8
	subs r0, r1, r3
	cmp r2, r0
	blt _0808D4AA
_0808D4DE:
	mov r4, sb
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	ldr r6, _0808D4F4 @ =0x0200E668
	ldrb r0, [r6]
	subs r0, #1
	cmp r1, r0
	blt _0808D498
_0808D4EE:
	mov r7, ip
	bl _0808E29C
	.align 2, 0
_0808D4F4: .4byte 0x0200E668
_0808D4F8: .4byte 0x0200CBF0
_0808D4FC:
	movs r0, #0
	mov ip, r0
	movs r1, #0
	ldr r2, _0808D56C @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp ip, r0
	bge _0808D566
	adds r3, r2, #0
	mov sl, r3
_0808D510:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sl
	ldrb r4, [r4]
	subs r1, r4, r0
	mov sb, r0
	cmp r2, r1
	bge _0808D556
	mov r8, sb
_0808D522:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r7, _0808D570 @ =0x0200CBF0
	adds r5, r0, r7
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r7
	ldr r3, [r2]
	movs r0, #8
	ldrsh r1, [r4, r0]
	movs r7, #8
	ldrsh r0, [r3, r7]
	cmp r1, r0
	bge _0808D546
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov ip, r0
_0808D546:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r1, [r1]
	mov r3, r8
	subs r0, r1, r3
	cmp r2, r0
	blt _0808D522
_0808D556:
	mov r4, sb
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	ldr r6, _0808D56C @ =0x0200E668
	ldrb r0, [r6]
	subs r0, #1
	cmp r1, r0
	blt _0808D510
_0808D566:
	mov r7, ip
	bl _0808E29C
	.align 2, 0
_0808D56C: .4byte 0x0200E668
_0808D570: .4byte 0x0200CBF0
_0808D574:
	cmp r2, #0
	bne _0808D608
	movs r0, #0
	mov ip, r0
	movs r1, #0
	ldr r3, _0808D600 @ =0x0200E668
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0808D58A
	b _0808D68C
_0808D58A:
	adds r4, r3, #0
	mov sl, r4
_0808D58E:
	movs r3, #0
	adds r0, r1, #1
	mov r6, sl
	ldrb r6, [r6]
	subs r1, r6, r0
	mov r8, r0
	cmp r3, r1
	bge _0808D5EE
	ldr r7, _0808D604 @ =0x0200CBF0
	mov sb, r7
_0808D5A2:
	adds r7, r3, #1
	lsls r0, r7, #2
	mov r1, sb
	adds r6, r0, r1
	ldr r5, [r6]
	ldr r0, [r5]
	movs r2, #0x1d
	ldrsb r2, [r0, r2]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #0x12]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r2, r0
	lsls r0, r3, #2
	adds r3, r0, r1
	ldr r4, [r3]
	ldr r0, [r4]
	movs r1, #0x1d
	ldrsb r1, [r0, r1]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #0x12]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r1, r0
	cmp r2, r1
	ble _0808D5DE
	str r5, [r3]
	str r4, [r6]
	movs r2, #1
	mov ip, r2
_0808D5DE:
	lsls r0, r7, #0x18
	lsrs r3, r0, #0x18
	mov r4, sl
	ldrb r4, [r4]
	mov r6, r8
	subs r0, r4, r6
	cmp r3, r0
	blt _0808D5A2
_0808D5EE:
	mov r7, r8
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _0808D600 @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _0808D58E
	b _0808D68C
	.align 2, 0
_0808D600: .4byte 0x0200E668
_0808D604: .4byte 0x0200CBF0
_0808D608:
	movs r4, #0
	mov ip, r4
	movs r1, #0
	ldr r6, _0808D69C @ =0x0200E668
	ldrb r0, [r6]
	subs r0, #1
	cmp ip, r0
	bge _0808D68C
	adds r7, r6, #0
	mov sl, r7
_0808D61C:
	movs r3, #0
	adds r0, r1, #1
	mov r2, sl
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r3, r1
	bge _0808D67C
	ldr r4, _0808D6A0 @ =0x0200CBF0
	mov sb, r4
_0808D630:
	adds r7, r3, #1
	lsls r0, r7, #2
	mov r1, sb
	adds r6, r0, r1
	ldr r5, [r6]
	ldr r0, [r5]
	movs r2, #0x1d
	ldrsb r2, [r0, r2]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #0x12]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r2, r0
	lsls r0, r3, #2
	adds r3, r0, r1
	ldr r4, [r3]
	ldr r0, [r4]
	movs r1, #0x1d
	ldrsb r1, [r0, r1]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #0x12]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r1, r0
	cmp r2, r1
	bge _0808D66C
	str r5, [r3]
	str r4, [r6]
	movs r2, #1
	mov ip, r2
_0808D66C:
	lsls r0, r7, #0x18
	lsrs r3, r0, #0x18
	mov r4, sl
	ldrb r4, [r4]
	mov r6, r8
	subs r0, r4, r6
	cmp r3, r0
	blt _0808D630
_0808D67C:
	mov r7, r8
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _0808D69C @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _0808D61C
_0808D68C:
	mov r3, ip
_0808D68E:
	cmp r3, #0
	bne _0808D696
	bl _0808E330
_0808D696:
	movs r0, #1
	bl _0808E332
	.align 2, 0
_0808D69C: .4byte 0x0200E668
_0808D6A0: .4byte 0x0200CBF0
_0808D6A4:
	cmp r2, #0
	bne _0808D72C
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r6, _0808D724 @ =0x0200E668
	mov ip, r6
	ldrb r0, [r6]
	subs r0, #1
	cmp r2, r0
	blt _0808D6BE
	bl _0808E31E
_0808D6BE:
	adds r7, r6, #0
	mov sb, r7
_0808D6C2:
	movs r2, #0
	adds r0, r1, #1
	mov r3, sb
	ldrb r3, [r3]
	subs r1, r3, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808D712
	ldr r4, _0808D728 @ =0x0200CBF0
	mov r8, r4
_0808D6D6:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r0, [r4]
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r1, r0, #0x1c
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	cmp r1, r0
	bls _0808D704
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0808D704:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r6, sb
	ldrb r6, [r6]
	subs r0, r6, r7
	cmp r2, r0
	blt _0808D6D6
_0808D712:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r7, ip
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0808D6C2
	bl _0808E31E
	.align 2, 0
_0808D724: .4byte 0x0200E668
_0808D728: .4byte 0x0200CBF0
_0808D72C:
	movs r1, #0
	mov sl, r1
	ldr r2, _0808D7A8 @ =0x0200E668
	mov ip, r2
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0808D740
	bl _0808E31E
_0808D740:
	adds r3, r2, #0
	mov sb, r3
_0808D744:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sb
	ldrb r4, [r4]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808D794
	ldr r6, _0808D7AC @ =0x0200CBF0
	mov r8, r6
_0808D758:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r0, [r4]
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r1, r0, #0x1c
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	cmp r1, r0
	bhs _0808D786
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0808D786:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r6, sb
	ldrb r6, [r6]
	subs r0, r6, r7
	cmp r2, r0
	blt _0808D758
_0808D794:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r7, ip
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0808D744
	bl _0808E31E
	.align 2, 0
_0808D7A8: .4byte 0x0200E668
_0808D7AC: .4byte 0x0200CBF0
_0808D7B0:
	cmp r2, #0
	bne _0808D878
	movs r1, #0
	mov sb, r1
	movs r3, #0
	ldr r0, _0808D7E4 @ =0x0200E668
	ldrb r1, [r0]
	cmp r2, r1
	bhs _0808D7FC
	ldr r6, _0808D7E8 @ =0x0200CBF0
	adds r2, r1, #0
	movs r5, #0x10
	movs r4, #1
_0808D7CA:
	lsls r0, r3, #2
	adds r0, r0, r6
	ldr r0, [r0]
	ldr r0, [r0]
	ldr r1, [r0, #0xc]
	ands r1, r5
	cmp r1, #0
	beq _0808D7EC
	mov r7, sp
	adds r0, r7, r3
	strb r4, [r0]
	b _0808D7F2
	.align 2, 0
_0808D7E4: .4byte 0x0200E668
_0808D7E8: .4byte 0x0200CBF0
_0808D7EC:
	mov r7, sp
	adds r0, r7, r3
	strb r1, [r0]
_0808D7F2:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, r2
	blo _0808D7CA
_0808D7FC:
	movs r3, #0
	ldr r1, _0808D870 @ =0x0200E668
	ldrb r0, [r1]
	subs r0, #1
	cmp r3, r0
	bge _0808D868
	mov r8, r1
	ldr r2, _0808D874 @ =0x0200CBF0
	mov ip, r2
	mov sl, r8
_0808D810:
	movs r2, #0
	adds r0, r3, #1
	mov r3, r8
	ldrb r3, [r3]
	subs r1, r3, r0
	adds r6, r0, #0
	cmp r2, r1
	bge _0808D85A
	mov r7, ip
_0808D822:
	adds r5, r2, #1
	mov r0, sp
	adds r4, r0, r5
	adds r1, r0, r2
	ldrb r3, [r4]
	ldrb r0, [r1]
	cmp r3, r0
	bls _0808D84C
	ldrb r0, [r1]
	strb r3, [r1]
	strb r0, [r4]
	lsls r2, r2, #2
	adds r2, r2, r7
	ldr r3, [r2]
	lsls r1, r5, #2
	adds r1, r1, r7
	ldr r0, [r1]
	str r0, [r2]
	str r3, [r1]
	movs r1, #1
	mov sb, r1
_0808D84C:
	lsls r0, r5, #0x18
	lsrs r2, r0, #0x18
	mov r3, r8
	ldrb r3, [r3]
	subs r0, r3, r6
	cmp r2, r0
	blt _0808D822
_0808D85A:
	lsls r0, r6, #0x18
	lsrs r3, r0, #0x18
	mov r4, sl
	ldrb r0, [r4]
	subs r0, #1
	cmp r3, r0
	blt _0808D810
_0808D868:
	mov r6, sb
	bl _0808E210
	.align 2, 0
_0808D870: .4byte 0x0200E668
_0808D874: .4byte 0x0200CBF0
_0808D878:
	movs r7, #0
	mov sb, r7
	movs r3, #0
	ldr r0, _0808D8A8 @ =0x0200E668
	ldrb r1, [r0]
	cmp sb, r1
	bhs _0808D8C0
	ldr r6, _0808D8AC @ =0x0200CBF0
	adds r2, r1, #0
	movs r5, #0x10
	movs r4, #1
_0808D88E:
	lsls r0, r3, #2
	adds r0, r0, r6
	ldr r0, [r0]
	ldr r0, [r0]
	ldr r1, [r0, #0xc]
	ands r1, r5
	cmp r1, #0
	beq _0808D8B0
	mov r1, sp
	adds r0, r1, r3
	strb r4, [r0]
	b _0808D8B6
	.align 2, 0
_0808D8A8: .4byte 0x0200E668
_0808D8AC: .4byte 0x0200CBF0
_0808D8B0:
	mov r7, sp
	adds r0, r7, r3
	strb r1, [r0]
_0808D8B6:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, r2
	blo _0808D88E
_0808D8C0:
	movs r3, #0
	ldr r1, _0808D934 @ =0x0200E668
	ldrb r0, [r1]
	subs r0, #1
	cmp r3, r0
	bge _0808D92C
	mov r8, r1
	ldr r2, _0808D938 @ =0x0200CBF0
	mov ip, r2
	mov sl, r8
_0808D8D4:
	movs r2, #0
	adds r0, r3, #1
	mov r3, r8
	ldrb r3, [r3]
	subs r1, r3, r0
	adds r6, r0, #0
	cmp r2, r1
	bge _0808D91E
	mov r7, ip
_0808D8E6:
	adds r5, r2, #1
	mov r0, sp
	adds r4, r0, r5
	adds r1, r0, r2
	ldrb r3, [r4]
	ldrb r0, [r1]
	cmp r3, r0
	bhs _0808D910
	ldrb r0, [r1]
	strb r3, [r1]
	strb r0, [r4]
	lsls r2, r2, #2
	adds r2, r2, r7
	ldr r3, [r2]
	lsls r1, r5, #2
	adds r1, r1, r7
	ldr r0, [r1]
	str r0, [r2]
	str r3, [r1]
	movs r1, #1
	mov sb, r1
_0808D910:
	lsls r0, r5, #0x18
	lsrs r2, r0, #0x18
	mov r3, r8
	ldrb r3, [r3]
	subs r0, r3, r6
	cmp r2, r0
	blt _0808D8E6
_0808D91E:
	lsls r0, r6, #0x18
	lsrs r3, r0, #0x18
	mov r4, sl
	ldrb r0, [r4]
	subs r0, #1
	cmp r3, r0
	blt _0808D8D4
_0808D92C:
	mov r6, sb
	bl _0808E210
	.align 2, 0
_0808D934: .4byte 0x0200E668
_0808D938: .4byte 0x0200CBF0
_0808D93C:
	cmp r2, #0
	bne _0808D9C0
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, _0808D9B8 @ =0x0200E668
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	blt _0808D956
	bl _0808E31E
_0808D956:
	ldr r2, _0808D9B8 @ =0x0200E668
	mov sb, r2
_0808D95A:
	movs r2, #0
	adds r0, r1, #1
	mov r3, sb
	ldrb r3, [r3]
	subs r1, r3, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808D9A6
	ldr r4, _0808D9BC @ =0x0200CBF0
	mov r8, r4
_0808D96E:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x28
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x28
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls _0808D998
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0808D998:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r6, sb
	ldrb r6, [r6]
	subs r0, r6, r7
	cmp r2, r0
	blt _0808D96E
_0808D9A6:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r7, ip
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0808D95A
	bl _0808E31E
	.align 2, 0
_0808D9B8: .4byte 0x0200E668
_0808D9BC: .4byte 0x0200CBF0
_0808D9C0:
	movs r1, #0
	mov sl, r1
	ldr r2, _0808DA38 @ =0x0200E668
	mov ip, r2
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0808D9D4
	bl _0808E31E
_0808D9D4:
	adds r3, r2, #0
	mov sb, r3
_0808D9D8:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sb
	ldrb r4, [r4]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808DA24
	ldr r6, _0808DA3C @ =0x0200CBF0
	mov r8, r6
_0808D9EC:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x28
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x28
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bhs _0808DA16
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0808DA16:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r6, sb
	ldrb r6, [r6]
	subs r0, r6, r7
	cmp r2, r0
	blt _0808D9EC
_0808DA24:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r7, ip
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0808D9D8
	bl _0808E31E
	.align 2, 0
_0808DA38: .4byte 0x0200E668
_0808DA3C: .4byte 0x0200CBF0
_0808DA40:
	cmp r2, #0
	bne _0808DAC4
	movs r1, #0
	mov sl, r1
	ldr r3, _0808DABC @ =0x0200E668
	mov ip, r3
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0808DA58
	bl _0808E31E
_0808DA58:
	adds r4, r3, #0
	mov sb, r4
_0808DA5C:
	movs r2, #0
	adds r0, r1, #1
	mov r6, sb
	ldrb r6, [r6]
	subs r1, r6, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808DAA8
	ldr r0, _0808DAC0 @ =0x0200CBF0
	mov r8, r0
_0808DA70:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x29
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x29
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls _0808DA9A
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0808DA9A:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r6, sb
	ldrb r6, [r6]
	subs r0, r6, r7
	cmp r2, r0
	blt _0808DA70
_0808DAA8:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r7, ip
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0808DA5C
	bl _0808E31E
	.align 2, 0
_0808DABC: .4byte 0x0200E668
_0808DAC0: .4byte 0x0200CBF0
_0808DAC4:
	movs r1, #0
	mov sl, r1
	ldr r2, _0808DB3C @ =0x0200E668
	mov ip, r2
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0808DAD8
	bl _0808E31E
_0808DAD8:
	adds r3, r2, #0
	mov sb, r3
_0808DADC:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sb
	ldrb r4, [r4]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808DB28
	ldr r6, _0808DB40 @ =0x0200CBF0
	mov r8, r6
_0808DAF0:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x29
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x29
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bhs _0808DB1A
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0808DB1A:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r6, sb
	ldrb r6, [r6]
	subs r0, r6, r7
	cmp r2, r0
	blt _0808DAF0
_0808DB28:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r7, ip
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0808DADC
	bl _0808E31E
	.align 2, 0
_0808DB3C: .4byte 0x0200E668
_0808DB40: .4byte 0x0200CBF0
_0808DB44:
	cmp r2, #0
	bne _0808DBC4
	movs r1, #0
	mov sl, r1
	ldr r3, _0808DBBC @ =0x0200E668
	mov ip, r3
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0808DB5A
	b _0808E31E
_0808DB5A:
	adds r4, r3, #0
	mov sb, r4
_0808DB5E:
	movs r2, #0
	adds r0, r1, #1
	mov r6, sb
	ldrb r6, [r6]
	subs r1, r6, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808DBAA
	ldr r0, _0808DBC0 @ =0x0200CBF0
	mov r8, r0
_0808DB72:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2a
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2a
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls _0808DB9C
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0808DB9C:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r6, sb
	ldrb r6, [r6]
	subs r0, r6, r7
	cmp r2, r0
	blt _0808DB72
_0808DBAA:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r7, ip
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0808DB5E
	b _0808E31E
	.align 2, 0
_0808DBBC: .4byte 0x0200E668
_0808DBC0: .4byte 0x0200CBF0
_0808DBC4:
	movs r1, #0
	mov sl, r1
	ldr r2, _0808DC38 @ =0x0200E668
	mov ip, r2
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0808DBD6
	b _0808E31E
_0808DBD6:
	adds r3, r2, #0
	mov sb, r3
_0808DBDA:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sb
	ldrb r4, [r4]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808DC26
	ldr r6, _0808DC3C @ =0x0200CBF0
	mov r8, r6
_0808DBEE:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2a
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2a
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bhs _0808DC18
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0808DC18:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r6, sb
	ldrb r6, [r6]
	subs r0, r6, r7
	cmp r2, r0
	blt _0808DBEE
_0808DC26:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r7, ip
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0808DBDA
	b _0808E31E
	.align 2, 0
_0808DC38: .4byte 0x0200E668
_0808DC3C: .4byte 0x0200CBF0
_0808DC40:
	cmp r2, #0
	bne _0808DCC0
	movs r1, #0
	mov sl, r1
	ldr r3, _0808DCB8 @ =0x0200E668
	mov ip, r3
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0808DC56
	b _0808E31E
_0808DC56:
	adds r4, r3, #0
	mov sb, r4
_0808DC5A:
	movs r2, #0
	adds r0, r1, #1
	mov r6, sb
	ldrb r6, [r6]
	subs r1, r6, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808DCA6
	ldr r0, _0808DCBC @ =0x0200CBF0
	mov r8, r0
_0808DC6E:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2b
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2b
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls _0808DC98
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0808DC98:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r6, sb
	ldrb r6, [r6]
	subs r0, r6, r7
	cmp r2, r0
	blt _0808DC6E
_0808DCA6:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r7, ip
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0808DC5A
	b _0808E31E
	.align 2, 0
_0808DCB8: .4byte 0x0200E668
_0808DCBC: .4byte 0x0200CBF0
_0808DCC0:
	movs r1, #0
	mov sl, r1
	ldr r2, _0808DD34 @ =0x0200E668
	mov ip, r2
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0808DCD2
	b _0808E31E
_0808DCD2:
	adds r3, r2, #0
	mov sb, r3
_0808DCD6:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sb
	ldrb r4, [r4]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808DD22
	ldr r6, _0808DD38 @ =0x0200CBF0
	mov r8, r6
_0808DCEA:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2b
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2b
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bhs _0808DD14
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0808DD14:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r6, sb
	ldrb r6, [r6]
	subs r0, r6, r7
	cmp r2, r0
	blt _0808DCEA
_0808DD22:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r7, ip
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0808DCD6
	b _0808E31E
	.align 2, 0
_0808DD34: .4byte 0x0200E668
_0808DD38: .4byte 0x0200CBF0
_0808DD3C:
	cmp r2, #0
	bne _0808DDBC
	movs r1, #0
	mov sl, r1
	ldr r3, _0808DDB4 @ =0x0200E668
	mov ip, r3
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0808DD52
	b _0808E31E
_0808DD52:
	adds r4, r3, #0
	mov sb, r4
_0808DD56:
	movs r2, #0
	adds r0, r1, #1
	mov r6, sb
	ldrb r6, [r6]
	subs r1, r6, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808DDA2
	ldr r0, _0808DDB8 @ =0x0200CBF0
	mov r8, r0
_0808DD6A:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2c
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2c
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls _0808DD94
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0808DD94:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r6, sb
	ldrb r6, [r6]
	subs r0, r6, r7
	cmp r2, r0
	blt _0808DD6A
_0808DDA2:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r7, ip
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0808DD56
	b _0808E31E
	.align 2, 0
_0808DDB4: .4byte 0x0200E668
_0808DDB8: .4byte 0x0200CBF0
_0808DDBC:
	movs r1, #0
	mov sl, r1
	ldr r2, _0808DE30 @ =0x0200E668
	mov ip, r2
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0808DDCE
	b _0808E31E
_0808DDCE:
	adds r3, r2, #0
	mov sb, r3
_0808DDD2:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sb
	ldrb r4, [r4]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808DE1E
	ldr r6, _0808DE34 @ =0x0200CBF0
	mov r8, r6
_0808DDE6:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2c
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2c
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bhs _0808DE10
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0808DE10:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r6, sb
	ldrb r6, [r6]
	subs r0, r6, r7
	cmp r2, r0
	blt _0808DDE6
_0808DE1E:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r7, ip
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0808DDD2
	b _0808E31E
	.align 2, 0
_0808DE30: .4byte 0x0200E668
_0808DE34: .4byte 0x0200CBF0
_0808DE38:
	cmp r2, #0
	bne _0808DEB8
	movs r1, #0
	mov sl, r1
	ldr r3, _0808DEB0 @ =0x0200E668
	mov ip, r3
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0808DE4E
	b _0808E31E
_0808DE4E:
	adds r4, r3, #0
	mov sb, r4
_0808DE52:
	movs r2, #0
	adds r0, r1, #1
	mov r6, sb
	ldrb r6, [r6]
	subs r1, r6, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808DE9E
	ldr r0, _0808DEB4 @ =0x0200CBF0
	mov r8, r0
_0808DE66:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2d
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2d
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls _0808DE90
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0808DE90:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r6, sb
	ldrb r6, [r6]
	subs r0, r6, r7
	cmp r2, r0
	blt _0808DE66
_0808DE9E:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r7, ip
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0808DE52
	b _0808E31E
	.align 2, 0
_0808DEB0: .4byte 0x0200E668
_0808DEB4: .4byte 0x0200CBF0
_0808DEB8:
	movs r1, #0
	mov sl, r1
	ldr r2, _0808DF2C @ =0x0200E668
	mov ip, r2
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0808DECA
	b _0808E31E
_0808DECA:
	adds r3, r2, #0
	mov sb, r3
_0808DECE:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sb
	ldrb r4, [r4]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808DF1A
	ldr r6, _0808DF30 @ =0x0200CBF0
	mov r8, r6
_0808DEE2:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2d
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2d
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bhs _0808DF0C
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0808DF0C:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r6, sb
	ldrb r6, [r6]
	subs r0, r6, r7
	cmp r2, r0
	blt _0808DEE2
_0808DF1A:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r7, ip
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0808DECE
	b _0808E31E
	.align 2, 0
_0808DF2C: .4byte 0x0200E668
_0808DF30: .4byte 0x0200CBF0
_0808DF34:
	cmp r2, #0
	bne _0808DFB4
	movs r1, #0
	mov sl, r1
	ldr r3, _0808DFAC @ =0x0200E668
	mov ip, r3
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0808DF4A
	b _0808E31E
_0808DF4A:
	adds r4, r3, #0
	mov sb, r4
_0808DF4E:
	movs r2, #0
	adds r0, r1, #1
	mov r6, sb
	ldrb r6, [r6]
	subs r1, r6, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808DF9A
	ldr r0, _0808DFB0 @ =0x0200CBF0
	mov r8, r0
_0808DF62:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2e
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2e
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls _0808DF8C
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0808DF8C:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r6, sb
	ldrb r6, [r6]
	subs r0, r6, r7
	cmp r2, r0
	blt _0808DF62
_0808DF9A:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r7, ip
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0808DF4E
	b _0808E31E
	.align 2, 0
_0808DFAC: .4byte 0x0200E668
_0808DFB0: .4byte 0x0200CBF0
_0808DFB4:
	movs r1, #0
	mov sl, r1
	ldr r2, _0808E028 @ =0x0200E668
	mov ip, r2
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0808DFC6
	b _0808E31E
_0808DFC6:
	adds r3, r2, #0
	mov sb, r3
_0808DFCA:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sb
	ldrb r4, [r4]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808E016
	ldr r6, _0808E02C @ =0x0200CBF0
	mov r8, r6
_0808DFDE:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2e
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2e
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bhs _0808E008
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0808E008:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r6, sb
	ldrb r6, [r6]
	subs r0, r6, r7
	cmp r2, r0
	blt _0808DFDE
_0808E016:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r7, ip
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0808DFCA
	b _0808E31E
	.align 2, 0
_0808E028: .4byte 0x0200E668
_0808E02C: .4byte 0x0200CBF0
_0808E030:
	cmp r2, #0
	bne _0808E0B0
	movs r1, #0
	mov sl, r1
	ldr r3, _0808E0A8 @ =0x0200E668
	mov ip, r3
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0808E046
	b _0808E31E
_0808E046:
	adds r4, r3, #0
	mov sb, r4
_0808E04A:
	movs r2, #0
	adds r0, r1, #1
	mov r6, sb
	ldrb r6, [r6]
	subs r1, r6, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808E096
	ldr r0, _0808E0AC @ =0x0200CBF0
	mov r8, r0
_0808E05E:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2f
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2f
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls _0808E088
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0808E088:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r6, sb
	ldrb r6, [r6]
	subs r0, r6, r7
	cmp r2, r0
	blt _0808E05E
_0808E096:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r7, ip
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0808E04A
	b _0808E31E
	.align 2, 0
_0808E0A8: .4byte 0x0200E668
_0808E0AC: .4byte 0x0200CBF0
_0808E0B0:
	movs r1, #0
	mov sl, r1
	ldr r2, _0808E124 @ =0x0200E668
	mov ip, r2
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0808E0C2
	b _0808E31E
_0808E0C2:
	adds r3, r2, #0
	mov sb, r3
_0808E0C6:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sb
	ldrb r4, [r4]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _0808E112
	ldr r6, _0808E128 @ =0x0200CBF0
	mov r8, r6
_0808E0DA:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2f
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2f
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bhs _0808E104
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0808E104:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r6, sb
	ldrb r6, [r6]
	subs r0, r6, r7
	cmp r2, r0
	blt _0808E0DA
_0808E112:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r7, ip
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0808E0C6
	b _0808E31E
	.align 2, 0
_0808E124: .4byte 0x0200E668
_0808E128: .4byte 0x0200CBF0
_0808E12C:
	cmp r2, #0
	bne _0808E1A4
	movs r1, #0
	mov sl, r1
	ldr r3, _0808E19C @ =0x0200E668
	mov ip, r3
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	bge _0808E20E
	adds r4, r3, #0
	mov sb, r4
_0808E144:
	movs r4, #0
	adds r0, r1, #1
	mov r6, sb
	ldrb r6, [r6]
	subs r1, r6, r0
	mov r8, r0
	cmp r4, r1
	bge _0808E188
	ldr r6, _0808E1A0 @ =0x0200CBF0
	mov r7, r8
	str r7, [sp, #0x64]
_0808E15A:
	adds r5, r4, #1
	lsls r0, r5, #2
	adds r3, r0, r6
	ldr r2, [r3]
	lsls r0, r4, #2
	adds r0, r0, r6
	ldr r1, [r0]
	ldrb r4, [r2, #0xa]
	ldrb r7, [r1, #0xa]
	cmp r4, r7
	bls _0808E178
	str r2, [r0]
	str r1, [r3]
	movs r0, #1
	mov sl, r0
_0808E178:
	lsls r0, r5, #0x18
	lsrs r4, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	ldr r2, [sp, #0x64]
	subs r0, r1, r2
	cmp r4, r0
	blt _0808E15A
_0808E188:
	mov r3, r8
	lsls r0, r3, #0x18
	lsrs r1, r0, #0x18
	mov r4, ip
	ldrb r0, [r4]
	subs r0, #1
	cmp r1, r0
	blt _0808E144
	b _0808E20E
	.align 2, 0
_0808E19C: .4byte 0x0200E668
_0808E1A0: .4byte 0x0200CBF0
_0808E1A4:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, _0808E21C @ =0x0200E668
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp sl, r0
	bge _0808E20E
	ldr r2, _0808E21C @ =0x0200E668
	mov sb, r2
_0808E1BA:
	movs r4, #0
	adds r0, r1, #1
	mov r3, sb
	ldrb r3, [r3]
	subs r1, r3, r0
	mov r8, r0
	cmp r4, r1
	bge _0808E1FE
	ldr r6, _0808E220 @ =0x0200CBF0
	mov r7, r8
	str r7, [sp, #0x64]
_0808E1D0:
	adds r5, r4, #1
	lsls r0, r5, #2
	adds r3, r0, r6
	ldr r2, [r3]
	lsls r0, r4, #2
	adds r0, r0, r6
	ldr r1, [r0]
	ldrb r4, [r2, #0xa]
	ldrb r7, [r1, #0xa]
	cmp r4, r7
	bhs _0808E1EE
	str r2, [r0]
	str r1, [r3]
	movs r0, #1
	mov sl, r0
_0808E1EE:
	lsls r0, r5, #0x18
	lsrs r4, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	ldr r2, [sp, #0x64]
	subs r0, r1, r2
	cmp r4, r0
	blt _0808E1D0
_0808E1FE:
	mov r3, r8
	lsls r0, r3, #0x18
	lsrs r1, r0, #0x18
	mov r4, ip
	ldrb r0, [r4]
	subs r0, #1
	cmp r1, r0
	blt _0808E1BA
_0808E20E:
	mov r6, sl
_0808E210:
	cmp r6, #0
	bne _0808E216
	b _0808E330
_0808E216:
	movs r0, #1
	b _0808E332
	.align 2, 0
_0808E21C: .4byte 0x0200E668
_0808E220: .4byte 0x0200CBF0
_0808E224:
	cmp r2, #0
	bne _0808E2AC
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r2, _0808E2A4 @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	bge _0808E29A
_0808E238:
	movs r5, #0
	adds r0, r1, #1
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r5, r1
	bge _0808E28A
	ldr r0, _0808E2A8 @ =0x0200CBF0
	mov sb, r0
_0808E24A:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, sb
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl sub_0808BF14
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, sb
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl sub_0808BF14
	cmp r4, r0
	ble _0808E27A
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_0808E27A:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0808E2A4 @ =0x0200E668
	ldrb r0, [r0]
	mov r4, r8
	subs r0, r0, r4
	cmp r5, r0
	blt _0808E24A
_0808E28A:
	mov r6, r8
	lsls r0, r6, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _0808E2A4 @ =0x0200E668
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _0808E238
_0808E29A:
	mov r7, sl
_0808E29C:
	cmp r7, #0
	beq _0808E330
	movs r0, #1
	b _0808E332
	.align 2, 0
_0808E2A4: .4byte 0x0200E668
_0808E2A8: .4byte 0x0200CBF0
_0808E2AC:
	movs r0, #0
	mov sl, r0
	movs r2, #0
	ldr r1, _0808E328 @ =0x0200E668
	ldrb r0, [r1]
	subs r0, #1
	cmp sl, r0
	bge _0808E31E
_0808E2BC:
	movs r5, #0
	adds r0, r2, #1
	ldrb r1, [r1]
	subs r1, r1, r0
	mov r8, r0
	cmp r5, r1
	bge _0808E30E
	ldr r1, _0808E32C @ =0x0200CBF0
	mov sb, r1
_0808E2CE:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r2, sb
	adds r6, r0, r2
	ldr r0, [r6]
	ldr r0, [r0]
	bl sub_0808BF14
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r3, sb
	adds r5, r0, r3
	ldr r0, [r5]
	ldr r0, [r0]
	bl sub_0808BF14
	cmp r4, r0
	bge _0808E2FE
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r4, #1
	mov sl, r4
_0808E2FE:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0808E328 @ =0x0200E668
	ldrb r0, [r0]
	mov r6, r8
	subs r0, r0, r6
	cmp r5, r0
	blt _0808E2CE
_0808E30E:
	mov r7, r8
	lsls r0, r7, #0x18
	lsrs r2, r0, #0x18
	ldr r1, _0808E328 @ =0x0200E668
	ldrb r0, [r1]
	subs r0, #1
	cmp r2, r0
	blt _0808E2BC
_0808E31E:
	mov r0, sl
	cmp r0, #0
	beq _0808E330
	movs r0, #1
	b _0808E332
	.align 2, 0
_0808E328: .4byte 0x0200E668
_0808E32C: .4byte 0x0200CBF0
_0808E330:
	movs r0, #0
_0808E332:
	add sp, #0x68
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0808E344
sub_0808E344: @ 0x0808E344
	push {r4, lr}
	bl sub_080908E8
	adds r4, r0, #0
	bl sub_0803DEC4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808E368
	ldr r0, _0808E364 @ =0x08D8C0B8
	lsls r1, r4, #1
	adds r1, r1, r4
	lsls r1, r1, #2
	adds r0, #8
	b _0808E3A0
	.align 2, 0
_0808E364: .4byte 0x08D8C0B8
_0808E368:
	ldr r0, _0808E37C @ =gPlaySt
	ldrb r1, [r0, #0xe]
	cmp r1, #0x2e
	bne _0808E380
	cmp r4, #7
	bne _0808E380
	movs r0, #0xfd
	lsls r0, r0, #2
	b _0808E3A4
	.align 2, 0
_0808E37C: .4byte gPlaySt
_0808E380:
	ldrb r0, [r0, #0x1b]
	cmp r0, #1
	beq _0808E398
	ldr r0, _0808E394 @ =0x08D8C0B8
	lsls r1, r4, #1
	adds r1, r1, r4
	lsls r1, r1, #2
	adds r0, #4
	b _0808E3A0
	.align 2, 0
_0808E394: .4byte 0x08D8C0B8
_0808E398:
	ldr r0, _0808E3AC @ =0x08D8C0B8
	lsls r1, r4, #1
	adds r1, r1, r4
	lsls r1, r1, #2
_0808E3A0:
	adds r1, r1, r0
	ldr r0, [r1]
_0808E3A4:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0808E3AC: .4byte 0x08D8C0B8

	thumb_func_start sub_0808E3B0
sub_0808E3B0: @ 0x0808E3B0
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r3, #0
	movs r2, #0
	movs r5, #1
_0808E3BA:
	adds r0, r1, #0
	asrs r0, r2
	ands r0, r5
	cmp r0, #0
	beq _0808E3CE
	cmp r4, r3
	bne _0808E3CC
	adds r0, r2, #0
	b _0808E3D8
_0808E3CC:
	adds r3, #1
_0808E3CE:
	adds r2, #1
	cmp r2, #3
	ble _0808E3BA
	movs r0, #1
	rsbs r0, r0, #0
_0808E3D8:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0808E3E0
sub_0808E3E0: @ 0x0808E3E0
	push {r4, lr}
	adds r3, r0, #0
	movs r2, #0
	movs r1, #0
	movs r4, #1
_0808E3EA:
	adds r0, r3, #0
	asrs r0, r1
	ands r0, r4
	cmp r0, #0
	beq _0808E3F6
	adds r2, #1
_0808E3F6:
	adds r1, #1
	cmp r1, #3
	ble _0808E3EA
	adds r0, r2, #0
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_0808E404
sub_0808E404: @ 0x0808E404
	push {r4, r5, r6, lr}
	sub sp, #0x10
	adds r2, r0, #0
	adds r4, r1, #0
	mov r1, sp
	ldr r0, _0808E448 @ =0x0842CF1C
	ldm r0!, {r3, r5, r6}
	stm r1!, {r3, r5, r6}
	ldr r0, [r0]
	str r0, [r1]
	ldr r0, _0808E44C @ =0x0841EF4C
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r2, r2, r1
	adds r1, r2, #0
	bl sub_08013688
	ldr r1, _0808E450 @ =gPlaySt
	adds r1, #0x41
	movs r0, #0xc
	ldrb r1, [r1]
	ands r0, r1
	add r0, sp
	ldr r0, [r0]
	lsls r4, r4, #5
	adds r1, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808E448: .4byte 0x0842CF1C
_0808E44C: .4byte 0x0841EF4C
_0808E450: .4byte gPlaySt

	thumb_func_start sub_0808E454
sub_0808E454: @ 0x0808E454
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	adds r7, r1, #0
	mov sb, r2
	mov sl, r3
	ldr r1, _0808E4C8 @ =0x0842162C
	lsls r0, r2, #0xf
	lsrs r0, r0, #0x14
	movs r3, #0x80
	lsls r3, r3, #5
	adds r2, r3, #0
	adds r0, r0, r2
	lsls r6, r0, #0x10
	lsrs r2, r6, #0x10
	mov r0, r8
	bl TmApplyTsa_thm
	movs r5, #0
	cmp r5, r7
	bge _0808E49E
	mov r4, r8
	adds r4, #0x40
	adds r5, r7, #0
_0808E48A:
	adds r0, r4, #0
	ldr r1, _0808E4CC @ =0x08421644
	lsrs r2, r6, #0x10
	bl TmApplyTsa_thm
	adds r4, #0x80
	subs r5, #1
	cmp r5, #0
	bne _0808E48A
	adds r5, r7, #0
_0808E49E:
	lsls r0, r5, #7
	add r0, r8
	adds r0, #0x40
	ldr r1, _0808E4D0 @ =0x08421684
	mov r4, sl
	lsls r2, r4, #0xc
	mov r4, sb
	lsls r3, r4, #0xf
	lsrs r3, r3, #0x14
	adds r2, r2, r3
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	bl TmApplyTsa_thm
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808E4C8: .4byte 0x0842162C
_0808E4CC: .4byte 0x08421644
_0808E4D0: .4byte 0x08421684

	thumb_func_start sub_0808E4D4
sub_0808E4D4: @ 0x0808E4D4
	push {lr}
	adds r2, r0, #0
	adds r2, #0x33
	movs r1, #1
	strb r1, [r2]
	movs r1, #0xa
	bl Proc_Goto
	pop {r0}
	bx r0

	thumb_func_start sub_0808E4E8
sub_0808E4E8: @ 0x0808E4E8
	push {lr}
	adds r2, r0, #0
	adds r2, #0x33
	movs r1, #2
	strb r1, [r2]
	movs r1, #0xa
	bl Proc_Goto
	pop {r0}
	bx r0

	thumb_func_start sub_0808E4FC
sub_0808E4FC: @ 0x0808E4FC
	push {lr}
	movs r1, #0xc
	bl Proc_Goto
	ldr r0, _0808E51C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808E516
	ldr r0, _0808E520 @ =0x0000038A
	bl m4aSongNumStart
_0808E516:
	pop {r0}
	bx r0
	.align 2, 0
_0808E51C: .4byte gPlaySt
_0808E520: .4byte 0x0000038A

	thumb_func_start sub_0808E524
sub_0808E524: @ 0x0808E524
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0808E550 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808E53A
	ldr r0, _0808E554 @ =0x0000038A
	bl m4aSongNumStart
_0808E53A:
	adds r1, r4, #0
	adds r1, #0x33
	movs r0, #3
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #8
	bl Proc_Goto
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808E550: .4byte gPlaySt
_0808E554: .4byte 0x0000038A

	thumb_func_start sub_0808E558
sub_0808E558: @ 0x0808E558
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, #0
	beq _0808E574
	bl sub_080903A8
	adds r0, r4, #0
	movs r1, #0xb
	bl Proc_Goto
	movs r0, #1
	b _0808E576
_0808E574:
	movs r0, #0
_0808E576:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_0808E57C
sub_0808E57C: @ 0x0808E57C
	push {lr}
	movs r1, #5
	bl Proc_Goto
	pop {r0}
	bx r0

	thumb_func_start sub_0808E588
sub_0808E588: @ 0x0808E588
	push {r4, lr}
	adds r4, r0, #0
	bl sub_0803DEC4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0808E59E
	bl sub_0808E8C8
	cmp r0, #0
	beq _0808E5AA
_0808E59E:
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
	movs r0, #1
	b _0808E5AC
_0808E5AA:
	movs r0, #0
_0808E5AC:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0808E5B4
sub_0808E5B4: @ 0x0808E5B4
	push {lr}
	movs r1, #5
	bl Proc_Goto
	pop {r0}
	bx r0

	thumb_func_start nullsub_74
nullsub_74: @ 0x0808E5C0
	bx lr
	.align 2, 0

	thumb_func_start nullsub_75
nullsub_75: @ 0x0808E5C4
	bx lr
	.align 2, 0

	thumb_func_start sub_0808E5C8
sub_0808E5C8: @ 0x0808E5C8
	ldr r1, _0808E5D8 @ =0x0203E760
	movs r2, #0
	adds r0, r1, #4
_0808E5CE:
	strb r2, [r0]
	subs r0, #1
	cmp r0, r1
	bge _0808E5CE
	bx lr
	.align 2, 0
_0808E5D8: .4byte 0x0203E760

	thumb_func_start sub_0808E5DC
sub_0808E5DC: @ 0x0808E5DC
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	movs r2, #0
	ldr r4, _0808E5F4 @ =0x0203E760
_0808E5E6:
	adds r1, r2, r4
	ldrb r0, [r1]
	cmp r0, #0
	bne _0808E5F8
	strb r3, [r1]
	b _0808E5FE
	.align 2, 0
_0808E5F4: .4byte 0x0203E760
_0808E5F8:
	adds r2, #1
	cmp r2, #4
	ble _0808E5E6
_0808E5FE:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0808E604
sub_0808E604: @ 0x0808E604
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	movs r1, #0
	ldr r3, _0808E634 @ =0x0203E760
	adds r4, r3, #0
_0808E610:
	adds r0, r1, r3
	ldrb r0, [r0]
	cmp r0, r2
	bne _0808E638
	adds r2, r1, #0
	cmp r1, #3
	bgt _0808E62C
	adds r1, r1, r4
_0808E620:
	ldrb r0, [r1, #1]
	strb r0, [r1]
	adds r1, #1
	adds r2, #1
	cmp r2, #3
	ble _0808E620
_0808E62C:
	movs r0, #0
	strb r0, [r3, #4]
	b _0808E63E
	.align 2, 0
_0808E634: .4byte 0x0203E760
_0808E638:
	adds r1, #1
	cmp r1, #4
	ble _0808E610
_0808E63E:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0808E644
sub_0808E644: @ 0x0808E644
	ldr r1, _0808E650 @ =0x020116DC
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	bx lr
	.align 2, 0
_0808E650: .4byte 0x020116DC

	thumb_func_start sub_0808E654
sub_0808E654: @ 0x0808E654
	ldr r2, _0808E660 @ =0x020116DC
	lsls r0, r0, #2
	adds r0, r0, r2
	str r1, [r0]
	bx lr
	.align 2, 0
_0808E660: .4byte 0x020116DC

	thumb_func_start sub_0808E664
sub_0808E664: @ 0x0808E664
	ldr r0, _0808E670 @ =0x020116DC
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r0, r1
	ldr r0, [r0]
	bx lr
	.align 2, 0
_0808E670: .4byte 0x020116DC

	thumb_func_start sub_0808E674
sub_0808E674: @ 0x0808E674
	ldr r1, _0808E680 @ =0x020116DC
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r1, r2
	str r0, [r1]
	bx lr
	.align 2, 0
_0808E680: .4byte 0x020116DC

	thumb_func_start sub_0808E684
sub_0808E684: @ 0x0808E684
	ldr r0, _0808E690 @ =0x020116DC
	movs r1, #0x82
	lsls r1, r1, #1
	adds r0, r0, r1
	ldr r0, [r0]
	bx lr
	.align 2, 0
_0808E690: .4byte 0x020116DC

	thumb_func_start sub_0808E694
sub_0808E694: @ 0x0808E694
	ldr r1, _0808E6A0 @ =0x020116DC
	movs r2, #0x82
	lsls r2, r2, #1
	adds r1, r1, r2
	str r0, [r1]
	bx lr
	.align 2, 0
_0808E6A0: .4byte 0x020116DC

	thumb_func_start sub_0808E6A4
sub_0808E6A4: @ 0x0808E6A4
	push {r4, lr}
	adds r4, r0, #0
	bl sub_0803DEC4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0808E78A
	ldr r0, _0808E6C4 @ =gPlaySt
	ldrb r1, [r0, #0x1b]
	cmp r1, #2
	beq _0808E6D6
	cmp r1, #2
	bgt _0808E6C8
	cmp r1, #1
	beq _0808E6CE
	b _0808E6E0
	.align 2, 0
_0808E6C4: .4byte gPlaySt
_0808E6C8:
	cmp r1, #3
	beq _0808E6DC
	b _0808E6E0
_0808E6CE:
	cmp r4, #3
	bne _0808E6E0
_0808E6D2:
	movs r0, #1
	b _0808E78C
_0808E6D6:
	cmp r4, #1
	bne _0808E6E0
	b _0808E6D2
_0808E6DC:
	cmp r4, #2
	beq _0808E6D2
_0808E6E0:
	ldrb r0, [r0, #0xe]
	subs r0, #0x1a
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x14
	bhi _0808E78A
	lsls r0, r0, #2
	ldr r1, _0808E6F8 @ =_0808E6FC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0808E6F8: .4byte _0808E6FC
_0808E6FC: @ jump table
	.4byte _0808E762 @ case 0
	.4byte _0808E750 @ case 1
	.4byte _0808E762 @ case 2
	.4byte _0808E78A @ case 3
	.4byte _0808E756 @ case 4
	.4byte _0808E78A @ case 5
	.4byte _0808E78A @ case 6
	.4byte _0808E78A @ case 7
	.4byte _0808E762 @ case 8
	.4byte _0808E78A @ case 9
	.4byte _0808E78A @ case 10
	.4byte _0808E78A @ case 11
	.4byte _0808E75C @ case 12
	.4byte _0808E78A @ case 13
	.4byte _0808E78A @ case 14
	.4byte _0808E78A @ case 15
	.4byte _0808E762 @ case 16
	.4byte _0808E78A @ case 17
	.4byte _0808E770 @ case 18
	.4byte _0808E78A @ case 19
	.4byte _0808E776 @ case 20
_0808E750:
	cmp r4, #1
	bne _0808E78A
	b _0808E6D2
_0808E756:
	cmp r4, #0x22
	bne _0808E78A
	b _0808E6D2
_0808E75C:
	cmp r4, #0x14
	bne _0808E78A
	b _0808E6D2
_0808E762:
	cmp r4, #0x2d
	beq _0808E6D2
	cmp r4, #1
	beq _0808E6D2
	cmp r4, #2
	bne _0808E78A
	b _0808E6D2
_0808E770:
	cmp r4, #0x26
	bne _0808E78A
	b _0808E6D2
_0808E776:
	cmp r4, #0x2d
	beq _0808E6D2
	cmp r4, #1
	beq _0808E6D2
	cmp r4, #2
	beq _0808E6D2
	cmp r4, #0x26
	beq _0808E6D2
	cmp r4, #0x27
	beq _0808E6D2
_0808E78A:
	movs r0, #0
_0808E78C:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0808E794
sub_0808E794: @ 0x0808E794
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #1
_0808E79A:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _0808E7C2
	ldr r2, [r0]
	cmp r2, #0
	beq _0808E7C2
	ldr r0, [r0, #0xc]
	ldr r1, _0808E7D0 @ =0x00010004
	ands r0, r1
	cmp r0, #0
	bne _0808E7C2
	ldrb r0, [r2, #4]
	bl sub_0808E6A4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808E7C2
	adds r5, #1
_0808E7C2:
	adds r4, #1
	cmp r4, #0x3f
	ble _0808E79A
	adds r0, r5, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0808E7D0: .4byte 0x00010004

	thumb_func_start sub_0808E7D4
sub_0808E7D4: @ 0x0808E7D4
	adds r1, r0, #0
	ldr r0, _0808E7F0 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x2b
	bgt _0808E818
	cmp r0, #0x2a
	bge _0808E80C
	cmp r0, #9
	beq _0808E7F4
	cmp r0, #0x29
	beq _0808E800
	b _0808E818
	.align 2, 0
_0808E7F0: .4byte gPlaySt
_0808E7F4:
	ldr r0, [r1]
	ldrb r0, [r0, #4]
	cmp r0, #0x23
	bne _0808E818
	movs r0, #1
	b _0808E81A
_0808E800:
	ldr r0, [r1]
	ldrb r0, [r0, #4]
	cmp r0, #0xb
	bne _0808E818
	movs r0, #1
	b _0808E81A
_0808E80C:
	ldr r0, [r1]
	ldrb r0, [r0, #4]
	cmp r0, #0x26
	bne _0808E818
	movs r0, #1
	b _0808E81A
_0808E818:
	movs r0, #0
_0808E81A:
	bx lr

	thumb_func_start sub_0808E81C
sub_0808E81C: @ 0x0808E81C
	adds r2, r0, #0
	ldr r0, [r2, #0xc]
	ldr r1, _0808E840 @ =0x00010004
	ands r0, r1
	cmp r0, #0
	bne _0808E848
	ldr r0, [r2]
	ldr r1, [r2, #4]
	ldr r0, [r0, #0x28]
	ldr r1, [r1, #0x28]
	orrs r0, r1
	movs r1, #0x80
	lsls r1, r1, #2
	ands r0, r1
	cmp r0, #0
	bne _0808E844
	movs r0, #1
	b _0808E84A
	.align 2, 0
_0808E840: .4byte 0x00010004
_0808E844:
	movs r0, #8
	str r0, [r2, #0xc]
_0808E848:
	movs r0, #0
_0808E84A:
	bx lr

	thumb_func_start sub_0808E84C
sub_0808E84C: @ 0x0808E84C
	push {r4, r5, r6, lr}
	sub sp, #4
	movs r6, #0
	adds r1, r0, #0
	adds r1, #0x2f
	strb r6, [r1]
	ldr r2, _0808E87C @ =gPlaySt
	movs r0, #0x80
	ldrb r3, [r2, #0x14]
	ands r0, r3
	cmp r0, #0
	bne _0808E8B8
	ldrb r2, [r2, #0x1b]
	cmp r2, #1
	bne _0808E888
	ldr r1, _0808E880 @ =sub_0808E4FC
	ldr r3, _0808E884 @ =0x0000113A
	str r6, [sp]
	movs r0, #4
	movs r2, #1
	bl sub_08090800
	b _0808E8B8
	.align 2, 0
_0808E87C: .4byte gPlaySt
_0808E880: .4byte sub_0808E4FC
_0808E884: .4byte 0x0000113A
_0808E888:
	movs r4, #0
	adds r5, r1, #0
_0808E88C:
	adds r0, r4, #0
	bl sub_08099BB0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808E8A2
	movs r0, #1
	lsls r0, r4
	ldrb r1, [r5]
	orrs r0, r1
	strb r0, [r5]
_0808E8A2:
	adds r4, #1
	cmp r4, #3
	ble _0808E88C
	ldr r1, _0808E8C0 @ =sub_0808E4FC
	ldr r3, _0808E8C4 @ =0x0000113A
	movs r0, #0
	str r0, [sp]
	movs r0, #4
	adds r2, r6, #0
	bl sub_08090800
_0808E8B8:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808E8C0: .4byte sub_0808E4FC
_0808E8C4: .4byte 0x0000113A

	thumb_func_start sub_0808E8C8
sub_0808E8C8: @ 0x0808E8C8
	ldr r0, _0808E8D4 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	cmp r0, #0x2e
	beq _0808E8D8
	movs r0, #1
	b _0808E8DA
	.align 2, 0
_0808E8D4: .4byte gPlaySt
_0808E8D8:
	movs r0, #0
_0808E8DA:
	bx lr

	thumb_func_start sub_0808E8DC
sub_0808E8DC: @ 0x0808E8DC
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	bl sub_08090788
	bl sub_0803DEC4
	lsls r0, r0, #0x18
	asrs r4, r0, #0x18
	cmp r4, #0
	bne _0808E98C
	ldr r1, _0808E930 @ =sub_0808E4D4
	ldr r3, _0808E934 @ =0x00001131
	str r4, [sp]
	movs r0, #0
	movs r2, #0
	bl sub_08090800
	ldr r1, _0808E938 @ =sub_0808E4E8
	ldr r3, _0808E93C @ =0x00001132
	str r4, [sp]
	movs r0, #1
	movs r2, #0
	bl sub_08090800
	adds r0, r5, #0
	bl sub_0808E84C
	bl sub_0808E8C8
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0808E948
	ldr r1, _0808E940 @ =sub_0808E5B4
	ldr r3, _0808E944 @ =0x00001135
	str r4, [sp]
	movs r0, #7
	movs r2, #0
	bl sub_08090800
	b _0808E956
	.align 2, 0
_0808E930: .4byte sub_0808E4D4
_0808E934: .4byte 0x00001131
_0808E938: .4byte sub_0808E4E8
_0808E93C: .4byte 0x00001132
_0808E940: .4byte sub_0808E5B4
_0808E944: .4byte 0x00001135
_0808E948:
	ldr r1, _0808E978 @ =sub_0808E5B4
	ldr r3, _0808E97C @ =0x00001135
	str r0, [sp]
	movs r0, #7
	movs r2, #1
	bl sub_08090800
_0808E956:
	ldr r1, _0808E980 @ =gPlaySt
	movs r0, #0x80
	ldrb r1, [r1, #0x14]
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _0808E9B8
	ldr r1, _0808E984 @ =sub_0808E524
	ldr r3, _0808E988 @ =0x00001134
	str r0, [sp]
	movs r0, #2
	movs r2, #0
	bl sub_08090800
	b _0808E9B8
	.align 2, 0
_0808E978: .4byte sub_0808E5B4
_0808E97C: .4byte 0x00001135
_0808E980: .4byte gPlaySt
_0808E984: .4byte sub_0808E524
_0808E988: .4byte 0x00001134
_0808E98C:
	ldr r1, _0808E9F8 @ =sub_0808E4D4
	ldr r3, _0808E9FC @ =0x00001131
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r2, #0
	bl sub_08090800
	ldr r1, _0808EA00 @ =sub_0808E4E8
	ldr r3, _0808EA04 @ =0x00001132
	str r4, [sp]
	movs r0, #1
	movs r2, #0
	bl sub_08090800
	ldr r1, _0808EA08 @ =sub_0808E57C
	ldr r3, _0808EA0C @ =0x00001146
	str r4, [sp]
	movs r0, #3
	movs r2, #0
	bl sub_08090800
_0808E9B8:
	ldr r0, _0808EA10 @ =sub_0808E588
	bl sub_080907AC
	ldr r0, _0808EA14 @ =sub_0808E558
	bl sub_080907C8
	ldr r0, _0808EA18 @ =gBg0Tm
	movs r1, #0xc
	movs r2, #0x13
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, _0808EA1C @ =gBg1Tm
	movs r1, #0xc
	movs r2, #0x13
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #1
	movs r1, #4
	bl sub_08090930
	adds r0, r5, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	bl sub_080908A8
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808E9F8: .4byte sub_0808E4D4
_0808E9FC: .4byte 0x00001131
_0808EA00: .4byte sub_0808E4E8
_0808EA04: .4byte 0x00001132
_0808EA08: .4byte sub_0808E57C
_0808EA0C: .4byte 0x00001146
_0808EA10: .4byte sub_0808E588
_0808EA14: .4byte sub_0808E558
_0808EA18: .4byte gBg0Tm
_0808EA1C: .4byte gBg1Tm

	thumb_func_start sub_0808EA20
sub_0808EA20: @ 0x0808EA20
	push {r4, r5, lr}
	movs r5, #0
	b _0808EA42
_0808EA26:
	bl sub_080807CC
	adds r4, r0, #0
	adds r0, r5, #0
	bl sub_0808E644
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r4, r0
	bne _0808EA40
	adds r0, r5, #0
	b _0808EA4C
_0808EA40:
	adds r5, #1
_0808EA42:
	bl sub_0808E664
	cmp r5, r0
	blt _0808EA26
	movs r0, #0
_0808EA4C:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0808EA54
sub_0808EA54: @ 0x0808EA54
	push {r4, r5, lr}
	movs r5, #0
	b _0808EA72
_0808EA5A:
	adds r0, r5, #0
	bl sub_0808E644
	ldr r0, [r0]
	ldrb r4, [r0, #4]
	bl sub_0808E684
	cmp r4, r0
	bne _0808EA70
	adds r0, r5, #0
	b _0808EA7C
_0808EA70:
	adds r5, #1
_0808EA72:
	bl sub_0808E664
	cmp r5, r0
	blt _0808EA5A
	movs r0, #0
_0808EA7C:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0808EA84
sub_0808EA84: @ 0x0808EA84
	push {r4, lr}
	ldr r0, _0808EAEC @ =0x020106DC
	bl InitUnitStack
	movs r4, #1
_0808EA8E:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _0808EAB0
	ldr r0, [r2]
	cmp r0, #0
	beq _0808EAB0
	ldr r0, [r2, #0xc]
	ldr r1, _0808EAF0 @ =0x0001000C
	ands r0, r1
	cmp r0, #0
	bne _0808EAB0
	adds r0, r2, #0
	bl PushUnit
_0808EAB0:
	adds r4, #1
	cmp r4, #0x3f
	ble _0808EA8E
	movs r4, #1
_0808EAB8:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _0808EADA
	ldr r0, [r2]
	cmp r0, #0
	beq _0808EADA
	ldr r0, [r2, #0xc]
	ldr r1, _0808EAF0 @ =0x0001000C
	ands r0, r1
	cmp r0, #0
	beq _0808EADA
	adds r0, r2, #0
	bl PushUnit
_0808EADA:
	adds r4, #1
	cmp r4, #0x3f
	ble _0808EAB8
	bl LoadPlayerUnitsFromUnitStack
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808EAEC: .4byte 0x020106DC
_0808EAF0: .4byte 0x0001000C

	thumb_func_start sub_0808EAF4
sub_0808EAF4: @ 0x0808EAF4
	push {r4, r5, r6, r7, lr}
	bl sub_0800EFB8
	adds r7, r0, #0
	movs r6, #0
	ldr r0, _0808EBB8 @ =0x020106DC
	bl InitUnitStack
	movs r5, #1
_0808EB06:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _0808EB40
	ldr r0, [r4]
	cmp r0, #0
	beq _0808EB40
	ldr r0, [r4, #0xc]
	ldr r1, _0808EBBC @ =0xFDFFFFFF
	ands r0, r1
	str r0, [r4, #0xc]
	adds r0, r4, #0
	bl sub_0808E81C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808EB40
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	bl sub_0808E6A4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808EB40
	adds r0, r4, #0
	bl PushUnit
_0808EB40:
	adds r5, #1
	cmp r5, #0x3f
	ble _0808EB06
	movs r5, #1
_0808EB48:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _0808EB7A
	ldr r0, [r4]
	cmp r0, #0
	beq _0808EB7A
	adds r0, r4, #0
	bl sub_0808E81C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808EB74
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	bl sub_0808E6A4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0808EB7A
_0808EB74:
	adds r0, r4, #0
	bl PushUnit
_0808EB7A:
	adds r5, #1
	cmp r5, #0x3f
	ble _0808EB48
	bl LoadPlayerUnitsFromUnitStack
	movs r5, #1
_0808EB86:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _0808EBDE
	ldr r0, [r4]
	cmp r0, #0
	beq _0808EBDE
	adds r0, r4, #0
	bl sub_0808E81C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808EBDE
	adds r0, r4, #0
	bl sub_0808E7D4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808EBC4
	ldr r0, [r4, #0xc]
	ldr r1, _0808EBC0 @ =0x02000008
	b _0808EBDA
	.align 2, 0
_0808EBB8: .4byte 0x020106DC
_0808EBBC: .4byte 0xFDFFFFFF
_0808EBC0: .4byte 0x02000008
_0808EBC4:
	cmp r7, r6
	ble _0808EBD6
	ldr r0, [r4, #0xc]
	movs r1, #9
	rsbs r1, r1, #0
	ands r0, r1
	str r0, [r4, #0xc]
	adds r6, #1
	b _0808EBDE
_0808EBD6:
	ldr r0, [r4, #0xc]
	movs r1, #8
_0808EBDA:
	orrs r0, r1
	str r0, [r4, #0xc]
_0808EBDE:
	adds r5, #1
	cmp r5, #0x3f
	ble _0808EB86
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0808EBEC
sub_0808EBEC: @ 0x0808EBEC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	movs r4, #1
_0808EBF6:
	adds r0, r4, #0
	bl GetUnit
	adds r5, r0, #0
	adds r4, #1
	mov r8, r4
	cmp r5, #0
	beq _0808EC5C
	ldr r0, [r5]
	cmp r0, #0
	beq _0808EC5C
	movs r2, #0
	ldr r0, [r5, #0xc]
	movs r1, #8
	orrs r0, r1
	str r0, [r5, #0xc]
	adds r0, r5, #0
	str r2, [sp]
	bl GetUnitItemCount
	adds r7, r0, #0
	movs r6, #0
	ldr r2, [sp]
	cmp r2, r7
	bge _0808EC52
_0808EC28:
	lsls r0, r6, #1
	adds r1, r5, #0
	adds r1, #0x1e
	adds r4, r1, r0
	ldrh r0, [r4]
	str r2, [sp]
	bl GetItemIndex
	ldr r2, [sp]
	cmp r0, #0x80
	blt _0808EC4C
	cmp r0, #0x83
	ble _0808EC46
	cmp r0, #0x8a
	bne _0808EC4C
_0808EC46:
	movs r0, #0
	strh r0, [r4]
	movs r2, #1
_0808EC4C:
	adds r6, #1
	cmp r6, r7
	blt _0808EC28
_0808EC52:
	cmp r2, #0
	beq _0808EC5C
	adds r0, r5, #0
	bl UnitRemoveInvalidItems
_0808EC5C:
	mov r4, r8
	cmp r4, #0x3f
	ble _0808EBF6
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0808EC70
sub_0808EC70: @ 0x0808EC70
	push {r4, r5, r6, lr}
	movs r6, #0
	movs r5, #1
_0808EC76:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _0808EC9E
	ldr r0, [r4]
	cmp r0, #0
	beq _0808EC9E
	adds r0, r4, #0
	bl sub_0808E81C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808EC9E
	adds r0, r6, #0
	adds r1, r4, #0
	bl sub_0808E654
	adds r6, #1
_0808EC9E:
	adds r5, #1
	cmp r5, #0x3f
	ble _0808EC76
	adds r0, r6, #0
	bl sub_0808E674
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_0808ECB0
sub_0808ECB0: @ 0x0808ECB0
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
	b _0808ECCC
_0808ECB8:
	adds r0, r4, #0
	bl sub_0808E644
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	cmp r0, r5
	bne _0808ECCA
	adds r0, r4, #0
	b _0808ECD6
_0808ECCA:
	adds r4, #1
_0808ECCC:
	bl sub_0808E664
	cmp r4, r0
	blt _0808ECB8
	movs r0, #0
_0808ECD6:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_0808ECDC
sub_0808ECDC: @ 0x0808ECDC
	push {r4, lr}
	bl sub_08025184
	movs r4, #0
	b _0808ED12
_0808ECE6:
	adds r0, r4, #0
	bl sub_0808E644
	adds r2, r0, #0
	ldr r1, [r2, #0xc]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	bne _0808ED00
	movs r0, #3
	rsbs r0, r0, #0
	ands r1, r0
	b _0808ED04
_0808ED00:
	movs r0, #0xa
	orrs r1, r0
_0808ED04:
	str r1, [r2, #0xc]
	adds r0, r2, #0
	bl GetUnitSMSId
	bl sub_08025278
	adds r4, #1
_0808ED12:
	bl sub_0808E664
	cmp r4, r0
	blt _0808ECE6
	bl sub_08025A0C
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0808ED24
sub_0808ED24: @ 0x0808ED24
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x2b
	movs r0, #0
	strb r0, [r1]
	subs r1, #2
	strb r0, [r1]
	movs r6, #0
	adds r7, r1, #0
	b _0808ED6C
_0808ED3A:
	adds r0, r6, #0
	bl sub_0808E644
	adds r3, r0, #0
	ldr r0, [r3, #0xc]
	movs r5, #8
	ands r0, r5
	cmp r0, #0
	bne _0808ED64
	adds r2, r4, #0
	adds r2, #0x2b
	adds r1, r4, #0
	adds r1, #0x2a
	ldrb r0, [r2]
	ldrb r1, [r1]
	cmp r0, r1
	blo _0808ED60
	str r5, [r3, #0xc]
	b _0808ED64
_0808ED60:
	adds r0, #1
	strb r0, [r2]
_0808ED64:
	ldrb r0, [r7]
	adds r0, #1
	strb r0, [r7]
	adds r6, #1
_0808ED6C:
	bl sub_0808E664
	cmp r6, r0
	blt _0808ED3A
	adds r2, r4, #0
	adds r2, #0x29
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r2, [r2]
	ldrb r1, [r0]
	cmp r2, r1
	bhs _0808ED86
	strb r2, [r0]
_0808ED86:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0808ED8C
sub_0808ED8C: @ 0x0808ED8C
	push {lr}
	bl sub_0803DEC4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808EDA4
	movs r0, #0
	movs r1, #0
	movs r2, #0xa
	bl sub_0808068C
	b _0808EDAC
_0808EDA4:
	movs r0, #0
	movs r1, #0xa
	bl sub_080910B0
_0808EDAC:
	pop {r0}
	bx r0

	thumb_func_start sub_0808EDB0
sub_0808EDB0: @ 0x0808EDB0
	push {lr}
	bl sub_0803DEC4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808EDC2
	bl sub_080807BC
	b _0808EDC6
_0808EDC2:
	bl sub_08091104
_0808EDC6:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start nullsub_76
nullsub_76: @ 0x0808EDCC
	bx lr
	.align 2, 0

	thumb_func_start sub_0808EDD0
sub_0808EDD0: @ 0x0808EDD0
	push {r4, r5, lr}
	sub sp, #0x20
	adds r2, r0, #0
	adds r4, r1, #0
	ldr r0, _0808EE48 @ =0x06010000
	adds r2, r2, r0
	mov r0, sp
	adds r1, r2, #0
	adds r2, r4, #0
	bl InitSpriteTextFont
	ldr r0, _0808EE4C @ =0x081901C8
	adds r4, #0x10
	lsls r4, r4, #5
	adds r1, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	add r5, sp, #0x18
	adds r0, r5, #0
	bl InitSpriteText
	mov r0, sp
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	adds r0, r5, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	ldr r0, _0808EE50 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetROMChapterStruct
	adds r0, #0x8a
	ldrh r0, [r0]
	bl DecodeMsg
	adds r4, r0, #0
	movs r0, #0x60
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r5, #0
	movs r2, #0
	adds r3, r4, #0
	bl Text_InsertDrawString
	movs r0, #0
	bl SetTextFont
	add sp, #0x20
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808EE48: .4byte 0x06010000
_0808EE4C: .4byte 0x081901C8
_0808EE50: .4byte gPlaySt

	thumb_func_start sub_0808EE54
sub_0808EE54: @ 0x0808EE54
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	bl sub_0808E694
	movs r0, #0
	str r0, [r4, #0x40]
	strh r0, [r4, #0x3c]
	bl sub_0803DEC4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808EE76
	adds r1, r4, #0
	adds r1, #0x2a
	movs r0, #5
	b _0808EE7E
_0808EE76:
	bl sub_0800EFB8
	adds r1, r4, #0
	adds r1, #0x2a
_0808EE7E:
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x30
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #2
	strb r1, [r0]
	subs r0, #9
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0808EEAC
sub_0808EEAC: @ 0x0808EEAC
	push {r4, r5, lr}
	ldr r5, _0808EED8 @ =0x020106B4
	movs r4, #4
_0808EEB2:
	adds r0, r5, #0
	bl ClearText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _0808EEB2
	ldr r0, _0808EEDC @ =0x02023DFC
	movs r1, #0xf
	movs r2, #0xa
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #4
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808EED8: .4byte 0x020106B4
_0808EEDC: .4byte 0x02023DFC

	thumb_func_start sub_0808EEE0
sub_0808EEE0: @ 0x0808EEE0
	push {r4, lr}
	ldr r4, _0808EEFC @ =0x020106B4
	bl DecodeMsg
_0808EEE8:
	adds r1, r0, #0
_0808EEEA:
	ldrb r0, [r1]
	cmp r0, #0
	beq _0808EF08
	cmp r0, #1
	bne _0808EF00
	adds r4, #8
	adds r1, #1
	b _0808EEEA
	.align 2, 0
_0808EEFC: .4byte 0x020106B4
_0808EF00:
	adds r0, r4, #0
	bl Text_DrawCharacter
	b _0808EEE8
_0808EF08:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0808EF10
sub_0808EF10: @ 0x0808EF10
	push {r4, r5, r6, lr}
	movs r6, #0
	movs r5, #0xc0
	lsls r5, r5, #1
	ldr r4, _0808EF3C @ =0x020106B4
_0808EF1A:
	ldr r1, _0808EF40 @ =0x02023C7C
	adds r1, r5, r1
	adds r0, r4, #0
	bl PutText
	adds r5, #0x80
	adds r4, #8
	adds r6, #1
	cmp r6, #4
	ble _0808EF1A
	movs r0, #4
	bl EnableBgSync
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808EF3C: .4byte 0x020106B4
_0808EF40: .4byte 0x02023C7C

	thumb_func_start sub_0808EF44
sub_0808EF44: @ 0x0808EF44
	push {lr}
	adds r0, #0x4c
	movs r1, #0
	strh r1, [r0]
	bl sub_0808EEAC
	pop {r0}
	bx r0

	thumb_func_start sub_0808EF54
sub_0808EF54: @ 0x0808EF54
	push {lr}
	ldr r0, [r0, #0x58]
	bl sub_0808EEE0
	pop {r0}
	bx r0

	thumb_func_start sub_0808EF60
sub_0808EF60: @ 0x0808EF60
	push {lr}
	bl sub_0808EF10
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0808EF6C
sub_0808EF6C: @ 0x0808EF6C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	ldr r5, _0808EF94 @ =0x08D8C124
	adds r0, r5, #0
	bl Proc_Find
	cmp r0, #0
	beq _0808EF82
	bl Proc_End
_0808EF82:
	adds r0, r5, #0
	adds r1, r4, #0
	bl Proc_Start
	str r6, [r0, #0x58]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808EF94: .4byte 0x08D8C124

	thumb_func_start sub_0808EF98
sub_0808EF98: @ 0x0808EF98
	push {r4, lr}
	adds r4, r0, #0
	bl sub_080AA1E8
	bl sub_080903E8
	bl sub_0808EDB0
	bl sub_080908E8
	adds r4, #0x2d
	strb r0, [r4]
	bl sub_080909F8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0808EFBC
sub_0808EFBC: @ 0x0808EFBC
	push {r4, lr}
	sub sp, #4
	adds r2, r0, #0
	adds r4, r1, #0
	ldr r0, _0808EFFC @ =0x08428B00
	ldr r1, _0808F000 @ =0x06010000
	adds r2, r2, r1
	adds r1, r2, #0
	bl sub_08013688
	ldr r0, _0808F004 @ =0x08428DB4
	adds r1, r4, #0
	adds r1, #0x10
	lsls r1, r1, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #0
	str r0, [sp]
	adds r4, #1
	lsls r4, r4, #5
	ldr r0, _0808F008 @ =0x02022A60
	adds r4, r4, r0
	ldr r2, _0808F00C @ =0x01000008
	mov r0, sp
	adds r1, r4, #0
	bl CpuFastSet
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808EFFC: .4byte 0x08428B00
_0808F000: .4byte 0x06010000
_0808F004: .4byte 0x08428DB4
_0808F008: .4byte 0x02022A60
_0808F00C: .4byte 0x01000008

	thumb_func_start sub_0808F010
sub_0808F010: @ 0x0808F010
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r6, r0, #0
	ldr r0, _0808F1F8 @ =0x08D8C0A0
	bl InitBgs
	bl ResetText
	bl sub_0804A9F8
	movs r0, #0
	movs r1, #0xe
	bl sub_08082F74
	ldr r2, _0808F1FC @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	bl sub_08015A0C
	bl sub_08025184
	bl sub_0808EC70
	adds r0, r6, #0
	bl sub_0808ED24
	bl sub_0808EA84
	ldr r0, _0808F200 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _0808F204 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _0808F208 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r5, _0808F20C @ =0x020106B4
	movs r4, #4
_0808F07C:
	adds r0, r5, #0
	movs r1, #0xe
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _0808F07C
	adds r7, r6, #0
	adds r7, #0x35
	ldr r5, _0808F210 @ =0x02010694
	movs r4, #3
_0808F094:
	adds r0, r5, #0
	movs r1, #8
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _0808F094
	ldr r0, _0808F214 @ =0x0201068C
	movs r1, #0xa
	bl InitText
	ldr r0, _0808F218 @ =0x0841E814
	ldr r1, _0808F21C @ =0x06014800
	bl sub_08013688
	ldr r0, _0808F220 @ =0x0841EC70
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x40
	bl ApplyPaletteExt
	movs r0, #0xe0
	lsls r0, r0, #7
	movs r1, #6
	bl sub_0808EFBC
	ldr r0, _0808F224 @ =0x084292A0
	ldr r1, _0808F228 @ =0x06016000
	bl sub_08013688
	ldr r0, _0808F22C @ =0x084291AC
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	bl EnablePalSync
	ldr r4, _0808F1FC @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r4, #0xc]
	ands r0, r2
	strb r0, [r4, #0xc]
	adds r0, r1, #0
	ldrb r2, [r4, #0x10]
	ands r0, r2
	movs r2, #2
	orrs r0, r2
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r4, #0x14]
	movs r0, #3
	ldrb r1, [r4, #0x18]
	orrs r0, r1
	strb r0, [r4, #0x18]
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r2, [r4, #1]
	ands r0, r2
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r4, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	adds r0, r6, #0
	bl sub_0808E8DC
	movs r0, #0xf
	bl EnableBgSync
	adds r2, r4, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r4, #0
	adds r1, #0x44
	movs r2, #0
	movs r0, #0xe
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x46
	strb r2, [r0]
	ldr r0, _0808F230 @ =0x0000FFE0
	ldrh r2, [r4, #0x3c]
	ands r0, r2
	ldr r1, _0808F234 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r4, #0x3c]
	adds r0, r6, #0
	bl sub_080903C4
	bl sub_0808ED8C
	ldr r0, _0808F238 @ =0x0841D100
	movs r1, #0x60
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0808F23C @ =0x0841D120
	ldr r1, _0808F240 @ =0x06007800
	bl sub_08013688
	ldr r0, _0808F244 @ =0x02023578
	ldr r1, _0808F248 @ =0x0841D614
	movs r2, #0xcf
	lsls r2, r2, #6
	bl TmApplyTsa_thm
	movs r0, #0xa0
	lsls r0, r0, #7
	movs r1, #0xb
	bl sub_0808EDD0
	adds r0, r6, #0
	bl sub_080AA0C0
	movs r0, #0xd0
	lsls r0, r0, #7
	bl sub_080AA0E4
	movs r2, #0x90
	lsls r2, r2, #3
	movs r0, #3
	str r0, [sp]
	movs r0, #0xc0
	lsls r0, r0, #4
	str r0, [sp, #4]
	movs r0, #0
	movs r1, #4
	movs r3, #0xb
	bl sub_080AA118
	bl sub_080908E8
	strb r0, [r7]
	bl sub_0808E344
	bl sub_0808EEE0
	bl sub_0808EF10
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808F1F8: .4byte 0x08D8C0A0
_0808F1FC: .4byte gDispIo
_0808F200: .4byte gBg0Tm
_0808F204: .4byte gBg1Tm
_0808F208: .4byte gBg2Tm
_0808F20C: .4byte 0x020106B4
_0808F210: .4byte 0x02010694
_0808F214: .4byte 0x0201068C
_0808F218: .4byte 0x0841E814
_0808F21C: .4byte 0x06014800
_0808F220: .4byte 0x0841EC70
_0808F224: .4byte 0x084292A0
_0808F228: .4byte 0x06016000
_0808F22C: .4byte 0x084291AC
_0808F230: .4byte 0x0000FFE0
_0808F234: .4byte 0x0000E0FF
_0808F238: .4byte 0x0841D100
_0808F23C: .4byte 0x0841D120
_0808F240: .4byte 0x06007800
_0808F244: .4byte 0x02023578
_0808F248: .4byte 0x0841D614

	thumb_func_start sub_0808F24C
sub_0808F24C: @ 0x0808F24C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r5, #0
	ldr r2, _0808F2B8 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r4, #1
_0808F272:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0808F296
	ldr r0, [r1]
	cmp r0, #0
	beq _0808F296
	adds r0, r1, #0
	bl sub_0808E81C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808F296
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0808F296:
	adds r4, #1
	cmp r4, #0x3f
	ble _0808F272
	cmp r5, #0
	bne _0808F2B0
	adds r1, r6, #0
	adds r1, #0x36
	movs r0, #1
	strb r0, [r1]
	adds r0, r6, #0
	movs r1, #6
	bl Proc_Goto
_0808F2B0:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808F2B8: .4byte gDispIo

	thumb_func_start sub_0808F2BC
sub_0808F2BC: @ 0x0808F2BC
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	bl sub_080908E8
	adds r6, r0, #0
	adds r4, r5, #0
	adds r4, #0x35
	ldrb r0, [r4]
	cmp r0, r6
	beq _0808F2DC
	bl sub_0808E344
	adds r1, r5, #0
	bl sub_0808EF6C
	strb r6, [r4]
_0808F2DC:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0808F2E4
sub_0808F2E4: @ 0x0808F2E4
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r7, r0, #0
	ldr r5, _0808F35C @ =0x02010694
	adds r0, #0x2f
	ldrb r0, [r0]
	bl sub_0808E3E0
	adds r3, r0, #0
	lsls r3, r3, #1
	adds r3, #2
	movs r0, #1
	str r0, [sp]
	movs r0, #5
	movs r1, #6
	movs r2, #9
	bl sub_0804A4CC
	movs r4, #0
	movs r6, #0xe0
	lsls r6, r6, #1
_0808F30E:
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	asrs r0, r4
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _0808F346
	adds r0, r5, #0
	bl ClearText
	ldr r1, _0808F360 @ =0x08D8D5F8
	lsls r0, r4, #2
	adds r0, r0, r1
	ldr r0, [r0]
	bl DecodeMsg
	ldr r1, _0808F364 @ =0x02022C6C
	adds r1, r6, r1
	movs r2, #0
	str r2, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r3, #0
	bl PutDrawText
	adds r5, #8
	adds r6, #0x80
_0808F346:
	adds r4, #1
	cmp r4, #3
	ble _0808F30E
	movs r0, #3
	bl EnableBgSync
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808F35C: .4byte 0x02010694
_0808F360: .4byte 0x08D8D5F8
_0808F364: .4byte 0x02022C6C

	thumb_func_start sub_0808F368
sub_0808F368: @ 0x0808F368
	push {lr}
	ldr r0, _0808F38C @ =0x02022DEA
	movs r1, #8
	movs r2, #9
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, _0808F390 @ =0x020235EA
	movs r1, #8
	movs r2, #9
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #3
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
_0808F38C: .4byte 0x02022DEA
_0808F390: .4byte 0x020235EA

	thumb_func_start sub_0808F394
sub_0808F394: @ 0x0808F394
	push {r4, lr}
	adds r4, r0, #0
	bl sub_08090AA4
	adds r0, r4, #0
	bl sub_0808F2E4
	adds r4, #0x2e
	ldrb r4, [r4]
	lsls r1, r4, #4
	adds r1, #0x38
	movs r3, #0x80
	lsls r3, r3, #3
	movs r0, #0x2c
	movs r2, #7
	bl sub_080AA3F8
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0808F3BC
sub_0808F3BC: @ 0x0808F3BC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	adds r6, r0, #0
	add r1, sp, #4
	ldr r0, _0808F410 @ =0x0842CF2C
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldr r0, [r0]
	str r0, [r1]
	adds r5, r6, #0
	adds r5, #0x2e
	ldrb r0, [r5]
	mov sb, r0
	movs r1, #0x2c
	mov sl, r1
	lsls r0, r0, #4
	adds r7, r0, #0
	adds r7, #0x38
	adds r4, r6, #0
	adds r4, #0x34
	ldrb r2, [r4]
	mov r8, r2
	cmp r2, #0
	beq _0808F418
	ldr r0, _0808F414 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0808F4F0
	bl sub_080828A4
	movs r0, #0
	strb r0, [r4]
	b _0808F5B2
	.align 2, 0
_0808F410: .4byte 0x0842CF2C
_0808F414: .4byte gpKeySt
_0808F418:
	ldr r0, _0808F46C @ =gpKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0808F478
	ldr r0, _0808F470 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808F438
	ldr r0, _0808F474 @ =0x0000038A
	bl m4aSongNumStart
_0808F438:
	ldrb r0, [r5]
	adds r1, r6, #0
	adds r1, #0x2f
	ldrb r1, [r1]
	bl sub_0808E3B0
	cmp r0, #3
	bne _0808F45A
	movs r2, #0x80
	lsls r2, r2, #1
	mov r3, r8
	str r3, [sp]
	movs r0, #0x5e
	adds r1, r2, #0
	movs r3, #0x20
	bl sub_08003FD4
_0808F45A:
	adds r1, r6, #0
	adds r1, #0x33
	movs r0, #4
	strb r0, [r1]
	adds r0, r6, #0
	movs r1, #8
	bl Proc_Goto
	b _0808F5B2
	.align 2, 0
_0808F46C: .4byte gpKeySt
_0808F470: .4byte gPlaySt
_0808F474: .4byte 0x0000038A
_0808F478:
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0808F4A4
	movs r0, #1
	strb r0, [r4]
	ldrb r0, [r5]
	adds r1, r6, #0
	adds r1, #0x2f
	ldrb r1, [r1]
	bl sub_0808E3B0
	lsls r0, r0, #2
	add r0, sp
	adds r0, #4
	ldr r2, [r0]
	movs r0, #0x2c
	adds r1, r7, #0
	bl sub_0808266C
	b _0808F5B2
_0808F4A4:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0808F4F0
	adds r0, r6, #0
	bl sub_0808F368
	ldr r0, _0808F4E0 @ =0x02023578
	ldr r1, _0808F4E4 @ =0x0841D614
	movs r2, #0xcf
	lsls r2, r2, #6
	bl TmApplyTsa_thm
	movs r0, #1
	movs r1, #4
	bl sub_08090930
	ldr r0, _0808F4E8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808F4D8
	ldr r0, _0808F4EC @ =0x0000038B
	bl m4aSongNumStart
_0808F4D8:
	adds r0, r6, #0
	bl Proc_Break
	b _0808F5B2
	.align 2, 0
_0808F4E0: .4byte 0x02023578
_0808F4E4: .4byte 0x0841D614
_0808F4E8: .4byte gPlaySt
_0808F4EC: .4byte 0x0000038B
_0808F4F0:
	ldr r0, _0808F54C @ =gpKeySt
	ldr r1, [r0]
	movs r2, #0x40
	adds r0, r2, #0
	ldrh r4, [r1, #6]
	ands r0, r4
	adds r5, r6, #0
	adds r5, #0x2e
	cmp r0, #0
	beq _0808F522
	ldrb r0, [r5]
	cmp r0, #0
	bne _0808F51E
	adds r0, r2, #0
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0808F522
	adds r0, r6, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	bl sub_0808E3E0
_0808F51E:
	subs r0, #1
	strb r0, [r5]
_0808F522:
	ldr r7, _0808F54C @ =gpKeySt
	ldr r1, [r7]
	movs r0, #0x80
	mov r8, r0
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _0808F560
	ldrb r4, [r5]
	adds r0, r6, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	bl sub_0808E3E0
	subs r0, #1
	cmp r4, r0
	bge _0808F550
	ldrb r0, [r5]
	adds r0, #1
	b _0808F55E
	.align 2, 0
_0808F54C: .4byte gpKeySt
_0808F550:
	ldr r1, [r7]
	mov r0, r8
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0808F560
	movs r0, #0
_0808F55E:
	strb r0, [r5]
_0808F560:
	ldrb r2, [r5]
	cmp sb, r2
	beq _0808F5B2
	lsls r0, r2, #4
	adds r7, r0, #0
	adds r7, #0x38
	adds r0, r6, #0
	adds r0, #0x34
	ldrb r0, [r0]
	cmp r0, #0
	beq _0808F592
	adds r0, r6, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	adds r0, r2, #0
	bl sub_0808E3B0
	lsls r0, r0, #2
	add r0, sp
	adds r0, #4
	ldr r2, [r0]
	mov r0, sl
	adds r1, r7, #0
	bl sub_0808266C
_0808F592:
	movs r3, #0x80
	lsls r3, r3, #3
	mov r0, sl
	adds r1, r7, #0
	movs r2, #7
	bl sub_080AA3F8
	ldr r0, _0808F5C4 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808F5B2
	ldr r0, _0808F5C8 @ =0x00000386
	bl m4aSongNumStart
_0808F5B2:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808F5C4: .4byte gPlaySt
_0808F5C8: .4byte 0x00000386

	thumb_func_start sub_0808F5CC
sub_0808F5CC: @ 0x0808F5CC
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #1
_0808F5D2:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _0808F5EC
	ldr r0, [r2]
	cmp r0, #0
	beq _0808F5EC
	ldr r0, [r2, #0xc]
	ldr r1, _0808F600 @ =0xFDFFFFFF
	ands r0, r1
	str r0, [r2, #0xc]
_0808F5EC:
	adds r4, #1
	cmp r4, #0x3f
	ble _0808F5D2
	adds r1, r5, #0
	adds r1, #0x36
	movs r0, #1
	strb r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808F600: .4byte 0xFDFFFFFF

	thumb_func_start sub_0808F604
sub_0808F604: @ 0x0808F604
	push {r4, lr}
	adds r4, r0, #0
	bl sub_080AAC88
	bl sub_0808EDB0
	bl sub_080903E8
	movs r0, #0
	bl InitBgs
	ldr r3, _0808F668 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0xc0
	ldrb r1, [r2]
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x46
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _0808F66C @ =0x0000FFE0
	ldrh r1, [r3, #0x3c]
	ands r0, r1
	movs r1, #0x1f
	orrs r0, r1
	strh r0, [r3, #0x3c]
	movs r0, #0x20
	ldrb r1, [r2]
	orrs r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x36
	ldrb r0, [r0]
	cmp r0, #0
	beq _0808F660
	adds r0, r4, #0
	bl sub_0807D6BC
_0808F660:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808F668: .4byte gDispIo
_0808F66C: .4byte 0x0000FFE0

	thumb_func_start sub_0808F670
sub_0808F670: @ 0x0808F670
	push {r4, lr}
	adds r4, r0, #0
	bl sub_0808EA84
	adds r4, #0x36
	ldrb r0, [r4]
	cmp r0, #0
	beq _0808F686
	bl sub_080316C8
	b _0808F694
_0808F686:
	bl sub_0803DEC4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808F694
	bl sub_0803DED4
_0808F694:
	bl sub_0800F070
	bl sub_08025184
	bl RefreshEntityMaps
	bl RefreshUnitSprites
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0808F6AC
sub_0808F6AC: @ 0x0808F6AC
	push {r4, lr}
	adds r4, r0, #0
	bl sub_0808EF98
	adds r0, r4, #0
	adds r0, #0x33
	ldrb r0, [r0]
	subs r0, #1
	cmp r0, #4
	bhi _0808F734
	lsls r0, r0, #2
	ldr r1, _0808F6CC @ =_0808F6D0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0808F6CC: .4byte _0808F6D0
_0808F6D0: @ jump table
	.4byte _0808F6F4 @ case 0
	.4byte _0808F6EC @ case 1
	.4byte _0808F71C @ case 2
	.4byte _0808F704 @ case 3
	.4byte _0808F6E4 @ case 4
_0808F6E4:
	adds r0, r4, #0
	bl sub_08087B80
	b _0808F734
_0808F6EC:
	adds r0, r4, #0
	bl sub_080932C8
	b _0808F734
_0808F6F4:
	ldr r0, _0808F700 @ =0x08D8CDE4
	adds r1, r4, #0
	bl Proc_StartBlocking
	b _0808F734
	.align 2, 0
_0808F700: .4byte 0x08D8CDE4
_0808F704:
	adds r0, r4, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x2f
	ldrb r1, [r1]
	bl sub_0808E3B0
	adds r1, r4, #0
	bl sub_08099B94
	b _0808F734
_0808F71C:
	movs r0, #0x80
	lsls r0, r0, #1
	movs r1, #0x80
	movs r2, #0x20
	movs r3, #0
	bl StartBgmVolumeChange
	bl sub_0800F070
	adds r0, r4, #0
	bl sub_080A5AF8
_0808F734:
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0808F740
sub_0808F740: @ 0x0808F740
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x33
	ldrb r0, [r5]
	cmp r0, #3
	bne _0808F75C
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x80
	movs r2, #0x20
	movs r3, #0
	bl StartBgmVolumeChange
_0808F75C:
	ldrb r0, [r5]
	subs r0, #1
	cmp r0, #4
	bhi _0808F7A4
	lsls r0, r0, #2
	ldr r1, _0808F770 @ =_0808F774
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0808F770: .4byte _0808F774
_0808F774: @ jump table
	.4byte _0808F79C @ case 0
	.4byte _0808F79C @ case 1
	.4byte _0808F792 @ case 2
	.4byte _0808F788 @ case 3
	.4byte _0808F79C @ case 4
_0808F788:
	adds r0, r4, #0
	movs r1, #0xd
	bl Proc_Goto
	b _0808F7A4
_0808F792:
	adds r0, r4, #0
	movs r1, #7
	bl Proc_Goto
	b _0808F7A4
_0808F79C:
	adds r0, r4, #0
	movs r1, #9
	bl Proc_Goto
_0808F7A4:
	adds r1, r4, #0
	adds r1, #0x33
	movs r0, #0
	strb r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0808F7B4
sub_0808F7B4: @ 0x0808F7B4
	ldr r2, _0808F7D0 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_0808F7D0: .4byte gDispIo

	thumb_func_start sub_0808F7D4
sub_0808F7D4: @ 0x0808F7D4
	push {lr}
	bl sub_0803DEC4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0808F7E8
	bl sub_08015784
	bl sub_0802D874
_0808F7E8:
	pop {r0}
	bx r0

	thumb_func_start sub_0808F7EC
sub_0808F7EC: @ 0x0808F7EC
	push {lr}
	bl sub_0803DEC4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0808F800
	bl sub_0802D8A8
	bl sub_08015794
_0808F800:
	pop {r0}
	bx r0

	thumb_func_start sub_0808F804
sub_0808F804: @ 0x0808F804
	push {lr}
	ldr r0, _0808F814 @ =0x08D8C154
	movs r1, #3
	bl Proc_Start
	pop {r0}
	bx r0
	.align 2, 0
_0808F814: .4byte 0x08D8C154

	thumb_func_start sub_0808F818
sub_0808F818: @ 0x0808F818
	push {lr}
	ldr r0, _0808F830 @ =0x08D8C154
	movs r1, #3
	bl Proc_Start
	bl sub_0808EBEC
	bl sub_0808E5C8
	pop {r0}
	bx r0
	.align 2, 0
_0808F830: .4byte 0x08D8C154

	thumb_func_start sub_0808F834
sub_0808F834: @ 0x0808F834
	push {r4, lr}
	cmp r0, #0
	beq _0808F840
	cmp r0, #1
	beq _0808F870
	b _0808F8C2
_0808F840:
	movs r4, #1
_0808F842:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _0808F864
	ldr r1, [r0]
	cmp r1, #0
	beq _0808F864
	ldr r0, [r0, #4]
	ldr r1, [r1, #0x28]
	ldr r0, [r0, #0x28]
	orrs r1, r0
	movs r0, #0x80
	lsls r0, r0, #2
	ands r1, r0
	cmp r1, #0
	bne _0808F86C
_0808F864:
	adds r4, #1
	cmp r4, #0x3f
	ble _0808F842
	b _0808F8C2
_0808F86C:
	movs r0, #1
	b _0808F8C4
_0808F870:
	bl sub_0803DEC4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0808F8C2
	ldr r4, _0808F8CC @ =gPlaySt
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetROMChapterStruct
	movs r1, #0
	ldrb r4, [r4, #0x1b]
	cmp r4, #3
	bne _0808F88E
	movs r1, #1
_0808F88E:
	adds r0, #0x82
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #0xff
	beq _0808F8C2
	movs r4, #1
_0808F89A:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _0808F8BC
	ldr r1, [r0]
	cmp r1, #0
	beq _0808F8BC
	ldr r0, [r0, #4]
	ldr r1, [r1, #0x28]
	ldr r0, [r0, #0x28]
	orrs r1, r0
	movs r0, #0x80
	lsls r0, r0, #2
	ands r1, r0
	cmp r1, #0
	bne _0808F86C
_0808F8BC:
	adds r4, #1
	cmp r4, #0x3f
	ble _0808F89A
_0808F8C2:
	movs r0, #0
_0808F8C4:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0808F8CC: .4byte gPlaySt

	thumb_func_start sub_0808F8D0
sub_0808F8D0: @ 0x0808F8D0
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldr r2, [r7, #0x5c]
	movs r3, #0x8f
	lsls r3, r3, #6
	movs r0, #0x70
	movs r1, #4
	bl sub_08090148
	movs r6, #0x8d
	lsls r6, r6, #7
	movs r5, #0x80
	movs r4, #2
_0808F8EC:
	str r6, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x14
	ldr r3, _0808F930 @ =0x08BFF7A8
	bl sub_080068C4
	adds r6, #4
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge _0808F8EC
	adds r2, r7, #0
	adds r2, #0x64
	ldrh r0, [r2]
	cmp r0, #1
	bne _0808F928
	ldr r0, _0808F934 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #8
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0808F928
	movs r0, #0
	strh r0, [r2]
	adds r0, r7, #0
	movs r1, #0x64
	bl Proc_Goto
_0808F928:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808F930: .4byte 0x08BFF7A8
_0808F934: .4byte gpKeySt

	thumb_func_start sub_0808F938
sub_0808F938: @ 0x0808F938
	push {r4, lr}
	movs r4, #1
_0808F93C:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _0808F960
	ldr r1, [r0]
	cmp r1, #0
	beq _0808F960
	ldrb r1, [r1, #4]
	cmp r1, #0x23
	bne _0808F960
	ldr r0, [r0, #0xc]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	bne _0808F966
	movs r0, #1
	b _0808F968
_0808F960:
	adds r4, #1
	cmp r4, #0x3f
	ble _0808F93C
_0808F966:
	movs r0, #0
_0808F968:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0808F970
sub_0808F970: @ 0x0808F970
	push {r4, lr}
	ldr r4, _0808F9D4 @ =gPlaySt
	movs r0, #0x80
	ldrb r1, [r4, #0x14]
	ands r0, r1
	cmp r0, #0
	bne _0808F9D8
	bl sub_0803DEC4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0808F9D8
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetROMChapterStruct
	ldrb r0, [r0, #0xd]
	cmp r0, #0
	beq _0808F9D8
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetROMChapterStruct
	movs r1, #0
	ldrb r4, [r4, #0x1b]
	cmp r4, #3
	bne _0808F9A8
	movs r1, #1
_0808F9A8:
	adds r0, #0x82
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #0xff
	beq _0808F9D8
	movs r0, #0x28
	bl GetUnitFromCharId
	cmp r0, #0
	beq _0808F9D8
	ldrb r1, [r0, #8]
	cmp r1, #0x14
	bne _0808F9D8
	ldr r0, [r0, #4]
	ldrb r0, [r0, #4]
	cmp r0, #0x44
	bne _0808F9D8
	movs r0, #0x90
	bl sub_0807A0E0
	movs r0, #1
	b _0808F9DA
	.align 2, 0
_0808F9D4: .4byte gPlaySt
_0808F9D8:
	movs r0, #0
_0808F9DA:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_0808F9E0
sub_0808F9E0: @ 0x0808F9E0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r6, r0, #0
	movs r5, #0
	str r5, [r6, #0x58]
	ldr r4, _0808FA04 @ =gPlaySt
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	cmp r0, #0x11
	beq _0808FA1C
	cmp r0, #0x11
	bgt _0808FA08
	cmp r0, #9
	beq _0808FA0E
	b _0808FA68
	.align 2, 0
_0808FA04: .4byte gPlaySt
_0808FA08:
	cmp r0, #0x14
	beq _0808FA54
	b _0808FA68
_0808FA0E:
	bl sub_0808F938
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808FA68
	movs r0, #8
	b _0808FA66
_0808FA1C:
	movs r0, #0x6a
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808FA42
	ldr r1, [r6, #0x58]
	movs r0, #4
	orrs r1, r0
	str r1, [r6, #0x58]
	movs r0, #0x40
	ldrb r4, [r4, #0x14]
	ands r0, r4
	cmp r0, #0
	bne _0808FA68
	movs r0, #1
	orrs r1, r0
	str r1, [r6, #0x58]
	b _0808FA68
_0808FA42:
	movs r0, #0x40
	ldrb r4, [r4, #0x14]
	ands r0, r4
	cmp r0, #0
	bne _0808FA68
	ldr r0, [r6, #0x58]
	movs r1, #2
	orrs r0, r1
	b _0808FA66
_0808FA54:
	movs r0, #0x6a
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808FA64
	str r5, [r6, #0x58]
	b _0808FA68
_0808FA64:
	movs r0, #4
_0808FA66:
	str r0, [r6, #0x58]
_0808FA68:
	bl sub_0808F970
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808FA76
	movs r0, #0x10
	str r0, [r6, #0x58]
_0808FA76:
	ldr r0, [r6, #0x58]
	cmp r0, #0
	bne _0808FA86
	adds r0, r6, #0
	movs r1, #0xc8
	bl Proc_Goto
	b _0808FC96
_0808FA86:
	movs r0, #0
	bl InitBgs
	bl sub_080069C4
	bl ResetText
	bl sub_0804A9F8
	bl sub_08015A0C
	ldr r3, _0808FC30 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #2
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	ldr r4, _0808FC34 @ =gPlaySt
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetROMChapterStruct
	movs r1, #0
	ldrb r4, [r4, #0x1b]
	cmp r4, #3
	bne _0808FADC
	movs r1, #1
_0808FADC:
	adds r0, #0x80
	adds r0, r0, r1
	ldrb r0, [r0]
	str r0, [r6, #0x5c]
	movs r0, #0
	str r0, [sp]
	movs r0, #1
	movs r1, #4
	movs r2, #0xa
	movs r3, #0xc
	bl sub_0804A4CC
	ldr r0, _0808FC38 @ =0x00001131
	bl DecodeMsg
	ldr r5, _0808FC3C @ =0x02023DA6
	movs r4, #8
	str r4, [sp]
	str r0, [sp, #4]
	movs r0, #0
	adds r1, r5, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	ldr r0, _0808FC40 @ =0x00001132
	bl DecodeMsg
	adds r1, r5, #0
	adds r1, #0x80
	str r4, [sp]
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	ldr r0, _0808FC44 @ =0x0000113A
	bl DecodeMsg
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r5, r2
	str r4, [sp]
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	ldr r0, _0808FC48 @ =0x00001135
	bl DecodeMsg
	movs r2, #0xc0
	lsls r2, r2, #1
	adds r1, r5, r2
	str r4, [sp]
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	ldr r0, _0808FC4C @ =0x00001134
	bl DecodeMsg
	movs r2, #0x80
	lsls r2, r2, #2
	adds r1, r5, r2
	str r4, [sp]
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	ldr r0, _0808FC50 @ =0x0841D100
	movs r1, #0xf0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0808FC54 @ =0x0841D120
	ldr r1, _0808FC58 @ =0x06005800
	bl sub_08013688
	ldr r0, _0808FC5C @ =0x02023578
	ldr r1, _0808FC60 @ =0x0841D614
	ldr r2, _0808FC64 @ =0x0000F2C0
	bl TmApplyTsa_thm
	adds r7, r6, #0
	adds r7, #0x4c
	movs r0, #0x64
	adds r0, r0, r6
	mov r8, r0
	ldr r5, _0808FC68 @ =0x020106B4
	movs r4, #4
_0808FBA0:
	adds r0, r5, #0
	movs r1, #0xe
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _0808FBA0
	ldr r0, _0808FC6C @ =0x0841E814
	ldr r1, _0808FC70 @ =0x06011000
	bl sub_08013688
	ldr r0, _0808FC74 @ =0x0841EC70
	movs r1, #0xf0
	lsls r1, r1, #2
	movs r2, #0x40
	bl ApplyPaletteExt
	movs r0, #2
	bl EnableBgSync
	movs r0, #0
	movs r1, #8
	bl sub_080910B0
	ldr r0, _0808FC78 @ =0x0841ECD0
	movs r2, #0x83
	lsls r2, r2, #3
	ldr r3, _0808FC7C @ =0x0000EC80
	movs r4, #0
	str r4, [sp]
	movs r1, #0xd
	str r1, [sp, #4]
	movs r1, #0x78
	bl sub_08012AF0
	strh r4, [r7]
	movs r0, #0x80
	lsls r0, r0, #2
	movs r1, #3
	movs r2, #1
	bl InitTalk
	adds r0, r6, #0
	bl sub_080AA390
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_080AA3B4
	movs r0, #0xf0
	lsls r0, r0, #7
	movs r1, #2
	bl sub_0808EFBC
	movs r0, #0xa0
	lsls r0, r0, #7
	movs r1, #4
	bl sub_0808EDD0
	ldr r0, _0808FC34 @ =gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #1
	bne _0808FC80
	movs r0, #0xfa
	lsls r0, r0, #2
	adds r1, r6, #0
	bl sub_0808EF6C
	b _0808FC88
	.align 2, 0
_0808FC30: .4byte gDispIo
_0808FC34: .4byte gPlaySt
_0808FC38: .4byte 0x00001131
_0808FC3C: .4byte 0x02023DA6
_0808FC40: .4byte 0x00001132
_0808FC44: .4byte 0x0000113A
_0808FC48: .4byte 0x00001135
_0808FC4C: .4byte 0x00001134
_0808FC50: .4byte 0x0841D100
_0808FC54: .4byte 0x0841D120
_0808FC58: .4byte 0x06005800
_0808FC5C: .4byte 0x02023578
_0808FC60: .4byte 0x0841D614
_0808FC64: .4byte 0x0000F2C0
_0808FC68: .4byte 0x020106B4
_0808FC6C: .4byte 0x0841E814
_0808FC70: .4byte 0x06011000
_0808FC74: .4byte 0x0841EC70
_0808FC78: .4byte 0x0841ECD0
_0808FC7C: .4byte 0x0000EC80
_0808FC80:
	ldr r0, _0808FCA4 @ =0x000003E9
	adds r1, r6, #0
	bl sub_0808EF6C
_0808FC88:
	movs r0, #0
	mov r1, r8
	strh r0, [r1]
	ldr r0, _0808FCA8 @ =sub_0808F8D0
	adds r1, r6, #0
	bl sub_080AA20C
_0808FC96:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808FCA4: .4byte 0x000003E9
_0808FCA8: .4byte sub_0808F8D0

	thumb_func_start sub_0808FCAC
sub_0808FCAC: @ 0x0808FCAC
	ldr r3, _0808FCEC @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r2, #0
	movs r0, #0xe
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r2, [r0]
	ldr r0, _0808FCF0 @ =0x0000FFE0
	ldrh r2, [r3, #0x3c]
	ands r0, r2
	ldr r1, _0808FCF4 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	bx lr
	.align 2, 0
_0808FCEC: .4byte gDispIo
_0808FCF0: .4byte 0x0000FFE0
_0808FCF4: .4byte 0x0000E0FF

	thumb_func_start sub_0808FCF8
sub_0808FCF8: @ 0x0808FCF8
	adds r2, r0, #0
	ldr r0, [r2, #0x58]
	movs r1, #0x10
	ands r0, r1
	cmp r0, #0
	bne _0808FD0C
	adds r1, r2, #0
	adds r1, #0x64
	movs r0, #1
	strh r0, [r1]
_0808FD0C:
	bx lr
	.align 2, 0

	thumb_func_start sub_0808FD10
sub_0808FD10: @ 0x0808FD10
	push {r4, lr}
	sub sp, #0x10
	adds r2, r0, #0
	ldr r0, [r2, #0x58]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	bne _0808FD2A
	adds r0, r2, #0
	movs r1, #1
	bl Proc_Goto
	b _0808FD68
_0808FD2A:
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x14
	movs r1, #0x28
	movs r2, #6
	bl sub_080AA3F8
	movs r4, #0
	str r4, [sp]
	movs r0, #0x20
	movs r1, #0xd4
	movs r2, #0x50
	movs r3, #0x82
	bl sub_08008DA8
	movs r3, #1
	rsbs r3, r3, #0
	ldr r0, _0808FD70 @ =0x00000FBF
	str r0, [sp]
	ldr r0, _0808FD74 @ =0x06011800
	str r0, [sp, #4]
	str r3, [sp, #8]
	str r4, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x12
	adds r2, r3, #0
	bl sub_08088584
	ldr r0, _0808FD78 @ =0x0002000A
	bl sub_08087E2C
_0808FD68:
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808FD70: .4byte 0x00000FBF
_0808FD74: .4byte 0x06011800
_0808FD78: .4byte 0x0002000A

	thumb_func_start sub_0808FD7C
sub_0808FD7C: @ 0x0808FD7C
	push {r4, lr}
	sub sp, #0x10
	adds r2, r0, #0
	ldr r0, [r2, #0x58]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	bne _0808FD96
	adds r0, r2, #0
	movs r1, #2
	bl Proc_Goto
	b _0808FDD4
_0808FD96:
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x14
	movs r1, #0x38
	movs r2, #6
	bl sub_080AA3F8
	movs r4, #0
	str r4, [sp]
	movs r0, #0x4a
	movs r1, #0xd4
	movs r2, #0x50
	movs r3, #0x82
	bl sub_08008DA8
	movs r3, #1
	rsbs r3, r3, #0
	ldr r0, _0808FDDC @ =0x00000FB7
	str r0, [sp]
	ldr r0, _0808FDE0 @ =0x06011800
	str r0, [sp, #4]
	str r3, [sp, #8]
	str r4, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x12
	adds r2, r3, #0
	bl sub_08088584
	ldr r0, _0808FDE4 @ =0x0002000A
	bl sub_08087E2C
_0808FDD4:
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808FDDC: .4byte 0x00000FB7
_0808FDE0: .4byte 0x06011800
_0808FDE4: .4byte 0x0002000A

	thumb_func_start sub_0808FDE8
sub_0808FDE8: @ 0x0808FDE8
	push {r4, r5, lr}
	sub sp, #0x10
	adds r2, r0, #0
	movs r5, #0
	ldr r1, [r2, #0x58]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	bne _0808FE04
	adds r0, r2, #0
	movs r1, #3
	bl Proc_Goto
	b _0808FE54
_0808FE04:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0808FE0E
	ldr r5, _0808FE5C @ =0x00000FB8
_0808FE0E:
	movs r0, #2
	ands r1, r0
	cmp r1, #0
	beq _0808FE18
	ldr r5, _0808FE60 @ =0x00000FB9
_0808FE18:
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x14
	movs r1, #0x48
	movs r2, #6
	bl sub_080AA3F8
	movs r4, #0
	str r4, [sp]
	movs r0, #0x4b
	movs r1, #0xd4
	movs r2, #0x50
	movs r3, #0x82
	bl sub_08008DA8
	movs r3, #1
	rsbs r3, r3, #0
	str r5, [sp]
	ldr r0, _0808FE64 @ =0x06011800
	str r0, [sp, #4]
	str r3, [sp, #8]
	str r4, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x12
	adds r2, r3, #0
	bl sub_08088584
	ldr r0, _0808FE68 @ =0x0002000A
	bl sub_08087E2C
_0808FE54:
	add sp, #0x10
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808FE5C: .4byte 0x00000FB8
_0808FE60: .4byte 0x00000FB9
_0808FE64: .4byte 0x06011800
_0808FE68: .4byte 0x0002000A

	thumb_func_start sub_0808FE6C
sub_0808FE6C: @ 0x0808FE6C
	push {r4, lr}
	sub sp, #0x10
	adds r2, r0, #0
	ldr r0, [r2, #0x58]
	movs r1, #0x10
	ands r0, r1
	cmp r0, #0
	bne _0808FE86
	adds r0, r2, #0
	movs r1, #0xa
	bl Proc_Goto
	b _0808FEC4
_0808FE86:
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x14
	movs r1, #0x28
	movs r2, #6
	bl sub_080AA3F8
	movs r4, #0
	str r4, [sp]
	movs r0, #0x4a
	movs r1, #0xd4
	movs r2, #0x50
	movs r3, #0x82
	bl sub_08008DA8
	movs r3, #1
	rsbs r3, r3, #0
	ldr r0, _0808FECC @ =0x00000FBE
	str r0, [sp]
	ldr r0, _0808FED0 @ =0x06011800
	str r0, [sp, #4]
	str r3, [sp, #8]
	str r4, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x12
	adds r2, r3, #0
	bl sub_08088584
	ldr r0, _0808FED4 @ =0x0002000A
	bl sub_08087E2C
_0808FEC4:
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808FECC: .4byte 0x00000FBE
_0808FED0: .4byte 0x06011800
_0808FED4: .4byte 0x0002000A

	thumb_func_start sub_0808FED8
sub_0808FED8: @ 0x0808FED8
	adds r0, #0x64
	movs r1, #0
	strh r1, [r0]
	bx lr

	thumb_func_start sub_0808FEE0
sub_0808FEE0: @ 0x0808FEE0
	push {lr}
	bl sub_080886CC
	bl sub_0800EC08
	bl EndEachSpriteAnimProc
	bl sub_08091104
	ldr r3, _0808FF50 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0xc0
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x46
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _0808FF54 @ =0x0000FFE0
	ldrh r1, [r3, #0x3c]
	ands r0, r1
	movs r1, #0x1f
	orrs r0, r1
	strh r0, [r3, #0x3c]
	pop {r0}
	bx r0
	.align 2, 0
_0808FF50: .4byte gDispIo
_0808FF54: .4byte 0x0000FFE0

	thumb_func_start sub_0808FF58
sub_0808FF58: @ 0x0808FF58
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r0, #0x28
	bl GetUnitFromCharId
	adds r5, r0, #0
	cmp r5, #0
	bne _0808FF70
	adds r0, r4, #0
	bl Proc_End
	b _0808FFB8
_0808FF70:
	bl sub_080157A4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r4, #0
	adds r1, #0x4c
	movs r4, #0
	strh r0, [r1]
	ldr r2, _0808FFC0 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	subs r1, #0x80
	adds r0, r5, #0
	movs r2, #0
	bl sub_0802D06C
	ldr r1, _0808FFC4 @ =gBattleStats
	movs r0, #0x88
	lsls r0, r0, #1
	strh r0, [r1]
	ldr r0, _0808FFC8 @ =gBattleActor
	adds r0, #0x4a
	strh r4, [r0]
	ldr r0, _0808FFCC @ =gBattleTarget
	adds r0, #0x4a
	strh r4, [r0]
	bl BeginBattleAnimations
_0808FFB8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808FFC0: .4byte gDispIo
_0808FFC4: .4byte gBattleStats
_0808FFC8: .4byte gBattleActor
_0808FFCC: .4byte gBattleTarget

	thumb_func_start sub_0808FFD0
sub_0808FFD0: @ 0x0808FFD0
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, #0x4c
	movs r1, #0
	ldrsh r4, [r0, r1]
	bl sub_080157A4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r4, r0
	bne _0808FFEC
	adds r0, r5, #0
	bl Proc_Break
_0808FFEC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0808FFF4
sub_0808FFF4: @ 0x0808FFF4
	push {lr}
	sub sp, #4
	movs r0, #0x28
	bl GetUnitFromCharId
	adds r1, r0, #0
	cmp r1, #0
	beq _08090008
	movs r0, #0xff
	strb r0, [r1, #9]
_08090008:
	ldr r2, _08090058 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0xc0
	ldrb r3, [r1]
	orrs r0, r3
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x44
	movs r3, #0
	strb r3, [r0]
	adds r0, #1
	strb r3, [r0]
	adds r1, #0xa
	movs r0, #0x10
	strb r0, [r1]
	subs r0, #0x12
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r2, #0x80
	lsls r2, r2, #1
	str r3, [sp]
	movs r0, #0x49
	adds r1, r2, #0
	movs r3, #0x20
	bl sub_08003FD4
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_08090058: .4byte gDispIo

	thumb_func_start sub_0809005C
sub_0809005C: @ 0x0809005C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_080886CC
	bl sub_0800EC08
	bl EndEachSpriteAnimProc
	bl sub_08091104
	ldr r3, _080900DC @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0xc0
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x46
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _080900E0 @ =0x0000FFE0
	ldrh r1, [r3, #0x3c]
	ands r0, r1
	movs r1, #0x1f
	orrs r0, r1
	strh r0, [r3, #0x3c]
	adds r0, r4, #0
	bl sub_080AAC88
	ldr r0, _080900E4 @ =0x08D8C364
	adds r1, r4, #0
	bl Proc_StartBlocking
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080900DC: .4byte gDispIo
_080900E0: .4byte 0x0000FFE0
_080900E4: .4byte 0x08D8C364

	thumb_func_start sub_080900E8
sub_080900E8: @ 0x080900E8
	push {lr}
	sub sp, #4
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0
	str r0, [sp]
	movs r2, #0
	movs r3, #0x20
	bl sub_08003FD4
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08090104
sub_08090104: @ 0x08090104
	push {lr}
	ldr r0, _08090114 @ =0x08D8C3A4
	movs r1, #3
	bl Proc_Start
	pop {r0}
	bx r0
	.align 2, 0
_08090114: .4byte 0x08D8C3A4

	thumb_func_start sub_08090118
sub_08090118: @ 0x08090118
	push {lr}
	ldr r0, _0809012C @ =0x08D8C3A4
	bl Proc_Find
	cmp r0, #0
	beq _08090126
	movs r0, #1
_08090126:
	pop {r1}
	bx r1
	.align 2, 0
_0809012C: .4byte 0x08D8C3A4

	thumb_func_start sub_08090130
sub_08090130: @ 0x08090130
	push {lr}
	ldr r0, _08090144 @ =0x08D8C154
	bl Proc_Find
	cmp r0, #0
	beq _0809013E
	movs r0, #1
_0809013E:
	pop {r1}
	bx r1
	.align 2, 0
_08090144: .4byte 0x08D8C154

	thumb_func_start sub_08090148
sub_08090148: @ 0x08090148
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r6, r0, #0
	mov r8, r1
	adds r4, r2, #0
	lsls r3, r3, #0x10
	lsrs r7, r3, #0x10
	movs r0, #1
	ands r0, r4
	cmp r0, #0
	beq _08090194
	subs r6, #4
	adds r1, r6, #2
	mov r2, r8
	adds r2, #2
	ldr r3, _0809018C @ =0x08D8C55E
	str r7, [sp]
	movs r0, #4
	bl sub_080068C4
	adds r1, r6, #0
	adds r1, #0x38
	ldr r0, _08090190 @ =0x08D8C5D8
	ldr r3, [r0, #0x28]
	str r7, [sp]
	movs r0, #4
	mov r2, r8
	bl sub_080068C4
	b _080901B4
	.align 2, 0
_0809018C: .4byte 0x08D8C55E
_08090190: .4byte 0x08D8C5D8
_08090194:
	adds r1, r6, #2
	mov r2, r8
	adds r2, #2
	ldr r3, _080901E0 @ =0x08D8C544
	str r7, [sp]
	movs r0, #4
	bl sub_080068C4
	adds r1, r6, #0
	adds r1, #0x38
	ldr r3, _080901E4 @ =0x08D8C53C
	str r7, [sp]
	movs r0, #4
	mov r2, r8
	bl sub_080068C4
_080901B4:
	ldr r3, _080901E8 @ =0x08D8C52E
	str r7, [sp]
	movs r0, #4
	adds r1, r6, #0
	mov r2, r8
	bl sub_080068C4
	asrs r4, r4, #1
	mov sb, r4
	cmp r4, #9
	bgt _080901F0
	adds r1, r6, #0
	adds r1, #0x28
	ldr r0, _080901EC @ =0x08D8C5D8
	ldr r3, [r0, #0x2c]
	str r7, [sp]
	movs r0, #4
	mov r2, r8
	bl sub_080068C4
	b _08090210
	.align 2, 0
_080901E0: .4byte 0x08D8C544
_080901E4: .4byte 0x08D8C53C
_080901E8: .4byte 0x08D8C52E
_080901EC: .4byte 0x08D8C5D8
_080901F0:
	adds r5, r6, #0
	adds r5, #0x28
	ldr r4, _08090240 @ =0x08D8C5D8
	mov r0, sb
	movs r1, #0xa
	bl __divsi3
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r3, [r0]
	str r7, [sp]
	movs r0, #4
	adds r1, r5, #0
	mov r2, r8
	bl sub_080068C4
_08090210:
	adds r5, r6, #0
	adds r5, #0x30
	ldr r4, _08090240 @ =0x08D8C5D8
	mov r0, sb
	movs r1, #0xa
	bl __modsi3
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r3, [r0]
	str r7, [sp]
	movs r0, #4
	adds r1, r5, #0
	mov r2, r8
	bl sub_080068C4
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08090240: .4byte 0x08D8C5D8

	thumb_func_start sub_08090244
sub_08090244: @ 0x08090244
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r7, r0, #0
	bl sub_0803DEC4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080902C8
	adds r1, r7, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	cmp r0, #0
	beq _08090270
	adds r2, r0, #0
	movs r3, #0xc7
	lsls r3, r3, #7
	movs r0, #0x70
	movs r1, #4
	bl sub_08090148
_08090270:
	movs r0, #0x32
	adds r0, r0, r7
	mov r8, r0
	ldr r6, _080902BC @ =0x0000B680
	movs r5, #0x80
	movs r4, #2
_0809027C:
	str r6, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x14
	ldr r3, _080902C0 @ =0x08BFF7A8
	bl sub_080068C4
	adds r6, #4
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge _0809027C
	mov r1, r8
	ldrb r0, [r1]
	cmp r0, #0
	bne _080902A8
	ldrh r7, [r7, #0x34]
	lsrs r0, r7, #2
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _080902DA
_080902A8:
	ldr r3, _080902C4 @ =0x08D8CDBC
	movs r0, #0xc0
	lsls r0, r0, #2
	str r0, [sp]
	movs r0, #4
	movs r1, #6
	movs r2, #0x80
	bl sub_080068C4
	b _080902DA
	.align 2, 0
_080902BC: .4byte 0x0000B680
_080902C0: .4byte 0x08BFF7A8
_080902C4: .4byte 0x08D8CDBC
_080902C8:
	ldr r3, _080902E8 @ =0x08D8CDD0
	movs r0, #0xc0
	lsls r0, r0, #2
	str r0, [sp]
	movs r0, #4
	movs r1, #6
	movs r2, #0x80
	bl sub_080068C4
_080902DA:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080902E8: .4byte 0x08D8CDD0

	thumb_func_start nullsub_77
nullsub_77: @ 0x080902EC
	bx lr
	.align 2, 0

	thumb_func_start sub_080902F0
sub_080902F0: @ 0x080902F0
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2a
	movs r0, #0
	strb r0, [r1]
	strh r0, [r5, #0x34]
	bl sub_08025A0C
	bl sub_0803DEC4
	lsls r0, r0, #0x18
	asrs r1, r0, #0x18
	cmp r1, #0
	beq _08090330
	ldr r0, _0809032C @ =0x0841ECD0
	movs r2, #0x83
	lsls r2, r2, #3
	movs r3, #0xb9
	lsls r3, r3, #6
	movs r1, #1
	str r1, [sp]
	movs r1, #0xd
	str r1, [sp, #4]
	movs r1, #0x78
	bl sub_08012AF0
	str r0, [r5, #0x38]
	b _08090368
	.align 2, 0
_0809032C: .4byte 0x0841ECD0
_08090330:
	ldr r0, _08090380 @ =0x0841ECD0
	movs r2, #0x83
	lsls r2, r2, #3
	movs r3, #0xb9
	lsls r3, r3, #6
	str r1, [sp]
	movs r1, #0xd
	str r1, [sp, #4]
	movs r1, #0x78
	bl sub_08012AF0
	str r0, [r5, #0x38]
	ldr r4, _08090384 @ =gPlaySt
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetROMChapterStruct
	movs r1, #0
	ldrb r4, [r4, #0x1b]
	cmp r4, #3
	bne _0809035C
	movs r1, #1
_0809035C:
	adds r0, #0x80
	adds r0, r0, r1
	ldrb r0, [r0]
	adds r1, r5, #0
	adds r1, #0x2f
	strb r0, [r1]
_08090368:
	adds r1, r5, #0
	adds r1, #0x2b
	movs r0, #0
	strb r0, [r1]
	adds r1, #7
	movs r0, #1
	strb r0, [r1]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08090380: .4byte 0x0841ECD0
_08090384: .4byte gPlaySt

	thumb_func_start sub_08090388
sub_08090388: @ 0x08090388
	push {r4, lr}
	adds r4, r0, #0
	bl sub_08090244
	ldrh r0, [r4, #0x34]
	adds r0, #1
	strh r0, [r4, #0x34]
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0809039C
sub_0809039C: @ 0x0809039C
	push {lr}
	ldr r0, [r0, #0x38]
	bl EndSpriteAnimProc
	pop {r0}
	bx r0

	thumb_func_start sub_080903A8
sub_080903A8: @ 0x080903A8
	push {lr}
	ldr r0, _080903C0 @ =0x08D8C6AC
	bl Proc_Find
	cmp r0, #0
	beq _080903BC
	adds r1, r0, #0
	adds r1, #0x32
	movs r0, #0
	strb r0, [r1]
_080903BC:
	pop {r0}
	bx r0
	.align 2, 0
_080903C0: .4byte 0x08D8C6AC

	thumb_func_start sub_080903C4
sub_080903C4: @ 0x080903C4
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _080903E4 @ =0x08D8C6AC
	adds r0, r4, #0
	bl Proc_Find
	bl Proc_End
	adds r0, r4, #0
	adds r1, r5, #0
	bl Proc_Start
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080903E4: .4byte 0x08D8C6AC

	thumb_func_start sub_080903E8
sub_080903E8: @ 0x080903E8
	push {lr}
	ldr r0, _080903F8 @ =0x08D8C6AC
	bl Proc_Find
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_080903F8: .4byte 0x08D8C6AC

	thumb_func_start sub_080903FC
sub_080903FC: @ 0x080903FC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r2, r0, #0
	adds r3, r2, #0
	subs r3, #0x38
	cmp r3, #0
	bge _08090412
	movs r7, #0
	adds r6, r2, #0
	b _08090428
_08090412:
	adds r0, r2, #0
	adds r0, #0x38
	cmp r0, #0xf0
	ble _08090422
	movs r7, #0xf
	adds r6, r2, #0
	subs r6, #0x78
	b _08090428
_08090422:
	asrs r7, r3, #3
	lsls r0, r7, #3
	subs r6, r2, r0
_08090428:
	adds r3, r1, #0
	subs r3, #0x28
	adds r0, r1, #0
	adds r0, #0x30
	cmp r0, #0xa0
	ble _0809043A
	movs r5, #8
	subs r1, #0x40
	b _0809044A
_0809043A:
	adds r0, r3, #0
	cmp r0, #0
	bge _08090444
	adds r0, r1, #0
	subs r0, #0x21
_08090444:
	asrs r5, r0, #3
	lsls r0, r5, #3
	subs r1, r1, r0
_0809044A:
	mov r8, r1
	ldr r4, _08090490 @ =0x02022C68
	adds r0, r4, #0
	movs r1, #2
	adds r2, r7, #0
	bl sub_08006074
	adds r0, r4, #0
	adds r0, #0x80
	movs r1, #2
	adds r2, r5, #0
	bl sub_08006074
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r4, r1
	movs r1, #2
	adds r2, r6, #0
	bl sub_08006074
	movs r1, #0xc0
	lsls r1, r1, #1
	adds r0, r4, r1
	movs r1, #2
	mov r2, r8
	bl sub_08006074
	movs r0, #1
	bl EnableBgSync
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08090490: .4byte 0x02022C68

	thumb_func_start sub_08090494
sub_08090494: @ 0x08090494
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r2, #0
	movs r1, #7
	adds r0, #0x54
_0809049E:
	str r2, [r0]
	subs r0, #4
	subs r1, #1
	cmp r1, #0
	bge _0809049E
	movs r4, #0
	adds r0, r5, #0
	adds r0, #0x2a
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r0, r5, #0
	bl sub_080AA390
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_080AA3B4
	str r4, [r5, #0x58]
	str r4, [r5, #0x5c]
	str r4, [r5, #0x60]
	adds r0, r5, #0
	adds r0, #0x29
	strb r4, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080904D8
sub_080904D8: @ 0x080904D8
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x2a
	ldrb r0, [r5]
	mov sb, r0
	movs r1, #0x34
	ldrsh r0, [r4, r1]
	adds r0, #1
	lsls r0, r0, #3
	adds r0, #4
	mov r8, r0
	movs r2, #0x36
	ldrsh r0, [r4, r2]
	adds r0, #1
	lsls r0, r0, #3
	mov r3, sb
	lsls r1, r3, #4
	adds r7, r0, r1
	movs r3, #0x80
	lsls r3, r3, #3
	mov r0, r8
	adds r1, r7, #0
	movs r2, #6
	bl sub_080AA3F8
	ldrb r5, [r5]
	lsls r1, r5, #2
	adds r0, r4, #0
	adds r0, #0x38
	adds r0, r0, r1
	ldr r5, [r0]
	adds r6, r4, #0
	adds r6, #0x29
	movs r0, #0
	ldrsb r0, [r6, r0]
	cmp r0, #0
	beq _0809054C
	ldr r2, _08090548 @ =gpKeySt
	ldr r1, [r2]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	adds r1, r2, #0
	cmp r0, #0
	bne _0809053E
	b _08090664
_0809053E:
	bl sub_080828A4
	movs r0, #0
	strb r0, [r6]
	b _0809070C
	.align 2, 0
_08090548: .4byte gpKeySt
_0809054C:
	ldr r1, _08090574 @ =gpKeySt
	ldr r0, [r1]
	ldrh r3, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r3
	cmp r0, #0
	beq _08090578
	ldr r2, [r5, #0x30]
	cmp r2, #0
	bne _08090564
	b _0809070C
_08090564:
	mov r0, r8
	adds r1, r7, #0
	bl sub_0808266C
	movs r0, #1
	strb r0, [r6]
	b _0809070C
	.align 2, 0
_08090574: .4byte gpKeySt
_08090578:
	movs r6, #1
	adds r0, r6, #0
	ands r0, r3
	cmp r0, #0
	beq _080905C4
	adds r1, r5, #0
	adds r1, #0x38
	adds r0, r6, #0
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _08090648
	ldr r0, [r5, #0x2c]
	cmp r0, #0
	beq _08090648
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
	ldr r0, [r4, #0x14]
	ldr r1, [r5, #0x2c]
	bl _call_via_r1
	ldr r0, _080905BC @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _080905B4
	b _0809070C
_080905B4:
	ldr r0, _080905C0 @ =0x0000038A
	bl m4aSongNumStart
	b _0809070C
	.align 2, 0
_080905BC: .4byte gPlaySt
_080905C0: .4byte 0x0000038A
_080905C4:
	movs r0, #2
	ands r0, r3
	cmp r0, #0
	beq _08090608
	ldr r1, [r4, #0x58]
	cmp r1, #0
	bne _080905D4
	b _0809070C
_080905D4:
	ldr r0, [r4, #0x14]
	bl _call_via_r1
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08090648
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
	ldr r0, _08090600 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _080905F6
	b _0809070C
_080905F6:
	ldr r0, _08090604 @ =0x0000038B
	bl m4aSongNumStart
	b _0809070C
	.align 2, 0
_08090600: .4byte gPlaySt
_08090604: .4byte 0x0000038B
_08090608:
	movs r0, #8
	ands r0, r3
	cmp r0, #0
	beq _08090664
	ldr r1, [r4, #0x5c]
	cmp r1, #0
	beq _0809070C
	ldr r0, [r4, #0x14]
	bl _call_via_r1
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08090648
	ldr r0, _08090640 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08090634
	ldr r0, _08090644 @ =0x0000038A
	bl m4aSongNumStart
_08090634:
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
	b _0809070C
	.align 2, 0
_08090640: .4byte gPlaySt
_08090644: .4byte 0x0000038A
_08090648:
	ldr r0, _08090660 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809070C
	movs r0, #0xe3
	lsls r0, r0, #2
	bl m4aSongNumStart
	b _0809070C
	.align 2, 0
_08090660: .4byte gPlaySt
_08090664:
	ldr r3, [r1]
	movs r6, #0x40
	adds r0, r6, #0
	ldrh r2, [r3, #6]
	ands r0, r2
	adds r5, r4, #0
	adds r5, #0x2a
	cmp r0, #0
	beq _08090690
	ldrb r0, [r5]
	cmp r0, #0
	bne _0809068C
	adds r0, r6, #0
	ldrh r3, [r3, #8]
	ands r0, r3
	cmp r0, #0
	beq _08090690
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
_0809068C:
	subs r0, #1
	strb r0, [r5]
_08090690:
	ldr r1, [r1]
	movs r2, #0x80
	adds r0, r2, #0
	ldrh r3, [r1, #6]
	ands r0, r3
	cmp r0, #0
	beq _080906BE
	ldrb r3, [r5]
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	subs r0, #1
	cmp r3, r0
	bge _080906B0
	adds r0, r3, #1
	b _080906BC
_080906B0:
	adds r0, r2, #0
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080906BE
	movs r0, #0
_080906BC:
	strb r0, [r5]
_080906BE:
	ldrb r0, [r5]
	cmp sb, r0
	beq _0809070C
	ldr r0, _08090718 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080906D6
	ldr r0, _0809071C @ =0x00000386
	bl m4aSongNumStart
_080906D6:
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0809070C
	movs r1, #0x34
	ldrsh r0, [r4, r1]
	adds r0, #1
	lsls r0, r0, #3
	adds r0, #4
	movs r2, #0x36
	ldrsh r1, [r4, r2]
	adds r1, #1
	lsls r1, r1, #3
	ldrb r3, [r5]
	lsls r2, r3, #4
	adds r1, r1, r2
	lsls r3, r3, #2
	adds r2, r4, #0
	adds r2, #0x38
	adds r2, r2, r3
	ldr r5, [r2]
	ldr r2, [r5, #0x30]
	bl sub_0808266C
_0809070C:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08090718: .4byte gPlaySt
_0809071C: .4byte 0x00000386

	thumb_func_start sub_08090720
sub_08090720: @ 0x08090720
	push {lr}
	adds r2, r0, #0
	movs r1, #0x34
	ldrsh r0, [r2, r1]
	adds r0, #1
	lsls r0, r0, #3
	adds r0, #4
	movs r3, #0x36
	ldrsh r1, [r2, r3]
	adds r1, #1
	lsls r1, r1, #3
	adds r2, #0x2a
	ldrb r2, [r2]
	lsls r2, r2, #4
	adds r1, r1, r2
	bl sub_0804A7EC
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08090748
sub_08090748: @ 0x08090748
	push {lr}
	adds r2, r0, #0
	movs r1, #0x34
	ldrsh r0, [r2, r1]
	adds r0, #1
	lsls r0, r0, #3
	adds r0, #4
	movs r3, #0x36
	ldrsh r1, [r2, r3]
	adds r1, #1
	lsls r1, r1, #3
	adds r2, #0x2a
	ldrb r2, [r2]
	lsls r2, r2, #4
	adds r1, r1, r2
	movs r3, #0x80
	lsls r3, r3, #3
	movs r2, #6
	bl sub_080AA3F8
	pop {r0}
	bx r0

	thumb_func_start sub_08090774
sub_08090774: @ 0x08090774
	push {lr}
	ldr r1, [r0, #0x60]
	cmp r1, #0
	beq _08090782
	ldr r0, [r0, #0x14]
	bl _call_via_r1
_08090782:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08090788
sub_08090788: @ 0x08090788
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _080907A8 @ =0x08D8C6E4
	adds r0, r4, #0
	bl Proc_Find
	bl Proc_End
	adds r0, r4, #0
	adds r1, r5, #0
	bl Proc_Start
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080907A8: .4byte 0x08D8C6E4

	thumb_func_start sub_080907AC
sub_080907AC: @ 0x080907AC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080907C4 @ =0x08D8C6E4
	bl Proc_Find
	cmp r0, #0
	beq _080907BC
	str r4, [r0, #0x58]
_080907BC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080907C4: .4byte 0x08D8C6E4

	thumb_func_start sub_080907C8
sub_080907C8: @ 0x080907C8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080907E0 @ =0x08D8C6E4
	bl Proc_Find
	cmp r0, #0
	beq _080907D8
	str r4, [r0, #0x5c]
_080907D8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080907E0: .4byte 0x08D8C6E4

	thumb_func_start sub_080907E4
sub_080907E4: @ 0x080907E4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080907FC @ =0x08D8C6E4
	bl Proc_Find
	cmp r0, #0
	beq _080907F4
	str r4, [r0, #0x60]
_080907F4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080907FC: .4byte 0x08D8C6E4

	thumb_func_start sub_08090800
sub_08090800: @ 0x08090800
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	adds r7, r1, #0
	mov r8, r2
	mov sb, r3
	ldr r0, _08090850 @ =0x08D8C6E4
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	beq _08090894
	movs r4, #0
	movs r0, #0x38
	adds r0, r0, r1
	mov sl, r0
	mov r3, sl
_08090828:
	ldr r2, [r3]
	cmp r2, #0
	beq _08090854
	adds r0, r2, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, r6
	bne _08090854
	str r7, [r2, #0x2c]
	adds r0, r2, #0
	adds r0, #0x38
	mov r1, r8
	strb r1, [r0]
	ldr r0, [r3]
	mov r2, sb
	str r2, [r0, #0x34]
	ldr r1, [sp, #0x20]
	str r1, [r0, #0x30]
	b _08090894
	.align 2, 0
_08090850: .4byte 0x08D8C6E4
_08090854:
	adds r3, #4
	adds r4, #1
	cmp r4, #7
	ble _08090828
	adds r5, r1, #0
	adds r5, #0x2b
	ldrb r4, [r5]
	ldr r0, _080908A4 @ =0x08D8C6D4
	bl Proc_Start
	lsls r1, r4, #2
	add r1, sl
	str r0, [r1]
	adds r0, #0x39
	strb r6, [r0]
	ldr r0, [r1]
	str r7, [r0, #0x2c]
	adds r0, #0x38
	mov r2, r8
	strb r2, [r0]
	ldr r0, [r1]
	mov r1, sb
	str r1, [r0, #0x34]
	ldr r2, [sp, #0x20]
	str r2, [r0, #0x30]
	adds r0, #0x3c
	movs r1, #7
	bl InitText
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
_08090894:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080908A4: .4byte 0x08D8C6D4

	thumb_func_start sub_080908A8
sub_080908A8: @ 0x080908A8
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
	ldr r0, _080908D4 @ =0x08D8C6E4
	bl Proc_Find
	cmp r0, #0
	beq _080908E2
	movs r2, #0
	adds r3, r0, #0
	adds r3, #0x2a
	adds r1, r0, #0
	adds r1, #0x38
_080908C2:
	ldr r0, [r1]
	cmp r0, #0
	beq _080908DA
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, r5
	bne _080908D8
	strb r4, [r3]
	b _080908E2
	.align 2, 0
_080908D4: .4byte 0x08D8C6E4
_080908D8:
	adds r4, #1
_080908DA:
	adds r1, #4
	adds r2, #1
	cmp r2, #7
	ble _080908C2
_080908E2:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080908E8
sub_080908E8: @ 0x080908E8
	push {r4, r5, lr}
	movs r4, #0
	ldr r0, _08090918 @ =0x08D8C6E4
	bl Proc_Find
	cmp r0, #0
	beq _08090926
	movs r3, #0
	movs r1, #0x2a
	adds r1, r1, r0
	mov ip, r1
	adds r2, r0, #0
	adds r2, #0x38
_08090902:
	ldr r1, [r2]
	cmp r1, #0
	beq _0809091E
	mov r5, ip
	ldrb r0, [r5]
	cmp r0, r4
	bne _0809091C
	adds r0, r1, #0
	adds r0, #0x39
	ldrb r0, [r0]
	b _08090928
	.align 2, 0
_08090918: .4byte 0x08D8C6E4
_0809091C:
	adds r4, #1
_0809091E:
	adds r2, #4
	adds r3, #1
	cmp r3, #7
	ble _08090902
_08090926:
	movs r0, #0
_08090928:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08090930
sub_08090930: @ 0x08090930
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r6, r0, #0
	adds r5, r1, #0
	ldr r0, _080909D4 @ =0x08D8C6E4
	bl Proc_Find
	mov sb, r0
	cmp r0, #0
	beq _080909C6
	movs r0, #0
	mov r1, sb
	strh r6, [r1, #0x34]
	strh r5, [r1, #0x36]
	mov r4, sb
	adds r4, #0x2b
	ldrb r1, [r4]
	lsls r3, r1, #1
	adds r3, #2
	str r0, [sp]
	adds r0, r6, #0
	adds r1, r5, #0
	movs r2, #0xa
	bl sub_0804A4CC
	mov r8, r4
	ldrb r0, [r4]
	cmp r0, #1
	bls _080909C0
	movs r7, #0
	adds r1, r0, #0
	cmp r7, r1
	bge _080909C0
	adds r0, r5, #1
	lsls r0, r0, #5
	adds r0, #2
	adds r6, r0, r6
_08090980:
	lsls r1, r7, #2
	mov r0, sb
	adds r0, #0x38
	adds r0, r0, r1
	ldr r4, [r0]
	adds r5, r4, #0
	adds r5, #0x3c
	adds r0, r5, #0
	bl ClearText
	ldr r0, [r4, #0x34]
	bl DecodeMsg
	lsls r1, r6, #1
	ldr r2, _080909D8 @ =gBg0Tm
	adds r1, r1, r2
	adds r4, #0x38
	movs r2, #1
	ldrb r4, [r4]
	ands r2, r4
	movs r3, #0
	str r3, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	bl PutDrawText
	adds r6, #0x40
	adds r7, #1
	mov r0, r8
	ldrb r0, [r0]
	cmp r7, r0
	blt _08090980
_080909C0:
	movs r0, #3
	bl EnableBgSync
_080909C6:
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080909D4: .4byte 0x08D8C6E4
_080909D8: .4byte gBg0Tm

	thumb_func_start sub_080909DC
sub_080909DC: @ 0x080909DC
	push {lr}
	ldr r0, _080909EC @ =0x08D8C6E4
	bl Proc_Find
	cmp r0, #0
	bne _080909F0
	movs r0, #0
	b _080909F4
	.align 2, 0
_080909EC: .4byte 0x08D8C6E4
_080909F0:
	adds r0, #0x2b
	ldrb r0, [r0]
_080909F4:
	pop {r1}
	bx r1

	thumb_func_start sub_080909F8
sub_080909F8: @ 0x080909F8
	push {r4, lr}
	ldr r0, _08090A18 @ =0x08D8C6E4
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	beq _08090A12
	bl sub_08090A1C
	adds r0, r4, #0
	movs r1, #0xa
	bl Proc_Goto
_08090A12:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08090A18: .4byte 0x08D8C6E4

	thumb_func_start sub_08090A1C
sub_08090A1C: @ 0x08090A1C
	push {r4, r5, lr}
	ldr r0, _08090A7C @ =0x08D8C6E4
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	beq _08090A74
	movs r1, #0x36
	ldrsh r0, [r4, r1]
	lsls r0, r0, #5
	movs r2, #0x34
	ldrsh r1, [r4, r2]
	adds r0, r0, r1
	lsls r0, r0, #1
	ldr r1, _08090A80 @ =gBg0Tm
	adds r0, r0, r1
	adds r5, r4, #0
	adds r5, #0x2b
	ldrb r1, [r5]
	lsls r2, r1, #1
	adds r2, #2
	movs r1, #9
	movs r3, #0
	bl TmFillRect_thm
	movs r2, #0x36
	ldrsh r0, [r4, r2]
	lsls r0, r0, #5
	movs r2, #0x34
	ldrsh r1, [r4, r2]
	adds r0, r0, r1
	lsls r0, r0, #1
	ldr r1, _08090A84 @ =gBg1Tm
	adds r0, r0, r1
	ldrb r5, [r5]
	lsls r2, r5, #1
	adds r2, #2
	movs r1, #9
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #3
	bl EnableBgSync
_08090A74:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08090A7C: .4byte 0x08D8C6E4
_08090A80: .4byte gBg0Tm
_08090A84: .4byte gBg1Tm

	thumb_func_start sub_08090A88
sub_08090A88: @ 0x08090A88
	push {lr}
	ldr r0, _08090A98 @ =0x08D8C6E4
	bl Proc_Find
	cmp r0, #0
	bne _08090A9C
	movs r0, #0
	b _08090A9E
	.align 2, 0
_08090A98: .4byte 0x08D8C6E4
_08090A9C:
	movs r0, #1
_08090A9E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08090AA4
sub_08090AA4: @ 0x08090AA4
	push {lr}
	ldr r0, _08090ABC @ =0x08D8C6E4
	bl Proc_Find
	cmp r0, #0
	beq _08090AB6
	movs r1, #2
	bl Proc_Goto
_08090AB6:
	pop {r0}
	bx r0
	.align 2, 0
_08090ABC: .4byte 0x08D8C6E4

	thumb_func_start sub_08090AC0
sub_08090AC0: @ 0x08090AC0
	push {lr}
	ldr r0, _08090AD8 @ =0x08D8C6E4
	bl Proc_Find
	cmp r0, #0
	beq _08090AD2
	movs r1, #0
	bl Proc_Goto
_08090AD2:
	pop {r0}
	bx r0
	.align 2, 0
_08090AD8: .4byte 0x08D8C6E4

	thumb_func_start sub_08090ADC
sub_08090ADC: @ 0x08090ADC
	push {lr}
	ldr r0, _08090AF4 @ =0x08D8C6E4
	bl Proc_Find
	cmp r0, #0
	beq _08090AEE
	movs r1, #1
	bl Proc_Goto
_08090AEE:
	pop {r0}
	bx r0
	.align 2, 0
_08090AF4: .4byte 0x08D8C6E4

	thumb_func_start sub_08090AF8
sub_08090AF8: @ 0x08090AF8
	adds r3, r0, #0
	movs r2, #0
	movs r1, #0
	strh r1, [r3, #0x2a]
	adds r0, #0x2c
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	strh r1, [r3, #0x2e]
	strh r1, [r3, #0x32]
	adds r0, #7
	strb r2, [r0]
	ldrh r0, [r3, #0x2e]
	strh r0, [r3, #0x30]
	movs r0, #0xe4
	lsls r0, r0, #2
	strh r0, [r3, #0x36]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r3, #0x38]
	adds r0, r3, #0
	adds r0, #0x3a
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	bx lr

	thumb_func_start sub_08090B2C
sub_08090B2C: @ 0x08090B2C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	adds r4, r0, #0
	ldrh r0, [r4, #0x38]
	ldrh r1, [r4, #0x36]
	adds r0, r0, r1
	mov sb, r0
	adds r0, r4, #0
	adds r0, #0x34
	ldrh r2, [r4, #0x32]
	ldrb r0, [r0]
	cmp r2, r0
	bhi _08090B50
	b _08090D62
_08090B50:
	movs r6, #0
	adds r0, r4, #0
	adds r0, #0x2d
	mov sl, r0
	adds r3, r4, #0
	adds r3, #0x3a
	str r3, [sp, #0x14]
	adds r5, r4, #0
	adds r5, #0x3b
	str r5, [sp, #0x18]
	ldrb r0, [r0]
	cmp r6, r0
	bge _08090B8C
_08090B6A:
	ldrh r1, [r4, #0x2a]
	adds r0, r4, #0
	adds r0, #0x2c
	lsls r2, r6, #3
	ldrb r0, [r0]
	adds r2, r0, r2
	mov r3, sb
	str r3, [sp]
	movs r0, #4
	ldr r3, _08090C74 @ =0x08D8C73C
	bl sub_080068C4
	adds r6, #1
	mov r5, sl
	ldrb r5, [r5]
	cmp r6, r5
	blt _08090B6A
_08090B8C:
	cmp r6, #0
	bne _08090B92
	b _08090D10
_08090B92:
	mov r6, sl
	ldrb r6, [r6]
	lsls r7, r6, #0x13
	ldrh r0, [r4, #0x2e]
	str r0, [sp, #0xc]
	ldrh r5, [r4, #0x32]
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r6, [r0]
	str r0, [sp, #0x10]
	movs r1, #0x2c
	adds r1, r1, r4
	mov r8, r1
	cmp r5, r6
	bhi _08090BB2
	b _08090CE4
_08090BB2:
	adds r0, r7, #0
	adds r1, r5, #0
	bl __udivsi3
	str r0, [sp, #4]
	adds r0, r7, #0
	muls r0, r6, r0
	adds r1, r5, #0
	bl __udivsi3
	str r0, [sp, #8]
	ldr r2, [sp, #0xc]
	cmp r2, #0
	beq _08090BF2
	ldrh r3, [r4, #0x2a]
	ldr r5, _08090C78 @ =0x00002001
	adds r1, r3, r5
	mov r6, r8
	ldrb r2, [r6]
	subs r2, #8
	ldr r3, _08090C7C @ =0x08D8C7E8
	ldr r5, [sp, #0x14]
	ldrb r5, [r5]
	lsrs r0, r5, #3
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	mov r6, sb
	str r6, [sp]
	movs r0, #4
	bl sub_080068C4
_08090BF2:
	movs r6, #0
	ldr r0, [sp, #8]
	lsrs r5, r0, #0x13
	cmp r6, r5
	bhs _08090C28
	ldr r1, [sp, #4]
	ldr r2, [sp, #0xc]
	adds r0, r1, #0
	muls r0, r2, r0
	lsrs r7, r0, #0x14
_08090C06:
	ldrh r1, [r4, #0x2a]
	adds r1, #1
	mov r3, r8
	ldrb r3, [r3]
	adds r2, r3, r7
	lsls r0, r6, #3
	adds r2, r2, r0
	ldr r0, _08090C80 @ =0x08D8C794
	ldr r3, [r0, #0x20]
	mov r0, sb
	str r0, [sp]
	movs r0, #4
	bl sub_080068C4
	adds r6, #1
	cmp r6, r5
	blo _08090C06
_08090C28:
	ldrh r1, [r4, #0x2e]
	lsrs r0, r1, #4
	ldr r2, [sp, #0x10]
	ldrb r2, [r2]
	adds r0, r2, r0
	ldrh r3, [r4, #0x32]
	cmp r0, r3
	bne _08090C84
	mov r5, sl
	ldrb r5, [r5]
	lsls r0, r5, #3
	ldr r2, [sp, #4]
	ldr r3, [sp, #0xc]
	adds r1, r2, #0
	muls r1, r3, r1
	lsrs r2, r1, #0x14
	lsls r3, r6, #3
	adds r1, r2, r3
	subs r0, r0, r1
	cmp r0, #0
	beq _08090CE4
	ldrh r1, [r4, #0x2a]
	adds r1, #1
	mov r5, r8
	ldrb r5, [r5]
	adds r2, r5, r2
	adds r2, r2, r3
	ldr r3, _08090C80 @ =0x08D8C794
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	mov r6, sb
	str r6, [sp]
	movs r0, #4
	bl sub_080068C4
	b _08090CE4
	.align 2, 0
_08090C74: .4byte 0x08D8C73C
_08090C78: .4byte 0x00002001
_08090C7C: .4byte 0x08D8C7E8
_08090C80: .4byte 0x08D8C794
_08090C84:
	ldr r0, [sp, #8]
	lsrs r5, r0, #0x10
	movs r0, #7
	ands r5, r0
	cmp r5, #0
	beq _08090CBA
	ldrh r1, [r4, #0x2a]
	adds r1, #1
	ldr r3, [sp, #4]
	ldr r0, [sp, #0xc]
	adds r2, r3, #0
	muls r2, r0, r2
	lsrs r2, r2, #0x14
	mov r3, r8
	ldrb r3, [r3]
	adds r2, r3, r2
	lsls r0, r6, #3
	adds r2, r2, r0
	ldr r3, _08090D74 @ =0x08D8C794
	lsls r0, r5, #2
	adds r0, r0, r3
	ldr r3, [r0]
	mov r5, sb
	str r5, [sp]
	movs r0, #4
	bl sub_080068C4
_08090CBA:
	ldrh r1, [r4, #0x2a]
	adds r1, #1
	mov r6, sl
	ldrb r6, [r6]
	lsls r2, r6, #3
	mov r0, r8
	ldrb r0, [r0]
	adds r2, r0, r2
	adds r2, #1
	ldr r3, _08090D78 @ =0x08D8C7E8
	ldr r5, [sp, #0x18]
	ldrb r5, [r5]
	lsrs r0, r5, #3
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	mov r6, sb
	str r6, [sp]
	movs r0, #4
	bl sub_080068C4
_08090CE4:
	ldrh r1, [r4, #0x2a]
	mov r0, r8
	ldrb r2, [r0]
	subs r2, #8
	ldr r3, _08090D7C @ =0x08D8C744
	mov r5, sb
	str r5, [sp]
	movs r0, #4
	bl sub_080068C4
	ldrh r1, [r4, #0x2a]
	mov r6, sl
	ldrb r6, [r6]
	lsls r2, r6, #3
	mov r0, r8
	ldrb r0, [r0]
	adds r2, r0, r2
	ldr r3, _08090D80 @ =0x08D8C74C
	str r5, [sp]
	movs r0, #4
	bl sub_080068C4
_08090D10:
	ldrh r1, [r4, #0x30]
	ldrh r0, [r4, #0x2e]
	cmp r1, r0
	beq _08090D38
	cmp r1, r0
	bls _08090D24
	ldr r1, [sp, #0x14]
	ldrb r0, [r1]
	adds r0, #3
	strb r0, [r1]
_08090D24:
	ldrh r2, [r4, #0x30]
	ldrh r3, [r4, #0x2e]
	cmp r2, r3
	bhs _08090D34
	ldr r5, [sp, #0x18]
	ldrb r0, [r5]
	adds r0, #3
	strb r0, [r5]
_08090D34:
	ldrh r0, [r4, #0x2e]
	strh r0, [r4, #0x30]
_08090D38:
	ldr r6, [sp, #0x14]
	ldrb r0, [r6]
	adds r0, #1
	movs r1, #0
	strb r0, [r6]
	ldr r2, [sp, #0x18]
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	ldrb r3, [r6]
	lsrs r0, r3, #3
	cmp r0, #5
	bls _08090D54
	strb r1, [r6]
_08090D54:
	ldr r5, [sp, #0x18]
	ldrb r5, [r5]
	lsrs r0, r5, #3
	cmp r0, #5
	bls _08090D62
	ldr r6, [sp, #0x18]
	strb r1, [r6]
_08090D62:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08090D74: .4byte 0x08D8C794
_08090D78: .4byte 0x08D8C7E8
_08090D7C: .4byte 0x08D8C744
_08090D80: .4byte 0x08D8C74C

	thumb_func_start sub_08090D84
sub_08090D84: @ 0x08090D84
	push {lr}
	ldr r0, _08090D9C @ =0x08D8C8AC
	bl Proc_Find
	cmp r0, #0
	beq _08090D96
	movs r1, #1
	bl Proc_Goto
_08090D96:
	pop {r0}
	bx r0
	.align 2, 0
_08090D9C: .4byte 0x08D8C8AC

	thumb_func_start sub_08090DA0
sub_08090DA0: @ 0x08090DA0
	push {lr}
	ldr r0, _08090DB8 @ =0x08D8C8AC
	bl Proc_Find
	cmp r0, #0
	beq _08090DB2
	movs r1, #0
	bl Proc_Goto
_08090DB2:
	pop {r0}
	bx r0
	.align 2, 0
_08090DB8: .4byte 0x08D8C8AC

	thumb_func_start sub_08090DBC
sub_08090DBC: @ 0x08090DBC
	push {lr}
	ldr r0, _08090DCC @ =0x08D8C8AC
	bl Proc_Find
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_08090DCC: .4byte 0x08D8C8AC

	thumb_func_start sub_08090DD0
sub_08090DD0: @ 0x08090DD0
	push {lr}
	adds r1, r0, #0
	ldr r0, _08090DE0 @ =0x08D8C8AC
	bl Proc_Start
	pop {r1}
	bx r1
	.align 2, 0
_08090DE0: .4byte 0x08D8C8AC

	thumb_func_start sub_08090DE4
sub_08090DE4: @ 0x08090DE4
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _08090E00 @ =0x08D8C8AC
	bl Proc_Find
	cmp r0, #0
	beq _08090DFA
	strh r4, [r0, #0x2a]
	adds r0, #0x2c
	strb r5, [r0]
_08090DFA:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08090E00: .4byte 0x08D8C8AC

	thumb_func_start sub_08090E04
sub_08090E04: @ 0x08090E04
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	lsls r1, r1, #0x10
	lsrs r6, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r4, r2, #0x10
	lsls r3, r3, #0x18
	lsrs r5, r3, #0x18
	ldr r0, _08090E34 @ =0x08D8C8AC
	bl Proc_Find
	cmp r0, #0
	beq _08090E2E
	adds r1, r0, #0
	adds r1, #0x2d
	strb r7, [r1]
	strh r6, [r0, #0x2e]
	strh r4, [r0, #0x32]
	adds r0, #0x34
	strb r5, [r0]
_08090E2E:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08090E34: .4byte 0x08D8C8AC

	thumb_func_start sub_08090E38
sub_08090E38: @ 0x08090E38
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _08090E70 @ =0x0841E084
	adds r1, #0x10
	lsls r1, r1, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08090E74 @ =0x0841DFE0
	ldr r2, _08090E78 @ =0x06010000
	adds r1, r4, r2
	bl sub_08013688
	ldr r0, _08090E7C @ =0x08D8C8AC
	bl Proc_Find
	adds r2, r0, #0
	cmp r2, #0
	beq _08090E68
	asrs r0, r4, #5
	strh r0, [r2, #0x36]
	lsls r0, r5, #0xc
	strh r0, [r2, #0x38]
_08090E68:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08090E70: .4byte 0x0841E084
_08090E74: .4byte 0x0841DFE0
_08090E78: .4byte 0x06010000
_08090E7C: .4byte 0x08D8C8AC

	thumb_func_start sub_08090E80
sub_08090E80: @ 0x08090E80
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	mov r8, r1
	adds r5, r2, #0
	adds r6, r3, #0
	ldr r7, [sp, #0x18]
	bl ClearText
	adds r0, r4, #0
	adds r1, r5, #0
	bl Text_SetColor
	adds r0, r4, #0
	adds r1, r6, #0
	bl Text_SetCursor
	adds r0, r4, #0
	adds r1, r7, #0
	bl Text_DrawString
	adds r0, r4, #0
	mov r1, r8
	bl PutText
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08090EC0
sub_08090EC0: @ 0x08090EC0
	push {r4, lr}
	adds r3, r0, #0
	ldr r4, _08090ED4 @ =0x02012466
	ldrh r0, [r4]
	adds r2, r0, #0
	cmp r2, #0
	bne _08090ED8
	strb r2, [r3]
	strh r2, [r1]
	b _08090F0C
	.align 2, 0
_08090ED4: .4byte 0x02012466
_08090ED8:
	cmp r2, #7
	bhi _08090EEA
	ldrb r4, [r3]
	cmp r4, r2
	blo _08090EE6
	subs r0, #1
	strb r0, [r3]
_08090EE6:
	movs r0, #0
	b _08090F0A
_08090EEA:
	ldrh r2, [r1]
	lsrs r0, r2, #4
	adds r2, r0, #7
	ldrh r0, [r4]
	cmp r2, r0
	bge _08090F02
	ldrb r4, [r3]
	cmp r4, #6
	bne _08090F0C
	movs r0, #5
	strb r0, [r3]
	b _08090F0C
_08090F02:
	cmp r2, r0
	ble _08090F0C
	subs r0, #7
	lsls r0, r0, #4
_08090F0A:
	strh r0, [r1]
_08090F0C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08090F14
sub_08090F14: @ 0x08090F14
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r6, r0, #0
	ldr r4, _08090FC8 @ =gBg3Tm
	adds r0, r4, #0
	movs r1, #0
	bl TmFill
	bl GetGameTime
	movs r0, #0
	strh r0, [r6, #0x2a]
	movs r7, #0
	mov sl, r4
	movs r0, #0x2d
	adds r0, r0, r6
	mov sb, r0
	adds r1, r6, #0
	adds r1, #0x2c
	str r1, [sp]
_08090F44:
	movs r5, #0
	adds r3, r7, #1
	mov r8, r3
_08090F4A:
	ldrh r0, [r6, #0x2a]
	lsrs r4, r0, #3
	adds r4, r7, r4
	adds r0, r4, #0
	movs r1, #0x28
	bl __modsi3
	movs r1, #0x27
	subs r1, r1, r0
	movs r0, #0x1f
	ands r4, r0
	lsls r4, r4, #6
	lsls r2, r5, #1
	adds r4, r4, r2
	add r4, sl
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #2
	ldr r1, _08090FCC @ =0x08426FF2
	adds r0, r0, r1
	adds r2, r2, r0
	mov r3, sb
	ldrb r3, [r3]
	lsls r0, r3, #0xc
	ldrh r2, [r2]
	adds r0, r2, r0
	strh r0, [r4]
	adds r0, r5, #1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0x1d
	bls _08090F4A
	mov r1, r8
	lsls r0, r1, #0x10
	lsrs r7, r0, #0x10
	cmp r7, #0x1f
	bls _08090F44
	movs r0, #8
	bl EnableBgSync
	movs r0, #0
	ldr r3, [sp]
	strb r0, [r3]
	movs r4, #0xff
	adds r2, r4, #0
	ldrh r0, [r6, #0x2a]
	ands r2, r0
	movs r0, #3
	movs r1, #0
	bl SetBgOffset
	ldr r0, _08090FD0 @ =0x0400001E
	ldrh r6, [r6, #0x2a]
	ands r4, r6
	strh r4, [r0]
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08090FC8: .4byte gBg3Tm
_08090FCC: .4byte 0x08426FF2
_08090FD0: .4byte 0x0400001E

	thumb_func_start sub_08090FD4
sub_08090FD4: @ 0x08090FD4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r6, r0, #0
	adds r5, r6, #0
	adds r5, #0x2c
	ldrb r0, [r5]
	cmp r0, #3
	bne _08091018
	ldrh r0, [r6, #0x2a]
	adds r0, #1
	strh r0, [r6, #0x2a]
	lsls r0, r0, #0x10
	movs r1, #0xa0
	lsls r1, r1, #0x13
	cmp r0, r1
	bne _08090FFC
	movs r0, #0
	strh r0, [r6, #0x2a]
_08090FFC:
	movs r4, #0xff
	adds r2, r4, #0
	ldrh r1, [r6, #0x2a]
	ands r2, r1
	movs r0, #3
	movs r1, #0
	bl SetBgOffset
	ldr r0, _080910A4 @ =0x0400001E
	ldrh r7, [r6, #0x2a]
	ands r4, r7
	strh r4, [r0]
	movs r0, #0
	strb r0, [r5]
_08091018:
	adds r1, r6, #0
	adds r1, #0x2c
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrh r1, [r6, #0x2a]
	movs r0, #7
	ands r0, r1
	cmp r0, #0
	bne _08091098
	ldr r5, _080910A8 @ =0x08426FF2
	lsrs r0, r1, #3
	subs r4, r0, #1
	movs r1, #0x1f
	ands r4, r1
	adds r0, #0x1f
	movs r1, #0x28
	bl __modsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r3, #0
	ldr r1, _080910AC @ =gBg3Tm
	mov r8, r1
	lsls r4, r4, #6
	movs r1, #0x27
	subs r1, r1, r0
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r5
	mov sb, r0
	mov ip, r8
	adds r5, r6, #0
	adds r5, #0x2d
	adds r6, r4, #0
_08091060:
	lsls r1, r3, #1
	adds r2, r4, r1
	add r2, ip
	add r1, sb
	ldrb r7, [r5]
	lsls r0, r7, #0xc
	ldrh r1, [r1]
	adds r0, r1, r0
	strh r0, [r2]
	adds r0, r3, #1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0x1d
	bls _08091060
	mov r0, r8
	adds r4, r6, r0
	movs r0, #3
	bl GetBgTilemapOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r0, r6, r0
	adds r1, r1, r0
	adds r0, r4, #0
	movs r2, #0xf
	bl CpuFastSet
_08091098:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080910A4: .4byte 0x0400001E
_080910A8: .4byte 0x08426FF2
_080910AC: .4byte gBg3Tm

	thumb_func_start sub_080910B0
sub_080910B0: @ 0x080910B0
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	ldr r4, _080910F8 @ =0x08421C64
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl sub_08013688
	ldr r0, _080910FC @ =0x08427954
	lsls r1, r5, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r4, _08091100 @ =0x08D8C8E4
	adds r0, r4, #0
	bl Proc_Find
	bl Proc_End
	adds r0, r4, #0
	adds r1, r6, #0
	bl Proc_Start
	adds r1, r0, #0
	adds r1, #0x2d
	strb r5, [r1]
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080910F8: .4byte 0x08421C64
_080910FC: .4byte 0x08427954
_08091100: .4byte 0x08D8C8E4

	thumb_func_start sub_08091104
sub_08091104: @ 0x08091104
	push {lr}
	ldr r0, _08091114 @ =0x08D8C8E4
	bl Proc_Find
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_08091114: .4byte 0x08D8C8E4

	thumb_func_start sub_08091118
sub_08091118: @ 0x08091118
	ldr r0, _08091130 @ =0x04000006
	ldrh r0, [r0]
	adds r3, r0, #0
	cmp r3, #0xa0
	bne _08091138
	movs r3, #0
	ldr r0, _08091134 @ =0x02012968
	ldr r2, [r0]
	ldr r1, [r0, #4]
	str r1, [r0]
	str r2, [r0, #4]
	b _08091140
	.align 2, 0
_08091130: .4byte 0x04000006
_08091134: .4byte 0x02012968
_08091138:
	ldr r0, _08091154 @ =0x02012968
	cmp r3, #0xa0
	bls _08091140
	movs r3, #0
_08091140:
	ldr r2, _08091158 @ =0x04000042
	ldr r0, [r0]
	lsls r1, r3, #2
	adds r1, r1, r0
	ldrb r3, [r1]
	lsls r0, r3, #8
	ldrb r1, [r1, #1]
	orrs r0, r1
	strh r0, [r2]
	bx lr
	.align 2, 0
_08091154: .4byte 0x02012968
_08091158: .4byte 0x04000042

	thumb_func_start sub_0809115C
sub_0809115C: @ 0x0809115C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r4, r0, #0
	ldr r2, _080911D8 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	mov ip, r2
	cmp r0, #0
	bge _080911E8
	movs r0, #0x96
	str r0, [r4, #0x2c]
	movs r3, #0
	ldr r0, _080911DC @ =0x02012468
	mov sb, r0
	adds r4, #0x29
	mov r8, r4
	ldr r1, _080911E0 @ =0x02012968
	mov sl, r1
	mov r7, sb
	movs r4, #0
	movs r2, #0xf0
	movs r6, #0xa0
	lsls r6, r6, #2
	ldr r5, _080911E4 @ =0x00000281
_080911AA:
	lsls r0, r3, #2
	adds r0, r0, r7
	strb r4, [r0]
	strb r2, [r0, #1]
	adds r1, r0, r6
	strb r4, [r1]
	adds r0, r0, r5
	strb r2, [r0]
	adds r0, r3, #1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0x9f
	bls _080911AA
	mov r1, ip
	adds r1, #0x2f
	movs r0, #0
	strb r0, [r1]
	adds r1, #4
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	b _08091230
	.align 2, 0
_080911D8: .4byte gDispIo
_080911DC: .4byte 0x02012468
_080911E0: .4byte 0x02012968
_080911E4: .4byte 0x00000281
_080911E8:
	movs r0, #0
	str r0, [r4, #0x2c]
	movs r3, #0
	ldr r0, _0809129C @ =0x02012468
	mov sb, r0
	adds r4, #0x29
	mov r8, r4
	ldr r1, _080912A0 @ =0x02012968
	mov sl, r1
	mov r6, sb
	movs r2, #0x78
	movs r5, #0xa0
	lsls r5, r5, #2
	ldr r4, _080912A4 @ =0x00000281
_08091204:
	lsls r0, r3, #2
	adds r0, r0, r6
	strb r2, [r0]
	strb r2, [r0, #1]
	adds r1, r0, r5
	strb r2, [r1]
	adds r0, r0, r4
	strb r2, [r0]
	adds r0, r3, #1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0x9f
	bls _08091204
	mov r2, ip
	adds r2, #0x2f
	movs r1, #0
	movs r0, #0x78
	strb r0, [r2]
	adds r2, #4
	strb r1, [r2]
	mov r1, ip
	adds r1, #0x2e
_08091230:
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	mov r2, ip
	adds r2, #0x35
	movs r0, #1
	ldrb r1, [r2]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2]
	adds r2, #1
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2]
	movs r0, #0
	mov r1, r8
	strb r0, [r1]
	mov r0, sb
	mov r1, sl
	str r0, [r1]
	movs r0, #0xa0
	lsls r0, r0, #2
	add r0, sb
	str r0, [r1, #4]
	ldr r0, _080912A8 @ =sub_08091118
	bl SetOnHBlankA
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809129C: .4byte 0x02012468
_080912A0: .4byte 0x02012968
_080912A4: .4byte 0x00000281
_080912A8: .4byte sub_08091118

	thumb_func_start sub_080912AC
sub_080912AC: @ 0x080912AC
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r6, r0, #0
	adds r0, #0x2a
	movs r1, #0
	ldrsb r1, [r0, r1]
	ldr r0, [r6, #0x2c]
	adds r0, r0, r1
	str r0, [r6, #0x2c]
	cmp r0, #0x96
	ble _080912CA
	movs r0, #0x96
	str r0, [r6, #0x2c]
_080912CA:
	ldr r0, [r6, #0x2c]
	cmp r0, #0
	bge _080912D4
	movs r0, #0
	str r0, [r6, #0x2c]
_080912D4:
	movs r1, #0
	movs r0, #0x29
	adds r0, r0, r6
	mov sb, r0
	ldr r7, _08091314 @ =0x02012968
	movs r2, #0x78
	mov r8, r2
_080912E2:
	ldr r0, [r6, #0x2c]
	lsls r5, r1, #0x10
	cmp r0, #0
	ble _08091302
	adds r4, r0, #0
	muls r4, r0, r4
	adds r0, r4, #0
	asrs r4, r5, #0x10
	adds r1, r4, #0
	subs r1, #0x50
	adds r2, r1, #0
	muls r2, r1, r2
	adds r1, r2, #0
	subs r0, r0, r1
	cmp r0, #0
	bge _08091318
_08091302:
	ldr r0, [r7, #4]
	asrs r1, r5, #0xe
	adds r0, r1, r0
	mov r4, r8
	strb r4, [r0]
	ldr r0, [r7, #4]
	adds r1, r1, r0
	strb r4, [r1, #1]
	b _0809133E
	.align 2, 0
_08091314: .4byte 0x02012968
_08091318:
	bl Sqrt
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x78
	ble _08091328
	movs r3, #0x78
_08091328:
	ldr r1, [r7, #4]
	lsls r2, r4, #2
	adds r1, r2, r1
	mov r4, r8
	subs r0, r4, r3
	strb r0, [r1]
	ldr r0, [r7, #4]
	adds r2, r2, r0
	adds r0, r3, #0
	adds r0, #0x78
	strb r0, [r2, #1]
_0809133E:
	movs r1, #0x80
	lsls r1, r1, #9
	adds r0, r5, r1
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x9f
	ble _080912E2
	mov r2, sb
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x28
	bne _08091362
	adds r0, r6, #0
	bl Proc_Break
_08091362:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08091370
sub_08091370: @ 0x08091370
	push {lr}
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0

	thumb_func_start sub_0809137C
sub_0809137C: @ 0x0809137C
	push {r4, lr}
	adds r2, r0, #0
	lsls r4, r1, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _08091398 @ =0x08D8C904
	adds r1, r2, #0
	bl Proc_StartBlocking
	adds r1, r0, #0
	adds r1, #0x2a
	strb r4, [r1]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08091398: .4byte 0x08D8C904

	thumb_func_start sub_0809139C
sub_0809139C: @ 0x0809139C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r1, r0, #0
	adds r1, #0x29
	movs r7, #0
	strb r7, [r1]
	ldr r1, _08091434 @ =gDispIo
	mov ip, r1
	movs r3, #1
	ldrb r1, [r1, #1]
	orrs r1, r3
	movs r2, #2
	mov r8, r2
	mov r2, r8
	orrs r1, r2
	movs r6, #4
	orrs r1, r6
	movs r5, #8
	orrs r1, r5
	movs r4, #0x10
	orrs r1, r4
	movs r2, #0x21
	rsbs r2, r2, #0
	ands r1, r2
	movs r2, #0x40
	orrs r1, r2
	movs r2, #0x7f
	ands r1, r2
	mov r2, ip
	strb r1, [r2, #1]
	mov r1, ip
	adds r1, #0x35
	ldrb r2, [r1]
	orrs r3, r2
	mov r2, r8
	orrs r3, r2
	orrs r3, r6
	orrs r3, r5
	orrs r3, r4
	strb r3, [r1]
	mov r3, ip
	adds r3, #0x36
	movs r1, #2
	rsbs r1, r1, #0
	ldrb r2, [r3]
	ands r1, r2
	movs r2, #3
	rsbs r2, r2, #0
	ands r1, r2
	subs r2, #2
	ands r1, r2
	subs r2, #4
	ands r1, r2
	subs r2, #8
	ands r1, r2
	strb r1, [r3]
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble _08091438
	mov r0, ip
	adds r0, #0x2f
	strb r7, [r0]
	adds r0, #4
	strb r7, [r0]
	mov r1, ip
	adds r1, #0x2e
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	b _08091452
	.align 2, 0
_08091434: .4byte gDispIo
_08091438:
	mov r1, ip
	adds r1, #0x2f
	movs r0, #0x78
	strb r0, [r1]
	mov r2, ip
	adds r2, #0x33
	movs r1, #0x50
	strb r1, [r2]
	subs r2, #5
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x32
	strb r1, [r0]
_08091452:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0809145C
sub_0809145C: @ 0x0809145C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	adds r2, r6, #0
	adds r2, #0x29
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	ldr r4, _080914DC @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r4, #1]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r4, #1]
	movs r1, #0xf
	ldrb r2, [r2]
	subs r1, r1, r2
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #7
	muls r0, r1, r0
	movs r1, #0xe1
	bl __divsi3
	movs r1, #0xa0
	lsls r1, r1, #2
	subs r1, r1, r0
	asrs r5, r1, #4
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble _080914E0
	lsls r1, r5, #1
	adds r2, r1, r5
	adds r0, r4, #0
	adds r0, #0x2f
	strb r2, [r0]
	adds r0, #4
	strb r1, [r0]
	movs r3, #0x10
	rsbs r3, r3, #0
	adds r0, r3, #0
	subs r0, r0, r2
	adds r2, r4, #0
	adds r2, #0x2e
	strb r0, [r2]
	movs r2, #0x60
	rsbs r2, r2, #0
	adds r0, r2, #0
	subs r0, r0, r1
	adds r1, r4, #0
	adds r1, #0x32
	strb r0, [r1]
	b _08091504
	.align 2, 0
_080914DC: .4byte gDispIo
_080914E0:
	lsls r2, r5, #1
	adds r1, r2, r5
	movs r0, #0x78
	subs r0, r0, r1
	adds r3, r4, #0
	adds r3, #0x2f
	strb r0, [r3]
	movs r0, #0x50
	subs r0, r0, r2
	adds r3, #4
	strb r0, [r3]
	adds r1, #0x78
	adds r0, r4, #0
	adds r0, #0x2e
	strb r1, [r0]
	adds r2, #0x50
	adds r0, #4
	strb r2, [r0]
_08091504:
	adds r2, r4, #0
	adds r2, #0x35
	movs r0, #1
	ldrb r3, [r2]
	orrs r0, r3
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2]
	adds r1, r4, #0
	adds r1, #0x36
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r2, [r1]
	ands r0, r2
	movs r3, #3
	rsbs r3, r3, #0
	mov sl, r3
	ands r0, r3
	movs r2, #5
	rsbs r2, r2, #0
	mov sb, r2
	ands r0, r2
	subs r3, #6
	mov r8, r3
	ands r0, r3
	movs r7, #0x11
	rsbs r7, r7, #0
	ands r0, r7
	strb r0, [r1]
	cmp r5, #0x27
	ble _0809157A
	adds r0, r6, #0
	bl Proc_Break
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble _0809157A
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r4, #1]
	ands r0, r1
	mov r2, sl
	ands r0, r2
	mov r3, sb
	ands r0, r3
	mov r1, r8
	ands r0, r1
	ands r0, r7
	strb r0, [r4, #1]
_0809157A:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08091588
sub_08091588: @ 0x08091588
	movs r0, #0
	bx lr

	thumb_func_start sub_0809158C
sub_0809158C: @ 0x0809158C
	push {lr}
	bl sub_0802EC3C
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0809159C
sub_0809159C: @ 0x0809159C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	ldrh r1, [r4, #0x2c]
	cmp r0, r1
	bne _080915C8
	ldr r2, _080915D4 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	adds r0, r4, #0
	bl Proc_Break
_080915C8:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080915D4: .4byte gDispIo

	thumb_func_start sub_080915D8
sub_080915D8: @ 0x080915D8
	push {r4, lr}
	adds r4, r0, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	ldr r0, _08091610 @ =0x08D8C94C
	bl Proc_Start
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r4, [r0, #0x2a]
	ldr r2, _08091614 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08091610: .4byte 0x08D8C94C
_08091614: .4byte gDispIo

	thumb_func_start sub_08091618
sub_08091618: @ 0x08091618
	cmp r0, #0
	beq _08091626
	adds r1, r0, #0
	adds r1, #0x28
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_08091626:
	bx lr

	thumb_func_start sub_08091628
sub_08091628: @ 0x08091628
	cmp r0, #0
	beq _0809163A
	adds r1, r0, #0
	adds r1, #0x28
	ldrb r0, [r1]
	cmp r0, #0
	beq _0809163A
	subs r0, #1
	strb r0, [r1]
_0809163A:
	bx lr

	thumb_func_start sub_0809163C
sub_0809163C: @ 0x0809163C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08091660 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0xf3
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08091658
	bl sub_080828A4
	adds r0, r4, #0
	bl Proc_Break
_08091658:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08091660: .4byte gpKeySt

	thumb_func_start sub_08091664
sub_08091664: @ 0x08091664
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r2, #0
	adds r6, r3, #0
	cmp r4, #0
	bge _08091680
	cmp r1, #0
	bge _08091680
	bl sub_0804A810
	adds r4, r0, #0
	bl sub_0804A81C
	adds r1, r0, #0
_08091680:
	adds r0, r4, #0
	adds r2, r5, #0
	bl sub_0808266C
	ldr r0, _08091698 @ =0x08D8C96C
	adds r1, r6, #0
	bl Proc_StartBlocking
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_08091698: .4byte 0x08D8C96C

	thumb_func_start sub_0809169C
sub_0809169C: @ 0x0809169C
	push {r4, lr}
	adds r4, r1, #0
	bl CanUnitUseWeapon
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080916BC
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #0x80
	ands r1, r0
	cmp r1, #0
	bne _080916BC
	movs r0, #1
	b _080916BE
_080916BC:
	movs r0, #0
_080916BE:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_080916C4
sub_080916C4: @ 0x080916C4
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r6, #0
	movs r4, #0
_080916CC:
	lsls r1, r4, #1
	adds r0, r5, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r5, #0
	bl sub_0809169C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _080916E6
	adds r6, #1
_080916E6:
	adds r4, #1
	cmp r4, #4
	ble _080916CC
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_080916F4
sub_080916F4: @ 0x080916F4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4]
	ldr r1, [r4, #4]
	ldr r0, [r0, #0x28]
	ldr r1, [r1, #0x28]
	orrs r0, r1
	movs r1, #0x80
	lsls r1, r1, #2
	ands r0, r1
	cmp r0, #0
	bne _08091726
	adds r0, r4, #0
	bl sub_0802F624
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08091726
	adds r0, r4, #0
	bl sub_080916C4
	cmp r0, #0
	beq _08091726
	movs r0, #1
	b _08091728
_08091726:
	movs r0, #0
_08091728:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08091730
sub_08091730: @ 0x08091730
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r7, r1, #0
	adds r5, r2, #0
	adds r6, r3, #0
	cmp r4, r5
	beq _080917CA
	bl sub_0803DEC4
	cmp r0, #0
	beq _080917CA
	ldr r0, [r4, #0xc]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	bne _08091786
	lsls r1, r7, #1
	adds r0, r4, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r4, #0
	bl sub_0809169C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08091786
	adds r0, r4, #0
	bl sub_080916C4
	cmp r0, #1
	bgt _08091786
	lsls r1, r6, #1
	adds r0, r5, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r4, #0
	bl sub_0809169C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080917C6
_08091786:
	ldr r0, [r5, #0xc]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	bne _080917CA
	lsls r1, r6, #1
	adds r0, r5, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r5, #0
	bl sub_0809169C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080917CA
	adds r0, r5, #0
	bl sub_080916C4
	cmp r0, #1
	bgt _080917CA
	lsls r1, r7, #1
	adds r0, r4, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r5, #0
	bl sub_0809169C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080917CA
_080917C6:
	movs r0, #0
	b _080917CC
_080917CA:
	movs r0, #1
_080917CC:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080917D4
sub_080917D4: @ 0x080917D4
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	bl sub_0803DEC4
	cmp r0, #0
	beq _08091820
	ldr r0, [r4, #0xc]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	bne _08091820
	lsls r1, r5, #1
	adds r0, r4, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r4, #0
	bl sub_0809169C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08091820
	adds r0, r4, #0
	bl sub_080916C4
	cmp r0, #1
	bne _08091820
	adds r0, r4, #0
	adds r1, r6, #0
	bl sub_0809169C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08091820
	movs r0, #0
	b _08091822
_08091820:
	movs r0, #1
_08091822:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_08091828
sub_08091828: @ 0x08091828
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	bl sub_0803DEC4
	cmp r0, #0
	beq _08091864
	ldr r0, [r4, #0xc]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	bne _08091864
	lsls r1, r5, #1
	adds r0, r4, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r4, #0
	bl sub_0809169C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08091864
	adds r0, r4, #0
	bl sub_080916C4
	cmp r0, #1
	bne _08091864
	movs r0, #0
	b _08091866
_08091864:
	movs r0, #1
_08091866:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_0809186C
sub_0809186C: @ 0x0809186C
	push {r4, r5, lr}
	movs r1, #0
	ldr r4, _08091898 @ =0x0202BC35
	ldr r2, _0809189C @ =0x02012970
	ldr r3, _080918A0 @ =0x08428A80
_08091876:
	ldrb r5, [r4]
	lsls r0, r5, #0x1c
	lsrs r0, r0, #0x1e
	lsls r0, r0, #4
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	strh r0, [r2]
	adds r2, #2
	adds r1, #1
	cmp r1, #0xf
	ble _08091876
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08091898: .4byte 0x0202BC35
_0809189C: .4byte 0x02012970
_080918A0: .4byte 0x08428A80

	thumb_func_start sub_080918A4
sub_080918A4: @ 0x080918A4
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r5, #0
	ldr r4, _080918C4 @ =0x08D8C984
_080918AC:
	adds r0, r6, #0
	bl GetItemType
	ldrb r1, [r4]
	cmp r0, r1
	blt _080918C8
	ldrb r1, [r4, #1]
	cmp r0, r1
	bgt _080918C8
	adds r0, r5, #0
	b _080918D2
	.align 2, 0
_080918C4: .4byte 0x08D8C984
_080918C8:
	adds r4, #4
	adds r5, #1
	cmp r5, #8
	ble _080918AC
	movs r0, #8
_080918D2:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_080918D8
sub_080918D8: @ 0x080918D8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov sb, r0
	ldr r0, _08091990 @ =0x02011E24
	mov r8, r0
	ldr r0, _08091994 @ =0x02012466
	movs r1, #0
	strh r1, [r0]
	movs r4, #0
	ldr r1, _08091998 @ =0x02012464
	mov sl, r0
	adds r2, r1, #0
	ldrh r1, [r2]
	cmp r4, r1
	bge _08091944
	ldr r1, _0809199C @ =0x08D8C984
	mov r3, sb
	lsls r0, r3, #2
	adds r6, r0, r1
	mov r7, sl
_08091908:
	ldr r1, _080919A0 @ =0x020117E4
	lsls r0, r4, #2
	adds r5, r0, r1
	ldrh r0, [r5, #2]
	str r2, [sp]
	bl GetItemType
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r2, [sp]
	ldrb r1, [r6]
	cmp r0, r1
	blo _0809193A
	ldrb r3, [r6, #1]
	cmp r0, r3
	bhi _0809193A
	ldr r0, [r5]
	mov r1, r8
	adds r1, #4
	mov r8, r1
	subs r1, #4
	stm r1!, {r0}
	ldrh r0, [r7]
	adds r0, #1
	strh r0, [r7]
_0809193A:
	adds r4, #1
	ldr r0, _08091998 @ =0x02012464
	ldrh r0, [r0]
	cmp r4, r0
	blt _08091908
_08091944:
	movs r4, #0
	ldrh r2, [r2]
	cmp r4, r2
	bge _08091986
	ldr r1, _0809199C @ =0x08D8C984
	mov r2, sb
	lsls r0, r2, #2
	adds r6, r0, r1
_08091954:
	ldr r1, _080919A0 @ =0x020117E4
	lsls r0, r4, #2
	adds r5, r0, r1
	ldrh r0, [r5, #2]
	bl GetItemType
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldrb r3, [r6]
	cmp r0, r3
	blo _08091970
	ldrb r1, [r6, #1]
	cmp r0, r1
	bls _0809197C
_08091970:
	ldr r0, [r5]
	mov r2, r8
	adds r2, #4
	mov r8, r2
	subs r2, #4
	stm r2!, {r0}
_0809197C:
	adds r4, #1
	ldr r0, _08091998 @ =0x02012464
	ldrh r0, [r0]
	cmp r4, r0
	blt _08091954
_08091986:
	movs r2, #1
	ldr r5, _08091990 @ =0x02011E24
	ldr r3, _08091994 @ =0x02012466
	mov sl, r3
	b _080919AA
	.align 2, 0
_08091990: .4byte 0x02011E24
_08091994: .4byte 0x02012466
_08091998: .4byte 0x02012464
_0809199C: .4byte 0x08D8C984
_080919A0: .4byte 0x020117E4
_080919A4:
	lsls r0, r2, #1
	adds r0, r0, r2
	adds r2, r0, #1
_080919AA:
	mov r1, sl
	ldrh r0, [r1]
	movs r1, #3
	str r2, [sp]
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, [sp]
	cmp r2, r0
	blt _080919A4
	cmp r2, #0
	ble _08091A4C
_080919C4:
	adds r4, r2, #0
	mov r3, sl
	ldrh r3, [r3]
	cmp r2, r3
	bge _08091A3E
	ldr r0, _08091A68 @ =0x02012466
	mov sl, r0
_080919D2:
	subs r7, r4, r2
	adds r4, #1
	mov sb, r4
	cmp r7, #0
	blt _08091A32
	ldr r1, _08091A6C @ =0x02011E24
	mov r8, r1
_080919E0:
	lsls r0, r7, #2
	mov r3, r8
	adds r6, r0, r3
	ldrh r0, [r6, #2]
	str r2, [sp]
	bl GetItemIndex
	adds r4, r0, #0
	ldr r2, [sp]
	adds r0, r7, r2
	lsls r0, r0, #2
	mov r1, r8
	adds r5, r0, r1
	ldrh r0, [r5, #2]
	bl GetItemIndex
	ldr r2, [sp]
	cmp r4, r0
	bgt _08091A24
	ldrh r0, [r6, #2]
	str r2, [sp]
	bl GetItemIndex
	adds r4, r0, #0
	ldrh r0, [r5, #2]
	bl GetItemIndex
	ldr r2, [sp]
	cmp r4, r0
	bne _08091A32
	ldrh r3, [r6, #2]
	ldrh r0, [r5, #2]
	cmp r3, r0
	bls _08091A2C
_08091A24:
	ldr r1, [r6]
	ldr r0, [r5]
	str r0, [r6]
	str r1, [r5]
_08091A2C:
	subs r7, r7, r2
	cmp r7, #0
	bge _080919E0
_08091A32:
	mov r4, sb
	ldr r0, _08091A68 @ =0x02012466
	ldr r5, _08091A6C @ =0x02011E24
	ldrh r0, [r0]
	cmp r4, r0
	blt _080919D2
_08091A3E:
	adds r0, r2, #0
	movs r1, #3
	bl __divsi3
	adds r2, r0, #0
	cmp r2, #0
	bgt _080919C4
_08091A4C:
	ldr r1, _08091A70 @ =0x020117E4
	movs r2, #0xc8
	lsls r2, r2, #1
	adds r0, r5, #0
	bl CpuFastSet
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08091A68: .4byte 0x02012466
_08091A6C: .4byte 0x02011E24
_08091A70: .4byte 0x020117E4

	thumb_func_start sub_08091A74
sub_08091A74: @ 0x08091A74
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	mov sl, r1
	mov sb, r2
	ldr r6, _08091B3C @ =0x020117E4
	ldr r1, _08091B40 @ =0x02012464
	movs r0, #0
	strh r0, [r1]
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _08091AEE
	movs r5, #1
_08091A96:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	adds r7, r5, #1
	cmp r4, #0
	beq _08091AE8
	ldr r0, [r4]
	cmp r0, #0
	beq _08091AE8
	ldr r0, [r4, #0xc]
	ldr r1, _08091B44 @ =0x00010004
	ands r0, r1
	cmp r0, #0
	bne _08091AE8
	cmp r4, r8
	beq _08091AE8
	adds r0, r4, #0
	bl GetUnitItemCount
	adds r5, r0, #0
	movs r2, #0
	cmp r2, r5
	bge _08091AE8
	ldr r3, _08091B40 @ =0x02012464
	adds r1, r4, #0
	adds r1, #0x1e
_08091ACC:
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	strb r0, [r6]
	ldrh r0, [r1]
	strh r0, [r6, #2]
	strb r2, [r6, #1]
	adds r6, #4
	ldrh r0, [r3]
	adds r0, #1
	strh r0, [r3]
	adds r1, #2
	adds r2, #1
	cmp r2, r5
	blt _08091ACC
_08091AE8:
	adds r5, r7, #0
	cmp r5, #0x3f
	ble _08091A96
_08091AEE:
	movs r0, #1
	mov r1, sb
	ands r0, r1
	cmp r0, #0
	beq _08091B28
	bl sub_0802EBCC
	adds r1, r0, #0
	movs r2, #0
	ldrh r0, [r1]
	cmp r0, #0
	beq _08091B28
	movs r4, #0
	ldr r3, _08091B40 @ =0x02012464
_08091B0A:
	ldrh r0, [r1]
	strh r0, [r6, #2]
	strb r4, [r6]
	strb r2, [r6, #1]
	adds r6, #4
	ldrh r0, [r3]
	adds r0, #1
	strh r0, [r3]
	adds r1, #2
	adds r2, #1
	cmp r2, #0x63
	bgt _08091B28
	ldrh r0, [r1]
	cmp r0, #0
	bne _08091B0A
_08091B28:
	mov r0, sl
	bl sub_080918D8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08091B3C: .4byte 0x020117E4
_08091B40: .4byte 0x02012464
_08091B44: .4byte 0x00010004

	thumb_func_start sub_08091B48
sub_08091B48: @ 0x08091B48
	push {r4, r5, lr}
	bl sub_0802EBD4
	movs r4, #0
	ldr r0, _08091B84 @ =0x02012464
	ldrh r0, [r0]
	cmp r4, r0
	bhs _08091B7C
	ldr r5, _08091B88 @ =0x020117E4
_08091B5A:
	lsls r0, r4, #2
	adds r1, r0, r5
	ldrb r0, [r1]
	cmp r0, #0
	bne _08091B6E
	ldrh r0, [r1, #2]
	cmp r0, #0
	beq _08091B6E
	bl AddItemToConvoy
_08091B6E:
	adds r0, r4, #1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	ldr r0, _08091B84 @ =0x02012464
	ldrh r0, [r0]
	cmp r4, r0
	blo _08091B5A
_08091B7C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08091B84: .4byte 0x02012464
_08091B88: .4byte 0x020117E4

	thumb_func_start sub_08091B8C
sub_08091B8C: @ 0x08091B8C
	push {r4, r5, lr}
	bl sub_0802EBD4
	movs r4, #0
	movs r5, #0x87
_08091B96:
	subs r0, r5, r4
	bl AddItemToConvoy
	adds r0, r4, #1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0x63
	bls _08091B96
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08091BAC
sub_08091BAC: @ 0x08091BAC
	push {r4, lr}
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	movs r2, #0
	movs r1, #0
	movs r4, #1
_08091BB8:
	adds r0, r3, #0
	asrs r0, r1
	ands r0, r4
	cmp r0, #0
	beq _08091BC4
	adds r2, #1
_08091BC4:
	adds r1, #1
	cmp r1, #0xf
	ble _08091BB8
	adds r0, r2, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08091BD4
sub_08091BD4: @ 0x08091BD4
	push {r4, r5, lr}
	adds r5, r1, #0
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	movs r3, #0
	movs r2, #0
	movs r1, #1
_08091BE2:
	adds r0, r4, #0
	asrs r0, r2
	ands r0, r1
	cmp r0, #0
	beq _08091BF8
	cmp r3, r5
	bne _08091BF6
	adds r0, r1, #0
	lsls r0, r2
	b _08091C00
_08091BF6:
	adds r3, #1
_08091BF8:
	adds r2, #1
	cmp r2, #0xf
	ble _08091BE2
	movs r0, #0
_08091C00:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08091C08
sub_08091C08: @ 0x08091C08
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r1, #0
	movs r3, #1
_08091C10:
	adds r0, r2, #0
	asrs r0, r1
	ands r0, r3
	cmp r0, #0
	beq _08091C1E
	adds r0, r1, #0
	b _08091C26
_08091C1E:
	adds r1, #1
	cmp r1, #0xf
	ble _08091C10
	movs r0, #0
_08091C26:
	bx lr

	thumb_func_start sub_08091C28
sub_08091C28: @ 0x08091C28
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	bl GetUnitItemCount
	adds r6, r0, #0
	movs r4, #0
	cmp r4, r6
	bge _08091C56
_08091C38:
	lsls r1, r4, #1
	adds r0, r5, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r5, #0
	bl sub_080284C8
	cmp r0, #0
	beq _08091C50
	movs r0, #1
	b _08091C58
_08091C50:
	adds r4, #1
	cmp r4, r6
	blt _08091C38
_08091C56:
	movs r0, #0
_08091C58:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08091C60
sub_08091C60: @ 0x08091C60
	ldr r0, _08091C88 @ =0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0xa0
	bls _08091C70
	movs r2, #0
_08091C70:
	cmp r2, #0
	bne _08091C7A
	ldr r1, _08091C8C @ =0x04000012
	movs r0, #0xf8
	strh r0, [r1]
_08091C7A:
	cmp r2, #0x48
	bne _08091C84
	ldr r1, _08091C8C @ =0x04000012
	movs r0, #0xfc
	strh r0, [r1]
_08091C84:
	bx lr
	.align 2, 0
_08091C88: .4byte 0x04000006
_08091C8C: .4byte 0x04000012

	thumb_func_start sub_08091C90
sub_08091C90: @ 0x08091C90
	push {r4, lr}
	adds r4, r0, #0
	adds r2, r4, #0
	adds r2, #0x2a
	movs r0, #0xff
	ldrb r1, [r2]
	orrs r1, r0
	strb r1, [r2]
	adds r1, r4, #0
	adds r1, #0x2c
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	adds r1, #1
	movs r0, #0
	strb r0, [r1]
	strh r0, [r4, #0x32]
	str r0, [r4, #0x44]
	str r0, [r4, #0x40]
	bl sub_0808F834
	adds r1, r4, #0
	adds r1, #0x2b
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08091CC8
sub_08091CC8: @ 0x08091CC8
	push {r4, r5, lr}
	ldr r0, _08091D0C @ =0x02012A90
	ldr r4, _08091D10 @ =0x020230C6
	adds r1, r4, #0
	bl PutText
	adds r5, r4, #0
	adds r5, #0x12
	bl GetGold
	adds r2, r0, #0
	adds r0, r5, #0
	movs r1, #2
	bl sub_08006068
	adds r4, #0x14
	adds r0, r4, #0
	movs r1, #3
	movs r2, #0x1e
	bl sub_08005FEC
	movs r0, #0
	movs r1, #0x88
	movs r2, #0x8b
	movs r3, #2
	bl sub_080AAAD0
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08091D0C: .4byte 0x02012A90
_08091D10: .4byte 0x020230C6

	thumb_func_start sub_08091D14
sub_08091D14: @ 0x08091D14
	push {lr}
	ldr r0, _08091D34 @ =0x020230C6
	movs r1, #0xa
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #0
	bl sub_080AAB18
	movs r0, #1
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
_08091D34: .4byte 0x020230C6

	thumb_func_start sub_08091D38
sub_08091D38: @ 0x08091D38
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x34
	mov r8, r0
	add r1, sp, #8
	ldr r0, _080920EC @ =0x0842CF3C
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3}
	stm r1!, {r2, r3}
	ldr r0, _080920F0 @ =0x08D8C0A0
	bl InitBgs
	ldr r4, _080920F4 @ =gDispIo
	movs r0, #8
	rsbs r0, r0, #0
	ldrb r1, [r4]
	ands r0, r1
	strb r0, [r4]
	add r0, sp, #8
	bl sub_080069E0
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r2, [r4, #1]
	ands r0, r2
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r4, #1]
	ldr r0, _080920F8 @ =0x06017800
	movs r1, #0
	bl sub_0800515C
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r3, [r4, #0xc]
	ands r0, r3
	strb r0, [r4, #0xc]
	adds r0, r1, #0
	ldrb r2, [r4, #0x10]
	ands r0, r2
	movs r2, #2
	orrs r0, r2
	strb r0, [r4, #0x10]
	ldrb r3, [r4, #0x14]
	ands r1, r3
	strb r1, [r4, #0x14]
	movs r0, #3
	ldrb r1, [r4, #0x18]
	orrs r0, r1
	strb r0, [r4, #0x18]
	bl ResetText
	bl InitIcons
	movs r0, #4
	bl ApplyIconPalettes
	bl sub_0804A9F8
	bl sub_08015A0C
	bl sub_0808EC70
	bl sub_0808E684
	bl sub_0808ECB0
	mov r1, r8
	adds r1, #0x29
	movs r4, #0
	strb r0, [r1]
	mov r0, r8
	bl sub_080AA390
	ldr r0, _080920FC @ =sub_08093550
	mov r1, r8
	bl sub_080AA20C
	mov r0, r8
	bl sub_080A98C8
	movs r0, #0
	bl SetOnHBlankA
	movs r0, #0
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	ldr r0, _08092100 @ =gPal
	strh r4, [r0]
	bl EnablePalSync
	mov r2, sp
	adds r2, #0x28
	str r2, [sp, #0x2c]
	ldr r5, _08092104 @ =0x020129A8
	movs r4, #0xe
_08091E32:
	adds r0, r5, #0
	movs r1, #5
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _08091E32
	movs r3, #0x2a
	add r3, r8
	mov sb, r3
	mov r4, r8
	adds r4, #0x2b
	str r4, [sp, #0x30]
	ldr r0, _08092108 @ =0x02012A20
	adds r6, r0, #0
	adds r6, #0x28
	adds r5, r0, #0
	movs r4, #4
_08091E58:
	adds r0, r5, #0
	movs r1, #7
	bl InitText
	adds r0, r6, #0
	movs r1, #7
	bl InitText
	adds r6, #8
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _08091E58
	ldr r4, _0809210C @ =0x02012A70
	adds r0, r4, #0
	movs r1, #8
	bl sub_0800536C
	adds r0, r4, #0
	adds r0, #8
	movs r1, #8
	bl sub_0800536C
	ldr r0, _08092110 @ =0x02012A80
	movs r1, #8
	bl InitText
	ldr r0, _08092114 @ =0x02012A90
	movs r1, #7
	bl InitText
	adds r0, r4, #0
	adds r0, #0x28
	movs r1, #5
	bl InitText
	ldr r0, _08092118 @ =0x06014000
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_08082F74
	ldr r7, _080920F4 @ =gDispIo
	movs r0, #0x3c
	adds r0, r0, r7
	mov sl, r0
	movs r1, #0x21
	rsbs r1, r1, #0
	adds r0, r1, #0
	mov r2, sl
	ldrb r2, [r2]
	ands r0, r2
	mov r3, sl
	strb r0, [r3]
	adds r0, r7, #0
	adds r0, #0x3d
	ldrb r4, [r0]
	ands r1, r4
	strb r1, [r0]
	ldr r0, _0809211C @ =0x0000FFE0
	ldrh r1, [r7, #0x3c]
	ands r0, r1
	ldr r2, _08092120 @ =0x0000E0FF
	ands r0, r2
	strh r0, [r7, #0x3c]
	movs r3, #0x36
	adds r3, r3, r7
	mov ip, r3
	movs r0, #0x20
	ldrb r2, [r3]
	orrs r2, r0
	ldrb r4, [r7, #1]
	orrs r0, r4
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r7, #1]
	adds r0, r7, #0
	adds r0, #0x2d
	movs r1, #0
	strb r1, [r0]
	adds r1, r7, #0
	adds r1, #0x31
	movs r4, #4
	movs r0, #4
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x44
	strb r0, [r1]
	adds r5, r7, #0
	adds r5, #0x34
	movs r6, #1
	ldrb r0, [r5]
	orrs r0, r6
	movs r3, #2
	orrs r0, r3
	orrs r0, r4
	movs r4, #8
	orrs r0, r4
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r5]
	orrs r2, r6
	orrs r2, r3
	movs r0, #5
	rsbs r0, r0, #0
	ands r2, r0
	orrs r2, r4
	orrs r2, r1
	mov r3, ip
	strb r2, [r3]
	ldr r2, _08092124 @ =0x0000FFFC
	movs r0, #0
	movs r1, #4
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r1, _08092128 @ =0x0000FFD8
	mov r4, r8
	ldrh r2, [r4, #0x32]
	subs r2, #4
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl SetBgOffset
	movs r0, #7
	bl EnableBgSync
	bl ApplyUnitSpritePalettes
	movs r0, #0
	str r0, [sp, #0x28]
	ldr r1, _0809212C @ =0x02022BC0
	ldr r2, _08092130 @ =0x01000008
	ldr r0, [sp, #0x2c]
	bl CpuFastSet
	bl sub_08025A0C
	ldr r0, _08092134 @ =0x08429278
	ldr r1, _08092138 @ =0x06013E00
	bl sub_08013688
	movs r0, #0x3c
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0xd0
	bl sub_080A9954
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_080AA3B4
	bl sub_0808ED8C
	mov r1, sb
	ldrb r0, [r1]
	cmp r0, #0xff
	beq _08091FF6
	adds r5, r0, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x18
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r2, r0, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x14
	mov r3, r8
	ldrh r0, [r3, #0x32]
	subs r0, #4
	subs r2, r2, r0
	movs r0, #0
	adds r1, r4, #0
	movs r3, #2
	bl sub_080A98DC
	mov r4, sb
	ldrb r0, [r4]
	bl sub_0808E644
	adds r1, r0, #0
	ldr r0, _0809213C @ =0x00000503
	str r0, [sp]
	movs r0, #0
	movs r2, #0x44
	movs r3, #0x4e
	bl sub_080931F8
_08091FF6:
	mov r0, r8
	bl sub_08090DD0
	movs r5, #0x80
	lsls r5, r5, #2
	adds r0, r5, #0
	movs r1, #4
	bl sub_08090E38
	movs r0, #0xd8
	movs r1, #0xc
	bl sub_08090DE4
	mov r0, r8
	ldrh r4, [r0, #0x32]
	bl sub_0808E664
	subs r0, #1
	movs r1, #3
	bl __divsi3
	adds r2, r0, #0
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #6
	adds r1, r4, #0
	movs r3, #4
	bl sub_08090E04
	bl sub_08090DA0
	bl sub_0808ECDC
	movs r0, #0x3f
	mov r1, sl
	ldrb r1, [r1]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	mov r2, sl
	strb r0, [r2]
	adds r0, r7, #0
	adds r0, #0x44
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	movs r3, #0
	strb r3, [r0]
	ldr r0, _0809211C @ =0x0000FFE0
	ldrh r4, [r7, #0x3c]
	ands r0, r4
	movs r1, #2
	orrs r0, r1
	ldr r1, _08092120 @ =0x0000E0FF
	ands r0, r1
	orrs r0, r5
	strh r0, [r7, #0x3c]
	ldr r0, _08092140 @ =sub_08091C60
	bl SetOnHBlankA
	movs r1, #0xe0
	lsls r1, r1, #4
	movs r3, #0xc0
	lsls r3, r3, #4
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [sp]
	mov r2, r8
	str r2, [sp, #4]
	movs r0, #6
	movs r2, #8
	bl sub_080AAA50
	movs r0, #0
	movs r1, #1
	bl sub_080AAB3C
	ldr r0, _08092114 @ =0x02012A90
	movs r1, #3
	bl Text_SetColor
	ldr r1, _08092144 @ =0x0842CF5C
	ldr r0, _08092114 @ =0x02012A90
	bl Text_DrawString
	movs r1, #0
	ldr r3, [sp, #0x30]
	movs r0, #0
	ldrsb r0, [r3, r0]
	cmp r0, #0
	bne _080920B4
	movs r1, #1
_080920B4:
	ldr r0, _08092110 @ =0x02012A80
	bl Text_SetColor
	ldr r0, _08092110 @ =0x02012A80
	movs r1, #0
	bl Text_SetCursor
	ldr r1, _08092148 @ =0x0842CF64
	ldr r0, _08092110 @ =0x02012A80
	bl Text_DrawString
	ldr r0, _08092110 @ =0x02012A80
	movs r1, #0x20
	bl Text_SetCursor
	ldr r1, _0809214C @ =0x0842CF6C
	ldr r0, _08092110 @ =0x02012A80
	bl Text_DrawString
	add sp, #0x34
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080920EC: .4byte 0x0842CF3C
_080920F0: .4byte 0x08D8C0A0
_080920F4: .4byte gDispIo
_080920F8: .4byte 0x06017800
_080920FC: .4byte sub_08093550
_08092100: .4byte gPal
_08092104: .4byte 0x020129A8
_08092108: .4byte 0x02012A20
_0809210C: .4byte 0x02012A70
_08092110: .4byte 0x02012A80
_08092114: .4byte 0x02012A90
_08092118: .4byte 0x06014000
_0809211C: .4byte 0x0000FFE0
_08092120: .4byte 0x0000E0FF
_08092124: .4byte 0x0000FFFC
_08092128: .4byte 0x0000FFD8
_0809212C: .4byte 0x02022BC0
_08092130: .4byte 0x01000008
_08092134: .4byte 0x08429278
_08092138: .4byte 0x06013E00
_0809213C: .4byte 0x00000503
_08092140: .4byte sub_08091C60
_08092144: .4byte 0x0842CF5C
_08092148: .4byte 0x0842CF64
_0809214C: .4byte 0x0842CF6C

	thumb_func_start sub_08092150
sub_08092150: @ 0x08092150
	push {lr}
	adds r0, #0x29
	ldrb r0, [r0]
	bl sub_0808E644
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl sub_0808E694
	bl sub_080AA230
	bl sub_080AA45C
	bl sub_080A9A08
	movs r0, #0
	bl sub_080932B0
	movs r0, #1
	bl sub_080932B0
	bl sub_0808EDB0
	bl sub_08082D74
	bl sub_08090DBC
	bl sub_080AAB64
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0

	thumb_func_start sub_08092194
sub_08092194: @ 0x08092194
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #8
	adds r5, r0, #0
	movs r1, #0xa
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r4, _080921F0 @ =0x02012A70
	adds r0, r4, #0
	bl ClearText
	movs r0, #8
	adds r0, r0, r4
	mov r8, r0
	bl ClearText
	adds r1, r5, #0
	adds r1, #0x42
	movs r6, #0
	str r6, [sp]
	ldr r0, _080921F4 @ =0x0842CF74
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	adds r5, #0xc2
	str r6, [sp]
	ldr r0, _080921F8 @ =0x0842CF84
	str r0, [sp, #4]
	mov r0, r8
	adds r1, r5, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080921F0: .4byte 0x02012A70
_080921F4: .4byte 0x0842CF74
_080921F8: .4byte 0x0842CF84

	thumb_func_start sub_080921FC
sub_080921FC: @ 0x080921FC
	push {lr}
	sub sp, #4
	ldr r0, _08092218 @ =0x0000A580
	str r0, [sp]
	movs r0, #0x88
	movs r1, #0x58
	movs r2, #9
	movs r3, #4
	bl sub_080935C4
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_08092218: .4byte 0x0000A580

	thumb_func_start sub_0809221C
sub_0809221C: @ 0x0809221C
	push {lr}
	sub sp, #4
	ldr r0, _08092238 @ =0x0000A580
	str r0, [sp]
	movs r0, #8
	movs r1, #0x5c
	movs r2, #0xa
	movs r3, #5
	bl sub_080935C4
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_08092238: .4byte 0x0000A580

	thumb_func_start sub_0809223C
sub_0809223C: @ 0x0809223C
	push {lr}
	sub sp, #4
	ldr r0, _08092258 @ =0x0000A980
	str r0, [sp]
	movs r0, #0x82
	movs r1, #0x50
	movs r2, #8
	movs r3, #6
	bl sub_080935C4
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_08092258: .4byte 0x0000A980

	thumb_func_start sub_0809225C
sub_0809225C: @ 0x0809225C
	push {lr}
	ldr r0, _08092280 @ =sub_080921FC
	bl sub_080AA24C
	bl Proc_End
	ldr r0, _08092284 @ =sub_0809221C
	bl sub_080AA24C
	bl Proc_End
	ldr r0, _08092288 @ =sub_0809223C
	bl sub_080AA24C
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_08092280: .4byte sub_080921FC
_08092284: .4byte sub_0809221C
_08092288: .4byte sub_0809223C

	thumb_func_start sub_0809228C
sub_0809228C: @ 0x0809228C
	push {r4, r5, r6, lr}
	sub sp, #0x10
	adds r2, r0, #0
	adds r4, r1, #0
	mov r1, sp
	ldr r0, _080922D0 @ =0x0842CF94
	ldm r0!, {r3, r5, r6}
	stm r1!, {r3, r5, r6}
	ldr r0, [r0]
	str r0, [r1]
	ldr r0, _080922D4 @ =0x0841EF4C
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r2, r2, r1
	adds r1, r2, #0
	bl sub_08013688
	ldr r1, _080922D8 @ =gPlaySt
	adds r1, #0x41
	movs r0, #0xc
	ldrb r1, [r1]
	ands r0, r1
	add r0, sp
	ldr r0, [r0]
	lsls r4, r4, #5
	adds r1, r4, #0
	movs r2, #0xa0
	bl ApplyPaletteExt
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080922D0: .4byte 0x0842CF94
_080922D4: .4byte 0x0841EF4C
_080922D8: .4byte gPlaySt

	thumb_func_start sub_080922DC
sub_080922DC: @ 0x080922DC
	push {r4, lr}
	adds r2, r0, #0
	adds r4, r1, #0
	ldr r0, _08092304 @ =0x084295B4
	ldr r1, _08092308 @ =0x06010000
	adds r2, r2, r1
	adds r1, r2, #0
	bl sub_08013688
	ldr r0, _0809230C @ =0x08429638
	adds r4, #0x10
	lsls r4, r4, #5
	adds r1, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08092304: .4byte 0x084295B4
_08092308: .4byte 0x06010000
_0809230C: .4byte 0x08429638

	thumb_func_start sub_08092310
sub_08092310: @ 0x08092310
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	bl sub_080933F0
	movs r0, #0
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #0xc0
	lsls r0, r0, #7
	movs r1, #5
	bl sub_0809228C
	movs r0, #0xc0
	lsls r0, r0, #6
	movs r1, #0xa
	bl sub_080922DC
	ldr r0, _08092408 @ =gBg1Tm
	ldr r1, _0809240C @ =0x0842035C
	movs r2, #0xa6
	lsls r2, r2, #7
	bl TmApplyTsa_thm
	adds r7, r6, #0
	adds r7, #0x29
	ldrb r0, [r7]
	bl sub_0808E644
	adds r1, r0, #0
	ldr r0, _08092410 @ =0x00000503
	str r0, [sp]
	movs r0, #0
	movs r2, #0x44
	movs r3, #0x4e
	bl sub_080931F8
	ldr r5, _08092414 @ =0x02012A20
	ldr r4, _08092418 @ =0x02022EA4
	ldrb r0, [r7]
	bl sub_0808E644
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r4, #0
	movs r3, #2
	bl sub_080932DC
	adds r4, #0x60
	adds r0, r4, #0
	bl sub_08092194
	adds r1, r6, #0
	adds r1, #0x31
	movs r0, #0
	strb r0, [r1]
	ldrb r5, [r7]
	adds r0, r5, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x18
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x14
	ldrh r0, [r6, #0x32]
	subs r0, #4
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r4, #0
	movs r2, #7
	bl sub_080AA3F8
	adds r0, r6, #0
	movs r1, #0
	bl sub_080937E0
	bl sub_080A99EC
	bl sub_080A99AC
	movs r0, #0xc9
	movs r1, #0x7b
	adds r2, r6, #0
	bl sub_08082D1C
	bl sub_0809225C
	ldr r0, _0809241C @ =sub_080921FC
	adds r1, r6, #0
	bl sub_080AA20C
	bl sub_08091CC8
	movs r0, #7
	bl EnableBgSync
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08092408: .4byte gBg1Tm
_0809240C: .4byte 0x0842035C
_08092410: .4byte 0x00000503
_08092414: .4byte 0x02012A20
_08092418: .4byte 0x02022EA4
_0809241C: .4byte sub_080921FC

	thumb_func_start sub_08092420
sub_08092420: @ 0x08092420
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	mov r2, r8
	adds r2, #0x29
	ldrb r7, [r2]
	ldr r0, _080924FC @ =gpKeySt
	ldr r1, [r0]
	ldrh r5, [r1, #6]
	mov r3, r8
	adds r3, #0x30
	movs r0, #4
	strb r0, [r3]
	movs r0, #0x80
	lsls r0, r0, #2
	ldrh r4, [r1, #4]
	ands r0, r4
	cmp r0, #0
	beq _0809244E
	ldrh r5, [r1, #4]
	movs r0, #8
	strb r0, [r3]
_0809244E:
	movs r0, #0x40
	ands r0, r5
	cmp r0, #0
	beq _08092460
	ldrb r0, [r2]
	subs r0, #3
	cmp r0, #0
	blt _08092460
	strb r0, [r2]
_08092460:
	movs r0, #0x80
	ands r0, r5
	mov r6, r8
	adds r6, #0x29
	cmp r0, #0
	beq _0809247E
	ldrb r4, [r6]
	adds r4, #3
	bl sub_0808E664
	cmp r4, r0
	bge _0809247E
	ldrb r0, [r6]
	adds r0, #3
	strb r0, [r6]
_0809247E:
	movs r0, #0x20
	ands r0, r5
	cmp r0, #0
	beq _0809249A
	ldrb r4, [r6]
	adds r0, r4, #0
	movs r1, #3
	bl __umodsi3
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809249A
	subs r0, r4, #1
	strb r0, [r6]
_0809249A:
	movs r0, #0x10
	ands r5, r0
	cmp r5, #0
	beq _080924C4
	ldrb r4, [r6]
	adds r0, r4, #0
	movs r1, #3
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _080924C4
	adds r4, #1
	bl sub_0808E664
	cmp r4, r0
	bge _080924C4
	ldrb r0, [r6]
	adds r0, #1
	strb r0, [r6]
_080924C4:
	ldrb r0, [r6]
	cmp r0, r7
	beq _08092570
	movs r1, #3
	bl __udivsi3
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x14
	bl sub_0808E664
	subs r0, #1
	movs r1, #3
	bl __divsi3
	lsls r2, r0, #4
	mov r0, r8
	ldrh r1, [r0, #0x32]
	subs r0, r4, r1
	cmp r0, #0x20
	ble _08092500
	adds r0, r1, #0
	adds r0, #0x30
	cmp r0, r2
	bge _08092500
	lsrs r1, r1, #4
	adds r1, #4
	b _08092514
	.align 2, 0
_080924FC: .4byte gpKeySt
_08092500:
	mov r1, r8
	ldrh r0, [r1, #0x32]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r1, #0xf
	bgt _08092522
	cmp r7, #0
	beq _08092522
	lsrs r1, r7, #4
	subs r1, #1
_08092514:
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov r0, r8
	movs r2, #0
	bl sub_08093478
	b _08092552
_08092522:
	ldrb r5, [r6]
	adds r0, r5, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x18
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x14
	subs r0, r7, #4
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r4, #0
	movs r2, #7
	bl sub_080AA3F8
_08092552:
	ldr r0, _08092568 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08092564
	ldr r0, _0809256C @ =0x00000385
	bl m4aSongNumStart
_08092564:
	movs r0, #1
	b _08092572
	.align 2, 0
_08092568: .4byte gPlaySt
_0809256C: .4byte 0x00000385
_08092570:
	movs r0, #0
_08092572:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_0809257C
sub_0809257C: @ 0x0809257C
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	adds r0, #0x29
	ldrb r0, [r0]
	movs r1, #3
	bl __udivsi3
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x14
	bl sub_0808E664
	subs r0, #1
	movs r1, #3
	bl __divsi3
	lsls r2, r0, #4
	ldrh r1, [r6, #0x32]
	subs r0, r7, r1
	cmp r0, #0x20
	ble _0809261C
	adds r0, r1, #0
	adds r0, #0x30
	cmp r0, r2
	bge _0809261C
	adds r0, r6, #0
	adds r0, #0x30
	ldrb r0, [r0]
	adds r2, r0, r1
	strh r2, [r6, #0x32]
	ldr r1, _080926A0 @ =0x0000FFD8
	subs r2, #4
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl SetBgOffset
	adds r1, r6, #0
	adds r1, #0x2a
	ldrb r0, [r1]
	cmp r0, #0xff
	beq _080925FC
	adds r5, r0, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x18
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r2, r0, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x14
	ldrh r0, [r6, #0x32]
	subs r0, #4
	subs r2, r2, r0
	movs r0, #0
	adds r1, r4, #0
	movs r3, #2
	bl sub_080A98DC
_080925FC:
	ldrh r4, [r6, #0x32]
	bl sub_0808E664
	subs r0, #1
	movs r1, #3
	bl __divsi3
	adds r2, r0, #0
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #6
	adds r1, r4, #0
	movs r3, #4
	bl sub_08090E04
_0809261C:
	ldrh r2, [r6, #0x32]
	subs r0, r7, r2
	cmp r0, #0xf
	bgt _08092698
	cmp r2, #0
	beq _08092698
	adds r0, r6, #0
	adds r0, #0x30
	ldrb r0, [r0]
	subs r2, r2, r0
	strh r2, [r6, #0x32]
	ldr r1, _080926A0 @ =0x0000FFD8
	subs r2, #4
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl SetBgOffset
	adds r1, r6, #0
	adds r1, #0x2a
	ldrb r0, [r1]
	cmp r0, #0xff
	beq _08092678
	adds r5, r0, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x18
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r2, r0, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x14
	ldrh r0, [r6, #0x32]
	subs r0, #4
	subs r2, r2, r0
	movs r0, #0
	adds r1, r4, #0
	movs r3, #2
	bl sub_080A98DC
_08092678:
	ldrh r4, [r6, #0x32]
	bl sub_0808E664
	subs r0, #1
	movs r1, #3
	bl __divsi3
	adds r2, r0, #0
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #6
	adds r1, r4, #0
	movs r3, #4
	bl sub_08090E04
_08092698:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080926A0: .4byte 0x0000FFD8

	thumb_func_start sub_080926A4
sub_080926A4: @ 0x080926A4
	push {r4, lr}
	adds r4, r0, #0
	bl sub_08092150
	movs r0, #0x31
	bl sub_080807E4
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	bl sub_0808E644
	adds r1, r4, #0
	bl sub_080821F8
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080926D0
sub_080926D0: @ 0x080926D0
	push {r4, lr}
	adds r4, r0, #0
	bl sub_08091D38
	bl sub_0808EA20
	adds r1, r4, #0
	adds r1, #0x29
	strb r0, [r1]
	adds r0, r4, #0
	bl sub_080933F0
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080926F0
sub_080926F0: @ 0x080926F0
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0xf
	ldrh r1, [r6, #0x32]
	ands r0, r1
	cmp r0, #0
	beq _08092702
	b _0809281E
_08092702:
	ldr r0, _0809271C @ =gpKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08092720
	adds r0, r6, #0
	bl Proc_Break
	b _08092824
	.align 2, 0
_0809271C: .4byte gpKeySt
_08092720:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080927B0
	adds r4, r6, #0
	adds r4, #0x29
	ldrb r0, [r4]
	adds r5, r6, #0
	adds r5, #0x2a
	strb r0, [r5]
	ldrb r7, [r4]
	adds r0, r7, #0
	movs r1, #3
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _08092756
	bl sub_0808E664
	subs r0, #1
	cmp r7, r0
	bge _08092756
	ldrb r0, [r4]
	adds r0, #1
	b _0809275A
_08092756:
	ldrb r0, [r4]
	subs r0, #1
_0809275A:
	strb r0, [r4]
	ldrb r5, [r5]
	adds r0, r5, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x18
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r2, r0, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x14
	ldrh r0, [r6, #0x32]
	subs r0, #4
	subs r2, r2, r0
	movs r0, #0
	adds r1, r4, #0
	movs r3, #2
	bl sub_080A98DC
	adds r0, r6, #0
	movs r1, #2
	bl Proc_Goto
	ldr r0, _080927A8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08092824
	ldr r0, _080927AC @ =0x0000038A
	bl m4aSongNumStart
	b _08092824
	.align 2, 0
_080927A8: .4byte gPlaySt
_080927AC: .4byte 0x0000038A
_080927B0:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080927DC
	adds r0, r6, #0
	movs r1, #0xc
	bl Proc_Goto
	ldr r0, _080927D4 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08092824
	ldr r0, _080927D8 @ =0x0000038B
	bl m4aSongNumStart
	b _08092824
	.align 2, 0
_080927D4: .4byte gPlaySt
_080927D8: .4byte 0x0000038B
_080927DC:
	adds r0, r6, #0
	bl sub_08092420
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809281E
	adds r7, r6, #0
	adds r7, #0x29
	ldrb r0, [r7]
	bl sub_0808E644
	adds r1, r0, #0
	ldr r0, _0809282C @ =0x00000503
	str r0, [sp]
	movs r0, #0
	movs r2, #0x44
	movs r3, #0x4e
	bl sub_080931F8
	ldr r4, _08092830 @ =0x02012A20
	ldr r5, _08092834 @ =0x02022EA4
	ldrb r0, [r7]
	bl sub_0808E644
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #2
	bl sub_080932DC
	movs r0, #1
	bl EnableBgSync
_0809281E:
	adds r0, r6, #0
	bl sub_0809257C
_08092824:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809282C: .4byte 0x00000503
_08092830: .4byte 0x02012A20
_08092834: .4byte 0x02022EA4

	thumb_func_start sub_08092838
sub_08092838: @ 0x08092838
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	adds r5, r1, #0
	adds r7, r2, #0
	adds r0, r5, #0
	movs r1, #0xa
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r4, _08092908 @ =0x02012A70
	adds r0, r4, #0
	bl ClearText
	adds r6, r4, #0
	adds r6, #8
	adds r0, r6, #0
	bl ClearText
	bl sub_0808E664
	movs r2, #0
	cmp r0, #1
	bgt _0809286E
	movs r2, #1
_0809286E:
	ldr r3, _0809290C @ =0x0842CFA4
	adds r0, r4, #0
	movs r1, #0
	bl Text_InsertDrawString
	bl sub_0808E664
	movs r2, #0
	cmp r0, #1
	bgt _08092884
	movs r2, #1
_08092884:
	ldr r3, _08092910 @ =0x0842CFAC
	adds r0, r4, #0
	movs r1, #0x20
	bl Text_InsertDrawString
	adds r1, r5, #0
	adds r1, #0x40
	adds r0, r4, #0
	bl PutText
	adds r0, r7, #0
	bl sub_08091C28
	movs r2, #0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080928A8
	movs r2, #1
_080928A8:
	ldr r3, _08092914 @ =0x0842CFB4
	adds r0, r6, #0
	movs r1, #0
	bl Text_InsertDrawString
	movs r4, #0
	mov r0, r8
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080928D4
	adds r0, r7, #0
	bl GetUnitItemCount
	cmp r0, #0
	ble _080928D4
	bl sub_0803DEC4
	cmp r0, #0
	beq _080928D6
_080928D4:
	movs r4, #1
_080928D6:
	ldr r3, _08092918 @ =0x0842CFBC
	adds r0, r6, #0
	movs r1, #0x20
	adds r2, r4, #0
	bl Text_InsertDrawString
	ldr r4, _0809291C @ =0x02012A78
	adds r1, r5, #0
	adds r1, #0xc0
	adds r0, r4, #0
	bl PutText
	adds r4, #8
	movs r0, #0xa0
	lsls r0, r0, #1
	adds r1, r5, r0
	adds r0, r4, #0
	bl PutText
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08092908: .4byte 0x02012A70
_0809290C: .4byte 0x0842CFA4
_08092910: .4byte 0x0842CFAC
_08092914: .4byte 0x0842CFB4
_08092918: .4byte 0x0842CFBC
_0809291C: .4byte 0x02012A78

	thumb_func_start sub_08092920
sub_08092920: @ 0x08092920
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r5, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	bl sub_0808E644
	mov r8, r0
	adds r1, r5, #0
	adds r1, #0x31
	movs r0, #1
	strb r0, [r1]
	ldr r0, _08092A08 @ =gBg1Tm
	ldr r1, _08092A0C @ =0x08420810
	movs r2, #0xa6
	lsls r2, r2, #7
	bl TmApplyTsa_thm
	movs r4, #0
_0809294A:
	ldrh r1, [r5, #0x32]
	lsrs r0, r1, #3
	adds r0, r0, r4
	movs r1, #0x1f
	ands r0, r1
	adds r0, #4
	lsls r0, r0, #6
	ldr r1, _08092A10 @ =gBg2Tm
	adds r0, r0, r1
	movs r1, #9
	movs r2, #0
	movs r3, #0
	bl TmFillRect_thm
	adds r4, #1
	cmp r4, #7
	ble _0809294A
	mov r0, r8
	bl GetUnitPortraitId
	ldr r7, _08092A14 @ =0x02022D66
	movs r2, #0x9c
	lsls r2, r2, #2
	movs r6, #0
	str r6, [sp]
	adds r1, r7, #0
	movs r3, #2
	bl sub_08006E10
	ldr r5, _08092A18 @ =0x02012A98
	adds r0, r5, #0
	bl ClearText
	mov r1, r8
	ldr r0, [r1]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r4, r0, #0
	movs r0, #0x28
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r3, r0, #0
	adds r1, r7, #0
	adds r1, #0xa
	str r6, [sp]
	str r4, [sp, #4]
	adds r0, r5, #0
	movs r2, #0
	bl PutDrawText
	adds r0, r7, #0
	adds r0, #0x8a
	movs r1, #3
	movs r2, #0x24
	bl sub_08005FEC
	adds r0, r7, #0
	adds r0, #0x8c
	movs r1, #3
	movs r2, #0x25
	bl sub_08005FEC
	adds r0, r7, #0
	adds r0, #0x92
	movs r1, #3
	movs r2, #0x1d
	bl sub_08005FEC
	adds r0, r7, #0
	adds r0, #0x90
	mov r1, r8
	movs r2, #8
	ldrsb r2, [r1, r2]
	movs r1, #2
	bl sub_08006074
	adds r0, r7, #0
	adds r0, #0x96
	mov r1, r8
	ldrb r2, [r1, #9]
	movs r1, #2
	bl sub_08006074
	movs r0, #7
	bl EnableBgSync
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08092A08: .4byte gBg1Tm
_08092A0C: .4byte 0x08420810
_08092A10: .4byte gBg2Tm
_08092A14: .4byte 0x02022D66
_08092A18: .4byte 0x02012A98

	thumb_func_start sub_08092A1C
sub_08092A1C: @ 0x08092A1C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, _08092A84 @ =0x02022EBE
	movs r1, #0xc
	movs r2, #0x14
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #0xc0
	lsls r0, r0, #7
	movs r1, #5
	bl sub_0809228C
	movs r0, #0xc0
	lsls r0, r0, #6
	movs r1, #0xa
	bl sub_080922DC
	adds r0, r6, #0
	bl sub_08092920
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r5, [r0]
	adds r0, r5, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x14
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x14
	ldrh r0, [r6, #0x32]
	subs r0, #4
	subs r1, r1, r0
	adds r0, r4, #0
	bl sub_08093540
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08092A88
	bl sub_080A99D0
	b _08092A8C
	.align 2, 0
_08092A84: .4byte 0x02022EBE
_08092A88:
	bl sub_080A99EC
_08092A8C:
	bl sub_0809225C
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_08092A9C
sub_08092A9C: @ 0x08092A9C
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, _08092AF0 @ =0x02022EC4
	adds r0, #0x2a
	ldrb r0, [r0]
	bl sub_0808E644
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_08092838
	ldr r0, _08092AF4 @ =sub_0809223C
	adds r1, r4, #0
	bl sub_080AA20C
	movs r0, #0xc9
	movs r1, #0x7b
	adds r2, r4, #0
	bl sub_08082D1C
	adds r4, #0x2d
	ldrb r1, [r4]
	movs r0, #1
	ands r0, r1
	lsls r0, r0, #5
	adds r0, #0x88
	lsrs r1, r1, #1
	lsls r1, r1, #4
	adds r1, #0x54
	movs r3, #0x80
	lsls r3, r3, #3
	movs r2, #3
	bl sub_080AA3F8
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08092AF0: .4byte 0x02022EC4
_08092AF4: .4byte sub_0809223C

	thumb_func_start sub_08092AF8
sub_08092AF8: @ 0x08092AF8
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	bl sub_0808E644
	adds r5, r0, #0
	adds r0, r4, #0
	movs r1, #0
	bl sub_080937E0
	ldr r0, _08092B28 @ =0x02012A20
	ldr r1, _08092B2C @ =0x02022EA4
	adds r2, r5, #0
	movs r3, #0
	bl sub_080932DC
	movs r0, #4
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08092B28: .4byte 0x02012A20
_08092B2C: .4byte 0x02022EA4

	thumb_func_start sub_08092B30
sub_08092B30: @ 0x08092B30
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r2, r5, #0
	adds r2, #0x2d
	ldrb r7, [r2]
	adds r4, r5, #0
	adds r4, #0x2c
	ldrb r0, [r4]
	cmp r0, #0xff
	beq _08092B46
	b _08092D50
_08092B46:
	ldr r0, _08092B78 @ =gpKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08092B80
	strb r7, [r4]
	ldrb r1, [r2]
	movs r0, #1
	ands r0, r1
	lsls r0, r0, #5
	adds r0, #0x88
	lsrs r1, r1, #1
	lsls r1, r1, #4
	adds r1, #0x54
	ldr r3, _08092B7C @ =0x08D8C9A8
	ldrb r2, [r2]
	lsls r2, r2, #2
	adds r2, r2, r3
	ldr r2, [r2]
	bl sub_0808266C
	b _08092E70
	.align 2, 0
_08092B78: .4byte gpKeySt
_08092B7C: .4byte 0x08D8C9A8
_08092B80:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _08092B8A
	b _08092D0C
_08092B8A:
	cmp r7, #5
	bls _08092B90
	b _08092CF0
_08092B90:
	lsls r0, r7, #2
	ldr r1, _08092B9C @ =_08092BA0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08092B9C: .4byte _08092BA0
_08092BA0: @ jump table
	.4byte _08092BB8 @ case 0
	.4byte _08092BCC @ case 1
	.4byte _08092BE0 @ case 2
	.4byte _08092C00 @ case 3
	.4byte _08092C32 @ case 4
	.4byte _08092C4A @ case 5
_08092BB8:
	bl sub_0808E664
	cmp r0, #1
	bgt _08092BC2
	b _08092CF0
_08092BC2:
	adds r0, r5, #0
	movs r1, #4
	bl Proc_Goto
	b _08092CC8
_08092BCC:
	bl sub_0808E664
	cmp r0, #1
	bgt _08092BD6
	b _08092CF0
_08092BD6:
	adds r0, r5, #0
	movs r1, #8
	bl Proc_Goto
	b _08092CC8
_08092BE0:
	adds r0, r5, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	bl sub_0808E644
	bl sub_08091C28
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08092BF6
	b _08092CF0
_08092BF6:
	adds r0, r5, #0
	movs r1, #9
	bl Proc_Goto
	b _08092CC8
_08092C00:
	adds r0, r5, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _08092CF0
	adds r0, r5, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	bl sub_0808E644
	bl GetUnitItemCount
	cmp r0, #0
	ble _08092CF0
	bl sub_0803DEC4
	cmp r0, #0
	bne _08092CF0
	adds r0, r5, #0
	movs r1, #0xb
	bl Proc_Goto
	b _08092CC8
_08092C32:
	adds r0, r5, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _08092CF0
	adds r0, r5, #0
	movs r1, #0xa
	bl Proc_Goto
	b _08092CC8
_08092C4A:
	bl sub_0803DEC4
	cmp r0, #0
	beq _08092C78
	adds r0, r5, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	bl sub_0808E644
	ldr r0, [r0, #0xc]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	bne _08092C78
	subs r1, #9
	ldr r2, _08092C74 @ =0x000003B3
	adds r0, r1, #0
	adds r3, r5, #0
	bl sub_08091664
	b _08092E70
	.align 2, 0
_08092C74: .4byte 0x000003B3
_08092C78:
	adds r0, r5, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _08092CF0
	adds r6, r5, #0
	adds r6, #0x2a
	ldrb r0, [r6]
	bl sub_0808E644
	bl sub_08093814
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08092CF0
	ldr r4, _08092CE0 @ =0x02022EC4
	ldrb r0, [r6]
	bl sub_0808E644
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_08092838
	ldr r5, _08092CE4 @ =0x02012A20
	subs r4, #0x20
	ldrb r0, [r6]
	bl sub_0808E644
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r4, #0
	movs r3, #0
	bl sub_080932DC
	movs r0, #1
	bl EnableBgSync
_08092CC8:
	ldr r0, _08092CE8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _08092CD6
	b _08092E70
_08092CD6:
	ldr r0, _08092CEC @ =0x0000038A
	bl m4aSongNumStart
	b _08092E70
	.align 2, 0
_08092CE0: .4byte 0x02022EC4
_08092CE4: .4byte 0x02012A20
_08092CE8: .4byte gPlaySt
_08092CEC: .4byte 0x0000038A
_08092CF0:
	ldr r0, _08092D08 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _08092CFE
	b _08092E70
_08092CFE:
	movs r0, #0xe3
	lsls r0, r0, #2
	bl m4aSongNumStart
	b _08092E70
	.align 2, 0
_08092D08: .4byte gPlaySt
_08092D0C:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08092D68
	adds r2, r5, #0
	adds r2, #0x2a
	ldrb r0, [r2]
	adds r1, r5, #0
	adds r1, #0x29
	strb r0, [r1]
	movs r0, #0xff
	strb r0, [r2]
	movs r0, #0
	bl sub_080A998C
	ldr r0, _08092D48 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08092D3C
	ldr r0, _08092D4C @ =0x0000038B
	bl m4aSongNumStart
_08092D3C:
	adds r0, r5, #0
	movs r1, #0
	bl Proc_Goto
	b _08092E70
	.align 2, 0
_08092D48: .4byte gPlaySt
_08092D4C: .4byte 0x0000038B
_08092D50:
	ldr r0, _08092D8C @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08092D68
	bl sub_080828A4
	movs r0, #0xff
	strb r0, [r4]
_08092D68:
	ldr r1, _08092D8C @ =gpKeySt
	ldr r3, [r1]
	movs r6, #0x20
	adds r0, r6, #0
	ldrh r2, [r3, #6]
	ands r0, r2
	adds r4, r5, #0
	adds r4, #0x2d
	cmp r0, #0
	beq _08092D9E
	ldrb r2, [r4]
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	beq _08092D90
	subs r0, r2, #1
	b _08092D9C
	.align 2, 0
_08092D8C: .4byte gpKeySt
_08092D90:
	adds r0, r6, #0
	ldrh r3, [r3, #8]
	ands r0, r3
	cmp r0, #0
	beq _08092D9E
	adds r0, r2, #1
_08092D9C:
	strb r0, [r4]
_08092D9E:
	ldr r3, [r1]
	movs r6, #0x10
	adds r0, r6, #0
	ldrh r2, [r3, #6]
	ands r0, r2
	cmp r0, #0
	beq _08092DC8
	ldrb r2, [r4]
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	bne _08092DBA
	adds r0, r2, #1
	b _08092DC6
_08092DBA:
	adds r0, r6, #0
	ldrh r3, [r3, #8]
	ands r0, r3
	cmp r0, #0
	beq _08092DC8
	subs r0, r2, #1
_08092DC6:
	strb r0, [r4]
_08092DC8:
	ldr r3, [r1]
	movs r6, #0x40
	adds r0, r6, #0
	ldrh r2, [r3, #6]
	ands r0, r2
	cmp r0, #0
	beq _08092DEE
	ldrb r2, [r4]
	cmp r2, #1
	bls _08092DE0
	subs r0, r2, #2
	b _08092DEC
_08092DE0:
	adds r0, r6, #0
	ldrh r3, [r3, #8]
	ands r0, r3
	cmp r0, #0
	beq _08092DEE
	adds r0, r2, #4
_08092DEC:
	strb r0, [r4]
_08092DEE:
	ldr r1, [r1]
	movs r3, #0x80
	adds r0, r3, #0
	ldrh r2, [r1, #6]
	ands r0, r2
	cmp r0, #0
	beq _08092E14
	ldrb r2, [r4]
	cmp r2, #3
	bhi _08092E06
	adds r0, r2, #2
	b _08092E12
_08092E06:
	adds r0, r3, #0
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08092E14
	subs r0, r2, #4
_08092E12:
	strb r0, [r4]
_08092E14:
	ldrb r0, [r4]
	cmp r7, r0
	beq _08092E70
	ldr r0, _08092E78 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08092E2C
	ldr r0, _08092E7C @ =0x00000385
	bl m4aSongNumStart
_08092E2C:
	ldrb r1, [r4]
	movs r6, #1
	adds r0, r6, #0
	ands r0, r1
	lsls r0, r0, #5
	adds r0, #0x88
	lsrs r1, r1, #1
	lsls r1, r1, #4
	adds r1, #0x54
	movs r3, #0x80
	lsls r3, r3, #3
	movs r2, #3
	bl sub_080AA3F8
	adds r0, r5, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	cmp r0, #0xff
	beq _08092E70
	ldrb r1, [r4]
	adds r0, r6, #0
	ands r0, r1
	lsls r0, r0, #5
	adds r0, #0x88
	lsrs r1, r1, #1
	lsls r1, r1, #4
	adds r1, #0x54
	ldr r3, _08092E80 @ =0x08D8C9A8
	ldrb r4, [r4]
	lsls r2, r4, #2
	adds r2, r2, r3
	ldr r2, [r2]
	bl sub_0808266C
_08092E70:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08092E78: .4byte gPlaySt
_08092E7C: .4byte 0x00000385
_08092E80: .4byte 0x08D8C9A8

	thumb_func_start sub_08092E84
sub_08092E84: @ 0x08092E84
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r0, #0
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	ldr r4, _08092ED4 @ =0x02012A20
	ldr r5, _08092ED8 @ =0x02022EA4
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	bl sub_0808E644
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #0
	bl sub_080932DC
	adds r4, #0x28
	adds r5, #0x1a
	adds r6, #0x29
	ldrb r0, [r6]
	bl sub_0808E644
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #0
	bl sub_080932DC
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08092ED4: .4byte 0x02012A20
_08092ED8: .4byte 0x02022EA4

	thumb_func_start sub_08092EDC
sub_08092EDC: @ 0x08092EDC
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #1
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	ldr r0, _08092FEC @ =gBg0Tm
	movs r1, #0x1f
	movs r2, #8
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #0xc0
	lsls r0, r0, #7
	movs r1, #5
	bl sub_0809228C
	movs r0, #0xc0
	lsls r0, r0, #6
	movs r1, #0xa
	bl sub_080922DC
	ldr r0, _08092FF0 @ =gBg1Tm
	ldr r1, _08092FF4 @ =0x08420CC4
	movs r2, #0xa6
	lsls r2, r2, #7
	bl TmApplyTsa_thm
	adds r1, r6, #0
	adds r1, #0x31
	movs r0, #0
	strb r0, [r1]
	adds r7, r6, #0
	adds r7, #0x29
	ldrb r5, [r7]
	adds r0, r5, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x18
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x14
	ldrh r0, [r6, #0x32]
	subs r0, #4
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r4, #0
	movs r2, #7
	bl sub_080AA3F8
	adds r0, r6, #0
	movs r1, #0
	bl sub_080937E0
	movs r0, #7
	bl EnableBgSync
	adds r4, r6, #0
	adds r4, #0x2a
	ldrb r0, [r4]
	bl sub_0808E644
	adds r1, r0, #0
	ldr r0, _08092FF8 @ =0x00000503
	str r0, [sp]
	movs r0, #0
	movs r2, #0x44
	movs r3, #0x4e
	bl sub_080931F8
	ldrb r0, [r7]
	bl sub_0808E644
	adds r1, r0, #0
	ldr r0, _08092FFC @ =0x00000502
	str r0, [sp]
	movs r0, #1
	movs r2, #0xac
	movs r3, #0x4e
	bl sub_080931F8
	ldrb r5, [r4]
	adds r0, r5, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x18
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r2, r0, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x14
	ldrh r0, [r6, #0x32]
	subs r0, #4
	subs r2, r2, r0
	movs r0, #0
	adds r1, r4, #0
	movs r3, #2
	bl sub_080A98DC
	ldr r0, _08093000 @ =sub_08092E84
	movs r1, #1
	adds r2, r6, #0
	bl sub_080A9D28
	bl sub_080A99EC
	bl sub_08082D74
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08092FEC: .4byte gBg0Tm
_08092FF0: .4byte gBg1Tm
_08092FF4: .4byte 0x08420CC4
_08092FF8: .4byte 0x00000503
_08092FFC: .4byte 0x00000502
_08093000: .4byte sub_08092E84

	thumb_func_start sub_08093004
sub_08093004: @ 0x08093004
	push {lr}
	bl sub_0809225C
	movs r0, #1
	bl EnableBgSync
	pop {r0}
	bx r0

	thumb_func_start sub_08093014
sub_08093014: @ 0x08093014
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0xf
	ldrh r1, [r6, #0x32]
	ands r0, r1
	cmp r0, #0
	beq _08093026
	b _0809314C
_08093026:
	ldr r0, _08093040 @ =gpKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08093044
	adds r0, r6, #0
	bl Proc_Break
	b _08093152
	.align 2, 0
_08093040: .4byte gpKeySt
_08093044:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080930BC
	adds r5, r6, #0
	adds r5, #0x29
	ldrb r0, [r5]
	bl sub_0808E644
	bl GetUnitItemCount
	adds r7, r0, #0
	adds r4, r6, #0
	adds r4, #0x2a
	ldrb r0, [r4]
	bl sub_0808E644
	bl GetUnitItemCount
	ldrb r5, [r5]
	ldrb r4, [r4]
	cmp r5, r4
	beq _080930A0
	cmp r7, #0
	bgt _0809307A
	cmp r0, #0
	ble _080930A0
_0809307A:
	adds r0, r6, #0
	movs r1, #6
	bl Proc_Goto
	ldr r0, _08093098 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08093152
	ldr r0, _0809309C @ =0x0000038A
	bl m4aSongNumStart
	b _08093152
	.align 2, 0
_08093098: .4byte gPlaySt
_0809309C: .4byte 0x0000038A
_080930A0:
	ldr r0, _080930B8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08093152
	movs r0, #0xe3
	lsls r0, r0, #2
	bl m4aSongNumStart
	b _08093152
	.align 2, 0
_080930B8: .4byte gPlaySt
_080930BC:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080930F0
	movs r0, #1
	bl sub_080932B0
	adds r0, r6, #0
	movs r1, #2
	bl Proc_Goto
	ldr r0, _080930E8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08093152
	ldr r0, _080930EC @ =0x0000038B
	bl m4aSongNumStart
	b _08093152
	.align 2, 0
_080930E8: .4byte gPlaySt
_080930EC: .4byte 0x0000038B
_080930F0:
	adds r0, r6, #0
	bl sub_08092420
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809314C
	adds r7, r6, #0
	adds r7, #0x29
	ldrb r0, [r7]
	bl sub_0808E644
	adds r1, r0, #0
	ldr r0, _0809315C @ =0x00000502
	str r0, [sp]
	movs r0, #1
	movs r2, #0xac
	movs r3, #0x4e
	bl sub_080931F8
	ldr r4, _08093160 @ =0x02012A48
	ldr r5, _08093164 @ =0x02022EBE
	ldrb r0, [r7]
	bl sub_0808E644
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #2
	bl sub_080932DC
	subs r4, #0x28
	subs r5, #0x1a
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	bl sub_0808E644
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #1
	bl sub_080932DC
	movs r0, #1
	bl EnableBgSync
_0809314C:
	adds r0, r6, #0
	bl sub_0809257C
_08093152:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809315C: .4byte 0x00000502
_08093160: .4byte 0x02012A48
_08093164: .4byte 0x02022EBE

	thumb_func_start sub_08093168
sub_08093168: @ 0x08093168
	push {r4, r5, lr}
	adds r4, r0, #0
	bl sub_08092150
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	bl sub_0808E644
	adds r5, r0, #0
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	bl sub_0808E644
	adds r1, r0, #0
	adds r0, r5, #0
	adds r2, r4, #0
	bl sub_080951D8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08093198
sub_08093198: @ 0x08093198
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	bl sub_0808E644
	adds r1, r4, #0
	bl sub_080960E0
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080931B0
sub_080931B0: @ 0x080931B0
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	bl sub_0808E644
	adds r1, r4, #0
	bl sub_08097BF4
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080931C8
sub_080931C8: @ 0x080931C8
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	bl sub_0808E644
	adds r1, r4, #0
	bl sub_08099828
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080931E0
sub_080931E0: @ 0x080931E0
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	bl sub_0808E644
	adds r1, r4, #0
	bl sub_08098E74
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080931F8
sub_080931F8: @ 0x080931F8
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r4, r0, #0
	adds r6, r1, #0
	ldr r0, [sp, #0x20]
	lsls r2, r2, #0x10
	lsrs r7, r2, #0x10
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov r8, r3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov sb, r0
	ldr r0, _08093258 @ =0x08D8C9C0
	bl Proc_Find
	adds r5, r0, #0
	lsls r1, r4, #2
	adds r0, #0x40
	adds r0, r0, r1
	ldr r0, [r0]
	cmp r0, r6
	beq _0809325C
	cmp r0, #0
	beq _08093236
	adds r0, r4, #0
	bl EndFaceById
_08093236:
	cmp r6, #0
	beq _08093278
	adds r0, r6, #0
	bl GetUnitPortraitId
	adds r1, r0, #0
	lsls r2, r7, #0x10
	asrs r2, r2, #0x10
	mov r0, r8
	lsls r3, r0, #0x10
	asrs r3, r3, #0x10
	mov r0, sb
	str r0, [sp]
	adds r0, r4, #0
	bl sub_08007A5C
	b _08093278
	.align 2, 0
_08093258: .4byte 0x08D8C9C0
_0809325C:
	cmp r6, #0
	beq _08093278
	lsls r1, r7, #0x10
	asrs r1, r1, #0x10
	mov r0, r8
	lsls r2, r0, #0x10
	asrs r2, r2, #0x10
	adds r0, r4, #0
	bl sub_08007B80
	adds r0, r4, #0
	mov r1, sb
	bl sub_08006C14
_08093278:
	lsls r1, r4, #2
	adds r0, r5, #0
	adds r0, #0x40
	adds r0, r0, r1
	str r6, [r0]
	lsls r1, r4, #1
	adds r0, r5, #0
	adds r0, #0x34
	adds r0, r0, r1
	strh r7, [r0]
	adds r0, r5, #0
	adds r0, #0x38
	adds r0, r0, r1
	mov r2, r8
	strh r2, [r0]
	adds r0, r5, #0
	adds r0, #0x3c
	adds r0, r0, r1
	mov r1, sb
	strh r1, [r0]
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080932B0
sub_080932B0: @ 0x080932B0
	push {lr}
	sub sp, #4
	movs r1, #0
	str r1, [sp]
	movs r2, #0
	movs r3, #0
	bl sub_080931F8
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080932C8
sub_080932C8: @ 0x080932C8
	push {lr}
	adds r1, r0, #0
	ldr r0, _080932D8 @ =0x08D8C9C0
	bl Proc_StartBlocking
	pop {r1}
	bx r1
	.align 2, 0
_080932D8: .4byte 0x08D8C9C0

	thumb_func_start sub_080932DC
sub_080932DC: @ 0x080932DC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r6, r0, #0
	adds r4, r1, #0
	mov r8, r2
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	str r3, [sp]
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #0x14
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #2
	ldr r1, [sp]
	ands r0, r1
	cmp r0, #0
	beq _0809330E
	bl ClearIcons
_0809330E:
	mov r0, r8
	cmp r0, #0
	beq _080933DE
	bl GetUnitItemCount
	str r0, [sp, #4]
	movs r1, #0
	mov sb, r1
	cmp sb, r0
	bge _080933DE
	adds r0, r4, #0
	adds r0, #0x18
	str r0, [sp, #8]
	adds r1, r4, #6
	str r1, [sp, #0xc]
	adds r4, #2
	mov sl, r4
_08093330:
	mov r1, sb
	lsls r0, r1, #1
	mov r1, r8
	adds r1, #0x1e
	adds r1, r1, r0
	ldrh r5, [r1]
	movs r0, #4
	ldr r1, [sp]
	ands r0, r1
	cmp r0, #0
	beq _08093350
	mov r0, r8
	adds r1, r5, #0
	bl sub_080284C8
	b _08093358
_08093350:
	mov r0, r8
	adds r1, r5, #0
	bl sub_08016F04
_08093358:
	movs r7, #0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08093362
	movs r7, #1
_08093362:
	movs r0, #1
	ldr r1, [sp]
	ands r0, r1
	cmp r0, #0
	bne _08093390
	adds r0, r6, #0
	bl ClearText
	adds r0, r6, #0
	adds r1, r7, #0
	bl Text_SetColor
	adds r0, r6, #0
	movs r1, #0
	bl Text_SetCursor
	adds r0, r5, #0
	bl GetItemName
	adds r1, r0, #0
	adds r0, r6, #0
	bl Text_DrawString
_08093390:
	adds r0, r5, #0
	bl sub_08017808
	adds r1, r0, #0
	mov r0, sl
	movs r2, #0x80
	lsls r2, r2, #7
	bl PutIcon
	adds r0, r6, #0
	ldr r1, [sp, #0xc]
	bl PutText
	movs r4, #1
	cmp r7, #0
	bne _080933B2
	movs r4, #2
_080933B2:
	adds r0, r5, #0
	bl GetItemUses
	adds r2, r0, #0
	ldr r0, [sp, #8]
	adds r1, r4, #0
	bl sub_08006074
	adds r6, #8
	ldr r0, [sp, #8]
	adds r0, #0x80
	str r0, [sp, #8]
	ldr r1, [sp, #0xc]
	adds r1, #0x80
	str r1, [sp, #0xc]
	movs r0, #0x80
	add sl, r0
	movs r1, #1
	add sb, r1
	ldr r0, [sp, #4]
	cmp sb, r0
	blt _08093330
_080933DE:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080933F0
sub_080933F0: @ 0x080933F0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r0, #0x29
	ldrb r0, [r0]
	movs r1, #3
	bl __udivsi3
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x14
	adds r6, r4, #0
	bl sub_0808E664
	subs r0, #1
	movs r1, #3
	bl __divsi3
	lsls r0, r0, #4
	ldrh r2, [r5, #0x32]
	subs r1, r4, r2
	cmp r1, #0x20
	ble _0809342A
	cmp r4, r0
	bne _08093424
	adds r0, r4, #0
	subs r0, #0x30
	b _0809343A
_08093424:
	adds r0, r4, #0
	subs r0, #0x20
	b _0809343A
_0809342A:
	cmp r1, #0xf
	bgt _0809343C
	cmp r4, #0
	bne _08093436
	strh r4, [r5, #0x32]
	b _0809343C
_08093436:
	adds r0, r6, #0
	subs r0, #0x10
_0809343A:
	strh r0, [r5, #0x32]
_0809343C:
	ldr r1, _08093474 @ =0x0000FFD8
	ldrh r2, [r5, #0x32]
	subs r2, #4
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl SetBgOffset
	ldrh r4, [r5, #0x32]
	bl sub_0808E664
	subs r0, #1
	movs r1, #3
	bl __divsi3
	adds r2, r0, #0
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #6
	adds r1, r4, #0
	movs r3, #4
	bl sub_08090E04
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08093474: .4byte 0x0000FFD8

	thumb_func_start sub_08093478
sub_08093478: @ 0x08093478
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r4, r2, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov sl, r1
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r0, r1, #1
	add r0, sl
	str r0, [sp]
	movs r1, #0xf
	bl __modsi3
	lsls r0, r0, #3
	ldr r1, _08093538 @ =0x020129A8
	adds r6, r0, r1
	movs r0, #0
	mov r8, r0
	lsls r4, r4, #0x18
	asrs r4, r4, #0x18
	mov sb, r4
_080934AC:
	mov r1, sb
	cmp r1, #0
	bne _080934B8
	adds r0, r6, #0
	bl ClearText
_080934B8:
	ldr r4, [sp]
	add r4, r8
	bl sub_0808E664
	cmp r4, r0
	bge _08093514
	mov r0, r8
	movs r1, #3
	bl __modsi3
	lsls r7, r0, #3
	mov r0, sl
	lsls r5, r0, #1
	movs r0, #0x1f
	ands r5, r0
	mov r1, sb
	cmp r1, #0
	bne _08093504
	adds r0, r4, #0
	bl sub_0808E644
	adds r4, r0, #0
	adds r0, r6, #0
	movs r1, #0
	bl Text_SetCursor
	adds r0, r6, #0
	movs r1, #0
	bl Text_SetColor
	ldr r0, [r4]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r1, r0, #0
	adds r0, r6, #0
	bl Text_DrawString
_08093504:
	lsls r1, r5, #5
	adds r1, r1, r7
	lsls r1, r1, #1
	ldr r0, _0809353C @ =gBg2Tm
	adds r1, r1, r0
	adds r0, r6, #0
	bl PutText
_08093514:
	adds r6, #8
	movs r0, #1
	add r8, r0
	mov r1, r8
	cmp r1, #2
	ble _080934AC
	movs r0, #4
	bl EnableBgSync
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08093538: .4byte 0x020129A8
_0809353C: .4byte gBg2Tm

	thumb_func_start sub_08093540
sub_08093540: @ 0x08093540
	cmp r0, #0x60
	bhi _0809354C
	cmp r1, #0x1f
	ble _0809354C
	movs r0, #1
	b _0809354E
_0809354C:
	movs r0, #0
_0809354E:
	bx lr

	thumb_func_start sub_08093550
sub_08093550: @ 0x08093550
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	movs r6, #0
	b _080935B0
_08093558:
	adds r0, r6, #0
	movs r1, #3
	bl __modsi3
	lsls r5, r0, #6
	adds r0, r6, #0
	movs r1, #3
	bl __divsi3
	lsls r0, r0, #4
	ldrh r1, [r7, #0x32]
	subs r4, r0, r1
	adds r0, r4, #0
	adds r0, #0x14
	cmp r0, #0x44
	bhi _080935AE
	adds r0, r7, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _08093594
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_08093540
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080935AE
_08093594:
	adds r5, #0x18
	adds r4, #4
	movs r0, #0xff
	ands r4, r0
	adds r0, r6, #0
	bl sub_0808E644
	adds r3, r0, #0
	movs r0, #0
	adds r1, r5, #0
	adds r2, r4, #0
	bl sub_08026540
_080935AE:
	adds r6, #1
_080935B0:
	bl sub_0808E664
	cmp r6, r0
	blt _08093558
	bl sub_080259A4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080935C4
sub_080935C4: @ 0x080935C4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	str r0, [sp, #4]
	mov sl, r1
	str r2, [sp, #8]
	str r3, [sp, #0xc]
	cmp r2, #0
	bgt _080935DE
	b _080937BE
_080935DE:
	cmp r3, #0
	bgt _080935E4
	b _080937BE
_080935E4:
	ldr r5, _080937D0 @ =0x08BFF760
	ldr r0, [sp, #0x3c]
	str r0, [sp]
	movs r0, #4
	ldr r1, [sp, #4]
	mov r2, sl
	adds r3, r5, #0
	bl sub_080068C4
	ldr r1, [sp, #8]
	lsls r1, r1, #3
	mov sb, r1
	ldr r4, [sp, #4]
	add r4, sb
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, r2
	ldr r3, [sp, #0x3c]
	str r3, [sp]
	movs r0, #4
	mov r2, sl
	adds r3, r5, #0
	bl sub_080068C4
	movs r0, #0xc0
	lsls r0, r0, #6
	adds r4, r4, r0
	ldr r1, [sp, #0xc]
	lsls r1, r1, #3
	mov r8, r1
	mov r6, sl
	add r6, r8
	ldr r2, [sp, #0x3c]
	str r2, [sp]
	movs r0, #4
	adds r1, r4, #0
	adds r2, r6, #0
	adds r3, r5, #0
	bl sub_080068C4
	ldr r3, [sp, #4]
	movs r0, #0x80
	lsls r0, r0, #6
	adds r1, r3, r0
	ldr r2, [sp, #0x3c]
	str r2, [sp]
	movs r0, #4
	adds r2, r6, #0
	adds r3, r5, #0
	bl sub_080068C4
	movs r5, #1
	mov r3, sb
	str r3, [sp, #0x18]
	mov sb, r8
	ldr r0, [sp, #8]
	subs r0, #1
	str r0, [sp, #0x10]
	cmp r5, r0
	bge _08093698
	ldr r1, _080937D4 @ =0x08BFF798
	mov r8, r1
	ldr r7, [sp, #0x3c]
	adds r7, #1
	ldr r2, [sp, #4]
	ldr r3, _080937D8 @ =0x00002008
	adds r6, r2, r3
	adds r4, r2, #0
	adds r4, #8
_0809366E:
	str r7, [sp]
	movs r0, #4
	adds r1, r4, #0
	mov r2, sl
	mov r3, r8
	bl sub_080068C4
	str r7, [sp]
	movs r0, #4
	adds r1, r6, #0
	mov r2, sl
	add r2, sb
	mov r3, r8
	bl sub_080068C4
	adds r6, #0x10
	adds r4, #0x10
	adds r5, #2
	ldr r0, [sp, #0x10]
	cmp r5, r0
	blt _0809366E
_08093698:
	ldr r1, [sp, #8]
	cmp r5, r1
	bge _080936E0
	ldr r2, _080937D0 @ =0x08BFF760
	mov r8, r2
	ldr r7, [sp, #0x3c]
	adds r7, #1
	lsls r1, r5, #3
	movs r3, #0x80
	lsls r3, r3, #6
	adds r0, r1, r3
	ldr r2, [sp, #4]
	adds r6, r0, r2
	adds r4, r1, r2
	ldr r3, [sp, #8]
	subs r5, r3, r5
_080936B8:
	str r7, [sp]
	movs r0, #4
	adds r1, r4, #0
	mov r2, sl
	mov r3, r8
	bl sub_080068C4
	str r7, [sp]
	movs r0, #4
	adds r1, r6, #0
	mov r2, sl
	add r2, sb
	mov r3, r8
	bl sub_080068C4
	adds r6, #8
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bne _080936B8
_080936E0:
	ldr r0, [sp, #0xc]
	cmp r0, #1
	ble _08093724
	ldr r7, _080937D0 @ =0x08BFF760
	ldr r5, [sp, #0x3c]
	adds r5, #3
	mov r4, sl
	adds r4, #8
	ldr r1, [sp, #4]
	ldr r2, [sp, #0x18]
	adds r1, r1, r2
	mov r8, r1
	adds r6, r0, #0
	subs r6, #1
_080936FC:
	str r5, [sp]
	movs r0, #4
	ldr r1, [sp, #4]
	adds r2, r4, #0
	adds r3, r7, #0
	bl sub_080068C4
	str r5, [sp]
	movs r0, #4
	movs r1, #0x80
	lsls r1, r1, #5
	add r1, r8
	adds r2, r4, #0
	adds r3, r7, #0
	bl sub_080068C4
	adds r4, #8
	subs r6, #1
	cmp r6, #0
	bne _080936FC
_08093724:
	movs r6, #1
	ldr r3, [sp, #0xc]
	cmp r6, r3
	bge _080937BE
	ldr r0, [sp, #8]
	subs r0, #3
	mov sb, r0
	ldr r1, [sp, #0x3c]
	adds r1, #4
	mov r8, r1
_08093738:
	movs r5, #1
	adds r2, r6, #1
	str r2, [sp, #0x14]
	cmp r5, sb
	bge _08093762
	ldr r4, [sp, #4]
	adds r4, #8
	lsls r7, r6, #3
_08093748:
	mov r3, r8
	str r3, [sp]
	movs r0, #4
	adds r1, r4, #0
	mov r3, sl
	adds r2, r3, r7
	ldr r3, _080937DC @ =0x08BFF7B8
	bl sub_080068C4
	adds r4, #0x20
	adds r5, #4
	cmp r5, sb
	blt _08093748
_08093762:
	ldr r0, [sp, #0x10]
	cmp r5, r0
	bge _0809378C
	lsls r0, r5, #3
	ldr r1, [sp, #4]
	adds r4, r0, r1
	lsls r7, r6, #3
_08093770:
	mov r2, r8
	str r2, [sp]
	movs r0, #4
	adds r1, r4, #0
	mov r3, sl
	adds r2, r3, r7
	ldr r3, _080937D4 @ =0x08BFF798
	bl sub_080068C4
	adds r4, #0x10
	adds r5, #2
	ldr r0, [sp, #0x10]
	cmp r5, r0
	blt _08093770
_0809378C:
	ldr r1, [sp, #8]
	cmp r5, r1
	bge _080937B6
	lsls r0, r5, #3
	ldr r2, [sp, #4]
	adds r4, r0, r2
	lsls r6, r6, #3
	subs r5, r1, r5
_0809379C:
	mov r3, r8
	str r3, [sp]
	movs r0, #4
	adds r1, r4, #0
	mov r3, sl
	adds r2, r3, r6
	ldr r3, _080937D0 @ =0x08BFF760
	bl sub_080068C4
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bne _0809379C
_080937B6:
	ldr r6, [sp, #0x14]
	ldr r0, [sp, #0xc]
	cmp r6, r0
	blt _08093738
_080937BE:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080937D0: .4byte 0x08BFF760
_080937D4: .4byte 0x08BFF798
_080937D8: .4byte 0x00002008
_080937DC: .4byte 0x08BFF7B8

	thumb_func_start sub_080937E0
sub_080937E0: @ 0x080937E0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	ldrh r0, [r5, #0x32]
	lsrs r4, r0, #4
	adds r0, r4, #4
	cmp r4, r0
	bge _0809380C
	lsls r6, r1, #0x18
_080937F4:
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	adds r0, r5, #0
	asrs r2, r6, #0x18
	bl sub_08093478
	adds r4, #1
	ldrh r1, [r5, #0x32]
	lsrs r0, r1, #4
	adds r0, #4
	cmp r4, r0
	blt _080937F4
_0809380C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08093814
sub_08093814: @ 0x08093814
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	bl GetUnitItemCount
	adds r7, r0, #0
	bl sub_0809158C
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	movs r4, #0
	cmp r4, r7
	bge _0809384A
	cmp r6, #0x63
	bgt _0809384A
_08093830:
	ldrh r0, [r5, #0x1e]
	bl AddItemToConvoy
	adds r0, r5, #0
	movs r1, #0
	bl UnitRemoveItem
	adds r4, #1
	cmp r4, r7
	bge _0809384A
	adds r0, r4, r6
	cmp r0, #0x63
	ble _08093830
_0809384A:
	cmp r4, #0
	bgt _08093852
	movs r0, #0
	b _08093854
_08093852:
	movs r0, #1
_08093854:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0809385C
sub_0809385C: @ 0x0809385C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r0, r1, #0
	movs r7, #0
	lsls r1, r0, #1
	mov r8, r1
	movs r1, #7
	bl __modsi3
	mov sl, r0
	movs r2, #0
	mov sb, r2
_0809387C:
	mov r0, r8
	adds r4, r0, r7
	bl sub_0808E664
	cmp r4, r0
	bge _080938F6
	adds r0, r4, #0
	bl sub_0808E644
	adds r5, r0, #0
	movs r6, #0
	bl sub_0803DEC4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080938AE
	ldr r0, [r5]
	ldrb r0, [r0, #4]
	bl sub_0808E6A4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080938AE
	movs r6, #4
	b _080938BA
_080938AE:
	ldr r0, [r5, #0xc]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	beq _080938BA
	movs r6, #1
_080938BA:
	mov r1, sl
	lsls r4, r1, #1
	adds r4, r4, r7
	lsls r4, r4, #3
	ldr r0, _08093918 @ =0x02012AA0
	adds r4, r4, r0
	adds r0, r4, #0
	bl ClearText
	ldr r0, [r5]
	ldrh r0, [r0]
	bl DecodeMsg
	movs r1, #0x1f
	mov r2, r8
	ands r1, r2
	lsls r1, r1, #5
	adds r1, #0x10
	add r1, sb
	lsls r1, r1, #1
	ldr r2, _0809391C @ =gBg2Tm
	adds r1, r1, r2
	movs r2, #0
	str r2, [sp]
	str r0, [sp, #4]
	adds r0, r4, #0
	adds r2, r6, #0
	movs r3, #0
	bl PutDrawText
_080938F6:
	movs r0, #7
	add sb, r0
	adds r7, #1
	cmp r7, #1
	ble _0809387C
	movs r0, #4
	bl EnableBgSync
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08093918: .4byte 0x02012AA0
_0809391C: .4byte gBg2Tm

	thumb_func_start sub_08093920
sub_08093920: @ 0x08093920
	push {lr}
	lsls r0, r0, #1
	movs r1, #0x1f
	ands r0, r1
	lsls r0, r0, #6
	ldr r1, _08093944 @ =0x02023C80
	adds r0, r0, r1
	movs r1, #0xd
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #4
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
_08093944: .4byte 0x02023C80

	thumb_func_start sub_08093948
sub_08093948: @ 0x08093948
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	movs r6, #0
	b _08093984
_08093952:
	asrs r0, r6, #1
	lsls r0, r0, #4
	ldrh r1, [r7, #0x30]
	subs r5, r0, r1
	adds r0, r5, #0
	adds r0, #0xf
	cmp r0, #0x5f
	bhi _08093982
	movs r0, #1
	ands r0, r6
	lsls r4, r0, #3
	subs r4, r4, r0
	lsls r4, r4, #3
	adds r4, #0x70
	adds r5, #0x18
	adds r0, r6, #0
	bl sub_0808E644
	adds r3, r0, #0
	movs r0, #0
	adds r1, r4, #0
	adds r2, r5, #0
	bl sub_08026540
_08093982:
	adds r6, #1
_08093984:
	bl sub_0808E664
	cmp r6, r0
	blt _08093952
	movs r0, #0xf
	ldrh r2, [r7, #0x30]
	ands r0, r2
	cmp r0, #0
	beq _08093A2C
	ldr r0, _08093A28 @ =gDispIo
	mov ip, r0
	movs r0, #0x20
	mov r1, ip
	ldrb r1, [r1, #1]
	orrs r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r2, ip
	strb r0, [r2, #1]
	mov r0, ip
	adds r0, #0x2d
	movs r2, #0
	strb r2, [r0]
	adds r0, #4
	strb r2, [r0]
	subs r0, #5
	movs r3, #0xf0
	strb r3, [r0]
	mov r1, ip
	adds r1, #0x30
	movs r0, #0x18
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x2f
	strb r2, [r0]
	adds r1, #3
	movs r0, #0x78
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x2e
	strb r3, [r0]
	subs r1, #1
	movs r0, #0xa0
	strb r0, [r1]
	mov r6, ip
	adds r6, #0x34
	movs r2, #1
	ldrb r0, [r6]
	orrs r0, r2
	movs r4, #2
	orrs r0, r4
	movs r5, #5
	rsbs r5, r5, #0
	ands r0, r5
	movs r3, #8
	orrs r0, r3
	movs r1, #0x11
	rsbs r1, r1, #0
	ands r0, r1
	strb r0, [r6]
	mov r1, ip
	adds r1, #0x35
	ldrb r0, [r1]
	orrs r0, r2
	orrs r0, r4
	ands r0, r5
	orrs r0, r3
	movs r5, #0x10
	orrs r0, r5
	strb r0, [r1]
	adds r1, #1
	ldrb r0, [r1]
	orrs r2, r0
	orrs r2, r4
	movs r0, #4
	orrs r2, r0
	orrs r2, r3
	orrs r2, r5
	strb r2, [r1]
	b _08093A42
	.align 2, 0
_08093A28: .4byte gDispIo
_08093A2C:
	ldr r2, _08093A88 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
_08093A42:
	ldr r3, _08093A8C @ =0x08D8CDA8
	movs r4, #0x40
	str r4, [sp]
	movs r0, #4
	movs r1, #0x80
	movs r2, #0x8e
	bl sub_080068C4
	adds r1, r7, #0
	adds r1, #0x37
	ldrb r0, [r1]
	cmp r0, #0
	beq _08093A60
	adds r0, #1
	strb r0, [r1]
_08093A60:
	ldrb r1, [r1]
	lsrs r0, r1, #2
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	bne _08093AA2
	bl sub_0803DEC4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08093A94
	ldr r3, _08093A90 @ =0x08D8CDD0
	str r4, [sp]
	movs r0, #4
	movs r1, #0x80
	movs r2, #0x7e
	bl sub_080068C4
	b _08093AA2
	.align 2, 0
_08093A88: .4byte gDispIo
_08093A8C: .4byte 0x08D8CDA8
_08093A90: .4byte 0x08D8CDD0
_08093A94:
	ldr r3, _08093AB0 @ =0x08D8CDBC
	str r4, [sp]
	movs r0, #4
	movs r1, #0x80
	movs r2, #0x7e
	bl sub_080068C4
_08093AA2:
	bl sub_080259A4
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08093AB0: .4byte 0x08D8CDBC

	thumb_func_start sub_08093AB4
sub_08093AB4: @ 0x08093AB4
	push {r4, r5, lr}
	bl ResetText
	ldr r5, _08093B08 @ =0x02012AA0
	movs r4, #0xd
_08093ABE:
	adds r0, r5, #0
	movs r1, #5
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _08093ABE
	ldr r5, _08093B0C @ =0x02012B10
	movs r4, #4
_08093AD2:
	adds r0, r5, #0
	movs r1, #7
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _08093AD2
	ldr r4, _08093B10 @ =0x02012B38
	adds r0, r4, #0
	movs r1, #7
	bl InitText
	adds r0, r4, #0
	adds r0, #8
	movs r1, #0xa
	bl InitText
	adds r4, #0x10
	adds r0, r4, #0
	movs r1, #0xb
	bl InitText
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08093B08: .4byte 0x02012AA0
_08093B0C: .4byte 0x02012B10
_08093B10: .4byte 0x02012B38

	thumb_func_start sub_08093B14
sub_08093B14: @ 0x08093B14
	push {lr}
	bl InitIcons
	bl sub_08015A0C
	movs r0, #4
	bl ApplyIconPalettes
	movs r0, #0xc0
	lsls r0, r0, #7
	movs r1, #0xf
	bl sub_0808E404
	ldr r0, _08093B4C @ =gBg1Tm
	ldr r1, _08093B50 @ =0x0841F9F4
	movs r2, #0xf3
	lsls r2, r2, #8
	bl TmApplyTsa_thm
	ldr r0, _08093B54 @ =0x084292A0
	ldr r1, _08093B58 @ =0x06010800
	bl sub_08013688
	bl EnablePalSync
	pop {r0}
	bx r0
	.align 2, 0
_08093B4C: .4byte gBg1Tm
_08093B50: .4byte 0x0841F9F4
_08093B54: .4byte 0x084292A0
_08093B58: .4byte 0x06010800

	thumb_func_start sub_08093B5C
sub_08093B5C: @ 0x08093B5C
	push {r4, lr}
	sub sp, #8
	adds r4, r1, #0
	bl sub_080AA0C0
	adds r0, r4, #0
	bl sub_080AA0E4
	bl sub_0803DEC4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08093B90
	movs r2, #0x90
	lsls r2, r2, #3
	movs r0, #4
	str r0, [sp]
	movs r0, #0xc0
	lsls r0, r0, #4
	str r0, [sp, #4]
	movs r0, #0
	movs r1, #4
	movs r3, #0xc
	bl sub_080AA118
	b _08093BA8
_08093B90:
	movs r2, #0x91
	lsls r2, r2, #3
	movs r0, #3
	str r0, [sp]
	movs r0, #0xc0
	lsls r0, r0, #4
	str r0, [sp, #4]
	movs r0, #0
	movs r1, #4
	movs r3, #0xc
	bl sub_080AA118
_08093BA8:
	movs r2, #0x90
	lsls r2, r2, #3
	movs r0, #4
	str r0, [sp]
	movs r0, #0xc0
	lsls r0, r0, #4
	str r0, [sp, #4]
	movs r0, #1
	movs r1, #0x6c
	movs r3, #0x10
	bl sub_080AA118
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_08093BC8
sub_08093BC8: @ 0x08093BC8
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	bl ApplyUnitSpritePalettes
	movs r0, #0
	str r0, [sp]
	ldr r1, _08093BF8 @ =0x02022BC0
	ldr r2, _08093BFC @ =0x01000008
	mov r0, sp
	bl CpuFastSet
	bl sub_0808EC70
	ldr r0, [r4, #0x14]
	bl sub_0808ED24
	bl sub_0808ECDC
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08093BF8: .4byte 0x02022BC0
_08093BFC: .4byte 0x01000008

	thumb_func_start sub_08093C00
sub_08093C00: @ 0x08093C00
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	sub sp, #8
	adds r5, r0, #0
	ldr r4, _08093CB8 @ =0x02022D2A
	adds r0, r4, #0
	movs r1, #6
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	adds r0, r5, #0
	bl GetUnitPortraitId
	adds r1, r4, #0
	subs r1, #0x88
	movs r2, #0x9c
	lsls r2, r2, #2
	movs r3, #0
	mov sb, r3
	str r3, [sp]
	movs r3, #2
	bl sub_08006E10
	ldr r0, _08093CBC @ =0x02012B38
	mov r8, r0
	bl ClearText
	ldr r0, [r5]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r1, r0, #0
	movs r0, #0x38
	bl GetStringTextCenteredPos
	adds r6, r0, #0
	ldr r0, [r5]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r1, r4, #0
	subs r1, #0x80
	mov r2, sb
	str r2, [sp]
	str r0, [sp, #4]
	mov r0, r8
	movs r2, #0
	adds r3, r6, #0
	bl PutDrawText
	adds r0, r4, #0
	movs r1, #3
	movs r2, #0x24
	bl sub_08005FEC
	adds r0, r4, #2
	movs r1, #3
	movs r2, #0x25
	bl sub_08005FEC
	adds r0, r4, #0
	adds r0, #8
	movs r1, #3
	movs r2, #0x1d
	bl sub_08005FEC
	adds r0, r4, #6
	movs r2, #8
	ldrsb r2, [r5, r2]
	movs r1, #2
	bl sub_08006074
	adds r4, #0xc
	ldrb r2, [r5, #9]
	adds r0, r4, #0
	movs r1, #2
	bl sub_08006074
	movs r0, #1
	bl EnableBgSync
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08093CB8: .4byte 0x02022D2A
_08093CBC: .4byte 0x02012B38

	thumb_func_start sub_08093CC0
sub_08093CC0: @ 0x08093CC0
	push {lr}
	ldrh r0, [r0, #0x2e]
	bl sub_0808E644
	bl sub_08093C00
	pop {r0}
	bx r0

	thumb_func_start sub_08093CD0
sub_08093CD0: @ 0x08093CD0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r7, r0, #0
	bl InitIcons
	ldr r4, _08093DBC @ =0x02022DA2
	adds r0, r4, #0
	movs r1, #0xb
	movs r2, #0xa
	movs r3, #0
	bl TmFillRect_thm
	adds r0, r7, #0
	bl GetUnitItemCount
	str r0, [sp, #8]
	movs r0, #0
	mov r8, r0
	ldr r2, [sp, #8]
	cmp r8, r2
	bge _08093DA4
	movs r0, #0x14
	adds r0, r0, r4
	mov sl, r0
	mov sb, r4
	movs r2, #0xa0
	lsls r2, r2, #1
	str r2, [sp, #0xc]
_08093D10:
	mov r0, r8
	lsls r1, r0, #1
	adds r0, r7, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r4, [r0]
	adds r0, r4, #0
	bl sub_08017808
	adds r1, r0, #0
	mov r0, sb
	movs r2, #0x80
	lsls r2, r2, #7
	bl PutIcon
	mov r2, r8
	lsls r1, r2, #3
	ldr r0, _08093DC0 @ =0x02012B10
	adds r5, r1, r0
	adds r0, r5, #0
	bl ClearText
	adds r0, r7, #0
	adds r1, r4, #0
	bl sub_08016F04
	movs r6, #0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08093D4E
	movs r6, #1
_08093D4E:
	adds r0, r4, #0
	bl GetItemName
	ldr r1, _08093DC4 @ =0x02022C62
	adds r1, #4
	ldr r2, [sp, #0xc]
	adds r1, r2, r1
	movs r2, #0
	str r2, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	adds r2, r6, #0
	movs r3, #0
	bl PutDrawText
	adds r0, r7, #0
	adds r1, r4, #0
	bl sub_08016F04
	lsls r0, r0, #0x18
	movs r5, #1
	cmp r0, #0
	beq _08093D7E
	movs r5, #2
_08093D7E:
	adds r0, r4, #0
	bl GetItemUses
	adds r2, r0, #0
	mov r0, sl
	adds r1, r5, #0
	bl sub_08006074
	movs r0, #0x80
	add sl, r0
	add sb, r0
	ldr r2, [sp, #0xc]
	adds r2, #0x80
	str r2, [sp, #0xc]
	movs r0, #1
	add r8, r0
	ldr r2, [sp, #8]
	cmp r8, r2
	blt _08093D10
_08093DA4:
	movs r0, #1
	bl EnableBgSync
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08093DBC: .4byte 0x02022DA2
_08093DC0: .4byte 0x02012B10
_08093DC4: .4byte 0x02022C62

	thumb_func_start sub_08093DC8
sub_08093DC8: @ 0x08093DC8
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r7, r0, #0
	lsls r1, r1, #0x18
	asrs r6, r1, #0x18
	cmp r6, #0
	bne _08093E04
	ldr r4, _08093E88 @ =0x02012B48
	adds r0, r4, #0
	bl ClearText
	ldr r5, _08093E8C @ =0x02022CBC
	str r6, [sp]
	ldr r0, _08093E90 @ =0x0842CFC4
	str r0, [sp, #4]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	str r6, [sp]
	ldr r0, _08093E94 @ =0x0842CFCC
	str r0, [sp, #4]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #0
	movs r3, #0x20
	bl PutDrawText
_08093E04:
	ldr r6, _08093E98 @ =0x02022CC0
	adds r0, r6, #0
	movs r1, #1
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	adds r0, r6, #2
	adds r4, r7, #0
	adds r4, #0x29
	adds r5, r7, #0
	adds r5, #0x2a
	movs r1, #2
	ldrb r2, [r4]
	ldrb r3, [r5]
	cmp r2, r3
	bne _08093E28
	movs r1, #1
_08093E28:
	ldrb r7, [r5]
	ldrb r3, [r4]
	subs r2, r7, r3
	bl sub_08006074
	adds r0, r6, #0
	adds r0, #0x12
	movs r1, #4
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	adds r0, r6, #0
	adds r0, #0x14
	movs r1, #2
	ldrb r7, [r4]
	ldrb r2, [r5]
	cmp r7, r2
	bne _08093E50
	movs r1, #4
_08093E50:
	ldrb r2, [r4]
	bl sub_08006074
	adds r0, r6, #0
	adds r0, #0x16
	movs r1, #0
	movs r2, #0x16
	bl sub_08005FEC
	adds r0, r6, #0
	adds r0, #0x1a
	movs r1, #2
	ldrb r4, [r4]
	ldrb r3, [r5]
	cmp r4, r3
	bne _08093E72
	movs r1, #4
_08093E72:
	ldrb r2, [r5]
	bl sub_08006074
	movs r0, #1
	bl EnableBgSync
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08093E88: .4byte 0x02012B48
_08093E8C: .4byte 0x02022CBC
_08093E90: .4byte 0x0842CFC4
_08093E94: .4byte 0x0842CFCC
_08093E98: .4byte 0x02022CC0

	thumb_func_start sub_08093E9C
sub_08093E9C: @ 0x08093E9C
	push {r4, lr}
	adds r4, r0, #0
	adds r2, r1, #0
	adds r1, r4, #0
	adds r1, #0x2a
	adds r3, r4, #0
	adds r3, #0x29
	ldrb r0, [r3]
	ldrb r1, [r1]
	cmp r1, r0
	bls _08093EF0
	adds r0, #1
	strb r0, [r3]
	ldr r0, [r2, #0xc]
	movs r1, #0xb
	rsbs r1, r1, #0
	ands r0, r1
	str r0, [r2, #0xc]
	ldr r0, [r2]
	ldrb r0, [r0, #4]
	bl sub_0808E5DC
	ldr r0, _08093EE8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08093EDA
	ldr r0, _08093EEC @ =0x0000038A
	bl m4aSongNumStart
_08093EDA:
	ldrh r0, [r4, #0x2e]
	lsrs r1, r0, #1
	adds r0, r4, #0
	bl sub_0809385C
	movs r0, #1
	b _08093F06
	.align 2, 0
_08093EE8: .4byte gPlaySt
_08093EEC: .4byte 0x0000038A
_08093EF0:
	ldr r0, _08093F0C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08093F04
	movs r0, #0xe3
	lsls r0, r0, #2
	bl m4aSongNumStart
_08093F04:
	movs r0, #0
_08093F06:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08093F0C: .4byte gPlaySt

	thumb_func_start sub_08093F10
sub_08093F10: @ 0x08093F10
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	bl sub_0808E6A4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08093F68
	adds r1, r5, #0
	adds r1, #0x29
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	ldr r0, [r4, #0xc]
	movs r1, #0xa
	orrs r0, r1
	str r0, [r4, #0xc]
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	bl sub_0808E604
	ldr r0, _08093F60 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08093F50
	ldr r0, _08093F64 @ =0x0000038B
	bl m4aSongNumStart
_08093F50:
	ldrh r0, [r5, #0x2e]
	lsrs r1, r0, #1
	adds r0, r5, #0
	bl sub_0809385C
	movs r0, #1
	b _08093F7E
	.align 2, 0
_08093F60: .4byte gPlaySt
_08093F64: .4byte 0x0000038B
_08093F68:
	ldr r0, _08093F84 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08093F7C
	movs r0, #0xe3
	lsls r0, r0, #2
	bl m4aSongNumStart
_08093F7C:
	movs r0, #0
_08093F7E:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08093F84: .4byte gPlaySt

	thumb_func_start sub_08093F88
sub_08093F88: @ 0x08093F88
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2e]
	bl sub_0808E644
	adds r5, r0, #0
	ldr r1, [r5, #0xc]
	movs r0, #0x80
	lsls r0, r0, #0x12
	ands r0, r1
	cmp r0, #0
	beq _08093FC8
	ldrh r1, [r4, #0x2e]
	movs r2, #1
	ands r2, r1
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, #0x70
	lsrs r1, r1, #1
	lsls r1, r1, #4
	ldrh r2, [r4, #0x30]
	subs r1, r1, r2
	adds r1, #0x18
	ldr r2, _08093FC4 @ =0x000003B6
_08093FBA:
	adds r3, r4, #0
	bl sub_08091664
	b _08094024
	.align 2, 0
_08093FC4: .4byte 0x000003B6
_08093FC8:
	movs r0, #8
	ands r1, r0
	cmp r1, #0
	beq _08094012
	bl sub_0803DEC4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08094008
	adds r0, r5, #0
	bl sub_080916F4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08094008
	ldrh r1, [r4, #0x2e]
	movs r2, #1
	ands r2, r1
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, #0x70
	lsrs r1, r1, #1
	lsls r1, r1, #4
	ldrh r2, [r4, #0x30]
	subs r1, r1, r2
	adds r1, #0x18
	ldr r2, _08094004 @ =0x000003B2
	b _08093FBA
	.align 2, 0
_08094004: .4byte 0x000003B2
_08094008:
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_08093E9C
	b _0809401A
_08094012:
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_08093F10
_0809401A:
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08094024
	movs r0, #1
	b _08094026
_08094024:
	movs r0, #0
_08094026:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_0809402C
sub_0809402C: @ 0x0809402C
	push {r4, r5, r6, lr}
	sub sp, #8
	bl sub_0803DEC4
	lsls r0, r0, #0x18
	asrs r6, r0, #0x18
	cmp r6, #0
	bne _08094078
	ldr r0, _08094080 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetROMChapterStruct
	adds r0, #0x8a
	ldrh r0, [r0]
	bl DecodeMsg
	adds r4, r0, #0
	ldr r5, _08094084 @ =0x02012B40
	adds r0, r5, #0
	bl ClearText
	movs r0, #0x50
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r3, r0, #0
	ldr r1, _08094088 @ =0x02023062
	str r6, [sp]
	str r4, [sp, #4]
	adds r0, r5, #0
	movs r2, #0
	bl PutDrawText
	movs r0, #1
	bl EnableBgSync
_08094078:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08094080: .4byte gPlaySt
_08094084: .4byte 0x02012B40
_08094088: .4byte 0x02023062

	thumb_func_start sub_0809408C
sub_0809408C: @ 0x0809408C
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x30]
	lsrs r1, r0, #4
	cmp r1, #0
	ble _080940A0
	ldrh r2, [r4, #0x2e]
	lsrs r0, r2, #1
	cmp r0, r1
	ble _080940B6
_080940A0:
	adds r5, r1, #5
	bl sub_0808E664
	subs r0, #1
	asrs r0, r0, #1
	cmp r5, r0
	bge _080940BA
	ldrh r4, [r4, #0x2e]
	lsrs r0, r4, #1
	cmp r0, r5
	blt _080940BA
_080940B6:
	movs r0, #1
	b _080940BC
_080940BA:
	movs r0, #0
_080940BC:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080940C4
sub_080940C4: @ 0x080940C4
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	bl sub_0809408C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08094106
	ldrh r0, [r5, #0x2e]
	lsrs r4, r0, #1
	ldrh r0, [r5, #0x30]
	lsrs r6, r0, #4
	bl sub_0808E664
	subs r0, #1
	asrs r1, r0, #1
	cmp r4, r6
	bgt _080940F8
	cmp r4, #0
	bne _080940EE
	strh r4, [r5, #0x30]
	b _080940F4
_080940EE:
	subs r0, r4, #1
	lsls r0, r0, #4
	strh r0, [r5, #0x30]
_080940F4:
	cmp r4, r6
	ble _08094106
_080940F8:
	cmp r4, r1
	bne _08094100
	subs r0, r4, #5
	b _08094102
_08094100:
	subs r0, r4, #4
_08094102:
	lsls r0, r0, #4
	strh r0, [r5, #0x30]
_08094106:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_0809410C
sub_0809410C: @ 0x0809410C
	push {r4, r5, lr}
	movs r5, #0
	ldrh r0, [r0, #0x30]
	lsrs r4, r0, #4
	bl sub_0808E664
	subs r0, #1
	asrs r1, r0, #1
	cmp r4, #0
	ble _08094122
	movs r5, #1
_08094122:
	adds r0, r4, #5
	cmp r0, r1
	bge _0809412C
	movs r0, #2
	orrs r5, r0
_0809412C:
	adds r0, r5, #0
	bl sub_080A9C68
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08094138
sub_08094138: @ 0x08094138
	push {r4, lr}
	adds r4, r0, #0
	bl sub_0808EC70
	bl sub_0808E684
	bl sub_0808ECB0
	movs r1, #0
	strh r0, [r4, #0x2e]
	ldr r0, [r4, #0x14]
	adds r0, #0x2a
	ldrb r0, [r0]
	adds r2, r4, #0
	adds r2, #0x2a
	strb r0, [r2]
	ldr r0, [r4, #0x14]
	adds r0, #0x2b
	ldrb r0, [r0]
	subs r2, #1
	strb r0, [r2]
	ldr r0, [r4, #0x14]
	ldrh r0, [r0, #0x3c]
	strh r0, [r4, #0x30]
	ldrh r0, [r4, #0x2e]
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x37
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_08094178
sub_08094178: @ 0x08094178
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _08094350 @ =0x08D8C0A0
	bl InitBgs
	ldr r4, _08094354 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r4, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r4, #1]
	adds r0, r5, #0
	bl sub_080940C4
	ldr r0, _08094358 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _0809435C @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _08094360 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r4, #0xc]
	ands r0, r2
	movs r2, #2
	orrs r0, r2
	strb r0, [r4, #0xc]
	adds r0, r1, #0
	ldrb r3, [r4, #0x10]
	ands r0, r3
	orrs r0, r2
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r4, #0x14]
	movs r0, #3
	ldrb r1, [r4, #0x18]
	orrs r0, r1
	strb r0, [r4, #0x18]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldrh r2, [r5, #0x30]
	subs r2, #0x18
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	bl sub_08093AB4
	bl sub_08093B14
	movs r1, #0x80
	lsls r1, r1, #7
	adds r0, r5, #0
	bl sub_08093B5C
	movs r0, #7
	bl EnableBgSync
	adds r2, r4, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r3, [r2]
	ands r0, r3
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r4, #0
	adds r1, #0x44
	movs r3, #0
	movs r0, #0xe
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x46
	strb r3, [r0]
	ldr r0, _08094364 @ =0x0000FFE0
	ldrh r1, [r4, #0x3c]
	ands r0, r1
	ldr r1, _08094368 @ =0x0000E0FF
	ands r0, r1
	movs r3, #0x80
	lsls r3, r3, #4
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r4, #0x3c]
	movs r1, #0x21
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r3, [r2]
	ands r0, r3
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x3d
	ldrb r2, [r0]
	ands r1, r2
	strb r1, [r0]
	adds r0, r5, #0
	bl sub_08093BC8
	ldr r0, _0809436C @ =sub_08093948
	adds r1, r5, #0
	bl sub_080AA20C
	adds r0, r5, #0
	bl sub_080AA390
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_080AA3B4
	ldrh r1, [r5, #0x2e]
	movs r2, #1
	ands r2, r1
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, #0x70
	lsrs r1, r1, #1
	lsls r1, r1, #4
	ldrh r2, [r5, #0x30]
	subs r2, #0x18
	subs r1, r1, r2
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #7
	bl sub_080AA3F8
	adds r0, r5, #0
	bl sub_08090DD0
	movs r0, #0xe2
	movs r1, #0x20
	bl sub_08090DE4
	ldrh r4, [r5, #0x30]
	bl sub_0808E664
	adds r2, r0, #0
	subs r2, #1
	lsrs r0, r2, #0x1f
	adds r2, r2, r0
	asrs r2, r2, #1
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #0xa
	adds r1, r4, #0
	movs r3, #6
	bl sub_08090E04
	movs r0, #0x80
	lsls r0, r0, #2
	movs r1, #2
	bl sub_08090E38
	movs r0, #0x20
	movs r1, #0x8c
	adds r2, r5, #0
	bl sub_08082D1C
	ldrh r0, [r5, #0x2e]
	bl sub_0808E644
	bl sub_08093CD0
	ldrh r0, [r5, #0x2e]
	bl sub_0808E644
	bl sub_08093C00
	bl sub_0809402C
	movs r4, #0
_0809431C:
	ldrh r3, [r5, #0x30]
	lsrs r1, r3, #4
	adds r1, r1, r4
	adds r0, r5, #0
	bl sub_0809385C
	adds r4, #1
	cmp r4, #5
	ble _0809431C
	adds r0, r5, #0
	movs r1, #0
	bl sub_08093DC8
	adds r0, r5, #0
	bl sub_08005E88
	ldr r0, _08094370 @ =0x06015000
	movs r1, #5
	bl sub_08082F74
	bl sub_0808ED8C
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08094350: .4byte 0x08D8C0A0
_08094354: .4byte gDispIo
_08094358: .4byte gBg0Tm
_0809435C: .4byte gBg1Tm
_08094360: .4byte gBg2Tm
_08094364: .4byte 0x0000FFE0
_08094368: .4byte 0x0000E0FF
_0809436C: .4byte sub_08093948
_08094370: .4byte 0x06015000

	thumb_func_start sub_08094374
sub_08094374: @ 0x08094374
	push {lr}
	bl sub_08090DBC
	bl sub_080AA230
	bl sub_080AA1E8
	bl sub_080AA45C
	bl sub_08082D74
	bl sub_080A9CE4
	bl sub_0808EDB0
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08094398
sub_08094398: @ 0x08094398
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldrh r0, [r5, #0x2c]
	ldrh r1, [r5, #0x2e]
	cmp r0, r1
	beq _080943A6
	b _080945BA
_080943A6:
	ldr r3, _080943F4 @ =gpKeySt
	ldr r1, [r3]
	ldrh r6, [r1, #6]
	adds r2, r5, #0
	adds r2, #0x36
	movs r4, #4
	strb r4, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ldrh r7, [r1, #4]
	ands r0, r7
	cmp r0, #0
	beq _080943C6
	ldrh r6, [r1, #4]
	movs r0, #8
	strb r0, [r2]
_080943C6:
	ldr r0, [r3]
	ldrh r1, [r0, #8]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _08094420
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _080943FC
	ldr r0, _080943F8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _080943EA
	b _08094634
_080943EA:
	movs r0, #0xe3
	lsls r0, r0, #2
	bl m4aSongNumStart
	b _08094634
	.align 2, 0
_080943F4: .4byte gpKeySt
_080943F8: .4byte gPlaySt
_080943FC:
	ldr r0, _08094418 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809440E
	ldr r0, _0809441C @ =0x0000038A
	bl m4aSongNumStart
_0809440E:
	adds r0, r5, #0
	movs r1, #0x63
	bl Proc_Goto
	b _08094634
	.align 2, 0
_08094418: .4byte gPlaySt
_0809441C: .4byte 0x0000038A
_08094420:
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq _0809444C
	ldr r0, _08094444 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809443A
	ldr r0, _08094448 @ =0x0000038A
	bl m4aSongNumStart
_0809443A:
	adds r0, r5, #0
	movs r1, #3
	bl Proc_Goto
	b _08094634
	.align 2, 0
_08094444: .4byte gPlaySt
_08094448: .4byte 0x0000038A
_0809444C:
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08094460
	adds r0, r5, #0
	movs r1, #4
	bl Proc_Goto
	b _08094634
_08094460:
	movs r2, #1
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _08094482
	adds r0, r5, #0
	bl sub_08093F88
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08094478
	b _08094634
_08094478:
	adds r0, r5, #0
	movs r1, #1
	bl sub_08093DC8
	b _08094634
_08094482:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080944B0
	ldr r0, _080944A8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809449C
	ldr r0, _080944AC @ =0x0000038B
	bl m4aSongNumStart
_0809449C:
	adds r0, r5, #0
	movs r1, #0xa
	bl Proc_Goto
	b _08094634
	.align 2, 0
_080944A8: .4byte gPlaySt
_080944AC: .4byte 0x0000038B
_080944B0:
	movs r0, #0x20
	ands r0, r6
	cmp r0, #0
	beq _080944C6
	ldrh r1, [r5, #0x2e]
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _080944C6
	subs r0, r1, #1
	strh r0, [r5, #0x2e]
_080944C6:
	movs r0, #0x10
	ands r0, r6
	cmp r0, #0
	beq _080944EA
	movs r0, #1
	ldrh r1, [r5, #0x2e]
	ands r0, r1
	cmp r0, #0
	bne _080944EA
	ldrh r4, [r5, #0x2e]
	bl sub_0808E664
	subs r0, #1
	cmp r4, r0
	bge _080944EA
	ldrh r0, [r5, #0x2e]
	adds r0, #1
	strh r0, [r5, #0x2e]
_080944EA:
	movs r0, #0x40
	ands r0, r6
	cmp r0, #0
	beq _080944FC
	ldrh r0, [r5, #0x2e]
	subs r0, #2
	cmp r0, #0
	blt _080944FC
	strh r0, [r5, #0x2e]
_080944FC:
	movs r0, #0x80
	ands r6, r0
	cmp r6, #0
	beq _08094518
	ldrh r4, [r5, #0x2e]
	adds r4, #2
	bl sub_0808E664
	subs r0, #1
	cmp r4, r0
	bgt _08094518
	ldrh r0, [r5, #0x2e]
	adds r0, #2
	strh r0, [r5, #0x2e]
_08094518:
	ldrh r3, [r5, #0x2c]
	ldrh r7, [r5, #0x2e]
	cmp r3, r7
	bne _08094522
	b _08094634
_08094522:
	ldrh r0, [r5, #0x2e]
	bl sub_0808E644
	bl sub_08093CD0
	ldr r0, _08094580 @ =sub_08093CC0
	movs r1, #1
	adds r2, r5, #0
	bl sub_080A9D28
	ldr r0, _08094584 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08094548
	ldr r0, _08094588 @ =0x00000385
	bl m4aSongNumStart
_08094548:
	adds r0, r5, #0
	bl sub_0809408C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809458C
	ldrh r0, [r5, #0x2e]
	ldrh r1, [r5, #0x2c]
	cmp r0, r1
	bhs _08094568
	ldrh r3, [r5, #0x30]
	lsrs r1, r3, #4
	subs r1, #1
	adds r0, r5, #0
	bl sub_0809385C
_08094568:
	ldrh r7, [r5, #0x2e]
	ldrh r0, [r5, #0x2c]
	cmp r7, r0
	bls _080945B2
	ldrh r3, [r5, #0x30]
	lsrs r1, r3, #4
	adds r1, #6
	adds r0, r5, #0
	bl sub_0809385C
	b _080945B2
	.align 2, 0
_08094580: .4byte sub_08093CC0
_08094584: .4byte gPlaySt
_08094588: .4byte 0x00000385
_0809458C:
	ldrh r1, [r5, #0x2e]
	strh r1, [r5, #0x2c]
	movs r2, #1
	ands r2, r1
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, #0x70
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x11
	lsls r1, r1, #4
	ldrh r2, [r5, #0x30]
	subs r2, #0x18
	subs r1, r1, r2
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #7
	bl sub_080AA3F8
_080945B2:
	ldrh r7, [r5, #0x2c]
	ldrh r0, [r5, #0x2e]
	cmp r7, r0
	beq _08094634
_080945BA:
	ldrh r2, [r5, #0x2e]
	ldrh r1, [r5, #0x2c]
	cmp r2, r1
	bhs _080945CE
	adds r0, r5, #0
	adds r0, #0x36
	ldrh r3, [r5, #0x30]
	ldrb r0, [r0]
	subs r0, r3, r0
	strh r0, [r5, #0x30]
_080945CE:
	cmp r2, r1
	bls _080945DE
	adds r0, r5, #0
	adds r0, #0x36
	ldrh r7, [r5, #0x30]
	ldrb r0, [r0]
	adds r0, r7, r0
	strh r0, [r5, #0x30]
_080945DE:
	ldrh r1, [r5, #0x30]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _08094604
	lsrs r0, r1, #4
	subs r0, #1
	bl sub_08093920
	ldrh r1, [r5, #0x30]
	lsrs r0, r1, #4
	adds r0, #6
	bl sub_08093920
	adds r0, r5, #0
	bl sub_0809410C
	ldrh r0, [r5, #0x2e]
	strh r0, [r5, #0x2c]
_08094604:
	ldrh r2, [r5, #0x30]
	subs r2, #0x18
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	ldrh r4, [r5, #0x30]
	bl sub_0808E664
	adds r2, r0, #0
	subs r2, #1
	lsrs r0, r2, #0x1f
	adds r2, r2, r0
	asrs r2, r2, #1
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #0xa
	adds r1, r4, #0
	movs r3, #6
	bl sub_08090E04
_08094634:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0809463C
sub_0809463C: @ 0x0809463C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x34]
	adds r0, #4
	strh r0, [r4, #0x34]
	ldrh r1, [r4, #0x30]
	adds r1, #4
	strh r1, [r4, #0x30]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x20
	bne _0809465A
	adds r0, r4, #0
	bl Proc_Break
_0809465A:
	ldrh r2, [r4, #0x30]
	subs r2, #0x18
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	ldrh r1, [r4, #0x30]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _0809467C
	lsrs r0, r1, #4
	subs r0, #1
	bl sub_08093920
_0809467C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08094684
sub_08094684: @ 0x08094684
	push {r4, lr}
	adds r4, r0, #0
	ldrh r1, [r4, #0x30]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _0809469C
	lsrs r1, r1, #4
	subs r1, #1
	adds r0, r4, #0
	bl sub_0809385C
_0809469C:
	ldrh r0, [r4, #0x34]
	subs r0, #4
	strh r0, [r4, #0x34]
	ldrh r1, [r4, #0x30]
	subs r1, #4
	strh r1, [r4, #0x30]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080946B4
	adds r0, r4, #0
	bl Proc_Break
_080946B4:
	ldrh r2, [r4, #0x30]
	subs r2, #0x18
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start nullsub_11
nullsub_11: @ 0x080946CC
	bx lr
	.align 2, 0

	thumb_func_start sub_080946D0
sub_080946D0: @ 0x080946D0
	push {lr}
	bl nullsub_11
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0xd0
	movs r1, #0x68
	movs r2, #0
	bl sub_080AA3F8
	pop {r0}
	bx r0

	thumb_func_start sub_080946E8
sub_080946E8: @ 0x080946E8
	push {lr}
	adds r3, r0, #0
	ldrh r1, [r3, #0x2e]
	movs r2, #1
	ands r2, r1
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, #0x70
	lsrs r1, r1, #1
	lsls r1, r1, #4
	ldrh r2, [r3, #0x30]
	subs r2, #0x18
	subs r1, r1, r2
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #7
	bl sub_080AA3F8
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08094714
sub_08094714: @ 0x08094714
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08094768 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0809473A
	ldr r0, _0809476C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809473A
	movs r0, #0xe3
	lsls r0, r0, #2
	bl m4aSongNumStart
_0809473A:
	ldr r0, _08094768 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0x40
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _08094760
	ldr r0, _0809476C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809475A
	ldr r0, _08094770 @ =0x00000385
	bl m4aSongNumStart
_0809475A:
	adds r0, r4, #0
	bl Proc_Break
_08094760:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08094768: .4byte gpKeySt
_0809476C: .4byte gPlaySt
_08094770: .4byte 0x00000385

	thumb_func_start sub_08094774
sub_08094774: @ 0x08094774
	push {lr}
	ldr r2, [r0, #0x14]
	ldrh r1, [r0, #0x30]
	strh r1, [r2, #0x3c]
	ldr r1, [r0, #0x14]
	adds r2, r0, #0
	adds r2, #0x29
	ldrb r2, [r2]
	adds r1, #0x2b
	strb r2, [r1]
	ldrh r0, [r0, #0x2e]
	bl sub_0808E644
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl sub_0808E694
	bl sub_0808EDB0
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080947A0
sub_080947A0: @ 0x080947A0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x14]
	adds r0, #0x36
	movs r5, #1
	strb r5, [r0]
	ldr r0, [r4, #0x14]
	movs r1, #6
	bl Proc_Goto
	adds r4, #0x37
	strb r5, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080947C0
sub_080947C0: @ 0x080947C0
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2e]
	bl sub_0808E644
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl sub_0808E694
	adds r0, r4, #0
	bl sub_0808B468
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080947E0
sub_080947E0: @ 0x080947E0
	push {r4, r5, lr}
	adds r4, r0, #0
	bl sub_0808EA54
	movs r1, #0
	strh r0, [r4, #0x2c]
	strh r0, [r4, #0x2e]
	adds r4, #0x29
	strb r1, [r4]
	movs r5, #1
_080947F4:
	adds r0, r5, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _08094816
	ldr r0, [r1]
	cmp r0, #0
	beq _08094816
	ldr r0, [r1, #0xc]
	ldr r1, _08094824 @ =0x0001000C
	ands r0, r1
	cmp r0, #0
	bne _08094816
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
_08094816:
	adds r5, #1
	cmp r5, #0x3f
	ble _080947F4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08094824: .4byte 0x0001000C

	thumb_func_start sub_08094828
sub_08094828: @ 0x08094828
	ldr r2, _08094848 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_08094848: .4byte gDispIo

	thumb_func_start sub_0809484C
sub_0809484C: @ 0x0809484C
	ldr r2, _08094868 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_08094868: .4byte gDispIo

	thumb_func_start sub_0809486C
sub_0809486C: @ 0x0809486C
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0x11
	bl sub_080807E4
	ldrh r0, [r4, #0x2e]
	bl sub_0808E644
	adds r1, r4, #0
	bl sub_080821F8
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_08094888
sub_08094888: @ 0x08094888
	push {r4, lr}
	adds r4, r0, #0
	bl sub_0808EC70
	bl sub_0808EA20
	strh r0, [r4, #0x2c]
	strh r0, [r4, #0x2e]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080948A0
sub_080948A0: @ 0x080948A0
	push {r4, r5, r6, lr}
	adds r6, r2, #0
	lsls r1, r1, #1
	adds r4, r0, #0
	adds r4, #0x1e
	adds r4, r4, r1
	ldrh r5, [r4]
	lsls r3, r3, #1
	adds r1, r6, #0
	adds r1, #0x1e
	adds r1, r1, r3
	ldrh r2, [r1]
	strh r2, [r4]
	strh r5, [r1]
	bl UnitRemoveInvalidItems
	adds r0, r6, #0
	bl UnitRemoveInvalidItems
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_080948CC
sub_080948CC: @ 0x080948CC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08094930 @ =gpKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08094954
	ldr r0, [r4, #0x34]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	bne _080948EA
	b _08094AB8
_080948EA:
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r2, r0, #0
	ldr r3, [r4, #0x38]
	cmp r3, #0xff
	beq _08094918
	ldr r0, [r4, #0x3c]
	cmp r0, #0xff
	bne _08094918
	ldr r0, [r4, #0x34]
	adds r0, #8
	asrs r0, r0, #3
	movs r1, #1
	ands r0, r1
	asrs r1, r3, #3
	cmp r0, r1
	beq _08094918
	movs r0, #5
	cmp r2, #5
	beq _08094916
	adds r0, r2, #1
_08094916:
	adds r2, r0, #0
_08094918:
	cmp r2, #0
	bgt _0809491E
	b _08094AB8
_0809491E:
	ldr r1, [r4, #0x34]
	movs r0, #7
	ands r0, r1
	cmp r2, r0
	ble _08094934
	adds r0, r1, #0
	subs r0, #8
	b _08094936
	.align 2, 0
_08094930: .4byte gpKeySt
_08094934:
	subs r0, r2, #1
_08094936:
	str r0, [r4, #0x34]
	ldr r0, _0809494C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _08094946
	b _08094AA8
_08094946:
	ldr r0, _08094950 @ =0x00000387
	b _08094AA4
	.align 2, 0
_0809494C: .4byte gPlaySt
_08094950: .4byte 0x00000387
_08094954:
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080949C8
	ldr r0, [r4, #0x34]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	beq _08094968
	b _08094AB8
_08094968:
	ldr r0, [r4, #0x30]
	bl GetUnitItemCount
	adds r2, r0, #0
	ldr r3, [r4, #0x38]
	cmp r3, #0xff
	beq _08094996
	ldr r0, [r4, #0x3c]
	cmp r0, #0xff
	bne _08094996
	ldr r0, [r4, #0x34]
	adds r0, #8
	asrs r0, r0, #3
	movs r1, #1
	ands r0, r1
	asrs r1, r3, #3
	cmp r0, r1
	beq _08094996
	movs r0, #5
	cmp r2, #5
	beq _08094994
	adds r0, r2, #1
_08094994:
	adds r2, r0, #0
_08094996:
	cmp r2, #0
	bgt _0809499C
	b _08094AB8
_0809499C:
	ldr r1, [r4, #0x34]
	movs r0, #7
	ands r0, r1
	cmp r2, r0
	ble _080949AC
	adds r0, r1, #0
	adds r0, #8
	b _080949AE
_080949AC:
	adds r0, r2, #7
_080949AE:
	str r0, [r4, #0x34]
	ldr r0, _080949C0 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08094AA8
	ldr r0, _080949C4 @ =0x00000387
	b _08094AA4
	.align 2, 0
_080949C0: .4byte gPlaySt
_080949C4: .4byte 0x00000387
_080949C8:
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08094A34
	ldr r0, [r4, #0x34]
	asrs r0, r0, #3
	lsls r0, r0, #2
	adds r1, r4, #0
	adds r1, #0x2c
	adds r1, r1, r0
	ldr r0, [r1]
	bl GetUnitItemCount
	adds r3, r0, #0
	ldr r1, [r4, #0x38]
	cmp r1, #0xff
	beq _08094A04
	ldr r0, [r4, #0x3c]
	cmp r0, #0xff
	bne _08094A04
	ldr r0, [r4, #0x34]
	asrs r0, r0, #3
	asrs r1, r1, #3
	cmp r0, r1
	beq _08094A04
	movs r0, #5
	cmp r3, #5
	beq _08094A02
	adds r0, r3, #1
_08094A02:
	adds r3, r0, #0
_08094A04:
	ldr r2, [r4, #0x34]
	movs r0, #7
	ands r0, r2
	cmp r0, #0
	ble _08094A14
	subs r0, r2, #1
	str r0, [r4, #0x34]
	b _08094A96
_08094A14:
	ldr r0, _08094A30 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0x40
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08094AB8
	movs r0, #8
	ands r2, r0
	adds r0, r2, r3
	subs r0, #1
	str r0, [r4, #0x34]
	b _08094A96
	.align 2, 0
_08094A30: .4byte gpKeySt
_08094A34:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _08094AB8
	ldr r0, [r4, #0x34]
	asrs r0, r0, #3
	lsls r0, r0, #2
	adds r1, r4, #0
	adds r1, #0x2c
	adds r1, r1, r0
	ldr r0, [r1]
	bl GetUnitItemCount
	adds r3, r0, #0
	ldr r1, [r4, #0x38]
	cmp r1, #0xff
	beq _08094A70
	ldr r0, [r4, #0x3c]
	cmp r0, #0xff
	bne _08094A70
	ldr r0, [r4, #0x34]
	asrs r0, r0, #3
	asrs r1, r1, #3
	cmp r0, r1
	beq _08094A70
	movs r0, #5
	cmp r3, #5
	beq _08094A6E
	adds r0, r3, #1
_08094A6E:
	adds r3, r0, #0
_08094A70:
	ldr r2, [r4, #0x34]
	movs r0, #7
	ands r0, r2
	subs r1, r3, #1
	cmp r0, r1
	bge _08094A82
	adds r0, r2, #1
	str r0, [r4, #0x34]
	b _08094A96
_08094A82:
	ldr r0, _08094AAC @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0x80
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08094AB8
	movs r0, #8
	ands r2, r0
	str r2, [r4, #0x34]
_08094A96:
	ldr r0, _08094AB0 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08094AA8
	ldr r0, _08094AB4 @ =0x00000386
_08094AA4:
	bl m4aSongNumStart
_08094AA8:
	movs r0, #1
	b _08094ABA
	.align 2, 0
_08094AAC: .4byte gpKeySt
_08094AB0: .4byte gPlaySt
_08094AB4: .4byte 0x00000386
_08094AB8:
	movs r0, #0
_08094ABA:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_08094AC0
sub_08094AC0: @ 0x08094AC0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	adds r4, r0, #0
	mov sb, r1
	mov sl, r2
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	str r3, [sp, #8]
	movs r1, #0xb
	movs r2, #9
	movs r3, #0
	bl TmFillRect_thm
	mov r0, sl
	bl GetUnitItemCount
	str r0, [sp, #0x10]
	movs r0, #0
	str r0, [sp, #0xc]
	ldr r1, [sp, #0x10]
	cmp r0, r1
	bge _08094B94
	adds r0, r4, #4
	str r0, [sp, #0x14]
	mov r8, r4
_08094AFA:
	ldr r0, [sp, #0xc]
	lsls r1, r0, #1
	mov r0, sl
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r6, [r0]
	ldr r1, [sp, #8]
	cmp r1, #0
	beq _08094B16
	mov r0, sl
	adds r1, r6, #0
	bl sub_080284C8
	b _08094B1E
_08094B16:
	mov r0, sl
	adds r1, r6, #0
	bl sub_08016F04
_08094B1E:
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	mov r0, sb
	bl ClearText
	adds r0, r6, #0
	bl GetItemName
	adds r1, r0, #0
	movs r2, #0
	lsls r0, r4, #0x18
	asrs r5, r0, #0x18
	cmp r5, #0
	bne _08094B3C
	movs r2, #1
_08094B3C:
	movs r0, #0
	str r0, [sp]
	str r1, [sp, #4]
	mov r0, sb
	ldr r1, [sp, #0x14]
	movs r3, #0
	bl PutDrawText
	mov r4, r8
	adds r4, #0x16
	movs r7, #1
	cmp r5, #0
	beq _08094B58
	movs r7, #2
_08094B58:
	adds r0, r6, #0
	bl GetItemUses
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r7, #0
	bl sub_08006074
	adds r0, r6, #0
	bl sub_08017808
	adds r1, r0, #0
	mov r0, r8
	movs r2, #0x80
	lsls r2, r2, #7
	bl PutIcon
	movs r0, #8
	add sb, r0
	ldr r1, [sp, #0x14]
	adds r1, #0x80
	str r1, [sp, #0x14]
	movs r0, #0x80
	add r8, r0
	ldr r1, [sp, #0xc]
	adds r1, #1
	str r1, [sp, #0xc]
	ldr r0, [sp, #0x10]
	cmp r1, r0
	blt _08094AFA
_08094B94:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08094BA4
sub_08094BA4: @ 0x08094BA4
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r7, r1, #0
	adds r0, r7, #0
	bl GetUnitItemCount
	adds r6, r0, #0
	movs r5, #0
	cmp r5, r6
	bge _08094BDA
_08094BB8:
	lsls r1, r5, #1
	adds r0, r7, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r0, [r0]
	bl sub_08017808
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #0x80
	lsls r2, r2, #7
	bl PutIcon
	adds r4, #0x80
	adds r5, #1
	cmp r5, r6
	blt _08094BB8
_08094BDA:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08094BE0
sub_08094BE0: @ 0x08094BE0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0x28
	mov r8, r0
	add r1, sp, #8
	ldr r0, _08094CD8 @ =0x0842CFDC
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3}
	stm r1!, {r2, r3}
	ldr r0, _08094CDC @ =0x08D8C0A0
	ldrh r0, [r0]
	bl InitBgs
	add r0, sp, #8
	bl sub_080069E0
	ldr r3, _08094CE0 @ =gDispIo
	movs r2, #4
	rsbs r2, r2, #0
	adds r0, r2, #0
	ldrb r4, [r3, #0xc]
	ands r0, r4
	movs r1, #1
	orrs r0, r1
	strb r0, [r3, #0xc]
	adds r0, r2, #0
	ldrb r1, [r3, #0x10]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r3, #0x10]
	ldrb r4, [r3, #0x14]
	ands r2, r4
	strb r2, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #0
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	bl ResetText
	bl InitIcons
	bl sub_0804A9F8
	bl sub_08015A0C
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, _08094CE4 @ =0x06014000
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_08082F74
	movs r0, #4
	bl ApplyIconPalettes
	bl sub_0808ED8C
	ldr r0, _08094CE8 @ =0x02012A20
	adds r6, r0, #0
	adds r6, #0x28
	adds r5, r0, #0
	movs r4, #4
_08094CA6:
	adds r0, r5, #0
	movs r1, #7
	bl sub_0800536C
	adds r0, r6, #0
	movs r1, #7
	bl sub_0800536C
	adds r6, #8
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _08094CA6
	movs r0, #0xff
	mov r2, r8
	str r0, [r2, #0x38]
	ldr r1, [r2, #0x40]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _08094CEC
	adds r0, r1, #0
	adds r0, #8
	str r0, [r2, #0x34]
	b _08094D06
	.align 2, 0
_08094CD8: .4byte 0x0842CFDC
_08094CDC: .4byte 0x08D8C0A0
_08094CE0: .4byte gDispIo
_08094CE4: .4byte 0x06014000
_08094CE8: .4byte 0x02012A20
_08094CEC:
	mov r3, r8
	ldr r0, [r3, #0x2c]
	bl GetUnitItemCount
	cmp r0, #0
	bne _08094D00
	movs r0, #8
	mov r4, r8
	str r0, [r4, #0x34]
	b _08094D06
_08094D00:
	movs r0, #0
	mov r1, r8
	str r0, [r1, #0x34]
_08094D06:
	movs r0, #0xff
	mov r2, r8
	str r0, [r2, #0x3c]
	ldr r0, [r2, #0x2c]
	bl GetUnitPortraitId
	adds r1, r0, #0
	movs r4, #4
	rsbs r4, r4, #0
	ldr r0, _08094EA4 @ =0x00000203
	str r0, [sp]
	movs r0, #0
	movs r2, #0x40
	adds r3, r4, #0
	bl sub_08007A5C
	mov r3, r8
	ldr r0, [r3, #0x30]
	bl GetUnitPortraitId
	adds r1, r0, #0
	ldr r0, _08094EA8 @ =0x00000202
	str r0, [sp]
	movs r0, #1
	movs r2, #0xae
	adds r3, r4, #0
	bl sub_08007A5C
	movs r6, #0
	str r6, [sp]
	movs r0, #1
	movs r1, #8
	movs r2, #0xe
	movs r3, #0xc
	bl sub_0804A4CC
	str r6, [sp]
	movs r0, #0xf
	movs r1, #8
	movs r2, #0xe
	movs r3, #0xc
	bl sub_0804A4CC
	movs r0, #7
	bl EnableBgSync
	mov r4, r8
	ldr r0, [r4, #0x2c]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r7, r0, #0
	bl GetStringTextLen
	adds r3, r0, #0
	movs r4, #0x30
	subs r3, r4, r3
	lsrs r0, r3, #0x1f
	adds r3, r3, r0
	asrs r3, r3, #1
	ldr r0, _08094EAC @ =gBg0Tm
	mov sb, r0
	movs r5, #6
	str r5, [sp]
	str r7, [sp, #4]
	movs r0, #0
	mov r1, sb
	movs r2, #0
	bl PutDrawText
	mov r1, r8
	ldr r0, [r1, #0x30]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r7, r0, #0
	bl GetStringTextLen
	subs r4, r4, r0
	lsrs r0, r4, #0x1f
	adds r4, r4, r0
	asrs r4, r4, #1
	mov r1, sb
	adds r1, #0x30
	str r5, [sp]
	str r7, [sp, #4]
	movs r0, #0
	movs r2, #0
	adds r3, r4, #0
	bl PutDrawText
	movs r0, #0x91
	lsls r0, r0, #2
	add r0, sb
	ldr r4, _08094EB0 @ =0x02012A20
	mov r3, r8
	ldr r2, [r3, #0x2c]
	adds r1, r4, #0
	movs r3, #0
	bl sub_08094AC0
	movs r0, #0x98
	lsls r0, r0, #2
	add r0, sb
	adds r4, #0x28
	mov r1, r8
	ldr r2, [r1, #0x30]
	adds r1, r4, #0
	movs r3, #0
	bl sub_08094AC0
	mov r0, r8
	bl sub_080A98C8
	mov r0, r8
	bl sub_080AA390
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_080AA3B4
	mov r2, r8
	ldr r1, [r2, #0x34]
	asrs r2, r1, #3
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	movs r2, #7
	ands r1, r2
	lsls r1, r1, #4
	adds r1, #0x48
	movs r5, #0x80
	lsls r5, r5, #4
	movs r2, #0xb
	adds r3, r5, #0
	bl sub_080AA3F8
	movs r0, #0xc8
	movs r1, #0x90
	mov r2, r8
	bl sub_08082D1C
	movs r1, #0xe0
	lsls r1, r1, #4
	movs r3, #0xc0
	lsls r3, r3, #4
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [sp]
	mov r4, r8
	str r4, [sp, #4]
	movs r0, #0xd
	movs r2, #0xf
	bl sub_080AAA50
	movs r1, #0x28
	rsbs r1, r1, #0
	movs r4, #1
	rsbs r4, r4, #0
	movs r0, #0
	adds r2, r4, #0
	movs r3, #1
	bl sub_080AAAD0
	movs r0, #1
	movs r1, #0xb8
	adds r2, r4, #0
	movs r3, #0
	bl sub_080AAAD0
	ldr r3, _08094EB4 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r0, #0xe
	strb r0, [r1]
	adds r1, #1
	movs r0, #4
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r6, [r0]
	ldr r0, _08094EB8 @ =0x0000FFE0
	ldrh r2, [r3, #0x3c]
	ands r0, r2
	ldr r1, _08094EBC @ =0x0000E0FF
	ands r0, r1
	orrs r0, r5
	strh r0, [r3, #0x3c]
	add sp, #0x28
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08094EA4: .4byte 0x00000203
_08094EA8: .4byte 0x00000202
_08094EAC: .4byte gBg0Tm
_08094EB0: .4byte 0x02012A20
_08094EB4: .4byte gDispIo
_08094EB8: .4byte 0x0000FFE0
_08094EBC: .4byte 0x0000E0FF

	thumb_func_start sub_08094EC0
sub_08094EC0: @ 0x08094EC0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	ldr r2, [r6, #0x3c]
	cmp r2, #0xff
	beq _08094EEC
	ldr r0, _08094EE8 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	bne _08094EE0
	b _08095154
_08094EE0:
	bl sub_080828A4
	movs r0, #0xff
	b _080951B4
	.align 2, 0
_08094EE8: .4byte gpKeySt
_08094EEC:
	ldr r0, _08094F28 @ =gpKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08094F2C
	ldr r2, [r6, #0x34]
	asrs r3, r2, #3
	lsls r1, r3, #2
	adds r0, r6, #0
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r0, [r0]
	movs r4, #7
	ands r4, r2
	lsls r1, r4, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	bne _08094F1C
	b _080951B6
_08094F1C:
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #4
	adds r0, #0x10
	lsls r1, r4, #4
	b _080951AC
	.align 2, 0
_08094F28: .4byte gpKeySt
_08094F2C:
	ldr r4, [r6, #0x38]
	cmp r4, #0xff
	bne _08094F34
	b _08095094
_08094F34:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _08094F3E
	b _08095048
_08094F3E:
	asrs r0, r4, #3
	lsls r0, r0, #2
	adds r7, r6, #0
	adds r7, #0x2c
	adds r0, r7, r0
	ldr r0, [r0]
	movs r1, #7
	mov r8, r1
	ands r4, r1
	ldr r3, [r6, #0x34]
	asrs r1, r3, #3
	lsls r1, r1, #2
	adds r1, r7, r1
	ldr r2, [r1]
	mov r1, r8
	ands r3, r1
	adds r1, r4, #0
	bl sub_08091730
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08094F80
	movs r1, #1
	rsbs r1, r1, #0
	ldr r2, _08094F7C @ =0x000003B3
	adds r0, r1, #0
	adds r3, r6, #0
	bl sub_08091664
	b _080951B6
	.align 2, 0
_08094F7C: .4byte 0x000003B3
_08094F80:
	ldr r1, [r6, #0x38]
	asrs r0, r1, #3
	lsls r0, r0, #2
	adds r0, r7, r0
	ldr r0, [r0]
	mov r2, r8
	ands r1, r2
	ldr r3, [r6, #0x34]
	asrs r2, r3, #3
	lsls r2, r2, #2
	adds r2, r7, r2
	ldr r2, [r2]
	mov r4, r8
	ands r3, r4
	bl sub_080948A0
	ldr r4, _08094FE4 @ =0x02022EA4
	ldr r5, _08094FE8 @ =0x02012A20
	ldr r2, [r6, #0x2c]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #0
	bl sub_08094AC0
	adds r4, #0x1c
	adds r5, #0x28
	ldr r2, [r6, #0x30]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #0
	bl sub_08094AC0
	movs r0, #1
	bl EnableBgSync
	ldr r0, [r6, #0x38]
	asrs r0, r0, #3
	lsls r0, r0, #2
	adds r0, r7, r0
	ldr r0, [r0]
	bl GetUnitItemCount
	adds r2, r0, #0
	cmp r2, #0
	bne _08094FEC
	ldr r0, [r6, #0x38]
	adds r0, #8
	movs r1, #8
	ands r0, r1
	b _08095000
	.align 2, 0
_08094FE4: .4byte 0x02022EA4
_08094FE8: .4byte 0x02012A20
_08094FEC:
	ldr r1, [r6, #0x38]
	adds r0, r1, #0
	mov r3, r8
	ands r0, r3
	cmp r2, r0
	bgt _08095002
	movs r0, #8
	ands r1, r0
	adds r0, r1, r2
	subs r0, #1
_08095000:
	str r0, [r6, #0x38]
_08095002:
	ldr r0, _08095040 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08095014
	ldr r0, _08095044 @ =0x0000038A
	bl m4aSongNumStart
_08095014:
	movs r0, #0
	bl sub_080A998C
	ldr r1, [r6, #0x38]
	str r1, [r6, #0x34]
	movs r0, #0xff
	str r0, [r6, #0x38]
	asrs r2, r1, #3
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	movs r2, #7
	ands r1, r2
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #0xb
	bl sub_080AA3F8
	b _080951B6
	.align 2, 0
_08095040: .4byte gPlaySt
_08095044: .4byte 0x0000038A
_08095048:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne _08095052
	b _08095154
_08095052:
	str r4, [r6, #0x34]
	str r2, [r6, #0x38]
	asrs r1, r4, #3
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #4
	adds r0, #0x10
	movs r1, #7
	ands r4, r1
	lsls r1, r4, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #0xb
	bl sub_080AA3F8
	ldr r0, _0809508C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08095084
	ldr r0, _08095090 @ =0x0000038B
	bl m4aSongNumStart
_08095084:
	movs r0, #0
	bl sub_080A998C
	b _080951B6
	.align 2, 0
_0809508C: .4byte gPlaySt
_08095090: .4byte 0x0000038B
_08095094:
	movs r2, #1
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _08095128
	ldr r0, [r6, #0x34]
	asrs r0, r0, #3
	adds r0, #1
	ands r0, r2
	lsls r0, r0, #2
	adds r1, r6, #0
	adds r1, #0x2c
	adds r1, r1, r0
	ldr r0, [r1]
	bl GetUnitItemCount
	adds r4, r0, #0
	ldr r2, [r6, #0x34]
	str r2, [r6, #0x38]
	asrs r0, r2, #3
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #4
	adds r1, #0x10
	movs r0, #7
	ands r2, r0
	lsls r2, r2, #4
	adds r2, #0x48
	movs r0, #0
	movs r3, #0
	bl sub_080A98DC
	cmp r4, #4
	bgt _080950E4
	ldr r0, [r6, #0x34]
	adds r0, #8
	movs r1, #8
	ands r0, r1
	adds r0, r0, r4
	b _080950EC
_080950E4:
	ldr r0, [r6, #0x34]
	adds r0, #8
	movs r1, #0xf
	ands r0, r1
_080950EC:
	str r0, [r6, #0x34]
	ldr r1, [r6, #0x34]
	asrs r2, r1, #3
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	movs r2, #7
	ands r1, r2
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #0xb
	bl sub_080AA3F8
	ldr r0, _08095120 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080951B6
	ldr r0, _08095124 @ =0x0000038A
	bl m4aSongNumStart
	b _080951B6
	.align 2, 0
_08095120: .4byte gPlaySt
_08095124: .4byte 0x0000038A
_08095128:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08095154
	adds r0, r6, #0
	bl Proc_Break
	ldr r0, _0809514C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080951B6
	ldr r0, _08095150 @ =0x0000038B
	bl m4aSongNumStart
	b _080951B6
	.align 2, 0
_0809514C: .4byte gPlaySt
_08095150: .4byte 0x0000038B
_08095154:
	adds r0, r6, #0
	bl sub_080948CC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080951B6
	ldr r1, [r6, #0x34]
	asrs r2, r1, #3
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	movs r5, #7
	ands r1, r5
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #0xb
	bl sub_080AA3F8
	ldr r0, [r6, #0x3c]
	cmp r0, #0xff
	beq _080951B6
	ldr r2, [r6, #0x34]
	asrs r4, r2, #3
	lsls r1, r4, #2
	adds r0, r6, #0
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r0, [r0]
	adds r3, r5, #0
	ands r3, r2
	lsls r1, r3, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	beq _080951B6
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #4
	adds r0, #0x10
	lsls r1, r3, #4
_080951AC:
	adds r1, #0x48
	bl sub_080826EC
	ldr r0, [r6, #0x34]
_080951B4:
	str r0, [r6, #0x3c]
_080951B6:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080951C0
sub_080951C0: @ 0x080951C0
	push {lr}
	bl sub_0808EDB0
	movs r0, #0
	bl EndFaceById
	movs r0, #1
	bl EndFaceById
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080951D8
sub_080951D8: @ 0x080951D8
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r1, r2, #0
	ldr r0, _080951F8 @ =0x08D8CF74
	bl Proc_StartBlocking
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	movs r1, #1
	rsbs r1, r1, #0
	str r1, [r0, #0x40]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080951F8: .4byte 0x08D8CF74

	thumb_func_start sub_080951FC
sub_080951FC: @ 0x080951FC
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r1, r3, #0
	ldr r0, _08095218 @ =0x08D8CF74
	bl Proc_StartBlocking
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	str r6, [r0, #0x40]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08095218: .4byte 0x08D8CF74

	thumb_func_start sub_0809521C
sub_0809521C: @ 0x0809521C
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r5, _08095248 @ =gpKeySt
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r7, #0x40
	adds r0, r7, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	cmp r6, #0
	beq _0809525E
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r2, r0, #0
	ldr r0, [r4, #0x30]
	cmp r0, #0
	ble _0809524C
	subs r0, #1
	str r0, [r4, #0x30]
	b _0809528A
	.align 2, 0
_08095248: .4byte gpKeySt
_0809524C:
	ldr r1, [r5]
	adds r0, r7, #0
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080952A8
	subs r0, r2, #1
	str r0, [r4, #0x30]
	b _0809528A
_0809525E:
	movs r7, #0x80
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _080952A8
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	subs r0, #1
	ldr r1, [r4, #0x30]
	cmp r1, r0
	bge _0809527C
	adds r0, r1, #1
	str r0, [r4, #0x30]
	b _0809528A
_0809527C:
	ldr r1, [r5]
	adds r0, r7, #0
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080952A8
	str r6, [r4, #0x30]
_0809528A:
	ldr r0, _080952A0 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809529C
	ldr r0, _080952A4 @ =0x00000386
	bl m4aSongNumStart
_0809529C:
	movs r0, #1
	b _080952AA
	.align 2, 0
_080952A0: .4byte gPlaySt
_080952A4: .4byte 0x00000386
_080952A8:
	movs r0, #0
_080952AA:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_080952B0
sub_080952B0: @ 0x080952B0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	mov r8, r0
	ldr r6, _0809530C @ =0x020129A8
	adds r5, r6, #0
	movs r4, #7
_080952C0:
	adds r0, r5, #0
	bl ClearText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _080952C0
	adds r0, r6, #0
	adds r6, #8
	ldr r4, _08095310 @ =0x02023D82
	movs r5, #0
	str r5, [sp]
	ldr r1, _08095314 @ =0x0842CFFC
	str r1, [sp, #4]
	adds r1, r4, #0
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	mov r0, r8
	bl UnitHasMagicRank
	lsls r0, r0, #0x18
	asrs r2, r0, #0x18
	cmp r2, #0
	beq _0809531C
	adds r0, r6, #0
	adds r6, #8
	adds r1, r4, #0
	adds r1, #0x80
	str r5, [sp]
	ldr r2, _08095318 @ =0x0842D004
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	b _08095332
	.align 2, 0
_0809530C: .4byte 0x020129A8
_08095310: .4byte 0x02023D82
_08095314: .4byte 0x0842CFFC
_08095318: .4byte 0x0842D004
_0809531C:
	adds r0, r6, #0
	adds r6, #8
	adds r1, r4, #0
	adds r1, #0x80
	str r2, [sp]
	ldr r2, _08095404 @ =0x0842D00C
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #4
	bl PutDrawText
_08095332:
	adds r0, r6, #0
	adds r6, #8
	ldr r7, _08095408 @ =0x02023E82
	movs r5, #0
	str r5, [sp]
	ldr r1, _0809540C @ =0x0842D010
	str r1, [sp, #4]
	adds r1, r7, #0
	movs r2, #3
	movs r3, #4
	bl PutDrawText
	adds r0, r6, #0
	adds r6, #8
	adds r1, r7, #0
	adds r1, #0x80
	str r5, [sp]
	ldr r2, _08095410 @ =0x0842D014
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	adds r0, r6, #0
	adds r6, #8
	adds r1, r7, #0
	subs r1, #0xf4
	str r5, [sp]
	ldr r2, _08095414 @ =0x0842D01C
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	adds r0, r6, #0
	adds r6, #8
	adds r1, r7, #0
	subs r1, #0x74
	str r5, [sp]
	ldr r2, _08095418 @ =0x0842D024
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	adds r0, r6, #0
	adds r6, #8
	adds r1, r7, #0
	adds r1, #0xc
	str r5, [sp]
	ldr r2, _0809541C @ =0x0842D02C
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	adds r0, r6, #0
	adds r6, #8
	adds r1, r7, #0
	adds r1, #0x8c
	str r5, [sp]
	ldr r2, _08095420 @ =0x0842D034
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	mov r1, r8
	ldr r0, [r1, #4]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r4, r0, #0
	movs r0, #0x38
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r3, r0, #0
	adds r0, r6, #0
	ldr r2, _08095424 @ =0xFFFFFE0A
	adds r1, r7, r2
	str r5, [sp]
	str r4, [sp, #4]
	movs r2, #0
	bl PutDrawText
	ldr r1, _08095428 @ =0xFFFFFE02
	adds r0, r7, r1
	movs r1, #3
	movs r2, #0x24
	bl sub_08005FEC
	ldr r2, _0809542C @ =0xFFFFFE04
	adds r0, r7, r2
	movs r1, #3
	movs r2, #0x25
	bl sub_08005FEC
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08095404: .4byte 0x0842D00C
_08095408: .4byte 0x02023E82
_0809540C: .4byte 0x0842D010
_08095410: .4byte 0x0842D014
_08095414: .4byte 0x0842D01C
_08095418: .4byte 0x0842D024
_0809541C: .4byte 0x0842D02C
_08095420: .4byte 0x0842D034
_08095424: .4byte 0xFFFFFE0A
_08095428: .4byte 0xFFFFFE02
_0809542C: .4byte 0xFFFFFE04

	thumb_func_start sub_08095430
sub_08095430: @ 0x08095430
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x2c
	adds r5, r0, #0
	mov r8, r1
	movs r0, #2
	bl sub_0804A2DC
	add r4, sp, #0xc
	adds r0, r5, #0
	bl GetUnitCurrentHp
	adds r1, r0, #0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r2, r0, #3
	movs r0, #0xc0
	ldrb r3, [r5, #0xb]
	ands r0, r3
	cmp r0, #0x80
	beq _08095462
	adds r0, r2, #0
	movs r1, #0x3c
	b _08095466
_08095462:
	adds r0, r1, #0
	movs r1, #5
_08095466:
	bl __divsi3
	str r0, [r4]
	adds r0, r5, #0
	bl GetUnitPower
	adds r1, r0, #0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	ldr r1, [r5, #4]
	ldrb r1, [r1, #0x14]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl __divsi3
	str r0, [sp, #0x10]
	adds r0, r5, #0
	bl GetUnitSkill
	adds r1, r0, #0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	ldr r1, [r5, #4]
	ldrb r1, [r1, #0x15]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl __divsi3
	str r0, [sp, #0x14]
	adds r0, r5, #0
	bl GetUnitSpeed
	adds r1, r0, #0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	ldr r1, [r5, #4]
	ldrb r1, [r1, #0x16]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl __divsi3
	str r0, [sp, #0x18]
	adds r0, r5, #0
	bl GetUnitLuck
	adds r1, r0, #0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	movs r1, #0x1e
	bl __divsi3
	str r0, [sp, #0x1c]
	adds r0, r5, #0
	bl GetUnitDefense
	adds r1, r0, #0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	ldr r1, [r5, #4]
	ldrb r1, [r1, #0x17]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl __divsi3
	str r0, [sp, #0x20]
	adds r0, r5, #0
	bl GetUnitResistance
	adds r1, r0, #0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	ldr r4, [r5, #4]
	movs r1, #0x18
	ldrsb r1, [r4, r1]
	bl __divsi3
	str r0, [sp, #0x24]
	movs r1, #0x11
	ldrsb r1, [r4, r1]
	ldr r0, [r5]
	ldrb r0, [r0, #0x13]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r1, r0
	movs r0, #0x1a
	ldrsb r0, [r5, r0]
	adds r1, r1, r0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	movs r1, #0x19
	ldrsb r1, [r4, r1]
	bl __divsi3
	str r0, [sp, #0x28]
	movs r5, #0
	add r6, sp, #0xc
	movs r7, #0xe0
	lsls r7, r7, #7
_08095538:
	mov r4, r8
	asrs r4, r5
	movs r0, #1
	ands r4, r0
	cmp r4, #0
	beq _0809557C
	lsls r0, r7, #0xf
	lsrs r0, r0, #0x14
	movs r2, #3
	ands r2, r5
	lsls r2, r2, #6
	adds r2, #0xb3
	asrs r3, r5, #2
	lsls r1, r3, #1
	adds r1, r1, r3
	lsls r1, r1, #1
	adds r2, r2, r1
	lsls r2, r2, #1
	ldr r1, _08095578 @ =gBg0Tm
	adds r2, r2, r1
	movs r1, #0x18
	str r1, [sp]
	ldr r1, [r6]
	str r1, [sp, #4]
	movs r1, #0
	str r1, [sp, #8]
	movs r1, #4
	movs r3, #0xc0
	lsls r3, r3, #6
	bl sub_08080600
	b _080955AC
	.align 2, 0
_08095578: .4byte gBg0Tm
_0809557C:
	lsls r0, r7, #0xf
	lsrs r0, r0, #0x14
	movs r2, #3
	ands r2, r5
	lsls r2, r2, #6
	adds r2, #0xb3
	asrs r3, r5, #2
	lsls r1, r3, #1
	adds r1, r1, r3
	lsls r1, r1, #1
	adds r2, r2, r1
	lsls r2, r2, #1
	ldr r1, _080955CC @ =gBg0Tm
	adds r2, r2, r1
	movs r1, #0x18
	str r1, [sp]
	ldr r1, [r6]
	str r1, [sp, #4]
	str r4, [sp, #8]
	movs r1, #4
	movs r3, #0x80
	lsls r3, r3, #6
	bl sub_08080600
_080955AC:
	adds r6, #4
	movs r0, #0x80
	lsls r0, r0, #1
	adds r7, r7, r0
	adds r5, #1
	cmp r5, #7
	ble _08095538
	movs r0, #1
	bl EnableBgSync
	add sp, #0x2c
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080955CC: .4byte gBg0Tm

	thumb_func_start sub_080955D0
sub_080955D0: @ 0x080955D0
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r6, _080955EC @ =0x02023D8A
	bl GetUnitCurrentHp
	adds r1, r0, #0
	movs r0, #0xc0
	ldrb r2, [r4, #0xb]
	ands r0, r2
	cmp r0, #0x80
	bne _080955F0
	cmp r1, #0x78
	beq _080955F4
	b _080955F8
	.align 2, 0
_080955EC: .4byte 0x02023D8A
_080955F0:
	cmp r1, #0x3c
	bne _080955F8
_080955F4:
	movs r5, #4
	b _080955FA
_080955F8:
	movs r5, #2
_080955FA:
	adds r0, r4, #0
	bl GetUnitCurrentHp
	adds r2, r0, #0
	adds r0, r6, #0
	adds r1, r5, #0
	bl sub_08006074
	ldr r5, _08095748 @ =0x02023E0A
	adds r0, r4, #0
	bl GetUnitPower
	ldr r1, [r4, #4]
	ldrb r1, [r1, #0x14]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	movs r6, #2
	cmp r0, r1
	bne _08095622
	movs r6, #4
_08095622:
	adds r0, r4, #0
	bl GetUnitPower
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r6, #0
	bl sub_08006074
	adds r7, r5, #0
	adds r7, #0x80
	adds r0, r4, #0
	bl GetUnitSkill
	ldr r1, [r4, #4]
	ldrb r1, [r1, #0x15]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	movs r6, #2
	cmp r0, r1
	bne _0809564C
	movs r6, #4
_0809564C:
	adds r0, r4, #0
	bl GetUnitSkill
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl sub_08006074
	movs r0, #0x80
	lsls r0, r0, #1
	adds r7, r5, r0
	adds r0, r4, #0
	bl GetUnitSpeed
	ldr r1, [r4, #4]
	ldrb r1, [r1, #0x16]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	movs r6, #2
	cmp r0, r1
	bne _08095678
	movs r6, #4
_08095678:
	adds r0, r4, #0
	bl GetUnitSpeed
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl sub_08006074
	adds r7, r5, #0
	subs r7, #0x74
	adds r0, r4, #0
	bl GetUnitLuck
	movs r6, #2
	cmp r0, #0x1e
	bne _0809569A
	movs r6, #4
_0809569A:
	adds r0, r4, #0
	bl GetUnitLuck
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl sub_08006074
	adds r7, r5, #0
	adds r7, #0xc
	adds r0, r4, #0
	bl GetUnitDefense
	ldr r1, [r4, #4]
	ldrb r1, [r1, #0x17]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	movs r6, #2
	cmp r0, r1
	bne _080956C4
	movs r6, #4
_080956C4:
	adds r0, r4, #0
	bl GetUnitDefense
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl sub_08006074
	adds r7, r5, #0
	adds r7, #0x8c
	adds r0, r4, #0
	bl GetUnitResistance
	ldr r1, [r4, #4]
	ldrb r1, [r1, #0x18]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	movs r6, #2
	cmp r0, r1
	bne _080956EE
	movs r6, #4
_080956EE:
	adds r0, r4, #0
	bl GetUnitResistance
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl sub_08006074
	movs r1, #0x86
	lsls r1, r1, #1
	adds r6, r5, r1
	ldr r2, [r4, #4]
	movs r1, #0x11
	ldrsb r1, [r2, r1]
	ldr r0, [r4]
	ldrb r0, [r0, #0x13]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r1, r0
	movs r0, #0x1a
	ldrsb r0, [r4, r0]
	adds r3, r1, r0
	movs r0, #0x19
	ldrsb r0, [r2, r0]
	movs r1, #2
	cmp r3, r0
	bne _08095726
	movs r1, #4
_08095726:
	adds r0, r6, #0
	adds r2, r3, #0
	bl sub_08006074
	ldr r2, _0809574C @ =0xFFFFFE80
	adds r0, r5, r2
	movs r2, #8
	ldrsb r2, [r4, r2]
	movs r1, #2
	bl sub_08006074
	movs r0, #4
	bl EnableBgSync
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08095748: .4byte 0x02023E0A
_0809574C: .4byte 0xFFFFFE80

	thumb_func_start sub_08095750
sub_08095750: @ 0x08095750
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r6, r0, #0
	adds r5, r1, #0
	ldr r4, _080957C0 @ =0x02012A70
	adds r0, r4, #0
	bl ClearText
	adds r4, #8
	adds r0, r4, #0
	bl ClearText
	movs r0, #1
	rsbs r0, r0, #0
	cmp r5, r0
	beq _080957EE
	lsls r1, r5, #1
	adds r0, r6, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r5, [r0]
	adds r0, r5, #0
	bl GetItemUseDescId
	adds r4, r0, #0
	ldr r0, _080957C4 @ =0x0842D03C
	ldr r1, [r0, #4]
	ldr r0, [r0]
	str r0, [sp]
	str r1, [sp, #4]
	cmp r4, #0
	beq _080957EE
	adds r0, r6, #0
	adds r1, r5, #0
	bl sub_080284C8
	cmp r0, #0
	beq _080957CC
	ldr r0, [sp]
	movs r1, #0
	bl Text_SetColor
	ldr r0, [sp, #4]
	movs r1, #0
	bl Text_SetColor
	adds r0, r4, #0
	bl DecodeMsg
	adds r1, r0, #0
	ldr r2, _080957C8 @ =0x02022FFE
	mov r0, sp
	movs r3, #2
	bl sub_08009E9C
	b _080957EE
	.align 2, 0
_080957C0: .4byte 0x02012A70
_080957C4: .4byte 0x0842D03C
_080957C8: .4byte 0x02022FFE
_080957CC:
	ldr r0, [sp]
	movs r1, #1
	bl Text_SetColor
	ldr r0, [sp, #4]
	movs r1, #1
	bl Text_SetColor
	adds r0, r4, #0
	bl DecodeMsg
	adds r1, r0, #0
	ldr r2, _080957FC @ =0x02022FFE
	mov r0, sp
	movs r3, #2
	bl sub_08009E9C
_080957EE:
	movs r0, #1
	bl EnableBgSync
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080957FC: .4byte 0x02022FFE

	thumb_func_start sub_08095800
sub_08095800: @ 0x08095800
	push {lr}
	sub sp, #4
	movs r3, #0xc8
	lsls r3, r3, #8
	ldr r0, [r0, #0x2c]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #4]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x80
	movs r2, #2
	bl sub_08026628
	bl sub_080259A4
	add sp, #4
	pop {r0}
	bx r0

	thumb_func_start sub_08095824
sub_08095824: @ 0x08095824
	movs r1, #0
	str r1, [r0, #0x30]
	movs r1, #0xff
	str r1, [r0, #0x38]
	bx lr
	.align 2, 0

	thumb_func_start sub_08095830
sub_08095830: @ 0x08095830
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x28
	adds r7, r0, #0
	add r1, sp, #8
	ldr r0, _08095B2C @ =0x0842D044
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r5, r6}
	stm r1!, {r2, r5, r6}
	ldm r0!, {r3, r4}
	stm r1!, {r3, r4}
	ldr r4, _08095B30 @ =gDispIo
	movs r0, #8
	rsbs r0, r0, #0
	ldrb r5, [r4]
	ands r0, r5
	strb r0, [r4]
	ldr r0, _08095B34 @ =0x08D8C0A0
	bl InitBgs
	add r0, sp, #8
	bl sub_080069E0
	movs r0, #0xff
	str r0, [r7, #0x34]
	movs r0, #0
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r2, #4
	rsbs r2, r2, #0
	adds r0, r2, #0
	ldrb r6, [r4, #0xc]
	ands r0, r6
	movs r1, #1
	orrs r0, r1
	strb r0, [r4, #0xc]
	adds r0, r2, #0
	ldrb r1, [r4, #0x10]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r4, #0x10]
	ldrb r3, [r4, #0x14]
	ands r2, r3
	strb r2, [r4, #0x14]
	movs r0, #3
	ldrb r5, [r4, #0x18]
	orrs r0, r5
	strb r0, [r4, #0x18]
	bl ResetText
	bl InitIcons
	bl sub_0804A9F8
	bl sub_08015A0C
	bl ApplyUnitSpritePalettes
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, _08095B38 @ =0x06014000
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_08082F74
	movs r0, #4
	bl ApplyIconPalettes
	bl sub_0808ED8C
	ldr r4, _08095B3C @ =0x02012A20
	movs r6, #4
	mov sl, r6
_08095904:
	adds r0, r4, #0
	movs r1, #7
	bl sub_0800536C
	adds r4, #8
	movs r0, #1
	rsbs r0, r0, #0
	add sl, r0
	mov r1, sl
	cmp r1, #0
	bge _08095904
	ldr r4, _08095B40 @ =0x020129A8
	movs r2, #7
	mov sl, r2
_08095920:
	adds r0, r4, #0
	movs r1, #3
	bl InitText
	adds r4, #8
	movs r3, #1
	rsbs r3, r3, #0
	add sl, r3
	mov r5, sl
	cmp r5, #0
	bge _08095920
	movs r6, #8
	mov sl, r6
	ldr r0, _08095B40 @ =0x020129A8
	mov r8, r0
	adds r0, #0x40
	movs r1, #7
	bl InitText
	mov r0, r8
	adds r0, #0xc8
	movs r1, #0xf
	bl InitText
	mov r0, r8
	adds r0, #0xd0
	movs r1, #0xf
	bl InitText
	mov r0, r8
	adds r0, #0xd8
	movs r1, #0xc
	bl InitText
	mov r0, r8
	adds r0, #0xe0
	movs r1, #8
	bl InitText
	ldr r0, [r7, #0x2c]
	bl sub_080952B0
	ldr r0, [r7, #0x2c]
	bl sub_080955D0
	ldr r0, [r7, #0x2c]
	movs r1, #0
	bl sub_08095430
	ldr r0, [r7, #0x2c]
	bl GetUnitPortraitId
	adds r1, r0, #0
	movs r3, #4
	rsbs r3, r3, #0
	ldr r0, _08095B44 @ =0x00000203
	str r0, [sp]
	movs r0, #0
	movs r2, #0x40
	bl sub_08007A5C
	movs r0, #0xc0
	lsls r0, r0, #7
	movs r1, #5
	bl sub_0809228C
	movs r0, #0xc0
	lsls r0, r0, #6
	movs r1, #0xa
	bl sub_080922DC
	ldr r0, _08095B48 @ =gBg1Tm
	ldr r1, _08095B4C @ =0x0842973C
	movs r2, #0xa6
	lsls r2, r2, #7
	bl TmApplyTsa_thm
	movs r0, #7
	bl EnableBgSync
	movs r1, #0xe0
	lsls r1, r1, #4
	movs r3, #0xc0
	lsls r3, r3, #4
	movs r2, #0
	str r2, [sp]
	str r7, [sp, #4]
	movs r0, #0xd
	movs r2, #0xf
	bl sub_080AAA50
	movs r1, #0x28
	rsbs r1, r1, #0
	movs r2, #1
	rsbs r2, r2, #0
	movs r0, #0
	movs r3, #1
	bl sub_080AAAD0
	ldr r0, [r7, #0x2c]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r4, r0, #0
	bl GetStringTextLen
	movs r3, #0x30
	subs r3, r3, r0
	lsrs r0, r3, #0x1f
	adds r3, r3, r0
	asrs r3, r3, #1
	movs r0, #6
	str r0, [sp]
	str r4, [sp, #4]
	movs r0, #0
	ldr r1, _08095B50 @ =gBg0Tm
	movs r2, #0
	bl PutDrawText
	adds r0, r7, #0
	bl sub_080A98C8
	adds r0, r7, #0
	bl sub_080AA390
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_080AA3B4
	ldr r0, _08095B54 @ =sub_08095800
	adds r1, r7, #0
	bl sub_080AA20C
	ldr r3, _08095B30 @ =gDispIo
	mov ip, r3
	movs r0, #0x20
	ldrb r4, [r3, #1]
	orrs r0, r4
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r3, #1]
	mov r1, ip
	adds r1, #0x2d
	movs r0, #0x68
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x6e
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x92
	strb r0, [r1]
	movs r0, #1
	ldr r5, _08095B58 @ =0x030027C4
	ldrb r1, [r5]
	orrs r1, r0
	movs r6, #2
	orrs r1, r6
	movs r4, #4
	orrs r1, r4
	movs r3, #8
	orrs r1, r3
	movs r2, #0x10
	orrs r1, r2
	movs r5, #0x36
	add r5, ip
	mov sb, r5
	ldrb r6, [r5]
	orrs r0, r6
	movs r5, #2
	orrs r0, r5
	orrs r0, r4
	orrs r0, r3
	orrs r0, r2
	movs r6, #0x20
	orrs r1, r6
	ldr r2, _08095B58 @ =0x030027C4
	strb r1, [r2]
	movs r1, #0x21
	rsbs r1, r1, #0
	ands r0, r1
	mov r3, sb
	strb r0, [r3]
	mov r1, ip
	adds r1, #0x3c
	movs r0, #0xc0
	ldrb r4, [r1]
	orrs r0, r4
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x44
	movs r5, #0
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
	adds r0, #1
	mov r6, sl
	strb r6, [r0]
	ldr r0, _08095B5C @ =0x0000FFE0
	mov r1, ip
	ldrh r1, [r1, #0x3c]
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	mov r2, ip
	strh r0, [r2, #0x3c]
	adds r0, r7, #0
	bl sub_08005E88
	movs r0, #0xc0
	movs r1, #0x8c
	adds r2, r7, #0
	bl sub_08082D1C
	ldr r0, [r7, #0x2c]
	ldr r1, [r7, #0x30]
	bl sub_08095750
	mov r1, r8
	adds r1, #0x78
	ldr r2, [r7, #0x2c]
	ldr r0, _08095B60 @ =0x02022EA4
	movs r3, #1
	bl sub_08094AC0
	ldr r1, [r7, #0x30]
	asrs r2, r1, #3
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	movs r2, #7
	ands r1, r2
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #0xb
	bl sub_080AA3F8
	ldr r0, [r7, #0x2c]
	bl GetUnitSMSId
	bl sub_08025278
	bl sub_08025A0C
	add sp, #0x28
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08095B2C: .4byte 0x0842D044
_08095B30: .4byte gDispIo
_08095B34: .4byte 0x08D8C0A0
_08095B38: .4byte 0x06014000
_08095B3C: .4byte 0x02012A20
_08095B40: .4byte 0x020129A8
_08095B44: .4byte 0x00000203
_08095B48: .4byte gBg1Tm
_08095B4C: .4byte 0x0842973C
_08095B50: .4byte gBg0Tm
_08095B54: .4byte sub_08095800
_08095B58: .4byte 0x030027C4
_08095B5C: .4byte 0x0000FFE0
_08095B60: .4byte 0x02022EA4

	thumb_func_start sub_08095B64
sub_08095B64: @ 0x08095B64
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x38]
	cmp r0, #0xff
	beq _08095B8C
	ldr r0, _08095B88 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08095C40
	bl sub_080828A4
	movs r0, #0xff
	b _08095C88
	.align 2, 0
_08095B88: .4byte gpKeySt
_08095B8C:
	ldr r0, _08095BEC @ =gpKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	bne _08095C6C
	movs r5, #1
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _08095C14
	ldr r0, [r4, #0x2c]
	ldr r2, [r4, #0x30]
	lsls r2, r2, #1
	adds r1, r0, #0
	adds r1, #0x1e
	adds r1, r1, r2
	ldrh r1, [r1]
	bl sub_080284C8
	cmp r0, #0
	beq _08095BF8
	ldr r2, [r4, #0x30]
	str r2, [r4, #0x34]
	lsls r2, r2, #4
	adds r2, #0x48
	movs r0, #0
	movs r1, #0x10
	movs r3, #0
	bl sub_080A98DC
	str r5, [r4, #0x3c]
	ldr r0, _08095BF0 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08095BE2
	ldr r0, _08095BF4 @ =0x0000038A
	bl m4aSongNumStart
_08095BE2:
	adds r0, r4, #0
	movs r1, #2
	bl Proc_Goto
	b _08095C8A
	.align 2, 0
_08095BEC: .4byte gpKeySt
_08095BF0: .4byte gPlaySt
_08095BF4: .4byte 0x0000038A
_08095BF8:
	ldr r0, _08095C10 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08095C8A
	movs r0, #0xe3
	lsls r0, r0, #2
	bl m4aSongNumStart
	b _08095C8A
	.align 2, 0
_08095C10: .4byte gPlaySt
_08095C14:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08095C40
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
	ldr r0, _08095C38 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08095C8A
	ldr r0, _08095C3C @ =0x0000038B
	bl m4aSongNumStart
	b _08095C8A
	.align 2, 0
_08095C38: .4byte gPlaySt
_08095C3C: .4byte 0x0000038B
_08095C40:
	adds r0, r4, #0
	bl sub_0809521C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08095C8A
	ldr r1, [r4, #0x30]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl sub_080AA3F8
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	bl sub_08095750
	ldr r0, [r4, #0x38]
	cmp r0, #0xff
	beq _08095C8A
_08095C6C:
	ldr r0, [r4, #0x2c]
	ldr r3, [r4, #0x30]
	lsls r1, r3, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	beq _08095C8A
	lsls r1, r3, #4
	adds r1, #0x48
	movs r0, #0x10
	bl sub_080826EC
	ldr r0, [r4, #0x30]
_08095C88:
	str r0, [r4, #0x38]
_08095C8A:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08095C90
sub_08095C90: @ 0x08095C90
	push {lr}
	bl sub_0808EDB0
	movs r0, #0
	bl EndFaceById
	movs r0, #1
	bl EndFaceById
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08095CA8
sub_08095CA8: @ 0x08095CA8
	push {r4, r5, r6, lr}
	sub sp, #8
	ldr r4, _08095D08 @ =0x02012A80
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	adds r4, #8
	ldr r5, _08095D0C @ =0x02023FC4
	movs r6, #0
	str r6, [sp]
	ldr r1, _08095D10 @ =0x0842D064
	str r1, [sp, #4]
	adds r1, r5, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	adds r0, r4, #0
	bl ClearText
	adds r5, #0x82
	str r6, [sp]
	ldr r0, _08095D14 @ =0x0842D07C
	str r0, [sp, #4]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	str r6, [sp]
	ldr r0, _08095D18 @ =0x0842D084
	str r0, [sp, #4]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #0
	movs r3, #0x20
	bl PutDrawText
	movs r0, #4
	bl EnableBgSync
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08095D08: .4byte 0x02012A80
_08095D0C: .4byte 0x02023FC4
_08095D10: .4byte 0x0842D064
_08095D14: .4byte 0x0842D07C
_08095D18: .4byte 0x0842D084

	thumb_func_start sub_08095D1C
sub_08095D1C: @ 0x08095D1C
	push {lr}
	ldr r0, _08095D34 @ =0x02023FC4
	movs r1, #0xc
	movs r2, #4
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #4
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
_08095D34: .4byte 0x02023FC4

	thumb_func_start sub_08095D38
sub_08095D38: @ 0x08095D38
	push {r4, lr}
	adds r4, r0, #0
	bl sub_08095CA8
	ldr r0, [r4, #0x3c]
	lsls r0, r0, #5
	adds r0, #0x94
	movs r3, #0x80
	lsls r3, r3, #4
	movs r1, #0x78
	movs r2, #0
	bl sub_080AA3F8
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_08095D58
sub_08095D58: @ 0x08095D58
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r7, [r4, #0x3c]
	ldr r0, _08095DB0 @ =0x0000A580
	str r0, [sp]
	movs r0, #0x88
	movs r1, #0x64
	movs r2, #0xb
	movs r3, #4
	bl sub_080935C4
	ldr r5, _08095DB4 @ =gpKeySt
	ldr r1, [r5]
	ldrh r3, [r1, #8]
	movs r0, #2
	ands r0, r3
	cmp r0, #0
	beq _08095DC0
	ldr r1, [r4, #0x30]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl sub_080AA3F8
	movs r0, #0
	bl sub_080A998C
	bl sub_08095D1C
	ldr r0, _08095DB8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08095E26
	ldr r0, _08095DBC @ =0x0000038B
	bl m4aSongNumStart
	b _08095E26
	.align 2, 0
_08095DB0: .4byte 0x0000A580
_08095DB4: .4byte gpKeySt
_08095DB8: .4byte gPlaySt
_08095DBC: .4byte 0x0000038B
_08095DC0:
	movs r6, #1
	adds r2, r6, #0
	ands r2, r3
	cmp r2, #0
	beq _08095E38
	bl sub_08095D1C
	ldr r0, [r4, #0x3c]
	cmp r0, #0
	bne _08095DFC
	bl sub_080AA440
	ldr r0, _08095DF4 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08095DEA
	ldr r0, _08095DF8 @ =0x0000038A
	bl m4aSongNumStart
_08095DEA:
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
	b _08095E7A
	.align 2, 0
_08095DF4: .4byte gPlaySt
_08095DF8: .4byte 0x0000038A
_08095DFC:
	ldr r1, [r4, #0x30]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl sub_080AA3F8
	ldr r0, _08095E30 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08095E20
	ldr r0, _08095E34 @ =0x0000038B
	bl m4aSongNumStart
_08095E20:
	movs r0, #0
	bl sub_080A998C
_08095E26:
	adds r0, r4, #0
	bl Proc_Break
	b _08095E7A
	.align 2, 0
_08095E30: .4byte gPlaySt
_08095E34: .4byte 0x0000038B
_08095E38:
	movs r0, #0x20
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _08095E44
	str r2, [r4, #0x3c]
_08095E44:
	ldr r1, [r5]
	movs r0, #0x10
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _08095E52
	str r6, [r4, #0x3c]
_08095E52:
	ldr r0, [r4, #0x3c]
	cmp r7, r0
	beq _08095E7A
	lsls r0, r0, #5
	adds r0, #0x94
	movs r3, #0x80
	lsls r3, r3, #4
	movs r1, #0x78
	movs r2, #0
	bl sub_080AA3F8
	ldr r0, _08095E84 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08095E7A
	ldr r0, _08095E88 @ =0x00000387
	bl m4aSongNumStart
_08095E7A:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08095E84: .4byte gPlaySt
_08095E88: .4byte 0x00000387

	thumb_func_start sub_08095E8C
sub_08095E8C: @ 0x08095E8C
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x2c]
	ldr r0, [r4, #0x30]
	lsls r0, r0, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldrh r0, [r1]
	bl GetItemIndex
	subs r0, #0x63
	cmp r0, #0x33
	bhi _08095F9E
	lsls r0, r0, #2
	ldr r1, _08095EB0 @ =_08095EB4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08095EB0: .4byte _08095EB4
_08095EB4: @ jump table
	.4byte _08095F84 @ case 0
	.4byte _08095F84 @ case 1
	.4byte _08095F84 @ case 2
	.4byte _08095F84 @ case 3
	.4byte _08095F84 @ case 4
	.4byte _08095F9E @ case 5
	.4byte _08095F9E @ case 6
	.4byte _08095F9E @ case 7
	.4byte _08095F9E @ case 8
	.4byte _08095F9E @ case 9
	.4byte _08095F9E @ case 10
	.4byte _08095F9E @ case 11
	.4byte _08095F9E @ case 12
	.4byte _08095F9E @ case 13
	.4byte _08095F9E @ case 14
	.4byte _08095F9E @ case 15
	.4byte _08095F9E @ case 16
	.4byte _08095F9E @ case 17
	.4byte _08095F9E @ case 18
	.4byte _08095F9E @ case 19
	.4byte _08095F9E @ case 20
	.4byte _08095F9E @ case 21
	.4byte _08095F9E @ case 22
	.4byte _08095F9E @ case 23
	.4byte _08095F9E @ case 24
	.4byte _08095F9E @ case 25
	.4byte _08095F9E @ case 26
	.4byte _08095F9E @ case 27
	.4byte _08095F9E @ case 28
	.4byte _08095F9E @ case 29
	.4byte _08095F9E @ case 30
	.4byte _08095F9E @ case 31
	.4byte _08095F9E @ case 32
	.4byte _08095F9E @ case 33
	.4byte _08095F9E @ case 34
	.4byte _08095F9E @ case 35
	.4byte _08095F84 @ case 36
	.4byte _08095F9E @ case 37
	.4byte _08095F84 @ case 38
	.4byte _08095F9E @ case 39
	.4byte _08095F84 @ case 40
	.4byte _08095F9E @ case 41
	.4byte _08095F9E @ case 42
	.4byte _08095F9E @ case 43
	.4byte _08095F9E @ case 44
	.4byte _08095F9E @ case 45
	.4byte _08095F9E @ case 46
	.4byte _08095F9E @ case 47
	.4byte _08095F9E @ case 48
	.4byte _08095F9E @ case 49
	.4byte _08095F9E @ case 50
	.4byte _08095F84 @ case 51
_08095F84:
	ldr r0, _08095FA4 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08095F96
	ldr r0, _08095FA8 @ =0x0000038A
	bl m4aSongNumStart
_08095F96:
	adds r0, r4, #0
	movs r1, #4
	bl Proc_Goto
_08095F9E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08095FA4: .4byte gPlaySt
_08095FA8: .4byte 0x0000038A

	thumb_func_start sub_08095FAC
sub_08095FAC: @ 0x08095FAC
	push {r4, lr}
	adds r4, r0, #0
	bl sub_0808EDB0
	bl ResetText
	movs r0, #0
	bl InitBgs
	bl sub_08005EAC
	bl sub_080157A4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [r4, #0x40]
	bl sub_080069C4
	bl sub_08082D74
	ldr r3, _08096050 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r3, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r3, #1]
	adds r2, r3, #0
	adds r2, #0x34
	movs r0, #0x20
	ldrb r1, [r2]
	orrs r1, r0
	strb r1, [r2]
	adds r1, r3, #0
	adds r1, #0x36
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	adds r1, #6
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x46
	movs r0, #8
	strb r0, [r1]
	bl sub_080AAB64
	bl sub_080AA230
	movs r0, #0
	bl EndFaceById
	movs r0, #0
	bl sub_080A998C
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	movs r2, #0
	bl sub_0802D06C
	ldr r1, _08096054 @ =gBattleStats
	movs r0, #0x88
	lsls r0, r0, #1
	strh r0, [r1]
	bl BeginBattleAnimations
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08096050: .4byte gDispIo
_08096054: .4byte gBattleStats

	thumb_func_start sub_08096058
sub_08096058: @ 0x08096058
	push {r4, lr}
	adds r4, r0, #0
	bl sub_080157A4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, [r4, #0x40]
	cmp r1, r0
	bne _08096070
	adds r0, r4, #0
	bl Proc_Break
_08096070:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08096078
sub_08096078: @ 0x08096078
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r1, r0, #0
	cmp r1, #0
	bne _08096092
	adds r0, r4, #0
	movs r1, #6
	bl Proc_Goto
	b _080960A2
_08096092:
	ldr r0, [r4, #0x30]
	cmp r0, r1
	blt _0809609C
	subs r0, #1
	str r0, [r4, #0x30]
_0809609C:
	adds r0, r4, #0
	bl Proc_Break
_080960A2:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080960A8
sub_080960A8: @ 0x080960A8
	push {lr}
	sub sp, #4
	movs r2, #0x80
	lsls r2, r2, #1
	movs r0, #0
	str r0, [sp]
	movs r0, #0x49
	adds r1, r2, #0
	movs r3, #0x20
	bl sub_08003FD4
	add sp, #4
	pop {r0}
	bx r0

	thumb_func_start sub_080960C4
sub_080960C4: @ 0x080960C4
	push {lr}
	sub sp, #4
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0
	str r0, [sp]
	movs r2, #0
	movs r3, #0x10
	bl sub_08003FD4
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080960E0
sub_080960E0: @ 0x080960E0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080960F4 @ =0x08D8CFBC
	bl Proc_StartBlocking
	str r4, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080960F4: .4byte 0x08D8CFBC

	thumb_func_start sub_080960F8
sub_080960F8: @ 0x080960F8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r6, r0, #0
	adds r5, r1, #0
	adds r7, r2, #0
	adds r0, r3, #0
	bl DecodeMsg
	mov sb, r0
	ldr r0, [sp, #0x28]
	bl sub_08017808
	mov r8, r0
	mov r0, sb
	bl GetStringTextLen
	mov sl, r0
	mov r0, r8
	cmp r0, #0
	beq _08096144
	lsls r4, r7, #5
	adds r4, r4, r5
	lsls r4, r4, #1
	ldr r0, _080961B0 @ =gBg2Tm
	adds r4, r4, r0
	ldr r0, [sp, #0x28]
	bl sub_08017808
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r4, #0
	bl PutIcon
_08096144:
	ldr r4, _080961B4 @ =0x02012A80
	adds r0, r4, #0
	bl ClearText
	lsls r0, r7, #5
	mov r1, r8
	cmp r1, #0
	beq _08096156
	adds r0, #2
_08096156:
	adds r0, r0, r5
	lsls r0, r0, #1
	ldr r1, _080961B0 @ =gBg2Tm
	adds r1, r0, r1
	movs r0, #0
	str r0, [sp]
	mov r0, sb
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	movs r0, #4
	bl EnableBgSync
	lsls r0, r5, #3
	subs r0, #4
	str r0, [r6, #0x40]
	lsls r0, r7, #3
	subs r0, #4
	str r0, [r6, #0x44]
	mov r0, sl
	cmp r0, #0
	bge _0809618A
	adds r0, #7
_0809618A:
	asrs r1, r0, #3
	adds r0, r1, #1
	str r0, [r6, #0x48]
	mov r0, r8
	cmp r0, #0
	beq _0809619A
	adds r0, r1, #3
	str r0, [r6, #0x48]
_0809619A:
	movs r0, #2
	str r0, [r6, #0x4c]
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080961B0: .4byte gBg2Tm
_080961B4: .4byte 0x02012A80

	thumb_func_start sub_080961B8
sub_080961B8: @ 0x080961B8
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldr r4, [r7, #0x14]
	movs r0, #0xe0
	lsls r0, r0, #1
	movs r1, #3
	movs r2, #0
	adds r3, r7, #0
	bl sub_08074C70
	ldr r0, [r4, #0x2c]
	bl GetUnitCurrentHp
	adds r1, r7, #0
	adds r1, #0x30
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitPower
	adds r1, r7, #0
	adds r1, #0x31
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitSkill
	adds r1, r7, #0
	adds r1, #0x32
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitSpeed
	adds r1, r7, #0
	adds r1, #0x33
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitLuck
	adds r1, r7, #0
	adds r1, #0x34
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitDefense
	adds r1, r7, #0
	adds r1, #0x35
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitResistance
	adds r1, r7, #0
	adds r1, #0x36
	strb r0, [r1]
	ldr r1, [r4, #0x2c]
	ldr r2, [r1, #4]
	ldr r0, [r1]
	ldrb r2, [r2, #0x11]
	ldrb r0, [r0, #0x13]
	adds r0, r2, r0
	ldrb r1, [r1, #0x1a]
	adds r0, r1, r0
	adds r1, r7, #0
	adds r1, #0x37
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	lsls r3, r1, #1
	adds r2, r0, #0
	adds r2, #0x1e
	adds r2, r2, r3
	ldrh r5, [r2]
	bl sub_0802D1E8
	adds r6, r0, #0
	ldr r0, [r4, #0x2c]
	movs r1, #0
	bl sub_08095430
	ldr r0, [r4, #0x2c]
	bl sub_080955D0
	ldr r0, [r4, #0x2c]
	bl GetUnitCurrentHp
	adds r1, r7, #0
	adds r1, #0x38
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitPower
	adds r1, r7, #0
	adds r1, #0x39
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitSkill
	adds r1, r7, #0
	adds r1, #0x3a
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitSpeed
	adds r1, r7, #0
	adds r1, #0x3b
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitLuck
	adds r1, r7, #0
	adds r1, #0x3c
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitDefense
	adds r1, r7, #0
	adds r1, #0x3d
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitResistance
	adds r1, r7, #0
	adds r1, #0x3e
	strb r0, [r1]
	ldr r1, [r4, #0x2c]
	ldr r2, [r1, #4]
	ldr r0, [r1]
	ldrb r2, [r2, #0x11]
	ldrb r0, [r0, #0x13]
	adds r0, r2, r0
	ldrb r1, [r1, #0x1a]
	adds r0, r1, r0
	adds r1, r7, #0
	adds r1, #0x3f
	strb r0, [r1]
	str r5, [sp]
	adds r0, r7, #0
	movs r1, #0x11
	movs r2, #0xe
	adds r3, r6, #0
	bl sub_080960F8
	movs r4, #0
_080962D4:
	adds r0, r7, #0
	adds r0, #0x30
	adds r3, r0, r4
	adds r0, #8
	adds r2, r0, r4
	ldrb r0, [r3]
	ldrb r1, [r2]
	cmp r0, r1
	beq _08096302
	asrs r1, r4, #2
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, #0xb8
	movs r1, #3
	ands r1, r4
	lsls r1, r1, #4
	adds r1, #0x32
	ldrb r2, [r2]
	ldrb r3, [r3]
	subs r2, r2, r3
	bl sub_08074F40
_08096302:
	adds r4, #1
	cmp r4, #7
	ble _080962D4
	movs r0, #0x78
	str r0, [r7, #0x2c]
	ldr r0, _08096328 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809631E
	ldr r0, _0809632C @ =0x0000037A
	bl m4aSongNumStart
_0809631E:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08096328: .4byte gPlaySt
_0809632C: .4byte 0x0000037A

	thumb_func_start sub_08096330
sub_08096330: @ 0x08096330
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, [r5, #0x40]
	ldr r1, [r5, #0x44]
	ldr r2, [r5, #0x48]
	ldr r3, [r5, #0x4c]
	ldr r4, _0809636C @ =0x0000A580
	str r4, [sp]
	bl sub_080935C4
	ldr r0, [r5, #0x2c]
	subs r0, #1
	str r0, [r5, #0x2c]
	cmp r0, #0
	beq _0809635E
	ldr r0, _08096370 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #3
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08096364
_0809635E:
	adds r0, r5, #0
	bl Proc_Break
_08096364:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809636C: .4byte 0x0000A580
_08096370: .4byte gpKeySt

	thumb_func_start sub_08096374
sub_08096374: @ 0x08096374
	push {r4, r5, lr}
	ldr r4, [r0, #0x14]
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r5, r0, #0
	ldr r0, _0809639C @ =0x02024002
	movs r1, #0xc
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	cmp r5, #0
	bne _080963A0
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
	b _080963BC
	.align 2, 0
_0809639C: .4byte 0x02024002
_080963A0:
	ldr r0, [r4, #0x30]
	cmp r0, r5
	blt _080963AA
	subs r0, #1
	str r0, [r4, #0x30]
_080963AA:
	ldr r1, [r4, #0x30]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl sub_080AA3F8
_080963BC:
	ldr r0, _080963F0 @ =0x02022EA4
	ldr r1, _080963F4 @ =0x02012A20
	ldr r2, [r4, #0x2c]
	movs r3, #1
	bl sub_08094AC0
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	bl sub_08095750
	movs r0, #0
	bl sub_080A998C
	bl sub_08074D38
	movs r0, #5
	bl EnableBgSync
	ldr r0, _080963F8 @ =0x06014000
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_08082F74
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080963F0: .4byte 0x02022EA4
_080963F4: .4byte 0x02012A20
_080963F8: .4byte 0x06014000

	thumb_func_start sub_080963FC
sub_080963FC: @ 0x080963FC
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r6, _08096428 @ =0x0000DFC0
	movs r5, #0x30
	movs r4, #3
_08096406:
	str r6, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x10
	ldr r3, _0809642C @ =0x08BFF7A8
	bl sub_080068C4
	adds r6, #4
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge _08096406
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08096428: .4byte 0x0000DFC0
_0809642C: .4byte 0x08BFF7A8

	thumb_func_start sub_08096430
sub_08096430: @ 0x08096430
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, _0809645C @ =sub_080963FC
	bl sub_080AA20C
	movs r0, #0xf0
	lsls r0, r0, #7
	ldr r1, _08096460 @ =0x08D8D10C
	lsls r4, r4, #2
	adds r4, r4, r1
	ldr r2, [r4]
	movs r1, #0
	str r1, [sp]
	movs r1, #0xd
	movs r3, #1
	bl sub_080AABE4
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809645C: .4byte sub_080963FC
_08096460: .4byte 0x08D8D10C

	thumb_func_start sub_08096464
sub_08096464: @ 0x08096464
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08096490 @ =0x0841E7F4
	lsls r1, r1, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08096494 @ =0x0841E49C
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r4, r2
	bl sub_08013688
	ldr r0, _08096498 @ =0x0841E634
	ldr r1, _0809649C @ =0x06000200
	adds r4, r4, r1
	adds r1, r4, #0
	bl sub_08013688
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08096490: .4byte 0x0841E7F4
_08096494: .4byte 0x0841E49C
_08096498: .4byte 0x0841E634
_0809649C: .4byte 0x06000200

	thumb_func_start sub_080964A0
sub_080964A0: @ 0x080964A0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	str r0, [sp]
	mov sl, r1
	str r2, [sp, #4]
	str r3, [sp, #8]
	mov r0, sl
	movs r1, #0xc
	movs r2, #0x1f
	movs r3, #0
	bl TmFillRect_thm
	ldr r1, _080964E8 @ =0x02012466
	ldrh r0, [r1]
	cmp r0, #0
	bne _080964F0
	ldr r0, [sp]
	bl ClearText
	ldr r3, _080964EC @ =0x0842D0C4
	ldr r0, [sp]
	movs r1, #0
	movs r2, #1
	bl Text_InsertDrawString
	mov r1, sl
	adds r1, #6
	ldr r0, [sp]
	bl PutText
	b _0809659A
	.align 2, 0
_080964E8: .4byte 0x02012466
_080964EC: .4byte 0x0842D0C4
_080964F0:
	ldr r6, [sp, #4]
	adds r0, r6, #7
	cmp r6, r0
	bge _0809659A
	ldrh r1, [r1]
	cmp r6, r1
	bge _0809659A
_080964FE:
	movs r0, #7
	ands r0, r6
	lsls r0, r0, #3
	ldr r1, [sp]
	adds r1, r1, r0
	mov r8, r1
	ldr r1, _080965AC @ =0x020117E4
	lsls r0, r6, #2
	adds r0, r0, r1
	ldrh r7, [r0, #2]
	ldr r0, [sp, #8]
	adds r1, r7, #0
	bl sub_08016F04
	movs r1, #0
	mov sb, r1
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08096528
	movs r0, #1
	mov sb, r0
_08096528:
	mov r0, r8
	bl ClearText
	adds r0, r7, #0
	bl GetItemName
	adds r3, r0, #0
	mov r0, r8
	movs r1, #0
	mov r2, sb
	bl Text_InsertDrawString
	lsls r5, r6, #1
	movs r0, #0x1f
	ands r5, r0
	lsls r5, r5, #6
	adds r4, r5, #2
	add r4, sl
	adds r0, r7, #0
	bl sub_08017808
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #0x80
	lsls r2, r2, #7
	bl PutIcon
	adds r1, r5, #6
	add r1, sl
	mov r0, r8
	bl PutText
	adds r5, #0x18
	mov r1, sl
	adds r4, r1, r5
	movs r5, #1
	mov r0, sb
	cmp r0, #0
	bne _08096578
	movs r5, #2
_08096578:
	adds r0, r7, #0
	bl GetItemUses
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_08006074
	adds r6, #1
	ldr r0, [sp, #4]
	adds r0, #7
	cmp r6, r0
	bge _0809659A
	ldr r0, _080965B0 @ =0x02012466
	ldrh r0, [r0]
	cmp r6, r0
	blt _080964FE
_0809659A:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080965AC: .4byte 0x020117E4
_080965B0: .4byte 0x02012466

	thumb_func_start sub_080965B4
sub_080965B4: @ 0x080965B4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	adds r5, r1, #0
	adds r7, r5, #0
	adds r0, r5, #7
	cmp r5, r0
	bge _08096604
	ldr r0, _08096610 @ =0x02012466
	ldrh r0, [r0]
	cmp r5, r0
	bge _08096604
	ldr r1, _08096614 @ =0x020117E4
	lsls r0, r5, #2
	adds r6, r0, r1
_080965D4:
	ldrh r0, [r6, #2]
	lsls r4, r5, #1
	movs r1, #0x1f
	ands r4, r1
	lsls r4, r4, #6
	adds r4, #2
	add r4, r8
	bl sub_08017808
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #0x80
	lsls r2, r2, #7
	bl PutIcon
	adds r6, #4
	adds r5, #1
	adds r0, r7, #7
	cmp r5, r0
	bge _08096604
	ldr r0, _08096610 @ =0x02012466
	ldrh r0, [r0]
	cmp r5, r0
	blt _080965D4
_08096604:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08096610: .4byte 0x02012466
_08096614: .4byte 0x020117E4

	thumb_func_start sub_08096618
sub_08096618: @ 0x08096618
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r5, r0, #0
	mov sb, r1
	ldr r0, _080966C4 @ =0x02012466
	ldrh r0, [r0]
	cmp r0, r2
	ble _080966B8
	lsls r4, r2, #1
	movs r0, #0x1f
	ands r4, r0
	movs r0, #7
	ands r0, r2
	lsls r0, r0, #3
	adds r7, r5, r0
	ldr r1, _080966C8 @ =0x020117E4
	lsls r0, r2, #2
	adds r0, r0, r1
	ldrh r6, [r0, #2]
	adds r0, r3, #0
	adds r1, r6, #0
	bl sub_08016F04
	movs r1, #0
	mov r8, r1
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08096658
	movs r0, #1
	mov r8, r0
_08096658:
	lsls r4, r4, #6
	add r4, sb
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	adds r0, r7, #0
	bl ClearText
	adds r0, r6, #0
	bl GetItemName
	adds r3, r0, #0
	adds r0, r7, #0
	movs r1, #0
	mov r2, r8
	bl Text_InsertDrawString
	adds r5, r4, #2
	adds r0, r6, #0
	bl sub_08017808
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r5, #0
	bl PutIcon
	adds r1, r4, #6
	adds r0, r7, #0
	bl PutText
	adds r4, #0x18
	movs r5, #1
	mov r1, r8
	cmp r1, #0
	bne _080966A8
	movs r5, #2
_080966A8:
	adds r0, r6, #0
	bl GetItemUses
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_08006074
_080966B8:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080966C4: .4byte 0x02012466
_080966C8: .4byte 0x020117E4

	thumb_func_start sub_080966CC
sub_080966CC: @ 0x080966CC
	ldr r0, _08096700 @ =0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0xa0
	bls _080966DC
	movs r2, #0
_080966DC:
	cmp r2, #0xc
	bne _080966EC
	ldr r1, _08096704 @ =0x04000050
	movs r0, #0xc8
	strh r0, [r1]
	adds r1, #4
	movs r0, #8
	strh r0, [r1]
_080966EC:
	cmp r2, #0x34
	beq _080966F4
	cmp r2, #0
	bne _080966FE
_080966F4:
	ldr r0, _08096704 @ =0x04000050
	movs r1, #0
	strh r1, [r0]
	adds r0, #4
	strh r1, [r0]
_080966FE:
	bx lr
	.align 2, 0
_08096700: .4byte 0x04000006
_08096704: .4byte 0x04000050

	thumb_func_start sub_08096708
sub_08096708: @ 0x08096708
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	strh r0, [r4, #0x38]
	movs r0, #0xff
	strh r0, [r4, #0x36]
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	cmp r0, #0
	bne _08096726
	adds r1, r4, #0
	adds r1, #0x33
	movs r0, #1
	b _0809672C
_08096726:
	adds r1, r4, #0
	adds r1, #0x33
	movs r0, #0
_0809672C:
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	bne _0809674C
	ldr r0, _08096748 @ =0x08D8C154
	bl Proc_Find
	adds r0, #0x32
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x35
	b _08096752
	.align 2, 0
_08096748: .4byte 0x08D8C154
_0809674C:
	adds r1, r4, #0
	adds r1, #0x35
	movs r0, #0
_08096752:
	strb r0, [r1]
	adds r2, r4, #0
	adds r2, #0x32
	movs r1, #0
	movs r0, #4
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x31
	strb r1, [r0]
	movs r3, #0
	adds r1, r4, #0
	adds r1, #0x4c
	adds r0, #9
	movs r2, #8
_0809676E:
	strh r3, [r0]
	strh r3, [r1]
	adds r1, #2
	adds r0, #2
	subs r2, #1
	cmp r2, #0
	bge _0809676E
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08096784
sub_08096784: @ 0x08096784
	push {r4, lr}
	ldr r4, _080967B4 @ =0x02012B50
	ldr r1, _080967B8 @ =0x06011000
	adds r0, r4, #0
	movs r2, #0xb
	bl InitSpriteTextFont
	ldr r0, _080967BC @ =0x081901C8
	movs r1, #0xd8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	adds r4, #0x90
	adds r0, r4, #0
	bl InitSpriteText
	movs r0, #0
	bl SetTextFont
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080967B4: .4byte 0x02012B50
_080967B8: .4byte 0x06011000
_080967BC: .4byte 0x081901C8

	thumb_func_start sub_080967C0
sub_080967C0: @ 0x080967C0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	bl sub_0809158C
	adds r5, r0, #0
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r6, r0, #0
	ldr r4, _08096824 @ =0x02012B50
	adds r0, r4, #0
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	adds r4, #0x90
	adds r0, r4, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	adds r0, r4, #0
	movs r2, #0
	cmp r5, #0x64
	beq _080967FA
	cmp r6, #0
	bne _080967FC
_080967FA:
	movs r2, #1
_080967FC:
	ldr r3, _08096828 @ =0x0842D0D4
	movs r1, #0
	bl Text_InsertDrawString
	ldr r0, _0809682C @ =0x02012BE0
	movs r2, #0
	cmp r6, #5
	bne _0809680E
	movs r2, #1
_0809680E:
	ldr r3, _08096830 @ =0x0842D0E0
	movs r1, #0x40
	bl Text_InsertDrawString
	movs r0, #0
	bl SetTextFont
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08096824: .4byte 0x02012B50
_08096828: .4byte 0x0842D0D4
_0809682C: .4byte 0x02012BE0
_08096830: .4byte 0x0842D0E0

	thumb_func_start sub_08096834
sub_08096834: @ 0x08096834
	push {r4, r5, r6, lr}
	sub sp, #8
	movs r0, #0
	bl SetTextFont
	ldr r6, _080968D8 @ =0x02022CC8
	adds r0, r6, #0
	movs r1, #0xc
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	ldr r4, _080968DC @ =0x02012B68
	adds r1, r6, #0
	adds r1, #0xda
	movs r5, #0
	str r5, [sp]
	ldr r0, _080968E0 @ =0x0842D0EC
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0
	movs r3, #2
	bl PutDrawText
	adds r1, r6, #0
	subs r1, #0x26
	movs r2, #0x9c
	lsls r2, r2, #2
	movs r0, #1
	str r0, [sp]
	movs r0, #0x4a
	movs r3, #2
	bl sub_08006E10
	adds r4, #8
	str r5, [sp]
	ldr r0, _080968E4 @ =0x0842D0F4
	str r0, [sp, #4]
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	adds r5, r6, #0
	adds r5, #0xa
	bl sub_0809158C
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r4, #2
	cmp r0, #0x64
	bne _080968A0
	movs r4, #4
_080968A0:
	bl sub_0809158C
	adds r2, r0, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_08006068
	adds r0, r6, #0
	adds r0, #0xc
	movs r1, #0
	movs r2, #0x16
	bl sub_08005FEC
	adds r0, r6, #0
	adds r0, #0x12
	movs r1, #2
	movs r2, #0x64
	bl sub_08006068
	movs r0, #1
	bl EnableBgSync
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080968D8: .4byte 0x02022CC8
_080968DC: .4byte 0x02012B68
_080968E0: .4byte 0x0842D0EC
_080968E4: .4byte 0x0842D0F4

	thumb_func_start sub_080968E8
sub_080968E8: @ 0x080968E8
	push {r4, lr}
	sub sp, #4
	ldr r0, _08096928 @ =0x0000A980
	str r0, [sp]
	movs r0, #0x40
	movs r1, #0x22
	movs r2, #5
	movs r3, #4
	bl sub_080935C4
	ldr r4, _0809692C @ =0x08BFF7A8
	ldr r0, _08096930 @ =0x0000B080
	str r0, [sp]
	movs r0, #4
	movs r1, #0x48
	movs r2, #0x26
	adds r3, r4, #0
	bl sub_080068C4
	ldr r0, _08096934 @ =0x0000B088
	str r0, [sp]
	movs r0, #4
	movs r1, #0x48
	movs r2, #0x36
	adds r3, r4, #0
	bl sub_080068C4
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08096928: .4byte 0x0000A980
_0809692C: .4byte 0x08BFF7A8
_08096930: .4byte 0x0000B080
_08096934: .4byte 0x0000B088

	thumb_func_start sub_08096938
sub_08096938: @ 0x08096938
	push {lr}
	sub sp, #4
	ldr r0, _08096964 @ =0x0000A980
	str r0, [sp]
	movs r0, #0x40
	movs r1, #0x22
	movs r2, #5
	movs r3, #2
	bl sub_080935C4
	ldr r3, _08096968 @ =0x08BFF7A8
	ldr r0, _0809696C @ =0x0000B080
	str r0, [sp]
	movs r0, #4
	movs r1, #0x48
	movs r2, #0x26
	bl sub_080068C4
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_08096964: .4byte 0x0000A980
_08096968: .4byte 0x08BFF7A8
_0809696C: .4byte 0x0000B080

	thumb_func_start sub_08096970
sub_08096970: @ 0x08096970
	push {lr}
	sub sp, #4
	ldr r0, _0809699C @ =0x0000A980
	str r0, [sp]
	movs r0, #0x40
	movs r1, #0x32
	movs r2, #5
	movs r3, #2
	bl sub_080935C4
	ldr r3, _080969A0 @ =0x08BFF7A8
	ldr r0, _080969A4 @ =0x0000B088
	str r0, [sp]
	movs r0, #4
	movs r1, #0x48
	movs r2, #0x36
	bl sub_080068C4
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_0809699C: .4byte 0x0000A980
_080969A0: .4byte 0x08BFF7A8
_080969A4: .4byte 0x0000B088

	thumb_func_start sub_080969A8
sub_080969A8: @ 0x080969A8
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r7, r6, #0
	adds r7, #0x35
	ldrb r0, [r7]
	lsls r4, r0, #1
	adds r4, r4, r0
	lsls r4, r4, #2
	adds r4, #0x7c
	bl GetGameTime
	ldr r2, _08096A20 @ =gPal
	lsrs r0, r0, #2
	movs r1, #0xf
	ands r0, r1
	lsls r0, r0, #1
	ldr r1, _08096A24 @ =0x08421C24
	adds r0, r0, r1
	ldrh r0, [r0]
	ldr r1, _08096A28 @ =0x000002DA
	adds r2, r2, r1
	strh r0, [r2]
	bl EnablePalSync
	ldr r1, _08096A2C @ =0x08D8D4F8
	ldrb r2, [r7]
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r3, [r0]
	movs r5, #0xc5
	lsls r5, r5, #7
	str r5, [sp]
	movs r0, #4
	adds r1, r4, #0
	movs r2, #0x18
	bl sub_08006884
	ldr r3, _08096A30 @ =0x08D8D4E8
	str r5, [sp]
	movs r0, #4
	adds r1, r4, #0
	movs r2, #0x18
	bl sub_08006884
	ldrb r7, [r7]
	lsls r0, r7, #1
	adds r6, #0x4c
	adds r6, r6, r0
	ldrh r1, [r6]
	ldr r0, _08096A34 @ =0x02012466
	ldrh r2, [r0]
	movs r0, #0xb
	movs r3, #7
	bl sub_08090E04
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08096A20: .4byte gPal
_08096A24: .4byte 0x08421C24
_08096A28: .4byte 0x000002DA
_08096A2C: .4byte 0x08D8D4F8
_08096A30: .4byte 0x08D8D4E8
_08096A34: .4byte 0x02012466

	thumb_func_start sub_08096A38
sub_08096A38: @ 0x08096A38
	push {r4, r5, r6, lr}
	movs r5, #0
	lsls r2, r2, #0xc
	ldr r4, _08096A74 @ =0x0001FFFF
	adds r3, r1, #0
	ands r3, r4
	lsrs r3, r3, #5
	adds r6, r2, r3
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r1, r3
	ands r1, r4
	lsrs r1, r1, #5
	adds r2, r2, r1
	adds r3, r0, #0
	adds r3, #0x40
	adds r1, r0, #0
_08096A5A:
	adds r0, r6, r5
	strh r0, [r1]
	adds r0, r2, r5
	strh r0, [r3]
	adds r3, #2
	adds r1, #2
	adds r5, #1
	cmp r5, #0xe
	ble _08096A5A
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08096A74: .4byte 0x0001FFFF

	thumb_func_start sub_08096A78
sub_08096A78: @ 0x08096A78
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov sl, r0
	ldr r7, _08096D54 @ =gDispIo
	movs r0, #8
	rsbs r0, r0, #0
	ldrb r1, [r7]
	ands r0, r1
	strb r0, [r7]
	movs r0, #0
	bl InitBgs
	movs r0, #0
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r7, #0xc]
	ands r0, r2
	movs r4, #1
	orrs r0, r4
	strb r0, [r7, #0xc]
	adds r0, r1, #0
	ldrb r6, [r7, #0x10]
	ands r0, r6
	movs r2, #2
	mov sb, r2
	mov r6, sb
	orrs r0, r6
	strb r0, [r7, #0x10]
	ldrb r0, [r7, #0x14]
	ands r1, r0
	strb r1, [r7, #0x14]
	movs r0, #3
	ldrb r1, [r7, #0x18]
	orrs r0, r1
	strb r0, [r7, #0x18]
	bl sub_080069C4
	bl ResetText
	bl InitIcons
	bl sub_0804A9F8
	bl sub_08015A0C
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	mov r0, sl
	adds r0, #0x35
	ldrb r0, [r0]
	lsls r1, r0, #1
	mov r0, sl
	adds r0, #0x4c
	adds r0, r0, r1
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	ldr r0, _08096D58 @ =0x06016000
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_08082F74
	movs r0, #4
	bl ApplyIconPalettes
	bl sub_0808ED8C
	movs r0, #0xa0
	lsls r0, r0, #7
	movs r1, #5
	bl sub_0809228C
	movs r0, #0xc0
	lsls r0, r0, #6
	movs r1, #0xa
	bl sub_080922DC
	ldr r0, _08096D5C @ =gBg1Tm
	ldr r1, _08096D60 @ =0x0842A0A4
	movs r2, #0xa5
	lsls r2, r2, #7
	bl TmApplyTsa_thm
	movs r0, #7
	bl EnableBgSync
	movs r1, #0xe0
	lsls r1, r1, #4
	movs r3, #0xc0
	lsls r3, r3, #4
	movs r2, #0
	mov r8, r2
	str r2, [sp]
	mov r6, sl
	str r6, [sp, #4]
	movs r0, #0xd
	movs r2, #0xf
	bl sub_080AAA50
	movs r0, #0
	movs r1, #0x98
	movs r2, #6
	movs r3, #2
	bl sub_080AAAD0
	ldr r0, [r6, #0x2c]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl DecodeMsg
	mov r0, sl
	bl sub_080A98C8
	mov r0, sl
	bl sub_080AA390
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_080AA3B4
	movs r5, #0x20
	ldrb r0, [r7, #1]
	orrs r0, r5
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r7, #1]
	adds r1, r7, #0
	adds r1, #0x2d
	movs r0, #0x80
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x28
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xe0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x98
	strb r0, [r1]
	ldr r1, _08096D64 @ =0x030027C4
	ldrb r0, [r1]
	orrs r0, r4
	mov r2, sb
	orrs r0, r2
	movs r1, #4
	orrs r0, r1
	movs r3, #8
	orrs r0, r3
	movs r2, #0x10
	orrs r0, r2
	movs r6, #0x36
	adds r6, r6, r7
	mov ip, r6
	ldrb r1, [r6]
	orrs r4, r1
	mov r6, sb
	orrs r4, r6
	movs r1, #5
	rsbs r1, r1, #0
	ands r4, r1
	orrs r4, r3
	orrs r4, r2
	orrs r0, r5
	ldr r1, _08096D64 @ =0x030027C4
	strb r0, [r1]
	orrs r4, r5
	mov r2, ip
	strb r4, [r2]
	adds r1, r7, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r6, [r1]
	ands r0, r6
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x44
	mov r1, r8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r7, #0
	adds r1, #0x46
	movs r0, #8
	strb r0, [r1]
	mov r0, sl
	bl sub_08005E88
	movs r0, #0xc8
	movs r1, #0x90
	mov r2, sl
	bl sub_08082D1C
	ldr r4, _08096D68 @ =0x02012B68
	adds r0, r4, #0
	movs r1, #4
	bl InitText
	adds r0, r4, #0
	adds r0, #8
	movs r1, #3
	bl InitText
	bl sub_08096784
	adds r4, #0x10
	movs r5, #4
_08096C62:
	adds r0, r4, #0
	movs r1, #7
	bl InitText
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge _08096C62
	mov r6, sl
	adds r6, #0x35
	mov r7, sl
	adds r7, #0x4c
	ldr r4, _08096D6C @ =0x02012BA0
	movs r5, #7
_08096C7E:
	adds r0, r4, #0
	movs r1, #7
	bl sub_0800536C
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge _08096C7E
	movs r0, #0
	bl SetOnHBlankA
	ldr r0, _08096D70 @ =sub_080966CC
	bl SetOnHBlankA
	movs r4, #0x80
	lsls r4, r4, #7
	adds r0, r4, #0
	movs r1, #6
	bl sub_08096464
	ldr r5, _08096D74 @ =0x02022D3E
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #6
	bl sub_08096A38
	ldr r0, _08096D78 @ =0x0841E0A4
	ldr r1, _08096D7C @ =0x06015000
	bl sub_08013688
	mov r0, sl
	bl sub_08090DD0
	movs r0, #0xb0
	lsls r0, r0, #7
	movs r1, #6
	bl sub_08090E38
	movs r0, #0xe2
	movs r1, #0x30
	bl sub_08090DE4
	bl sub_08090DA0
	mov r2, sl
	ldr r0, [r2, #0x2c]
	ldrb r1, [r6]
	movs r2, #1
	bl sub_08091A74
	ldr r4, _08096D6C @ =0x02012BA0
	ldr r1, _08096D80 @ =0x02023C7E
	ldrb r6, [r6]
	lsls r0, r6, #1
	adds r0, r7, r0
	ldrh r0, [r0]
	lsrs r2, r0, #4
	mov r6, sl
	ldr r3, [r6, #0x2c]
	adds r0, r4, #0
	bl sub_080964A0
	movs r0, #4
	bl EnableBgSync
	movs r0, #0xb3
	lsls r0, r0, #1
	adds r5, r5, r0
	subs r4, #0x28
	ldr r2, [r6, #0x2c]
	adds r0, r5, #0
	adds r1, r4, #0
	movs r3, #0
	bl sub_08094AC0
	bl sub_08096834
	mov r0, sl
	bl sub_080A9BE8
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r0, #0
	movs r2, #2
	bl sub_080A9BFC
	movs r0, #0x78
	movs r1, #0x18
	movs r2, #0xea
	movs r3, #0x18
	bl sub_080A9C84
	movs r0, #3
	bl sub_080A9C68
	ldr r0, _08096D84 @ =sub_080969A8
	mov r1, sl
	bl sub_080AA20C
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08096D54: .4byte gDispIo
_08096D58: .4byte 0x06016000
_08096D5C: .4byte gBg1Tm
_08096D60: .4byte 0x0842A0A4
_08096D64: .4byte 0x030027C4
_08096D68: .4byte 0x02012B68
_08096D6C: .4byte 0x02012BA0
_08096D70: .4byte sub_080966CC
_08096D74: .4byte 0x02022D3E
_08096D78: .4byte 0x0841E0A4
_08096D7C: .4byte 0x06015000
_08096D80: .4byte 0x02023C7E
_08096D84: .4byte sub_080969A8

	thumb_func_start sub_08096D88
sub_08096D88: @ 0x08096D88
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	adds r1, r4, #0
	bl sub_08096430
	movs r0, #0
	bl sub_080A998C
	adds r0, r4, #0
	bl sub_080967C0
	adds r0, r4, #0
	adds r0, #0x33
	ldrb r0, [r0]
	lsls r1, r0, #4
	adds r1, #0x24
	movs r3, #0x80
	lsls r3, r3, #3
	movs r0, #0x44
	movs r2, #4
	bl sub_080AA3F8
	ldr r0, _08096DE0 @ =sub_08096938
	bl sub_080AA24C
	bl Proc_End
	ldr r0, _08096DE4 @ =sub_08096970
	bl sub_080AA24C
	bl Proc_End
	ldr r0, _08096DE8 @ =sub_080968E8
	adds r1, r4, #0
	bl sub_080AA20C
	movs r0, #7
	bl EnableBgSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08096DE0: .4byte sub_08096938
_08096DE4: .4byte sub_08096970
_08096DE8: .4byte sub_080968E8

	thumb_func_start sub_08096DEC
sub_08096DEC: @ 0x08096DEC
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x33
	ldrb r6, [r4]
	ldrh r0, [r5, #0x38]
	cmp r0, #0
	beq _08096DFE
	b _08096F58
_08096DFE:
	ldr r1, _08096E1C @ =gpKeySt
	ldr r0, [r1]
	ldrh r3, [r0, #8]
	movs r7, #1
	adds r0, r7, #0
	ands r0, r3
	adds r2, r1, #0
	cmp r0, #0
	bne _08096E12
	b _08096F08
_08096E12:
	cmp r6, #0
	beq _08096E20
	cmp r6, #1
	beq _08096E8C
	b _0809700C
	.align 2, 0
_08096E1C: .4byte gpKeySt
_08096E20:
	bl sub_0809158C
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x63
	bhi _08096EEC
	ldr r0, [r5, #0x2c]
	bl GetUnitItemCount
	cmp r0, #0
	ble _08096EEC
	ldrb r4, [r4]
	lsls r2, r4, #4
	adds r2, #0x24
	movs r0, #0
	movs r1, #0x44
	movs r3, #2
	bl sub_080A98DC
	ldr r0, _08096E7C @ =sub_080968E8
	bl sub_080AA24C
	bl Proc_End
	ldr r0, _08096E80 @ =sub_08096938
	adds r1, r5, #0
	bl sub_080AA20C
	movs r0, #1
	adds r1, r5, #0
	bl sub_08096430
	ldr r0, _08096E84 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08096E72
	ldr r0, _08096E88 @ =0x0000038A
	bl m4aSongNumStart
_08096E72:
	adds r0, r5, #0
	movs r1, #3
	bl Proc_Goto
	b _0809700C
	.align 2, 0
_08096E7C: .4byte sub_080968E8
_08096E80: .4byte sub_08096938
_08096E84: .4byte gPlaySt
_08096E88: .4byte 0x0000038A
_08096E8C:
	ldr r0, [r5, #0x2c]
	bl GetUnitItemCount
	cmp r0, #4
	bgt _08096EEC
	ldrb r4, [r4]
	lsls r2, r4, #4
	adds r2, #0x24
	movs r0, #0
	movs r1, #0x44
	movs r3, #2
	bl sub_080A98DC
	ldr r0, _08096EDC @ =sub_080968E8
	bl sub_080AA24C
	bl Proc_End
	ldr r0, _08096EE0 @ =sub_08096970
	adds r1, r5, #0
	bl sub_080AA20C
	movs r0, #2
	adds r1, r5, #0
	bl sub_08096430
	ldr r0, _08096EE4 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08096ED2
	ldr r0, _08096EE8 @ =0x0000038A
	bl m4aSongNumStart
_08096ED2:
	adds r0, r5, #0
	movs r1, #4
	bl Proc_Goto
	b _0809700C
	.align 2, 0
_08096EDC: .4byte sub_080968E8
_08096EE0: .4byte sub_08096970
_08096EE4: .4byte gPlaySt
_08096EE8: .4byte 0x0000038A
_08096EEC:
	ldr r0, _08096F04 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _08096EFA
	b _0809700C
_08096EFA:
	movs r0, #0xe3
	lsls r0, r0, #2
	bl m4aSongNumStart
	b _0809700C
	.align 2, 0
_08096F04: .4byte gPlaySt
_08096F08:
	movs r0, #2
	ands r0, r3
	cmp r0, #0
	beq _08096F34
	adds r0, r5, #0
	movs r1, #8
	bl Proc_Goto
	ldr r0, _08096F2C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809700C
	ldr r0, _08096F30 @ =0x0000038B
	bl m4aSongNumStart
	b _0809700C
	.align 2, 0
_08096F2C: .4byte gPlaySt
_08096F30: .4byte 0x0000038B
_08096F34:
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r3
	cmp r0, #0
	beq _08096F78
	lsls r1, r6, #4
	adds r1, #0x24
	ldr r2, _08096F54 @ =0x08D8D118
	lsls r0, r6, #2
	adds r0, r0, r2
	ldr r2, [r0]
	movs r0, #0x44
	bl sub_0808266C
	strh r7, [r5, #0x38]
	b _0809700C
	.align 2, 0
_08096F54: .4byte 0x08D8D118
_08096F58:
	ldr r2, _08096F74 @ =gpKeySt
	ldr r1, [r2]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08096F78
	bl sub_080828A4
	movs r0, #0
	strh r0, [r5, #0x38]
	b _0809700C
	.align 2, 0
_08096F74: .4byte gpKeySt
_08096F78:
	ldr r3, [r2]
	movs r1, #0x40
	adds r0, r1, #0
	ldrh r4, [r3, #6]
	ands r0, r4
	adds r4, r5, #0
	adds r4, #0x33
	cmp r0, #0
	beq _08096FA2
	ldrb r0, [r4]
	cmp r0, #0
	beq _08096F94
	subs r0, #1
	b _08096FA0
_08096F94:
	adds r0, r1, #0
	ldrh r3, [r3, #8]
	ands r0, r3
	cmp r0, #0
	beq _08096FA2
	movs r0, #1
_08096FA0:
	strb r0, [r4]
_08096FA2:
	ldr r1, [r2]
	movs r2, #0x80
	adds r0, r2, #0
	ldrh r3, [r1, #6]
	ands r0, r3
	cmp r0, #0
	beq _08096FC8
	ldrb r0, [r4]
	cmp r0, #0
	bne _08096FBA
	adds r0, #1
	b _08096FC6
_08096FBA:
	adds r0, r2, #0
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08096FC8
	movs r0, #0
_08096FC6:
	strb r0, [r4]
_08096FC8:
	ldrb r0, [r4]
	cmp r6, r0
	beq _0809700C
	ldr r0, _08097014 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08096FE0
	ldr r0, _08097018 @ =0x00000386
	bl m4aSongNumStart
_08096FE0:
	ldrb r3, [r4]
	lsls r1, r3, #4
	adds r1, #0x24
	movs r3, #0x80
	lsls r3, r3, #3
	movs r0, #0x44
	movs r2, #4
	bl sub_080AA3F8
	ldrh r0, [r5, #0x38]
	cmp r0, #0
	beq _0809700C
	ldrb r0, [r4]
	lsls r1, r0, #4
	adds r1, #0x24
	ldr r2, _0809701C @ =0x08D8D118
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r2, [r0]
	movs r0, #0x44
	bl sub_0808266C
_0809700C:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08097014: .4byte gPlaySt
_08097018: .4byte 0x00000386
_0809701C: .4byte 0x08D8D118

	thumb_func_start sub_08097020
sub_08097020: @ 0x08097020
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	bl InitIcons
	ldr r0, [r4, #0x2c]
	adds r5, r4, #0
	adds r5, #0x35
	ldrb r1, [r5]
	movs r2, #1
	bl sub_08091A74
	ldr r0, _080970B0 @ =0x02012BA0
	ldr r1, _080970B4 @ =0x02023C7E
	ldrb r3, [r5]
	lsls r2, r3, #1
	adds r6, r4, #0
	adds r6, #0x4c
	adds r2, r6, r2
	ldrh r2, [r2]
	lsrs r2, r2, #4
	ldr r3, [r4, #0x2c]
	bl sub_080964A0
	ldr r0, _080970B8 @ =0x02022EA4
	ldr r1, [r4, #0x2c]
	bl sub_08094BA4
	ldrb r1, [r5]
	lsls r0, r1, #1
	adds r7, r4, #0
	adds r7, #0x3a
	adds r1, r7, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	adds r0, r6, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x80
	movs r2, #0xb
	bl sub_080AA3F8
	movs r0, #5
	bl EnableBgSync
	ldrh r0, [r4, #0x38]
	cmp r0, #0
	beq _080970CC
	ldr r0, _080970BC @ =0x02012466
	ldrh r0, [r0]
	cmp r0, #0
	beq _080970C4
	ldr r2, _080970C0 @ =0x020117E4
	ldrb r5, [r5]
	lsls r3, r5, #1
	adds r0, r7, r3
	ldrh r1, [r0]
	lsls r0, r1, #2
	adds r0, r0, r2
	ldrh r2, [r0, #2]
	lsls r1, r1, #4
	adds r3, r6, r3
	ldrh r0, [r3]
	subs r0, #0x28
	subs r1, r1, r0
	movs r0, #0x80
	bl sub_080826EC
	movs r0, #1
	b _080970CA
	.align 2, 0
_080970B0: .4byte 0x02012BA0
_080970B4: .4byte 0x02023C7E
_080970B8: .4byte 0x02022EA4
_080970BC: .4byte 0x02012466
_080970C0: .4byte 0x020117E4
_080970C4:
	bl sub_080828A4
	movs r0, #0xff
_080970CA:
	strh r0, [r4, #0x38]
_080970CC:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080970D4
sub_080970D4: @ 0x080970D4
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r3, #0
	movs r7, #4
	adds r0, #0x34
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	ldrb r4, [r0]
	cmp r4, #4
	bge _08097100
	subs r1, r7, r4
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #5
	muls r0, r1, r0
	movs r1, #0x10
	bl __divsi3
	adds r3, r0, #0
	subs r3, #0x60
_08097100:
	adds r5, r6, #0
	adds r5, #0x35
	cmp r4, #4
	bne _08097120
	ldrb r0, [r5]
	cmp r0, #0
	bne _08097112
	movs r0, #8
	b _08097114
_08097112:
	subs r0, #1
_08097114:
	strb r0, [r5]
	adds r0, r6, #0
	str r3, [sp]
	bl sub_08097020
	ldr r3, [sp]
_08097120:
	adds r4, r6, #0
	adds r4, #0x34
	ldrb r1, [r4]
	cmp r1, r7
	blt _08097140
	subs r1, r1, r7
	subs r1, r7, r1
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #5
	muls r0, r1, r0
	adds r1, r7, #0
	muls r1, r7, r1
	bl __divsi3
	adds r3, r0, #0
_08097140:
	movs r0, #0xff
	ands r3, r0
	ldrb r5, [r5]
	lsls r1, r5, #1
	adds r0, r6, #0
	adds r0, #0x4c
	adds r0, r0, r1
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	adds r1, r3, #0
	bl SetBgOffset
	lsls r0, r7, #1
	ldrb r4, [r4]
	cmp r4, r0
	bne _0809716E
	adds r0, r6, #0
	movs r1, #4
	bl Proc_Goto
_0809716E:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08097178
sub_08097178: @ 0x08097178
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	movs r0, #4
	mov r8, r0
	adds r0, r7, #0
	adds r0, #0x34
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	ldrb r4, [r0]
	cmp r4, #4
	bge _080971AA
	mov r2, r8
	subs r1, r2, r4
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #5
	muls r0, r1, r0
	movs r1, #0x10
	bl __divsi3
	movs r1, #0x60
	subs r6, r1, r0
_080971AA:
	adds r5, r7, #0
	adds r5, #0x35
	cmp r4, #4
	bne _080971C6
	ldrb r0, [r5]
	cmp r0, #8
	bne _080971BC
	movs r0, #0
	b _080971BE
_080971BC:
	adds r0, #1
_080971BE:
	strb r0, [r5]
	adds r0, r7, #0
	bl sub_08097020
_080971C6:
	adds r4, r7, #0
	adds r4, #0x34
	ldrb r1, [r4]
	cmp r1, r8
	blt _080971EA
	mov r0, r8
	subs r1, r1, r0
	subs r1, r0, r1
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #5
	muls r0, r1, r0
	mov r2, r8
	mov r1, r8
	muls r1, r2, r1
	bl __divsi3
	rsbs r6, r0, #0
_080971EA:
	movs r0, #0xff
	ands r6, r0
	ldrb r5, [r5]
	lsls r1, r5, #1
	adds r0, r7, #0
	adds r0, #0x4c
	adds r0, r0, r1
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	adds r1, r6, #0
	bl SetBgOffset
	mov r1, r8
	lsls r0, r1, #1
	ldrb r4, [r4]
	cmp r4, r0
	bne _0809721A
	adds r0, r7, #0
	movs r1, #4
	bl Proc_Goto
_0809721A:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08097224
sub_08097224: @ 0x08097224
	push {r4, r5, lr}
	mov ip, r0
	ldr r0, _0809724C @ =0x02012466
	ldrh r4, [r0]
	adds r5, r0, #0
	cmp r4, #0
	bne _08097250
	mov r3, ip
	adds r3, #0x35
	ldrb r1, [r3]
	lsls r0, r1, #1
	mov r1, ip
	adds r1, #0x3a
	adds r1, r1, r0
	mov r2, ip
	adds r2, #0x4c
	adds r0, r2, r0
	strh r4, [r0]
	strh r4, [r1]
	b _0809726E
	.align 2, 0
_0809724C: .4byte 0x02012466
_08097250:
	mov r2, ip
	adds r2, #0x35
	ldrb r0, [r2]
	lsls r1, r0, #1
	mov r0, ip
	adds r0, #0x3a
	adds r0, r0, r1
	ldrh r4, [r5]
	subs r4, #1
	adds r3, r2, #0
	adds r2, #0x17
	ldrh r1, [r0]
	cmp r1, r4
	ble _0809726E
	strh r4, [r0]
_0809726E:
	ldrh r0, [r5]
	cmp r0, #6
	bls _0809728C
	ldrb r1, [r3]
	lsls r0, r1, #1
	adds r4, r2, r0
	ldrh r1, [r4]
	lsrs r0, r1, #4
	adds r0, #7
	ldrh r1, [r5]
	cmp r0, r1
	ble _0809728C
	subs r0, r1, #7
	lsls r0, r0, #4
	strh r0, [r4]
_0809728C:
	ldrb r3, [r3]
	lsls r0, r3, #1
	adds r0, r2, r0
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080972A8
sub_080972A8: @ 0x080972A8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov ip, r0
	adds r0, #0x35
	ldrb r0, [r0]
	lsls r2, r0, #1
	mov r0, ip
	adds r0, #0x3a
	adds r4, r0, r2
	ldrh r3, [r4]
	lsls r1, r3, #4
	adds r0, #0x12
	adds r0, r0, r2
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	cmp r1, #0x37
	bgt _080972D6
	cmp r3, #0
	beq _080972D6
	adds r0, r3, #1
	strh r0, [r4]
_080972D6:
	mov r4, ip
	adds r4, #0x35
	ldrb r1, [r4]
	lsls r0, r1, #1
	mov r3, ip
	adds r3, #0x3a
	adds r6, r3, r0
	ldrh r5, [r6]
	lsls r1, r5, #4
	mov r2, ip
	adds r2, #0x4c
	adds r0, r2, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	adds r7, r3, #0
	mov r8, r2
	cmp r1, #0x78
	ble _0809730A
	ldr r0, _08097338 @ =0x02012466
	ldrh r0, [r0]
	subs r0, #1
	cmp r5, r0
	beq _0809730A
	subs r0, r5, #1
	strh r0, [r6]
_0809730A:
	mov r0, ip
	bl sub_08097224
	ldrb r4, [r4]
	lsls r0, r4, #1
	adds r1, r7, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	add r0, r8
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x80
	movs r2, #0xb
	bl sub_080AA3F8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08097338: .4byte 0x02012466

	thumb_func_start sub_0809733C
sub_0809733C: @ 0x0809733C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r7, r1, #0
	bl InitIcons
	ldr r0, _080973D4 @ =0x02023C7E
	mov r8, r0
	adds r6, r4, #0
	adds r6, #0x35
	ldrb r1, [r6]
	lsls r0, r1, #1
	adds r5, r4, #0
	adds r5, #0x4c
	adds r0, r5, r0
	ldrh r0, [r0]
	lsrs r1, r0, #4
	mov r0, r8
	bl sub_080965B4
	ldr r0, _080973D8 @ =0x02022EA4
	ldr r1, [r4, #0x2c]
	bl sub_08094BA4
	movs r0, #5
	bl EnableBgSync
	cmp r7, #0
	bge _0809738E
	ldr r0, _080973DC @ =0x02012BA0
	ldrb r2, [r6]
	lsls r1, r2, #1
	adds r1, r5, r1
	ldrh r1, [r1]
	lsrs r2, r1, #4
	subs r2, #1
	ldr r3, [r4, #0x2c]
	mov r1, r8
	bl sub_08096618
_0809738E:
	cmp r7, #0
	ble _080973A8
	ldr r0, _080973DC @ =0x02012BA0
	ldrb r2, [r6]
	lsls r1, r2, #1
	adds r1, r5, r1
	ldrh r1, [r1]
	lsrs r2, r1, #4
	adds r2, #7
	ldr r3, [r4, #0x2c]
	mov r1, r8
	bl sub_08096618
_080973A8:
	ldrb r1, [r6]
	lsls r0, r1, #1
	adds r0, r5, r0
	ldrh r2, [r0]
	adds r1, r2, r7
	strh r1, [r0]
	ldrb r6, [r6]
	lsls r0, r6, #1
	adds r0, r5, r0
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080973D4: .4byte 0x02023C7E
_080973D8: .4byte 0x02022EA4
_080973DC: .4byte 0x02012BA0

	thumb_func_start sub_080973E0
sub_080973E0: @ 0x080973E0
	push {lr}
	bl sub_08096834
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080973EC
sub_080973EC: @ 0x080973EC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	ldr r0, [r7, #0x2c]
	bl GetUnitItemCount
	adds r2, r0, #0
	cmp r2, #5
	beq _08097408
	ldr r0, _08097420 @ =0x02012466
	ldrh r0, [r0]
	cmp r0, #0
	bne _08097428
_08097408:
	ldr r0, _08097424 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _08097416
	b _0809753A
_08097416:
	movs r0, #0xe3
	lsls r0, r0, #2
	bl m4aSongNumStart
	b _0809753A
	.align 2, 0
_08097420: .4byte 0x02012466
_08097424: .4byte gPlaySt
_08097428:
	movs r5, #0
	strh r5, [r7, #0x38]
	ldr r1, [r7, #0x2c]
	lsls r0, r2, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldr r4, _08097508 @ =0x020117E4
	movs r0, #0x35
	adds r0, r0, r7
	mov r8, r0
	ldrb r2, [r0]
	lsls r0, r2, #1
	adds r6, r7, #0
	adds r6, #0x3a
	adds r0, r6, r0
	ldrh r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r4
	ldrh r0, [r0, #2]
	strh r0, [r1]
	ldr r0, [r7, #0x2c]
	bl UnitRemoveInvalidItems
	mov r3, r8
	ldrb r3, [r3]
	lsls r0, r3, #1
	adds r0, r6, r0
	ldrh r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r4
	strh r5, [r0, #2]
	bl sub_08091B48
	ldr r0, [r7, #0x2c]
	mov r2, r8
	ldrb r1, [r2]
	movs r2, #1
	bl sub_08091A74
	adds r0, r7, #0
	bl sub_08097224
	bl InitIcons
	ldr r0, _0809750C @ =0x02022EA4
	ldr r4, _08097510 @ =0x02012B78
	ldr r2, [r7, #0x2c]
	adds r1, r4, #0
	movs r3, #0
	bl sub_08094AC0
	adds r4, #0x28
	ldr r1, _08097514 @ =0x02023C7E
	mov r3, r8
	ldrb r3, [r3]
	lsls r0, r3, #1
	adds r5, r7, #0
	adds r5, #0x4c
	adds r0, r5, r0
	ldrh r0, [r0]
	lsrs r2, r0, #4
	ldr r3, [r7, #0x2c]
	adds r0, r4, #0
	bl sub_080964A0
	ldr r0, _08097518 @ =sub_080973E0
	movs r1, #1
	adds r2, r7, #0
	bl sub_080A9D28
	mov r1, r8
	ldrb r1, [r1]
	lsls r0, r1, #1
	adds r6, r6, r0
	ldrh r6, [r6]
	lsls r1, r6, #4
	adds r5, r5, r0
	ldrh r0, [r5]
	subs r0, #0x28
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x80
	movs r2, #0xb
	bl sub_080AA3F8
	movs r0, #5
	bl EnableBgSync
	ldr r1, _0809751C @ =gActionSt
	movs r0, #0x19
	strb r0, [r1, #0x11]
	ldr r0, [r7, #0x2c]
	bl GetUnitItemCount
	cmp r0, #5
	bne _08097528
	adds r0, r7, #0
	movs r1, #1
	bl Proc_Goto
	ldr r0, _08097520 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809753A
	ldr r0, _08097524 @ =0x0000038B
	bl m4aSongNumStart
	b _0809753A
	.align 2, 0
_08097508: .4byte 0x020117E4
_0809750C: .4byte 0x02022EA4
_08097510: .4byte 0x02012B78
_08097514: .4byte 0x02023C7E
_08097518: .4byte sub_080973E0
_0809751C: .4byte gActionSt
_08097520: .4byte gPlaySt
_08097524: .4byte 0x0000038B
_08097528:
	ldr r0, _08097544 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809753A
	ldr r0, _08097548 @ =0x0000038A
	bl m4aSongNumStart
_0809753A:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08097544: .4byte gPlaySt
_08097548: .4byte 0x0000038A

	thumb_func_start sub_0809754C
sub_0809754C: @ 0x0809754C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r4, r0, #0
	adds r7, r4, #0
	adds r7, #0x35
	ldrb r0, [r7]
	lsls r1, r0, #1
	movs r2, #0x3a
	adds r2, r2, r4
	mov r8, r2
	adds r0, r2, r1
	ldrh r0, [r0]
	mov sl, r0
	adds r5, r4, #0
	adds r5, #0x4c
	adds r6, r5, r1
	movs r3, #0xf
	ldrh r0, [r6]
	ands r0, r3
	mov sb, r0
	cmp r0, #0
	beq _08097580
	b _08097778
_08097580:
	ldrh r0, [r4, #0x38]
	cmp r0, #0
	beq _0809758A
	cmp r0, #0xff
	bne _0809762C
_0809758A:
	ldr r1, _080975C4 @ =gpKeySt
	ldr r0, [r1]
	ldrh r3, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r3
	mov r8, r1
	cmp r0, #0
	beq _080975EC
	ldr r0, _080975C8 @ =0x02012466
	ldrh r0, [r0]
	cmp r0, #0
	beq _080975D0
	ldr r1, _080975CC @ =0x020117E4
	mov r2, sl
	lsls r0, r2, #2
	adds r0, r0, r1
	ldrh r2, [r0, #2]
	mov r3, sl
	lsls r1, r3, #4
	ldrh r0, [r6]
	subs r0, #0x28
	subs r1, r1, r0
	movs r0, #0x80
	bl sub_080826EC
	movs r0, #1
	strh r0, [r4, #0x38]
	b _080978CA
	.align 2, 0
_080975C4: .4byte gpKeySt
_080975C8: .4byte 0x02012466
_080975CC: .4byte 0x020117E4
_080975D0:
	ldr r0, _080975E8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _080975DE
	b _080978CA
_080975DE:
	movs r0, #0xe3
	lsls r0, r0, #2
	bl m4aSongNumStart
	b _080978CA
	.align 2, 0
_080975E8: .4byte gPlaySt
_080975EC:
	movs r0, #1
	ands r0, r3
	cmp r0, #0
	beq _080975FC
	adds r0, r4, #0
	bl sub_080973EC
	b _080978CA
_080975FC:
	movs r0, #2
	ands r0, r3
	cmp r0, #0
	beq _0809764C
	adds r0, r4, #0
	movs r1, #1
	bl Proc_Goto
	ldr r0, _08097624 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809761E
	ldr r0, _08097628 @ =0x0000038B
	bl m4aSongNumStart
_0809761E:
	mov r0, sb
	strh r0, [r4, #0x38]
	b _080978CA
	.align 2, 0
_08097624: .4byte gPlaySt
_08097628: .4byte 0x0000038B
_0809762C:
	ldr r2, _08097648 @ =gpKeySt
	ldr r1, [r2]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	mov r8, r2
	cmp r0, #0
	beq _0809764C
	bl sub_080828A4
	mov r1, sb
	strh r1, [r4, #0x38]
	b _080978CA
	.align 2, 0
_08097648: .4byte gpKeySt
_0809764C:
	mov r3, r8
	ldr r2, [r3]
	ldrh r1, [r2, #6]
	movs r0, #0x20
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _08097698
	movs r0, #0
	bl sub_080A9CAC
	ldr r0, _08097690 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08097676
	ldr r0, _08097694 @ =0x00000387
	bl m4aSongNumStart
_08097676:
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
	adds r1, r4, #0
	adds r1, #0x34
	movs r0, #0
	strb r0, [r1]
	adds r0, r4, #0
	bl sub_080970D4
	b _080978CA
	.align 2, 0
_08097690: .4byte gPlaySt
_08097694: .4byte 0x00000387
_08097698:
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080976D8
	movs r0, #1
	bl sub_080A9CAC
	ldr r0, _080976D0 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080976B8
	ldr r0, _080976D4 @ =0x00000387
	bl m4aSongNumStart
_080976B8:
	adds r0, r4, #0
	movs r1, #6
	bl Proc_Goto
	adds r0, r4, #0
	adds r0, #0x34
	strb r5, [r0]
	adds r0, r4, #0
	bl sub_08097178
	b _080978CA
	.align 2, 0
_080976D0: .4byte gPlaySt
_080976D4: .4byte 0x00000387
_080976D8:
	movs r0, #0x80
	lsls r0, r0, #2
	ldrh r2, [r2, #4]
	ands r0, r2
	cmp r0, #0
	beq _080976EC
	adds r1, r4, #0
	adds r1, #0x32
	movs r0, #8
	b _080976F2
_080976EC:
	adds r1, r4, #0
	adds r1, #0x32
	movs r0, #4
_080976F2:
	strb r0, [r1]
	adds r5, r1, #0
	mov r0, r8
	ldr r1, [r0]
	movs r2, #0x40
	adds r0, r2, #0
	ldrh r3, [r1, #6]
	ands r0, r3
	cmp r0, #0
	bne _0809771E
	adds r0, r2, #0
	ldrh r1, [r1, #4]
	ands r0, r1
	adds r7, r4, #0
	adds r7, #0x35
	adds r6, r4, #0
	adds r6, #0x3a
	cmp r0, #0
	beq _0809773A
	ldrb r0, [r5]
	cmp r0, #8
	bne _0809773A
_0809771E:
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r2, [r0]
	lsls r1, r2, #1
	adds r2, r4, #0
	adds r2, #0x3a
	adds r3, r2, r1
	ldrh r1, [r3]
	adds r7, r0, #0
	adds r6, r2, #0
	cmp r1, #0
	beq _0809773A
	subs r0, r1, #1
	strh r0, [r3]
_0809773A:
	mov r3, r8
	ldr r1, [r3]
	movs r2, #0x80
	adds r0, r2, #0
	ldrh r3, [r1, #6]
	ands r0, r3
	cmp r0, #0
	bne _0809775A
	adds r0, r2, #0
	ldrh r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _080977D6
	ldrb r5, [r5]
	cmp r5, #8
	bne _080977D6
_0809775A:
	ldrb r1, [r7]
	lsls r0, r1, #1
	adds r2, r6, r0
	ldrh r1, [r2]
	ldr r0, _08097774 @ =0x02012466
	ldrh r0, [r0]
	subs r0, #1
	cmp r1, r0
	bge _080977D6
	adds r0, r1, #1
	strh r0, [r2]
	b _080977D6
	.align 2, 0
_08097774: .4byte 0x02012466
_08097778:
	mov r2, sl
	lsls r0, r2, #4
	ldrh r2, [r6]
	adds r1, r2, #0
	subs r1, #0x28
	subs r0, r0, r1
	cmp r0, #0x37
	bgt _08097796
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r2, r0
	strh r0, [r6]
_08097796:
	ldrb r3, [r7]
	lsls r2, r3, #1
	mov r1, r8
	adds r0, r1, r2
	ldrh r0, [r0]
	lsls r1, r0, #4
	adds r3, r5, r2
	ldrh r2, [r3]
	adds r0, r2, #0
	subs r0, #0x28
	subs r1, r1, r0
	cmp r1, #0x78
	ble _080977BE
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r0, r2, r0
	strh r0, [r3]
_080977BE:
	ldrb r2, [r7]
	lsls r0, r2, #1
	adds r0, r5, r0
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	mov r6, r8
_080977D6:
	ldrb r3, [r7]
	lsls r0, r3, #1
	adds r0, r6, r0
	ldrh r0, [r0]
	cmp sl, r0
	beq _080978CA
	ldr r1, _0809783C @ =0x020117E4
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r0, [r0, #2]
	mov sb, r0
	ldr r0, _08097840 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080977FE
	ldr r0, _08097844 @ =0x00000386
	bl m4aSongNumStart
_080977FE:
	ldrb r0, [r7]
	lsls r1, r0, #1
	adds r0, r6, r1
	ldrh r5, [r0]
	lsls r3, r5, #4
	adds r2, r4, #0
	adds r2, #0x4c
	adds r1, r2, r1
	ldrh r0, [r1]
	subs r0, #0x28
	subs r1, r3, r0
	mov r8, r2
	cmp r1, #0x37
	bgt _08097848
	cmp r5, #0
	beq _08097848
	ldrh r0, [r4, #0x38]
	cmp r0, #0
	beq _0809782E
	adds r1, #0x10
	movs r0, #0x80
	mov r2, sb
	bl sub_080826EC
_0809782E:
	adds r0, r4, #0
	adds r0, #0x32
	movs r1, #0
	ldrsb r1, [r0, r1]
	rsbs r1, r1, #0
	b _08097880
	.align 2, 0
_0809783C: .4byte 0x020117E4
_08097840: .4byte gPlaySt
_08097844: .4byte 0x00000386
_08097848:
	ldrb r1, [r7]
	lsls r0, r1, #1
	adds r1, r6, r0
	ldrh r2, [r1]
	lsls r1, r2, #4
	add r0, r8
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	cmp r1, #0x78
	ble _0809788C
	ldr r0, _08097888 @ =0x02012466
	ldrh r0, [r0]
	subs r0, #1
	cmp r2, r0
	beq _0809788C
	ldrh r0, [r4, #0x38]
	cmp r0, #0
	beq _08097878
	subs r1, #0x10
	movs r0, #0x80
	mov r2, sb
	bl sub_080826EC
_08097878:
	adds r0, r4, #0
	adds r0, #0x32
	movs r1, #0
	ldrsb r1, [r0, r1]
_08097880:
	adds r0, r4, #0
	bl sub_0809733C
	b _080978CA
	.align 2, 0
_08097888: .4byte 0x02012466
_0809788C:
	ldrh r0, [r4, #0x38]
	cmp r0, #0
	beq _080978AC
	ldrb r2, [r7]
	lsls r0, r2, #1
	adds r1, r6, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	add r0, r8
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r0, #0x80
	mov r2, sb
	bl sub_080826EC
_080978AC:
	ldrb r7, [r7]
	lsls r0, r7, #1
	adds r1, r6, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	add r0, r8
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x80
	movs r2, #0xb
	bl sub_080AA3F8
_080978CA:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080978D8
sub_080978D8: @ 0x080978D8
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r6, _08097908 @ =gpKeySt
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r7, #0x40
	adds r0, r7, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _0809791E
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r3, r0, #0
	adds r2, r4, #0
	adds r2, #0x31
	ldrb r0, [r2]
	cmp r0, #0
	beq _0809790C
	subs r0, #1
	strb r0, [r2]
	b _0809794E
	.align 2, 0
_08097908: .4byte gpKeySt
_0809790C:
	ldr r1, [r6]
	adds r0, r7, #0
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0809796C
	subs r0, r3, #1
	strb r0, [r2]
	b _0809794E
_0809791E:
	movs r7, #0x80
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _0809796C
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r2, r4, #0
	adds r2, #0x31
	ldrb r1, [r2]
	subs r0, #1
	cmp r1, r0
	bge _08097940
	adds r0, r1, #1
	strb r0, [r2]
	b _0809794E
_08097940:
	ldr r1, [r6]
	adds r0, r7, #0
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0809796C
	strb r5, [r2]
_0809794E:
	ldr r0, _08097964 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08097960
	ldr r0, _08097968 @ =0x00000386
	bl m4aSongNumStart
_08097960:
	movs r0, #1
	b _0809796E
	.align 2, 0
_08097964: .4byte gPlaySt
_08097968: .4byte 0x00000386
_0809796C:
	movs r0, #0
_0809796E:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_08097974
sub_08097974: @ 0x08097974
	push {lr}
	adds r0, #0x31
	ldrb r0, [r0]
	lsls r1, r0, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl sub_080AA3F8
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08097990
sub_08097990: @ 0x08097990
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x2c]
	adds r7, r5, #0
	adds r7, #0x31
	ldrb r1, [r7]
	lsls r2, r1, #1
	adds r1, r0, #0
	adds r1, #0x1e
	adds r1, r1, r2
	ldrh r4, [r1]
	bl GetUnitItemCount
	ldr r0, [r5, #0x2c]
	ldrb r2, [r7]
	lsls r1, r2, #1
	adds r0, #0x1e
	adds r0, r0, r1
	movs r1, #0
	strh r1, [r0]
	ldr r0, [r5, #0x2c]
	bl UnitRemoveInvalidItems
	adds r0, r4, #0
	bl sub_080918A4
	adds r6, r5, #0
	adds r6, #0x35
	strb r0, [r6]
	adds r0, r4, #0
	bl AddItemToConvoy
	ldr r0, [r5, #0x2c]
	ldrb r1, [r6]
	movs r2, #1
	bl sub_08091A74
	adds r0, r5, #0
	bl sub_08097224
	bl InitIcons
	ldr r0, _08097A58 @ =0x02022EA4
	ldr r4, _08097A5C @ =0x02012B78
	ldr r2, [r5, #0x2c]
	adds r1, r4, #0
	movs r3, #0
	bl sub_08094AC0
	adds r4, #0x28
	ldr r1, _08097A60 @ =0x02023C7E
	ldrb r6, [r6]
	lsls r2, r6, #1
	adds r0, r5, #0
	adds r0, #0x4c
	adds r0, r0, r2
	ldrh r0, [r0]
	lsrs r2, r0, #4
	ldr r3, [r5, #0x2c]
	adds r0, r4, #0
	bl sub_080964A0
	ldr r0, _08097A64 @ =sub_080973E0
	movs r1, #1
	adds r2, r5, #0
	bl sub_080A9D28
	movs r0, #4
	bl EnableBgSync
	ldr r0, [r5, #0x2c]
	bl GetUnitItemCount
	adds r4, r0, #0
	ldr r1, _08097A68 @ =gActionSt
	movs r0, #0x19
	strb r0, [r1, #0x11]
	cmp r4, #0
	beq _08097A3A
	bl sub_0809158C
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x64
	bne _08097A74
_08097A3A:
	adds r0, r5, #0
	movs r1, #1
	bl Proc_Goto
	ldr r0, _08097A6C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08097AA0
	ldr r0, _08097A70 @ =0x0000038B
	bl m4aSongNumStart
	b _08097AA0
	.align 2, 0
_08097A58: .4byte 0x02022EA4
_08097A5C: .4byte 0x02012B78
_08097A60: .4byte 0x02023C7E
_08097A64: .4byte sub_080973E0
_08097A68: .4byte gActionSt
_08097A6C: .4byte gPlaySt
_08097A70: .4byte 0x0000038B
_08097A74:
	ldr r0, _08097AA8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08097A86
	ldr r0, _08097AAC @ =0x0000038A
	bl m4aSongNumStart
_08097A86:
	ldrb r0, [r7]
	cmp r4, r0
	bgt _08097AA0
	subs r0, r4, #1
	strb r0, [r7]
	lsls r1, r0, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl sub_080AA3F8
_08097AA0:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08097AA8: .4byte gPlaySt
_08097AAC: .4byte 0x0000038A

	thumb_func_start sub_08097AB0
sub_08097AB0: @ 0x08097AB0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x38]
	cmp r0, #1
	bne _08097AD8
	ldr r0, _08097AD4 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08097B74
	bl sub_080828A4
	movs r0, #0
	strh r0, [r4, #0x38]
	b _08097BB6
	.align 2, 0
_08097AD4: .4byte gpKeySt
_08097AD8:
	ldr r0, _08097B0C @ =gpKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08097B10
	ldr r0, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x31
	ldrb r3, [r1]
	lsls r1, r3, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	beq _08097BB6
	lsls r1, r3, #4
	adds r1, #0x48
	movs r0, #0x10
	bl sub_080826EC
	movs r0, #1
	strh r0, [r4, #0x38]
	b _08097BB6
	.align 2, 0
_08097B0C: .4byte gpKeySt
_08097B10:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08097B48
	ldr r0, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x31
	ldrb r1, [r1]
	bl sub_08091828
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08097B40
	movs r1, #1
	rsbs r1, r1, #0
	ldr r2, _08097B3C @ =0x000003B3
	adds r0, r1, #0
	adds r3, r4, #0
	bl sub_08091664
	b _08097BB6
	.align 2, 0
_08097B3C: .4byte 0x000003B3
_08097B40:
	adds r0, r4, #0
	bl sub_08097990
	b _08097BB6
_08097B48:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08097B74
	adds r0, r4, #0
	movs r1, #1
	bl Proc_Goto
	ldr r0, _08097B6C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08097BB6
	ldr r0, _08097B70 @ =0x0000038B
	bl m4aSongNumStart
	b _08097BB6
	.align 2, 0
_08097B6C: .4byte gPlaySt
_08097B70: .4byte 0x0000038B
_08097B74:
	adds r0, r4, #0
	bl sub_080978D8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08097BB6
	adds r5, r4, #0
	adds r5, #0x31
	ldrb r0, [r5]
	lsls r1, r0, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl sub_080AA3F8
	ldrh r0, [r4, #0x38]
	cmp r0, #1
	bne _08097BB6
	ldr r0, [r4, #0x2c]
	ldrb r3, [r5]
	lsls r1, r3, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	beq _08097BB6
	lsls r1, r3, #4
	adds r1, #0x48
	movs r0, #0x10
	bl sub_080826EC
_08097BB6:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08097BBC
sub_08097BBC: @ 0x08097BBC
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	bne _08097BD8
	ldr r0, _08097BF0 @ =0x08D8C154
	bl Proc_Find
	adds r1, r4, #0
	adds r1, #0x35
	ldrb r1, [r1]
	adds r0, #0x32
	strb r1, [r0]
_08097BD8:
	adds r0, r4, #0
	bl sub_080AAC88
	bl sub_0808EDB0
	movs r0, #0
	bl SetOnHBlankA
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08097BF0: .4byte 0x08D8C154

	thumb_func_start sub_08097BF4
sub_08097BF4: @ 0x08097BF4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08097C0C @ =0x08D8D120
	bl Proc_StartBlocking
	str r4, [r0, #0x2c]
	adds r0, #0x30
	movs r1, #0
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08097C0C: .4byte 0x08D8D120

	thumb_func_start sub_08097C10
sub_08097C10: @ 0x08097C10
	push {r4, lr}
	ldr r4, _08097C2C @ =gActiveUnit
	ldr r0, [r4]
	cmp r0, #0
	beq _08097C24
	bl MU_EndAll
	ldr r0, [r4]
	bl ShowUnitSprite
_08097C24:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08097C2C: .4byte gActiveUnit

	thumb_func_start sub_08097C30
sub_08097C30: @ 0x08097C30
	push {r4, lr}
	ldr r4, _08097C50 @ =gActiveUnit
	ldr r0, [r4]
	cmp r0, #0
	beq _08097C48
	bl HideUnitSprite
	ldr r0, [r4]
	bl sub_0806C2DC
	bl sub_0806C7CC
_08097C48:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08097C50: .4byte gActiveUnit

	thumb_func_start sub_08097C54
sub_08097C54: @ 0x08097C54
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08097C70 @ =0x08D8D1F0
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x2c]
	adds r0, #0x30
	movs r1, #1
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08097C70: .4byte 0x08D8D1F0

	thumb_func_start sub_08097C74
sub_08097C74: @ 0x08097C74
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08097C90 @ =0x08D8D1F0
	movs r1, #3
	bl Proc_Start
	str r4, [r0, #0x2c]
	adds r0, #0x30
	movs r1, #2
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08097C90: .4byte 0x08D8D1F0

	thumb_func_start sub_08097C94
sub_08097C94: @ 0x08097C94
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08097CD8 @ =0x08D8C154
	bl Proc_Find
	movs r2, #0
	movs r1, #0
	strh r1, [r4, #0x36]
	movs r1, #0xff
	strh r1, [r4, #0x34]
	adds r0, #0x31
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x33
	strb r0, [r1]
	subs r1, #2
	movs r0, #4
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x30
	strb r2, [r0]
	movs r2, #0
	adds r0, #8
	movs r1, #8
_08097CC4:
	strh r2, [r0]
	strh r2, [r0, #0x12]
	adds r0, #2
	subs r1, #1
	cmp r1, #0
	bge _08097CC4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08097CD8: .4byte 0x08D8C154

	thumb_func_start sub_08097CDC
sub_08097CDC: @ 0x08097CDC
	push {r4, lr}
	sub sp, #8
	ldr r4, _08097D10 @ =0x02022CC8
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, _08097D14 @ =0x02012BE0
	movs r1, #0
	str r1, [sp]
	ldr r1, _08097D18 @ =0x0842D0FC
	str r1, [sp, #4]
	adds r1, r4, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	movs r0, #1
	bl EnableBgSync
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08097D10: .4byte 0x02022CC8
_08097D14: .4byte 0x02012BE0
_08097D18: .4byte 0x0842D0FC

	thumb_func_start sub_08097D1C
sub_08097D1C: @ 0x08097D1C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r6, r0, #0
	adds r6, #0x33
	ldrb r2, [r6]
	lsls r1, r2, #1
	adds r5, r0, #0
	adds r5, #0x38
	adds r1, r5, r1
	ldrh r4, [r1]
	ldr r0, _08097D64 @ =0x02022CD0
	mov r8, r0
	movs r1, #0xa
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	ldr r7, _08097D68 @ =0x02012B70
	adds r0, r7, #0
	bl ClearText
	ldr r0, _08097D6C @ =0x02012466
	ldrh r0, [r0]
	cmp r0, r4
	bgt _08097D74
	movs r0, #0
	str r0, [sp]
	ldr r0, _08097D70 @ =0x0842D108
	str r0, [sp, #4]
	adds r0, r7, #0
	mov r1, r8
	movs r2, #1
	b _08097D94
	.align 2, 0
_08097D64: .4byte 0x02022CD0
_08097D68: .4byte 0x02012B70
_08097D6C: .4byte 0x02012466
_08097D70: .4byte 0x0842D108
_08097D74:
	ldr r0, _08097D9C @ =0x020117E4
	ldrb r6, [r6]
	lsls r1, r6, #1
	adds r1, r5, r1
	ldrh r1, [r1]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldrb r0, [r1]
	cmp r0, #0
	bne _08097DA4
	str r0, [sp]
	ldr r0, _08097DA0 @ =0x0842D110
	str r0, [sp, #4]
	adds r0, r7, #0
	mov r1, r8
	movs r2, #3
_08097D94:
	movs r3, #0
	bl PutDrawText
	b _08097DC2
	.align 2, 0
_08097D9C: .4byte 0x020117E4
_08097DA0: .4byte 0x0842D110
_08097DA4:
	bl GetUnitFromCharId
	ldr r0, [r0]
	ldrh r0, [r0]
	bl DecodeMsg
	movs r1, #0
	str r1, [sp]
	str r0, [sp, #4]
	adds r0, r7, #0
	mov r1, r8
	movs r2, #0
	movs r3, #0
	bl PutDrawText
_08097DC2:
	movs r0, #1
	bl EnableBgSync
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08097DD4
sub_08097DD4: @ 0x08097DD4
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r7, r6, #0
	adds r7, #0x33
	ldrb r0, [r7]
	lsls r4, r0, #1
	adds r4, r4, r0
	lsls r4, r4, #2
	adds r4, #0x7c
	bl GetGameTime
	ldr r2, _08097E4C @ =gPal
	lsrs r0, r0, #2
	movs r1, #0xf
	ands r0, r1
	lsls r0, r0, #1
	ldr r1, _08097E50 @ =0x08421C24
	adds r0, r0, r1
	ldrh r0, [r0]
	ldr r1, _08097E54 @ =0x0000029A
	adds r2, r2, r1
	strh r0, [r2]
	bl EnablePalSync
	ldr r1, _08097E58 @ =0x08D8D4F8
	ldrb r2, [r7]
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r3, [r0]
	movs r5, #0x85
	lsls r5, r5, #7
	str r5, [sp]
	movs r0, #4
	adds r1, r4, #0
	movs r2, #0x18
	bl sub_08006884
	ldr r3, _08097E5C @ =0x08D8D4E8
	str r5, [sp]
	movs r0, #4
	adds r1, r4, #0
	movs r2, #0x18
	bl sub_08006884
	ldrb r7, [r7]
	lsls r0, r7, #1
	adds r6, #0x4a
	adds r6, r6, r0
	ldrh r1, [r6]
	ldr r0, _08097E60 @ =0x02012466
	ldrh r2, [r0]
	movs r0, #0xb
	movs r3, #7
	bl sub_08090E04
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08097E4C: .4byte gPal
_08097E50: .4byte 0x08421C24
_08097E54: .4byte 0x0000029A
_08097E58: .4byte 0x08D8D4F8
_08097E5C: .4byte 0x08D8D4E8
_08097E60: .4byte 0x02012466

	thumb_func_start sub_08097E64
sub_08097E64: @ 0x08097E64
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r7, r0, #0
	ldr r0, _080981A4 @ =gDispIo
	mov r8, r0
	movs r0, #8
	rsbs r0, r0, #0
	mov r1, r8
	ldrb r1, [r1]
	ands r0, r1
	mov r2, r8
	strb r0, [r2]
	movs r0, #0
	bl InitBgs
	movs r0, #0
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	mov r3, r8
	ldrb r3, [r3, #0xc]
	ands r0, r3
	movs r4, #1
	orrs r0, r4
	mov r2, r8
	strb r0, [r2, #0xc]
	adds r0, r1, #0
	ldrb r3, [r2, #0x10]
	ands r0, r3
	movs r2, #2
	mov sb, r2
	mov r3, sb
	orrs r0, r3
	mov r2, r8
	strb r0, [r2, #0x10]
	ldrb r3, [r2, #0x14]
	ands r1, r3
	strb r1, [r2, #0x14]
	movs r0, #3
	ldrb r1, [r2, #0x18]
	orrs r0, r1
	strb r0, [r2, #0x18]
	bl sub_080069C4
	bl ResetText
	bl InitIcons
	bl sub_0804A9F8
	bl sub_08015A0C
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	adds r0, r7, #0
	adds r0, #0x33
	ldrb r0, [r0]
	lsls r1, r0, #1
	adds r0, r7, #0
	adds r0, #0x4a
	adds r0, r0, r1
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	ldr r0, _080981A8 @ =0x06012000
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_08082F74
	movs r0, #4
	bl ApplyIconPalettes
	bl sub_0808ED8C
	movs r0, #0xa0
	lsls r0, r0, #7
	movs r1, #5
	bl sub_0809228C
	ldr r0, _080981AC @ =gBg1Tm
	ldr r1, _080981B0 @ =0x0842AA0C
	movs r2, #0xa5
	lsls r2, r2, #7
	bl TmApplyTsa_thm
	movs r0, #7
	bl EnableBgSync
	adds r0, r7, #0
	bl sub_080A98C8
	adds r0, r7, #0
	bl sub_080AA390
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_080AA3B4
	movs r0, #0x20
	mov r2, r8
	ldrb r2, [r2, #1]
	orrs r0, r2
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r3, r8
	strb r0, [r3, #1]
	mov r1, r8
	adds r1, #0x2d
	movs r0, #0x80
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x28
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xe0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x98
	strb r0, [r1]
	mov r2, r8
	adds r2, #0x34
	ldrb r0, [r2]
	orrs r0, r4
	mov r1, sb
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r5, #8
	orrs r0, r5
	movs r3, #0x10
	orrs r0, r3
	strb r0, [r2]
	mov r1, r8
	adds r1, #0x36
	ldrb r2, [r1]
	orrs r4, r2
	mov r0, sb
	orrs r4, r0
	movs r0, #5
	rsbs r0, r0, #0
	ands r4, r0
	orrs r4, r5
	orrs r4, r3
	strb r4, [r1]
	adds r0, r7, #0
	bl sub_08005E88
	movs r0, #0xc8
	movs r1, #0x90
	adds r2, r7, #0
	bl sub_08082D1C
	ldr r4, _080981B4 @ =0x02012B68
	adds r0, r4, #0
	movs r1, #6
	bl InitText
	adds r0, r4, #0
	adds r0, #8
	movs r1, #5
	bl InitText
	adds r0, r4, #0
	adds r0, #0x78
	movs r1, #4
	bl InitText
	adds r4, #0x10
	movs r5, #4
_08098000:
	adds r0, r4, #0
	movs r1, #7
	bl InitText
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge _08098000
	movs r1, #0x33
	adds r1, r1, r7
	mov r8, r1
	adds r6, r7, #0
	adds r6, #0x4a
	ldr r4, _080981B8 @ =0x02012BA0
	movs r5, #7
_0809801E:
	adds r0, r4, #0
	movs r1, #7
	bl sub_0800536C
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge _0809801E
	movs r4, #0x80
	lsls r4, r4, #7
	adds r0, r4, #0
	movs r1, #6
	bl sub_08096464
	ldr r2, _080981BC @ =0x02022D3E
	mov sb, r2
	mov r0, sb
	adds r1, r4, #0
	movs r2, #6
	bl sub_08096A38
	ldr r0, _080981C0 @ =0x0841E0A4
	ldr r1, _080981C4 @ =0x06015000
	bl sub_08013688
	adds r0, r7, #0
	bl sub_08090DD0
	movs r0, #0xb0
	lsls r0, r0, #7
	movs r1, #4
	bl sub_08090E38
	movs r0, #0xe2
	movs r1, #0x30
	bl sub_08090DE4
	bl sub_08090DA0
	ldr r0, [r7, #0x2c]
	mov r3, r8
	ldrb r1, [r3]
	movs r2, #3
	bl sub_08091A74
	adds r0, r7, #0
	bl sub_080986C0
	ldr r5, _080981B8 @ =0x02012BA0
	ldr r1, _080981C8 @ =0x02023C7E
	mov r2, r8
	ldrb r2, [r2]
	lsls r0, r2, #1
	adds r0, r6, r0
	ldrh r0, [r0]
	lsrs r2, r0, #4
	ldr r3, [r7, #0x2c]
	adds r0, r5, #0
	bl sub_080964A0
	movs r0, #4
	bl EnableBgSync
	movs r0, #0xb3
	lsls r0, r0, #1
	add r0, sb
	adds r1, r5, #0
	subs r1, #0x28
	ldr r2, [r7, #0x2c]
	movs r3, #0
	bl sub_08094AC0
	bl sub_08097CDC
	adds r0, r7, #0
	bl sub_080A9BE8
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r0, #0
	movs r2, #2
	bl sub_080A9BFC
	movs r0, #0x78
	movs r1, #0x18
	movs r2, #0xea
	movs r3, #0x18
	bl sub_080A9C84
	movs r0, #3
	bl sub_080A9C68
	ldr r0, _080981CC @ =sub_08097DD4
	adds r1, r7, #0
	bl sub_080AA20C
	ldr r0, [r7, #0x2c]
	bl GetUnitPortraitId
	adds r1, r0, #0
	movs r3, #4
	rsbs r3, r3, #0
	ldr r0, _080981D0 @ =0x00000203
	str r0, [sp]
	movs r0, #0
	movs r2, #0x40
	bl sub_08007A5C
	ldr r0, [r7, #0x2c]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl DecodeMsg
	mov r8, r0
	movs r1, #0xe0
	lsls r1, r1, #4
	movs r3, #0xc0
	lsls r3, r3, #4
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [sp]
	str r7, [sp, #4]
	movs r0, #0xd
	movs r2, #0xf
	bl sub_080AAA50
	movs r1, #0x28
	rsbs r1, r1, #0
	movs r2, #1
	rsbs r2, r2, #0
	movs r0, #0
	movs r3, #1
	bl sub_080AAAD0
	movs r0, #1
	movs r1, #0x98
	movs r2, #6
	movs r3, #2
	bl sub_080AAAD0
	ldr r3, _080981A4 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r4, #0
	movs r0, #0xe
	strb r0, [r1]
	adds r1, #1
	movs r0, #4
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r4, [r0]
	ldr r0, _080981D4 @ =0x0000FFE0
	ldrh r2, [r3, #0x3c]
	ands r0, r2
	ldr r1, _080981D8 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	movs r0, #0x30
	mov r1, r8
	bl GetStringTextCenteredPos
	adds r3, r0, #0
	subs r5, #0x38
	str r4, [sp]
	mov r0, r8
	str r0, [sp, #4]
	adds r0, r5, #0
	ldr r1, _080981DC @ =gBg0Tm
	movs r2, #0
	bl PutDrawText
	adds r0, r7, #0
	bl sub_08097D1C
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080981A4: .4byte gDispIo
_080981A8: .4byte 0x06012000
_080981AC: .4byte gBg1Tm
_080981B0: .4byte 0x0842AA0C
_080981B4: .4byte 0x02012B68
_080981B8: .4byte 0x02012BA0
_080981BC: .4byte 0x02022D3E
_080981C0: .4byte 0x0841E0A4
_080981C4: .4byte 0x06015000
_080981C8: .4byte 0x02023C7E
_080981CC: .4byte sub_08097DD4
_080981D0: .4byte 0x00000203
_080981D4: .4byte 0x0000FFE0
_080981D8: .4byte 0x0000E0FF
_080981DC: .4byte gBg0Tm

	thumb_func_start sub_080981E0
sub_080981E0: @ 0x080981E0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0809820C @ =0x08D8C154
	bl Proc_Find
	adds r1, r4, #0
	adds r1, #0x33
	ldrb r1, [r1]
	adds r0, #0x31
	strb r1, [r0]
	adds r0, r4, #0
	bl sub_080AAC88
	movs r0, #0
	bl EndFaceById
	bl sub_0808EDB0
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809820C: .4byte 0x08D8C154

	thumb_func_start sub_08098210
sub_08098210: @ 0x08098210
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	bl InitIcons
	ldr r0, [r4, #0x2c]
	adds r5, r4, #0
	adds r5, #0x33
	ldrb r1, [r5]
	movs r2, #3
	bl sub_08091A74
	adds r0, r4, #0
	bl sub_08098430
	ldr r0, _080982B0 @ =0x02012BA0
	ldr r1, _080982B4 @ =0x02023C7E
	ldrb r3, [r5]
	lsls r2, r3, #1
	adds r6, r4, #0
	adds r6, #0x4a
	adds r2, r6, r2
	ldrh r2, [r2]
	lsrs r2, r2, #4
	ldr r3, [r4, #0x2c]
	bl sub_080964A0
	ldr r0, _080982B8 @ =0x02022EA4
	ldr r1, [r4, #0x2c]
	bl sub_08094BA4
	ldrb r1, [r5]
	lsls r0, r1, #1
	adds r7, r4, #0
	adds r7, #0x38
	adds r1, r7, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	adds r0, r6, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x80
	movs r2, #0xb
	bl sub_080AA3F8
	movs r0, #5
	bl EnableBgSync
	ldr r0, _080982BC @ =sub_08097D1C
	movs r1, #2
	adds r2, r4, #0
	bl sub_080A9D28
	ldrh r0, [r4, #0x36]
	cmp r0, #0
	beq _080982D0
	ldr r0, _080982C0 @ =0x02012466
	ldrh r0, [r0]
	cmp r0, #0
	beq _080982C8
	ldr r2, _080982C4 @ =0x020117E4
	ldrb r5, [r5]
	lsls r3, r5, #1
	adds r0, r7, r3
	ldrh r1, [r0]
	lsls r0, r1, #2
	adds r0, r0, r2
	ldrh r2, [r0, #2]
	lsls r1, r1, #4
	adds r3, r6, r3
	ldrh r0, [r3]
	subs r0, #0x28
	subs r1, r1, r0
	movs r0, #0x80
	bl sub_080826EC
	movs r0, #1
	b _080982CE
	.align 2, 0
_080982B0: .4byte 0x02012BA0
_080982B4: .4byte 0x02023C7E
_080982B8: .4byte 0x02022EA4
_080982BC: .4byte sub_08097D1C
_080982C0: .4byte 0x02012466
_080982C4: .4byte 0x020117E4
_080982C8:
	bl sub_080828A4
	movs r0, #0xff
_080982CE:
	strh r0, [r4, #0x36]
_080982D0:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080982D8
sub_080982D8: @ 0x080982D8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	movs r0, #4
	mov r8, r0
	adds r1, r7, #0
	adds r1, #0x32
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r4, [r1]
	cmp r4, #4
	bge _0809830A
	mov r2, r8
	subs r1, r2, r4
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #5
	muls r0, r1, r0
	movs r1, #0x10
	bl __divsi3
	adds r6, r0, #0
	subs r6, #0x60
_0809830A:
	adds r5, r7, #0
	adds r5, #0x33
	cmp r4, #4
	bne _08098326
	ldrb r0, [r5]
	cmp r0, #0
	bne _0809831C
	movs r0, #8
	b _0809831E
_0809831C:
	subs r0, #1
_0809831E:
	strb r0, [r5]
	adds r0, r7, #0
	bl sub_08098210
_08098326:
	adds r4, r7, #0
	adds r4, #0x32
	ldrb r1, [r4]
	cmp r1, r8
	blt _0809834A
	mov r0, r8
	subs r1, r1, r0
	subs r1, r0, r1
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #5
	muls r0, r1, r0
	mov r2, r8
	mov r1, r8
	muls r1, r2, r1
	bl __divsi3
	adds r6, r0, #0
_0809834A:
	movs r0, #0xff
	ands r6, r0
	ldrb r5, [r5]
	lsls r1, r5, #1
	adds r0, r7, #0
	adds r0, #0x4a
	adds r0, r0, r1
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	adds r1, r6, #0
	bl SetBgOffset
	mov r1, r8
	lsls r0, r1, #1
	ldrb r4, [r4]
	cmp r4, r0
	bne _0809837A
	adds r0, r7, #0
	movs r1, #1
	bl Proc_Goto
_0809837A:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08098384
sub_08098384: @ 0x08098384
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	movs r0, #4
	mov r8, r0
	adds r1, r7, #0
	adds r1, #0x32
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r4, [r1]
	cmp r4, #4
	bge _080983B6
	mov r2, r8
	subs r1, r2, r4
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #5
	muls r0, r1, r0
	movs r1, #0x10
	bl __divsi3
	movs r1, #0x60
	subs r6, r1, r0
_080983B6:
	adds r5, r7, #0
	adds r5, #0x33
	cmp r4, #4
	bne _080983D2
	ldrb r0, [r5]
	cmp r0, #8
	bne _080983C8
	movs r0, #0
	b _080983CA
_080983C8:
	adds r0, #1
_080983CA:
	strb r0, [r5]
	adds r0, r7, #0
	bl sub_08098210
_080983D2:
	adds r4, r7, #0
	adds r4, #0x32
	ldrb r1, [r4]
	cmp r1, r8
	blt _080983F6
	mov r0, r8
	subs r1, r1, r0
	subs r1, r0, r1
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #5
	muls r0, r1, r0
	mov r2, r8
	mov r1, r8
	muls r1, r2, r1
	bl __divsi3
	rsbs r6, r0, #0
_080983F6:
	movs r0, #0xff
	ands r6, r0
	ldrb r5, [r5]
	lsls r1, r5, #1
	adds r0, r7, #0
	adds r0, #0x4a
	adds r0, r0, r1
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	adds r1, r6, #0
	bl SetBgOffset
	mov r1, r8
	lsls r0, r1, #1
	ldrb r4, [r4]
	cmp r4, r0
	bne _08098426
	adds r0, r7, #0
	movs r1, #1
	bl Proc_Goto
_08098426:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08098430
sub_08098430: @ 0x08098430
	push {r4, r5, lr}
	mov ip, r0
	ldr r0, _08098458 @ =0x02012466
	ldrh r4, [r0]
	adds r5, r0, #0
	cmp r4, #0
	bne _0809845C
	mov r3, ip
	adds r3, #0x33
	ldrb r1, [r3]
	lsls r0, r1, #1
	mov r1, ip
	adds r1, #0x38
	adds r1, r1, r0
	mov r2, ip
	adds r2, #0x4a
	adds r0, r2, r0
	strh r4, [r0]
	strh r4, [r1]
	b _0809847A
	.align 2, 0
_08098458: .4byte 0x02012466
_0809845C:
	mov r2, ip
	adds r2, #0x33
	ldrb r0, [r2]
	lsls r1, r0, #1
	mov r0, ip
	adds r0, #0x38
	adds r0, r0, r1
	ldrh r4, [r5]
	subs r4, #1
	adds r3, r2, #0
	adds r2, #0x17
	ldrh r1, [r0]
	cmp r1, r4
	ble _0809847A
	strh r4, [r0]
_0809847A:
	ldrh r0, [r5]
	cmp r0, #6
	bls _08098498
	ldrb r1, [r3]
	lsls r0, r1, #1
	adds r4, r2, r0
	ldrh r1, [r4]
	lsrs r0, r1, #4
	adds r0, #7
	ldrh r1, [r5]
	cmp r0, r1
	ble _08098498
	subs r0, r1, #7
	lsls r0, r0, #4
	strh r0, [r4]
_08098498:
	ldrb r3, [r3]
	lsls r0, r3, #1
	adds r0, r2, r0
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080984B4
sub_080984B4: @ 0x080984B4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r7, r1, #0
	bl InitIcons
	ldr r0, _0809854C @ =0x02023C7E
	mov r8, r0
	adds r6, r4, #0
	adds r6, #0x33
	ldrb r1, [r6]
	lsls r0, r1, #1
	adds r5, r4, #0
	adds r5, #0x4a
	adds r0, r5, r0
	ldrh r0, [r0]
	lsrs r1, r0, #4
	mov r0, r8
	bl sub_080965B4
	ldr r0, _08098550 @ =0x02022EA4
	ldr r1, [r4, #0x2c]
	bl sub_08094BA4
	movs r0, #5
	bl EnableBgSync
	cmp r7, #0
	bge _08098506
	ldr r0, _08098554 @ =0x02012BA0
	ldrb r2, [r6]
	lsls r1, r2, #1
	adds r1, r5, r1
	ldrh r1, [r1]
	lsrs r2, r1, #4
	subs r2, #1
	ldr r3, [r4, #0x2c]
	mov r1, r8
	bl sub_08096618
_08098506:
	cmp r7, #0
	ble _08098520
	ldr r0, _08098554 @ =0x02012BA0
	ldrb r2, [r6]
	lsls r1, r2, #1
	adds r1, r5, r1
	ldrh r1, [r1]
	lsrs r2, r1, #4
	adds r2, #7
	ldr r3, [r4, #0x2c]
	mov r1, r8
	bl sub_08096618
_08098520:
	ldrb r1, [r6]
	lsls r0, r1, #1
	adds r0, r5, r0
	ldrh r2, [r0]
	adds r1, r2, r7
	strh r1, [r0]
	ldrb r6, [r6]
	lsls r0, r6, #1
	adds r0, r5, r0
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809854C: .4byte 0x02023C7E
_08098550: .4byte 0x02022EA4
_08098554: .4byte 0x02012BA0

	thumb_func_start sub_08098558
sub_08098558: @ 0x08098558
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r6, r0, #0
	ldr r0, [r6, #0x2c]
	bl GetUnitItemCount
	adds r2, r0, #0
	cmp r2, #5
	beq _08098576
	ldr r0, _08098590 @ =0x02012466
	ldrh r0, [r0]
	cmp r0, #0
	bne _08098598
_08098576:
	ldr r0, _08098594 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _08098584
	b _080986AA
_08098584:
	movs r0, #0xe3
	lsls r0, r0, #2
	bl m4aSongNumStart
	b _080986AA
	.align 2, 0
_08098590: .4byte 0x02012466
_08098594: .4byte gPlaySt
_08098598:
	movs r4, #0
	strh r4, [r6, #0x36]
	ldr r1, [r6, #0x2c]
	lsls r0, r2, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldr r0, _0809867C @ =0x020117E4
	mov sb, r0
	adds r7, r6, #0
	adds r7, #0x33
	ldrb r2, [r7]
	lsls r0, r2, #1
	adds r5, r6, #0
	adds r5, #0x38
	adds r0, r5, r0
	ldrh r0, [r0]
	lsls r0, r0, #2
	add r0, sb
	ldrh r0, [r0, #2]
	strh r0, [r1]
	ldr r0, [r6, #0x2c]
	bl UnitRemoveInvalidItems
	ldrb r1, [r7]
	lsls r0, r1, #1
	adds r0, r5, r0
	ldrh r0, [r0]
	lsls r0, r0, #2
	add r0, sb
	strh r4, [r0, #2]
	bl sub_08091B48
	ldr r0, [r6, #0x2c]
	ldrb r1, [r7]
	movs r2, #3
	bl sub_08091A74
	adds r0, r6, #0
	bl sub_08098430
	bl InitIcons
	ldr r0, _08098680 @ =0x02022EA4
	ldr r4, _08098684 @ =0x02012B78
	ldr r2, [r6, #0x2c]
	adds r1, r4, #0
	movs r3, #0
	bl sub_08094AC0
	adds r4, #0x28
	ldr r1, _08098688 @ =0x02023C7E
	ldrb r2, [r7]
	lsls r0, r2, #1
	movs r2, #0x4a
	adds r2, r2, r6
	mov r8, r2
	add r0, r8
	ldrh r0, [r0]
	lsrs r2, r0, #4
	ldr r3, [r6, #0x2c]
	adds r0, r4, #0
	bl sub_080964A0
	ldrb r1, [r7]
	lsls r0, r1, #1
	adds r0, r5, r0
	ldrh r0, [r0]
	lsls r0, r0, #2
	add r0, sb
	ldrb r0, [r0]
	cmp r0, #0
	beq _08098632
	ldr r0, _0809868C @ =sub_08097D1C
	movs r1, #1
	adds r2, r6, #0
	bl sub_080A9D28
_08098632:
	ldrb r7, [r7]
	lsls r0, r7, #1
	adds r1, r5, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	add r0, r8
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x80
	movs r2, #0xb
	bl sub_080AA3F8
	movs r0, #5
	bl EnableBgSync
	ldr r0, [r6, #0x2c]
	bl GetUnitItemCount
	cmp r0, #5
	bne _08098698
	adds r0, r6, #0
	movs r1, #1
	bl Proc_Goto
	ldr r0, _08098690 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080986AA
	ldr r0, _08098694 @ =0x0000038B
	bl m4aSongNumStart
	b _080986AA
	.align 2, 0
_0809867C: .4byte 0x020117E4
_08098680: .4byte 0x02022EA4
_08098684: .4byte 0x02012B78
_08098688: .4byte 0x02023C7E
_0809868C: .4byte sub_08097D1C
_08098690: .4byte gPlaySt
_08098694: .4byte 0x0000038B
_08098698:
	ldr r0, _080986B8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080986AA
	ldr r0, _080986BC @ =0x0000038A
	bl m4aSongNumStart
_080986AA:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080986B8: .4byte gPlaySt
_080986BC: .4byte 0x0000038A

	thumb_func_start sub_080986C0
sub_080986C0: @ 0x080986C0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov ip, r0
	adds r0, #0x33
	ldrb r0, [r0]
	lsls r2, r0, #1
	mov r0, ip
	adds r0, #0x38
	adds r4, r0, r2
	ldrh r3, [r4]
	lsls r1, r3, #4
	adds r0, #0x12
	adds r0, r0, r2
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	cmp r1, #0x37
	bgt _080986EE
	cmp r3, #0
	beq _080986EE
	adds r0, r3, #1
	strh r0, [r4]
_080986EE:
	mov r4, ip
	adds r4, #0x33
	ldrb r1, [r4]
	lsls r0, r1, #1
	mov r3, ip
	adds r3, #0x38
	adds r6, r3, r0
	ldrh r5, [r6]
	lsls r1, r5, #4
	mov r2, ip
	adds r2, #0x4a
	adds r0, r2, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	adds r7, r3, #0
	mov r8, r2
	cmp r1, #0x78
	ble _08098722
	ldr r0, _08098750 @ =0x02012466
	ldrh r0, [r0]
	subs r0, #1
	cmp r5, r0
	beq _08098722
	subs r0, r5, #1
	strh r0, [r6]
_08098722:
	mov r0, ip
	bl sub_08098430
	ldrb r4, [r4]
	lsls r0, r4, #1
	adds r1, r7, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	add r0, r8
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x80
	movs r2, #0xb
	bl sub_080AA3F8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08098750: .4byte 0x02012466

	thumb_func_start sub_08098754
sub_08098754: @ 0x08098754
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r4, r0, #0
	adds r6, r4, #0
	adds r6, #0x33
	ldrb r0, [r6]
	lsls r1, r0, #1
	movs r2, #0x38
	adds r2, r2, r4
	mov r8, r2
	adds r0, r2, r1
	ldrh r0, [r0]
	mov sb, r0
	adds r5, r4, #0
	adds r5, #0x4a
	adds r7, r5, r1
	movs r3, #0xf
	ldrh r0, [r7]
	ands r0, r3
	mov sl, r0
	cmp r0, #0
	beq _08098788
	b _080989DC
_08098788:
	ldrh r0, [r4, #0x36]
	cmp r0, #0
	beq _08098794
	cmp r0, #0xff
	beq _08098794
	b _08098890
_08098794:
	ldr r1, _080987D0 @ =gpKeySt
	ldr r0, [r1]
	ldrh r3, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r3
	mov r8, r1
	cmp r0, #0
	beq _080987DC
	ldr r0, _080987D4 @ =0x02012466
	ldrh r0, [r0]
	cmp r0, #0
	beq _080987EC
	ldr r1, _080987D8 @ =0x020117E4
	mov r2, sb
	lsls r0, r2, #2
	adds r0, r0, r1
	ldrh r2, [r0, #2]
	mov r3, sb
	lsls r1, r3, #4
	ldrh r0, [r7]
	subs r0, #0x28
	subs r1, r1, r0
	movs r0, #0x80
	bl sub_080826EC
	movs r0, #1
	strh r0, [r4, #0x36]
	b _08098B52
	.align 2, 0
_080987D0: .4byte gpKeySt
_080987D4: .4byte 0x02012466
_080987D8: .4byte 0x020117E4
_080987DC:
	movs r0, #1
	ands r0, r3
	cmp r0, #0
	beq _08098860
	ldr r0, _08098804 @ =0x02012466
	ldrh r0, [r0]
	cmp r0, #0
	bne _0809880C
_080987EC:
	ldr r0, _08098808 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _080987FA
	b _08098B52
_080987FA:
	movs r0, #0xe3
	lsls r0, r0, #2
	bl m4aSongNumStart
	b _08098B52
	.align 2, 0
_08098804: .4byte 0x02012466
_08098808: .4byte gPlaySt
_0809880C:
	ldr r0, _08098834 @ =0x020117E4
	mov r2, sb
	lsls r1, r2, #2
	adds r1, r1, r0
	ldrb r0, [r1]
	cmp r0, #0
	bne _08098838
	lsls r2, r2, #4
	ldrh r0, [r7]
	subs r0, #0x28
	subs r2, r2, r0
	movs r0, #0
	movs r1, #0x80
	movs r3, #2
	bl sub_080A98DC
	adds r0, r4, #0
	movs r1, #7
	b _0809883C
	.align 2, 0
_08098834: .4byte 0x020117E4
_08098838:
	adds r0, r4, #0
	movs r1, #6
_0809883C:
	bl Proc_Goto
	ldr r0, _08098858 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _0809884E
	b _08098B52
_0809884E:
	ldr r0, _0809885C @ =0x0000038A
	bl m4aSongNumStart
	b _08098B52
	.align 2, 0
_08098858: .4byte gPlaySt
_0809885C: .4byte 0x0000038A
_08098860:
	movs r0, #2
	ands r0, r3
	cmp r0, #0
	beq _080988B0
	adds r0, r4, #0
	movs r1, #8
	bl Proc_Goto
	ldr r0, _08098888 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08098882
	ldr r0, _0809888C @ =0x0000038B
	bl m4aSongNumStart
_08098882:
	mov r3, sl
	strh r3, [r4, #0x36]
	b _08098B52
	.align 2, 0
_08098888: .4byte gPlaySt
_0809888C: .4byte 0x0000038B
_08098890:
	ldr r2, _080988AC @ =gpKeySt
	ldr r1, [r2]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	mov r8, r2
	cmp r0, #0
	beq _080988B0
	bl sub_080828A4
	mov r0, sl
	strh r0, [r4, #0x36]
	b _08098B52
	.align 2, 0
_080988AC: .4byte gpKeySt
_080988B0:
	mov r1, r8
	ldr r2, [r1]
	ldrh r1, [r2, #6]
	movs r0, #0x20
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _080988FC
	movs r0, #0
	bl sub_080A9CAC
	ldr r0, _080988F4 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080988DA
	ldr r0, _080988F8 @ =0x00000387
	bl m4aSongNumStart
_080988DA:
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
	adds r1, r4, #0
	adds r1, #0x32
	movs r0, #0
	strb r0, [r1]
	adds r0, r4, #0
	bl sub_080982D8
	b _08098B52
	.align 2, 0
_080988F4: .4byte gPlaySt
_080988F8: .4byte 0x00000387
_080988FC:
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _0809893C
	movs r0, #1
	bl sub_080A9CAC
	ldr r0, _08098934 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809891C
	ldr r0, _08098938 @ =0x00000387
	bl m4aSongNumStart
_0809891C:
	adds r0, r4, #0
	movs r1, #4
	bl Proc_Goto
	adds r0, r4, #0
	adds r0, #0x32
	strb r5, [r0]
	adds r0, r4, #0
	bl sub_08098384
	b _08098B52
	.align 2, 0
_08098934: .4byte gPlaySt
_08098938: .4byte 0x00000387
_0809893C:
	movs r0, #0x80
	lsls r0, r0, #2
	ldrh r2, [r2, #4]
	ands r0, r2
	cmp r0, #0
	beq _08098950
	adds r1, r4, #0
	adds r1, #0x31
	movs r0, #8
	b _08098956
_08098950:
	adds r1, r4, #0
	adds r1, #0x31
	movs r0, #4
_08098956:
	strb r0, [r1]
	adds r5, r1, #0
	mov r2, r8
	ldr r1, [r2]
	movs r2, #0x40
	adds r0, r2, #0
	ldrh r3, [r1, #6]
	ands r0, r3
	cmp r0, #0
	bne _08098982
	adds r0, r2, #0
	ldrh r1, [r1, #4]
	ands r0, r1
	adds r7, r4, #0
	adds r7, #0x33
	adds r6, r4, #0
	adds r6, #0x38
	cmp r0, #0
	beq _0809899E
	ldrb r0, [r5]
	cmp r0, #8
	bne _0809899E
_08098982:
	adds r0, r4, #0
	adds r0, #0x33
	ldrb r2, [r0]
	lsls r1, r2, #1
	adds r2, r4, #0
	adds r2, #0x38
	adds r3, r2, r1
	ldrh r1, [r3]
	adds r7, r0, #0
	adds r6, r2, #0
	cmp r1, #0
	beq _0809899E
	subs r0, r1, #1
	strh r0, [r3]
_0809899E:
	mov r3, r8
	ldr r1, [r3]
	movs r2, #0x80
	adds r0, r2, #0
	ldrh r3, [r1, #6]
	ands r0, r3
	cmp r0, #0
	bne _080989BE
	adds r0, r2, #0
	ldrh r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _08098A3C
	ldrb r5, [r5]
	cmp r5, #8
	bne _08098A3C
_080989BE:
	ldrb r1, [r7]
	lsls r0, r1, #1
	adds r2, r6, r0
	ldrh r1, [r2]
	ldr r0, _080989D8 @ =0x02012466
	ldrh r0, [r0]
	subs r0, #1
	cmp r1, r0
	bge _08098A3C
	adds r0, r1, #1
	strh r0, [r2]
	b _08098A3C
	.align 2, 0
_080989D8: .4byte 0x02012466
_080989DC:
	mov r2, sb
	lsls r0, r2, #4
	ldrh r2, [r7]
	adds r1, r2, #0
	subs r1, #0x28
	subs r0, r0, r1
	cmp r0, #0x37
	bgt _080989FA
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r2, r0
	strh r0, [r7]
_080989FA:
	ldrb r3, [r6]
	lsls r2, r3, #1
	mov r1, r8
	adds r0, r1, r2
	ldrh r0, [r0]
	lsls r1, r0, #4
	adds r3, r5, r2
	ldrh r2, [r3]
	adds r0, r2, #0
	subs r0, #0x28
	subs r1, r1, r0
	cmp r1, #0x78
	ble _08098A22
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r0, r2, r0
	strh r0, [r3]
_08098A22:
	ldrb r2, [r6]
	lsls r0, r2, #1
	adds r0, r5, r0
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	adds r7, r6, #0
	mov r6, r8
_08098A3C:
	ldrb r3, [r7]
	lsls r0, r3, #1
	adds r0, r6, r0
	ldrh r0, [r0]
	cmp sb, r0
	bne _08098A4A
	b _08098B52
_08098A4A:
	ldr r5, _08098AC4 @ =0x020117E4
	lsls r0, r0, #2
	adds r0, r0, r5
	ldrh r0, [r0, #2]
	mov sl, r0
	ldr r0, _08098AC8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08098A66
	ldr r0, _08098ACC @ =0x00000386
	bl m4aSongNumStart
_08098A66:
	ldrb r1, [r7]
	lsls r0, r1, #1
	adds r0, r6, r0
	ldrh r0, [r0]
	lsls r1, r0, #2
	adds r1, r1, r5
	mov r2, sb
	lsls r0, r2, #2
	adds r0, r0, r5
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	beq _08098A86
	adds r0, r4, #0
	bl sub_08097D1C
_08098A86:
	ldrb r3, [r7]
	lsls r1, r3, #1
	adds r0, r6, r1
	ldrh r5, [r0]
	lsls r3, r5, #4
	adds r2, r4, #0
	adds r2, #0x4a
	adds r1, r2, r1
	ldrh r0, [r1]
	subs r0, #0x28
	subs r1, r3, r0
	mov r8, r2
	cmp r1, #0x37
	bgt _08098AD0
	cmp r5, #0
	beq _08098AD0
	ldrh r0, [r4, #0x36]
	cmp r0, #0
	beq _08098AB6
	adds r1, #0x10
	movs r0, #0x80
	mov r2, sl
	bl sub_080826EC
_08098AB6:
	adds r0, r4, #0
	adds r0, #0x31
	movs r1, #0
	ldrsb r1, [r0, r1]
	rsbs r1, r1, #0
	b _08098B08
	.align 2, 0
_08098AC4: .4byte 0x020117E4
_08098AC8: .4byte gPlaySt
_08098ACC: .4byte 0x00000386
_08098AD0:
	ldrb r1, [r7]
	lsls r0, r1, #1
	adds r1, r6, r0
	ldrh r2, [r1]
	lsls r1, r2, #4
	add r0, r8
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	cmp r1, #0x78
	ble _08098B14
	ldr r0, _08098B10 @ =0x02012466
	ldrh r0, [r0]
	subs r0, #1
	cmp r2, r0
	beq _08098B14
	ldrh r0, [r4, #0x36]
	cmp r0, #0
	beq _08098B00
	subs r1, #0x10
	movs r0, #0x80
	mov r2, sl
	bl sub_080826EC
_08098B00:
	adds r0, r4, #0
	adds r0, #0x31
	movs r1, #0
	ldrsb r1, [r0, r1]
_08098B08:
	adds r0, r4, #0
	bl sub_080984B4
	b _08098B52
	.align 2, 0
_08098B10: .4byte 0x02012466
_08098B14:
	ldrh r0, [r4, #0x36]
	cmp r0, #0
	beq _08098B34
	ldrb r2, [r7]
	lsls r0, r2, #1
	adds r1, r6, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	add r0, r8
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r0, #0x80
	mov r2, sl
	bl sub_080826EC
_08098B34:
	ldrb r7, [r7]
	lsls r0, r7, #1
	adds r1, r6, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	add r0, r8
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x80
	movs r2, #0xb
	bl sub_080AA3F8
_08098B52:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_08098B60
sub_08098B60: @ 0x08098B60
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r1, r0, #0
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r7, [r0]
	adds r3, r1, #0
	cmp r3, #5
	bne _08098B7C
	movs r3, #4
	b _08098B84
_08098B7C:
	ldrh r0, [r4, #0x36]
	cmp r0, #0
	beq _08098B84
	subs r3, #1
_08098B84:
	cmp r1, #0
	beq _08098C04
	ldr r1, _08098BA8 @ =gpKeySt
	ldr r5, [r1]
	movs r6, #0x40
	adds r0, r6, #0
	ldrh r2, [r5, #6]
	ands r0, r2
	adds r2, r4, #0
	adds r2, #0x30
	cmp r0, #0
	beq _08098BB8
	ldrb r0, [r2]
	cmp r0, #0
	beq _08098BAC
	subs r0, #1
	strb r0, [r2]
	b _08098BB8
	.align 2, 0
_08098BA8: .4byte gpKeySt
_08098BAC:
	adds r0, r6, #0
	ldrh r5, [r5, #8]
	ands r0, r5
	cmp r0, #0
	beq _08098BB8
	strb r3, [r2]
_08098BB8:
	ldr r1, [r1]
	movs r4, #0x80
	adds r0, r4, #0
	ldrh r5, [r1, #6]
	ands r0, r5
	cmp r0, #0
	beq _08098BDE
	ldrb r0, [r2]
	cmp r0, r3
	bge _08098BD0
	adds r0, #1
	b _08098BDC
_08098BD0:
	adds r0, r4, #0
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08098BDE
	movs r0, #0
_08098BDC:
	strb r0, [r2]
_08098BDE:
	ldrb r2, [r2]
	cmp r7, r2
	beq _08098C04
	ldr r0, _08098BFC @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08098BF6
	ldr r0, _08098C00 @ =0x00000386
	bl m4aSongNumStart
_08098BF6:
	movs r0, #1
	b _08098C06
	.align 2, 0
_08098BFC: .4byte gPlaySt
_08098C00: .4byte 0x00000386
_08098C04:
	movs r0, #0
_08098C06:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_08098C0C
sub_08098C0C: @ 0x08098C0C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r1, r0, #0
	cmp r1, #5
	bne _08098C28
	adds r1, r4, #0
	adds r1, #0x30
	movs r0, #4
	strb r0, [r1]
	adds r0, r1, #0
	b _08098C2E
_08098C28:
	adds r0, r4, #0
	adds r0, #0x30
	strb r1, [r0]
_08098C2E:
	ldrb r0, [r0]
	lsls r1, r0, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl sub_080AA3F8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08098C48
sub_08098C48: @ 0x08098C48
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	adds r7, r6, #0
	adds r7, #0x33
	ldrb r1, [r7]
	lsls r0, r1, #1
	adds r2, r6, #0
	adds r2, #0x38
	adds r2, r2, r0
	ldr r1, [r6, #0x2c]
	adds r0, r6, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldrh r5, [r1]
	ldr r0, _08098CE8 @ =0x020117E4
	ldrh r2, [r2]
	lsls r4, r2, #2
	adds r4, r4, r0
	ldrh r0, [r4, #2]
	strh r0, [r1]
	ldr r0, [r6, #0x2c]
	bl UnitRemoveInvalidItems
	strh r5, [r4, #2]
	bl sub_08091B48
	cmp r5, #0
	bne _08098C90
	ldr r0, [r6, #0x2c]
	ldrb r1, [r7]
	movs r2, #3
	bl sub_08091A74
_08098C90:
	adds r0, r6, #0
	bl sub_08098430
	ldr r0, _08098CEC @ =0x02022EA4
	ldr r4, _08098CF0 @ =0x02012B78
	ldr r2, [r6, #0x2c]
	adds r1, r4, #0
	movs r3, #0
	bl sub_08094AC0
	adds r4, #0x28
	ldr r1, _08098CF4 @ =0x02023C7E
	ldrb r7, [r7]
	lsls r2, r7, #1
	adds r0, r6, #0
	adds r0, #0x4a
	adds r0, r0, r2
	ldrh r0, [r0]
	lsrs r2, r0, #4
	ldr r3, [r6, #0x2c]
	adds r0, r4, #0
	bl sub_080964A0
	ldr r0, _08098CF8 @ =sub_08097D1C
	movs r1, #1
	adds r2, r6, #0
	bl sub_080A9D28
	movs r0, #4
	bl EnableBgSync
	ldr r0, _08098CFC @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08098CE0
	ldr r0, _08098D00 @ =0x0000038A
	bl m4aSongNumStart
_08098CE0:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08098CE8: .4byte 0x020117E4
_08098CEC: .4byte 0x02022EA4
_08098CF0: .4byte 0x02012B78
_08098CF4: .4byte 0x02023C7E
_08098CF8: .4byte sub_08097D1C
_08098CFC: .4byte gPlaySt
_08098D00: .4byte 0x0000038A

	thumb_func_start sub_08098D04
sub_08098D04: @ 0x08098D04
	push {r4, r5, lr}
	adds r5, r0, #0
	ldrh r0, [r5, #0x36]
	cmp r0, #1
	bne _08098D2C
	ldr r0, _08098D28 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08098DF4
	bl sub_080828A4
	movs r0, #0
	strh r0, [r5, #0x36]
	b _08098E36
	.align 2, 0
_08098D28: .4byte gpKeySt
_08098D2C:
	ldr r0, _08098D60 @ =gpKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08098D64
	ldr r0, [r5, #0x2c]
	adds r1, r5, #0
	adds r1, #0x30
	ldrb r3, [r1]
	lsls r1, r3, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	beq _08098E36
	lsls r1, r3, #4
	adds r1, #0x48
	movs r0, #0x10
	bl sub_080826EC
	movs r0, #1
	strh r0, [r5, #0x36]
	b _08098E36
	.align 2, 0
_08098D60: .4byte gpKeySt
_08098D64:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08098DC4
	ldr r0, [r5, #0x2c]
	adds r1, r5, #0
	adds r1, #0x30
	ldrb r1, [r1]
	ldr r4, _08098DA8 @ =0x020117E4
	adds r2, r5, #0
	adds r2, #0x33
	ldrb r2, [r2]
	lsls r3, r2, #1
	adds r2, r5, #0
	adds r2, #0x38
	adds r2, r2, r3
	ldrh r2, [r2]
	lsls r2, r2, #2
	adds r2, r2, r4
	ldrh r2, [r2, #2]
	bl sub_080917D4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08098DB0
	movs r1, #1
	rsbs r1, r1, #0
	ldr r2, _08098DAC @ =0x000003B3
	adds r0, r1, #0
	adds r3, r5, #0
	bl sub_08091664
	b _08098E36
	.align 2, 0
_08098DA8: .4byte 0x020117E4
_08098DAC: .4byte 0x000003B3
_08098DB0:
	movs r0, #0
	bl sub_080A998C
	adds r0, r5, #0
	bl Proc_Break
	adds r0, r5, #0
	bl sub_08098C48
	b _08098E36
_08098DC4:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08098DF4
	movs r0, #0
	bl sub_080A998C
	adds r0, r5, #0
	bl Proc_Break
	ldr r0, _08098DEC @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08098E36
	ldr r0, _08098DF0 @ =0x0000038B
	bl m4aSongNumStart
	b _08098E36
	.align 2, 0
_08098DEC: .4byte gPlaySt
_08098DF0: .4byte 0x0000038B
_08098DF4:
	adds r0, r5, #0
	bl sub_08098B60
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08098E36
	adds r4, r5, #0
	adds r4, #0x30
	ldrb r0, [r4]
	lsls r1, r0, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl sub_080AA3F8
	ldrh r0, [r5, #0x36]
	cmp r0, #1
	bne _08098E36
	ldr r0, [r5, #0x2c]
	ldrb r3, [r4]
	lsls r1, r3, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	beq _08098E36
	lsls r1, r3, #4
	adds r1, #0x48
	movs r0, #0x10
	bl sub_080826EC
_08098E36:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08098E3C
sub_08098E3C: @ 0x08098E3C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r0, #0x33
	ldrb r0, [r0]
	lsls r1, r0, #1
	adds r0, r5, #0
	adds r0, #0x38
	adds r0, r0, r1
	ldrh r0, [r0]
	lsls r4, r0, #2
	ldr r0, _08098E70 @ =0x020117E4
	adds r4, r4, r0
	ldr r6, [r5, #0x2c]
	ldrb r0, [r4]
	bl GetUnitFromCharId
	adds r1, r0, #0
	ldrb r2, [r4, #1]
	adds r0, r6, #0
	adds r3, r5, #0
	bl sub_080951FC
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08098E70: .4byte 0x020117E4

	thumb_func_start sub_08098E74
sub_08098E74: @ 0x08098E74
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08098E88 @ =0x08D8D318
	bl Proc_StartBlocking
	str r4, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08098E88: .4byte 0x08D8D318

	thumb_func_start sub_08098E8C
sub_08098E8C: @ 0x08098E8C
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r6, _08098EB8 @ =0x0000DF80
	movs r5, #0x30
	movs r4, #3
_08098E96:
	str r6, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x10
	ldr r3, _08098EBC @ =0x08BFF7A8
	bl sub_080068C4
	adds r6, #4
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge _08098E96
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08098EB8: .4byte 0x0000DF80
_08098EBC: .4byte 0x08BFF7A8

	thumb_func_start sub_08098EC0
sub_08098EC0: @ 0x08098EC0
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, _08098EEC @ =sub_08098E8C
	bl sub_080AA20C
	movs r0, #0xe0
	lsls r0, r0, #7
	ldr r1, _08098EF0 @ =0x08D8D410
	lsls r4, r4, #2
	adds r4, r4, r1
	ldr r2, [r4]
	movs r1, #0
	str r1, [sp]
	movs r1, #0xd
	movs r3, #1
	bl sub_080AABE4
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08098EEC: .4byte sub_08098E8C
_08098EF0: .4byte 0x08D8D410

	thumb_func_start sub_08098EF4
sub_08098EF4: @ 0x08098EF4
	ldr r0, _08098F20 @ =0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0xa0
	bls _08098F04
	movs r2, #0
_08098F04:
	cmp r2, #0xc
	bne _08098F0E
	ldr r1, _08098F24 @ =0x04000050
	movs r0, #0xc8
	strh r0, [r1]
_08098F0E:
	cmp r2, #0x34
	beq _08098F16
	cmp r2, #0
	bne _08098F1E
_08098F16:
	ldr r1, _08098F24 @ =0x04000050
	ldr r2, _08098F28 @ =0x00000242
	adds r0, r2, #0
	strh r0, [r1]
_08098F1E:
	bx lr
	.align 2, 0
_08098F20: .4byte 0x04000006
_08098F24: .4byte 0x04000050
_08098F28: .4byte 0x00000242

	thumb_func_start sub_08098F2C
sub_08098F2C: @ 0x08098F2C
	movs r2, #0
	movs r1, #0
	strh r1, [r0, #0x34]
	movs r1, #0xff
	strh r1, [r0, #0x32]
	adds r0, #0x30
	strb r2, [r0]
	bx lr

	thumb_func_start sub_08098F3C
sub_08098F3C: @ 0x08098F3C
	push {r4, r5, lr}
	ldr r5, _08098FBC @ =0x02012B50
	ldr r1, _08098FC0 @ =0x06011000
	adds r0, r5, #0
	movs r2, #0xb
	bl InitSpriteTextFont
	ldr r0, _08098FC4 @ =0x081901C8
	movs r1, #0xd8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	adds r4, r5, #0
	adds r4, #0x90
	adds r0, r4, #0
	bl InitSpriteText
	adds r0, r5, #0
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	adds r0, r4, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	ldr r3, _08098FC8 @ =0x0842D150
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0
	bl Text_InsertDrawString
	ldr r3, _08098FCC @ =0x0842D158
	adds r0, r4, #0
	movs r1, #0x20
	movs r2, #0
	bl Text_InsertDrawString
	ldr r3, _08098FD0 @ =0x0842D160
	adds r0, r4, #0
	movs r1, #0x40
	movs r2, #0
	bl Text_InsertDrawString
	ldr r3, _08098FD4 @ =0x0842D170
	adds r0, r4, #0
	movs r1, #0x80
	movs r2, #3
	bl Text_InsertDrawString
	ldr r3, _08098FD8 @ =0x0842D17C
	adds r0, r4, #0
	movs r1, #0xc0
	movs r2, #3
	bl Text_InsertDrawString
	movs r0, #0
	bl SetTextFont
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08098FBC: .4byte 0x02012B50
_08098FC0: .4byte 0x06011000
_08098FC4: .4byte 0x081901C8
_08098FC8: .4byte 0x0842D150
_08098FCC: .4byte 0x0842D158
_08098FD0: .4byte 0x0842D160
_08098FD4: .4byte 0x0842D170
_08098FD8: .4byte 0x0842D17C

	thumb_func_start sub_08098FDC
sub_08098FDC: @ 0x08098FDC
	push {r4, lr}
	sub sp, #4
	movs r0, #0xaa
	lsls r0, r0, #8
	str r0, [sp]
	movs r0, #0xa0
	movs r1, #0x68
	movs r2, #8
	movs r3, #4
	bl sub_080935C4
	ldr r4, _0809903C @ =0x08BFF7A8
	ldr r0, _08099040 @ =0x0000B088
	str r0, [sp]
	movs r0, #4
	movs r1, #0xb0
	movs r2, #0x6c
	adds r3, r4, #0
	bl sub_080068C4
	ldr r0, _08099044 @ =0x0000B08C
	str r0, [sp]
	movs r0, #4
	movs r1, #0xd0
	movs r2, #0x6c
	adds r3, r4, #0
	bl sub_080068C4
	ldr r0, _08099048 @ =0x0000B080
	str r0, [sp]
	movs r0, #4
	movs r1, #0xa8
	movs r2, #0x7c
	adds r3, r4, #0
	bl sub_080068C4
	ldr r0, _0809904C @ =0x0000B084
	str r0, [sp]
	movs r0, #4
	movs r1, #0xc8
	movs r2, #0x7c
	adds r3, r4, #0
	bl sub_080068C4
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809903C: .4byte 0x08BFF7A8
_08099040: .4byte 0x0000B088
_08099044: .4byte 0x0000B08C
_08099048: .4byte 0x0000B080
_0809904C: .4byte 0x0000B084

	thumb_func_start sub_08099050
sub_08099050: @ 0x08099050
	push {r4, lr}
	sub sp, #4
	ldr r4, _08099090 @ =0x08BFF7A8
	ldr r0, _08099094 @ =0x0000B090
	str r0, [sp]
	movs r0, #4
	movs r1, #0x8c
	movs r2, #0x58
	adds r3, r4, #0
	bl sub_080068C4
	ldr r3, _08099098 @ =0x08BFF780
	ldr r0, _0809909C @ =0x0000B094
	str r0, [sp]
	movs r0, #4
	movs r1, #0xac
	movs r2, #0x58
	bl sub_080068C4
	ldr r0, _080990A0 @ =0x0000B098
	str r0, [sp]
	movs r0, #4
	movs r1, #0x90
	movs r2, #0x38
	adds r3, r4, #0
	bl sub_080068C4
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08099090: .4byte 0x08BFF7A8
_08099094: .4byte 0x0000B090
_08099098: .4byte 0x08BFF780
_0809909C: .4byte 0x0000B094
_080990A0: .4byte 0x0000B098

	thumb_func_start sub_080990A4
sub_080990A4: @ 0x080990A4
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r6, _080990FC @ =0x02022F48
	adds r0, r6, #0
	movs r1, #0xa
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	cmp r4, #0
	beq _08099116
	adds r0, r4, #0
	bl sub_080B2BB4
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _080990D6
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq _08099100
_080990D6:
	adds r0, r6, #0
	adds r0, #0xa
	movs r1, #1
	movs r2, #0x14
	bl sub_08005FEC
	adds r0, r6, #0
	adds r0, #0xc
	movs r1, #1
	movs r2, #0x14
	bl sub_08005FEC
	adds r0, r6, #0
	adds r0, #0xe
	movs r1, #1
	movs r2, #0x14
	bl sub_08005FEC
	b _0809910C
	.align 2, 0
_080990FC: .4byte 0x02022F48
_08099100:
	adds r0, r6, #0
	adds r0, #0xc
	movs r1, #2
	adds r2, r5, #0
	bl sub_08006068
_0809910C:
	ldr r0, _08099124 @ =0x02022F56
	movs r1, #3
	movs r2, #0x1e
	bl sub_08005FEC
_08099116:
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08099124: .4byte 0x02022F56

	thumb_func_start sub_08099128
sub_08099128: @ 0x08099128
	push {r4, r5, lr}
	ldr r4, _08099164 @ =0x02022E48
	adds r0, r4, #0
	movs r1, #0xa
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	adds r5, r4, #0
	adds r5, #0xe
	bl GetGold
	adds r2, r0, #0
	adds r0, r5, #0
	movs r1, #2
	bl sub_08006068
	adds r4, #0x10
	adds r0, r4, #0
	movs r1, #3
	movs r2, #0x1e
	bl sub_08005FEC
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08099164: .4byte 0x02022E48

	thumb_func_start sub_08099168
sub_08099168: @ 0x08099168
	push {r4, lr}
	sub sp, #8
	movs r0, #0
	bl SetTextFont
	ldr r4, _080991B8 @ =0x02022CC8
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, _080991BC @ =0x02012B68
	adds r1, r4, #0
	adds r1, #0xda
	movs r2, #0
	str r2, [sp]
	ldr r2, _080991C0 @ =0x0842D184
	str r2, [sp, #4]
	movs r2, #0
	movs r3, #2
	bl PutDrawText
	subs r4, #0x26
	movs r2, #0x9c
	lsls r2, r2, #2
	movs r0, #1
	str r0, [sp]
	movs r0, #0x4a
	adds r1, r4, #0
	movs r3, #2
	bl sub_08006E10
	movs r0, #1
	bl EnableBgSync
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080991B8: .4byte 0x02022CC8
_080991BC: .4byte 0x02012B68
_080991C0: .4byte 0x0842D184

	thumb_func_start sub_080991C4
sub_080991C4: @ 0x080991C4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov sb, r0
	ldr r7, _08099410 @ =gDispIo
	movs r0, #8
	rsbs r0, r0, #0
	ldrb r1, [r7]
	ands r0, r1
	strb r0, [r7]
	movs r0, #0
	bl InitBgs
	movs r0, #0
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r7, #0xc]
	ands r0, r2
	strb r0, [r7, #0xc]
	adds r0, r1, #0
	ldrb r3, [r7, #0x10]
	ands r0, r3
	movs r6, #2
	mov r8, r6
	mov r2, r8
	orrs r0, r2
	strb r0, [r7, #0x10]
	ldrb r3, [r7, #0x14]
	ands r1, r3
	strb r1, [r7, #0x14]
	movs r0, #3
	ldrb r6, [r7, #0x18]
	orrs r0, r6
	strb r0, [r7, #0x18]
	bl sub_080069C4
	bl ResetText
	bl InitIcons
	bl sub_0804A9F8
	bl sub_08015A0C
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, _08099414 @ =0x06012800
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_08082F74
	movs r0, #4
	bl ApplyIconPalettes
	bl sub_0808ED8C
	movs r0, #0xa0
	lsls r0, r0, #7
	movs r1, #5
	bl sub_0809228C
	movs r0, #0x80
	lsls r0, r0, #7
	movs r1, #0xa
	bl sub_080922DC
	ldr r0, _08099418 @ =gBg1Tm
	ldr r1, _0809941C @ =0x0842A558
	movs r2, #0xa5
	lsls r2, r2, #7
	bl TmApplyTsa_thm
	movs r0, #7
	bl EnableBgSync
	mov r1, sb
	ldr r0, [r1, #0x2c]
	bl GetUnitPortraitId
	adds r1, r0, #0
	ldr r0, _08099420 @ =0x00000503
	str r0, [sp]
	movs r0, #0
	movs r2, #0x44
	movs r3, #0x4a
	bl sub_08007A5C
	mov r0, sb
	bl sub_080A98C8
	mov r0, sb
	bl sub_080AA390
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_080AA3B4
	movs r5, #0x20
	ldrb r0, [r7, #1]
	orrs r0, r5
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r7, #1]
	adds r1, r7, #0
	adds r1, #0x2d
	movs r0, #0x80
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x28
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xe0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x98
	strb r0, [r1]
	movs r2, #0x34
	adds r2, r2, r7
	mov sl, r2
	movs r0, #1
	ldrb r1, [r2]
	orrs r1, r0
	mov r3, r8
	orrs r1, r3
	movs r2, #4
	orrs r1, r2
	movs r4, #8
	orrs r1, r4
	movs r3, #0x10
	orrs r1, r3
	movs r6, #0x36
	adds r6, r6, r7
	mov ip, r6
	ldrb r2, [r6]
	orrs r0, r2
	mov r6, r8
	orrs r0, r6
	movs r2, #5
	rsbs r2, r2, #0
	ands r0, r2
	orrs r0, r4
	orrs r0, r3
	orrs r1, r5
	mov r2, sl
	strb r1, [r2]
	orrs r0, r5
	mov r3, ip
	strb r0, [r3]
	adds r1, r7, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r6, [r1]
	ands r0, r6
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x44
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	mov r0, sb
	bl sub_08005E88
	movs r0, #0xc8
	movs r1, #0x90
	mov r2, sb
	bl sub_08082D1C
	ldr r4, _08099424 @ =0x02012B68
	adds r0, r4, #0
	movs r1, #4
	bl InitText
	adds r0, r4, #0
	adds r0, #8
	movs r1, #2
	bl InitText
	bl sub_08098F3C
	adds r4, #0x10
	movs r5, #4
_08099380:
	adds r0, r4, #0
	movs r1, #7
	bl InitText
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge _08099380
	movs r0, #0
	bl SetOnHBlankA
	ldr r0, _08099428 @ =sub_08098EF4
	bl SetOnHBlankA
	movs r0, #4
	bl EnableBgSync
	ldr r0, _0809942C @ =0x02022EA4
	ldr r1, _08099430 @ =0x02012B78
	mov r3, sb
	ldr r2, [r3, #0x2c]
	movs r3, #0
	bl sub_08094AC0
	bl sub_08099168
	ldr r0, _08099434 @ =sub_08099050
	mov r1, sb
	bl sub_080AA20C
	mov r6, sb
	ldr r0, [r6, #0x2c]
	mov r1, sb
	adds r1, #0x30
	ldrb r1, [r1]
	lsls r1, r1, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r0, [r0]
	bl sub_080990A4
	bl sub_08099128
	movs r1, #0xe0
	lsls r1, r1, #4
	movs r3, #0xc0
	lsls r3, r3, #4
	movs r0, #0
	str r0, [sp]
	str r6, [sp, #4]
	movs r0, #0xd
	movs r2, #0xf
	bl sub_080AAA50
	movs r0, #0
	movs r1, #1
	bl sub_080AAB3C
	movs r0, #0
	movs r1, #0x88
	movs r2, #0x36
	movs r3, #2
	bl sub_080AAAD0
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08099410: .4byte gDispIo
_08099414: .4byte 0x06012800
_08099418: .4byte gBg1Tm
_0809941C: .4byte 0x0842A558
_08099420: .4byte 0x00000503
_08099424: .4byte 0x02012B68
_08099428: .4byte sub_08098EF4
_0809942C: .4byte 0x02022EA4
_08099430: .4byte 0x02012B78
_08099434: .4byte sub_08099050

	thumb_func_start sub_08099438
sub_08099438: @ 0x08099438
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r6, _08099468 @ =gpKeySt
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r7, #0x40
	adds r0, r7, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _0809947E
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r3, r0, #0
	adds r2, r4, #0
	adds r2, #0x30
	ldrb r0, [r2]
	cmp r0, #0
	beq _0809946C
	subs r0, #1
	strb r0, [r2]
	b _080994AE
	.align 2, 0
_08099468: .4byte gpKeySt
_0809946C:
	ldr r1, [r6]
	adds r0, r7, #0
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080994CC
	subs r0, r3, #1
	strb r0, [r2]
	b _080994AE
_0809947E:
	movs r7, #0x80
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _080994CC
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r2, r4, #0
	adds r2, #0x30
	ldrb r1, [r2]
	subs r0, #1
	cmp r1, r0
	bge _080994A0
	adds r0, r1, #1
	strb r0, [r2]
	b _080994AE
_080994A0:
	ldr r1, [r6]
	adds r0, r7, #0
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080994CC
	strb r5, [r2]
_080994AE:
	ldr r0, _080994C4 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080994C0
	ldr r0, _080994C8 @ =0x00000386
	bl m4aSongNumStart
_080994C0:
	movs r0, #1
	b _080994CE
	.align 2, 0
_080994C4: .4byte gPlaySt
_080994C8: .4byte 0x00000386
_080994CC:
	movs r0, #0
_080994CE:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_080994D4
sub_080994D4: @ 0x080994D4
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _08099528 @ =0x02022EA4
	ldr r1, _0809952C @ =0x02012B78
	ldr r2, [r4, #0x2c]
	movs r3, #0
	bl sub_08094AC0
	ldr r0, [r4, #0x2c]
	adds r5, r4, #0
	adds r5, #0x30
	ldrb r2, [r5]
	lsls r1, r2, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r0, [r0]
	bl sub_080990A4
	movs r0, #0
	bl sub_080A998C
	ldr r0, _08099530 @ =sub_08098FDC
	bl sub_080AA24C
	bl Proc_End
	ldrb r5, [r5]
	lsls r1, r5, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #3
	movs r0, #0x10
	movs r2, #0xb
	bl sub_080AA3F8
	movs r0, #0
	adds r1, r4, #0
	bl sub_08098EC0
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08099528: .4byte 0x02022EA4
_0809952C: .4byte 0x02012B78
_08099530: .4byte sub_08098FDC

	thumb_func_start sub_08099534
sub_08099534: @ 0x08099534
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x34]
	cmp r0, #1
	bne _0809955C
	ldr r0, _08099558 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08099630
	bl sub_080828A4
	movs r0, #0
	strh r0, [r4, #0x34]
	b _08099682
	.align 2, 0
_08099558: .4byte gpKeySt
_0809955C:
	ldr r0, _08099594 @ =gpKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08099598
	ldr r0, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x30
	ldrb r3, [r1]
	lsls r1, r3, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	bne _08099582
	b _08099682
_08099582:
	lsls r1, r3, #4
	adds r1, #0x48
	movs r0, #0x10
	bl sub_080826EC
	movs r0, #1
	strh r0, [r4, #0x34]
	b _08099682
	.align 2, 0
_08099594: .4byte gpKeySt
_08099598:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08099604
	ldr r0, [r4, #0x2c]
	adds r6, r4, #0
	adds r6, #0x30
	ldrb r2, [r6]
	lsls r1, r2, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r5, [r0]
	adds r0, r5, #0
	bl sub_080B2BB4
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _080995CA
	adds r0, r5, #0
	bl GetItemAttributes
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq _080995E0
_080995CA:
	ldrb r6, [r6]
	lsls r1, r6, #4
	adds r1, #0x48
	ldr r2, _080995DC @ =0x00000704
	movs r0, #0x10
	adds r3, r4, #0
	bl sub_08091664
	b _08099682
	.align 2, 0
_080995DC: .4byte 0x00000704
_080995E0:
	adds r0, r4, #0
	movs r1, #2
	bl Proc_Goto
	ldr r0, _080995FC @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08099682
	ldr r0, _08099600 @ =0x0000038A
	bl m4aSongNumStart
	b _08099682
	.align 2, 0
_080995FC: .4byte gPlaySt
_08099600: .4byte 0x0000038A
_08099604:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08099630
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
	ldr r0, _08099628 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08099682
	ldr r0, _0809962C @ =0x0000038B
	bl m4aSongNumStart
	b _08099682
	.align 2, 0
_08099628: .4byte gPlaySt
_0809962C: .4byte 0x0000038B
_08099630:
	adds r0, r4, #0
	bl sub_08099438
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08099682
	adds r5, r4, #0
	adds r5, #0x30
	ldrb r0, [r5]
	lsls r1, r0, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #3
	movs r0, #0x10
	movs r2, #0xb
	bl sub_080AA3F8
	ldr r0, [r4, #0x2c]
	ldrb r2, [r5]
	lsls r1, r2, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r0, [r0]
	bl sub_080990A4
	ldrh r0, [r4, #0x34]
	cmp r0, #1
	bne _08099682
	ldr r0, [r4, #0x2c]
	ldrb r3, [r5]
	lsls r1, r3, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	beq _08099682
	lsls r1, r3, #4
	adds r1, #0x48
	movs r0, #0x10
	bl sub_080826EC
_08099682:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_08099688
sub_08099688: @ 0x08099688
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x31
	movs r0, #1
	strb r0, [r5]
	ldr r0, _080996D0 @ =sub_08098FDC
	adds r1, r4, #0
	bl sub_080AA20C
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r2, r0, #4
	adds r2, #0x48
	movs r0, #0
	movs r1, #0x10
	movs r3, #2
	bl sub_080A98DC
	ldrb r5, [r5]
	lsls r0, r5, #5
	adds r0, #0xa4
	movs r3, #0x80
	lsls r3, r3, #3
	movs r1, #0x7c
	movs r2, #0
	bl sub_080AA3F8
	movs r0, #1
	adds r1, r4, #0
	bl sub_08098EC0
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080996D0: .4byte sub_08098FDC

	thumb_func_start sub_080996D4
sub_080996D4: @ 0x080996D4
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	adds r5, r4, #0
	adds r5, #0x30
	ldrb r2, [r5]
	lsls r1, r2, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r0, [r0]
	bl sub_080B2BB4
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl AddGold
	ldr r0, [r4, #0x2c]
	ldrb r2, [r5]
	lsls r1, r2, #1
	adds r0, #0x1e
	adds r0, r0, r1
	movs r1, #0
	strh r1, [r0]
	ldr r0, [r4, #0x2c]
	bl UnitRemoveInvalidItems
	ldr r0, _08099740 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809971A
	movs r0, #0xb9
	bl m4aSongNumStart
_0809971A:
	bl sub_08099128
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	cmp r0, #0
	bne _0809974C
	ldr r0, _08099744 @ =0x02022EA4
	ldr r1, _08099748 @ =0x02012B78
	ldr r2, [r4, #0x2c]
	movs r3, #0
	bl sub_08094AC0
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
	b _0809975E
	.align 2, 0
_08099740: .4byte gPlaySt
_08099744: .4byte 0x02022EA4
_08099748: .4byte 0x02012B78
_0809974C:
	ldrb r1, [r5]
	cmp r0, r1
	bne _08099756
	subs r0, #1
	strb r0, [r5]
_08099756:
	adds r0, r4, #0
	movs r1, #1
	bl Proc_Goto
_0809975E:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_08099764
sub_08099764: @ 0x08099764
	push {r4, r5, r6, lr}
	adds r2, r0, #0
	adds r4, r2, #0
	adds r4, #0x31
	ldrb r5, [r4]
	ldr r6, _08099788 @ =gpKeySt
	ldr r1, [r6]
	ldrh r3, [r1, #8]
	movs r0, #1
	ands r0, r3
	cmp r0, #0
	beq _0809978C
	cmp r5, #0
	bne _08099798
	adds r0, r2, #0
	bl sub_080996D4
	b _08099802
	.align 2, 0
_08099788: .4byte gpKeySt
_0809978C:
	movs r0, #2
	ands r0, r3
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0
	beq _080997BC
_08099798:
	adds r0, r2, #0
	movs r1, #1
	bl Proc_Goto
	ldr r0, _080997B4 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08099802
	ldr r0, _080997B8 @ =0x0000038B
	bl m4aSongNumStart
	b _08099802
	.align 2, 0
_080997B4: .4byte gPlaySt
_080997B8: .4byte 0x0000038B
_080997BC:
	movs r0, #0x20
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _080997C8
	strb r3, [r4]
_080997C8:
	ldr r1, [r6]
	movs r0, #0x10
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _080997D8
	movs r0, #1
	strb r0, [r4]
_080997D8:
	ldrb r0, [r4]
	cmp r5, r0
	beq _08099802
	ldr r0, _08099808 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080997F0
	ldr r0, _0809980C @ =0x00000387
	bl m4aSongNumStart
_080997F0:
	ldrb r4, [r4]
	lsls r0, r4, #5
	adds r0, #0xa4
	movs r3, #0x80
	lsls r3, r3, #3
	movs r1, #0x7c
	movs r2, #0
	bl sub_080AA3F8
_08099802:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08099808: .4byte gPlaySt
_0809980C: .4byte 0x00000387

	thumb_func_start sub_08099810
sub_08099810: @ 0x08099810
	push {lr}
	bl sub_0808EDB0
	movs r0, #0
	bl EndFaceById
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08099828
sub_08099828: @ 0x08099828
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0809983C @ =0x08D8D418
	bl Proc_StartBlocking
	str r4, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809983C: .4byte 0x08D8D418

	thumb_func_start sub_08099840
sub_08099840: @ 0x08099840
	push {lr}
	sub sp, #0x10
	ldr r0, [r0, #0x2c]
	str r0, [sp]
	ldr r0, _08099870 @ =0x06011000
	str r0, [sp, #4]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0xa
	movs r1, #7
	movs r2, #0x11
	movs r3, #4
	bl sub_08088584
	movs r0, #0x7c
	bl sub_08087E2C
	add sp, #0x10
	pop {r0}
	bx r0
	.align 2, 0
_08099870: .4byte 0x06011000

	thumb_func_start nullsub_78
nullsub_78: @ 0x08099874
	bx lr
	.align 2, 0

	thumb_func_start nullsub_79
nullsub_79: @ 0x08099878
	bx lr
	.align 2, 0

	thumb_func_start sub_0809987C
sub_0809987C: @ 0x0809987C
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, #0x30
	movs r4, #1
	strb r4, [r0]
	bl sub_08099CB4
	adds r1, r5, #0
	adds r1, #0x31
	strb r0, [r1]
	bl sub_08099CF0
	adds r1, r5, #0
	adds r1, #0x32
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x33
	strb r4, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080998A8
sub_080998A8: @ 0x080998A8
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	mov sb, r0
	ldr r6, _08099968 @ =0x020129A8
	movs r0, #0
	bl SetTextFontGlyphs
	movs r0, #0
	bl SetTextFont
	ldr r0, _0809996C @ =0x02022EE0
	movs r1, #0x1f
	movs r2, #0xa
	movs r3, #0
	bl TmFillRect_thm
	movs r4, #0
_080998D0:
	adds r0, r6, #0
	bl ClearText
	ldr r1, _08099970 @ =0x08D8D60C
	lsls r0, r4, #2
	adds r0, r0, r1
	ldr r0, [r0]
	bl DecodeMsg
	adds r3, r0, #0
	adds r5, r6, #0
	adds r6, #8
	asrs r2, r4, #1
	lsls r2, r2, #6
	movs r0, #0xa2
	lsls r0, r0, #1
	adds r2, r2, r0
	movs r1, #1
	ands r1, r4
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #1
	ldr r0, _08099974 @ =gBg0Tm
	mov r8, r0
	adds r1, r2, r0
	movs r2, #0
	mov r0, sb
	adds r0, #0x30
	adds r0, r0, r4
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0809991A
	movs r2, #1
_0809991A:
	movs r7, #0
	str r7, [sp]
	str r3, [sp, #4]
	adds r0, r5, #0
	movs r3, #0
	bl PutDrawText
	adds r4, #1
	cmp r4, #3
	ble _080998D0
	ldr r0, _08099968 @ =0x020129A8
	adds r6, r0, #0
	adds r6, #0xe8
	adds r0, r6, #0
	bl ClearText
	ldr r0, _08099978 @ =0x08D8D5F8
	ldr r0, [r0, #0x10]
	bl DecodeMsg
	mov r1, r8
	adds r1, #0x2c
	str r7, [sp]
	str r0, [sp, #4]
	adds r0, r6, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	movs r0, #1
	bl EnableBgSync
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08099968: .4byte 0x020129A8
_0809996C: .4byte 0x02022EE0
_08099970: .4byte 0x08D8D60C
_08099974: .4byte gBg0Tm
_08099978: .4byte 0x08D8D5F8

	thumb_func_start sub_0809997C
sub_0809997C: @ 0x0809997C
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r3, r5, #0
	adds r3, #0x29
	ldrb r4, [r3]
	ldr r2, _08099A0C @ =gpKeySt
	ldr r1, [r2]
	movs r0, #0x20
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _080999A0
	movs r0, #1
	ands r0, r4
	cmp r0, #0
	beq _080999A0
	subs r0, r4, #1
	strb r0, [r3]
_080999A0:
	ldr r1, [r2]
	movs r0, #0x10
	ldrh r1, [r1, #6]
	ands r0, r1
	adds r3, r5, #0
	adds r3, #0x29
	cmp r0, #0
	beq _080999BE
	ldrb r1, [r3]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _080999BE
	adds r0, r1, #1
	strb r0, [r3]
_080999BE:
	ldr r1, [r2]
	movs r0, #0x80
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _080999D6
	ldrb r1, [r3]
	lsrs r0, r1, #1
	cmp r0, #0
	bne _080999D6
	adds r0, r1, #2
	strb r0, [r3]
_080999D6:
	ldr r1, [r2]
	movs r0, #0x40
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _080999EE
	ldrb r1, [r3]
	lsrs r0, r1, #1
	cmp r0, #0
	beq _080999EE
	subs r0, r1, #2
	strb r0, [r3]
_080999EE:
	ldrb r3, [r3]
	cmp r4, r3
	beq _08099A18
	ldr r0, _08099A10 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08099A06
	ldr r0, _08099A14 @ =0x00000385
	bl m4aSongNumStart
_08099A06:
	movs r0, #1
	b _08099A1A
	.align 2, 0
_08099A0C: .4byte gpKeySt
_08099A10: .4byte gPlaySt
_08099A14: .4byte 0x00000385
_08099A18:
	movs r0, #0
_08099A1A:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_08099A20
sub_08099A20: @ 0x08099A20
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, _08099A54 @ =gpKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r6, #1
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _08099AB4
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r1, [r0]
	adds r0, #7
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #1
	bne _08099A98
	cmp r1, #1
	beq _08099A74
	cmp r1, #1
	bgt _08099A58
	cmp r1, #0
	beq _08099A62
	b _08099A98
	.align 2, 0
_08099A54: .4byte gpKeySt
_08099A58:
	cmp r1, #2
	beq _08099A68
	cmp r1, #3
	beq _08099A6E
	b _08099A98
_08099A62:
	adds r0, r4, #0
	movs r1, #2
	b _08099A78
_08099A68:
	adds r0, r4, #0
	movs r1, #3
	b _08099A78
_08099A6E:
	adds r0, r4, #0
	movs r1, #4
	b _08099A78
_08099A74:
	adds r0, r4, #0
	movs r1, #5
_08099A78:
	bl Proc_Goto
	ldr r0, _08099A90 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08099B20
	ldr r0, _08099A94 @ =0x0000038A
	bl m4aSongNumStart
	b _08099B20
	.align 2, 0
_08099A90: .4byte gPlaySt
_08099A94: .4byte 0x0000038A
_08099A98:
	ldr r0, _08099AB0 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08099B20
	movs r0, #0xe3
	lsls r0, r0, #2
	bl m4aSongNumStart
	b _08099B20
	.align 2, 0
_08099AB0: .4byte gPlaySt
_08099AB4:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08099AE0
	adds r0, r4, #0
	movs r1, #6
	bl Proc_Goto
	ldr r0, _08099AD8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08099B20
	ldr r0, _08099ADC @ =0x0000038B
	bl m4aSongNumStart
	b _08099B20
	.align 2, 0
_08099AD8: .4byte gPlaySt
_08099ADC: .4byte 0x0000038B
_08099AE0:
	adds r0, r4, #0
	bl sub_0809997C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08099B20
	adds r5, r4, #0
	adds r5, #0x29
	ldrb r1, [r5]
	adds r2, r6, #0
	ands r2, r1
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x1c
	lsrs r1, r1, #1
	lsls r1, r1, #4
	adds r1, #0x50
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #8
	bl sub_080AA3F8
	ldr r1, _08099B28 @ =0x08D8D620
	ldrb r5, [r5]
	lsls r0, r5, #2
	adds r0, r0, r1
	ldr r0, [r0]
	str r0, [r4, #0x2c]
	adds r0, r4, #0
	bl sub_08099840
_08099B20:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08099B28: .4byte 0x08D8D620

	thumb_func_start sub_08099B2C
sub_08099B2C: @ 0x08099B2C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_080886CC
	adds r0, r4, #0
	bl sub_080AAC88
	bl sub_0808EDB0
	movs r0, #0
	bl EndFaceById
	movs r0, #0
	bl SetOnHBlankA
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_08099B50
sub_08099B50: @ 0x08099B50
	push {lr}
	adds r1, r0, #0
	adds r1, #0x29
	ldrb r1, [r1]
	cmp r1, #1
	beq _08099B88
	cmp r1, #1
	bgt _08099B66
	cmp r1, #0
	beq _08099B70
	b _08099B8E
_08099B66:
	cmp r1, #2
	beq _08099B78
	cmp r1, #3
	beq _08099B80
	b _08099B8E
_08099B70:
	movs r1, #2
	bl Proc_Goto
	b _08099B8E
_08099B78:
	movs r1, #3
	bl Proc_Goto
	b _08099B8E
_08099B80:
	movs r1, #4
	bl Proc_Goto
	b _08099B8E
_08099B88:
	movs r1, #5
	bl Proc_Goto
_08099B8E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_08099B94
sub_08099B94: @ 0x08099B94
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08099BAC @ =0x08D8D538
	bl Proc_StartBlocking
	adds r1, r0, #0
	adds r0, #0x29
	strb r4, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08099BAC: .4byte 0x08D8D538

	thumb_func_start sub_08099BB0
sub_08099BB0: @ 0x08099BB0
	push {lr}
	adds r1, r0, #0
	cmp r1, #1
	beq _08099BDC
	cmp r1, #1
	bgt _08099BC2
	cmp r1, #0
	beq _08099BE8
	b _08099BF0
_08099BC2:
	cmp r1, #2
	beq _08099BCC
	cmp r1, #3
	beq _08099BD2
	b _08099BF0
_08099BCC:
	bl sub_08099CB4
	b _08099BD6
_08099BD2:
	bl sub_08099CF0
_08099BD6:
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _08099BF2
_08099BDC:
	ldr r0, _08099BEC @ =gPlaySt
	adds r0, #0x2b
	ldrb r0, [r0]
	ands r1, r0
	cmp r1, #0
	beq _08099BF0
_08099BE8:
	movs r0, #1
	b _08099BF2
	.align 2, 0
_08099BEC: .4byte gPlaySt
_08099BF0:
	movs r0, #0
_08099BF2:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08099BF8
sub_08099BF8: @ 0x08099BF8
	push {lr}
	ldr r0, _08099C10 @ =gPlaySt
	ldrb r1, [r0, #0x1b]
	cmp r1, #3
	bne _08099C14
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetROMChapterStruct
	adds r0, #0x78
	b _08099C20
	.align 2, 0
_08099C10: .4byte gPlaySt
_08099C14:
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetROMChapterStruct
	adds r0, #0x7a
_08099C20:
	ldrh r0, [r0]
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08099C28
sub_08099C28: @ 0x08099C28
	push {lr}
	ldr r0, _08099C40 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetROMChapterStruct
	adds r0, #0x76
	ldrh r0, [r0]
	pop {r1}
	bx r1
	.align 2, 0
_08099C40: .4byte gPlaySt

	thumb_func_start sub_08099C44
sub_08099C44: @ 0x08099C44
	push {lr}
	ldr r0, _08099C5C @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetROMChapterStruct
	adds r0, #0x7c
	ldrh r0, [r0]
	pop {r1}
	bx r1
	.align 2, 0
_08099C5C: .4byte gPlaySt

	thumb_func_start sub_08099C60
sub_08099C60: @ 0x08099C60
	push {lr}
	ldr r0, _08099C78 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetROMChapterStruct
	adds r0, #0x7f
	ldrb r0, [r0]
	pop {r1}
	bx r1
	.align 2, 0
_08099C78: .4byte gPlaySt

	thumb_func_start sub_08099C7C
sub_08099C7C: @ 0x08099C7C
	push {lr}
	ldr r0, _08099C94 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetROMChapterStruct
	adds r0, #0x7e
	ldrb r0, [r0]
	pop {r1}
	bx r1
	.align 2, 0
_08099C94: .4byte gPlaySt

	thumb_func_start sub_08099C98
sub_08099C98: @ 0x08099C98
	push {lr}
	bl sub_08099BF8
	cmp r0, #0
	beq _08099CAE
	bl sub_08099C28
	cmp r0, #0
	bne _08099CAE
	movs r0, #1
	b _08099CB0
_08099CAE:
	movs r0, #0
_08099CB0:
	pop {r1}
	bx r1

	thumb_func_start sub_08099CB4
sub_08099CB4: @ 0x08099CB4
	push {lr}
	ldr r1, _08099CD0 @ =gPlaySt
	movs r0, #0x40
	ldrb r1, [r1, #0x14]
	ands r0, r1
	cmp r0, #0
	bne _08099CCA
	bl sub_08099BF8
	cmp r0, #0
	bne _08099CD4
_08099CCA:
	movs r0, #0
	b _08099CD6
	.align 2, 0
_08099CD0: .4byte gPlaySt
_08099CD4:
	movs r0, #1
_08099CD6:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08099CDC
sub_08099CDC: @ 0x08099CDC
	push {lr}
	bl sub_08099C7C
	cmp r0, #0x41
	beq _08099CEA
	movs r0, #0
	b _08099CEC
_08099CEA:
	movs r0, #1
_08099CEC:
	pop {r1}
	bx r1

	thumb_func_start sub_08099CF0
sub_08099CF0: @ 0x08099CF0
	push {lr}
	bl sub_08099CDC
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_08099D00
sub_08099D00: @ 0x08099D00
	ldr r0, _08099D10 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x12
	bgt _08099D14
	movs r0, #0
	b _08099D16
	.align 2, 0
_08099D10: .4byte gPlaySt
_08099D14:
	movs r0, #1
_08099D16:
	bx lr

	thumb_func_start sub_08099D18
sub_08099D18: @ 0x08099D18
	push {r4, lr}
	ldr r4, _08099DBC @ =gDispIo
	movs r0, #8
	rsbs r0, r0, #0
	ldrb r1, [r4]
	ands r0, r1
	strb r0, [r4]
	movs r0, #0
	bl InitBgs
	movs r0, #0
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r4, #0xc]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r4, #0xc]
	movs r2, #3
	ldrb r0, [r4, #0x10]
	orrs r0, r2
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r4, #0x14]
	ldrb r1, [r4, #0x18]
	orrs r2, r1
	strb r2, [r4, #0x18]
	bl sub_080069C4
	bl ResetText
	bl InitIcons
	bl sub_0804A9F8
	bl sub_08015A0C
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #4
	bl SetBgOffset
	movs r0, #4
	bl ApplyIconPalettes
	bl sub_0808ED8C
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08099DBC: .4byte gDispIo

	thumb_func_start sub_08099DC0
sub_08099DC0: @ 0x08099DC0
	adds r0, #0x4c
	movs r1, #0
	strh r1, [r0]
	bx lr

	thumb_func_start sub_08099DC8
sub_08099DC8: @ 0x08099DC8
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x4c
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	movs r0, #3
	ldrh r1, [r4]
	ands r0, r1
	cmp r0, #0
	bne _08099E0E
	movs r0, #0
	ldrsh r4, [r4, r0]
	cmp r4, #0
	bge _08099DEA
	adds r4, #3
_08099DEA:
	asrs r4, r4, #2
	lsls r0, r4, #5
	ldr r1, _08099E14 @ =0x0842B4BC
	adds r0, r0, r1
	ldr r1, [r5, #0x58]
	lsls r1, r1, #5
	ldr r2, _08099E18 @ =0x02022A60
	adds r1, r1, r2
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
	cmp r4, #5
	bne _08099E0E
	adds r0, r5, #0
	bl Proc_Break
_08099E0E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08099E14: .4byte 0x0842B4BC
_08099E18: .4byte 0x02022A60

	thumb_func_start sub_08099E1C
sub_08099E1C: @ 0x08099E1C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08099E30 @ =0x08D8D688
	bl Proc_Start
	str r4, [r0, #0x58]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08099E30: .4byte 0x08D8D688

	thumb_func_start sub_08099E34
sub_08099E34: @ 0x08099E34
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	mov sb, r0
	ldr r1, [r0, #0x2c]
	asrs r0, r1, #3
	cmp r0, #5
	bgt _08099E5C
	adds r0, r1, #2
	mov r1, sb
	str r0, [r1, #0x2c]
	asrs r0, r0, #3
	cmp r0, #6
	bne _08099E5C
	movs r0, #0xf
	bl sub_08099E1C
_08099E5C:
	mov r6, sb
	adds r6, #0x34
	movs r2, #9
	str r2, [sp, #8]
	movs r3, #4
	mov r8, r3
_08099E68:
	ldrb r0, [r6]
	cmp r0, #0xff
	beq _08099EBE
	movs r5, #0
	ldrb r7, [r6]
	cmp r5, r7
	bgt _08099EBE
	mov r1, sb
	ldr r0, [r1, #0x2c]
	asrs r0, r0, #3
	cmp r5, r0
	bge _08099EBE
	movs r4, #0x50
	ldr r2, _08099F5C @ =0x08D8D674
	mov sl, r2
_08099E86:
	lsls r1, r5, #9
	adds r1, r4, r1
	mov r3, sl
	adds r3, #4
	mov sl, r3
	subs r3, #4
	ldr r3, [r3]
	mov ip, r3
	ldr r0, _08099F60 @ =0x0000F380
	str r0, [sp]
	movs r0, #4
	ldr r7, [sp, #8]
	movs r3, #0x80
	lsls r3, r3, #1
	adds r2, r7, r3
	mov r3, ip
	bl sub_080068C4
	adds r4, #0xf
	adds r5, #1
	ldrb r7, [r6]
	cmp r5, r7
	bgt _08099EBE
	mov r1, sb
	ldr r0, [r1, #0x2c]
	asrs r0, r0, #3
	cmp r5, r0
	blt _08099E86
_08099EBE:
	adds r6, #1
	ldr r2, [sp, #8]
	adds r2, #0x10
	str r2, [sp, #8]
	movs r3, #1
	rsbs r3, r3, #0
	add r8, r3
	mov r7, r8
	cmp r7, #0
	bge _08099E68
	movs r0, #0
	mov r8, r0
	movs r7, #0x80
	lsls r7, r7, #1
	ldr r1, _08099F64 @ =gSinLut
	mov sl, r1
_08099EDE:
	mov r2, r8
	adds r2, #1
	lsls r1, r2, #3
	mov r3, sb
	ldr r0, [r3, #0x2c]
	subs r0, r0, r1
	lsls r4, r0, #5
	str r2, [sp, #4]
	cmp r4, r7
	ble _08099EF6
	movs r4, #0x80
	lsls r4, r4, #1
_08099EF6:
	cmp r4, #0x20
	ble _08099F6C
	ldr r1, _08099F68 @ =0x080C0F18
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r1, r4, #0
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	mov r3, sl
	movs r1, #0
	ldrsh r0, [r3, r1]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	mov r2, sl
	movs r3, #0
	ldrsh r0, [r2, r3]
	lsls r0, r0, #4
	adds r1, r4, #0
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	ldr r1, _08099F68 @ =0x080C0F18
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	mov r0, r8
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	b _08099FCA
	.align 2, 0
_08099F5C: .4byte 0x08D8D674
_08099F60: .4byte 0x0000F380
_08099F64: .4byte gSinLut
_08099F68: .4byte 0x080C0F18
_08099F6C:
	ldr r3, _08099FE4 @ =0x080C0F18
	movs r1, #0
	ldrsh r0, [r3, r1]
	lsls r0, r0, #4
	movs r1, #0x20
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	mov r2, sl
	movs r3, #0
	ldrsh r0, [r2, r3]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	mov r1, sl
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	movs r1, #0x20
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	ldr r3, _08099FE4 @ =0x080C0F18
	movs r1, #0
	ldrsh r0, [r3, r1]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	mov r0, r8
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
_08099FCA:
	ldr r2, [sp, #4]
	mov r8, r2
	cmp r2, #4
	ble _08099EDE
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08099FE4: .4byte 0x080C0F18

	thumb_func_start sub_08099FE8
sub_08099FE8: @ 0x08099FE8
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	ldr r4, _0809A038 @ =0x020129A8
	movs r0, #0
	bl SetTextFontGlyphs
	movs r0, #0
	bl SetTextFont
	movs r6, #0
	movs r5, #0x80
	ldr r7, _0809A03C @ =0x08D8D634
_0809A000:
	adds r0, r4, #0
	bl ClearText
	ldm r7!, {r0}
	bl DecodeMsg
	adds r3, r4, #0
	adds r4, #8
	ldr r1, _0809A040 @ =0x02023C68
	adds r1, r5, r1
	movs r2, #0
	str r2, [sp]
	str r0, [sp, #4]
	adds r0, r3, #0
	movs r3, #0
	bl PutDrawText
	adds r5, #0x80
	adds r6, #1
	cmp r6, #4
	ble _0809A000
	movs r0, #4
	bl EnableBgSync
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809A038: .4byte 0x020129A8
_0809A03C: .4byte 0x08D8D634
_0809A040: .4byte 0x02023C68

	thumb_func_start sub_0809A044
sub_0809A044: @ 0x0809A044
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	bl sub_080B7100
	adds r5, r7, #0
	adds r5, #0x34
	movs r6, #0
	strb r0, [r5]
	bl sub_080B71F8
	movs r1, #0x35
	adds r1, r1, r7
	mov sl, r1
	strb r0, [r1]
	bl sub_080B735C
	movs r2, #0x36
	adds r2, r2, r7
	mov sb, r2
	strb r0, [r2]
	bl sub_080B7230
	movs r3, #0x37
	adds r3, r3, r7
	mov r8, r3
	strb r0, [r3]
	bl sub_080B7328
	adds r4, r7, #0
	adds r4, #0x38
	strb r0, [r4]
	ldrb r0, [r5]
	mov r5, sl
	ldrb r1, [r5]
	mov r3, sb
	ldrb r2, [r3]
	mov r5, r8
	ldrb r3, [r5]
	ldrb r4, [r4]
	str r4, [sp]
	bl sub_080B73FC
	adds r1, r7, #0
	adds r1, #0x39
	strb r0, [r1]
	str r6, [r7, #0x2c]
	ldr r0, _0809A0D8 @ =0x0842B374
	ldr r1, _0809A0DC @ =0x06017000
	bl sub_08013688
	ldr r0, _0809A0E0 @ =0x0842B4BC
	movs r1, #0xf8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0809A0E4 @ =sub_08099E34
	adds r1, r7, #0
	bl sub_080AA20C
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809A0D8: .4byte 0x0842B374
_0809A0DC: .4byte 0x06017000
_0809A0E0: .4byte 0x0842B4BC
_0809A0E4: .4byte sub_08099E34

	thumb_func_start sub_0809A0E8
sub_0809A0E8: @ 0x0809A0E8
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	bl sub_08099D18
	movs r0, #0xa0
	lsls r0, r0, #7
	movs r1, #5
	bl sub_0809228C
	ldr r0, _0809A1E4 @ =gBg1Tm
	ldr r1, _0809A1E8 @ =0x0842B57C
	movs r2, #0xa5
	lsls r2, r2, #7
	bl TmApplyTsa_thm
	movs r0, #7
	bl EnableBgSync
	adds r0, r4, #0
	bl sub_080AA390
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_080AA3B4
	ldr r0, _0809A1EC @ =gDispIo
	mov ip, r0
	movs r0, #0x21
	rsbs r0, r0, #0
	mov r1, ip
	ldrb r1, [r1, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r2, ip
	strb r0, [r2, #1]
	mov r1, ip
	adds r1, #0x2d
	movs r0, #0x80
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x28
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xe0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x98
	strb r0, [r1]
	mov r6, ip
	adds r6, #0x34
	movs r0, #1
	ldrb r1, [r6]
	orrs r1, r0
	movs r5, #2
	orrs r1, r5
	movs r2, #4
	orrs r1, r2
	movs r4, #8
	orrs r1, r4
	movs r3, #0x10
	orrs r1, r3
	mov r7, ip
	adds r7, #0x36
	ldrb r2, [r7]
	orrs r0, r2
	orrs r0, r5
	movs r2, #5
	rsbs r2, r2, #0
	ands r0, r2
	orrs r0, r4
	orrs r0, r3
	movs r2, #0x20
	orrs r1, r2
	strb r1, [r6]
	orrs r0, r2
	strb r0, [r7]
	mov r1, ip
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x44
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r5, _0809A1F0 @ =0x020129A8
	movs r4, #5
_0809A1AC:
	adds r0, r5, #0
	movs r1, #8
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _0809A1AC
	ldr r0, _0809A1F4 @ =0x02012A90
	movs r1, #8
	bl InitText
	bl sub_08099FE8
	ldr r0, _0809A1F8 @ =gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #3
	bne _0809A1FC
	movs r0, #0
	str r0, [sp]
	movs r0, #0x29
	movs r1, #0xd8
	movs r2, #0x58
	movs r3, #0x82
	bl sub_08008DA8
	b _0809A20C
	.align 2, 0
_0809A1E4: .4byte gBg1Tm
_0809A1E8: .4byte 0x0842B57C
_0809A1EC: .4byte gDispIo
_0809A1F0: .4byte 0x020129A8
_0809A1F4: .4byte 0x02012A90
_0809A1F8: .4byte gPlaySt
_0809A1FC:
	movs r0, #0
	str r0, [sp]
	movs r0, #0x32
	movs r1, #0xd8
	movs r2, #0x58
	movs r3, #0x82
	bl sub_08008DA8
_0809A20C:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0809A214
sub_0809A214: @ 0x0809A214
	adds r2, r0, #0
	ldr r3, _0809A234 @ =gPlaySt
	adds r1, r3, #0
	adds r1, #0x2b
	movs r0, #1
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0809A248
	ldrb r3, [r3, #0x1b]
	cmp r3, #3
	bne _0809A23C
	adds r1, r2, #0
	adds r1, #0x39
	ldr r0, _0809A238 @ =0x00000F73
	b _0809A262
	.align 2, 0
_0809A234: .4byte gPlaySt
_0809A238: .4byte 0x00000F73
_0809A23C:
	adds r1, r2, #0
	adds r1, #0x39
	ldr r0, _0809A244 @ =0x00000F67
	b _0809A262
	.align 2, 0
_0809A244: .4byte 0x00000F67
_0809A248:
	ldrb r3, [r3, #0x1b]
	cmp r3, #3
	bne _0809A25C
	adds r1, r2, #0
	adds r1, #0x39
	ldr r0, _0809A258 @ =0x00000F79
	b _0809A262
	.align 2, 0
_0809A258: .4byte 0x00000F79
_0809A25C:
	adds r1, r2, #0
	adds r1, #0x39
	ldr r0, _0809A26C @ =0x00000F6D
_0809A262:
	ldrb r1, [r1]
	subs r0, r0, r1
	str r0, [r2, #0x30]
	bx lr
	.align 2, 0
_0809A26C: .4byte 0x00000F6D

	thumb_func_start sub_0809A270
sub_0809A270: @ 0x0809A270
	push {r4, lr}
	adds r4, r0, #0
	bl sub_080886CC
	adds r0, r4, #0
	bl sub_080AAC88
	bl sub_0808EDB0
	movs r0, #0
	bl EndFaceById
	movs r0, #0
	bl SetOnHBlankA
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0809A294
sub_0809A294: @ 0x0809A294
	push {r4, lr}
	adds r4, r0, #0
	bl sub_080893F4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809A2AA
	adds r0, r4, #0
	bl Proc_Break
	b _0809A2D2
_0809A2AA:
	ldr r0, _0809A2D8 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #8
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0809A2D2
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
	ldr r0, _0809A2DC @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809A2D2
	ldr r0, _0809A2E0 @ =0x0000038B
	bl m4aSongNumStart
_0809A2D2:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809A2D8: .4byte gpKeySt
_0809A2DC: .4byte gPlaySt
_0809A2E0: .4byte 0x0000038B

	thumb_func_start sub_0809A2E4
sub_0809A2E4: @ 0x0809A2E4
	push {r4, lr}
	sub sp, #0x10
	adds r4, r0, #0
	movs r0, #0x28
	movs r1, #0
	movs r2, #1
	bl InitTalk
	ldr r0, [r4, #0x30]
	str r0, [sp]
	ldr r0, _0809A320 @ =0x06011000
	str r0, [sp, #4]
	movs r0, #0xa
	str r0, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x13
	movs r2, #0x12
	movs r3, #4
	bl sub_08088584
	movs r0, #0x4e
	bl sub_08087E2C
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809A320: .4byte 0x06011000

	thumb_func_start sub_0809A324
sub_0809A324: @ 0x0809A324
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r7, r0, #0
	adds r0, #0x3b
	ldrb r0, [r0]
	cmp r0, #0
	beq _0809A3E6
	movs r0, #0
	mov r8, r0
	movs r1, #0x34
	adds r1, r1, r7
	mov sb, r1
	adds r2, r7, #0
	adds r2, #0x3e
	str r2, [sp, #4]
_0809A34A:
	mov r3, sb
	add r3, r8
	ldrb r0, [r3]
	movs r4, #1
	add r4, r8
	mov sl, r4
	cmp r0, #0xff
	beq _0809A3AC
	adds r0, r7, #0
	adds r0, #0x52
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r2, r0, #0
	adds r2, #0x34
	ldr r0, _0809A3F8 @ =0x000001FF
	ands r2, r0
	adds r0, r7, #0
	adds r0, #0x54
	movs r4, #0
	ldrsh r1, [r0, r4]
	mov r4, r8
	lsls r0, r4, #4
	adds r0, #0x19
	adds r6, r1, r0
	movs r0, #0xff
	ands r6, r0
	movs r5, #0
	ldrb r3, [r3]
	cmp r5, r3
	bgt _0809A3AC
	adds r4, r2, #0
_0809A388:
	lsls r0, r5, #2
	ldr r1, _0809A3FC @ =0x08D8D674
	adds r0, r0, r1
	ldr r3, [r0]
	ldr r0, _0809A400 @ =0x0000F380
	str r0, [sp]
	movs r0, #0xd
	adds r1, r4, #0
	adds r2, r6, #0
	bl sub_080068C4
	adds r4, #0xa
	adds r5, #1
	mov r0, sb
	add r0, r8
	ldrb r0, [r0]
	cmp r5, r0
	ble _0809A388
_0809A3AC:
	mov r8, sl
	mov r0, r8
	cmp r0, #4
	ble _0809A34A
	ldr r1, [sp, #4]
	ldrb r0, [r1]
	cmp r0, #0
	beq _0809A3E6
	adds r0, r7, #0
	adds r0, #0x52
	movs r2, #0
	ldrsh r1, [r0, r2]
	adds r1, #0xc0
	ldr r0, _0809A3F8 @ =0x000001FF
	ands r1, r0
	adds r0, r7, #0
	adds r0, #0x54
	movs r3, #0
	ldrsh r2, [r0, r3]
	adds r2, #0x1c
	movs r0, #0xff
	ands r2, r0
	ldr r0, _0809A3FC @ =0x08D8D674
	ldr r3, [r0]
	ldr r0, _0809A400 @ =0x0000F380
	str r0, [sp]
	movs r0, #0xd
	bl sub_080068C4
_0809A3E6:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809A3F8: .4byte 0x000001FF
_0809A3FC: .4byte 0x08D8D674
_0809A400: .4byte 0x0000F380

	thumb_func_start sub_0809A404
sub_0809A404: @ 0x0809A404
	push {r4, r5, r6, lr}
	sub sp, #0x10
	adds r4, r0, #0
	movs r2, #0
	mov r1, sp
	ldr r0, _0809A428 @ =0x0842D18C
	ldm r0!, {r3, r5, r6}
	stm r1!, {r3, r5, r6}
	ldr r0, [r0]
	str r0, [r1]
	adds r0, r4, #0
	adds r0, #0x3d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0809A42C
	movs r2, #1
	b _0809A44C
	.align 2, 0
_0809A428: .4byte 0x0842D18C
_0809A42C:
	adds r0, r4, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	cmp r0, #1
	beq _0809A44C
	cmp r0, #1
	bgt _0809A440
	cmp r0, #0
	beq _0809A446
	b _0809A44C
_0809A440:
	cmp r0, #2
	beq _0809A44A
	b _0809A44C
_0809A446:
	movs r2, #3
	b _0809A44C
_0809A44A:
	movs r2, #2
_0809A44C:
	lsls r0, r2, #2
	add r0, sp
	ldr r0, [r0]
	movs r1, #0xa0
	movs r2, #0x20
	bl ApplyPaletteExt
	adds r0, r4, #0
	adds r0, #0x3b
	ldrb r0, [r0]
	cmp r0, #0
	bne _0809A474
	movs r0, #0x20
	bl sub_08013C18
	movs r0, #0xc0
	movs r1, #0xc0
	movs r2, #0xc0
	bl sub_08013B4C
_0809A474:
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_0809A47C
sub_0809A47C: @ 0x0809A47C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r0, #0x3c
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #0x14
	strh r1, [r0]
	adds r0, #2
	strh r1, [r0]
	adds r0, #8
	strh r1, [r0]
	adds r0, #2
	strh r1, [r0]
	movs r2, #0
	ldr r6, _0809A510 @ =0x0842B374
	adds r3, r4, #0
	adds r3, #0x34
	movs r5, #0xff
_0809A4A8:
	adds r1, r3, r2
	ldrb r0, [r1]
	orrs r0, r5
	strb r0, [r1]
	adds r2, #1
	cmp r2, #4
	ble _0809A4A8
	movs r0, #0
	str r0, [r4, #0x2c]
	ldr r1, _0809A514 @ =0x06017000
	adds r0, r6, #0
	bl sub_08013688
	ldr r0, _0809A518 @ =0x0842B4BC
	movs r1, #0xf8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r2, _0809A51C @ =gPlaySt
	adds r2, #0x40
	movs r0, #0x61
	rsbs r0, r0, #0
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x20
	orrs r0, r1
	strb r0, [r2]
	ldr r0, _0809A520 @ =sub_0809A324
	adds r1, r4, #0
	bl sub_080AA20C
	adds r0, r4, #0
	bl sub_08005E88
	ldr r2, _0809A524 @ =gDispIo
	adds r3, r2, #0
	adds r3, #0x3c
	movs r1, #0x21
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r4, [r3]
	ands r0, r4
	strb r0, [r3]
	adds r2, #0x3d
	ldrb r0, [r2]
	ands r1, r0
	strb r1, [r2]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809A510: .4byte 0x0842B374
_0809A514: .4byte 0x06017000
_0809A518: .4byte 0x0842B4BC
_0809A51C: .4byte gPlaySt
_0809A520: .4byte sub_0809A324
_0809A524: .4byte gDispIo

	thumb_func_start sub_0809A528
sub_0809A528: @ 0x0809A528
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r7, r2, #0
	adds r6, r3, #0
	ldr r2, [sp, #0x14]
	cmp r2, #0
	ble _0809A554
	lsls r0, r1, #5
	adds r0, r4, r0
	ldr r1, _0809A55C @ =gBg2Tm
	adds r5, r2, #0
	lsls r0, r0, #1
	adds r4, r0, r1
_0809A542:
	adds r0, r4, #0
	adds r1, r7, #0
	adds r2, r6, #0
	bl sub_08005FEC
	adds r4, #2
	subs r5, #1
	cmp r5, #0
	bne _0809A542
_0809A554:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809A55C: .4byte gBg2Tm

	thumb_func_start sub_0809A560
sub_0809A560: @ 0x0809A560
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	adds r7, r0, #0
	bl ResetText
	ldr r4, _0809A6EC @ =gBg2Tm
	adds r0, r4, #0
	movs r1, #0
	bl TmFill
	movs r0, #0
	bl SetTextFontGlyphs
	movs r0, #0
	bl SetTextFont
	adds r0, r7, #0
	adds r0, #0x3b
	ldrb r0, [r0]
	cmp r0, #0
	bne _0809A594
	b _0809A7FC
_0809A594:
	adds r1, r4, #0
	adds r1, #0x42
	movs r0, #0xc
	str r0, [sp]
	ldr r2, _0809A6F0 @ =0x08D8D738
	adds r0, r7, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r0, [r0]
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	movs r0, #0x40
	adds r0, r0, r7
	mov sb, r0
	adds r1, r7, #0
	adds r1, #0x41
	str r1, [sp, #0x10]
	adds r2, r7, #0
	adds r2, #0x42
	str r2, [sp, #0x14]
	adds r3, r7, #0
	adds r3, #0x39
	str r3, [sp, #8]
	movs r5, #0x3d
	adds r5, r5, r7
	mov sl, r5
	adds r0, r7, #0
	adds r0, #0x4e
	str r0, [sp, #0x18]
	subs r1, #3
	str r1, [sp, #0xc]
	movs r6, #0x80
	lsls r6, r6, #1
	ldr r2, _0809A6F4 @ =0x08D8D634
	mov r8, r2
	movs r5, #4
_0809A5E8:
	mov r3, r8
	adds r3, #4
	mov r8, r3
	subs r3, #4
	ldm r3!, {r0}
	bl DecodeMsg
	ldr r4, _0809A6F8 @ =0x02023C64
	adds r1, r6, r4
	movs r2, #5
	str r2, [sp]
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	adds r6, #0x80
	subs r5, #1
	cmp r5, #0
	bge _0809A5E8
	movs r5, #5
	movs r0, #0xef
	lsls r0, r0, #1
	adds r1, r4, r0
	movs r6, #4
	str r6, [sp]
	ldr r0, _0809A6FC @ =0x0842D1C0
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	movs r1, #0xf9
	lsls r1, r1, #1
	adds r0, r4, r1
	ldr r2, [r7, #0x58]
	movs r1, #2
	bl sub_08006068
	movs r2, #0xfa
	lsls r2, r2, #1
	adds r0, r4, r2
	movs r1, #3
	movs r2, #0x1e
	bl sub_08005FEC
	ldr r3, _0809A700 @ =0x0000025E
	adds r1, r4, r3
	str r6, [sp]
	ldr r0, _0809A704 @ =0x0842D1C8
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	ldr r1, _0809A708 @ =0x0000026A
	adds r0, r4, r1
	movs r1, #0
	movs r2, #0x20
	bl sub_08005FEC
	movs r2, #0x9c
	lsls r2, r2, #2
	adds r0, r4, r2
	movs r1, #0
	movs r2, #0x20
	bl sub_08005FEC
	movs r3, #0x9a
	lsls r3, r3, #2
	adds r0, r4, r3
	mov r1, sb
	ldrb r2, [r1]
	movs r1, #2
	bl sub_08006068
	ldr r2, _0809A70C @ =0x0000026E
	adds r0, r4, r2
	ldr r3, [sp, #0x10]
	ldrb r2, [r3]
	movs r1, #2
	bl sub_0800625C
	movs r1, #0x9d
	lsls r1, r1, #2
	adds r0, r4, r1
	ldr r3, [sp, #0x14]
	ldrb r2, [r3]
	movs r1, #2
	bl sub_0800625C
	adds r1, r4, #0
	adds r1, #0x4e
	str r5, [sp]
	ldr r0, _0809A710 @ =0x0842D1D0
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	adds r0, r4, #0
	adds r0, #0x56
	ldr r2, _0809A714 @ =0x08D8D720
	ldr r5, [sp, #8]
	ldrb r5, [r5]
	lsls r1, r5, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #4
	bl sub_08005FEC
	mov r1, sl
	ldrb r0, [r1]
	cmp r0, #0
	bne _0809A71C
	adds r1, r4, #0
	adds r1, #0x5c
	str r6, [sp]
	ldr r0, _0809A718 @ =0x0842D1D8
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	b _0809A730
	.align 2, 0
_0809A6EC: .4byte gBg2Tm
_0809A6F0: .4byte 0x08D8D738
_0809A6F4: .4byte 0x08D8D634
_0809A6F8: .4byte 0x02023C64
_0809A6FC: .4byte 0x0842D1C0
_0809A700: .4byte 0x0000025E
_0809A704: .4byte 0x0842D1C8
_0809A708: .4byte 0x0000026A
_0809A70C: .4byte 0x0000026E
_0809A710: .4byte 0x0842D1D0
_0809A714: .4byte 0x08D8D720
_0809A718: .4byte 0x0842D1D8
_0809A71C:
	adds r1, r4, #0
	adds r1, #0x5c
	str r6, [sp]
	ldr r0, _0809A7AC @ =0x0842D1E4
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #3
	movs r3, #4
	bl PutDrawText
_0809A730:
	ldr r5, _0809A7B0 @ =0x02023CCC
	movs r4, #2
	str r4, [sp]
	ldr r0, _0809A7B4 @ =0x0842D1EC
	str r0, [sp, #4]
	movs r0, #0
	adds r1, r5, #0
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	adds r0, r5, #4
	ldr r3, [sp, #0x18]
	ldrb r2, [r3]
	movs r1, #2
	bl sub_08006068
	adds r1, r5, #6
	str r4, [sp]
	ldr r0, _0809A7B8 @ =0x0842D1F0
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	ldr r1, [sp, #0xc]
	ldrb r0, [r1]
	cmp r0, #0
	beq _0809A7C0
	adds r1, r5, #0
	adds r1, #0xb4
	movs r0, #3
	str r0, [sp]
	ldr r0, _0809A7BC @ =0x0842D1F4
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	adds r1, r5, #0
	adds r1, #0xba
	movs r0, #6
	str r0, [sp]
	adds r0, r7, #0
	adds r0, #0x43
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	adds r0, r5, #0
	adds r0, #0xcc
	adds r1, r7, #0
	adds r1, #0x3a
	ldrb r2, [r1]
	movs r1, #2
	bl sub_08006068
	b _0809A95C
	.align 2, 0
_0809A7AC: .4byte 0x0842D1E4
_0809A7B0: .4byte 0x02023CCC
_0809A7B4: .4byte 0x0842D1EC
_0809A7B8: .4byte 0x0842D1F0
_0809A7BC: .4byte 0x0842D1F4
_0809A7C0:
	adds r1, r5, #0
	adds r1, #0xb4
	movs r0, #5
	str r0, [sp]
	ldr r0, _0809A7F8 @ =0x0842D1F4
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #1
	movs r3, #0
	bl PutDrawText
	movs r4, #3
	str r4, [sp]
	movs r0, #0x13
	movs r1, #4
	movs r2, #1
	movs r3, #0x14
	bl sub_0809A528
	str r4, [sp]
	movs r0, #0x1a
	movs r1, #4
	movs r2, #1
	movs r3, #0x14
	bl sub_0809A528
	b _0809A95C
	.align 2, 0
_0809A7F8: .4byte 0x0842D1F4
_0809A7FC:
	adds r1, r4, #0
	adds r1, #0x42
	movs r0, #0xc
	str r0, [sp]
	ldr r2, _0809A8F8 @ =0x08D8D738
	adds r0, r7, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r0, [r0]
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	movs r5, #0
	adds r7, #0x3d
	mov sl, r7
	movs r6, #0x80
	lsls r6, r6, #1
	movs r4, #4
_0809A82A:
	ldr r1, _0809A8FC @ =0x08D8D634
	lsls r0, r5, #2
	adds r0, r0, r1
	ldr r0, [r0]
	bl DecodeMsg
	ldr r7, _0809A900 @ =0x02023C64
	adds r1, r6, r7
	movs r2, #5
	mov sb, r2
	str r2, [sp]
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #1
	movs r3, #0
	bl PutDrawText
	movs r3, #3
	mov r8, r3
	str r3, [sp]
	movs r0, #8
	adds r1, r4, #0
	movs r2, #1
	movs r3, #0x14
	bl sub_0809A528
	adds r6, #0x80
	adds r4, #2
	adds r5, #1
	cmp r5, #4
	ble _0809A82A
	movs r5, #0xef
	lsls r5, r5, #1
	adds r1, r7, r5
	movs r4, #4
	str r4, [sp]
	ldr r0, _0809A904 @ =0x0842D1C0
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #1
	movs r3, #0
	bl PutDrawText
	mov r0, r8
	str r0, [sp]
	movs r0, #0x16
	movs r1, #7
	movs r2, #1
	movs r3, #0x14
	bl sub_0809A528
	ldr r2, _0809A908 @ =0x0000025E
	adds r1, r7, r2
	str r4, [sp]
	ldr r0, _0809A90C @ =0x0842D1C8
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #1
	movs r3, #0
	bl PutDrawText
	mov r3, r8
	str r3, [sp]
	movs r0, #0x16
	movs r1, #9
	movs r2, #1
	movs r3, #0x14
	bl sub_0809A528
	adds r1, r7, #0
	adds r1, #0x4e
	mov r5, sb
	str r5, [sp]
	ldr r0, _0809A910 @ =0x0842D1D0
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #1
	movs r3, #0
	bl PutDrawText
	movs r0, #1
	str r0, [sp]
	movs r0, #0xd
	movs r1, #1
	movs r2, #1
	movs r3, #0x14
	bl sub_0809A528
	mov r1, sl
	ldrb r0, [r1]
	cmp r0, #0
	bne _0809A918
	adds r1, r7, #0
	adds r1, #0x5c
	str r4, [sp]
	ldr r0, _0809A914 @ =0x0842D1D8
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #1
	movs r3, #0
	bl PutDrawText
	b _0809A92C
	.align 2, 0
_0809A8F8: .4byte 0x08D8D738
_0809A8FC: .4byte 0x08D8D634
_0809A900: .4byte 0x02023C64
_0809A904: .4byte 0x0842D1C0
_0809A908: .4byte 0x0000025E
_0809A90C: .4byte 0x0842D1C8
_0809A910: .4byte 0x0842D1D0
_0809A914: .4byte 0x0842D1D8
_0809A918:
	adds r1, r7, #0
	adds r1, #0x5c
	str r4, [sp]
	ldr r0, _0809A974 @ =0x0842D1E4
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #1
	movs r3, #4
	bl PutDrawText
_0809A92C:
	movs r0, #4
	str r0, [sp]
	movs r0, #0x16
	movs r1, #1
	movs r2, #1
	movs r3, #0x14
	bl sub_0809A528
	movs r0, #5
	str r0, [sp]
	movs r0, #0x11
	movs r1, #4
	movs r2, #1
	movs r3, #0x14
	bl sub_0809A528
	movs r0, #3
	str r0, [sp]
	movs r0, #0x1a
	movs r1, #4
	movs r2, #1
	movs r3, #0x14
	bl sub_0809A528
_0809A95C:
	movs r0, #4
	bl EnableBgSync
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809A974: .4byte 0x0842D1E4

	thumb_func_start sub_0809A978
sub_0809A978: @ 0x0809A978
	push {r4, lr}
	adds r4, r0, #0
	bl sub_08099D18
	adds r0, r4, #0
	bl sub_080AA390
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_080AA3B4
	adds r0, r4, #0
	bl sub_080A9BE8
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r0, #0
	movs r2, #2
	bl sub_080A9BFC
	movs r0, #3
	bl sub_080A9C68
	movs r0, #0
	movs r1, #0x40
	movs r2, #0xe8
	movs r3, #0x40
	bl sub_080A9C84
	ldr r3, _0809A9F8 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x34
	movs r0, #0x20
	ldrb r1, [r2]
	orrs r1, r0
	strb r1, [r2]
	adds r1, r3, #0
	adds r1, #0x36
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	adds r1, #6
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	movs r0, #0xa0
	lsls r0, r0, #7
	movs r1, #5
	bl sub_0809228C
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809A9F8: .4byte gDispIo

	thumb_func_start sub_0809A9FC
sub_0809A9FC: @ 0x0809A9FC
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0x2c
	adds r6, r0, #0
	add r0, sp, #0x28
	movs r1, #0
	strh r1, [r0]
	ldr r2, _0809AB18 @ =0x0100000C
	add r1, sp, #0x10
	bl CpuSet
	adds r0, r6, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	adds r0, #1
	ldrb r2, [r0]
	add r0, sp, #0x10
	bl sub_0809FC60
	add r0, sp, #0x10
	ldrb r2, [r0]
	lsls r0, r2, #0x1f
	lsrs r0, r0, #0x1f
	adds r1, r6, #0
	adds r1, #0x3b
	strb r0, [r1]
	cmp r0, #0
	bne _0809AA3A
	b _0809AB8C
_0809AA3A:
	lsls r0, r2, #0x19
	lsrs r0, r0, #0x1d
	adds r3, r6, #0
	adds r3, #0x34
	strb r0, [r3]
	add r0, sp, #0x10
	ldrh r0, [r0]
	lsls r0, r0, #0x16
	lsrs r0, r0, #0x1d
	movs r1, #0x35
	adds r1, r1, r6
	mov r8, r1
	strb r0, [r1]
	add r0, sp, #0x10
	ldrb r1, [r0, #1]
	lsls r0, r1, #0x1b
	lsrs r0, r0, #0x1d
	movs r2, #0x36
	adds r2, r2, r6
	mov ip, r2
	strb r0, [r2]
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x1d
	adds r7, r6, #0
	adds r7, #0x37
	strb r1, [r7]
	add r0, sp, #0x10
	ldrb r1, [r0, #2]
	lsls r0, r1, #0x1d
	lsrs r0, r0, #0x1d
	adds r4, r6, #0
	adds r4, #0x38
	strb r0, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x1f
	movs r0, #0x3e
	adds r0, r0, r6
	mov sb, r0
	strb r1, [r0]
	ldr r0, [sp, #0x14]
	lsrs r0, r0, #7
	adds r1, r6, #0
	adds r1, #0x40
	strb r0, [r1]
	add r0, sp, #0x10
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x1a
	adds r1, #1
	strb r0, [r1]
	add r0, sp, #0x10
	ldrh r0, [r0, #6]
	lsls r0, r0, #0x13
	lsrs r0, r0, #0x1a
	adds r1, #1
	strb r0, [r1]
	add r0, sp, #0x10
	ldrb r0, [r0, #7]
	lsrs r2, r0, #5
	ldr r0, [sp, #0x18]
	ldr r1, _0809AB1C @ =0x001FFFFF
	ands r0, r1
	lsls r0, r0, #3
	orrs r0, r2
	str r0, [r6, #0x58]
	add r0, sp, #0x10
	ldrb r0, [r0, #0x17]
	adds r5, r6, #0
	adds r5, #0x3f
	strb r0, [r5]
	ldrb r0, [r3]
	mov r2, r8
	ldrb r1, [r2]
	mov r3, ip
	ldrb r2, [r3]
	ldrb r3, [r7]
	ldrb r4, [r4]
	str r4, [sp]
	bl sub_080B73FC
	adds r1, r6, #0
	adds r1, #0x39
	strb r0, [r1]
	add r0, sp, #0x10
	ldrh r0, [r0, #0xa]
	lsls r0, r0, #0x15
	lsrs r0, r0, #0x1a
	adds r2, r6, #0
	adds r2, #0x4e
	strb r0, [r2]
	add r0, sp, #0x10
	ldrh r0, [r0, #2]
	lsrs r0, r0, #7
	subs r2, #0x14
	strb r0, [r2]
	mov r2, sb
	ldrb r0, [r2]
	adds r7, r1, #0
	cmp r0, #0
	beq _0809AB20
	adds r4, r6, #0
	adds r4, #0x43
	add r1, sp, #0x1c
	adds r0, r4, #0
	bl strcpy
	adds r0, r4, #0
	bl sub_0802EBB8
	b _0809AB2A
	.align 2, 0
_0809AB18: .4byte 0x0100000C
_0809AB1C: .4byte 0x001FFFFF
_0809AB20:
	ldr r0, _0809AB68 @ =0x00000569
	bl DecodeMsg
	bl sub_0802EBB8
_0809AB2A:
	ldrb r0, [r5]
	cmp r0, #0
	beq _0809AB4C
	ldrb r1, [r7]
	bl sub_0809B214
	cmp r0, #0
	bne _0809AB3C
	strb r0, [r5]
_0809AB3C:
	ldrb r0, [r5]
	adds r4, r6, #0
	adds r4, #0x3b
	ldr r3, _0809AB6C @ =gBg1Tm
	mov r8, r3
	ldr r7, _0809AB70 @ =0x0842BA30
	cmp r0, #0
	bne _0809ABAA
_0809AB4C:
	adds r0, r6, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	cmp r0, #0
	bne _0809AB74
	movs r0, #0x2d
	strb r0, [r5]
	adds r4, r6, #0
	adds r4, #0x3b
	ldr r0, _0809AB6C @ =gBg1Tm
	mov r8, r0
	ldr r7, _0809AB70 @ =0x0842BA30
	b _0809ABAA
	.align 2, 0
_0809AB68: .4byte 0x00000569
_0809AB6C: .4byte gBg1Tm
_0809AB70: .4byte 0x0842BA30
_0809AB74:
	movs r0, #0x28
	strb r0, [r5]
	adds r4, r6, #0
	adds r4, #0x3b
	ldr r1, _0809AB84 @ =gBg1Tm
	mov r8, r1
	ldr r7, _0809AB88 @ =0x0842BA30
	b _0809ABAA
	.align 2, 0
_0809AB84: .4byte gBg1Tm
_0809AB88: .4byte 0x0842BA30
_0809AB8C:
	movs r2, #0
	adds r4, r1, #0
	ldr r3, _0809AC48 @ =gBg1Tm
	mov r8, r3
	ldr r7, _0809AC4C @ =0x0842BA30
	adds r3, r6, #0
	adds r3, #0x34
	movs r5, #0xff
_0809AB9C:
	adds r1, r3, r2
	ldrb r0, [r1]
	orrs r0, r5
	strb r0, [r1]
	adds r2, #1
	cmp r2, #4
	ble _0809AB9C
_0809ABAA:
	movs r2, #0xa5
	lsls r2, r2, #7
	mov r0, r8
	adds r1, r7, #0
	bl TmApplyTsa_thm
	adds r0, r6, #0
	bl sub_0809A560
	adds r0, r6, #0
	bl sub_0809A404
	movs r0, #7
	bl EnableBgSync
	movs r0, #0
	bl EndFaceById
	bl sub_080886CC
	ldrb r0, [r4]
	cmp r0, #0
	beq _0809AC38
	adds r4, r6, #0
	adds r4, #0x3f
	ldrb r0, [r4]
	cmp r0, #0
	beq _0809AC38
	ldr r2, _0809AC50 @ =0x08C4C158
	ldrb r1, [r4]
	subs r1, #1
	movs r0, #0x34
	muls r0, r1, r0
	adds r0, r0, r2
	ldrh r1, [r0, #6]
	movs r0, #0xc1
	lsls r0, r0, #1
	str r0, [sp]
	movs r0, #0
	movs r2, #0xd8
	movs r3, #0x58
	bl sub_08007A5C
	ldrb r0, [r4]
	adds r1, r6, #0
	adds r1, #0x39
	ldrb r1, [r1]
	bl sub_0809B214
	adds r4, r0, #0
	movs r0, #0x28
	movs r1, #0
	movs r2, #1
	bl InitTalk
	str r4, [sp]
	ldr r0, _0809AC54 @ =0x06011000
	str r0, [sp, #4]
	movs r0, #0xa
	str r0, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x13
	movs r2, #0x12
	movs r3, #4
	bl sub_08088584
	ldr r0, _0809AC58 @ =0x000809FE
	bl sub_08087E2C
_0809AC38:
	add sp, #0x2c
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809AC48: .4byte gBg1Tm
_0809AC4C: .4byte 0x0842BA30
_0809AC50: .4byte 0x08C4C158
_0809AC54: .4byte 0x06011000
_0809AC58: .4byte 0x000809FE

	thumb_func_start sub_0809AC5C
sub_0809AC5C: @ 0x0809AC5C
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r0, #0x4f
	movs r5, #0
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
	ldr r1, _0809ACA8 @ =gpKeySt
	ldr r2, [r1]
	movs r0, #2
	ldrh r3, [r2, #8]
	ands r0, r3
	adds r3, r1, #0
	cmp r0, #0
	beq _0809ACB4
	ldr r0, _0809ACAC @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809AC8E
	ldr r0, _0809ACB0 @ =0x0000038B
	bl m4aSongNumStart
_0809AC8E:
	movs r1, #0x80
	lsls r1, r1, #1
	str r5, [sp]
	movs r0, #0x5a
	movs r2, #0xc0
	movs r3, #0x18
	bl sub_08003FD4
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
	b _0809AD4C
	.align 2, 0
_0809ACA8: .4byte gpKeySt
_0809ACAC: .4byte gPlaySt
_0809ACB0: .4byte 0x0000038B
_0809ACB4:
	movs r0, #4
	ldrh r2, [r2, #4]
	ands r0, r2
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	beq _0809AD00
	adds r0, r4, #0
	adds r0, #0x5e
	ldrh r1, [r0]
	adds r1, #1
	strh r1, [r0]
	subs r0, #0x23
	ldrb r0, [r0]
	cmp r0, #0
	beq _0809AD06
	lsls r0, r1, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0xb4
	bls _0809AD06
	ldr r0, _0809ACF8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809ACEE
	ldr r0, _0809ACFC @ =0x0000038A
	bl m4aSongNumStart
_0809ACEE:
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
	b _0809AD4C
	.align 2, 0
_0809ACF8: .4byte gPlaySt
_0809ACFC: .4byte 0x0000038A
_0809AD00:
	adds r1, r4, #0
	adds r1, #0x5e
	strh r0, [r1]
_0809AD06:
	ldr r1, [r3]
	movs r0, #0x88
	lsls r0, r0, #2
	ldrh r1, [r1, #8]
	ands r0, r1
	adds r2, r4, #0
	adds r2, #0x4f
	cmp r0, #0
	beq _0809AD1C
	movs r0, #0xff
	strb r0, [r2]
_0809AD1C:
	ldr r1, [r3]
	movs r0, #0x88
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0809AD2E
	movs r0, #1
	strb r0, [r2]
_0809AD2E:
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	bne _0809AD44
	adds r0, r4, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0809AD4C
_0809AD44:
	adds r0, r4, #0
	movs r1, #2
	bl Proc_Goto
_0809AD4C:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0809AD54
sub_0809AD54: @ 0x0809AD54
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	adds r6, r0, #0
	adds r6, #0x5c
	ldrh r0, [r6]
	bl sub_0809B2A0
	adds r7, r0, #0
	cmp r7, #0
	bne _0809AD72
	strh r7, [r6]
	movs r0, #0
	bl sub_0809B2A0
	adds r7, r0, #0
_0809AD72:
	ldrh r0, [r6]
	bl sub_0809B248
	adds r5, r0, #0
	ldrh r0, [r6]
	adds r0, #1
	movs r4, #0
	strh r0, [r6]
	movs r0, #0
	bl EndFaceById
	ldr r2, _0809ADD0 @ =0x08C4C158
	subs r1, r7, #1
	movs r0, #0x34
	muls r0, r1, r0
	adds r0, r0, r2
	ldrh r0, [r0, #6]
	str r4, [sp]
	movs r1, #0xd8
	movs r2, #0x58
	movs r3, #0x82
	bl sub_08008DA8
	movs r0, #0x28
	movs r1, #0
	movs r2, #1
	bl InitTalk
	str r5, [sp]
	ldr r0, _0809ADD4 @ =0x06011000
	str r0, [sp, #4]
	movs r0, #0xa
	str r0, [sp, #8]
	str r4, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x13
	movs r2, #0x12
	movs r3, #4
	bl sub_08088584
	ldr r0, _0809ADD8 @ =0x0002000A
	bl sub_08087E2C
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809ADD0: .4byte 0x08C4C158
_0809ADD4: .4byte 0x06011000
_0809ADD8: .4byte 0x0002000A

	thumb_func_start sub_0809ADDC
sub_0809ADDC: @ 0x0809ADDC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r4, _0809AECC @ =gDispIo
	movs r2, #4
	rsbs r2, r2, #0
	adds r1, r2, #0
	ldrb r3, [r4, #0xc]
	ands r1, r3
	movs r3, #1
	mov r8, r3
	mov r3, r8
	orrs r1, r3
	strb r1, [r4, #0xc]
	movs r1, #3
	ldrb r3, [r4, #0x10]
	orrs r1, r3
	strb r1, [r4, #0x10]
	adds r1, r2, #0
	ldrb r3, [r4, #0x14]
	ands r1, r3
	movs r6, #2
	orrs r1, r6
	strb r1, [r4, #0x14]
	ldrb r1, [r4, #0x18]
	ands r2, r1
	strb r2, [r4, #0x18]
	movs r5, #0
	str r5, [r0, #0x2c]
	adds r2, r4, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r3, [r2]
	ands r0, r3
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x44
	strb r5, [r0]
	adds r1, r4, #0
	adds r1, #0x45
	movs r7, #0x10
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x46
	strb r5, [r0]
	ldr r0, _0809AED0 @ =0x0000FFE0
	ldrh r1, [r4, #0x3c]
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	ldr r1, _0809AED4 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xb8
	lsls r2, r2, #5
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r4, #0x3c]
	ldr r0, _0809AED8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809AE66
	movs r0, #0xc8
	bl m4aSongNumStart
_0809AE66:
	movs r0, #0x20
	ldrb r3, [r4, #1]
	orrs r0, r3
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r4, #1]
	adds r2, r4, #0
	adds r2, #0x34
	mov r0, r8
	ldrb r1, [r2]
	orrs r0, r1
	orrs r0, r6
	movs r1, #4
	orrs r0, r1
	movs r3, #8
	orrs r0, r3
	orrs r0, r7
	strb r0, [r2]
	adds r2, #2
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	orrs r0, r3
	orrs r0, r7
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x2d
	strb r5, [r0]
	adds r0, #4
	strb r5, [r0]
	adds r1, r4, #0
	adds r1, #0x2c
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809AECC: .4byte gDispIo
_0809AED0: .4byte 0x0000FFE0
_0809AED4: .4byte 0x0000E0FF
_0809AED8: .4byte gPlaySt

	thumb_func_start sub_0809AEDC
sub_0809AEDC: @ 0x0809AEDC
	push {r4, lr}
	movs r1, #0
	movs r4, #0xf0
	cmp r0, #0
	ble _0809AEE8
	adds r1, r0, #0
_0809AEE8:
	cmp r0, #0
	bge _0809AEF2
	movs r2, #0x80
	lsls r2, r2, #1
	adds r4, r0, r2
_0809AEF2:
	cmp r4, #0xf0
	bgt _0809AF00
	adds r0, r4, #0
	cmp r0, #0
	bge _0809AF02
	movs r0, #0
	b _0809AF02
_0809AF00:
	movs r0, #0xf0
_0809AF02:
	adds r4, r0, #0
	cmp r1, #0xf0
	bgt _0809AF10
	cmp r1, #0
	bge _0809AF12
	movs r1, #0
	b _0809AF12
_0809AF10:
	movs r1, #0xf0
_0809AF12:
	ldr r2, _0809AF34 @ =gDispIo
	adds r3, r2, #0
	adds r3, #0x2d
	movs r0, #0
	strb r1, [r3]
	adds r1, r2, #0
	adds r1, #0x31
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x2c
	strb r4, [r0]
	subs r1, #1
	movs r0, #0xa0
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809AF34: .4byte gDispIo

	thumb_func_start sub_0809AF38
sub_0809AF38: @ 0x0809AF38
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	movs r4, #0xa
	subs r4, r4, r0
	lsls r0, r4, #3
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	movs r5, #8
	subs r5, r5, r0
	lsls r0, r4, #4
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	movs r3, #0x10
	subs r3, r3, r0
	adds r0, r6, #0
	adds r0, #0x4f
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r1, r5, #0
	muls r1, r0, r1
	mov r8, r1
	adds r0, r6, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r7, r5, #0
	muls r7, r0, r7
	ldr r4, _0809B024 @ =gDispIo
	adds r2, r4, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x44
	movs r1, #0
	strb r3, [r0]
	movs r0, #0x10
	subs r0, r0, r3
	adds r2, #9
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x46
	strb r1, [r0]
	mov r0, r8
	lsls r5, r0, #0x10
	lsrs r5, r5, #0x10
	lsls r4, r7, #0x10
	lsrs r4, r4, #0x10
	movs r0, #0
	adds r1, r5, #0
	adds r2, r4, #0
	bl SetBgOffset
	movs r0, #1
	adds r1, r5, #0
	adds r2, r4, #0
	bl SetBgOffset
	adds r2, r7, #4
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	adds r1, r5, #0
	bl SetBgOffset
	mov r1, r8
	rsbs r0, r1, #0
	adds r1, r6, #0
	adds r1, #0x52
	strh r0, [r1]
	rsbs r1, r7, #0
	adds r2, r6, #0
	adds r2, #0x54
	strh r1, [r2]
	bl sub_0809AEDC
	adds r0, r6, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0
	beq _0809B00C
	movs r1, #0xd8
	mov r0, r8
	subs r1, r1, r0
	movs r2, #0x58
	subs r2, r2, r7
	movs r0, #0
	bl sub_08007B80
_0809B00C:
	ldr r0, [r6, #0x2c]
	cmp r0, #0xa
	bne _0809B018
	adds r0, r6, #0
	bl Proc_Break
_0809B018:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809B024: .4byte gDispIo

	thumb_func_start sub_0809B028
sub_0809B028: @ 0x0809B028
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r5, #0
	str r5, [r4, #0x2c]
	adds r0, #0x4f
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble _0809B060
	movs r0, #1
	bl sub_080A9CAC
	adds r2, r4, #0
	adds r2, #0x3c
	ldrb r0, [r2]
	cmp r0, #2
	bne _0809B05C
	adds r1, r4, #0
	adds r1, #0x3d
	movs r0, #1
	ldrb r3, [r1]
	subs r0, r0, r3
	strb r0, [r1]
	strb r5, [r2]
	b _0809B060
_0809B05C:
	adds r0, #1
	strb r0, [r2]
_0809B060:
	adds r0, r4, #0
	adds r0, #0x4f
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _0809B092
	movs r0, #0
	bl sub_080A9CAC
	adds r2, r4, #0
	adds r2, #0x3c
	ldrb r0, [r2]
	cmp r0, #0
	bne _0809B08E
	adds r0, r4, #0
	adds r0, #0x3d
	movs r1, #1
	ldrb r3, [r0]
	subs r1, r1, r3
	strb r1, [r0]
	movs r0, #2
	b _0809B090
_0809B08E:
	subs r0, #1
_0809B090:
	strb r0, [r2]
_0809B092:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0809B098
sub_0809B098: @ 0x0809B098
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r0, #0
	ldr r0, [r7, #0x2c]
	adds r0, #1
	str r0, [r7, #0x2c]
	movs r5, #0xa
	subs r5, r5, r0
	lsls r0, r5, #3
	muls r0, r5, r0
	movs r1, #0x64
	bl __divsi3
	movs r4, #8
	subs r4, r4, r0
	lsls r0, r5, #4
	muls r0, r5, r0
	movs r1, #0x64
	bl __divsi3
	movs r2, #0x10
	subs r2, r2, r0
	lsls r4, r4, #3
	subs r4, #0x40
	adds r0, r7, #0
	adds r0, #0x4f
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r4, #0
	muls r1, r0, r1
	mov sb, r1
	adds r0, r7, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r3, r4, #0
	muls r3, r0, r3
	mov r8, r3
	ldr r6, _0809B1EC @ =gDispIo
	movs r0, #0x3c
	adds r0, r0, r6
	mov sl, r0
	movs r0, #0x3f
	mov r1, sl
	ldrb r1, [r1]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	mov r3, sl
	strb r0, [r3]
	movs r0, #0x10
	subs r0, r0, r2
	movs r1, #0
	ldr r3, _0809B1F0 @ =0x030027D4
	strb r0, [r3]
	ldr r0, _0809B1F4 @ =0x030027D5
	strb r2, [r0]
	ldr r2, _0809B1F8 @ =0x030027D6
	strb r1, [r2]
	mov r3, sb
	lsls r5, r3, #0x10
	lsrs r5, r5, #0x10
	mov r0, r8
	lsls r4, r0, #0x10
	lsrs r4, r4, #0x10
	movs r0, #0
	adds r1, r5, #0
	adds r2, r4, #0
	bl SetBgOffset
	movs r0, #1
	adds r1, r5, #0
	adds r2, r4, #0
	bl SetBgOffset
	mov r2, r8
	adds r2, #4
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	adds r1, r5, #0
	bl SetBgOffset
	mov r1, sb
	rsbs r0, r1, #0
	adds r1, r7, #0
	adds r1, #0x52
	movs r4, #0
	strh r0, [r1]
	mov r2, r8
	rsbs r1, r2, #0
	adds r2, r7, #0
	adds r2, #0x54
	strh r1, [r2]
	bl sub_0809AEDC
	adds r0, r7, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0
	beq _0809B17E
	movs r1, #0xd8
	mov r3, sb
	subs r1, r1, r3
	movs r2, #0x58
	mov r0, r8
	subs r2, r2, r0
	movs r0, #0
	bl sub_08007B80
_0809B17E:
	ldr r0, [r7, #0x2c]
	cmp r0, #0xa
	bne _0809B1DE
	adds r0, r7, #0
	bl Proc_Break
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r6, #0xc]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r6, #0xc]
	movs r2, #3
	ldrb r0, [r6, #0x10]
	orrs r0, r2
	strb r0, [r6, #0x10]
	ldrb r3, [r6, #0x14]
	ands r1, r3
	movs r0, #2
	orrs r1, r0
	strb r1, [r6, #0x14]
	ldrb r0, [r6, #0x18]
	orrs r2, r0
	strb r2, [r6, #0x18]
	movs r0, #0x3f
	mov r1, sl
	ldrb r1, [r1]
	ands r0, r1
	mov r2, sl
	strb r0, [r2]
	ldr r3, _0809B1F0 @ =0x030027D4
	strb r4, [r3]
	ldr r0, _0809B1F4 @ =0x030027D5
	strb r4, [r0]
	ldr r1, _0809B1F8 @ =0x030027D6
	strb r4, [r1]
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r2, [r6, #1]
	ands r0, r2
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r6, #1]
_0809B1DE:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809B1EC: .4byte gDispIo
_0809B1F0: .4byte 0x030027D4
_0809B1F4: .4byte 0x030027D5
_0809B1F8: .4byte 0x030027D6

	thumb_func_start sub_0809B1FC
sub_0809B1FC: @ 0x0809B1FC
	push {lr}
	adds r2, r0, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	adds r1, r2, #0
	adds r1, #0x3d
	ldrb r1, [r1]
	bl sub_0809EDF0
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0809B214
sub_0809B214: @ 0x0809B214
	adds r3, r0, #0
	ldr r2, _0809B21C @ =0x08D8D84C
	b _0809B23C
	.align 2, 0
_0809B21C: .4byte 0x08D8D84C
_0809B220:
	ldr r0, [r2]
	cmp r3, r0
	bne _0809B23A
	cmp r1, #3
	ble _0809B22E
	ldr r0, [r2, #4]
	b _0809B244
_0809B22E:
	cmp r1, #1
	ble _0809B236
	ldr r0, [r2, #8]
	b _0809B244
_0809B236:
	ldr r0, [r2, #0xc]
	b _0809B244
_0809B23A:
	adds r2, #0x10
_0809B23C:
	ldr r0, [r2]
	cmp r0, #0
	bne _0809B220
	movs r0, #0
_0809B244:
	bx lr
	.align 2, 0

	thumb_func_start sub_0809B248
sub_0809B248: @ 0x0809B248
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r1, #3
	bl __modsi3
	cmp r0, #0
	bne _0809B26C
	ldr r4, _0809B268 @ =0x08D8D84C
	adds r0, r5, #0
	movs r1, #3
	bl __divsi3
	lsls r0, r0, #4
	adds r4, #4
	b _0809B292
	.align 2, 0
_0809B268: .4byte 0x08D8D84C
_0809B26C:
	cmp r0, #1
	beq _0809B284
	ldr r4, _0809B280 @ =0x08D8D84C
	adds r0, r5, #0
	movs r1, #3
	bl __divsi3
	lsls r0, r0, #4
	adds r4, #0xc
	b _0809B292
	.align 2, 0
_0809B280: .4byte 0x08D8D84C
_0809B284:
	ldr r4, _0809B29C @ =0x08D8D84C
	adds r0, r5, #0
	movs r1, #3
	bl __divsi3
	lsls r0, r0, #4
	adds r4, #8
_0809B292:
	adds r0, r0, r4
	ldr r0, [r0]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0809B29C: .4byte 0x08D8D84C

	thumb_func_start sub_0809B2A0
sub_0809B2A0: @ 0x0809B2A0
	push {r4, lr}
	ldr r4, _0809B2B8 @ =0x08D8D84C
	movs r1, #3
	bl __divsi3
	lsls r0, r0, #4
	adds r0, r0, r4
	ldr r0, [r0]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0809B2B8: .4byte 0x08D8D84C

	thumb_func_start sub_0809B2BC
sub_0809B2BC: @ 0x0809B2BC
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r2, [r0, #0x30]
	movs r3, #0x8f
	lsls r3, r3, #6
	movs r0, #0x90
	movs r1, #3
	bl sub_08090148
	movs r6, #0x9c
	lsls r6, r6, #5
	movs r5, #0x94
	movs r4, #2
_0809B2D6:
	str r6, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x12
	ldr r3, _0809B2F8 @ =0x08BFF7A8
	bl sub_080068C4
	adds r6, #4
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge _0809B2D6
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809B2F8: .4byte 0x08BFF7A8

	thumb_func_start sub_0809B2FC
sub_0809B2FC: @ 0x0809B2FC
	push {r4, r5, r6, lr}
	sub sp, #0x20
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r0, _0809B374 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetROMChapterStruct
	adds r0, #0x8a
	ldrh r0, [r0]
	bl DecodeMsg
	adds r6, r0, #0
	ldr r0, _0809B378 @ =0x06010000
	adds r5, r5, r0
	mov r0, sp
	adds r1, r5, #0
	movs r2, #1
	bl InitSpriteTextFont
	ldr r0, _0809B37C @ =0x081901C8
	adds r4, #0x10
	lsls r4, r4, #5
	adds r1, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	add r4, sp, #0x18
	adds r0, r4, #0
	bl InitSpriteText
	mov r0, sp
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	adds r0, r4, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	movs r0, #0x60
	adds r1, r6, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #0
	adds r3, r6, #0
	bl Text_InsertDrawString
	movs r0, #0
	bl SetTextFont
	add sp, #0x20
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809B374: .4byte gPlaySt
_0809B378: .4byte 0x06010000
_0809B37C: .4byte 0x081901C8

	thumb_func_start sub_0809B380
sub_0809B380: @ 0x0809B380
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r5, r0, #0
	bl sub_08099C7C
	adds r6, r0, #0
	ldr r4, _0809B4B0 @ =gDispIo
	movs r0, #8
	rsbs r0, r0, #0
	ldrb r1, [r4]
	ands r0, r1
	strb r0, [r4]
	movs r0, #0
	bl InitBgs
	movs r0, #0
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r4, #0xc]
	ands r0, r2
	strb r0, [r4, #0xc]
	adds r0, r1, #0
	ldrb r2, [r4, #0x10]
	ands r0, r2
	movs r2, #2
	orrs r0, r2
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r1, r0
	strb r1, [r4, #0x14]
	movs r0, #3
	ldrb r1, [r4, #0x18]
	orrs r0, r1
	strb r0, [r4, #0x18]
	bl sub_080069C4
	bl ResetText
	bl InitIcons
	bl sub_0804A9F8
	bl sub_08015A0C
	ldr r2, _0809B4B4 @ =0x0000FFFC
	movs r0, #0
	movs r1, #4
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #4
	bl ApplyIconPalettes
	bl sub_0808ED8C
	movs r0, #7
	bl EnableBgSync
	adds r0, r5, #0
	bl sub_08005E88
	ldr r0, _0809B4B8 @ =0x02012A90
	movs r1, #8
	bl InitText
	movs r1, #0xe0
	lsls r1, r1, #4
	movs r3, #0xc0
	lsls r3, r3, #4
	movs r0, #0
	str r0, [sp]
	str r5, [sp, #4]
	movs r0, #0xd
	movs r2, #0xf
	bl sub_080AAA50
	movs r0, #0
	movs r1, #0x90
	movs r2, #0x10
	movs r3, #0
	bl sub_080AAAD0
	movs r0, #0xe0
	lsls r0, r0, #7
	movs r1, #1
	bl sub_0809B2FC
	ldr r4, _0809B4BC @ =gPlaySt
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetROMChapterStruct
	movs r1, #0
	ldrb r2, [r4, #0x1b]
	cmp r2, #3
	bne _0809B478
	movs r1, #1
_0809B478:
	adds r0, #0x80
	adds r0, r0, r1
	ldrb r0, [r0]
	str r0, [r5, #0x30]
	movs r0, #0xf0
	lsls r0, r0, #7
	movs r1, #2
	bl sub_0808EFBC
	ldr r0, _0809B4C0 @ =sub_0809B2BC
	adds r1, r5, #0
	bl sub_080AA20C
	movs r0, #0x80
	lsls r0, r0, #2
	movs r1, #3
	movs r2, #1
	bl InitTalk
	ldrb r0, [r4, #0xe]
	cmp r0, #0x2e
	bne _0809B4C4
	adds r0, r5, #0
	movs r1, #3
	bl Proc_Goto
	b _0809B4F4
	.align 2, 0
_0809B4B0: .4byte gDispIo
_0809B4B4: .4byte 0x0000FFFC
_0809B4B8: .4byte 0x02012A90
_0809B4BC: .4byte gPlaySt
_0809B4C0: .4byte sub_0809B2BC
_0809B4C4:
	cmp r6, #0x4b
	bne _0809B4D0
	movs r0, #0x99
	bl sub_0807A0B4
	b _0809B4F4
_0809B4D0:
	movs r0, #0x99
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809B4F4
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	cmp r0, #0x2a
	bgt _0809B4F4
	movs r6, #0x4b
	movs r0, #0x99
	bl sub_0807A0E0
	adds r0, r5, #0
	movs r1, #4
	bl Proc_Goto
_0809B4F4:
	ldr r3, _0809B50C @ =0x00000202
	movs r0, #0
	str r0, [sp]
	adds r0, r6, #0
	movs r1, #0xd4
	movs r2, #0x52
	bl sub_08008DA8
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809B50C: .4byte 0x00000202

	thumb_func_start sub_0809B510
sub_0809B510: @ 0x0809B510
	push {r4, lr}
	sub sp, #0x10
	adds r4, r0, #0
	bl sub_08099C28
	str r0, [r4, #0x2c]
	movs r3, #1
	rsbs r3, r3, #0
	str r0, [sp]
	ldr r0, _0809B54C @ =0x06011000
	str r0, [sp, #4]
	str r3, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x10
	adds r2, r3, #0
	bl sub_08088584
	bl sub_08087E90
	adds r1, r0, #0
	ldr r0, _0809B550 @ =0x0004004E
	orrs r0, r1
	bl sub_08087E2C
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809B54C: .4byte 0x06011000
_0809B550: .4byte 0x0004004E

	thumb_func_start sub_0809B554
sub_0809B554: @ 0x0809B554
	push {r4, lr}
	sub sp, #0x10
	adds r4, r0, #0
	bl sub_08099BF8
	str r0, [r4, #0x2c]
	movs r3, #1
	rsbs r3, r3, #0
	str r0, [sp]
	ldr r0, _0809B590 @ =0x06011000
	str r0, [sp, #4]
	str r3, [sp, #8]
	str r4, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x10
	adds r2, r3, #0
	bl sub_08088584
	bl sub_08087E90
	adds r1, r0, #0
	ldr r0, _0809B594 @ =0x0004000A
	orrs r0, r1
	bl sub_08087E2C
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809B590: .4byte 0x06011000
_0809B594: .4byte 0x0004000A

	thumb_func_start sub_0809B598
sub_0809B598: @ 0x0809B598
	push {lr}
	sub sp, #0x10
	adds r2, r0, #0
	ldr r1, _0809B5B0 @ =gPlaySt
	adds r1, #0x2b
	movs r0, #1
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0809B5B8
	ldr r0, _0809B5B4 @ =0x00000FAD
	b _0809B5BA
	.align 2, 0
_0809B5B0: .4byte gPlaySt
_0809B5B4: .4byte 0x00000FAD
_0809B5B8:
	ldr r0, _0809B5EC @ =0x00000FAE
_0809B5BA:
	str r0, [r2, #0x2c]
	movs r3, #1
	rsbs r3, r3, #0
	ldr r0, [r2, #0x2c]
	str r0, [sp]
	ldr r0, _0809B5F0 @ =0x06011000
	str r0, [sp, #4]
	str r3, [sp, #8]
	str r2, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x10
	adds r2, r3, #0
	bl sub_08088584
	bl sub_08087E90
	adds r1, r0, #0
	ldr r0, _0809B5F4 @ =0x0004000A
	orrs r0, r1
	bl sub_08087E2C
	add sp, #0x10
	pop {r0}
	bx r0
	.align 2, 0
_0809B5EC: .4byte 0x00000FAE
_0809B5F0: .4byte 0x06011000
_0809B5F4: .4byte 0x0004000A

	thumb_func_start sub_0809B5F8
sub_0809B5F8: @ 0x0809B5F8
	push {lr}
	sub sp, #0x10
	adds r2, r0, #0
	ldr r1, _0809B610 @ =gPlaySt
	adds r1, #0x2b
	movs r0, #1
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0809B618
	ldr r0, _0809B614 @ =0x00000FAF
	b _0809B61C
	.align 2, 0
_0809B610: .4byte gPlaySt
_0809B614: .4byte 0x00000FAF
_0809B618:
	movs r0, #0xfb
	lsls r0, r0, #4
_0809B61C:
	str r0, [r2, #0x2c]
	movs r3, #1
	rsbs r3, r3, #0
	ldr r0, [r2, #0x2c]
	str r0, [sp]
	ldr r0, _0809B64C @ =0x06011000
	str r0, [sp, #4]
	str r3, [sp, #8]
	str r2, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x10
	adds r2, r3, #0
	bl sub_08088584
	bl sub_08087E90
	adds r1, r0, #0
	ldr r0, _0809B650 @ =0x0006000A
	orrs r0, r1
	bl sub_08087E2C
	add sp, #0x10
	pop {r0}
	bx r0
	.align 2, 0
_0809B64C: .4byte 0x06011000
_0809B650: .4byte 0x0006000A

	thumb_func_start sub_0809B654
sub_0809B654: @ 0x0809B654
	push {lr}
	sub sp, #4
	ldr r3, _0809B670 @ =0x00000202
	movs r0, #0
	str r0, [sp]
	movs r0, #0x41
	movs r1, #0xd4
	movs r2, #0x52
	bl sub_08008DA8
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_0809B670: .4byte 0x00000202

	thumb_func_start sub_0809B674
sub_0809B674: @ 0x0809B674
	push {lr}
	sub sp, #0x10
	adds r2, r0, #0
	ldr r1, _0809B68C @ =gPlaySt
	adds r1, #0x2b
	movs r0, #1
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0809B694
	ldr r0, _0809B690 @ =0x00000FB1
	b _0809B696
	.align 2, 0
_0809B68C: .4byte gPlaySt
_0809B690: .4byte 0x00000FB1
_0809B694:
	ldr r0, _0809B6C8 @ =0x00000FB2
_0809B696:
	str r0, [r2, #0x2c]
	movs r3, #1
	rsbs r3, r3, #0
	ldr r0, [r2, #0x2c]
	str r0, [sp]
	ldr r0, _0809B6CC @ =0x06011000
	str r0, [sp, #4]
	str r3, [sp, #8]
	str r2, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x10
	adds r2, r3, #0
	bl sub_08088584
	bl sub_08087E90
	adds r1, r0, #0
	ldr r0, _0809B6D0 @ =0x0004000A
	orrs r0, r1
	bl sub_08087E2C
	add sp, #0x10
	pop {r0}
	bx r0
	.align 2, 0
_0809B6C8: .4byte 0x00000FB2
_0809B6CC: .4byte 0x06011000
_0809B6D0: .4byte 0x0004000A

	thumb_func_start sub_0809B6D4
sub_0809B6D4: @ 0x0809B6D4
	push {r4, lr}
	adds r4, r0, #0
	bl sub_080886CC
	adds r0, r4, #0
	bl sub_080AAC88
	bl sub_0808EDB0
	movs r0, #0
	bl EndFaceById
	movs r0, #0
	bl SetOnHBlankA
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0809B6F8
sub_0809B6F8: @ 0x0809B6F8
	push {r4, lr}
	sub sp, #0x10
	adds r4, r0, #0
	bl sub_08099C44
	str r0, [r4, #0x2c]
	movs r3, #1
	rsbs r3, r3, #0
	str r0, [sp]
	ldr r0, _0809B734 @ =0x06011000
	str r0, [sp, #4]
	str r3, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x10
	adds r2, r3, #0
	bl sub_08088584
	bl sub_08087E90
	adds r1, r0, #0
	ldr r0, _0809B738 @ =0x0004004E
	orrs r0, r1
	bl sub_08087E2C
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809B734: .4byte 0x06011000
_0809B738: .4byte 0x0004004E

	thumb_func_start sub_0809B73C
sub_0809B73C: @ 0x0809B73C
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_08009E60
	cmp r0, #1
	bne _0809B78A
	bl sub_08099C60
	adds r4, r0, #0
	bl GetGold
	cmp r0, r4
	blt _0809B780
	cmp r4, #0
	ble _0809B772
	rsbs r0, r4, #0
	bl AddGold
	ldr r0, _0809B77C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809B772
	movs r0, #0xb9
	bl m4aSongNumStart
_0809B772:
	adds r0, r5, #0
	movs r1, #0
	bl Proc_Goto
	b _0809B792
	.align 2, 0
_0809B77C: .4byte gPlaySt
_0809B780:
	adds r0, r5, #0
	movs r1, #2
	bl Proc_Goto
	b _0809B792
_0809B78A:
	adds r0, r5, #0
	movs r1, #1
	bl Proc_Goto
_0809B792:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0809B798
sub_0809B798: @ 0x0809B798
	push {r4, lr}
	adds r4, r0, #0
	bl sub_08009E60
	cmp r0, #1
	bne _0809B7AE
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
	b _0809B7B6
_0809B7AE:
	adds r0, r4, #0
	movs r1, #1
	bl Proc_Goto
_0809B7B6:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0809B7BC
sub_0809B7BC: @ 0x0809B7BC
	push {r4, lr}
	sub sp, #0x10
	adds r4, r0, #0
	bl sub_08099CDC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809B7D4
	ldr r0, _0809B7D0 @ =0x00000F61
	b _0809B7D6
	.align 2, 0
_0809B7D0: .4byte 0x00000F61
_0809B7D4:
	ldr r0, _0809B80C @ =0x00000F5F
_0809B7D6:
	str r0, [r4, #0x2c]
	movs r3, #1
	rsbs r3, r3, #0
	ldr r0, [r4, #0x2c]
	str r0, [sp]
	ldr r0, _0809B810 @ =0x06011000
	str r0, [sp, #4]
	str r3, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x10
	adds r2, r3, #0
	bl sub_08088584
	bl sub_08087E90
	adds r1, r0, #0
	ldr r0, _0809B814 @ =0x0004004E
	orrs r0, r1
	bl sub_08087E2C
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809B80C: .4byte 0x00000F5F
_0809B810: .4byte 0x06011000
_0809B814: .4byte 0x0004004E

	thumb_func_start sub_0809B818
sub_0809B818: @ 0x0809B818
	push {lr}
	sub sp, #0x10
	movs r1, #0xf6
	lsls r1, r1, #4
	str r1, [r0, #0x2c]
	movs r3, #1
	rsbs r3, r3, #0
	str r1, [sp]
	ldr r0, _0809B850 @ =0x06011000
	str r0, [sp, #4]
	str r3, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x10
	adds r2, r3, #0
	bl sub_08088584
	bl sub_08087E90
	adds r1, r0, #0
	ldr r0, _0809B854 @ =0x0004004E
	orrs r0, r1
	bl sub_08087E2C
	add sp, #0x10
	pop {r0}
	bx r0
	.align 2, 0
_0809B850: .4byte 0x06011000
_0809B854: .4byte 0x0004004E

	thumb_func_start sub_0809B858
sub_0809B858: @ 0x0809B858
	push {lr}
	sub sp, #4
	movs r2, #0x80
	lsls r2, r2, #1
	movs r0, #0
	str r0, [sp]
	movs r0, #0x5e
	adds r1, r2, #0
	movs r3, #0x20
	bl sub_08003FD4
	add sp, #4
	pop {r0}
	bx r0

	thumb_func_start sub_0809B874
sub_0809B874: @ 0x0809B874
	push {lr}
	sub sp, #4
	movs r2, #0x80
	lsls r2, r2, #1
	movs r0, #0
	str r0, [sp]
	movs r0, #0x49
	adds r1, r2, #0
	movs r3, #0x20
	bl sub_08003FD4
	add sp, #4
	pop {r0}
	bx r0

	thumb_func_start sub_0809B890
sub_0809B890: @ 0x0809B890
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r3, _0809B8C8 @ =0x020229A2
	ldr r5, _0809B8CC @ =gPlaySt
	adds r1, r4, #0
	adds r1, #0x2c
	movs r2, #0xe
_0809B89E:
	ldrh r0, [r3]
	strh r0, [r1]
	adds r3, #2
	adds r1, #2
	subs r2, #1
	cmp r2, #0
	bge _0809B89E
	adds r0, r5, #0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809B8BE
	movs r0, #0xee
	bl m4aSongNumStart
_0809B8BE:
	movs r0, #0
	strh r0, [r4, #0x2a]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809B8C8: .4byte 0x020229A2
_0809B8CC: .4byte gPlaySt

	thumb_func_start sub_0809B8D0
sub_0809B8D0: @ 0x0809B8D0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r6, r0, #0
	ldr r0, _0809B964 @ =0x020229A2
	mov ip, r0
	ldrh r0, [r6, #0x2a]
	adds r0, #1
	strh r0, [r6, #0x2a]
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x11
	movs r5, #0
	movs r7, #0x1f
	movs r0, #0xf8
	lsls r0, r0, #2
	mov sb, r0
	movs r0, #0xf8
	lsls r0, r0, #7
	mov r8, r0
_0809B8F8:
	lsls r1, r5, #1
	adds r0, r6, #0
	adds r0, #0x2c
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r0, #0x1f
	ands r0, r1
	adds r3, r0, r4
	mov r0, sb
	ands r0, r1
	lsrs r0, r0, #5
	adds r2, r0, r4
	mov r0, r8
	ands r0, r1
	lsrs r0, r0, #0xa
	adds r0, r0, r4
	cmp r3, #0x1f
	ble _0809B91E
	movs r3, #0x1f
_0809B91E:
	cmp r2, #0x1f
	ble _0809B924
	movs r2, #0x1f
_0809B924:
	cmp r0, #0x1f
	ble _0809B92A
	movs r0, #0x1f
_0809B92A:
	ands r3, r7
	ands r2, r7
	lsls r1, r2, #5
	adds r1, r3, r1
	ands r0, r7
	lsls r0, r0, #0xa
	adds r1, r1, r0
	mov r0, ip
	strh r1, [r0]
	movs r0, #2
	add ip, r0
	adds r5, #1
	cmp r5, #0xe
	ble _0809B8F8
	bl EnablePalSync
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x10
	bne _0809B956
	adds r0, r6, #0
	bl Proc_Break
_0809B956:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809B964: .4byte 0x020229A2

	thumb_func_start sub_0809B968
sub_0809B968: @ 0x0809B968
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r6, r0, #0
	ldr r0, _0809B9FC @ =0x020229A2
	mov ip, r0
	ldrh r0, [r6, #0x2a]
	subs r0, #1
	strh r0, [r6, #0x2a]
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x11
	movs r5, #0
	movs r7, #0x1f
	movs r0, #0xf8
	lsls r0, r0, #2
	mov sb, r0
	movs r0, #0xf8
	lsls r0, r0, #7
	mov r8, r0
_0809B990:
	lsls r1, r5, #1
	adds r0, r6, #0
	adds r0, #0x2c
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r0, #0x1f
	ands r0, r1
	adds r3, r0, r4
	mov r0, sb
	ands r0, r1
	lsrs r0, r0, #5
	adds r2, r0, r4
	mov r0, r8
	ands r0, r1
	lsrs r0, r0, #0xa
	adds r0, r0, r4
	cmp r3, #0x1f
	ble _0809B9B6
	movs r3, #0x1f
_0809B9B6:
	cmp r2, #0x1f
	ble _0809B9BC
	movs r2, #0x1f
_0809B9BC:
	cmp r0, #0x1f
	ble _0809B9C2
	movs r0, #0x1f
_0809B9C2:
	ands r3, r7
	ands r2, r7
	lsls r1, r2, #5
	adds r1, r3, r1
	ands r0, r7
	lsls r0, r0, #0xa
	adds r1, r1, r0
	mov r0, ip
	strh r1, [r0]
	movs r0, #2
	add ip, r0
	adds r5, #1
	cmp r5, #0xe
	ble _0809B990
	bl EnablePalSync
	ldrh r0, [r6, #0x2a]
	cmp r0, #0
	bne _0809B9EE
	adds r0, r6, #0
	bl Proc_Break
_0809B9EE:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809B9FC: .4byte 0x020229A2

	thumb_func_start sub_0809BA00
sub_0809BA00: @ 0x0809BA00
	push {lr}
	adds r1, r0, #0
	ldr r0, _0809BA10 @ =0x08D8DCD4
	bl Proc_StartBlocking
	pop {r0}
	bx r0
	.align 2, 0
_0809BA10: .4byte 0x08D8DCD4

	thumb_func_start sub_0809BA14
sub_0809BA14: @ 0x0809BA14
	ldr r0, _0809BA1C @ =0x02012BF8
	ldr r0, [r0]
	bx lr
	.align 2, 0
_0809BA1C: .4byte 0x02012BF8

	thumb_func_start sub_0809BA20
sub_0809BA20: @ 0x0809BA20
	adds r1, r0, #0
	ldr r0, _0809BA30 @ =0x02012BF8
	ldr r0, [r0]
	subs r0, #1
	cmp r1, r0
	bge _0809BA34
	adds r0, r1, #1
	b _0809BA36
	.align 2, 0
_0809BA30: .4byte 0x02012BF8
_0809BA34:
	movs r0, #0
_0809BA36:
	bx lr

	thumb_func_start sub_0809BA38
sub_0809BA38: @ 0x0809BA38
	cmp r0, #0
	bne _0809BA40
	ldr r0, _0809BA44 @ =0x02012BF8
	ldr r0, [r0]
_0809BA40:
	subs r0, #1
	bx lr
	.align 2, 0
_0809BA44: .4byte 0x02012BF8

	thumb_func_start sub_0809BA48
sub_0809BA48: @ 0x0809BA48
	ldr r2, _0809BA5C @ =0x08D8DD0C
	ldr r3, [r2]
	lsls r2, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #3
	adds r2, r2, r3
	adds r2, #2
	adds r2, r2, r1
	ldrb r0, [r2]
	bx lr
	.align 2, 0
_0809BA5C: .4byte 0x08D8DD0C

	thumb_func_start sub_0809BA60
sub_0809BA60: @ 0x0809BA60
	ldr r2, _0809BA74 @ =0x08D8DD0C
	ldr r3, [r2]
	lsls r2, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #3
	adds r2, r2, r3
	adds r2, #9
	adds r2, r2, r1
	ldrb r0, [r2]
	bx lr
	.align 2, 0
_0809BA74: .4byte 0x08D8DD0C

	thumb_func_start sub_0809BA78
sub_0809BA78: @ 0x0809BA78
	ldr r2, _0809BA90 @ =0x08D8DD0C
	ldr r3, [r2]
	lsls r2, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #3
	adds r2, r2, r3
	adds r2, #0x10
	adds r2, r2, r1
	movs r0, #0
	ldrsb r0, [r2, r0]
	bx lr
	.align 2, 0
_0809BA90: .4byte 0x08D8DD0C

	thumb_func_start sub_0809BA94
sub_0809BA94: @ 0x0809BA94
	push {r4, r5, lr}
	adds r5, r1, #0
	ldr r4, _0809BAB4 @ =0x08C4C158
	bl sub_0809BAB8
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r4, #0x2c
	adds r0, r0, r4
	ldr r0, [r0]
	adds r0, r0, r5
	ldrb r0, [r0]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0809BAB4: .4byte 0x08C4C158

	thumb_func_start sub_0809BAB8
sub_0809BAB8: @ 0x0809BAB8
	ldr r1, _0809BAC8 @ =0x08D8DD0C
	ldr r2, [r1]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrb r0, [r1]
	bx lr
	.align 2, 0
_0809BAC8: .4byte 0x08D8DD0C

	thumb_func_start sub_0809BACC
sub_0809BACC: @ 0x0809BACC
	ldr r1, _0809BADC @ =0x08D8DD0C
	ldr r2, [r1]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrb r0, [r1, #1]
	bx lr
	.align 2, 0
_0809BADC: .4byte 0x08D8DD0C

	thumb_func_start sub_0809BAE0
sub_0809BAE0: @ 0x0809BAE0
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #1
_0809BAE6:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _0809BB14
	ldr r3, [r2]
	cmp r3, #0
	beq _0809BB14
	ldr r0, [r2, #0xc]
	ldr r1, _0809BB10 @ =0x00010004
	ands r0, r1
	cmp r0, #0
	bne _0809BB14
	ldrb r0, [r3, #4]
	cmp r0, r5
	bne _0809BB14
	ldr r0, [r2, #4]
	ldrb r0, [r0, #4]
	b _0809BB26
	.align 2, 0
_0809BB10: .4byte 0x00010004
_0809BB14:
	adds r4, #1
	cmp r4, #0x3f
	ble _0809BAE6
	ldr r2, _0809BB2C @ =0x08C4C158
	subs r1, r5, #1
	movs r0, #0x34
	muls r0, r1, r0
	adds r0, r0, r2
	ldrb r0, [r0, #5]
_0809BB26:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0809BB2C: .4byte 0x08C4C158

	thumb_func_start sub_0809BB30
sub_0809BB30: @ 0x0809BB30
	adds r2, r0, #0
	ldr r1, _0809BB38 @ =0x08D67934
	b _0809BB4E
	.align 2, 0
_0809BB38: .4byte 0x08D67934
_0809BB3C:
	ldrb r0, [r1]
	cmp r0, r2
	beq _0809BB48
	ldrb r0, [r1, #1]
	cmp r0, r2
	bne _0809BB4C
_0809BB48:
	movs r0, #1
	b _0809BB56
_0809BB4C:
	adds r1, #0x14
_0809BB4E:
	ldrb r0, [r1]
	cmp r0, #0
	bne _0809BB3C
	movs r0, #0
_0809BB56:
	bx lr

	thumb_func_start sub_0809BB58
sub_0809BB58: @ 0x0809BB58
	push {r4, r5, r6, lr}
	ldr r6, _0809BB60 @ =0x08D67934
	b _0809BB8C
	.align 2, 0
_0809BB60: .4byte 0x08D67934
_0809BB64:
	ldrb r0, [r6]
	movs r1, #0
	bl sub_0809F908
	ldrb r0, [r6, #1]
	movs r1, #0
	bl sub_0809F908
	ldrb r4, [r6]
	ldrb r5, [r6, #1]
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_0809F5FC
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_0809F88C
	adds r6, #0x14
_0809BB8C:
	ldrb r0, [r6]
	cmp r0, #0
	bne _0809BB64
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_0809BB98
sub_0809BB98: @ 0x0809BB98
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x90
	adds r4, r0, #0
	mov r1, sp
	movs r0, #0
	strh r0, [r1]
	ldr r7, _0809BD18 @ =0x08D8DD0C
	ldr r1, [r7]
	ldr r2, _0809BD1C @ =0x01000600
	mov r0, sp
	bl CpuSet
	ldr r5, _0809BD20 @ =0x02012BF8
	movs r1, #0
	str r1, [r5]
	adds r4, #0x42
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bne _0809BBCA
	b _0809BD30
_0809BBCA:
	add r0, sp, #0x24
	strh r1, [r0]
	add r1, sp, #4
	ldr r2, _0809BD24 @ =0x01000010
	bl CpuSet
	movs r4, #1
_0809BBD8:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _0809BC08
	ldr r2, [r0]
	cmp r2, #0
	beq _0809BC08
	ldr r0, [r0, #0xc]
	ldr r1, _0809BD28 @ =0x00010004
	ands r0, r1
	cmp r0, #0
	bne _0809BC08
	ldrb r1, [r2, #4]
	lsrs r2, r1, #5
	lsls r2, r2, #2
	add r2, sp
	movs r0, #0x1f
	ands r0, r1
	movs r1, #1
	lsls r1, r0
	ldr r0, [r2, #4]
	orrs r0, r1
	str r0, [r2, #4]
_0809BC08:
	adds r4, #1
	cmp r4, #0x3f
	ble _0809BBD8
	movs r4, #1
	ldr r0, _0809BD20 @ =0x02012BF8
	mov sl, r0
_0809BC14:
	adds r0, r4, #0
	bl GetUnit
	adds r5, r0, #0
	adds r4, #1
	str r4, [sp, #0x8c]
	cmp r5, #0
	beq _0809BD0E
	ldr r2, [r5]
	cmp r2, #0
	beq _0809BD0E
	ldr r0, [r5, #0xc]
	ldr r1, _0809BD28 @ =0x00010004
	ands r0, r1
	cmp r0, #0
	bne _0809BD0E
	ldrb r0, [r2, #4]
	bl sub_0809CEA8
	cmp r0, #0
	beq _0809BD0E
	mov r0, sl
	ldr r1, [r0]
	ldr r0, _0809BD18 @ =0x08D8DD0C
	ldr r2, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldr r1, [r5]
	ldrb r1, [r1, #4]
	strb r1, [r0]
	mov r0, sl
	ldr r1, [r0]
	ldr r0, _0809BD18 @ =0x08D8DD0C
	ldr r2, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldr r1, [r5, #4]
	ldrb r1, [r1, #4]
	strb r1, [r0, #1]
	movs r6, #0
	ldr r0, [r5]
	ldrb r1, [r0, #4]
	subs r1, #1
	movs r0, #0x34
	muls r0, r1, r0
	ldr r1, _0809BD2C @ =0x08C4C184
	adds r0, r0, r1
	ldr r0, [r0]
	ldrb r0, [r0, #0x15]
	cmp r6, r0
	bge _0809BD06
	ldr r7, _0809BD20 @ =0x02012BF8
	ldr r0, _0809BD18 @ =0x08D8DD0C
	mov r8, r0
_0809BC88:
	ldr r0, [r7]
	adds r1, r6, #0
	bl sub_0809BA94
	adds r4, r0, #0
	adds r0, r5, #0
	adds r1, r6, #0
	bl sub_08026B20
	ldr r2, [r7]
	mov r1, r8
	ldr r3, [r1]
	lsls r1, r2, #1
	adds r1, r1, r2
	lsls r1, r1, #3
	adds r1, r1, r3
	adds r1, #2
	adds r1, r1, r6
	strb r0, [r1]
	adds r0, r4, #0
	bl sub_0809BAE0
	ldr r2, [r7]
	mov r1, r8
	ldr r3, [r1]
	lsls r1, r2, #1
	adds r1, r1, r2
	lsls r1, r1, #3
	adds r1, r1, r3
	adds r1, #9
	adds r1, r1, r6
	strb r0, [r1]
	ldr r0, [r7]
	mov r1, r8
	ldr r2, [r1]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r2
	adds r1, #0x10
	add r1, sb
	asrs r0, r4, #5
	lsls r0, r0, #2
	add r0, sp
	movs r2, #0x1f
	ands r2, r4
	ldr r0, [r0, #4]
	lsrs r0, r2
	movs r2, #1
	ands r0, r2
	strb r0, [r1]
	adds r6, #1
	ldr r0, [r5]
	ldrb r1, [r0, #4]
	subs r1, #1
	movs r0, #0x34
	muls r0, r1, r0
	ldr r1, _0809BD2C @ =0x08C4C184
	adds r0, r0, r1
	ldr r0, [r0]
	ldrb r0, [r0, #0x15]
	cmp r6, r0
	blt _0809BC88
_0809BD06:
	mov r1, sl
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
_0809BD0E:
	ldr r4, [sp, #0x8c]
	cmp r4, #0x3f
	bgt _0809BD16
	b _0809BC14
_0809BD16:
	b _0809BE06
	.align 2, 0
_0809BD18: .4byte 0x08D8DD0C
_0809BD1C: .4byte 0x01000600
_0809BD20: .4byte 0x02012BF8
_0809BD24: .4byte 0x01000010
_0809BD28: .4byte 0x00010004
_0809BD2C: .4byte 0x08C4C184
_0809BD30:
	add r4, sp, #0x28
	adds r0, r4, #0
	bl ReadGlobalSaveInfo
	ldr r0, _0809BDA8 @ =0x00000569
	bl DecodeMsg
	bl sub_0802EBB8
	movs r6, #0
	add r0, sp, #0x28
	mov sl, r0
	ldr r1, _0809BDAC @ =0x08C4C158
	mov r8, r1
_0809BD4C:
	adds r0, r6, #0
	mov r1, sl
	bl sub_0809F950
	lsls r0, r0, #0x18
	adds r4, r6, #1
	cmp r0, #0
	beq _0809BE00
	adds r0, r6, #0
	bl sub_0809CEA8
	cmp r0, #0
	beq _0809BE00
	ldr r1, [r5]
	ldr r2, [r7]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	strb r6, [r0]
	ldr r0, [r5]
	ldr r2, [r7]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r2
	subs r2, r6, #1
	movs r0, #0x34
	muls r0, r2, r0
	add r0, r8
	ldrb r0, [r0, #5]
	strb r0, [r1, #1]
	ldr r1, [r5]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	ldr r1, [r7]
	adds r1, r1, r0
	adds r1, #2
	adds r0, r6, #0
	mov r2, sl
	bl sub_0809F770
	movs r0, #0
	mov sb, r0
	b _0809BDF0
	.align 2, 0
_0809BDA8: .4byte 0x00000569
_0809BDAC: .4byte 0x08C4C158
_0809BDB0:
	ldr r0, [r5]
	mov r1, sb
	bl sub_0809BA94
	ldr r1, [r5]
	ldr r3, [r7]
	lsls r2, r1, #1
	adds r2, r2, r1
	lsls r2, r2, #3
	adds r2, r2, r3
	adds r2, #9
	add r2, sb
	subs r3, r0, #1
	movs r1, #0x34
	muls r1, r3, r1
	add r1, r8
	ldrb r1, [r1, #5]
	strb r1, [r2]
	add r1, sp, #0x28
	bl sub_0809F950
	ldr r2, [r5]
	ldr r3, [r7]
	lsls r1, r2, #1
	adds r1, r1, r2
	lsls r1, r1, #3
	adds r1, r1, r3
	adds r1, #0x10
	add r1, sb
	strb r0, [r1]
	movs r1, #1
	add sb, r1
_0809BDF0:
	adds r0, r6, #0
	bl sub_0809CEA8
	cmp sb, r0
	blt _0809BDB0
	ldr r0, [r5]
	adds r0, #1
	str r0, [r5]
_0809BE00:
	adds r6, r4, #0
	cmp r6, #0xff
	ble _0809BD4C
_0809BE06:
	add sp, #0x90
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0809BE18
sub_0809BE18: @ 0x0809BE18
	push {r4, r5, lr}
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0809BE4C
	movs r4, #1
_0809BE28:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0809BE44
	ldr r0, [r1]
	cmp r0, #0
	beq _0809BE44
	adds r0, r1, #0
	bl GetUnitSMSId
	bl sub_08025278
_0809BE44:
	adds r4, #1
	cmp r4, #0x3f
	ble _0809BE28
	b _0809BE74
_0809BE4C:
	movs r4, #0
	ldr r0, _0809BE80 @ =0x02012BF8
	ldr r0, [r0]
	cmp r4, r0
	bge _0809BE74
	movs r5, #0
_0809BE58:
	ldr r0, _0809BE84 @ =0x08D8DD0C
	ldr r0, [r0]
	adds r0, r5, r0
	ldrb r0, [r0, #1]
	bl GetClassSMSId
	bl sub_08025278
	adds r5, #0x18
	adds r4, #1
	ldr r0, _0809BE80 @ =0x02012BF8
	ldr r0, [r0]
	cmp r4, r0
	blt _0809BE58
_0809BE74:
	bl sub_08025A0C
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809BE80: .4byte 0x02012BF8
_0809BE84: .4byte 0x08D8DD0C

	thumb_func_start sub_0809BE88
sub_0809BE88: @ 0x0809BE88
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r6, #0
	movs r4, #0
	ldr r7, _0809BE94 @ =0x08C4C184
	b _0809BEA4
	.align 2, 0
_0809BE94: .4byte 0x08C4C184
_0809BE98:
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_0809BA48
	adds r6, r6, r0
	adds r4, #1
_0809BEA4:
	adds r0, r5, #0
	bl sub_0809BAB8
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r0, r0, r7
	ldr r0, [r0]
	ldrb r0, [r0, #0x15]
	cmp r4, r0
	blt _0809BE98
	adds r0, r6, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0809BEC4
sub_0809BEC4: @ 0x0809BEC4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r6, r1, #0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809BEE0
	adds r0, r6, #0
	bl sub_0809BE88
	cmp r0, #5
	beq _0809BF22
	b _0809BF28
_0809BEE0:
	movs r0, #0
	mov r8, r0
	adds r0, r6, #0
	bl sub_0809BE88
	mov sb, r0
	adds r0, r6, #0
	bl sub_0809BAB8
	bl sub_0809CEA8
	adds r7, r0, #0
	movs r5, #0
	cmp r8, r7
	bge _0809BF1E
_0809BEFE:
	adds r0, r6, #0
	bl sub_0809BAB8
	adds r4, r0, #0
	adds r0, r6, #0
	adds r1, r5, #0
	bl sub_0809BA94
	adds r1, r0, #0
	adds r0, r4, #0
	bl sub_0809F5FC
	add r8, r0
	adds r5, #1
	cmp r5, r7
	blt _0809BEFE
_0809BF1E:
	cmp r8, sb
	bne _0809BF26
_0809BF22:
	movs r0, #2
	b _0809BF32
_0809BF26:
	mov r0, sb
_0809BF28:
	cmp r0, #0
	beq _0809BF30
	movs r0, #1
	b _0809BF32
_0809BF30:
	movs r0, #0
_0809BF32:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0809BF40
sub_0809BF40: @ 0x0809BF40
	push {r4, r5, lr}
	ldr r4, _0809BFA8 @ =0x02012A90
	bl sub_0809F6CC
	adds r5, r0, #0
	adds r4, #8
	adds r0, r4, #0
	bl ClearText
	movs r2, #0
	cmp r5, #0x64
	bne _0809BF5A
	movs r2, #4
_0809BF5A:
	ldr r3, _0809BFAC @ =0x0842D1FC
	adds r0, r4, #0
	movs r1, #0
	bl Text_InsertDrawString
	adds r0, r4, #0
	movs r1, #0x30
	bl Text_SetCursor
	movs r1, #2
	cmp r5, #0x64
	bne _0809BF74
	movs r1, #4
_0809BF74:
	adds r0, r4, #0
	bl Text_SetColor
	adds r0, r4, #0
	adds r1, r5, #0
	bl Text_DrawNumberOrBlank
	movs r2, #0
	cmp r5, #0x64
	bne _0809BF8A
	movs r2, #4
_0809BF8A:
	ldr r3, _0809BFB0 @ =0x0842D204
	adds r0, r4, #0
	movs r1, #0x38
	bl Text_InsertDrawString
	ldr r1, _0809BFB4 @ =0x02023108
	adds r0, r4, #0
	bl PutText
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809BFA8: .4byte 0x02012A90
_0809BFAC: .4byte 0x0842D1FC
_0809BFB0: .4byte 0x0842D204
_0809BFB4: .4byte 0x02023108

	thumb_func_start sub_0809BFB8
sub_0809BFB8: @ 0x0809BFB8
	movs r1, #0
	str r1, [r0, #0x2c]
	adds r2, r0, #0
	adds r2, #0x40
	strb r1, [r2]
	str r1, [r0, #0x34]
	str r1, [r0, #0x38]
	subs r1, #1
	str r1, [r0, #0x3c]
	bx lr

	thumb_func_start sub_0809BFCC
sub_0809BFCC: @ 0x0809BFCC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	mov r8, r0
	bl sub_0809BA14
	adds r7, r0, #0
	movs r6, #0
	cmp r6, r7
	bge _0809C026
_0809BFE2:
	adds r0, r6, #0
	movs r1, #3
	bl __divsi3
	lsls r0, r0, #4
	mov r2, r8
	ldr r1, [r2, #0x34]
	subs r1, #0x4c
	subs r5, r0, r1
	adds r0, r6, #0
	movs r1, #3
	bl __modsi3
	lsls r0, r0, #6
	adds r4, r0, #0
	adds r4, #0x18
	adds r0, r5, #0
	subs r0, #0x4c
	cmp r0, #0x30
	bhi _0809C020
	adds r0, r6, #0
	bl sub_0809BACC
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #0xc8
	lsls r3, r3, #8
	bl sub_08026628
_0809C020:
	adds r6, #1
	cmp r6, r7
	blt _0809BFE2
_0809C026:
	bl sub_080259A4
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0809C038
sub_0809C038: @ 0x0809C038
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x3c]
	movs r1, #1
	rsbs r1, r1, #0
	cmp r0, r1
	beq _0809C0C0
	str r0, [r4, #0x38]
	str r1, [r4, #0x3c]
	movs r1, #3
	bl __divsi3
	adds r1, r0, #0
	ldr r0, [r4, #0x34]
	cmp r0, #0
	bge _0809C05A
	adds r0, #0xf
_0809C05A:
	asrs r0, r0, #4
	subs r0, r1, r0
	lsls r0, r0, #4
	adds r0, #0x4c
	cmp r0, #0x4c
	bgt _0809C074
	cmp r1, #0
	bne _0809C06E
	str r1, [r4, #0x34]
	b _0809C074
_0809C06E:
	subs r0, r1, #1
	lsls r0, r0, #4
	str r0, [r4, #0x34]
_0809C074:
	ldr r0, [r4, #0x38]
	movs r1, #3
	bl __divsi3
	adds r5, r0, #0
	ldr r0, [r4, #0x34]
	cmp r0, #0
	bge _0809C086
	adds r0, #0xf
_0809C086:
	asrs r0, r0, #4
	subs r0, r5, r0
	lsls r0, r0, #4
	adds r0, #0x4c
	cmp r0, #0x7b
	ble _0809C0C0
	bl sub_0809BA14
	subs r0, #1
	movs r1, #3
	bl __divsi3
	cmp r5, r0
	bne _0809C0B2
	bl sub_0809BA14
	subs r0, #1
	movs r1, #3
	bl __divsi3
	subs r0, #3
	b _0809C0BC
_0809C0B2:
	ldr r0, [r4, #0x38]
	movs r1, #3
	bl __divsi3
	subs r0, #2
_0809C0BC:
	lsls r0, r0, #4
	str r0, [r4, #0x34]
_0809C0C0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0809C0C8
sub_0809C0C8: @ 0x0809C0C8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r4, _0809C2F8 @ =gDispIo
	movs r0, #8
	rsbs r0, r0, #0
	ldrb r1, [r4]
	ands r0, r1
	strb r0, [r4]
	movs r0, #0
	bl InitBgs
	movs r0, #0
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r4, #0xc]
	ands r0, r2
	strb r0, [r4, #0xc]
	movs r2, #3
	ldrb r0, [r4, #0x10]
	orrs r0, r2
	strb r0, [r4, #0x10]
	ldrb r5, [r4, #0x14]
	ands r1, r5
	movs r0, #1
	orrs r1, r0
	strb r1, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	orrs r2, r0
	strb r2, [r4, #0x18]
	bl sub_080069C4
	bl ResetText
	bl InitIcons
	bl sub_0804A9F8
	bl sub_08015A0C
	movs r0, #0xe
	bl ApplyIconPalettes
	adds r0, r7, #0
	bl sub_0809C038
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r1, _0809C2FC @ =0x0000FFD8
	ldr r2, [r7, #0x34]
	subs r2, #0x4c
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	bl SetBgOffset
	bl sub_0808ED8C
	bl ApplyUnitSpritePalettes
	bl sub_08025184
	adds r0, r7, #0
	bl sub_0809BE18
	movs r0, #0xa0
	lsls r0, r0, #7
	movs r1, #5
	bl sub_0809228C
	ldr r0, _0809C300 @ =gBg1Tm
	ldr r1, _0809C304 @ =0x0842BF0C
	movs r2, #0xa5
	lsls r2, r2, #7
	bl TmApplyTsa_thm
	movs r0, #7
	bl EnableBgSync
	bl sub_0809BA14
	cmp r0, #0
	beq _0809C1EE
	adds r0, r7, #0
	bl sub_080AA390
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_080AA3B4
	ldr r4, [r7, #0x38]
	adds r0, r4, #0
	movs r1, #3
	bl __modsi3
	lsls r0, r0, #6
	adds r5, r0, #0
	adds r5, #0x14
	adds r0, r4, #0
	movs r1, #3
	bl __divsi3
	ldr r1, [r7, #0x34]
	cmp r1, #0
	bge _0809C1DA
	adds r1, #0xf
_0809C1DA:
	asrs r1, r1, #4
	subs r1, r0, r1
	lsls r1, r1, #4
	adds r1, #0x4c
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r5, #0
	movs r2, #7
	bl sub_080AA3F8
_0809C1EE:
	ldr r1, _0809C2F8 @ =gDispIo
	mov ip, r1
	movs r6, #0x20
	ldrb r0, [r1, #1]
	orrs r0, r6
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r2, ip
	strb r0, [r2, #1]
	mov r0, ip
	adds r0, #0x2d
	movs r5, #0
	mov r8, r5
	mov r1, r8
	strb r1, [r0]
	mov r1, ip
	adds r1, #0x31
	movs r0, #0x4c
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x8c
	strb r0, [r1]
	movs r2, #0x34
	add r2, ip
	mov sb, r2
	movs r0, #1
	ldrb r1, [r2]
	orrs r1, r0
	movs r5, #2
	orrs r1, r5
	movs r2, #4
	orrs r1, r2
	movs r4, #8
	orrs r1, r4
	movs r3, #0x10
	orrs r1, r3
	movs r2, #0x36
	add r2, ip
	mov sl, r2
	ldrb r5, [r2]
	orrs r0, r5
	movs r2, #2
	orrs r0, r2
	subs r2, #7
	ands r0, r2
	orrs r0, r4
	orrs r0, r3
	orrs r1, r6
	mov r5, sb
	strb r1, [r5]
	orrs r0, r6
	mov r1, sl
	strb r0, [r1]
	mov r1, ip
	adds r1, #0x3c
	movs r0, #0xc0
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x44
	mov r5, r8
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
	adds r1, #0xa
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _0809C308 @ =0x0000FFE0
	mov r1, ip
	ldrh r1, [r1, #0x3c]
	ands r0, r1
	movs r1, #0x1f
	orrs r0, r1
	mov r2, ip
	strh r0, [r2, #0x3c]
	adds r6, r7, #0
	adds r6, #0x42
	movs r5, #0x43
	adds r5, r5, r7
	mov r8, r5
	ldr r5, _0809C30C @ =0x020129A8
	movs r4, #0xe
_0809C2A0:
	adds r0, r5, #0
	movs r1, #5
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _0809C2A0
	ldr r4, _0809C310 @ =0x02012A90
	adds r0, r4, #0
	movs r1, #4
	bl InitText
	adds r4, #8
	adds r0, r4, #0
	movs r1, #9
	bl InitText
	bl sub_0809BF40
	movs r3, #0xa
	rsbs r3, r3, #0
	ldr r0, _0809C314 @ =0x00000901
	str r0, [sp]
	movs r0, #0
	movs r1, #0x41
	movs r2, #0x38
	bl sub_08007A5C
	movs r0, #0x28
	movs r1, #0
	movs r2, #1
	bl InitTalk
	ldr r0, _0809C318 @ =0x0841BC84
	ldr r1, _0809C31C @ =0x06017800
	bl sub_08013688
	movs r0, #0
	ldrsb r0, [r6, r0]
	cmp r0, #0
	beq _0809C324
	ldr r0, _0809C320 @ =0x00000F4B
	b _0809C326
	.align 2, 0
_0809C2F8: .4byte gDispIo
_0809C2FC: .4byte 0x0000FFD8
_0809C300: .4byte gBg1Tm
_0809C304: .4byte 0x0842BF0C
_0809C308: .4byte 0x0000FFE0
_0809C30C: .4byte 0x020129A8
_0809C310: .4byte 0x02012A90
_0809C314: .4byte 0x00000901
_0809C318: .4byte 0x0841BC84
_0809C31C: .4byte 0x06017800
_0809C320: .4byte 0x00000F4B
_0809C324:
	ldr r0, _0809C378 @ =0x00000FB5
_0809C326:
	str r0, [r7, #0x30]
	ldr r0, _0809C37C @ =sub_0809BFCC
	adds r1, r7, #0
	bl sub_080AA20C
	adds r0, r7, #0
	bl sub_08090DD0
	movs r0, #0x80
	lsls r0, r0, #2
	movs r1, #4
	bl sub_08090E38
	movs r0, #0xd8
	movs r1, #0x54
	bl sub_08090DE4
	ldrh r4, [r7, #0x34]
	bl sub_0809BA14
	subs r0, #1
	movs r1, #3
	bl __divsi3
	adds r2, r0, #0
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #6
	adds r1, r4, #0
	movs r3, #4
	bl sub_08090E04
	bl sub_08090DA0
	ldr r1, [r7, #0x34]
	cmp r1, #0
	bge _0809C374
	adds r1, #0xf
_0809C374:
	asrs r4, r1, #4
	b _0809C38A
	.align 2, 0
_0809C378: .4byte 0x00000FB5
_0809C37C: .4byte sub_0809BFCC
_0809C380:
	adds r0, r7, #0
	adds r1, r4, #0
	bl sub_0809C838
	adds r4, #1
_0809C38A:
	ldr r0, [r7, #0x34]
	cmp r0, #0
	bge _0809C392
	adds r0, #0xf
_0809C392:
	asrs r0, r0, #4
	adds r0, #4
	cmp r4, r0
	blt _0809C380
	adds r0, r7, #0
	bl sub_08005E88
	movs r0, #0
	mov r1, r8
	strb r0, [r1]
	ldr r0, _0809C3E4 @ =0x06014800
	movs r1, #0xa
	bl sub_08082F74
	ldr r2, _0809C3E8 @ =gDispIo
	movs r0, #1
	ldrb r5, [r2, #1]
	orrs r0, r5
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #0x10
	movs r1, #0x8c
	adds r2, r7, #0
	bl sub_08082D1C
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809C3E4: .4byte 0x06014800
_0809C3E8: .4byte gDispIo

	thumb_func_start sub_0809C3EC
sub_0809C3EC: @ 0x0809C3EC
	push {r4, lr}
	adds r4, r0, #0
	bl sub_080886CC
	adds r0, r4, #0
	bl sub_080AAC88
	bl sub_0808EDB0
	movs r0, #0
	bl EndFaceById
	movs r0, #0
	bl SetOnHBlankA
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0809C410
sub_0809C410: @ 0x0809C410
	push {lr}
	sub sp, #0x10
	ldr r0, [r0, #0x30]
	str r0, [sp]
	ldr r0, _0809C440 @ =0x06013000
	str r0, [sp, #4]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0xa
	movs r1, #7
	movs r2, #0x11
	movs r3, #4
	bl sub_08088584
	ldr r0, _0809C444 @ =0x000008FC
	bl sub_08087E2C
	add sp, #0x10
	pop {r0}
	bx r0
	.align 2, 0
_0809C440: .4byte 0x06013000
_0809C444: .4byte 0x000008FC

	thumb_func_start sub_0809C448
sub_0809C448: @ 0x0809C448
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	bl sub_0809BA14
	cmp r0, #0
	bne _0809C45E
	b _0809C770
_0809C45E:
	adds r0, r6, #0
	adds r0, #0x40
	movs r4, #0
	ldrsb r4, [r0, r4]
	mov r8, r0
	cmp r4, #0
	beq _0809C46E
	b _0809C6FC
_0809C46E:
	ldr r0, [r6, #0x38]
	mov sl, r0
	ldr r3, _0809C4B8 @ =gpKeySt
	ldr r1, [r3]
	ldrh r5, [r1, #6]
	adds r2, r6, #0
	adds r2, #0x41
	movs r0, #4
	strb r0, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ldrh r7, [r1, #4]
	ands r0, r7
	cmp r0, #0
	beq _0809C492
	ldrh r5, [r1, #4]
	movs r0, #8
	strb r0, [r2]
_0809C492:
	adds r0, r6, #0
	adds r0, #0x43
	movs r1, #0
	ldrsb r1, [r0, r1]
	mov sb, r0
	cmp r1, #0
	beq _0809C4BC
	ldr r1, [r3]
	movs r0, #2
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0809C57C
	bl sub_080828A4
	mov r0, sb
	strb r4, [r0]
	b _0809C798
	.align 2, 0
_0809C4B8: .4byte gpKeySt
_0809C4BC:
	ldr r0, [r3]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0809C51C
	ldr r7, [r6, #0x38]
	adds r0, r7, #0
	movs r1, #3
	bl __modsi3
	lsls r0, r0, #6
	adds r0, #0x14
	mov r8, r0
	adds r0, r7, #0
	movs r1, #3
	bl __divsi3
	adds r1, r0, #0
	ldr r0, [r6, #0x34]
	cmp r0, #0
	bge _0809C4EC
	adds r0, #0xf
_0809C4EC:
	asrs r4, r0, #4
	subs r4, r1, r4
	lsls r4, r4, #4
	adds r4, #0x4c
	ldr r5, _0809C518 @ =0x08C4C158
	adds r0, r7, #0
	bl sub_0809BAB8
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r0, r0, r5
	ldrh r2, [r0, #2]
	mov r0, r8
	adds r1, r4, #0
	bl sub_0808266C
	movs r0, #1
	mov r1, sb
	strb r0, [r1]
	b _0809C798
	.align 2, 0
_0809C518: .4byte 0x08C4C158
_0809C51C:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0809C54C
	adds r0, r6, #0
	movs r1, #2
	bl Proc_Goto
	ldr r0, _0809C544 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _0809C53A
	b _0809C798
_0809C53A:
	ldr r0, _0809C548 @ =0x0000038A
	bl m4aSongNumStart
	b _0809C798
	.align 2, 0
_0809C544: .4byte gPlaySt
_0809C548: .4byte 0x0000038A
_0809C54C:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0809C57C
	adds r0, r6, #0
	movs r1, #3
	bl Proc_Goto
	ldr r0, _0809C574 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _0809C56A
	b _0809C798
_0809C56A:
	ldr r0, _0809C578 @ =0x0000038B
	bl m4aSongNumStart
	b _0809C798
	.align 2, 0
_0809C574: .4byte gPlaySt
_0809C578: .4byte 0x0000038B
_0809C57C:
	movs r0, #0x20
	ands r0, r5
	cmp r0, #0
	beq _0809C596
	ldr r4, [r6, #0x38]
	adds r0, r4, #0
	movs r1, #3
	bl __modsi3
	cmp r0, #0
	beq _0809C596
	subs r0, r4, #1
	str r0, [r6, #0x38]
_0809C596:
	movs r0, #0x10
	ands r0, r5
	cmp r0, #0
	beq _0809C5C2
	ldr r4, [r6, #0x38]
	adds r0, r4, #0
	movs r1, #3
	bl __modsi3
	cmp r0, #2
	beq _0809C5C2
	adds r0, r4, #1
	str r0, [r6, #0x38]
	bl sub_0809BA14
	ldr r1, [r6, #0x38]
	cmp r1, r0
	blt _0809C5C2
	bl sub_0809BA14
	subs r0, #1
	str r0, [r6, #0x38]
_0809C5C2:
	movs r0, #0x40
	ands r0, r5
	cmp r0, #0
	beq _0809C5D4
	ldr r0, [r6, #0x38]
	cmp r0, #2
	ble _0809C5D4
	subs r0, #3
	str r0, [r6, #0x38]
_0809C5D4:
	movs r0, #0x80
	ands r5, r0
	cmp r5, #0
	beq _0809C5EE
	ldr r4, [r6, #0x38]
	adds r4, #3
	bl sub_0809BA14
	cmp r4, r0
	bge _0809C5EE
	ldr r0, [r6, #0x38]
	adds r0, #3
	str r0, [r6, #0x38]
_0809C5EE:
	ldr r0, [r6, #0x38]
	cmp sl, r0
	bne _0809C5F6
	b _0809C6F2
_0809C5F6:
	movs r1, #3
	bl __divsi3
	adds r1, r0, #0
	ldr r0, [r6, #0x34]
	cmp r0, #0
	bge _0809C606
	adds r0, #0xf
_0809C606:
	asrs r0, r0, #4
	subs r0, r1, r0
	lsls r4, r0, #4
	movs r0, #0
	mov r7, r8
	strb r0, [r7]
	ldr r0, _0809C648 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809C624
	ldr r0, _0809C64C @ =0x00000385
	bl m4aSongNumStart
_0809C624:
	cmp r4, #0xf
	bgt _0809C650
	ldr r1, [r6, #0x34]
	cmp r1, #0
	beq _0809C650
	cmp r1, #0
	bge _0809C634
	adds r1, #0xf
_0809C634:
	asrs r1, r1, #4
	subs r1, #1
	adds r0, r6, #0
	bl sub_0809C838
	movs r0, #0xff
	mov r1, r8
	strb r0, [r1]
	b _0809C69C
	.align 2, 0
_0809C648: .4byte gPlaySt
_0809C64C: .4byte 0x00000385
_0809C650:
	cmp r4, #0x2f
	ble _0809C682
	bl sub_0809BA14
	subs r0, #1
	movs r1, #3
	bl __divsi3
	subs r0, #3
	lsls r0, r0, #4
	ldr r1, [r6, #0x34]
	cmp r1, r0
	beq _0809C682
	cmp r1, #0
	bge _0809C670
	adds r1, #0xf
_0809C670:
	asrs r1, r1, #4
	adds r1, #4
	adds r0, r6, #0
	bl sub_0809C838
	movs r0, #1
	mov r7, r8
	strb r0, [r7]
	b _0809C69C
_0809C682:
	ldr r0, [r6, #0x38]
	movs r1, #3
	bl __modsi3
	lsls r0, r0, #6
	adds r0, #0x14
	adds r1, r4, #0
	adds r1, #0x4c
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #7
	bl sub_080AA3F8
_0809C69C:
	mov r1, sb
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	beq _0809C6F2
	ldr r7, [r6, #0x38]
	adds r0, r7, #0
	movs r1, #3
	bl __modsi3
	lsls r0, r0, #6
	adds r0, #0x14
	mov sb, r0
	adds r0, r7, #0
	movs r1, #3
	bl __divsi3
	ldr r4, [r6, #0x34]
	cmp r4, #0
	bge _0809C6C6
	adds r4, #0xf
_0809C6C6:
	asrs r4, r4, #4
	subs r4, r0, r4
	lsls r4, r4, #4
	mov r1, r8
	movs r0, #0
	ldrsb r0, [r1, r0]
	lsls r0, r0, #4
	subs r0, #0x4c
	subs r4, r4, r0
	ldr r5, _0809C768 @ =0x08C4C158
	adds r0, r7, #0
	bl sub_0809BAB8
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r0, r0, r5
	ldrh r2, [r0, #2]
	mov r0, sb
	adds r1, r4, #0
	bl sub_0808266C
_0809C6F2:
	mov r7, r8
	movs r0, #0
	ldrsb r0, [r7, r0]
	cmp r0, #0
	beq _0809C798
_0809C6FC:
	mov r2, r8
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	bge _0809C712
	adds r1, r6, #0
	adds r1, #0x41
	ldr r0, [r6, #0x34]
	ldrb r1, [r1]
	subs r0, r0, r1
	str r0, [r6, #0x34]
_0809C712:
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	ble _0809C726
	adds r1, r6, #0
	adds r1, #0x41
	ldr r0, [r6, #0x34]
	ldrb r1, [r1]
	adds r0, r1, r0
	str r0, [r6, #0x34]
_0809C726:
	ldr r1, [r6, #0x34]
	movs r0, #0xf
	ands r1, r0
	cmp r1, #0
	bne _0809C734
	mov r0, r8
	strb r1, [r0]
_0809C734:
	ldrh r4, [r6, #0x34]
	bl sub_0809BA14
	subs r0, #1
	movs r1, #3
	bl __divsi3
	adds r2, r0, #0
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #6
	adds r1, r4, #0
	movs r3, #4
	bl sub_08090E04
	ldr r1, _0809C76C @ =0x0000FFD8
	ldr r2, [r6, #0x34]
	subs r2, #0x4c
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl SetBgOffset
	b _0809C798
	.align 2, 0
_0809C768: .4byte 0x08C4C158
_0809C76C: .4byte 0x0000FFD8
_0809C770:
	ldr r0, _0809C7A8 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #2
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0809C798
	adds r0, r6, #0
	movs r1, #3
	bl Proc_Goto
	ldr r0, _0809C7AC @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809C798
	ldr r0, _0809C7B0 @ =0x0000038B
	bl m4aSongNumStart
_0809C798:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809C7A8: .4byte gpKeySt
_0809C7AC: .4byte gPlaySt
_0809C7B0: .4byte 0x0000038B

	thumb_func_start sub_0809C7B4
sub_0809C7B4: @ 0x0809C7B4
	push {lr}
	adds r2, r0, #0
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r1, [r2, #0x38]
	bl sub_0809E16C
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0809C7CC
sub_0809C7CC: @ 0x0809C7CC
	push {lr}
	sub sp, #4
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0809C7EE
	movs r1, #0x80
	lsls r1, r1, #1
	str r0, [sp]
	movs r0, #0x5a
	movs r2, #0xc0
	movs r3, #0x18
	bl sub_08003FD4
	b _0809C800
_0809C7EE:
	movs r2, #0x80
	lsls r2, r2, #1
	movs r0, #0
	str r0, [sp]
	movs r0, #0x49
	adds r1, r2, #0
	movs r3, #0x18
	bl sub_08003FD4
_0809C800:
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0809C808
sub_0809C808: @ 0x0809C808
	push {lr}
	adds r1, r0, #0
	ldr r0, _0809C81C @ =0x08D8DD68
	bl Proc_StartBlocking
	adds r0, #0x42
	movs r1, #1
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_0809C81C: .4byte 0x08D8DD68

	thumb_func_start sub_0809C820
sub_0809C820: @ 0x0809C820
	push {lr}
	adds r1, r0, #0
	ldr r0, _0809C834 @ =0x08D8DD68
	bl Proc_StartBlocking
	adds r0, #0x42
	movs r1, #0
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_0809C834: .4byte 0x08D8DD68

	thumb_func_start sub_0809C838
sub_0809C838: @ 0x0809C838
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	str r0, [sp]
	mov sl, r1
	movs r0, #0
	bl SetTextFontGlyphs
	movs r0, #0
	bl SetTextFont
	mov r0, sl
	lsls r4, r0, #1
	add r4, sl
	adds r0, r4, #0
	movs r1, #0xf
	bl __modsi3
	lsls r0, r0, #3
	ldr r1, _0809C8AC @ =0x020129A8
	adds r5, r0, r1
	movs r7, #0
	adds r6, r4, #0
_0809C86C:
	adds r0, r5, #0
	bl ClearText
	bl sub_0809BA14
	cmp r6, r0
	bge _0809C902
	adds r0, r7, #0
	movs r1, #3
	bl __modsi3
	lsls r0, r0, #3
	mov r8, r0
	mov r1, sl
	lsls r4, r1, #1
	movs r0, #0x1f
	ands r4, r0
	ldr r0, [sp]
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r6, #0
	bl sub_0809BEC4
	cmp r0, #1
	beq _0809C8BA
	cmp r0, #1
	bgt _0809C8B0
	cmp r0, #0
	beq _0809C8B6
	b _0809C8C4
	.align 2, 0
_0809C8AC: .4byte 0x020129A8
_0809C8B0:
	cmp r0, #2
	beq _0809C8C0
	b _0809C8C4
_0809C8B6:
	movs r0, #1
	b _0809C8C2
_0809C8BA:
	movs r1, #0
	mov sb, r1
	b _0809C8C4
_0809C8C0:
	movs r0, #4
_0809C8C2:
	mov sb, r0
_0809C8C4:
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetCursor
	adds r0, r5, #0
	mov r1, sb
	bl Text_SetColor
	adds r0, r6, #0
	bl sub_0809BAB8
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	ldr r1, _0809C924 @ =0x08C4C158
	adds r0, r0, r1
	ldrh r0, [r0]
	bl DecodeMsg
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_DrawString
	lsls r1, r4, #5
	add r1, r8
	lsls r1, r1, #1
	ldr r0, _0809C928 @ =gBg2Tm
	adds r1, r1, r0
	adds r0, r5, #0
	bl PutText
_0809C902:
	adds r5, #8
	adds r6, #1
	adds r7, #1
	cmp r7, #2
	ble _0809C86C
	movs r0, #4
	bl EnableBgSync
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809C924: .4byte 0x08C4C158
_0809C928: .4byte gBg2Tm

	thumb_func_start sub_0809C92C
sub_0809C92C: @ 0x0809C92C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0809C944 @ =0x08D8DD68
	bl Proc_Find
	cmp r0, #0
	beq _0809C93C
	str r4, [r0, #0x3c]
_0809C93C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809C944: .4byte 0x08D8DD68

	thumb_func_start sub_0809C948
sub_0809C948: @ 0x0809C948
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	bl sub_0809BAB8
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	adds r0, r5, #0
	adds r1, r6, #0
	bl sub_0809BA94
	adds r2, r0, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #0
	adds r1, r4, #0
	mov r3, r8
	bl sub_0807931C
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_0809C980
sub_0809C980: @ 0x0809C980
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	mov r8, r0
	ldr r2, [r0, #0x34]
	subs r1, r2, #1
	lsls r0, r1, #4
	subs r0, r0, r1
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	movs r1, #0x7e
	subs r1, r1, r0
	movs r0, #0x54
	mov sb, r0
	movs r6, #0
	cmp r6, r2
	bge _0809C9DC
	ldr r7, _0809C9EC @ =0x08D8DE48
	adds r5, r1, #2
	adds r4, r1, #0
_0809C9AE:
	ldr r0, _0809C9F0 @ =0x0000EF80
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	mov r2, sb
	adds r3, r7, #0
	bl sub_080068C4
	ldr r0, _0809C9F4 @ =0x0000FF80
	str r0, [sp]
	movs r0, #4
	adds r1, r4, #0
	mov r2, sb
	adds r3, r7, #0
	bl sub_080068C4
	adds r5, #0xf
	adds r4, #0xf
	adds r6, #1
	mov r1, r8
	ldr r0, [r1, #0x34]
	cmp r6, r0
	blt _0809C9AE
_0809C9DC:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809C9EC: .4byte 0x08D8DE48
_0809C9F0: .4byte 0x0000EF80
_0809C9F4: .4byte 0x0000FF80

	thumb_func_start sub_0809C9F8
sub_0809C9F8: @ 0x0809C9F8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	ldr r4, _0809CAE8 @ =0x020129A8
	ldr r0, _0809CAEC @ =0x08190268
	movs r1, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	adds r0, r4, #0
	subs r0, #0x18
	bl SetTextFont
	movs r0, #1
	bl SetTextFontGlyphs
	bl sub_0802EBB0
	adds r1, r4, #0
	adds r4, #8
	ldr r7, _0809CAF0 @ =0x02023D80
	movs r6, #0
	str r6, [sp]
	str r0, [sp, #4]
	adds r0, r1, #0
	adds r1, r7, #0
	movs r2, #4
	movs r3, #0
	bl PutDrawText
	subs r0, r7, #4
	ldr r3, _0809CAF4 @ =Unk_081C8FCC
	ldr r5, _0809CAF8 @ =gPlaySt
	movs r1, #0x2b
	adds r1, r1, r5
	mov r8, r1
	ldrb r2, [r1]
	lsls r1, r2, #0x1c
	lsrs r1, r1, #0x1d
	lsls r1, r1, #2
	lsrs r2, r2, #4
	lsls r2, r2, #4
	adds r1, r1, r2
	adds r1, r1, r3
	ldr r1, [r1]
	adds r1, #0x79
	movs r2, #0xa0
	lsls r2, r2, #7
	bl PutIcon
	mov r2, r8
	ldrb r2, [r2]
	lsls r0, r2, #0x1c
	lsrs r0, r0, #0x1d
	bl sub_080A7AA8
	bl DecodeMsg
	adds r2, r4, #0
	adds r4, #8
	adds r1, r7, #0
	adds r1, #0xf2
	str r6, [sp]
	str r0, [sp, #4]
	adds r0, r2, #0
	movs r2, #4
	movs r3, #0
	bl PutDrawText
	mov r3, r8
	ldrb r3, [r3]
	lsrs r0, r3, #4
	bl sub_080A7AB8
	bl DecodeMsg
	adds r2, r4, #0
	adds r4, #8
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r7, r3
	str r6, [sp]
	str r0, [sp, #4]
	adds r0, r2, #0
	movs r2, #4
	movs r3, #0
	bl PutDrawText
	adds r5, #0x2c
	ldrb r5, [r5]
	lsls r0, r5, #0x1f
	lsrs r0, r0, #0x1f
	bl sub_080A7AC8
	bl DecodeMsg
	movs r2, #0x88
	lsls r2, r2, #1
	adds r1, r7, r2
	str r6, [sp]
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #4
	movs r3, #0
	bl PutDrawText
	movs r0, #0
	bl SetTextFont
	movs r0, #4
	bl EnableBgSync
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809CAE8: .4byte 0x020129A8
_0809CAEC: .4byte 0x08190268
_0809CAF0: .4byte 0x02023D80
_0809CAF4: .4byte Unk_081C8FCC
_0809CAF8: .4byte gPlaySt

	thumb_func_start sub_0809CAFC
sub_0809CAFC: @ 0x0809CAFC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0809CB20 @ =gPlaySt
	ldrh r0, [r0, #0x2c]
	lsls r0, r0, #0x13
	lsrs r0, r0, #0x17
	movs r1, #0xc
	bl __divsi3
	cmp r0, #0xa
	ble _0809CB14
	movs r0, #0xa
_0809CB14:
	str r0, [r4, #0x34]
	movs r0, #0
	str r0, [r4, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809CB20: .4byte gPlaySt

	thumb_func_start sub_0809CB24
sub_0809CB24: @ 0x0809CB24
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	mov r8, r0
	ldr r7, _0809CD20 @ =gDispIo
	movs r0, #8
	rsbs r0, r0, #0
	ldrb r1, [r7]
	ands r0, r1
	strb r0, [r7]
	movs r0, #0
	bl InitBgs
	movs r0, #0
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r7, #0xc]
	ands r0, r2
	strb r0, [r7, #0xc]
	movs r2, #3
	ldrb r0, [r7, #0x10]
	orrs r0, r2
	strb r0, [r7, #0x10]
	ldrb r3, [r7, #0x14]
	ands r1, r3
	strb r1, [r7, #0x14]
	ldrb r6, [r7, #0x18]
	orrs r2, r6
	strb r2, [r7, #0x18]
	bl sub_080069C4
	bl ResetText
	bl InitIcons
	bl sub_08015A0C
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #4
	bl ApplyIconPalettes
	bl sub_0808ED8C
	ldr r0, _0809CD24 @ =0x084364A0
	ldr r1, _0809CD28 @ =0x06000400
	bl sub_08013688
	ldr r0, _0809CD2C @ =0x08436480
	movs r1, #0xf0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0809CD30 @ =gBg1Tm
	ldr r1, _0809CD34 @ =0x08438D90
	ldr r2, _0809CD38 @ =0x0000F020
	bl TmApplyTsa_thm
	movs r0, #7
	bl EnableBgSync
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r7, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r7, #1]
	adds r1, r7, #0
	adds r1, #0x2d
	movs r0, #0x80
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x28
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xe0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x98
	strb r0, [r1]
	movs r2, #0x34
	adds r2, r2, r7
	mov sb, r2
	movs r0, #1
	ldrb r1, [r2]
	orrs r1, r0
	movs r5, #2
	orrs r1, r5
	movs r2, #4
	orrs r1, r2
	movs r4, #8
	orrs r1, r4
	movs r3, #0x10
	orrs r1, r3
	movs r6, #0x36
	ldrb r2, [r6, r7]
	orrs r0, r2
	orrs r0, r5
	movs r2, #5
	rsbs r2, r2, #0
	ands r0, r2
	orrs r0, r4
	orrs r0, r3
	movs r2, #0x20
	orrs r1, r2
	mov r3, sb
	strb r1, [r3]
	orrs r0, r2
	strb r0, [r6, r7]
	adds r1, r7, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r6, [r1]
	ands r0, r6
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x44
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r4, _0809CD3C @ =0x02012990
	ldr r1, _0809CD40 @ =0x06004000
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r4, #0
	movs r3, #0
	bl InitTextFont
	adds r0, r4, #0
	bl SetTextFont
	adds r4, #0x18
	movs r5, #0xb
_0809CC80:
	adds r0, r4, #0
	movs r1, #8
	bl InitText
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge _0809CC80
	ldr r0, _0809CD44 @ =0x02012A90
	movs r1, #8
	bl InitText
	movs r0, #0
	bl SetTextFont
	bl sub_0809C9F8
	movs r3, #0x81
	lsls r3, r3, #1
	movs r4, #0
	str r4, [sp]
	movs r0, #0x32
	movs r1, #0xd8
	movs r2, #0x58
	bl sub_08008DA8
	movs r0, #0
	movs r1, #0
	movs r2, #1
	bl InitTalk
	ldr r0, _0809CD48 @ =0x0842B374
	ldr r1, _0809CD4C @ =0x06017000
	bl sub_08013688
	str r4, [sp, #8]
	ldr r1, _0809CD50 @ =0x02022C20
	ldr r2, _0809CD54 @ =0x01000008
	add r0, sp, #8
	bl CpuFastSet
	ldr r0, _0809CD58 @ =0x0842B4BC
	movs r1, #0xf8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0809CD5C @ =sub_0809C980
	mov r1, r8
	bl sub_080AA20C
	ldr r0, _0809CD60 @ =0x08439190
	ldr r1, _0809CD64 @ =0x06017800
	bl sub_08013688
	ldr r0, _0809CD68 @ =0x0843927C
	movs r1, #0xe8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0809CD6C @ =0x0843929C
	ldr r3, _0809CD70 @ =0x0000DBC0
	str r4, [sp]
	movs r1, #0xd
	str r1, [sp, #4]
	movs r1, #0x86
	movs r2, #0x6c
	bl sub_08012AF0
	ldr r0, _0809CD74 @ =0x00000FB3
	mov r1, r8
	str r0, [r1, #0x30]
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809CD20: .4byte gDispIo
_0809CD24: .4byte 0x084364A0
_0809CD28: .4byte 0x06000400
_0809CD2C: .4byte 0x08436480
_0809CD30: .4byte gBg1Tm
_0809CD34: .4byte 0x08438D90
_0809CD38: .4byte 0x0000F020
_0809CD3C: .4byte 0x02012990
_0809CD40: .4byte 0x06004000
_0809CD44: .4byte 0x02012A90
_0809CD48: .4byte 0x0842B374
_0809CD4C: .4byte 0x06017000
_0809CD50: .4byte 0x02022C20
_0809CD54: .4byte 0x01000008
_0809CD58: .4byte 0x0842B4BC
_0809CD5C: .4byte sub_0809C980
_0809CD60: .4byte 0x08439190
_0809CD64: .4byte 0x06017800
_0809CD68: .4byte 0x0843927C
_0809CD6C: .4byte 0x0843929C
_0809CD70: .4byte 0x0000DBC0
_0809CD74: .4byte 0x00000FB3

	thumb_func_start sub_0809CD78
sub_0809CD78: @ 0x0809CD78
	push {r4, lr}
	adds r4, r0, #0
	bl EndEachSpriteAnimProc
	bl sub_080886CC
	adds r0, r4, #0
	bl sub_080AAC88
	bl sub_0808EDB0
	movs r0, #0
	bl EndFaceById
	movs r0, #0
	bl SetOnHBlankA
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0809CDA0
sub_0809CDA0: @ 0x0809CDA0
	push {lr}
	sub sp, #0x10
	ldr r0, [r0, #0x30]
	str r0, [sp]
	ldr r0, _0809CDCC @ =0x06011000
	str r0, [sp, #4]
	movs r0, #0xa
	str r0, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x13
	movs r2, #0x12
	movs r3, #4
	bl sub_08088584
	movs r0, #0x4e
	bl sub_08087E2C
	add sp, #0x10
	pop {r0}
	bx r0
	.align 2, 0
_0809CDCC: .4byte 0x06011000

	thumb_func_start sub_0809CDD0
sub_0809CDD0: @ 0x0809CDD0
	push {r4, lr}
	adds r4, r0, #0
	bl sub_080893F4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809CDE6
	adds r0, r4, #0
	bl Proc_Break
	b _0809CE0C
_0809CDE6:
	ldr r0, _0809CE14 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #8
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0809CE0C
	adds r0, r4, #0
	bl Proc_Break
	ldr r0, _0809CE18 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809CE0C
	ldr r0, _0809CE1C @ =0x0000038B
	bl m4aSongNumStart
_0809CE0C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809CE14: .4byte gpKeySt
_0809CE18: .4byte gPlaySt
_0809CE1C: .4byte 0x0000038B

	thumb_func_start sub_0809CE20
sub_0809CE20: @ 0x0809CE20
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	movs r0, #0
	ldr r1, _0809CE94 @ =gBg1Tm
	mov sl, r1
	ldr r6, _0809CE98 @ =gBg2Tm
	mov sb, r6
	ldr r7, _0809CE9C @ =0x02012BFC
	ldr r1, _0809CEA0 @ =gBg0Tm
	mov r8, r1
	movs r6, #0x80
	lsls r6, r6, #4
	adds r6, r6, r7
	mov ip, r6
_0809CE44:
	adds r1, r0, #1
	str r1, [sp]
	lsls r0, r0, #1
	ldr r6, _0809CEA4 @ =0x02013BFC
	adds r4, r0, r6
	adds r3, r0, r7
	adds r2, r0, #0
	movs r5, #0x13
_0809CE54:
	mov r1, r8
	adds r0, r2, r1
	ldrh r0, [r0]
	strh r0, [r3]
	mov r6, ip
	adds r1, r2, r6
	mov r6, sl
	adds r0, r2, r6
	ldrh r0, [r0]
	strh r0, [r1]
	mov r1, sb
	adds r0, r2, r1
	ldrh r0, [r0]
	strh r0, [r4]
	adds r4, #0x40
	adds r3, #0x40
	adds r2, #0x40
	subs r5, #1
	cmp r5, #0
	bge _0809CE54
	ldr r0, [sp]
	cmp r0, #0x1d
	ble _0809CE44
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809CE94: .4byte gBg1Tm
_0809CE98: .4byte gBg2Tm
_0809CE9C: .4byte 0x02012BFC
_0809CEA0: .4byte gBg0Tm
_0809CEA4: .4byte 0x02013BFC

	thumb_func_start sub_0809CEA8
sub_0809CEA8: @ 0x0809CEA8
	ldr r2, _0809CEC0 @ =0x08C4C158
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r2, #0x2c
	adds r0, r0, r2
	ldr r0, [r0]
	cmp r0, #0
	beq _0809CEC4
	ldrb r0, [r0, #0x15]
	b _0809CEC6
	.align 2, 0
_0809CEC0: .4byte 0x08C4C158
_0809CEC4:
	movs r0, #0
_0809CEC6:
	bx lr

	thumb_func_start sub_0809CEC8
sub_0809CEC8: @ 0x0809CEC8
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r1, [r6, #0x30]
	adds r1, #0x80
	ldr r5, _0809CFB8 @ =0x000001FF
	ands r1, r5
	ldr r3, _0809CFBC @ =0x08D8DEB0
	movs r4, #0xe0
	lsls r4, r4, #2
	str r4, [sp]
	movs r0, #4
	movs r2, #0xa
	bl sub_080068C4
	ldr r1, [r6, #0x30]
	adds r1, #0xa8
	ands r1, r5
	ldr r3, _0809CFC0 @ =0x08D8DEB8
	str r4, [sp]
	movs r0, #4
	movs r2, #0xa
	bl sub_080068C4
	ldr r1, [r6, #0x30]
	adds r1, #0xc8
	ands r1, r5
	ldr r3, _0809CFC4 @ =0x08D8DEC6
	str r4, [sp]
	movs r0, #4
	movs r2, #0xa
	bl sub_080068C4
	ldr r1, [r6, #0x30]
	adds r1, #0x20
	ands r1, r5
	ldr r3, _0809CFC8 @ =0x08D8DED4
	ldr r4, _0809CFCC @ =0x0000E280
	str r4, [sp]
	movs r0, #4
	movs r2, #0x50
	bl sub_080068C4
	ldr r1, [r6, #0x30]
	adds r1, #0xa0
	ands r1, r5
	ldr r3, _0809CFD0 @ =0x08D8DEE2
	str r4, [sp]
	movs r0, #4
	movs r2, #0x90
	bl sub_080068C4
	ldr r0, [r6, #0x30]
	adds r7, r0, #0
	adds r7, #0x70
	ands r7, r5
	ldr r0, [r6, #0x34]
	adds r2, r0, #0
	adds r2, #0x16
	movs r4, #0
	adds r0, r6, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	cmp r4, r0
	bge _0809CF92
	adds r5, r2, #0
_0809CF4C:
	movs r3, #0xc0
	lsls r3, r3, #8
	adds r0, r6, #0
	adds r0, #0x40
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0
	bne _0809CF60
	movs r3, #0xd0
	lsls r3, r3, #8
_0809CF60:
	cmp r0, #2
	bne _0809CF68
	movs r3, #0xf0
	lsls r3, r3, #8
_0809CF68:
	movs r1, #0xc0
	lsls r1, r1, #4
	adds r0, r1, #0
	orrs r3, r0
	adds r0, r6, #0
	adds r0, #0x4e
	adds r0, r0, r4
	ldrb r0, [r0]
	str r0, [sp]
	movs r0, #0
	adds r1, r7, #0
	adds r2, r5, #0
	bl sub_08026628
	adds r5, #0x10
	adds r4, #1
	adds r0, r6, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	cmp r4, r0
	blt _0809CF4C
_0809CF92:
	ldr r1, [r6, #0x30]
	adds r1, #8
	ldr r0, _0809CFB8 @ =0x000001FF
	ands r1, r0
	ldr r3, _0809CFD4 @ =0x08D8D51C
	movs r0, #0xaf
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r2, #0x90
	bl sub_080068C4
	bl sub_080259A4
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809CFB8: .4byte 0x000001FF
_0809CFBC: .4byte 0x08D8DEB0
_0809CFC0: .4byte 0x08D8DEB8
_0809CFC4: .4byte 0x08D8DEC6
_0809CFC8: .4byte 0x08D8DED4
_0809CFCC: .4byte 0x0000E280
_0809CFD0: .4byte 0x08D8DEE2
_0809CFD4: .4byte 0x08D8D51C

	thumb_func_start sub_0809CFD8
sub_0809CFD8: @ 0x0809CFD8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x24
	mov sb, r0
	mov sl, r1
	add r1, sp, #8
	ldr r0, _0809D06C @ =0x0842D208
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	mov r0, sb
	adds r0, #0x40
	mov r1, sl
	adds r4, r0, r1
	ldrb r0, [r4]
	cmp r0, #0
	bne _0809D074
	movs r5, #0
	lsls r1, r1, #1
	mov r8, r1
	mov r0, r8
	adds r0, #3
	lsls r0, r0, #5
	adds r0, #0x10
	ldr r1, _0809D070 @ =gBg2Tm
	lsls r0, r0, #1
	adds r4, r0, r1
_0809D012:
	adds r0, r4, #0
	movs r1, #1
	movs r2, #0x14
	bl sub_08005FEC
	adds r4, #2
	adds r5, #1
	cmp r5, #4
	ble _0809D012
	movs r5, #0
	mov r0, r8
	adds r0, #3
	lsls r0, r0, #5
	adds r0, #0x16
	ldr r1, _0809D070 @ =gBg2Tm
	lsls r0, r0, #1
	adds r4, r0, r1
_0809D034:
	adds r0, r4, #0
	movs r1, #1
	movs r2, #0x14
	bl sub_08005FEC
	adds r4, #2
	adds r5, #1
	cmp r5, #1
	ble _0809D034
	movs r5, #0
	mov r0, r8
	adds r0, #3
	lsls r0, r0, #5
	adds r0, #0x19
	ldr r1, _0809D070 @ =gBg2Tm
	lsls r0, r0, #1
	adds r4, r0, r1
_0809D056:
	adds r0, r4, #0
	movs r1, #1
	movs r2, #0x14
	bl sub_08005FEC
	adds r4, #2
	adds r5, #1
	cmp r5, #2
	ble _0809D056
	b _0809D1B4
	.align 2, 0
_0809D06C: .4byte 0x0842D208
_0809D070: .4byte gBg2Tm
_0809D074:
	movs r7, #0
	mov r2, sb
	ldr r0, [r2, #0x2c]
	bl sub_0809BAB8
	str r0, [sp, #0x14]
	mov r3, sb
	ldr r0, [r3, #0x2c]
	mov r1, sl
	bl sub_0809BA94
	str r0, [sp, #0x18]
	ldrb r4, [r4]
	cmp r4, #2
	bne _0809D094
	movs r7, #1
_0809D094:
	mov r4, sb
	ldr r0, [r4, #0x2c]
	mov r1, sl
	bl sub_0809BA94
	subs r0, #1
	movs r6, #0x34
	muls r0, r6, r0
	ldr r1, _0809D124 @ =0x08C4C158
	adds r0, r0, r1
	ldrh r0, [r0]
	bl DecodeMsg
	mov r2, sl
	lsls r2, r2, #1
	mov r8, r2
	mov r4, r8
	adds r4, #3
	lsls r3, r4, #5
	str r3, [sp, #0x1c]
	lsls r4, r4, #6
	ldr r5, _0809D128 @ =0x02023C80
	adds r1, r4, r5
	movs r2, #5
	str r2, [sp]
	str r0, [sp, #4]
	movs r0, #0
	adds r2, r7, #0
	movs r3, #0
	bl PutDrawText
	adds r5, #0xc
	adds r4, r4, r5
	mov r1, sb
	ldr r0, [r1, #0x2c]
	mov r1, sl
	bl sub_0809BA94
	subs r0, #1
	muls r0, r6, r0
	ldr r2, _0809D124 @ =0x08C4C158
	adds r0, r0, r2
	ldrb r1, [r0, #9]
	adds r1, #0x79
	movs r2, #0xe0
	lsls r2, r2, #8
	adds r0, r4, #0
	bl PutIcon
	ldr r0, [sp, #0x14]
	ldr r1, [sp, #0x18]
	bl sub_0809F5FC
	cmp r0, #2
	bne _0809D170
	movs r5, #0
	mov r0, sb
	adds r0, #0x47
	mov r3, sl
	adds r6, r0, r3
	ldr r0, [sp, #0x1c]
	adds r0, #0x19
	add r4, sp, #8
	mov sb, r4
	lsls r4, r0, #1
_0809D116:
	movs r7, #1
	ldrb r0, [r6]
	cmp r0, #2
	bne _0809D12C
	movs r7, #4
	b _0809D134
	.align 2, 0
_0809D124: .4byte 0x08C4C158
_0809D128: .4byte 0x02023C80
_0809D12C:
	ldrb r1, [r6]
	cmp r1, r5
	ble _0809D134
	movs r7, #0
_0809D134:
	ldr r3, _0809D16C @ =gBg2Tm
	adds r0, r4, r3
	mov r1, sb
	adds r1, #4
	mov sb, r1
	subs r1, #4
	ldm r1!, {r2}
	adds r1, r7, #0
	str r3, [sp, #0x20]
	bl sub_08005FEC
	adds r4, #2
	adds r5, #1
	ldr r3, [sp, #0x20]
	cmp r5, #1
	ble _0809D116
	mov r0, r8
	adds r0, #3
	lsls r0, r0, #6
	adds r1, r3, #0
	adds r1, #0x36
	adds r0, r0, r1
	movs r1, #1
	movs r2, #0x14
	bl sub_08005FEC
	b _0809D1B4
	.align 2, 0
_0809D16C: .4byte gBg2Tm
_0809D170:
	movs r5, #0
	mov r0, sb
	adds r0, #0x47
	mov r2, sl
	adds r6, r0, r2
	ldr r0, [sp, #0x1c]
	adds r0, #0x19
	add r3, sp, #8
	mov r8, r3
	lsls r4, r0, #1
_0809D184:
	movs r7, #1
	ldrb r0, [r6]
	cmp r0, #3
	bne _0809D190
	movs r7, #4
	b _0809D198
_0809D190:
	ldrb r1, [r6]
	cmp r1, r5
	ble _0809D198
	movs r7, #0
_0809D198:
	ldr r0, _0809D1C4 @ =gBg2Tm
	adds r0, r4, r0
	mov r3, r8
	adds r3, #4
	mov r8, r3
	subs r3, #4
	ldm r3!, {r2}
	adds r1, r7, #0
	bl sub_08005FEC
	adds r4, #2
	adds r5, #1
	cmp r5, #2
	ble _0809D184
_0809D1B4:
	add sp, #0x24
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809D1C4: .4byte gBg2Tm

	thumb_func_start sub_0809D1C8
sub_0809D1C8: @ 0x0809D1C8
	push {r4, r5, r6, lr}
	sub sp, #0x20
	adds r6, r0, #0
	ldr r1, _0809D288 @ =0x06015000
	mov r0, sp
	movs r2, #0xe
	bl InitSpriteTextFont
	ldr r0, _0809D28C @ =0x081901C8
	movs r1, #0xf0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	add r5, sp, #0x18
	adds r0, r5, #0
	bl InitSpriteText
	mov r0, sp
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	adds r0, r5, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	ldr r4, _0809D290 @ =0x08C4C158
	ldr r0, [r6, #0x2c]
	bl sub_0809BAB8
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r0, r0, r4
	ldrh r0, [r0]
	bl DecodeMsg
	adds r4, r0, #0
	movs r0, #0x30
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r5, #0
	movs r2, #0
	adds r3, r4, #0
	bl Text_InsertDrawString
	adds r0, r6, #0
	adds r0, #0x38
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0809D29C
	movs r2, #0
	adds r4, r6, #0
	adds r4, #0x3d
	ldrb r0, [r4]
	cmp r0, #0
	bne _0809D248
	movs r2, #1
_0809D248:
	ldr r3, _0809D294 @ =0x0842D214
	adds r0, r5, #0
	movs r1, #0x30
	bl Text_InsertDrawString
	adds r0, r5, #0
	movs r1, #0x60
	bl Text_SetCursor
	ldrb r0, [r4]
	movs r1, #2
	cmp r0, #0
	bne _0809D264
	movs r1, #1
_0809D264:
	adds r0, r5, #0
	bl Text_SetColor
	ldrb r1, [r4]
	adds r0, r5, #0
	bl Text_DrawNumberOrBlank
	movs r2, #0
	ldrb r0, [r4]
	cmp r0, #0
	bne _0809D27C
	movs r2, #1
_0809D27C:
	ldr r3, _0809D298 @ =0x0842D220
	adds r0, r5, #0
	movs r1, #0x68
	bl Text_InsertDrawString
	b _0809D2E8
	.align 2, 0
_0809D288: .4byte 0x06015000
_0809D28C: .4byte 0x081901C8
_0809D290: .4byte 0x08C4C158
_0809D294: .4byte 0x0842D214
_0809D298: .4byte 0x0842D220
_0809D29C:
	movs r2, #0
	adds r4, r6, #0
	adds r4, #0x3d
	ldrb r0, [r4]
	cmp r0, #0
	bne _0809D2AA
	movs r2, #1
_0809D2AA:
	ldr r3, _0809D328 @ =0x0842D214
	adds r0, r5, #0
	movs r1, #0x30
	bl Text_InsertDrawString
	adds r0, r5, #0
	movs r1, #0x60
	bl Text_SetCursor
	ldrb r0, [r4]
	movs r1, #2
	cmp r0, #0
	bne _0809D2C6
	movs r1, #1
_0809D2C6:
	adds r0, r5, #0
	bl Text_SetColor
	ldrb r1, [r4]
	adds r0, r5, #0
	bl Text_DrawNumberOrBlank
	movs r2, #0
	ldrb r0, [r4]
	cmp r0, #0
	bne _0809D2DE
	movs r2, #1
_0809D2DE:
	ldr r3, _0809D32C @ =0x0842D220
	adds r0, r5, #0
	movs r1, #0x68
	bl Text_InsertDrawString
_0809D2E8:
	ldr r3, _0809D330 @ =0x0842D224
	adds r0, r5, #0
	movs r1, #0x80
	movs r2, #0
	bl Text_InsertDrawString
	adds r0, r5, #0
	bl InitSpriteText
	adds r0, r5, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	ldr r3, _0809D334 @ =0x0842D238
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0
	bl Text_InsertDrawString
	ldr r3, _0809D338 @ =0x0842D254
	adds r0, r5, #0
	movs r1, #0x80
	movs r2, #0
	bl Text_InsertDrawString
	movs r0, #0
	bl SetTextFont
	add sp, #0x20
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809D328: .4byte 0x0842D214
_0809D32C: .4byte 0x0842D220
_0809D330: .4byte 0x0842D224
_0809D334: .4byte 0x0842D238
_0809D338: .4byte 0x0842D254

	thumb_func_start sub_0809D33C
sub_0809D33C: @ 0x0809D33C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	adds r0, #0x38
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0809D3C8
	movs r4, #0
	adds r0, r6, #0
	adds r0, #0x3c
	mov r8, r0
	ldrb r0, [r0]
	cmp r4, r0
	bge _0809D412
	movs r1, #0x40
	adds r1, r1, r6
	mov sl, r1
_0809D368:
	ldr r0, [r6, #0x2c]
	adds r1, r4, #0
	bl sub_0809BA94
	adds r7, r0, #0
	mov r2, sl
	adds r1, r2, r4
	movs r0, #0
	strb r0, [r1]
	movs r5, #1
	adds r4, #1
	mov sb, r4
	adds r4, r1, #0
_0809D382:
	adds r0, r5, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0809D3B6
	ldr r0, [r1]
	cmp r0, #0
	beq _0809D3B6
	ldrb r0, [r0, #4]
	cmp r0, r7
	bne _0809D3B6
	ldr r1, [r1, #0xc]
	movs r0, #0x80
	lsls r0, r0, #9
	ands r0, r1
	cmp r0, #0
	bne _0809D3B6
	movs r0, #4
	ands r1, r0
	cmp r1, #0
	beq _0809D3B2
	movs r0, #2
	b _0809D3B4
_0809D3B2:
	movs r0, #1
_0809D3B4:
	strb r0, [r4]
_0809D3B6:
	adds r5, #1
	cmp r5, #0x3f
	ble _0809D382
	mov r4, sb
	mov r0, r8
	ldrb r0, [r0]
	cmp r4, r0
	blt _0809D368
	b _0809D412
_0809D3C8:
	adds r1, r6, #0
	adds r1, #0x3b
	strb r0, [r1]
	movs r4, #0
	adds r0, r6, #0
	adds r0, #0x3c
	mov r8, r0
	ldrb r2, [r0]
	cmp r4, r2
	bge _0809D412
	adds r7, r1, #0
_0809D3DE:
	adds r0, r6, #0
	adds r0, #0x40
	adds r5, r0, r4
	movs r0, #0
	strb r0, [r5]
	ldr r0, [r6, #0x2c]
	adds r1, r4, #0
	bl sub_0809BA78
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809D408
	movs r0, #1
	strb r0, [r5]
	ldr r0, [r6, #0x2c]
	adds r1, r4, #0
	bl sub_0809BA48
	ldrb r1, [r7]
	adds r0, r1, r0
	strb r0, [r7]
_0809D408:
	adds r4, #1
	mov r2, r8
	ldrb r2, [r2]
	cmp r4, r2
	blt _0809D3DE
_0809D412:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0809D420
sub_0809D420: @ 0x0809D420
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r4, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	cmp r4, r1
	bge _0809D448
	adds r7, r5, #0
	adds r7, #0x47
	adds r6, r0, #0
_0809D434:
	ldr r0, [r5, #0x2c]
	adds r1, r4, #0
	bl sub_0809BA48
	adds r1, r7, r4
	strb r0, [r1]
	adds r4, #1
	ldrb r0, [r6]
	cmp r4, r0
	blt _0809D434
_0809D448:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0809D450
sub_0809D450: @ 0x0809D450
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r4, r0, #0
	adds r0, #0x38
	movs r5, #0
	ldrsb r5, [r0, r5]
	cmp r5, #0
	beq _0809D476
	ldr r0, [r4, #0x2c]
	bl sub_0809BE88
	movs r1, #5
	subs r1, r1, r0
	adds r0, r4, #0
	adds r0, #0x3d
	strb r1, [r0]
	b _0809D4C4
_0809D476:
	ldr r0, [r4, #0x2c]
	bl sub_0809BAB8
	mov sb, r0
	adds r1, r4, #0
	adds r1, #0x3d
	strb r5, [r1]
	movs r5, #0
	adds r0, r4, #0
	adds r0, #0x3c
	mov r8, r1
	adds r7, r0, #0
	ldrb r0, [r7]
	cmp r5, r0
	bge _0809D4B4
	mov r6, r8
_0809D496:
	ldr r0, [r4, #0x2c]
	adds r1, r5, #0
	bl sub_0809BA94
	adds r1, r0, #0
	mov r0, sb
	bl sub_0809F5FC
	ldrb r1, [r6]
	adds r0, r1, r0
	strb r0, [r6]
	adds r5, #1
	ldrb r2, [r7]
	cmp r5, r2
	blt _0809D496
_0809D4B4:
	ldr r0, [r4, #0x2c]
	bl sub_0809BE88
	mov r1, r8
	ldrb r1, [r1]
	subs r0, r1, r0
	mov r2, r8
	strb r0, [r2]
_0809D4C4:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0809D4D0
sub_0809D4D0: @ 0x0809D4D0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	bl sub_08025184
	movs r4, #0
	b _0809D4F8
_0809D4DC:
	ldr r0, [r5, #0x2c]
	adds r1, r4, #0
	bl sub_0809BA60
	adds r1, r5, #0
	adds r1, #0x4e
	adds r1, r1, r4
	strb r0, [r1]
	ldrb r0, [r1]
	bl GetClassSMSId
	bl sub_08025278
	adds r4, #1
_0809D4F8:
	adds r0, r5, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	cmp r4, r0
	blt _0809D4DC
	bl sub_08025A0C
	movs r4, #0
	adds r0, r5, #0
	adds r0, #0x3c
	adds r6, r0, #0
	b _0809D51A
_0809D510:
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_0809CFD8
	adds r4, #1
_0809D51A:
	ldrb r0, [r6]
	cmp r4, r0
	blt _0809D510
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0809D528
sub_0809D528: @ 0x0809D528
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r5, r1, #0
	adds r4, r2, #0
_0809D530:
	cmp r5, #0
	blt _0809D59C
	adds r0, r7, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	subs r0, #1
	cmp r5, r0
	bgt _0809D59C
	adds r1, r7, #0
	adds r1, #0x40
	adds r1, r1, r5
	movs r0, #1
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0809D598
	ldr r0, [r7, #0x2c]
	adds r1, r5, #0
	bl sub_0809BA48
	cmp r0, #0
	ble _0809D598
	adds r6, r7, #0
	adds r6, #0x39
	movs r1, #0xe3
	ldrb r0, [r6]
	ands r1, r0
	movs r2, #7
	adds r0, r5, #0
	ands r0, r2
	lsls r0, r0, #2
	adds r1, r1, r0
	strb r1, [r6]
	movs r4, #3
	ands r4, r1
	ldr r0, [r7, #0x2c]
	adds r1, r5, #0
	bl sub_0809BA48
	cmp r4, r0
	blt _0809D59C
	ldr r0, [r7, #0x2c]
	adds r1, r5, #0
	bl sub_0809BA48
	movs r1, #0xfc
	ldrb r2, [r6]
	ands r1, r2
	subs r0, #1
	adds r1, r1, r0
	strb r1, [r6]
	b _0809D59C
_0809D598:
	adds r5, r5, r4
	b _0809D530
_0809D59C:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0809D5A4
sub_0809D5A4: @ 0x0809D5A4
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	str r0, [r4, #0x30]
	str r0, [r4, #0x34]
	adds r2, r4, #0
	adds r2, #0x39
	movs r0, #0xfc
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0xe3
	ands r0, r1
	strb r0, [r2]
	ldr r0, [r4, #0x2c]
	bl sub_0809BAB8
	bl sub_0809CEA8
	adds r1, r4, #0
	adds r1, #0x3c
	strb r0, [r1]
	adds r0, r4, #0
	bl sub_0809D33C
	adds r0, r4, #0
	bl sub_0809D420
	adds r0, r4, #0
	bl sub_0809D450
	adds r0, r4, #0
	movs r1, #0
	movs r2, #1
	bl sub_0809D528
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0809D5F0
sub_0809D5F0: @ 0x0809D5F0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r3, _0809D644 @ =0x02022BE0
	adds r5, r3, #0
	adds r5, #0x20
	movs r0, #0x1f
	mov r8, r0
	movs r7, #0xf8
	lsls r7, r7, #2
	movs r6, #0xf8
	lsls r6, r6, #7
	movs r4, #0xf
	movs r0, #0x1f
	mov ip, r0
_0809D60E:
	ldrh r2, [r3]
	mov r1, ip
	ands r1, r2
	lsrs r1, r1, #1
	mov r0, r8
	ands r1, r0
	adds r0, r7, #0
	ands r0, r2
	lsrs r0, r0, #1
	ands r0, r7
	adds r1, r1, r0
	adds r0, r6, #0
	ands r0, r2
	lsrs r0, r0, #1
	ands r0, r6
	adds r1, r1, r0
	strh r1, [r5]
	adds r5, #2
	adds r3, #2
	subs r4, #1
	cmp r4, #0
	bge _0809D60E
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809D644: .4byte 0x02022BE0

	thumb_func_start sub_0809D648
sub_0809D648: @ 0x0809D648
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r4, _0809D7CC @ =gDispIo
	movs r0, #8
	rsbs r0, r0, #0
	ldrb r1, [r4]
	ands r0, r1
	strb r0, [r4]
	movs r0, #0
	bl InitBgs
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r4, #0xc]
	ands r0, r2
	movs r3, #1
	orrs r0, r3
	strb r0, [r4, #0xc]
	movs r2, #3
	ldrb r0, [r4, #0x10]
	orrs r0, r2
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r1, r0
	orrs r1, r3
	strb r1, [r4, #0x14]
	ldrb r1, [r4, #0x18]
	orrs r2, r1
	strb r2, [r4, #0x18]
	bl ResetText
	bl InitIcons
	bl sub_0804A9F8
	bl sub_08015A0C
	bl ApplyUnitSpritePalettes
	bl sub_0809D5F0
	movs r0, #0xd
	bl ApplyIconPalettes
	adds r0, r5, #0
	bl sub_08005E88
	adds r0, r5, #0
	adds r0, #0x38
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0809D714
	ldr r2, _0809D7D0 @ =gPlaySt
	adds r2, #0x40
	movs r0, #0x61
	rsbs r0, r0, #0
	ldrb r4, [r2]
	ands r0, r4
	movs r1, #0x20
	orrs r0, r1
	strb r0, [r2]
	adds r0, r5, #0
	bl sub_080AA390
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_080AA3B4
	movs r0, #1
	bl sub_080AA470
	adds r1, r5, #0
	adds r1, #0x3a
	movs r0, #0xff
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x3b
	ldrb r0, [r0]
	cmp r0, #0
	beq _0809D714
	adds r0, r5, #0
	adds r0, #0x39
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	lsls r0, r0, #3
	adds r0, #0xc4
	lsrs r1, r1, #2
	movs r2, #7
	ands r1, r2
	lsls r1, r1, #4
	adds r1, #0x18
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #1
	bl sub_080AA3F8
_0809D714:
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r3, _0809D7CC @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r6, #0
	strb r6, [r0]
	adds r0, #1
	strb r6, [r0]
	adds r0, #1
	strb r6, [r0]
	ldr r0, _0809D7D4 @ =0x0000FFE0
	ldrh r4, [r3, #0x3c]
	ands r0, r4
	ldr r1, _0809D7D8 @ =0x0000E0FF
	ands r0, r1
	movs r4, #0x80
	lsls r4, r4, #4
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	movs r1, #0x21
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r4, [r2]
	ands r0, r4
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x3d
	ldrb r2, [r0]
	ands r1, r2
	strb r1, [r0]
	bl sub_0808ED8C
	movs r0, #0x80
	lsls r0, r0, #7
	movs r1, #5
	bl sub_0809228C
	ldr r0, _0809D7DC @ =gBg1Tm
	ldr r1, _0809D7E0 @ =0x0842C3C0
	movs r2, #0xa4
	lsls r2, r2, #7
	bl TmApplyTsa_thm
	ldr r4, _0809D7E4 @ =0x08C4C158
	ldr r0, [r5, #0x2c]
	bl sub_0809BAB8
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r0, r0, r4
	ldrh r4, [r0, #6]
	adds r0, r4, #0
	bl sub_080070AC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809D7E8
	adds r0, r5, #0
	adds r0, #0x3f
	strb r6, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	movs r2, #0x38
	movs r3, #0
	bl sub_08007A5C
	b _0809D800
	.align 2, 0
_0809D7CC: .4byte gDispIo
_0809D7D0: .4byte gPlaySt
_0809D7D4: .4byte 0x0000FFE0
_0809D7D8: .4byte 0x0000E0FF
_0809D7DC: .4byte gBg1Tm
_0809D7E0: .4byte 0x0842C3C0
_0809D7E4: .4byte 0x08C4C158
_0809D7E8:
	adds r1, r5, #0
	adds r1, #0x3f
	movs r0, #8
	strb r0, [r1]
	adds r0, #0xfc
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	movs r2, #0x38
	movs r3, #8
	bl sub_08007A5C
_0809D800:
	ldr r0, _0809D838 @ =0x0842C874
	ldr r1, _0809D83C @ =0x06017000
	bl sub_08013688
	ldr r0, _0809D840 @ =0x08429658
	ldr r1, _0809D844 @ =0x06017800
	bl sub_08013688
	ldr r0, _0809D848 @ =0x0842971C
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	adds r0, r5, #0
	bl sub_0809D4D0
	adds r0, r5, #0
	bl sub_0809D1C8
	ldr r0, _0809D84C @ =sub_0809CEC8
	adds r1, r5, #0
	bl sub_080AA20C
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809D838: .4byte 0x0842C874
_0809D83C: .4byte 0x06017000
_0809D840: .4byte 0x08429658
_0809D844: .4byte 0x06017800
_0809D848: .4byte 0x0842971C
_0809D84C: .4byte sub_0809CEC8

	thumb_func_start sub_0809D850
sub_0809D850: @ 0x0809D850
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	ldr r0, _0809D884 @ =gpKeySt
	ldr r1, [r0]
	ldrh r3, [r1, #8]
	movs r0, #2
	ands r0, r3
	cmp r0, #0
	beq _0809D890
	ldr r0, _0809D888 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809D878
	ldr r0, _0809D88C @ =0x0000038B
	bl m4aSongNumStart
_0809D878:
	adds r0, r6, #0
	movs r1, #3
	bl Proc_Goto
	b _0809DA00
	.align 2, 0
_0809D884: .4byte gpKeySt
_0809D888: .4byte gPlaySt
_0809D88C: .4byte 0x0000038B
_0809D890:
	ldrh r2, [r1, #6]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r2
	cmp r0, #0
	beq _0809D8A6
	adds r0, r6, #0
	movs r1, #4
	bl Proc_Goto
	b _0809DA00
_0809D8A6:
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r2
	cmp r0, #0
	beq _0809D8BA
	adds r0, r6, #0
	movs r1, #5
	bl Proc_Goto
	b _0809DA00
_0809D8BA:
	adds r0, r6, #0
	adds r0, #0x38
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0809D8CA
	b _0809DA00
_0809D8CA:
	adds r0, r6, #0
	adds r0, #0x3b
	ldrb r0, [r0]
	cmp r0, #0
	bne _0809D8D6
	b _0809D9E4
_0809D8D6:
	adds r1, r6, #0
	adds r1, #0x39
	ldrb r7, [r1]
	movs r0, #1
	ands r0, r3
	adds r5, r1, #0
	cmp r0, #0
	beq _0809D90C
	ldr r0, _0809D904 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809D8F8
	ldr r0, _0809D908 @ =0x0000038A
	bl m4aSongNumStart
_0809D8F8:
	adds r0, r6, #0
	movs r1, #2
	bl Proc_Goto
	b _0809DA00
	.align 2, 0
_0809D904: .4byte gPlaySt
_0809D908: .4byte 0x0000038A
_0809D90C:
	movs r0, #0x20
	ands r0, r2
	cmp r0, #0
	beq _0809D926
	movs r1, #3
	ands r1, r7
	cmp r1, #0
	beq _0809D926
	movs r0, #0xfc
	ands r0, r7
	adds r0, #0xff
	adds r0, r0, r1
	strb r0, [r5]
_0809D926:
	ldr r0, _0809D9D8 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0x10
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _0809D960
	ldrb r1, [r5]
	movs r0, #3
	mov r8, r0
	mov r4, r8
	ands r4, r1
	ldr r0, [r6, #0x2c]
	lsrs r1, r1, #2
	movs r2, #7
	ands r1, r2
	bl sub_0809BA48
	subs r0, #1
	cmp r4, r0
	bge _0809D960
	ldrb r0, [r5]
	movs r1, #0xfc
	ands r1, r0
	adds r1, #1
	mov r2, r8
	ands r2, r0
	adds r1, r1, r2
	strb r1, [r5]
_0809D960:
	ldr r4, _0809D9D8 @ =gpKeySt
	ldr r1, [r4]
	movs r0, #0x40
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _0809D982
	ldrb r0, [r5]
	lsrs r1, r0, #2
	movs r0, #7
	ands r1, r0
	subs r1, #1
	movs r2, #1
	rsbs r2, r2, #0
	adds r0, r6, #0
	bl sub_0809D528
_0809D982:
	ldr r1, [r4]
	movs r0, #0x80
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _0809D9A0
	ldrb r0, [r5]
	lsrs r1, r0, #2
	movs r0, #7
	ands r1, r0
	adds r1, #1
	adds r0, r6, #0
	movs r2, #1
	bl sub_0809D528
_0809D9A0:
	ldrb r1, [r5]
	cmp r7, r1
	beq _0809DA00
	movs r0, #3
	ands r0, r1
	lsls r0, r0, #3
	adds r0, #0xc4
	lsrs r1, r1, #2
	movs r2, #7
	ands r1, r2
	lsls r1, r1, #4
	adds r1, #0x18
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #1
	bl sub_080AA3F8
	ldr r0, _0809D9DC @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809DA00
	ldr r0, _0809D9E0 @ =0x00000385
	bl m4aSongNumStart
	b _0809DA00
	.align 2, 0
_0809D9D8: .4byte gpKeySt
_0809D9DC: .4byte gPlaySt
_0809D9E0: .4byte 0x00000385
_0809D9E4:
	movs r0, #1
	ands r0, r3
	cmp r0, #0
	beq _0809DA00
	ldr r0, _0809DA0C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809DA00
	movs r0, #0xe3
	lsls r0, r0, #2
	bl m4aSongNumStart
_0809DA00:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809DA0C: .4byte gPlaySt

	thumb_func_start sub_0809DA10
sub_0809DA10: @ 0x0809DA10
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r0, #0
	bl InitBgs
	ldr r3, _0809DAC8 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0xc0
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x46
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _0809DACC @ =0x0000FFE0
	ldrh r1, [r3, #0x3c]
	ands r0, r1
	movs r1, #0x1f
	orrs r0, r1
	ldr r1, _0809DAD0 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #2
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	bl sub_080069C4
	bl ResetText
	bl InitIcons
	bl sub_0804A9F8
	bl sub_08015A0C
	ldr r0, [r5, #0x2c]
	bl sub_0809BAB8
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, [r5, #0x2c]
	adds r5, #0x39
	ldrb r2, [r5]
	lsrs r1, r2, #2
	movs r2, #7
	ands r1, r2
	bl sub_0809BA94
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r2, #3
	ldrb r5, [r5]
	ands r2, r5
	adds r2, #1
	adds r0, r4, #0
	bl sub_080792C4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809DAC8: .4byte gDispIo
_0809DACC: .4byte 0x0000FFE0
_0809DAD0: .4byte 0x0000E0FF

	thumb_func_start sub_0809DAD4
sub_0809DAD4: @ 0x0809DAD4
	push {r4, r5, lr}
	adds r0, #0x3a
	movs r4, #0
	strb r4, [r0]
	bl sub_080AA440
	ldr r3, _0809DB64 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0xc]
	movs r0, #3
	ldrb r5, [r3, #0x10]
	orrs r0, r5
	strb r0, [r3, #0x10]
	adds r0, r1, #0
	ldrb r5, [r3, #0x14]
	ands r0, r5
	orrs r0, r2
	strb r0, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	ands r1, r0
	strb r1, [r3, #0x18]
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r4, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r4, [r0]
	ldr r0, _0809DB68 @ =0x0000FFE0
	ldrh r2, [r3, #0x3c]
	ands r0, r2
	movs r1, #8
	orrs r0, r1
	ldr r1, _0809DB6C @ =0x0000E0FF
	ands r0, r1
	movs r5, #0xb8
	lsls r5, r5, #5
	adds r1, r5, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	bl sub_0809CE20
	ldr r0, _0809DB70 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809DB5C
	movs r0, #0xc8
	bl m4aSongNumStart
_0809DB5C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809DB64: .4byte gDispIo
_0809DB68: .4byte 0x0000FFE0
_0809DB6C: .4byte 0x0000E0FF
_0809DB70: .4byte gPlaySt

	thumb_func_start sub_0809DB74
sub_0809DB74: @ 0x0809DB74
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	str r0, [sp]
	movs r4, #0
	ldr r0, _0809DBE4 @ =gBg2Tm
	mov sl, r0
_0809DB88:
	ldr r2, [sp]
	adds r1, r4, r2
	cmp r1, #0x1d
	bhi _0809DBF8
	adds r3, r4, #1
	mov sb, r3
	ldr r2, _0809DBE8 @ =0x02012BFC
	lsls r1, r1, #1
	movs r3, #0x80
	lsls r3, r3, #5
	adds r0, r2, r3
	adds r0, r0, r1
	mov ip, r0
	adds r7, r1, r2
	adds r6, r1, #0
	lsls r0, r4, #1
	ldr r4, _0809DBEC @ =gBg0Tm
	adds r5, r0, r4
	adds r3, r0, #0
	ldr r0, _0809DBF0 @ =gBg1Tm
	mov r8, r0
	movs r4, #0x13
_0809DBB4:
	ldrh r0, [r7]
	strh r0, [r5]
	mov r2, r8
	adds r1, r3, r2
	ldr r2, _0809DBF4 @ =0x020133FC
	adds r0, r6, r2
	ldrh r0, [r0]
	strh r0, [r1]
	mov r0, sl
	adds r1, r3, r0
	mov r2, ip
	ldrh r0, [r2]
	strh r0, [r1]
	movs r0, #0x40
	add ip, r0
	adds r7, #0x40
	adds r6, #0x40
	adds r5, #0x40
	adds r3, #0x40
	subs r4, #1
	cmp r4, #0
	bge _0809DBB4
	b _0809DC20
	.align 2, 0
_0809DBE4: .4byte gBg2Tm
_0809DBE8: .4byte 0x02012BFC
_0809DBEC: .4byte gBg0Tm
_0809DBF0: .4byte gBg1Tm
_0809DBF4: .4byte 0x020133FC
_0809DBF8:
	adds r1, r4, #1
	mov sb, r1
	movs r3, #0
	lsls r0, r4, #1
	mov r4, sl
	adds r2, r0, r4
	ldr r4, _0809DC3C @ =gBg1Tm
	adds r1, r0, r4
	ldr r4, _0809DC40 @ =gBg0Tm
	adds r0, r0, r4
	movs r4, #0x13
_0809DC0E:
	strh r3, [r0]
	strh r3, [r1]
	strh r3, [r2]
	adds r2, #0x40
	adds r1, #0x40
	adds r0, #0x40
	subs r4, #1
	cmp r4, #0
	bge _0809DC0E
_0809DC20:
	mov r4, sb
	cmp r4, #0x1d
	ble _0809DB88
	movs r0, #7
	bl EnableBgSync
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809DC3C: .4byte gBg1Tm
_0809DC40: .4byte gBg0Tm

	thumb_func_start sub_0809DC44
sub_0809DC44: @ 0x0809DC44
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	movs r0, #0x3a
	adds r0, r0, r7
	mov r8, r0
	ldrb r0, [r0]
	adds r0, #1
	movs r6, #0
	mov r1, r8
	strb r0, [r1]
	movs r4, #0xa
	subs r4, r4, r0
	lsls r0, r4, #3
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	movs r5, #8
	subs r5, r5, r0
	lsls r0, r4, #4
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	movs r4, #0x10
	subs r4, r4, r0
	rsbs r0, r5, #0
	lsls r0, r0, #3
	str r0, [r7, #0x30]
	adds r0, r5, #0
	bl sub_0809DB74
	ldr r1, [r7, #0x30]
	adds r1, #0x38
	ldr r0, _0809DCE4 @ =0x000001FF
	ands r1, r0
	adds r0, r7, #0
	adds r0, #0x3f
	ldrb r2, [r0]
	movs r0, #0
	bl sub_08007B80
	ldr r3, _0809DCE8 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r4, [r0]
	movs r0, #0x10
	subs r0, r0, r4
	adds r1, r3, #0
	adds r1, #0x45
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r6, [r0]
	mov r0, r8
	ldrb r0, [r0]
	cmp r0, #0xa
	bne _0809DCDA
	adds r0, r7, #0
	bl Proc_Break
	ldr r0, [r7, #0x2c]
	bl sub_0809BA20
	str r0, [r7, #0x2c]
_0809DCDA:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809DCE4: .4byte 0x000001FF
_0809DCE8: .4byte gDispIo

	thumb_func_start sub_0809DCEC
sub_0809DCEC: @ 0x0809DCEC
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	movs r0, #0x3a
	adds r0, r0, r7
	mov sb, r0
	ldrb r0, [r0]
	adds r0, #1
	movs r1, #0
	mov r8, r1
	mov r1, sb
	strb r0, [r1]
	movs r4, #0xa
	subs r4, r4, r0
	lsls r0, r4, #3
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	adds r6, r0, #0
	movs r5, #8
	subs r6, r5, r6
	lsls r0, r4, #4
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	movs r4, #0x10
	subs r4, r4, r0
	subs r5, r5, r6
	lsls r5, r5, #3
	str r5, [r7, #0x30]
	subs r6, #8
	adds r0, r6, #0
	bl sub_0809DB74
	ldr r1, [r7, #0x30]
	adds r1, #0x38
	ldr r0, _0809DD90 @ =0x000001FF
	ands r1, r0
	adds r0, r7, #0
	adds r0, #0x3f
	ldrb r2, [r0]
	movs r0, #0
	bl sub_08007B80
	ldr r3, _0809DD94 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	movs r0, #0x10
	subs r0, r0, r4
	adds r1, r3, #0
	adds r1, #0x44
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r4, [r0]
	adds r0, #1
	mov r1, r8
	strb r1, [r0]
	mov r0, sb
	ldrb r0, [r0]
	cmp r0, #0xa
	bne _0809DD82
	adds r0, r7, #0
	bl Proc_Break
_0809DD82:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809DD90: .4byte 0x000001FF
_0809DD94: .4byte gDispIo

	thumb_func_start sub_0809DD98
sub_0809DD98: @ 0x0809DD98
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	movs r0, #0x3a
	adds r0, r0, r7
	mov r8, r0
	ldrb r0, [r0]
	adds r0, #1
	movs r6, #0
	mov r1, r8
	strb r0, [r1]
	movs r4, #0xa
	subs r4, r4, r0
	lsls r0, r4, #3
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	movs r5, #8
	subs r5, r5, r0
	lsls r0, r4, #4
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	movs r4, #0x10
	subs r4, r4, r0
	lsls r0, r5, #3
	str r0, [r7, #0x30]
	rsbs r5, r5, #0
	adds r0, r5, #0
	bl sub_0809DB74
	ldr r1, [r7, #0x30]
	adds r1, #0x38
	ldr r0, _0809DE38 @ =0x000001FF
	ands r1, r0
	adds r0, r7, #0
	adds r0, #0x3f
	ldrb r2, [r0]
	movs r0, #0
	bl sub_08007B80
	ldr r3, _0809DE3C @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r4, [r0]
	movs r0, #0x10
	subs r0, r0, r4
	adds r1, r3, #0
	adds r1, #0x45
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r6, [r0]
	mov r0, r8
	ldrb r0, [r0]
	cmp r0, #0xa
	bne _0809DE2E
	adds r0, r7, #0
	bl Proc_Break
	ldr r0, [r7, #0x2c]
	bl sub_0809BA38
	str r0, [r7, #0x2c]
_0809DE2E:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809DE38: .4byte 0x000001FF
_0809DE3C: .4byte gDispIo

	thumb_func_start sub_0809DE40
sub_0809DE40: @ 0x0809DE40
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	movs r0, #0x3a
	adds r0, r0, r7
	mov sb, r0
	ldrb r0, [r0]
	adds r0, #1
	movs r1, #0
	mov r8, r1
	mov r1, sb
	strb r0, [r1]
	movs r4, #0xa
	subs r4, r4, r0
	lsls r0, r4, #3
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	adds r5, r0, #0
	movs r6, #8
	subs r5, r6, r5
	lsls r0, r4, #4
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	movs r4, #0x10
	subs r4, r4, r0
	adds r0, r5, #0
	subs r0, #8
	lsls r0, r0, #3
	str r0, [r7, #0x30]
	subs r6, r6, r5
	adds r0, r6, #0
	bl sub_0809DB74
	ldr r1, [r7, #0x30]
	adds r1, #0x38
	ldr r0, _0809DEE4 @ =0x000001FF
	ands r1, r0
	adds r0, r7, #0
	adds r0, #0x3f
	ldrb r2, [r0]
	movs r0, #0
	bl sub_08007B80
	ldr r3, _0809DEE8 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	movs r0, #0x10
	subs r0, r0, r4
	adds r1, r3, #0
	adds r1, #0x44
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r4, [r0]
	adds r0, #1
	mov r1, r8
	strb r1, [r0]
	mov r0, sb
	ldrb r0, [r0]
	cmp r0, #0xa
	bne _0809DED8
	adds r0, r7, #0
	bl Proc_Break
_0809DED8:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809DEE4: .4byte 0x000001FF
_0809DEE8: .4byte gDispIo

	thumb_func_start sub_0809DEEC
sub_0809DEEC: @ 0x0809DEEC
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	bl sub_080069C4
	bl ResetText
	bl InitIcons
	ldr r0, _0809DF9C @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r4, _0809DFA0 @ =gBg1Tm
	adds r0, r4, #0
	movs r1, #0
	bl TmFill
	ldr r0, _0809DFA4 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	adds r2, r5, #0
	adds r2, #0x39
	movs r0, #0xfc
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0xe3
	ands r0, r1
	strb r0, [r2]
	ldr r0, [r5, #0x2c]
	bl sub_0809BAB8
	bl sub_0809CEA8
	adds r1, r5, #0
	adds r1, #0x3c
	strb r0, [r1]
	adds r0, r5, #0
	bl sub_0809D33C
	adds r0, r5, #0
	bl sub_0809D420
	adds r0, r5, #0
	bl sub_0809D450
	adds r0, r5, #0
	movs r1, #0
	movs r2, #1
	bl sub_0809D528
	ldr r1, _0809DFA8 @ =0x0842C3C0
	movs r2, #0xa4
	lsls r2, r2, #7
	adds r0, r4, #0
	bl TmApplyTsa_thm
	ldr r4, _0809DFAC @ =0x08C4C158
	ldr r0, [r5, #0x2c]
	bl sub_0809BAB8
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r0, r0, r4
	ldrh r4, [r0, #6]
	adds r0, r4, #0
	bl sub_080070AC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809DFB0
	adds r1, r5, #0
	adds r1, #0x3f
	movs r0, #0
	strb r0, [r1]
	movs r0, #0x80
	lsls r0, r0, #1
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	movs r2, #0x38
	movs r3, #0
	bl sub_08007A5C
	b _0809DFC8
	.align 2, 0
_0809DF9C: .4byte gBg0Tm
_0809DFA0: .4byte gBg1Tm
_0809DFA4: .4byte gBg2Tm
_0809DFA8: .4byte 0x0842C3C0
_0809DFAC: .4byte 0x08C4C158
_0809DFB0:
	adds r1, r5, #0
	adds r1, #0x3f
	movs r0, #8
	strb r0, [r1]
	adds r0, #0xfc
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	movs r2, #0x38
	movs r3, #8
	bl sub_08007A5C
_0809DFC8:
	adds r0, r5, #0
	bl sub_0809D4D0
	adds r0, r5, #0
	bl sub_0809D1C8
	bl sub_0809CE20
	adds r1, r5, #0
	adds r1, #0x3a
	movs r0, #0
	strb r0, [r1]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0809DFE8
sub_0809DFE8: @ 0x0809DFE8
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _0809E0B4 @ =gDispIo
	mov ip, r0
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	mov r2, ip
	ldrb r2, [r2, #0xc]
	ands r0, r2
	movs r3, #1
	orrs r0, r3
	mov r5, ip
	strb r0, [r5, #0xc]
	movs r2, #3
	ldrb r0, [r5, #0x10]
	orrs r0, r2
	strb r0, [r5, #0x10]
	ldrb r0, [r5, #0x14]
	ands r1, r0
	orrs r1, r3
	strb r1, [r5, #0x14]
	ldrb r1, [r5, #0x18]
	orrs r2, r1
	strb r2, [r5, #0x18]
	mov r2, ip
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r3, [r2]
	ands r0, r3
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	mov r3, ip
	adds r3, #0x45
	movs r0, #0xc
	strb r0, [r3]
	mov r0, ip
	adds r0, #0x46
	strb r1, [r0]
	ldr r0, _0809E0B8 @ =0x0000FFE0
	ldrh r5, [r5, #0x3c]
	ands r0, r5
	ldr r1, _0809E0BC @ =0x0000E0FF
	ands r0, r1
	movs r3, #0xf8
	lsls r3, r3, #5
	adds r1, r3, #0
	orrs r0, r1
	mov r5, ip
	strh r0, [r5, #0x3c]
	movs r1, #0x21
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r3, [r2]
	ands r0, r3
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x3d
	ldrb r5, [r0]
	ands r1, r5
	strb r1, [r0]
	adds r0, r4, #0
	adds r0, #0x38
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0809E0AE
	adds r0, r4, #0
	adds r0, #0x3b
	ldrb r0, [r0]
	cmp r0, #0
	beq _0809E0AE
	adds r0, r4, #0
	adds r0, #0x39
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	lsls r0, r0, #3
	adds r0, #0xc4
	lsrs r1, r1, #2
	movs r2, #7
	ands r1, r2
	lsls r1, r1, #4
	adds r1, #0x18
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #1
	bl sub_080AA3F8
	adds r1, r4, #0
	adds r1, #0x3a
	movs r0, #0xff
	strb r0, [r1]
_0809E0AE:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809E0B4: .4byte gDispIo
_0809E0B8: .4byte 0x0000FFE0
_0809E0BC: .4byte 0x0000E0FF

	thumb_func_start sub_0809E0C0
sub_0809E0C0: @ 0x0809E0C0
	push {r4, lr}
	adds r4, r0, #0
	bl sub_080AAC88
	bl sub_0808EDB0
	movs r0, #0
	bl EndFaceById
	ldr r0, [r4, #0x2c]
	bl sub_0809C92C
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0809E0E0
sub_0809E0E0: @ 0x0809E0E0
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x39
	ldrb r3, [r1]
	lsrs r1, r3, #2
	movs r2, #7
	ands r1, r2
	movs r2, #3
	ands r2, r3
	adds r2, #1
	bl sub_0809C948
	adds r4, #0x3e
	movs r3, #0
	strb r0, [r4]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809E11C
	movs r1, #0x80
	lsls r1, r1, #1
	str r3, [sp]
	movs r0, #0x30
	movs r2, #0x80
	movs r3, #0x10
	bl sub_08003FD4
	b _0809E12C
_0809E11C:
	ldrb r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #1
	str r3, [sp]
	adds r1, r2, #0
	movs r3, #0x10
	bl sub_08003FD4
_0809E12C:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0809E134
sub_0809E134: @ 0x0809E134
	push {lr}
	sub sp, #4
	adds r0, #0x3e
	ldrb r0, [r0]
	cmp r0, #0
	bne _0809E152
	movs r2, #0x80
	lsls r2, r2, #1
	str r0, [sp]
	movs r0, #0x30
	movs r1, #0x80
	movs r3, #0x10
	bl sub_08003FD4
	b _0809E164
_0809E152:
	movs r2, #0x80
	lsls r2, r2, #1
	movs r0, #0
	str r0, [sp]
	movs r0, #0x30
	adds r1, r2, #0
	movs r3, #0x10
	bl sub_08003FD4
_0809E164:
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0809E16C
sub_0809E16C: @ 0x0809E16C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r1, r2, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _0809E18C @ =0x08D8DEF8
	bl Proc_StartBlocking
	adds r1, r0, #0
	adds r1, #0x38
	strb r4, [r1]
	str r5, [r0, #0x2c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809E18C: .4byte 0x08D8DEF8

	thumb_func_start sub_0809E190
sub_0809E190: @ 0x0809E190
	push {r4, lr}
	ldrb r3, [r1]
	str r3, [r0, #8]
	ldrb r4, [r1, #2]
	lsls r2, r4, #8
	ldrb r1, [r1, #1]
	orrs r2, r1
	str r2, [r0, #4]
	str r3, [r0, #0xc]
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_0809E1A8
sub_0809E1A8: @ 0x0809E1A8
	ldr r2, [r0, #8]
	strb r2, [r1]
	ldr r0, [r0, #4]
	strb r0, [r1, #1]
	asrs r0, r0, #0x10
	strb r0, [r1, #2]
	bx lr
	.align 2, 0

	thumb_func_start sub_0809E1B8
sub_0809E1B8: @ 0x0809E1B8
	adds r2, r0, #0
	ldr r1, [r2, #0xc]
	movs r0, #0xd
	muls r0, r1, r0
	adds r0, #1
	movs r1, #0xff
	ands r0, r1
	str r0, [r2, #0xc]
	bx lr
	.align 2, 0

	thumb_func_start sub_0809E1CC
sub_0809E1CC: @ 0x0809E1CC
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r7, r1, #0
	ldr r0, _0809E208 @ =0x020143FC
	str r4, [r0]
	ldr r1, _0809E20C @ =0x02014400
	movs r0, #1
	lsls r0, r4
	subs r0, #1
	str r0, [r1]
	ldr r6, _0809E210 @ =0x02014404
	movs r0, #0x1e
	adds r1, r4, #0
	bl __divsi3
	adds r5, r0, #0
	str r5, [r6]
	movs r0, #0x1e
	adds r1, r4, #0
	bl __modsi3
	cmp r0, #0
	ble _0809E1FE
	adds r0, r5, #1
	str r0, [r6]
_0809E1FE:
	ldr r0, _0809E214 @ =0x02014408
	str r7, [r0]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809E208: .4byte 0x020143FC
_0809E20C: .4byte 0x02014400
_0809E210: .4byte 0x02014404
_0809E214: .4byte 0x02014408

	thumb_func_start sub_0809E218
sub_0809E218: @ 0x0809E218
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, _0809E240 @ =0x020143FC
	ldr r4, [r0]
	adds r0, r5, #0
	adds r1, r4, #0
	bl __divsi3
	adds r6, r0, #0
	adds r0, r5, #0
	adds r1, r4, #0
	bl __modsi3
	cmp r0, #0
	ble _0809E238
	adds r6, #1
_0809E238:
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0809E240: .4byte 0x020143FC

	thumb_func_start sub_0809E244
sub_0809E244: @ 0x0809E244
	ldr r2, _0809E258 @ =0x02014434
	ldr r1, [r2]
	movs r0, #0xd
	muls r0, r1, r0
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [r2]
	bx lr
	.align 2, 0
_0809E258: .4byte 0x02014434

	thumb_func_start sub_0809E25C
sub_0809E25C: @ 0x0809E25C
	push {r4, r5, r6, lr}
	movs r4, #0
	ldr r1, _0809E290 @ =0x02014404
	ldr r0, [r1]
	cmp r4, r0
	bge _0809E288
	ldr r6, _0809E294 @ =0x02014438
	adds r5, r1, #0
_0809E26C:
	ldr r0, [r5]
	adds r0, r4, r0
	lsls r1, r4, #1
	adds r0, r0, r1
	adds r0, r0, r6
	ldrb r3, [r0]
	adds r2, r4, r6
	ldrb r1, [r2]
	strb r1, [r0]
	strb r3, [r2]
	adds r4, #1
	ldr r0, [r5]
	cmp r4, r0
	blt _0809E26C
_0809E288:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809E290: .4byte 0x02014404
_0809E294: .4byte 0x02014438

	thumb_func_start sub_0809E298
sub_0809E298: @ 0x0809E298
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	str r0, [sp]
	mov sl, r1
	mov r8, r2
	mov sb, r3
	bl sub_0809E244
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	add r8, r0
	movs r0, #1
	mov r1, sb
	lsls r0, r1
	subs r0, #1
	mov r1, r8
	ands r1, r0
	mov r8, r1
	movs r2, #0
	cmp r2, sb
	bge _0809E318
_0809E2CA:
	ldr r0, _0809E328 @ =0x020143FC
	mov r1, sl
	ldr r6, [r1]
	ldr r4, [r0]
	adds r0, r6, #0
	adds r1, r4, #0
	str r2, [sp, #4]
	bl __divsi3
	ldr r1, [sp]
	adds r7, r1, r0
	movs r5, #1
	ldr r2, [sp, #4]
	lsls r5, r2
	mov r0, r8
	ands r5, r0
	asrs r5, r2
	adds r0, r6, #0
	adds r1, r4, #0
	bl __modsi3
	adds r1, r0, #0
	ldr r2, [sp, #4]
	cmp r1, #0
	bge _0809E2FE
	adds r0, r1, #7
_0809E2FE:
	asrs r0, r0, #3
	lsls r0, r0, #3
	subs r0, r1, r0
	lsls r5, r0
	ldrb r1, [r7]
	orrs r5, r1
	strb r5, [r7]
	adds r0, r6, #1
	mov r1, sl
	str r0, [r1]
	adds r2, #1
	cmp r2, sb
	blt _0809E2CA
_0809E318:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809E328: .4byte 0x020143FC

	thumb_func_start sub_0809E32C
sub_0809E32C: @ 0x0809E32C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	str r0, [sp]
	mov r8, r1
	mov sb, r2
	movs r0, #0
	mov sl, r0
	movs r7, #0
	cmp sl, sb
	bge _0809E390
_0809E348:
	ldr r0, _0809E3B8 @ =0x020143FC
	mov r1, r8
	ldr r6, [r1]
	ldr r4, [r0]
	adds r0, r6, #0
	adds r1, r4, #0
	bl __divsi3
	ldr r2, [sp]
	adds r0, r2, r0
	ldrb r5, [r0]
	adds r0, r6, #0
	adds r1, r4, #0
	bl __modsi3
	adds r1, r0, #0
	cmp r1, #0
	bge _0809E36E
	adds r0, r1, #7
_0809E36E:
	asrs r0, r0, #3
	lsls r0, r0, #3
	subs r0, r1, r0
	movs r1, #1
	lsls r1, r0
	ands r5, r1
	asrs r5, r0
	lsls r5, r7
	mov r0, sl
	orrs r0, r5
	mov sl, r0
	adds r0, r6, #1
	mov r1, r8
	str r0, [r1]
	adds r7, #1
	cmp r7, sb
	blt _0809E348
_0809E390:
	bl sub_0809E244
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r2, sl
	subs r0, r2, r0
	movs r1, #1
	mov r2, sb
	lsls r1, r2
	subs r1, #1
	ands r0, r1
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0809E3B8: .4byte 0x020143FC

	thumb_func_start sub_0809E3BC
sub_0809E3BC: @ 0x0809E3BC
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r3, r1, #0
	movs r2, #0
	movs r1, #0
	cmp r2, r3
	bge _0809E3E2
_0809E3CA:
	adds r0, r4, r1
	ldrb r6, [r0]
	adds r5, r6, #0
	muls r5, r6, r5
	adds r0, r5, #0
	adds r1, #1
	muls r0, r1, r0
	adds r0, r2, r0
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r1, r3
	blt _0809E3CA
_0809E3E2:
	lsrs r0, r2, #8
	adds r0, r2, r0
	asrs r1, r2, #0x10
	adds r0, r0, r1
	ldr r2, _0809E3F8 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0809E3F8: .4byte 0x000003FF

	thumb_func_start sub_0809E3FC
sub_0809E3FC: @ 0x0809E3FC
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	movs r6, #0
	ldr r0, _0809E434 @ =0x02014404
	ldr r0, [r0]
	ldr r5, _0809E438 @ =0x02014438
	adds r0, r0, r5
	ldr r4, _0809E43C @ =0x020144D8
	ldrh r1, [r4, #6]
	bl sub_0809E3BC
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov sb, r0
	adds r7, r5, #0
	mov r8, r4
_0809E420:
	adds r0, r6, #0
	movs r1, #3
	bl __modsi3
	adds r5, r0, #0
	cmp r5, #0
	bne _0809E440
	mov r0, r8
	ldrh r4, [r0]
	b _0809E458
	.align 2, 0
_0809E434: .4byte 0x02014404
_0809E438: .4byte 0x02014438
_0809E43C: .4byte 0x020144D8
_0809E440:
	cmp r5, #1
	bne _0809E454
	mov r0, r8
	ldrh r4, [r0, #2]
	adds r0, r6, #0
	movs r1, #3
	bl __divsi3
	adds r1, r5, #0
	b _0809E462
_0809E454:
	mov r0, r8
	ldrh r4, [r0, #4]
_0809E458:
	adds r0, r6, #0
	movs r1, #3
	bl __divsi3
	movs r1, #1
_0809E462:
	lsls r1, r0
	ands r4, r1
	asrs r4, r0
	ldr r5, _0809E4C0 @ =0x020143FC
	ldr r1, [r5]
	adds r0, r6, #0
	bl __modsi3
	lsls r4, r0
	ldrb r0, [r7]
	orrs r4, r0
	strb r4, [r7]
	adds r6, #1
	ldr r1, [r5]
	adds r0, r6, #0
	bl __modsi3
	cmp r0, #0
	bne _0809E48A
	adds r7, #1
_0809E48A:
	cmp r6, #0x1e
	bne _0809E420
	movs r2, #0
	ldr r3, _0809E4C4 @ =0x02014404
	ldr r0, [r3]
	cmp r2, r0
	bge _0809E4B0
	ldr r5, _0809E4C8 @ =0x02014438
	ldr r4, _0809E4CC @ =0x02014400
_0809E49C:
	adds r0, r2, r5
	ldrb r1, [r0]
	add r1, sb
	ldrb r6, [r4]
	ands r1, r6
	strb r1, [r0]
	adds r2, #1
	ldr r0, [r3]
	cmp r2, r0
	blt _0809E49C
_0809E4B0:
	bl sub_0809E25C
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809E4C0: .4byte 0x020143FC
_0809E4C4: .4byte 0x02014404
_0809E4C8: .4byte 0x02014438
_0809E4CC: .4byte 0x02014400

	thumb_func_start sub_0809E4D0
sub_0809E4D0: @ 0x0809E4D0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	movs r0, #0
	mov sl, r0
	movs r7, #0
	bl sub_0809E25C
	ldr r4, _0809E568 @ =0x02014404
	ldr r0, [r4]
	ldr r5, _0809E56C @ =0x02014438
	adds r0, r0, r5
	ldr r1, _0809E570 @ =0x020144D8
	ldrh r1, [r1, #6]
	bl sub_0809E3BC
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	movs r2, #0
	ldr r0, [r4]
	cmp sl, r0
	bge _0809E51A
	mov r8, r5
	ldr r5, _0809E574 @ =0x02014400
_0809E504:
	mov r1, r8
	adds r0, r2, r1
	ldrb r6, [r0]
	subs r1, r6, r3
	ldrb r6, [r5]
	ands r1, r6
	strb r1, [r0]
	adds r2, #1
	ldr r0, [r4]
	cmp r2, r0
	blt _0809E504
_0809E51A:
	ldr r0, _0809E570 @ =0x020144D8
	movs r1, #0
	strh r1, [r0]
	strh r1, [r0, #2]
	strh r1, [r0, #4]
	ldr r1, _0809E56C @ =0x02014438
	ldr r2, _0809E578 @ =0x020143FC
	mov sb, r2
	mov r8, r0
	mov r0, sl
	adds r6, r0, r1
_0809E530:
	adds r0, r7, #0
	movs r1, #3
	bl __modsi3
	adds r5, r0, #0
	cmp r5, #0
	bne _0809E57C
	ldrb r4, [r6]
	mov r2, sb
	ldr r1, [r2]
	adds r0, r7, #0
	bl __modsi3
	asrs r4, r0
	movs r0, #1
	ands r4, r0
	adds r0, r7, #0
	movs r1, #3
	bl __divsi3
	lsls r4, r0
	mov r0, r8
	ldrh r0, [r0]
	orrs r4, r0
	mov r1, r8
	strh r4, [r1]
	b _0809E5CC
	.align 2, 0
_0809E568: .4byte 0x02014404
_0809E56C: .4byte 0x02014438
_0809E570: .4byte 0x020144D8
_0809E574: .4byte 0x02014400
_0809E578: .4byte 0x020143FC
_0809E57C:
	cmp r5, #1
	bne _0809E5A6
	ldrb r4, [r6]
	mov r2, sb
	ldr r1, [r2]
	adds r0, r7, #0
	bl __modsi3
	asrs r4, r0
	ands r4, r5
	adds r0, r7, #0
	movs r1, #3
	bl __divsi3
	lsls r4, r0
	mov r0, r8
	ldrh r0, [r0, #2]
	orrs r4, r0
	mov r1, r8
	strh r4, [r1, #2]
	b _0809E5CC
_0809E5A6:
	ldrb r4, [r6]
	mov r2, sb
	ldr r1, [r2]
	adds r0, r7, #0
	bl __modsi3
	asrs r4, r0
	movs r0, #1
	ands r4, r0
	adds r0, r7, #0
	movs r1, #3
	bl __divsi3
	lsls r4, r0
	mov r0, r8
	ldrh r0, [r0, #4]
	orrs r4, r0
	mov r1, r8
	strh r4, [r1, #4]
_0809E5CC:
	adds r7, #1
	mov r2, sb
	ldr r1, [r2]
	adds r0, r7, #0
	bl __modsi3
	cmp r0, #0
	bne _0809E5DE
	adds r6, #1
_0809E5DE:
	cmp r7, #0x1e
	bne _0809E530
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_0809E5F0
sub_0809E5F0: @ 0x0809E5F0
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r3, r0, #0
	movs r0, #0
	str r0, [sp]
	ldr r6, _0809E6A8 @ =0x02014438
	ldr r5, _0809E6AC @ =0x02014404
	adds r2, r6, #0
	movs r1, #0
	adds r0, r6, #0
	adds r0, #0x9f
_0809E606:
	strb r1, [r0]
	subs r0, #1
	cmp r0, r2
	bge _0809E606
	ldr r1, [r5]
	adds r1, r1, r6
	mov r0, sp
	bl _call_via_r3
	ldr r0, [sp]
	bl sub_0809E218
	ldr r4, _0809E6B0 @ =0x020144D8
	strh r0, [r4, #6]
	ldr r0, [r5]
	adds r0, r0, r6
	ldrh r1, [r4, #6]
	bl sub_0809E3BC
	strh r0, [r4, #2]
	bl GetGameTime
	lsrs r0, r0, #3
	ldrh r1, [r4, #2]
	adds r0, r1, r0
	ldr r5, _0809E6B4 @ =0x000003FF
	ands r0, r5
	strh r0, [r4]
	ldr r1, _0809E6B8 @ =0x02014434
	ldrh r0, [r4]
	str r0, [r1]
	bl sub_0809E244
	ldrh r1, [r4, #2]
	adds r0, r0, r1
	ands r0, r5
	strh r0, [r4, #2]
	movs r5, #0
	ldrh r4, [r4, #6]
	cmp r5, r4
	bge _0809E67C
	adds r4, r6, #0
_0809E65A:
	bl sub_0809E244
	ldr r1, _0809E6AC @ =0x02014404
	ldr r2, [r1]
	adds r2, r5, r2
	adds r2, r2, r4
	ldrb r1, [r2]
	adds r0, r1, r0
	ldr r1, _0809E6BC @ =0x02014400
	ldrb r1, [r1]
	ands r0, r1
	strb r0, [r2]
	adds r5, #1
	ldr r0, _0809E6B0 @ =0x020144D8
	ldrh r0, [r0, #6]
	cmp r5, r0
	blt _0809E65A
_0809E67C:
	ldr r0, _0809E6AC @ =0x02014404
	ldr r0, [r0]
	ldr r1, _0809E6A8 @ =0x02014438
	adds r0, r0, r1
	ldr r5, _0809E6B0 @ =0x020144D8
	ldrh r1, [r5, #6]
	bl sub_0809E3BC
	adds r4, r0, #0
	bl sub_0809E244
	adds r4, r4, r0
	ldr r1, _0809E6B4 @ =0x000003FF
	adds r0, r1, #0
	ands r4, r0
	strh r4, [r5, #4]
	bl sub_0809E3FC
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809E6A8: .4byte 0x02014438
_0809E6AC: .4byte 0x02014404
_0809E6B0: .4byte 0x020144D8
_0809E6B4: .4byte 0x000003FF
_0809E6B8: .4byte 0x02014434
_0809E6BC: .4byte 0x02014400

	thumb_func_start sub_0809E6C0
sub_0809E6C0: @ 0x0809E6C0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	mov sb, r0
	movs r0, #0
	str r0, [sp, #4]
	bl sub_0809E4D0
	ldr r1, _0809E76C @ =0x02014434
	ldr r4, _0809E770 @ =0x020144D8
	ldrh r0, [r4]
	str r0, [r1]
	ldr r0, _0809E774 @ =0x02014404
	ldr r0, [r0]
	ldr r7, _0809E778 @ =0x02014438
	adds r0, r0, r7
	ldrh r1, [r4, #6]
	bl sub_0809E3BC
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	bl sub_0809E244
	mov r1, sp
	strh r0, [r1]
	movs r5, #0
	add r0, sp, #4
	mov r8, r0
	ldrh r4, [r4, #6]
	cmp r5, r4
	bge _0809E726
	adds r4, r7, #0
_0809E704:
	bl sub_0809E244
	ldr r1, _0809E774 @ =0x02014404
	ldr r2, [r1]
	adds r2, r5, r2
	adds r2, r2, r4
	ldrb r1, [r2]
	subs r0, r1, r0
	ldr r1, _0809E77C @ =0x02014400
	ldrb r1, [r1]
	ands r0, r1
	strb r0, [r2]
	adds r5, #1
	ldr r0, _0809E770 @ =0x020144D8
	ldrh r0, [r0, #6]
	cmp r5, r0
	blt _0809E704
_0809E726:
	bl sub_0809E244
	mov r1, sp
	strh r0, [r1, #2]
	ldr r5, _0809E774 @ =0x02014404
	ldr r1, [r5]
	ldr r4, _0809E778 @ =0x02014438
	adds r1, r1, r4
	mov r0, r8
	bl _call_via_r9
	ldr r0, [r5]
	adds r0, r0, r4
	ldr r4, _0809E770 @ =0x020144D8
	ldrh r1, [r4, #6]
	bl sub_0809E3BC
	mov r1, sp
	ldrh r1, [r1]
	adds r0, r1, r0
	ldr r1, _0809E780 @ =0x000003FF
	adds r2, r1, #0
	ands r0, r2
	mov r1, sp
	ldrh r1, [r1, #2]
	adds r6, r6, r1
	ands r6, r2
	ldrh r1, [r4, #2]
	cmp r1, r0
	bne _0809E768
	ldrh r4, [r4, #4]
	cmp r4, r6
	beq _0809E784
_0809E768:
	movs r0, #0
	b _0809E786
	.align 2, 0
_0809E76C: .4byte 0x02014434
_0809E770: .4byte 0x020144D8
_0809E774: .4byte 0x02014404
_0809E778: .4byte 0x02014438
_0809E77C: .4byte 0x02014400
_0809E780: .4byte 0x000003FF
_0809E784:
	movs r0, #1
_0809E786:
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_0809E794
sub_0809E794: @ 0x0809E794
	adds r3, r0, #0
	movs r2, #0
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	beq _0809E7BA
	ldrh r3, [r3]
_0809E7A2:
	ldrh r0, [r1]
	cmp r0, r3
	bne _0809E7AE
	lsls r0, r2, #0x10
	lsrs r0, r0, #0x10
	b _0809E7BC
_0809E7AE:
	adds r1, #2
	adds r2, #1
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bne _0809E7A2
_0809E7BA:
	ldr r0, _0809E7C0 @ =0x0000FFFF
_0809E7BC:
	bx lr
	.align 2, 0
_0809E7C0: .4byte 0x0000FFFF

	thumb_func_start sub_0809E7C4
sub_0809E7C4: @ 0x0809E7C4
	push {r4, r5, r6, lr}
	adds r2, r0, #0
	adds r6, r1, #0
	movs r5, #0
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	beq _0809E7F0
	adds r4, r2, #0
_0809E7D6:
	adds r0, r4, #0
	adds r1, r6, #0
	bl sub_0809E794
	ldr r1, _0809E7F8 @ =0x02014438
	adds r1, r5, r1
	strb r0, [r1]
	adds r4, #2
	adds r5, #1
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bne _0809E7D6
_0809E7F0:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809E7F8: .4byte 0x02014438

	thumb_func_start sub_0809E7FC
sub_0809E7FC: @ 0x0809E7FC
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	ldr r1, _0809E8E4 @ =0x02014434
	ldr r0, _0809E8E8 @ =0x02014408
	ldr r0, [r0]
	str r0, [r1]
	ldr r4, _0809E8EC @ =0x020144E0
	ldrb r2, [r4]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r3, #2
	bl sub_0809E298
	ldrb r2, [r4, #1]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r3, #1
	bl sub_0809E298
	ldrb r2, [r4, #2]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r3, #1
	bl sub_0809E298
	ldrb r2, [r4, #0xa]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r3, #8
	bl sub_0809E298
	bl GetGameTime
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r6, #0
	movs r3, #5
	bl sub_0809E298
	ldrb r2, [r4, #3]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r3, #3
	bl sub_0809E298
	ldrb r2, [r4, #4]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r3, #3
	bl sub_0809E298
	ldrb r2, [r4, #5]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r3, #3
	bl sub_0809E298
	ldrb r2, [r4, #6]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r3, #3
	bl sub_0809E298
	ldrb r2, [r4, #7]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r3, #3
	bl sub_0809E298
	ldrb r2, [r4, #9]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r3, #8
	bl sub_0809E298
	ldrb r2, [r4, #8]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r3, #6
	bl sub_0809E298
	ldrh r2, [r4, #0xc]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r3, #0xa
	bl sub_0809E298
	ldrb r2, [r4, #0xe]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r3, #6
	bl sub_0809E298
	ldrb r2, [r4, #0xf]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r3, #6
	bl sub_0809E298
	ldrb r2, [r4, #0xb]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r3, #8
	bl sub_0809E298
	ldr r2, [r4, #0x10]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r3, #0x18
	bl sub_0809E298
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809E8E4: .4byte 0x02014434
_0809E8E8: .4byte 0x02014408
_0809E8EC: .4byte 0x020144E0

	thumb_func_start sub_0809E8F0
sub_0809E8F0: @ 0x0809E8F0
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	ldr r1, _0809E9D0 @ =0x02014434
	ldr r0, _0809E9D4 @ =0x02014408
	ldr r0, [r0]
	str r0, [r1]
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #2
	bl sub_0809E32C
	ldr r5, _0809E9D8 @ =0x020144E0
	strb r0, [r5]
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #1
	bl sub_0809E32C
	strb r0, [r5, #1]
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #1
	bl sub_0809E32C
	strb r0, [r5, #2]
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #8
	bl sub_0809E32C
	strb r0, [r5, #0xa]
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #5
	bl sub_0809E32C
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #3
	bl sub_0809E32C
	strb r0, [r5, #3]
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #3
	bl sub_0809E32C
	strb r0, [r5, #4]
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #3
	bl sub_0809E32C
	strb r0, [r5, #5]
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #3
	bl sub_0809E32C
	strb r0, [r5, #6]
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #3
	bl sub_0809E32C
	strb r0, [r5, #7]
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #8
	bl sub_0809E32C
	strb r0, [r5, #9]
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #6
	bl sub_0809E32C
	strb r0, [r5, #8]
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #0xa
	bl sub_0809E32C
	strh r0, [r5, #0xc]
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #6
	bl sub_0809E32C
	strb r0, [r5, #0xe]
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #6
	bl sub_0809E32C
	strb r0, [r5, #0xf]
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #8
	bl sub_0809E32C
	strb r0, [r5, #0xb]
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #0x18
	bl sub_0809E32C
	str r0, [r5, #0x10]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809E9D0: .4byte 0x02014434
_0809E9D4: .4byte 0x02014408
_0809E9D8: .4byte 0x020144E0

	thumb_func_start sub_0809E9DC
sub_0809E9DC: @ 0x0809E9DC
	push {r4, r5, r6, lr}
	sub sp, #0x1c
	adds r5, r0, #0
	adds r6, r1, #0
	add r0, sp, #0x18
	movs r1, #0
	strh r1, [r0]
	ldr r4, _0809EA94 @ =0x020144E0
	ldr r2, _0809EA98 @ =0x0100000A
	adds r1, r4, #0
	bl CpuSet
	mov r0, sp
	adds r1, r5, #0
	adds r2, r6, #0
	bl sub_0809FC60
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809EAA0
	strb r5, [r4]
	strb r6, [r4, #2]
	mov r0, sp
	ldrb r0, [r0]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x1d
	strb r0, [r4, #3]
	mov r0, sp
	ldrh r0, [r0]
	lsls r0, r0, #0x16
	lsrs r0, r0, #0x1d
	strb r0, [r4, #4]
	mov r0, sp
	ldrb r1, [r0, #1]
	lsls r0, r1, #0x1b
	lsrs r0, r0, #0x1d
	strb r0, [r4, #5]
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x1d
	strb r1, [r4, #6]
	strb r1, [r4, #7]
	mov r0, sp
	ldrh r0, [r0, #2]
	lsrs r0, r0, #7
	strb r0, [r4, #9]
	mov r0, sp
	ldrh r0, [r0, #0xa]
	lsls r0, r0, #0x15
	lsrs r0, r0, #0x1a
	strb r0, [r4, #8]
	mov r0, sp
	ldrb r0, [r0, #2]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x1f
	strb r0, [r4, #1]
	ldr r0, [sp, #4]
	lsls r0, r0, #0xf
	lsrs r0, r0, #0x16
	strh r0, [r4, #0xc]
	mov r0, sp
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x1a
	strb r0, [r4, #0xe]
	mov r0, sp
	ldrh r0, [r0, #6]
	lsls r0, r0, #0x13
	lsrs r0, r0, #0x1a
	strb r0, [r4, #0xf]
	mov r0, sp
	ldrb r0, [r0, #7]
	lsrs r2, r0, #5
	ldr r0, [sp, #8]
	ldr r1, _0809EA9C @ =0x001FFFFF
	ands r0, r1
	lsls r0, r0, #3
	orrs r0, r2
	str r0, [r4, #0x10]
	mov r0, sp
	ldrb r0, [r0, #0x17]
	strb r0, [r4, #0xa]
	mov r2, sp
	ldrb r1, [r2, #3]
	lsrs r1, r1, #7
	movs r0, #0x7f
	ldrb r2, [r2, #4]
	ands r0, r2
	lsls r0, r0, #1
	orrs r0, r1
	strb r0, [r4, #0xb]
	movs r0, #1
	b _0809EAA2
	.align 2, 0
_0809EA94: .4byte 0x020144E0
_0809EA98: .4byte 0x0100000A
_0809EA9C: .4byte 0x001FFFFF
_0809EAA0:
	movs r0, #0
_0809EAA2:
	add sp, #0x1c
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0809EAAC
sub_0809EAAC: @ 0x0809EAAC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	str r0, [sp, #0xc]
	mov r8, r1
	add r1, sp, #8
	movs r0, #0
	strb r0, [r1, #2]
	movs r0, #4
	bl EnableBgSync
	movs r0, #0
	str r0, [sp, #0x10]
	add r7, sp, #8
	movs r1, #0xe0
	lsls r1, r1, #1
	mov sl, r1
	mov sb, r0
	movs r6, #0
_0809EAD8:
	ldr r2, [sp, #0xc]
	adds r0, r2, r6
	bl ClearText
	movs r5, #2
	bl InitTalkTextFont
	movs r4, #0
_0809EAE8:
	mov r0, sb
	adds r2, r0, r4
	ldr r1, _0809EB64 @ =0x020144D8
	ldr r0, _0809EB68 @ =0x02014404
	ldr r0, [r0]
	ldrh r1, [r1, #6]
	adds r0, r1, r0
	cmp r2, r0
	beq _0809EB54
	ldr r1, _0809EB6C @ =0x02014438
	adds r1, r2, r1
	ldrb r2, [r1]
	lsls r0, r2, #1
	add r0, r8
	ldrb r0, [r0]
	strb r0, [r7]
	ldrb r1, [r1]
	lsls r0, r1, #1
	add r0, r8
	ldrb r0, [r0, #1]
	strb r0, [r7, #1]
	movs r0, #0
	str r0, [sp]
	add r1, sp, #8
	str r1, [sp, #4]
	ldr r2, [sp, #0xc]
	adds r0, r2, r6
	ldr r1, _0809EB70 @ =0x02023C68
	add r1, sl
	movs r2, #1
	adds r3, r5, #0
	bl PutDrawText
	adds r5, #0xb
	adds r4, #1
	adds r0, r4, #0
	movs r1, #5
	bl __modsi3
	cmp r0, #0
	bne _0809EB3C
	adds r5, #0xb
_0809EB3C:
	cmp r4, #0xd
	ble _0809EAE8
	movs r0, #0xc0
	add sl, r0
	movs r1, #0xe
	add sb, r1
	adds r6, #8
	ldr r2, [sp, #0x10]
	adds r2, #1
	str r2, [sp, #0x10]
	cmp r2, #2
	ble _0809EAD8
_0809EB54:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809EB64: .4byte 0x020144D8
_0809EB68: .4byte 0x02014404
_0809EB6C: .4byte 0x02014438
_0809EB70: .4byte 0x02023C68

	thumb_func_start sub_0809EB74
sub_0809EB74: @ 0x0809EB74
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	lsls r4, r6, #6
	ldr r7, _0809EC6C @ =0x02023C64
	adds r0, r4, r7
	ldr r5, _0809EC70 @ =0x020144E0
	ldrb r2, [r5]
	movs r1, #2
	bl sub_08006074
	adds r0, r7, #6
	mov r8, r0
	adds r0, r4, r0
	ldrb r2, [r5, #2]
	movs r1, #2
	bl sub_08006074
	movs r1, #0x14
	adds r1, r1, r7
	mov sl, r1
	adds r0, r4, r1
	ldrb r2, [r5, #0xb]
	movs r1, #2
	bl sub_08006074
	movs r0, #0x1e
	adds r0, r0, r7
	mov sb, r0
	add r4, sb
	ldrb r2, [r5, #0xa]
	adds r0, r4, #0
	movs r1, #2
	bl sub_08006074
	adds r4, r6, #2
	lsls r4, r4, #6
	adds r0, r4, r7
	ldrb r2, [r5, #3]
	movs r1, #2
	bl sub_08006074
	add r8, r4
	ldrb r2, [r5, #4]
	mov r0, r8
	movs r1, #2
	bl sub_08006074
	movs r1, #0xc
	adds r1, r1, r7
	mov r8, r1
	adds r0, r4, r1
	ldrb r2, [r5, #5]
	movs r1, #2
	bl sub_08006074
	adds r0, r7, #0
	adds r0, #0x12
	adds r0, r4, r0
	ldrb r2, [r5, #6]
	movs r1, #2
	bl sub_08006074
	adds r0, r7, #0
	adds r0, #0x18
	adds r0, r4, r0
	ldrb r2, [r5, #7]
	movs r1, #2
	bl sub_08006074
	add sb, r4
	ldrb r2, [r5, #9]
	mov r0, sb
	movs r1, #2
	bl sub_08006074
	adds r0, r7, #0
	adds r0, #0x24
	adds r4, r4, r0
	ldrb r2, [r5, #8]
	adds r0, r4, #0
	movs r1, #2
	bl sub_08006074
	adds r6, #4
	lsls r6, r6, #6
	add r8, r6
	ldr r2, [r5, #0x10]
	mov r0, r8
	movs r1, #2
	bl sub_08006068
	add sl, r6
	ldrh r2, [r5, #0xc]
	mov r0, sl
	movs r1, #2
	bl sub_08006068
	adds r0, r7, #0
	adds r0, #0x1a
	adds r0, r6, r0
	ldrb r2, [r5, #0xe]
	movs r1, #2
	bl sub_08006068
	adds r0, r7, #0
	adds r0, #0x20
	adds r6, r6, r0
	ldrb r2, [r5, #0xf]
	adds r0, r6, #0
	movs r1, #2
	bl sub_08006068
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809EC6C: .4byte 0x02023C64
_0809EC70: .4byte 0x020144E0

	thumb_func_start sub_0809EC74
sub_0809EC74: @ 0x0809EC74
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0
	bl InitBgs
	bl sub_08005308
	bl ResetText
	ldr r4, _0809ED6C @ =gDispIo
	movs r2, #1
	ldrb r0, [r4, #1]
	orrs r0, r2
	movs r3, #2
	orrs r0, r3
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x11
	rsbs r1, r1, #0
	ands r0, r1
	strb r0, [r4, #1]
	adds r1, #0xd
	adds r0, r1, #0
	ldrb r5, [r4, #0xc]
	ands r0, r5
	orrs r0, r2
	strb r0, [r4, #0xc]
	adds r0, r1, #0
	ldrb r2, [r4, #0x10]
	ands r0, r2
	orrs r0, r3
	strb r0, [r4, #0x10]
	ldrb r5, [r4, #0x14]
	ands r1, r5
	strb r1, [r4, #0x14]
	movs r0, #3
	ldrb r1, [r4, #0x18]
	orrs r0, r1
	strb r0, [r4, #0x18]
	bl sub_0804A9F8
	bl EnablePalSync
	ldr r0, _0809ED70 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _0809ED74 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _0809ED78 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r0, _0809ED7C @ =gBg3Tm
	movs r1, #0
	bl TmFill
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r2, [r4, #1]
	ands r0, r2
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r4, #1]
	movs r0, #2
	str r0, [sp]
	movs r1, #6
	movs r2, #0x1a
	movs r3, #7
	bl sub_0804A4CC
	movs r0, #0xf
	bl EnableBgSync
	ldr r5, _0809ED80 @ =0x0201440C
	movs r4, #2
_0809ED44:
	adds r0, r5, #0
	movs r1, #0x1b
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _0809ED44
	ldr r0, [r6, #0x30]
	ldr r1, [r6, #0x34]
	bl sub_0809E9DC
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809ED84
	adds r0, r6, #0
	movs r1, #0x63
	bl Proc_Goto
	b _0809EDA6
	.align 2, 0
_0809ED6C: .4byte gDispIo
_0809ED70: .4byte gBg0Tm
_0809ED74: .4byte gBg1Tm
_0809ED78: .4byte gBg2Tm
_0809ED7C: .4byte gBg3Tm
_0809ED80: .4byte 0x0201440C
_0809ED84:
	movs r0, #5
	movs r1, #0x11
	bl sub_0809E1CC
	ldr r0, _0809EDB0 @ =sub_0809E7FC
	bl sub_0809E5F0
	ldr r0, _0809EDB4 @ =0x0201440C
	ldr r1, _0809EDB8 @ =0x08D8E040
	bl sub_0809EAAC
	movs r0, #0
	movs r1, #0
	movs r2, #0xa
	bl sub_0808068C
	str r0, [r6, #0x2c]
_0809EDA6:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809EDB0: .4byte sub_0809E7FC
_0809EDB4: .4byte 0x0201440C
_0809EDB8: .4byte 0x08D8E040

	thumb_func_start nullsub_080
nullsub_080: @ 0x0809EDBC
	bx lr
	.align 2, 0

	thumb_func_start sub_0809EDC0
sub_0809EDC0: @ 0x0809EDC0
	push {lr}
	ldr r0, [r0, #0x2c]
	bl Proc_End
	ldr r2, _0809EDEC @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	pop {r0}
	bx r0
	.align 2, 0
_0809EDEC: .4byte gDispIo

	thumb_func_start sub_0809EDF0
sub_0809EDF0: @ 0x0809EDF0
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r1, r2, #0
	ldr r0, _0809EE08 @ =0x08D8E084
	bl Proc_StartBlocking
	str r4, [r0, #0x30]
	str r5, [r0, #0x34]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0809EE08: .4byte 0x08D8E084

	thumb_func_start sub_0809EE0C
sub_0809EE0C: @ 0x0809EE0C
	ldr r0, _0809EE14 @ =0x0203E768
	movs r1, #0
	strb r1, [r0]
	bx lr
	.align 2, 0
_0809EE14: .4byte 0x0203E768

	thumb_func_start nullsub_081
nullsub_081: @ 0x0809EE18
	bx lr
	.align 2, 0

	thumb_func_start SramInit
SramInit: @ 0x0809EE1C
	push {r4, r5, lr}
	sub sp, #8
	ldr r0, _0809EE74 @ =0x12345678
	str r0, [sp]
	ldr r0, _0809EE78 @ =0x87654321
	str r0, [sp, #4]
	bl SetSramFastFunc
	ldr r2, _0809EE7C @ =0x04000200
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r5, _0809EE80 @ =0x08DAD280
	ldr r1, [r5]
	ldr r4, _0809EE84 @ =0x000073B8
	adds r1, r1, r4
	mov r0, sp
	movs r2, #4
	bl WriteSramFast
	ldr r2, _0809EE88 @ =0x03005D90
	ldr r0, [r5]
	adds r0, r0, r4
	add r1, sp, #4
	ldr r3, [r2]
	movs r2, #4
	bl _call_via_r3
	ldr r3, _0809EE8C @ =0x0203E772
	movs r2, #0
	ldr r1, [sp, #4]
	ldr r0, [sp]
	cmp r1, r0
	bne _0809EE68
	movs r2, #1
_0809EE68:
	strb r2, [r3]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809EE74: .4byte 0x12345678
_0809EE78: .4byte 0x87654321
_0809EE7C: .4byte 0x04000200
_0809EE80: .4byte 0x08DAD280
_0809EE84: .4byte 0x000073B8
_0809EE88: .4byte 0x03005D90
_0809EE8C: .4byte 0x0203E772

	thumb_func_start IsSramWorking
IsSramWorking: @ 0x0809EE90
	ldr r0, _0809EE9C @ =0x0203E772
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bx lr
	.align 2, 0
_0809EE9C: .4byte 0x0203E772

	thumb_func_start WipeSram
WipeSram: @ 0x0809EEA0
	push {r4, r5, r6, lr}
	sub sp, #0x40
	movs r1, #1
	rsbs r1, r1, #0
	add r0, sp, #0x3c
_0809EEAA:
	str r1, [r0]
	subs r0, #4
	cmp r0, sp
	bge _0809EEAA
	movs r4, #0
	ldr r6, _0809EED4 @ =0x08DAD280
	ldr r5, _0809EED8 @ =0x000001FF
_0809EEB8:
	lsls r0, r4, #6
	ldr r1, [r6]
	adds r1, r1, r0
	mov r0, sp
	movs r2, #0x40
	bl WriteAndVerifySramFast
	adds r4, #1
	cmp r4, r5
	ble _0809EEB8
	add sp, #0x40
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809EED4: .4byte 0x08DAD280
_0809EED8: .4byte 0x000001FF

	thumb_func_start Checksum16
Checksum16: @ 0x0809EEDC
	push {r4, lr}
	adds r2, r0, #0
	movs r3, #0
	movs r4, #0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	cmp r3, r1
	bge _0809EEFC
_0809EEEE:
	ldrh r0, [r2]
	adds r3, r3, r0
	eors r4, r0
	adds r2, #2
	subs r1, #1
	cmp r1, #0
	bne _0809EEEE
_0809EEFC:
	adds r0, r3, r4
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start ReadGlobalSaveInfo
ReadGlobalSaveInfo: @ 0x0809EF08
	push {r4, r5, lr}
	sub sp, #0x64
	adds r5, r0, #0
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809EF7C
	cmp r5, #0
	bne _0809EF1E
	mov r5, sp
_0809EF1E:
	ldr r1, _0809EF68 @ =0x03005D90
	ldr r0, _0809EF6C @ =0x08DAD280
	ldr r0, [r0]
	ldr r3, [r1]
	adds r1, r5, #0
	movs r2, #0x64
	bl _call_via_r3
	ldr r1, _0809EF70 @ =0x0842D268
	adds r0, r5, #0
	bl StringCompare
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809EF7C
	ldr r1, [r5, #8]
	ldr r0, _0809EF74 @ =0x00030317
	cmp r1, r0
	bne _0809EF7C
	ldr r0, _0809EF78 @ =0x0000200A
	ldrh r1, [r5, #0xc]
	cmp r1, r0
	bne _0809EF7C
	adds r4, r5, #0
	adds r4, #0x60
	adds r0, r5, #0
	movs r1, #0x50
	bl Checksum16
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r4, [r4]
	cmp r4, r0
	bne _0809EF7C
	movs r0, #1
	b _0809EF7E
	.align 2, 0
_0809EF68: .4byte 0x03005D90
_0809EF6C: .4byte 0x08DAD280
_0809EF70: .4byte 0x0842D268
_0809EF74: .4byte 0x00030317
_0809EF78: .4byte 0x0000200A
_0809EF7C:
	movs r0, #0
_0809EF7E:
	add sp, #0x64
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start WriteGlobalSaveInfo
WriteGlobalSaveInfo: @ 0x0809EF88
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0x50
	bl Checksum16
	adds r1, r4, #0
	adds r1, #0x60
	strh r0, [r1]
	ldr r0, _0809EFAC @ =0x08DAD280
	ldr r1, [r0]
	adds r0, r4, #0
	movs r2, #0x64
	bl WriteAndVerifySramFast
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809EFAC: .4byte 0x08DAD280

	thumb_func_start WriteGlobalSaveInfoNoChecksum
WriteGlobalSaveInfoNoChecksum: @ 0x0809EFB0
	push {lr}
	ldr r1, _0809EFC0 @ =0x08DAD280
	ldr r1, [r1]
	movs r2, #0x64
	bl WriteAndVerifySramFast
	pop {r0}
	bx r0
	.align 2, 0
_0809EFC0: .4byte 0x08DAD280

	thumb_func_start InitGlobalSaveInfodata
InitGlobalSaveInfodata: @ 0x0809EFC4
	push {r4, lr}
	sub sp, #0x64
	bl WipeSram
	ldr r1, _0809F088 @ =0x0842D268
	mov r0, sp
	bl CopyString
	ldr r0, _0809F08C @ =0x00030317
	str r0, [sp, #8]
	mov r1, sp
	movs r3, #0
	ldr r0, _0809F090 @ =0x0000200A
	strh r0, [r1, #0xc]
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r2, [r1, #0xe]
	ands r0, r2
	strb r0, [r1, #0xe]
	mov r2, sp
	movs r1, #3
	rsbs r1, r1, #0
	ands r1, r0
	strb r1, [r2, #0xe]
	movs r0, #5
	rsbs r0, r0, #0
	ands r0, r1
	strb r0, [r2, #0xe]
	movs r1, #9
	rsbs r1, r1, #0
	ands r1, r0
	strb r1, [r2, #0xe]
	movs r0, #0x11
	rsbs r0, r0, #0
	ands r0, r1
	strb r0, [r2, #0xe]
	movs r1, #0x21
	rsbs r1, r1, #0
	ands r1, r0
	strb r1, [r2, #0xe]
	movs r0, #0x41
	rsbs r0, r0, #0
	ands r0, r1
	strb r0, [r2, #0xe]
	mov r1, sp
	movs r0, #0
	strb r0, [r1, #0xe]
	mov r0, sp
	strb r3, [r0, #0xf]
	strb r3, [r0, #0x10]
	ldr r0, [sp, #0x10]
	ldr r1, _0809F094 @ =0xFF0000FF
	ands r0, r1
	str r0, [sp, #0x10]
	mov r1, sp
	movs r0, #0x20
	rsbs r0, r0, #0
	ldrb r2, [r1, #0x13]
	ands r0, r2
	strb r0, [r1, #0x13]
	mov r0, sp
	adds r0, #0x63
	strb r3, [r0]
	subs r0, #1
	strb r3, [r0]
	add r3, sp, #0x20
	add r4, sp, #0x40
	add r1, sp, #0x14
	movs r2, #0
	subs r0, #0x43
_0809F050:
	strb r2, [r0]
	subs r0, #1
	cmp r0, r1
	bge _0809F050
	adds r1, r3, #0
	movs r2, #0
	adds r0, r1, #0
	adds r0, #0x1f
_0809F060:
	strb r2, [r0]
	subs r0, #1
	cmp r0, r1
	bge _0809F060
	adds r1, r4, #0
	movs r2, #0
	adds r0, r1, #0
	adds r0, #0x1f
_0809F070:
	strb r2, [r0]
	subs r0, #1
	cmp r0, r1
	bge _0809F070
	mov r0, sp
	bl WriteGlobalSaveInfo
	add sp, #0x64
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809F088: .4byte 0x0842D268
_0809F08C: .4byte 0x00030317
_0809F090: .4byte 0x0000200A
_0809F094: .4byte 0xFF0000FF

	thumb_func_start EraseBonusContentData
EraseBonusContentData: @ 0x0809F098
	push {lr}
	sub sp, #0x28
	add r0, sp, #0x24
	movs r1, #0
	strh r1, [r0]
	ldr r2, _0809F0B8 @ =0x01000012
	mov r1, sp
	bl CpuSet
	mov r0, sp
	bl sub_0809FA94
	add sp, #0x28
	pop {r0}
	bx r0
	.align 2, 0
_0809F0B8: .4byte 0x01000012

	thumb_func_start sub_0809F0BC
sub_0809F0BC: @ 0x0809F0BC
	push {r4, lr}
	sub sp, #4
	ldr r4, _0809F0E0 @ =gBuf
	mov r1, sp
	movs r0, #0
	strh r0, [r1]
	ldr r2, _0809F0E4 @ =0x01000142
	mov r0, sp
	adds r1, r4, #0
	bl CpuSet
	adds r0, r4, #0
	bl sub_0809FBCC
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809F0E0: .4byte gBuf
_0809F0E4: .4byte 0x01000142

	thumb_func_start SramOffsetToAddr
SramOffsetToAddr: @ 0x0809F0E8
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r1, _0809F0F8 @ =0x08DAD280
	ldr r1, [r1]
	adds r1, r1, r0
	adds r0, r1, #0
	bx lr
	.align 2, 0
_0809F0F8: .4byte 0x08DAD280

	thumb_func_start SramAddrToOffset
SramAddrToOffset: @ 0x0809F0FC
	ldr r1, _0809F108 @ =0x08DAD280
	ldr r1, [r1]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bx lr
	.align 2, 0
_0809F108: .4byte 0x08DAD280

	thumb_func_start ReadSaveBlockInfo
ReadSaveBlockInfo: @ 0x0809F10C
	push {r4, r5, lr}
	sub sp, #0x10
	adds r4, r0, #0
	adds r5, r1, #0
	cmp r4, #0
	bne _0809F11A
	mov r4, sp
_0809F11A:
	ldr r2, _0809F148 @ =0x03005D90
	ldr r0, _0809F14C @ =0x08DAD280
	lsls r1, r5, #4
	adds r1, #0x64
	ldr r0, [r0]
	adds r0, r0, r1
	ldr r3, [r2]
	adds r1, r4, #0
	movs r2, #0x10
	bl _call_via_r3
	ldr r0, _0809F150 @ =0x0000200A
	ldrh r1, [r4, #4]
	cmp r1, r0
	bne _0809F1A4
	cmp r5, #6
	bhi _0809F1A4
	lsls r0, r5, #2
	ldr r1, _0809F154 @ =_0809F158
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0809F148: .4byte 0x03005D90
_0809F14C: .4byte 0x08DAD280
_0809F150: .4byte 0x0000200A
_0809F154: .4byte _0809F158
_0809F158: @ jump table
	.4byte _0809F174 @ case 0
	.4byte _0809F174 @ case 1
	.4byte _0809F174 @ case 2
	.4byte _0809F17C @ case 3
	.4byte _0809F17C @ case 4
	.4byte _0809F184 @ case 5
	.4byte _0809F18C @ case 6
_0809F174:
	ldr r1, _0809F178 @ =0x00011217
	b _0809F18E
	.align 2, 0
_0809F178: .4byte 0x00011217
_0809F17C:
	ldr r1, _0809F180 @ =0x00020509
	b _0809F18E
	.align 2, 0
_0809F180: .4byte 0x00020509
_0809F184:
	ldr r1, _0809F188 @ =0x00020112
	b _0809F18E
	.align 2, 0
_0809F188: .4byte 0x00020112
_0809F18C:
	ldr r1, _0809F1A0 @ =0x00020223
_0809F18E:
	ldr r0, [r4]
	cmp r0, r1
	bne _0809F1A4
	adds r0, r4, #0
	bl sub_080A232C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _0809F1A6
	.align 2, 0
_0809F1A0: .4byte 0x00020223
_0809F1A4:
	movs r0, #0
_0809F1A6:
	add sp, #0x10
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start WriteSaveBlockInfo
WriteSaveBlockInfo: @ 0x0809F1B0
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r6, r1, #0
	movs r7, #0
	movs r5, #0
	ldr r0, _0809F1E0 @ =0x0000200A
	strh r0, [r4, #4]
	adds r0, r6, #0
	bl GetSaveWriteAddr
	strh r0, [r4, #8]
	cmp r6, #6
	bgt _0809F236
	ldrb r0, [r4, #6]
	cmp r0, #2
	beq _0809F204
	cmp r0, #2
	bgt _0809F1E4
	cmp r0, #0
	beq _0809F1EE
	cmp r0, #1
	beq _0809F1F8
	b _0809F236
	.align 2, 0
_0809F1E0: .4byte 0x0000200A
_0809F1E4:
	cmp r0, #3
	beq _0809F210
	cmp r0, #0xff
	beq _0809F218
	b _0809F236
_0809F1EE:
	ldr r0, _0809F1F4 @ =0x00000D8C
	strh r0, [r4, #0xa]
	b _0809F21E
	.align 2, 0
_0809F1F4: .4byte 0x00000D8C
_0809F1F8:
	ldr r0, _0809F200 @ =0x00001F2C
	strh r0, [r4, #0xa]
	b _0809F21E
	.align 2, 0
_0809F200: .4byte 0x00001F2C
_0809F204:
	ldr r0, _0809F20C @ =0x00000874
	strh r0, [r4, #0xa]
	b _0809F21E
	.align 2, 0
_0809F20C: .4byte 0x00000874
_0809F210:
	movs r0, #0xc0
	lsls r0, r0, #4
	strh r0, [r4, #0xa]
	b _0809F21E
_0809F218:
	strh r5, [r4, #0xa]
	strh r5, [r4, #8]
	strh r5, [r4, #4]
_0809F21E:
	adds r0, r4, #0
	bl sub_080A2350
	ldr r0, _0809F23C @ =0x08DAD280
	lsls r2, r6, #4
	adds r2, #0x64
	ldr r1, [r0]
	adds r1, r1, r2
	adds r0, r4, #0
	movs r2, #0x10
	bl WriteAndVerifySramFast
_0809F236:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809F23C: .4byte 0x08DAD280

	thumb_func_start EraseSaveBlockInfo
EraseSaveBlockInfo: @ 0x0809F240
	push {r4, lr}
	sub sp, #0x14
	adds r4, r0, #0
	cmp r4, #6
	bgt _0809F26C
	add r0, sp, #0x10
	ldr r2, _0809F274 @ =0x0000FFFF
	adds r1, r2, #0
	strh r1, [r0]
	ldr r2, _0809F278 @ =0x01000008
	mov r1, sp
	bl CpuSet
	ldr r1, _0809F27C @ =0x08DAD280
	lsls r0, r4, #4
	adds r0, #0x64
	ldr r1, [r1]
	adds r1, r1, r0
	mov r0, sp
	movs r2, #0x10
	bl WriteAndVerifySramFast
_0809F26C:
	add sp, #0x14
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809F274: .4byte 0x0000FFFF
_0809F278: .4byte 0x01000008
_0809F27C: .4byte 0x08DAD280

	thumb_func_start GetSaveWriteAddr
GetSaveWriteAddr: @ 0x0809F280
	cmp r0, #6
	bhi _0809F324
	lsls r0, r0, #2
	ldr r1, _0809F290 @ =_0809F294
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0809F290: .4byte _0809F294
_0809F294: @ jump table
	.4byte _0809F2B0 @ case 0
	.4byte _0809F2C4 @ case 1
	.4byte _0809F2D8 @ case 2
	.4byte _0809F2EC @ case 3
	.4byte _0809F2F8 @ case 4
	.4byte _0809F308 @ case 5
	.4byte _0809F31C @ case 6
_0809F2B0:
	ldr r0, _0809F2BC @ =0x08DAD280
	ldr r0, [r0]
	ldr r1, _0809F2C0 @ =0x00003F2C
	adds r0, r0, r1
	b _0809F326
	.align 2, 0
_0809F2BC: .4byte 0x08DAD280
_0809F2C0: .4byte 0x00003F2C
_0809F2C4:
	ldr r0, _0809F2D0 @ =0x08DAD280
	ldr r0, [r0]
	ldr r1, _0809F2D4 @ =0x00004CB8
	adds r0, r0, r1
	b _0809F326
	.align 2, 0
_0809F2D0: .4byte 0x08DAD280
_0809F2D4: .4byte 0x00004CB8
_0809F2D8:
	ldr r0, _0809F2E4 @ =0x08DAD280
	ldr r0, [r0]
	ldr r1, _0809F2E8 @ =0x00005A44
	adds r0, r0, r1
	b _0809F326
	.align 2, 0
_0809F2E4: .4byte 0x08DAD280
_0809F2E8: .4byte 0x00005A44
_0809F2EC:
	ldr r0, _0809F2F4 @ =0x08DAD280
	ldr r0, [r0]
	adds r0, #0xd4
	b _0809F326
	.align 2, 0
_0809F2F4: .4byte 0x08DAD280
_0809F2F8:
	ldr r0, _0809F304 @ =0x08DAD280
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	adds r0, r0, r1
	b _0809F326
	.align 2, 0
_0809F304: .4byte 0x08DAD280
_0809F308:
	ldr r0, _0809F314 @ =0x08DAD280
	ldr r0, [r0]
	ldr r1, _0809F318 @ =0x000067D0
	adds r0, r0, r1
	b _0809F326
	.align 2, 0
_0809F314: .4byte 0x08DAD280
_0809F318: .4byte 0x000067D0
_0809F31C:
	ldr r0, _0809F320 @ =0x0E007400
	b _0809F326
	.align 2, 0
_0809F320: .4byte 0x0E007400
_0809F324:
	movs r0, #0
_0809F326:
	bx lr

	thumb_func_start GetSaveReadAddr
GetSaveReadAddr: @ 0x0809F328
	push {lr}
	sub sp, #0x10
	adds r1, r0, #0
	mov r0, sp
	bl ReadSaveBlockInfo
	mov r0, sp
	ldrh r0, [r0, #8]
	bl SramOffsetToAddr
	add sp, #0x10
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0809F344
sub_0809F344: @ 0x0809F344
	push {r4, r5, lr}
	adds r4, r0, #0
	bl sub_0807A100
	adds r5, r0, #0
	bl sub_0807A108
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r4, #0
	bl WriteAndVerifySramFast
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0809F364
sub_0809F364: @ 0x0809F364
	push {r4, r5, lr}
	adds r4, r0, #0
	bl sub_0807A0F4
	adds r5, r0, #0
	bl sub_0807A0FC
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r4, #0
	bl WriteAndVerifySramFast
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0809F384
sub_0809F384: @ 0x0809F384
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r4, _0809F3A8 @ =0x03005D90
	bl sub_0807A100
	adds r5, r0, #0
	bl sub_0807A108
	adds r2, r0, #0
	ldr r3, [r4]
	adds r0, r6, #0
	adds r1, r5, #0
	bl _call_via_r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809F3A8: .4byte 0x03005D90

	thumb_func_start sub_0809F3AC
sub_0809F3AC: @ 0x0809F3AC
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r4, _0809F3D0 @ =0x03005D90
	bl sub_0807A0F4
	adds r5, r0, #0
	bl sub_0807A0FC
	adds r2, r0, #0
	ldr r3, [r4]
	adds r0, r6, #0
	adds r1, r5, #0
	bl _call_via_r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809F3D0: .4byte 0x03005D90

	thumb_func_start sub_0809F3D4
sub_0809F3D4: @ 0x0809F3D4
	push {r4, lr}
	adds r4, r0, #0
	bl sub_0802EBCC
	adds r1, r4, #0
	movs r2, #0xc8
	bl WriteAndVerifySramFast
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0809F3EC
sub_0809F3EC: @ 0x0809F3EC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _0809F408 @ =0x03005D90
	bl sub_0802EBCC
	adds r1, r0, #0
	ldr r3, [r4]
	adds r0, r5, #0
	movs r2, #0xc8
	bl _call_via_r3
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809F408: .4byte 0x03005D90

	thumb_func_start sub_0809F40C
sub_0809F40C: @ 0x0809F40C
	push {r4, r5, lr}
	sub sp, #0x64
	movs r4, #0
	mov r0, sp
	bl ReadGlobalSaveInfo
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809F45C
	mov r0, sp
	bl sub_080A0D58
	adds r5, r0, #0
	bl sub_0809F9F8
	rsbs r1, r0, #0
	orrs r1, r0
	asrs r4, r1, #0x1f
	movs r0, #2
	ands r4, r0
	mov r0, sp
	ldrb r1, [r0, #0xe]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0809F45C
	movs r0, #0xc
	ands r0, r1
	cmp r0, #0
	beq _0809F44A
	movs r4, #0xf
_0809F44A:
	movs r2, #0x10
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _0809F456
	orrs r4, r2
_0809F456:
	cmp r5, #4
	ble _0809F45C
	orrs r4, r2
_0809F45C:
	adds r0, r4, #0
	add sp, #0x64
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0809F468
sub_0809F468: @ 0x0809F468
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl ReadGlobalSaveInfo
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809F47C
	movs r0, #0
	b _0809F484
_0809F47C:
	mov r0, sp
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x1b
	lsrs r0, r0, #0x1f
_0809F484:
	add sp, #0x64
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0809F48C
sub_0809F48C: @ 0x0809F48C
	movs r0, #1
	bx lr

	thumb_func_start sub_0809F490
sub_0809F490: @ 0x0809F490
	push {r4, lr}
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809F4A4
	movs r0, #0
	b _0809F4C0
_0809F4A0:
	movs r0, #1
	b _0809F4C0
_0809F4A4:
	movs r4, #0
_0809F4A6:
	adds r0, r4, #0
	bl sub_080A13B8
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809F4A0
	adds r4, #1
	cmp r4, #2
	ble _0809F4A6
	bl sub_080A294C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
_0809F4C0:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0809F4C8
sub_0809F4C8: @ 0x0809F4C8
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl ReadGlobalSaveInfo
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809F4E8
	mov r1, sp
	movs r0, #3
	ldrb r1, [r1, #0xe]
	ands r0, r1
	cmp r0, #0
	beq _0809F4E8
	movs r0, #1
	b _0809F4EA
_0809F4E8:
	movs r0, #0
_0809F4EA:
	add sp, #0x64
	pop {r1}
	bx r1

	thumb_func_start sub_0809F4F0
sub_0809F4F0: @ 0x0809F4F0
	push {r4, lr}
	movs r0, #0
	bl sub_0809F994
	adds r4, r0, #0
	bl sub_0809F9D0
	ands r0, r4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0809F50C
sub_0809F50C: @ 0x0809F50C
	push {r4, lr}
	sub sp, #0x94
	movs r4, #0
	bl sub_0809F9D0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809F520
	movs r0, #0
	b _0809F580
_0809F520:
	mov r0, sp
	bl sub_0809FB14
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809F57E
	mov r0, sp
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	cmp r0, #0
	beq _0809F538
	movs r4, #1
_0809F538:
	mov r0, sp
	ldrb r0, [r0, #0x18]
	lsls r0, r0, #0x1f
	cmp r0, #0
	beq _0809F546
	movs r0, #2
	orrs r4, r0
_0809F546:
	add r0, sp, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	cmp r0, #0
	beq _0809F554
	movs r0, #4
	orrs r4, r0
_0809F554:
	add r0, sp, #0x48
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	cmp r0, #0
	beq _0809F562
	movs r0, #8
	orrs r4, r0
_0809F562:
	add r0, sp, #0x60
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	cmp r0, #0
	beq _0809F570
	movs r0, #0x10
	orrs r4, r0
_0809F570:
	add r0, sp, #0x78
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	cmp r0, #0
	beq _0809F57E
	movs r0, #0x20
	orrs r4, r0
_0809F57E:
	adds r0, r4, #0
_0809F580:
	add sp, #0x94
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_0809F588
sub_0809F588: @ 0x0809F588
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl ReadGlobalSaveInfo
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809F5A6
	bl sub_080A2AE0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809F5A6
	movs r0, #1
	b _0809F5A8
_0809F5A6:
	movs r0, #0
_0809F5A8:
	add sp, #0x64
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0809F5B0
sub_0809F5B0: @ 0x0809F5B0
	push {r4, lr}
	sub sp, #0x48
	ldr r4, _0809F5EC @ =gBuf
	adds r0, r4, #0
	bl sub_0809FB70
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809F5F0
	movs r3, #0
	adds r1, r4, #0
	movs r2, #0x1f
_0809F5C8:
	ldrb r0, [r1]
	cmp r0, #0
	beq _0809F5DC
	ldrb r0, [r1, #1]
	cmp r0, #0
	bne _0809F5D6
	movs r3, #1
_0809F5D6:
	cmp r0, #2
	bne _0809F5DC
	movs r3, #1
_0809F5DC:
	adds r1, #0x14
	subs r2, #1
	cmp r2, #0
	bge _0809F5C8
	cmp r3, #0
	beq _0809F5F0
	movs r0, #1
	b _0809F5F2
	.align 2, 0
_0809F5EC: .4byte gBuf
_0809F5F0:
	movs r0, #0
_0809F5F2:
	add sp, #0x48
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0809F5FC
sub_0809F5FC: @ 0x0809F5FC
	push {r4, r5, r6, r7, lr}
	adds r2, r0, #0
	ldr r7, _0809F62C @ =0x08DAD284
	ldr r0, [r7]
	cmp r0, #0
	beq _0809F658
	movs r6, #0
	adds r5, r7, #0
	adds r3, r7, #4
	adds r4, r7, #0
_0809F610:
	ldr r0, [r4]
	cmp r0, r2
	bne _0809F61C
	ldr r0, [r3]
	cmp r0, r1
	bne _0809F628
_0809F61C:
	ldr r0, [r4]
	cmp r0, r1
	bne _0809F630
	ldr r0, [r3]
	cmp r0, r2
	beq _0809F636
_0809F628:
	movs r0, #2
	b _0809F65A
	.align 2, 0
_0809F62C: .4byte 0x08DAD284
_0809F630:
	ldr r0, [r3]
	cmp r0, r2
	bne _0809F63C
_0809F636:
	ldr r0, [r4]
	cmp r0, r1
	bne _0809F628
_0809F63C:
	ldr r0, [r3]
	cmp r0, r1
	bne _0809F648
	ldr r0, [r5]
	cmp r0, r2
	bne _0809F628
_0809F648:
	adds r6, #8
	adds r5, #8
	adds r3, #8
	adds r4, #8
	adds r0, r6, r7
	ldr r0, [r0]
	cmp r0, #0
	bne _0809F610
_0809F658:
	movs r0, #3
_0809F65A:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_0809F660
sub_0809F660: @ 0x0809F660
	push {r4, r5, lr}
	movs r5, #0
	ldr r4, _0809F668 @ =0x08D67934
	b _0809F678
	.align 2, 0
_0809F668: .4byte 0x08D67934
_0809F66C:
	ldrb r0, [r4]
	ldrb r1, [r4, #1]
	bl sub_0809F5FC
	adds r5, r5, r0
	adds r4, #0x14
_0809F678:
	ldrb r0, [r4]
	cmp r0, #0
	bne _0809F66C
	adds r0, r5, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0809F688
sub_0809F688: @ 0x0809F688
	push {r4, r5, r6, r7, lr}
	sub sp, #0x64
	adds r4, r0, #0
	movs r5, #0
	cmp r4, #0
	bne _0809F69C
	mov r4, sp
	mov r0, sp
	bl ReadGlobalSaveInfo
_0809F69C:
	movs r0, #0
	adds r7, r4, #0
	adds r7, #0x20
	movs r6, #3
_0809F6A4:
	movs r2, #0
	adds r4, r0, #1
	adds r0, r7, r0
	ldrb r3, [r0]
_0809F6AC:
	lsls r1, r2, #1
	adds r0, r3, #0
	asrs r0, r1
	ands r0, r6
	adds r5, r5, r0
	adds r2, #1
	cmp r2, #3
	ble _0809F6AC
	adds r0, r4, #0
	cmp r0, #0x1f
	ble _0809F6A4
	adds r0, r5, #0
	add sp, #0x64
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_0809F6CC
sub_0809F6CC: @ 0x0809F6CC
	push {r4, r5, lr}
	movs r0, #0
	bl sub_0809F688
	adds r4, r0, #0
	bl sub_0809F660
	adds r5, r0, #0
	cmp r4, #0
	ble _0809F6F2
	movs r0, #0x64
	muls r0, r4, r0
	adds r1, r5, #0
	bl __divsi3
	cmp r0, #0
	bne _0809F6F2
	movs r4, #1
	b _0809F6FE
_0809F6F2:
	movs r0, #0x64
	muls r0, r4, r0
	adds r1, r5, #0
	bl __divsi3
	adds r4, r0, #0
_0809F6FE:
	cmp r4, #0x64
	ble _0809F704
	movs r4, #0x64
_0809F704:
	adds r0, r4, #0
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_0809F70C
sub_0809F70C: @ 0x0809F70C
	push {r4, r5, r6, r7, lr}
	sub sp, #0x68
	adds r3, r0, #0
	adds r7, r1, #0
	adds r4, r2, #0
	movs r6, #0
	ldr r5, _0809F730 @ =0x08D67934
	cmp r4, #0
	bne _0809F72A
	mov r4, sp
	mov r0, sp
	str r3, [sp, #0x64]
	bl ReadGlobalSaveInfo
	ldr r3, [sp, #0x64]
_0809F72A:
	adds r4, #0x20
	b _0809F738
	.align 2, 0
_0809F730: .4byte 0x08D67934
_0809F734:
	adds r6, #1
	adds r5, #0x14
_0809F738:
	ldrb r0, [r5]
	cmp r0, #0
	beq _0809F754
	adds r1, r0, #0
	cmp r1, r3
	bne _0809F74A
	ldrb r0, [r5, #1]
	cmp r0, r7
	beq _0809F754
_0809F74A:
	cmp r1, r7
	bne _0809F734
	ldrb r0, [r5, #1]
	cmp r0, r3
	bne _0809F734
_0809F754:
	asrs r1, r6, #2
	movs r2, #3
	ands r6, r2
	lsls r0, r6, #1
	adds r1, r4, r1
	ldrb r1, [r1]
	asrs r1, r0
	adds r0, r1, #0
	ands r0, r2
	add sp, #0x68
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0809F770
sub_0809F770: @ 0x0809F770
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x78
	mov sb, r0
	adds r6, r1, #0
	mov sl, r2
	ldr r1, _0809F7B0 @ =0x08C4C158
	mov r7, sb
	subs r7, #1
	movs r0, #0x34
	adds r2, r7, #0
	muls r2, r0, r2
	str r2, [sp, #0x64]
	adds r0, r1, #0
	adds r0, #0x2c
	adds r2, r2, r0
	mov r8, r2
	ldr r0, [r2]
	cmp r0, #0
	bne _0809F7B4
	movs r0, #0
	movs r1, #6
_0809F7A2:
	strb r0, [r6]
	adds r6, #1
	subs r1, #1
	cmp r1, #0
	bge _0809F7A2
	b _0809F876
	.align 2, 0
_0809F7B0: .4byte 0x08C4C158
_0809F7B4:
	movs r5, #0
	ldr r4, _0809F83C @ =0x08D67934
	mov r3, sl
	cmp r3, #0
	bne _0809F7C6
	mov sl, sp
	mov r0, sp
	bl ReadGlobalSaveInfo
_0809F7C6:
	ldrb r0, [r4]
	str r7, [sp, #0x70]
	cmp r0, #0
	beq _0809F856
	mov r7, r8
	str r7, [sp, #0x6c]
	ldr r0, [sp, #0x64]
	str r0, [sp, #0x68]
_0809F7D6:
	ldrb r0, [r4]
	cmp r0, sb
	beq _0809F7EC
	ldrb r0, [r4, #1]
	adds r1, r5, #1
	mov ip, r1
	adds r2, r4, #0
	adds r2, #0x14
	str r2, [sp, #0x74]
	cmp r0, sb
	bne _0809F84C
_0809F7EC:
	asrs r2, r5, #2
	adds r0, r5, #0
	movs r3, #3
	ands r0, r3
	lsls r0, r0, #1
	mov r8, r0
	movs r1, #0
	ldr r7, [sp, #0x6c]
	ldr r0, [r7]
	adds r5, #1
	mov ip, r5
	adds r3, r4, #0
	adds r3, #0x14
	str r3, [sp, #0x74]
	ldrb r0, [r0, #0x15]
	cmp r1, r0
	bge _0809F84C
	ldr r0, _0809F840 @ =0x08C4C184
	ldr r5, [sp, #0x68]
	adds r3, r5, r0
	mov r0, sl
	adds r0, #0x20
	adds r5, r0, r2
_0809F81A:
	ldr r2, [r3]
	adds r0, r2, r1
	ldrb r0, [r0]
	ldrb r7, [r4]
	cmp r7, r0
	beq _0809F82C
	ldrb r7, [r4, #1]
	cmp r7, r0
	bne _0809F844
_0809F82C:
	adds r1, r6, r1
	ldrb r0, [r5]
	mov r2, r8
	asrs r0, r2
	movs r3, #3
	ands r0, r3
	strb r0, [r1]
	b _0809F84C
	.align 2, 0
_0809F83C: .4byte 0x08D67934
_0809F840: .4byte 0x08C4C184
_0809F844:
	adds r1, #1
	ldrb r2, [r2, #0x15]
	cmp r1, r2
	blt _0809F81A
_0809F84C:
	mov r5, ip
	ldr r4, [sp, #0x74]
	ldrb r0, [r4]
	cmp r0, #0
	bne _0809F7D6
_0809F856:
	movs r0, #0x34
	ldr r5, [sp, #0x70]
	muls r0, r5, r0
	ldr r1, _0809F888 @ =0x08C4C158
	adds r1, #0x2c
	adds r0, r0, r1
	ldr r0, [r0]
	ldrb r1, [r0, #0x15]
	cmp r1, #6
	bgt _0809F876
	movs r2, #0
_0809F86C:
	adds r0, r6, r1
	strb r2, [r0]
	adds r1, #1
	cmp r1, #6
	ble _0809F86C
_0809F876:
	add sp, #0x78
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809F888: .4byte 0x08C4C158

	thumb_func_start sub_0809F88C
sub_0809F88C: @ 0x0809F88C
	push {r4, r5, r6, r7, lr}
	sub sp, #0x64
	adds r5, r0, #0
	adds r4, r1, #0
	movs r6, #3
	ands r6, r2
	mov r0, sp
	bl ReadGlobalSaveInfo
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809F8FC
	movs r3, #0
	ldr r2, _0809F8AC @ =0x08D67934
	add r7, sp, #0x20
	b _0809F8B4
	.align 2, 0
_0809F8AC: .4byte 0x08D67934
_0809F8B0:
	adds r3, #1
	adds r2, #0x14
_0809F8B4:
	ldrb r0, [r2]
	cmp r0, #0
	beq _0809F8D0
	adds r1, r0, #0
	cmp r1, r5
	bne _0809F8C6
	ldrb r0, [r2, #1]
	cmp r0, r4
	beq _0809F8D0
_0809F8C6:
	cmp r1, r4
	bne _0809F8B0
	ldrb r0, [r2, #1]
	cmp r0, r5
	bne _0809F8B0
_0809F8D0:
	asrs r0, r3, #2
	movs r4, #3
	ands r3, r4
	lsls r1, r3, #1
	adds r3, r7, r0
	ldrb r2, [r3]
	adds r0, r2, #0
	asrs r0, r1
	ands r0, r4
	cmp r0, r6
	bge _0809F8FC
	adds r0, r4, #0
	lsls r0, r1
	bics r2, r0
	lsls r6, r1
	adds r0, r2, r6
	strb r0, [r3]
	mov r0, sp
	bl WriteGlobalSaveInfo
	movs r0, #1
	b _0809F8FE
_0809F8FC:
	movs r0, #0
_0809F8FE:
	add sp, #0x64
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0809F908
sub_0809F908: @ 0x0809F908
	push {r4, r5, lr}
	sub sp, #0x64
	adds r4, r0, #0
	adds r5, r1, #0
	movs r3, #0
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r4, r0
	bgt _0809F948
	cmp r5, #0
	bne _0809F928
	mov r5, sp
	mov r0, sp
	bl ReadGlobalSaveInfo
	movs r3, #1
_0809F928:
	asrs r0, r4, #3
	adds r2, r5, #0
	adds r2, #0x40
	adds r2, r2, r0
	movs r1, #7
	ands r1, r4
	movs r0, #1
	lsls r0, r1
	ldrb r1, [r2]
	orrs r0, r1
	strb r0, [r2]
	cmp r3, #0
	beq _0809F948
	adds r0, r5, #0
	bl WriteGlobalSaveInfo
_0809F948:
	add sp, #0x64
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_0809F950
sub_0809F950: @ 0x0809F950
	push {r4, r5, lr}
	sub sp, #0x64
	adds r5, r0, #0
	adds r4, r1, #0
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r5, r0
	bgt _0809F986
	cmp r4, #0
	bne _0809F96C
	mov r4, sp
	mov r0, sp
	bl ReadGlobalSaveInfo
_0809F96C:
	asrs r0, r5, #3
	adds r1, r4, #0
	adds r1, #0x40
	adds r1, r1, r0
	movs r0, #7
	ands r0, r5
	ldrb r1, [r1]
	asrs r1, r0
	adds r0, r1, #0
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	bne _0809F98A
_0809F986:
	movs r0, #0
	b _0809F98C
_0809F98A:
	movs r0, #1
_0809F98C:
	add sp, #0x64
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_0809F994
sub_0809F994: @ 0x0809F994
	push {r4, lr}
	sub sp, #0x64
	adds r4, r0, #0
	cmp r4, #0
	bne _0809F9A6
	mov r4, sp
	mov r0, sp
	bl ReadGlobalSaveInfo
_0809F9A6:
	movs r1, #0
	adds r2, r4, #0
	adds r2, #0x40
_0809F9AC:
	adds r0, r2, r1
	ldrb r0, [r0]
	cmp r0, #0
	beq _0809F9B8
	movs r0, #1
	b _0809F9C0
_0809F9B8:
	adds r1, #1
	cmp r1, #0x1f
	ble _0809F9AC
	movs r0, #0
_0809F9C0:
	add sp, #0x64
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start nullsub_082
nullsub_082: @ 0x0809F9C8
	bx lr
	.align 2, 0

	thumb_func_start nullsub_083
nullsub_083: @ 0x0809F9CC
	bx lr
	.align 2, 0

	thumb_func_start sub_0809F9D0
sub_0809F9D0: @ 0x0809F9D0
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl ReadGlobalSaveInfo
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809F9F0
	mov r1, sp
	movs r0, #1
	ldrb r1, [r1, #0xe]
	ands r0, r1
	cmp r0, #0
	beq _0809F9F0
	movs r0, #1
	b _0809F9F2
_0809F9F0:
	movs r0, #0
_0809F9F2:
	add sp, #0x64
	pop {r1}
	bx r1

	thumb_func_start sub_0809F9F8
sub_0809F9F8: @ 0x0809F9F8
	push {r4, lr}
	sub sp, #0x88
	add r4, sp, #0x24
	adds r0, r4, #0
	bl ReadGlobalSaveInfo
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809FA20
	adds r0, r4, #0
	bl sub_080A0D58
	cmp r0, #9
	ble _0809FA18
	movs r0, #2
	b _0809FA34
_0809FA18:
	cmp r0, #7
	ble _0809FA20
	movs r0, #1
	b _0809FA34
_0809FA20:
	mov r0, sp
	bl sub_0809FA3C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809FA30
	movs r0, #0
	b _0809FA34
_0809FA30:
	mov r0, sp
	ldrh r0, [r0, #0x20]
_0809FA34:
	add sp, #0x88
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_0809FA3C
sub_0809FA3C: @ 0x0809FA3C
	push {r4, lr}
	sub sp, #0x24
	adds r4, r0, #0
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809FA88
	cmp r4, #0
	bne _0809FA52
	mov r4, sp
_0809FA52:
	ldr r1, _0809FA7C @ =0x03005D90
	ldr r0, _0809FA80 @ =0x08DAD280
	ldr r0, [r0]
	ldr r2, _0809FA84 @ =0x000070D8
	adds r0, r0, r2
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #0x24
	bl _call_via_r3
	adds r0, r4, #0
	movs r1, #0x22
	bl Checksum16
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r4, [r4, #0x22]
	cmp r4, r0
	bne _0809FA88
	movs r0, #1
	b _0809FA8A
	.align 2, 0
_0809FA7C: .4byte 0x03005D90
_0809FA80: .4byte 0x08DAD280
_0809FA84: .4byte 0x000070D8
_0809FA88:
	movs r0, #0
_0809FA8A:
	add sp, #0x24
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_0809FA94
sub_0809FA94: @ 0x0809FA94
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0x22
	bl Checksum16
	strh r0, [r4, #0x22]
	ldr r0, _0809FAB8 @ =0x08DAD280
	ldr r1, [r0]
	ldr r0, _0809FABC @ =0x000070D8
	adds r1, r1, r0
	adds r0, r4, #0
	movs r2, #0x24
	bl WriteAndVerifySramFast
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809FAB8: .4byte 0x08DAD280
_0809FABC: .4byte 0x000070D8

	thumb_func_start sub_0809FAC0
sub_0809FAC0: @ 0x0809FAC0
	push {lr}
	sub sp, #4
	adds r1, r0, #0
	movs r0, #0
	str r0, [sp]
	ldr r2, _0809FAD8 @ =0x01000009
	mov r0, sp
	bl CpuFastSet
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_0809FAD8: .4byte 0x01000009

	thumb_func_start sub_0809FADC
sub_0809FADC: @ 0x0809FADC
	asrs r2, r1, #5
	lsls r2, r2, #2
	adds r0, r0, r2
	ldr r0, [r0]
	movs r2, #0x1f
	ands r2, r1
	movs r1, #1
	lsls r1, r2
	ands r0, r1
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bx lr

	thumb_func_start sub_0809FAF4
sub_0809FAF4: @ 0x0809FAF4
	asrs r2, r1, #5
	lsls r2, r2, #2
	adds r0, r0, r2
	movs r2, #0x1f
	ands r2, r1
	movs r3, #1
	lsls r3, r2
	ldr r1, [r0]
	orrs r1, r3
	str r1, [r0]
	bx lr
	.align 2, 0

	thumb_func_start sub_0809FB0C
sub_0809FB0C: @ 0x0809FB0C
	strh r1, [r0, #0x20]
	bx lr

	thumb_func_start sub_0809FB10
sub_0809FB10: @ 0x0809FB10
	ldrh r0, [r0, #0x20]
	bx lr

	thumb_func_start sub_0809FB14
sub_0809FB14: @ 0x0809FB14
	push {r4, r5, lr}
	adds r5, r0, #0
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809FB68
	cmp r5, #0
	bne _0809FB28
	ldr r5, _0809FB58 @ =gBuf
_0809FB28:
	ldr r1, _0809FB5C @ =0x03005D90
	ldr r0, _0809FB60 @ =0x08DAD280
	ldr r0, [r0]
	ldr r2, _0809FB64 @ =0x00007044
	adds r0, r0, r2
	ldr r3, [r1]
	adds r1, r5, #0
	movs r2, #0x94
	bl _call_via_r3
	adds r4, r5, #0
	adds r4, #0x90
	adds r0, r5, #0
	movs r1, #0x90
	bl Checksum16
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r4, [r4]
	cmp r4, r0
	bne _0809FB68
	movs r0, #1
	b _0809FB6A
	.align 2, 0
_0809FB58: .4byte gBuf
_0809FB5C: .4byte 0x03005D90
_0809FB60: .4byte 0x08DAD280
_0809FB64: .4byte 0x00007044
_0809FB68:
	movs r0, #0
_0809FB6A:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_0809FB70
sub_0809FB70: @ 0x0809FB70
	push {r4, r5, lr}
	adds r5, r0, #0
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809FBC4
	cmp r5, #0
	bne _0809FB84
	ldr r5, _0809FBB4 @ =gBuf
_0809FB84:
	ldr r1, _0809FBB8 @ =0x03005D90
	ldr r0, _0809FBBC @ =0x08DAD280
	ldr r0, [r0]
	ldr r2, _0809FBC0 @ =0x00007134
	adds r0, r0, r2
	movs r2, #0xa1
	lsls r2, r2, #2
	ldr r3, [r1]
	adds r1, r5, #0
	bl _call_via_r3
	movs r1, #0xa0
	lsls r1, r1, #2
	adds r4, r5, r1
	adds r0, r5, #0
	bl Checksum16
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r4, [r4]
	cmp r4, r0
	bne _0809FBC4
	movs r0, #1
	b _0809FBC6
	.align 2, 0
_0809FBB4: .4byte gBuf
_0809FBB8: .4byte 0x03005D90
_0809FBBC: .4byte 0x08DAD280
_0809FBC0: .4byte 0x00007134
_0809FBC4:
	movs r0, #0
_0809FBC6:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_0809FBCC
sub_0809FBCC: @ 0x0809FBCC
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0xa0
	lsls r4, r4, #2
	adds r1, r4, #0
	bl Checksum16
	adds r4, r5, r4
	strh r0, [r4]
	ldr r0, _0809FBF8 @ =0x08DAD280
	ldr r1, [r0]
	ldr r0, _0809FBFC @ =0x00007134
	adds r1, r1, r0
	movs r2, #0xa1
	lsls r2, r2, #2
	adds r0, r5, #0
	bl WriteAndVerifySramFast
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809FBF8: .4byte 0x08DAD280
_0809FBFC: .4byte 0x00007134

	thumb_func_start sub_0809FC00
sub_0809FC00: @ 0x0809FC00
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0x90
	bl Checksum16
	adds r1, r4, #0
	adds r1, #0x90
	strh r0, [r1]
	ldr r0, _0809FC28 @ =0x08DAD280
	ldr r1, [r0]
	ldr r0, _0809FC2C @ =0x00007044
	adds r1, r1, r0
	adds r0, r4, #0
	movs r2, #0x94
	bl WriteAndVerifySramFast
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809FC28: .4byte 0x08DAD280
_0809FC2C: .4byte 0x00007044

	thumb_func_start sub_0809FC30
sub_0809FC30: @ 0x0809FC30
	push {lr}
	sub sp, #0x98
	add r0, sp, #0x94
	movs r1, #0
	strh r1, [r0]
	ldr r2, _0809FC50 @ =0x0100004A
	mov r1, sp
	bl CpuSet
	mov r0, sp
	bl sub_0809FC00
	add sp, #0x98
	pop {r0}
	bx r0
	.align 2, 0
_0809FC50: .4byte 0x0100004A

	thumb_func_start sub_0809FC54
sub_0809FC54: @ 0x0809FC54
	ldr r0, _0809FC5C @ =gPlaySt
	ldrb r0, [r0, #0x1b]
	subs r0, #1
	bx lr
	.align 2, 0
_0809FC5C: .4byte gPlaySt

	thumb_func_start sub_0809FC60
sub_0809FC60: @ 0x0809FC60
	push {r4, r5, r6, r7, lr}
	sub sp, #0x98
	adds r6, r0, #0
	adds r7, r1, #0
	adds r5, r2, #0
	add r0, sp, #0x94
	movs r4, #0
	strh r4, [r0]
	ldr r2, _0809FC98 @ =0x0100000C
	adds r1, r6, #0
	bl CpuSet
	mov r0, sp
	adds r0, #0x96
	strh r4, [r0]
	ldr r2, _0809FC9C @ =0x0100004A
	mov r1, sp
	bl CpuSet
	mov r0, sp
	bl sub_0809FB14
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809FCA0
	movs r0, #0
	b _0809FCBC
	.align 2, 0
_0809FC98: .4byte 0x0100000C
_0809FC9C: .4byte 0x0100004A
_0809FCA0:
	lsls r0, r5, #1
	adds r0, r0, r5
	adds r0, r7, r0
	lsls r2, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #3
	adds r1, r6, #0
	mov r3, sp
	adds r0, r3, r2
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	movs r0, #1
_0809FCBC:
	add sp, #0x98
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_0809FCC4
sub_0809FCC4: @ 0x0809FCC4
	push {r4, r5, r6, lr}
	sub sp, #0x94
	adds r6, r0, #0
	adds r5, r1, #0
	adds r4, r2, #0
	mov r0, sp
	bl sub_0809FB14
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809FCFA
	lsls r1, r4, #1
	adds r1, r1, r4
	adds r1, r5, r1
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	mov r2, sp
	adds r1, r2, r0
	adds r0, r6, #0
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	mov r0, sp
	bl sub_0809FC00
_0809FCFA:
	add sp, #0x94
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_0809FD04
sub_0809FD04: @ 0x0809FD04
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldrb r2, [r5]
	lsls r0, r2, #0x1f
	cmp r0, #0
	beq _0809FDB2
	ldrb r1, [r4]
	lsls r0, r1, #0x1c
	lsrs r1, r0, #0x1d
	lsls r0, r2, #0x1c
	lsrs r0, r0, #0x1d
	cmp r1, r0
	bgt _0809FDB2
	cmp r1, r0
	bne _0809FDBC
	ldrb r0, [r4, #0x17]
	cmp r0, #0
	beq _0809FD30
	ldrb r2, [r5, #0x17]
	cmp r0, r2
	bne _0809FDB2
_0809FD30:
	ldrh r0, [r4, #2]
	lsls r1, r0, #0x11
	lsrs r1, r1, #0x18
	ldrh r2, [r5, #2]
	lsls r0, r2, #0x11
	lsrs r0, r0, #0x18
	cmp r1, r0
	bgt _0809FDB2
	ldrb r0, [r4, #7]
	lsrs r2, r0, #5
	ldr r0, [r4, #8]
	ldr r1, _0809FDB8 @ =0x001FFFFF
	ands r0, r1
	lsls r3, r0, #3
	orrs r3, r2
	ldrb r0, [r5, #7]
	lsrs r2, r0, #5
	ldr r0, [r5, #8]
	ands r0, r1
	lsls r0, r0, #3
	orrs r0, r2
	cmp r3, r0
	bgt _0809FDB2
	cmp r3, r0
	bne _0809FDBC
	ldr r0, [r4, #4]
	lsls r0, r0, #0xf
	lsrs r0, r0, #0x16
	lsls r3, r0, #3
	subs r3, r3, r0
	lsls r3, r3, #5
	adds r3, r3, r0
	lsls r3, r3, #4
	ldrb r2, [r4, #6]
	lsls r1, r2, #0x19
	lsrs r1, r1, #0x1a
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #2
	adds r3, r3, r0
	ldrh r4, [r4, #6]
	lsls r0, r4, #0x13
	lsrs r0, r0, #0x1a
	adds r3, r3, r0
	ldr r0, [r5, #4]
	lsls r0, r0, #0xf
	lsrs r0, r0, #0x16
	lsls r2, r0, #3
	subs r2, r2, r0
	lsls r2, r2, #5
	adds r2, r2, r0
	lsls r2, r2, #4
	ldrb r0, [r5, #6]
	lsls r1, r0, #0x19
	lsrs r1, r1, #0x1a
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #2
	adds r2, r2, r0
	ldrh r5, [r5, #6]
	lsls r0, r5, #0x13
	lsrs r0, r0, #0x1a
	adds r2, r2, r0
	cmp r3, r2
	bge _0809FDBC
_0809FDB2:
	movs r0, #1
	b _0809FDBE
	.align 2, 0
_0809FDB8: .4byte 0x001FFFFF
_0809FDBC:
	movs r0, #0
_0809FDBE:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_0809FDC4
sub_0809FDC4: @ 0x0809FDC4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r7, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	movs r0, #0
	mov sb, r0
	add r0, sp, #4
	movs r1, #0
	mov r8, r1
	mov r2, sb
	strh r2, [r0]
	ldr r2, _0809FED0 @ =0x0100000C
	adds r1, r7, #0
	bl CpuSet
	movs r6, #1
	ldrb r0, [r7]
	orrs r0, r6
	strb r0, [r7]
	movs r0, #3
	ands r4, r0
	lsls r4, r4, #3
	movs r0, #0x19
	rsbs r0, r0, #0
	ldrb r3, [r7, #2]
	ands r0, r3
	orrs r0, r4
	ands r5, r6
	lsls r5, r5, #5
	movs r1, #0x21
	rsbs r1, r1, #0
	ands r0, r1
	orrs r0, r5
	strb r0, [r7, #2]
	bl sub_08017574
	movs r2, #7
	ands r2, r0
	lsls r2, r2, #5
	movs r1, #0x1f
	ldrb r3, [r7, #7]
	ands r1, r3
	orrs r1, r2
	strb r1, [r7, #7]
	lsls r0, r0, #8
	lsrs r0, r0, #0xb
	ldr r1, [r7, #8]
	ldr r2, _0809FED4 @ =0xFFE00000
	ands r1, r2
	orrs r1, r0
	str r1, [r7, #8]
	ldr r2, _0809FED8 @ =gPlaySt
	adds r0, r2, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	lsrs r0, r0, #0x1f
	ands r0, r6
	lsls r0, r0, #6
	movs r1, #0x41
	rsbs r1, r1, #0
	ldrb r3, [r7, #2]
	ands r1, r3
	orrs r1, r0
	strb r1, [r7, #2]
	ldrh r2, [r2, #0x2c]
	lsls r1, r2, #0x13
	lsrs r1, r1, #0x17
	movs r0, #0xff
	ands r1, r0
	lsls r1, r1, #7
	ldr r0, _0809FEDC @ =0xFFFF807F
	ldrh r2, [r7, #2]
	ands r0, r2
	orrs r0, r1
	strh r0, [r7, #2]
	bl sub_080A067C
	mov r4, sp
	adds r4, #6
	add r5, sp, #8
	mov r6, sp
	adds r6, #0xa
	adds r1, r4, #0
	adds r2, r5, #0
	adds r3, r6, #0
	bl FormatTime
	ldr r1, _0809FEE0 @ =0x000003FF
	ldrh r4, [r4]
	ands r1, r4
	lsls r1, r1, #7
	ldr r0, [r7, #4]
	ldr r2, _0809FEE4 @ =0xFFFE007F
	ands r0, r2
	orrs r0, r1
	str r0, [r7, #4]
	movs r1, #0x3f
	ldrh r5, [r5]
	ands r1, r5
	lsls r1, r1, #1
	movs r0, #0x7f
	rsbs r0, r0, #0
	ldrb r3, [r7, #6]
	ands r0, r3
	orrs r0, r1
	strb r0, [r7, #6]
	movs r1, #0x3f
	ldrh r6, [r6]
	ands r1, r6
	lsls r1, r1, #7
	ldr r0, _0809FEE8 @ =0xFFFFE07F
	ldrh r2, [r7, #6]
	ands r0, r2
	orrs r0, r1
	strh r0, [r7, #6]
	movs r0, #0x7f
	ldrb r3, [r7, #3]
	ands r0, r3
	strb r0, [r7, #3]
	movs r0, #0x80
	rsbs r0, r0, #0
	ldrb r1, [r7, #4]
	ands r0, r1
	strb r0, [r7, #4]
	mov r2, r8
	strb r2, [r7, #0x17]
	movs r4, #1
	b _0809FEF4
	.align 2, 0
_0809FED0: .4byte 0x0100000C
_0809FED4: .4byte 0xFFE00000
_0809FED8: .4byte gPlaySt
_0809FEDC: .4byte 0xFFFF807F
_0809FEE0: .4byte 0x000003FF
_0809FEE4: .4byte 0xFFFE007F
_0809FEE8: .4byte 0xFFFFE07F
_0809FEEC:
	ldrb r0, [r2, #4]
	strb r0, [r7, #0x17]
	b _0809FF1C
_0809FEF2:
	adds r4, #1
_0809FEF4:
	cmp r4, #0x3f
	bgt _0809FF1C
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _0809FEF2
	ldr r2, [r0]
	cmp r2, #0
	beq _0809FEF2
	ldr r1, [r0, #0xc]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	beq _0809FEF2
	movs r0, #4
	ands r1, r0
	cmp r1, #0
	beq _0809FEEC
_0809FF1C:
	movs r5, #1
	movs r3, #0xc
	adds r3, r3, r7
	mov sl, r3
	movs r0, #0x7f
	mov r8, r0
	movs r6, #0x7f
_0809FF2A:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _0809FF84
	ldr r2, [r4]
	cmp r2, #0
	beq _0809FF84
	ldr r0, [r4, #0xc]
	ldr r1, _080A0048 @ =0x00010004
	ands r0, r1
	cmp r0, #0
	bne _0809FF84
	ldrb r0, [r2, #4]
	bl sub_080A0BDC
	cmp r0, sb
	ble _0809FF84
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	bl sub_080A0BDC
	mov sb, r0
	ldr r0, [r4]
	ldrb r2, [r0, #4]
	movs r1, #1
	ands r1, r2
	lsls r1, r1, #7
	adds r0, r6, #0
	ldrb r3, [r7, #3]
	ands r0, r3
	orrs r0, r1
	strb r0, [r7, #3]
	lsrs r2, r2, #1
	ands r2, r6
	mov r0, r8
	ands r2, r0
	movs r1, #0x80
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r3, [r7, #4]
	ands r0, r3
	orrs r0, r2
	strb r0, [r7, #4]
_0809FF84:
	adds r5, #1
	cmp r5, #0x3f
	ble _0809FF2A
	bl sub_080B7100
	movs r5, #7
	ands r0, r5
	lsls r0, r0, #4
	movs r1, #0x71
	rsbs r1, r1, #0
	ldrb r2, [r7]
	ands r1, r2
	orrs r1, r0
	strb r1, [r7]
	bl sub_080B735C
	ands r0, r5
	lsls r0, r0, #2
	movs r1, #0x1d
	rsbs r1, r1, #0
	ldrb r3, [r7, #1]
	ands r1, r3
	orrs r1, r0
	strb r1, [r7, #1]
	bl sub_080B71F8
	movs r1, #7
	ands r0, r1
	lsls r0, r0, #7
	ldr r1, _080A004C @ =0xFFFFFC7F
	ldrh r2, [r7]
	ands r1, r2
	orrs r1, r0
	strh r1, [r7]
	bl sub_080B7230
	lsls r0, r0, #5
	movs r1, #0x1f
	ldrb r3, [r7, #1]
	ands r1, r3
	orrs r1, r0
	strb r1, [r7, #1]
	bl sub_080B7328
	ands r0, r5
	movs r4, #8
	rsbs r4, r4, #0
	ldrb r1, [r7, #2]
	ands r4, r1
	orrs r4, r0
	strb r4, [r7, #2]
	ldrb r2, [r7]
	lsls r0, r2, #0x19
	lsrs r0, r0, #0x1d
	ldrh r3, [r7]
	lsls r1, r3, #0x16
	lsrs r1, r1, #0x1d
	ldrb r3, [r7, #1]
	lsls r2, r3, #0x1b
	lsrs r2, r2, #0x1d
	lsrs r3, r3, #5
	lsls r4, r4, #0x1d
	lsrs r4, r4, #0x1d
	str r4, [sp]
	bl sub_080B73FC
	ands r0, r5
	lsls r0, r0, #1
	movs r1, #0xf
	rsbs r1, r1, #0
	ldrb r2, [r7]
	ands r1, r2
	orrs r1, r0
	strb r1, [r7]
	bl sub_080A053C
	movs r1, #0x3f
	ands r0, r1
	lsls r0, r0, #5
	ldr r1, _080A0050 @ =0xFFFFF81F
	ldrh r3, [r7, #0xa]
	ands r1, r3
	orrs r1, r0
	strh r1, [r7, #0xa]
	bl sub_0802EBB0
	adds r1, r0, #0
	mov r0, sl
	bl strcpy
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A0048: .4byte 0x00010004
_080A004C: .4byte 0xFFFFFC7F
_080A0050: .4byte 0xFFFFF81F

	thumb_func_start sub_080A0054
sub_080A0054: @ 0x080A0054
	push {r4, r5, r6, lr}
	sub sp, #0x30
	bl sub_0809FC54
	adds r6, r0, #0
	ldr r0, _080A00A0 @ =gPlaySt
	ldrb r0, [r0, #0x14]
	lsrs r4, r0, #6
	movs r0, #1
	ands r4, r0
	add r5, sp, #0x18
	adds r0, r5, #0
	adds r1, r6, #0
	adds r2, r4, #0
	bl sub_0809FDC4
	mov r0, sp
	adds r1, r6, #0
	adds r2, r4, #0
	bl sub_0809FC60
	mov r0, sp
	adds r1, r5, #0
	bl sub_0809FD04
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A0096
	adds r0, r5, #0
	adds r1, r6, #0
	adds r2, r4, #0
	bl sub_0809FCC4
_080A0096:
	add sp, #0x30
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A00A0: .4byte gPlaySt

	thumb_func_start sub_080A00A4
sub_080A00A4: @ 0x080A00A4
	push {lr}
	sub sp, #0x28
	add r0, sp, #0x24
	movs r1, #0
	strh r1, [r0]
	ldr r2, _080A00C4 @ =0x01000012
	mov r1, sp
	bl CpuSet
	mov r0, sp
	bl sub_080A0120
	add sp, #0x28
	pop {r0}
	bx r0
	.align 2, 0
_080A00C4: .4byte 0x01000012

	thumb_func_start sub_080A00C8
sub_080A00C8: @ 0x080A00C8
	push {r4, lr}
	sub sp, #0x24
	adds r4, r0, #0
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A0114
	cmp r4, #0
	bne _080A00DE
	mov r4, sp
_080A00DE:
	ldr r1, _080A0108 @ =0x03005D90
	ldr r0, _080A010C @ =0x08DAD280
	ldr r0, [r0]
	ldr r2, _080A0110 @ =0x000070FC
	adds r0, r0, r2
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #0x24
	bl _call_via_r3
	adds r0, r4, #0
	movs r1, #0x20
	bl Checksum16
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r4, [r4, #0x20]
	cmp r4, r0
	bne _080A0114
	movs r0, #1
	b _080A0116
	.align 2, 0
_080A0108: .4byte 0x03005D90
_080A010C: .4byte 0x08DAD280
_080A0110: .4byte 0x000070FC
_080A0114:
	movs r0, #0
_080A0116:
	add sp, #0x24
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080A0120
sub_080A0120: @ 0x080A0120
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0x20
	bl Checksum16
	strh r0, [r4, #0x20]
	ldr r0, _080A0144 @ =0x08DAD280
	ldr r1, [r0]
	ldr r0, _080A0148 @ =0x000070FC
	adds r1, r1, r0
	adds r0, r4, #0
	movs r2, #0x24
	bl WriteAndVerifySramFast
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A0144: .4byte 0x08DAD280
_080A0148: .4byte 0x000070FC

	thumb_func_start sub_080A014C
sub_080A014C: @ 0x080A014C
	push {r4, r5, lr}
	sub sp, #0x24
	adds r4, r0, #0
	adds r5, r1, #0
	cmp r4, #0
	bne _080A0160
	mov r4, sp
	mov r0, sp
	bl sub_080A00C8
_080A0160:
	asrs r0, r5, #5
	lsls r0, r0, #2
	adds r0, r4, r0
	movs r1, #0x1f
	ands r1, r5
	ldr r0, [r0]
	lsrs r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	bne _080A017A
	movs r0, #0
	b _080A017C
_080A017A:
	movs r0, #1
_080A017C:
	add sp, #0x24
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_080A0184
sub_080A0184: @ 0x080A0184
	push {r4, r5, lr}
	sub sp, #0x24
	adds r4, r0, #0
	adds r5, r1, #0
	cmp r4, #0
	bne _080A019E
	mov r4, sp
	mov r0, sp
	bl sub_080A00C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A01C0
_080A019E:
	asrs r0, r5, #5
	lsls r0, r0, #2
	adds r3, r4, r0
	movs r0, #0x1f
	ands r0, r5
	movs r2, #1
	lsls r2, r0
	ldr r1, [r3]
	adds r0, r1, #0
	ands r0, r2
	cmp r0, #0
	bne _080A01C0
	orrs r1, r2
	str r1, [r3]
	adds r0, r4, #0
	bl sub_080A0120
_080A01C0:
	add sp, #0x24
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080A01C8
sub_080A01C8: @ 0x080A01C8
	push {lr}
	sub sp, #0x18
	add r0, sp, #0x14
	movs r1, #0
	strh r1, [r0]
	ldr r2, _080A01E8 @ =0x0100000A
	mov r1, sp
	bl CpuSet
	mov r0, sp
	bl sub_080A0244
	add sp, #0x18
	pop {r0}
	bx r0
	.align 2, 0
_080A01E8: .4byte 0x0100000A

	thumb_func_start sub_080A01EC
sub_080A01EC: @ 0x080A01EC
	push {r4, lr}
	sub sp, #0x14
	adds r4, r0, #0
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A0238
	cmp r4, #0
	bne _080A0202
	mov r4, sp
_080A0202:
	ldr r1, _080A022C @ =0x03005D90
	ldr r0, _080A0230 @ =0x08DAD280
	ldr r0, [r0]
	ldr r2, _080A0234 @ =0x00007120
	adds r0, r0, r2
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #0x14
	bl _call_via_r3
	adds r0, r4, #0
	movs r1, #0x10
	bl Checksum16
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r4, [r4, #0x10]
	cmp r4, r0
	bne _080A0238
	movs r0, #1
	b _080A023A
	.align 2, 0
_080A022C: .4byte 0x03005D90
_080A0230: .4byte 0x08DAD280
_080A0234: .4byte 0x00007120
_080A0238:
	movs r0, #0
_080A023A:
	add sp, #0x14
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080A0244
sub_080A0244: @ 0x080A0244
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0x10
	bl Checksum16
	strh r0, [r4, #0x10]
	ldr r0, _080A0268 @ =0x08DAD280
	ldr r1, [r0]
	ldr r0, _080A026C @ =0x00007120
	adds r1, r1, r0
	adds r0, r4, #0
	movs r2, #0x14
	bl WriteAndVerifySramFast
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A0268: .4byte 0x08DAD280
_080A026C: .4byte 0x00007120

	thumb_func_start sub_080A0270
sub_080A0270: @ 0x080A0270
	push {r4, r5, lr}
	sub sp, #0x14
	adds r4, r0, #0
	adds r5, r1, #0
	cmp r4, #0
	bne _080A0284
	mov r4, sp
	mov r0, sp
	bl sub_080A01EC
_080A0284:
	asrs r0, r5, #5
	lsls r0, r0, #2
	adds r0, r4, r0
	movs r1, #0x1f
	ands r1, r5
	ldr r0, [r0]
	lsrs r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	bne _080A029E
	movs r0, #0
	b _080A02A0
_080A029E:
	movs r0, #1
_080A02A0:
	add sp, #0x14
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_080A02A8
sub_080A02A8: @ 0x080A02A8
	push {r4, r5, lr}
	sub sp, #0x14
	adds r4, r0, #0
	adds r5, r1, #0
	cmp r4, #0
	bne _080A02C2
	mov r4, sp
	mov r0, sp
	bl sub_080A01EC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A02E4
_080A02C2:
	asrs r0, r5, #5
	lsls r0, r0, #2
	adds r3, r4, r0
	movs r0, #0x1f
	ands r0, r5
	movs r2, #1
	lsls r2, r0
	ldr r1, [r3]
	adds r0, r1, #0
	ands r0, r2
	cmp r0, #0
	bne _080A02E4
	orrs r1, r2
	str r1, [r3]
	adds r0, r4, #0
	bl sub_080A0244
_080A02E4:
	add sp, #0x14
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start LoadAndVerifySramSaveData
LoadAndVerifySramSaveData: @ 0x080A02EC
	push {lr}
	movs r0, #0
	bl ReadGlobalSaveInfo
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A02FE
	bl InitGlobalSaveInfodata
_080A02FE:
	movs r0, #0
	bl sub_0809FB70
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A030E
	bl sub_0809F0BC
_080A030E:
	movs r0, #0
	bl sub_0809FA3C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A031E
	bl EraseBonusContentData
_080A031E:
	movs r0, #0
	bl sub_0809FB14
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A032E
	bl sub_0809FC30
_080A032E:
	movs r0, #0
	bl sub_080A00C8
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A033E
	bl sub_080A00A4
_080A033E:
	movs r0, #0
	bl sub_080A01EC
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A034E
	bl sub_080A01C8
_080A034E:
	bl sub_080A2984
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ClearPidChStatsSaveData
ClearPidChStatsSaveData: @ 0x080A0358
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	mov r8, r0
	mov r0, sp
	movs r4, #0
	strh r4, [r0]
	ldr r5, _080A03E0 @ =0x0203E778
	ldr r2, _080A03E4 @ =0x01000230
	adds r1, r5, #0
	bl CpuSet
	mov r0, sp
	adds r0, #2
	strh r4, [r0]
	ldr r1, _080A03E8 @ =0x0203EBD8
	ldr r2, _080A03EC @ =0x01000060
	bl CpuSet
	adds r7, r5, #0
	movs r6, #0x86
	lsls r6, r6, #4
	add r6, r8
	adds r4, r7, #0
	movs r5, #0x45
_080A038C:
	ldr r0, [r4]
	ldr r1, _080A03F0 @ =0xFF0000FF
	ands r0, r1
	movs r1, #0x80
	lsls r1, r1, #0xe
	orrs r0, r1
	str r0, [r4]
	adds r0, r7, #0
	adds r1, r6, #0
	movs r2, #0x10
	bl WriteAndVerifySramFast
	adds r6, #0x10
	adds r4, #0x10
	subs r5, #1
	cmp r5, #0
	bge _080A038C
	movs r4, #0xcc
	lsls r4, r4, #4
	add r4, r8
	movs r5, #0x2f
_080A03B6:
	ldr r0, _080A03E8 @ =0x0203EBD8
	adds r1, r4, #0
	movs r2, #4
	bl WriteAndVerifySramFast
	adds r4, #4
	subs r5, #1
	cmp r5, #0
	bge _080A03B6
	ldr r1, _080A03F4 @ =0x0203E774
	movs r0, #0x86
	lsls r0, r0, #4
	add r0, r8
	str r0, [r1]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A03E0: .4byte 0x0203E778
_080A03E4: .4byte 0x01000230
_080A03E8: .4byte 0x0203EBD8
_080A03EC: .4byte 0x01000060
_080A03F0: .4byte 0xFF0000FF
_080A03F4: .4byte 0x0203E774

	thumb_func_start ClearPidStats_ret
ClearPidStats_ret: @ 0x080A03F8
	push {lr}
	ldr r1, _080A0414 @ =gPlaySt
	ldr r0, _080A0418 @ =0xFFFFE00F
	ldrh r2, [r1, #0x2c]
	ands r0, r2
	strh r0, [r1, #0x2c]
	movs r0, #0
	bl SetGold
	bl ClearPidStats
	pop {r0}
	bx r0
	.align 2, 0
_080A0414: .4byte gPlaySt
_080A0418: .4byte 0xFFFFE00F

	thumb_func_start ClearPidStats
ClearPidStats: @ 0x080A041C
	push {r4, r5, lr}
	sub sp, #4
	mov r0, sp
	movs r5, #0
	strh r5, [r0]
	ldr r1, _080A045C @ =0x0203E778
	ldr r2, _080A0460 @ =0x01000230
	bl CpuSet
	ldr r4, _080A0464 @ =gPlaySt
	ldr r0, [r4, #0x38]
	ldr r1, _080A0468 @ =0xF00000FF
	ands r0, r1
	str r0, [r4, #0x38]
	movs r0, #0xf
	ldrh r1, [r4, #0x36]
	ands r0, r1
	strh r0, [r4, #0x36]
	adds r0, r4, #0
	adds r0, #0x38
	strb r5, [r0]
	ldr r0, [r4, #0x34]
	ldr r1, _080A046C @ =0xFFF00000
	ands r0, r1
	str r0, [r4, #0x34]
	bl sub_08017574
	str r0, [r4, #0x30]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A045C: .4byte 0x0203E778
_080A0460: .4byte 0x01000230
_080A0464: .4byte gPlaySt
_080A0468: .4byte 0xF00000FF
_080A046C: .4byte 0xFFF00000

	thumb_func_start ReadPidStats
ReadPidStats: @ 0x080A0470
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080A0490 @ =0x03005D90
	ldr r1, _080A0494 @ =0x0203E778
	movs r2, #0x8c
	lsls r2, r2, #3
	ldr r3, [r0]
	adds r0, r4, #0
	bl _call_via_r3
	ldr r0, _080A0498 @ =0x0203E774
	str r4, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A0490: .4byte 0x03005D90
_080A0494: .4byte 0x0203E778
_080A0498: .4byte 0x0203E774

	thumb_func_start ReadChapterStats
ReadChapterStats: @ 0x080A049C
	push {lr}
	ldr r2, _080A04B0 @ =0x03005D90
	ldr r1, _080A04B4 @ =0x0203EBD8
	ldr r3, [r2]
	movs r2, #0xc0
	bl _call_via_r3
	pop {r0}
	bx r0
	.align 2, 0
_080A04B0: .4byte 0x03005D90
_080A04B4: .4byte 0x0203EBD8

	thumb_func_start WritePidStats
WritePidStats: @ 0x080A04B8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080A04D4 @ =0x0203E778
	movs r2, #0x8c
	lsls r2, r2, #3
	adds r1, r4, #0
	bl WriteAndVerifySramFast
	ldr r0, _080A04D8 @ =0x0203E774
	str r4, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A04D4: .4byte 0x0203E778
_080A04D8: .4byte 0x0203E774

	thumb_func_start WriteChapterStats
WriteChapterStats: @ 0x080A04DC
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A04EC @ =0x0203EBD8
	movs r2, #0xc0
	bl WriteAndVerifySramFast
	pop {r0}
	bx r0
	.align 2, 0
_080A04EC: .4byte 0x0203EBD8

	thumb_func_start GetChapterStats
GetChapterStats: @ 0x080A04F0
	lsls r0, r0, #2
	ldr r1, _080A04F8 @ =0x0203EBD8
	adds r0, r0, r1
	bx lr
	.align 2, 0
_080A04F8: .4byte 0x0203EBD8

	thumb_func_start IsChapterStatsValid
IsChapterStatsValid: @ 0x080A04FC
	ldr r1, _080A050C @ =0x0000FF80
	ldrh r0, [r0]
	ands r1, r0
	rsbs r0, r1, #0
	orrs r0, r1
	lsrs r0, r0, #0x1f
	bx lr
	.align 2, 0
_080A050C: .4byte 0x0000FF80

	thumb_func_start GetNextChapterStatsSlot
GetNextChapterStatsSlot: @ 0x080A0510
	push {r4, lr}
	movs r0, #0
	bl GetChapterStats
	adds r1, r0, #0
	movs r2, #0
	ldr r3, _080A0520 @ =0x0000FF80
	b _080A0528
	.align 2, 0
_080A0520: .4byte 0x0000FF80
_080A0524:
	adds r2, #1
	adds r1, #4
_080A0528:
	adds r0, r3, #0
	ldrh r4, [r1]
	ands r0, r4
	cmp r0, #0
	bne _080A0524
	adds r0, r2, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080A053C
sub_080A053C: @ 0x080A053C
	push {r4, r5, r6, lr}
	movs r0, #0
	bl GetChapterStats
	adds r4, r0, #0
	movs r5, #0
	ldr r1, _080A057C @ =0x0000FF80
	adds r0, r1, #0
	ldrh r2, [r4]
	ands r0, r2
	cmp r0, #0
	beq _080A0572
	adds r6, r1, #0
_080A0556:
	ldr r0, [r4]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	bl sub_080A0654
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A0568
	adds r5, #1
_080A0568:
	adds r4, #4
	ldrh r0, [r4]
	ands r0, r6
	cmp r0, #0
	bne _080A0556
_080A0572:
	adds r0, r5, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080A057C: .4byte 0x0000FF80

	thumb_func_start sub_080A0580
sub_080A0580: @ 0x080A0580
	push {lr}
	bl GetNextChapterStatsSlot
	cmp r0, #0
	beq _080A0598
	subs r0, #1
	bl GetChapterStats
	ldr r0, [r0]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	b _080A059C
_080A0598:
	movs r0, #1
	rsbs r0, r0, #0
_080A059C:
	pop {r1}
	bx r1

	thumb_func_start sub_080A05A0
sub_080A05A0: @ 0x080A05A0
	push {r4, r5, lr}
	adds r4, r0, #0
	bl GetNextChapterStatsSlot
	bl GetChapterStats
	adds r5, r0, #0
	bl GetGameTime
	ldr r1, [r4, #4]
	subs r0, r0, r1
	movs r1, #0xb4
	bl __udivsi3
	adds r3, r0, #0
	ldr r0, _080A05F8 @ =0x0000EA60
	cmp r3, r0
	ble _080A05C6
	adds r3, r0, #0
_080A05C6:
	ldrh r2, [r4, #0x10]
	movs r0, #0xfa
	lsls r0, r0, #1
	cmp r2, r0
	ble _080A05D2
	adds r2, r0, #0
_080A05D2:
	movs r1, #0x7f
	ldrb r4, [r4, #0xe]
	ands r1, r4
	movs r0, #0x80
	rsbs r0, r0, #0
	ldrb r4, [r5]
	ands r0, r4
	orrs r0, r1
	strb r0, [r5]
	lsls r1, r2, #7
	movs r0, #0x7f
	ldrh r2, [r5]
	ands r0, r2
	orrs r0, r1
	strh r0, [r5]
	strh r3, [r5, #2]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A05F8: .4byte 0x0000EA60

	thumb_func_start sub_080A05FC
sub_080A05FC: @ 0x080A05FC
	push {r4, r5, r6, r7, lr}
	movs r6, #0
	bl GetNextChapterStatsSlot
	adds r5, r0, #0
	movs r4, #0
	cmp r6, r5
	bge _080A0620
	movs r7, #0xb4
_080A060E:
	adds r0, r4, #0
	bl GetChapterStats
	ldrh r0, [r0, #2]
	muls r0, r7, r0
	adds r6, r6, r0
	adds r4, #1
	cmp r4, r5
	blt _080A060E
_080A0620:
	adds r0, r6, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_080A0628
sub_080A0628: @ 0x080A0628
	push {r4, r5, r6, lr}
	movs r6, #0
	bl GetNextChapterStatsSlot
	adds r5, r0, #0
	movs r4, #0
	cmp r6, r5
	bge _080A064C
_080A0638:
	adds r0, r4, #0
	bl GetChapterStats
	ldr r0, [r0]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x17
	adds r6, r6, r0
	adds r4, #1
	cmp r4, r5
	blt _080A0638
_080A064C:
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_080A0654
sub_080A0654: @ 0x080A0654
	adds r1, r0, #0
	ldr r0, _080A0668 @ =gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #1
	bne _080A066C
	cmp r1, #0xb
	bgt _080A0678
_080A0662:
	movs r0, #1
	b _080A067A
	.align 2, 0
_080A0668: .4byte gPlaySt
_080A066C:
	cmp r0, #1
	blt _080A0678
	cmp r0, #3
	bgt _080A0678
	cmp r1, #0xb
	bgt _080A0662
_080A0678:
	movs r0, #0
_080A067A:
	bx lr

	thumb_func_start sub_080A067C
sub_080A067C: @ 0x080A067C
	push {r4, r5, r6, r7, lr}
	movs r7, #0
	bl GetNextChapterStatsSlot
	adds r6, r0, #0
	movs r5, #0
	cmp r7, r6
	bge _080A06B2
_080A068C:
	adds r0, r5, #0
	bl GetChapterStats
	adds r4, r0, #0
	ldr r0, [r4]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	bl sub_080A0654
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A06AC
	movs r0, #0xb4
	ldrh r4, [r4, #2]
	muls r0, r4, r0
	adds r7, r7, r0
_080A06AC:
	adds r5, #1
	cmp r5, r6
	blt _080A068C
_080A06B2:
	adds r0, r7, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080A06BC
sub_080A06BC: @ 0x080A06BC
	push {r4, r5, r6, r7, lr}
	movs r7, #0
	bl GetNextChapterStatsSlot
	adds r6, r0, #0
	movs r5, #0
	cmp r7, r6
	bge _080A06F2
_080A06CC:
	adds r0, r5, #0
	bl GetChapterStats
	adds r4, r0, #0
	ldr r0, [r4]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	bl sub_080A0654
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A06EC
	ldr r0, [r4]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x17
	adds r7, r7, r0
_080A06EC:
	adds r5, #1
	cmp r5, r6
	blt _080A06CC
_080A06F2:
	adds r0, r7, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start PidStatsAddBattleAmt
PidStatsAddBattleAmt: @ 0x080A06FC
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r0, #0xc0
	ldrb r1, [r4, #0xb]
	ands r0, r1
	cmp r0, #0
	bne _080A0750
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	adds r5, r0, #0
	cmp r0, #0x45
	bhi _080A0750
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A0750
	lsls r1, r5, #4
	ldr r0, _080A0758 @ =0x0203E768
	adds r2, r1, r0
	cmp r2, #0
	beq _080A0750
	ldrh r3, [r2, #0xc]
	lsls r0, r3, #0x12
	lsrs r1, r0, #0x14
	ldr r0, _080A075C @ =0x00000F9F
	cmp r1, r0
	bgt _080A0746
	adds r0, r1, #1
	ldr r5, _080A0760 @ =0x00000FFF
	adds r1, r5, #0
	ands r0, r1
	lsls r0, r0, #2
	ldr r1, _080A0764 @ =0xFFFFC003
	ands r1, r3
	orrs r1, r0
	strh r1, [r2, #0xc]
_080A0746:
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	movs r1, #4
	bl sub_080A0C14
_080A0750:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A0758: .4byte 0x0203E768
_080A075C: .4byte 0x00000F9F
_080A0760: .4byte 0x00000FFF
_080A0764: .4byte 0xFFFFC003

	thumb_func_start sub_080A0768
sub_080A0768: @ 0x080A0768
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r5, r4, #0
	cmp r4, #0x45
	bhi _080A07BA
	adds r0, r4, #0
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A07BA
	lsls r1, r4, #4
	ldr r0, _080A07C0 @ =0x0203E768
	adds r2, r1, r0
	cmp r2, #0
	beq _080A07BA
	movs r3, #3
	adds r0, r3, #0
	ldrb r1, [r2, #0xc]
	ands r0, r1
	lsls r1, r0, #8
	ldrb r0, [r2, #0xb]
	orrs r1, r0
	ldr r0, _080A07C4 @ =0x000003E7
	cmp r1, r0
	bgt _080A07B2
	adds r1, #1
	strb r1, [r2, #0xb]
	lsrs r1, r1, #8
	ands r1, r3
	movs r0, #4
	rsbs r0, r0, #0
	ldrb r3, [r2, #0xc]
	ands r0, r3
	orrs r0, r1
	strb r0, [r2, #0xc]
_080A07B2:
	adds r0, r5, #0
	movs r1, #0x10
	bl sub_080A0C14
_080A07BA:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A07C0: .4byte 0x0203E768
_080A07C4: .4byte 0x000003E7

	thumb_func_start sub_080A07C8
sub_080A07C8: @ 0x080A07C8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x10
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	mov r8, r4
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A0898
	cmp r4, #0x45
	bhi _080A0898
	adds r0, r4, #0
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A0898
	mov r0, r8
	lsls r6, r0, #4
	ldr r0, _080A08A4 @ =0x0203E768
	adds r5, r6, r0
	cmp r5, #0
	beq _080A0898
	ldr r1, _080A08A8 @ =gBmSt
	adds r0, r1, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	cmp r0, #1
	beq _080A0898
	ldr r7, _080A08AC @ =gPlaySt
	ldrb r2, [r7, #0x14]
	movs r0, #8
	ands r0, r2
	cmp r0, #0
	bne _080A0898
	ldrb r1, [r1, #4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	bne _080A0898
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	bne _080A0898
	movs r0, #0x80
	ands r0, r2
	cmp r0, #0
	bne _080A0898
	ldrb r0, [r5]
	cmp r0, #0xc7
	bhi _080A0898
	adds r0, #1
	strb r0, [r5]
	movs r1, #0x80
	rsbs r1, r1, #0
	mov r0, r8
	bl sub_080A0C14
	bl sub_080A22AC
	adds r4, r0, #0
	adds r4, #3
	adds r0, r4, #0
	bl GetSaveWriteAddr
	adds r1, r0, #0
	ldr r2, _080A08B0 @ =0x000019DC
	adds r0, r6, r2
	adds r1, r1, r0
	adds r0, r5, #0
	movs r2, #1
	bl WriteAndVerifySramFast
	mov r0, sp
	adds r1, r4, #0
	bl ReadSaveBlockInfo
	mov r0, sp
	adds r1, r4, #0
	bl WriteSaveBlockInfo
	ldrb r0, [r7, #0xc]
	bl GetSaveWriteAddr
	adds r1, r0, #0
	movs r2, #0x85
	lsls r2, r2, #4
	adds r0, r6, r2
	adds r1, r1, r0
	adds r0, r5, #0
	movs r2, #3
	bl WriteAndVerifySramFast
	ldrb r1, [r7, #0xc]
	mov r0, sp
	bl ReadSaveBlockInfo
	ldrb r1, [r7, #0xc]
	mov r0, sp
	bl WriteSaveBlockInfo
_080A0898:
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A08A4: .4byte 0x0203E768
_080A08A8: .4byte gBmSt
_080A08AC: .4byte gPlaySt
_080A08B0: .4byte 0x000019DC

	thumb_func_start sub_080A08B4
sub_080A08B4: @ 0x080A08B4
	push {r4, r5, r6, lr}
	adds r4, r2, #0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r5, r0, #0
	lsls r1, r1, #0x18
	lsrs r6, r1, #0x18
	cmp r0, #0x45
	bhi _080A091E
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A091E
	lsls r1, r5, #4
	ldr r0, _080A0924 @ =0x0203E768
	adds r3, r1, r0
	cmp r3, #0
	beq _080A091E
	ldr r2, _080A0928 @ =gPlaySt
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	movs r0, #0x3f
	ands r1, r0
	movs r0, #0x40
	rsbs r0, r0, #0
	ldrb r5, [r3, #5]
	ands r0, r5
	orrs r0, r1
	strb r0, [r3, #5]
	ldr r1, _080A092C @ =0x000003FF
	ldrh r2, [r2, #0x10]
	ands r1, r2
	lsls r1, r1, #0xe
	ldr r0, [r3, #4]
	ldr r2, _080A0930 @ =0xFF003FFF
	ands r0, r2
	orrs r0, r1
	str r0, [r3, #4]
	lsls r2, r6, #0xe
	ldr r0, [r3, #0xc]
	ldr r1, _080A0934 @ =0xFF803FFF
	ands r0, r1
	orrs r0, r2
	str r0, [r3, #0xc]
	movs r0, #0xf
	ands r4, r0
	movs r0, #0x10
	rsbs r0, r0, #0
	ldrb r1, [r3, #9]
	ands r0, r1
	orrs r0, r4
	strb r0, [r3, #9]
_080A091E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A0924: .4byte 0x0203E768
_080A0928: .4byte gPlaySt
_080A092C: .4byte 0x000003FF
_080A0930: .4byte 0xFF003FFF
_080A0934: .4byte 0xFF803FFF

	thumb_func_start sub_080A0938
sub_080A0938: @ 0x080A0938
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r5, r4, #0
	cmp r4, #0x45
	bhi _080A096C
	adds r0, r4, #0
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A096C
	lsls r1, r4, #4
	ldr r0, _080A0974 @ =0x0203E768
	adds r1, r1, r0
	cmp r1, #0
	beq _080A096C
	ldrb r0, [r1, #3]
	cmp r0, #0xc7
	bhi _080A0964
	adds r0, #1
	strb r0, [r1, #3]
_080A0964:
	adds r0, r5, #0
	movs r1, #2
	bl sub_080A0C14
_080A096C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A0974: .4byte 0x0203E768

	thumb_func_start sub_080A0978
sub_080A0978: @ 0x080A0978
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r5, r4, #0
	cmp r4, #0x45
	bhi _080A09AC
	adds r0, r4, #0
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A09AC
	lsls r1, r4, #4
	ldr r0, _080A09B4 @ =0x0203E768
	adds r1, r1, r0
	cmp r1, #0
	beq _080A09AC
	ldrb r0, [r1, #4]
	cmp r0, #0xc7
	bhi _080A09A4
	adds r0, #1
	strb r0, [r1, #4]
_080A09A4:
	adds r0, r5, #0
	movs r1, #2
	bl sub_080A0C14
_080A09AC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A09B4: .4byte 0x0203E768

	thumb_func_start sub_080A09B8
sub_080A09B8: @ 0x080A09B8
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r5, r4, #0
	cmp r4, #0x45
	bhi _080A09FC
	adds r0, r4, #0
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A09FC
	lsls r1, r4, #4
	ldr r0, _080A0A04 @ =0x0203E768
	adds r2, r1, r0
	cmp r2, #0
	beq _080A09FC
	ldrb r3, [r2, #7]
	lsls r0, r3, #0x1a
	lsrs r0, r0, #0x1a
	cmp r0, #0x3b
	bgt _080A09F4
	adds r1, r0, #1
	movs r0, #0x3f
	ands r1, r0
	movs r0, #0x40
	rsbs r0, r0, #0
	ands r0, r3
	orrs r0, r1
	strb r0, [r2, #7]
_080A09F4:
	adds r0, r5, #0
	movs r1, #0x40
	bl sub_080A0C14
_080A09FC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A0A04: .4byte 0x0203E768

	thumb_func_start PidStatsAddMove
PidStatsAddMove: @ 0x080A0A08
	push {r4, r5, r6, lr}
	adds r5, r1, #0
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r6, r4, #0
	cmp r4, #0x45
	bhi _080A0A5C
	adds r0, r4, #0
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A0A5C
	lsls r1, r4, #4
	ldr r0, _080A0A64 @ =0x0203E768
	adds r3, r1, r0
	cmp r3, #0
	beq _080A0A5C
	ldrb r4, [r3, #7]
	lsrs r1, r4, #6
	ldrb r2, [r3, #8]
	lsls r0, r2, #2
	orrs r0, r1
	adds r2, r0, r5
	movs r0, #0xfa
	lsls r0, r0, #2
	cmp r2, r0
	ble _080A0A42
	adds r2, r0, #0
_080A0A42:
	movs r0, #3
	ands r0, r2
	lsls r0, r0, #6
	movs r1, #0x3f
	ands r1, r4
	orrs r1, r0
	strb r1, [r3, #7]
	lsrs r0, r2, #2
	strb r0, [r3, #8]
	adds r0, r6, #0
	movs r1, #2
	bl sub_080A0C14
_080A0A5C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A0A64: .4byte 0x0203E768

	thumb_func_start PidStatsAddExpGained
PidStatsAddExpGained: @ 0x080A0A68
	push {r4, r5, r6, lr}
	adds r5, r1, #0
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r6, r4, #0
	cmp r4, #0x45
	bhi _080A0AB4
	adds r0, r4, #0
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A0AB4
	lsls r1, r4, #4
	ldr r0, _080A0ABC @ =0x0203E768
	adds r2, r1, r0
	cmp r2, #0
	beq _080A0AB4
	ldr r3, [r2, #8]
	lsls r0, r3, #8
	lsrs r0, r0, #0x14
	adds r0, r0, r5
	movs r1, #0xfa
	lsls r1, r1, #4
	cmp r0, r1
	ble _080A0A9E
	adds r0, r1, #0
_080A0A9E:
	ldr r1, _080A0AC0 @ =0x00000FFF
	ands r1, r0
	lsls r1, r1, #0xc
	ldr r0, _080A0AC4 @ =0xFF000FFF
	ands r0, r3
	orrs r0, r1
	str r0, [r2, #8]
	adds r0, r6, #0
	adds r1, r5, #0
	bl sub_080A0C14
_080A0AB4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A0ABC: .4byte 0x0203E768
_080A0AC0: .4byte 0x00000FFF
_080A0AC4: .4byte 0xFF000FFF

	thumb_func_start PidStatsSubFavval08
PidStatsSubFavval08: @ 0x080A0AC8
	push {lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r1, #8
	rsbs r1, r1, #0
	bl sub_080A0C14
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A0ADC
sub_080A0ADC: @ 0x080A0ADC
	push {lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, _080A0AEC @ =0xFFFFFF00
	bl sub_080A0C14
	pop {r0}
	bx r0
	.align 2, 0
_080A0AEC: .4byte 0xFFFFFF00

	thumb_func_start sub_080A0AF0
sub_080A0AF0: @ 0x080A0AF0
	push {r4, lr}
	movs r3, #0
	ldr r2, _080A0B10 @ =0x0203E778
	movs r1, #0x45
_080A0AF8:
	ldrh r4, [r2, #0xc]
	lsls r0, r4, #0x12
	lsrs r0, r0, #0x14
	adds r3, r3, r0
	adds r2, #0x10
	subs r1, #1
	cmp r1, #0
	bge _080A0AF8
	adds r0, r3, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080A0B10: .4byte 0x0203E778

	thumb_func_start sub_080A0B14
sub_080A0B14: @ 0x080A0B14
	push {r4, r5, lr}
	movs r3, #0
	ldr r0, _080A0B40 @ =0x0203E778
	movs r4, #3
	adds r1, r0, #0
	adds r1, #0xb
	movs r2, #0x45
_080A0B22:
	adds r0, r4, #0
	ldrb r5, [r1, #1]
	ands r0, r5
	lsls r0, r0, #8
	ldrb r5, [r1]
	orrs r0, r5
	adds r3, r3, r0
	adds r1, #0x10
	subs r2, #1
	cmp r2, #0
	bge _080A0B22
	adds r0, r3, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080A0B40: .4byte 0x0203E778

	thumb_func_start sub_080A0B44
sub_080A0B44: @ 0x080A0B44
	movs r0, #0
	ldr r2, _080A0B58 @ =0x0203E778
	movs r1, #0x45
_080A0B4A:
	ldrb r3, [r2]
	adds r0, r3, r0
	adds r2, #0x10
	subs r1, #1
	cmp r1, #0
	bge _080A0B4A
	bx lr
	.align 2, 0
_080A0B58: .4byte 0x0203E778

	thumb_func_start sub_080A0B5C
sub_080A0B5C: @ 0x080A0B5C
	push {r4, r5, r6, lr}
	movs r6, #0
	ldr r5, _080A0B84 @ =0x0203E778
	movs r4, #0x45
_080A0B64:
	ldr r0, [r5, #8]
	lsls r0, r0, #8
	lsrs r0, r0, #0x14
	movs r1, #0x64
	bl __divsi3
	adds r6, r6, r0
	adds r5, #0x10
	subs r4, #1
	cmp r4, #0
	bge _080A0B64
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080A0B84: .4byte 0x0203E778

	thumb_func_start sub_080A0B88
sub_080A0B88: @ 0x080A0B88
	movs r3, #0
	ldr r2, _080A0BA4 @ =0x0203E778
	movs r1, #0x45
_080A0B8E:
	ldr r0, [r2, #8]
	lsls r0, r0, #8
	lsrs r0, r0, #0x14
	adds r3, r3, r0
	adds r2, #0x10
	subs r1, #1
	cmp r1, #0
	bge _080A0B8E
	adds r0, r3, #0
	bx lr
	.align 2, 0
_080A0BA4: .4byte 0x0203E778

	thumb_func_start sub_080A0BA8
sub_080A0BA8: @ 0x080A0BA8
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r0, #0
	cmp r0, #0x45
	bhi _080A0BC8
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A0BC8
	lsls r1, r4, #4
	ldr r0, _080A0BCC @ =0x0203E768
	adds r1, r1, r0
	cmp r1, #0
	bne _080A0BD0
_080A0BC8:
	movs r0, #0
	b _080A0BD6
	.align 2, 0
_080A0BCC: .4byte 0x0203E768
_080A0BD0:
	ldr r0, [r1, #8]
	lsls r0, r0, #8
	lsrs r0, r0, #0x14
_080A0BD6:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_080A0BDC
sub_080A0BDC: @ 0x080A0BDC
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r0, #0
	cmp r0, #0x45
	bhi _080A0BFC
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A0BFC
	lsls r1, r4, #4
	ldr r0, _080A0C04 @ =0x0203E768
	adds r0, r1, r0
	cmp r0, #0
	bne _080A0C08
_080A0BFC:
	movs r0, #0x80
	lsls r0, r0, #6
	b _080A0C0E
	.align 2, 0
_080A0C04: .4byte 0x0203E768
_080A0C08:
	ldr r0, [r0]
	lsls r0, r0, #8
	lsrs r0, r0, #0x16
_080A0C0E:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_080A0C14
sub_080A0C14: @ 0x080A0C14
	push {r4, r5, lr}
	adds r5, r1, #0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r0, #0
	cmp r0, #0x45
	bhi _080A0C76
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A0C76
	lsls r1, r4, #4
	ldr r0, _080A0C50 @ =0x0203E768
	adds r3, r1, r0
	cmp r3, #0
	beq _080A0C76
	ldr r2, [r3]
	lsls r0, r2, #8
	lsrs r0, r0, #0x10
	adds r1, r0, r5
	movs r0, #0x80
	lsls r0, r0, #7
	cmp r1, r0
	ble _080A0C58
	ldr r0, _080A0C54 @ =0xFF0000FF
	ands r0, r2
	movs r1, #0x80
	lsls r1, r1, #0xf
	b _080A0C72
	.align 2, 0
_080A0C50: .4byte 0x0203E768
_080A0C54: .4byte 0xFF0000FF
_080A0C58:
	cmp r1, #0
	bge _080A0C68
	ldr r0, _080A0C64 @ =0xFF0000FF
	ands r2, r0
	str r2, [r3]
	b _080A0C76
	.align 2, 0
_080A0C64: .4byte 0xFF0000FF
_080A0C68:
	ldr r0, _080A0C7C @ =0x0000FFFF
	ands r1, r0
	lsls r1, r1, #8
	ldr r0, _080A0C80 @ =0xFF0000FF
	ands r0, r2
_080A0C72:
	orrs r0, r1
	str r0, [r3]
_080A0C76:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A0C7C: .4byte 0x0000FFFF
_080A0C80: .4byte 0xFF0000FF

	thumb_func_start PidStatsRecordBattleResult
PidStatsRecordBattleResult: @ 0x080A0C84
	push {r4, r5, r6, r7, lr}
	movs r7, #0
	movs r5, #0
	ldr r4, _080A0CE0 @ =gBattleActor
	adds r0, r4, #0
	bl GetUnitCurrentHp
	cmp r0, #0
	bne _080A0C9A
	adds r7, r4, #0
	ldr r5, _080A0CE4 @ =gBattleTarget
_080A0C9A:
	ldr r6, _080A0CE4 @ =gBattleTarget
	adds r0, r6, #0
	bl GetUnitCurrentHp
	cmp r0, #0
	bne _080A0CAA
	adds r7, r6, #0
	adds r5, r4, #0
_080A0CAA:
	cmp r7, #0
	beq _080A0CDA
	cmp r5, #0
	beq _080A0CC4
	movs r0, #0xc0
	ldrb r1, [r5, #0xb]
	ands r0, r1
	cmp r0, #0
	bne _080A0CC4
	ldr r0, [r5]
	ldrb r0, [r0, #4]
	bl sub_080A0768
_080A0CC4:
	cmp r7, #0
	beq _080A0CDA
	movs r0, #0xc0
	ldrb r1, [r7, #0xb]
	ands r0, r1
	cmp r0, #0
	bne _080A0CDA
	ldr r0, [r7]
	ldrb r0, [r0, #4]
	bl sub_080A07C8
_080A0CDA:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A0CE0: .4byte gBattleActor
_080A0CE4: .4byte gBattleTarget

	thumb_func_start sub_080A0CE8
sub_080A0CE8: @ 0x080A0CE8
	push {r4, r5, r6, lr}
	sub sp, #0xac
	adds r6, r0, #0
	mov r0, sp
	bl ReadGlobalSaveInfo
	movs r4, #0
	add r1, sp, #0x14
_080A0CF8:
	adds r0, r1, r4
	ldrb r0, [r0]
	cmp r0, r6
	beq _080A0D24
	adds r4, #1
	cmp r4, #0xb
	ble _080A0CF8
	movs r4, #0
	add r5, sp, #0x64
_080A0D0A:
	adds r0, r4, #0
	bl IsSaveValid
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A0D28
	adds r0, r4, #0
	adds r1, r5, #0
	bl ReadGameSavePlaySt
	ldrb r0, [r5, #0x18]
	cmp r0, r6
	bne _080A0D28
_080A0D24:
	movs r0, #0
	b _080A0D30
_080A0D28:
	adds r4, #1
	cmp r4, #2
	ble _080A0D0A
	movs r0, #1
_080A0D30:
	add sp, #0xac
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_080A0D38
sub_080A0D38: @ 0x080A0D38
	push {r4, lr}
	movs r4, #1
_080A0D3C:
	adds r0, r4, #0
	bl sub_080A0CE8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A0D4C
	adds r0, r4, #0
	b _080A0D52
_080A0D4C:
	adds r4, #1
	cmp r4, #0xff
	ble _080A0D3C
_080A0D52:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_080A0D58
sub_080A0D58: @ 0x080A0D58
	movs r2, #0
	movs r1, #0
	adds r3, r0, #0
	adds r3, #0x14
_080A0D60:
	adds r0, r3, r1
	ldrb r0, [r0]
	cmp r0, #0
	beq _080A0D6A
	adds r2, #1
_080A0D6A:
	adds r1, #1
	cmp r1, #0xb
	ble _080A0D60
	adds r0, r2, #0
	bx lr

	thumb_func_start sub_080A0D74
sub_080A0D74: @ 0x080A0D74
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl ReadGlobalSaveInfo
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A0D8C
	mov r0, sp
	bl sub_080A0D58
	b _080A0D8E
_080A0D8C:
	movs r0, #0
_080A0D8E:
	add sp, #0x64
	pop {r1}
	bx r1

	thumb_func_start sub_080A0D94
sub_080A0D94: @ 0x080A0D94
	push {r4, lr}
	movs r3, #0
	adds r4, r0, #0
	adds r4, #0x14
	adds r2, r4, #0
_080A0D9E:
	adds r0, r2, r3
	ldrb r0, [r0]
	cmp r0, r1
	beq _080A0DC2
	adds r3, #1
	cmp r3, #0xb
	ble _080A0D9E
	movs r3, #0
_080A0DAE:
	adds r2, r4, r3
	ldrb r0, [r2]
	cmp r0, #0
	bne _080A0DBC
	strb r1, [r2]
	movs r0, #1
	b _080A0DC4
_080A0DBC:
	adds r3, #1
	cmp r3, #0xb
	ble _080A0DAE
_080A0DC2:
	movs r0, #0
_080A0DC4:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080A0DCC
sub_080A0DCC: @ 0x080A0DCC
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl ReadGlobalSaveInfo
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A0DE6
	bl InitGlobalSaveInfodata
	mov r0, sp
	bl ReadGlobalSaveInfo
_080A0DE6:
	mov r1, sp
	movs r0, #2
	ldrb r2, [r1, #0xe]
	orrs r0, r2
	strb r0, [r1, #0xe]
	mov r0, sp
	bl WriteGlobalSaveInfo
	add sp, #0x64
	pop {r0}
	bx r0

	thumb_func_start sub_080A0DFC
sub_080A0DFC: @ 0x080A0DFC
	push {lr}
	movs r0, #0
	bl GetChapterStats
	movs r1, #0x7f
	ldrb r0, [r0]
	ands r1, r0
	cmp r1, #0
	bne _080A0E28
	ldr r0, _080A0E1C @ =gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #2
	bne _080A0E20
	movs r0, #0
	b _080A0E42
	.align 2, 0
_080A0E1C: .4byte gPlaySt
_080A0E20:
	cmp r0, #3
	bne _080A0E28
	movs r0, #2
	b _080A0E42
_080A0E28:
	ldr r0, _080A0E34 @ =gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #2
	bne _080A0E38
	movs r0, #1
	b _080A0E42
	.align 2, 0
_080A0E34: .4byte gPlaySt
_080A0E38:
	cmp r0, #3
	beq _080A0E40
	movs r0, #4
	b _080A0E42
_080A0E40:
	movs r0, #3
_080A0E42:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080A0E48
sub_080A0E48: @ 0x080A0E48
	push {r4, r5, r6, r7, lr}
	sub sp, #0x64
	bl sub_080A0DFC
	adds r5, r0, #0
	ldr r7, _080A0E94 @ =gPlaySt
	ldrb r0, [r7, #0x14]
	lsrs r4, r0, #6
	movs r0, #1
	ands r4, r0
	adds r6, r4, #0
	mov r0, sp
	bl ReadGlobalSaveInfo
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A0E74
	bl InitGlobalSaveInfodata
	mov r0, sp
	bl ReadGlobalSaveInfo
_080A0E74:
	ldrb r1, [r7, #0x18]
	mov r0, sp
	bl sub_080A0D94
	mov r1, sp
	movs r0, #1
	ldrb r2, [r1, #0xe]
	orrs r2, r0
	strb r2, [r1, #0xe]
	cmp r5, #1
	beq _080A0EB6
	cmp r5, #1
	bgt _080A0E98
	cmp r5, #0
	beq _080A0EA6
	b _080A0ECE
	.align 2, 0
_080A0E94: .4byte gPlaySt
_080A0E98:
	cmp r5, #3
	bgt _080A0ECE
	cmp r4, #0
	beq _080A0EC6
	mov r1, sp
	movs r0, #0x80
	b _080A0ECA
_080A0EA6:
	cmp r4, #0
	beq _080A0EB0
	mov r1, sp
	movs r0, #0x20
	b _080A0ECA
_080A0EB0:
	mov r1, sp
	movs r0, #4
	b _080A0ECA
_080A0EB6:
	cmp r6, #0
	beq _080A0EC0
	mov r1, sp
	movs r0, #0x40
	b _080A0ECA
_080A0EC0:
	mov r1, sp
	movs r0, #8
	b _080A0ECA
_080A0EC6:
	mov r1, sp
	movs r0, #0x10
_080A0ECA:
	orrs r2, r0
	strb r2, [r1, #0xe]
_080A0ECE:
	mov r0, sp
	bl WriteGlobalSaveInfo
	add sp, #0x64
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start GetPidStats
GetPidStats: @ 0x080A0EDC
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r0, #0
	cmp r4, #0x45
	bhi _080A0F00
	adds r0, r4, #0
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A0F00
	lsls r0, r4, #4
	ldr r1, _080A0EFC @ =0x0203E768
	adds r0, r0, r1
	b _080A0F02
	.align 2, 0
_080A0EFC: .4byte 0x0203E768
_080A0F00:
	movs r0, #0
_080A0F02:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_080A0F08
sub_080A0F08: @ 0x080A0F08
	ldr r0, _080A0F10 @ =0x0203EC98
	ldr r0, [r0]
	bx lr
	.align 2, 0
_080A0F10: .4byte 0x0203EC98

	thumb_func_start sub_080A0F14
sub_080A0F14: @ 0x080A0F14
	ldr r1, _080A0F1C @ =0x0203EC98
	str r0, [r1]
	bx lr
	.align 2, 0
_080A0F1C: .4byte 0x0203EC98

	thumb_func_start sub_080A0F20
sub_080A0F20: @ 0x080A0F20
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A0F34 @ =0x0203EC98
	ldr r2, _080A0F38 @ =0x00000D88
	adds r1, r1, r2
	movs r2, #4
	bl WriteAndVerifySramFast
	pop {r0}
	bx r0
	.align 2, 0
_080A0F34: .4byte 0x0203EC98
_080A0F38: .4byte 0x00000D88

	thumb_func_start sub_080A0F3C
sub_080A0F3C: @ 0x080A0F3C
	push {lr}
	ldr r2, _080A0F54 @ =0x03005D90
	ldr r1, _080A0F58 @ =0x00000D88
	adds r0, r0, r1
	ldr r1, _080A0F5C @ =0x0203EC98
	ldr r3, [r2]
	movs r2, #4
	bl _call_via_r3
	pop {r0}
	bx r0
	.align 2, 0
_080A0F54: .4byte 0x03005D90
_080A0F58: .4byte 0x00000D88
_080A0F5C: .4byte 0x0203EC98

	thumb_func_start sub_080A0F60
sub_080A0F60: @ 0x080A0F60
	push {r4, lr}
	sub sp, #0x64
	adds r4, r0, #0
	mov r0, sp
	bl ReadGlobalSaveInfo
	mov r0, sp
	adds r0, #0x62
	strb r4, [r0]
	mov r0, sp
	bl WriteGlobalSaveInfoNoChecksum
	add sp, #0x64
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080A0F80
sub_080A0F80: @ 0x080A0F80
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl ReadGlobalSaveInfo
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A0F9E
	mov r0, sp
	adds r0, #0x62
	ldrb r0, [r0]
	cmp r0, #2
	bgt _080A0F9E
	cmp r0, #0
	bge _080A0FA0
_080A0F9E:
	movs r0, #0
_080A0FA0:
	add sp, #0x64
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080A0FA8
sub_080A0FA8: @ 0x080A0FA8
	push {r4, r5, lr}
	sub sp, #0x58
	adds r5, r0, #0
	movs r0, #3
	bl IsValidSuspendSave
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A0FD0
	add r4, sp, #0x10
	movs r0, #3
	adds r1, r4, #0
	bl ReadSuspendSavePlaySt
	ldrb r0, [r4, #0xc]
	cmp r0, r5
	bne _080A0FD0
	movs r0, #3
	bl sub_080A1A60
_080A0FD0:
	mov r1, sp
	movs r0, #0xff
	strb r0, [r1, #6]
	mov r0, sp
	adds r1, r5, #0
	bl WriteSaveBlockInfo
	add sp, #0x58
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A0FE8
sub_080A0FE8: @ 0x080A0FE8
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	sub sp, #0x10
	mov sb, r1
	bl GetSaveReadAddr
	adds r6, r0, #0
	mov r0, sb
	bl GetSaveWriteAddr
	mov r8, r0
	ldr r0, _080A1040 @ =0x03005D90
	ldr r4, _080A1044 @ =gBuf
	ldr r5, _080A1048 @ =0x00000D8C
	ldr r3, [r0]
	adds r0, r6, #0
	adds r1, r4, #0
	adds r2, r5, #0
	bl _call_via_r3
	adds r0, r4, #0
	mov r1, r8
	adds r2, r5, #0
	bl WriteAndVerifySramFast
	ldr r0, _080A104C @ =0x00011217
	str r0, [sp]
	mov r1, sp
	movs r0, #0
	strb r0, [r1, #6]
	mov r0, sp
	mov r1, sb
	bl WriteSaveBlockInfo
	add sp, #0x10
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A1040: .4byte 0x03005D90
_080A1044: .4byte gBuf
_080A1048: .4byte 0x00000D8C
_080A104C: .4byte 0x00011217

	thumb_func_start sub_080A1050
sub_080A1050: @ 0x080A1050
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x38
	mov r8, r0
	adds r4, r1, #0
	adds r5, r2, #0
	bl GetSaveWriteAddr
	adds r7, r0, #0
	cmp r5, #0
	bne _080A106C
	ldr r0, _080A1180 @ =gPlaySt
	ldrb r5, [r0, #0x1b]
_080A106C:
	movs r0, #0
	bl SetGameTime
	adds r0, r4, #0
	bl sub_0802E3E0
	bl InitUnits
	bl sub_0802EBD4
	bl sub_0807A0A0
	movs r0, #3
	bl sub_080A1A60
	ldr r4, _080A1180 @ =gPlaySt
	adds r1, r4, #0
	adds r1, #0x2c
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	ldr r0, _080A1184 @ =0xFFFFE00F
	ldrh r1, [r4, #0x2c]
	ands r0, r1
	strh r0, [r4, #0x2c]
	add r0, sp, #0x34
	movs r6, #0
	strh r6, [r0]
	adds r1, r4, #0
	adds r1, #0x30
	ldr r2, _080A1188 @ =0x01000008
	bl CpuSet
	ldr r0, [r4, #0x2c]
	ldr r1, _080A118C @ =0xFF801FFF
	ands r0, r1
	str r0, [r4, #0x2c]
	strb r5, [r4, #0x1b]
	adds r1, r4, #0
	adds r1, #0x2b
	movs r0, #1
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x20
	strb r6, [r0]
	cmp r5, #1
	bne _080A10D4
	strb r6, [r4, #0xe]
_080A10D4:
	cmp r5, #2
	bne _080A10DC
	movs r0, #0xc
	strb r0, [r4, #0xe]
_080A10DC:
	cmp r5, #3
	bne _080A10E4
	movs r0, #0xd
	strb r0, [r4, #0xe]
_080A10E4:
	bl sub_080A0D38
	strb r0, [r4, #0x18]
	mov r0, r8
	strb r0, [r4, #0xc]
	bl sub_080A0D74
	movs r1, #0x1f
	ands r0, r1
	lsls r0, r0, #7
	ldr r1, _080A1190 @ =0xFFFFF07F
	ldrh r2, [r4, #0x2e]
	ands r1, r2
	orrs r1, r0
	strh r1, [r4, #0x2e]
	adds r0, r4, #0
	adds r1, r7, #0
	movs r2, #0x48
	bl WriteAndVerifySramFast
	movs r0, #0
	bl sub_080A0F14
	adds r0, r7, #0
	bl sub_080A0F20
	mov r0, sp
	adds r0, #0x36
	movs r1, #0
	strh r1, [r0]
	add r4, sp, #0x10
	ldr r2, _080A1194 @ =0x01000012
	adds r1, r4, #0
	bl CpuSet
	adds r6, r4, #0
	adds r4, r7, #0
	adds r4, #0x48
	movs r5, #0x33
_080A1132:
	adds r0, r6, #0
	adds r1, r4, #0
	movs r2, #0x24
	bl WriteAndVerifySramFast
	adds r4, #0x24
	subs r5, #1
	cmp r5, #0
	bge _080A1132
	movs r4, #0
	movs r1, #0xf3
	lsls r1, r1, #3
	adds r0, r7, r1
	bl sub_0809F3D4
	adds r0, r7, #0
	bl ClearPidChStatsSaveData
	movs r2, #0xd8
	lsls r2, r2, #4
	adds r0, r7, r2
	bl sub_0809F364
	ldr r0, _080A1198 @ =0x00011217
	str r0, [sp]
	mov r0, sp
	strb r4, [r0, #6]
	mov r1, r8
	bl WriteSaveBlockInfo
	mov r0, r8
	bl sub_080A0F60
	add sp, #0x38
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A1180: .4byte gPlaySt
_080A1184: .4byte 0xFFFFE00F
_080A1188: .4byte 0x01000008
_080A118C: .4byte 0xFF801FFF
_080A1190: .4byte 0xFFFFF07F
_080A1194: .4byte 0x01000012
_080A1198: .4byte 0x00011217

	thumb_func_start WriteGameSave
WriteGameSave: @ 0x080A119C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x74
	mov sb, r0
	bl GetSaveWriteAddr
	adds r7, r0, #0
	movs r0, #3
	bl sub_080A1A60
	ldr r4, _080A126C @ =gPlaySt
	mov r0, sb
	strb r0, [r4, #0xc]
	bl GetGameTime
	str r0, [r4]
	adds r0, r4, #0
	adds r1, r7, #0
	movs r2, #0x48
	bl WriteAndVerifySramFast
	add r1, sp, #0x10
	mov r8, r1
	adds r4, r7, #0
	adds r4, #0x48
	movs r6, #0
	ldr r0, _080A1270 @ =gUnitArrayBlue
	mov sl, r0
	movs r5, #0x33
_080A11DC:
	mov r1, sl
	adds r0, r6, r1
	adds r1, r4, #0
	bl WriteGameSavePackedUnit
	adds r4, #0x24
	adds r6, #0x48
	subs r5, #1
	cmp r5, #0
	bge _080A11DC
	mov r0, r8
	bl ReadGlobalSaveInfo
	movs r4, #0
	ldr r6, _080A1270 @ =gUnitArrayBlue
	movs r5, #0x33
_080A11FC:
	adds r0, r4, r6
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	mov r1, r8
	bl sub_0809F908
	adds r4, #0x48
	subs r5, #1
	cmp r5, #0
	bge _080A11FC
	movs r4, #0
	mov r0, r8
	bl WriteGlobalSaveInfo
	movs r1, #0xf3
	lsls r1, r1, #3
	adds r0, r7, r1
	bl sub_0809F3D4
	movs r1, #0x86
	lsls r1, r1, #4
	adds r0, r7, r1
	bl WritePidStats
	movs r1, #0xcc
	lsls r1, r1, #4
	adds r0, r7, r1
	bl WriteChapterStats
	adds r0, r7, #0
	bl sub_080A0F20
	movs r1, #0xd8
	lsls r1, r1, #4
	adds r0, r7, r1
	bl sub_0809F364
	ldr r0, _080A1274 @ =0x00011217
	str r0, [sp]
	mov r0, sp
	strb r4, [r0, #6]
	mov r1, sb
	bl WriteSaveBlockInfo
	mov r0, sb
	bl sub_080A0F60
	add sp, #0x74
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A126C: .4byte gPlaySt
_080A1270: .4byte gUnitArrayBlue
_080A1274: .4byte 0x00011217

	thumb_func_start ReadGameSave
ReadGameSave: @ 0x080A1278
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	mov sb, r0
	bl GetSaveReadAddr
	adds r7, r0, #0
	ldr r1, _080A1318 @ =gBmSt
	movs r0, #0x40
	ldrb r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	bne _080A129A
	movs r0, #3
	bl sub_080A1A60
_080A129A:
	ldr r0, _080A131C @ =0x03005D90
	ldr r4, _080A1320 @ =gPlaySt
	ldr r3, [r0]
	adds r0, r7, #0
	adds r1, r4, #0
	movs r2, #0x48
	bl _call_via_r3
	ldr r0, [r4]
	bl SetGameTime
	mov r0, sb
	strb r0, [r4, #0xc]
	bl InitUnits
	movs r6, #0
	adds r4, r7, #0
	adds r4, #0x48
	ldr r1, _080A1324 @ =gUnitArrayBlue
	mov r8, r1
	movs r5, #0x33
_080A12C4:
	mov r0, r8
	adds r1, r6, r0
	adds r0, r4, #0
	bl LoadSavedUnit
	adds r6, #0x48
	adds r4, #0x24
	subs r5, #1
	cmp r5, #0
	bge _080A12C4
	movs r1, #0xf3
	lsls r1, r1, #3
	adds r0, r7, r1
	bl sub_0809F3EC
	movs r1, #0xd8
	lsls r1, r1, #4
	adds r0, r7, r1
	bl sub_0809F3AC
	movs r1, #0x86
	lsls r1, r1, #4
	adds r0, r7, r1
	bl ReadPidStats
	movs r1, #0xcc
	lsls r1, r1, #4
	adds r0, r7, r1
	bl ReadChapterStats
	adds r0, r7, #0
	bl sub_080A0F3C
	mov r0, sb
	bl sub_080A0F60
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A1318: .4byte gBmSt
_080A131C: .4byte 0x03005D90
_080A1320: .4byte gPlaySt
_080A1324: .4byte gUnitArrayBlue

	thumb_func_start IsSaveValid
IsSaveValid: @ 0x080A1328
	push {lr}
	adds r1, r0, #0
	movs r0, #0
	bl ReadSaveBlockInfo
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start ReadGameSavePlaySt
ReadGameSavePlaySt: @ 0x080A133C
	push {r4, lr}
	adds r4, r1, #0
	bl GetSaveReadAddr
	ldr r1, _080A1358 @ =0x03005D90
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #0x48
	bl _call_via_r3
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A1358: .4byte 0x03005D90

	thumb_func_start sub_080A135C
sub_080A135C: @ 0x080A135C
	push {lr}
	sub sp, #4
	bl GetSaveReadAddr
	ldr r1, _080A137C @ =0x03005D90
	ldr r2, _080A1380 @ =0x00000D88
	adds r0, r0, r2
	ldr r3, [r1]
	mov r1, sp
	movs r2, #4
	bl _call_via_r3
	ldr r0, [sp]
	add sp, #4
	pop {r1}
	bx r1
	.align 2, 0
_080A137C: .4byte 0x03005D90
_080A1380: .4byte 0x00000D88

	thumb_func_start sub_080A1384
sub_080A1384: @ 0x080A1384
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0xd
	bgt _080A1392
	movs r0, #0
	b _080A1394
_080A1392:
	movs r0, #1
_080A1394:
	bx lr
	.align 2, 0

	thumb_func_start sub_080A1398
sub_080A1398: @ 0x080A1398
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0xb
	bgt _080A13AA
	cmp r0, #0
	ble _080A13B2
	movs r0, #1
	b _080A13B4
_080A13AA:
	cmp r0, #0xd
	ble _080A13B2
	movs r0, #1
	b _080A13B4
_080A13B2:
	movs r0, #0
_080A13B4:
	bx lr
	.align 2, 0

	thumb_func_start sub_080A13B8
sub_080A13B8: @ 0x080A13B8
	push {r4, lr}
	sub sp, #0x48
	adds r4, r0, #0
	bl IsSaveValid
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A13DC
	adds r0, r4, #0
	mov r1, sp
	bl ReadGameSavePlaySt
	mov r0, sp
	bl sub_080A1398
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _080A13DE
_080A13DC:
	movs r0, #0
_080A13DE:
	add sp, #0x48
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start WriteGameSavePackedUnit
WriteGameSavePackedUnit: @ 0x080A13E8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x70
	adds r7, r0, #0
	str r1, [sp, #0x6c]
	mov r1, sp
	ldr r0, [r7]
	ldrb r0, [r0, #4]
	strb r0, [r1, #0x14]
	mov r2, sp
	ldr r0, [r7, #4]
	movs r1, #0x7f
	ldrb r0, [r0, #4]
	ands r1, r0
	movs r5, #0x80
	rsbs r5, r5, #0
	adds r0, r5, #0
	ldrb r3, [r2]
	ands r0, r3
	orrs r0, r1
	strb r0, [r2]
	ldr r4, [r7]
	cmp r4, #0
	bne _080A1434
	add r7, sp, #0x24
	adds r0, r7, #0
	bl ClearUnit
	mov r0, sp
	strb r4, [r0, #0x14]
	mov r1, sp
	adds r0, r5, #0
	ldrb r4, [r1]
	ands r0, r4
	strb r0, [r1]
_080A1434:
	mov r2, sp
	movs r1, #8
	ldrsb r1, [r7, r1]
	movs r5, #0x1f
	mov r8, r5
	mov r6, r8
	ands r1, r6
	lsls r1, r1, #7
	ldr r3, _080A17F4 @ =0xFFFFF07F
	adds r0, r3, #0
	ldrh r4, [r2]
	ands r0, r4
	orrs r0, r1
	strh r0, [r2]
	movs r5, #0x7f
	mov sb, r5
	mov r1, sb
	ldrb r6, [r7, #9]
	ands r1, r6
	lsls r1, r1, #0xc
	ldr r0, [sp]
	ldr r2, _080A17F8 @ =0xFFF80FFF
	ands r0, r2
	orrs r0, r1
	str r0, [sp]
	mov r4, sp
	movs r1, #0x10
	ldrsb r1, [r7, r1]
	movs r0, #0x3f
	ands r1, r0
	lsls r1, r1, #3
	ldrh r2, [r4, #2]
	ldr r0, _080A17FC @ =0xFFFFFE07
	ands r0, r2
	orrs r0, r1
	strh r0, [r4, #2]
	movs r1, #0x11
	ldrsb r1, [r7, r1]
	movs r0, #0x3f
	ands r1, r0
	lsls r1, r1, #1
	ldrb r2, [r4, #3]
	movs r0, #0x7f
	rsbs r0, r0, #0
	ands r0, r2
	orrs r0, r1
	strb r0, [r4, #3]
	movs r2, #0x12
	ldrsb r2, [r7, r2]
	movs r5, #0x3f
	ands r2, r5
	lsls r2, r2, #0xc
	ldr r0, [sp, #4]
	ldr r1, _080A1800 @ =0xFFFC0FFF
	ands r0, r1
	orrs r0, r2
	str r0, [sp, #4]
	mov r2, sp
	movs r1, #0x14
	ldrsb r1, [r7, r1]
	movs r4, #0x1f
	ands r1, r4
	lsls r1, r1, #2
	movs r0, #0x7d
	rsbs r0, r0, #0
	ldrb r6, [r2, #6]
	ands r0, r6
	orrs r0, r1
	strb r0, [r2, #6]
	mov r1, sp
	movs r0, #0x15
	ldrsb r0, [r7, r0]
	mov r2, r8
	ands r0, r2
	lsls r0, r0, #7
	ldrh r6, [r1, #6]
	ands r3, r6
	orrs r3, r0
	strh r3, [r1, #6]
	mov r3, sp
	movs r2, #0x16
	ldrsb r2, [r7, r2]
	movs r6, #0xf
	adds r1, r2, #0
	ands r1, r6
	lsls r1, r1, #4
	mov sl, r1
	adds r0, r6, #0
	ldrb r1, [r3, #7]
	ands r0, r1
	mov r1, sl
	orrs r0, r1
	strb r0, [r3, #7]
	lsrs r2, r2, #4
	movs r0, #1
	mov ip, r0
	ands r2, r0
	subs r0, #3
	ldrb r1, [r3, #8]
	ands r0, r1
	orrs r0, r2
	strb r0, [r3, #8]
	movs r1, #0x17
	ldrsb r1, [r7, r1]
	ands r1, r4
	lsls r1, r1, #1
	movs r2, #0x3f
	rsbs r2, r2, #0
	ands r0, r2
	orrs r0, r1
	strb r0, [r3, #8]
	mov r2, sp
	movs r1, #0x18
	ldrsb r1, [r7, r1]
	mov r3, r8
	ands r1, r3
	lsls r1, r1, #6
	ldr r0, _080A1804 @ =0xFFFFF83F
	ldrh r3, [r2, #8]
	ands r0, r3
	orrs r0, r1
	strh r0, [r2, #8]
	movs r1, #0x19
	ldrsb r1, [r7, r1]
	lsls r1, r1, #3
	movs r0, #7
	ldrb r3, [r2, #9]
	ands r0, r3
	orrs r0, r1
	strb r0, [r2, #9]
	movs r1, #0x1a
	ldrsb r1, [r7, r1]
	ands r1, r4
	movs r0, #0x20
	rsbs r0, r0, #0
	ldrb r4, [r2, #0xa]
	ands r0, r4
	orrs r0, r1
	strb r0, [r2, #0xa]
	movs r1, #0x1d
	ldrsb r1, [r7, r1]
	mov r0, r8
	ands r1, r0
	lsls r1, r1, #5
	ldr r0, _080A1808 @ =0xFFFFFC1F
	ldrh r3, [r2, #0xa]
	ands r0, r3
	orrs r0, r1
	strh r0, [r2, #0xa]
	mov r3, sp
	ldrh r2, [r7, #0x1e]
	adds r1, r2, #0
	ands r1, r5
	lsls r1, r1, #2
	mov r8, r1
	movs r4, #3
	adds r0, r4, #0
	ldrb r1, [r3, #0xb]
	ands r0, r1
	mov r1, r8
	orrs r0, r1
	strb r0, [r3, #0xb]
	lsrs r2, r2, #6
	strb r2, [r3, #0xc]
	ldr r3, _080A180C @ =0x00003FFF
	adds r1, r3, #0
	ldrh r2, [r7, #0x20]
	ands r1, r2
	lsls r1, r1, #8
	ldr r0, [sp, #0xc]
	ldr r2, _080A1810 @ =0xFFC000FF
	ands r0, r2
	orrs r0, r1
	str r0, [sp, #0xc]
	mov r2, sp
	ldrh r1, [r7, #0x22]
	ldr r0, _080A1814 @ =0x000003FF
	ands r0, r1
	lsls r0, r0, #6
	mov r8, r0
	ldrh r0, [r2, #0xe]
	ands r5, r0
	mov r0, r8
	orrs r5, r0
	strh r5, [r2, #0xe]
	lsrs r1, r1, #0xa
	ands r1, r6
	movs r0, #0x10
	rsbs r0, r0, #0
	ldrb r5, [r2, #0x10]
	ands r0, r5
	orrs r0, r1
	strb r0, [r2, #0x10]
	ldrh r6, [r7, #0x24]
	ands r3, r6
	lsls r3, r3, #4
	ldr r0, [sp, #0x10]
	ldr r1, _080A1818 @ =0xFFFC000F
	ands r0, r1
	orrs r0, r3
	str r0, [sp, #0x10]
	mov r1, sp
	ldrh r2, [r7, #0x26]
	lsls r0, r2, #2
	ldrh r3, [r1, #0x12]
	ands r4, r3
	orrs r4, r0
	strh r4, [r1, #0x12]
	ldrb r0, [r1, #3]
	mov r5, sb
	ands r5, r0
	strb r5, [r1, #3]
	ldr r6, _080A181C @ =0xFFFFF000
	adds r0, r6, #0
	ldrh r4, [r1, #4]
	ands r0, r4
	strh r0, [r1, #4]
	ldr r0, [r7, #0xc]
	movs r1, #4
	mov r8, r1
	ands r0, r1
	cmp r0, #0
	beq _080A1618
	mov r3, sp
	mov r0, sp
	ldr r2, _080A1820 @ =0x00000FFF
	mov sl, r2
	ldrh r0, [r0, #4]
	ands r2, r0
	mov r4, ip
	lsrs r1, r4, #1
	lsls r0, r4, #7
	orrs r0, r5
	strb r0, [r3, #3]
	orrs r1, r2
	mov r5, sl
	ands r1, r5
	adds r0, r6, #0
	ldrh r2, [r3, #4]
	ands r0, r2
	orrs r0, r1
	strh r0, [r3, #4]
_080A1618:
	ldr r0, [r7, #0xc]
	movs r3, #8
	mov sl, r3
	ands r0, r3
	cmp r0, #0
	beq _080A165A
	mov r3, sp
	mov r0, sp
	ldrb r4, [r0, #3]
	lsrs r2, r4, #7
	ldr r5, _080A1820 @ =0x00000FFF
	adds r1, r5, #0
	ldrh r0, [r0, #4]
	ands r1, r0
	lsls r1, r1, #1
	orrs r1, r2
	movs r0, #2
	orrs r1, r0
	adds r2, r1, #0
	mov r0, ip
	ands r2, r0
	lsls r2, r2, #7
	mov r0, sb
	ands r0, r4
	orrs r0, r2
	strb r0, [r3, #3]
	lsrs r1, r1, #1
	ands r1, r5
	adds r0, r6, #0
	ldrh r2, [r3, #4]
	ands r0, r2
	orrs r0, r1
	strh r0, [r3, #4]
_080A165A:
	ldr r0, [r7, #0xc]
	movs r1, #0x80
	lsls r1, r1, #7
	ands r0, r1
	cmp r0, #0
	beq _080A169C
	mov r3, sp
	mov r0, sp
	ldrb r4, [r0, #3]
	lsrs r2, r4, #7
	ldr r5, _080A1820 @ =0x00000FFF
	adds r1, r5, #0
	ldrh r0, [r0, #4]
	ands r1, r0
	lsls r1, r1, #1
	orrs r1, r2
	mov r0, r8
	orrs r1, r0
	adds r2, r1, #0
	mov r0, ip
	ands r2, r0
	lsls r2, r2, #7
	mov r0, sb
	ands r0, r4
	orrs r0, r2
	strb r0, [r3, #3]
	lsrs r1, r1, #1
	ands r1, r5
	adds r0, r6, #0
	ldrh r2, [r3, #4]
	ands r0, r2
	orrs r0, r1
	strh r0, [r3, #4]
_080A169C:
	ldr r0, [r7, #0xc]
	movs r1, #0x80
	lsls r1, r1, #8
	ands r0, r1
	cmp r0, #0
	beq _080A16DE
	mov r3, sp
	mov r0, sp
	ldrb r4, [r0, #3]
	lsrs r2, r4, #7
	ldr r5, _080A1820 @ =0x00000FFF
	adds r1, r5, #0
	ldrh r0, [r0, #4]
	ands r1, r0
	lsls r1, r1, #1
	orrs r1, r2
	mov r0, sl
	orrs r1, r0
	adds r2, r1, #0
	mov r0, ip
	ands r2, r0
	lsls r2, r2, #7
	mov r0, sb
	ands r0, r4
	orrs r0, r2
	strb r0, [r3, #3]
	lsrs r1, r1, #1
	ands r1, r5
	adds r0, r6, #0
	ldrh r2, [r3, #4]
	ands r0, r2
	orrs r0, r1
	strh r0, [r3, #4]
_080A16DE:
	ldr r0, [r7, #0xc]
	movs r1, #0x80
	lsls r1, r1, #6
	ands r0, r1
	cmp r0, #0
	beq _080A1720
	mov r3, sp
	mov r0, sp
	ldrb r4, [r0, #3]
	lsrs r2, r4, #7
	ldr r5, _080A1820 @ =0x00000FFF
	adds r1, r5, #0
	ldrh r0, [r0, #4]
	ands r1, r0
	lsls r1, r1, #1
	orrs r1, r2
	movs r0, #0x10
	orrs r1, r0
	adds r2, r1, #0
	mov r0, ip
	ands r2, r0
	lsls r2, r2, #7
	mov r0, sb
	ands r0, r4
	orrs r0, r2
	strb r0, [r3, #3]
	lsrs r1, r1, #1
	ands r1, r5
	adds r0, r6, #0
	ldrh r2, [r3, #4]
	ands r0, r2
	orrs r0, r1
	strh r0, [r3, #4]
_080A1720:
	ldr r0, [r7, #0xc]
	movs r1, #0x80
	lsls r1, r1, #9
	ands r0, r1
	cmp r0, #0
	beq _080A1762
	mov r3, sp
	mov r0, sp
	ldrb r4, [r0, #3]
	lsrs r2, r4, #7
	ldr r5, _080A1820 @ =0x00000FFF
	adds r1, r5, #0
	ldrh r0, [r0, #4]
	ands r1, r0
	lsls r1, r1, #1
	orrs r1, r2
	movs r0, #0x20
	orrs r1, r0
	adds r2, r1, #0
	mov r0, ip
	ands r2, r0
	lsls r2, r2, #7
	mov r0, sb
	ands r0, r4
	orrs r0, r2
	strb r0, [r3, #3]
	lsrs r1, r1, #1
	ands r1, r5
	adds r0, r6, #0
	ldrh r2, [r3, #4]
	ands r0, r2
	orrs r0, r1
	strh r0, [r3, #4]
_080A1762:
	ldr r0, [r7, #0xc]
	movs r1, #0x80
	lsls r1, r1, #0x12
	ands r0, r1
	cmp r0, #0
	beq _080A17A4
	mov r3, sp
	mov r0, sp
	ldrb r4, [r0, #3]
	lsrs r2, r4, #7
	ldr r5, _080A1820 @ =0x00000FFF
	adds r1, r5, #0
	ldrh r0, [r0, #4]
	ands r1, r0
	lsls r1, r1, #1
	orrs r1, r2
	movs r0, #0x40
	orrs r1, r0
	adds r2, r1, #0
	mov r0, ip
	ands r2, r0
	lsls r2, r2, #7
	mov r0, sb
	ands r0, r4
	orrs r0, r2
	strb r0, [r3, #3]
	lsrs r1, r1, #1
	ands r1, r5
	adds r0, r6, #0
	ldrh r2, [r3, #4]
	ands r0, r2
	orrs r0, r1
	strh r0, [r3, #4]
_080A17A4:
	movs r2, #0
	mov r5, sp
	adds r5, #0x1d
	adds r6, r7, #0
	adds r6, #0x32
	mov r4, sp
	adds r4, #0x15
	adds r3, r7, #0
	adds r3, #0x28
_080A17B6:
	adds r0, r4, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #7
	ble _080A17B6
	movs r2, #0
	adds r4, r5, #0
	adds r3, r6, #0
_080A17CA:
	adds r0, r4, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #6
	ble _080A17CA
	mov r0, sp
	ldr r1, [sp, #0x6c]
	movs r2, #0x24
	bl WriteAndVerifySramFast
	add sp, #0x70
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
_080A17F2:
	.byte 0x17, 0xE0
_080A17F4: .4byte 0xFFFFF07F
_080A17F8: .4byte 0xFFF80FFF
_080A17FC: .4byte 0xFFFFFE07
_080A1800: .4byte 0xFFFC0FFF
_080A1804: .4byte 0xFFFFF83F
_080A1808: .4byte 0xFFFFFC1F
_080A180C: .4byte 0x00003FFF
_080A1810: .4byte 0xFFC000FF
_080A1814: .4byte 0x000003FF
_080A1818: .4byte 0xFFFC000F
_080A181C: .4byte 0xFFFFF000
_080A1820: .4byte 0x00000FFF

	thumb_func_start LoadSavedUnit
LoadSavedUnit: @ 0x080A1824
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x24
	adds r4, r1, #0
	ldr r1, _080A1A58 @ =0x03005D90
	ldr r3, [r1]
	mov r1, sp
	movs r2, #0x24
	bl _call_via_r3
	mov r0, sp
	ldrb r0, [r0, #0x14]
	bl GetCharacterData
	str r0, [r4]
	mov r0, sp
	ldrb r0, [r0]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	bl GetClassData
	str r0, [r4, #4]
	mov r0, sp
	ldrh r0, [r0]
	lsls r0, r0, #0x14
	lsrs r0, r0, #0x1b
	strb r0, [r4, #8]
	ldr r0, [sp]
	lsls r0, r0, #0xd
	lsrs r3, r0, #0x19
	strb r3, [r4, #9]
	mov r0, sp
	ldrh r0, [r0, #2]
	lsls r0, r0, #0x17
	lsrs r0, r0, #0x1a
	strb r0, [r4, #0x10]
	mov r0, sp
	ldrb r0, [r0, #3]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x1a
	strb r0, [r4, #0x11]
	ldr r0, [sp, #4]
	lsls r0, r0, #0xe
	lsrs r0, r0, #0x1a
	strb r0, [r4, #0x12]
	mov r0, sp
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x14]
	mov r0, sp
	ldrh r0, [r0, #6]
	lsls r0, r0, #0x14
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x15]
	mov r1, sp
	ldrb r0, [r1, #7]
	lsrs r2, r0, #4
	movs r5, #1
	adds r0, r5, #0
	ldrb r1, [r1, #8]
	ands r0, r1
	lsls r0, r0, #4
	orrs r0, r2
	strb r0, [r4, #0x16]
	mov r0, sp
	ldrb r0, [r0, #8]
	lsls r0, r0, #0x1a
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x17]
	mov r0, sp
	ldrh r0, [r0, #8]
	lsls r0, r0, #0x15
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x18]
	mov r0, sp
	ldrb r0, [r0, #9]
	lsrs r0, r0, #3
	strb r0, [r4, #0x19]
	mov r0, sp
	ldrb r0, [r0, #0xa]
	lsls r0, r0, #0x1b
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x1a]
	mov r0, sp
	ldrh r0, [r0, #0xa]
	lsls r0, r0, #0x16
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x1d]
	mov r0, sp
	ldrb r2, [r0, #0xb]
	lsrs r1, r2, #2
	ldrb r0, [r0, #0xc]
	lsls r0, r0, #6
	orrs r0, r1
	strh r0, [r4, #0x1e]
	ldr r0, [sp, #0xc]
	lsls r0, r0, #0xa
	lsrs r0, r0, #0x12
	strh r0, [r4, #0x20]
	mov r1, sp
	ldrh r0, [r1, #0xe]
	lsrs r2, r0, #6
	movs r0, #0xf
	ldrb r1, [r1, #0x10]
	ands r0, r1
	lsls r0, r0, #0xa
	orrs r0, r2
	strh r0, [r4, #0x22]
	ldr r0, [sp, #0x10]
	lsls r0, r0, #0xe
	lsrs r0, r0, #0x12
	strh r0, [r4, #0x24]
	mov r0, sp
	ldrh r0, [r0, #0x12]
	lsrs r0, r0, #2
	strh r0, [r4, #0x26]
	cmp r3, #0x63
	bls _080A1918
	movs r0, #0xff
	strb r0, [r4, #9]
_080A1918:
	movs r0, #0
	str r0, [r4, #0xc]
	mov r2, sp
	ldrb r1, [r2, #3]
	lsrs r1, r1, #7
	ldr r3, _080A1A5C @ =0x00000FFF
	adds r0, r3, #0
	ldrh r2, [r2, #4]
	ands r0, r2
	lsls r0, r0, #1
	orrs r0, r1
	ands r0, r5
	cmp r0, #0
	beq _080A1938
	movs r0, #5
	str r0, [r4, #0xc]
_080A1938:
	mov r0, sp
	adds r1, r3, #0
	ldrh r0, [r0, #4]
	ands r1, r0
	lsls r1, r1, #1
	movs r0, #2
	ands r1, r0
	cmp r1, #0
	beq _080A1952
	ldr r0, [r4, #0xc]
	movs r1, #9
	orrs r0, r1
	str r0, [r4, #0xc]
_080A1952:
	mov r0, sp
	adds r1, r3, #0
	ldrh r0, [r0, #4]
	ands r1, r0
	lsls r1, r1, #1
	movs r0, #4
	ands r1, r0
	cmp r1, #0
	beq _080A196E
	ldr r0, [r4, #0xc]
	movs r1, #0x80
	lsls r1, r1, #7
	orrs r0, r1
	str r0, [r4, #0xc]
_080A196E:
	mov r0, sp
	adds r1, r3, #0
	ldrh r0, [r0, #4]
	ands r1, r0
	lsls r1, r1, #1
	movs r0, #8
	ands r1, r0
	cmp r1, #0
	beq _080A198A
	ldr r0, [r4, #0xc]
	movs r1, #0x80
	lsls r1, r1, #8
	orrs r0, r1
	str r0, [r4, #0xc]
_080A198A:
	mov r0, sp
	adds r1, r3, #0
	ldrh r0, [r0, #4]
	ands r1, r0
	lsls r1, r1, #1
	movs r0, #0x10
	ands r1, r0
	cmp r1, #0
	beq _080A19A6
	ldr r0, [r4, #0xc]
	movs r1, #0x80
	lsls r1, r1, #6
	orrs r0, r1
	str r0, [r4, #0xc]
_080A19A6:
	mov r0, sp
	adds r1, r3, #0
	ldrh r0, [r0, #4]
	ands r1, r0
	lsls r1, r1, #1
	movs r0, #0x20
	ands r1, r0
	cmp r1, #0
	beq _080A19C2
	ldr r0, [r4, #0xc]
	movs r1, #0x80
	lsls r1, r1, #9
	orrs r0, r1
	str r0, [r4, #0xc]
_080A19C2:
	mov r0, sp
	adds r1, r3, #0
	ldrh r0, [r0, #4]
	ands r1, r0
	lsls r1, r1, #1
	movs r0, #0x40
	ands r1, r0
	cmp r1, #0
	beq _080A19DE
	ldr r0, [r4, #0xc]
	movs r1, #0x80
	lsls r1, r1, #0x12
	orrs r0, r1
	str r0, [r4, #0xc]
_080A19DE:
	movs r2, #0
	adds r6, r4, #0
	adds r6, #0x32
	mov r7, sp
	adds r7, #0x1d
	movs r1, #0x39
	adds r1, r1, r4
	mov r8, r1
	adds r5, r4, #0
	adds r5, #0x28
	mov r3, sp
	adds r3, #0x15
_080A19F6:
	adds r0, r5, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #7
	ble _080A19F6
	movs r2, #0
	adds r5, r6, #0
	adds r3, r7, #0
_080A1A0A:
	adds r0, r5, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #6
	ble _080A1A0A
	adds r0, r4, #0
	bl GetUnitMaxHp
	adds r1, r0, #0
	adds r0, r4, #0
	bl SetUnitHp
	movs r0, #0
	mov r2, r8
	strb r0, [r2]
	ldrb r0, [r4, #9]
	cmp r0, #0x7f
	bne _080A1A36
	movs r0, #0xff
	strb r0, [r4, #9]
_080A1A36:
	ldrb r0, [r4, #0x10]
	cmp r0, #0x3f
	bne _080A1A40
	movs r0, #0xff
	strb r0, [r4, #0x10]
_080A1A40:
	ldrb r0, [r4, #0x11]
	cmp r0, #0x3f
	bne _080A1A4A
	movs r0, #0xff
	strb r0, [r4, #0x11]
_080A1A4A:
	add sp, #0x24
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A1A58: .4byte 0x03005D90
_080A1A5C: .4byte 0x00000FFF

	thumb_func_start sub_080A1A60
sub_080A1A60: @ 0x080A1A60
	push {r4, lr}
	sub sp, #0x10
	adds r4, r0, #0
	mov r1, sp
	movs r0, #0xff
	strb r0, [r1, #6]
	mov r0, sp
	adds r1, r4, #0
	bl WriteSaveBlockInfo
	cmp r4, #3
	bne _080A1A80
	mov r0, sp
	movs r1, #4
	bl WriteSaveBlockInfo
_080A1A80:
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start WriteSuspendSave
WriteSuspendSave: @ 0x080A1A88
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x20
	mov r8, r0
	bl sub_08031B40
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A1AA2
	b _080A1BA0
_080A1AA2:
	ldr r4, _080A1BB0 @ =gPlaySt
	movs r0, #8
	ldrb r1, [r4, #0x14]
	ands r0, r1
	cmp r0, #0
	bne _080A1BA0
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A1BA0
	bl sub_080A22CC
	add r8, r0
	mov r0, r8
	bl GetSaveWriteAddr
	adds r7, r0, #0
	bl GetGameTime
	str r0, [r4]
	adds r0, r4, #0
	adds r1, r7, #0
	movs r2, #0x48
	bl WriteAndVerifySramFast
	bl sub_0802F6C4
	ldr r0, _080A1BB4 @ =gActionSt
	adds r1, r7, #0
	adds r1, #0x48
	movs r2, #0x1c
	bl WriteAndVerifySramFast
	ldr r5, _080A1BB8 @ =gBuf
	add r0, sp, #0x10
	mov sl, r0
	ldr r6, _080A1BBC @ =gUnitArrayBlue
	movs r4, #0x33
_080A1AF0:
	adds r1, r5, #0
	adds r5, #0x34
	adds r0, r6, #0
	bl EncodeSuspendSavePackedUnit
	adds r6, #0x48
	subs r4, #1
	cmp r4, #0
	bge _080A1AF0
	movs r1, #0x64
	adds r1, r1, r7
	mov sb, r1
	ldr r6, _080A1BC0 @ =gUnitArrayRed
	movs r4, #0x31
_080A1B0C:
	adds r1, r5, #0
	adds r5, #0x34
	adds r0, r6, #0
	bl EncodeSuspendSavePackedUnit
	adds r6, #0x48
	subs r4, #1
	cmp r4, #0
	bge _080A1B0C
	ldr r6, _080A1BC4 @ =gUnitArrayGreen
	movs r4, #9
_080A1B22:
	adds r1, r5, #0
	adds r5, #0x34
	adds r0, r6, #0
	bl EncodeSuspendSavePackedUnit
	adds r6, #0x48
	subs r4, #1
	cmp r4, #0
	bge _080A1B22
	movs r4, #0
	ldr r0, _080A1BB8 @ =gBuf
	movs r2, #0xb6
	lsls r2, r2, #5
	mov r1, sb
	bl WriteSramFast
	ldr r1, _080A1BC8 @ =0x00001F1C
	adds r0, r7, r1
	bl sub_0809F364
	ldr r1, _080A1BCC @ =0x00001F24
	adds r0, r7, r1
	bl sub_0809F344
	ldr r1, _080A1BD0 @ =0x00001924
	adds r0, r7, r1
	bl sub_0809F3D4
	ldr r1, _080A1BD4 @ =0x000019EC
	adds r0, r7, r1
	bl WritePidStats
	ldr r1, _080A1BD8 @ =0x00001E4C
	adds r0, r7, r1
	bl WriteChapterStats
	ldr r1, _080A1BDC @ =0x00001724
	adds r0, r7, r1
	bl WriteTraps
	mov r0, sl
	bl sub_0804B390
	ldr r0, _080A1BE0 @ =0x00001F0C
	adds r1, r7, r0
	mov r0, sl
	movs r2, #0x10
	bl WriteAndVerifySramFast
	ldr r0, _080A1BE4 @ =0x00020509
	str r0, [sp]
	mov r1, sp
	movs r0, #1
	strb r0, [r1, #6]
	mov r0, sp
	mov r1, r8
	bl WriteSaveBlockInfo
	ldr r0, _080A1BE8 @ =gBmSt
	adds r0, #0x3c
	strb r4, [r0]
	bl sub_080A22DC
_080A1BA0:
	add sp, #0x20
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A1BB0: .4byte gPlaySt
_080A1BB4: .4byte gActionSt
_080A1BB8: .4byte gBuf
_080A1BBC: .4byte gUnitArrayBlue
_080A1BC0: .4byte gUnitArrayRed
_080A1BC4: .4byte gUnitArrayGreen
_080A1BC8: .4byte 0x00001F1C
_080A1BCC: .4byte 0x00001F24
_080A1BD0: .4byte 0x00001924
_080A1BD4: .4byte 0x000019EC
_080A1BD8: .4byte 0x00001E4C
_080A1BDC: .4byte 0x00001724
_080A1BE0: .4byte 0x00001F0C
_080A1BE4: .4byte 0x00020509
_080A1BE8: .4byte gBmSt

	thumb_func_start ReadSuspendSave
ReadSuspendSave: @ 0x080A1BEC
	push {r4, r5, r6, lr}
	sub sp, #0x10
	ldr r1, _080A1CD8 @ =0x0203EC9C
	ldrb r1, [r1]
	adds r0, r1, r0
	bl GetSaveReadAddr
	adds r6, r0, #0
	ldr r5, _080A1CDC @ =0x03005D90
	ldr r4, _080A1CE0 @ =gPlaySt
	ldr r3, [r5]
	adds r1, r4, #0
	movs r2, #0x48
	bl _call_via_r3
	ldr r0, [r4]
	bl SetGameTime
	adds r0, r6, #0
	adds r0, #0x48
	ldr r1, _080A1CE4 @ =gActionSt
	ldr r3, [r5]
	movs r2, #0x1c
	bl _call_via_r3
	bl sub_0802F6D4
	bl InitUnits
	movs r4, #0
	movs r5, #0
_080A1C2A:
	movs r0, #0x34
	muls r0, r4, r0
	adds r0, #0x64
	adds r0, r6, r0
	ldr r1, _080A1CE8 @ =gUnitArrayBlue
	adds r1, r5, r1
	bl ReadSuspendSavePackedUnit
	adds r5, #0x48
	adds r4, #1
	cmp r4, #0x33
	ble _080A1C2A
	movs r4, #0
	movs r5, #0
_080A1C46:
	movs r0, #0x34
	muls r0, r4, r0
	ldr r1, _080A1CEC @ =0x00000AF4
	adds r0, r0, r1
	adds r0, r6, r0
	ldr r1, _080A1CF0 @ =gUnitArrayRed
	adds r1, r5, r1
	bl ReadSuspendSavePackedUnit
	adds r5, #0x48
	adds r4, #1
	cmp r4, #0x31
	ble _080A1C46
	movs r4, #0
	movs r5, #0
_080A1C64:
	movs r0, #0x34
	muls r0, r4, r0
	ldr r2, _080A1CF4 @ =0x0000151C
	adds r0, r0, r2
	adds r0, r6, r0
	ldr r1, _080A1CF8 @ =gUnitArrayGreen
	adds r1, r5, r1
	bl ReadSuspendSavePackedUnit
	adds r5, #0x48
	adds r4, #1
	cmp r4, #9
	ble _080A1C64
	ldr r1, _080A1CFC @ =0x000019EC
	adds r0, r6, r1
	bl ReadPidStats
	ldr r2, _080A1D00 @ =0x00001E4C
	adds r0, r6, r2
	bl ReadChapterStats
	ldr r1, _080A1D04 @ =0x00001924
	adds r0, r6, r1
	bl sub_0809F3EC
	ldr r2, _080A1D08 @ =0x00001F1C
	adds r0, r6, r2
	bl sub_0809F3AC
	ldr r1, _080A1D0C @ =0x00001F24
	adds r0, r6, r1
	bl sub_0809F384
	ldr r2, _080A1D10 @ =0x00001724
	adds r0, r6, r2
	bl ReadTraps
	ldr r1, _080A1CDC @ =0x03005D90
	ldr r2, _080A1D14 @ =0x00001F0C
	adds r0, r6, r2
	ldr r3, [r1]
	mov r1, sp
	movs r2, #0x10
	bl _call_via_r3
	mov r0, sp
	bl sub_0804B3D0
	ldr r0, _080A1CE0 @ =gPlaySt
	ldrb r0, [r0, #0xc]
	bl sub_080A135C
	bl sub_080A0F14
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A1CD8: .4byte 0x0203EC9C
_080A1CDC: .4byte 0x03005D90
_080A1CE0: .4byte gPlaySt
_080A1CE4: .4byte gActionSt
_080A1CE8: .4byte gUnitArrayBlue
_080A1CEC: .4byte 0x00000AF4
_080A1CF0: .4byte gUnitArrayRed
_080A1CF4: .4byte 0x0000151C
_080A1CF8: .4byte gUnitArrayGreen
_080A1CFC: .4byte 0x000019EC
_080A1D00: .4byte 0x00001E4C
_080A1D04: .4byte 0x00001924
_080A1D08: .4byte 0x00001F1C
_080A1D0C: .4byte 0x00001F24
_080A1D10: .4byte 0x00001724
_080A1D14: .4byte 0x00001F0C

	thumb_func_start IsValidSuspendSave
IsValidSuspendSave: @ 0x080A1D18
	push {r4, lr}
	adds r4, r0, #0
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A1D5C
	cmp r4, #3
	bne _080A1D5C
	ldr r4, _080A1D60 @ =0x0203EC9C
	bl sub_080A22AC
	strb r0, [r4]
	adds r1, r0, #0
	adds r1, #3
	movs r0, #0
	bl ReadSaveBlockInfo
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A1D64
	bl sub_080A22CC
	strb r0, [r4]
	adds r1, r0, #0
	adds r1, #3
	movs r0, #0
	bl ReadSaveBlockInfo
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A1D64
	movs r0, #0x7f
	strb r0, [r4]
_080A1D5C:
	movs r0, #0
	b _080A1D66
	.align 2, 0
_080A1D60: .4byte 0x0203EC9C
_080A1D64:
	movs r0, #1
_080A1D66:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start ReadSuspendSavePlaySt
ReadSuspendSavePlaySt: @ 0x080A1D6C
	push {lr}
	ldr r2, _080A1D7C @ =0x0203EC9C
	ldrb r2, [r2]
	adds r0, r2, r0
	bl ReadGameSavePlaySt
	pop {r0}
	bx r0
	.align 2, 0
_080A1D7C: .4byte 0x0203EC9C

	thumb_func_start EncodeSuspendSavePackedUnit
EncodeSuspendSavePackedUnit: @ 0x080A1D80
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x20
	adds r6, r0, #0
	mov ip, r1
	ldr r0, [r6]
	cmp r0, #0
	bne _080A1D9A
	strb r0, [r1]
	b _080A2024
_080A1D9A:
	ldrb r0, [r0, #4]
	mov r1, ip
	strb r0, [r1]
	ldr r0, [r6, #4]
	ldrb r0, [r0, #4]
	strb r0, [r1, #1]
	movs r1, #8
	ldrsb r1, [r6, r1]
	mov r2, ip
	adds r2, #0x24
	movs r4, #0x1f
	ands r1, r4
	movs r3, #0x20
	rsbs r3, r3, #0
	adds r0, r3, #0
	ldrb r5, [r2]
	ands r0, r5
	orrs r0, r1
	strb r0, [r2]
	ldrb r0, [r6, #9]
	mov r7, ip
	strb r0, [r7, #0x10]
	ldr r0, [r6, #0xc]
	str r0, [r7, #4]
	movs r1, #0x10
	ldrsb r1, [r6, r1]
	movs r0, #0x3f
	ands r1, r0
	lsls r1, r1, #5
	ldr r0, _080A2034 @ =0xFFFFF81F
	ldrh r2, [r7, #0x24]
	ands r0, r2
	orrs r0, r1
	strh r0, [r7, #0x24]
	movs r1, #0x3f
	ldrb r5, [r6, #0x11]
	ands r1, r5
	lsls r1, r1, #0xb
	ldr r0, [r7, #0x24]
	ldr r2, _080A2038 @ =0xFFFE07FF
	ands r0, r2
	orrs r0, r1
	str r0, [r7, #0x24]
	ldrb r0, [r6, #0x12]
	strb r0, [r7, #0xe]
	ldrb r0, [r6, #0x13]
	strb r0, [r7, #0xf]
	movs r1, #0x14
	ldrsb r1, [r6, r1]
	mov r2, ip
	adds r2, #0x26
	ands r1, r4
	lsls r1, r1, #1
	movs r0, #0x3f
	rsbs r0, r0, #0
	ldrb r7, [r2]
	ands r0, r7
	orrs r0, r1
	strb r0, [r2]
	movs r1, #0x15
	ldrsb r1, [r6, r1]
	movs r2, #0x1f
	ands r1, r2
	lsls r1, r1, #6
	ldr r0, _080A203C @ =0xFFFFF83F
	mov r5, ip
	ldrh r5, [r5, #0x26]
	ands r0, r5
	orrs r0, r1
	mov r7, ip
	strh r0, [r7, #0x26]
	movs r1, #0x16
	ldrsb r1, [r6, r1]
	movs r0, #0x27
	add r0, ip
	mov r8, r0
	lsls r1, r1, #3
	movs r5, #7
	mov sb, r5
	movs r0, #7
	mov r7, r8
	ldrb r7, [r7]
	ands r0, r7
	orrs r0, r1
	mov r1, r8
	strb r0, [r1]
	movs r0, #0x17
	ldrsb r0, [r6, r0]
	mov r1, ip
	adds r1, #0x28
	ands r0, r4
	ldrb r5, [r1]
	ands r3, r5
	orrs r3, r0
	strb r3, [r1]
	movs r1, #0x18
	ldrsb r1, [r6, r1]
	ands r1, r2
	lsls r1, r1, #5
	ldr r0, _080A2040 @ =0xFFFFFC1F
	mov r7, ip
	ldrh r7, [r7, #0x28]
	ands r0, r7
	orrs r0, r1
	mov r1, ip
	strh r0, [r1, #0x28]
	movs r1, #0x19
	ldrsb r1, [r6, r1]
	mov r2, ip
	adds r2, #0x29
	ands r1, r4
	lsls r1, r1, #2
	movs r0, #0x7d
	rsbs r0, r0, #0
	ldrb r3, [r2]
	ands r0, r3
	orrs r0, r1
	strb r0, [r2]
	movs r2, #0x1a
	ldrsb r2, [r6, r2]
	movs r3, #0x1f
	ands r2, r3
	lsls r2, r2, #0xf
	mov r4, ip
	ldr r0, [r4, #0x28]
	ldr r1, _080A2044 @ =0xFFF07FFF
	ands r0, r1
	orrs r0, r2
	str r0, [r4, #0x28]
	adds r0, r6, #0
	adds r0, #0x30
	ldrb r2, [r0]
	lsls r1, r2, #0x1c
	lsrs r1, r1, #0x1c
	adds r4, #0x2a
	mov r5, sb
	ands r1, r5
	lsls r1, r1, #4
	movs r0, #0x71
	rsbs r0, r0, #0
	ldrb r7, [r4]
	ands r0, r7
	orrs r0, r1
	strb r0, [r4]
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x1c
	movs r0, #7
	ands r2, r0
	lsls r2, r2, #7
	ldr r0, _080A2048 @ =0xFFFFFC7F
	mov r1, ip
	ldrh r1, [r1, #0x2a]
	ands r0, r1
	orrs r0, r2
	mov r2, ip
	strh r0, [r2, #0x2a]
	adds r0, r6, #0
	adds r0, #0x31
	ldrb r2, [r0]
	lsls r1, r2, #0x1c
	lsrs r1, r1, #0x1c
	adds r4, #1
	ands r1, r5
	lsls r1, r1, #2
	movs r0, #0x1d
	rsbs r0, r0, #0
	ldrb r5, [r4]
	ands r0, r5
	orrs r0, r1
	lsrs r2, r2, #4
	lsls r2, r2, #5
	ands r0, r3
	orrs r0, r2
	strb r0, [r4]
	ldrb r0, [r6, #0x1b]
	mov r7, ip
	strb r0, [r7, #3]
	movs r1, #0x1d
	ldrsb r1, [r6, r1]
	mov r2, ip
	adds r2, #0x2c
	movs r0, #0xf
	ands r1, r0
	movs r0, #0x10
	rsbs r0, r0, #0
	ldrb r3, [r2]
	ands r0, r3
	orrs r0, r1
	strb r0, [r2]
	movs r1, #0x7f
	ldrb r4, [r6, #0x1c]
	ands r1, r4
	adds r0, r6, #0
	adds r0, #0x39
	ldrb r3, [r0]
	movs r0, #1
	ands r0, r3
	lsls r0, r0, #7
	orrs r1, r0
	mov r0, ip
	adds r0, #0x30
	strb r1, [r0]
	ldr r2, _080A204C @ =0x00003FFF
	adds r1, r2, #0
	ldrh r5, [r6, #0x1e]
	ands r1, r5
	movs r0, #6
	ands r0, r3
	lsls r0, r0, #0xd
	orrs r1, r0
	strh r1, [r7, #8]
	adds r1, r2, #0
	ldrh r7, [r6, #0x20]
	ands r1, r7
	movs r0, #0x18
	ands r0, r3
	lsls r0, r0, #0xb
	orrs r1, r0
	mov r0, ip
	strh r1, [r0, #0xa]
	adds r1, r2, #0
	ldrh r4, [r6, #0x22]
	ands r1, r4
	movs r0, #0x60
	ands r0, r3
	lsls r0, r0, #9
	orrs r1, r0
	mov r5, ip
	strh r1, [r5, #0xc]
	ldrh r7, [r6, #0x24]
	ands r2, r7
	lsls r2, r2, #4
	ldr r0, [r5, #0x2c]
	ldr r1, _080A2050 @ =0xFFFC000F
	ands r0, r1
	orrs r0, r2
	str r0, [r5, #0x2c]
	ldrh r0, [r6, #0x26]
	lsls r1, r0, #2
	movs r0, #3
	ldrh r2, [r5, #0x2e]
	ands r0, r2
	orrs r0, r1
	strh r0, [r5, #0x2e]
	movs r2, #0
	adds r5, #0x1a
	adds r7, r6, #0
	adds r7, #0x32
	movs r3, #0x42
	adds r3, r3, r6
	mov r8, r3
	adds r4, r6, #0
	adds r4, #0x43
	str r4, [sp, #0xc]
	movs r0, #0x21
	add r0, ip
	mov sb, r0
	adds r1, r6, #0
	adds r1, #0x44
	str r1, [sp, #0x10]
	movs r3, #0x22
	add r3, ip
	mov sl, r3
	adds r4, #2
	str r4, [sp, #0x14]
	mov r0, ip
	adds r0, #0x23
	str r0, [sp]
	subs r1, #4
	str r1, [sp, #8]
	adds r3, r6, #0
	adds r3, #0x46
	str r3, [sp, #0x18]
	mov r4, ip
	adds r4, #0x31
	str r4, [sp, #4]
	ldrb r1, [r6, #0xa]
	mov r0, sp
	strb r1, [r0, #0x1c]
	subs r4, #0x1f
	subs r3, #0x1e
_080A1FCC:
	adds r0, r4, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #7
	ble _080A1FCC
	movs r2, #0
	adds r4, r5, #0
	adds r3, r7, #0
_080A1FE0:
	adds r0, r4, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #6
	ble _080A1FE0
	mov r2, r8
	ldrb r0, [r2]
	mov r3, ip
	strb r0, [r3, #2]
	ldr r4, [sp, #0xc]
	ldrb r0, [r4]
	mov r5, sb
	strb r0, [r5]
	ldr r7, [sp, #0x10]
	ldrb r0, [r7]
	mov r1, sl
	strb r0, [r1]
	ldr r2, [sp, #0x14]
	ldrb r0, [r2]
	ldr r3, [sp]
	strb r0, [r3]
	ldr r4, [sp, #8]
	ldrh r0, [r4]
	mov r5, ip
	strh r0, [r5, #0x32]
	ldr r7, [sp, #0x18]
	ldrb r0, [r7]
	ldr r1, [sp, #4]
	strb r0, [r1]
	mov r2, sp
	ldrb r2, [r2, #0x1c]
	strb r2, [r5, #0x11]
_080A2024:
	add sp, #0x20
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A2034: .4byte 0xFFFFF81F
_080A2038: .4byte 0xFFFE07FF
_080A203C: .4byte 0xFFFFF83F
_080A2040: .4byte 0xFFFFFC1F
_080A2044: .4byte 0xFFF07FFF
_080A2048: .4byte 0xFFFFFC7F
_080A204C: .4byte 0x00003FFF
_080A2050: .4byte 0xFFFC000F

	thumb_func_start ReadSuspendSavePackedUnit
ReadSuspendSavePackedUnit: @ 0x080A2054
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x48
	adds r6, r1, #0
	ldr r1, _080A2264 @ =0x03005D90
	ldr r3, [r1]
	mov r1, sp
	movs r2, #0x34
	bl _call_via_r3
	mov r0, sp
	ldrb r0, [r0]
	bl GetCharacterData
	str r0, [r6]
	mov r0, sp
	ldrb r0, [r0, #1]
	bl GetClassData
	str r0, [r6, #4]
	add r0, sp, #0x24
	ldrb r0, [r0]
	lsls r0, r0, #0x1b
	lsrs r0, r0, #0x1b
	strb r0, [r6, #8]
	mov r0, sp
	ldrb r0, [r0, #0x10]
	strb r0, [r6, #9]
	ldr r0, [sp, #4]
	str r0, [r6, #0xc]
	mov r0, sp
	ldrh r0, [r0, #0x24]
	lsls r0, r0, #0x15
	lsrs r0, r0, #0x1a
	strb r0, [r6, #0x10]
	ldr r0, [sp, #0x24]
	lsls r0, r0, #0xf
	lsrs r0, r0, #0x1a
	strb r0, [r6, #0x11]
	mov r0, sp
	ldrb r0, [r0, #0xe]
	strb r0, [r6, #0x12]
	mov r0, sp
	ldrb r0, [r0, #0xf]
	strb r0, [r6, #0x13]
	mov r0, sp
	adds r0, #0x26
	ldrb r0, [r0]
	lsls r0, r0, #0x1a
	lsrs r0, r0, #0x1b
	strb r0, [r6, #0x14]
	mov r0, sp
	ldrh r0, [r0, #0x26]
	lsls r0, r0, #0x15
	lsrs r0, r0, #0x1b
	strb r0, [r6, #0x15]
	mov r0, sp
	adds r0, #0x27
	ldrb r0, [r0]
	lsrs r0, r0, #3
	strb r0, [r6, #0x16]
	add r0, sp, #0x28
	ldrb r0, [r0]
	lsls r0, r0, #0x1b
	lsrs r0, r0, #0x1b
	strb r0, [r6, #0x17]
	mov r0, sp
	ldrh r0, [r0, #0x28]
	lsls r0, r0, #0x16
	lsrs r0, r0, #0x1b
	strb r0, [r6, #0x18]
	mov r0, sp
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x1b
	strb r0, [r6, #0x19]
	ldr r0, [sp, #0x28]
	lsls r0, r0, #0xc
	lsrs r0, r0, #0x1b
	strb r0, [r6, #0x1a]
	mov r0, sp
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r1, r0, #0x19
	adds r2, r6, #0
	adds r2, #0x30
	mov r0, sp
	ldrh r0, [r0, #0x2a]
	lsls r0, r0, #0x16
	lsrs r0, r0, #0x1d
	lsls r0, r0, #4
	lsrs r1, r1, #0x1d
	orrs r1, r0
	strb r1, [r2]
	mov r0, sp
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r1, r0, #0x1b
	adds r2, #1
	lsrs r0, r0, #5
	lsls r0, r0, #4
	lsrs r1, r1, #0x1d
	orrs r1, r0
	strb r1, [r2]
	mov r0, sp
	ldrb r0, [r0, #3]
	strb r0, [r6, #0x1b]
	add r0, sp, #0x2c
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	strb r0, [r6, #0x1d]
	add r0, sp, #0x30
	ldrb r2, [r0]
	movs r0, #0x7f
	ands r0, r2
	strb r0, [r6, #0x1c]
	mov r0, sp
	ldrh r5, [r0, #8]
	ldr r1, _080A2268 @ =0x00003FFF
	adds r0, r1, #0
	ands r0, r5
	strh r0, [r6, #0x1e]
	mov r0, sp
	ldrh r4, [r0, #0xa]
	adds r0, r1, #0
	ands r0, r4
	strh r0, [r6, #0x20]
	mov r0, sp
	ldrh r3, [r0, #0xc]
	ands r1, r3
	strh r1, [r6, #0x22]
	ldr r0, [sp, #0x2c]
	lsls r0, r0, #0xe
	lsrs r0, r0, #0x12
	strh r0, [r6, #0x24]
	mov r0, sp
	ldrh r1, [r0, #0x2e]
	lsrs r0, r1, #2
	strh r0, [r6, #0x26]
	movs r1, #0x80
	ands r1, r2
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x1f
	movs r2, #0xc0
	lsls r2, r2, #8
	adds r0, r2, #0
	ands r0, r5
	lsrs r0, r0, #0xd
	orrs r0, r1
	adds r1, r2, #0
	ands r1, r4
	lsrs r1, r1, #0xb
	orrs r1, r0
	ands r2, r3
	lsrs r2, r2, #9
	orrs r2, r1
	adds r0, r6, #0
	adds r0, #0x39
	strb r2, [r0]
	movs r2, #0
	movs r0, #0x1a
	add r0, sp
	mov sl, r0
	mov r1, sp
	adds r1, #0x21
	str r1, [sp, #0x34]
	mov r0, sp
	adds r0, #0x22
	str r0, [sp, #0x38]
	adds r1, #2
	str r1, [sp, #0x3c]
	adds r0, #0xf
	str r0, [sp, #0x40]
	adds r4, r6, #0
	adds r4, #0x28
	mov r3, sp
	adds r3, #0x12
_080A21C0:
	adds r0, r4, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #7
	ble _080A21C0
	movs r2, #0
	adds r5, r6, #0
	adds r5, #0x42
	movs r1, #0x43
	adds r1, r1, r6
	mov ip, r1
	adds r7, r6, #0
	adds r7, #0x44
	movs r0, #0x45
	adds r0, r0, r6
	mov r8, r0
	movs r1, #0x40
	adds r1, r1, r6
	mov sb, r1
	adds r0, r6, #0
	adds r0, #0x46
	str r0, [sp, #0x44]
	adds r4, r6, #0
	adds r4, #0x32
	mov r3, sl
_080A21F6:
	adds r0, r4, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #6
	ble _080A21F6
	mov r0, sp
	ldrb r0, [r0, #2]
	strb r0, [r5]
	ldr r1, [sp, #0x34]
	ldrb r0, [r1]
	mov r1, ip
	strb r0, [r1]
	ldr r1, [sp, #0x38]
	ldrb r0, [r1]
	strb r0, [r7]
	ldr r1, [sp, #0x3c]
	ldrb r0, [r1]
	mov r1, r8
	strb r0, [r1]
	mov r0, sp
	ldrh r0, [r0, #0x32]
	mov r1, sb
	strh r0, [r1]
	ldr r1, [sp, #0x40]
	ldrb r0, [r1]
	ldr r1, [sp, #0x44]
	strb r0, [r1]
	mov r0, sp
	ldrb r0, [r0, #0x11]
	strb r0, [r6, #0xa]
	ldrb r0, [r6, #9]
	cmp r0, #0x7f
	bne _080A2240
	movs r0, #0xff
	strb r0, [r6, #9]
_080A2240:
	ldrb r0, [r6, #0x10]
	cmp r0, #0x3f
	bne _080A224A
	movs r0, #0xff
	strb r0, [r6, #0x10]
_080A224A:
	ldrb r0, [r6, #0x11]
	cmp r0, #0x3f
	bne _080A2254
	movs r0, #0xff
	strb r0, [r6, #0x11]
_080A2254:
	add sp, #0x48
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A2264: .4byte 0x03005D90
_080A2268: .4byte 0x00003FFF

	thumb_func_start WriteTraps
WriteTraps: @ 0x080A226C
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	bl GetTrap
	movs r2, #0x80
	lsls r2, r2, #2
	adds r1, r4, #0
	bl WriteAndVerifySramFast
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ReadTraps
ReadTraps: @ 0x080A2288
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _080A22A8 @ =0x03005D90
	movs r0, #0
	bl GetTrap
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #2
	ldr r3, [r4]
	adds r0, r5, #0
	bl _call_via_r3
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A22A8: .4byte 0x03005D90

	thumb_func_start sub_080A22AC
sub_080A22AC: @ 0x080A22AC
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl ReadGlobalSaveInfo
	mov r0, sp
	adds r0, #0x63
	ldrb r0, [r0]
	cmp r0, #1
	beq _080A22C4
	movs r0, #0
	b _080A22C6
_080A22C4:
	movs r0, #1
_080A22C6:
	add sp, #0x64
	pop {r1}
	bx r1

	thumb_func_start sub_080A22CC
sub_080A22CC: @ 0x080A22CC
	push {lr}
	bl sub_080A22AC
	adds r1, r0, #0
	movs r0, #1
	subs r0, r0, r1
	pop {r1}
	bx r1

	thumb_func_start sub_080A22DC
sub_080A22DC: @ 0x080A22DC
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl ReadGlobalSaveInfo
	movs r2, #0
	mov r1, sp
	adds r1, #0x63
	ldrb r0, [r1]
	cmp r0, #0
	bne _080A22F4
	movs r2, #1
_080A22F4:
	strb r2, [r1]
	mov r0, sp
	bl WriteGlobalSaveInfoNoChecksum
	add sp, #0x64
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A2304
sub_080A2304: @ 0x080A2304
	push {r4, r5, lr}
	adds r5, r1, #0
	ldr r1, _080A2324 @ =0x03005D90
	ldr r4, _080A2328 @ =gBuf
	ldr r3, [r1]
	adds r1, r4, #0
	adds r2, r5, #0
	bl _call_via_r3
	adds r0, r4, #0
	adds r1, r5, #0
	bl Checksum32_thm
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080A2324: .4byte 0x03005D90
_080A2328: .4byte gBuf

	thumb_func_start sub_080A232C
sub_080A232C: @ 0x080A232C
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r5, [r4, #0xa]
	ldrh r0, [r4, #8]
	bl SramOffsetToAddr
	adds r1, r5, #0
	bl sub_080A2304
	ldr r1, [r4, #0xc]
	cmp r1, r0
	bne _080A2348
	movs r0, #1
	b _080A234A
_080A2348:
	movs r0, #0
_080A234A:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_080A2350
sub_080A2350: @ 0x080A2350
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r5, [r4, #0xa]
	ldrh r0, [r4, #8]
	bl SramOffsetToAddr
	adds r1, r5, #0
	bl sub_080A2304
	str r0, [r4, #0xc]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A236C
sub_080A236C: @ 0x080A236C
	push {r4, r5, r6, lr}
	movs r6, #0
	ldr r4, _080A2434 @ =gUnitArrayBlue
	movs r5, #0x33
_080A2374:
	ldr r0, [r4]
	cmp r0, #0
	beq _080A238C
	movs r0, #0
	str r0, [r4, #0x3c]
	adds r0, r4, #0
	movs r1, #0x24
	bl sub_080A2304
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
_080A238C:
	adds r4, #0x48
	subs r5, #1
	cmp r5, #0
	bge _080A2374
	ldr r4, _080A2438 @ =gUnitArrayRed
	movs r5, #0x31
_080A2398:
	ldr r0, [r4]
	cmp r0, #0
	beq _080A23B0
	movs r0, #0
	str r0, [r4, #0x3c]
	adds r0, r4, #0
	movs r1, #0x24
	bl sub_080A2304
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
_080A23B0:
	adds r4, #0x48
	subs r5, #1
	cmp r5, #0
	bge _080A2398
	ldr r4, _080A243C @ =gUnitArrayGreen
	movs r5, #9
_080A23BC:
	ldr r0, [r4]
	cmp r0, #0
	beq _080A23D4
	movs r0, #0
	str r0, [r4, #0x3c]
	adds r0, r4, #0
	movs r1, #0x24
	bl sub_080A2304
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
_080A23D4:
	adds r4, #0x48
	subs r5, #1
	cmp r5, #0
	bge _080A23BC
	bl sub_0807A0F4
	adds r4, r0, #0
	bl sub_0807A0FC
	adds r1, r0, #0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	adds r0, r4, #0
	bl sub_080A2304
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	bl sub_0807A100
	adds r4, r0, #0
	bl sub_0807A108
	adds r1, r0, #0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	adds r0, r4, #0
	bl sub_080A2304
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	movs r0, #0
	bl GetTrap
	movs r1, #0x80
	lsls r1, r1, #1
	bl sub_080A2304
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080A2434: .4byte gUnitArrayBlue
_080A2438: .4byte gUnitArrayRed
_080A243C: .4byte gUnitArrayGreen

	thumb_func_start sub_080A2440
sub_080A2440: @ 0x080A2440
	sub sp, #8
	add sp, #8
	bx lr
	.align 2, 0

	thumb_func_start sub_080A2448
sub_080A2448: @ 0x080A2448
	push {lr}
	adds r1, r0, #0
	movs r0, #0
	bl ReadSaveBlockInfo
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080A245C
sub_080A245C: @ 0x080A245C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x68
	movs r0, #5
	bl GetSaveWriteAddr
	mov r8, r0
	add r0, sp, #0x58
	movs r4, #0
	strh r4, [r0]
	add r5, sp, #0x10
	ldr r2, _080A2590 @ =0x01000012
	adds r1, r5, #0
	bl CpuSet
	mov r0, sp
	adds r0, #0x5a
	strh r4, [r0]
	add r4, sp, #0x34
	ldr r2, _080A2594 @ =0x01000007
	adds r1, r4, #0
	bl CpuSet
	movs r7, #0
	mov sb, r5
	add r0, sp, #0x5c
	mov sl, r0
	mov r1, sp
	adds r1, #0x44
	str r1, [sp, #0x60]
	mov r3, sp
	adds r3, #0x48
	str r3, [sp, #0x64]
	mov r6, r8
_080A24A6:
	movs r0, #0xc4
	muls r0, r7, r0
	adds r0, #0x10
	mov r1, r8
	adds r4, r1, r0
	movs r5, #4
_080A24B2:
	mov r0, sb
	adds r1, r4, #0
	movs r2, #0x24
	bl WriteAndVerifySramFast
	adds r4, #0x24
	subs r5, #1
	cmp r5, #0
	bge _080A24B2
	add r0, sp, #0x34
	adds r1, r6, #0
	movs r2, #0xf
	bl WriteAndVerifySramFast
	adds r6, #0xc4
	adds r7, #1
	cmp r7, #9
	ble _080A24A6
	movs r0, #7
	mov r3, sl
	strh r0, [r3]
	movs r1, #0xf5
	lsls r1, r1, #3
	add r1, r8
	mov r0, sl
	movs r2, #2
	bl WriteAndVerifySramFast
	ldr r6, [sp, #0x60]
	mov sl, r6
	ldr r0, _080A2598 @ =0x0842D270
	movs r1, #3
	mov sb, r1
	ldr r5, _080A259C @ =0x000007AC
	add r5, r8
	adds r3, r0, #4
	mov r8, r3
	adds r4, r0, #0
	movs r7, #9
_080A2500:
	ldrb r3, [r4]
	lsls r0, r3, #0x1e
	lsrs r0, r0, #0x1e
	mov r6, sb
	ands r0, r6
	movs r1, #4
	rsbs r1, r1, #0
	adds r2, r1, #0
	mov r6, sl
	ldrb r6, [r6]
	ands r2, r6
	orrs r2, r0
	lsls r0, r3, #0x1c
	lsrs r0, r0, #0x1e
	mov r1, sb
	ands r0, r1
	lsls r0, r0, #2
	movs r6, #0xd
	rsbs r6, r6, #0
	adds r1, r6, #0
	ands r2, r1
	orrs r2, r0
	movs r1, #0x10
	ands r1, r3
	movs r3, #0x11
	rsbs r3, r3, #0
	adds r0, r3, #0
	ands r2, r0
	orrs r2, r1
	mov r6, sl
	strb r2, [r6]
	ldr r2, [r4]
	lsrs r2, r2, #5
	lsls r2, r2, #5
	ldr r0, [sp, #0x44]
	movs r1, #0x1f
	ands r0, r1
	orrs r0, r2
	str r0, [sp, #0x44]
	mov r0, r8
	ldr r1, [sp, #0x64]
	bl sub_0803DDF8
	mov r0, sl
	adds r1, r5, #0
	movs r2, #0x14
	bl WriteAndVerifySramFast
	adds r5, #0x14
	movs r0, #0x14
	add r8, r0
	adds r4, #0x14
	subs r7, #1
	cmp r7, #0
	bge _080A2500
	ldr r0, _080A25A0 @ =0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl WriteSaveBlockInfo
	add sp, #0x68
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A2590: .4byte 0x01000012
_080A2594: .4byte 0x01000007
_080A2598: .4byte 0x0842D270
_080A259C: .4byte 0x000007AC
_080A25A0: .4byte 0x00020112

	thumb_func_start sub_080A25A4
sub_080A25A4: @ 0x080A25A4
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	movs r0, #5
	bl GetSaveReadAddr
	ldr r2, _080A25CC @ =0x03005D90
	movs r1, #0xc4
	muls r1, r4, r1
	adds r0, r0, r1
	ldr r3, [r2]
	adds r1, r5, #0
	movs r2, #0xc4
	bl _call_via_r3
	ldrb r0, [r5]
	cmp r0, #0
	beq _080A25D0
	movs r0, #1
	b _080A25D2
	.align 2, 0
_080A25CC: .4byte 0x03005D90
_080A25D0:
	movs r0, #0
_080A25D2:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_080A25D8
sub_080A25D8: @ 0x080A25D8
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	movs r0, #5
	bl GetSaveReadAddr
	ldr r2, _080A260C @ =0x03005D90
	movs r1, #0xc4
	muls r1, r4, r1
	adds r0, r0, r1
	ldr r4, _080A2610 @ =0x0203ECA0
	ldr r3, [r2]
	adds r1, r4, #0
	movs r2, #0xc4
	bl _call_via_r3
	ldrb r0, [r4]
	cmp r0, #0
	beq _080A2614
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_0803DDF8
	movs r0, #1
	b _080A2616
	.align 2, 0
_080A260C: .4byte 0x03005D90
_080A2610: .4byte 0x0203ECA0
_080A2614:
	movs r0, #0
_080A2616:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_080A261C
sub_080A261C: @ 0x080A261C
	push {r4, r5, lr}
	sub sp, #0x10
	adds r4, r0, #0
	adds r5, r1, #0
	movs r0, #5
	bl GetSaveWriteAddr
	adds r1, r0, #0
	movs r0, #0xc4
	muls r0, r4, r0
	adds r1, r1, r0
	adds r0, r5, #0
	movs r2, #0xf
	bl WriteAndVerifySramFast
	ldr r0, _080A2654 @ =0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl WriteSaveBlockInfo
	add sp, #0x10
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A2654: .4byte 0x00020112

	thumb_func_start sub_080A2658
sub_080A2658: @ 0x080A2658
	push {r4, r5, r6, lr}
	sub sp, #0x14
	adds r6, r0, #0
	movs r0, #5
	bl GetSaveWriteAddr
	adds r4, r0, #0
	add r0, sp, #0x10
	movs r1, #0
	strh r1, [r0]
	ldr r5, _080A26A0 @ =0x0203ECA0
	ldr r2, _080A26A4 @ =0x01000062
	adds r1, r5, #0
	bl CpuSet
	movs r0, #0xc4
	muls r0, r6, r0
	adds r4, r4, r0
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #0xc4
	bl WriteAndVerifySramFast
	ldr r0, _080A26A8 @ =0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl WriteSaveBlockInfo
	add sp, #0x14
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A26A0: .4byte 0x0203ECA0
_080A26A4: .4byte 0x01000062
_080A26A8: .4byte 0x00020112

	thumb_func_start sub_080A26AC
sub_080A26AC: @ 0x080A26AC
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	sub sp, #0x10
	adds r6, r0, #0
	mov sb, r1
	movs r0, #5
	bl GetSaveReadAddr
	adds r4, r0, #0
	movs r0, #5
	bl GetSaveWriteAddr
	adds r5, r0, #0
	ldr r1, _080A2718 @ =0x03005D90
	movs r0, #0xc4
	mov r8, r0
	mov r0, r8
	muls r0, r6, r0
	adds r4, r4, r0
	ldr r6, _080A271C @ =0x0203ECA0
	ldr r3, [r1]
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #0xc4
	bl _call_via_r3
	mov r1, r8
	mov r0, sb
	muls r0, r1, r0
	adds r5, r5, r0
	adds r0, r6, #0
	adds r1, r5, #0
	movs r2, #0xc4
	bl WriteAndVerifySramFast
	ldr r0, _080A2720 @ =0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl WriteSaveBlockInfo
	add sp, #0x10
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A2718: .4byte 0x03005D90
_080A271C: .4byte 0x0203ECA0
_080A2720: .4byte 0x00020112

	thumb_func_start sub_080A2724
sub_080A2724: @ 0x080A2724
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	mov r8, r0
	mov sl, r1
	movs r0, #5
	bl GetSaveReadAddr
	adds r5, r0, #0
	movs r0, #5
	bl GetSaveWriteAddr
	adds r6, r0, #0
	ldr r0, _080A27B0 @ =0x03005D90
	mov sb, r0
	movs r4, #0xc4
	mov r7, r8
	muls r7, r4, r7
	adds r0, r5, r7
	mov r1, sb
	ldr r3, [r1]
	ldr r1, _080A27B4 @ =0x0203ECA0
	movs r2, #0xc4
	bl _call_via_r3
	mov r0, sl
	muls r0, r4, r0
	adds r4, r0, #0
	adds r5, r5, r4
	ldr r1, _080A27B8 @ =0x0203ED64
	mov r8, r1
	mov r0, sb
	ldr r3, [r0]
	adds r0, r5, #0
	movs r2, #0xc4
	bl _call_via_r3
	adds r4, r6, r4
	ldr r0, _080A27B4 @ =0x0203ECA0
	adds r1, r4, #0
	movs r2, #0xc4
	bl WriteAndVerifySramFast
	adds r6, r6, r7
	mov r0, r8
	adds r1, r6, #0
	movs r2, #0xc4
	bl WriteAndVerifySramFast
	ldr r0, _080A27BC @ =0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl WriteSaveBlockInfo
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A27B0: .4byte 0x03005D90
_080A27B4: .4byte 0x0203ECA0
_080A27B8: .4byte 0x0203ED64
_080A27BC: .4byte 0x00020112

	thumb_func_start sub_080A27C0
sub_080A27C0: @ 0x080A27C0
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #0x10
	adds r4, r0, #0
	mov r8, r1
	adds r6, r2, #0
	movs r0, #5
	bl GetSaveWriteAddr
	adds r5, r0, #0
	movs r0, #0xc4
	muls r4, r0, r4
	adds r1, r5, r4
	adds r0, r6, #0
	movs r2, #0xf
	bl WriteAndVerifySramFast
	adds r4, #0x10
	adds r5, r5, r4
	mov r4, r8
	movs r6, #4
_080A27EC:
	adds r0, r4, #0
	adds r1, r5, #0
	bl WriteGameSavePackedUnit
	adds r5, #0x24
	adds r4, #0x48
	subs r6, #1
	cmp r6, #0
	bge _080A27EC
	ldr r0, _080A281C @ =0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl WriteSaveBlockInfo
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A281C: .4byte 0x00020112

	thumb_func_start sub_080A2820
sub_080A2820: @ 0x080A2820
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	adds r6, r1, #0
	adds r5, r2, #0
	movs r0, #5
	bl GetSaveReadAddr
	adds r7, r0, #0
	ldr r1, _080A2874 @ =0x03005D90
	movs r0, #0xc4
	mov r4, r8
	muls r4, r0, r4
	adds r0, r7, r4
	ldr r3, [r1]
	adds r1, r5, #0
	movs r2, #0xf
	bl _call_via_r3
	adds r4, #0x10
	adds r4, r7, r4
	movs r5, #4
_080A284E:
	adds r0, r4, #0
	adds r1, r6, #0
	bl LoadSavedUnit
	adds r6, #0x48
	adds r4, #0x24
	subs r5, #1
	cmp r5, #0
	bge _080A284E
	movs r0, #0xc4
	mov r1, r8
	muls r1, r0, r1
	adds r0, r1, #0
	adds r0, r7, r0
	ldrb r0, [r0]
	cmp r0, #0
	beq _080A2878
	movs r0, #1
	b _080A287A
	.align 2, 0
_080A2874: .4byte 0x03005D90
_080A2878:
	movs r0, #0
_080A287A:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_080A2884
sub_080A2884: @ 0x080A2884
	push {r4, lr}
	sub sp, #0x10
	adds r4, r0, #0
	movs r0, #5
	bl GetSaveWriteAddr
	adds r1, r0, #0
	ldr r0, _080A28B8 @ =0x000007AC
	adds r1, r1, r0
	adds r0, r4, #0
	movs r2, #0xc8
	bl WriteAndVerifySramFast
	ldr r0, _080A28BC @ =0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl WriteSaveBlockInfo
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A28B8: .4byte 0x000007AC
_080A28BC: .4byte 0x00020112

	thumb_func_start sub_080A28C0
sub_080A28C0: @ 0x080A28C0
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #5
	bl GetSaveReadAddr
	ldr r1, _080A28E0 @ =0x03005D90
	ldr r2, _080A28E4 @ =0x000007AC
	adds r0, r0, r2
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #0xc8
	bl _call_via_r3
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A28E0: .4byte 0x03005D90
_080A28E4: .4byte 0x000007AC

	thumb_func_start sub_080A28E8
sub_080A28E8: @ 0x080A28E8
	push {r4, lr}
	sub sp, #0x10
	adds r4, r0, #0
	movs r0, #5
	bl GetSaveWriteAddr
	adds r1, r0, #0
	movs r0, #0xf5
	lsls r0, r0, #3
	adds r1, r1, r0
	adds r0, r4, #0
	movs r2, #2
	bl WriteAndVerifySramFast
	ldr r0, _080A2920 @ =0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl WriteSaveBlockInfo
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A2920: .4byte 0x00020112

	thumb_func_start sub_080A2924
sub_080A2924: @ 0x080A2924
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #5
	bl GetSaveReadAddr
	ldr r1, _080A2948 @ =0x03005D90
	movs r2, #0xf5
	lsls r2, r2, #3
	adds r0, r0, r2
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #2
	bl _call_via_r3
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A2948: .4byte 0x03005D90

	thumb_func_start sub_080A294C
sub_080A294C: @ 0x080A294C
	push {r4, lr}
	sub sp, #0x10
	movs r0, #5
	bl sub_080A2448
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A2962
	b _080A297A
_080A295E:
	movs r0, #1
	b _080A297C
_080A2962:
	movs r4, #0
_080A2964:
	adds r0, r4, #0
	mov r1, sp
	bl sub_080A25D8
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _080A295E
	adds r4, #1
	cmp r4, #9
	ble _080A2964
_080A297A:
	movs r0, #0
_080A297C:
	add sp, #0x10
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_080A2984
sub_080A2984: @ 0x080A2984
	push {r4, lr}
	sub sp, #0x48
	movs r0, #3
	bl IsValidSuspendSave
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A29C8
	movs r0, #3
	mov r1, sp
	bl ReadSuspendSavePlaySt
	mov r0, sp
	ldrb r0, [r0, #0xe]
	cmp r0, #0x30
	bne _080A29C8
	ldr r1, _080A29D0 @ =0x03005D90
	ldr r0, _080A29D4 @ =0x08DAD294
	ldr r0, [r0]
	ldr r4, _080A29D8 @ =0x0203EE28
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #0x1c
	bl _call_via_r3
	ldr r0, [sp, #0x2c]
	lsls r0, r0, #9
	lsrs r0, r0, #0x16
	ldrb r4, [r4, #0xf]
	cmp r0, r4
	beq _080A29C8
	movs r0, #3
	bl sub_080A1A60
_080A29C8:
	add sp, #0x48
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A29D0: .4byte 0x03005D90
_080A29D4: .4byte 0x08DAD294
_080A29D8: .4byte 0x0203EE28

	thumb_func_start sub_080A29DC
sub_080A29DC: @ 0x080A29DC
	push {r4, r5, lr}
	ldr r1, _080A2A2C @ =0x03005D90
	ldr r5, _080A2A30 @ =0x08DAD294
	ldr r0, [r5]
	ldr r4, _080A2A34 @ =0x0203EE28
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #0x1c
	bl _call_via_r3
	ldr r1, [r4]
	ldr r0, _080A2A38 @ =0x50414D58
	cmp r1, r0
	bne _080A2A48
	bl GetLang
	lsls r0, r0, #0x18
	ldr r1, _080A2A3C @ =0x00020223
	adds r0, r0, r1
	ldr r1, [r4, #8]
	cmp r1, r0
	bne _080A2A48
	ldr r0, [r4, #0x10]
	ldr r1, [r5]
	adds r0, r0, r1
	str r0, [r4, #0x10]
	ldr r0, [r4, #0x18]
	adds r0, r0, r1
	str r0, [r4, #0x18]
	ldr r2, _080A2A40 @ =gPlaySt
	ldrb r4, [r4, #0xf]
	lsls r3, r4, #0xd
	ldr r0, [r2, #0x2c]
	ldr r1, _080A2A44 @ =0xFF801FFF
	ands r0, r1
	orrs r0, r3
	str r0, [r2, #0x2c]
	movs r0, #1
	b _080A2A4A
	.align 2, 0
_080A2A2C: .4byte 0x03005D90
_080A2A30: .4byte 0x08DAD294
_080A2A34: .4byte 0x0203EE28
_080A2A38: .4byte 0x50414D58
_080A2A3C: .4byte 0x00020223
_080A2A40: .4byte gPlaySt
_080A2A44: .4byte 0xFF801FFF
_080A2A48:
	movs r0, #0
_080A2A4A:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_080A2A50
sub_080A2A50: @ 0x080A2A50
	ldr r2, _080A2A60 @ =0x0203EE28
	ldr r1, [r2]
	ldr r0, _080A2A64 @ =0x50414D58
	cmp r1, r0
	bne _080A2A68
	ldr r0, [r2, #0x10]
	b _080A2A6A
	.align 2, 0
_080A2A60: .4byte 0x0203EE28
_080A2A64: .4byte 0x50414D58
_080A2A68:
	movs r0, #0
_080A2A6A:
	bx lr

	thumb_func_start sub_080A2A6C
sub_080A2A6C: @ 0x080A2A6C
	ldr r2, _080A2A7C @ =0x0203EE28
	ldr r1, [r2]
	ldr r0, _080A2A80 @ =0x50414D58
	cmp r1, r0
	bne _080A2A84
	movs r1, #0x14
	ldrsh r0, [r2, r1]
	b _080A2A86
	.align 2, 0
_080A2A7C: .4byte 0x0203EE28
_080A2A80: .4byte 0x50414D58
_080A2A84:
	movs r0, #0
_080A2A86:
	bx lr

	thumb_func_start sub_080A2A88
sub_080A2A88: @ 0x080A2A88
	ldr r2, _080A2A98 @ =0x0203EE28
	ldr r1, [r2]
	ldr r0, _080A2A9C @ =0x50414D58
	cmp r1, r0
	bne _080A2AA0
	ldr r0, [r2, #0x18]
	b _080A2AA2
	.align 2, 0
_080A2A98: .4byte 0x0203EE28
_080A2A9C: .4byte 0x50414D58
_080A2AA0:
	movs r0, #0
_080A2AA2:
	bx lr

	thumb_func_start sub_080A2AA4
sub_080A2AA4: @ 0x080A2AA4
	ldr r2, _080A2AB4 @ =0x0203EE28
	ldr r1, [r2]
	ldr r0, _080A2AB8 @ =0x50414D58
	cmp r1, r0
	bne _080A2ABC
	movs r1, #0x16
	ldrsh r0, [r2, r1]
	b _080A2ABE
	.align 2, 0
_080A2AB4: .4byte 0x0203EE28
_080A2AB8: .4byte 0x50414D58
_080A2ABC:
	movs r0, #0
_080A2ABE:
	bx lr

	thumb_func_start sub_080A2AC0
sub_080A2AC0: @ 0x080A2AC0
	adds r2, r0, #0
	movs r3, #0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	cmp r3, r1
	bge _080A2ADA
_080A2ACE:
	ldrh r0, [r2]
	adds r3, r0, r3
	adds r2, #2
	subs r1, #1
	cmp r1, #0
	bne _080A2ACE
_080A2ADA:
	lsls r0, r3, #0x10
	lsrs r0, r0, #0x10
	bx lr

	thumb_func_start sub_080A2AE0
sub_080A2AE0: @ 0x080A2AE0
	push {r4, lr}
	ldr r4, _080A2B34 @ =gBuf
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A2B48
	ldr r1, _080A2B38 @ =0x03005D90
	ldr r0, _080A2B3C @ =0x0E007400
	movs r2, #0xc0
	lsls r2, r2, #4
	ldr r3, [r1]
	adds r1, r4, #0
	bl _call_via_r3
	ldr r1, [r4]
	ldr r0, _080A2B40 @ =0x50414D58
	cmp r1, r0
	bne _080A2B48
	bl GetLang
	lsls r0, r0, #0x18
	ldr r1, _080A2B44 @ =0x00020223
	adds r0, r0, r1
	ldr r1, [r4, #8]
	cmp r1, r0
	bne _080A2B48
	ldrh r0, [r4, #4]
	cmp r0, #0
	beq _080A2B48
	adds r0, r4, #0
	adds r0, #8
	ldrh r1, [r4, #4]
	bl sub_080A2AC0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r4, [r4, #6]
	cmp r4, r0
	bne _080A2B48
	movs r0, #1
	b _080A2B4A
	.align 2, 0
_080A2B34: .4byte gBuf
_080A2B38: .4byte 0x03005D90
_080A2B3C: .4byte 0x0E007400
_080A2B40: .4byte 0x50414D58
_080A2B44: .4byte 0x00020223
_080A2B48:
	movs r0, #0
_080A2B4A:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_080A2B50
sub_080A2B50: @ 0x080A2B50
	push {r4, r5, r6, lr}
	bl sub_080A29DC
	ldr r5, _080A2BB8 @ =0x03005D90
	bl sub_080A2A88
	adds r4, r0, #0
	ldr r6, _080A2BBC @ =gBuf
	bl sub_080A2AA4
	adds r2, r0, #0
	ldr r3, [r5]
	adds r0, r4, #0
	adds r1, r6, #0
	bl _call_via_r3
	ldr r4, _080A2BC0 @ =0x08DAD298
	ldr r1, [r4]
	adds r0, r6, #0
	bl sub_08013688
	ldr r1, [r4]
	ldr r0, _080A2BC4 @ =gPlaySt
	str r0, [r1, #0x18]
	ldr r0, _080A2BC8 @ =gBmSt
	str r0, [r1, #0x1c]
	ldr r0, _080A2BCC @ =gActiveUnit
	str r0, [r1, #0x20]
	ldr r0, _080A2BD0 @ =gUnitLut
	str r0, [r1, #0x24]
	ldr r0, _080A2BD4 @ =gBattleActor
	str r0, [r1, #0x28]
	ldr r0, _080A2BD8 @ =gBattleTarget
	str r0, [r1, #0x2c]
	ldr r0, _080A2BDC @ =gBattleHitArray
	str r0, [r1, #0x30]
	movs r0, #0
	bl GetTrap
	ldr r1, [r4]
	str r0, [r1, #0x34]
	bl sub_0807A0F4
	ldr r1, [r4]
	str r0, [r1, #0x38]
	bl sub_0807A100
	ldr r1, [r4]
	str r0, [r1, #0x3c]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A2BB8: .4byte 0x03005D90
_080A2BBC: .4byte gBuf
_080A2BC0: .4byte 0x08DAD298
_080A2BC4: .4byte gPlaySt
_080A2BC8: .4byte gBmSt
_080A2BCC: .4byte gActiveUnit
_080A2BD0: .4byte gUnitLut
_080A2BD4: .4byte gBattleActor
_080A2BD8: .4byte gBattleTarget
_080A2BDC: .4byte gBattleHitArray

	thumb_func_start sub_080A2BE0
sub_080A2BE0: @ 0x080A2BE0
	movs r1, #0
	strb r1, [r0]
	movs r0, #1
	bx lr

	thumb_func_start sub_080A2BE8
sub_080A2BE8: @ 0x080A2BE8
	push {lr}
	bl sub_08031B1C
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080A2BF4
sub_080A2BF4: @ 0x080A2BF4
	movs r0, #0
	bx lr

	thumb_func_start sub_080A2BF8
sub_080A2BF8: @ 0x080A2BF8
	movs r0, #0
	bx lr

	thumb_func_start sub_080A2BFC
sub_080A2BFC: @ 0x080A2BFC
	push {lr}
	bl sub_080A0D74
	ldr r1, _080A2C0C @ =gBmMapHidden
	movs r0, #0
	str r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_080A2C0C: .4byte gBmMapHidden

	thumb_func_start sub_080A2C10
sub_080A2C10: @ 0x080A2C10
	push {r4, r5, lr}
	bl GetGameTime
	ldr r4, _080A2C58 @ =gPlaySt
	ldr r1, [r4, #4]
	subs r0, r0, r1
	movs r1, #0xb4
	bl __udivsi3
	adds r3, r0, #0
	ldr r0, _080A2C5C @ =0x0000EA60
	cmp r3, r0
	ble _080A2C2C
	adds r3, r0, #0
_080A2C2C:
	ldr r0, _080A2C60 @ =0x0203EE44
	movs r2, #0x7f
	ldrb r1, [r4, #0xe]
	ands r2, r1
	movs r1, #0x80
	rsbs r1, r1, #0
	ldrb r5, [r0]
	ands r1, r5
	orrs r1, r2
	strb r1, [r0]
	ldrh r4, [r4, #0x10]
	lsls r2, r4, #7
	movs r1, #0x7f
	ldrh r4, [r0]
	ands r1, r4
	orrs r1, r2
	strh r1, [r0]
	strh r3, [r0, #2]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080A2C58: .4byte gPlaySt
_080A2C5C: .4byte 0x0000EA60
_080A2C60: .4byte 0x0203EE44

	thumb_func_start sub_080A2C64
sub_080A2C64: @ 0x080A2C64
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r2, #0
	ldr r0, _080A2CB4 @ =gBmMapTerrain
	ldr r0, [r0]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r0, [r1]
	adds r5, r0, r4
	ldrb r3, [r5]
	ldr r0, [r1, #4]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, r3
	bne _080A2C84
	movs r2, #1
_080A2C84:
	lsls r2, r2, #1
	subs r0, r1, #4
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, r3
	bne _080A2C94
	adds r2, #1
_080A2C94:
	lsls r2, r2, #1
	ldrb r0, [r5, #1]
	cmp r0, r3
	bne _080A2C9E
	adds r2, #1
_080A2C9E:
	lsls r2, r2, #1
	subs r0, r5, #1
	ldrb r0, [r0]
	cmp r0, r3
	bne _080A2CAA
	adds r2, #1
_080A2CAA:
	adds r0, r2, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080A2CB4: .4byte gBmMapTerrain

	thumb_func_start sub_080A2CB8
sub_080A2CB8: @ 0x080A2CB8
	cmp r0, #0x36
	beq _080A2CCA
	cmp r0, #0x36
	bgt _080A2CC6
	cmp r0, #0
	beq _080A2CCA
	b _080A2CCC
_080A2CC6:
	cmp r0, #0x3d
	bne _080A2CCC
_080A2CCA:
	movs r0, #0x15
_080A2CCC:
	bx lr
	.align 2, 0

	thumb_func_start sub_080A2CD0
sub_080A2CD0: @ 0x080A2CD0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	movs r4, #0
	ldr r0, _080A2D60 @ =gBmMapTerrain
	mov r8, r0
	ldr r0, [r0]
	lsls r5, r1, #2
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r0, r6
	ldrb r0, [r0]
	bl sub_080A2CB8
	adds r7, r0, #0
	mov r1, r8
	ldr r0, [r1]
	adds r0, r5, r0
	ldr r0, [r0, #4]
	adds r0, r0, r6
	ldrb r0, [r0]
	bl sub_080A2CB8
	cmp r0, r7
	bne _080A2D06
	movs r4, #1
_080A2D06:
	lsls r4, r4, #1
	mov r2, r8
	ldr r0, [r2]
	adds r0, r5, r0
	subs r0, #4
	ldr r0, [r0]
	adds r0, r0, r6
	ldrb r0, [r0]
	bl sub_080A2CB8
	cmp r0, r7
	bne _080A2D20
	adds r4, #1
_080A2D20:
	lsls r4, r4, #1
	mov r1, r8
	ldr r0, [r1]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r6, r0
	ldrb r0, [r0, #1]
	bl sub_080A2CB8
	cmp r0, r7
	bne _080A2D38
	adds r4, #1
_080A2D38:
	lsls r4, r4, #1
	mov r2, r8
	ldr r0, [r2]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r6, r0
	subs r0, #1
	ldrb r0, [r0]
	bl sub_080A2CB8
	cmp r0, r7
	bne _080A2D52
	adds r4, #1
_080A2D52:
	adds r0, r4, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080A2D60: .4byte gBmMapTerrain

	thumb_func_start sub_080A2D64
sub_080A2D64: @ 0x080A2D64
	cmp r0, #0x17
	beq _080A2D7A
	cmp r0, #0x17
	bgt _080A2D72
	cmp r0, #0
	beq _080A2D7A
	b _080A2D7C
_080A2D72:
	cmp r0, #0x1a
	beq _080A2D7A
	cmp r0, #0x3f
	bne _080A2D7C
_080A2D7A:
	movs r0, #0x3c
_080A2D7C:
	bx lr
	.align 2, 0

	thumb_func_start sub_080A2D80
sub_080A2D80: @ 0x080A2D80
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	movs r4, #0
	ldr r0, _080A2E10 @ =gBmMapTerrain
	mov r8, r0
	ldr r0, [r0]
	lsls r5, r1, #2
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r0, r6
	ldrb r0, [r0]
	bl sub_080A2D64
	adds r7, r0, #0
	mov r1, r8
	ldr r0, [r1]
	adds r0, r5, r0
	ldr r0, [r0, #4]
	adds r0, r0, r6
	ldrb r0, [r0]
	bl sub_080A2D64
	cmp r0, r7
	bne _080A2DB6
	movs r4, #1
_080A2DB6:
	lsls r4, r4, #1
	mov r2, r8
	ldr r0, [r2]
	adds r0, r5, r0
	subs r0, #4
	ldr r0, [r0]
	adds r0, r0, r6
	ldrb r0, [r0]
	bl sub_080A2D64
	cmp r0, r7
	bne _080A2DD0
	adds r4, #1
_080A2DD0:
	lsls r4, r4, #1
	mov r1, r8
	ldr r0, [r1]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r6, r0
	ldrb r0, [r0, #1]
	bl sub_080A2D64
	cmp r0, r7
	bne _080A2DE8
	adds r4, #1
_080A2DE8:
	lsls r4, r4, #1
	mov r2, r8
	ldr r0, [r2]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r6, r0
	subs r0, #1
	ldrb r0, [r0]
	bl sub_080A2D64
	cmp r0, r7
	bne _080A2E02
	adds r4, #1
_080A2E02:
	adds r0, r4, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080A2E10: .4byte gBmMapTerrain

	thumb_func_start sub_080A2E14
sub_080A2E14: @ 0x080A2E14
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	movs r3, #0
	ldr r2, _080A2EB4 @ =gBmMapTerrain
	ldr r1, [r2]
	lsls r0, r5, #2
	adds r0, r0, r1
	ldr r0, [r0, #4]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x10
	beq _080A2E3E
	cmp r0, #0x15
	beq _080A2E3E
	cmp r0, #0x36
	beq _080A2E3E
	cmp r0, #0x16
	beq _080A2E3E
	cmp r0, #0x13
	bne _080A2E40
_080A2E3E:
	adds r3, #1
_080A2E40:
	lsls r3, r3, #1
	ldr r0, [r2]
	lsls r1, r5, #2
	adds r0, r1, r0
	subs r0, #4
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x10
	beq _080A2E64
	cmp r0, #0x15
	beq _080A2E64
	cmp r0, #0x36
	beq _080A2E64
	cmp r0, #0x16
	beq _080A2E64
	cmp r0, #0x13
	bne _080A2E66
_080A2E64:
	adds r3, #1
_080A2E66:
	lsls r3, r3, #1
	ldr r0, [r2]
	adds r0, r1, r0
	ldr r0, [r0]
	adds r0, r4, r0
	ldrb r0, [r0, #1]
	cmp r0, #0x10
	beq _080A2E86
	cmp r0, #0x15
	beq _080A2E86
	cmp r0, #0x36
	beq _080A2E86
	cmp r0, #0x16
	beq _080A2E86
	cmp r0, #0x13
	bne _080A2E88
_080A2E86:
	adds r3, #1
_080A2E88:
	lsls r3, r3, #1
	ldr r0, [r2]
	adds r0, r1, r0
	ldr r0, [r0]
	adds r0, r4, r0
	subs r0, #1
	ldrb r0, [r0]
	cmp r0, #0x10
	beq _080A2EAA
	cmp r0, #0x15
	beq _080A2EAA
	cmp r0, #0x36
	beq _080A2EAA
	cmp r0, #0x16
	beq _080A2EAA
	cmp r0, #0x13
	bne _080A2EAC
_080A2EAA:
	adds r3, #1
_080A2EAC:
	adds r0, r3, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080A2EB4: .4byte gBmMapTerrain

	thumb_func_start sub_080A2EB8
sub_080A2EB8: @ 0x080A2EB8
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, _080A2EF0 @ =gBmMapTerrain
	ldr r0, [r0]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r0, [r1]
	adds r2, r0, r4
	ldrb r3, [r2]
	subs r0, r2, #1
	ldrb r6, [r0]
	cmp r6, r3
	beq _080A2ED8
	ldrb r5, [r2, #1]
	cmp r5, r3
	bne _080A2F12
_080A2ED8:
	subs r0, r1, #4
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r2, [r0]
	cmp r2, #0x15
	beq _080A2EEC
	cmp r2, #0x36
	beq _080A2EEC
	cmp r2, #0x16
	bne _080A2EF4
_080A2EEC:
	movs r0, #4
	b _080A2FD8
	.align 2, 0
_080A2EF0: .4byte gBmMapTerrain
_080A2EF4:
	ldr r0, [r1, #4]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x15
	beq _080A2F06
	cmp r0, #0x36
	beq _080A2F06
	cmp r0, #0x16
	bne _080A2F0A
_080A2F06:
	movs r0, #0
	b _080A2FD8
_080A2F0A:
	cmp r2, #0xf
	bne _080A2FD6
	movs r0, #0xc
	b _080A2FD8
_080A2F12:
	subs r0, r1, #4
	ldr r0, [r0]
	adds r2, r0, r4
	ldrb r0, [r2]
	cmp r0, r3
	beq _080A2F28
	ldr r0, [r1, #4]
	adds r1, r0, r4
	ldrb r0, [r1]
	cmp r0, r3
	bne _080A2F58
_080A2F28:
	adds r0, r5, #0
	cmp r0, #0x15
	beq _080A2F36
	cmp r0, #0x36
	beq _080A2F36
	cmp r0, #0x16
	bne _080A2F3A
_080A2F36:
	movs r0, #2
	b _080A2FD8
_080A2F3A:
	adds r1, r6, #0
	cmp r1, #0x15
	beq _080A2F48
	cmp r1, #0x36
	beq _080A2F48
	cmp r1, #0x16
	bne _080A2F4C
_080A2F48:
	movs r0, #6
	b _080A2FD8
_080A2F4C:
	cmp r0, #0xf
	bne _080A2F54
	movs r0, #0xd
	b _080A2FD8
_080A2F54:
	movs r0, #9
	b _080A2FD8
_080A2F58:
	subs r0, r1, #1
	ldrb r5, [r0]
	cmp r5, r3
	beq _080A2F66
	ldrb r4, [r2, #1]
	cmp r4, r3
	bne _080A2F98
_080A2F66:
	subs r0, r2, #1
	ldrb r2, [r0]
	cmp r2, #0x15
	beq _080A2F76
	cmp r2, #0x36
	beq _080A2F76
	cmp r2, #0x16
	bne _080A2F7A
_080A2F76:
	movs r0, #5
	b _080A2FD8
_080A2F7A:
	ldrb r0, [r1, #1]
	cmp r0, #0x15
	beq _080A2F88
	cmp r0, #0x36
	beq _080A2F88
	cmp r0, #0x16
	bne _080A2F8C
_080A2F88:
	movs r0, #1
	b _080A2FD8
_080A2F8C:
	cmp r2, #0xf
	bne _080A2F94
	movs r0, #0xe
	b _080A2FD8
_080A2F94:
	movs r0, #0xa
	b _080A2FD8
_080A2F98:
	ldrb r1, [r1, #1]
	cmp r1, r3
	beq _080A2FA6
	subs r0, r2, #1
	ldrb r0, [r0]
	cmp r0, r3
	bne _080A2FD6
_080A2FA6:
	adds r1, r4, #0
	cmp r1, #0x15
	beq _080A2FB4
	cmp r1, #0x36
	beq _080A2FB4
	cmp r1, #0x16
	bne _080A2FB8
_080A2FB4:
	movs r0, #3
	b _080A2FD8
_080A2FB8:
	adds r0, r5, #0
	cmp r0, #0x15
	beq _080A2FC6
	cmp r0, #0x36
	beq _080A2FC6
	cmp r0, #0x16
	bne _080A2FCA
_080A2FC6:
	movs r0, #7
	b _080A2FD8
_080A2FCA:
	cmp r1, #0xf
	bne _080A2FD2
	movs r0, #0xf
	b _080A2FD8
_080A2FD2:
	movs r0, #0xb
	b _080A2FD8
_080A2FD6:
	movs r0, #8
_080A2FD8:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080A2FE0
sub_080A2FE0: @ 0x080A2FE0
	adds r2, r0, #0
	ldr r0, _080A3018 @ =gBmMapTerrain
	ldr r0, [r0]
	lsls r1, r1, #2
	adds r1, r1, r0
	subs r0, r1, #4
	ldr r0, [r0]
	adds r0, r0, r2
	ldrb r0, [r0]
	cmp r0, #0x2d
	beq _080A3012
	ldr r0, [r1, #4]
	adds r0, r0, r2
	ldrb r0, [r0]
	cmp r0, #0x2d
	beq _080A3012
	ldr r0, [r1]
	adds r1, r2, r0
	subs r0, r1, #1
	ldrb r0, [r0]
	cmp r0, #0x2d
	beq _080A3012
	ldrb r1, [r1, #1]
	cmp r1, #0x2d
	bne _080A301C
_080A3012:
	movs r0, #0x12
	b _080A301E
	.align 2, 0
_080A3018: .4byte gBmMapTerrain
_080A301C:
	movs r0, #0x11
_080A301E:
	bx lr

	thumb_func_start sub_080A3020
sub_080A3020: @ 0x080A3020
	ldr r2, _080A3038 @ =gBmMapTerrain
	ldr r2, [r2]
	lsls r1, r1, #2
	adds r1, r1, r2
	ldr r1, [r1]
	adds r0, r0, r1
	ldrb r1, [r0, #1]
	cmp r1, #0x1e
	bne _080A303C
	movs r0, #0x16
	b _080A304A
	.align 2, 0
_080A3038: .4byte gBmMapTerrain
_080A303C:
	subs r0, #1
	ldrb r0, [r0]
	cmp r0, #0x1e
	beq _080A3048
	movs r0, #7
	b _080A304A
_080A3048:
	movs r0, #0x17
_080A304A:
	bx lr

	thumb_func_start sub_080A304C
sub_080A304C: @ 0x080A304C
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r7, _080A3094 @ =gBmMapTerrain
	ldr r0, [r7]
	lsls r6, r1, #2
	adds r2, r6, r0
	ldr r0, [r2]
	adds r0, r4, r0
	ldrb r1, [r0, #1]
	cmp r1, #0x13
	beq _080A3090
	subs r0, #1
	ldrb r3, [r0]
	cmp r3, #0x13
	beq _080A3090
	ldr r0, [r2, #4]
	adds r0, r0, r4
	ldrb r5, [r0]
	cmp r5, #0x13
	beq _080A30A0
	subs r0, r2, #4
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x13
	beq _080A30A0
	cmp r1, #0x10
	beq _080A30A0
	cmp r3, #0x10
	beq _080A30A0
	cmp r5, #0x10
	beq _080A3090
	cmp r0, #0x10
	bne _080A3098
_080A3090:
	movs r0, #0x10
	b _080A30C0
	.align 2, 0
_080A3094: .4byte gBmMapTerrain
_080A3098:
	cmp r1, #0x16
	beq _080A30A0
	cmp r3, #0x16
	bne _080A30A4
_080A30A0:
	movs r0, #0x18
	b _080A30C0
_080A30A4:
	ldr r0, [r7]
	adds r1, r6, r0
	ldr r0, [r1, #4]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x16
	beq _080A30BE
	subs r0, r1, #4
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x16
	bne _080A30C0
_080A30BE:
	movs r0, #0x10
_080A30C0:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080A30C8
sub_080A30C8: @ 0x080A30C8
	push {lr}
	adds r2, r0, #0
	adds r3, r1, #0
	ldr r0, _080A30EC @ =gBmMapTerrain
	ldr r1, [r0]
	lsls r0, r3, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, r0, r2
	ldrb r0, [r0]
	cmp r0, #0x40
	bls _080A30E2
	b _080A32AE
_080A30E2:
	lsls r0, r0, #2
	ldr r1, _080A30F0 @ =_080A30F4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080A30EC: .4byte gBmMapTerrain
_080A30F0: .4byte _080A30F4
_080A30F4: @ jump table
	.4byte _080A32AE @ case 0
	.4byte _080A31F8 @ case 1
	.4byte _080A31FC @ case 2
	.4byte _080A3208 @ case 3
	.4byte _080A3208 @ case 4
	.4byte _080A3208 @ case 5
	.4byte _080A320C @ case 6
	.4byte _080A320C @ case 7
	.4byte _080A3210 @ case 8
	.4byte _080A32AE @ case 9
	.4byte _080A3214 @ case 10
	.4byte _080A3218 @ case 11
	.4byte _080A321C @ case 12
	.4byte _080A3220 @ case 13
	.4byte _080A3224 @ case 14
	.4byte _080A3224 @ case 15
	.4byte _080A3228 @ case 16
	.4byte _080A3234 @ case 17
	.4byte _080A3238 @ case 18
	.4byte _080A323C @ case 19
	.4byte _080A32AE @ case 20
	.4byte _080A3252 @ case 21
	.4byte _080A3252 @ case 22
	.4byte _080A325E @ case 23
	.4byte _080A325E @ case 24
	.4byte _080A329E @ case 25
	.4byte _080A329E @ case 26
	.4byte _080A329E @ case 27
	.4byte _080A329E @ case 28
	.4byte _080A3262 @ case 29
	.4byte _080A3266 @ case 30
	.4byte _080A3270 @ case 31
	.4byte _080A3274 @ case 32
	.4byte _080A3274 @ case 33
	.4byte _080A329E @ case 34
	.4byte _080A32AE @ case 35
	.4byte _080A32AE @ case 36
	.4byte _080A3278 @ case 37
	.4byte _080A3280 @ case 38
	.4byte _080A328C @ case 39
	.4byte _080A328C @ case 40
	.4byte _080A328C @ case 41
	.4byte _080A3290 @ case 42
	.4byte _080A329E @ case 43
	.4byte _080A329E @ case 44
	.4byte _080A3294 @ case 45
	.4byte _080A329E @ case 46
	.4byte _080A3252 @ case 47
	.4byte _080A32AE @ case 48
	.4byte _080A32AA @ case 49
	.4byte _080A32AE @ case 50
	.4byte _080A321C @ case 51
	.4byte _080A323C @ case 52
	.4byte _080A3252 @ case 53
	.4byte _080A3252 @ case 54
	.4byte _080A3218 @ case 55
	.4byte _080A3208 @ case 56
	.4byte _080A329E @ case 57
	.4byte _080A3280 @ case 58
	.4byte _080A327C @ case 59
	.4byte _080A3246 @ case 60
	.4byte _080A329E @ case 61
	.4byte _080A325E @ case 62
	.4byte _080A329E @ case 63
	.4byte _080A329E @ case 64
_080A31F8:
	movs r0, #1
	b _080A32B0
_080A31FC:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_080A2C64
	adds r0, #0x40
	b _080A32B0
_080A3208:
	movs r0, #2
	b _080A32B0
_080A320C:
	movs r0, #3
	b _080A32B0
_080A3210:
	movs r0, #4
	b _080A32B0
_080A3214:
	movs r0, #5
	b _080A32B0
_080A3218:
	movs r0, #6
	b _080A32B0
_080A321C:
	movs r0, #8
	b _080A32B0
_080A3220:
	movs r0, #9
	b _080A32B0
_080A3224:
	movs r0, #0xa
	b _080A32B0
_080A3228:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_080A2E14
	adds r0, #0x60
	b _080A32B0
_080A3234:
	movs r0, #0xb
	b _080A32B0
_080A3238:
	movs r0, #0x14
	b _080A32B0
_080A323C:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_080A304C
	b _080A32B0
_080A3246:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_080A2D80
	adds r0, #0x30
	b _080A32B0
_080A3252:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_080A2CD0
	adds r0, #0x30
	b _080A32B0
_080A325E:
	movs r0, #0xc
	b _080A32B0
_080A3262:
	movs r0, #0xd
	b _080A32B0
_080A3266:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_080A3020
	b _080A32B0
_080A3270:
	movs r0, #0xe
	b _080A32B0
_080A3274:
	movs r0, #0xf
	b _080A32B0
_080A3278:
	movs r0, #0x1a
	b _080A32B0
_080A327C:
	movs r0, #0x1b
	b _080A32B0
_080A3280:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_080A2EB8
	adds r0, #0x50
	b _080A32B0
_080A328C:
	movs r0, #0x13
	b _080A32B0
_080A3290:
	movs r0, #0x3a
	b _080A32B0
_080A3294:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_080A2FE0
	b _080A32B0
_080A329E:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_080A2C64
	adds r0, #0x20
	b _080A32B0
_080A32AA:
	movs r0, #0x19
	b _080A32B0
_080A32AE:
	movs r0, #0
_080A32B0:
	pop {r1}
	bx r1

	thumb_func_start sub_080A32B4
sub_080A32B4: @ 0x080A32B4
	push {lr}
	bl sub_080A30C8
	lsls r0, r0, #5
	ldr r1, _080A32C4 @ =gBuf
	adds r0, r0, r1
	pop {r1}
	bx r1
	.align 2, 0
_080A32C4: .4byte gBuf

	thumb_func_start sub_080A32C8
sub_080A32C8: @ 0x080A32C8
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r1, _080A32FC @ =0x0842D7B0
	mov r0, sp
	movs r2, #3
	bl memcpy
	ldr r0, _080A3300 @ =gBmMapUnit
	ldr r0, [r0]
	lsls r4, r4, #2
	adds r4, r4, r0
	ldr r0, [r4]
	adds r0, r0, r5
	ldrb r0, [r0]
	cmp r0, #0
	beq _080A3308
	asrs r0, r0, #6
	add r0, sp
	ldrb r0, [r0]
	lsls r0, r0, #5
	ldr r1, _080A3304 @ =gBuf
	adds r0, r0, r1
	b _080A330A
	.align 2, 0
_080A32FC: .4byte 0x0842D7B0
_080A3300: .4byte gBmMapUnit
_080A3304: .4byte gBuf
_080A3308:
	ldr r0, _080A3314 @ =gBuf
_080A330A:
	add sp, #4
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080A3314: .4byte gBuf

	thumb_func_start sub_080A3318
sub_080A3318: @ 0x080A3318
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r4, r0, #0
	str r1, [sp]
	cmp r4, #0
	bne _080A332E
	ldr r4, _080A3340 @ =0x06000020
_080A332E:
	lsls r0, r4, #0xf
	lsrs r7, r0, #0x14
	ldr r0, [sp]
	cmp r0, #0
	bge _080A333C
	movs r1, #3
	str r1, [sp]
_080A333C:
	movs r2, #0
	b _080A3512
	.align 2, 0
_080A3340: .4byte 0x06000020
_080A3344:
	movs r6, #0
	movs r2, #0
	ldrsh r0, [r1, r2]
	mov r3, r8
	adds r3, #2
	str r3, [sp, #0xc]
	cmp r6, r0
	blt _080A3356
	b _080A3510
_080A3356:
	movs r0, #1
	add r0, r8
	mov sb, r0
	mov r1, r8
	lsrs r0, r1, #0x1f
	add r0, r8
	asrs r0, r0, #1
	lsls r0, r0, #5
	str r0, [sp, #4]
	movs r2, #1
	mov sl, r2
_080A336C:
	adds r0, r6, #0
	mov r1, r8
	bl sub_080A32B4
	adds r5, r0, #0
	mov r0, sl
	mov r1, r8
	bl sub_080A32B4
	adds r1, r0, #0
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r5, #4]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1, #4]
	strh r0, [r4]
	adds r4, #2
	adds r0, r6, #0
	mov r1, sb
	bl sub_080A32B4
	adds r5, r0, #0
	mov r0, sl
	mov r1, sb
	bl sub_080A32B4
	adds r1, r0, #0
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r5, #4]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1, #4]
	strh r0, [r4]
	adds r4, #2
	ldr r0, _080A3530 @ =gBg1Tm
	asrs r2, r6, #0x1f
	subs r1, r6, r2
	asrs r1, r1, #1
	ldr r3, [sp, #4]
	adds r1, r3, r1
	lsls r1, r1, #1
	adds r1, r1, r0
	ldr r3, [sp]
	lsls r0, r3, #0xc
	adds r0, r7, r0
	strh r0, [r1]
	adds r7, #1
	ldr r0, _080A3534 @ =gBmMapUnit
	ldr r1, [r0]
	mov r3, r8
	lsls r0, r3, #2
	adds r3, r0, r1
	ldr r0, [r3]
	adds r1, r0, r6
	ldrb r0, [r1]
	str r2, [sp, #8]
	cmp r0, #0
	bne _080A344A
	ldrb r0, [r1, #1]
	cmp r0, #0
	bne _080A344A
	ldr r0, [r3, #4]
	adds r1, r0, r6
	ldrb r0, [r1]
	cmp r0, #0
	bne _080A344A
	ldrb r0, [r1, #1]
	cmp r0, #0
	beq _080A34FE
_080A344A:
	adds r0, r6, #0
	mov r1, r8
	bl sub_080A32C8
	adds r5, r0, #0
	mov r0, sl
	mov r1, r8
	bl sub_080A32C8
	adds r1, r0, #0
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r5, #4]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1, #4]
	strh r0, [r4]
	adds r4, #2
	adds r0, r6, #0
	mov r1, sb
	bl sub_080A32C8
	adds r5, r0, #0
	mov r0, sl
	mov r1, sb
	bl sub_080A32C8
	adds r1, r0, #0
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r5, #4]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1, #4]
	strh r0, [r4]
	adds r4, #2
	ldr r0, _080A3538 @ =gBg0Tm
	ldr r2, [sp, #8]
	subs r1, r6, r2
	asrs r1, r1, #1
	ldr r3, [sp, #4]
	adds r1, r3, r1
	lsls r1, r1, #1
	adds r1, r1, r0
	ldr r0, [sp]
	adds r0, #1
	lsls r0, r0, #0xc
	adds r0, r7, r0
	strh r0, [r1]
	adds r7, #1
_080A34FE:
	movs r0, #2
	add sl, r0
	adds r6, #2
	ldr r0, _080A353C @ =gBmMapSize
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r6, r0
	bge _080A3510
	b _080A336C
_080A3510:
	ldr r2, [sp, #0xc]
_080A3512:
	mov r8, r2
	ldr r1, _080A353C @ =gBmMapSize
	movs r3, #2
	ldrsh r0, [r1, r3]
	cmp r8, r0
	bge _080A3520
	b _080A3344
_080A3520:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A3530: .4byte gBg1Tm
_080A3534: .4byte gBmMapUnit
_080A3538: .4byte gBg0Tm
_080A353C: .4byte gBmMapSize

	thumb_func_start sub_080A3540
sub_080A3540: @ 0x080A3540
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080A357C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A3558
	movs r0, #0xe6
	lsls r0, r0, #2
	bl m4aSongNumStart
_080A3558:
	adds r0, r4, #0
	bl sub_080A3DBC
	movs r4, #1
	rsbs r4, r4, #0
	adds r0, r4, #0
	bl sub_080A3AE0
	movs r0, #0
	adds r1, r4, #0
	bl sub_080A3318
	movs r0, #3
	bl EnableBgSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A357C: .4byte gPlaySt

	thumb_func_start sub_080A3580
sub_080A3580: @ 0x080A3580
	ldr r0, _080A35AC @ =0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	ldr r3, _080A35B0 @ =0x02000508
	cmp r1, #0xa0
	bls _080A3598
	ldr r0, _080A35B4 @ =0x02000500
	ldr r0, [r0]
	str r0, [r3]
	movs r1, #0
_080A3598:
	ldr r2, _080A35B8 @ =0x04000040
	ldr r0, [r3]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldrh r3, [r1]
	lsls r0, r3, #8
	ldrh r1, [r1, #2]
	adds r0, r1, r0
	strh r0, [r2]
	bx lr
	.align 2, 0
_080A35AC: .4byte 0x04000006
_080A35B0: .4byte 0x02000508
_080A35B4: .4byte 0x02000500
_080A35B8: .4byte 0x04000040

	thumb_func_start sub_080A35BC
sub_080A35BC: @ 0x080A35BC
	ldr r2, _080A35CC @ =0x02000500
	ldr r3, [r2]
	ldr r1, _080A35D0 @ =0x02000504
	ldr r0, [r1]
	str r0, [r2]
	str r3, [r1]
	bx lr
	.align 2, 0
_080A35CC: .4byte 0x02000500
_080A35D0: .4byte 0x02000504

	thumb_func_start sub_080A35D4
sub_080A35D4: @ 0x080A35D4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r1, _080A36D4 @ =0x02000500
	ldr r2, _080A36D8 @ =0x02000280
	str r2, [r1]
	ldr r3, _080A36DC @ =0x02000504
	ldr r4, _080A36E0 @ =0xFFFFFD80
	adds r1, r2, r4
	str r1, [r3]
	ldr r1, _080A36E4 @ =0x02000508
	str r2, [r1]
	ldr r7, _080A36E8 @ =gDispIo
	mov ip, r7
	movs r1, #0x20
	mov r8, r1
	mov r1, r8
	mov r2, ip
	ldrb r2, [r2, #1]
	orrs r1, r2
	movs r2, #0x41
	rsbs r2, r2, #0
	ands r1, r2
	movs r2, #0x7f
	ands r1, r2
	mov r3, ip
	strb r1, [r3, #1]
	movs r4, #0x34
	add r4, ip
	mov sb, r4
	movs r4, #1
	mov r7, sb
	ldrb r7, [r7]
	orrs r4, r7
	movs r1, #2
	orrs r4, r1
	movs r6, #4
	orrs r4, r6
	movs r5, #8
	orrs r4, r5
	movs r2, #0x10
	orrs r4, r2
	movs r1, #0x36
	add r1, ip
	mov sl, r1
	movs r3, #2
	rsbs r3, r3, #0
	ldrb r7, [r1]
	ands r3, r7
	movs r1, #3
	rsbs r1, r1, #0
	ands r3, r1
	orrs r3, r6
	orrs r3, r5
	orrs r3, r2
	mov r2, ip
	adds r2, #0x2d
	movs r5, #0
	movs r1, #0xf0
	strb r1, [r2]
	mov r1, ip
	adds r1, #0x31
	strb r5, [r1]
	subs r1, #5
	strb r5, [r1]
	adds r2, #3
	movs r1, #0xa0
	strb r1, [r2]
	mov r6, ip
	adds r6, #0x3c
	ldr r1, _080A36EC @ =0x0000FFE0
	mov r2, ip
	ldrh r2, [r2, #0x3c]
	ands r1, r2
	movs r2, #0xc
	orrs r1, r2
	ldr r2, _080A36F0 @ =0x0000E0FF
	ands r1, r2
	movs r7, #0xf8
	lsls r7, r7, #5
	adds r2, r7, #0
	orrs r1, r2
	mov r2, ip
	strh r1, [r2, #0x3c]
	adds r2, #0x3d
	mov r1, r8
	ldrb r7, [r2]
	orrs r1, r7
	strb r1, [r2]
	movs r1, #0xc0
	ldrb r2, [r6]
	orrs r1, r2
	strb r1, [r6]
	mov r2, ip
	adds r2, #0x44
	movs r1, #0x10
	strb r1, [r2]
	mov r1, ip
	adds r1, #0x45
	strb r5, [r1]
	adds r1, #1
	strb r5, [r1]
	mov r7, r8
	orrs r4, r7
	mov r1, sb
	strb r4, [r1]
	subs r2, #0xf
	mov r1, r8
	ldrb r4, [r2]
	orrs r1, r4
	strb r1, [r2]
	orrs r3, r7
	mov r1, sl
	strb r3, [r1]
	adds r0, #0x4c
	strh r5, [r0]
	ldr r0, _080A36F4 @ =sub_080A3580
	bl SetOnHBlankA
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A36D4: .4byte 0x02000500
_080A36D8: .4byte 0x02000280
_080A36DC: .4byte 0x02000504
_080A36E0: .4byte 0xFFFFFD80
_080A36E4: .4byte 0x02000508
_080A36E8: .4byte gDispIo
_080A36EC: .4byte 0x0000FFE0
_080A36F0: .4byte 0x0000E0FF
_080A36F4: .4byte sub_080A3580

	thumb_func_start sub_080A36F8
sub_080A36F8: @ 0x080A36F8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	str r0, [sp, #0x14]
	ldr r2, _080A3898 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0xc0
	ldrb r3, [r1]
	orrs r0, r3
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x44
	movs r1, #0
	movs r4, #0x10
	strb r4, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r6, [sp, #0x14]
	adds r6, #0x4c
	movs r5, #0
	ldrsh r1, [r6, r5]
	cmp r1, #0
	bge _080A3730
	adds r1, #3
_080A3730:
	asrs r1, r1, #2
	adds r0, r2, #0
	adds r0, #0x46
	strb r1, [r0]
	movs r2, #0x80
	lsls r2, r2, #1
	movs r0, #0
	ldrsh r3, [r6, r0]
	str r4, [sp]
	movs r0, #5
	movs r1, #0
	bl Interpolate
	adds r7, r0, #0
	adds r1, r7, #0
	cmp r7, #0
	bge _080A3754
	adds r1, r7, #3
_080A3754:
	asrs r1, r1, #2
	subs r1, #0x40
	add r0, sp, #4
	ldr r3, [sp, #0x14]
	ldr r2, [r3, #0x34]
	rsbs r5, r2, #0
	strh r5, [r0]
	ldr r4, [r3, #0x38]
	rsbs r3, r4, #0
	strh r3, [r0, #2]
	strh r2, [r0, #4]
	strh r3, [r0, #6]
	strh r2, [r0, #8]
	strh r4, [r0, #0xa]
	strh r5, [r0, #0xc]
	strh r4, [r0, #0xe]
	str r6, [sp, #0x18]
	ldr r4, _080A389C @ =0x02000504
	mov sl, r4
	ldr r2, _080A38A0 @ =gSinLut
	movs r0, #0xff
	ands r1, r0
	adds r0, r1, #0
	adds r0, #0x40
	lsls r0, r0, #1
	adds r0, r0, r2
	mov sb, r0
	lsls r1, r1, #1
	adds r1, r1, r2
	mov r8, r1
	add r6, sp, #4
	movs r5, #3
	mov ip, r5
_080A3796:
	mov r0, sb
	movs r1, #0
	ldrsh r5, [r0, r1]
	movs r2, #0
	ldrsh r4, [r6, r2]
	adds r2, r5, #0
	muls r2, r4, r2
	mov r3, r8
	movs r0, #0
	ldrsh r1, [r3, r0]
	movs r0, #2
	ldrsh r3, [r6, r0]
	adds r0, r1, #0
	muls r0, r3, r0
	subs r2, r2, r0
	muls r1, r4, r1
	adds r0, r5, #0
	muls r0, r3, r0
	adds r1, r1, r0
	adds r0, r2, #0
	muls r0, r7, r0
	asrs r0, r0, #0x14
	adds r0, #0x78
	strh r0, [r6]
	adds r0, r1, #0
	muls r0, r7, r0
	asrs r0, r0, #0x14
	adds r0, #0x50
	strh r0, [r6, #2]
	adds r6, #4
	movs r1, #1
	rsbs r1, r1, #0
	add ip, r1
	mov r2, ip
	cmp r2, #0
	bge _080A3796
	mov r3, sl
	ldr r0, [r3]
	bl sub_080138C8
	mov r4, sl
	ldr r0, [r4]
	add r1, sp, #4
	movs r5, #0
	ldrsh r1, [r1, r5]
	add r2, sp, #4
	movs r3, #2
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #4
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #6
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl sub_080138E8
	mov r1, sl
	ldr r0, [r1]
	add r1, sp, #4
	movs r2, #4
	ldrsh r1, [r1, r2]
	add r2, sp, #4
	movs r3, #6
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #8
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #0xa
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl sub_080138E8
	mov r1, sl
	ldr r0, [r1]
	add r1, sp, #4
	movs r2, #8
	ldrsh r1, [r1, r2]
	add r2, sp, #4
	movs r3, #0xa
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #0xc
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #0xe
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl sub_080138E8
	mov r1, sl
	ldr r0, [r1]
	add r1, sp, #4
	movs r2, #0xc
	ldrsh r1, [r1, r2]
	add r2, sp, #4
	movs r3, #0xe
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #0
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #2
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl sub_080138E8
	bl sub_080A35BC
	ldr r1, [sp, #0x18]
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x10
	ble _080A3888
	ldr r0, [sp, #0x14]
	bl Proc_Break
_080A3888:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A3898: .4byte gDispIo
_080A389C: .4byte 0x02000504
_080A38A0: .4byte gSinLut

	thumb_func_start sub_080A38A4
sub_080A38A4: @ 0x080A38A4
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _080A3908 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A38BA
	ldr r0, _080A390C @ =0x00000399
	bl m4aSongNumStart
_080A38BA:
	ldr r2, _080A3910 @ =0x030027CC
	ldr r0, _080A3914 @ =0x0000FFE0
	ldrh r1, [r2]
	ands r0, r1
	movs r1, #0xc
	orrs r0, r1
	ldr r1, _080A3918 @ =0x0000E0FF
	ands r0, r1
	movs r3, #0xf8
	lsls r3, r3, #5
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	movs r0, #0xc0
	ldrb r5, [r2]
	orrs r0, r5
	strb r0, [r2]
	movs r3, #0
	movs r0, #0x10
	strb r0, [r2, #8]
	strb r3, [r2, #9]
	movs r0, #4
	strb r0, [r2, #0xa]
	ldr r0, _080A391C @ =0x02000500
	ldr r1, _080A3920 @ =0x02000280
	str r1, [r0]
	ldr r2, _080A3924 @ =0x02000504
	ldr r5, _080A3928 @ =0xFFFFFD80
	adds r0, r1, r5
	str r0, [r2]
	ldr r0, _080A392C @ =0x02000508
	str r1, [r0]
	adds r0, r4, #0
	adds r0, #0x4c
	strh r3, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A3908: .4byte gPlaySt
_080A390C: .4byte 0x00000399
_080A3910: .4byte 0x030027CC
_080A3914: .4byte 0x0000FFE0
_080A3918: .4byte 0x0000E0FF
_080A391C: .4byte 0x02000500
_080A3920: .4byte 0x02000280
_080A3924: .4byte 0x02000504
_080A3928: .4byte 0xFFFFFD80
_080A392C: .4byte 0x02000508

	thumb_func_start sub_080A3930
sub_080A3930: @ 0x080A3930
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	str r0, [sp, #0x14]
	ldr r2, _080A3AD4 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0xc0
	ldrb r3, [r1]
	orrs r0, r3
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x44
	movs r1, #0
	movs r4, #0x10
	strb r4, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r6, [sp, #0x14]
	adds r6, #0x4c
	movs r5, #0
	ldrsh r1, [r6, r5]
	cmp r1, #0
	bge _080A3968
	adds r1, #3
_080A3968:
	asrs r1, r1, #2
	movs r0, #4
	subs r0, r0, r1
	adds r1, r2, #0
	adds r1, #0x46
	strb r0, [r1]
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0
	ldrsh r3, [r6, r0]
	str r4, [sp]
	movs r0, #2
	movs r2, #0
	bl Interpolate
	adds r7, r0, #0
	cmp r7, #0
	bge _080A398E
	adds r0, r7, #3
_080A398E:
	asrs r0, r0, #2
	movs r1, #0x40
	subs r1, r1, r0
	add r0, sp, #4
	ldr r3, [sp, #0x14]
	ldr r2, [r3, #0x34]
	rsbs r5, r2, #0
	strh r5, [r0]
	ldr r4, [r3, #0x38]
	rsbs r3, r4, #0
	strh r3, [r0, #2]
	strh r2, [r0, #4]
	strh r3, [r0, #6]
	strh r2, [r0, #8]
	strh r4, [r0, #0xa]
	strh r5, [r0, #0xc]
	strh r4, [r0, #0xe]
	str r6, [sp, #0x18]
	ldr r4, _080A3AD8 @ =0x02000504
	mov sl, r4
	ldr r2, _080A3ADC @ =gSinLut
	movs r0, #0xff
	ands r1, r0
	adds r0, r1, #0
	adds r0, #0x40
	lsls r0, r0, #1
	adds r0, r0, r2
	mov sb, r0
	lsls r1, r1, #1
	adds r1, r1, r2
	mov r8, r1
	add r6, sp, #4
	movs r5, #3
	mov ip, r5
_080A39D2:
	mov r0, sb
	movs r1, #0
	ldrsh r5, [r0, r1]
	movs r2, #0
	ldrsh r4, [r6, r2]
	adds r2, r5, #0
	muls r2, r4, r2
	mov r3, r8
	movs r0, #0
	ldrsh r1, [r3, r0]
	movs r0, #2
	ldrsh r3, [r6, r0]
	adds r0, r1, #0
	muls r0, r3, r0
	subs r2, r2, r0
	muls r1, r4, r1
	adds r0, r5, #0
	muls r0, r3, r0
	adds r1, r1, r0
	adds r0, r2, #0
	muls r0, r7, r0
	asrs r0, r0, #0x14
	adds r0, #0x78
	strh r0, [r6]
	adds r0, r1, #0
	muls r0, r7, r0
	asrs r0, r0, #0x14
	adds r0, #0x50
	strh r0, [r6, #2]
	adds r6, #4
	movs r1, #1
	rsbs r1, r1, #0
	add ip, r1
	mov r2, ip
	cmp r2, #0
	bge _080A39D2
	mov r3, sl
	ldr r0, [r3]
	bl sub_080138C8
	mov r4, sl
	ldr r0, [r4]
	add r1, sp, #4
	movs r5, #0
	ldrsh r1, [r1, r5]
	add r2, sp, #4
	movs r3, #2
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #4
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #6
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl sub_080138E8
	mov r1, sl
	ldr r0, [r1]
	add r1, sp, #4
	movs r2, #4
	ldrsh r1, [r1, r2]
	add r2, sp, #4
	movs r3, #6
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #8
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #0xa
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl sub_080138E8
	mov r1, sl
	ldr r0, [r1]
	add r1, sp, #4
	movs r2, #8
	ldrsh r1, [r1, r2]
	add r2, sp, #4
	movs r3, #0xa
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #0xc
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #0xe
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl sub_080138E8
	mov r1, sl
	ldr r0, [r1]
	add r1, sp, #4
	movs r2, #0xc
	ldrsh r1, [r1, r2]
	add r2, sp, #4
	movs r3, #0xe
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #0
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #2
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl sub_080138E8
	bl sub_080A35BC
	ldr r1, [sp, #0x18]
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x10
	ble _080A3AC4
	ldr r0, [sp, #0x14]
	bl Proc_Break
_080A3AC4:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A3AD4: .4byte gDispIo
_080A3AD8: .4byte 0x02000504
_080A3ADC: .4byte gSinLut

	thumb_func_start sub_080A3AE0
sub_080A3AE0: @ 0x080A3AE0
	push {r4, lr}
	adds r4, r0, #0
	cmp r4, #0
	bge _080A3AEA
	movs r4, #3
_080A3AEA:
	ldr r0, _080A3B10 @ =0x0842D338
	ldr r1, _080A3B14 @ =gBuf
	bl sub_08013688
	ldr r0, _080A3B18 @ =0x0842D710
	lsls r1, r4, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080A3B1C @ =0x0842D730
	adds r1, r4, #1
	lsls r1, r1, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A3B10: .4byte 0x0842D338
_080A3B14: .4byte gBuf
_080A3B18: .4byte 0x0842D710
_080A3B1C: .4byte 0x0842D730

	thumb_func_start sub_080A3B20
sub_080A3B20: @ 0x080A3B20
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r1, _080A3BA0 @ =0x0200050C
	ldr r0, _080A3BA4 @ =gBuf
	str r0, [r1]
	movs r2, #1
	ldr r0, _080A3BA8 @ =gPal
	mov sl, r0
	movs r0, #0x1f
	mov r8, r0
	mov sb, r1
_080A3B3C:
	adds r0, r2, #0
	adds r0, #0x40
	lsls r0, r0, #1
	add r0, sl
	ldrh r0, [r0]
	adds r5, r0, #0
	mov r1, r8
	ands r5, r1
	asrs r4, r0, #5
	ands r4, r1
	asrs r3, r0, #0xa
	ands r3, r1
	adds r0, r2, #1
	mov ip, r0
	lsls r6, r2, #1
	movs r7, #7
_080A3B5C:
	mov r1, sb
	ldr r0, [r1]
	adds r0, r6, r0
	lsls r1, r3, #0xa
	lsls r2, r4, #5
	adds r1, r1, r2
	adds r1, r1, r5
	strh r1, [r0]
	adds r5, #3
	cmp r5, #0x1f
	ble _080A3B74
	movs r5, #0x1f
_080A3B74:
	adds r4, #3
	cmp r4, #0x1f
	ble _080A3B7C
	movs r4, #0x1f
_080A3B7C:
	adds r3, #3
	cmp r3, #0x1f
	ble _080A3B84
	movs r3, #0x1f
_080A3B84:
	adds r6, #0x20
	subs r7, #1
	cmp r7, #0
	bge _080A3B5C
	mov r2, ip
	cmp r2, #0xf
	ble _080A3B3C
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A3BA0: .4byte 0x0200050C
_080A3BA4: .4byte gBuf
_080A3BA8: .4byte gPal

	thumb_func_start sub_080A3BAC
sub_080A3BAC: @ 0x080A3BAC
	push {lr}
	sub sp, #0x10
	ldr r1, _080A3BE0 @ =0x0842D7B3
	mov r0, sp
	movs r2, #0x10
	bl memcpy
	bl GetGameTime
	lsrs r0, r0, #2
	movs r1, #0xf
	ands r0, r1
	add r0, sp
	ldr r1, _080A3BE4 @ =0x0200050C
	ldrb r0, [r0]
	lsls r2, r0, #5
	ldr r0, [r1]
	adds r0, r0, r2
	movs r1, #0x80
	movs r2, #0x20
	bl ApplyPaletteExt
	add sp, #0x10
	pop {r0}
	bx r0
	.align 2, 0
_080A3BE0: .4byte 0x0842D7B3
_080A3BE4: .4byte 0x0200050C

	thumb_func_start sub_080A3BE8
sub_080A3BE8: @ 0x080A3BE8
	push {lr}
	sub sp, #0x20
	ldr r1, _080A3C24 @ =0x0842D7C3
	mov r0, sp
	movs r2, #0x20
	bl memcpy
	bl GetGameTime
	movs r1, #0x1f
	ands r1, r0
	mov r2, sp
	adds r0, r2, r1
	ldrb r3, [r0]
	adds r3, #0x10
	ldr r2, _080A3C28 @ =gPal
	lsls r0, r3, #0xa
	lsls r1, r3, #5
	adds r0, r0, r1
	adds r0, r0, r3
	movs r1, #0x87
	lsls r1, r1, #2
	adds r2, r2, r1
	strh r0, [r2]
	bl EnablePalSync
	add sp, #0x20
	pop {r0}
	bx r0
	.align 2, 0
_080A3C24: .4byte 0x0842D7C3
_080A3C28: .4byte gPal

	thumb_func_start sub_080A3C2C
sub_080A3C2C: @ 0x080A3C2C
	push {r4, lr}
	sub sp, #0x1c
	adds r4, r0, #0
	ldr r1, _080A3C70 @ =0x0842D7E4
	mov r0, sp
	movs r2, #0x1a
	bl memcpy
	ldr r3, _080A3C74 @ =gBmSt
	movs r0, #0xc
	ldrsh r1, [r3, r0]
	cmp r1, #0
	bge _080A3C48
	adds r1, #3
_080A3C48:
	asrs r1, r1, #2
	ldr r0, [r4, #0x3c]
	adds r2, r0, r1
	movs r1, #0xe
	ldrsh r0, [r3, r1]
	cmp r0, #0
	bge _080A3C58
	adds r0, #3
_080A3C58:
	asrs r0, r0, #2
	ldr r1, [r4, #0x40]
	adds r1, r1, r0
	adds r0, r2, #0
	mov r2, sp
	movs r3, #0
	bl PutOamHiRam
	add sp, #0x1c
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A3C70: .4byte 0x0842D7E4
_080A3C74: .4byte gBmSt

	thumb_func_start sub_080A3C78
sub_080A3C78: @ 0x080A3C78
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r2, _080A3CE8 @ =gBmMapSize
	movs r0, #0
	ldrsh r1, [r2, r0]
	lsls r1, r1, #2
	movs r0, #0xf0
	subs r0, r0, r1
	asrs r5, r0, #1
	movs r1, #2
	ldrsh r0, [r2, r1]
	lsls r1, r0, #2
	movs r0, #0xa0
	subs r0, r0, r1
	asrs r4, r0, #1
	cmp r1, #0x90
	ble _080A3CBC
	adds r4, r1, #0
	subs r4, #0x90
	ldr r1, _080A3CEC @ =gBmSt
	ldrh r2, [r1, #0xe]
	lsls r0, r2, #0x10
	movs r2, #0x2a
	ldrsh r1, [r1, r2]
	bl __divsi3
	muls r0, r4, r0
	cmp r0, #0
	bge _080A3CB6
	ldr r1, _080A3CF0 @ =0x0000FFFF
	adds r0, r0, r1
_080A3CB6:
	asrs r4, r0, #0x10
	movs r0, #8
	subs r4, r0, r4
_080A3CBC:
	str r5, [r6, #0x3c]
	str r4, [r6, #0x40]
	rsbs r5, r5, #0
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	rsbs r4, r4, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	movs r0, #0
	adds r1, r5, #0
	adds r2, r4, #0
	bl SetBgOffset
	movs r0, #1
	adds r1, r5, #0
	adds r2, r4, #0
	bl SetBgOffset
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A3CE8: .4byte gBmMapSize
_080A3CEC: .4byte gBmSt
_080A3CF0: .4byte 0x0000FFFF

	thumb_func_start sub_080A3CF4
sub_080A3CF4: @ 0x080A3CF4
	push {r4, r5, r6, r7, lr}
	adds r3, r0, #0
	ldr r1, _080A3DB4 @ =gBmSt
	movs r0, #0xc
	ldrsh r4, [r1, r0]
	movs r2, #0xe
	ldrsh r5, [r1, r2]
	movs r2, #0xf
	adds r0, r4, #0
	ands r0, r2
	adds r7, r1, #0
	cmp r0, #0
	bne _080A3D7E
	adds r0, r5, #0
	ands r0, r2
	cmp r0, #0
	bne _080A3D7E
	str r0, [r3, #0x2c]
	str r0, [r3, #0x30]
	ldr r2, _080A3DB8 @ =gpKeySt
	ldr r1, [r2]
	movs r0, #0x20
	ldrh r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _080A3D36
	movs r0, #8
	rsbs r0, r0, #0
	str r0, [r3, #0x2c]
	adds r1, r3, #0
	adds r1, #0x4a
	movs r0, #1
	strh r0, [r1]
_080A3D36:
	ldr r1, [r2]
	movs r0, #0x10
	ldrh r2, [r1, #4]
	ands r0, r2
	adds r6, r1, #0
	cmp r0, #0
	beq _080A3D50
	movs r0, #8
	str r0, [r3, #0x2c]
	adds r2, r3, #0
	adds r2, #0x4a
	movs r0, #1
	strh r0, [r2]
_080A3D50:
	movs r0, #0x40
	ldrh r6, [r6, #4]
	ands r0, r6
	cmp r0, #0
	beq _080A3D68
	movs r0, #8
	rsbs r0, r0, #0
	str r0, [r3, #0x30]
	adds r2, r3, #0
	adds r2, #0x4a
	movs r0, #1
	strh r0, [r2]
_080A3D68:
	movs r0, #0x80
	ldrh r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _080A3D7E
	movs r0, #8
	str r0, [r3, #0x30]
	adds r1, r3, #0
	adds r1, #0x4a
	movs r0, #1
	strh r0, [r1]
_080A3D7E:
	ldr r0, [r3, #0x2c]
	adds r4, r4, r0
	ldr r0, [r3, #0x30]
	adds r5, r5, r0
	cmp r4, #0
	bge _080A3D8C
	movs r4, #0
_080A3D8C:
	adds r1, r7, #0
	movs r2, #0x28
	ldrsh r0, [r1, r2]
	cmp r4, r0
	ble _080A3D98
	adds r4, r0, #0
_080A3D98:
	cmp r5, #0
	bge _080A3D9E
	movs r5, #0
_080A3D9E:
	movs r2, #0x2a
	ldrsh r0, [r1, r2]
	cmp r5, r0
	ble _080A3DA8
	adds r5, r0, #0
_080A3DA8:
	strh r4, [r7, #0xc]
	strh r5, [r7, #0xe]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A3DB4: .4byte gBmSt
_080A3DB8: .4byte gpKeySt

	thumb_func_start sub_080A3DBC
sub_080A3DBC: @ 0x080A3DBC
	adds r2, r0, #0
	adds r2, #0x4a
	movs r1, #0
	strh r1, [r2]
	ldr r2, _080A3DD8 @ =gBmMapSize
	movs r3, #0
	ldrsh r1, [r2, r3]
	lsls r1, r1, #1
	str r1, [r0, #0x34]
	movs r3, #2
	ldrsh r1, [r2, r3]
	lsls r1, r1, #1
	str r1, [r0, #0x38]
	bx lr
	.align 2, 0
_080A3DD8: .4byte gBmMapSize

	thumb_func_start sub_080A3DDC
sub_080A3DDC: @ 0x080A3DDC
	push {lr}
	adds r0, #0x4a
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _080A3E0A
	ldr r1, _080A3E14 @ =gBmSt
	movs r2, #0xc
	ldrsh r0, [r1, r2]
	cmp r0, #0
	bge _080A3DF4
	adds r0, #0xf
_080A3DF4:
	asrs r0, r0, #4
	adds r0, #7
	movs r2, #0xe
	ldrsh r1, [r1, r2]
	cmp r1, #0
	bge _080A3E02
	adds r1, #0xf
_080A3E02:
	asrs r1, r1, #4
	adds r1, #5
	bl sub_08015F0C
_080A3E0A:
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0
	.align 2, 0
_080A3E14: .4byte gBmSt

	thumb_func_start sub_080A3E18
sub_080A3E18: @ 0x080A3E18
	push {r4, r5, lr}
	adds r4, r0, #0
	bl sub_080A3BAC
	adds r0, r4, #0
	bl sub_080A3BE8
	adds r0, r4, #0
	bl sub_080A3C78
	adds r0, r4, #0
	bl sub_080A3C2C
	adds r0, r4, #0
	bl sub_080A3CF4
	ldr r0, _080A3E7C @ =gpKeySt
	ldr r0, [r0]
	movs r3, #0xc0
	lsls r3, r3, #2
	ldrh r0, [r0, #4]
	ands r3, r0
	cmp r3, #0
	beq _080A3E8C
	ldr r2, _080A3E80 @ =0x030027CC
	ldr r0, _080A3E84 @ =0x0000FFE0
	ldrh r1, [r2]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	ldr r1, _080A3E88 @ =0x0000E0FF
	ands r0, r1
	movs r3, #0xe0
	lsls r3, r3, #5
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	movs r0, #0x3f
	ldrb r5, [r2]
	ands r0, r5
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	movs r1, #0
	movs r0, #8
	strb r0, [r2, #8]
	strb r0, [r2, #9]
	strb r1, [r2, #0xa]
	b _080A3EB8
	.align 2, 0
_080A3E7C: .4byte gpKeySt
_080A3E80: .4byte 0x030027CC
_080A3E84: .4byte 0x0000FFE0
_080A3E88: .4byte 0x0000E0FF
_080A3E8C:
	ldr r2, _080A3EE0 @ =0x030027CC
	ldr r0, _080A3EE4 @ =0x0000FFE0
	ldrh r1, [r2]
	ands r0, r1
	movs r1, #0xc
	orrs r0, r1
	ldr r1, _080A3EE8 @ =0x0000E0FF
	ands r0, r1
	movs r5, #0xf8
	lsls r5, r5, #5
	adds r1, r5, #0
	orrs r0, r1
	strh r0, [r2]
	movs r0, #0xc0
	ldrb r1, [r2]
	orrs r0, r1
	strb r0, [r2]
	movs r0, #0x10
	strb r0, [r2, #8]
	strb r3, [r2, #9]
	movs r0, #4
	strb r0, [r2, #0xa]
_080A3EB8:
	ldr r0, _080A3EEC @ =gBmSt
	ldr r0, [r0, #0xc]
	ldr r1, _080A3EF0 @ =0x000F000F
	ands r0, r1
	cmp r0, #0
	bne _080A3ED8
	ldr r0, _080A3EF4 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0xa
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080A3ED8
	adds r0, r4, #0
	bl Proc_Break
_080A3ED8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A3EE0: .4byte 0x030027CC
_080A3EE4: .4byte 0x0000FFE0
_080A3EE8: .4byte 0x0000E0FF
_080A3EEC: .4byte gBmSt
_080A3EF0: .4byte 0x000F000F
_080A3EF4: .4byte gpKeySt

	thumb_func_start sub_080A3EF8
sub_080A3EF8: @ 0x080A3EF8
	push {lr}
	ldr r0, _080A3F08 @ =0x08DAD29C
	movs r1, #3
	bl Proc_Start
	pop {r0}
	bx r0
	.align 2, 0
_080A3F08: .4byte 0x08DAD29C

	thumb_func_start sub_080A3F0C
sub_080A3F0C: @ 0x080A3F0C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r4, r2, #0
	ldr r0, _080A3F40 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _080A3F44 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	adds r0, r5, #0
	bl InitChapterPreviewMap
	adds r0, r4, #0
	bl sub_080A3AE0
	adds r0, r6, #0
	adds r1, r4, #0
	bl sub_080A3318
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A3F40: .4byte gBg0Tm
_080A3F44: .4byte gBg1Tm

	thumb_func_start sub_080A3F48
sub_080A3F48: @ 0x080A3F48
	push {lr}
	ldr r0, _080A3F84 @ =0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0xa0
	bls _080A3F5A
	movs r2, #0
_080A3F5A:
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	bne _080A3FB6
	ldr r3, _080A3F88 @ =gAnims
	ldrb r0, [r3]
	cmp r2, r0
	bhs _080A3F9C
	ldr r0, _080A3F8C @ =0x04000050
	movs r1, #0xc1
	strh r1, [r0]
	ldrb r0, [r3]
	cmp r0, #0
	beq _080A3F90
	adds r1, r0, #0
	subs r0, r1, r2
	lsls r0, r0, #4
	bl __divsi3
	adds r1, r0, #0
	b _080A3F92
	.align 2, 0
_080A3F84: .4byte 0x04000006
_080A3F88: .4byte gAnims
_080A3F8C: .4byte 0x04000050
_080A3F90:
	movs r1, #0
_080A3F92:
	ldr r0, _080A3F98 @ =0x04000054
	strh r1, [r0]
	b _080A3FB6
	.align 2, 0
_080A3F98: .4byte 0x04000054
_080A3F9C:
	ldr r1, _080A3FBC @ =0x04000050
	movs r2, #0xa2
	lsls r2, r2, #1
	adds r0, r2, #0
	strh r0, [r1]
	ldr r2, _080A3FC0 @ =0x04000052
	ldr r1, _080A3FC4 @ =0x02000001
	movs r3, #0x80
	lsls r3, r3, #5
	adds r0, r3, #0
	ldrb r1, [r1]
	orrs r0, r1
	strh r0, [r2]
_080A3FB6:
	pop {r0}
	bx r0
	.align 2, 0
_080A3FBC: .4byte 0x04000050
_080A3FC0: .4byte 0x04000052
_080A3FC4: .4byte 0x02000001

	thumb_func_start sub_080A3FC8
sub_080A3FC8: @ 0x080A3FC8
	push {lr}
	movs r1, #0x12
	bl Proc_Goto
	movs r0, #0xc0
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl StartBgmVolumeChange
	pop {r0}
	bx r0

	thumb_func_start sub_080A3FE0
sub_080A3FE0: @ 0x080A3FE0
	push {r4, r5, lr}
	adds r5, r1, #0
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	movs r3, #0
	movs r2, #0
	movs r1, #1
_080A3FEE:
	adds r0, r4, #0
	asrs r0, r2
	ands r0, r1
	cmp r0, #0
	beq _080A4008
	cmp r5, r3
	bne _080A4006
	adds r0, r1, #0
	lsls r0, r2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	b _080A4010
_080A4006:
	adds r3, #1
_080A4008:
	adds r2, #1
	cmp r2, #7
	ble _080A3FEE
	movs r0, #0xff
_080A4010:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080A4018
sub_080A4018: @ 0x080A4018
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r4, r1, #0x18
	movs r3, #0
	movs r2, #0
	movs r1, #1
_080A4028:
	adds r0, r5, #0
	asrs r0, r2
	ands r0, r1
	cmp r0, #0
	beq _080A4044
	adds r0, r4, #0
	asrs r0, r2
	ands r0, r1
	cmp r0, #0
	beq _080A4042
	lsls r0, r3, #0x18
	lsrs r0, r0, #0x18
	b _080A404C
_080A4042:
	adds r3, #1
_080A4044:
	adds r2, #1
	cmp r2, #7
	ble _080A4028
	movs r0, #0xff
_080A404C:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080A4054
sub_080A4054: @ 0x080A4054
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	movs r1, #0
	movs r3, #1
_080A405C:
	adds r0, r2, #0
	asrs r0, r1
	ands r0, r3
	cmp r0, #0
	beq _080A406C
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	b _080A4074
_080A406C:
	adds r1, #1
	cmp r1, #7
	ble _080A405C
	movs r0, #0xff
_080A4074:
	bx lr
	.align 2, 0

	thumb_func_start sub_080A4078
sub_080A4078: @ 0x080A4078
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0xff
	beq _080A408E
	adds r0, r4, #0
	adds r0, #0x36
	ldrb r1, [r0]
	cmp r1, #0
	bne _080A409C
_080A408E:
	bl sub_080828A4
	adds r1, r4, #0
	adds r1, #0x3e
	movs r0, #0
	strb r0, [r1]
	b _080A40D8
_080A409C:
	adds r1, r4, #0
	adds r1, #0x42
	ldrh r1, [r1]
	cmp r1, #0x10
	beq _080A40B4
	cmp r1, #0x10
	bgt _080A40B0
	cmp r1, #2
	beq _080A40B4
	b _080A40D8
_080A40B0:
	cmp r1, #0x20
	bne _080A40D8
_080A40B4:
	ldrb r0, [r0]
	cmp r0, #0
	beq _080A40D8
	adds r4, #0x3e
	ldrb r0, [r4]
	cmp r0, #0
	bne _080A40D8
	ldr r0, _080A40E0 @ =0x06013800
	movs r1, #9
	bl sub_08082F74
	ldr r2, _080A40E4 @ =0x000003B7
	movs r0, #0x30
	movs r1, #0x30
	bl sub_080827F4
	movs r0, #1
	strb r0, [r4]
_080A40D8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A40E0: .4byte 0x06013800
_080A40E4: .4byte 0x000003B7

	thumb_func_start sub_080A40E8
sub_080A40E8: @ 0x080A40E8
	push {r4, r5, lr}
	sub sp, #0x48
	adds r4, r0, #0
	bl IsSaveValid
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A40FC
	movs r0, #0
	b _080A418E
_080A40FC:
	adds r0, r4, #0
	mov r1, sp
	bl ReadGameSavePlaySt
	mov r1, sp
	adds r1, #0x2b
	movs r0, #1
	ldrb r2, [r1]
	ands r0, r2
	adds r4, r1, #0
	cmp r0, #0
	bne _080A412C
	ldr r1, _080A4128 @ =gPlaySt
	adds r1, #0x2b
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	movs r0, #1
	b _080A418E
	.align 2, 0
_080A4128: .4byte gPlaySt
_080A412C:
	ldr r2, _080A414C @ =gPlaySt
	adds r1, r2, #0
	adds r1, #0x2b
	movs r0, #1
	ldrb r5, [r1]
	orrs r0, r5
	strb r0, [r1]
	add r0, sp, #0x20
	ldrb r1, [r0]
	cmp r1, #0
	bne _080A4150
	adds r0, r2, #0
	adds r0, #0x20
	strb r1, [r0]
	b _080A4154
	.align 2, 0
_080A414C: .4byte gPlaySt
_080A4150:
	bl sub_0802EBB8
_080A4154:
	ldr r3, _080A4198 @ =gPlaySt
	add r0, sp, #0x2c
	ldrb r0, [r0]
	lsls r1, r0, #0x1f
	adds r2, r3, #0
	adds r2, #0x2c
	lsrs r1, r1, #0x1f
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r5, [r2]
	ands r0, r5
	orrs r0, r1
	strb r0, [r2]
	ldrb r2, [r4]
	adds r3, #0x2b
	movs r1, #0xe
	ands r1, r2
	movs r0, #0xf
	rsbs r0, r0, #0
	ldrb r4, [r3]
	ands r0, r4
	orrs r0, r1
	lsrs r2, r2, #4
	lsls r2, r2, #4
	movs r1, #0xf
	ands r0, r1
	orrs r0, r2
	strb r0, [r3]
	movs r0, #2
_080A418E:
	add sp, #0x48
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080A4198: .4byte gPlaySt

	thumb_func_start sub_080A419C
sub_080A419C: @ 0x080A419C
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	movs r7, #8
	adds r5, r6, #0
	adds r5, #0x40
	ldrb r0, [r5]
	cmp r0, #8
	bne _080A41CC
	ldr r0, _080A41C8 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0xf9
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080A4228
	bl sub_080828A4
	movs r0, #7
	strb r0, [r5]
	b _080A4228
	.align 2, 0
_080A41C8: .4byte gpKeySt
_080A41CC:
	ldr r0, _080A4200 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080A4228
	adds r4, r6, #0
	adds r4, #0x2c
	ldrb r0, [r4]
	bl sub_080A40E8
	cmp r0, #0
	bne _080A4208
	ldr r0, _080A4204 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A4228
	movs r0, #0xe3
	lsls r0, r0, #2
	bl m4aSongNumStart
	b _080A4228
	.align 2, 0
_080A4200: .4byte gpKeySt
_080A4204: .4byte gPlaySt
_080A4208:
	cmp r0, #0
	blt _080A4228
	cmp r0, #2
	bgt _080A4228
	ldr r0, _080A4244 @ =0x06013800
	movs r1, #9
	bl sub_08082F74
	ldrb r4, [r4]
	lsls r1, r4, #5
	adds r1, #0x2c
	ldr r2, _080A4248 @ =0x0000FFFF
	movs r0, #0x50
	bl sub_080826EC
	strb r7, [r5]
_080A4228:
	adds r1, r6, #0
	adds r1, #0x40
	ldrb r0, [r1]
	cmp r0, #0
	beq _080A4240
	cmp r0, r7
	bge _080A423A
	subs r0, #1
	strb r0, [r1]
_080A423A:
	ldrb r0, [r1]
	cmp r0, #0
	bne _080A424C
_080A4240:
	movs r0, #0
	b _080A424E
	.align 2, 0
_080A4244: .4byte 0x06013800
_080A4248: .4byte 0x0000FFFF
_080A424C:
	movs r0, #1
_080A424E:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_080A4254
sub_080A4254: @ 0x080A4254
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	movs r0, #0xac
	lsls r0, r0, #4
	bl sub_08082E6C
	movs r4, #0
	ldr r6, _080A4284 @ =0x0001FFFF
	movs r5, #0xb4
	lsls r5, r5, #9
_080A4268:
	adds r0, r7, #0
	adds r0, #0x37
	adds r1, r0, r4
	ldrb r0, [r1]
	cmp r0, #0xff
	beq _080A4288
	adds r0, r5, #0
	ands r0, r6
	lsrs r0, r0, #5
	ldrb r1, [r1]
	bl sub_08082E2C
	b _080A4296
	.align 2, 0
_080A4284: .4byte 0x0001FFFF
_080A4288:
	adds r0, r5, #0
	ands r0, r6
	lsrs r0, r0, #5
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_08082E2C
_080A4296:
	movs r0, #0x80
	lsls r0, r0, #4
	adds r5, r5, r0
	adds r4, #1
	cmp r4, #2
	ble _080A4268
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080A42A8
sub_080A42A8: @ 0x080A42A8
	push {lr}
	ldr r0, _080A4318 @ =0x08DAD33C
	bl InitBgs
	ldr r2, _080A431C @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #8
	rsbs r0, r0, #0
	ldrb r3, [r2]
	ands r0, r3
	movs r1, #1
	orrs r0, r1
	strb r0, [r2]
	movs r0, #0x3f
	ldrb r1, [r2, #0x15]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x21
	rsbs r1, r1, #0
	ands r0, r1
	strb r0, [r2, #0x15]
	movs r0, #3
	ldrb r3, [r2, #0xc]
	orrs r0, r3
	strb r0, [r2, #0xc]
	adds r1, #0x1d
	adds r0, r1, #0
	ldrb r3, [r2, #0x10]
	ands r0, r3
	strb r0, [r2, #0x10]
	adds r0, r1, #0
	ldrb r3, [r2, #0x14]
	ands r0, r3
	movs r3, #2
	orrs r0, r3
	strb r0, [r2, #0x14]
	ldrb r0, [r2, #0x18]
	ands r1, r0
	orrs r1, r3
	strb r1, [r2, #0x18]
	pop {r0}
	bx r0
	.align 2, 0
_080A4318: .4byte 0x08DAD33C
_080A431C: .4byte gDispIo

	thumb_func_start sub_080A4320
sub_080A4320: @ 0x080A4320
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov r8, r0
	bl sub_08005308
	bl sub_08015A0C
	ldr r0, _080A44FC @ =0x0842D800
	movs r1, #0
	movs r2, #0x60
	bl ApplyPaletteExt
	ldr r4, _080A4500 @ =0x08439BF0
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl sub_08013688
	ldr r0, _080A4504 @ =gBg0Tm
	ldr r1, _080A4508 @ =0x0842D860
	movs r2, #0
	bl TmApplyTsa_thm
	ldr r0, _080A450C @ =0x08432594
	movs r1, #0x88
	lsls r1, r1, #2
	movs r5, #0x80
	lsls r5, r5, #1
	adds r2, r5, #0
	bl ApplyPaletteExt
	ldr r0, _080A4510 @ =0x08432694
	movs r1, #0xa8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080A4514 @ =0x08432AE8
	ldr r1, _080A4518 @ =0x02000004
	movs r2, #2
	bl sub_080A5E18
	movs r0, #0xf
	bl EnableBgSync
	mov r0, r8
	adds r0, #0x29
	movs r4, #0
	strb r4, [r0]
	ldr r2, _080A451C @ =gDispIo
	adds r3, r2, #0
	adds r3, #0x34
	movs r0, #0x20
	ldrb r1, [r3]
	orrs r1, r0
	strb r1, [r3]
	adds r2, #0x35
	ldrb r1, [r2]
	orrs r0, r1
	strb r0, [r2]
	ldr r0, _080A4520 @ =0x0842FF00
	ldr r1, _080A4524 @ =0x06010800
	bl sub_08013688
	mov r0, r8
	adds r0, #0x36
	strb r4, [r0]
	mov r1, r8
	adds r1, #0x2d
	movs r0, #0xff
	strb r0, [r1]
	mov r0, r8
	adds r0, #0x3d
	strb r4, [r0]
	bl sub_080A6C74
	movs r7, #0
	ldr r2, _080A4528 @ =gSinLut
	mov sl, r2
	mov sb, r5
_080A43D2:
	ldr r1, _080A452C @ =0x080C0F18
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	mov r1, sl
	movs r2, #0
	ldrsh r0, [r1, r2]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	mov r1, sl
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	ldr r1, _080A452C @ =0x080C0F18
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	adds r0, r7, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	adds r7, #1
	cmp r7, #3
	ble _080A43D2
	mov r1, r8
	adds r1, #0x44
	movs r2, #0
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r1]
	subs r1, #5
	movs r0, #0xff
	strb r0, [r1]
	mov r0, r8
	adds r0, #0x3e
	strb r2, [r0]
	adds r0, #2
	strb r2, [r0]
	ldr r1, _080A4530 @ =gAnims
	movs r0, #0x64
	strb r0, [r1]
	ldr r1, _080A4534 @ =0x02000001
	movs r0, #0xa
	strb r0, [r1]
	ldr r0, _080A4538 @ =sub_080A3F48
	bl SetOnHBlankA
	ldr r4, _080A453C @ =0x0842DD14
	movs r0, #2
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl sub_08013688
	ldr r0, _080A4540 @ =gBg3Tm
	ldr r1, _080A4544 @ =0x0842FD94
	movs r2, #0
	movs r3, #5
	bl sub_08001F14
	movs r0, #8
	bl EnableBgSync
	movs r7, #0
	mov r4, r8
	adds r4, #0x2c
_080A4492:
	lsls r0, r7, #0x18
	lsrs r0, r0, #0x18
	mov r1, r8
	bl sub_080A7058
	adds r7, #1
	cmp r7, #3
	ble _080A4492
	ldrb r0, [r4]
	bl sub_080A715C
	bl sub_080A6BB0
	movs r0, #2
	bl EnableBgSync
	ldr r2, _080A451C @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	ldr r1, _080A4548 @ =gPal
	movs r0, #0
	strh r0, [r1]
	bl EnablePalSync
	mov r0, r8
	bl sub_080A4254
	mov r0, r8
	bl sub_080A6908
	mov r2, r8
	str r0, [r2, #0x58]
	mov r0, r8
	bl sub_080A69A0
	mov r1, r8
	str r0, [r1, #0x5c]
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A44FC: .4byte 0x0842D800
_080A4500: .4byte 0x08439BF0
_080A4504: .4byte gBg0Tm
_080A4508: .4byte 0x0842D860
_080A450C: .4byte 0x08432594
_080A4510: .4byte 0x08432694
_080A4514: .4byte 0x08432AE8
_080A4518: .4byte 0x02000004
_080A451C: .4byte gDispIo
_080A4520: .4byte 0x0842FF00
_080A4524: .4byte 0x06010800
_080A4528: .4byte gSinLut
_080A452C: .4byte 0x080C0F18
_080A4530: .4byte gAnims
_080A4534: .4byte 0x02000001
_080A4538: .4byte sub_080A3F48
_080A453C: .4byte 0x0842DD14
_080A4540: .4byte gBg3Tm
_080A4544: .4byte 0x0842FD94
_080A4548: .4byte gPal

	thumb_func_start sub_080A454C
sub_080A454C: @ 0x080A454C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, _080A457C @ =0x0843165C
	ldr r1, _080A4580 @ =0x06013800
	bl sub_08013688
	adds r0, r5, #0
	bl sub_080A6CD0
	adds r6, r5, #0
	adds r6, #0x42
	ldrh r0, [r6]
	cmp r0, #0x20
	bne _080A4584
	movs r0, #0x20
	adds r1, r5, #0
	bl sub_080A72F4
	adds r1, r5, #0
	adds r1, #0x2b
	strb r0, [r1]
	adds r4, r5, #0
	adds r4, #0x2e
	b _080A45B2
	.align 2, 0
_080A457C: .4byte 0x0843165C
_080A4580: .4byte 0x06013800
_080A4584:
	adds r4, r5, #0
	adds r4, #0x2e
	movs r1, #0
	movs r0, #2
	strb r0, [r4]
	adds r0, r5, #0
	adds r0, #0x2c
	strb r1, [r0]
	adds r2, r5, #0
	adds r2, #0x2b
	strb r1, [r2]
	adds r0, #8
	strb r1, [r0]
	adds r0, #0x12
	strh r1, [r0]
	subs r0, #0x16
	ldrb r0, [r0]
	ldrb r1, [r2]
	bl sub_080A3FE0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	strh r0, [r6]
_080A45B2:
	ldrb r0, [r4]
	cmp r0, #2
	bne _080A45C0
	adds r1, r5, #0
	adds r1, #0x2f
	movs r0, #0
	strb r0, [r1]
_080A45C0:
	ldrb r4, [r4]
	cmp r4, #5
	bne _080A45CE
	adds r1, r5, #0
	adds r1, #0x2f
	movs r0, #0xdc
	strb r0, [r1]
_080A45CE:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_080A45D4
sub_080A45D4: @ 0x080A45D4
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r4, #0
	movs r0, #5
	strb r0, [r1]
	bl sub_080A0F80
	adds r1, r5, #0
	adds r1, #0x2c
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x2b
	strb r4, [r0]
	adds r0, #9
	strb r4, [r0]
	adds r0, #0x12
	movs r2, #0
	strh r4, [r0]
	subs r0, #0x16
	movs r1, #0x40
	strb r1, [r0]
	adds r0, #0x12
	strh r1, [r0]
	subs r0, #0x11
	strb r2, [r0]
	adds r1, r5, #0
	adds r1, #0x2f
	movs r0, #0xdc
	strb r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080A4618
sub_080A4618: @ 0x080A4618
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r4, #0
	movs r0, #5
	strb r0, [r1]
	bl sub_080A0F80
	adds r1, r5, #0
	adds r1, #0x2c
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x2b
	strb r4, [r0]
	adds r0, #9
	strb r4, [r0]
	adds r0, #0x12
	movs r2, #0
	strh r4, [r0]
	subs r0, #0x16
	movs r1, #0x80
	strb r1, [r0]
	adds r0, #0x12
	strh r1, [r0]
	subs r0, #0x11
	strb r2, [r0]
	adds r1, r5, #0
	adds r1, #0x2f
	movs r0, #0xdc
	strb r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080A465C
sub_080A465C: @ 0x080A465C
	push {lr}
	adds r1, r0, #0
	adds r1, #0x2e
	ldrb r1, [r1]
	bl Proc_Goto
	pop {r0}
	bx r0

	thumb_func_start sub_080A466C
sub_080A466C: @ 0x080A466C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #2
	strb r0, [r1]
	ldr r0, _080A469C @ =gpKeySt
	ldr r3, [r0]
	ldrh r1, [r3, #6]
	movs r2, #0x40
	adds r0, r2, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	beq _080A46B4
	adds r1, r5, #0
	adds r1, #0x2b
	ldrb r0, [r1]
	cmp r0, #0
	beq _080A46A0
	subs r0, #1
	b _080A46D2
	.align 2, 0
_080A469C: .4byte gpKeySt
_080A46A0:
	adds r0, r2, #0
	ldrh r3, [r3, #8]
	ands r0, r3
	cmp r0, #0
	beq _080A470E
	adds r0, r5, #0
	adds r0, #0x31
	ldrb r0, [r0]
	subs r0, #1
	b _080A46D2
_080A46B4:
	movs r6, #0x80
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _080A470E
	adds r1, r5, #0
	adds r1, #0x2b
	ldrb r2, [r1]
	adds r0, r5, #0
	adds r0, #0x31
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	bge _080A46F0
	adds r0, r2, #1
_080A46D2:
	strb r0, [r1]
	ldr r0, _080A46E8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A470E
	ldr r0, _080A46EC @ =0x00000386
	bl m4aSongNumStart
	b _080A470E
	.align 2, 0
_080A46E8: .4byte gPlaySt
_080A46EC: .4byte 0x00000386
_080A46F0:
	adds r0, r6, #0
	ldrh r3, [r3, #8]
	ands r0, r3
	cmp r0, #0
	beq _080A470E
	strb r4, [r1]
	ldr r0, _080A4768 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A470E
	ldr r0, _080A476C @ =0x00000386
	bl m4aSongNumStart
_080A470E:
	ldr r0, _080A4770 @ =gpKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _080A471E
	b _080A48B0
_080A471E:
	adds r0, r5, #0
	adds r0, #0x30
	ldrb r0, [r0]
	adds r1, r5, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	bl sub_080A3FE0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r5, #0
	adds r4, #0x42
	strh r0, [r4]
	ldr r0, _080A4768 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A474A
	ldr r0, _080A4774 @ =0x0000038A
	bl m4aSongNumStart
_080A474A:
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	ldrh r0, [r4]
	subs r0, #1
	cmp r0, #0x1f
	bls _080A475C
	b _080A48DC
_080A475C:
	lsls r0, r0, #2
	ldr r1, _080A4778 @ =_080A477C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080A4768: .4byte gPlaySt
_080A476C: .4byte 0x00000386
_080A4770: .4byte gpKeySt
_080A4774: .4byte 0x0000038A
_080A4778: .4byte _080A477C
_080A477C: @ jump table
	.4byte _080A47FC @ case 0
	.4byte _080A4808 @ case 1
	.4byte _080A48DC @ case 2
	.4byte _080A4820 @ case 3
	.4byte _080A48DC @ case 4
	.4byte _080A48DC @ case 5
	.4byte _080A48DC @ case 6
	.4byte _080A4838 @ case 7
	.4byte _080A48DC @ case 8
	.4byte _080A48DC @ case 9
	.4byte _080A48DC @ case 10
	.4byte _080A48DC @ case 11
	.4byte _080A48DC @ case 12
	.4byte _080A48DC @ case 13
	.4byte _080A48DC @ case 14
	.4byte _080A4850 @ case 15
	.4byte _080A48DC @ case 16
	.4byte _080A48DC @ case 17
	.4byte _080A48DC @ case 18
	.4byte _080A48DC @ case 19
	.4byte _080A48DC @ case 20
	.4byte _080A48DC @ case 21
	.4byte _080A48DC @ case 22
	.4byte _080A48DC @ case 23
	.4byte _080A48DC @ case 24
	.4byte _080A48DC @ case 25
	.4byte _080A48DC @ case 26
	.4byte _080A48DC @ case 27
	.4byte _080A48DC @ case 28
	.4byte _080A48DC @ case 29
	.4byte _080A48DC @ case 30
	.4byte _080A4892 @ case 31
_080A47FC:
	adds r0, r5, #0
	adds r0, #0x3f
	ldrb r1, [r0]
	subs r0, #0x13
	strb r1, [r0]
	b _080A4870
_080A4808:
	bl sub_080A0F80
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r1, #1
	movs r2, #1
	bl sub_080A6DD4
	adds r1, r5, #0
	adds r1, #0x2c
	strb r0, [r1]
	b _080A4870
_080A4820:
	bl sub_080A0F80
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r1, #1
	movs r2, #1
	bl sub_080A6DD4
	adds r1, r5, #0
	adds r1, #0x2c
	strb r0, [r1]
	b _080A4870
_080A4838:
	bl sub_080A0F80
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r1, #1
	movs r2, #1
	bl sub_080A6DD4
	adds r1, r5, #0
	adds r1, #0x2c
	strb r0, [r1]
	b _080A4870
_080A4850:
	adds r4, r5, #0
	adds r4, #0x2c
	ldrb r0, [r4]
	movs r1, #0
	movs r2, #1
	bl sub_080A6DD4
	strb r0, [r4]
	bl sub_0809F40C
	cmp r0, #0
	bne _080A487A
	movs r0, #0
	movs r1, #0
	bl sub_080A5B20
_080A4870:
	adds r0, r5, #0
	movs r1, #3
	bl Proc_Goto
	b _080A48DC
_080A487A:
	adds r0, r5, #0
	movs r1, #1
	bl Proc_Goto
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0xc0
	movs r2, #0x10
	movs r3, #0
	bl StartBgmVolumeChange
	b _080A48DC
_080A4892:
	adds r1, r5, #0
	adds r1, #0x34
	adds r0, r5, #0
	adds r0, #0x33
	ldrb r2, [r1]
	ldrb r0, [r0]
	cmp r2, r0
	blo _080A48A6
	movs r0, #0
	strb r0, [r1]
_080A48A6:
	adds r0, r5, #0
	movs r1, #8
	bl Proc_Goto
	b _080A48DC
_080A48B0:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080A48DC
	ldr r0, _080A48E4 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A48CA
	ldr r0, _080A48E8 @ =0x0000038B
	bl m4aSongNumStart
_080A48CA:
	adds r0, r5, #0
	movs r1, #0x12
	bl Proc_Goto
	adds r1, r5, #0
	adds r1, #0x42
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r1]
_080A48DC:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A48E4: .4byte gPlaySt
_080A48E8: .4byte 0x0000038B

	thumb_func_start sub_080A48EC
sub_080A48EC: @ 0x080A48EC
	push {r4, lr}
	adds r3, r0, #0
	adds r1, r3, #0
	adds r1, #0x3d
	ldrb r4, [r1]
	rsbs r0, r4, #0
	orrs r0, r4
	lsrs r1, r0, #0x1f
	adds r0, r3, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	bne _080A4908
	movs r2, #1
_080A4908:
	cmp r0, #1
	bne _080A490E
	movs r2, #2
_080A490E:
	cmp r0, #2
	bne _080A4914
	movs r2, #3
_080A4914:
	adds r0, r3, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	bl sub_080A1050
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080A4924
sub_080A4924: @ 0x080A4924
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x36
	ldrb r1, [r5]
	cmp r1, #0
	bne _080A49D4
	ldr r0, _080A495C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A4944
	ldr r0, _080A4960 @ =0x0000038A
	bl m4aSongNumStart
_080A4944:
	adds r0, r4, #0
	adds r0, #0x42
	ldrh r0, [r0]
	cmp r0, #8
	beq _080A49AA
	cmp r0, #8
	bgt _080A4964
	cmp r0, #2
	beq _080A49BC
	cmp r0, #4
	beq _080A4978
	b _080A49CC
	.align 2, 0
_080A495C: .4byte gPlaySt
_080A4960: .4byte 0x0000038A
_080A4964:
	cmp r0, #0x20
	beq _080A49BC
	cmp r0, #0x20
	bgt _080A4972
	cmp r0, #0x10
	beq _080A49BC
	b _080A49CC
_080A4972:
	cmp r0, #0x40
	beq _080A49AE
	b _080A49CC
_080A4978:
	adds r1, r4, #0
	adds r1, #0x2d
	ldrb r0, [r1]
	cmp r0, #0xff
	bne _080A4994
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #1
	bl sub_080A6E44
	b _080A4B00
_080A4994:
	ldrb r0, [r1]
	adds r1, r4, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	bl sub_080A0FE8
	adds r0, r4, #0
	movs r1, #6
	bl Proc_Goto
	b _080A4B00
_080A49AA:
	movs r0, #2
	b _080A49B0
_080A49AE:
	movs r0, #1
_080A49B0:
	strb r0, [r5]
	adds r0, r4, #0
	movs r1, #1
	bl sub_080A6C3C
	b _080A49CC
_080A49BC:
	adds r1, r4, #0
	adds r1, #0x36
	movs r0, #2
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #1
	bl sub_080A6C3C
_080A49CC:
	adds r0, r4, #0
	bl sub_080A4078
	b _080A4B00
_080A49D4:
	adds r5, r4, #0
	adds r5, #0x42
	ldrh r0, [r5]
	cmp r0, #0x10
	beq _080A4A40
	cmp r0, #0x10
	bgt _080A49EC
	cmp r0, #2
	beq _080A4A12
	cmp r0, #8
	beq _080A4A4C
	b _080A4AF2
_080A49EC:
	cmp r0, #0x20
	beq _080A49F6
	cmp r0, #0x40
	beq _080A4A9C
	b _080A4AF2
_080A49F6:
	cmp r1, #1
	bne _080A4A80
	adds r1, r4, #0
	adds r1, #0x44
	movs r0, #0xf0
	strh r0, [r1]
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	bl ReadGameSave
	adds r0, r4, #0
	movs r1, #0xe
	b _080A4A5E
_080A4A12:
	cmp r1, #1
	bne _080A4A80
	adds r1, r4, #0
	adds r1, #0x44
	movs r0, #0xf0
	strh r0, [r1]
	ldr r0, _080A4A38 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A4A30
	ldr r0, _080A4A3C @ =0x0000038A
	bl m4aSongNumStart
_080A4A30:
	adds r0, r4, #0
	bl sub_080A3FC8
	b _080A4AF2
	.align 2, 0
_080A4A38: .4byte gPlaySt
_080A4A3C: .4byte 0x0000038A
_080A4A40:
	cmp r1, #1
	bne _080A4A80
	adds r0, r4, #0
	bl sub_080A48EC
	b _080A4AAA
_080A4A4C:
	cmp r1, #1
	bne _080A4A80
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	bl sub_080A0FA8
	adds r0, r4, #0
	movs r1, #6
_080A4A5E:
	bl Proc_Goto
	ldr r0, _080A4A78 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A4AF2
	ldr r0, _080A4A7C @ =0x0000038A
	bl m4aSongNumStart
	b _080A4AF2
	.align 2, 0
_080A4A78: .4byte gPlaySt
_080A4A7C: .4byte 0x0000038A
_080A4A80:
	ldr r0, _080A4A94 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A4AF2
	ldr r0, _080A4A98 @ =0x0000038B
	bl m4aSongNumStart
	b _080A4AF2
	.align 2, 0
_080A4A94: .4byte gPlaySt
_080A4A98: .4byte 0x0000038B
_080A4A9C:
	cmp r1, #1
	bne _080A4ACC
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	bl WriteGameSave
_080A4AAA:
	adds r0, r4, #0
	movs r1, #6
	bl Proc_Goto
	ldr r0, _080A4AC8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A4AF2
	movs r0, #0xe0
	lsls r0, r0, #2
	bl m4aSongNumStart
	b _080A4AF2
	.align 2, 0
_080A4AC8: .4byte gPlaySt
_080A4ACC:
	adds r0, r4, #0
	movs r1, #0x11
	bl Proc_Goto
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ldrh r1, [r5]
	orrs r0, r1
	strh r0, [r5]
	ldr r0, _080A4B08 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A4AF2
	ldr r0, _080A4B0C @ =0x0000038B
	bl m4aSongNumStart
_080A4AF2:
	adds r0, r4, #0
	movs r1, #0
	bl sub_080A6C3C
	adds r0, r4, #0
	bl sub_080A4078
_080A4B00:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A4B08: .4byte gPlaySt
_080A4B0C: .4byte 0x0000038B

	thumb_func_start sub_080A4B10
sub_080A4B10: @ 0x080A4B10
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #5
	strb r0, [r1]
	adds r0, r5, #0
	bl sub_080A419C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A4B2A
	b _080A4D5C
_080A4B2A:
	adds r0, r5, #0
	adds r0, #0x36
	ldrb r1, [r0]
	adds r4, r0, #0
	cmp r1, #0
	bne _080A4B84
	ldr r0, _080A4B4C @ =gpKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080A4B50
	movs r1, #1
	rsbs r1, r1, #0
	adds r0, r5, #0
	b _080A4B5C
	.align 2, 0
_080A4B4C: .4byte gpKeySt
_080A4B50:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _080A4BE8
	adds r0, r5, #0
	movs r1, #1
_080A4B5C:
	bl sub_080A6E44
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A4BE8
	ldr r0, _080A4B7C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A4BE8
	ldr r0, _080A4B80 @ =0x00000386
	bl m4aSongNumStart
	b _080A4BE8
	.align 2, 0
_080A4B7C: .4byte gPlaySt
_080A4B80: .4byte 0x00000386
_080A4B84:
	ldr r0, _080A4BB4 @ =gpKeySt
	ldr r0, [r0]
	ldrh r2, [r0, #8]
	movs r0, #0x20
	ands r0, r2
	cmp r0, #0
	beq _080A4BC0
	cmp r1, #1
	beq _080A4BE8
	movs r0, #1
	strb r0, [r4]
	ldr r0, _080A4BB8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A4BAC
	ldr r0, _080A4BBC @ =0x00000387
	bl m4aSongNumStart
_080A4BAC:
	adds r0, r5, #0
	bl sub_080A4078
	b _080A4BE8
	.align 2, 0
_080A4BB4: .4byte gpKeySt
_080A4BB8: .4byte gPlaySt
_080A4BBC: .4byte 0x00000387
_080A4BC0:
	movs r0, #0x10
	ands r0, r2
	cmp r0, #0
	beq _080A4BE8
	cmp r1, #2
	beq _080A4BE8
	movs r0, #2
	strb r0, [r4]
	ldr r0, _080A4C1C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A4BE2
	ldr r0, _080A4C20 @ =0x00000387
	bl m4aSongNumStart
_080A4BE2:
	adds r0, r5, #0
	bl sub_080A4078
_080A4BE8:
	ldr r0, _080A4C24 @ =gpKeySt
	ldr r0, [r0]
	ldrh r2, [r0, #8]
	movs r1, #1
	ands r1, r2
	cmp r1, #0
	beq _080A4CD8
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x42
	ldrh r0, [r0]
	cmp r0, #8
	beq _080A4CA0
	cmp r0, #8
	bgt _080A4C2E
	cmp r0, #2
	beq _080A4C42
	cmp r0, #2
	bgt _080A4C28
	cmp r0, #1
	beq _080A4C60
	b _080A4D5C
	.align 2, 0
_080A4C1C: .4byte gPlaySt
_080A4C20: .4byte 0x00000387
_080A4C24: .4byte gpKeySt
_080A4C28:
	cmp r0, #4
	beq _080A4CA0
	b _080A4D5C
_080A4C2E:
	cmp r0, #0x40
	beq _080A4CA0
	cmp r0, #0x40
	bgt _080A4C3C
	cmp r0, #0x10
	beq _080A4C84
	b _080A4D5C
_080A4C3C:
	cmp r0, #0x80
	beq _080A4C4E
	b _080A4D5C
_080A4C42:
	adds r0, r5, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0xff
	bne _080A4CA0
	b _080A4C60
_080A4C4E:
	adds r0, r5, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0xff
	beq _080A4C60
	adds r1, r5, #0
	adds r1, #0x44
	movs r0, #0xf0
	strh r0, [r1]
_080A4C60:
	ldr r0, _080A4C7C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A4C72
	ldr r0, _080A4C80 @ =0x0000038A
	bl m4aSongNumStart
_080A4C72:
	adds r0, r5, #0
	bl sub_080A3FC8
	b _080A4D5C
	.align 2, 0
_080A4C7C: .4byte gPlaySt
_080A4C80: .4byte 0x0000038A
_080A4C84:
	adds r0, r5, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0xff
	beq _080A4CB0
	ldr r0, _080A4CA8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A4CA0
	ldr r0, _080A4CAC @ =0x0000038A
	bl m4aSongNumStart
_080A4CA0:
	adds r0, r5, #0
	bl sub_080A4924
	b _080A4D5C
	.align 2, 0
_080A4CA8: .4byte gPlaySt
_080A4CAC: .4byte 0x0000038A
_080A4CB0:
	adds r0, r5, #0
	bl sub_080A48EC
	adds r0, r5, #0
	movs r1, #6
	bl Proc_Goto
	ldr r0, _080A4CD4 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A4D5C
	movs r0, #0xe0
	lsls r0, r0, #2
	bl m4aSongNumStart
	b _080A4D5C
	.align 2, 0
_080A4CD4: .4byte gPlaySt
_080A4CD8:
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _080A4D5C
	adds r0, r5, #0
	adds r0, #0x29
	strb r1, [r0]
	ldr r0, _080A4D10 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A4CF8
	ldr r0, _080A4D14 @ =0x0000038B
	bl m4aSongNumStart
_080A4CF8:
	ldrb r0, [r4]
	cmp r0, #0
	beq _080A4D18
	adds r0, r5, #0
	movs r1, #0
	bl sub_080A6C3C
	adds r0, r5, #0
	bl sub_080A4078
	b _080A4D5C
	.align 2, 0
_080A4D10: .4byte gPlaySt
_080A4D14: .4byte 0x0000038B
_080A4D18:
	adds r2, r5, #0
	adds r2, #0x2d
	ldrb r1, [r2]
	adds r0, r1, #0
	cmp r0, #0xff
	beq _080A4D30
	adds r0, r5, #0
	adds r0, #0x2c
	strb r1, [r0]
	movs r0, #0xff
	strb r0, [r2]
	b _080A4D5C
_080A4D30:
	adds r4, r5, #0
	adds r4, #0x42
	movs r0, #0xc0
	ldrh r1, [r4]
	ands r0, r1
	cmp r0, #0
	beq _080A4D54
	adds r0, r5, #0
	movs r1, #0x11
	bl Proc_Goto
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ldrh r1, [r4]
	orrs r0, r1
	strh r0, [r4]
	b _080A4D5C
_080A4D54:
	adds r0, r5, #0
	movs r1, #4
	bl Proc_Goto
_080A4D5C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A4D64
sub_080A4D64: @ 0x080A4D64
	push {lr}
	bl sub_080A4924
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A4D70
sub_080A4D70: @ 0x080A4D70
	adds r3, r0, #0
	adds r3, #0x2e
	movs r2, #0
	movs r1, #6
	strb r1, [r3]
	adds r0, #0x29
	strb r2, [r0]
	bx lr

	thumb_func_start sub_080A4D80
sub_080A4D80: @ 0x080A4D80
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	adds r3, r7, #0
	adds r3, #0x29
	ldrb r0, [r3]
	cmp r0, #8
	bne _080A4DF8
	adds r4, r7, #0
	adds r4, #0x2c
	ldrb r0, [r4]
	adds r1, r7, #0
	bl sub_080A7058
	movs r0, #4
	adds r1, r7, #0
	bl sub_080A7058
	ldrb r1, [r4]
	adds r0, r7, #0
	adds r0, #0x37
	adds r2, r0, r1
	ldrb r0, [r2]
	cmp r0, #0xff
	beq _080A4DD4
	lsls r0, r1, #0xb
	movs r1, #0xb4
	lsls r1, r1, #9
	adds r0, r0, r1
	ldr r1, _080A4DD0 @ =0x0001FFFF
	ands r0, r1
	lsrs r0, r0, #5
	ldrb r1, [r2]
	bl sub_08082E2C
	b _080A4DEA
	.align 2, 0
_080A4DD0: .4byte 0x0001FFFF
_080A4DD4:
	lsls r0, r1, #0xb
	movs r2, #0xb4
	lsls r2, r2, #9
	adds r0, r0, r2
	ldr r1, _080A4DF4 @ =0x0001FFFF
	ands r0, r1
	lsrs r0, r0, #5
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_08082E2C
_080A4DEA:
	ldrb r0, [r4]
	bl sub_080A715C
	b _080A4EC0
	.align 2, 0
_080A4DF4: .4byte 0x0001FFFF
_080A4DF8:
	cmp r0, #0x20
	bne _080A4E6E
	adds r0, r7, #0
	bl sub_080A6CD0
	adds r0, r7, #0
	adds r0, #0x42
	ldrh r0, [r0]
	cmp r0, #0x10
	bne _080A4E22
	adds r0, r7, #0
	movs r1, #0x12
	bl Proc_Goto
	movs r0, #0xc0
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl StartBgmVolumeChange
	b _080A4EC0
_080A4E22:
	cmp r0, #0x40
	bne _080A4E30
	adds r0, r7, #0
	movs r1, #0x11
	bl Proc_Goto
	b _080A4EC0
_080A4E30:
	adds r0, r7, #0
	bl sub_080A6EE0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A4EC0
	adds r2, r7, #0
	adds r2, #0x2d
	ldrb r1, [r2]
	adds r0, r1, #0
	cmp r0, #0xff
	beq _080A4E54
	adds r0, r7, #0
	adds r0, #0x2c
	strb r1, [r0]
	movs r0, #0xff
	strb r0, [r2]
	b _080A4E64
_080A4E54:
	adds r4, r7, #0
	adds r4, #0x2c
	ldrb r0, [r4]
	movs r1, #1
	movs r2, #1
	bl sub_080A6DD4
	strb r0, [r4]
_080A4E64:
	adds r0, r7, #0
	movs r1, #5
	bl Proc_Goto
	b _080A4EC0
_080A4E6E:
	cmp r0, #0x30
	bne _080A4EC0
	adds r0, r7, #0
	adds r0, #0x2c
	movs r1, #0
	strb r1, [r0]
	adds r2, r7, #0
	adds r2, #0x2d
	movs r0, #0xff
	strb r0, [r2]
	strb r1, [r3]
	adds r0, r7, #0
	adds r0, #0x2b
	strb r1, [r0]
	adds r0, #5
	ldrb r0, [r0]
	bl sub_080A3FE0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r7, #0
	adds r1, #0x42
	strh r0, [r1]
	ldr r0, _080A4EB8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A4EAE
	ldr r0, _080A4EBC @ =0x0000038B
	bl m4aSongNumStart
_080A4EAE:
	adds r0, r7, #0
	movs r1, #4
	bl Proc_Goto
	b _080A5044
	.align 2, 0
_080A4EB8: .4byte gPlaySt
_080A4EBC: .4byte 0x0000038B
_080A4EC0:
	adds r0, r7, #0
	adds r0, #0x29
	ldrb r1, [r0]
	mov sl, r0
	cmp r1, #0x10
	bne _080A4F38
	ldr r4, _080A4F34 @ =gSinLut
	movs r3, #0x80
	adds r3, r3, r4
	mov sb, r3
	movs r1, #0
	ldrsh r0, [r3, r1]
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov r8, r2
	mov r1, r8
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r3, #0
	ldrsh r0, [r4, r3]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r2, sb
	movs r3, #0
	ldrsh r0, [r2, r3]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r1, r7, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	str r0, [sp]
	adds r0, r1, #0
	adds r1, r6, #0
	b _080A4FB0
	.align 2, 0
_080A4F34: .4byte gSinLut
_080A4F38:
	cmp r1, #7
	bhi _080A4FC0
	ldr r4, _080A4FBC @ =gSinLut
	movs r0, #0x80
	adds r0, r0, r4
	mov sb, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	movs r6, #0x80
	lsls r6, r6, #1
	adds r1, r6, #0
	bl Div
	mov r8, r0
	mov r2, r8
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	mov r8, r2
	movs r3, #0
	ldrsh r0, [r4, r3]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	mov r2, sl
	ldrb r2, [r2]
	lsls r1, r2, #5
	subs r1, r6, r1
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r3, #0
	ldrsh r0, [r4, r3]
	lsls r0, r0, #4
	adds r1, r6, #0
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, sb
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r3, sl
	ldrb r3, [r3]
	lsls r1, r3, #5
	subs r6, r6, r1
	adds r1, r6, #0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r1, r7, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	str r0, [sp]
	adds r0, r1, #0
	mov r1, r8
_080A4FB0:
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	b _080A503C
	.align 2, 0
_080A4FBC: .4byte gSinLut
_080A4FC0:
	cmp r1, #0xf
	bhi _080A503C
	ldr r4, _080A5054 @ =gSinLut
	movs r0, #0x80
	adds r0, r0, r4
	mov sb, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov r8, r2
	mov r1, r8
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r3, #0
	ldrsh r0, [r4, r3]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	mov r2, sl
	ldrb r2, [r2]
	lsls r1, r2, #5
	subs r1, #0xe0
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r3, #0
	ldrsh r0, [r4, r3]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, sb
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r3, sl
	ldrb r3, [r3]
	lsls r1, r3, #5
	subs r1, #0xe0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r1, r7, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	str r0, [sp]
	adds r0, r1, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
_080A503C:
	mov r1, sl
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_080A5044:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A5054: .4byte gSinLut

	thumb_func_start sub_080A5058
sub_080A5058: @ 0x080A5058
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #3
	strb r0, [r1]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	movs r0, #0xe
	ldrb r1, [r4]
	subs r0, r0, r1
	movs r1, #0xdc
	muls r1, r0, r1
	muls r0, r1, r0
	movs r1, #0xc4
	bl __divsi3
	movs r2, #0x24
	rsbs r2, r2, #0
	adds r1, r2, #0
	subs r1, r1, r0
	adds r0, r5, #0
	adds r0, #0x2f
	strb r1, [r0]
	ldrb r4, [r4]
	cmp r4, #0xe
	bne _080A509A
	adds r0, r5, #0
	bl Proc_Break
_080A509A:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080A50A0
sub_080A50A0: @ 0x080A50A0
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #4
	strb r0, [r1]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	movs r0, #0xe
	ldrb r1, [r4]
	subs r0, r0, r1
	movs r1, #0xdc
	muls r1, r0, r1
	muls r0, r1, r0
	movs r1, #0xc4
	bl __divsi3
	adds r1, r5, #0
	adds r1, #0x2f
	strb r0, [r1]
	ldrb r4, [r4]
	cmp r4, #0xe
	bne _080A50E2
	ldr r0, _080A50E8 @ =0x0843165C
	ldr r1, _080A50EC @ =0x06013800
	bl sub_08013688
	adds r0, r5, #0
	bl Proc_Break
_080A50E2:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A50E8: .4byte 0x0843165C
_080A50EC: .4byte 0x06013800

	thumb_func_start sub_080A50F0
sub_080A50F0: @ 0x080A50F0
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #8
	strb r0, [r1]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	movs r0, #0xe
	ldrb r1, [r4]
	subs r0, r0, r1
	movs r1, #0xdc
	muls r1, r0, r1
	muls r0, r1, r0
	movs r1, #0xc4
	bl __divsi3
	movs r1, #0xdc
	subs r1, r1, r0
	adds r0, r5, #0
	adds r0, #0x46
	strh r1, [r0]
	ldrb r4, [r4]
	cmp r4, #0xe
	bne _080A5130
	adds r0, r5, #0
	movs r1, #0xa
	bl Proc_Goto
_080A5130:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A5138
sub_080A5138: @ 0x080A5138
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #8
	strb r0, [r1]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	movs r0, #0xe
	ldrb r1, [r4]
	subs r0, r0, r1
	movs r1, #0xdc
	muls r1, r0, r1
	muls r0, r1, r0
	movs r1, #0xc4
	bl __divsi3
	adds r1, r5, #0
	adds r1, #0x46
	strh r0, [r1]
	ldrb r4, [r4]
	cmp r4, #0xe
	bne _080A5174
	adds r0, r5, #0
	movs r1, #2
	bl Proc_Goto
_080A5174:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A517C
sub_080A517C: @ 0x080A517C
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #0xc
	strb r0, [r1]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	movs r0, #0xe
	ldrb r1, [r4]
	subs r0, r0, r1
	movs r1, #0xdc
	muls r1, r0, r1
	muls r0, r1, r0
	movs r1, #0xc4
	bl __divsi3
	movs r2, #0xdc
	lsls r2, r2, #1
	adds r1, r2, #0
	subs r1, r1, r0
	adds r0, r5, #0
	adds r0, #0x46
	strh r1, [r0]
	adds r1, #0x24
	subs r0, #0x17
	strb r1, [r0]
	ldrb r4, [r4]
	cmp r4, #0xe
	bne _080A51C6
	adds r0, r5, #0
	movs r1, #0xb
	bl Proc_Goto
_080A51C6:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080A51CC
sub_080A51CC: @ 0x080A51CC
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #0xd
	strb r0, [r1]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	movs r0, #0xe
	ldrb r1, [r4]
	subs r0, r0, r1
	movs r1, #0xdc
	muls r1, r0, r1
	muls r0, r1, r0
	movs r1, #0xc4
	bl __divsi3
	adds r0, #0xdc
	adds r1, r5, #0
	adds r1, #0x46
	strh r0, [r1]
	adds r0, #0x24
	subs r1, #0x17
	strb r0, [r1]
	ldrb r4, [r4]
	cmp r4, #0xe
	bne _080A5210
	adds r0, r5, #0
	movs r1, #0xa
	bl Proc_Goto
_080A5210:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A5218
sub_080A5218: @ 0x080A5218
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r7, [r2]
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0xa
	strb r0, [r1]
	ldr r0, _080A525C @ =gpKeySt
	ldr r3, [r0]
	ldrh r1, [r3, #6]
	movs r6, #0x40
	adds r0, r6, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _080A5260
	ldrb r0, [r2]
	cmp r0, #0
	bne _080A5256
	adds r0, r6, #0
	ldrh r3, [r3, #8]
	ands r0, r3
	cmp r0, #0
	beq _080A528A
	adds r0, r4, #0
	adds r0, #0x33
	ldrb r0, [r0]
_080A5256:
	subs r0, #1
	strb r0, [r2]
	b _080A528A
	.align 2, 0
_080A525C: .4byte gpKeySt
_080A5260:
	movs r6, #0x80
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _080A528A
	ldrb r1, [r2]
	adds r0, r4, #0
	adds r0, #0x33
	ldrb r0, [r0]
	subs r0, #1
	cmp r1, r0
	bge _080A527E
	adds r0, r1, #1
	strb r0, [r2]
	b _080A528A
_080A527E:
	adds r0, r6, #0
	ldrh r3, [r3, #8]
	ands r0, r3
	cmp r0, #0
	beq _080A528A
	strb r5, [r2]
_080A528A:
	adds r0, r4, #0
	adds r0, #0x34
	adds r5, r0, #0
	ldrb r0, [r5]
	cmp r7, r0
	beq _080A52A8
	ldr r0, _080A52F8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A52A8
	ldr r0, _080A52FC @ =0x00000386
	bl m4aSongNumStart
_080A52A8:
	ldr r0, _080A5300 @ =gpKeySt
	ldr r0, [r0]
	ldrh r2, [r0, #8]
	movs r1, #1
	ands r1, r2
	cmp r1, #0
	beq _080A538A
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	ldrb r1, [r5]
	bl sub_080A3FE0
	adds r5, r4, #0
	adds r5, #0x35
	movs r6, #0
	strb r0, [r5]
	ldr r0, _080A52F8 @ =gPlaySt
	adds r7, r0, #0
	adds r7, #0x41
	ldrb r1, [r7]
	lsls r0, r1, #0x1e
	cmp r0, #0
	blt _080A52DE
	ldr r0, _080A5304 @ =0x0000038A
	bl m4aSongNumStart
_080A52DE:
	adds r0, r4, #0
	adds r0, #0x29
	strb r6, [r0]
	ldrb r0, [r5]
	cmp r0, #8
	beq _080A5356
	cmp r0, #8
	bgt _080A5308
	cmp r0, #2
	beq _080A534C
	cmp r0, #4
	beq _080A5360
	b _080A537A
	.align 2, 0
_080A52F8: .4byte gPlaySt
_080A52FC: .4byte 0x00000386
_080A5300: .4byte gpKeySt
_080A5304: .4byte 0x0000038A
_080A5308:
	cmp r0, #0x20
	beq _080A5310
	cmp r0, #0x40
	bne _080A537A
_080A5310:
	bl sub_080A0F80
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r1, #1
	movs r2, #1
	bl sub_080A6DD4
	adds r1, r4, #0
	adds r1, #0x2c
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #0
	bl sub_080A53C4
	ldrb r7, [r7]
	lsls r0, r7, #0x1e
	cmp r0, #0
	blt _080A533C
	ldr r0, _080A5348 @ =0x0000038A
	bl m4aSongNumStart
_080A533C:
	adds r0, r4, #0
	movs r1, #0xc
	bl Proc_Goto
	b _080A53B2
	.align 2, 0
_080A5348: .4byte 0x0000038A
_080A534C:
	str r6, [sp]
	movs r0, #0
	movs r1, #0xc0
	movs r2, #0
	b _080A536A
_080A5356:
	movs r2, #0x80
	lsls r2, r2, #1
	str r6, [sp]
	movs r0, #0x29
	b _080A5368
_080A5360:
	movs r2, #0x80
	lsls r2, r2, #1
	str r6, [sp]
	movs r0, #0x30
_080A5368:
	movs r1, #0xc0
_080A536A:
	movs r3, #0x18
	bl sub_08003FD4
	adds r0, r4, #0
	movs r1, #0xe
	bl Proc_Goto
	b _080A53B2
_080A537A:
	adds r0, r4, #0
	bl sub_080A3FC8
	adds r0, r4, #0
	movs r1, #0x12
	bl Proc_Goto
	b _080A53B2
_080A538A:
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _080A53B2
	adds r0, r4, #0
	adds r0, #0x29
	strb r1, [r0]
	adds r0, r4, #0
	movs r1, #9
	bl Proc_Goto
	ldr r0, _080A53BC @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A53B2
	ldr r0, _080A53C0 @ =0x0000038B
	bl m4aSongNumStart
_080A53B2:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A53BC: .4byte gPlaySt
_080A53C0: .4byte 0x0000038B

	thumb_func_start sub_080A53C4
sub_080A53C4: @ 0x080A53C4
	push {r4, lr}
	adds r3, r0, #0
	adds r2, r3, #0
	adds r2, #0x2c
	ldrb r4, [r2]
	cmp r4, #2
	bls _080A53D6
	movs r0, #0
	strb r0, [r2]
_080A53D6:
	cmp r1, #0
	bne _080A53DE
_080A53DA:
	movs r0, #1
	b _080A5426
_080A53DE:
	cmp r1, #0
	ble _080A53F0
	ldrb r0, [r2]
	cmp r0, #1
	bhi _080A53EC
	adds r0, #1
	b _080A53FC
_080A53EC:
	movs r0, #0
	b _080A53FC
_080A53F0:
	ldrb r0, [r2]
	cmp r0, #0
	bne _080A53FA
	movs r0, #2
	b _080A53FC
_080A53FA:
	subs r0, #1
_080A53FC:
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	cmp r4, r0
	beq _080A5424
	ldr r0, _080A541C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A53DA
	ldr r0, _080A5420 @ =0x00000386
	bl m4aSongNumStart
	b _080A53DA
	.align 2, 0
_080A541C: .4byte gPlaySt
_080A5420: .4byte 0x00000386
_080A5424:
	movs r0, #0
_080A5426:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_080A542C
sub_080A542C: @ 0x080A542C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080A545C @ =0x06013800
	movs r1, #9
	bl sub_08082F74
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	ldr r2, [r4, #0x58]
	bl sub_080827F4
	ldr r0, _080A5460 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A5456
	movs r0, #0xe4
	lsls r0, r0, #2
	bl m4aSongNumStart
_080A5456:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A545C: .4byte 0x06013800
_080A5460: .4byte gPlaySt

	thumb_func_start sub_080A5464
sub_080A5464: @ 0x080A5464
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080A5498 @ =gpKeySt
	ldr r1, [r0]
	ldr r0, _080A549C @ =0x00000103
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080A5492
	ldr r0, _080A54A0 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A5488
	ldr r0, _080A54A4 @ =0x00000391
	bl m4aSongNumStart
_080A5488:
	bl sub_080828A4
	adds r0, r4, #0
	bl Proc_Break
_080A5492:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A5498: .4byte gpKeySt
_080A549C: .4byte 0x00000103
_080A54A0: .4byte gPlaySt
_080A54A4: .4byte 0x00000391

	thumb_func_start sub_080A54A8
sub_080A54A8: @ 0x080A54A8
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r4, r2, #0
	adds r1, r3, #0
	ldr r0, _080A54C4 @ =0x08DAD354
	bl Proc_StartBlocking
	str r4, [r0, #0x58]
	str r5, [r0, #0x2c]
	str r6, [r0, #0x30]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A54C4: .4byte 0x08DAD354

	thumb_func_start sub_080A54C8
sub_080A54C8: @ 0x080A54C8
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #5
	strb r0, [r1]
	adds r3, r4, #0
	adds r3, #0x36
	ldrb r1, [r3]
	cmp r1, #0
	bne _080A550E
	ldr r0, _080A54F8 @ =gpKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080A54FC
	movs r1, #1
	rsbs r1, r1, #0
	adds r0, r4, #0
	bl sub_080A53C4
	b _080A5566
	.align 2, 0
_080A54F8: .4byte gpKeySt
_080A54FC:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _080A5566
	adds r0, r4, #0
	movs r1, #1
	bl sub_080A53C4
	b _080A5566
_080A550E:
	ldr r0, _080A5538 @ =gpKeySt
	ldr r0, [r0]
	ldrh r2, [r0, #8]
	movs r0, #0x20
	ands r0, r2
	cmp r0, #0
	beq _080A5544
	cmp r1, #1
	beq _080A5566
	movs r0, #1
	strb r0, [r3]
	ldr r0, _080A553C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A5566
	ldr r0, _080A5540 @ =0x00000387
	bl m4aSongNumStart
	b _080A5566
	.align 2, 0
_080A5538: .4byte gpKeySt
_080A553C: .4byte gPlaySt
_080A5540: .4byte 0x00000387
_080A5544:
	movs r0, #0x10
	ands r0, r2
	cmp r0, #0
	beq _080A5566
	cmp r1, #2
	beq _080A5566
	movs r0, #2
	strb r0, [r3]
	ldr r0, _080A55A8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A5566
	ldr r0, _080A55AC @ =0x00000387
	bl m4aSongNumStart
_080A5566:
	ldr r0, _080A55B0 @ =gpKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r3, #1
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _080A5628
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	cmp r0, #0x20
	beq _080A55C0
	cmp r0, #0x40
	beq _080A5586
	b _080A567A
_080A5586:
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r2, [r0]
	adds r1, r4, #0
	adds r1, #0x3a
	adds r1, r1, r2
	adds r0, r3, #0
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _080A55B4
	adds r0, r4, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0xff
	beq _080A55E0
	b _080A560C
	.align 2, 0
_080A55A8: .4byte gPlaySt
_080A55AC: .4byte 0x00000387
_080A55B0: .4byte gpKeySt
_080A55B4:
	ldr r2, _080A55BC @ =0x00000734
	movs r0, #0x40
	movs r1, #0x30
	b _080A561A
	.align 2, 0
_080A55BC: .4byte 0x00000734
_080A55C0:
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r2, [r0]
	adds r1, r4, #0
	adds r1, #0x3a
	adds r1, r1, r2
	movs r0, #2
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _080A5614
	adds r0, r4, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0xff
	bne _080A560C
_080A55E0:
	adds r0, r2, #0
	bl ReadGameSave
	adds r0, r4, #0
	movs r1, #0xe
	bl Proc_Goto
	ldr r0, _080A5604 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A567A
	ldr r0, _080A5608 @ =0x0000038A
	bl m4aSongNumStart
	b _080A567A
	.align 2, 0
_080A5604: .4byte gPlaySt
_080A5608: .4byte 0x0000038A
_080A560C:
	adds r0, r4, #0
	bl sub_080A4924
	b _080A567A
_080A5614:
	ldr r2, _080A5624 @ =0x00000733
	movs r0, #0x2e
	movs r1, #0x38
_080A561A:
	adds r3, r4, #0
	bl sub_080A54A8
	b _080A567A
	.align 2, 0
_080A5624: .4byte 0x00000733
_080A5628:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080A567A
	ldr r0, _080A565C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A5642
	ldr r0, _080A5660 @ =0x0000038B
	bl m4aSongNumStart
_080A5642:
	adds r0, r4, #0
	adds r0, #0x36
	ldrb r5, [r0]
	cmp r5, #0
	beq _080A5664
	adds r0, r4, #0
	movs r1, #0
	bl sub_080A6C3C
	adds r0, r4, #0
	bl sub_080A4078
	b _080A567A
	.align 2, 0
_080A565C: .4byte gPlaySt
_080A5660: .4byte 0x0000038B
_080A5664:
	ldr r0, _080A5680 @ =0x0843165C
	ldr r1, _080A5684 @ =0x06013800
	bl sub_08013688
	adds r0, r4, #0
	adds r0, #0x29
	strb r5, [r0]
	adds r0, r4, #0
	movs r1, #0xd
	bl Proc_Goto
_080A567A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A5680: .4byte 0x0843165C
_080A5684: .4byte 0x06013800

	thumb_func_start sub_080A5688
sub_080A5688: @ 0x080A5688
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #1
	movs r2, #2
	bl sub_080A6FF4
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080A56A0
sub_080A56A0: @ 0x080A56A0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x60]
	cmp r0, #0
	beq _080A56AE
	bl EndSpriteAnimProc
_080A56AE:
	ldr r0, [r4, #0x58]
	bl Proc_End
	ldr r0, [r4, #0x5c]
	bl Proc_End
	movs r0, #0
	bl SetOnHBlankA
	adds r5, r4, #0
	adds r5, #0x42
	ldrh r2, [r5]
	cmp r2, #0x20
	bne _080A56E8
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	cmp r0, #1
	beq _080A56E0
	cmp r0, #0x10
	bne _080A575E
	movs r0, #7
	bl sub_08013200
	b _080A575E
_080A56E0:
	movs r0, #6
	bl sub_08013200
	b _080A575E
_080A56E8:
	movs r0, #0x40
	ands r0, r2
	cmp r0, #0
	bne _080A575E
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ands r0, r2
	cmp r0, #0
	beq _080A5720
	movs r0, #0xc0
	movs r2, #0x10
	movs r3, #0
	bl StartBgmVolumeChange
	movs r0, #0x80
	ldrh r5, [r5]
	ands r0, r5
	cmp r0, #0
	beq _080A5718
	movs r0, #0xb
	bl sub_08013200
	b _080A575E
_080A5718:
	movs r0, #5
	bl sub_08013200
	b _080A575E
_080A5720:
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	beq _080A5736
	movs r0, #3
	bl ReadSuspendSave
	movs r0, #4
	bl sub_08013200
	b _080A575E
_080A5736:
	movs r0, #0x82
	ands r0, r2
	cmp r0, #0
	beq _080A5750
	adds r4, #0x2c
	ldrb r0, [r4]
	bl ReadGameSave
	ldrb r0, [r4]
	adds r0, #1
	bl sub_08013200
	b _080A575E
_080A5750:
	movs r0, #0x10
	ands r0, r2
	cmp r0, #0
	beq _080A575E
	movs r0, #0
	bl sub_08013200
_080A575E:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080A5764
sub_080A5764: @ 0x080A5764
	push {lr}
	sub sp, #4
	str r0, [sp]
	movs r0, #0
	movs r1, #0xc0
	movs r2, #0
	movs r3, #0x18
	bl sub_08003FD4
	add sp, #4
	pop {r0}
	bx r0

	thumb_func_start sub_080A577C
sub_080A577C: @ 0x080A577C
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r0, #8
	bl sub_08013200
	ldr r4, _080A57A4 @ =gPlaySt
	movs r0, #0x80
	ldrb r1, [r4, #0x14]
	orrs r0, r1
	strb r0, [r4, #0x14]
	bl sub_080A2B50
	movs r0, #0x30
	strb r0, [r4, #0xe]
	ldr r0, [r5, #0x14]
	bl Proc_End
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A57A4: .4byte gPlaySt

	thumb_func_start sub_080A57A8
sub_080A57A8: @ 0x080A57A8
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A57B8 @ =0x08DAD384
	bl Proc_StartBlocking
	pop {r0}
	bx r0
	.align 2, 0
_080A57B8: .4byte 0x08DAD384

	thumb_func_start sub_080A57BC
sub_080A57BC: @ 0x080A57BC
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x42
	movs r0, #0x20
	strh r0, [r1]
	ldr r0, [r4, #0x58]
	bl Proc_End
	ldr r0, [r4, #0x5c]
	bl Proc_End
	movs r0, #0
	bl SetOnHBlankA
	ldr r0, [r4, #0x60]
	cmp r0, #0
	beq _080A57E4
	bl EndSpriteAnimProc
_080A57E4:
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	cmp r0, #8
	beq _080A5824
	cmp r0, #8
	bgt _080A57FC
	cmp r0, #2
	beq _080A5814
	cmp r0, #4
	beq _080A581C
	b _080A582C
_080A57FC:
	cmp r0, #0x20
	beq _080A580C
	cmp r0, #0x40
	bne _080A582C
	adds r0, r4, #0
	bl sub_080A57A8
	b _080A582C
_080A580C:
	adds r0, r4, #0
	bl sub_080AEA10
	b _080A582C
_080A5814:
	adds r0, r4, #0
	bl sub_080AD190
	b _080A582C
_080A581C:
	adds r0, r4, #0
	bl sub_0809C820
	b _080A582C
_080A5824:
	ldr r0, _080A5834 @ =0x08D8D744
	adds r1, r4, #0
	bl Proc_StartBlocking
_080A582C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A5834: .4byte 0x08D8D744

	thumb_func_start sub_080A5838
sub_080A5838: @ 0x080A5838
	push {lr}
	adds r1, r0, #0
	adds r1, #0x35
	ldrb r1, [r1]
	cmp r1, #4
	beq _080A585E
	cmp r1, #4
	bgt _080A584E
	cmp r1, #2
	beq _080A585E
	b _080A5864
_080A584E:
	cmp r1, #8
	beq _080A585E
	cmp r1, #0x20
	bne _080A5864
	movs r1, #0xb
	bl Proc_Goto
	b _080A5864
_080A585E:
	movs r1, #0xa
	bl Proc_Goto
_080A5864:
	pop {r0}
	bx r0

	thumb_func_start sub_080A5868
sub_080A5868: @ 0x080A5868
	adds r0, #0x29
	movs r1, #0
	strb r1, [r0]
	ldr r2, _080A58C0 @ =gDispIo
	movs r0, #0x20
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r3, r2, #0
	adds r3, #0x34
	movs r0, #1
	ldrb r1, [r3]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r3]
	adds r2, #0x36
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2]
	bx lr
	.align 2, 0
_080A58C0: .4byte gDispIo

	thumb_func_start sub_080A58C4
sub_080A58C4: @ 0x080A58C4
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, #0x29
	ldrb r4, [r0]
	adds r4, #1
	strb r4, [r0]
	movs r1, #0x10
	subs r1, r1, r4
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	muls r0, r1, r0
	cmp r0, #0
	bge _080A58E2
	adds r0, #0xff
_080A58E2:
	asrs r0, r0, #8
	movs r2, #0x50
	subs r2, r2, r0
	ldr r3, _080A591C @ =gDispIo
	adds r1, r3, #0
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	movs r0, #0x50
	subs r0, r0, r2
	adds r1, #4
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r2, #0x50
	adds r0, r3, #0
	adds r0, #0x30
	strb r2, [r0]
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x10
	bne _080A5916
	adds r0, r5, #0
	bl Proc_Break
_080A5916:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A591C: .4byte gDispIo

	thumb_func_start sub_080A5920
sub_080A5920: @ 0x080A5920
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, #0x29
	ldrb r4, [r0]
	adds r4, #1
	strb r4, [r0]
	movs r1, #0x10
	subs r1, r1, r4
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	muls r0, r1, r0
	cmp r0, #0
	bge _080A593E
	adds r0, #0xff
_080A593E:
	asrs r0, r0, #8
	movs r2, #0x50
	subs r2, r2, r0
	ldr r3, _080A597C @ =gDispIo
	adds r1, r3, #0
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x31
	strb r2, [r0]
	subs r1, #1
	movs r0, #0xf0
	strb r0, [r1]
	movs r1, #0x60
	rsbs r1, r1, #0
	adds r0, r1, #0
	subs r0, r0, r2
	adds r1, r3, #0
	adds r1, #0x30
	strb r0, [r1]
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x10
	bne _080A5976
	adds r0, r5, #0
	bl Proc_Break
_080A5976:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A597C: .4byte gDispIo

	thumb_func_start sub_080A5980
sub_080A5980: @ 0x080A5980
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, _080A5A18 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	bl sub_08005308
	bl sub_08015A0C
	ldr r0, _080A5A1C @ =0x0843165C
	ldr r1, _080A5A20 @ =0x06013800
	bl sub_08013688
	ldr r0, _080A5A24 @ =0x08432594
	movs r1, #0x88
	lsls r1, r1, #2
	movs r2, #0x80
	lsls r2, r2, #1
	bl ApplyPaletteExt
	ldr r0, _080A5A28 @ =0x0842FF00
	ldr r1, _080A5A2C @ =0x06010800
	bl sub_08013688
	ldr r0, _080A5A30 @ =gBg0Tm
	ldr r1, _080A5A34 @ =0x0842D860
	movs r2, #0
	bl TmApplyTsa_thm
	ldr r1, _080A5A38 @ =gAnims
	movs r0, #0x64
	strb r0, [r1]
	ldr r1, _080A5A3C @ =0x02000001
	movs r0, #0xa
	strb r0, [r1]
	bl sub_080A6BB0
	adds r0, r4, #0
	bl sub_080A4254
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	bl sub_080A715C
	movs r0, #0xc
	bl sub_080046E8
	movs r0, #0xd
	bl sub_080046E8
	movs r0, #3
	bl EnableBgSync
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #3
	beq _080A5A10
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #5
	strb r0, [r1]
	adds r1, #1
	movs r0, #0xdc
	strb r0, [r1]
_080A5A10:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A5A18: .4byte gBg1Tm
_080A5A1C: .4byte 0x0843165C
_080A5A20: .4byte 0x06013800
_080A5A24: .4byte 0x08432594
_080A5A28: .4byte 0x0842FF00
_080A5A2C: .4byte 0x06010800
_080A5A30: .4byte gBg0Tm
_080A5A34: .4byte 0x0842D860
_080A5A38: .4byte gAnims
_080A5A3C: .4byte 0x02000001

	thumb_func_start sub_080A5A40
sub_080A5A40: @ 0x080A5A40
	push {lr}
	adds r1, r0, #0
	adds r1, #0x2a
	ldrb r1, [r1]
	cmp r1, #3
	bne _080A5A54
	movs r1, #2
	bl Proc_Goto
	b _080A5A5A
_080A5A54:
	movs r1, #5
	bl Proc_Goto
_080A5A5A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A5A60
sub_080A5A60: @ 0x080A5A60
	push {lr}
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x42
	movs r0, #0x10
	ldrh r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _080A5A7A
	movs r0, #0xc0
	movs r1, #8
	bl sub_08082D1C
_080A5A7A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A5A80
sub_080A5A80: @ 0x080A5A80
	push {lr}
	adds r1, r0, #0
	adds r1, #0x35
	ldrb r1, [r1]
	cmp r1, #0x20
	bne _080A5A90
	bl sub_080A5E04
_080A5A90:
	pop {r0}
	bx r0

	thumb_func_start sub_080A5A94
sub_080A5A94: @ 0x080A5A94
	push {lr}
	bl sub_08082D74
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A5AA0
sub_080A5AA0: @ 0x080A5AA0
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A5AD0 @ =0x08DAD3A4
	bl Proc_StartBlocking
	adds r3, r0, #0
	adds r3, #0x42
	movs r2, #0
	movs r1, #0x80
	lsls r1, r1, #1
	strh r1, [r3]
	adds r0, #0x35
	strb r2, [r0]
	ldr r2, _080A5AD4 @ =gPlaySt
	adds r2, #0x40
	movs r0, #0x61
	rsbs r0, r0, #0
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	pop {r0}
	bx r0
	.align 2, 0
_080A5AD0: .4byte 0x08DAD3A4
_080A5AD4: .4byte gPlaySt

	thumb_func_start sub_080A5AD8
sub_080A5AD8: @ 0x080A5AD8
	push {lr}
	adds r2, r0, #0
	ldr r1, _080A5AF4 @ =gBmSt
	movs r0, #0x10
	ldrb r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	bne _080A5AF0
	adds r0, r2, #0
	movs r1, #0x14
	bl Proc_Goto
_080A5AF0:
	pop {r0}
	bx r0
	.align 2, 0
_080A5AF4: .4byte gBmSt

	thumb_func_start sub_080A5AF8
sub_080A5AF8: @ 0x080A5AF8
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A5B08 @ =0x08DAD674
	bl Proc_StartBlocking
	pop {r0}
	bx r0
	.align 2, 0
_080A5B08: .4byte 0x08DAD674

	thumb_func_start sub_080A5B0C
sub_080A5B0C: @ 0x080A5B0C
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A5B1C @ =0x08DAD784
	bl Proc_StartBlocking
	pop {r0}
	bx r0
	.align 2, 0
_080A5B1C: .4byte 0x08DAD784

	thumb_func_start sub_080A5B20
sub_080A5B20: @ 0x080A5B20
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _080A5B40 @ =0x08DAD3A4
	bl Proc_Find
	cmp r0, #0
	beq _080A5B3A
	adds r1, r0, #0
	adds r1, #0x2a
	strb r4, [r1]
	adds r0, #0x3d
	strb r5, [r0]
_080A5B3A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A5B40: .4byte 0x08DAD3A4

	thumb_func_start sub_080A5B44
sub_080A5B44: @ 0x080A5B44
	push {r4, r5, lr}
	ldr r0, _080A5C2C @ =0x08DAD33C
	bl InitBgs
	ldr r4, _080A5C30 @ =gDispIo
	movs r0, #8
	rsbs r0, r0, #0
	ldrb r1, [r4]
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	strb r0, [r4]
	movs r0, #0x3f
	ldrb r2, [r4, #0x15]
	ands r0, r2
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x21
	rsbs r1, r1, #0
	ands r0, r1
	strb r0, [r4, #0x15]
	movs r0, #3
	ldrb r1, [r4, #0xc]
	orrs r0, r1
	strb r0, [r4, #0xc]
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r4, #0x10]
	ands r0, r2
	strb r0, [r4, #0x10]
	adds r0, r1, #0
	ldrb r2, [r4, #0x14]
	ands r0, r2
	movs r2, #2
	orrs r0, r2
	strb r0, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	ands r1, r0
	orrs r1, r2
	strb r1, [r4, #0x18]
	bl MU_EndAll
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r4, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r4, #1]
	ldr r1, _080A5C34 @ =0x02000001
	movs r0, #0xa
	strb r0, [r1]
	ldr r1, _080A5C38 @ =gAnims
	movs r0, #0x64
	strb r0, [r1]
	ldr r0, _080A5C3C @ =sub_080A3F48
	bl SetOnHBlankA
	ldr r0, _080A5C40 @ =0x08432594
	movs r1, #0x88
	lsls r1, r1, #2
	movs r2, #0x80
	lsls r2, r2, #1
	bl ApplyPaletteExt
	ldr r0, _080A5C44 @ =0x0842D800
	movs r1, #0
	movs r2, #0x60
	bl ApplyPaletteExt
	ldr r4, _080A5C48 @ =0x08439BF0
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r5, #0xc0
	lsls r5, r5, #0x13
	adds r1, r1, r5
	adds r0, r4, #0
	bl sub_08013688
	ldr r0, _080A5C4C @ =gBg0Tm
	ldr r1, _080A5C50 @ =0x0842D860
	movs r2, #0
	bl TmApplyTsa_thm
	ldr r4, _080A5C54 @ =0x0842DD14
	movs r0, #2
	bl GetBgChrOffset
	adds r1, r0, #0
	adds r1, r1, r5
	adds r0, r4, #0
	bl sub_08013688
	ldr r0, _080A5C58 @ =gBg3Tm
	ldr r1, _080A5C5C @ =0x0842FD94
	movs r2, #0
	movs r3, #5
	bl sub_08001F14
	movs r0, #8
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A5C2C: .4byte 0x08DAD33C
_080A5C30: .4byte gDispIo
_080A5C34: .4byte 0x02000001
_080A5C38: .4byte gAnims
_080A5C3C: .4byte sub_080A3F48
_080A5C40: .4byte 0x08432594
_080A5C44: .4byte 0x0842D800
_080A5C48: .4byte 0x08439BF0
_080A5C4C: .4byte gBg0Tm
_080A5C50: .4byte 0x0842D860
_080A5C54: .4byte 0x0842DD14
_080A5C58: .4byte gBg3Tm
_080A5C5C: .4byte 0x0842FD94

	thumb_func_start sub_080A5C60
sub_080A5C60: @ 0x080A5C60
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r5, r0, #0
	mov r1, sp
	movs r0, #0
	strh r0, [r1]
	ldr r4, _080A5D00 @ =0x08DAD844
	ldr r1, [r4]
	ldr r2, _080A5D04 @ =0x01000142
	mov r0, sp
	bl CpuSet
	ldr r0, [r4]
	bl sub_0809FB70
	cmp r0, #0
	beq _080A5CF6
	movs r0, #0
	str r0, [r5, #0x5c]
	str r0, [r5, #0x58]
	mov r8, r4
	movs r6, #0
	movs r0, #0xfc
	mov sb, r0
	movs r7, #0x1f
_080A5C98:
	mov r1, r8
	ldr r0, [r1]
	adds r1, r0, r6
	movs r4, #3
	ldrb r2, [r1]
	ands r4, r2
	cmp r4, #1
	bne _080A5CE2
	ldrb r0, [r1, #1]
	cmp r0, #3
	bne _080A5CC2
	str r4, [r5, #0x58]
	mov r0, sb
	ldrb r2, [r1]
	ands r0, r2
	adds r0, #2
	strb r0, [r1]
	movs r0, #0
	movs r1, #0x75
	bl sub_080A0184
_080A5CC2:
	mov r1, r8
	ldr r0, [r1]
	adds r1, r0, r6
	ldrb r2, [r1, #1]
	cmp r2, #4
	bne _080A5CE2
	str r4, [r5, #0x5c]
	mov r0, sb
	ldrb r2, [r1]
	ands r0, r2
	adds r0, #2
	strb r0, [r1]
	movs r0, #0
	movs r1, #0x76
	bl sub_080A0184
_080A5CE2:
	adds r6, #0x14
	subs r7, #1
	cmp r7, #0
	bge _080A5C98
	ldr r0, [r5, #0x58]
	cmp r0, #0
	bne _080A5D08
	ldr r0, [r5, #0x5c]
	cmp r0, #0
	bne _080A5D08
_080A5CF6:
	adds r0, r5, #0
	movs r1, #0xa
	bl Proc_Goto
	b _080A5D10
	.align 2, 0
_080A5D00: .4byte 0x08DAD844
_080A5D04: .4byte 0x01000142
_080A5D08:
	ldr r0, _080A5D20 @ =0x06013800
	movs r1, #9
	bl sub_08082F74
_080A5D10:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A5D20: .4byte 0x06013800

	thumb_func_start sub_080A5D24
sub_080A5D24: @ 0x080A5D24
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x58]
	cmp r0, #0
	beq _080A5D60
	adds r1, #0x4c
	movs r0, #0
	strh r0, [r1]
	ldr r2, _080A5D54 @ =0x00000731
	movs r0, #0x40
	movs r1, #0x30
	bl sub_080827F4
	ldr r0, _080A5D58 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A5D68
	ldr r0, _080A5D5C @ =0x0000037B
	bl m4aSongNumStart
	b _080A5D68
	.align 2, 0
_080A5D54: .4byte 0x00000731
_080A5D58: .4byte gPlaySt
_080A5D5C: .4byte 0x0000037B
_080A5D60:
	adds r0, r1, #0
	movs r1, #0
	bl Proc_Goto
_080A5D68:
	pop {r0}
	bx r0

	thumb_func_start sub_080A5D6C
sub_080A5D6C: @ 0x080A5D6C
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x5c]
	cmp r0, #0
	beq _080A5DA8
	adds r1, #0x4c
	movs r0, #0
	strh r0, [r1]
	ldr r2, _080A5D9C @ =0x00000732
	movs r0, #0x40
	movs r1, #0x30
	bl sub_080827F4
	ldr r0, _080A5DA0 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A5DB0
	ldr r0, _080A5DA4 @ =0x0000037B
	bl m4aSongNumStart
	b _080A5DB0
	.align 2, 0
_080A5D9C: .4byte 0x00000732
_080A5DA0: .4byte gPlaySt
_080A5DA4: .4byte 0x0000037B
_080A5DA8:
	adds r0, r1, #0
	movs r1, #1
	bl Proc_Goto
_080A5DB0:
	pop {r0}
	bx r0

	thumb_func_start sub_080A5DB4
sub_080A5DB4: @ 0x080A5DB4
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x4c
	ldrh r2, [r1]
	movs r3, #0
	ldrsh r0, [r1, r3]
	cmp r0, #0x1e
	ble _080A5DE4
	ldr r0, _080A5DE0 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0xb
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080A5DE8
	bl sub_080828A4
	adds r0, r4, #0
	bl Proc_Break
	b _080A5DE8
	.align 2, 0
_080A5DE0: .4byte gpKeySt
_080A5DE4:
	adds r0, r2, #1
	strh r0, [r1]
_080A5DE8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A5DF0
sub_080A5DF0: @ 0x080A5DF0
	push {lr}
	ldr r0, _080A5E00 @ =0x08DAD844
	ldr r0, [r0]
	bl sub_0809FBCC
	pop {r0}
	bx r0
	.align 2, 0
_080A5E00: .4byte 0x08DAD844

	thumb_func_start sub_080A5E04
sub_080A5E04: @ 0x080A5E04
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A5E14 @ =0x08DAD848
	bl Proc_StartBlocking
	pop {r0}
	bx r0
	.align 2, 0
_080A5E14: .4byte 0x08DAD848

	thumb_func_start sub_080A5E18
sub_080A5E18: @ 0x080A5E18
	lsls r2, r2, #4
	cmp r2, #0
	ble _080A5E2E
	adds r3, r0, #0
_080A5E20:
	ldrh r0, [r3]
	strh r0, [r1]
	adds r3, #2
	adds r1, #2
	subs r2, #1
	cmp r2, #0
	bne _080A5E20
_080A5E2E:
	bx lr

	thumb_func_start sub_080A5E30
sub_080A5E30: @ 0x080A5E30
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r5, r0, #0
	movs r0, #0x3f
	ands r5, r0
	movs r1, #0x20
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _080A5E50
	movs r0, #0x1f
	ands r0, r5
	subs r5, r1, r0
_080A5E50:
	movs r0, #1
	mov ip, r0
	ldr r0, _080A5EF4 @ =0x02000004
	movs r2, #0xf8
	lsls r2, r2, #7
	mov sb, r2
	subs r6, r1, r5
	movs r7, #0xf8
	lsls r7, r7, #2
	adds r0, #0x22
	mov r8, r0
	movs r4, #0x1f
	mov sl, r4
_080A5E6A:
	mov r0, ip
	subs r0, #8
	cmp r0, #2
	bls _080A5ED4
	movs r0, #0x90
	lsls r0, r0, #1
	add r0, ip
	lsls r0, r0, #1
	ldr r1, _080A5EF8 @ =gPal
	adds r0, r0, r1
	ldrh r1, [r0]
	mov r2, r8
	ldrh r4, [r2]
	adds r0, r1, #0
	mov r2, sb
	ands r0, r2
	adds r3, r0, #0
	muls r3, r6, r3
	adds r0, r4, #0
	ands r0, r2
	muls r0, r5, r0
	adds r3, r3, r0
	asrs r3, r3, #5
	ands r3, r2
	adds r0, r1, #0
	ands r0, r7
	adds r2, r0, #0
	muls r2, r6, r2
	adds r0, r4, #0
	ands r0, r7
	muls r0, r5, r0
	adds r2, r2, r0
	asrs r2, r2, #5
	ands r2, r7
	mov r0, sl
	ands r1, r0
	muls r1, r6, r1
	ands r4, r0
	adds r0, r4, #0
	muls r0, r5, r0
	adds r1, r1, r0
	asrs r1, r1, #5
	movs r4, #0x1f
	ands r1, r4
	movs r0, #0x88
	lsls r0, r0, #1
	add r0, ip
	lsls r0, r0, #1
	ldr r4, _080A5EF8 @ =gPal
	adds r0, r0, r4
	orrs r3, r2
	orrs r1, r3
	strh r1, [r0]
_080A5ED4:
	movs r0, #2
	add r8, r0
	movs r1, #1
	add ip, r1
	mov r2, ip
	cmp r2, #0xf
	ble _080A5E6A
	bl EnablePalSync
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A5EF4: .4byte 0x02000004
_080A5EF8: .4byte gPal

	thumb_func_start sub_080A5EFC
sub_080A5EFC: @ 0x080A5EFC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	ldr r4, [r0, #0x14]
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	lsls r0, r0, #5
	movs r1, #0xdc
	bl __divsi3
	movs r1, #0x20
	subs r1, r1, r0
	lsls r1, r1, #0x18
	movs r0, #0x92
	lsls r0, r0, #0x18
	adds r1, r1, r0
	lsrs r7, r1, #0x18
	movs r1, #0x8f
	mov sb, r1
	adds r0, r4, #0
	adds r0, #0x42
	ldrh r0, [r0]
	cmp r0, #1
	bne _080A5F48
	ldr r0, [r4, #0x54]
	mov r4, sp
	adds r4, #6
	add r5, sp, #8
	add r1, sp, #4
	adds r2, r4, #0
	adds r3, r5, #0
	bl FormatTime
	b _080A5F68
_080A5F48:
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	lsls r1, r0, #2
	adds r0, r4, #0
	adds r0, #0x48
	adds r0, r0, r1
	ldr r0, [r0]
	mov r4, sp
	adds r4, #6
	add r5, sp, #8
	add r1, sp, #4
	adds r2, r4, #0
	adds r3, r5, #0
	bl FormatTime
_080A5F68:
	mov r1, sb
	adds r1, #8
	adds r2, r7, #0
	subs r2, #0xe
	ldr r3, _080A60F8 @ =0x08DAD90C
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #0xd
	bl sub_080068C4
	mov r1, sb
	adds r1, #0x10
	adds r2, r7, #0
	subs r2, #0x10
	ldr r3, _080A60FC @ =0x08DAD9D6
	movs r0, #0xc0
	lsls r0, r0, #7
	mov r8, r0
	str r0, [sp]
	movs r0, #0xd
	bl sub_080068C4
	add r0, sp, #4
	adds r6, r7, #0
	subs r6, #8
	ldrh r0, [r0]
	cmp r0, #0x63
	bls _080A5FE6
	mov r5, sb
	adds r5, #0x12
	ldr r4, _080A6100 @ =0x08DADA10
	add r0, sp, #4
	ldrh r0, [r0]
	movs r1, #0x64
	mov sl, r1
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r4
	ldr r3, [r0]
	mov r0, r8
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r6, #0
	bl sub_080068C4
	add r5, sp, #4
	adds r0, r5, #0
	ldrh r4, [r0]
	adds r0, r4, #0
	movs r1, #0x64
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r1, sl
	muls r1, r0, r1
	adds r0, r1, #0
	subs r4, r4, r0
	strh r4, [r5]
_080A5FE6:
	add r0, sp, #4
	ldrh r0, [r0]
	cmp r0, #9
	bls _080A6014
	mov r5, sb
	adds r5, #0x1a
	ldr r4, _080A6100 @ =0x08DADA10
	add r0, sp, #4
	ldrh r0, [r0]
	movs r1, #0xa
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r4
	ldr r3, [r0]
	mov r0, r8
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r6, #0
	bl sub_080068C4
_080A6014:
	mov r5, sb
	adds r5, #0x22
	ldr r4, _080A6100 @ =0x08DADA10
	add r0, sp, #4
	ldrh r0, [r0]
	movs r1, #0xa
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r4
	ldr r3, [r0]
	mov r1, r8
	str r1, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r6, #0
	bl sub_080068C4
	mov r1, sb
	adds r1, #0x2a
	subs r2, r7, #7
	ldr r3, [r4, #0x28]
	mov r0, r8
	str r0, [sp]
	movs r0, #0xd
	bl sub_080068C4
	adds r5, #0x10
	mov r1, sp
	ldrh r0, [r1, #6]
	movs r1, #0xa
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r4
	ldr r3, [r0]
	mov r0, r8
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r6, #0
	bl sub_080068C4
	adds r5, #8
	mov r1, sp
	ldrh r0, [r1, #6]
	movs r1, #0xa
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r4
	ldr r3, [r0]
	mov r0, r8
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r6, #0
	bl sub_080068C4
	mov r1, sb
	adds r1, #0x42
	adds r2, r7, #1
	ldr r4, _080A6104 @ =0x08DAD9E4
	ldr r3, [r4, #0x28]
	mov r0, r8
	str r0, [sp]
	movs r0, #0xd
	bl sub_080068C4
	adds r5, #0x10
	mov r1, sp
	ldrh r0, [r1, #8]
	movs r1, #0xa
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r4
	ldr r3, [r0]
	mov r0, r8
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	bl sub_080068C4
	adds r5, #8
	mov r1, sp
	ldrh r0, [r1, #8]
	movs r1, #0xa
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r4
	ldr r3, [r0]
	mov r0, r8
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	bl sub_080068C4
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A60F8: .4byte 0x08DAD90C
_080A60FC: .4byte 0x08DAD9D6
_080A6100: .4byte 0x08DADA10
_080A6104: .4byte 0x08DAD9E4

	thumb_func_start sub_080A6108
sub_080A6108: @ 0x080A6108
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r6, r0, #0
	movs r5, #0
	movs r7, #0
	strh r7, [r6, #0x2c]
	movs r4, #0x80
	lsls r4, r4, #1
	strh r4, [r6, #0x2e]
	adds r0, #0x3a
	strb r5, [r0]
	adds r1, r6, #0
	adds r1, #0x3b
	movs r0, #0x28
	strb r0, [r1]
	strh r7, [r6, #0x30]
	adds r0, r6, #0
	adds r0, #0x32
	strb r5, [r0]
	str r4, [sp]
	movs r0, #0
	adds r1, r4, #0
	movs r2, #0
	movs r3, #0
	bl SetObjAffine
	str r4, [sp]
	movs r0, #1
	adds r1, r4, #0
	movs r2, #0
	movs r3, #0
	bl SetObjAffine
	str r4, [sp]
	movs r0, #2
	adds r1, r4, #0
	movs r2, #0
	movs r3, #0
	bl SetObjAffine
	strh r7, [r6, #0x2a]
	adds r0, r6, #0
	bl sub_080A6B9C
	str r0, [r6, #0x34]
	adds r0, r6, #0
	adds r0, #0x39
	strb r5, [r0]
	ldr r1, [r6, #0x14]
	adds r2, r1, #0
	adds r2, #0x3f
	ldrb r0, [r2]
	cmp r0, #0xff
	bne _080A6178
	str r7, [r1, #0x60]
	b _080A6196
_080A6178:
	ldr r0, _080A61AC @ =0x08432B28
	movs r1, #0xa0
	lsls r1, r1, #1
	ldrb r2, [r2]
	lsls r2, r2, #5
	adds r2, #0x30
	movs r3, #0xb0
	lsls r3, r3, #1
	str r7, [sp]
	movs r4, #4
	str r4, [sp, #4]
	bl sub_08012AF0
	ldr r1, [r6, #0x14]
	str r0, [r1, #0x60]
_080A6196:
	ldr r0, [r6, #0x14]
	adds r0, #0x2c
	ldrb r1, [r0]
	adds r0, r6, #0
	adds r0, #0x3c
	strb r1, [r0]
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A61AC: .4byte 0x08432B28

	thumb_func_start sub_080A61B0
sub_080A61B0: @ 0x080A61B0
	push {lr}
	lsls r1, r1, #0x10
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A61DC
	ldr r2, _080A61D8 @ =gPal
	lsrs r0, r1, #0x12
	movs r1, #0xf
	ands r0, r1
	movs r1, #0xc8
	lsls r1, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r1, #0xb4
	lsls r1, r1, #2
	adds r2, r2, r1
	strh r0, [r2]
	b _080A61EA
	.align 2, 0
_080A61D8: .4byte gPal
_080A61DC:
	ldr r0, _080A61F4 @ =gPal
	ldr r2, _080A61F8 @ =0x0000033A
	adds r1, r0, r2
	ldrh r1, [r1]
	subs r2, #0x6a
	adds r0, r0, r2
	strh r1, [r0]
_080A61EA:
	bl EnablePalSync
	pop {r0}
	bx r0
	.align 2, 0
_080A61F4: .4byte gPal
_080A61F8: .4byte 0x0000033A

	thumb_func_start sub_080A61FC
sub_080A61FC: @ 0x080A61FC
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, sb
	mov r4, r8
	push {r4, r5, r6}
	sub sp, #4
	adds r6, r1, #0
	mov r8, r2
	adds r4, r3, #0
	ldr r0, [sp, #0x20]
	ldr r5, [sp, #0x24]
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r1, _080A626C @ =0x000001FF
	mov sb, r1
	adds r1, r6, #0
	mov r2, sb
	ands r1, r2
	ldr r3, _080A6270 @ =0x08DAD8A8
	movs r2, #0xf
	mov sl, r2
	ands r0, r2
	lsls r0, r0, #0xc
	str r0, [sp]
	movs r0, #4
	mov r2, r8
	bl sub_080068C4
	adds r6, #8
	mov r0, sb
	ands r6, r0
	movs r1, #8
	add r8, r1
	ldr r0, _080A6274 @ =0x08DADD50
	lsls r4, r4, #2
	adds r4, r4, r0
	ldr r3, [r4]
	mov r2, sl
	ands r5, r2
	lsls r5, r5, #0xc
	str r5, [sp]
	movs r0, #4
	adds r1, r6, #0
	mov r2, r8
	bl sub_080068C4
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A626C: .4byte 0x000001FF
_080A6270: .4byte 0x08DAD8A8
_080A6274: .4byte 0x08DADD50

	thumb_func_start sub_080A6278
sub_080A6278: @ 0x080A6278
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, sb
	mov r4, r8
	push {r4, r5, r6}
	sub sp, #4
	adds r6, r1, #0
	mov r8, r2
	adds r4, r3, #0
	ldr r0, [sp, #0x20]
	ldr r5, [sp, #0x24]
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r1, _080A62E8 @ =0x000001FF
	mov sb, r1
	adds r1, r6, #0
	mov r2, sb
	ands r1, r2
	ldr r3, _080A62EC @ =0x08DAD8A8
	movs r2, #0xf
	mov sl, r2
	ands r0, r2
	lsls r0, r0, #0xc
	str r0, [sp]
	movs r0, #4
	mov r2, r8
	bl sub_080068C4
	adds r6, #8
	mov r0, sb
	ands r6, r0
	movs r1, #8
	add r8, r1
	ldr r0, _080A62F0 @ =0x08DADD34
	lsls r4, r4, #2
	adds r4, r4, r0
	ldr r3, [r4]
	mov r2, sl
	ands r5, r2
	lsls r5, r5, #0xc
	str r5, [sp]
	movs r0, #4
	adds r1, r6, #0
	mov r2, r8
	bl sub_080068C4
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A62E8: .4byte 0x000001FF
_080A62EC: .4byte 0x08DAD8A8
_080A62F0: .4byte 0x08DADD34

	thumb_func_start sub_080A62F4
sub_080A62F4: @ 0x080A62F4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r7, r0, #0
	adds r4, r7, #0
	adds r4, #0x3c
	ldr r0, [r7, #0x14]
	adds r0, #0x2c
	ldrb r1, [r4]
	ldrb r2, [r0]
	cmp r1, r2
	beq _080A631E
	ldrb r0, [r0]
	bl sub_080A715C
	ldr r0, [r7, #0x14]
	adds r0, #0x2c
	ldrb r0, [r0]
	strb r0, [r4]
_080A631E:
	ldrh r0, [r7, #0x2a]
	ldrb r1, [r4]
	bl sub_080A71EC
	ldr r2, _080A636C @ =gPal
	ldr r3, _080A6370 @ =0x02000004
	ldrh r1, [r7, #0x2a]
	lsrs r0, r1, #2
	movs r1, #0xf
	ands r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	movs r1, #0x8d
	lsls r1, r1, #2
	adds r2, r2, r1
	strh r0, [r2]
	bl EnablePalSync
	ldr r1, [r7, #0x14]
	adds r4, r1, #0
	adds r4, #0x3f
	ldrb r3, [r4]
	adds r0, r3, #0
	cmp r0, #0xff
	beq _080A6412
	adds r5, r1, #0
	adds r5, #0x44
	ldrh r2, [r5]
	adds r1, r2, #0
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r1, r0
	beq _080A6412
	cmp r1, #0xf
	bhi _080A6374
	movs r0, #0xff
	strb r0, [r4]
	b _080A6408
	.align 2, 0
_080A636C: .4byte gPal
_080A6370: .4byte 0x02000004
_080A6374:
	ldr r0, _080A642C @ =gSinLut
	mov sb, r0
	movs r4, #0xff
	adds r0, r4, #0
	ands r0, r2
	adds r0, #0x40
	lsls r0, r0, #1
	add r0, sb
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	ldrh r1, [r5]
	bl Div
	mov r8, r0
	mov r2, r8
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	mov r8, r2
	ldr r1, [r7, #0x14]
	adds r1, #0x44
	adds r0, r4, #0
	ldrh r2, [r1]
	ands r0, r2
	lsls r0, r0, #1
	add r0, sb
	movs r2, #0
	ldrsh r0, [r0, r2]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	ldrh r1, [r1]
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	ldr r1, [r7, #0x14]
	adds r1, #0x44
	adds r0, r4, #0
	ldrh r2, [r1]
	ands r0, r2
	lsls r0, r0, #1
	add r0, sb
	movs r2, #0
	ldrsh r0, [r0, r2]
	lsls r0, r0, #4
	ldrh r1, [r1]
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	ldr r1, [r7, #0x14]
	adds r1, #0x44
	ldrh r0, [r1]
	ands r4, r0
	adds r4, #0x40
	lsls r4, r4, #1
	add r4, sb
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	ldrh r1, [r1]
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #3
	mov r1, r8
	adds r2, r6, #0
	adds r3, r5, #0
	bl SetObjAffine
_080A6408:
	ldr r0, [r7, #0x14]
	adds r0, #0x44
	ldrh r1, [r0]
	subs r1, #0x10
	strh r1, [r0]
_080A6412:
	ldrh r0, [r7, #0x2a]
	bl sub_080A5E30
	ldrh r0, [r7, #0x2a]
	adds r0, #1
	strh r0, [r7, #0x2a]
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A642C: .4byte gSinLut

	thumb_func_start sub_080A6430
sub_080A6430: @ 0x080A6430
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r1, [r4, #0x14]
	adds r1, #0x2f
	ldrb r2, [r1]
	lsls r0, r2, #1
	adds r0, r0, r2
	lsls r0, r0, #4
	movs r1, #0xdc
	bl __divsi3
	movs r1, #0xe8
	lsls r1, r1, #1
	adds r5, r0, r1
	ldr r2, _080A6498 @ =0x000001FF
	adds r0, r2, #0
	ands r5, r0
	ldr r3, _080A649C @ =0x08DAD8A8
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #0x38
	adds r2, r5, #0
	bl sub_080068C4
	ldr r1, [r4, #0x14]
	adds r0, r1, #0
	adds r0, #0x46
	ldrh r0, [r0]
	cmp r0, #0
	beq _080A64A4
	adds r0, r1, #0
	adds r0, #0x35
	ldrb r0, [r0]
	bl sub_080A4054
	adds r2, r5, #0
	adds r2, #8
	ldr r0, _080A6498 @ =0x000001FF
	ands r2, r0
	ldr r0, _080A64A0 @ =0x08DADD50
	ldr r3, [r0, #0x20]
	movs r0, #0xc0
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #0x40
	bl sub_080068C4
	b _080A64CE
	.align 2, 0
_080A6498: .4byte 0x000001FF
_080A649C: .4byte 0x08DAD8A8
_080A64A0: .4byte 0x08DADD50
_080A64A4:
	adds r0, r1, #0
	adds r0, #0x42
	ldrb r0, [r0]
	bl sub_080A4054
	lsls r0, r0, #0x18
	adds r2, r5, #0
	adds r2, #8
	ldr r1, _080A64D8 @ =0x000001FF
	ands r2, r1
	ldr r1, _080A64DC @ =0x08DADD50
	lsrs r0, r0, #0x16
	adds r0, r0, r1
	ldr r3, [r0]
	movs r0, #0xc0
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #0x40
	bl sub_080068C4
_080A64CE:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A64D8: .4byte 0x000001FF
_080A64DC: .4byte 0x08DADD50

	thumb_func_start sub_080A64E0
sub_080A64E0: @ 0x080A64E0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov r8, r0
	ldr r0, [r0, #0x14]
	adds r1, r0, #0
	adds r1, #0x42
	ldrh r2, [r1]
	adds r1, r2, #0
	cmp r1, #0xff
	bhi _080A6512
	cmp r1, #0x20
	bne _080A650C
	adds r0, #0x35
	ldrb r0, [r0]
	mov r1, r8
	adds r1, #0x33
	strb r0, [r1]
	b _080A6512
_080A650C:
	mov r0, r8
	adds r0, #0x33
	strb r2, [r0]
_080A6512:
	mov r0, r8
	ldr r2, [r0, #0x14]
	adds r0, r2, #0
	adds r0, #0x2f
	adds r1, r2, #0
	adds r1, #0x46
	ldrh r1, [r1]
	ldrb r0, [r0]
	adds r5, r1, r0
	cmp r5, #0xdb
	bgt _080A65D2
	adds r0, r2, #0
	adds r0, #0x31
	ldrb r3, [r0]
	lsls r0, r3, #1
	adds r0, r0, r3
	lsls r0, r0, #2
	movs r1, #0x44
	subs r6, r1, r0
	cmp r6, #1
	bgt _080A653E
	movs r6, #2
_080A653E:
	movs r7, #0
	cmp r7, r3
	bge _080A65AA
	adds r4, r6, #0
	movs r1, #0x38
	mov sb, r1
_080A654A:
	mov r2, r8
	ldr r0, [r2, #0x14]
	adds r0, #0x30
	ldrb r0, [r0]
	adds r1, r7, #0
	bl sub_080A3FE0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl sub_080A4054
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	mov r1, r8
	ldr r0, [r1, #0x14]
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r7, r0
	bne _080A6586
	movs r0, #1
	str r0, [sp]
	movs r0, #3
	str r0, [sp, #4]
	mov r0, r8
	mov r2, sb
	subs r1, r2, r5
	adds r2, r4, #0
	bl sub_080A61FC
	b _080A659A
_080A6586:
	movs r0, #4
	str r0, [sp]
	movs r0, #8
	str r0, [sp, #4]
	mov r0, r8
	mov r2, sb
	subs r1, r2, r5
	adds r2, r4, #0
	bl sub_080A61FC
_080A659A:
	adds r4, #0x18
	adds r7, #1
	mov r1, r8
	ldr r0, [r1, #0x14]
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r7, r0
	blt _080A654A
_080A65AA:
	mov r2, r8
	ldr r0, [r2, #0x14]
	adds r1, r0, #0
	adds r1, #0x2e
	ldrb r1, [r1]
	cmp r1, #2
	bne _080A65D2
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r2, r1, #1
	adds r2, r2, r1
	lsls r2, r2, #3
	adds r2, r6, r2
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #0
	movs r1, #0x24
	mov r3, r8
	bl sub_080A6B4C
_080A65D2:
	mov r2, r8
	ldr r0, [r2, #0x14]
	adds r1, r0, #0
	adds r1, #0x46
	ldrh r1, [r1]
	subs r1, #1
	lsls r1, r1, #0x10
	movs r2, #0xdb
	lsls r2, r2, #0x11
	adds r3, r0, #0
	cmp r1, r2
	bhi _080A66B4
	adds r1, r3, #0
	adds r1, #0x33
	ldrb r0, [r1]
	cmp r0, #7
	bne _080A65FA
	movs r5, #2
	movs r6, #0x15
	b _080A660E
_080A65FA:
	ldrb r2, [r1]
	lsls r0, r2, #1
	adds r0, r0, r2
	lsls r0, r0, #2
	movs r1, #0x44
	subs r5, r1, r0
	cmp r5, #1
	bgt _080A660C
	movs r5, #2
_080A660C:
	movs r6, #0x18
_080A660E:
	movs r7, #0
	adds r0, r3, #0
	adds r1, r0, #0
	adds r1, #0x33
	ldrb r1, [r1]
	cmp r7, r1
	bge _080A668E
	adds r4, r5, #0
_080A661E:
	adds r0, #0x32
	ldrb r0, [r0]
	adds r1, r7, #0
	bl sub_080A3FE0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl sub_080A4054
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	mov r0, r8
	ldr r1, [r0, #0x14]
	adds r0, r1, #0
	adds r0, #0x34
	ldrb r0, [r0]
	cmp r7, r0
	bne _080A6660
	adds r0, r1, #0
	adds r0, #0x46
	movs r1, #0x8a
	lsls r1, r1, #1
	ldrh r0, [r0]
	subs r1, r1, r0
	movs r0, #1
	str r0, [sp]
	movs r0, #3
	str r0, [sp, #4]
	mov r0, r8
	adds r2, r4, #0
	bl sub_080A6278
	b _080A667C
_080A6660:
	adds r0, r1, #0
	adds r0, #0x46
	movs r1, #0x8a
	lsls r1, r1, #1
	ldrh r0, [r0]
	subs r1, r1, r0
	movs r0, #4
	str r0, [sp]
	movs r0, #8
	str r0, [sp, #4]
	mov r0, r8
	adds r2, r4, #0
	bl sub_080A6278
_080A667C:
	adds r4, r4, r6
	adds r7, #1
	mov r1, r8
	ldr r0, [r1, #0x14]
	adds r1, r0, #0
	adds r1, #0x33
	ldrb r1, [r1]
	cmp r7, r1
	blt _080A661E
_080A668E:
	mov r2, r8
	ldr r0, [r2, #0x14]
	adds r1, r0, #0
	adds r1, #0x2e
	ldrb r1, [r1]
	cmp r1, #0xa
	bne _080A66B4
	adds r0, #0x34
	ldrb r0, [r0]
	adds r2, r0, #0
	muls r2, r6, r2
	adds r2, r5, r2
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #0
	movs r1, #0x24
	mov r3, r8
	bl sub_080A6B4C
_080A66B4:
	mov r1, r8
	ldr r0, [r1, #0x14]
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	bne _080A66C2
	b _080A683C
_080A66C2:
	mov r0, r8
	bl sub_080A5EFC
	mov r0, r8
	bl sub_080A6430
	movs r7, #0
	movs r2, #0xf
	mov sl, r2
	movs r0, #0xa
	mov sb, r0
_080A66D8:
	mov r1, r8
	ldr r0, [r1, #0x14]
	adds r1, r0, #0
	adds r1, #0x2e
	movs r2, #0
	ldrb r1, [r1]
	cmp r1, #6
	bne _080A66F4
	adds r0, #0x2c
	ldrb r0, [r0]
	cmp r0, r7
	bne _080A66F4
	movs r2, #0x80
	lsls r2, r2, #1
_080A66F4:
	mov r1, r8
	ldr r0, [r1, #0x14]
	adds r0, #0x2f
	movs r1, #0xe8
	ldrb r0, [r0]
	subs r1, r1, r0
	ldr r0, _080A67AC @ =0x000001FF
	ands r1, r0
	lsls r5, r7, #5
	adds r5, #0x20
	adds r5, r2, r5
	ldr r0, _080A67B0 @ =0x08DADD84
	lsls r6, r7, #2
	adds r0, r6, r0
	ldr r3, [r0]
	lsls r4, r7, #1
	mov r0, sb
	mov r2, sl
	ands r0, r2
	lsls r0, r0, #0xc
	str r0, [sp]
	movs r0, #4
	adds r2, r5, #0
	bl sub_080068C4
	mov r1, r8
	ldr r0, [r1, #0x14]
	adds r0, #0x2f
	movs r1, #0xf4
	ldrb r0, [r0]
	subs r1, r1, r0
	ldr r2, _080A67AC @ =0x000001FF
	ands r1, r2
	adds r5, #8
	ldr r0, _080A67B4 @ =0x08DADD78
	adds r6, r6, r0
	ldr r3, [r6]
	adds r4, #0xb
	mov r0, sl
	ands r4, r0
	lsls r4, r4, #0xc
	str r4, [sp]
	movs r0, #4
	adds r2, r5, #0
	bl sub_080068C4
	movs r1, #2
	add sb, r1
	adds r7, #1
	cmp r7, #2
	ble _080A66D8
	mov r0, r8
	ldr r2, [r0, #0x14]
	adds r3, r2, #0
	adds r3, #0x3f
	ldrb r0, [r3]
	cmp r0, #0xff
	beq _080A683C
	adds r1, r2, #0
	adds r1, #0x44
	movs r0, #0x80
	lsls r0, r0, #1
	ldrh r1, [r1]
	cmp r1, r0
	beq _080A67DC
	ldr r0, [r2, #0x60]
	cmp r0, #0
	beq _080A6788
	bl EndSpriteAnimProc
	mov r2, r8
	ldr r1, [r2, #0x14]
	movs r0, #0
	str r0, [r1, #0x60]
_080A6788:
	mov r0, r8
	ldr r2, [r0, #0x14]
	adds r1, r2, #0
	adds r1, #0x42
	movs r0, #1
	ldrh r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _080A67BC
	adds r0, r2, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	lsls r2, r0, #5
	adds r2, #0x1e
	ldr r3, _080A67B8 @ =0x08DAD904
	movs r0, #0
	b _080A67CC
	.align 2, 0
_080A67AC: .4byte 0x000001FF
_080A67B0: .4byte 0x08DADD84
_080A67B4: .4byte 0x08DADD78
_080A67B8: .4byte 0x08DAD904
_080A67BC:
	adds r0, r2, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	lsls r2, r0, #5
	adds r2, #0x1e
	ldr r3, _080A67D8 @ =0x08DAD904
	movs r0, #0xc0
	lsls r0, r0, #7
_080A67CC:
	str r0, [sp]
	movs r0, #4
	movs r1, #0xca
	bl sub_080068C4
	b _080A683C
	.align 2, 0
_080A67D8: .4byte 0x08DAD904
_080A67DC:
	adds r0, r2, #0
	adds r0, #0x42
	ldrh r0, [r0]
	cmp r0, #1
	bne _080A6802
	ldr r0, [r2, #0x60]
	adds r2, #0x2f
	movs r1, #0xda
	lsls r1, r1, #1
	ldrb r2, [r2]
	subs r1, r1, r2
	ldrb r3, [r3]
	lsls r2, r3, #5
	adds r2, #0x34
	movs r3, #0xb0
	lsls r3, r3, #1
	bl sub_08012B70
	b _080A683C
_080A6802:
	ldr r0, [r2, #0x60]
	movs r1, #0xa0
	lsls r1, r1, #1
	ldrb r3, [r3]
	lsls r2, r3, #5
	adds r2, #0x34
	movs r3, #0xb0
	lsls r3, r3, #1
	bl sub_08012B70
	mov r1, r8
	ldr r0, [r1, #0x14]
	adds r2, r0, #0
	adds r2, #0x2f
	movs r1, #0xd3
	lsls r1, r1, #1
	ldrb r2, [r2]
	subs r1, r1, r2
	adds r0, #0x3f
	ldrb r0, [r0]
	lsls r2, r0, #5
	adds r2, #0x1e
	ldr r3, _080A68AC @ =0x08DAD904
	movs r0, #0xc0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #4
	bl sub_080068C4
_080A683C:
	mov r2, r8
	ldr r1, [r2, #0x14]
	adds r0, r1, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	subs r0, #5
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _080A68F2
	adds r0, r1, #0
	adds r0, #0x36
	ldrb r0, [r0]
	cmp r0, #0
	beq _080A68B4
	ldr r3, _080A68B0 @ =0x08DAD8C2
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #0x28
	movs r2, #0x80
	bl sub_080068C4
	mov r1, r8
	ldr r0, [r1, #0x14]
	adds r0, #0x36
	ldrb r1, [r0]
	subs r1, #1
	lsrs r0, r1, #0x1f
	adds r0, r1, r0
	asrs r0, r0, #1
	lsls r0, r0, #1
	subs r1, r1, r0
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, #0x34
	movs r1, #0x88
	bl sub_0804A740
	mov r2, r8
	ldr r0, [r2, #0x14]
	adds r0, #0x2c
	ldrb r0, [r0]
	lsls r2, r0, #0x1d
	movs r0, #0x80
	lsls r0, r0, #0x16
	adds r2, r2, r0
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r1, #0xc
	mov r3, r8
	bl sub_080A6B4C
	b _080A68D2
	.align 2, 0
_080A68AC: .4byte 0x08DAD904
_080A68B0: .4byte 0x08DAD8C2
_080A68B4:
	adds r1, #0x2c
	ldrb r0, [r1]
	cmp r0, #0xff
	beq _080A68D2
	ldrb r1, [r1]
	lsls r2, r1, #0x1d
	movs r1, #0x80
	lsls r1, r1, #0x16
	adds r2, r2, r1
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r1, #0xc
	mov r3, r8
	bl sub_080A6B4C
_080A68D2:
	mov r2, r8
	ldr r0, [r2, #0x14]
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r0, [r1]
	cmp r0, #0xff
	beq _080A68F2
	ldrb r1, [r1]
	lsls r1, r1, #0x1d
	movs r0, #0x80
	lsls r0, r0, #0x16
	adds r1, r1, r0
	lsrs r1, r1, #0x18
	movs r0, #1
	bl sub_080A6B6C
_080A68F2:
	mov r0, r8
	bl sub_080A62F4
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080A6908
sub_080A6908: @ 0x080A6908
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A6918 @ =0x08DADA3C
	bl Proc_Start
	pop {r1}
	bx r1
	.align 2, 0
_080A6918: .4byte 0x08DADA3C

	thumb_func_start sub_080A691C
sub_080A691C: @ 0x080A691C
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x39
	movs r0, #0
	strb r0, [r1]
	movs r1, #0
	strh r0, [r2, #0x2a]
	adds r0, r2, #0
	adds r0, #0x35
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #2
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #2
	strb r1, [r0]
	subs r0, #9
	strb r1, [r0]
	bx lr
	.align 2, 0

	thumb_func_start sub_080A6950
sub_080A6950: @ 0x080A6950
	push {lr}
	sub sp, #8
	ldrh r1, [r0, #0x2a]
	adds r1, #1
	strh r1, [r0, #0x2a]
	ldr r1, [r0, #0x2c]
	subs r1, #4
	str r1, [r0, #0x2c]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r0, #0xc0
	lsls r0, r0, #1
	str r0, [sp]
	str r0, [sp, #4]
	movs r0, #2
	movs r2, #0
	movs r3, #0
	bl sub_080AACB0
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x80
	lsls r2, r2, #1
	movs r0, #2
	bl sub_080AAD44
	movs r0, #0x4c
	str r0, [sp]
	movs r0, #2
	movs r1, #0x78
	movs r2, #0xa0
	movs r3, #0x4c
	bl sub_080AAD94
	bl SyncDispIo
	add sp, #8
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A69A0
sub_080A69A0: @ 0x080A69A0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080A69B4 @ =0x08DADA64
	movs r1, #0
	bl Proc_Start
	str r4, [r0, #0x30]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080A69B4: .4byte 0x08DADA64

	thumb_func_start sub_080A69B8
sub_080A69B8: @ 0x080A69B8
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x31
	movs r0, #0
	strb r0, [r1]
	movs r1, #0
	strh r0, [r2, #0x2a]
	adds r0, r2, #0
	adds r0, #0x2d
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #2
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #2
	strb r1, [r0]
	subs r0, #9
	strb r1, [r0]
	bx lr
	.align 2, 0

	thumb_func_start sub_080A69EC
sub_080A69EC: @ 0x080A69EC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r7, r0, #0
	ldr r1, _080A6A64 @ =0x084392DC
	add r0, sp, #4
	movs r2, #8
	bl memcpy
	ldrh r0, [r7, #0x2a]
	adds r0, #1
	strh r0, [r7, #0x2a]
	adds r2, r7, #0
	adds r2, #0x2c
	ldrb r0, [r2]
	cmp r0, #3
	bhi _080A6A18
	adds r0, #1
	strb r0, [r2]
_080A6A18:
	adds r0, r7, #0
	adds r0, #0x31
	ldrb r1, [r0]
	mov sl, r0
	cmp r1, #0
	beq _080A6AF4
	adds r1, r7, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	mov r8, r0
	adds r0, r7, #0
	adds r0, #0x2d
	ldrb r3, [r0]
	mov sb, r1
	mov ip, r0
	adds r4, r7, #0
	adds r4, #0x30
	adds r5, r7, #0
	adds r5, #0x2e
	ldrb r2, [r2]
	cmp r2, #3
	bhi _080A6A52
	ldrb r0, [r4]
	add r0, r8
	lsrs r0, r0, #1
	mov r8, r0
	ldrb r1, [r5]
	adds r0, r1, r3
	lsrs r3, r0, #1
_080A6A52:
	adds r0, r7, #0
	adds r0, #0x35
	ldrb r1, [r0]
	adds r2, r0, #0
	cmp r1, #0
	bne _080A6A68
	adds r0, r3, #0
	adds r0, #0x86
	b _080A6A6C
	.align 2, 0
_080A6A64: .4byte 0x084392DC
_080A6A68:
	adds r0, r3, #0
	adds r0, #0xb0
_080A6A6C:
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	mov r1, sb
	ldrb r0, [r1]
	strb r0, [r4]
	mov r1, ip
	ldrb r0, [r1]
	strb r0, [r5]
	ldrb r0, [r2]
	cmp r0, #0
	bne _080A6AC8
	ldrh r2, [r7, #0x2a]
	lsrs r0, r2, #3
	movs r5, #7
	ands r0, r5
	add r0, sp
	adds r0, #4
	ldrb r2, [r0]
	add r2, r8
	ldr r0, _080A6AC4 @ =0x08DAD8FC
	mov sb, r0
	movs r4, #0x80
	lsls r4, r4, #5
	str r4, [sp]
	movs r0, #4
	adds r1, r3, #0
	mov r3, sb
	bl sub_080068C4
	orrs r6, r4
	ldrh r1, [r7, #0x2a]
	lsrs r0, r1, #3
	ands r0, r5
	add r0, sp
	adds r0, #4
	ldrb r2, [r0]
	add r2, r8
	str r4, [sp]
	movs r0, #4
	adds r1, r6, #0
	mov r3, sb
	bl sub_080068C4
	b _080A6AE8
	.align 2, 0
_080A6AC4: .4byte 0x08DAD8FC
_080A6AC8:
	ldrh r2, [r7, #0x2a]
	lsrs r0, r2, #3
	movs r1, #7
	ands r0, r1
	add r0, sp
	adds r0, #4
	ldrb r2, [r0]
	add r2, r8
	ldr r3, _080A6AF0 @ =0x08DAD8FC
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #4
	bl sub_080068C4
_080A6AE8:
	adds r1, r7, #0
	adds r1, #0x2c
	movs r0, #0
	b _080A6AFE
	.align 2, 0
_080A6AF0: .4byte 0x08DAD8FC
_080A6AF4:
	ldrb r2, [r2]
	cmp r2, #4
	bne _080A6B00
	movs r0, #0
	mov r1, sl
_080A6AFE:
	strb r0, [r1]
_080A6B00:
	adds r4, r7, #0
	adds r4, #0x33
	ldrb r0, [r4]
	cmp r0, #0
	beq _080A6B20
	adds r0, r7, #0
	adds r0, #0x32
	ldrb r2, [r0]
	ldr r3, _080A6B48 @ =0x08DAD8FC
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #6
	bl sub_080068C4
_080A6B20:
	adds r1, r7, #0
	adds r1, #0x34
	ldrb r0, [r1]
	cmp r0, #0
	beq _080A6B2E
	movs r0, #0
	strb r0, [r4]
_080A6B2E:
	movs r0, #0
	mov r2, sl
	strb r0, [r2]
	movs r0, #1
	strb r0, [r1]
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A6B48: .4byte 0x08DAD8FC

	thumb_func_start sub_080A6B4C
sub_080A6B4C: @ 0x080A6B4C
	push {r4, lr}
	ldr r3, [r3, #0x34]
	movs r4, #0x2f
	strb r2, [r4, r3]
	adds r2, r3, #0
	adds r2, #0x2d
	strb r1, [r2]
	adds r2, #4
	movs r1, #1
	strb r1, [r2]
	adds r1, r3, #0
	adds r1, #0x35
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080A6B6C
sub_080A6B6C: @ 0x080A6B6C
	push {r4, lr}
	ldr r3, [r2, #0x34]
	movs r2, #0x32
	adds r2, r2, r3
	mov ip, r2
	movs r2, #0
	mov r4, ip
	strb r1, [r4]
	movs r1, #0x33
	adds r1, r1, r3
	mov ip, r1
	movs r1, #1
	mov r4, ip
	strb r1, [r4]
	adds r1, r3, #0
	adds r1, #0x35
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x34
	strb r2, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A6B9C
sub_080A6B9C: @ 0x080A6B9C
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A6BAC @ =0x08DADA8C
	bl Proc_Start
	pop {r1}
	bx r1
	.align 2, 0
_080A6BAC: .4byte 0x08DADA8C

	thumb_func_start sub_080A6BB0
sub_080A6BB0: @ 0x080A6BB0
	push {lr}
	ldr r0, _080A6BCC @ =0x02000044
	ldr r1, _080A6BD0 @ =0x0600C020
	movs r2, #1
	movs r3, #4
	bl InitTextFont
	ldr r0, _080A6BD4 @ =gpBanimModesLeft
	movs r1, #0xa
	bl InitText
	pop {r0}
	bx r0
	.align 2, 0
_080A6BCC: .4byte 0x02000044
_080A6BD0: .4byte 0x0600C020
_080A6BD4: .4byte gpBanimModesLeft

	thumb_func_start sub_080A6BD8
sub_080A6BD8: @ 0x080A6BD8
	push {r4, r5, lr}
	adds r5, r0, #0
	lsls r1, r1, #0x18
	cmp r1, #0
	beq _080A6C20
	ldr r0, _080A6C14 @ =0x02000044
	bl SetTextFont
	ldr r4, _080A6C18 @ =gpBanimModesLeft
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	adds r0, r4, #0
	adds r1, r5, #0
	bl Text_DrawString
	ldr r1, _080A6C1C @ =0x020238AE
	adds r0, r4, #0
	bl PutText
	b _080A6C2C
	.align 2, 0
_080A6C14: .4byte 0x02000044
_080A6C18: .4byte gpBanimModesLeft
_080A6C1C: .4byte 0x020238AE
_080A6C20:
	ldr r0, _080A6C38 @ =0x020238AE
	movs r1, #0xa
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
_080A6C2C:
	movs r0, #2
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A6C38: .4byte 0x020238AE

	thumb_func_start sub_080A6C3C
sub_080A6C3C: @ 0x080A6C3C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	lsls r4, r1, #0x18
	lsrs r4, r4, #0x18
	ldr r5, _080A6C70 @ =0x08DADAAC
	adds r0, #0x42
	ldrb r0, [r0]
	bl sub_080A4054
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x16
	adds r0, r0, r5
	ldr r0, [r0]
	lsls r4, r4, #0x18
	asrs r4, r4, #0x18
	adds r1, r4, #0
	bl sub_080A6BD8
	cmp r4, #0
	bne _080A6C6A
	adds r0, r6, #0
	adds r0, #0x36
	strb r4, [r0]
_080A6C6A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A6C70: .4byte 0x08DADAAC

	thumb_func_start sub_080A6C74
sub_080A6C74: @ 0x080A6C74
	push {r4, r5, lr}
	sub sp, #8
	movs r4, #0
	str r4, [sp]
	ldr r1, _080A6C9C @ =0x06008000
	ldr r5, _080A6CA0 @ =0x01000200
	mov r0, sp
	adds r2, r5, #0
	bl CpuFastSet
	str r4, [sp, #4]
	add r0, sp, #4
	ldr r1, _080A6CA4 @ =0x0600C000
	adds r2, r5, #0
	bl CpuFastSet
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A6C9C: .4byte 0x06008000
_080A6CA0: .4byte 0x01000200
_080A6CA4: .4byte 0x0600C000

	thumb_func_start sub_080A6CA8
sub_080A6CA8: @ 0x080A6CA8
	adds r2, r0, #0
	adds r2, #0x30
	ldrb r3, [r2]
	orrs r1, r3
	strb r1, [r2]
	adds r0, #0x31
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	bx lr

	thumb_func_start sub_080A6CBC
sub_080A6CBC: @ 0x080A6CBC
	adds r2, r0, #0
	adds r2, #0x32
	ldrb r3, [r2]
	orrs r1, r3
	strb r1, [r2]
	adds r0, #0x33
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	bx lr

	thumb_func_start sub_080A6CD0
sub_080A6CD0: @ 0x080A6CD0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	movs r5, #0
	adds r0, #0x31
	strb r5, [r0]
	subs r0, #1
	strb r5, [r0]
	adds r6, r4, #0
	adds r6, #0x32
	strb r5, [r6]
	adds r0, #3
	strb r5, [r0]
	adds r1, r4, #0
	adds r1, #0x44
	movs r0, #0x80
	lsls r0, r0, #1
	ldrh r1, [r1]
	cmp r1, r0
	bne _080A6CFE
	adds r0, r4, #0
	movs r1, #1
	bl sub_080A6CA8
_080A6CFE:
	movs r1, #0
	adds r2, r4, #0
	adds r2, #0x37
_080A6D04:
	adds r0, r2, r1
	ldrb r0, [r0]
	cmp r0, #0xff
	beq _080A6D0E
	adds r5, #1
_080A6D0E:
	adds r1, #1
	cmp r1, #2
	ble _080A6D04
	cmp r5, #0
	ble _080A6D34
	adds r0, r4, #0
	movs r1, #2
	bl sub_080A6CA8
	cmp r5, #2
	bgt _080A6D2C
	adds r0, r4, #0
	movs r1, #4
	bl sub_080A6CA8
_080A6D2C:
	adds r0, r4, #0
	movs r1, #8
	bl sub_080A6CA8
_080A6D34:
	cmp r5, #2
	bgt _080A6D40
	adds r0, r4, #0
	movs r1, #0x10
	bl sub_080A6CA8
_080A6D40:
	bl sub_0809F490
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A6D52
	adds r0, r4, #0
	movs r1, #1
	bl sub_080A6CBC
_080A6D52:
	bl sub_0809F4C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A6D64
	adds r0, r4, #0
	movs r1, #2
	bl sub_080A6CBC
_080A6D64:
	bl sub_0809F4F0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A6D76
	adds r0, r4, #0
	movs r1, #4
	bl sub_080A6CBC
_080A6D76:
	bl sub_0809F50C
	cmp r0, #0
	beq _080A6D86
	adds r0, r4, #0
	movs r1, #8
	bl sub_080A6CBC
_080A6D86:
	adds r0, r4, #0
	movs r1, #0x10
	bl sub_080A6CBC
	bl sub_0809F5B0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A6DA0
	adds r0, r4, #0
	movs r1, #0x20
	bl sub_080A6CBC
_080A6DA0:
	bl sub_0809F588
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A6DB2
	adds r0, r4, #0
	movs r1, #0x40
	bl sub_080A6CBC
_080A6DB2:
	ldrb r0, [r6]
	cmp r0, #0
	beq _080A6DCC
	adds r1, r4, #0
	adds r1, #0x30
	movs r0, #0x20
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	adds r1, #1
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_080A6DCC:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A6DD4
sub_080A6DD4: @ 0x080A6DD4
	push {r4, r5, r6, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r2, r2, #0x18
	cmp r2, #0
	ble _080A6E12
	movs r5, #0
	lsls r6, r1, #0x18
_080A6DE8:
	adds r0, r4, #0
	bl IsSaveValid
	lsls r0, r0, #0x18
	cmp r0, r6
	beq _080A6E0E
	cmp r4, #2
	bne _080A6DFC
	movs r4, #0
	b _080A6E02
_080A6DFC:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_080A6E02:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	bls _080A6DE8
	b _080A6E3A
_080A6E0E:
	adds r0, r4, #0
	b _080A6E3C
_080A6E12:
	movs r5, #0
	lsls r6, r1, #0x18
_080A6E16:
	adds r0, r4, #0
	bl IsSaveValid
	lsls r0, r0, #0x18
	cmp r0, r6
	beq _080A6E0E
	cmp r4, #0
	bne _080A6E2A
	movs r4, #2
	b _080A6E30
_080A6E2A:
	subs r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_080A6E30:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	bls _080A6E16
_080A6E3A:
	movs r0, #0xff
_080A6E3C:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080A6E44
sub_080A6E44: @ 0x080A6E44
	push {r4, r5, lr}
	mov ip, r0
	lsls r1, r1, #0x18
	lsrs r2, r1, #0x18
	movs r1, #0
	adds r0, #0x2c
	ldrb r5, [r0]
	adds r0, #0x16
	ldrh r0, [r0]
	cmp r0, #4
	beq _080A6E7C
	cmp r0, #4
	bgt _080A6E68
	cmp r0, #1
	beq _080A6ED8
	cmp r0, #2
	beq _080A6E86
	b _080A6E88
_080A6E68:
	cmp r0, #0x10
	beq _080A6E88
	cmp r0, #0x10
	bgt _080A6E76
	cmp r0, #8
	beq _080A6E86
	b _080A6E88
_080A6E76:
	cmp r0, #0x80
	bne _080A6E88
	b _080A6E86
_080A6E7C:
	mov r0, ip
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0xff
	bne _080A6E88
_080A6E86:
	movs r1, #1
_080A6E88:
	lsls r0, r2, #0x18
	adds r2, r0, #0
	cmp r2, #0
	ble _080A6EA4
	mov r0, ip
	adds r0, #0x2c
	ldrb r3, [r0]
	adds r4, r0, #0
	cmp r3, #2
	bne _080A6EA0
	movs r0, #0
	b _080A6EB6
_080A6EA0:
	adds r0, r3, #1
	b _080A6EB6
_080A6EA4:
	mov r0, ip
	adds r0, #0x2c
	ldrb r3, [r0]
	adds r4, r0, #0
	cmp r3, #0
	bne _080A6EB4
	movs r0, #2
	b _080A6EB6
_080A6EB4:
	subs r0, r3, #1
_080A6EB6:
	strb r0, [r4]
	mov r0, ip
	adds r0, #0x42
	ldrh r0, [r0]
	cmp r0, #0x40
	beq _080A6ED4
	ldrb r0, [r4]
	asrs r2, r2, #0x18
	bl sub_080A6DD4
	strb r0, [r4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r5, r0
	beq _080A6ED8
_080A6ED4:
	movs r0, #1
	b _080A6EDA
_080A6ED8:
	movs r0, #0
_080A6EDA:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_080A6EE0
sub_080A6EE0: @ 0x080A6EE0
	adds r1, r0, #0
	adds r1, #0x42
	adds r0, #0x30
	ldrb r0, [r0]
	ldrh r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _080A6EF4
	movs r0, #0
	b _080A6EF6
_080A6EF4:
	movs r0, #1
_080A6EF6:
	bx lr

	thumb_func_start sub_080A6EF8
sub_080A6EF8: @ 0x080A6EF8
	push {r4, lr}
	mov ip, r0
	mov r2, ip
	adds r2, #0x29
	adds r0, #0x2b
	ldrb r1, [r2]
	ldrb r0, [r0]
	adds r0, r1, r0
	strb r0, [r2]
	ldr r3, _080A6F68 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r4, [r3, #1]
	ands r0, r4
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r3, #1]
	mov r0, ip
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble _080A6F6C
	ldrb r1, [r2]
	lsls r0, r1, #1
	adds r0, r0, r1
	adds r1, r3, #0
	adds r1, #0x2f
	strb r0, [r1]
	ldrb r4, [r2]
	lsls r0, r4, #1
	adds r1, #4
	strb r0, [r1]
	ldrb r1, [r2]
	lsls r0, r1, #1
	adds r0, r0, r1
	movs r4, #0x10
	rsbs r4, r4, #0
	adds r1, r4, #0
	subs r1, r1, r0
	adds r0, r3, #0
	adds r0, #0x2e
	strb r1, [r0]
	ldrb r2, [r2]
	lsls r1, r2, #1
	movs r2, #0x60
	rsbs r2, r2, #0
	adds r0, r2, #0
	subs r0, r0, r1
	adds r1, r3, #0
	adds r1, #0x32
	b _080A6FA0
	.align 2, 0
_080A6F68: .4byte gDispIo
_080A6F6C:
	ldrb r4, [r2]
	lsls r0, r4, #1
	adds r0, r0, r4
	movs r1, #0x78
	subs r1, r1, r0
	adds r0, r3, #0
	adds r0, #0x2f
	strb r1, [r0]
	ldrb r0, [r2]
	lsls r1, r0, #1
	movs r0, #0x50
	subs r0, r0, r1
	adds r1, r3, #0
	adds r1, #0x33
	strb r0, [r1]
	ldrb r1, [r2]
	lsls r0, r1, #1
	adds r0, r0, r1
	adds r0, #0x78
	adds r1, r3, #0
	adds r1, #0x2e
	strb r0, [r1]
	ldrb r2, [r2]
	lsls r0, r2, #1
	adds r0, #0x50
	adds r1, #4
_080A6FA0:
	strb r0, [r1]
	adds r2, r3, #0
	adds r2, #0x35
	movs r0, #1
	ldrb r4, [r2]
	orrs r0, r4
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2]
	adds r2, #1
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0x27
	bls _080A6FEC
	mov r0, ip
	bl Proc_Break
_080A6FEC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A6FF4
sub_080A6FF4: @ 0x080A6FF4
	push {r4, r5, lr}
	adds r3, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r0, _080A7024 @ =0x08DADAC8
	adds r1, r3, #0
	bl Proc_StartBlocking
	adds r2, r0, #0
	adds r2, #0x2a
	movs r1, #0
	strb r4, [r2]
	adds r2, #1
	strb r5, [r2]
	adds r0, #0x29
	strb r1, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A7024: .4byte 0x08DADAC8

	thumb_func_start sub_080A7028
sub_080A7028: @ 0x080A7028
	push {lr}
	ldr r0, _080A703C @ =gBg2Tm
	ldr r1, _080A7040 @ =0x06007000
	movs r2, #0x80
	lsls r2, r2, #4
	bl RegisterDataMove
	pop {r0}
	bx r0
	.align 2, 0
_080A703C: .4byte gBg2Tm
_080A7040: .4byte 0x06007000

	thumb_func_start sub_080A7044
sub_080A7044: @ 0x080A7044
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A7054 @ =0x08DADAE8
	bl Proc_Start
	pop {r1}
	bx r1
	.align 2, 0
_080A7054: .4byte 0x08DADAE8

	thumb_func_start sub_080A7058
sub_080A7058: @ 0x080A7058
	push {r4, r5, r6, lr}
	sub sp, #0x48
	adds r5, r1, #0
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r6, r4, #0
	cmp r4, #2
	bhi _080A711C
	adds r0, r4, #0
	bl IsSaveValid
	lsls r0, r0, #0x18
	asrs r2, r0, #0x18
	cmp r2, #0
	beq _080A70E8
	adds r0, r4, #0
	mov r1, sp
	bl ReadGameSavePlaySt
	mov r0, sp
	bl sub_08082F30
	adds r1, r5, #0
	adds r1, #0x37
	adds r1, r1, r4
	movs r2, #0
	strb r0, [r1]
	lsls r1, r4, #2
	adds r0, r5, #0
	adds r0, #0x48
	adds r0, r0, r1
	ldr r1, [sp]
	str r1, [r0]
	adds r0, r5, #0
	adds r0, #0x3a
	adds r5, r0, r4
	strb r2, [r5]
	adds r0, r4, #0
	bl sub_080A1398
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A70B6
	movs r0, #1
	ldrb r1, [r5]
	orrs r0, r1
	strb r0, [r5]
_080A70B6:
	mov r0, sp
	bl sub_080A1384
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A70CA
	movs r0, #2
	ldrb r1, [r5]
	orrs r0, r1
	strb r0, [r5]
_080A70CA:
	ldr r0, _080A70E0 @ =0x02000064
	adds r0, r4, r0
	mov r1, sp
	ldrb r1, [r1, #0x14]
	strb r1, [r0]
	ldr r0, _080A70E4 @ =0x02000068
	adds r0, r4, r0
	mov r1, sp
	ldrb r1, [r1, #0x1b]
	strb r1, [r0]
	b _080A7152
	.align 2, 0
_080A70E0: .4byte 0x02000064
_080A70E4: .4byte 0x02000068
_080A70E8:
	adds r0, r5, #0
	adds r0, #0x37
	adds r0, r0, r6
	movs r1, #0xff
	strb r1, [r0]
	adds r0, r5, #0
	adds r0, #0x3a
	adds r0, r0, r6
	strb r2, [r0]
	lsls r1, r6, #2
	adds r0, r5, #0
	adds r0, #0x48
	adds r0, r0, r1
	str r2, [r0]
	ldr r0, _080A7114 @ =0x02000064
	adds r0, r6, r0
	strb r2, [r0]
	ldr r0, _080A7118 @ =0x02000068
	adds r0, r6, r0
	strb r2, [r0]
	b _080A7152
	.align 2, 0
_080A7114: .4byte 0x02000064
_080A7118: .4byte 0x02000068
_080A711C:
	adds r4, r5, #0
	adds r4, #0x44
	movs r0, #0x80
	lsls r0, r0, #1
	ldrh r1, [r4]
	cmp r1, r0
	bne _080A7152
	movs r0, #3
	bl IsValidSuspendSave
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A714E
	movs r0, #3
	mov r1, sp
	bl ReadSuspendSavePlaySt
	mov r0, sp
	ldrb r0, [r0, #0xc]
	adds r1, r5, #0
	adds r1, #0x3f
	strb r0, [r1]
	ldr r0, [sp]
	str r0, [r5, #0x54]
	b _080A7152
_080A714E:
	movs r0, #0xf0
	strh r0, [r4]
_080A7152:
	add sp, #0x48
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A715C
sub_080A715C: @ 0x080A715C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	movs r5, #0
	movs r7, #0x1b
	movs r6, #0x1a
_080A716E:
	ldr r1, _080A71E4 @ =0x02000064
	adds r1, r5, r1
	movs r0, #0x40
	ldrb r1, [r1]
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	rsbs r0, r0, #0
	asrs r4, r0, #0x1f
	movs r0, #4
	ands r4, r0
	ldr r0, _080A71E8 @ =0x02000068
	adds r0, r5, r0
	ldrb r1, [r0]
	cmp r1, #1
	bne _080A7192
	movs r0, #0x10
	orrs r4, r0
_080A7192:
	cmp r1, #2
	bne _080A719E
	movs r0, #0x20
	orrs r4, r0
	lsls r0, r4, #0x18
	lsrs r4, r0, #0x18
_080A719E:
	cmp r1, #3
	bne _080A71AA
	movs r0, #0x40
	orrs r4, r0
	lsls r0, r4, #0x18
	lsrs r4, r0, #0x18
_080A71AA:
	cmp r5, r8
	beq _080A71B6
	movs r0, #2
	orrs r4, r0
	lsls r0, r4, #0x18
	lsrs r4, r0, #0x18
_080A71B6:
	movs r1, #1
	adds r0, r4, #0
	orrs r0, r1
	adds r1, r6, #0
	bl sub_08082DB8
	adds r0, r4, #0
	adds r1, r7, #0
	bl sub_08082DB8
	adds r7, #2
	adds r6, #2
	adds r5, #1
	cmp r5, #2
	ble _080A716E
	bl EnablePalSync
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A71E4: .4byte 0x02000064
_080A71E8: .4byte 0x02000068

	thumb_func_start sub_080A71EC
sub_080A71EC: @ 0x080A71EC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r5, r0, #0
	str r1, [sp]
	asrs r5, r5, #1
	movs r0, #0x1f
	ands r5, r0
	cmp r5, #0x10
	ble _080A720E
	movs r0, #0xf
	ands r0, r5
	movs r1, #0x10
	subs r5, r1, r0
_080A720E:
	movs r2, #0
_080A7210:
	ldr r0, _080A7240 @ =0x02000064
	adds r1, r2, r0
	movs r0, #0x40
	ldrb r1, [r1]
	ands r0, r1
	adds r1, r2, #1
	str r1, [sp, #4]
	cmp r0, #0
	beq _080A72D2
	lsls r0, r2, #6
	movs r1, #0xa0
	lsls r1, r1, #1
	adds r0, r0, r1
	ldr r1, _080A7244 @ =0x02022A72
	adds r0, r0, r1
	mov r8, r0
	ldr r0, [sp]
	cmp r2, r0
	bne _080A7250
	ldr r1, _080A7248 @ =0x08404DA2
	mov ip, r1
	ldr r6, _080A724C @ =0x08404EA2
	b _080A7256
	.align 2, 0
_080A7240: .4byte 0x02000064
_080A7244: .4byte 0x02022A72
_080A7248: .4byte 0x08404DA2
_080A724C: .4byte 0x08404EA2
_080A7250:
	ldr r0, _080A72EC @ =0x08404DC2
	mov ip, r0
	ldr r6, _080A72F0 @ =0x08404EC2
_080A7256:
	adds r2, #1
	str r2, [sp, #4]
	movs r0, #0x10
	subs r7, r0, r5
	movs r1, #0xf8
	lsls r1, r1, #7
	mov sl, r1
	movs r0, #6
	mov sb, r0
_080A7268:
	mov r1, ip
	ldrh r4, [r1]
	movs r0, #0x1f
	ands r0, r4
	adds r2, r0, #0
	muls r2, r5, r2
	ldrh r3, [r6]
	movs r0, #0x1f
	ands r0, r3
	muls r0, r7, r0
	adds r2, r2, r0
	asrs r2, r2, #4
	movs r0, #0x1f
	ands r2, r0
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r0, r4
	adds r1, r0, #0
	muls r1, r5, r1
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r0, r3
	muls r0, r7, r0
	adds r1, r1, r0
	asrs r1, r1, #4
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r1, r0
	adds r2, r2, r1
	mov r0, sl
	ands r0, r4
	adds r1, r0, #0
	muls r1, r5, r1
	mov r0, sl
	ands r0, r3
	muls r0, r7, r0
	adds r1, r1, r0
	asrs r1, r1, #4
	mov r0, sl
	ands r1, r0
	adds r2, r2, r1
	mov r1, r8
	strh r2, [r1]
	movs r0, #2
	add r8, r0
	add ip, r0
	adds r6, #2
	movs r1, #1
	rsbs r1, r1, #0
	add sb, r1
	mov r0, sb
	cmp r0, #0
	bge _080A7268
_080A72D2:
	ldr r2, [sp, #4]
	cmp r2, #2
	ble _080A7210
	bl EnablePalSync
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A72EC: .4byte 0x08404DC2
_080A72F0: .4byte 0x08404EC2

	thumb_func_start sub_080A72F4
sub_080A72F4: @ 0x080A72F4
	push {r4, lr}
	adds r4, r1, #0
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	movs r1, #0
	movs r2, #1
	cmp r2, r3
	bge _080A731A
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r4, [r0]
_080A730A:
	adds r0, r4, #0
	ands r0, r2
	cmp r0, #0
	beq _080A7314
	adds r1, #1
_080A7314:
	lsls r2, r2, #1
	cmp r2, r3
	blt _080A730A
_080A731A:
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start nullsub_084
nullsub_084: @ 0x080A7324
	bx lr
	.align 2, 0

	thumb_func_start sub_080A7328
sub_080A7328: @ 0x080A7328
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x30
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bne _080A7344
	ldr r0, _080A7368 @ =0x06016000
	movs r1, #0xd
	bl sub_08082F74
	movs r0, #1
	strb r0, [r4]
_080A7344:
	ldr r2, _080A736C @ =0x08DADD90
	ldr r3, [r5, #0x2c]
	lsls r1, r3, #3
	adds r0, r1, r2
	ldr r0, [r0]
	adds r2, #4
	adds r1, r1, r2
	ldr r1, [r1]
	ldr r2, _080A7370 @ =0x08DADDB0
	lsls r3, r3, #2
	adds r3, r3, r2
	ldr r2, [r3]
	bl sub_0808266C
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A7368: .4byte 0x06016000
_080A736C: .4byte 0x08DADD90
_080A7370: .4byte 0x08DADDB0

	thumb_func_start sub_080A7374
sub_080A7374: @ 0x080A7374
	push {r4, lr}
	adds r4, r0, #0
	bl sub_080828A4
	adds r4, #0x30
	movs r0, #0
	strb r0, [r4]
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080A7388
sub_080A7388: @ 0x080A7388
	push {lr}
	bl sub_08032CDC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A7398
	bl sub_08032CCC
_080A7398:
	pop {r0}
	bx r0

	thumb_func_start sub_080A739C
sub_080A739C: @ 0x080A739C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_08032CDC
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A73B8
	ldr r0, _080A73C0 @ =0x0000079C
	bl DecodeMsg
	adds r1, r0, #0
	adds r0, r4, #0
	bl sub_08032CF4
_080A73B8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A73C0: .4byte 0x0000079C

	thumb_func_start sub_080A73C4
sub_080A73C4: @ 0x080A73C4
	push {r4, r5, lr}
	sub sp, #0x10
	mov r2, sp
	ldr r1, _080A73FC @ =0x08439338
	ldm r1!, {r3, r4, r5}
	stm r2!, {r3, r4, r5}
	ldr r1, [r1]
	str r1, [r2]
	ldr r1, _080A7400 @ =0x08DADD90
	lsls r2, r0, #3
	adds r3, r2, r1
	ldr r4, [r3]
	adds r1, #4
	adds r2, r2, r1
	ldr r1, [r2]
	lsls r0, r0, #2
	add r0, sp
	ldr r2, [r0]
	movs r3, #0xc0
	lsls r3, r3, #4
	adds r0, r4, #0
	bl sub_080AA3F8
	add sp, #0x10
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A73FC: .4byte 0x08439338
_080A7400: .4byte 0x08DADD90

	thumb_func_start sub_080A7404
sub_080A7404: @ 0x080A7404
	push {lr}
	ldr r2, _080A7420 @ =0x08DADD90
	lsls r0, r0, #3
	adds r1, r0, r2
	ldr r1, [r1]
	adds r2, #4
	adds r0, r0, r2
	ldr r2, [r0]
	movs r0, #0
	movs r3, #0
	bl sub_080A98DC
	pop {r0}
	bx r0
	.align 2, 0
_080A7420: .4byte 0x08DADD90

	thumb_func_start sub_080A7424
sub_080A7424: @ 0x080A7424
	push {r4, r5, r6, lr}
	ldr r4, _080A74F8 @ =0x0200006C
	ldr r1, _080A74FC @ =0x06011000
	adds r0, r4, #0
	movs r2, #0xf
	bl InitSpriteTextFont
	adds r0, r4, #0
	bl SetTextFont
	movs r0, #1
	bl SetTextFontGlyphs
	adds r4, #0x18
	movs r5, #2
_080A7442:
	adds r0, r4, #0
	bl InitSpriteText
	adds r0, r4, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge _080A7442
	ldr r0, _080A7500 @ =0x08190268
	movs r1, #0xf8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r5, _080A7504 @ =0x02000084
	bl sub_0802EBB0
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0
	movs r2, #4
	bl Text_InsertDrawString
	ldr r4, _080A7508 @ =gPlaySt
	adds r6, r4, #0
	adds r6, #0x2b
	ldrb r1, [r6]
	lsls r0, r1, #0x1c
	lsrs r0, r0, #0x1d
	bl sub_080A7AA8
	bl DecodeMsg
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0x40
	movs r2, #4
	bl Text_InsertDrawString
	ldrb r1, [r6]
	lsrs r0, r1, #4
	bl sub_080A7AB8
	bl DecodeMsg
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0x60
	movs r2, #4
	bl Text_InsertDrawString
	adds r4, #0x2c
	ldrb r4, [r4]
	lsls r0, r4, #0x1f
	lsrs r0, r0, #0x1f
	bl sub_080A7AC8
	bl DecodeMsg
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0x80
	movs r2, #4
	bl Text_InsertDrawString
	ldr r0, _080A750C @ =0x02022DBC
	ldr r3, _080A7510 @ =Unk_081C8FCC
	ldrb r2, [r6]
	lsls r1, r2, #0x1c
	lsrs r1, r1, #0x1d
	lsls r1, r1, #2
	lsrs r2, r2, #4
	lsls r2, r2, #4
	adds r1, r1, r2
	adds r1, r1, r3
	ldr r1, [r1]
	adds r1, #0x79
	movs r2, #0xa0
	lsls r2, r2, #7
	bl PutIcon
	movs r0, #0
	bl SetTextFont
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A74F8: .4byte 0x0200006C
_080A74FC: .4byte 0x06011000
_080A7500: .4byte 0x08190268
_080A7504: .4byte 0x02000084
_080A7508: .4byte gPlaySt
_080A750C: .4byte 0x02022DBC
_080A7510: .4byte Unk_081C8FCC

	thumb_func_start sub_080A7514
sub_080A7514: @ 0x080A7514
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r6, _080A7570 @ =0x0000F880
	movs r5, #0x80
	movs r4, #1
_080A751E:
	str r6, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x28
	ldr r3, _080A7574 @ =0x08BFF7A8
	bl sub_080068C4
	adds r6, #4
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge _080A751E
	ldr r4, _080A7574 @ =0x08BFF7A8
	ldr r0, _080A7578 @ =0x0000F888
	str r0, [sp]
	movs r0, #4
	movs r1, #0x48
	movs r2, #0x48
	adds r3, r4, #0
	bl sub_080068C4
	ldr r0, _080A757C @ =0x0000F88C
	str r0, [sp]
	movs r0, #4
	movs r1, #0x80
	movs r2, #0x48
	adds r3, r4, #0
	bl sub_080068C4
	ldr r0, _080A7580 @ =0x0000F890
	str r0, [sp]
	movs r0, #4
	movs r1, #0xc0
	movs r2, #0x48
	adds r3, r4, #0
	bl sub_080068C4
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A7570: .4byte 0x0000F880
_080A7574: .4byte 0x08BFF7A8
_080A7578: .4byte 0x0000F888
_080A757C: .4byte 0x0000F88C
_080A7580: .4byte 0x0000F890

	thumb_func_start sub_080A7584
sub_080A7584: @ 0x080A7584
	push {lr}
	movs r1, #0
	str r1, [r0, #0x2c]
	adds r0, #0x30
	strb r1, [r0]
	ldr r0, _080A75BC @ =0x0000079D
	bl DecodeMsg
	bl sub_0802EBB8
	ldr r2, _080A75C0 @ =gPlaySt
	adds r3, r2, #0
	adds r3, #0x2b
	movs r0, #0xf
	rsbs r0, r0, #0
	ldrb r1, [r3]
	ands r0, r1
	movs r1, #0xf
	ands r0, r1
	strb r0, [r3]
	adds r2, #0x2c
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2]
	ands r0, r1
	strb r0, [r2]
	pop {r0}
	bx r0
	.align 2, 0
_080A75BC: .4byte 0x0000079D
_080A75C0: .4byte gPlaySt

	thumb_func_start sub_080A75C4
sub_080A75C4: @ 0x080A75C4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sb, r0
	movs r0, #0
	bl InitBgs
	bl sub_08015A0C
	ldr r7, _080A76A0 @ =gDispIo
	adds r6, r7, #0
	adds r6, #0x3c
	movs r4, #0x3f
	adds r0, r4, #0
	ldrb r1, [r6]
	ands r0, r1
	strb r0, [r6]
	movs r5, #0
	movs r0, #0x10
	ldr r2, _080A76A4 @ =0x030027D4
	strb r0, [r2]
	movs r1, #0x45
	adds r1, r1, r7
	mov r8, r1
	strb r5, [r1]
	movs r2, #0x46
	adds r2, r2, r7
	mov sl, r2
	strb r5, [r2]
	bl ResetText
	bl sub_0804A9F8
	bl InitIcons
	movs r0, #4
	bl ApplyIconPalettes
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r7, #0xc]
	ands r0, r2
	strb r0, [r7, #0xc]
	ldrb r0, [r7, #0x10]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r7, #0x10]
	movs r0, #3
	ldrb r1, [r7, #0x14]
	orrs r1, r0
	strb r1, [r7, #0x14]
	ldrb r1, [r7, #0x18]
	orrs r0, r1
	strb r0, [r7, #0x18]
	ldrb r2, [r6]
	ands r4, r2
	strb r4, [r6]
	movs r1, #0x10
	ldr r0, _080A76A4 @ =0x030027D4
	strb r1, [r0]
	mov r2, r8
	strb r5, [r2]
	mov r0, sl
	strb r5, [r0]
	ldr r0, _080A76A8 @ =0x084364A0
	ldr r1, _080A76AC @ =0x06001000
	bl sub_08013688
	ldr r0, _080A76B0 @ =0x08436480
	movs r1, #0xf0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080A76B4 @ =gBg2Tm
	ldr r1, _080A76B8 @ =0x08438954
	ldr r2, _080A76BC @ =0x0000F080
	bl TmApplyTsa_thm
	mov r0, sb
	bl sub_080A98C8
	ldr r1, _080A76C0 @ =0x06008000
	movs r0, #0
	movs r2, #0xa
	movs r3, #1
	bl sub_08080724
	bl sub_080A7424
	ldr r0, _080A76C4 @ =sub_080A7514
	mov r1, sb
	bl sub_080AA20C
	movs r0, #0xb4
	movs r1, #0x10
	mov r2, sb
	bl sub_08082D1C
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A76A0: .4byte gDispIo
_080A76A4: .4byte 0x030027D4
_080A76A8: .4byte 0x084364A0
_080A76AC: .4byte 0x06001000
_080A76B0: .4byte 0x08436480
_080A76B4: .4byte gBg2Tm
_080A76B8: .4byte 0x08438954
_080A76BC: .4byte 0x0000F080
_080A76C0: .4byte 0x06008000
_080A76C4: .4byte sub_080A7514

	thumb_func_start sub_080A76C8
sub_080A76C8: @ 0x080A76C8
	push {r4, lr}
	adds r4, r0, #0
	bl sub_080AA45C
	adds r0, r4, #0
	bl sub_080AA390
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_080AA3B4
	movs r0, #0
	bl sub_080A998C
	adds r0, r4, #0
	bl sub_080A739C
	ldr r0, [r4, #0x2c]
	adds r1, r4, #0
	bl sub_080A73C4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A76FC
sub_080A76FC: @ 0x080A76FC
	push {r4, lr}
	sub sp, #8
	adds r4, r0, #0
	bl sub_0809F9D0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A772C
	bl sub_080AA45C
	bl sub_080A7388
	ldr r2, _080A7734 @ =0x0000079E
	ldr r3, _080A7738 @ =0x06016000
	movs r0, #0xd
	str r0, [sp]
	str r4, [sp, #4]
	movs r0, #0x30
	movs r1, #0x5a
	bl sub_08084068
	movs r0, #0x70
	bl sub_08083B9C
_080A772C:
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A7734: .4byte 0x0000079E
_080A7738: .4byte 0x06016000

	thumb_func_start sub_080A773C
sub_080A773C: @ 0x080A773C
	push {r4, lr}
	sub sp, #8
	adds r4, r0, #0
	bl sub_080AA45C
	bl sub_080A7388
	ldr r2, _080A7770 @ =0x0000079F
	ldr r3, _080A7774 @ =0x06016000
	movs r0, #0xd
	str r0, [sp]
	str r4, [sp, #4]
	movs r0, #0x70
	movs r1, #0x5a
	bl sub_08084068
	movs r0, #0x70
	bl sub_08083B9C
	movs r0, #1
	bl sub_08009E6C
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A7770: .4byte 0x0000079F
_080A7774: .4byte 0x06016000

	thumb_func_start sub_080A7778
sub_080A7778: @ 0x080A7778
	push {r4, lr}
	adds r4, r0, #0
	bl sub_08009E60
	cmp r0, #1
	bne _080A778C
	adds r0, r4, #0
	movs r1, #2
	bl Proc_Goto
_080A778C:
	bl sub_08009E60
	cmp r0, #2
	beq _080A779C
	bl sub_08009E60
	cmp r0, #0
	bne _080A77A4
_080A779C:
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
_080A77A4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A77AC
sub_080A77AC: @ 0x080A77AC
	push {r4, lr}
	sub sp, #8
	adds r4, r0, #0
	bl sub_080AA45C
	bl sub_080A7388
	movs r2, #0xf4
	lsls r2, r2, #3
	ldr r3, _080A77E4 @ =0x06016000
	movs r0, #0xd
	str r0, [sp]
	str r4, [sp, #4]
	movs r0, #0x60
	movs r1, #0x5a
	bl sub_08084068
	movs r0, #0xf0
	bl sub_08083B9C
	movs r0, #1
	bl sub_08009E6C
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A77E4: .4byte 0x06016000

	thumb_func_start sub_080A77E8
sub_080A77E8: @ 0x080A77E8
	push {r4, lr}
	adds r4, r0, #0
	bl sub_08009E60
	cmp r0, #2
	beq _080A77FC
	bl sub_08009E60
	cmp r0, #0
	bne _080A7804
_080A77FC:
	adds r0, r4, #0
	movs r1, #2
	bl Proc_Goto
_080A7804:
	bl sub_08009E60
	cmp r0, #1
	bne _080A7814
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
_080A7814:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A781C
sub_080A781C: @ 0x080A781C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_080807BC
	bl sub_0808EDB0
	adds r0, r4, #0
	bl sub_080AAC88
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080A7834
sub_080A7834: @ 0x080A7834
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, [r4, #0x2c]
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _080A78FE
	ldr r0, _080A7878 @ =gpKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080A78BE
	ldr r0, _080A787C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A7866
	ldr r0, _080A7880 @ =0x0000038A
	bl m4aSongNumStart
_080A7866:
	ldr r0, [r4, #0x2c]
	cmp r0, #1
	beq _080A7898
	cmp r0, #1
	bgt _080A7884
	cmp r0, #0
	beq _080A788E
	b _080A79A4
	.align 2, 0
_080A7878: .4byte gpKeySt
_080A787C: .4byte gPlaySt
_080A7880: .4byte 0x0000038A
_080A7884:
	cmp r0, #2
	beq _080A78A0
	cmp r0, #3
	beq _080A78A8
	b _080A79A4
_080A788E:
	adds r0, r4, #0
	movs r1, #4
	bl Proc_Goto
	b _080A79A4
_080A7898:
	adds r0, r4, #0
	bl sub_080A7D88
	b _080A78AE
_080A78A0:
	adds r0, r4, #0
	bl sub_080A80A4
	b _080A78AE
_080A78A8:
	adds r0, r4, #0
	bl sub_080A82F0
_080A78AE:
	ldr r0, [r4, #0x2c]
	bl sub_080A7404
	adds r0, r4, #0
	movs r1, #2
	bl Proc_Goto
	b _080A79A4
_080A78BE:
	movs r0, #0xa
	ands r0, r1
	cmp r0, #0
	beq _080A78EC
	adds r0, r4, #0
	movs r1, #1
	bl Proc_Goto
	ldr r0, _080A78E4 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A79A4
	ldr r0, _080A78E8 @ =0x0000038A
	bl m4aSongNumStart
	b _080A79A4
	.align 2, 0
_080A78E4: .4byte gPlaySt
_080A78E8: .4byte 0x0000038A
_080A78EC:
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080A7914
	adds r0, r4, #0
	bl sub_080A7328
	b _080A79A4
_080A78FE:
	ldr r0, _080A79AC @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080A7914
	adds r0, r4, #0
	bl sub_080A7374
_080A7914:
	ldr r2, _080A79AC @ =gpKeySt
	ldr r1, [r2]
	movs r0, #0x80
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _080A792C
	ldr r0, [r4, #0x2c]
	cmp r0, #0
	bne _080A792C
	movs r0, #2
	str r0, [r4, #0x2c]
_080A792C:
	ldr r1, [r2]
	movs r0, #0x40
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _080A7942
	ldr r0, [r4, #0x2c]
	cmp r0, #0
	ble _080A7942
	movs r0, #0
	str r0, [r4, #0x2c]
_080A7942:
	ldr r1, [r2]
	movs r0, #0x20
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _080A7958
	ldr r0, [r4, #0x2c]
	cmp r0, #1
	ble _080A7958
	subs r0, #1
	str r0, [r4, #0x2c]
_080A7958:
	ldr r1, [r2]
	movs r0, #0x10
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _080A7970
	ldr r1, [r4, #0x2c]
	subs r0, r1, #1
	cmp r0, #1
	bhi _080A7970
	adds r0, r1, #1
	str r0, [r4, #0x2c]
_080A7970:
	ldr r0, [r4, #0x2c]
	cmp r5, r0
	beq _080A79A4
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080A798A
	adds r0, r4, #0
	bl sub_080A7328
_080A798A:
	ldr r0, [r4, #0x2c]
	adds r1, r4, #0
	bl sub_080A73C4
	ldr r0, _080A79B0 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A79A4
	ldr r0, _080A79B4 @ =0x00000385
	bl m4aSongNumStart
_080A79A4:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A79AC: .4byte gpKeySt
_080A79B0: .4byte gPlaySt
_080A79B4: .4byte 0x00000385

	thumb_func_start sub_080A79B8
sub_080A79B8: @ 0x080A79B8
	push {lr}
	bl sub_080A0F80
	bl WriteGameSave
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A79C8
sub_080A79C8: @ 0x080A79C8
	push {r4, lr}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, _080A79E0 @ =gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #1
	bne _080A79E4
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
	b _080A7A4A
	.align 2, 0
_080A79E0: .4byte gPlaySt
_080A79E4:
	movs r0, #0
	bl InitBgs
	bl sub_08015A0C
	ldr r0, _080A7A54 @ =gDispIo
	mov ip, r0
	mov r1, ip
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r2, #0
	movs r3, #0x10
	movs r0, #0x10
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	movs r0, #1
	mov r1, ip
	ldrb r1, [r1, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	orrs r0, r3
	mov r2, ip
	strb r0, [r2, #1]
	ldr r2, _080A7A58 @ =0x000007A1
	ldr r3, _080A7A5C @ =0x06016000
	movs r0, #0xd
	str r0, [sp]
	str r4, [sp, #4]
	movs r0, #0x38
	movs r1, #0x20
	bl sub_08084068
	movs r0, #0xf0
	bl sub_08083B9C
	movs r0, #2
	bl sub_08009E6C
_080A7A4A:
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A7A54: .4byte gDispIo
_080A7A58: .4byte 0x000007A1
_080A7A5C: .4byte 0x06016000

	thumb_func_start sub_080A7A60
sub_080A7A60: @ 0x080A7A60
	push {r4, lr}
	adds r4, r0, #0
	bl sub_08009E60
	cmp r0, #2
	beq _080A7A74
	bl sub_08009E60
	cmp r0, #0
	bne _080A7A8A
_080A7A74:
	ldr r1, _080A7A90 @ =gPlaySt
	adds r1, #0x2b
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
_080A7A8A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A7A90: .4byte gPlaySt

	thumb_func_start sub_080A7A94
sub_080A7A94: @ 0x080A7A94
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A7AA4 @ =0x08DADDC0
	bl Proc_StartBlocking
	pop {r0}
	bx r0
	.align 2, 0
_080A7AA4: .4byte 0x08DADDC0

	thumb_func_start sub_080A7AA8
sub_080A7AA8: @ 0x080A7AA8
	ldr r1, _080A7AB4 @ =0x08DADF00
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	bx lr
	.align 2, 0
_080A7AB4: .4byte 0x08DADF00

	thumb_func_start sub_080A7AB8
sub_080A7AB8: @ 0x080A7AB8
	ldr r1, _080A7AC4 @ =0x08DADF10
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	bx lr
	.align 2, 0
_080A7AC4: .4byte 0x08DADF10

	thumb_func_start sub_080A7AC8
sub_080A7AC8: @ 0x080A7AC8
	ldr r1, _080A7AD4 @ =0x08DADF40
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	bx lr
	.align 2, 0
_080A7AD4: .4byte 0x08DADF40

	thumb_func_start sub_080A7AD8
sub_080A7AD8: @ 0x080A7AD8
	ldr r1, _080A7AE4 @ =0x08DADF48
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	bx lr
	.align 2, 0
_080A7AE4: .4byte 0x08DADF48

	thumb_func_start sub_080A7AE8
sub_080A7AE8: @ 0x080A7AE8
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r5, r0, #0
	adds r4, r2, #0
	movs r6, #0
	str r6, [sp]
	lsls r1, r1, #5
	adds r5, r5, r1
	lsls r4, r4, #3
	ldr r0, _080A7B28 @ =0x001FFFFF
	ands r4, r0
	movs r0, #0x80
	lsls r0, r0, #0x11
	orrs r4, r0
	mov r0, sp
	adds r1, r5, #0
	adds r2, r4, #0
	bl CpuFastSet
	str r6, [sp, #4]
	add r0, sp, #4
	movs r1, #0x80
	lsls r1, r1, #3
	adds r5, r5, r1
	adds r1, r5, #0
	adds r2, r4, #0
	bl CpuFastSet
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A7B28: .4byte 0x001FFFFF

	thumb_func_start sub_080A7B2C
sub_080A7B2C: @ 0x080A7B2C
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, _080A7BA8 @ =gPlaySt
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1d
	str r0, [r4, #0x2c]
	movs r0, #0
	str r0, [sp]
	movs r0, #3
	movs r1, #0xb
	movs r2, #0xe
	movs r3, #4
	bl sub_0804A4CC
	movs r0, #2
	bl EnableBgSync
	ldr r1, [r4, #0x2c]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, #0x22
	movs r3, #0x80
	lsls r3, r3, #4
	movs r1, #0x60
	movs r2, #2
	bl sub_080AA3F8
	ldr r0, _080A7BAC @ =0x0200006C
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	movs r4, #0
	movs r5, #0
_080A7B7A:
	adds r0, r4, #0
	bl sub_080A7AA8
	bl DecodeMsg
	adds r3, r0, #0
	ldr r0, _080A7BB0 @ =0x0200008C
	adds r1, r5, #0
	movs r2, #0
	bl Text_InsertDrawString
	adds r5, #0x18
	adds r4, #1
	cmp r4, #3
	ble _080A7B7A
	movs r0, #0
	bl SetTextFont
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A7BA8: .4byte gPlaySt
_080A7BAC: .4byte 0x0200006C
_080A7BB0: .4byte 0x0200008C

	thumb_func_start sub_080A7BB4
sub_080A7BB4: @ 0x080A7BB4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r0, [r7, #0x2c]
	mov r8, r0
	ldr r6, _080A7C78 @ =0x0000F4C0
	movs r5, #0x26
	movs r4, #2
_080A7BC8:
	str r6, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x60
	ldr r3, _080A7C7C @ =0x08BFF7A8
	bl sub_080068C4
	adds r6, #4
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge _080A7BC8
	ldr r1, _080A7C80 @ =gpKeySt
	ldr r3, [r1]
	ldrh r2, [r3, #8]
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	beq _080A7C9C
	ldr r5, _080A7C84 @ =gPlaySt
	adds r0, r5, #0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A7C02
	ldr r0, _080A7C88 @ =0x0000038A
	bl m4aSongNumStart
_080A7C02:
	ldr r1, [r7, #0x2c]
	adds r5, #0x2b
	movs r0, #7
	ands r1, r0
	lsls r1, r1, #1
	movs r2, #0xf
	rsbs r2, r2, #0
	ldrb r3, [r5]
	ands r2, r3
	orrs r2, r1
	strb r2, [r5]
	ldr r0, _080A7C8C @ =0x02022DBC
	ldr r3, _080A7C90 @ =Unk_081C8FCC
	lsls r1, r2, #0x1c
	lsrs r1, r1, #0x1d
	lsls r1, r1, #2
	lsrs r2, r2, #4
	lsls r2, r2, #4
	adds r1, r1, r2
	adds r1, r1, r3
	ldr r1, [r1]
	adds r1, #0x79
	movs r2, #0xa0
	lsls r2, r2, #7
	bl PutIcon
	ldr r4, _080A7C94 @ =0x0200006C
	adds r0, r4, #0
	bl SetTextFont
	movs r0, #1
	bl SetTextFontGlyphs
	ldr r0, _080A7C98 @ =0x06011000
	movs r1, #8
	movs r2, #4
	bl sub_080A7AE8
	adds r4, #0x18
	ldrb r5, [r5]
	lsls r0, r5, #0x1c
	lsrs r0, r0, #0x1d
	bl sub_080A7AA8
	bl DecodeMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x40
	movs r2, #4
	bl Text_InsertDrawString
	movs r0, #0
	bl SetTextFont
	movs r0, #1
	bl EnableBgSync
	b _080A7CB6
	.align 2, 0
_080A7C78: .4byte 0x0000F4C0
_080A7C7C: .4byte 0x08BFF7A8
_080A7C80: .4byte gpKeySt
_080A7C84: .4byte gPlaySt
_080A7C88: .4byte 0x0000038A
_080A7C8C: .4byte 0x02022DBC
_080A7C90: .4byte Unk_081C8FCC
_080A7C94: .4byte 0x0200006C
_080A7C98: .4byte 0x06011000
_080A7C9C:
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _080A7CC8
	ldr r0, _080A7CC0 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A7CB6
	ldr r0, _080A7CC4 @ =0x0000038B
	bl m4aSongNumStart
_080A7CB6:
	adds r0, r7, #0
	bl Proc_Break
	b _080A7D3C
	.align 2, 0
_080A7CC0: .4byte gPlaySt
_080A7CC4: .4byte 0x0000038B
_080A7CC8:
	movs r4, #0x20
	adds r0, r4, #0
	ldrh r3, [r3, #6]
	ands r0, r3
	cmp r0, #0
	beq _080A7CEA
	ldr r0, [r7, #0x2c]
	cmp r0, #0
	ble _080A7CDE
	subs r0, #1
	b _080A7CE8
_080A7CDE:
	adds r0, r4, #0
	ands r0, r2
	cmp r0, #0
	beq _080A7CEA
	movs r0, #3
_080A7CE8:
	str r0, [r7, #0x2c]
_080A7CEA:
	ldr r1, [r1]
	movs r2, #0x10
	adds r0, r2, #0
	ldrh r3, [r1, #6]
	ands r0, r3
	cmp r0, #0
	beq _080A7D10
	ldr r0, [r7, #0x2c]
	cmp r0, #2
	bgt _080A7D02
	adds r0, #1
	b _080A7D0E
_080A7D02:
	adds r0, r2, #0
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080A7D10
	movs r0, #0
_080A7D0E:
	str r0, [r7, #0x2c]
_080A7D10:
	ldr r1, [r7, #0x2c]
	cmp r1, r8
	beq _080A7D3C
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, #0x22
	movs r3, #0x80
	lsls r3, r3, #4
	movs r1, #0x60
	movs r2, #2
	bl sub_080AA3F8
	ldr r0, _080A7D48 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A7D3C
	ldr r0, _080A7D4C @ =0x00000385
	bl m4aSongNumStart
_080A7D3C:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A7D48: .4byte gPlaySt
_080A7D4C: .4byte 0x00000385

	thumb_func_start sub_080A7D50
sub_080A7D50: @ 0x080A7D50
	push {r4, lr}
	ldr r0, _080A7D80 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r4, _080A7D84 @ =0x0200006C
	adds r0, r4, #0
	bl SetTextFont
	adds r4, #0x20
	adds r0, r4, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	movs r0, #0
	bl SetTextFont
	movs r0, #2
	bl EnableBgSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A7D80: .4byte gBg1Tm
_080A7D84: .4byte 0x0200006C

	thumb_func_start sub_080A7D88
sub_080A7D88: @ 0x080A7D88
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A7D98 @ =0x08DADF68
	bl Proc_StartBlocking
	pop {r0}
	bx r0
	.align 2, 0
_080A7D98: .4byte 0x08DADF68

	thumb_func_start sub_080A7D9C
sub_080A7D9C: @ 0x080A7D9C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, _080A7E44 @ =gPlaySt
	adds r0, #0x2b
	ldrb r0, [r0]
	lsrs r0, r0, #4
	str r0, [r4, #0x2c]
	movs r0, #0
	str r0, [sp]
	movs r0, #2
	movs r1, #0xb
	movs r2, #0x1a
	movs r3, #6
	bl sub_0804A4CC
	movs r0, #2
	bl EnableBgSync
	ldr r5, [r4, #0x2c]
	adds r0, r5, #0
	movs r1, #6
	bl __modsi3
	adds r4, r0, #0
	lsls r4, r4, #5
	adds r4, #0x1a
	adds r0, r5, #0
	movs r1, #6
	bl __divsi3
	adds r1, r0, #0
	lsls r1, r1, #4
	adds r1, #0x60
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r4, #0
	movs r2, #1
	bl sub_080AA3F8
	ldr r4, _080A7E48 @ =0x0200006C
	adds r0, r4, #0
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	movs r5, #0
	adds r6, r4, #0
	adds r6, #0x20
_080A7E00:
	lsls r4, r5, #5
	adds r0, r5, #0
	bl sub_080A7AB8
	bl DecodeMsg
	adds r3, r0, #0
	adds r0, r6, #0
	adds r1, r4, #0
	movs r2, #0
	bl Text_InsertDrawString
	adds r0, r5, #6
	bl sub_080A7AB8
	bl DecodeMsg
	adds r3, r0, #0
	adds r0, r6, #0
	adds r0, #8
	adds r1, r4, #0
	movs r2, #0
	bl Text_InsertDrawString
	adds r5, #1
	cmp r5, #5
	ble _080A7E00
	movs r0, #0
	bl SetTextFont
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A7E44: .4byte gPlaySt
_080A7E48: .4byte 0x0200006C

	thumb_func_start sub_080A7E4C
sub_080A7E4C: @ 0x080A7E4C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r0, [r7, #0x2c]
	mov sb, r0
	ldr r6, _080A7F0C @ =0x0000F4C0
	movs r5, #0x1e
	movs r4, #2
_080A7E62:
	str r6, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x60
	ldr r3, _080A7F10 @ =0x08BFF7B0
	bl sub_080068C4
	adds r6, #8
	adds r5, #0x40
	subs r4, #1
	cmp r4, #0
	bge _080A7E62
	ldr r1, _080A7F14 @ =gpKeySt
	ldr r2, [r1]
	ldrh r5, [r2, #8]
	movs r0, #1
	ands r0, r5
	mov r8, r1
	cmp r0, #0
	beq _080A7F30
	ldr r5, _080A7F18 @ =gPlaySt
	adds r0, r5, #0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A7E9E
	ldr r0, _080A7F1C @ =0x0000038A
	bl m4aSongNumStart
_080A7E9E:
	ldr r0, [r7, #0x2c]
	adds r5, #0x2b
	lsls r0, r0, #4
	movs r2, #0xf
	ldrb r1, [r5]
	ands r2, r1
	orrs r2, r0
	strb r2, [r5]
	ldr r0, _080A7F20 @ =0x02022DBC
	ldr r4, _080A7F24 @ =Unk_081C8FCC
	lsls r1, r2, #0x1c
	lsrs r1, r1, #0x1d
	lsls r1, r1, #2
	movs r3, #0xf0
	ands r2, r3
	adds r1, r1, r2
	adds r1, r1, r4
	ldr r1, [r1]
	adds r1, #0x79
	movs r2, #0xa0
	lsls r2, r2, #7
	bl PutIcon
	ldr r4, _080A7F28 @ =0x0200006C
	adds r0, r4, #0
	bl SetTextFont
	movs r0, #1
	bl SetTextFontGlyphs
	ldr r0, _080A7F2C @ =0x06011000
	movs r1, #0xc
	movs r2, #4
	bl sub_080A7AE8
	adds r4, #0x18
	ldrb r5, [r5]
	lsrs r0, r5, #4
	bl sub_080A7AB8
	bl DecodeMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x60
	movs r2, #4
	bl Text_InsertDrawString
	movs r0, #0
	bl SetTextFont
	movs r0, #1
	bl EnableBgSync
	b _080A7F4A
	.align 2, 0
_080A7F0C: .4byte 0x0000F4C0
_080A7F10: .4byte 0x08BFF7B0
_080A7F14: .4byte gpKeySt
_080A7F18: .4byte gPlaySt
_080A7F1C: .4byte 0x0000038A
_080A7F20: .4byte 0x02022DBC
_080A7F24: .4byte Unk_081C8FCC
_080A7F28: .4byte 0x0200006C
_080A7F2C: .4byte 0x06011000
_080A7F30:
	movs r0, #2
	ands r0, r5
	cmp r0, #0
	beq _080A7F5C
	ldr r0, _080A7F54 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A7F4A
	ldr r0, _080A7F58 @ =0x0000038B
	bl m4aSongNumStart
_080A7F4A:
	adds r0, r7, #0
	bl Proc_Break
	b _080A8054
	.align 2, 0
_080A7F54: .4byte gPlaySt
_080A7F58: .4byte 0x0000038B
_080A7F5C:
	movs r6, #0x40
	adds r0, r6, #0
	ldrh r2, [r2, #6]
	ands r0, r2
	cmp r0, #0
	beq _080A7F86
	ldr r4, [r7, #0x2c]
	adds r0, r4, #0
	movs r1, #6
	bl __divsi3
	cmp r0, #0
	ble _080A7F7A
	subs r0, r4, #6
	b _080A7F84
_080A7F7A:
	adds r0, r6, #0
	ands r0, r5
	cmp r0, #0
	beq _080A7F86
	adds r0, r4, #6
_080A7F84:
	str r0, [r7, #0x2c]
_080A7F86:
	mov r0, r8
	ldr r5, [r0]
	movs r0, #0x80
	ldrh r1, [r5, #6]
	ands r0, r1
	cmp r0, #0
	beq _080A7FB4
	ldr r4, [r7, #0x2c]
	adds r0, r4, #0
	movs r1, #6
	bl __divsi3
	cmp r0, #0
	bgt _080A7FA6
	adds r0, r4, #6
	b _080A7FB2
_080A7FA6:
	movs r0, #0x40
	ldrh r5, [r5, #8]
	ands r0, r5
	cmp r0, #0
	beq _080A7FB4
	subs r0, r4, #6
_080A7FB2:
	str r0, [r7, #0x2c]
_080A7FB4:
	mov r0, r8
	ldr r5, [r0]
	movs r6, #0x20
	adds r0, r6, #0
	ldrh r1, [r5, #6]
	ands r0, r1
	cmp r0, #0
	beq _080A7FE4
	ldr r4, [r7, #0x2c]
	adds r0, r4, #0
	movs r1, #6
	bl __modsi3
	cmp r0, #0
	ble _080A7FD6
	subs r0, r4, #1
	b _080A7FE2
_080A7FD6:
	adds r0, r6, #0
	ldrh r5, [r5, #8]
	ands r0, r5
	cmp r0, #0
	beq _080A7FE4
	adds r0, r4, #5
_080A7FE2:
	str r0, [r7, #0x2c]
_080A7FE4:
	mov r0, r8
	ldr r5, [r0]
	movs r6, #0x10
	adds r0, r6, #0
	ldrh r1, [r5, #6]
	ands r0, r1
	cmp r0, #0
	beq _080A8014
	ldr r4, [r7, #0x2c]
	adds r0, r4, #0
	movs r1, #6
	bl __modsi3
	cmp r0, #4
	bgt _080A8006
	adds r0, r4, #1
	b _080A8012
_080A8006:
	adds r0, r6, #0
	ldrh r5, [r5, #8]
	ands r0, r5
	cmp r0, #0
	beq _080A8014
	subs r0, r4, #5
_080A8012:
	str r0, [r7, #0x2c]
_080A8014:
	ldr r5, [r7, #0x2c]
	cmp r5, sb
	beq _080A8054
	adds r0, r5, #0
	movs r1, #6
	bl __modsi3
	adds r4, r0, #0
	lsls r4, r4, #5
	adds r4, #0x1a
	adds r0, r5, #0
	movs r1, #6
	bl __divsi3
	adds r1, r0, #0
	lsls r1, r1, #4
	adds r1, #0x60
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r4, #0
	movs r2, #1
	bl sub_080AA3F8
	ldr r0, _080A8064 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A8054
	ldr r0, _080A8068 @ =0x00000385
	bl m4aSongNumStart
_080A8054:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A8064: .4byte gPlaySt
_080A8068: .4byte 0x00000385

	thumb_func_start sub_080A806C
sub_080A806C: @ 0x080A806C
	push {r4, lr}
	ldr r0, _080A809C @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r4, _080A80A0 @ =0x0200006C
	adds r0, r4, #0
	bl SetTextFont
	adds r4, #0x20
	adds r0, r4, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	movs r0, #0
	bl SetTextFont
	movs r0, #2
	bl EnableBgSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A809C: .4byte gBg1Tm
_080A80A0: .4byte 0x0200006C

	thumb_func_start sub_080A80A4
sub_080A80A4: @ 0x080A80A4
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A80B4 @ =0x08DADF98
	bl Proc_StartBlocking
	pop {r0}
	bx r0
	.align 2, 0
_080A80B4: .4byte 0x08DADF98

	thumb_func_start sub_080A80B8
sub_080A80B8: @ 0x080A80B8
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, _080A8134 @ =gPlaySt
	adds r0, #0x2c
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	lsrs r0, r0, #0x1f
	str r0, [r4, #0x2c]
	movs r0, #0
	str r0, [sp]
	movs r0, #0x15
	movs r1, #0xb
	movs r2, #7
	movs r3, #4
	bl sub_0804A4CC
	movs r0, #2
	bl EnableBgSync
	ldr r1, [r4, #0x2c]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, #0xb0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r1, #0x60
	movs r2, #1
	bl sub_080AA3F8
	ldr r0, _080A8138 @ =0x0200006C
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	movs r4, #0
	movs r5, #0
_080A8106:
	adds r0, r4, #0
	bl sub_080A7AC8
	bl DecodeMsg
	adds r3, r0, #0
	ldr r0, _080A813C @ =0x0200008C
	adds r1, r5, #0
	movs r2, #0
	bl Text_InsertDrawString
	adds r5, #0x18
	adds r4, #1
	cmp r4, #1
	ble _080A8106
	movs r0, #0
	bl SetTextFont
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A8134: .4byte gPlaySt
_080A8138: .4byte 0x0200006C
_080A813C: .4byte 0x0200008C

	thumb_func_start sub_080A8140
sub_080A8140: @ 0x080A8140
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r0, [r7, #0x2c]
	mov r8, r0
	ldr r6, _080A81E8 @ =0x0000F4C0
	movs r5, #0xb4
	movs r4, #2
_080A8154:
	str r6, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x60
	ldr r3, _080A81EC @ =0x08BFF7A8
	bl sub_080068C4
	adds r6, #4
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge _080A8154
	ldr r1, _080A81F0 @ =gpKeySt
	ldr r3, [r1]
	ldrh r2, [r3, #8]
	movs r5, #1
	adds r0, r5, #0
	ands r0, r2
	cmp r0, #0
	beq _080A8204
	ldr r5, _080A81F4 @ =gPlaySt
	adds r0, r5, #0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A8190
	ldr r0, _080A81F8 @ =0x0000038A
	bl m4aSongNumStart
_080A8190:
	ldr r1, [r7, #0x2c]
	adds r5, #0x2c
	movs r0, #1
	ands r1, r0
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r2, [r5]
	ands r0, r2
	orrs r0, r1
	strb r0, [r5]
	ldr r4, _080A81FC @ =0x0200006C
	adds r0, r4, #0
	bl SetTextFont
	movs r0, #1
	bl SetTextFontGlyphs
	ldr r0, _080A8200 @ =0x06011000
	movs r1, #0x10
	movs r2, #4
	bl sub_080A7AE8
	adds r4, #0x18
	ldrb r5, [r5]
	lsls r0, r5, #0x1f
	lsrs r0, r0, #0x1f
	bl sub_080A7AC8
	bl DecodeMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x80
	movs r2, #4
	bl Text_InsertDrawString
	movs r0, #0
	bl SetTextFont
	movs r0, #1
	bl EnableBgSync
	b _080A821E
	.align 2, 0
_080A81E8: .4byte 0x0000F4C0
_080A81EC: .4byte 0x08BFF7A8
_080A81F0: .4byte gpKeySt
_080A81F4: .4byte gPlaySt
_080A81F8: .4byte 0x0000038A
_080A81FC: .4byte 0x0200006C
_080A8200: .4byte 0x06011000
_080A8204:
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _080A8230
	ldr r0, _080A8228 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A821E
	ldr r0, _080A822C @ =0x0000038B
	bl m4aSongNumStart
_080A821E:
	adds r0, r7, #0
	bl Proc_Break
	b _080A82A4
	.align 2, 0
_080A8228: .4byte gPlaySt
_080A822C: .4byte 0x0000038B
_080A8230:
	movs r4, #0x20
	adds r0, r4, #0
	ldrh r3, [r3, #6]
	ands r0, r3
	cmp r0, #0
	beq _080A8252
	ldr r0, [r7, #0x2c]
	cmp r0, #0
	ble _080A8248
	subs r0, #1
	str r0, [r7, #0x2c]
	b _080A8252
_080A8248:
	adds r0, r4, #0
	ands r0, r2
	cmp r0, #0
	beq _080A8252
	str r5, [r7, #0x2c]
_080A8252:
	ldr r1, [r1]
	movs r2, #0x10
	adds r0, r2, #0
	ldrh r3, [r1, #6]
	ands r0, r3
	cmp r0, #0
	beq _080A8278
	ldr r0, [r7, #0x2c]
	cmp r0, #0
	bgt _080A826A
	adds r0, #1
	b _080A8276
_080A826A:
	adds r0, r2, #0
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080A8278
	movs r0, #0
_080A8276:
	str r0, [r7, #0x2c]
_080A8278:
	ldr r1, [r7, #0x2c]
	cmp r1, r8
	beq _080A82A4
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, #0xb0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r1, #0x60
	movs r2, #1
	bl sub_080AA3F8
	ldr r0, _080A82B0 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A82A4
	ldr r0, _080A82B4 @ =0x00000385
	bl m4aSongNumStart
_080A82A4:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A82B0: .4byte gPlaySt
_080A82B4: .4byte 0x00000385

	thumb_func_start sub_080A82B8
sub_080A82B8: @ 0x080A82B8
	push {r4, lr}
	ldr r0, _080A82E8 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r4, _080A82EC @ =0x0200006C
	adds r0, r4, #0
	bl SetTextFont
	adds r4, #0x20
	adds r0, r4, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	movs r0, #0
	bl SetTextFont
	movs r0, #2
	bl EnableBgSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A82E8: .4byte gBg1Tm
_080A82EC: .4byte 0x0200006C

	thumb_func_start sub_080A82F0
sub_080A82F0: @ 0x080A82F0
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A8300 @ =0x08DADFC8
	bl Proc_StartBlocking
	pop {r0}
	bx r0
	.align 2, 0
_080A8300: .4byte 0x08DADFC8

	thumb_func_start sub_080A8304
sub_080A8304: @ 0x080A8304
	push {r4, r5, r6, r7, lr}
	adds r2, r0, #0
	ldr r0, _080A8324 @ =0x02022BDA
	mov ip, r0
	ldr r0, _080A8328 @ =0x08434460
	ldrh r4, [r0]
	ldrh r7, [r0, #2]
	movs r0, #0x3f
	ands r2, r0
	cmp r2, #0x1f
	bgt _080A832C
	movs r0, #0x20
	subs r5, r0, r2
	adds r6, r2, #0
	b _080A8334
	.align 2, 0
_080A8324: .4byte 0x02022BDA
_080A8328: .4byte 0x08434460
_080A832C:
	adds r5, r2, #0
	subs r5, #0x20
	movs r0, #0x40
	subs r6, r0, r2
_080A8334:
	movs r3, #0x1f
	movs r1, #0x1f
	adds r0, r4, #0
	ands r0, r1
	adds r2, r0, #0
	muls r2, r5, r2
	adds r0, r7, #0
	ands r0, r1
	muls r0, r6, r0
	adds r2, r2, r0
	asrs r2, r2, #5
	ands r2, r3
	movs r3, #0xf8
	lsls r3, r3, #2
	adds r0, r4, #0
	ands r0, r3
	adds r1, r0, #0
	muls r1, r5, r1
	adds r0, r7, #0
	ands r0, r3
	muls r0, r6, r0
	adds r1, r1, r0
	asrs r1, r1, #5
	ands r1, r3
	adds r2, r2, r1
	movs r3, #0xf8
	lsls r3, r3, #7
	ands r4, r3
	adds r0, r4, #0
	muls r0, r5, r0
	ands r7, r3
	adds r1, r7, #0
	muls r1, r6, r1
	adds r0, r0, r1
	asrs r0, r0, #5
	ands r0, r3
	adds r2, r2, r0
	mov r0, ip
	strh r2, [r0]
	bl EnablePalSync
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080A838C
sub_080A838C: @ 0x080A838C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	str r0, [sp, #0xc]
	str r1, [sp, #0x10]
	mov r1, sp
	ldr r0, _080A84B8 @ =0x08439348
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	movs r0, #0
	mov sb, r0
	ldr r1, [sp, #0xc]
	cmp sb, r1
	bge _080A84A8
	ldr r2, _080A84BC @ =0x0201E8D4
	mov r8, r2
	movs r5, #0
	mov sl, r5
	mov r6, r8
	adds r6, #4
	mov r3, r8
	movs r4, #0
	str r4, [sp, #0x14]
	ldr r7, _080A84C0 @ =0x0201E97C
	adds r4, r7, #0
_080A83C4:
	movs r0, #0xa0
	lsls r0, r0, #1
	strh r0, [r3, #2]
	movs r0, #0x58
	strh r0, [r6]
	ldr r0, [sp, #0x10]
	add r0, sb
	ldrb r0, [r0]
	lsls r0, r0, #2
	add r0, sp
	ldr r0, [r0]
	strh r0, [r6, #2]
	movs r0, #6
	strh r0, [r6, #6]
	movs r0, #0
	strb r0, [r3, #1]
	movs r0, #1
	strh r0, [r6, #8]
	mov r1, sb
	lsls r0, r1, #0xd
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r0, r2
	asrs r0, r0, #5
	strh r0, [r6, #0xa]
	mov r0, sb
	adds r0, #0xd
	strh r0, [r6, #0xc]
	mov r1, r8
	adds r1, #0x1c
	ldr r0, [sp, #0x14]
	adds r0, r0, r1
	mov ip, r0
	ldr r0, _080A84C4 @ =0x08DADFF8
	mov r1, sb
	lsls r2, r1, #2
	adds r0, r2, r0
	ldr r0, [r0]
	mov r1, ip
	str r0, [r1]
	mov r1, r8
	adds r1, #0x24
	ldr r0, [sp, #0x14]
	adds r1, r0, r1
	ldr r0, _080A84C8 @ =0x08DAE004
	adds r0, r2, r0
	ldr r0, [r0]
	str r0, [r1]
	mov r1, r8
	adds r1, #0x20
	ldr r0, [sp, #0x14]
	adds r1, r0, r1
	ldr r0, _080A84CC @ =0x08DAE010
	adds r0, r2, r0
	ldr r0, [r0]
	str r0, [r1]
	mov r1, r8
	adds r1, #0x28
	ldr r0, [sp, #0x14]
	adds r1, r0, r1
	ldr r0, _080A84D0 @ =0x08DAE01C
	adds r2, r2, r0
	ldr r0, [r2]
	str r0, [r1]
	ldr r0, _080A84D4 @ =0x0000FFFF
	strh r0, [r6, #4]
	mov r1, sl
	adds r0, r1, r7
	str r0, [r6, #0x2c]
	strh r5, [r4]
	strh r5, [r4, #2]
	strh r5, [r4, #4]
	strh r5, [r4, #6]
	strh r5, [r4, #8]
	strh r5, [r4, #0xe]
	strh r5, [r4, #0x10]
	strh r5, [r4, #0xa]
	strh r5, [r4, #0xc]
	strh r5, [r4, #0x12]
	adds r0, r7, #0
	adds r0, #0x14
	add r0, sl
	str r5, [r0]
	adds r0, r7, #0
	adds r0, #0x18
	add r0, sl
	str r5, [r0]
	adds r0, r7, #0
	adds r0, #0x1c
	add r0, sl
	str r5, [r0]
	adds r0, r7, #0
	adds r0, #0x20
	add r0, sl
	str r5, [r0]
	str r5, [r4, #0x24]
	adds r0, r3, #0
	str r3, [sp, #0x18]
	bl sub_080556B0
	adds r4, #0x28
	movs r2, #0x28
	add sl, r2
	adds r6, #0x38
	ldr r3, [sp, #0x18]
	adds r3, #0x38
	ldr r0, [sp, #0x14]
	adds r0, #0x38
	str r0, [sp, #0x14]
	movs r1, #1
	add sb, r1
	ldr r2, [sp, #0xc]
	cmp sb, r2
	blt _080A83C4
_080A84A8:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A84B8: .4byte 0x08439348
_080A84BC: .4byte 0x0201E8D4
_080A84C0: .4byte 0x0201E97C
_080A84C4: .4byte 0x08DADFF8
_080A84C8: .4byte 0x08DAE004
_080A84CC: .4byte 0x08DAE010
_080A84D0: .4byte 0x08DAE01C
_080A84D4: .4byte 0x0000FFFF

	thumb_func_start sub_080A84D8
sub_080A84D8: @ 0x080A84D8
	push {r4, r5, lr}
	cmp r0, #0
	ble _080A84F0
	ldr r5, _080A84F8 @ =0x0201E8D4
	adds r4, r0, #0
_080A84E2:
	adds r0, r5, #0
	bl sub_080556D8
	adds r5, #0x38
	subs r4, #1
	cmp r4, #0
	bne _080A84E2
_080A84F0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A84F8: .4byte 0x0201E8D4

	thumb_func_start sub_080A84FC
sub_080A84FC: @ 0x080A84FC
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	sub sp, #8
	ldr r4, _080A8560 @ =0x020000E4
	adds r0, r4, #0
	bl ClearText
	movs r0, #8
	adds r0, r0, r4
	mov sb, r0
	bl ClearText
	ldr r5, _080A8564 @ =0x020236FC
	movs r0, #0
	mov r8, r0
	str r0, [sp]
	ldr r6, _080A8568 @ =0x08DAE0AC
	ldr r0, [r6, #0x24]
	str r0, [sp, #4]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	movs r0, #0x80
	lsls r0, r0, #1
	adds r5, r5, r0
	mov r0, r8
	str r0, [sp]
	ldr r0, [r6, #0x2c]
	str r0, [sp, #4]
	mov r0, sb
	adds r1, r5, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	movs r0, #2
	bl EnableBgSync
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A8560: .4byte 0x020000E4
_080A8564: .4byte 0x020236FC
_080A8568: .4byte 0x08DAE0AC

	thumb_func_start sub_080A856C
sub_080A856C: @ 0x080A856C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov sl, r0
	ldr r5, _080A8608 @ =0x020000CC
	adds r0, r5, #0
	bl ClearText
	adds r7, r5, #0
	adds r7, #8
	adds r0, r7, #0
	bl ClearText
	ldr r0, _080A860C @ =0x020000DC
	bl ClearText
	ldr r0, _080A8610 @ =0x02023704
	mov r8, r0
	movs r0, #0
	mov sb, r0
	str r0, [sp]
	ldr r6, _080A8614 @ =0x08DAE0AC
	mov r0, sl
	lsls r4, r0, #1
	add r4, sl
	lsls r4, r4, #2
	adds r0, r4, r6
	ldr r0, [r0]
	str r0, [sp, #4]
	adds r0, r5, #0
	mov r1, r8
	movs r2, #2
	movs r3, #0
	bl PutDrawText
	mov r1, r8
	adds r1, #0x78
	mov r0, sb
	str r0, [sp]
	adds r0, r6, #4
	adds r0, r4, r0
	ldr r0, [r0]
	str r0, [sp, #4]
	adds r0, r7, #0
	movs r2, #2
	movs r3, #0
	bl PutDrawText
	movs r0, #0x81
	lsls r0, r0, #1
	add r8, r0
	mov r0, sb
	str r0, [sp]
	adds r6, #8
	adds r4, r4, r6
	ldr r0, [r4]
	str r0, [sp, #4]
	ldr r0, _080A860C @ =0x020000DC
	mov r1, r8
	movs r2, #2
	movs r3, #0
	bl PutDrawText
	movs r0, #2
	bl EnableBgSync
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A8608: .4byte 0x020000CC
_080A860C: .4byte 0x020000DC
_080A8610: .4byte 0x02023704
_080A8614: .4byte 0x08DAE0AC

	thumb_func_start sub_080A8618
sub_080A8618: @ 0x080A8618
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r4, r0, #0
	adds r6, r4, #0
	adds r6, #0x41
	adds r0, #0x43
	ldrb r1, [r6]
	adds r0, r1, r0
	ldrb r7, [r0]
	ldr r5, _080A8674 @ =0x020000BC
	adds r0, r5, #0
	bl ClearText
	adds r0, r5, #0
	adds r0, #8
	bl ClearText
	ldr r1, _080A8678 @ =0x020235FE
	movs r2, #1
	cmp r7, #0
	bne _080A8644
	movs r2, #3
_080A8644:
	movs r0, #0
	str r0, [sp]
	ldr r0, _080A867C @ =0x084393C4
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r3, #0
	bl PutDrawText
	movs r0, #2
	bl EnableBgSync
	adds r0, r4, #0
	adds r0, #0x49
	ldrb r6, [r6]
	adds r0, r6, r0
	ldrb r0, [r0]
	cmp r0, #1
	beq _080A868E
	cmp r0, #1
	bgt _080A8680
	cmp r0, #0
	beq _080A8686
	b _080A86A4
	.align 2, 0
_080A8674: .4byte 0x020000BC
_080A8678: .4byte 0x020235FE
_080A867C: .4byte 0x084393C4
_080A8680:
	cmp r0, #2
	beq _080A8696
	b _080A86A4
_080A8686:
	adds r1, r4, #0
	adds r1, #0x40
	movs r0, #1
	b _080A869C
_080A868E:
	adds r1, r4, #0
	adds r1, #0x40
	movs r0, #4
	b _080A869C
_080A8696:
	adds r1, r4, #0
	adds r1, #0x40
	movs r0, #0x10
_080A869C:
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _080A86C0
_080A86A4:
	ldr r3, _080A86C8 @ =0x020000C4
	ldr r1, _080A86CC @ =0x0202367E
	movs r2, #1
	cmp r7, #1
	bne _080A86B0
	movs r2, #3
_080A86B0:
	movs r0, #0
	str r0, [sp]
	ldr r0, _080A86D0 @ =0x084393D0
	str r0, [sp, #4]
	adds r0, r3, #0
	movs r3, #0
	bl PutDrawText
_080A86C0:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A86C8: .4byte 0x020000C4
_080A86CC: .4byte 0x0202367E
_080A86D0: .4byte 0x084393D0

	thumb_func_start sub_080A86D4
sub_080A86D4: @ 0x080A86D4
	push {r4, r5, lr}
	sub sp, #0x10
	add r2, sp, #4
	ldr r1, _080A8708 @ =0x084393D8
	ldm r1!, {r3, r4, r5}
	stm r2!, {r3, r4, r5}
	lsls r0, r0, #2
	add r0, sp
	adds r0, #4
	ldr r1, [r0]
	movs r0, #0x42
	str r0, [sp]
	movs r0, #0
	movs r2, #0xcc
	movs r3, #0x48
	bl sub_08007A5C
	adds r4, r0, #0
	bl sub_080073AC
	adds r0, r4, #0
	add sp, #0x10
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080A8708: .4byte 0x084393D8

	thumb_func_start sub_080A870C
sub_080A870C: @ 0x080A870C
	push {r4, r5, lr}
	sub sp, #0x30
	adds r4, r0, #0
	mov r1, sp
	ldr r0, _080A8760 @ =0x084393E4
	ldm r0!, {r2, r3, r5}
	stm r1!, {r2, r3, r5}
	ldm r0!, {r2, r3, r5}
	stm r1!, {r2, r3, r5}
	ldm r0!, {r2, r3, r5}
	stm r1!, {r2, r3, r5}
	ldm r0!, {r2, r3, r5}
	stm r1!, {r2, r3, r5}
	lsls r4, r4, #4
	mov r1, sp
	adds r0, r1, r4
	ldr r0, [r0]
	ldr r1, _080A8764 @ =0x060102C0
	bl sub_08013688
	add r0, sp, #4
	adds r0, r0, r4
	ldr r0, [r0]
	ldr r1, _080A8768 @ =0x060106C0
	bl sub_08013688
	add r0, sp, #8
	adds r0, r0, r4
	ldr r0, [r0]
	ldr r1, _080A876C @ =0x06010AC0
	bl sub_08013688
	add r0, sp, #0xc
	adds r0, r0, r4
	ldr r0, [r0]
	ldr r1, _080A8770 @ =0x06010EC0
	bl sub_08013688
	add sp, #0x30
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A8760: .4byte 0x084393E4
_080A8764: .4byte 0x060102C0
_080A8768: .4byte 0x060106C0
_080A876C: .4byte 0x06010AC0
_080A8770: .4byte 0x06010EC0

	thumb_func_start sub_080A8774
sub_080A8774: @ 0x080A8774
	adds r1, r0, #0
	adds r1, #0xd
	lsls r1, r1, #5
	ldr r2, _080A879C @ =0x02022A62
	adds r3, r1, r2
	ldr r2, _080A87A0 @ =0x0201E9F4
	lsls r1, r0, #4
	subs r1, r1, r0
	lsls r1, r1, #1
	adds r1, r1, r2
	movs r2, #0xe
_080A878A:
	ldrh r0, [r3]
	strh r0, [r1]
	adds r3, #2
	adds r1, #2
	subs r2, #1
	cmp r2, #0
	bge _080A878A
	bx lr
	.align 2, 0
_080A879C: .4byte 0x02022A62
_080A87A0: .4byte 0x0201E9F4

	thumb_func_start sub_080A87A4
sub_080A87A4: @ 0x080A87A4
	push {r4, r5, r6, r7, lr}
	adds r2, r0, #0
	adds r4, r1, #0
	adds r0, #0xd
	lsls r0, r0, #5
	ldr r1, _080A87EC @ =0x02022A62
	adds r5, r0, r1
	cmp r4, #0x40
	ble _080A87B8
	movs r4, #0x40
_080A87B8:
	ldr r0, _080A87F0 @ =0x02000001
	ldrb r0, [r0]
	subs r0, #0xa
	lsls r0, r0, #1
	adds r4, r4, r0
	lsls r0, r2, #4
	ldr r1, _080A87F4 @ =0x0201E9F4
	subs r0, r0, r2
	movs r2, #0x1f
	mov ip, r2
	lsls r0, r0, #1
	adds r3, r0, r1
	movs r6, #0xe
_080A87D2:
	mov r0, ip
	ldrh r7, [r3]
	ands r0, r7
	muls r0, r4, r0
	asrs r0, r0, #6
	cmp r0, #0x1f
	bgt _080A87F8
	cmp r0, #0
	bge _080A87E6
	movs r0, #0
_080A87E6:
	mov r1, ip
	ands r1, r0
	b _080A87FA
	.align 2, 0
_080A87EC: .4byte 0x02022A62
_080A87F0: .4byte 0x02000001
_080A87F4: .4byte 0x0201E9F4
_080A87F8:
	movs r1, #0x1f
_080A87FA:
	movs r2, #0xf8
	lsls r2, r2, #2
	adds r0, r2, #0
	ldrh r7, [r3]
	ands r0, r7
	muls r0, r4, r0
	asrs r0, r0, #6
	cmp r0, r2
	bgt _080A8818
	cmp r0, #0
	bge _080A8812
	movs r0, #0
_080A8812:
	ands r0, r2
	adds r1, r1, r0
	b _080A881A
_080A8818:
	adds r1, r1, r2
_080A881A:
	movs r2, #0xf8
	lsls r2, r2, #7
	adds r0, r2, #0
	ldrh r7, [r3]
	ands r0, r7
	muls r0, r4, r0
	asrs r0, r0, #6
	cmp r0, r2
	bgt _080A8838
	cmp r0, #0
	bge _080A8832
	movs r0, #0
_080A8832:
	ands r0, r2
	adds r0, r1, r0
	b _080A883A
_080A8838:
	adds r0, r1, r2
_080A883A:
	strh r0, [r5]
	adds r5, #2
	adds r3, #2
	subs r6, #1
	cmp r6, #0
	bge _080A87D2
	bl EnablePalSync
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080A8850
sub_080A8850: @ 0x080A8850
	push {lr}
	adds r3, r0, #0
	adds r2, r1, #0
	movs r0, #0xff
	ands r2, r0
	cmp r2, #0x80
	ble _080A8864
	adds r1, r2, #0
	subs r1, #0x80
	b _080A8868
_080A8864:
	movs r1, #0x80
	subs r1, r1, r2
_080A8868:
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #4
	asrs r0, r0, #7
	adds r1, r0, #0
	adds r1, #0x10
	adds r0, r3, #0
	bl sub_080A87A4
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A8880
sub_080A8880: @ 0x080A8880
	push {r4, lr}
	mov ip, r0
	movs r1, #0
	str r1, [r0, #0x30]
	movs r2, #0
	strh r1, [r0, #0x3e]
	mov r3, ip
	adds r3, #0x3c
	strb r2, [r3]
	movs r0, #0x78
	mov r4, ip
	str r0, [r4, #0x34]
	movs r0, #0xa0
	str r0, [r4, #0x38]
	str r1, [r4, #0x40]
	str r1, [r4, #0x44]
	strb r2, [r3]
	str r1, [r4, #0x48]
	mov r0, ip
	adds r0, #0x4c
	strb r2, [r0]
	str r1, [r4, #0x2c]
	adds r0, #2
	strb r2, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A88B8
sub_080A88B8: @ 0x080A88B8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r5, r0, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	cmp r0, #0
	beq _080A893E
	movs r4, #0
	ldr r0, [r5, #0x40]
	cmp r4, r0
	bge _080A893E
	ldr r0, _080A89A4 @ =gSinLut
	mov r8, r0
	movs r6, #0
_080A88D8:
	ldrh r7, [r5, #0x3e]
	lsrs r3, r7, #4
	ldr r0, [r5, #0x44]
	muls r0, r4, r0
	adds r3, r3, r0
	adds r3, #0x28
	ldr r1, [r5, #0x34]
	lsls r1, r1, #0xc
	movs r0, #0xff
	ands r3, r0
	lsls r0, r3, #1
	add r0, r8
	movs r7, #0
	ldrsh r2, [r0, r7]
	movs r0, #0x46
	muls r0, r2, r0
	adds r1, r1, r0
	ldr r2, [r5, #0x38]
	lsls r2, r2, #0xc
	adds r3, #0x40
	lsls r3, r3, #1
	add r3, r8
	movs r0, #0
	ldrsh r3, [r3, r0]
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #2
	adds r2, r2, r0
	asrs r2, r2, #0xc
	subs r2, #0x10
	ldr r0, _080A89A8 @ =0x0201E8D4
	adds r0, r6, r0
	lsls r1, r1, #4
	asrs r1, r1, #0x10
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	bl sub_080555F8
	ldrh r7, [r5, #0x3e]
	lsrs r1, r7, #4
	ldr r0, [r5, #0x44]
	muls r0, r4, r0
	adds r1, r1, r0
	adds r0, r4, #0
	bl sub_080A8850
	adds r6, #0x38
	adds r4, #1
	ldr r0, [r5, #0x40]
	cmp r4, r0
	blt _080A88D8
_080A893E:
	movs r0, #0x3e
	ldrsh r1, [r5, r0]
	movs r0, #0xb0
	lsls r0, r0, #1
	str r0, [sp]
	str r0, [sp, #4]
	movs r0, #2
	movs r2, #0
	movs r3, #0
	bl sub_080AACB0
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x80
	lsls r2, r2, #1
	movs r0, #2
	bl sub_080AAD44
	movs r7, #0x34
	ldrsh r1, [r5, r7]
	movs r0, #0x38
	ldrsh r2, [r5, r0]
	movs r0, #0x4c
	str r0, [sp]
	movs r0, #2
	movs r3, #0x4c
	bl sub_080AAD94
	ldr r4, _080A89AC @ =0x02000001
	ldr r0, [r5, #0x48]
	str r0, [sp]
	movs r0, #8
	movs r1, #8
	movs r2, #0x10
	movs r3, #0x10
	bl sub_080A95B4
	strb r0, [r4]
	adds r2, r5, #0
	adds r2, #0x4c
	ldrb r0, [r2]
	cmp r0, #0
	bne _080A89B4
	ldr r0, [r5, #0x48]
	adds r0, #8
	str r0, [r5, #0x48]
	ldr r1, _080A89B0 @ =0x000003FF
	cmp r0, r1
	ble _080A89C2
	movs r0, #1
	b _080A89C0
	.align 2, 0
_080A89A4: .4byte gSinLut
_080A89A8: .4byte 0x0201E8D4
_080A89AC: .4byte 0x02000001
_080A89B0: .4byte 0x000003FF
_080A89B4:
	ldr r0, [r5, #0x48]
	subs r0, #8
	str r0, [r5, #0x48]
	cmp r0, #0
	bgt _080A89C2
	movs r0, #0
_080A89C0:
	strb r0, [r2]
_080A89C2:
	adds r1, r5, #0
	adds r1, #0x4e
	movs r0, #2
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _080A89EA
	adds r0, r5, #0
	adds r0, #0x4d
	movs r1, #1
	ldrb r0, [r0]
	ands r1, r0
	lsls r1, r1, #4
	adds r1, #0x38
	movs r2, #0xbc
	lsls r2, r2, #4
	movs r0, #0x6c
	bl sub_0804A9D0
	b _080A89FE
_080A89EA:
	adds r0, r5, #0
	adds r0, #0x4d
	ldrb r0, [r0]
	lsls r1, r0, #4
	adds r1, #0x38
	movs r2, #0xbc
	lsls r2, r2, #4
	movs r0, #0x6c
	bl sub_0804A95C
_080A89FE:
	ldr r3, _080A8A7C @ =0x08DAE028
	movs r4, #0xb0
	lsls r4, r4, #8
	str r4, [sp]
	movs r0, #0xd
	movs r1, #0
	movs r2, #8
	bl sub_080068C4
	ldr r3, _080A8A80 @ =0x08DAE042
	str r4, [sp]
	movs r0, #0xd
	movs r1, #0x14
	movs r2, #0x1c
	bl sub_080068C4
	ldr r3, _080A8A84 @ =0x08DAE088
	str r4, [sp]
	movs r0, #0xd
	movs r1, #0x28
	movs r2, #0x40
	bl sub_080068C4
	ldr r0, [r5, #0x2c]
	asrs r0, r0, #2
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	bne _080A8A46
	ldr r3, _080A8A88 @ =0x08DAE068
	str r4, [sp]
	movs r0, #0xd
	movs r1, #8
	movs r2, #0x82
	bl sub_080068C4
_080A8A46:
	ldr r0, [r5, #0x2c]
	cmp r0, #0
	beq _080A8A50
	adds r0, #1
	str r0, [r5, #0x2c]
_080A8A50:
	ldr r3, _080A8A8C @ =0x08DAE090
	movs r0, #0xa0
	lsls r0, r0, #8
	str r0, [sp]
	movs r0, #0xd
	movs r1, #0x6c
	movs r2, #0x18
	bl sub_080068C4
	ldr r0, [r5, #0x30]
	bl sub_080A8304
	ldr r0, [r5, #0x30]
	adds r0, #1
	str r0, [r5, #0x30]
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A8A7C: .4byte 0x08DAE028
_080A8A80: .4byte 0x08DAE042
_080A8A84: .4byte 0x08DAE088
_080A8A88: .4byte 0x08DAE068
_080A8A8C: .4byte 0x08DAE090

	thumb_func_start sub_080A8A90
sub_080A8A90: @ 0x080A8A90
	push {lr}
	ldr r0, _080A8AA8 @ =0x08DAE0DC
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	beq _080A8AA2
	movs r0, #1
	str r0, [r1, #0x2c]
_080A8AA2:
	pop {r0}
	bx r0
	.align 2, 0
_080A8AA8: .4byte 0x08DAE0DC

	thumb_func_start sub_080A8AAC
sub_080A8AAC: @ 0x080A8AAC
	push {lr}
	ldr r0, _080A8AC4 @ =0x08DAE0DC
	bl Proc_Find
	cmp r0, #0
	beq _080A8AC0
	adds r1, r0, #0
	adds r1, #0x3c
	movs r0, #1
	strb r0, [r1]
_080A8AC0:
	pop {r0}
	bx r0
	.align 2, 0
_080A8AC4: .4byte 0x08DAE0DC

	thumb_func_start sub_080A8AC8
sub_080A8AC8: @ 0x080A8AC8
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _080A8AEC @ =0x08DAE0DC
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	beq _080A8AE6
	str r5, [r4, #0x40]
	movs r0, #0x80
	lsls r0, r0, #1
	adds r1, r5, #0
	bl __divsi3
	str r0, [r4, #0x44]
_080A8AE6:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A8AEC: .4byte 0x08DAE0DC

	thumb_func_start sub_080A8AF0
sub_080A8AF0: @ 0x080A8AF0
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r0, _080A8B14 @ =0x08DAE0DC
	bl Proc_Find
	cmp r0, #0
	beq _080A8B04
	str r5, [r0, #0x34]
	str r4, [r0, #0x38]
_080A8B04:
	ldr r1, _080A8B18 @ =gAnims
	adds r0, r4, #0
	subs r0, #0x3c
	strb r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A8B14: .4byte 0x08DAE0DC
_080A8B18: .4byte gAnims

	thumb_func_start sub_080A8B1C
sub_080A8B1C: @ 0x080A8B1C
	push {r4, lr}
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	ldr r0, _080A8B34 @ =0x08DAE0DC
	bl Proc_Find
	cmp r0, #0
	beq _080A8B2E
	strh r4, [r0, #0x3e]
_080A8B2E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A8B34: .4byte 0x08DAE0DC

	thumb_func_start sub_080A8B38
sub_080A8B38: @ 0x080A8B38
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r5, r1, #0x18
	ldr r0, _080A8B5C @ =0x08DAE0DC
	bl Proc_Find
	cmp r0, #0
	beq _080A8B56
	adds r1, r0, #0
	adds r1, #0x4d
	strb r4, [r1]
	adds r0, #0x4e
	strb r5, [r0]
_080A8B56:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A8B5C: .4byte 0x08DAE0DC

	thumb_func_start sub_080A8B60
sub_080A8B60: @ 0x080A8B60
	push {lr}
	ldr r0, _080A8B70 @ =0x08DAE0DC
	bl Proc_Find
	ldr r0, [r0, #0x44]
	pop {r1}
	bx r1
	.align 2, 0
_080A8B70: .4byte 0x08DAE0DC

	thumb_func_start sub_080A8B74
sub_080A8B74: @ 0x080A8B74
	cmp r0, #0
	beq _080A8B7C
	strh r1, [r0, #0x34]
	strh r2, [r0, #0x36]
_080A8B7C:
	bx lr
	.align 2, 0

	thumb_func_start sub_080A8B80
sub_080A8B80: @ 0x080A8B80
	push {lr}
	adds r0, #0x42
	movs r1, #1
	ldrb r0, [r0]
	ands r1, r0
	cmp r1, #0
	beq _080A8B92
	bl sub_080A5B44
_080A8B92:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A8B98
sub_080A8B98: @ 0x080A8B98
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r6, r0, #0
	bl sub_08015A0C
	ldr r2, _080A8CC8 @ =0x0000FFF8
	movs r0, #1
	movs r1, #8
	bl SetBgOffset
	movs r0, #0xc
	bl sub_080046C4
	movs r0, #0xd
	bl sub_080046C4
	ldr r1, _080A8CCC @ =gAnims
	movs r0, #0x64
	strb r0, [r1]
	ldr r0, _080A8CD0 @ =0x08DAE0FC
	bl sub_080069E0
	ldr r0, _080A8CD4 @ =0x084352DC
	movs r1, #0xf0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r4, _080A8CD8 @ =0x08434DD0
	movs r0, #1
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl sub_08013688
	ldr r0, _080A8CDC @ =gBg0Tm
	ldr r1, _080A8CE0 @ =0x08434468
	movs r2, #0
	bl TmApplyTsa_thm
	ldr r0, _080A8CE4 @ =gBg1Tm
	ldr r1, _080A8CE8 @ =0x084352FC
	movs r2, #0xf0
	lsls r2, r2, #8
	bl TmApplyTsa_thm
	ldr r0, _080A8CEC @ =0x08434448
	movs r1, #0xd8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080A8CF0 @ =0x08433CC8
	ldr r1, _080A8CF4 @ =0x06010000
	bl sub_08013688
	ldr r0, _080A8CF8 @ =0x08436460
	movs r1, #0xd0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	bl sub_08055670
	bl sub_080647C8
	ldr r0, _080A8CFC @ =0x08DAE0DC
	adds r1, r6, #0
	bl Proc_Start
	str r0, [r6, #0x38]
	movs r0, #0
	movs r1, #0x70
	bl sub_080A8AF0
	movs r1, #0x41
	adds r1, r1, r6
	mov sl, r1
	movs r0, #0
	strb r0, [r1]
	adds r5, r6, #0
	adds r5, #0x4c
	strb r0, [r5]
	bl sub_0809F40C
	adds r2, r6, #0
	adds r2, #0x40
	strb r0, [r2]
	adds r3, r6, #0
	adds r3, #0x42
	movs r4, #1
	adds r0, r4, #0
	ldrb r7, [r3]
	ands r0, r7
	cmp r0, #0
	beq _080A8D08
	ldr r0, _080A8D00 @ =0x08439414
	ldr r1, [r0, #4]
	ldr r0, [r0]
	str r0, [sp, #4]
	str r1, [sp, #8]
	movs r0, #2
	strb r0, [r5]
	adds r1, r6, #0
	adds r1, #0x49
	strb r4, [r1]
	adds r2, #0xa
	strb r0, [r2]
	movs r4, #0
	str r3, [sp, #0xc]
	mov r8, r1
	adds r7, r6, #0
	adds r7, #0x43
	ldrb r0, [r5]
	cmp r4, r0
	bge _080A8D68
	adds r2, r7, #0
_080A8C92:
	ldr r1, _080A8D04 @ =gPlaySt
	movs r0, #0x40
	ldrb r1, [r1, #0x14]
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	beq _080A8CB8
	adds r1, r6, #0
	adds r1, #0x40
	lsls r0, r4, #2
	add r0, sp
	adds r0, #4
	ldr r0, [r0]
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _080A8CB8
	movs r0, #1
_080A8CB8:
	strb r0, [r2]
	adds r2, #1
	adds r4, #1
	ldrb r1, [r5]
	cmp r4, r1
	blt _080A8C92
	b _080A8D68
	.align 2, 0
_080A8CC8: .4byte 0x0000FFF8
_080A8CCC: .4byte gAnims
_080A8CD0: .4byte 0x08DAE0FC
_080A8CD4: .4byte 0x084352DC
_080A8CD8: .4byte 0x08434DD0
_080A8CDC: .4byte gBg0Tm
_080A8CE0: .4byte 0x08434468
_080A8CE4: .4byte gBg1Tm
_080A8CE8: .4byte 0x084352FC
_080A8CEC: .4byte 0x08434448
_080A8CF0: .4byte 0x08433CC8
_080A8CF4: .4byte 0x06010000
_080A8CF8: .4byte 0x08436460
_080A8CFC: .4byte 0x08DAE0DC
_080A8D00: .4byte 0x08439414
_080A8D04: .4byte gPlaySt
_080A8D08:
	adds r1, r6, #0
	adds r1, #0x49
	strb r0, [r1]
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	movs r7, #2
	mov sb, r7
	mov r0, sb
	ldrb r7, [r2]
	ands r0, r7
	mov r8, r1
	cmp r0, #0
	beq _080A8D30
	ldrb r0, [r5]
	add r0, r8
	strb r4, [r0]
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
_080A8D30:
	movs r0, #8
	ldrb r2, [r2]
	ands r0, r2
	cmp r0, #0
	beq _080A8D48
	ldrb r0, [r5]
	add r0, r8
	mov r1, sb
	strb r1, [r0]
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
_080A8D48:
	movs r4, #0
	str r3, [sp, #0xc]
	adds r7, r6, #0
	adds r7, #0x43
	ldrb r2, [r5]
	cmp r4, r2
	bge _080A8D68
	adds r2, r7, #0
	movs r3, #0
	adds r1, r5, #0
_080A8D5C:
	adds r0, r2, r4
	strb r3, [r0]
	adds r4, #1
	ldrb r0, [r1]
	cmp r4, r0
	blt _080A8D5C
_080A8D68:
	ldrb r0, [r5]
	bl sub_080A8AC8
	ldrb r0, [r5]
	mov r1, r8
	bl sub_080A838C
	movs r4, #0
	ldrb r1, [r5]
	cmp r4, r1
	bge _080A8D8C
_080A8D7E:
	adds r0, r4, #0
	bl sub_080A8774
	adds r4, #1
	ldrb r2, [r5]
	cmp r4, r2
	blt _080A8D7E
_080A8D8C:
	bl sub_080A8AAC
	adds r0, r6, #0
	bl sub_080A9BE8
	movs r4, #0xd2
	lsls r4, r4, #4
	movs r0, #0
	adds r1, r4, #0
	movs r2, #9
	bl sub_080A9BFC
	movs r0, #0
	adds r1, r4, #0
	movs r2, #9
	bl sub_080A9BFC
	movs r0, #0x1e
	movs r1, #0x3d
	movs r2, #0x44
	movs r3, #0x3d
	bl sub_080A9C84
	movs r0, #3
	bl sub_080A9C68
	ldr r4, _080A8F58 @ =0x020000A4
	ldr r1, _080A8F5C @ =0x0600E000
	movs r0, #0x80
	lsls r0, r0, #1
	mov sb, r0
	adds r0, r4, #0
	mov r2, sb
	movs r3, #0xe
	bl InitTextFont
	adds r0, r4, #0
	adds r0, #0x18
	movs r1, #5
	bl InitText
	adds r0, r4, #0
	adds r0, #0x20
	movs r1, #9
	bl InitText
	adds r0, r4, #0
	adds r0, #0x28
	movs r1, #5
	bl InitText
	adds r0, r4, #0
	adds r0, #0x30
	movs r1, #8
	bl InitText
	adds r0, r4, #0
	adds r0, #0x38
	movs r1, #2
	bl InitText
	adds r0, r4, #0
	adds r0, #0x40
	movs r1, #4
	bl InitText
	adds r0, r4, #0
	adds r0, #0x48
	movs r1, #5
	bl InitText
	bl sub_080A8B60
	mov r1, sl
	ldrb r1, [r1]
	muls r0, r1, r0
	lsls r0, r0, #4
	movs r5, #0
	movs r4, #0
	strh r0, [r6, #0x30]
	mov r2, sl
	ldrb r0, [r2]
	add r0, r8
	ldrb r0, [r0]
	bl sub_080A86D4
	str r0, [r6, #0x3c]
	bl sub_080A84FC
	mov r1, sl
	ldrb r0, [r1]
	add r0, r8
	ldrb r0, [r0]
	bl sub_080A856C
	adds r0, r6, #0
	bl sub_080A8618
	mov r2, sl
	ldrb r2, [r2]
	adds r0, r2, r7
	ldrb r0, [r0]
	ldr r7, [sp, #0xc]
	ldrb r1, [r7]
	bl sub_080A8B38
	ldrh r0, [r6, #0x30]
	bl sub_080A8B1C
	movs r0, #3
	bl EnableBgSync
	str r4, [r6, #0x2c]
	str r4, [r6, #0x50]
	ldr r3, _080A8F60 @ =gDispIo
	movs r0, #0x20
	ldrb r1, [r3, #1]
	orrs r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r3, #1]
	adds r2, r3, #0
	adds r2, #0x34
	movs r0, #1
	ldrb r7, [r2]
	orrs r0, r7
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x2d
	strb r5, [r0]
	adds r0, #4
	movs r2, #0x50
	strb r2, [r0]
	adds r1, r3, #0
	adds r1, #0x2c
	movs r0, #0xf0
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x30
	strb r2, [r0]
	adds r2, r3, #0
	adds r2, #0x36
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2]
	mov r2, sl
	ldrb r0, [r2]
	add r0, r8
	ldrb r0, [r0]
	bl sub_080A870C
	ldr r4, _080A8F64 @ =gSinLut
	movs r7, #0x80
	adds r7, r7, r4
	mov r8, r7
	movs r1, #0
	ldrsh r0, [r7, r1]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r7, #0
	ldrsh r0, [r4, r7]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, r8
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A8F58: .4byte 0x020000A4
_080A8F5C: .4byte 0x0600E000
_080A8F60: .4byte gDispIo
_080A8F64: .4byte gSinLut

	thumb_func_start sub_080A8F68
sub_080A8F68: @ 0x080A8F68
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x2c]
	adds r4, r0, #1
	str r4, [r5, #0x2c]
	ldr r3, _080A8FD4 @ =gDispIo
	movs r0, #1
	ldrb r1, [r3, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r3, #1]
	movs r1, #0x10
	subs r1, r1, r4
	lsls r0, r1, #3
	adds r0, r0, r1
	lsls r0, r0, #3
	muls r0, r1, r0
	cmp r0, #0
	bge _080A8F9E
	adds r0, #0xff
_080A8F9E:
	asrs r0, r0, #8
	movs r1, #0x48
	subs r1, r1, r0
	adds r2, r3, #0
	adds r2, #0x2d
	movs r0, #0
	strb r0, [r2]
	movs r0, #0x50
	subs r0, r0, r1
	adds r2, #4
	strb r0, [r2]
	subs r2, #5
	movs r0, #0xf0
	strb r0, [r2]
	adds r1, #0x50
	adds r0, r3, #0
	adds r0, #0x30
	strb r1, [r0]
	cmp r4, #0x10
	bne _080A8FCC
	adds r0, r5, #0
	bl Proc_Break
_080A8FCC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A8FD4: .4byte gDispIo

	thumb_func_start sub_080A8FD8
sub_080A8FD8: @ 0x080A8FD8
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x2c]
	adds r4, r0, #1
	str r4, [r5, #0x2c]
	movs r1, #0x10
	subs r1, r1, r4
	lsls r0, r1, #3
	adds r0, r0, r1
	lsls r0, r0, #3
	muls r0, r1, r0
	cmp r0, #0
	bge _080A8FF4
	adds r0, #0xff
_080A8FF4:
	asrs r0, r0, #8
	movs r2, #0x48
	subs r2, r2, r0
	ldr r3, _080A9030 @ =gDispIo
	adds r1, r3, #0
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #8
	adds r1, #4
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	movs r1, #0x68
	rsbs r1, r1, #0
	adds r0, r1, #0
	subs r0, r0, r2
	adds r1, r3, #0
	adds r1, #0x30
	strb r0, [r1]
	cmp r4, #0x10
	bne _080A902A
	adds r0, r5, #0
	bl Proc_Break
_080A902A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A9030: .4byte gDispIo

	thumb_func_start sub_080A9034
sub_080A9034: @ 0x080A9034
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	movs r4, #0
	adds r0, #0x4c
	ldrb r1, [r0]
	cmp r4, r1
	bge _080A9056
	ldr r5, _080A9060 @ =0x0201E8D4
	adds r6, r0, #0
_080A9046:
	adds r0, r5, #0
	bl sub_08055644
	adds r5, #0x38
	adds r4, #1
	ldrb r0, [r6]
	cmp r4, r0
	blt _080A9046
_080A9056:
	movs r0, #0
	str r0, [r7, #0x50]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A9060: .4byte 0x0201E8D4

	thumb_func_start sub_080A9064
sub_080A9064: @ 0x080A9064
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r1, r4, #0
	adds r1, #0x41
	adds r0, #0x43
	ldrb r1, [r1]
	adds r0, r1, r0
	strb r5, [r0]
	adds r0, r4, #0
	bl sub_080A8618
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	adds r4, #0x42
	ldrb r1, [r4]
	adds r0, r5, #0
	bl sub_080A8B38
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080A9090
sub_080A9090: @ 0x080A9090
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r2, _080A90D0 @ =gpKeySt
	ldr r1, [r2]
	movs r0, #0x40
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _080A90DC
	adds r1, r4, #0
	adds r1, #0x41
	adds r0, r4, #0
	adds r0, #0x43
	ldrb r1, [r1]
	adds r0, r1, r0
	ldrb r0, [r0]
	cmp r0, #1
	bne _080A90DC
	ldr r0, _080A90D4 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A90C6
	ldr r0, _080A90D8 @ =0x00000386
	bl m4aSongNumStart
_080A90C6:
	adds r0, r4, #0
	movs r1, #0
	bl sub_080A9064
	b _080A9322
	.align 2, 0
_080A90D0: .4byte gpKeySt
_080A90D4: .4byte gPlaySt
_080A90D8: .4byte 0x00000386
_080A90DC:
	ldr r1, [r2]
	movs r0, #0x80
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _080A9188
	adds r0, r4, #0
	adds r0, #0x41
	ldrb r3, [r0]
	adds r1, r4, #0
	adds r1, #0x43
	adds r1, r1, r3
	ldrb r1, [r1]
	adds r5, r0, #0
	cmp r1, #0
	bne _080A9188
	adds r0, #8
	adds r1, r0, r3
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	bne _080A9116
	adds r1, r4, #0
	adds r1, #0x40
	movs r0, #1
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _080A9146
_080A9116:
	ldrb r1, [r5]
	adds r0, r1, r2
	ldrb r0, [r0]
	cmp r0, #1
	bne _080A912E
	adds r1, r4, #0
	adds r1, #0x40
	movs r0, #4
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _080A9146
_080A912E:
	ldrb r5, [r5]
	adds r0, r5, r2
	ldrb r0, [r0]
	cmp r0, #2
	bne _080A9164
	adds r1, r4, #0
	adds r1, #0x40
	movs r0, #0x10
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _080A9164
_080A9146:
	ldr r0, _080A9160 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _080A9154
	b _080A9322
_080A9154:
	movs r0, #0xe3
	lsls r0, r0, #2
	bl m4aSongNumStart
	b _080A9322
	.align 2, 0
_080A9160: .4byte gPlaySt
_080A9164:
	ldr r0, _080A9180 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A9176
	ldr r0, _080A9184 @ =0x00000386
	bl m4aSongNumStart
_080A9176:
	adds r0, r4, #0
	movs r1, #1
	bl sub_080A9064
	b _080A9322
	.align 2, 0
_080A9180: .4byte gPlaySt
_080A9184: .4byte 0x00000386
_080A9188:
	ldr r1, [r2]
	ldrh r3, [r1, #4]
	movs r0, #0x88
	lsls r0, r0, #2
	ands r0, r3
	cmp r0, #0
	beq _080A91A2
	adds r0, r4, #0
	movs r1, #1
	bl Proc_Goto
	movs r0, #0
	b _080A91B6
_080A91A2:
	movs r7, #0x88
	lsls r7, r7, #1
	ands r7, r3
	cmp r7, #0
	beq _080A91DC
	adds r0, r4, #0
	movs r1, #2
	bl Proc_Goto
	movs r0, #1
_080A91B6:
	bl sub_080A9CAC
	ldr r0, _080A91D4 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A91CC
	ldr r0, _080A91D8 @ =0x00000387
	bl m4aSongNumStart
_080A91CC:
	adds r0, r4, #0
	bl sub_080A9034
	b _080A9322
	.align 2, 0
_080A91D4: .4byte gPlaySt
_080A91D8: .4byte 0x00000387
_080A91DC:
	ldrh r1, [r1, #8]
	movs r0, #9
	ands r0, r1
	cmp r0, #0
	beq _080A929C
	str r7, [r4, #0x2c]
	ldr r6, _080A925C @ =gPlaySt
	adds r0, r6, #0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A91FC
	ldr r0, _080A9260 @ =0x0000038A
	bl m4aSongNumStart
_080A91FC:
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
	ldr r1, _080A9264 @ =0x0201E8D4
	adds r5, r4, #0
	adds r5, #0x41
	ldrb r2, [r5]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, r0, r1
	strh r7, [r0, #0xa]
	ldrb r2, [r5]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, r0, r1
	bl sub_08055474
	adds r7, r4, #0
	adds r7, #0x42
	movs r0, #1
	ldrb r1, [r7]
	ands r0, r1
	cmp r0, #0
	beq _080A9272
	ldrb r1, [r5]
	cmp r1, #0
	bne _080A923C
	movs r0, #2
	strb r0, [r6, #0x1b]
_080A923C:
	cmp r1, #1
	bne _080A9244
	movs r0, #3
	strb r0, [r6, #0x1b]
_080A9244:
	adds r0, r4, #0
	adds r0, #0x43
	ldrb r5, [r5]
	adds r0, r5, r0
	ldrb r0, [r0]
	cmp r0, #0
	beq _080A9268
	movs r0, #0x40
	ldrb r2, [r6, #0x14]
	orrs r0, r2
	strb r0, [r6, #0x14]
	b _080A9296
	.align 2, 0
_080A925C: .4byte gPlaySt
_080A9260: .4byte 0x0000038A
_080A9264: .4byte 0x0201E8D4
_080A9268:
	movs r0, #0xbf
	ldrb r1, [r6, #0x14]
	ands r0, r1
	strb r0, [r6, #0x14]
	b _080A9296
_080A9272:
	ldrb r1, [r5]
	adds r0, r4, #0
	adds r0, #0x49
	adds r0, r0, r1
	ldrb r0, [r0]
	adds r4, #0x43
	adds r1, r4, r1
	ldrb r1, [r1]
	bl sub_080A5B20
	ldrb r5, [r5]
	adds r4, r5, r4
	ldrb r0, [r4]
	movs r1, #2
	ldrb r7, [r7]
	orrs r1, r7
	bl sub_080A8B38
_080A9296:
	bl sub_080A8A90
	b _080A9322
_080A929C:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080A92D6
	adds r0, r4, #0
	adds r0, #0x42
	movs r1, #1
	ldrb r0, [r0]
	ands r1, r0
	cmp r1, #0
	bne _080A92D6
	str r1, [r4, #0x2c]
	ldr r0, _080A9328 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A92C6
	ldr r0, _080A932C @ =0x0000038B
	bl m4aSongNumStart
_080A92C6:
	adds r0, r4, #0
	movs r1, #4
	bl Proc_Goto
	movs r0, #3
	movs r1, #0
	bl sub_080A5B20
_080A92D6:
	ldr r0, [r4, #0x50]
	adds r0, #1
	str r0, [r4, #0x50]
	ldr r5, _080A9330 @ =0x000001FF
	ands r0, r5
	cmp r0, #0x20
	bne _080A9306
	ldr r2, _080A9334 @ =0x0201E8D4
	adds r3, r4, #0
	adds r3, #0x41
	ldrb r1, [r3]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	movs r1, #2
	strh r1, [r0, #0xa]
	ldrb r1, [r3]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	bl sub_08055474
_080A9306:
	ldr r0, [r4, #0x50]
	ands r0, r5
	cmp r0, #0x80
	bne _080A9322
	adds r1, r4, #0
	adds r1, #0x41
	ldrb r2, [r1]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	ldr r1, _080A9334 @ =0x0201E8D4
	adds r0, r0, r1
	bl sub_08055644
_080A9322:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A9328: .4byte gPlaySt
_080A932C: .4byte 0x0000038B
_080A9330: .4byte 0x000001FF
_080A9334: .4byte 0x0201E8D4

	thumb_func_start sub_080A9338
sub_080A9338: @ 0x080A9338
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r4, #0x34]
	movs r0, #0
	str r0, [r4, #0x2c]
	ldr r0, [r4, #0x3c]
	bl sub_080073F4
	adds r1, r4, #0
	adds r1, #0x41
	ldrb r0, [r1]
	cmp r0, #0
	bne _080A935C
	adds r0, r4, #0
	adds r0, #0x4c
	ldrb r0, [r0]
_080A935C:
	subs r0, #1
	strb r0, [r1]
	bl sub_080A8B60
	adds r2, r4, #0
	adds r2, #0x41
	ldrb r3, [r2]
	adds r1, r3, #0
	muls r1, r0, r1
	movs r3, #0x80
	lsls r3, r3, #1
	adds r0, r3, #0
	subs r0, r0, r1
	lsls r0, r0, #4
	strh r0, [r4, #0x32]
	adds r0, r4, #0
	adds r0, #0x43
	ldrb r2, [r2]
	adds r0, r2, r0
	ldrb r1, [r0]
	adds r0, r4, #0
	bl sub_080A9064
	ldrh r0, [r4, #0x32]
	ldrh r1, [r4, #0x30]
	cmp r0, r1
	bhs _080A939A
	movs r3, #0x80
	lsls r3, r3, #5
	adds r0, r0, r3
	strh r0, [r4, #0x32]
_080A939A:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080A93A0
sub_080A93A0: @ 0x080A93A0
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r0, #1
	str r0, [r4, #0x34]
	movs r5, #0
	str r5, [r4, #0x2c]
	ldr r0, [r4, #0x3c]
	bl sub_080073F4
	adds r1, r4, #0
	adds r1, #0x41
	ldrb r2, [r1]
	adds r0, r4, #0
	adds r0, #0x4c
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	bge _080A93CA
	adds r0, r2, #1
	strb r0, [r1]
	b _080A93CC
_080A93CA:
	strb r5, [r1]
_080A93CC:
	bl sub_080A8B60
	adds r2, r4, #0
	adds r2, #0x41
	ldrb r3, [r2]
	adds r1, r3, #0
	muls r1, r0, r1
	movs r3, #0x80
	lsls r3, r3, #1
	adds r0, r3, #0
	subs r0, r0, r1
	lsls r0, r0, #4
	strh r0, [r4, #0x32]
	adds r0, r4, #0
	adds r0, #0x43
	ldrb r2, [r2]
	adds r0, r2, r0
	ldrb r1, [r0]
	adds r0, r4, #0
	bl sub_080A9064
	ldrh r0, [r4, #0x30]
	ldrh r1, [r4, #0x32]
	cmp r1, r0
	bls _080A9406
	movs r3, #0x80
	lsls r3, r3, #5
	adds r0, r0, r3
	strh r0, [r4, #0x30]
_080A9406:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080A940C
sub_080A940C: @ 0x080A940C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	mov r8, r0
	ldrh r1, [r0, #0x32]
	ldrh r2, [r0, #0x30]
	subs r0, r1, r2
	mov r3, r8
	ldr r6, [r3, #0x34]
	adds r4, r0, #0
	muls r4, r6, r4
	movs r0, #0x80
	lsls r0, r0, #1
	mov sb, r0
	ldr r5, [r3, #0x2c]
	adds r5, #1
	str r5, [r3, #0x2c]
	asrs r4, r4, #2
	movs r0, #0x1e
	subs r0, r0, r5
	adds r1, r4, #0
	muls r1, r0, r1
	muls r0, r1, r0
	movs r1, #0xe1
	lsls r1, r1, #2
	bl __divsi3
	subs r4, r4, r0
	lsls r4, r4, #2
	adds r0, r6, #0
	muls r0, r4, r0
	mov r1, r8
	ldrh r1, [r1, #0x30]
	adds r0, r1, r0
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	cmp r5, #0xd
	bne _080A946E
	mov r1, r8
	adds r1, #0x41
	mov r0, r8
	adds r0, #0x49
	ldrb r1, [r1]
	adds r0, r1, r0
	ldrb r0, [r0]
	bl sub_080A870C
_080A946E:
	mov r2, r8
	ldr r0, [r2, #0x2c]
	cmp r0, #0xe
	bne _080A948C
	mov r1, r8
	adds r1, #0x41
	mov r0, r8
	adds r0, #0x49
	ldrb r1, [r1]
	adds r0, r1, r0
	ldrb r0, [r0]
	bl sub_080A86D4
	mov r3, r8
	str r0, [r3, #0x3c]
_080A948C:
	mov r1, r8
	ldr r0, [r1, #0x2c]
	cmp r0, #0x14
	bne _080A94A4
	adds r1, #0x41
	mov r0, r8
	adds r0, #0x49
	ldrb r1, [r1]
	adds r0, r1, r0
	ldrb r0, [r0]
	bl sub_080A856C
_080A94A4:
	mov r2, r8
	ldr r0, [r2, #0x2c]
	cmp r0, #0x1e
	bne _080A94BC
	ldr r0, _080A9530 @ =0x00000FFF
	ldrh r3, [r2, #0x32]
	ands r0, r3
	adds r7, r0, #0
	strh r7, [r2, #0x30]
	mov r0, r8
	bl Proc_Break
_080A94BC:
	ldr r4, _080A9534 @ =gSinLut
	movs r0, #0x80
	adds r0, r0, r4
	mov r8, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r3, #0
	ldrsh r0, [r4, r3]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, r8
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	adds r0, r7, #0
	bl sub_080A8B1C
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A9530: .4byte 0x00000FFF
_080A9534: .4byte gSinLut

	thumb_func_start sub_080A9538
sub_080A9538: @ 0x080A9538
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x4c
	ldrb r0, [r0]
	bl sub_080A84D8
	bl sub_08055690
	movs r0, #0
	bl EndFaceById
	adds r4, #0x42
	movs r0, #1
	ldrb r4, [r4]
	ands r0, r4
	cmp r0, #0
	bne _080A956A
	movs r0, #0x80
	lsls r0, r0, #1
	movs r1, #0xc0
	movs r2, #0x10
	movs r3, #0
	bl StartBgmVolumeChange
	b _080A9570
_080A956A:
	movs r0, #0
	bl SetOnHBlankA
_080A9570:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A9578
sub_080A9578: @ 0x080A9578
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A958C @ =0x08DAE11C
	bl Proc_StartBlocking
	adds r0, #0x42
	movs r1, #0
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_080A958C: .4byte 0x08DAE11C

	thumb_func_start sub_080A9590
sub_080A9590: @ 0x080A9590
	push {r4, lr}
	adds r4, r0, #0
	bl sub_0809F40C
	cmp r0, #7
	ble _080A95AA
	ldr r0, _080A95B0 @ =0x08DAE11C
	adds r1, r4, #0
	bl Proc_StartBlocking
	adds r0, #0x42
	movs r1, #1
	strb r1, [r0]
_080A95AA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A95B0: .4byte 0x08DAE11C

	thumb_func_start sub_080A95B4
sub_080A95B4: @ 0x080A95B4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x20
	str r0, [sp]
	str r1, [sp, #4]
	mov sb, r2
	mov sl, r3
	ldr r3, [sp, #0x40]
	ldr r0, _080A9688 @ =0xFFFFFC00
	adds r0, r0, r3
	mov r8, r0
	mov r1, r8
	muls r1, r0, r1
	lsls r5, r3, #1
	movs r6, #0x80
	lsls r6, r6, #3
	adds r0, r5, r6
	muls r0, r1, r0
	asrs r1, r0, #0x1f
	adds r4, r3, #0
	muls r4, r3, r4
	movs r2, #0xc0
	lsls r2, r2, #4
	subs r2, r2, r5
	muls r4, r2, r4
	asrs r5, r4, #0x1f
	subs r6, r6, r3
	adds r2, r6, #0
	muls r2, r6, r2
	muls r2, r3, r2
	str r2, [sp, #0x18]
	asrs r2, r2, #0x1f
	str r2, [sp, #0x1c]
	mov r2, r8
	muls r2, r3, r2
	muls r2, r3, r2
	str r2, [sp, #8]
	asrs r2, r2, #0x1f
	str r2, [sp, #0xc]
	ldr r2, [sp, #4]
	asrs r3, r2, #0x1f
	bl __muldi3
	str r0, [sp, #0x10]
	str r1, [sp, #0x14]
	mov r2, sb
	asrs r3, r2, #0x1f
	adds r1, r5, #0
	adds r0, r4, #0
	bl __muldi3
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	adds r2, r2, r0
	adcs r3, r1
	str r2, [sp, #0x10]
	str r3, [sp, #0x14]
	mov r3, sb
	ldr r6, [sp]
	subs r3, r3, r6
	mov sb, r3
	asrs r0, r3, #1
	adds r2, r0, #0
	mov r0, sb
	asrs r3, r0, #0x1f
	ldr r0, [sp, #0x18]
	ldr r1, [sp, #0x1c]
	bl __muldi3
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	adds r2, r2, r0
	adcs r3, r1
	str r2, [sp, #0x10]
	str r3, [sp, #0x14]
	mov r3, sl
	ldr r6, [sp, #4]
	subs r3, r3, r6
	mov sl, r3
	asrs r0, r3, #1
	adds r2, r0, #0
	mov r0, sl
	asrs r3, r0, #0x1f
	ldr r0, [sp, #8]
	ldr r1, [sp, #0xc]
	bl __muldi3
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	adds r0, r0, r2
	adcs r1, r3
	lsls r3, r1, #2
	lsrs r2, r0, #0x1e
	adds r0, r3, #0
	orrs r0, r2
	add sp, #0x20
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080A9688: .4byte 0xFFFFFC00

	thumb_func_start sub_080A968C
sub_080A968C: @ 0x080A968C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	mov sl, r0
	mov sb, r1
	adds r6, r2, #0
	mov r8, r3
	ldr r2, [sp, #0x38]
	lsls r3, r2, #1
	adds r3, r3, r2
	lsls r0, r3, #1
	adds r4, r2, #0
	muls r4, r0, r4
	lsls r5, r3, #0xb
	subs r0, r4, r5
	asrs r1, r0, #0x1f
	subs r4, r5, r4
	str r4, [sp]
	asrs r4, r4, #0x1f
	str r4, [sp, #4]
	muls r3, r2, r3
	lsls r4, r2, #0xc
	subs r4, r3, r4
	movs r5, #0x80
	lsls r5, r5, #0xd
	adds r4, r4, r5
	asrs r5, r4, #0x1f
	lsls r2, r2, #0xb
	subs r2, r3, r2
	str r2, [sp, #8]
	asrs r2, r2, #0x1f
	str r2, [sp, #0xc]
	mov r2, sb
	asrs r3, r2, #0x1f
	bl __muldi3
	str r0, [sp, #0x10]
	str r1, [sp, #0x14]
	adds r2, r6, #0
	asrs r3, r6, #0x1f
	ldr r0, [sp]
	ldr r1, [sp, #4]
	bl __muldi3
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	adds r2, r2, r0
	adcs r3, r1
	str r2, [sp, #0x10]
	str r3, [sp, #0x14]
	mov r3, sl
	subs r6, r6, r3
	asrs r0, r6, #1
	adds r2, r0, #0
	asrs r3, r6, #0x1f
	adds r1, r5, #0
	adds r0, r4, #0
	bl __muldi3
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	adds r2, r2, r0
	adcs r3, r1
	str r2, [sp, #0x10]
	str r3, [sp, #0x14]
	mov r3, r8
	mov r5, sb
	subs r3, r3, r5
	mov r8, r3
	asrs r0, r3, #1
	adds r2, r0, #0
	mov r7, r8
	asrs r3, r7, #0x1f
	ldr r0, [sp, #8]
	ldr r1, [sp, #0xc]
	bl __muldi3
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	adds r0, r0, r2
	adcs r1, r3
	lsls r3, r1, #0xc
	lsrs r2, r0, #0x14
	adds r0, r3, #0
	orrs r0, r2
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_080A974C
sub_080A974C: @ 0x080A974C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov sl, r0
	adds r5, r1, #0
	adds r4, r2, #0
	ldr r0, [sp, #0x24]
	mov r8, r0
	ldr r7, [sp, #0x28]
	ldr r1, [sp, #0x2c]
	mov sb, r1
	movs r0, #3
	ands r0, r3
	bl GetBgTilemap
	str r0, [sp]
	lsls r4, r4, #5
	adds r4, r4, r5
	lsls r4, r4, #1
	add sl, r4
	mov r2, r8
	cmp r2, #0
	bge _080A978E
	add sb, r8
	lsls r0, r2, #1
	mov r1, sl
	subs r1, r1, r0
	mov sl, r1
	movs r2, #0
	mov r8, r2
_080A978E:
	cmp r7, #0
	bge _080A97A2
	ldr r0, [sp, #0x30]
	adds r0, r0, r7
	str r0, [sp, #0x30]
	lsls r0, r7, #6
	mov r1, sl
	subs r1, r1, r0
	mov sl, r1
	movs r7, #0
_080A97A2:
	movs r1, #0
	cmp r7, #0x1f
	bgt _080A97FC
	ldr r2, [sp, #0x30]
	cmp r1, r2
	bge _080A97FC
_080A97AE:
	movs r5, #0
	adds r4, r1, #1
	mov r0, r8
	cmp r0, #0x1f
	bgt _080A97EE
	cmp r5, sb
	bge _080A97EE
	adds r0, r7, r1
	movs r2, #0x1f
	mov ip, r2
	ands r0, r2
	lsls r6, r0, #5
	mov r2, r8
	lsls r0, r1, #6
	mov r1, sl
	adds r3, r0, r1
_080A97CE:
	adds r0, r2, #0
	mov r1, ip
	ands r0, r1
	adds r0, r6, r0
	lsls r0, r0, #1
	ldr r1, [sp]
	adds r0, r0, r1
	ldrh r1, [r3]
	strh r1, [r0]
	adds r2, #1
	adds r3, #2
	adds r5, #1
	cmp r2, #0x1f
	bgt _080A97EE
	cmp r5, sb
	blt _080A97CE
_080A97EE:
	adds r1, r4, #0
	adds r0, r7, r4
	cmp r0, #0x1f
	bgt _080A97FC
	ldr r2, [sp, #0x30]
	cmp r4, r2
	blt _080A97AE
_080A97FC:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080A980C
sub_080A980C: @ 0x080A980C
	push {r4, r5, r6, lr}
	movs r2, #0
	adds r4, r0, #0
	adds r4, #0x3c
	movs r3, #0
	movs r6, #0xf0
	adds r1, r0, #0
	adds r1, #0x2c
	movs r5, #0xa0
_080A981E:
	adds r0, r4, r2
	strb r3, [r0]
	strb r3, [r1]
	strb r3, [r1, #1]
	strb r6, [r1, #2]
	strb r5, [r1, #3]
	adds r1, #4
	adds r2, #1
	cmp r2, #3
	ble _080A981E
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_080A9838
sub_080A9838: @ 0x080A9838
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r7, #0
	adds r4, r6, #0
	adds r4, #0x2c
_080A9844:
	adds r0, r6, #0
	adds r0, #0x3c
	adds r0, r0, r7
	ldrb r5, [r0]
	movs r0, #1
	ands r0, r5
	cmp r0, #0
	beq _080A98B2
	lsls r0, r7, #1
	adds r1, r6, #0
	adds r1, #0x40
	adds r1, r1, r0
	movs r2, #0
	ldrsh r3, [r1, r2]
	adds r1, r6, #0
	adds r1, #0x48
	adds r1, r1, r0
	movs r0, #0
	ldrsh r2, [r1, r0]
	ldrb r0, [r4]
	cmp r3, r0
	blt _080A98B2
	ldrb r0, [r4, #2]
	cmp r3, r0
	bge _080A98B2
	ldrb r0, [r4, #1]
	cmp r2, r0
	blt _080A98B2
	ldrb r0, [r4, #3]
	cmp r2, r0
	bge _080A98B2
	movs r0, #2
	ands r0, r5
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	beq _080A98A4
	adds r1, r3, #0
	subs r1, #0xc
	movs r0, #0
	str r0, [sp]
	movs r0, #3
	ldr r3, _080A98A0 @ =0x08DAE1DC
	bl sub_08006884
	b _080A98B2
	.align 2, 0
_080A98A0: .4byte 0x08DAE1DC
_080A98A4:
	adds r1, r3, #0
	subs r1, #0xc
	str r0, [sp]
	movs r0, #3
	ldr r3, _080A98C4 @ =0x08DAE1D4
	bl sub_08006884
_080A98B2:
	adds r4, #4
	adds r7, #1
	cmp r7, #3
	ble _080A9844
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A98C4: .4byte 0x08DAE1D4

	thumb_func_start sub_080A98C8
sub_080A98C8: @ 0x080A98C8
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A98D8 @ =0x08DAE1E4
	bl Proc_Start
	pop {r1}
	bx r1
	.align 2, 0
_080A98D8: .4byte 0x08DAE1E4

	thumb_func_start sub_080A98DC
sub_080A98DC: @ 0x080A98DC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r7, r1, #0
	mov r8, r2
	lsls r3, r3, #0x18
	lsrs r6, r3, #0x18
	ldr r0, _080A9940 @ =0x08DAE1E4
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	beq _080A9936
	adds r1, r4, #0
	adds r1, #0x3c
	adds r1, r1, r5
	movs r3, #1
	movs r0, #1
	strb r0, [r1]
	lsls r2, r5, #1
	adds r0, r4, #0
	adds r0, #0x40
	adds r0, r0, r2
	strh r7, [r0]
	adds r0, r4, #0
	adds r0, #0x48
	adds r0, r0, r2
	mov r2, r8
	strh r2, [r0]
	adds r0, r6, #0
	orrs r0, r3
	strb r0, [r1]
	movs r0, #2
	ands r0, r6
	cmp r0, #0
	beq _080A9936
	ldr r0, _080A9944 @ =0x0818FEB0
	ldr r1, _080A9948 @ =0x060100C0
	bl sub_08013688
	ldr r0, _080A994C @ =0x0818FEEC
	ldr r1, _080A9950 @ =0x060104C0
	bl sub_08013688
_080A9936:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A9940: .4byte 0x08DAE1E4
_080A9944: .4byte 0x0818FEB0
_080A9948: .4byte 0x060100C0
_080A994C: .4byte 0x0818FEEC
_080A9950: .4byte 0x060104C0

	thumb_func_start sub_080A9954
sub_080A9954: @ 0x080A9954
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r7, r3, #0
	ldr r0, _080A9988 @ =0x08DAE1E4
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	beq _080A9982
	lsls r0, r4, #2
	adds r1, r1, r0
	adds r0, r1, #0
	adds r0, #0x2c
	strb r5, [r0]
	adds r0, #1
	strb r6, [r0]
	adds r0, #1
	strb r7, [r0]
	adds r1, #0x2f
	ldr r0, [sp, #0x14]
	strb r0, [r1]
_080A9982:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A9988: .4byte 0x08DAE1E4

	thumb_func_start sub_080A998C
sub_080A998C: @ 0x080A998C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080A99A8 @ =0x08DAE1E4
	bl Proc_Find
	cmp r0, #0
	beq _080A99A2
	adds r0, #0x3c
	adds r0, r0, r4
	movs r1, #0
	strb r1, [r0]
_080A99A2:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A99A8: .4byte 0x08DAE1E4

	thumb_func_start sub_080A99AC
sub_080A99AC: @ 0x080A99AC
	push {lr}
	ldr r0, _080A99CC @ =0x08DAE1E4
	bl Proc_Find
	cmp r0, #0
	beq _080A99C8
	adds r1, r0, #0
	adds r1, #0x3c
	movs r2, #0
	adds r0, #0x43
_080A99C0:
	strb r2, [r0]
	subs r0, #1
	cmp r0, r1
	bge _080A99C0
_080A99C8:
	pop {r0}
	bx r0
	.align 2, 0
_080A99CC: .4byte 0x08DAE1E4

	thumb_func_start sub_080A99D0
sub_080A99D0: @ 0x080A99D0
	push {lr}
	ldr r0, _080A99E8 @ =0x08DAE1E4
	bl Proc_Find
	cmp r0, #0
	beq _080A99E2
	movs r1, #1
	bl Proc_Goto
_080A99E2:
	pop {r0}
	bx r0
	.align 2, 0
_080A99E8: .4byte 0x08DAE1E4

	thumb_func_start sub_080A99EC
sub_080A99EC: @ 0x080A99EC
	push {lr}
	ldr r0, _080A9A04 @ =0x08DAE1E4
	bl Proc_Find
	cmp r0, #0
	beq _080A99FE
	movs r1, #0
	bl Proc_Goto
_080A99FE:
	pop {r0}
	bx r0
	.align 2, 0
_080A9A04: .4byte 0x08DAE1E4

	thumb_func_start sub_080A9A08
sub_080A9A08: @ 0x080A9A08
	push {lr}
	ldr r0, _080A9A18 @ =0x08DAE1E4
	bl Proc_Find
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_080A9A18: .4byte 0x08DAE1E4

	thumb_func_start sub_080A9A1C
sub_080A9A1C: @ 0x080A9A1C
	movs r1, #0
	str r1, [r0, #0x2c]
	adds r2, r0, #0
	adds r2, #0x54
	strh r1, [r2]
	str r1, [r0, #0x4c]
	str r1, [r0, #0x44]
	str r1, [r0, #0x3c]
	str r1, [r0, #0x34]
	str r1, [r0, #0x50]
	str r1, [r0, #0x48]
	str r1, [r0, #0x40]
	str r1, [r0, #0x38]
	str r1, [r0, #0x30]
	bx lr
	.align 2, 0

	thumb_func_start sub_080A9A3C
sub_080A9A3C: @ 0x080A9A3C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r5, r0, #0
	ldr r7, [r5, #0x34]
	ldr r0, [r5, #0x3c]
	mov r8, r0
	ldr r1, [r5, #0x38]
	mov sb, r1
	ldr r2, [r5, #0x40]
	mov sl, r2
	ldr r0, [r5, #0x44]
	adds r0, #1
	str r0, [r5, #0x44]
	ldr r0, [r5, #0x48]
	adds r0, #1
	str r0, [r5, #0x48]
	movs r6, #0
_080A9A66:
	lsls r3, r6, #2
	adds r0, r5, #0
	adds r0, #0x4c
	adds r2, r0, r3
	ldr r0, [r2]
	adds r4, r5, #0
	adds r4, #0x44
	cmp r0, #0
	beq _080A9A86
	adds r0, r4, r3
	ldr r1, [r0]
	adds r1, #3
	str r1, [r0]
	ldr r0, [r2]
	adds r0, #1
	str r0, [r2]
_080A9A86:
	adds r1, r4, r3
	ldr r0, [r1]
	asrs r0, r0, #3
	cmp r0, #5
	ble _080A9A94
	movs r0, #0
	str r0, [r1]
_080A9A94:
	adds r6, #1
	cmp r6, #1
	ble _080A9A66
	ldr r3, [r5, #0x2c]
	cmp r3, #0
	bne _080A9B28
	ldr r2, [r5, #0x4c]
	cmp r2, #0
	beq _080A9AB4
	asrs r2, r2, #3
	subs r1, r2, #4
	ldr r0, [r5, #0x34]
	adds r7, r0, r1
	cmp r2, #4
	bne _080A9AB4
	str r3, [r5, #0x4c]
_080A9AB4:
	ldr r2, [r5, #0x50]
	cmp r2, #0
	beq _080A9ACC
	asrs r2, r2, #3
	subs r1, r2, #4
	ldr r0, [r5, #0x38]
	subs r0, r0, r1
	mov sb, r0
	cmp r2, #4
	bne _080A9ACC
	movs r0, #0
	str r0, [r5, #0x50]
_080A9ACC:
	ldr r0, [r5, #0x30]
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _080A9AF6
	ldr r1, _080A9BDC @ =0x000001FF
	ands r1, r7
	movs r2, #0xff
	mov r0, r8
	ands r2, r0
	ldr r3, _080A9BE0 @ =0x08DAE214
	adds r4, r5, #0
	adds r4, #0x54
	ldr r0, [r5, #0x44]
	asrs r0, r0, #3
	ldrh r4, [r4]
	adds r0, r4, r0
	str r0, [sp]
	movs r0, #0xd
	bl sub_080068C4
_080A9AF6:
	ldr r0, [r5, #0x30]
	movs r1, #2
	ands r0, r1
	cmp r0, #0
	beq _080A9B28
	ldr r1, _080A9BDC @ =0x000001FF
	mov r2, sb
	ands r1, r2
	movs r0, #0x80
	lsls r0, r0, #5
	adds r1, r1, r0
	movs r2, #0xff
	mov r0, sl
	ands r2, r0
	ldr r3, _080A9BE0 @ =0x08DAE214
	adds r4, r5, #0
	adds r4, #0x54
	ldr r0, [r5, #0x48]
	asrs r0, r0, #3
	ldrh r4, [r4]
	adds r0, r4, r0
	str r0, [sp]
	movs r0, #0xd
	bl sub_080068C4
_080A9B28:
	ldr r0, [r5, #0x2c]
	cmp r0, #1
	bne _080A9BCA
	ldr r2, [r5, #0x4c]
	cmp r2, #0
	beq _080A9B46
	asrs r2, r2, #3
	subs r1, r2, #4
	ldr r0, [r5, #0x3c]
	adds r0, r0, r1
	mov r8, r0
	cmp r2, #4
	bne _080A9B46
	movs r0, #0
	str r0, [r5, #0x4c]
_080A9B46:
	ldr r2, [r5, #0x50]
	cmp r2, #0
	beq _080A9B5E
	asrs r2, r2, #3
	subs r1, r2, #4
	ldr r0, [r5, #0x40]
	subs r0, r0, r1
	mov sl, r0
	cmp r2, #4
	bne _080A9B5E
	movs r0, #0
	str r0, [r5, #0x50]
_080A9B5E:
	ldr r0, [r5, #0x30]
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _080A9B90
	ldr r0, _080A9BDC @ =0x000001FF
	ands r7, r0
	movs r0, #0xff
	mov r1, r8
	ands r1, r0
	mov r8, r1
	ldr r3, _080A9BE4 @ =0x08DAE222
	adds r1, r5, #0
	adds r1, #0x54
	ldr r0, [r5, #0x44]
	asrs r0, r0, #3
	lsls r0, r0, #1
	ldrh r1, [r1]
	adds r0, r1, r0
	str r0, [sp]
	movs r0, #0xd
	adds r1, r7, #0
	mov r2, r8
	bl sub_080068C4
_080A9B90:
	ldr r0, [r5, #0x30]
	movs r1, #2
	ands r0, r1
	cmp r0, #0
	beq _080A9BCA
	ldr r0, _080A9BDC @ =0x000001FF
	mov r2, sb
	ands r2, r0
	mov sb, r2
	movs r1, #0x80
	lsls r1, r1, #6
	add r1, sb
	movs r0, #0xff
	mov r2, sl
	ands r2, r0
	mov sl, r2
	ldr r3, _080A9BE4 @ =0x08DAE222
	adds r2, r5, #0
	adds r2, #0x54
	ldr r0, [r5, #0x48]
	asrs r0, r0, #3
	lsls r0, r0, #1
	ldrh r2, [r2]
	adds r0, r2, r0
	str r0, [sp]
	movs r0, #0xd
	mov r2, sl
	bl sub_080068C4
_080A9BCA:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A9BDC: .4byte 0x000001FF
_080A9BE0: .4byte 0x08DAE214
_080A9BE4: .4byte 0x08DAE222

	thumb_func_start sub_080A9BE8
sub_080A9BE8: @ 0x080A9BE8
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A9BF8 @ =0x08DAE22C
	bl Proc_Start
	pop {r1}
	bx r1
	.align 2, 0
_080A9BF8: .4byte 0x08DAE22C

	thumb_func_start sub_080A9BFC
sub_080A9BFC: @ 0x080A9BFC
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	adds r7, r2, #0
	ldr r0, _080A9C54 @ =0x08DAE22C
	bl Proc_Find
	adds r5, r0, #0
	cmp r5, #0
	beq _080A9C4C
	ldr r0, _080A9C58 @ =0x08428A40
	adds r1, r7, #0
	adds r1, #0x10
	lsls r1, r1, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	cmp r6, #0
	bne _080A9C2C
	ldr r0, _080A9C5C @ =0x08427A48
	ldr r2, _080A9C60 @ =0x06010000
	adds r1, r4, r2
	bl sub_08013688
_080A9C2C:
	cmp r6, #1
	bne _080A9C3A
	ldr r0, _080A9C64 @ =0x08427974
	ldr r2, _080A9C60 @ =0x06010000
	adds r1, r4, r2
	bl sub_08013688
_080A9C3A:
	asrs r0, r4, #5
	movs r1, #0xf
	ands r1, r7
	lsls r1, r1, #0xc
	adds r0, r0, r1
	adds r1, r5, #0
	adds r1, #0x54
	strh r0, [r1]
	str r6, [r5, #0x2c]
_080A9C4C:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080A9C54: .4byte 0x08DAE22C
_080A9C58: .4byte 0x08428A40
_080A9C5C: .4byte 0x08427A48
_080A9C60: .4byte 0x06010000
_080A9C64: .4byte 0x08427974

	thumb_func_start sub_080A9C68
sub_080A9C68: @ 0x080A9C68
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080A9C80 @ =0x08DAE22C
	bl Proc_Find
	cmp r0, #0
	beq _080A9C78
	str r4, [r0, #0x30]
_080A9C78:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A9C80: .4byte 0x08DAE22C

	thumb_func_start sub_080A9C84
sub_080A9C84: @ 0x080A9C84
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r7, r3, #0
	ldr r0, _080A9CA8 @ =0x08DAE22C
	bl Proc_Find
	cmp r0, #0
	beq _080A9CA0
	str r4, [r0, #0x34]
	str r5, [r0, #0x3c]
	str r6, [r0, #0x38]
	str r7, [r0, #0x40]
_080A9CA0:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A9CA8: .4byte 0x08DAE22C

	thumb_func_start sub_080A9CAC
sub_080A9CAC: @ 0x080A9CAC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080A9CE0 @ =0x08DAE22C
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	beq _080A9CDA
	cmp r4, #0
	bne _080A9CC4
	movs r0, #1
	str r0, [r1, #0x4c]
_080A9CC4:
	cmp r4, #1
	bne _080A9CCA
	str r4, [r1, #0x50]
_080A9CCA:
	cmp r4, #2
	bne _080A9CD2
	movs r0, #1
	str r0, [r1, #0x4c]
_080A9CD2:
	cmp r4, #3
	bne _080A9CDA
	movs r0, #1
	str r0, [r1, #0x50]
_080A9CDA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A9CE0: .4byte 0x08DAE22C

	thumb_func_start sub_080A9CE4
sub_080A9CE4: @ 0x080A9CE4
	push {lr}
	ldr r0, _080A9CF4 @ =0x08DAE22C
	bl Proc_Find
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_080A9CF4: .4byte 0x08DAE22C

	thumb_func_start sub_080A9CF8
sub_080A9CF8: @ 0x080A9CF8
	movs r1, #0
	str r1, [r0, #0x30]
	bx lr
	.align 2, 0

	thumb_func_start sub_080A9D00
sub_080A9D00: @ 0x080A9D00
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x30]
	ldr r0, [r4, #0x2c]
	cmp r1, r0
	blt _080A9D1A
	ldr r0, [r4, #0x14]
	ldr r1, [r4, #0x34]
	bl _call_via_r1
	adds r0, r4, #0
	bl Proc_Break
_080A9D1A:
	ldr r0, [r4, #0x30]
	adds r0, #1
	str r0, [r4, #0x30]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080A9D28
sub_080A9D28: @ 0x080A9D28
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	adds r1, r2, #0
	ldr r0, _080A9D40 @ =0x08DAE24C
	bl Proc_Start
	str r4, [r0, #0x2c]
	str r5, [r0, #0x34]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A9D40: .4byte 0x08DAE24C

	thumb_func_start sub_080A9D44
sub_080A9D44: @ 0x080A9D44
	movs r2, #0
	movs r1, #3
	adds r0, #0x4d
_080A9D4A:
	strb r2, [r0]
	subs r0, #1
	subs r1, #1
	cmp r1, #0
	bge _080A9D4A
	bx lr
	.align 2, 0

	thumb_func_start sub_080A9D58
sub_080A9D58: @ 0x080A9D58
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x38
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	ldr r1, [sp, #4]
	adds r1, #0x4e
	str r1, [sp, #0x14]
_080A9D70:
	ldr r0, [sp, #4]
	adds r0, #0x4a
	ldr r2, [sp, #8]
	adds r0, r0, r2
	ldrb r0, [r0]
	adds r2, #1
	str r2, [sp, #0x1c]
	cmp r0, #0
	bne _080A9D84
	b _080AA09C
_080A9D84:
	ldr r0, [sp, #4]
	adds r0, #0x3e
	ldr r3, [sp, #8]
	adds r3, r3, r0
	mov sb, r3
	movs r1, #0
	ldrsb r1, [r3, r1]
	str r0, [sp, #0x30]
	cmp r1, #1
	bgt _080A9D9A
	b _080AA09C
_080A9D9A:
	ldr r0, [sp, #4]
	adds r0, #0x3a
	ldr r7, [sp, #8]
	adds r7, r0, r7
	str r7, [sp, #0x34]
	movs r1, #0
	ldrsb r1, [r7, r1]
	str r0, [sp, #0x2c]
	cmp r1, #1
	bgt _080A9DB0
	b _080AA09C
_080A9DB0:
	ldr r0, [sp, #8]
	lsls r0, r0, #1
	mov r8, r0
	ldr r1, [sp, #4]
	adds r1, #0x2a
	str r1, [sp, #0xc]
	adds r6, r1, #0
	add r6, r8
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r2, #0
	ldrh r3, [r6]
	orrs r1, r3
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	ldr r7, [sp, #4]
	adds r7, #0x32
	str r7, [sp, #0x10]
	adds r5, r7, #0
	add r5, r8
	movs r2, #0
	ldrsh r0, [r5, r2]
	mov ip, r0
	ldr r3, [sp, #4]
	adds r3, #0x42
	str r3, [sp, #0x18]
	adds r4, r3, #0
	add r4, r8
	ldrh r2, [r4]
	ldr r7, [sp, #0x14]
	ldrh r7, [r7]
	adds r0, r2, r7
	adds r0, #4
	str r0, [sp]
	movs r0, #0xd
	mov r2, ip
	ldr r3, _080A9EE8 @ =0x08BFF760
	bl sub_080068C4
	movs r0, #0
	ldrsh r1, [r6, r0]
	mov r2, sb
	movs r0, #0
	ldrsb r0, [r2, r0]
	subs r0, #1
	lsls r0, r0, #3
	adds r1, r1, r0
	movs r7, #0
	ldrsh r3, [r5, r7]
	mov ip, r3
	ldrh r3, [r4]
	ldr r2, [sp, #0x14]
	ldrh r2, [r2]
	adds r0, r3, r2
	adds r0, #4
	str r0, [sp]
	movs r0, #0xd
	mov r2, ip
	ldr r3, _080A9EE8 @ =0x08BFF760
	bl sub_080068C4
	movs r3, #0xc0
	lsls r3, r3, #6
	adds r1, r3, #0
	ldrh r7, [r6]
	orrs r1, r7
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r0, #0
	ldrsh r2, [r5, r0]
	ldr r3, [sp, #0x34]
	movs r0, #0
	ldrsb r0, [r3, r0]
	subs r0, #1
	lsls r0, r0, #3
	adds r2, r2, r0
	mov ip, r2
	ldrh r2, [r4]
	ldr r7, [sp, #0x14]
	ldrh r7, [r7]
	adds r0, r2, r7
	adds r0, #4
	str r0, [sp]
	movs r0, #0xd
	mov r2, ip
	ldr r3, _080A9EE8 @ =0x08BFF760
	bl sub_080068C4
	movs r0, #0
	ldrsh r1, [r6, r0]
	mov r2, sb
	movs r0, #0
	ldrsb r0, [r2, r0]
	subs r0, #1
	lsls r0, r0, #3
	adds r1, r1, r0
	movs r0, #0x80
	lsls r0, r0, #6
	orrs r1, r0
	movs r3, #0
	ldrsh r2, [r5, r3]
	ldr r7, [sp, #0x34]
	movs r0, #0
	ldrsb r0, [r7, r0]
	subs r0, #1
	lsls r0, r0, #3
	adds r2, r2, r0
	ldrh r4, [r4]
	ldr r3, [sp, #0x14]
	ldrh r3, [r3]
	adds r0, r4, r3
	adds r0, #4
	str r0, [sp]
	movs r0, #0xd
	ldr r3, _080A9EE8 @ =0x08BFF760
	bl sub_080068C4
	mov r7, sb
	movs r0, #0
	ldrsb r0, [r7, r0]
	subs r4, r0, #2
	movs r0, #0
	ldrsh r7, [r5, r0]
	movs r1, #0
	ldrsh r0, [r6, r1]
	adds r5, r0, #0
	adds r5, #8
	mov sl, r8
	ldr r2, [sp, #0xc]
	str r2, [sp, #0x24]
	ldr r3, [sp, #0x10]
	str r3, [sp, #0x28]
	ldr r0, [sp, #4]
	adds r0, #0x4e
	mov r8, r0
	ldr r6, [sp, #0x18]
	cmp r4, #3
	ble _080A9F0E
_080A9EC4:
	mov r1, sl
	adds r0, r6, r1
	ldrh r0, [r0]
	mov r2, r8
	ldrh r2, [r2]
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, _080A9EEC @ =0x08BFF7B8
	bl sub_080068C4
	adds r5, #0x20
	subs r4, #4
	cmp r4, #3
	bgt _080A9EC4
	b _080A9F0E
	.align 2, 0
_080A9EE8: .4byte 0x08BFF760
_080A9EEC: .4byte 0x08BFF7B8
_080A9EF0:
	mov r3, sl
	adds r0, r6, r3
	ldrh r0, [r0]
	mov r1, r8
	ldrh r1, [r1]
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, _080A9F94 @ =0x08BFF798
	bl sub_080068C4
	adds r5, #0x10
	subs r4, #2
_080A9F0E:
	cmp r4, #1
	bgt _080A9EF0
	cmp r4, #0
	ble _080A9F38
_080A9F16:
	mov r2, sl
	adds r0, r6, r2
	ldrh r0, [r0]
	mov r3, r8
	ldrh r3, [r3]
	adds r0, r0, r3
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, _080A9F98 @ =0x08BFF760
	bl sub_080068C4
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bgt _080A9F16
_080A9F38:
	ldr r7, [sp, #0x30]
	ldr r1, [sp, #8]
	adds r0, r7, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r4, r0, #2
	ldr r0, [sp, #0x28]
	add r0, sl
	movs r2, #0
	ldrsh r1, [r0, r2]
	ldr r3, [sp, #0x2c]
	ldr r7, [sp, #8]
	adds r0, r3, r7
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, #1
	lsls r0, r0, #3
	adds r7, r1, r0
	ldr r0, [sp, #0x24]
	add r0, sl
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r5, r0, #0
	adds r5, #8
	cmp r4, #3
	ble _080A9FBE
_080A9F70:
	mov r2, sl
	adds r0, r6, r2
	ldrh r0, [r0]
	mov r3, r8
	ldrh r3, [r3]
	adds r0, r0, r3
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, _080A9F9C @ =0x08BFF7B8
	bl sub_080068C4
	adds r5, #0x20
	subs r4, #4
	cmp r4, #3
	bgt _080A9F70
	b _080A9FBE
	.align 2, 0
_080A9F94: .4byte 0x08BFF798
_080A9F98: .4byte 0x08BFF760
_080A9F9C: .4byte 0x08BFF7B8
_080A9FA0:
	mov r1, sl
	adds r0, r6, r1
	ldrh r0, [r0]
	mov r2, r8
	ldrh r2, [r2]
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, _080AA048 @ =0x08BFF798
	bl sub_080068C4
	adds r5, #0x10
	subs r4, #2
_080A9FBE:
	cmp r4, #1
	bgt _080A9FA0
	cmp r4, #0
	ble _080A9FE8
_080A9FC6:
	mov r3, sl
	adds r0, r6, r3
	ldrh r0, [r0]
	mov r1, r8
	ldrh r1, [r1]
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, _080AA04C @ =0x08BFF760
	bl sub_080068C4
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bgt _080A9FC6
_080A9FE8:
	ldr r2, [sp, #0x2c]
	ldr r3, [sp, #8]
	adds r0, r2, r3
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r1, r0, #2
	ldr r0, [sp, #0x28]
	add r0, sl
	movs r7, #0
	ldrsh r0, [r0, r7]
	adds r7, r0, #0
	adds r7, #8
	cmp r1, #0
	ble _080AA09C
	add r6, sl
_080AA008:
	ldr r2, [sp, #0x30]
	ldr r3, [sp, #8]
	adds r0, r2, r3
	movs r4, #0
	ldrsb r4, [r0, r4]
	ldr r0, [sp, #0x24]
	add r0, sl
	movs r2, #0
	ldrsh r5, [r0, r2]
	adds r3, r7, #0
	adds r3, #8
	str r3, [sp, #0x20]
	subs r1, #1
	mov sb, r1
	cmp r4, #3
	ble _080AA06E
_080AA028:
	ldrh r2, [r6]
	mov r1, r8
	ldrh r1, [r1]
	adds r0, r2, r1
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, _080AA050 @ =0x08BFF7B8
	bl sub_080068C4
	adds r5, #0x20
	subs r4, #4
	cmp r4, #3
	bgt _080AA028
	b _080AA06E
	.align 2, 0
_080AA048: .4byte 0x08BFF798
_080AA04C: .4byte 0x08BFF760
_080AA050: .4byte 0x08BFF7B8
_080AA054:
	ldrh r3, [r6]
	mov r2, r8
	ldrh r2, [r2]
	adds r0, r3, r2
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, _080AA0B8 @ =0x08BFF798
	bl sub_080068C4
	adds r5, #0x10
	subs r4, #2
_080AA06E:
	cmp r4, #1
	bgt _080AA054
	cmp r4, #0
	ble _080AA094
_080AA076:
	ldrh r1, [r6]
	mov r3, r8
	ldrh r3, [r3]
	adds r0, r1, r3
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, _080AA0BC @ =0x08BFF760
	bl sub_080068C4
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bgt _080AA076
_080AA094:
	ldr r7, [sp, #0x20]
	mov r1, sb
	cmp r1, #0
	bgt _080AA008
_080AA09C:
	ldr r7, [sp, #0x1c]
	str r7, [sp, #8]
	adds r0, r7, #0
	cmp r0, #3
	bgt _080AA0A8
	b _080A9D70
_080AA0A8:
	add sp, #0x38
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AA0B8: .4byte 0x08BFF798
_080AA0BC: .4byte 0x08BFF760

	thumb_func_start sub_080AA0C0
sub_080AA0C0: @ 0x080AA0C0
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _080AA0E0 @ =0x08DAE26C
	adds r0, r4, #0
	bl Proc_Find
	bl Proc_End
	adds r0, r4, #0
	adds r1, r5, #0
	bl Proc_Start
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080AA0E0: .4byte 0x08DAE26C

	thumb_func_start sub_080AA0E4
sub_080AA0E4: @ 0x080AA0E4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AA10C @ =0x08DAE26C
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	beq _080AA106
	lsls r0, r4, #0xf
	lsrs r0, r0, #0x14
	adds r1, #0x4e
	strh r0, [r1]
	ldr r0, _080AA110 @ =0x0841BC84
	ldr r2, _080AA114 @ =0x06010000
	adds r1, r4, r2
	bl sub_08013688
_080AA106:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AA10C: .4byte 0x08DAE26C
_080AA110: .4byte 0x0841BC84
_080AA114: .4byte 0x06010000

	thumb_func_start sub_080AA118
sub_080AA118: @ 0x080AA118
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r7, r3, #0
	ldr r0, [sp, #0x1c]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	ldr r0, _080AA17C @ =0x08DAE26C
	bl Proc_Find
	adds r3, r0, #0
	cmp r3, #0
	beq _080AA170
	adds r0, #0x4a
	adds r0, r0, r4
	movs r1, #1
	strb r1, [r0]
	lsls r2, r4, #1
	adds r0, r3, #0
	adds r0, #0x2a
	adds r0, r0, r2
	strh r5, [r0]
	adds r0, r3, #0
	adds r0, #0x32
	adds r0, r0, r2
	strh r6, [r0]
	adds r0, r3, #0
	adds r0, #0x3e
	adds r0, r0, r4
	strb r7, [r0]
	adds r0, r3, #0
	adds r0, #0x3a
	adds r0, r0, r4
	ldr r1, [sp, #0x18]
	strb r1, [r0]
	adds r0, r3, #0
	adds r0, #0x42
	adds r0, r0, r2
	mov r1, r8
	strh r1, [r0]
_080AA170:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AA17C: .4byte 0x08DAE26C

	thumb_func_start sub_080AA180
sub_080AA180: @ 0x080AA180
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AA19C @ =0x08DAE26C
	bl Proc_Find
	cmp r0, #0
	beq _080AA196
	adds r0, #0x4a
	adds r0, r0, r4
	movs r1, #0
	strb r1, [r0]
_080AA196:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AA19C: .4byte 0x08DAE26C

	thumb_func_start sub_080AA1A0
sub_080AA1A0: @ 0x080AA1A0
	push {lr}
	ldr r0, _080AA1B8 @ =0x08DAE26C
	bl Proc_Find
	cmp r0, #0
	beq _080AA1B2
	movs r1, #1
	bl Proc_Goto
_080AA1B2:
	pop {r0}
	bx r0
	.align 2, 0
_080AA1B8: .4byte 0x08DAE26C

	thumb_func_start sub_080AA1BC
sub_080AA1BC: @ 0x080AA1BC
	push {r4, lr}
	ldr r0, _080AA1E4 @ =0x08DAE26C
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	beq _080AA1DC
	movs r1, #0
	bl Proc_Goto
	adds r0, r4, #0
	adds r0, #0x4e
	ldrh r0, [r0]
	lsls r0, r0, #5
	bl sub_080AA0E4
_080AA1DC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AA1E4: .4byte 0x08DAE26C

	thumb_func_start sub_080AA1E8
sub_080AA1E8: @ 0x080AA1E8
	push {lr}
	ldr r0, _080AA1F8 @ =0x08DAE26C
	bl Proc_Find
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_080AA1F8: .4byte 0x08DAE26C

	thumb_func_start sub_080AA1FC
sub_080AA1FC: @ 0x080AA1FC
	push {lr}
	ldr r1, [r0, #0x14]
	ldr r2, [r0, #0x2c]
	adds r0, r1, #0
	bl _call_via_r2
	pop {r0}
	bx r0

	thumb_func_start sub_080AA20C
sub_080AA20C: @ 0x080AA20C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	bl sub_080AA24C
	cmp r0, #0
	bne _080AA224
	ldr r0, _080AA22C @ =0x08DAE29C
	adds r1, r5, #0
	bl Proc_Start
	str r4, [r0, #0x2c]
_080AA224:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080AA22C: .4byte 0x08DAE29C

	thumb_func_start sub_080AA230
sub_080AA230: @ 0x080AA230
	push {lr}
	b _080AA238
_080AA234:
	bl Proc_End
_080AA238:
	ldr r0, _080AA248 @ =0x08DAE29C
	bl Proc_Find
	cmp r0, #0
	bne _080AA234
	pop {r0}
	bx r0
	.align 2, 0
_080AA248: .4byte 0x08DAE29C

	thumb_func_start sub_080AA24C
sub_080AA24C: @ 0x080AA24C
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0
	b _080AA25E
_080AA254:
	ldr r0, [r1, #0x2c]
	cmp r0, r4
	bne _080AA25E
	adds r0, r1, #0
	b _080AA26C
_080AA25E:
	ldr r0, _080AA274 @ =0x08DAE29C
	bl Proc_FindAfter
	adds r1, r0, #0
	cmp r1, #0
	bne _080AA254
	movs r0, #0
_080AA26C:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080AA274: .4byte 0x08DAE29C

	thumb_func_start sub_080AA278
sub_080AA278: @ 0x080AA278
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	bl GetGameTime
	ldr r1, _080AA338 @ =gPal
	ldrh r3, [r5, #0x3a]
	lsls r2, r3, #5
	movs r4, #0x87
	lsls r4, r4, #2
	adds r2, r2, r4
	adds r2, r2, r1
	ldr r1, _080AA33C @ =gPlaySt
	adds r1, #0x41
	ldrb r1, [r1]
	lsls r1, r1, #0x1c
	lsrs r1, r1, #0x1e
	lsls r1, r1, #4
	lsrs r0, r0, #2
	movs r4, #0xf
	ands r0, r4
	adds r1, r1, r0
	lsls r1, r1, #1
	ldr r0, _080AA340 @ =0x08428A80
	adds r1, r1, r0
	ldrh r0, [r1]
	strh r0, [r2]
	bl EnablePalSync
	ldr r1, [r5, #0x2c]
	ldr r2, [r5, #0x30]
	adds r2, #8
	ldr r3, _080AA344 @ =0x08BFF760
	ldrh r0, [r5, #0x3a]
	ands r4, r0
	lsls r4, r4, #0xc
	ldrh r0, [r5, #0x3c]
	adds r4, r0, r4
	ldrh r0, [r5, #0x36]
	adds r4, r0, r4
	str r4, [sp]
	movs r0, #4
	bl sub_080068C4
	movs r4, #1
	ldrh r1, [r5, #0x38]
	cmp r4, r1
	bge _080AA306
_080AA2D8:
	lsls r0, r4, #3
	ldr r1, [r5, #0x2c]
	adds r1, r1, r0
	ldr r2, [r5, #0x30]
	adds r2, #8
	movs r0, #0xf
	ldrh r3, [r5, #0x3a]
	ands r0, r3
	lsls r0, r0, #0xc
	ldrh r3, [r5, #0x3c]
	adds r0, r3, r0
	ldrh r3, [r5, #0x36]
	adds r0, r3, r0
	adds r0, #1
	str r0, [sp]
	movs r0, #4
	ldr r3, _080AA344 @ =0x08BFF760
	bl sub_080068C4
	adds r4, #1
	ldrh r0, [r5, #0x38]
	cmp r4, r0
	blt _080AA2D8
_080AA306:
	ldrh r1, [r5, #0x38]
	lsls r0, r1, #3
	ldr r1, [r5, #0x2c]
	adds r1, r1, r0
	ldr r2, [r5, #0x30]
	adds r2, #8
	ldr r3, _080AA344 @ =0x08BFF760
	movs r0, #0xf
	ldrh r4, [r5, #0x3a]
	ands r0, r4
	lsls r0, r0, #0xc
	ldrh r4, [r5, #0x3c]
	adds r0, r4, r0
	ldrh r5, [r5, #0x36]
	adds r0, r5, r0
	adds r0, #2
	str r0, [sp]
	movs r0, #4
	bl sub_080068C4
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AA338: .4byte gPal
_080AA33C: .4byte gPlaySt
_080AA340: .4byte 0x08428A80
_080AA344: .4byte 0x08BFF760

	thumb_func_start sub_080AA348
sub_080AA348: @ 0x080AA348
	adds r0, #0x35
	movs r1, #0
	strb r1, [r0]
	bx lr

	thumb_func_start sub_080AA350
sub_080AA350: @ 0x080AA350
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	bl sub_0804A740
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080AA370
	adds r0, r4, #0
	bl sub_080AA278
_080AA370:
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080AA388
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	adds r1, #2
	bl sub_08015ED8
_080AA388:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080AA390
sub_080AA390: @ 0x080AA390
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _080AA3B0 @ =0x08DAE2B4
	adds r0, r4, #0
	bl Proc_Find
	bl Proc_End
	adds r0, r4, #0
	adds r1, r5, #0
	bl Proc_Start
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080AA3B0: .4byte 0x08DAE2B4

	thumb_func_start sub_080AA3B4
sub_080AA3B4: @ 0x080AA3B4
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r0, _080AA3EC @ =0x08DAE2B4
	bl Proc_Find
	adds r2, r0, #0
	cmp r2, #0
	beq _080AA3E4
	adds r1, r2, #0
	adds r1, #0x34
	movs r0, #0
	strb r0, [r1]
	lsls r0, r5, #0xf
	lsrs r0, r0, #0x14
	strh r0, [r2, #0x36]
	movs r0, #0xf
	ands r4, r0
	strh r4, [r2, #0x3a]
	ldr r0, _080AA3F0 @ =0x08429278
	ldr r2, _080AA3F4 @ =0x06010000
	adds r1, r5, r2
	bl sub_08013688
_080AA3E4:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AA3EC: .4byte 0x08DAE2B4
_080AA3F0: .4byte 0x08429278
_080AA3F4: .4byte 0x06010000

	thumb_func_start sub_080AA3F8
sub_080AA3F8: @ 0x080AA3F8
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r4, r2, #0
	lsls r3, r3, #0x10
	lsrs r7, r3, #0x10
	ldr r0, _080AA420 @ =0x08DAE2B4
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	beq _080AA438
	str r5, [r1, #0x2c]
	str r6, [r1, #0x30]
	cmp r4, #0
	bne _080AA424
	adds r0, #0x35
	strb r4, [r0]
	b _080AA430
	.align 2, 0
_080AA420: .4byte 0x08DAE2B4
_080AA424:
	adds r2, r1, #0
	adds r2, #0x35
	movs r0, #1
	strb r0, [r2]
	strh r4, [r1, #0x38]
	strh r7, [r1, #0x3c]
_080AA430:
	adds r0, r1, #0
	movs r1, #1
	bl Proc_Goto
_080AA438:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080AA440
sub_080AA440: @ 0x080AA440
	push {lr}
	ldr r0, _080AA458 @ =0x08DAE2B4
	bl Proc_Find
	cmp r0, #0
	beq _080AA452
	movs r1, #0
	bl Proc_Goto
_080AA452:
	pop {r0}
	bx r0
	.align 2, 0
_080AA458: .4byte 0x08DAE2B4

	thumb_func_start sub_080AA45C
sub_080AA45C: @ 0x080AA45C
	push {lr}
	ldr r0, _080AA46C @ =0x08DAE2B4
	bl Proc_Find
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_080AA46C: .4byte 0x08DAE2B4

	thumb_func_start sub_080AA470
sub_080AA470: @ 0x080AA470
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r0, _080AA48C @ =0x08DAE2B4
	bl Proc_Find
	cmp r0, #0
	beq _080AA484
	adds r0, #0x34
	strb r4, [r0]
_080AA484:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AA48C: .4byte 0x08DAE2B4

	thumb_func_start sub_080AA490
sub_080AA490: @ 0x080AA490
	ldr r2, _080AA4B0 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_080AA4B0: .4byte gDispIo

	thumb_func_start sub_080AA4B4
sub_080AA4B4: @ 0x080AA4B4
	ldr r2, _080AA4D0 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_080AA4D0: .4byte gDispIo

	thumb_func_start sub_080AA4D4
sub_080AA4D4: @ 0x080AA4D4
	movs r2, #0
	movs r1, #3
	adds r0, #0x50
_080AA4DA:
	strb r2, [r0]
	subs r0, #0xc
	subs r1, #1
	cmp r1, #0
	bge _080AA4DA
	bx lr
	.align 2, 0

	thumb_func_start sub_080AA4E8
sub_080AA4E8: @ 0x080AA4E8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	str r0, [sp, #4]
	movs r1, #0
_080AA4F8:
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, #0x2c
	ldr r2, [sp, #4]
	adds r5, r2, r0
	movs r0, #0
	ldrsb r0, [r5, r0]
	adds r1, #1
	str r1, [sp, #0xc]
	cmp r0, #0
	bne _080AA512
	b _080AA80C
_080AA512:
	ldr r1, [r2, #0x60]
	movs r0, #0xf
	ands r1, r0
	lsls r1, r1, #0xc
	ldr r0, [r2, #0x5c]
	adds r0, r0, r1
	ldrh r3, [r5, #8]
	adds r0, r3, r0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	ldrb r0, [r5, #1]
	ldr r1, _080AA790 @ =0x000001FF
	ldrh r2, [r5, #2]
	ands r1, r2
	movs r2, #0xff
	ldrh r3, [r5, #4]
	ands r2, r3
	mov r3, r8
	str r3, [sp]
	ldr r3, _080AA794 @ =0x08BFF760
	bl sub_080068C4
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	ldrb r2, [r5, #6]
	subs r2, #1
	lsls r2, r2, #3
	adds r1, r1, r2
	ldr r3, _080AA790 @ =0x000001FF
	ands r1, r3
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r1, r2
	movs r2, #0xff
	ldrh r3, [r5, #4]
	ands r2, r3
	mov r3, r8
	str r3, [sp]
	ldr r3, _080AA794 @ =0x08BFF760
	bl sub_080068C4
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	ldrb r2, [r5, #6]
	subs r2, #1
	lsls r2, r2, #3
	adds r1, r1, r2
	ldr r3, _080AA790 @ =0x000001FF
	ands r1, r3
	movs r2, #0xc0
	lsls r2, r2, #6
	adds r1, r1, r2
	movs r3, #4
	ldrsh r2, [r5, r3]
	ldrb r3, [r5, #7]
	subs r3, #1
	lsls r3, r3, #3
	adds r2, r2, r3
	movs r3, #0xff
	ands r2, r3
	mov r3, r8
	str r3, [sp]
	ldr r3, _080AA794 @ =0x08BFF760
	bl sub_080068C4
	ldrb r0, [r5, #1]
	ldr r1, _080AA790 @ =0x000001FF
	ldrh r2, [r5, #2]
	ands r1, r2
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r1, r3
	movs r3, #4
	ldrsh r2, [r5, r3]
	ldrb r3, [r5, #7]
	subs r3, #1
	lsls r3, r3, #3
	adds r2, r2, r3
	movs r3, #0xff
	ands r2, r3
	mov r3, r8
	str r3, [sp]
	ldr r3, _080AA794 @ =0x08BFF760
	bl sub_080068C4
	movs r7, #1
	ldrb r0, [r5, #6]
	subs r0, #4
	cmp r7, r0
	bge _080AA628
	ldr r0, _080AA790 @ =0x000001FF
	mov sl, r0
	ldr r1, _080AA798 @ =0x08BFF7B8
	mov sb, r1
	mov r6, r8
	adds r6, #1
_080AA5D8:
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	lsls r4, r7, #3
	adds r1, r1, r4
	mov r3, sl
	ands r1, r3
	movs r2, #0xff
	ldrh r3, [r5, #4]
	ands r2, r3
	str r6, [sp]
	mov r3, sb
	bl sub_080068C4
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	adds r1, r1, r4
	mov r3, sl
	ands r1, r3
	movs r2, #0x80
	lsls r2, r2, #6
	adds r1, r1, r2
	movs r3, #4
	ldrsh r2, [r5, r3]
	ldrb r3, [r5, #7]
	subs r3, #1
	lsls r3, r3, #3
	adds r2, r2, r3
	movs r3, #0xff
	ands r2, r3
	str r6, [sp]
	mov r3, sb
	bl sub_080068C4
	adds r7, #4
	ldrb r0, [r5, #6]
	subs r0, #4
	cmp r7, r0
	blt _080AA5D8
_080AA628:
	ldrb r0, [r5, #6]
	subs r0, #2
	cmp r7, r0
	bge _080AA68C
	ldr r0, _080AA790 @ =0x000001FF
	mov sl, r0
	ldr r1, _080AA79C @ =0x08BFF798
	mov sb, r1
	mov r6, r8
	adds r6, #1
_080AA63C:
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	lsls r4, r7, #3
	adds r1, r1, r4
	mov r3, sl
	ands r1, r3
	movs r2, #0xff
	ldrh r3, [r5, #4]
	ands r2, r3
	str r6, [sp]
	mov r3, sb
	bl sub_080068C4
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	adds r1, r1, r4
	mov r3, sl
	ands r1, r3
	movs r2, #0x80
	lsls r2, r2, #6
	adds r1, r1, r2
	movs r3, #4
	ldrsh r2, [r5, r3]
	ldrb r3, [r5, #7]
	subs r3, #1
	lsls r3, r3, #3
	adds r2, r2, r3
	movs r3, #0xff
	ands r2, r3
	str r6, [sp]
	mov r3, sb
	bl sub_080068C4
	adds r7, #2
	ldrb r0, [r5, #6]
	subs r0, #2
	cmp r7, r0
	blt _080AA63C
_080AA68C:
	ldrb r0, [r5, #6]
	subs r0, #1
	cmp r7, r0
	bge _080AA6F0
	ldr r0, _080AA790 @ =0x000001FF
	mov sl, r0
	ldr r1, _080AA794 @ =0x08BFF760
	mov sb, r1
	mov r6, r8
	adds r6, #1
_080AA6A0:
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	lsls r4, r7, #3
	adds r1, r1, r4
	mov r3, sl
	ands r1, r3
	movs r2, #0xff
	ldrh r3, [r5, #4]
	ands r2, r3
	str r6, [sp]
	mov r3, sb
	bl sub_080068C4
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	adds r1, r1, r4
	mov r3, sl
	ands r1, r3
	movs r2, #0x80
	lsls r2, r2, #6
	adds r1, r1, r2
	movs r3, #4
	ldrsh r2, [r5, r3]
	ldrb r3, [r5, #7]
	subs r3, #1
	lsls r3, r3, #3
	adds r2, r2, r3
	movs r3, #0xff
	ands r2, r3
	str r6, [sp]
	mov r3, sb
	bl sub_080068C4
	adds r7, #1
	ldrb r0, [r5, #6]
	subs r0, #1
	cmp r7, r0
	blt _080AA6A0
_080AA6F0:
	movs r7, #1
	ldrb r0, [r5, #7]
	subs r0, #1
	cmp r7, r0
	blt _080AA6FC
	b _080AA80C
_080AA6FC:
	ldr r0, _080AA790 @ =0x000001FF
	mov sl, r0
	movs r1, #0xff
	mov sb, r1
	mov r2, r8
	adds r2, #9
	str r2, [sp, #8]
_080AA70A:
	ldrb r0, [r5, #1]
	mov r1, sl
	ldrh r3, [r5, #2]
	ands r1, r3
	movs r3, #4
	ldrsh r2, [r5, r3]
	lsls r4, r7, #3
	adds r2, r2, r4
	mov r3, sb
	ands r2, r3
	ldr r3, [sp, #8]
	str r3, [sp]
	ldr r3, _080AA794 @ =0x08BFF760
	bl sub_080068C4
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	ldrb r2, [r5, #6]
	subs r2, #1
	lsls r2, r2, #3
	adds r1, r1, r2
	mov r3, sl
	ands r1, r3
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r1, r2
	movs r3, #4
	ldrsh r2, [r5, r3]
	adds r2, r2, r4
	mov r3, sb
	ands r2, r3
	ldr r3, [sp, #8]
	str r3, [sp]
	ldr r3, _080AA794 @ =0x08BFF760
	bl sub_080068C4
	movs r6, #1
	ldrb r0, [r5, #6]
	subs r0, #4
	adds r7, #1
	cmp r6, r0
	bge _080AA7C6
_080AA760:
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	lsls r2, r6, #3
	adds r1, r1, r2
	mov r3, sl
	ands r1, r3
	movs r3, #4
	ldrsh r2, [r5, r3]
	adds r2, r2, r4
	mov r3, sb
	ands r2, r3
	mov r3, r8
	adds r3, #5
	str r3, [sp]
	ldr r3, _080AA798 @ =0x08BFF7B8
	bl sub_080068C4
	adds r6, #4
	ldrb r0, [r5, #6]
	subs r0, #4
	cmp r6, r0
	blt _080AA760
	b _080AA7C6
	.align 2, 0
_080AA790: .4byte 0x000001FF
_080AA794: .4byte 0x08BFF760
_080AA798: .4byte 0x08BFF7B8
_080AA79C: .4byte 0x08BFF798
_080AA7A0:
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	lsls r2, r6, #3
	adds r1, r1, r2
	mov r3, sl
	ands r1, r3
	movs r3, #4
	ldrsh r2, [r5, r3]
	adds r2, r2, r4
	mov r3, sb
	ands r2, r3
	mov r3, r8
	adds r3, #5
	str r3, [sp]
	ldr r3, _080AA7D0 @ =0x08BFF798
	bl sub_080068C4
	adds r6, #2
_080AA7C6:
	ldrb r0, [r5, #6]
	subs r0, #2
	cmp r6, r0
	blt _080AA7A0
	b _080AA7FA
	.align 2, 0
_080AA7D0: .4byte 0x08BFF798
_080AA7D4:
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	lsls r2, r6, #3
	adds r1, r1, r2
	mov r3, sl
	ands r1, r3
	movs r3, #4
	ldrsh r2, [r5, r3]
	adds r2, r2, r4
	mov r3, sb
	ands r2, r3
	mov r3, r8
	adds r3, #5
	str r3, [sp]
	ldr r3, _080AA824 @ =0x08BFF760
	bl sub_080068C4
	adds r6, #1
_080AA7FA:
	ldrb r0, [r5, #6]
	subs r0, #1
	cmp r6, r0
	blt _080AA7D4
	ldrb r0, [r5, #7]
	subs r0, #1
	cmp r7, r0
	bge _080AA80C
	b _080AA70A
_080AA80C:
	ldr r1, [sp, #0xc]
	cmp r1, #3
	bgt _080AA814
	b _080AA4F8
_080AA814:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AA824: .4byte 0x08BFF760

	thumb_func_start sub_080AA828
sub_080AA828: @ 0x080AA828
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r1, #0
	adds r1, r2, #0
	ldr r0, _080AA860 @ =0x08DAE2E4
	bl Proc_Start
	adds r5, r0, #0
	ldr r0, _080AA864 @ =0x081DDAC8
	ldr r2, _080AA868 @ =0x06010000
	adds r1, r4, r2
	bl sub_08013688
	ldr r0, _080AA86C @ =0x02022880
	adds r1, r6, #0
	adds r1, #0x10
	lsls r1, r1, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	lsls r4, r4, #0xf
	lsrs r4, r4, #0x14
	str r4, [r5, #0x5c]
	str r6, [r5, #0x60]
	adds r0, r5, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080AA860: .4byte 0x08DAE2E4
_080AA864: .4byte 0x081DDAC8
_080AA868: .4byte 0x06010000
_080AA86C: .4byte 0x02022880

	thumb_func_start sub_080AA870
sub_080AA870: @ 0x080AA870
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r6, r1, #0
	adds r7, r2, #0
	mov r8, r3
	ldr r0, [sp, #0x20]
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	ldr r0, _080AA8BC @ =0x08DAE2E4
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	beq _080AA8B0
	lsls r0, r4, #1
	adds r0, r0, r4
	lsls r0, r0, #2
	adds r0, #0x2c
	adds r0, r1, r0
	movs r1, #1
	strb r1, [r0]
	strb r6, [r0, #1]
	strh r7, [r0, #2]
	mov r1, r8
	strh r1, [r0, #4]
	ldr r1, [sp, #0x18]
	strb r1, [r0, #6]
	ldr r1, [sp, #0x1c]
	strb r1, [r0, #7]
	strh r5, [r0, #8]
_080AA8B0:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AA8BC: .4byte 0x08DAE2E4

	thumb_func_start sub_080AA8C0
sub_080AA8C0: @ 0x080AA8C0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AA8E4 @ =0x08DAE2E4
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	beq _080AA8DE
	lsls r0, r4, #1
	adds r0, r0, r4
	lsls r0, r0, #2
	adds r0, #0x2c
	adds r0, r1, r0
	movs r1, #0
	strb r1, [r0]
_080AA8DE:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AA8E4: .4byte 0x08DAE2E4

	thumb_func_start sub_080AA8E8
sub_080AA8E8: @ 0x080AA8E8
	push {lr}
	ldr r0, _080AA8F8 @ =0x08DAE2E4
	bl Proc_Find
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_080AA8F8: .4byte 0x08DAE2E4

	thumb_func_start sub_080AA8FC
sub_080AA8FC: @ 0x080AA8FC
	movs r2, #0
	adds r0, #0x2c
	movs r1, #3
_080AA902:
	strb r2, [r0]
	strb r2, [r0, #6]
	adds r0, #8
	subs r1, #1
	cmp r1, #0
	bge _080AA902
	bx lr

	thumb_func_start sub_080AA910
sub_080AA910: @ 0x080AA910
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x30
	mov sl, r0
	add r1, sp, #4
	ldr r0, _080AA9F8 @ =0x0843941C
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldr r0, [r0]
	str r0, [r1]
	add r2, sp, #0x14
	adds r1, r2, #0
	ldr r0, _080AA9FC @ =0x0843942C
	ldm r0!, {r3, r5, r7}
	stm r1!, {r3, r5, r7}
	ldr r0, [r0]
	str r0, [r1]
	mov r4, sl
	adds r4, #0x2d
	str r4, [sp, #0x28]
	mov r5, sl
	adds r5, #0x2c
	movs r7, #3
	str r7, [sp, #0x24]
_080AA946:
	movs r0, #0
	ldrsb r0, [r5, r0]
	cmp r0, #0
	beq _080AAA2C
	movs r0, #2
	ldrsh r6, [r5, r0]
	movs r0, #6
	ldrsb r0, [r5, r0]
	cmp r0, #0
	beq _080AAA00
	ldrb r4, [r5, #1]
	adds r0, r4, #0
	movs r1, #1
	ands r0, r1
	mov r7, sl
	adds r7, #0x50
	movs r2, #0x4e
	add r2, sl
	mov r8, r2
	movs r3, #0x4c
	add r3, sl
	mov sb, r3
	cmp r0, #0
	beq _080AA99E
	ldrb r0, [r7]
	adds r1, r6, #0
	adds r1, #0x60
	movs r3, #4
	ldrsh r2, [r5, r3]
	mov ip, r2
	mov r2, r8
	movs r3, #0
	ldrsh r2, [r2, r3]
	add r2, ip
	lsls r3, r4, #2
	add r3, sp
	adds r3, #0x14
	ldr r3, [r3]
	mov r4, sb
	ldrh r4, [r4]
	str r4, [sp]
	bl sub_080068C4
	adds r6, #0x20
_080AA99E:
	ldrb r0, [r7]
	movs r1, #4
	ldrsh r2, [r5, r1]
	mov r3, r8
	movs r4, #0
	ldrsh r1, [r3, r4]
	adds r2, r2, r1
	ldr r3, [sp, #0x28]
	ldrb r3, [r3]
	lsls r1, r3, #2
	add r1, sp
	adds r1, #4
	ldr r3, [r1]
	mov r4, sb
	ldrh r1, [r4]
	str r1, [sp]
	adds r1, r6, #0
	bl sub_080068C4
	ldr r0, [sp, #0x28]
	ldrb r3, [r0]
	adds r0, r3, #0
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	bne _080AAA2C
	adds r6, #0x60
	ldrb r0, [r7]
	movs r4, #4
	ldrsh r2, [r5, r4]
	mov r7, r8
	movs r4, #0
	ldrsh r1, [r7, r4]
	adds r2, r2, r1
	lsls r1, r3, #2
	add r1, sp
	adds r1, #0x14
	ldr r3, [r1]
	mov r7, sb
	ldrh r1, [r7]
	str r1, [sp]
	adds r1, r6, #0
	bl sub_080068C4
	b _080AAA2C
	.align 2, 0
_080AA9F8: .4byte 0x0843941C
_080AA9FC: .4byte 0x0843942C
_080AAA00:
	mov r0, sl
	adds r0, #0x50
	ldrb r0, [r0]
	movs r1, #4
	ldrsh r2, [r5, r1]
	mov r1, sl
	adds r1, #0x4e
	movs r3, #0
	ldrsh r1, [r1, r3]
	adds r2, r2, r1
	ldrb r4, [r5, #1]
	lsls r1, r4, #2
	add r1, sp
	adds r1, #4
	ldr r3, [r1]
	mov r1, sl
	adds r1, #0x4c
	ldrh r1, [r1]
	str r1, [sp]
	adds r1, r6, #0
	bl sub_080068C4
_080AAA2C:
	ldr r7, [sp, #0x28]
	adds r7, #8
	str r7, [sp, #0x28]
	adds r5, #8
	ldr r0, [sp, #0x24]
	subs r0, #1
	str r0, [sp, #0x24]
	cmp r0, #0
	blt _080AAA40
	b _080AA946
_080AAA40:
	add sp, #0x30
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080AAA50
sub_080AAA50: @ 0x080AAA50
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	mov sb, r0
	adds r4, r1, #0
	mov r8, r2
	adds r5, r3, #0
	ldr r6, [sp, #0x1c]
	ldr r7, [sp, #0x20]
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	lsls r6, r6, #0x10
	lsrs r6, r6, #0x10
	bl sub_080AAB64
	ldr r0, _080AAAC0 @ =0x08DAE404
	adds r1, r7, #0
	bl Proc_Start
	adds r7, r0, #0
	ldr r0, _080AAAC4 @ =0x0842CCF4
	ldr r2, _080AAAC8 @ =0x06010000
	adds r1, r4, r2
	bl sub_08013688
	ldr r0, _080AAACC @ =0x0841EC70
	mov r1, r8
	adds r1, #0x10
	lsls r1, r1, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	lsls r4, r4, #0xf
	lsrs r4, r4, #0x14
	movs r0, #0xf
	mov r1, r8
	ands r0, r1
	lsls r0, r0, #0xc
	adds r4, r4, r0
	adds r5, r5, r4
	adds r0, r7, #0
	adds r0, #0x4c
	strh r5, [r0]
	adds r0, #2
	strh r6, [r0]
	adds r0, #2
	mov r2, sb
	strb r2, [r0]
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AAAC0: .4byte 0x08DAE404
_080AAAC4: .4byte 0x0842CCF4
_080AAAC8: .4byte 0x06010000
_080AAACC: .4byte 0x0841EC70

	thumb_func_start sub_080AAAD0
sub_080AAAD0: @ 0x080AAAD0
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r0, _080AAB10 @ =0x08DAE404
	bl Proc_Find
	lsls r4, r4, #3
	adds r0, r0, r4
	adds r2, r0, #0
	adds r2, #0x2c
	movs r1, #1
	strb r1, [r2]
	ldr r2, _080AAB14 @ =0x000001FF
	adds r1, r2, #0
	ands r5, r1
	strh r5, [r0, #0x2e]
	movs r1, #0xff
	ands r6, r1
	strh r6, [r0, #0x30]
	adds r0, #0x2d
	mov r1, r8
	strb r1, [r0]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AAB10: .4byte 0x08DAE404
_080AAB14: .4byte 0x000001FF

	thumb_func_start sub_080AAB18
sub_080AAB18: @ 0x080AAB18
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AAB38 @ =0x08DAE404
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	beq _080AAB32
	lsls r0, r4, #3
	adds r0, r1, r0
	adds r0, #0x2c
	movs r1, #0
	strb r1, [r0]
_080AAB32:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AAB38: .4byte 0x08DAE404

	thumb_func_start sub_080AAB3C
sub_080AAB3C: @ 0x080AAB3C
	push {r4, r5, lr}
	adds r4, r0, #0
	lsls r1, r1, #0x18
	lsrs r5, r1, #0x18
	ldr r0, _080AAB60 @ =0x08DAE404
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	beq _080AAB58
	lsls r0, r4, #3
	adds r0, r1, r0
	adds r0, #0x32
	strb r5, [r0]
_080AAB58:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AAB60: .4byte 0x08DAE404

	thumb_func_start sub_080AAB64
sub_080AAB64: @ 0x080AAB64
	push {lr}
	ldr r0, _080AAB74 @ =0x08DAE404
	bl Proc_Find
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_080AAB74: .4byte 0x08DAE404

	thumb_func_start sub_080AAB78
sub_080AAB78: @ 0x080AAB78
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	bl SetTextFont
	adds r1, r4, #0
	adds r1, #0x5a
	ldrh r0, [r1]
	cmp r0, #4
	bne _080AAB90
	movs r0, #0
	strh r0, [r1]
_080AAB90:
	ldrh r0, [r1]
	cmp r0, #0
	bne _080AABCC
	ldr r1, [r4, #0x54]
	ldrb r0, [r1]
	cmp r0, #0
	beq _080AABB4
	cmp r0, #1
	beq _080AABBC
	adds r0, r4, #0
	adds r0, #0x58
	ldrb r0, [r0]
	lsls r0, r0, #3
	adds r0, #0x44
	adds r0, r4, r0
	bl Text_DrawCharacter
	b _080AABCA
_080AABB4:
	adds r0, r4, #0
	bl Proc_Break
	b _080AABCC
_080AABBC:
	adds r1, r4, #0
	adds r1, #0x58
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldr r0, [r4, #0x54]
	adds r0, #1
_080AABCA:
	str r0, [r4, #0x54]
_080AABCC:
	adds r1, r4, #0
	adds r1, #0x5a
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	movs r0, #0
	bl SetTextFont
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080AABE4
sub_080AABE4: @ 0x080AABE4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	mov r8, r1
	mov sb, r2
	adds r5, r3, #0
	ldr r4, _080AAC7C @ =0x08DAE424
	adds r0, r4, #0
	bl Proc_Find
	adds r6, r0, #0
	cmp r6, #0
	bne _080AAC0C
	adds r0, r4, #0
	ldr r1, [sp, #0x1c]
	bl Proc_StartBlocking
	adds r6, r0, #0
_080AAC0C:
	adds r0, r6, #0
	adds r0, #0x2c
	ldr r2, _080AAC80 @ =0x06010000
	adds r1, r7, r2
	mov r2, r8
	bl InitSpriteTextFont
	mov r0, sb
	str r0, [r6, #0x54]
	adds r0, r6, #0
	adds r0, #0x58
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r5, [r0]
	adds r0, #1
	strh r1, [r0]
	mov r7, r8
	adds r7, #0x10
	cmp r5, #0
	ble _080AAC50
	adds r4, r6, #0
	adds r4, #0x44
_080AAC3A:
	adds r0, r4, #0
	bl InitSpriteText
	adds r0, r4, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bne _080AAC3A
_080AAC50:
	ldr r0, _080AAC84 @ =0x081901C8
	lsls r1, r7, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #0
	bl SetTextFontGlyphs
	movs r0, #0
	bl SetTextFont
	adds r0, r6, #0
	movs r1, #0
	bl Proc_Goto
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AAC7C: .4byte 0x08DAE424
_080AAC80: .4byte 0x06010000
_080AAC84: .4byte 0x081901C8

	thumb_func_start sub_080AAC88
sub_080AAC88: @ 0x080AAC88
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
	b _080AAC96
_080AAC90:
	adds r0, r4, #0
	bl Proc_End
_080AAC96:
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_08004B6C
	adds r4, r0, #0
	cmp r4, #0
	bne _080AAC90
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start nullsub_085
nullsub_085: @ 0x080AACAC
	bx lr
	.align 2, 0

	thumb_func_start sub_080AACB0
sub_080AACB0: @ 0x080AACB0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x14
	ldr r4, [sp, #0x2c]
	ldr r5, [sp, #0x30]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	lsls r1, r1, #0x10
	lsrs r7, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r1, r2, #0x10
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	lsls r4, r4, #0x10
	lsls r5, r5, #0x10
	lsrs r6, r5, #0x10
	lsrs r2, r4, #0x10
	asrs r4, r4, #0x10
	cmp r4, #4
	bgt _080AACDE
	movs r2, #4
_080AACDE:
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	cmp r0, #4
	bgt _080AACE8
	movs r6, #4
_080AACE8:
	lsls r0, r1, #0x10
	asrs r0, r0, #8
	str r0, [sp]
	lsls r0, r3, #0x10
	asrs r0, r0, #8
	str r0, [sp, #4]
	mov r0, sp
	movs r1, #0
	strh r1, [r0, #8]
	strh r1, [r0, #0xa]
	mov r5, sp
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	movs r4, #0x80
	lsls r4, r4, #9
	adds r0, r4, #0
	bl __divsi3
	strh r0, [r5, #0xc]
	mov r5, sp
	lsls r1, r6, #0x10
	asrs r1, r1, #0x10
	adds r0, r4, #0
	bl __divsi3
	strh r0, [r5, #0xe]
	mov r1, sp
	lsls r0, r7, #4
	strh r0, [r1, #0x10]
	ldr r1, _080AAD40 @ =0x030027E8
	mov r0, r8
	cmp r0, #2
	bne _080AAD2C
	subs r1, #0x10
_080AAD2C:
	mov r0, sp
	movs r2, #1
	bl BgAffineSet
	add sp, #0x14
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AAD40: .4byte 0x030027E8

	thumb_func_start sub_080AAD44
sub_080AAD44: @ 0x080AAD44
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r3, #0
	cmp r0, #2
	bne _080AAD5A
	ldr r3, _080AAD90 @ =0x030027D8
_080AAD5A:
	movs r4, #2
	ldrsh r0, [r3, r4]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	muls r0, r1, r0
	asrs r0, r0, #8
	strh r0, [r3, #2]
	movs r4, #6
	ldrsh r0, [r3, r4]
	muls r0, r1, r0
	asrs r0, r0, #8
	strh r0, [r3, #6]
	movs r1, #0
	ldrsh r0, [r3, r1]
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	muls r0, r1, r0
	asrs r0, r0, #8
	strh r0, [r3]
	movs r2, #4
	ldrsh r0, [r3, r2]
	muls r0, r1, r0
	asrs r0, r0, #8
	strh r0, [r3, #4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AAD90: .4byte 0x030027D8

	thumb_func_start sub_080AAD94
sub_080AAD94: @ 0x080AAD94
	push {r4, r5, r6, r7, lr}
	ldr r4, [sp, #0x14]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	lsls r3, r3, #0x10
	lsrs r5, r3, #0x10
	lsls r4, r4, #0x10
	lsrs r6, r4, #0x10
	movs r4, #0
	cmp r0, #2
	bne _080AADB4
	ldr r4, _080AADF8 @ =0x030027D8
_080AADB4:
	movs r3, #0
	ldrsh r0, [r4, r3]
	lsls r3, r1, #0x10
	asrs r3, r3, #0x10
	rsbs r3, r3, #0
	adds r1, r0, #0
	muls r1, r3, r1
	movs r7, #2
	ldrsh r0, [r4, r7]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	rsbs r2, r2, #0
	muls r0, r2, r0
	adds r1, r1, r0
	lsls r0, r5, #0x10
	asrs r0, r0, #8
	adds r1, r1, r0
	str r1, [r4, #8]
	movs r1, #4
	ldrsh r0, [r4, r1]
	adds r1, r0, #0
	muls r1, r3, r1
	movs r3, #6
	ldrsh r0, [r4, r3]
	muls r0, r2, r0
	adds r1, r1, r0
	lsls r0, r6, #0x10
	asrs r0, r0, #8
	adds r1, r1, r0
	str r1, [r4, #0xc]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AADF8: .4byte 0x030027D8

	thumb_func_start sub_080AADFC
sub_080AADFC: @ 0x080AADFC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x14
	mov r8, r1
	adds r1, r2, #0
	ldr r2, [sp, #0x2c]
	ldr r6, [sp, #0x30]
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	movs r0, #0x80
	lsls r0, r0, #3
	cmp r2, r0
	bgt _080AAE1A
	adds r2, r0, #0
_080AAE1A:
	cmp r6, r0
	bgt _080AAE20
	adds r6, r0, #0
_080AAE20:
	str r1, [sp]
	str r3, [sp, #4]
	mov r0, sp
	movs r1, #0
	strh r1, [r0, #8]
	strh r1, [r0, #0xa]
	mov r5, sp
	movs r4, #0x80
	lsls r4, r4, #0x11
	adds r0, r4, #0
	adds r1, r2, #0
	bl __divsi3
	strh r0, [r5, #0xc]
	mov r5, sp
	adds r0, r4, #0
	adds r1, r6, #0
	bl __divsi3
	strh r0, [r5, #0xe]
	mov r1, sp
	mov r2, r8
	asrs r0, r2, #4
	strh r0, [r1, #0x10]
	ldr r1, _080AAE6C @ =0x030027E8
	cmp r7, #2
	bne _080AAE58
	subs r1, #0x10
_080AAE58:
	mov r0, sp
	movs r2, #1
	bl BgAffineSet
	add sp, #0x14
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AAE6C: .4byte 0x030027E8

	thumb_func_start sub_080AAE70
sub_080AAE70: @ 0x080AAE70
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r3, #0
	cmp r0, #2
	bne _080AAE7E
	ldr r3, _080AAEAC @ =0x030027D8
_080AAE7E:
	movs r4, #2
	ldrsh r0, [r3, r4]
	muls r0, r1, r0
	asrs r0, r0, #0x10
	strh r0, [r3, #2]
	movs r4, #6
	ldrsh r0, [r3, r4]
	muls r0, r1, r0
	asrs r0, r0, #0x10
	strh r0, [r3, #6]
	movs r1, #0
	ldrsh r0, [r3, r1]
	muls r0, r2, r0
	asrs r0, r0, #0x10
	strh r0, [r3]
	movs r4, #4
	ldrsh r0, [r3, r4]
	muls r0, r2, r0
	asrs r0, r0, #0x10
	strh r0, [r3, #4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AAEAC: .4byte 0x030027D8

	thumb_func_start sub_080AAEB0
sub_080AAEB0: @ 0x080AAEB0
	push {r4, r5, r6, lr}
	adds r5, r3, #0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r4, #0
	cmp r0, #2
	bne _080AAEC0
	ldr r4, _080AAEF4 @ =0x030027D8
_080AAEC0:
	movs r3, #0
	ldrsh r0, [r4, r3]
	rsbs r3, r1, #0
	muls r0, r3, r0
	movs r6, #2
	ldrsh r1, [r4, r6]
	rsbs r2, r2, #0
	muls r1, r2, r1
	adds r0, r0, r1
	asrs r0, r0, #8
	adds r0, r0, r5
	str r0, [r4, #8]
	movs r1, #4
	ldrsh r0, [r4, r1]
	muls r0, r3, r0
	movs r3, #6
	ldrsh r1, [r4, r3]
	muls r1, r2, r1
	adds r0, r0, r1
	asrs r0, r0, #8
	ldr r1, [sp, #0x10]
	adds r0, r0, r1
	str r0, [r4, #0xc]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AAEF4: .4byte 0x030027D8

	thumb_func_start sub_080AAEF8
sub_080AAEF8: @ 0x080AAEF8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r1, #0
	mov ip, r2
	mov sb, r3
	ldr r2, [sp, #0x20]
	ldr r4, [sp, #0x28]
	ldr r3, [sp, #0x2c]
	ldrh r1, [r7]
	lsrs r1, r1, #1
	mov r8, r1
	movs r1, #0x78
	mov sl, r1
	adds r6, r7, #4
	lsls r1, r0, #2
	adds r1, r1, r0
	lsls r1, r1, #0xd
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r5, r1, r0
	cmp r4, #0
	beq _080AAF90
	cmp r3, #0
	beq _080AAF90
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _080AAF3A
	ldrh r4, [r7]
	ldrh r3, [r7, #2]
_080AAF3A:
	mov r1, ip
	asrs r1, r1, #1
	mov ip, r1
	asrs r2, r2, #1
	asrs r4, r4, #1
	lsls r4, r4, #1
	ldr r0, [sp, #0x24]
	mov r1, r8
	muls r1, r0, r1
	adds r0, r1, #0
	lsls r0, r0, #1
	adds r0, r6, r0
	lsls r1, r2, #1
	adds r6, r0, r1
	mov r2, sl
	mov r0, sb
	muls r0, r2, r0
	lsls r0, r0, #1
	adds r0, r5, r0
	mov r2, ip
	lsls r1, r2, #1
	adds r5, r0, r1
	cmp r3, #0
	ble _080AAF90
	asrs r7, r4, #1
	adds r4, r3, #0
	ldr r0, _080AAFA0 @ =0x001FFFFF
	mov sb, r0
_080AAF72:
	adds r0, r6, #0
	adds r1, r5, #0
	mov r2, sb
	ands r2, r7
	bl CpuSet
	mov r1, r8
	lsls r0, r1, #1
	adds r6, r6, r0
	mov r2, sl
	lsls r0, r2, #1
	adds r5, r5, r0
	subs r4, #1
	cmp r4, #0
	bne _080AAF72
_080AAF90:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AAFA0: .4byte 0x001FFFFF

	thumb_func_start sub_080AAFA4
sub_080AAFA4: @ 0x080AAFA4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r4, r1, #0
	ldr r6, [sp, #0x20]
	ldr r1, [sp, #0x24]
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov sb, r1
	movs r1, #0x78
	mov r8, r1
	lsls r1, r0, #2
	adds r1, r1, r0
	lsls r1, r1, #0xd
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r5, r1, r0
	cmp r3, #0
	beq _080AB00E
	cmp r6, #0
	beq _080AB00E
	asrs r4, r4, #1
	asrs r3, r3, #1
	lsls r3, r3, #1
	mov r0, r8
	muls r0, r2, r0
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r1, r4, #1
	adds r5, r0, r1
	cmp r6, #0
	ble _080AB00E
	adds r4, r6, #0
	lsls r0, r3, #0xa
	lsrs r6, r0, #0xb
	movs r7, #0x80
	lsls r7, r7, #0x11
_080AAFF2:
	mov r0, sp
	mov r1, sb
	strh r1, [r0]
	adds r1, r5, #0
	adds r2, r6, #0
	orrs r2, r7
	bl CpuSet
	mov r1, r8
	lsls r0, r1, #1
	adds r5, r5, r0
	subs r4, #1
	cmp r4, #0
	bne _080AAFF2
_080AB00E:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080AB01C
sub_080AB01C: @ 0x080AB01C
	push {r4, lr}
	movs r3, #0x1f
	ands r1, r3
	ands r2, r3
	ldr r4, _080AB03C @ =gPal
	lsls r2, r2, #0xa
	lsls r1, r1, #5
	adds r2, r2, r1
	ands r3, r0
	adds r2, r2, r3
	strh r2, [r4]
	bl EnablePalSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AB03C: .4byte gPal

	thumb_func_start sub_080AB040
sub_080AB040: @ 0x080AB040
	push {r4, lr}
	adds r4, r0, #0
	bl sub_08013BCC
	movs r0, #0
	str r0, [r4, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080AB054
sub_080AB054: @ 0x080AB054
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	adds r1, r0, r1
	str r1, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080AB078
	lsls r1, r1, #1
	movs r0, #0x80
	lsls r0, r0, #2
	subs r2, r0, r1
	b _080AB07A
_080AB078:
	lsls r2, r1, #1
_080AB07A:
	ldr r3, [r4, #0x34]
	adds r0, r2, #0
	adds r1, r2, #0
	bl sub_08013C48
	ldr r0, [r4, #0x2c]
	cmp r0, #0x80
	bne _080AB090
	adds r0, r4, #0
	bl Proc_Break
_080AB090:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080AB098
sub_080AB098: @ 0x080AB098
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	adds r1, r0, r1
	str r1, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080AB0BC
	lsls r0, r1, #1
	movs r1, #0x80
	lsls r1, r1, #1
	adds r2, r0, r1
	b _080AB0C4
_080AB0BC:
	lsls r1, r1, #1
	movs r0, #0x80
	lsls r0, r0, #1
	subs r2, r0, r1
_080AB0C4:
	ldr r3, [r4, #0x34]
	adds r0, r2, #0
	adds r1, r2, #0
	bl sub_08013C48
	ldr r0, [r4, #0x2c]
	cmp r0, #0x80
	bne _080AB0DA
	adds r0, r4, #0
	bl Proc_Break
_080AB0DA:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080AB0E0
sub_080AB0E0: @ 0x080AB0E0
	ldr r1, [r0, #0x34]
	ldr r0, _080AB108 @ =0x0000FFFF
	cmp r1, r0
	bne _080AB110
	ldr r2, _080AB10C @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	b _080AB12C
	.align 2, 0
_080AB108: .4byte 0x0000FFFF
_080AB10C: .4byte gDispIo
_080AB110:
	ldr r2, _080AB130 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
_080AB12C:
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_080AB130: .4byte gDispIo

	thumb_func_start sub_080AB134
sub_080AB134: @ 0x080AB134
	push {lr}
	ldr r0, _080AB148 @ =0x08DAE43C
	bl Proc_Find
	cmp r0, #0
	beq _080AB142
	movs r0, #1
_080AB142:
	pop {r1}
	bx r1
	.align 2, 0
_080AB148: .4byte 0x08DAE43C

	thumb_func_start sub_080AB14C
sub_080AB14C: @ 0x080AB14C
	push {lr}
	ldr r0, _080AB160 @ =0x08DAE46C
	bl Proc_Find
	cmp r0, #0
	beq _080AB15A
	movs r0, #1
_080AB15A:
	pop {r1}
	bx r1
	.align 2, 0
_080AB160: .4byte 0x08DAE46C

	thumb_func_start sub_080AB164
sub_080AB164: @ 0x080AB164
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AB184 @ =0x08DAE43C
	movs r1, #4
	bl Proc_Start
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	str r4, [r0, #0x30]
	subs r1, #1
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AB184: .4byte 0x08DAE43C

	thumb_func_start sub_080AB188
sub_080AB188: @ 0x080AB188
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AB1A8 @ =0x08DAE46C
	movs r1, #4
	bl Proc_Start
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	str r4, [r0, #0x30]
	subs r1, #1
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AB1A8: .4byte 0x08DAE46C

	thumb_func_start sub_080AB1AC
sub_080AB1AC: @ 0x080AB1AC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AB1CC @ =0x08DAE43C
	bl Proc_StartBlocking
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	str r4, [r0, #0x30]
	subs r1, #1
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AB1CC: .4byte 0x08DAE43C

	thumb_func_start sub_080AB1D0
sub_080AB1D0: @ 0x080AB1D0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AB1F0 @ =0x08DAE46C
	bl Proc_StartBlocking
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	str r4, [r0, #0x30]
	subs r1, #1
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AB1F0: .4byte 0x08DAE46C

	thumb_func_start sub_080AB1F4
sub_080AB1F4: @ 0x080AB1F4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AB214 @ =0x08DAE43C
	movs r1, #4
	bl Proc_Start
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	str r4, [r0, #0x30]
	ldr r1, _080AB218 @ =0x0000FFFF
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AB214: .4byte 0x08DAE43C
_080AB218: .4byte 0x0000FFFF

	thumb_func_start sub_080AB21C
sub_080AB21C: @ 0x080AB21C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AB23C @ =0x08DAE46C
	movs r1, #4
	bl Proc_Start
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	str r4, [r0, #0x30]
	ldr r1, _080AB240 @ =0x0000FFFF
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AB23C: .4byte 0x08DAE46C
_080AB240: .4byte 0x0000FFFF

	thumb_func_start sub_080AB244
sub_080AB244: @ 0x080AB244
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AB264 @ =0x08DAE43C
	movs r1, #4
	bl Proc_Start
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #1
	strb r1, [r2]
	str r4, [r0, #0x30]
	subs r1, #2
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AB264: .4byte 0x08DAE43C

	thumb_func_start sub_080AB268
sub_080AB268: @ 0x080AB268
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AB288 @ =0x08DAE46C
	movs r1, #4
	bl Proc_Start
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #1
	strb r1, [r2]
	str r4, [r0, #0x30]
	subs r1, #2
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AB288: .4byte 0x08DAE46C

	thumb_func_start sub_080AB28C
sub_080AB28C: @ 0x080AB28C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AB2AC @ =0x08DAE43C
	bl Proc_StartBlocking
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #1
	strb r1, [r2]
	str r4, [r0, #0x30]
	subs r1, #2
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AB2AC: .4byte 0x08DAE43C

	thumb_func_start sub_080AB2B0
sub_080AB2B0: @ 0x080AB2B0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AB2D0 @ =0x08DAE46C
	bl Proc_StartBlocking
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #1
	strb r1, [r2]
	str r4, [r0, #0x30]
	subs r1, #2
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AB2D0: .4byte 0x08DAE46C

	thumb_func_start sub_080AB2D4
sub_080AB2D4: @ 0x080AB2D4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AB2F4 @ =0x08DAE43C
	movs r1, #4
	bl Proc_Start
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #1
	strb r1, [r2]
	str r4, [r0, #0x30]
	ldr r1, _080AB2F8 @ =0x0000FFFF
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AB2F4: .4byte 0x08DAE43C
_080AB2F8: .4byte 0x0000FFFF

	thumb_func_start sub_080AB2FC
sub_080AB2FC: @ 0x080AB2FC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AB31C @ =0x08DAE46C
	movs r1, #4
	bl Proc_Start
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #1
	strb r1, [r2]
	str r4, [r0, #0x30]
	ldr r1, _080AB320 @ =0x0000FFFF
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AB31C: .4byte 0x08DAE46C
_080AB320: .4byte 0x0000FFFF

	thumb_func_start sub_080AB324
sub_080AB324: @ 0x080AB324
	push {lr}
	sub sp, #4
	movs r0, #0
	str r0, [sp]
	ldr r1, _080AB340 @ =gPal
	ldr r2, _080AB344 @ =0x01000100
	mov r0, sp
	bl CpuFastSet
	bl EnablePalSync
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_080AB340: .4byte gPal
_080AB344: .4byte 0x01000100

	thumb_func_start sub_080AB348
sub_080AB348: @ 0x080AB348
	push {lr}
	ldr r0, _080AB364 @ =0x08DAE43C
	bl Proc_Find
	bl Proc_End
	ldr r0, _080AB368 @ =0x08DAE46C
	bl Proc_Find
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_080AB364: .4byte 0x08DAE43C
_080AB368: .4byte 0x08DAE46C

	thumb_func_start sub_080AB36C
sub_080AB36C: @ 0x080AB36C
	adds r2, r0, #0
	movs r0, #0
	str r0, [r2, #0x2c]
	adds r1, r2, #0
	adds r1, #0x34
	strb r0, [r1]
	str r0, [r2, #0x3c]
	str r0, [r2, #0x44]
	str r0, [r2, #0x40]
	str r0, [r2, #0x48]
	adds r1, #3
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	str r0, [r2, #0x4c]
	str r0, [r2, #0x50]
	str r0, [r2, #0x58]
	adds r1, #1
	strb r0, [r1]
	str r0, [r2, #0x54]
	movs r1, #0
	strh r0, [r2, #0x30]
	strh r0, [r2, #0x32]
	adds r3, r2, #0
	adds r3, #0x3a
	movs r0, #1
	strb r0, [r3]
	adds r0, r2, #0
	adds r0, #0x36
	strb r1, [r0]
	bx lr
	.align 2, 0

	thumb_func_start sub_080AB3AC
sub_080AB3AC: @ 0x080AB3AC
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r5, r0, #0
	ldr r6, [r5, #0x2c]
	ldr r0, [r5, #0x58]
	cmp r0, #0
	beq _080AB3E0
	adds r1, r5, #0
	adds r1, #0x39
	movs r0, #0
	strb r0, [r1]
	ldr r1, [r5, #0x58]
	adds r0, r5, #0
	bl _call_via_r1
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080AB3D6
	b _080AB5A0
_080AB3D6:
	b _080AB3E2
_080AB3D8:
	adds r0, r5, #0
	bl Proc_Break
	b _080AB598
_080AB3E0:
	str r0, [r5, #0x58]
_080AB3E2:
	movs r0, #0x37
	adds r0, r0, r5
	mov sb, r0
_080AB3E8:
	ldrb r1, [r6]
	cmp r1, #4
	bne _080AB3F0
	adds r6, #0xc
_080AB3F0:
	ldrb r2, [r6]
	cmp r2, #5
	bne _080AB442
	adds r0, r5, #0
	adds r0, #0x3a
	movs r1, #0
	ldrsb r1, [r0, r1]
	cmp r1, #0
	beq _080AB43A
	subs r0, #4
	ldrb r3, [r0]
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r2, r0, #0
	cmp r1, #0
	bne _080AB414
	ldrb r0, [r6, #0xa]
	b _080AB41A
_080AB414:
	cmp r1, #0
	ble _080AB41C
	subs r0, r3, #1
_080AB41A:
	strb r0, [r2]
_080AB41C:
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	beq _080AB440
	adds r0, r6, #0
	subs r0, #0xc
	ldrb r3, [r0]
	cmp r3, #4
	beq _080AB442
_080AB42E:
	adds r6, r0, #0
	subs r0, #0xc
	ldrb r4, [r0]
	cmp r4, #4
	bne _080AB42E
	b _080AB442
_080AB43A:
	adds r0, r5, #0
	adds r0, #0x36
	strb r1, [r0]
_080AB440:
	adds r6, #0xc
_080AB442:
	ldrb r0, [r6]
	cmp r0, #8
	bne _080AB466
	ldr r0, [r5, #0x58]
	cmp r0, #0
	beq _080AB464
	ldr r0, [r5, #0x54]
	adds r0, #1
	str r0, [r5, #0x54]
	adds r1, r5, #0
	adds r1, #0x39
	movs r0, #1
	strb r0, [r1]
	ldr r1, [r5, #0x58]
	adds r0, r5, #0
	bl _call_via_r1
_080AB464:
	adds r6, #0xc
_080AB466:
	ldrb r0, [r6]
	cmp r0, #6
	bne _080AB46E
	b _080AB598
_080AB46E:
	subs r0, #9
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bls _080AB3D8
	adds r0, r5, #0
	adds r0, #0x38
	ldrb r1, [r0]
	mov r8, r0
	cmp r1, #0
	bne _080AB57E
	ldrb r0, [r6]
	cmp r0, #1
	bgt _080AB4A0
	cmp r0, #0
	blt _080AB4A0
	ldr r0, [r5, #0x44]
	cmp r0, #0
	bne _080AB4A0
	movs r0, #1
	mov r1, sb
	ldrb r1, [r1]
	subs r0, r0, r1
	mov r2, sb
	strb r0, [r2]
_080AB4A0:
	ldrb r0, [r6]
	cmp r0, #1
	beq _080AB4E0
	cmp r0, #1
	bgt _080AB4B0
	cmp r0, #0
	beq _080AB4BA
	b _080AB57E
_080AB4B0:
	cmp r0, #2
	beq _080AB50A
	cmp r0, #3
	beq _080AB56C
	b _080AB57E
_080AB4BA:
	ldr r0, [r6, #4]
	ldr r2, [r5, #0x40]
	movs r3, #0xc0
	lsls r3, r3, #0x13
	adds r2, r2, r3
	ldr r1, [r5, #0x3c]
	adds r1, r1, r2
	ldr r2, [r5, #0x44]
	adds r1, r1, r2
	ldr r2, [r5, #0x48]
	mov r4, sb
	ldrb r4, [r4]
	muls r2, r4, r2
	adds r1, r1, r2
	ldrh r3, [r6, #8]
	lsrs r2, r3, #2
	bl CpuFastSet
	b _080AB500
_080AB4E0:
	ldr r0, [r6, #4]
	ldr r2, [r5, #0x40]
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r2, r2, r1
	ldr r1, [r5, #0x3c]
	adds r1, r1, r2
	ldr r2, [r5, #0x44]
	adds r1, r1, r2
	ldr r2, [r5, #0x48]
	mov r3, sb
	ldrb r3, [r3]
	muls r2, r3, r2
	adds r1, r1, r2
	bl sub_08013688
_080AB500:
	ldr r0, [r5, #0x44]
	ldrh r4, [r6, #8]
	adds r0, r4, r0
	str r0, [r5, #0x44]
	b _080AB57E
_080AB50A:
	ldr r1, [r5, #0x48]
	movs r0, #0x80
	lsls r0, r0, #8
	adds r4, r5, #0
	adds r4, #0x37
	adds r7, r5, #0
	adds r7, #0x34
	cmp r1, r0
	bne _080AB530
	ldrb r0, [r7]
	mov r1, sb
	ldrb r1, [r1]
	lsls r2, r1, #0xf
	ldr r1, [r5, #0x3c]
	adds r1, r1, r2
	ldr r2, _080AB568 @ =0x0000FFFF
	ands r1, r2
	bl SetBgChrOffset
_080AB530:
	ldrb r0, [r7]
	bl GetBgTilemap
	ldr r1, [r6, #4]
	adds r2, r5, #0
	adds r2, #0x35
	ldrb r2, [r2]
	lsls r2, r2, #0xc
	ldr r3, [r5, #0x48]
	ldrb r4, [r4]
	muls r4, r3, r4
	ldr r3, [r5, #0x40]
	adds r3, r3, r4
	lsls r3, r3, #0x11
	lsrs r3, r3, #0x16
	adds r2, r2, r3
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	bl TmApplyTsa_thm
	movs r0, #0
	str r0, [r5, #0x44]
	movs r0, #1
	ldrb r7, [r7]
	lsls r0, r7
	bl EnableBgSync
	b _080AB57E
	.align 2, 0
_080AB568: .4byte 0x0000FFFF
_080AB56C:
	ldr r0, [r6, #4]
	adds r1, r5, #0
	adds r1, #0x35
	ldrb r1, [r1]
	lsls r1, r1, #5
	ldrh r3, [r6, #8]
	lsls r2, r3, #5
	bl ApplyPaletteExt
_080AB57E:
	mov r4, r8
	ldrb r0, [r4]
	adds r0, #1
	movs r1, #0
	strb r0, [r4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldrb r2, [r6, #0xa]
	cmp r0, r2
	bls _080AB598
	adds r6, #0xc
	strb r1, [r4]
	b _080AB3E8
_080AB598:
	str r6, [r5, #0x2c]
	ldr r0, [r5, #0x50]
	adds r0, #1
	str r0, [r5, #0x50]
_080AB5A0:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080AB5AC
sub_080AB5AC: @ 0x080AB5AC
	push {r4, lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x2c]
	ldrb r0, [r0]
	cmp r0, #0xa
	bne _080AB5DA
	adds r4, r1, #0
	adds r4, #0x34
	ldrb r0, [r4]
	ldr r1, [r1, #0x3c]
	bl SetBgChrOffset
	ldrb r0, [r4]
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #1
	ldrb r4, [r4]
	lsls r0, r4
	bl EnableBgSync
_080AB5DA:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080AB5E0
sub_080AB5E0: @ 0x080AB5E0
	push {lr}
	ldr r0, _080AB5F0 @ =0x08DAE49C
	bl Proc_Find
	cmp r0, #0
	bne _080AB5F4
	movs r0, #0
	b _080AB5F6
	.align 2, 0
_080AB5F0: .4byte 0x08DAE49C
_080AB5F4:
	movs r0, #1
_080AB5F6:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080AB5FC
sub_080AB5FC: @ 0x080AB5FC
	push {lr}
	ldr r0, _080AB61C @ =0x08DAE49C
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	beq _080AB616
	ldr r0, [r1, #0x2c]
	ldrb r2, [r0]
	cmp r2, #6
	bne _080AB616
	adds r0, #0xc
	str r0, [r1, #0x2c]
_080AB616:
	pop {r0}
	bx r0
	.align 2, 0
_080AB61C: .4byte 0x08DAE49C

	thumb_func_start sub_080AB620
sub_080AB620: @ 0x080AB620
	push {lr}
	ldr r0, _080AB630 @ =0x08DAE49C
	bl Proc_Find
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_080AB630: .4byte 0x08DAE49C

	thumb_func_start sub_080AB634
sub_080AB634: @ 0x080AB634
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r0, _080AB650 @ =0x08DAE49C
	bl Proc_Find
	cmp r0, #0
	beq _080AB648
	adds r0, #0x3a
	strb r4, [r0]
_080AB648:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AB650: .4byte 0x08DAE49C

	thumb_func_start sub_080AB654
sub_080AB654: @ 0x080AB654
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r5, r0, #0
	mov r8, r1
	mov sb, r2
	mov sl, r3
	ldr r6, [sp, #0x20]
	ldr r7, [sp, #0x24]
	ldr r1, [sp, #0x30]
	cmp r1, #0
	bne _080AB67C
	ldr r0, _080AB678 @ =0x08DAE49C
	movs r1, #3
	b _080AB67E
	.align 2, 0
_080AB678: .4byte 0x08DAE49C
_080AB67C:
	ldr r0, _080AB6F8 @ =0x08DAE49C
_080AB67E:
	bl Proc_Start
	adds r4, r0, #0
	str r5, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x34
	mov r1, r8
	strb r1, [r0]
	adds r1, r4, #0
	adds r1, #0x35
	ldr r0, [sp, #0x28]
	strb r0, [r1]
	cmp r7, #0
	bge _080AB69E
	movs r7, #0x80
	lsls r7, r7, #7
_080AB69E:
	cmp r6, #0
	bge _080AB6A4
	movs r6, #0
_080AB6A4:
	mov r0, r8
	bl GetBgChrOffset
	str r0, [r4, #0x3c]
	str r6, [r4, #0x40]
	str r7, [r4, #0x48]
	mov r2, sb
	strh r2, [r4, #0x30]
	mov r6, sl
	strh r6, [r4, #0x32]
	ldr r0, [sp, #0x2c]
	str r0, [r4, #0x58]
	mov r1, r8
	lsls r0, r1, #0x10
	lsrs r0, r0, #0x10
	mov r2, sb
	rsbs r1, r2, #0
	movs r3, #0xff
	ands r1, r3
	mov r6, sl
	rsbs r2, r6, #0
	ands r2, r3
	bl SetBgOffset
	ldrb r0, [r5]
	cmp r0, #9
	bhi _080AB6EA
_080AB6DA:
	ldr r0, [r4, #0x4c]
	ldrb r1, [r5, #0xa]
	adds r0, r1, r0
	str r0, [r4, #0x4c]
	adds r5, #0xc
	ldrb r2, [r5]
	cmp r2, #9
	bls _080AB6DA
_080AB6EA:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AB6F8: .4byte 0x08DAE49C

	thumb_func_start sub_080AB6FC
sub_080AB6FC: @ 0x080AB6FC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r6, r1, #0
	ldr r1, [r0, #0x30]
	lsls r1, r1, #5
	ldr r2, _080AB7BC @ =gPal
	adds r1, r1, r2
	mov r8, r1
	ldr r1, [r0, #0x3c]
	mov ip, r1
	ldr r7, [r0, #0x40]
	movs r1, #0
	ldr r0, [r0, #0x34]
	cmp r1, r0
	bge _080AB7A8
	str r0, [sp, #4]
	movs r0, #0x80
	subs r5, r0, r6
	movs r0, #0xf8
	lsls r0, r0, #7
	mov sl, r0
_080AB72E:
	adds r1, #1
	str r1, [sp]
	movs r1, #0xf
	mov sb, r1
_080AB736:
	mov r0, ip
	ldrh r4, [r0]
	movs r0, #0x1f
	ands r0, r4
	adds r2, r0, #0
	muls r2, r5, r2
	ldrh r3, [r7]
	movs r0, #0x1f
	ands r0, r3
	muls r0, r6, r0
	adds r2, r2, r0
	asrs r2, r2, #7
	movs r1, #0x1f
	ands r2, r1
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r0, r4
	adds r1, r0, #0
	muls r1, r5, r1
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r0, r3
	muls r0, r6, r0
	adds r1, r1, r0
	asrs r1, r1, #7
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r1, r0
	adds r2, r2, r1
	mov r0, sl
	ands r0, r4
	adds r1, r0, #0
	muls r1, r5, r1
	mov r0, sl
	ands r0, r3
	muls r0, r6, r0
	adds r1, r1, r0
	asrs r1, r1, #7
	mov r0, sl
	ands r1, r0
	adds r2, r2, r1
	mov r1, r8
	strh r2, [r1]
	movs r0, #2
	add r8, r0
	add ip, r0
	adds r7, #2
	movs r1, #1
	rsbs r1, r1, #0
	add sb, r1
	mov r0, sb
	cmp r0, #0
	bge _080AB736
	ldr r1, [sp]
	ldr r0, [sp, #4]
	cmp r1, r0
	blt _080AB72E
_080AB7A8:
	bl EnablePalSync
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AB7BC: .4byte gPal

	thumb_func_start sub_080AB7C0
sub_080AB7C0: @ 0x080AB7C0
	movs r1, #0
	str r1, [r0, #0x38]
	bx lr
	.align 2, 0

	thumb_func_start sub_080AB7C8
sub_080AB7C8: @ 0x080AB7C8
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0x38]
	ldr r1, [r2, #0x2c]
	adds r0, r0, r1
	str r0, [r2, #0x38]
	movs r1, #0x80
	lsls r1, r1, #1
	cmp r0, r1
	ble _080AB7E0
	movs r0, #0
	str r0, [r2, #0x38]
_080AB7E0:
	ldr r0, [r2, #0x38]
	subs r1, r1, r0
	cmp r0, #0x7f
	bgt _080AB7EA
	adds r1, r0, #0
_080AB7EA:
	adds r0, r2, #0
	bl sub_080AB6FC
	pop {r0}
	bx r0

	thumb_func_start sub_080AB7F4
sub_080AB7F4: @ 0x080AB7F4
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	mov r8, r0
	mov sb, r1
	adds r4, r2, #0
	adds r5, r3, #0
	ldr r6, [sp, #0x18]
	ldr r1, [sp, #0x1c]
	ldr r0, _080AB828 @ =0x08DAE4C4
	bl Proc_Start
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	str r6, [r0, #0x34]
	mov r1, r8
	str r1, [r0, #0x3c]
	mov r1, sb
	str r1, [r0, #0x40]
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AB828: .4byte 0x08DAE4C4

	thumb_func_start sub_080AB82C
sub_080AB82C: @ 0x080AB82C
	push {lr}
	ldr r0, _080AB83C @ =0x08DAE4C4
	bl Proc_Find
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_080AB83C: .4byte 0x08DAE4C4

	thumb_func_start sub_080AB840
sub_080AB840: @ 0x080AB840
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	mov sb, r3
	ldr r4, [sp, #0x2c]
	ldr r0, [sp, #0x34]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r7, r0, #0
	cmp r5, #0
	beq _080AB870
	ldr r1, _080AB8AC @ =0x000003FF
	ands r1, r0
	lsls r1, r1, #5
	ldr r0, _080AB8B0 @ =0x06010000
	adds r1, r1, r0
	adds r0, r5, #0
	bl sub_08013688
_080AB870:
	cmp r6, #0
	beq _080AB884
	adds r1, r4, #0
	adds r1, #0x10
	lsls r1, r1, #5
	ldr r2, [sp, #0x30]
	lsls r2, r2, #5
	adds r0, r6, #0
	bl ApplyPaletteExt
_080AB884:
	movs r0, #0xf
	ands r4, r0
	lsls r3, r4, #0xc
	adds r3, r3, r7
	ldr r0, [sp, #0x28]
	str r0, [sp]
	ldr r0, [sp, #0x38]
	str r0, [sp, #4]
	mov r0, r8
	mov r1, sb
	ldr r2, [sp, #0x24]
	bl sub_08012AF0
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080AB8AC: .4byte 0x000003FF
_080AB8B0: .4byte 0x06010000

	thumb_func_start sub_080AB8B4
sub_080AB8B4: @ 0x080AB8B4
	cmp r0, #1
	beq _080AB8D8
	cmp r0, #1
	bgt _080AB8C2
	cmp r0, #0
	beq _080AB8CC
	b _080AB8F4
_080AB8C2:
	cmp r0, #2
	beq _080AB8E4
	cmp r0, #3
	beq _080AB8F0
	b _080AB8F4
_080AB8CC:
	ldr r0, _080AB8D4 @ =gDispIo
	ldrh r0, [r0, #0x1c]
	b _080AB8F4
	.align 2, 0
_080AB8D4: .4byte gDispIo
_080AB8D8:
	ldr r0, _080AB8E0 @ =gDispIo
	ldrh r0, [r0, #0x20]
	b _080AB8F4
	.align 2, 0
_080AB8E0: .4byte gDispIo
_080AB8E4:
	ldr r0, _080AB8EC @ =gDispIo
	ldrh r0, [r0, #0x24]
	b _080AB8F4
	.align 2, 0
_080AB8EC: .4byte gDispIo
_080AB8F0:
	ldr r0, _080AB8F8 @ =gDispIo
	ldrh r0, [r0, #0x28]
_080AB8F4:
	bx lr
	.align 2, 0
_080AB8F8: .4byte gDispIo

	thumb_func_start sub_080AB8FC
sub_080AB8FC: @ 0x080AB8FC
	cmp r0, #1
	beq _080AB920
	cmp r0, #1
	bgt _080AB90A
	cmp r0, #0
	beq _080AB914
	b _080AB93C
_080AB90A:
	cmp r0, #2
	beq _080AB92C
	cmp r0, #3
	beq _080AB938
	b _080AB93C
_080AB914:
	ldr r0, _080AB91C @ =gDispIo
	ldrh r0, [r0, #0x1e]
	b _080AB93C
	.align 2, 0
_080AB91C: .4byte gDispIo
_080AB920:
	ldr r0, _080AB928 @ =gDispIo
	ldrh r0, [r0, #0x22]
	b _080AB93C
	.align 2, 0
_080AB928: .4byte gDispIo
_080AB92C:
	ldr r0, _080AB934 @ =gDispIo
	ldrh r0, [r0, #0x26]
	b _080AB93C
	.align 2, 0
_080AB934: .4byte gDispIo
_080AB938:
	ldr r0, _080AB940 @ =gDispIo
	ldrh r0, [r0, #0x2a]
_080AB93C:
	bx lr
	.align 2, 0
_080AB940: .4byte gDispIo

	thumb_func_start sub_080AB944
sub_080AB944: @ 0x080AB944
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl strcpy
	adds r0, r5, #0
	bl strlen
	adds r4, r4, r0
	adds r0, r4, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080AB964
sub_080AB964: @ 0x080AB964
	strb r0, [r1]
	adds r1, #1
	movs r0, #0
	strb r0, [r1]
	adds r0, r1, #0
	bx lr

	thumb_func_start sub_080AB970
sub_080AB970: @ 0x080AB970
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x48
	adds r7, r0, #0
	adds r5, r1, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	mov r8, r2
	mov r1, sp
	ldr r0, _080AB9D4 @ =0x0843943C
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldr r0, [r0]
	str r0, [r1]
	adds r0, r7, #0
	bl GetROMChapterStruct
	adds r1, r0, #0
	movs r2, #0
	ldr r0, _080AB9D8 @ =gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #3
	bne _080AB9AA
	movs r2, #1
_080AB9AA:
	adds r0, r1, #0
	adds r0, #0x80
	adds r0, r0, r2
	ldrb r0, [r0]
	lsrs r4, r0, #1
	cmp r7, #0x2f
	bgt _080AB9E4
	cmp r7, #0x2e
	blt _080AB9E4
	ldr r0, _080AB9DC @ =0x0000117D
	add r4, sp, #0x28
	adds r1, r4, #0
	bl sub_08013354
	adds r1, r5, #0
	bl sub_080AB944
	adds r5, r0, #0
	ldr r0, _080AB9E0 @ =0x00001182
	adds r1, r4, #0
	b _080ABA80
	.align 2, 0
_080AB9D4: .4byte 0x0843943C
_080AB9D8: .4byte gPlaySt
_080AB9DC: .4byte 0x0000117D
_080AB9E0: .4byte 0x00001182
_080AB9E4:
	add r6, sp, #0x28
	mov r0, r8
	cmp r0, #0
	beq _080AB9FC
	ldr r0, _080ABA98 @ =0x0000117A
	adds r1, r6, #0
	bl sub_08013354
	adds r1, r5, #0
	bl sub_080AB944
	adds r5, r0, #0
_080AB9FC:
	cmp r4, #9
	ble _080ABA1C
	adds r0, r4, #0
	movs r1, #0xa
	bl __divsi3
	lsls r0, r0, #2
	add r0, sp
	ldr r0, [r0]
	adds r1, r6, #0
	bl sub_08013354
	adds r1, r5, #0
	bl sub_080AB944
	adds r5, r0, #0
_080ABA1C:
	adds r0, r4, #0
	movs r1, #0xa
	bl __modsi3
	lsls r0, r0, #2
	add r0, sp
	ldr r0, [r0]
	adds r4, r6, #0
	adds r1, r4, #0
	bl sub_08013354
	adds r1, r5, #0
	bl sub_080AB944
	adds r5, r0, #0
	ldr r0, _080ABA9C @ =0x0000117B
	adds r1, r4, #0
	bl sub_08013354
	adds r1, r5, #0
	bl sub_080AB944
	adds r5, r0, #0
	adds r0, r7, #0
	bl GetROMChapterStruct
	adds r1, r0, #0
	movs r2, #0
	ldr r0, _080ABAA0 @ =gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #3
	bne _080ABA5E
	movs r2, #1
_080ABA5E:
	adds r1, #0x80
	adds r1, r1, r2
	movs r0, #1
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _080ABA7C
	ldr r0, _080ABAA4 @ =0x0000117C
	adds r1, r4, #0
	bl sub_08013354
	adds r1, r5, #0
	bl sub_080AB944
	adds r5, r0, #0
_080ABA7C:
	ldr r0, _080ABAA8 @ =0x00001182
	adds r1, r6, #0
_080ABA80:
	bl sub_08013354
	adds r1, r5, #0
	bl sub_080AB944
	adds r5, r0, #0
	add sp, #0x48
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080ABA98: .4byte 0x0000117A
_080ABA9C: .4byte 0x0000117B
_080ABAA0: .4byte gPlaySt
_080ABAA4: .4byte 0x0000117C
_080ABAA8: .4byte 0x00001182

	thumb_func_start sub_080ABAAC
sub_080ABAAC: @ 0x080ABAAC
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r0, [r5]
	mov r1, sp
	bl GetCharTextLen
	adds r4, r0, #0
	ldr r1, [r5]
	subs r4, r4, r1
	ldr r0, [r6]
	adds r2, r4, #0
	bl memcpy
	ldr r0, [r5]
	adds r0, r0, r4
	str r0, [r5]
	ldr r0, [r6]
	adds r0, r0, r4
	str r0, [r6]
	adds r0, r4, #0
	add sp, #4
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_080ABAE0
sub_080ABAE0: @ 0x080ABAE0
	push {lr}
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0

	thumb_func_start sub_080ABAEC
sub_080ABAEC: @ 0x080ABAEC
	push {lr}
	sub sp, #4
	adds r3, r0, #0
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0
	str r0, [sp]
	movs r2, #0
	bl sub_08003FD4
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080ABB08
sub_080ABB08: @ 0x080ABB08
	push {lr}
	sub sp, #4
	movs r2, #0x80
	lsls r2, r2, #1
	movs r1, #0
	str r1, [sp]
	adds r1, r2, #0
	movs r3, #0x20
	bl sub_08003FD4
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080ABB24
sub_080ABB24: @ 0x080ABB24
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080ABB4C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080ABB3C
	movs r0, #0xe4
	lsls r0, r0, #2
	bl m4aSongNumStart
_080ABB3C:
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	ldr r2, [r4, #0x58]
	bl sub_080826A0
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080ABB4C: .4byte gPlaySt

	thumb_func_start sub_080ABB50
sub_080ABB50: @ 0x080ABB50
	push {lr}
	adds r2, r0, #0
	ldr r0, _080ABB84 @ =gpKeySt
	ldr r1, [r0]
	ldr r0, _080ABB88 @ =0x0000030B
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080ABB7E
	adds r0, r2, #0
	bl Proc_Break
	ldr r0, _080ABB8C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080ABB7A
	ldr r0, _080ABB90 @ =0x00000391
	bl m4aSongNumStart
_080ABB7A:
	bl sub_080828A4
_080ABB7E:
	pop {r0}
	bx r0
	.align 2, 0
_080ABB84: .4byte gpKeySt
_080ABB88: .4byte 0x0000030B
_080ABB8C: .4byte gPlaySt
_080ABB90: .4byte 0x00000391

	thumb_func_start sub_080ABB94
sub_080ABB94: @ 0x080ABB94
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r1, r3, #0
	ldr r0, _080ABBB0 @ =0x08DAE4E4
	bl Proc_StartBlocking
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	str r6, [r0, #0x58]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080ABBB0: .4byte 0x08DAE4E4

	thumb_func_start sub_080ABBB4
sub_080ABBB4: @ 0x080ABBB4
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	ldr r4, [sp, #0x14]
	ldr r0, [sp, #0x18]
	subs r7, r2, r6
	subs r2, r0, r5
	adds r1, r7, #0
	muls r1, r2, r1
	subs r3, r3, r5
	subs r4, r4, r6
	adds r0, r3, #0
	muls r0, r4, r0
	subs r1, r1, r0
	cmp r1, #0
	blt _080ABBFC
	ldr r0, [sp, #0x20]
	subs r5, r0, r5
	adds r1, r4, #0
	muls r1, r5, r1
	ldr r0, [sp, #0x1c]
	subs r4, r0, r6
	adds r0, r2, #0
	muls r0, r4, r0
	subs r1, r1, r0
	cmp r1, #0
	blt _080ABBFC
	adds r0, r4, #0
	muls r0, r3, r0
	adds r1, r5, #0
	muls r1, r7, r1
	subs r0, r0, r1
	cmp r0, #0
	blt _080ABBFC
	movs r0, #1
	b _080ABBFE
_080ABBFC:
	movs r0, #0
_080ABBFE:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_080ABC04
sub_080ABC04: @ 0x080ABC04
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl ReadGlobalSaveInfo
	mov r1, sp
	movs r0, #0x48
	ldrb r1, [r1, #0xe]
	ands r0, r1
	cmp r0, #0
	bne _080ABC1E
	movs r0, #0
	b _080ABC20
_080ABC1E:
	movs r0, #1
_080ABC20:
	add sp, #0x64
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080ABC28
sub_080ABC28: @ 0x080ABC28
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl ReadGlobalSaveInfo
	mov r1, sp
	movs r0, #0x90
	ldrb r1, [r1, #0xe]
	ands r0, r1
	cmp r0, #0
	bne _080ABC42
	movs r0, #0
	b _080ABC44
_080ABC42:
	movs r0, #1
_080ABC44:
	add sp, #0x64
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080ABC4C
sub_080ABC4C: @ 0x080ABC4C
	adds r0, #0x34
	ldrb r0, [r0]
	cmp r0, #0x64
	beq _080ABC58
	movs r0, #0
	b _080ABC5A
_080ABC58:
	movs r0, #1
_080ABC5A:
	bx lr

	thumb_func_start sub_080ABC5C
sub_080ABC5C: @ 0x080ABC5C
	movs r0, #0
	bx lr

	thumb_func_start sub_080ABC60
sub_080ABC60: @ 0x080ABC60
	movs r2, #0
	ldr r1, _080ABC70 @ =0x08DAE514
_080ABC64:
	ldr r0, [r1]
	cmp r0, #0
	blt _080ABC74
	adds r1, #0x10
	adds r2, #1
	b _080ABC64
	.align 2, 0
_080ABC70: .4byte 0x08DAE514
_080ABC74:
	adds r0, r2, #0
	bx lr

	thumb_func_start sub_080ABC78
sub_080ABC78: @ 0x080ABC78
	push {r4, r5, lr}
	movs r3, #0
	movs r4, #0
	ldr r0, _080ABC94 @ =0x08DAE514
	adds r5, r0, #0
	adds r5, #8
	adds r2, r0, #0
_080ABC86:
	lsls r1, r3, #4
	ldr r0, [r2]
	cmp r0, #0
	bge _080ABC98
	adds r0, r4, #0
	b _080ABCA8
	.align 2, 0
_080ABC94: .4byte 0x08DAE514
_080ABC98:
	adds r0, r1, r5
	ldr r0, [r0]
	cmp r0, #0
	beq _080ABCA2
	adds r4, #1
_080ABCA2:
	adds r2, #0x10
	adds r3, #1
	b _080ABC86
_080ABCA8:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080ABCB0
sub_080ABCB0: @ 0x080ABCB0
	asrs r3, r1, #5
	lsls r3, r3, #2
	adds r3, r3, r0
	movs r2, #0x1f
	ands r2, r1
	ldr r0, [r3, #0x40]
	lsrs r0, r2
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	bne _080ABCCA
	movs r0, #0
	b _080ABCCC
_080ABCCA:
	movs r0, #1
_080ABCCC:
	bx lr
	.align 2, 0

	thumb_func_start sub_080ABCD0
sub_080ABCD0: @ 0x080ABCD0
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r2, #0
	movs r4, #0
	ldr r3, _080ABCEC @ =0x08DAE514
	adds r5, r3, #0
_080ABCDC:
	lsls r1, r2, #4
	adds r0, r1, r5
	ldr r0, [r0]
	cmp r0, #0
	bge _080ABCF0
	adds r0, r4, #0
	b _080ABD1E
	.align 2, 0
_080ABCEC: .4byte 0x08DAE514
_080ABCF0:
	adds r0, r3, #0
	adds r0, #8
	adds r0, r1, r0
	ldr r0, [r0]
	cmp r0, #0
	beq _080ABD16
	asrs r1, r2, #5
	lsls r1, r1, #2
	adds r1, r1, r6
	movs r0, #0x1f
	ands r0, r2
	ldr r1, [r1, #0x40]
	lsrs r1, r0
	movs r0, #1
	ands r1, r0
	adds r0, r2, #1
	cmp r1, #0
	beq _080ABD1A
	b _080ABD18
_080ABD16:
	adds r0, r2, #1
_080ABD18:
	adds r4, r0, #0
_080ABD1A:
	adds r2, r0, #0
	b _080ABCDC
_080ABD1E:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_080ABD24
sub_080ABD24: @ 0x080ABD24
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x2c
	adds r7, r0, #0
	bl sub_080ABC60
	movs r1, #0x36
	adds r1, r1, r7
	mov r8, r1
	movs r1, #0
	mov r2, r8
	strb r0, [r2]
	add r0, sp, #0x24
	movs r4, #0
	strh r1, [r0]
	adds r1, r7, #0
	adds r1, #0x40
	ldr r2, _080ABE78 @ =0x01000008
	bl CpuSet
	adds r5, r7, #0
	adds r5, #0x33
	strb r4, [r5]
	mov r0, sp
	bl sub_080A00C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080ABE5A
	movs r6, #0
	ldr r1, _080ABE7C @ =0x08DAE514
	ldr r0, [r1]
	mov sb, r8
	mov r8, r5
	movs r3, #0x34
	adds r3, r3, r7
	mov sl, r3
	cmp r0, #0
	blt _080ABDCC
	movs r4, #0
	movs r0, #8
	adds r0, r0, r1
	mov ip, r0
_080ABD80:
	mov r2, ip
	ldr r0, [r2]
	cmp r0, #0
	bne _080ABDBA
	adds r0, r4, r1
	ldr r1, [r0]
	asrs r0, r1, #5
	lsls r0, r0, #2
	add r0, sp
	movs r3, #0x1f
	ands r1, r3
	ldr r0, [r0]
	lsrs r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _080ABDBA
	asrs r2, r6, #5
	lsls r2, r2, #2
	adds r2, r2, r7
	adds r0, r6, #0
	ands r0, r3
	lsls r1, r0
	ldr r0, [r2, #0x40]
	orrs r0, r1
	str r0, [r2, #0x40]
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
_080ABDBA:
	adds r4, #0x10
	movs r3, #0x10
	add ip, r3
	adds r6, #1
	ldr r1, _080ABE7C @ =0x08DAE514
	adds r0, r4, r1
	ldr r0, [r0]
	cmp r0, #0
	bge _080ABD80
_080ABDCC:
	bl sub_080ABC78
	adds r1, r0, #0
	movs r0, #0x64
	mov r2, r8
	ldrb r2, [r2]
	muls r0, r2, r0
	mov r3, sb
	ldrb r3, [r3]
	subs r1, r3, r1
	bl __divsi3
	mov r1, sl
	strb r0, [r1]
	movs r6, #0
	ldr r1, _080ABE7C @ =0x08DAE514
	ldr r0, [r1]
	cmp r0, #0
	blt _080ABE5A
	movs r5, #0
_080ABDF4:
	adds r0, r1, #0
	adds r0, #8
	adds r0, r5, r0
	ldr r2, [r0]
	cmp r2, #0
	beq _080ABE4C
	adds r0, r5, r1
	ldr r1, [r0]
	asrs r0, r1, #5
	lsls r0, r0, #2
	add r0, sp
	movs r3, #0x1f
	ands r1, r3
	ldr r0, [r0]
	lsrs r0, r1
	movs r4, #1
	ands r0, r4
	cmp r0, #0
	bne _080ABE2A
	adds r0, r7, #0
	str r3, [sp, #0x28]
	bl _call_via_r2
	lsls r0, r0, #0x18
	ldr r3, [sp, #0x28]
	cmp r0, #0
	beq _080ABE4C
_080ABE2A:
	asrs r2, r6, #5
	lsls r2, r2, #2
	adds r2, r2, r7
	adds r0, r6, #0
	ands r0, r3
	adds r1, r4, #0
	lsls r1, r0
	ldr r0, [r2, #0x40]
	orrs r0, r1
	str r0, [r2, #0x40]
	mov r2, r8
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	adds r0, r7, #0
	adds r0, #0x2e
	strb r4, [r0]
_080ABE4C:
	adds r5, #0x10
	adds r6, #1
	ldr r1, _080ABE7C @ =0x08DAE514
	adds r0, r5, r1
	ldr r0, [r0]
	cmp r0, #0
	bge _080ABDF4
_080ABE5A:
	adds r0, r7, #0
	bl sub_080ABCD0
	adds r1, r7, #0
	adds r1, #0x36
	strb r0, [r1]
	add sp, #0x2c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080ABE78: .4byte 0x01000008
_080ABE7C: .4byte 0x08DAE514

	thumb_func_start nullsub_086
nullsub_086: @ 0x080ABE80
	bx lr
	.align 2, 0

	thumb_func_start sub_080ABE84
sub_080ABE84: @ 0x080ABE84
	push {r4, lr}
	sub sp, #4
	ldr r4, [r0, #0x14]
	movs r1, #0x80
	lsls r1, r1, #1
	str r0, [sp]
	movs r0, #0
	movs r2, #0
	movs r3, #0x78
	bl sub_08003FD4
	adds r4, #0x3f
	movs r0, #1
	strb r0, [r4]
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080ABEA8
sub_080ABEA8: @ 0x080ABEA8
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, [r5, #0x14]
	adds r1, r4, #0
	adds r1, #0x31
	ldr r0, _080ABEEC @ =0x08DAEC78
	ldr r0, [r0]
	ldrb r1, [r1]
	adds r0, r1, r0
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r4, #0
	movs r2, #0
	bl sub_080AC998
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl sub_080AD260
	ldr r0, [r5, #0x14]
	bl sub_080AC3D0
	ldr r1, [r5, #0x14]
	bl sub_080AD754
	adds r4, #0x3f
	movs r0, #0
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080ABEEC: .4byte 0x08DAEC78

	thumb_func_start sub_080ABEF0
sub_080ABEF0: @ 0x080ABEF0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080ABF28 @ =0x08DAEC7C
	adds r1, r4, #0
	bl Proc_Start
	adds r4, #0x31
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	ldrb r2, [r4]
	ldr r0, _080ABF2C @ =0x08DAEC78
	ldr r0, [r0]
	adds r0, r0, r2
	movs r1, #0
	ldrsb r1, [r0, r1]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _080ABF1C
	cmp r2, #0x80
	bne _080ABF20
_080ABF1C:
	movs r0, #0
	strb r0, [r4]
_080ABF20:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080ABF28: .4byte 0x08DAEC7C
_080ABF2C: .4byte 0x08DAEC78

	thumb_func_start sub_080ABF30
sub_080ABF30: @ 0x080ABF30
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov sb, r0
	movs r6, #0
	ldr r2, _080AC078 @ =0x08DAEC78
	movs r0, #1
	rsbs r0, r0, #0
	adds r1, r0, #0
_080ABF48:
	ldr r0, [r2]
	adds r0, r0, r6
	strb r1, [r0]
	adds r6, #1
	cmp r6, #0x7f
	ble _080ABF48
	bl GetGameTime
	adds r3, r0, #0
	movs r0, #0x7f
	ands r3, r0
	adds r2, r3, #0
	movs r6, #0
	mov r7, sb
	adds r7, #0x31
	mov r1, sb
	adds r1, #0x35
	str r1, [sp, #4]
	mov r5, sb
	adds r5, #0x30
	str r5, [sp]
_080ABF72:
	asrs r0, r2, #5
	lsls r0, r0, #2
	add r0, sb
	movs r1, #0x1f
	ands r1, r2
	ldr r0, [r0, #0x40]
	lsrs r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _080ABF92
	ldr r0, _080AC078 @ =0x08DAEC78
	ldr r0, [r0]
	adds r0, r0, r6
	strb r2, [r0]
	adds r6, #1
_080ABF92:
	adds r1, r2, #1
	adds r0, r1, #0
	cmp r1, #0
	bge _080ABF9E
	adds r0, r2, #0
	adds r0, #0x80
_080ABF9E:
	asrs r2, r0, #7
	lsls r0, r2, #7
	subs r2, r1, r0
	cmp r2, r3
	bne _080ABF72
	mov r8, r6
	bl GetGameTime
	adds r4, r0, #0
	adds r4, #0x7b
	ldr r0, _080AC078 @ =0x08DAEC78
	mov sl, r0
	movs r6, #0xff
_080ABFB8:
	movs r1, #0xd
	adds r2, r4, #0
	muls r2, r1, r2
	adds r1, r2, #1
	adds r0, r1, #0
	cmp r1, #0
	bge _080ABFCC
	movs r3, #0x80
	lsls r3, r3, #8
	adds r0, r2, r3
_080ABFCC:
	asrs r4, r0, #0xf
	lsls r0, r4, #0xf
	subs r4, r1, r0
	asrs r0, r4, #8
	mov r1, r8
	bl __modsi3
	adds r5, r0, #0
	movs r0, #0xd
	adds r2, r4, #0
	muls r2, r0, r2
	adds r1, r2, #1
	adds r0, r1, #0
	cmp r1, #0
	bge _080ABFF0
	movs r3, #0x80
	lsls r3, r3, #8
	adds r0, r2, r3
_080ABFF0:
	asrs r4, r0, #0xf
	lsls r0, r4, #0xf
	subs r4, r1, r0
	asrs r0, r4, #8
	mov r1, r8
	bl __modsi3
	adds r2, r0, #0
	cmp r5, r2
	beq _080AC034
	mov r1, sl
	ldr r0, [r1]
	adds r1, r0, r5
	adds r0, r0, r2
	ldrb r3, [r1]
	ldrb r0, [r0]
	adds r0, r3, r0
	strb r0, [r1]
	mov r1, sl
	ldr r0, [r1]
	adds r1, r0, r2
	adds r0, r0, r5
	ldrb r0, [r0]
	ldrb r3, [r1]
	subs r0, r0, r3
	strb r0, [r1]
	mov r1, sl
	ldr r0, [r1]
	adds r1, r0, r5
	adds r0, r0, r2
	ldrb r2, [r1]
	ldrb r0, [r0]
	subs r0, r2, r0
	strb r0, [r1]
_080AC034:
	subs r6, #1
	cmp r6, #0
	bge _080ABFB8
	movs r0, #0
	strb r0, [r7]
	ldr r3, [sp, #4]
	ldrb r2, [r3]
	lsrs r0, r2, #5
	lsls r0, r0, #2
	add r0, sb
	movs r1, #0x1f
	ands r1, r2
	ldr r0, [r0, #0x40]
	lsrs r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _080AC08E
	ldr r0, _080AC078 @ =0x08DAEC78
	ldr r1, [r0]
	movs r0, #0
	ldrsb r0, [r1, r0]
	adds r5, r2, #0
	cmp r0, r5
	beq _080AC08E
	adds r3, r7, #0
	movs r4, #0
	ldr r2, [sp, #4]
_080AC06C:
	ldrb r0, [r3]
	cmp r0, #0x80
	bne _080AC07C
	strb r4, [r7]
	b _080AC08E
	.align 2, 0
_080AC078: .4byte 0x08DAEC78
_080AC07C:
	adds r0, #1
	strb r0, [r7]
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldrb r5, [r2]
	cmp r0, r5
	bne _080AC06C
_080AC08E:
	movs r0, #1
	ldr r1, [sp]
	strb r0, [r1]
	mov r0, sb
	bl sub_080ABEF0
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080AC0AC
sub_080AC0AC: @ 0x080AC0AC
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x32
	ldrb r2, [r0]
	adds r2, #1
	movs r0, #0x7f
	ands r2, r0
_080AC0BA:
	lsrs r0, r2, #5
	lsls r0, r0, #2
	adds r0, r0, r4
	movs r1, #0x1f
	ands r1, r2
	ldr r0, [r0, #0x40]
	lsrs r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _080AC0F6
	adds r0, r4, #0
	adds r1, r2, #0
	movs r2, #0x20
	bl sub_080AC998
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080AC0F2
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl sub_080AD260
	movs r0, #1
	b _080AC104
_080AC0F2:
	movs r0, #0
	b _080AC104
_080AC0F6:
	adds r1, r2, #1
	lsls r1, r1, #0x18
	movs r0, #0xfe
	lsls r0, r0, #0x17
	ands r0, r1
	lsrs r2, r0, #0x18
	b _080AC0BA
_080AC104:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080AC10C
sub_080AC10C: @ 0x080AC10C
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x32
	ldrb r2, [r0]
	subs r2, #1
	movs r0, #0x7f
	ands r2, r0
_080AC11A:
	lsrs r0, r2, #5
	lsls r0, r0, #2
	adds r0, r0, r4
	movs r1, #0x1f
	ands r1, r2
	ldr r0, [r0, #0x40]
	lsrs r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _080AC156
	adds r0, r4, #0
	adds r1, r2, #0
	movs r2, #0x20
	bl sub_080AC998
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080AC152
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl sub_080AD260
	movs r0, #1
	b _080AC164
_080AC152:
	movs r0, #0
	b _080AC164
_080AC156:
	subs r1, r2, #1
	lsls r1, r1, #0x18
	movs r0, #0xfe
	lsls r0, r0, #0x17
	ands r0, r1
	lsrs r2, r0, #0x18
	b _080AC11A
_080AC164:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080AC16C
sub_080AC16C: @ 0x080AC16C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r6, _080AC1A0 @ =0x0201EA9C
	lsls r1, r4, #1
	adds r0, r1, r4
	lsls r0, r0, #4
	adds r0, r0, r4
	adds r2, r0, r6
	movs r3, #0x2f
_080AC180:
	ldrb r0, [r2, #1]
	strb r0, [r2]
	adds r2, #1
	subs r3, #1
	cmp r3, #0
	bge _080AC180
	adds r0, r1, r4
	lsls r0, r0, #4
	adds r0, r0, r4
	adds r1, r6, #0
	adds r1, #0x30
	adds r0, r0, r1
	strb r5, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AC1A0: .4byte 0x0201EA9C

	thumb_func_start sub_080AC1A4
sub_080AC1A4: @ 0x080AC1A4
	push {r4, r5, lr}
	movs r1, #0
	ldr r5, _080AC1DC @ =0x08432D74
	ldr r3, _080AC1E0 @ =0x0201EA9C
	movs r2, #0
	adds r4, r3, #0
	adds r4, #0x31
_080AC1B2:
	adds r0, r1, r3
	strb r2, [r0]
	adds r0, r1, r4
	strb r2, [r0]
	adds r1, #1
	cmp r1, #0x30
	ble _080AC1B2
	ldr r1, _080AC1E4 @ =0x06010800
	adds r0, r5, #0
	bl sub_08013688
	ldr r0, _080AC1E8 @ =0x08432DE4
	movs r1, #0xe8
	lsls r1, r1, #2
	movs r2, #0x60
	bl ApplyPaletteExt
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AC1DC: .4byte 0x08432D74
_080AC1E0: .4byte 0x0201EA9C
_080AC1E4: .4byte 0x06010800
_080AC1E8: .4byte 0x08432DE4

	thumb_func_start sub_080AC1EC
sub_080AC1EC: @ 0x080AC1EC
	movs r1, #0
	str r1, [r0, #0x2c]
	bx lr
	.align 2, 0

	thumb_func_start nullsub_087
nullsub_087: @ 0x080AC1F4
	bx lr
	.align 2, 0

	thumb_func_start sub_080AC1F8
sub_080AC1F8: @ 0x080AC1F8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r4, r0, #0
	movs r7, #0
	movs r5, #0
	movs r0, #0xff
	mov r8, r0
	mov ip, r0
	movs r6, #0
	ldr r1, _080AC2F8 @ =0x08DAEC74
	mov sb, r1
	movs r2, #0xd4
	lsls r2, r2, #2
	mov sl, r2
_080AC21C:
	mov r0, sb
	ldr r2, [r0]
	lsls r3, r6, #1
	adds r2, r3, r2
	str r2, [sp]
	ldr r2, _080AC2FC @ =0x08DAEC9C
	ldr r1, [r2]
	ldr r0, [r4, #0x2c]
	movs r2, #0xc6
	lsls r2, r2, #3
	adds r0, r0, r2
	add r1, sl
	adds r1, r1, r0
	ldrb r0, [r1]
	subs r0, #0x80
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x19
	ldr r1, [sp]
	strb r0, [r1]
	mov r0, sb
	ldr r2, [r0]
	adds r2, r3, r2
	ldr r1, _080AC2FC @ =0x08DAEC9C
	ldr r0, [r1]
	add r0, sl
	ldr r1, [r4, #0x2c]
	adds r0, r0, r1
	ldrb r1, [r0]
	subs r1, #0x80
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x19
	movs r0, #0xf0
	subs r0, r0, r1
	strb r0, [r2, #1]
	mov r2, sb
	ldr r0, [r2]
	adds r3, r3, r0
	ldrb r0, [r3]
	cmp r0, r5
	bhs _080AC26E
	adds r0, r5, #0
_080AC26E:
	adds r5, r0, #0
	ldrb r0, [r3]
	cmp r0, ip
	bls _080AC278
	mov r0, ip
_080AC278:
	mov ip, r0
	ldrb r3, [r3, #1]
	adds r0, r3, #0
	cmp r3, r7
	bhs _080AC284
	adds r3, r7, #0
_080AC284:
	adds r7, r3, #0
	adds r1, r0, #0
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	cmp r0, r8
	bls _080AC292
	mov r1, r8
_080AC292:
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	ldr r0, [r4, #0x2c]
	adds r1, r0, #1
	str r1, [r4, #0x2c]
	ldr r0, _080AC300 @ =0x0000062F
	cmp r1, r0
	ble _080AC2AC
	movs r2, #0xc6
	lsls r2, r2, #3
	subs r0, r1, r2
	str r0, [r4, #0x2c]
_080AC2AC:
	adds r6, #1
	cmp r6, #0xdf
	ble _080AC21C
	mov r1, ip
	subs r0, r5, r1
	cmp r0, #0x3f
	ble _080AC2BC
	movs r0, #0x3f
_080AC2BC:
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	mov r2, r8
	subs r0, r7, r2
	cmp r0, #0x3f
	ble _080AC2CA
	movs r0, #0x3f
_080AC2CA:
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	lsls r0, r5, #1
	adds r0, r0, r5
	asrs r1, r0, #2
	movs r0, #0
	bl sub_080AC16C
	lsls r0, r7, #1
	adds r0, r0, r7
	asrs r1, r0, #2
	movs r0, #1
	bl sub_080AC16C
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AC2F8: .4byte 0x08DAEC74
_080AC2FC: .4byte 0x08DAEC9C
_080AC300: .4byte 0x0000062F

	thumb_func_start sub_080AC304
sub_080AC304: @ 0x080AC304
	asrs r3, r1, #5
	lsls r3, r3, #2
	adds r3, r3, r0
	movs r2, #0x1f
	ands r2, r1
	ldr r0, [r3, #0x50]
	lsrs r0, r2
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	bne _080AC31E
	movs r0, #0
	b _080AC320
_080AC31E:
	movs r0, #1
_080AC320:
	bx lr
	.align 2, 0

	thumb_func_start sub_080AC324
sub_080AC324: @ 0x080AC324
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x18
	adds r7, r0, #0
	add r0, sp, #0x14
	movs r1, #0
	strh r1, [r0]
	adds r1, r7, #0
	adds r1, #0x50
	ldr r2, _080AC3A0 @ =0x01000008
	bl CpuSet
	mov r0, sp
	bl sub_080A01EC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080AC3BA
	movs r4, #0
	movs r0, #1
	mov ip, r0
	ldr r1, _080AC3A4 @ =0x08DAEB78
	mov r8, r1
_080AC354:
	asrs r1, r4, #5
	lsls r1, r1, #2
	add r1, sp
	movs r0, #0x1f
	ands r0, r4
	ldr r1, [r1]
	lsrs r1, r0
	mov r0, ip
	ands r1, r0
	cmp r4, #0xa
	bgt _080AC36C
	movs r1, #1
_080AC36C:
	adds r6, r4, #1
	cmp r1, #0
	beq _080AC3B4
	movs r3, #0
	mov r1, r8
	ldr r0, [r1]
	ldr r1, _080AC3A4 @ =0x08DAEB78
	cmp r0, #0
	blt _080AC3B4
	movs r5, #0x1f
	adds r2, r1, #0
	mov r1, r8
_080AC384:
	ldr r0, [r1]
	cmp r0, r4
	bne _080AC3A8
	asrs r2, r3, #5
	lsls r2, r2, #2
	adds r2, r2, r7
	ands r3, r5
	mov r1, ip
	lsls r1, r3
	ldr r0, [r2, #0x50]
	orrs r0, r1
	str r0, [r2, #0x50]
	b _080AC3B4
	.align 2, 0
_080AC3A0: .4byte 0x01000008
_080AC3A4: .4byte 0x08DAEB78
_080AC3A8:
	adds r2, #4
	adds r1, #4
	adds r3, #1
	ldr r0, [r2]
	cmp r0, #0
	bge _080AC384
_080AC3B4:
	adds r4, r6, #0
	cmp r4, #0x7f
	ble _080AC354
_080AC3BA:
	adds r1, r7, #0
	adds r1, #0x39
	movs r0, #0xff
	strb r0, [r1]
	add sp, #0x18
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080AC3D0
sub_080AC3D0: @ 0x080AC3D0
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x39
	ldrb r1, [r4]
	adds r3, r1, #1
	adds r0, r3, #0
	asrs r2, r0, #7
	lsls r0, r2, #7
	subs r2, r3, r0
	adds r3, r4, #0
	ldr r4, _080AC418 @ =0x08DAEB78
_080AC3E8:
	asrs r0, r2, #5
	lsls r0, r0, #2
	adds r0, r0, r5
	movs r1, #0x1f
	ands r1, r2
	ldr r0, [r0, #0x50]
	lsrs r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _080AC404
	ldrb r0, [r3]
	cmp r0, r2
	bne _080AC41C
_080AC404:
	adds r2, #1
	adds r0, r2, #0
	cmp r2, #0
	bge _080AC40E
	adds r0, #0x7f
_080AC40E:
	asrs r0, r0, #7
	lsls r0, r0, #7
	subs r2, r2, r0
	b _080AC3E8
	.align 2, 0
_080AC418: .4byte 0x08DAEB78
_080AC41C:
	strb r2, [r3]
	lsls r0, r2, #2
	adds r0, r0, r4
	ldr r0, [r0]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080AC42C
sub_080AC42C: @ 0x080AC42C
	push {r4, r5, lr}
	adds r4, r0, #0
	bl GetGameTime
	movs r1, #0xd
	muls r0, r1, r0
	adds r2, r0, #1
	movs r0, #0x7f
	ands r2, r0
	ldr r5, _080AC47C @ =0x08DAEB78
_080AC440:
	asrs r0, r2, #5
	lsls r0, r0, #2
	adds r0, r0, r4
	movs r1, #0x1f
	ands r1, r2
	ldr r0, [r0, #0x50]
	lsrs r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _080AC460
	adds r1, r4, #0
	adds r1, #0x39
	ldrb r0, [r1]
	cmp r0, r2
	bne _080AC480
_080AC460:
	movs r0, #0xd
	adds r1, r2, #0
	muls r1, r0, r1
	adds r3, r1, #1
	adds r0, r3, #0
	cmp r3, #0
	bge _080AC472
	adds r0, r1, #0
	adds r0, #0x80
_080AC472:
	asrs r2, r0, #7
	lsls r0, r2, #7
	subs r2, r3, r0
	b _080AC440
	.align 2, 0
_080AC47C: .4byte 0x08DAEB78
_080AC480:
	strb r2, [r1]
	lsls r0, r2, #2
	adds r0, r0, r5
	ldr r0, [r0]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080AC490
sub_080AC490: @ 0x080AC490
	push {lr}
	ldrh r2, [r0, #0x2a]
	rsbs r1, r2, #0
	orrs r1, r2
	lsrs r3, r1, #0x1f
	lsrs r1, r2, #4
	adds r1, #5
	adds r0, #0x36
	ldrb r2, [r0]
	subs r0, r2, #1
	cmp r0, #0
	bge _080AC4AA
	adds r0, r2, #2
_080AC4AA:
	asrs r0, r0, #2
	cmp r1, r0
	bgt _080AC4B4
	movs r0, #2
	orrs r3, r0
_080AC4B4:
	adds r0, r3, #0
	bl sub_080A9C68
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080AC4C0
sub_080AC4C0: @ 0x080AC4C0
	push {lr}
	adds r2, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	lsls r0, r0, #5
	adds r0, #0x60
	lsrs r1, r1, #2
	lsls r1, r1, #4
	ldrh r2, [r2, #0x2a]
	subs r2, #0x40
	subs r1, r1, r2
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #2
	bl sub_080AA3F8
	pop {r0}
	bx r0

	thumb_func_start sub_080AC4E8
sub_080AC4E8: @ 0x080AC4E8
	push {r4, lr}
	adds r2, r0, #0
	adds r0, #0x35
	ldrb r0, [r0]
	lsrs r0, r0, #2
	lsls r0, r0, #4
	ldrh r1, [r2, #0x2a]
	subs r0, r0, r1
	cmp r0, #0
	bge _080AC4FE
	adds r0, #0xf
_080AC4FE:
	asrs r4, r0, #4
	cmp r1, #0
	beq _080AC50E
	cmp r4, #0
	bgt _080AC50E
	movs r0, #1
	rsbs r0, r0, #0
	b _080AC532
_080AC50E:
	ldrh r1, [r2, #0x2a]
	lsrs r0, r1, #4
	adds r3, r0, #5
	adds r0, r2, #0
	adds r0, #0x36
	ldrb r1, [r0]
	subs r0, r1, #1
	cmp r0, #0
	bge _080AC522
	adds r0, r1, #2
_080AC522:
	asrs r0, r0, #2
	cmp r3, r0
	bgt _080AC530
	cmp r4, #3
	ble _080AC530
	movs r0, #1
	b _080AC532
_080AC530:
	movs r0, #0
_080AC532:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_080AC538
sub_080AC538: @ 0x080AC538
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	ldrh r1, [r6, #0x2a]
	lsrs r0, r1, #4
	subs r0, #1
	lsls r7, r0, #2
	ldr r0, _080AC554 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	adds r4, r7, #0
	adds r0, r4, #0
	b _080AC618
	.align 2, 0
_080AC554: .4byte gBg2Tm
_080AC558:
	adds r0, r6, #0
	adds r1, r4, #0
	bl sub_080ABCB0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080AC56A
	movs r5, #0
	b _080AC5B0
_080AC56A:
	ldr r0, _080AC5A8 @ =0x08DAE514
	lsls r1, r4, #4
	adds r0, #8
	adds r1, r1, r0
	ldr r0, [r1]
	cmp r0, #0
	beq _080AC5B0
	adds r2, r4, #0
	cmp r4, #0
	bge _080AC580
	adds r2, r4, #3
_080AC580:
	asrs r2, r2, #2
	lsls r0, r2, #1
	adds r0, #8
	movs r1, #0x1f
	ands r0, r1
	lsls r0, r0, #5
	adds r0, #0xc
	lsls r2, r2, #2
	subs r2, r4, r2
	lsls r2, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #1
	ldr r1, _080AC5AC @ =gBg2Tm
	adds r0, r0, r1
	movs r1, #1
	movs r2, #0x14
	movs r3, #0x14
	bl PutTwoSpecialChar
	b _080AC614
	.align 2, 0
_080AC5A8: .4byte 0x08DAE514
_080AC5AC: .4byte gBg2Tm
_080AC5B0:
	cmp r4, #0x62
	ble _080AC5E8
	adds r2, r4, #0
	cmp r4, #0
	bge _080AC5BC
	adds r2, r4, #3
_080AC5BC:
	asrs r2, r2, #2
	lsls r0, r2, #1
	adds r0, #8
	movs r1, #0x1f
	ands r0, r1
	lsls r0, r0, #5
	adds r0, #0xd
	lsls r2, r2, #2
	subs r2, r4, r2
	lsls r2, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #1
	ldr r1, _080AC5E4 @ =gBg2Tm
	adds r0, r0, r1
	adds r2, r4, #1
	adds r1, r5, #0
	bl sub_08006068
	b _080AC614
	.align 2, 0
_080AC5E4: .4byte gBg2Tm
_080AC5E8:
	adds r2, r4, #0
	cmp r4, #0
	bge _080AC5F0
	adds r2, r4, #3
_080AC5F0:
	asrs r2, r2, #2
	lsls r0, r2, #1
	adds r0, #8
	movs r1, #0x1f
	ands r0, r1
	lsls r0, r0, #5
	adds r0, #0xd
	lsls r2, r2, #2
	subs r2, r4, r2
	lsls r2, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #1
	ldr r1, _080AC63C @ =gBg2Tm
	adds r0, r0, r1
	adds r2, r4, #1
	adds r1, r5, #0
	bl sub_0800625C
_080AC614:
	adds r4, #1
	adds r0, r7, #0
_080AC618:
	adds r0, #0x1c
	cmp r4, r0
	bge _080AC62E
	movs r5, #1
	cmp r4, #0
	blt _080AC614
	adds r0, r6, #0
	adds r0, #0x36
	ldrb r0, [r0]
	cmp r4, r0
	blt _080AC558
_080AC62E:
	movs r0, #4
	bl EnableBgSync
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AC63C: .4byte gBg2Tm

	thumb_func_start sub_080AC640
sub_080AC640: @ 0x080AC640
	push {r4, lr}
	adds r4, r0, #0
	adds r0, r4, #6
	adds r1, #0x34
	movs r3, #2
	ldrb r2, [r1]
	cmp r2, #0x64
	bne _080AC652
	movs r3, #4
_080AC652:
	ldrb r2, [r1]
	adds r1, r3, #0
	bl sub_08006068
	ldr r0, _080AC66C @ =0x0201EA90
	adds r1, r4, #0
	adds r1, #8
	bl PutText
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AC66C: .4byte 0x0201EA90

	thumb_func_start sub_080AC670
sub_080AC670: @ 0x080AC670
	adds r1, r0, #0
	ldrh r0, [r1, #0x2c]
	cmp r0, #0
	beq _080AC67C
	adds r0, #1
	strh r0, [r1, #0x2c]
_080AC67C:
	bx lr
	.align 2, 0

	thumb_func_start sub_080AC680
sub_080AC680: @ 0x080AC680
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0
	bl InitBgs
	bl sub_08005308
	bl ResetText
	bl sub_08015A0C
	bl sub_0804A9F8
	bl InitSystemTextFont
	ldr r7, _080AC948 @ =gDispIo
	movs r6, #1
	ldrb r2, [r7, #1]
	orrs r2, r6
	movs r0, #2
	orrs r2, r0
	movs r1, #4
	orrs r2, r1
	movs r3, #8
	orrs r2, r3
	movs r0, #0x10
	orrs r2, r0
	subs r1, #8
	adds r0, r1, #0
	ldrb r3, [r7, #0xc]
	ands r0, r3
	strb r0, [r7, #0xc]
	adds r0, r1, #0
	ldrb r3, [r7, #0x10]
	ands r0, r3
	movs r3, #2
	orrs r0, r3
	strb r0, [r7, #0x10]
	ldrb r0, [r7, #0x14]
	ands r1, r0
	orrs r1, r6
	strb r1, [r7, #0x14]
	movs r0, #3
	ldrb r1, [r7, #0x18]
	orrs r0, r1
	strb r0, [r7, #0x18]
	movs r0, #0x21
	rsbs r0, r0, #0
	ands r2, r0
	subs r3, #0x43
	ands r2, r3
	movs r0, #0x7f
	ands r2, r0
	strb r2, [r7, #1]
	movs r0, #0
	bl SetBlankChr
	ldr r0, _080AC94C @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r1, _080AC950 @ =gBg1Tm
	mov sl, r1
	mov r0, sl
	movs r1, #0
	bl TmFill
	ldr r0, _080AC954 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r0, _080AC958 @ =gBg3Tm
	movs r1, #0
	bl TmFill
	movs r0, #0xf
	bl EnableBgSync
	adds r0, r4, #0
	adds r0, #0x35
	movs r5, #0
	strb r5, [r0]
	adds r0, #2
	strb r5, [r0]
	movs r2, #0
	mov sb, r2
	strh r5, [r4, #0x2a]
	adds r0, #4
	mov r3, sb
	strb r3, [r0]
	adds r0, #1
	strb r3, [r0]
	adds r0, #1
	strb r3, [r0]
	adds r0, #1
	strb r3, [r0]
	subs r0, #0xf
	strb r3, [r0]
	adds r0, #1
	strb r3, [r0]
	adds r1, r4, #0
	adds r1, #0x32
	movs r0, #0xff
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x2e
	strb r3, [r0]
	strh r5, [r4, #0x2c]
	adds r0, #0x11
	strb r3, [r0]
	adds r0, r4, #0
	bl sub_080ABD24
	adds r0, r4, #0
	bl sub_080AC324
	bl sub_080AD1A4
	adds r0, r4, #0
	bl sub_080ACA1C
	adds r0, r4, #0
	bl sub_080AA390
	movs r0, #0xa0
	lsls r0, r0, #2
	movs r1, #2
	bl sub_080AA3B4
	adds r0, r4, #0
	bl sub_080A9BE8
	movs r1, #0xd0
	lsls r1, r1, #3
	movs r0, #1
	movs r2, #3
	bl sub_080A9BFC
	movs r0, #0x90
	movs r1, #0x38
	movs r2, #0x90
	movs r3, #0x90
	bl sub_080A9C84
	adds r0, r4, #0
	bl sub_080AC490
	adds r0, r4, #0
	bl sub_080AC4C0
	adds r0, r4, #0
	bl sub_080AC538
	ldr r0, _080AC95C @ =0x08432E44
	ldr r1, _080AC960 @ =0x06004000
	bl sub_08013688
	ldr r0, _080AC964 @ =0x0840364C
	movs r1, #0x80
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080AC968 @ =0x0840366C
	movs r1, #0xa0
	movs r2, #0x20
	bl ApplyPaletteExt
	str r5, [sp]
	movs r0, #2
	movs r1, #1
	movs r2, #0x1a
	movs r3, #6
	bl sub_0804A4CC
	str r5, [sp]
	movs r0, #0xb
	movs r1, #7
	movs r2, #0x11
	movs r3, #0xc
	bl sub_0804A4CC
	str r5, [sp]
	movs r0, #2
	movs r1, #0xb
	movs r2, #9
	movs r3, #8
	bl sub_0804A4CC
	movs r0, #0xb1
	lsls r0, r0, #2
	add r0, sl
	ldr r1, _080AC96C @ =0x08433C0C
	movs r2, #0x80
	lsls r2, r2, #5
	mov r8, r2
	bl TmApplyTsa_thm
	str r5, [sp]
	movs r0, #2
	movs r1, #7
	movs r2, #9
	movs r3, #4
	bl sub_0804A4CC
	movs r3, #0xb6
	lsls r3, r3, #1
	add sl, r3
	ldr r1, _080AC970 @ =0x08433CA0
	mov r0, sl
	mov r2, r8
	bl TmApplyTsa_thm
	ldr r1, _080AC94C @ =gBg0Tm
	movs r2, #0xb6
	lsls r2, r2, #1
	adds r0, r1, r2
	adds r1, r4, #0
	bl sub_080AC640
	ldr r2, _080AC974 @ =0x0000FFFE
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	ldr r1, _080AC978 @ =0x0000FFFC
	movs r0, #2
	movs r2, #0
	bl SetBgOffset
	movs r0, #0x20
	ldrb r3, [r7, #1]
	orrs r0, r3
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r2, #0x7f
	ands r0, r2
	strb r0, [r7, #1]
	adds r1, r7, #0
	adds r1, #0x34
	ldrb r0, [r1]
	orrs r0, r6
	movs r3, #2
	orrs r0, r3
	movs r2, #4
	orrs r0, r2
	movs r3, #8
	orrs r0, r3
	movs r2, #0x10
	orrs r0, r2
	strb r0, [r1]
	subs r1, #7
	movs r0, #4
	strb r0, [r1]
	adds r1, #4
	movs r5, #0x40
	movs r0, #0x40
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x90
	strb r0, [r1]
	adds r1, #6
	ldrb r3, [r1]
	orrs r6, r3
	movs r0, #2
	orrs r6, r0
	subs r0, #7
	ands r6, r0
	movs r2, #8
	orrs r6, r2
	movs r3, #0x10
	orrs r6, r3
	strb r6, [r1]
	adds r0, r4, #0
	bl sub_080AC42C
	movs r1, #0x80
	lsls r1, r1, #8
	str r0, [sp]
	ldr r0, _080AC958 @ =gBg3Tm
	movs r2, #8
	movs r3, #8
	bl sub_080B7980
	ldr r0, _080AC97C @ =0x08432FF8
	ldr r1, _080AC980 @ =0x06012000
	bl sub_08013688
	ldr r0, _080AC984 @ =0x08433A90
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x40
	bl ApplyPaletteExt
	adds r0, r4, #0
	bl sub_080AD664
	adds r1, r7, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	orrs r0, r5
	strb r0, [r1]
	adds r1, #8
	movs r0, #0xf
	strb r0, [r1]
	adds r1, #1
	movs r0, #3
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x46
	mov r3, sb
	strb r3, [r0]
	ldr r0, _080AC988 @ =0x0000FFE0
	ldrh r1, [r7, #0x3c]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	ldr r1, _080AC98C @ =0x0000E0FF
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r7, #0x3c]
	adds r0, r4, #0
	bl sub_08005E88
	bl sub_080AC1A4
	ldr r0, _080AC990 @ =sub_080AC670
	adds r1, r4, #0
	bl sub_080AA20C
	ldr r0, _080AC994 @ =0x08DAECA0
	adds r1, r4, #0
	bl Proc_Start
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AC948: .4byte gDispIo
_080AC94C: .4byte gBg0Tm
_080AC950: .4byte gBg1Tm
_080AC954: .4byte gBg2Tm
_080AC958: .4byte gBg3Tm
_080AC95C: .4byte 0x08432E44
_080AC960: .4byte 0x06004000
_080AC964: .4byte 0x0840364C
_080AC968: .4byte 0x0840366C
_080AC96C: .4byte 0x08433C0C
_080AC970: .4byte 0x08433CA0
_080AC974: .4byte 0x0000FFFE
_080AC978: .4byte 0x0000FFFC
_080AC97C: .4byte 0x08432FF8
_080AC980: .4byte 0x06012000
_080AC984: .4byte 0x08433A90
_080AC988: .4byte 0x0000FFE0
_080AC98C: .4byte 0x0000E0FF
_080AC990: .4byte sub_080AC670
_080AC994: .4byte 0x08DAECA0

	thumb_func_start sub_080AC998
sub_080AC998: @ 0x080AC998
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	bl sub_0800409C
	lsls r0, r0, #0x18
	asrs r3, r0, #0x18
	cmp r3, #0
	bne _080AC9D8
	adds r0, r4, #0
	adds r0, #0x32
	strb r5, [r0]
	movs r0, #1
	strh r0, [r4, #0x2c]
	ldr r1, _080AC9D4 @ =0x08DAE514
	lsls r0, r5, #4
	adds r0, r0, r1
	ldr r0, [r0]
	movs r2, #0x80
	lsls r2, r2, #1
	str r3, [sp]
	adds r1, r2, #0
	adds r3, r6, #0
	bl sub_08003FD4
	movs r0, #1
	b _080AC9DA
	.align 2, 0
_080AC9D4: .4byte 0x08DAE514
_080AC9D8:
	movs r0, #0
_080AC9DA:
	add sp, #4
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080AC9E4
sub_080AC9E4: @ 0x080AC9E4
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	bl sub_0800409C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _080ACA14
	movs r4, #0
	strh r0, [r5, #0x2c]
	movs r1, #0x80
	lsls r1, r1, #1
	str r0, [sp]
	movs r0, #0
	movs r2, #0
	movs r3, #0x18
	bl sub_08003FD4
	adds r0, r5, #0
	adds r0, #0x2f
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
_080ACA14:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080ACA1C
sub_080ACA1C: @ 0x080ACA1C
	push {r4, lr}
	adds r4, r0, #0
	adds r4, #0x35
	ldrb r1, [r4]
	bl sub_080ABCB0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080ACA36
	ldrb r0, [r4]
	bl sub_080AD260
	b _080ACA3E
_080ACA36:
	movs r0, #1
	rsbs r0, r0, #0
	bl sub_080AD260
_080ACA3E:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080ACA44
sub_080ACA44: @ 0x080ACA44
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	movs r5, #0
	adds r0, #0x37
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _080ACB38
	ldr r0, _080ACB20 @ =gpKeySt
	ldr r1, [r0]
	ldrh r2, [r1, #6]
	adds r3, r4, #0
	adds r3, #0x38
	movs r0, #4
	strb r0, [r3]
	movs r0, #0x80
	lsls r0, r0, #2
	ldrh r6, [r1, #4]
	ands r0, r6
	cmp r0, #0
	beq _080ACA76
	ldrh r2, [r1, #4]
	movs r0, #8
	strb r0, [r3]
_080ACA76:
	movs r0, #0x40
	ands r0, r2
	cmp r0, #0
	beq _080ACA82
	movs r5, #4
	rsbs r5, r5, #0
_080ACA82:
	movs r0, #0x80
	ands r0, r2
	cmp r0, #0
	beq _080ACA8C
	movs r5, #4
_080ACA8C:
	movs r0, #0x20
	ands r0, r2
	cmp r0, #0
	beq _080ACAA6
	adds r1, r4, #0
	adds r1, #0x35
	movs r0, #3
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _080ACAA6
	movs r5, #1
	rsbs r5, r5, #0
_080ACAA6:
	movs r0, #0x10
	ands r2, r0
	cmp r2, #0
	beq _080ACABE
	adds r1, r4, #0
	adds r1, #0x35
	movs r0, #3
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #2
	bhi _080ACABE
	movs r5, #1
_080ACABE:
	cmp r5, #0
	beq _080ACB2A
	adds r2, r4, #0
	adds r2, #0x35
	ldrb r1, [r2]
	adds r0, r1, r5
	cmp r0, #0
	bge _080ACAD0
	b _080ACC28
_080ACAD0:
	adds r1, r4, #0
	adds r1, #0x36
	ldrb r1, [r1]
	cmp r0, r1
	blt _080ACADC
	b _080ACC28
_080ACADC:
	strb r0, [r2]
	adds r0, r4, #0
	bl sub_080ACA1C
	adds r0, r4, #0
	bl sub_080AC4E8
	adds r5, r4, #0
	adds r5, #0x37
	strb r0, [r5]
	lsls r0, r0, #0x18
	asrs r1, r0, #0x18
	cmp r1, #0
	beq _080ACB24
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _080ACB08
	adds r0, r4, #0
	movs r1, #0xa
	bl Proc_Goto
_080ACB08:
	ldrb r5, [r5]
	cmp r5, #1
	bne _080ACB16
	adds r0, r4, #0
	movs r1, #0xb
	bl Proc_Goto
_080ACB16:
	adds r0, r4, #0
	bl sub_080AC538
	b _080ACB2A
	.align 2, 0
_080ACB20: .4byte gpKeySt
_080ACB24:
	adds r0, r4, #0
	bl sub_080AC4C0
_080ACB2A:
	adds r0, r4, #0
	adds r0, #0x37
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080ACB78
_080ACB38:
	adds r5, r4, #0
	adds r5, #0x37
	movs r1, #0
	ldrsb r1, [r5, r1]
	adds r0, r4, #0
	adds r0, #0x38
	ldrb r0, [r0]
	adds r2, r0, #0
	muls r2, r1, r2
	ldrh r6, [r4, #0x2a]
	adds r2, r6, r2
	strh r2, [r4, #0x2a]
	ldr r1, _080ACB74 @ =0x0000FFFC
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl SetBgOffset
	movs r0, #0xf
	ldrh r1, [r4, #0x2a]
	ands r0, r1
	cmp r0, #0
	bne _080ACB6A
	movs r0, #0
	strb r0, [r5]
_080ACB6A:
	adds r0, r4, #0
	bl sub_080AC490
	b _080ACC28
	.align 2, 0
_080ACB74: .4byte 0x0000FFFC
_080ACB78:
	ldr r0, _080ACB94 @ =gpKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080ACB98
	adds r0, r4, #0
	movs r1, #1
	bl Proc_Goto
	b _080ACC28
	.align 2, 0
_080ACB94: .4byte gpKeySt
_080ACB98:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080ACBA8
	adds r0, r4, #0
	bl sub_080AC9E4
	b _080ACC28
_080ACBA8:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080ACBFC
	adds r5, r4, #0
	adds r5, #0x35
	ldrb r1, [r5]
	adds r0, r4, #0
	bl sub_080ABCB0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080ACBE0
	ldrb r1, [r5]
	adds r0, r4, #0
	movs r2, #0x20
	bl sub_080AC998
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080ACC28
	adds r0, r4, #0
	bl sub_080AC3D0
	adds r1, r4, #0
	bl sub_080AD754
	b _080ACC28
_080ACBE0:
	ldr r0, _080ACBF8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080ACC28
	movs r0, #0xe3
	lsls r0, r0, #2
	bl m4aSongNumStart
	b _080ACC28
	.align 2, 0
_080ACBF8: .4byte gPlaySt
_080ACBFC:
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _080ACC18
	bl sub_0800409C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080ACC28
	adds r0, r4, #0
	movs r1, #2
	bl Proc_Goto
	b _080ACC28
_080ACC18:
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080ACC28
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
_080ACC28:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080ACC30
sub_080ACC30: @ 0x080ACC30
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	bl sub_0800409C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _080ACC56
	str r0, [sp]
	movs r0, #0x5a
	movs r1, #0
	movs r2, #0xc0
	movs r3, #0x18
	bl sub_08003FD4
	adds r0, r4, #0
	bl Proc_Break
_080ACC56:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080ACC60
sub_080ACC60: @ 0x080ACC60
	push {lr}
	bl sub_080AAC88
	ldr r0, _080ACC70 @ =0x08DAECA0
	bl sub_08004748
	pop {r0}
	bx r0
	.align 2, 0
_080ACC70: .4byte 0x08DAECA0

	thumb_func_start sub_080ACC74
sub_080ACC74: @ 0x080ACC74
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r4, r0, #0
	adds r6, r4, #0
	adds r6, #0x3b
	ldrb r1, [r6]
	rsbs r0, r1, #0
	movs r1, #3
	mov sl, r1
	bl __divsi3
	adds r5, r4, #0
	adds r5, #0x3c
	strb r0, [r5]
	ldrb r1, [r6]
	rsbs r0, r1, #0
	lsls r0, r0, #1
	movs r1, #3
	bl __divsi3
	adds r7, r4, #0
	adds r7, #0x3d
	strb r0, [r7]
	ldrb r0, [r6]
	adds r6, #3
	strb r0, [r6]
	ldr r0, _080ACDC4 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _080ACDC8 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _080ACDCC @ =gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r4, _080ACDD0 @ =0x08DAEC6C
	ldr r0, [r4]
	movs r1, #1
	str r1, [sp]
	movs r1, #0
	ldrsb r1, [r5, r1]
	adds r1, #1
	str r1, [sp, #4]
	movs r1, #0x1a
	str r1, [sp, #8]
	movs r1, #6
	mov sb, r1
	str r1, [sp, #0xc]
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_080A974C
	ldr r0, [r4]
	movs r1, #0
	ldrsb r1, [r7, r1]
	adds r1, #2
	str r1, [sp]
	movs r1, #7
	mov r8, r1
	str r1, [sp, #4]
	movs r5, #9
	str r5, [sp, #8]
	movs r1, #4
	str r1, [sp, #0xc]
	movs r1, #0
	movs r2, #7
	movs r3, #1
	bl sub_080A974C
	ldr r0, [r4]
	movs r1, #0
	ldrsb r1, [r7, r1]
	adds r1, #2
	str r1, [sp]
	movs r1, #0xb
	str r1, [sp, #4]
	str r5, [sp, #8]
	movs r1, #8
	str r1, [sp, #0xc]
	movs r1, #0
	movs r2, #0xb
	movs r3, #1
	bl sub_080A974C
	ldr r0, [r4]
	movs r1, #0
	ldrsb r1, [r6, r1]
	adds r1, #0xb
	str r1, [sp]
	mov r1, r8
	str r1, [sp, #4]
	movs r1, #0x11
	str r1, [sp, #8]
	movs r1, #0xc
	str r1, [sp, #0xc]
	movs r1, #0xa
	movs r2, #7
	movs r3, #1
	bl sub_080A974C
	ldr r0, [r4]
	movs r1, #0
	ldrsb r1, [r6, r1]
	adds r1, #0x16
	str r1, [sp]
	movs r5, #5
	str r5, [sp, #4]
	mov r1, sb
	str r1, [sp, #8]
	mov r1, sl
	str r1, [sp, #0xc]
	movs r1, #0xa
	movs r2, #0x13
	movs r3, #1
	bl sub_080A974C
	ldr r4, _080ACDD4 @ =0x08DAEC70
	ldr r0, [r4]
	movs r1, #0
	ldrsb r1, [r6, r1]
	adds r1, #0xc
	str r1, [sp]
	movs r1, #0
	str r1, [sp, #4]
	movs r1, #0x10
	str r1, [sp, #8]
	movs r1, #0x20
	str r1, [sp, #0xc]
	movs r1, #0xc
	movs r2, #0
	movs r3, #2
	bl sub_080A974C
	ldr r0, [r4]
	movs r1, #0
	ldrsb r1, [r6, r1]
	adds r1, #0x16
	str r1, [sp]
	str r5, [sp, #4]
	mov r1, sb
	str r1, [sp, #8]
	movs r1, #2
	str r1, [sp, #0xc]
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_080A974C
	movs r0, #7
	bl EnableBgSync
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080ACDC4: .4byte gBg0Tm
_080ACDC8: .4byte gBg1Tm
_080ACDCC: .4byte gBg2Tm
_080ACDD0: .4byte 0x08DAEC6C
_080ACDD4: .4byte 0x08DAEC70

	thumb_func_start sub_080ACDD8
sub_080ACDD8: @ 0x080ACDD8
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	sub sp, #0xc
	mov sb, r0
	adds r0, #0x3b
	movs r5, #0
	strb r5, [r0]
	ldr r6, _080ACE90 @ =0x08DAEC6C
	ldr r0, [r6]
	movs r1, #6
	str r1, [sp]
	str r5, [sp, #4]
	str r5, [sp, #8]
	movs r1, #0
	movs r2, #0
	movs r3, #0x1a
	bl sub_0804A360
	ldr r0, [r6]
	movs r1, #4
	str r1, [sp]
	str r5, [sp, #4]
	str r5, [sp, #8]
	movs r1, #0
	movs r2, #7
	movs r3, #9
	bl sub_0804A360
	ldr r0, [r6]
	movs r1, #0xb0
	lsls r1, r1, #2
	adds r0, r0, r1
	ldr r1, _080ACE94 @ =0x08433C0C
	movs r2, #0x80
	lsls r2, r2, #5
	mov r8, r2
	bl TmApplyTsa_thm
	ldr r0, [r6]
	movs r1, #0xc
	str r1, [sp]
	str r5, [sp, #4]
	str r5, [sp, #8]
	movs r1, #0xa
	movs r2, #7
	movs r3, #0x11
	bl sub_0804A360
	ldr r0, [r6]
	ldr r1, _080ACE98 @ =0x000004D4
	adds r0, r0, r1
	ldr r1, _080ACE9C @ =0x08433CA0
	mov r2, r8
	bl TmApplyTsa_thm
	ldr r0, _080ACEA0 @ =gBg2Tm
	ldr r4, _080ACEA4 @ =0x08DAEC70
	ldr r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #2
	bl CpuFastSet
	ldr r0, [r4]
	mov r1, sb
	bl sub_080AC640
	ldr r0, [r6]
	movs r2, #0xc8
	lsls r2, r2, #3
	adds r0, r0, r2
	ldr r1, _080ACEA8 @ =0x08432E88
	mov r2, r8
	bl TmApplyTsa_thm
	bl sub_080AA440
	movs r0, #0
	bl sub_080A9C68
	movs r0, #0x3a
	add sb, r0
	mov r1, sb
	strb r5, [r1]
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080ACE90: .4byte 0x08DAEC6C
_080ACE94: .4byte 0x08433C0C
_080ACE98: .4byte 0x000004D4
_080ACE9C: .4byte 0x08433CA0
_080ACEA0: .4byte gBg2Tm
_080ACEA4: .4byte 0x08DAEC70
_080ACEA8: .4byte 0x08432E88

	thumb_func_start sub_080ACEAC
sub_080ACEAC: @ 0x080ACEAC
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x3a
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r1, [r1]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	muls r0, r1, r0
	asrs r0, r0, #6
	adds r4, r5, #0
	adds r4, #0x3b
	strb r0, [r4]
	adds r0, r5, #0
	bl sub_080ACC74
	ldrb r4, [r4]
	cmp r4, #0x18
	bne _080ACEDE
	adds r0, r5, #0
	bl Proc_Break
_080ACEDE:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080ACEE4
sub_080ACEE4: @ 0x080ACEE4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080ACF04 @ =gpKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #5
	ands r0, r1
	cmp r0, #0
	beq _080ACF08
	adds r0, r4, #0
	bl sub_080AC3D0
	adds r1, r4, #0
	bl sub_080AD754
	b _080ACF4C
	.align 2, 0
_080ACF04: .4byte gpKeySt
_080ACF08:
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _080ACF18
	adds r0, r4, #0
	bl sub_080AC0AC
	b _080ACF4C
_080ACF18:
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080ACF28
	adds r0, r4, #0
	bl sub_080AC10C
	b _080ACF4C
_080ACF28:
	ldr r0, _080ACF38 @ =0x00000302
	ands r0, r1
	cmp r0, #0
	beq _080ACF3C
	adds r0, r4, #0
	bl Proc_Break
	b _080ACF4C
	.align 2, 0
_080ACF38: .4byte 0x00000302
_080ACF3C:
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080ACF4C
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
_080ACF4C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080ACF54
sub_080ACF54: @ 0x080ACF54
	push {r4, lr}
	adds r4, r0, #0
	bl sub_080ACA1C
	adds r4, #0x3a
	movs r0, #0
	strb r0, [r4]
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080ACF68
sub_080ACF68: @ 0x080ACF68
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r2, r5, #0
	adds r2, #0x3a
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	movs r1, #8
	subs r1, r1, r0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	muls r0, r1, r0
	cmp r0, #0
	bge _080ACF88
	adds r0, #0x3f
_080ACF88:
	asrs r0, r0, #6
	adds r4, r5, #0
	adds r4, #0x3b
	strb r0, [r4]
	adds r0, r5, #0
	bl sub_080ACC74
	ldrb r0, [r4]
	cmp r0, #0
	bne _080ACFAE
	adds r0, r5, #0
	bl sub_080AC4C0
	adds r0, r5, #0
	bl sub_080AC490
	adds r0, r5, #0
	bl Proc_Break
_080ACFAE:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080ACFB4
sub_080ACFB4: @ 0x080ACFB4
	push {lr}
	adds r2, r0, #0
	adds r2, #0x3a
	movs r1, #0
	strb r1, [r2]
	strh r1, [r0, #0x2c]
	bl sub_080ABF30
	pop {r0}
	bx r0

	thumb_func_start sub_080ACFC8
sub_080ACFC8: @ 0x080ACFC8
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	adds r7, r0, #0
	adds r6, r7, #0
	adds r6, #0x3a
	ldrb r0, [r6]
	adds r0, #1
	strb r0, [r6]
	movs r1, #8
	subs r1, r1, r0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	muls r1, r0, r1
	cmp r1, #0
	bge _080ACFEA
	adds r1, #0x3f
_080ACFEA:
	asrs r1, r1, #6
	movs r0, #0x18
	subs r0, r0, r1
	adds r5, r7, #0
	adds r5, #0x3b
	strb r0, [r5]
	ldrb r0, [r5]
	movs r1, #3
	bl __udivsi3
	movs r1, #0x14
	subs r1, r1, r0
	adds r4, r7, #0
	adds r4, #0x3c
	strb r1, [r4]
	ldr r0, _080AD050 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _080AD054 @ =0x08DAEC6C
	ldr r0, [r0]
	movs r1, #2
	str r1, [sp]
	movs r1, #0
	ldrsb r1, [r4, r1]
	adds r1, #1
	str r1, [sp, #4]
	movs r1, #0x1a
	str r1, [sp, #8]
	movs r1, #7
	str r1, [sp, #0xc]
	movs r1, #0
	movs r2, #0x19
	movs r3, #1
	bl sub_080A974C
	movs r0, #2
	bl EnableBgSync
	ldrb r5, [r5]
	cmp r5, #0x18
	bne _080AD048
	movs r0, #0
	strb r0, [r6]
	adds r0, r7, #0
	bl Proc_Break
_080AD048:
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AD050: .4byte gBg1Tm
_080AD054: .4byte 0x08DAEC6C

	thumb_func_start sub_080AD058
sub_080AD058: @ 0x080AD058
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0
	bne _080AD0FA
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080AD098
	ldr r0, _080AD094 @ =0x08DAE514
	adds r1, r4, #0
	adds r1, #0x32
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #4
	adds r0, #4
	adds r1, r1, r0
	ldr r0, [r1]
	ldrh r1, [r4, #0x2c]
	cmp r1, r0
	blt _080AD098
	adds r0, r4, #0
	bl sub_080ABEF0
	b _080AD0FA
	.align 2, 0
_080AD094: .4byte 0x08DAE514
_080AD098:
	ldr r0, _080AD0B0 @ =gpKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080AD0B4
	adds r0, r4, #0
	bl sub_080AC0AC
	b _080AD0FA
	.align 2, 0
_080AD0B0: .4byte gpKeySt
_080AD0B4:
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _080AD0C4
	adds r0, r4, #0
	bl sub_080AC10C
	b _080AD0FA
_080AD0C4:
	movs r0, #6
	ands r0, r1
	cmp r0, #0
	beq _080AD0D4
	adds r0, r4, #0
	bl Proc_Break
	b _080AD0FA
_080AD0D4:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080AD0EA
	adds r0, r4, #0
	bl sub_080AC3D0
	adds r1, r4, #0
	bl sub_080AD754
	b _080AD0FA
_080AD0EA:
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080AD0FA
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
_080AD0FA:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080AD100
sub_080AD100: @ 0x080AD100
	push {r4, r5, r6, lr}
	sub sp, #0x10
	adds r6, r0, #0
	adds r2, r6, #0
	adds r2, #0x3a
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	movs r1, #8
	subs r1, r1, r0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	muls r0, r1, r0
	cmp r0, #0
	bge _080AD122
	adds r0, #0x3f
_080AD122:
	asrs r0, r0, #6
	adds r5, r6, #0
	adds r5, #0x3b
	strb r0, [r5]
	ldrb r0, [r5]
	movs r1, #3
	bl __udivsi3
	movs r1, #0x14
	subs r1, r1, r0
	adds r4, r6, #0
	adds r4, #0x3c
	strb r1, [r4]
	ldr r0, _080AD188 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _080AD18C @ =0x08DAEC6C
	ldr r0, [r0]
	movs r1, #2
	str r1, [sp]
	movs r1, #0
	ldrsb r1, [r4, r1]
	adds r1, #1
	str r1, [sp, #4]
	movs r1, #0x1a
	str r1, [sp, #8]
	movs r1, #7
	str r1, [sp, #0xc]
	movs r1, #0
	movs r2, #0x19
	movs r3, #1
	bl sub_080A974C
	movs r0, #2
	bl EnableBgSync
	ldrb r1, [r5]
	cmp r1, #0
	bne _080AD17E
	adds r0, r6, #0
	adds r0, #0x30
	strb r1, [r0]
	adds r0, r6, #0
	bl Proc_Break
_080AD17E:
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AD188: .4byte gBg1Tm
_080AD18C: .4byte 0x08DAEC6C

	thumb_func_start sub_080AD190
sub_080AD190: @ 0x080AD190
	push {lr}
	adds r1, r0, #0
	ldr r0, _080AD1A0 @ =0x08DAECD0
	bl Proc_StartBlocking
	pop {r1}
	bx r1
	.align 2, 0
_080AD1A0: .4byte 0x08DAECD0

	thumb_func_start sub_080AD1A4
sub_080AD1A4: @ 0x080AD1A4
	push {r4, r5, r6, lr}
	ldr r6, _080AD244 @ =0x06014000
	ldr r4, _080AD248 @ =0x0201EA50
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #5
	bl InitSpriteTextFont
	ldr r0, _080AD24C @ =0x081901C8
	movs r5, #0xd0
	lsls r5, r5, #2
	adds r1, r5, #0
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, _080AD250 @ =gPal
	adds r0, r0, r5
	movs r1, #0
	strh r1, [r0]
	bl EnablePalSync
	adds r0, r4, #0
	bl SetTextFont
	adds r0, r4, #0
	adds r0, #0x18
	bl InitSpriteText
	adds r0, r4, #0
	adds r0, #0x20
	bl InitSpriteText
	adds r4, #0x28
	movs r5, #2
_080AD1E8:
	adds r0, r4, #0
	bl InitSpriteText
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge _080AD1E8
	movs r0, #0
	bl SetTextFont
	ldr r4, _080AD248 @ =0x0201EA50
	ldr r0, _080AD254 @ =0x0001FFFF
	ands r0, r6
	lsrs r0, r0, #5
	ldr r2, _080AD258 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	movs r2, #0xa0
	lsls r2, r2, #8
	adds r1, r2, #0
	adds r0, r0, r1
	adds r1, r4, #0
	adds r1, #0x48
	strh r0, [r1]
	movs r0, #0
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	adds r4, #0x40
	adds r0, r4, #0
	movs r1, #2
	bl InitText
	adds r0, r4, #0
	bl ClearText
	ldr r1, _080AD25C @ =0x08439BE4
	adds r0, r4, #0
	bl Text_DrawString
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AD244: .4byte 0x06014000
_080AD248: .4byte 0x0201EA50
_080AD24C: .4byte 0x081901C8
_080AD250: .4byte gPal
_080AD254: .4byte 0x0001FFFF
_080AD258: .4byte 0x000003FF
_080AD25C: .4byte 0x08439BE4

	thumb_func_start sub_080AD260
sub_080AD260: @ 0x080AD260
	push {r4, r5, lr}
	adds r1, r0, #0
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _080AD278
	ldr r0, _080AD274 @ =0x08DAEB74
	ldr r5, [r0]
	b _080AD282
	.align 2, 0
_080AD274: .4byte 0x08DAEB74
_080AD278:
	ldr r0, _080AD2C8 @ =0x08DAE514
	lsls r1, r1, #4
	adds r0, #0xc
	adds r1, r1, r0
	ldr r5, [r1]
_080AD282:
	ldr r4, _080AD2CC @ =0x0201EA50
	adds r0, r4, #0
	bl SetTextFont
	movs r0, #1
	bl SetTextFontGlyphs
	adds r4, #0x18
	adds r0, r4, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	movs r0, #0xb0
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	adds r0, r4, #0
	adds r1, r5, #0
	bl Text_DrawString
	movs r0, #0
	bl SetTextFont
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AD2C8: .4byte 0x08DAE514
_080AD2CC: .4byte 0x0201EA50

	thumb_func_start sub_080AD2D0
sub_080AD2D0: @ 0x080AD2D0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov sl, r0
	lsls r1, r1, #0x10
	lsrs r7, r1, #0x10
	cmp r7, #0x20
	bls _080AD380
	movs r0, #0xff
	mov r1, sl
	ands r1, r0
	mov sl, r1
	ldr r4, _080AD390 @ =gSinLut
	movs r2, #0x80
	adds r2, r2, r4
	mov sb, r2
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov r8, r2
	mov r1, r8
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, sb
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	movs r4, #0
	ldr r6, _080AD394 @ =0x0201EA98
	movs r5, #0x20
_080AD35A:
	lsls r0, r4, #2
	ldrh r1, [r6]
	adds r0, r1, r0
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x80
	lsls r2, r2, #1
	add r2, sl
	ldr r3, _080AD398 @ =0x08BFF7A8
	bl sub_080068C4
	adds r5, #0x20
	adds r4, #1
	cmp r4, #4
	ble _080AD35A
_080AD380:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AD390: .4byte gSinLut
_080AD394: .4byte 0x0201EA98
_080AD398: .4byte 0x08BFF7A8

	thumb_func_start sub_080AD39C
sub_080AD39C: @ 0x080AD39C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	mov sb, r0
	mov r8, r1
	adds r4, r2, #0
	movs r6, #0
	movs r7, #0xd
	cmp r3, #0
	beq _080AD40A
	movs r0, #0xff
	ands r1, r0
	mov r8, r1
	cmp r4, #7
	ble _080AD3EC
	mov r5, sb
_080AD3C0:
	subs r4, #8
	ldr r1, _080AD418 @ =0x000001FF
	ands r1, r5
	lsls r0, r7, #0xc
	ldr r2, _080AD41C @ =0x00000847
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #0
	mov r2, r8
	ldr r3, _080AD420 @ =0x08BFF760
	bl sub_080068C4
	adds r5, #8
	adds r6, #1
	cmp r6, #2
	ble _080AD3E2
	movs r7, #0xe
_080AD3E2:
	cmp r6, #4
	ble _080AD3E8
	movs r7, #0xf
_080AD3E8:
	cmp r4, #7
	bgt _080AD3C0
_080AD3EC:
	lsls r1, r6, #3
	add r1, sb
	ldr r0, _080AD418 @ =0x000001FF
	ands r1, r0
	ldr r3, _080AD420 @ =0x08BFF760
	lsls r0, r7, #0xc
	adds r0, r4, r0
	movs r2, #0x84
	lsls r2, r2, #4
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #0
	mov r2, r8
	bl sub_080068C4
_080AD40A:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AD418: .4byte 0x000001FF
_080AD41C: .4byte 0x00000847
_080AD420: .4byte 0x08BFF760

	thumb_func_start sub_080AD424
sub_080AD424: @ 0x080AD424
	push {r4, r5, r6, r7, lr}
	ldr r7, [r0, #0x14]
	ldr r0, _080AD45C @ =0x0201EA9C
	movs r6, #0x40
	adds r5, r0, #0
	adds r5, #0x30
	movs r4, #1
_080AD432:
	ldrb r3, [r5]
	adds r0, r7, #0
	adds r0, #0x3d
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r0, #0x18
	adds r1, r6, #0
	adds r2, r3, #0
	bl sub_080AD39C
	adds r6, #8
	adds r5, #0x31
	subs r4, #1
	cmp r4, #0
	bge _080AD432
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AD45C: .4byte 0x0201EA9C

	thumb_func_start sub_080AD460
sub_080AD460: @ 0x080AD460
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r6, r0, #0
	adds r7, r1, #0
	adds r0, r2, #0
	movs r1, #0x3c
	bl __divsi3
	adds r5, r0, #0
	movs r1, #0x3c
	bl __divsi3
	adds r4, r0, #0
	adds r0, r5, #0
	movs r1, #0x3c
	bl __modsi3
	mov r8, r0
	ldr r3, _080AD4E8 @ =0x08DAEE40
	movs r5, #0x80
	lsls r5, r5, #7
	str r5, [sp]
	movs r0, #0
	adds r1, r6, #0
	adds r2, r7, #0
	bl sub_080068C4
	adds r1, r6, #0
	adds r1, #0x28
	ldr r0, _080AD4EC @ =0x08DAEEA8
	mov sb, r0
	lsls r4, r4, #2
	add r4, sb
	ldr r3, [r4]
	str r5, [sp]
	movs r0, #0
	adds r2, r7, #0
	bl sub_080068C4
	adds r1, r6, #0
	adds r1, #0x30
	ldr r3, _080AD4F0 @ =0x08DAEE4E
	str r5, [sp]
	movs r0, #0
	adds r2, r7, #0
	bl sub_080068C4
	mov r0, r8
	cmp r0, #9
	ble _080AD4F4
	adds r4, r6, #0
	adds r4, #0x38
	movs r1, #0xa
	bl __divsi3
	lsls r0, r0, #2
	add r0, sb
	ldr r3, [r0]
	str r5, [sp]
	movs r0, #0
	adds r1, r4, #0
	adds r2, r7, #0
	bl sub_080068C4
	b _080AD506
	.align 2, 0
_080AD4E8: .4byte 0x08DAEE40
_080AD4EC: .4byte 0x08DAEEA8
_080AD4F0: .4byte 0x08DAEE4E
_080AD4F4:
	adds r1, r6, #0
	adds r1, #0x38
	mov r0, sb
	ldr r3, [r0]
	str r5, [sp]
	movs r0, #0
	adds r2, r7, #0
	bl sub_080068C4
_080AD506:
	adds r5, r6, #0
	adds r5, #0x40
	ldr r4, _080AD538 @ =0x08DAEEA8
	mov r0, r8
	movs r1, #0xa
	bl __modsi3
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r3, [r0]
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0
	adds r1, r5, #0
	adds r2, r7, #0
	bl sub_080068C4
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AD538: .4byte 0x08DAEEA8

	thumb_func_start sub_080AD53C
sub_080AD53C: @ 0x080AD53C
	movs r1, #0
	str r1, [r0, #0x2c]
	bx lr
	.align 2, 0

	thumb_func_start sub_080AD544
sub_080AD544: @ 0x080AD544
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldr r6, [r7, #0x14]
	adds r4, r6, #0
	adds r4, #0x3c
	movs r0, #0
	ldrsb r0, [r4, r0]
	lsls r0, r0, #3
	adds r0, #0x18
	movs r1, #0x80
	lsls r1, r1, #1
	bl sub_080AD2D0
	adds r0, r6, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080AD5EA
	movs r0, #0
	ldrsb r0, [r4, r0]
	lsls r4, r0, #3
	adds r4, #0x30
	movs r5, #0xff
	ands r4, r5
	movs r2, #0xc
	subs r2, r2, r0
	lsls r2, r2, #3
	adds r2, #4
	ands r2, r5
	movs r0, #0x80
	lsls r0, r0, #3
	adds r2, r2, r0
	ldr r3, _080AD644 @ =0x08DAEDF8
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0
	movs r1, #4
	bl sub_080068C4
	adds r2, r4, #1
	ands r2, r5
	ldr r3, _080AD648 @ =0x08DAEE18
	movs r5, #0x80
	lsls r5, r5, #7
	str r5, [sp]
	movs r0, #0
	movs r1, #0x88
	bl sub_080068C4
	ldrh r1, [r6, #0x2c]
	lsls r0, r1, #5
	adds r0, r0, r1
	lsls r0, r0, #1
	ldr r2, _080AD64C @ =0x08DAE514
	adds r1, r6, #0
	adds r1, #0x32
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #4
	adds r2, #4
	adds r1, r1, r2
	ldr r1, [r1]
	adds r1, #0x78
	bl __divsi3
	adds r1, r0, #0
	adds r1, #0x88
	ldr r3, _080AD650 @ =0x08DAEE38
	str r5, [sp]
	movs r0, #0
	adds r2, r4, #0
	bl sub_080068C4
	ldrh r2, [r6, #0x2c]
	movs r0, #0x3c
	adds r1, r4, #0
	bl sub_080AD460
_080AD5EA:
	adds r6, #0x3d
	movs r1, #0
	ldrsb r1, [r6, r1]
	lsls r1, r1, #3
	adds r1, #0x16
	ldr r5, _080AD654 @ =0x000001FF
	ands r1, r5
	ldr r3, _080AD658 @ =0x08DAEDE0
	movs r4, #0x80
	lsls r4, r4, #7
	str r4, [sp]
	movs r0, #0xb
	movs r2, #0x58
	bl sub_08006884
	movs r1, #0
	ldrsb r1, [r6, r1]
	lsls r1, r1, #3
	adds r1, #0x16
	ands r1, r5
	ldr r3, _080AD65C @ =0x08DAEDE8
	str r4, [sp]
	movs r0, #0xb
	movs r2, #0x68
	bl sub_08006884
	movs r1, #0
	ldrsb r1, [r6, r1]
	lsls r1, r1, #3
	adds r1, #0x16
	ands r1, r5
	ldr r3, _080AD660 @ =0x08DAEDF0
	str r4, [sp]
	movs r0, #0xb
	movs r2, #0x78
	bl sub_08006884
	adds r0, r7, #0
	bl sub_080AD424
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AD644: .4byte 0x08DAEDF8
_080AD648: .4byte 0x08DAEE18
_080AD64C: .4byte 0x08DAE514
_080AD650: .4byte 0x08DAEE38
_080AD654: .4byte 0x000001FF
_080AD658: .4byte 0x08DAEDE0
_080AD65C: .4byte 0x08DAEDE8
_080AD660: .4byte 0x08DAEDF0

	thumb_func_start sub_080AD664
sub_080AD664: @ 0x080AD664
	push {lr}
	adds r1, r0, #0
	ldr r0, _080AD674 @ =0x08DAEED0
	bl Proc_Start
	pop {r1}
	bx r1
	.align 2, 0
_080AD674: .4byte 0x08DAEED0

	thumb_func_start sub_080AD678
sub_080AD678: @ 0x080AD678
	push {lr}
	adds r0, #0x4c
	movs r1, #0
	strh r1, [r0]
	bl sub_08013BCC
	pop {r0}
	bx r0

	thumb_func_start sub_080AD688
sub_080AD688: @ 0x080AD688
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r2, r5, #0
	adds r2, #0x4c
	ldrh r0, [r2]
	adds r1, r0, #1
	strh r1, [r2]
	lsls r0, r0, #0x10
	asrs r0, r0, #0xc
	movs r4, #0x80
	lsls r4, r4, #1
	subs r4, r4, r0
	movs r3, #0xff
	lsls r3, r3, #8
	adds r0, r4, #0
	adds r1, r4, #0
	adds r2, r4, #0
	bl sub_08013C48
	cmp r4, #0
	bne _080AD6B8
	adds r0, r5, #0
	bl Proc_Break
_080AD6B8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080AD6C0
sub_080AD6C0: @ 0x080AD6C0
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, _080AD700 @ =gBg3Tm
	movs r1, #0x80
	lsls r1, r1, #8
	ldr r2, [r4, #0x58]
	str r2, [sp]
	movs r2, #8
	movs r3, #8
	bl sub_080B7980
	bl sub_08013BCC
	movs r3, #0xff
	lsls r3, r3, #8
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl sub_08013C48
	movs r0, #8
	bl EnableBgSync
	adds r4, #0x4c
	movs r0, #0
	strh r0, [r4]
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AD700: .4byte gBg3Tm

	thumb_func_start sub_080AD704
sub_080AD704: @ 0x080AD704
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x4c
	ldrh r4, [r1]
	adds r0, r4, #1
	strh r0, [r1]
	lsls r4, r4, #0x10
	asrs r4, r4, #0xc
	movs r3, #0xff
	lsls r3, r3, #8
	adds r0, r4, #0
	adds r1, r4, #0
	adds r2, r4, #0
	bl sub_08013C48
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r4, r0
	bne _080AD732
	adds r0, r5, #0
	bl Proc_Break
_080AD732:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080AD738
sub_080AD738: @ 0x080AD738
	push {lr}
	ldr r0, _080AD748 @ =0x08DAEEF0
	bl Proc_Find
	cmp r0, #0
	bne _080AD74C
	movs r0, #0
	b _080AD74E
	.align 2, 0
_080AD748: .4byte 0x08DAEEF0
_080AD74C:
	movs r0, #1
_080AD74E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080AD754
sub_080AD754: @ 0x080AD754
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	bl sub_080AD738
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080AD76E
	ldr r0, _080AD774 @ =0x08DAEEF0
	adds r1, r4, #0
	bl Proc_Start
	str r5, [r0, #0x58]
_080AD76E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AD774: .4byte 0x08DAEEF0

	thumb_func_start sub_080AD778
sub_080AD778: @ 0x080AD778
	push {r4, lr}
	ldr r0, _080AD7B0 @ =0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0xa0
	bls _080AD78A
	movs r2, #0
_080AD78A:
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	bne _080AD7CE
	cmp r2, #0x63
	bhi _080AD7BC
	ldr r1, _080AD7B4 @ =0x04000050
	movs r0, #0xc1
	strh r0, [r1]
	ldr r4, _080AD7B8 @ =0x04000054
	movs r0, #0x64
	subs r0, r0, r2
	lsls r0, r0, #4
	movs r1, #0x64
	bl __divsi3
	strh r0, [r4]
	b _080AD7CE
	.align 2, 0
_080AD7B0: .4byte 0x04000006
_080AD7B4: .4byte 0x04000050
_080AD7B8: .4byte 0x04000054
_080AD7BC:
	ldr r1, _080AD7D4 @ =0x04000050
	movs r2, #0xa2
	lsls r2, r2, #1
	adds r0, r2, #0
	strh r0, [r1]
	adds r1, #2
	ldr r2, _080AD7D8 @ =0x0000100A
	adds r0, r2, #0
	strh r0, [r1]
_080AD7CE:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AD7D4: .4byte 0x04000050
_080AD7D8: .4byte 0x0000100A

	thumb_func_start sub_080AD7DC
sub_080AD7DC: @ 0x080AD7DC
	push {lr}
	movs r1, #4
	str r1, [r0, #0x58]
	ldr r0, _080AD810 @ =0x08DAEF20
	bl InitBgs
	ldr r2, _080AD814 @ =gDispIo
	movs r0, #8
	rsbs r0, r0, #0
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	strb r0, [r2]
	movs r0, #0x3f
	ldrb r1, [r2, #0x15]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x21
	rsbs r1, r1, #0
	ands r0, r1
	strb r0, [r2, #0x15]
	pop {r0}
	bx r0
	.align 2, 0
_080AD810: .4byte 0x08DAEF20
_080AD814: .4byte gDispIo

	thumb_func_start sub_080AD818
sub_080AD818: @ 0x080AD818
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _080AD8D8 @ =0x0842D800
	movs r1, #0
	movs r2, #0x60
	bl ApplyPaletteExt
	ldr r0, _080AD8DC @ =0x08439BF0
	ldr r1, _080AD8E0 @ =0x06001000
	bl sub_08013688
	ldr r0, _080AD8E4 @ =gBg0Tm
	ldr r1, _080AD8E8 @ =0x0842D860
	movs r2, #0x80
	bl TmApplyTsa_thm
	movs r0, #1
	bl EnableBgSync
	ldr r0, _080AD8EC @ =0x08432594
	movs r1, #0x88
	lsls r1, r1, #2
	movs r2, #0x80
	lsls r2, r2, #1
	bl ApplyPaletteExt
	ldr r0, _080AD8F0 @ =0x0842FF00
	ldr r1, _080AD8F4 @ =0x06010800
	bl sub_08013688
	ldr r0, _080AD8F8 @ =0x0843165C
	ldr r1, _080AD8FC @ =0x06013800
	bl sub_08013688
	ldr r0, _080AD900 @ =sub_080AD778
	bl SetOnHBlankA
	ldr r4, _080AD904 @ =0x0842DD14
	movs r0, #2
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl sub_08013688
	ldr r0, _080AD908 @ =gBg3Tm
	ldr r1, _080AD90C @ =0x0842FD94
	movs r2, #0
	movs r3, #5
	bl sub_08001F14
	movs r0, #8
	bl EnableBgSync
	ldr r4, _080AD910 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r4, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r4, #1]
	adds r0, r5, #0
	bl sub_080A69A0
	str r0, [r5, #0x54]
	movs r0, #3
	ldrb r2, [r4, #0xc]
	orrs r0, r2
	strb r0, [r4, #0xc]
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r4, #0x10]
	ands r0, r2
	strb r0, [r4, #0x10]
	adds r0, r1, #0
	ldrb r2, [r4, #0x14]
	ands r0, r2
	movs r2, #2
	orrs r0, r2
	strb r0, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	ands r1, r0
	orrs r1, r2
	strb r1, [r4, #0x18]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AD8D8: .4byte 0x0842D800
_080AD8DC: .4byte 0x08439BF0
_080AD8E0: .4byte 0x06001000
_080AD8E4: .4byte gBg0Tm
_080AD8E8: .4byte 0x0842D860
_080AD8EC: .4byte 0x08432594
_080AD8F0: .4byte 0x0842FF00
_080AD8F4: .4byte 0x06010800
_080AD8F8: .4byte 0x0843165C
_080AD8FC: .4byte 0x06013800
_080AD900: .4byte sub_080AD778
_080AD904: .4byte 0x0842DD14
_080AD908: .4byte gBg3Tm
_080AD90C: .4byte 0x0842FD94
_080AD910: .4byte gDispIo

	thumb_func_start sub_080AD914
sub_080AD914: @ 0x080AD914
	push {lr}
	ldr r0, [r0, #0x54]
	bl Proc_End
	pop {r0}
	bx r0

	thumb_func_start sub_080AD920
sub_080AD920: @ 0x080AD920
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, [r4, #0x58]
	cmp r0, #0
	blt _080AD958
	ldr r3, _080AD960 @ =0x08DAD8A8
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #0x38
	movs r2, #8
	bl sub_080068C4
	ldr r1, _080AD964 @ =0x08DADD34
	ldr r0, [r4, #0x58]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r3, [r0]
	movs r0, #0xc0
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #0x40
	movs r2, #0x10
	bl sub_080068C4
_080AD958:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AD960: .4byte 0x08DAD8A8
_080AD964: .4byte 0x08DADD34

	thumb_func_start sub_080AD968
sub_080AD968: @ 0x080AD968
	push {lr}
	adds r1, r0, #0
	ldr r0, _080AD978 @ =0x08DAEF38
	bl Proc_Start
	pop {r0}
	bx r0
	.align 2, 0
_080AD978: .4byte 0x08DAEF38

	thumb_func_start sub_080AD97C
sub_080AD97C: @ 0x080AD97C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AD990 @ =0x08DAEF38
	bl Proc_Find
	str r4, [r0, #0x58]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AD990: .4byte 0x08DAEF38

	thumb_func_start sub_080AD994
sub_080AD994: @ 0x080AD994
	push {lr}
	sub sp, #4
	ldr r0, _080AD9C8 @ =0x08DADD84
	ldr r3, [r0]
	movs r0, #0x80
	lsls r0, r0, #8
	str r0, [sp]
	movs r0, #4
	movs r1, #0xc
	movs r2, #8
	bl sub_080068C4
	ldr r0, _080AD9CC @ =0x08DADD78
	ldr r3, [r0]
	movs r0, #0x90
	lsls r0, r0, #8
	str r0, [sp]
	movs r0, #4
	movs r1, #0x18
	movs r2, #0x10
	bl sub_080068C4
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_080AD9C8: .4byte 0x08DADD84
_080AD9CC: .4byte 0x08DADD78

	thumb_func_start sub_080AD9D0
sub_080AD9D0: @ 0x080AD9D0
	push {r4, r5, lr}
	ldr r5, _080ADA38 @ =gPlaySt
	movs r2, #0x40
	adds r0, r2, #0
	ldrb r1, [r5, #0x14]
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	rsbs r0, r0, #0
	asrs r4, r0, #0x1f
	movs r0, #4
	ands r4, r0
	ldrb r1, [r5, #0x1b]
	cmp r1, #1
	bne _080AD9F2
	movs r0, #0x10
	orrs r4, r0
_080AD9F2:
	cmp r1, #2
	bne _080AD9FA
	movs r0, #0x20
	orrs r4, r0
_080AD9FA:
	cmp r1, #3
	bne _080ADA00
	orrs r4, r2
_080ADA00:
	movs r0, #1
	orrs r0, r4
	movs r1, #0x18
	bl sub_08082DB8
	adds r0, r4, #0
	movs r1, #0x19
	bl sub_08082DB8
	bl EnablePalSync
	movs r0, #0xac
	lsls r0, r0, #4
	bl sub_08082E6C
	movs r4, #0xb4
	lsls r4, r4, #4
	adds r0, r5, #0
	bl sub_08082F30
	adds r1, r0, #0
	adds r0, r4, #0
	bl sub_08082E2C
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080ADA38: .4byte gPlaySt

	thumb_func_start sub_080ADA3C
sub_080ADA3C: @ 0x080ADA3C
	push {r4, r5, lr}
	ldr r0, _080ADA8C @ =0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0xa0
	bls _080ADA4E
	movs r5, #0
_080ADA4E:
	movs r0, #1
	ands r0, r5
	cmp r0, #0
	bne _080ADA86
	cmp r5, #0x63
	bhi _080ADA70
	ldr r1, _080ADA90 @ =0x04000050
	movs r0, #0xc8
	strh r0, [r1]
	ldr r4, _080ADA94 @ =0x04000054
	movs r0, #0x64
	subs r0, r0, r5
	lsls r0, r0, #4
	movs r1, #0x64
	bl __divsi3
	strh r0, [r4]
_080ADA70:
	cmp r5, #0
	bne _080ADA7C
	ldr r0, _080ADA98 @ =0x04000012
	ldr r1, _080ADA9C @ =gDispIo
	ldrh r1, [r1, #0x1e]
	strh r1, [r0]
_080ADA7C:
	cmp r5, #0x78
	bne _080ADA86
	ldr r1, _080ADA98 @ =0x04000012
	movs r0, #4
	strh r0, [r1]
_080ADA86:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080ADA8C: .4byte 0x04000006
_080ADA90: .4byte 0x04000050
_080ADA94: .4byte 0x04000054
_080ADA98: .4byte 0x04000012
_080ADA9C: .4byte gDispIo

	thumb_func_start sub_080ADAA0
sub_080ADAA0: @ 0x080ADAA0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	movs r0, #0
	mov r8, r0
	mov r0, sp
	mov r1, r8
	strh r1, [r0]
	ldr r0, _080ADB0C @ =0x08DAEF68
	ldr r1, [r0]
	ldr r2, _080ADB10 @ =0x01000040
	mov r0, sp
	bl CpuSet
	mov r0, sp
	adds r0, #2
	mov r2, r8
	strh r2, [r0]
	ldr r4, _080ADB14 @ =0x08DAEF60
	ldr r1, [r4]
	ldr r2, _080ADB18 @ =0x01000142
	bl CpuSet
	ldr r0, [r4]
	bl sub_0809FB70
	cmp r0, #0
	beq _080ADBA6
	ldr r0, [r4]
	ldr r1, _080ADB1C @ =0x08DAEF64
	ldr r1, [r1]
	movs r2, #0xa1
	bl CpuFastSet
	movs r3, #0
	movs r7, #0
_080ADAEA:
	ldr r0, _080ADB14 @ =0x08DAEF60
	ldr r1, [r0]
	adds r2, r1, r7
	movs r1, #3
	ldrb r4, [r2]
	ands r1, r4
	cmp r1, #0
	beq _080ADB8E
	ldrb r1, [r2, #1]
	cmp r1, #1
	beq _080ADB26
	cmp r1, #1
	bgt _080ADB20
	cmp r1, #0
	beq _080ADB32
	b _080ADB70
	.align 2, 0
_080ADB0C: .4byte 0x08DAEF68
_080ADB10: .4byte 0x01000040
_080ADB14: .4byte 0x08DAEF60
_080ADB18: .4byte 0x01000142
_080ADB1C: .4byte 0x08DAEF64
_080ADB20:
	cmp r1, #2
	beq _080ADB32
	b _080ADB70
_080ADB26:
	ldr r0, _080ADB5C @ =gPlaySt
	adds r0, #0x2b
	ldrb r0, [r0]
	ands r1, r0
	cmp r1, #0
	beq _080ADB8E
_080ADB32:
	ldr r5, _080ADB60 @ =0x08DAEF68
	ldr r0, [r5]
	mov r1, r8
	lsls r4, r1, #2
	adds r0, r4, r0
	movs r6, #0
	strb r3, [r0]
	str r3, [sp, #4]
	bl sub_080A0F08
	movs r2, #1
	adds r1, r2, #0
	ldr r3, [sp, #4]
	lsls r1, r3
	ands r1, r0
	cmp r1, #0
	beq _080ADB64
	ldr r0, [r5]
	adds r0, r4, r0
	strb r6, [r0, #1]
	b _080ADB6A
	.align 2, 0
_080ADB5C: .4byte gPlaySt
_080ADB60: .4byte 0x08DAEF68
_080ADB64:
	ldr r0, [r5]
	adds r0, r4, r0
	strb r2, [r0, #1]
_080ADB6A:
	movs r2, #1
	add r8, r2
	ldr r0, _080ADBB0 @ =0x08DAEF60
_080ADB70:
	ldr r1, [r0]
	adds r1, r1, r7
	movs r0, #3
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #1
	bne _080ADB8E
	ldr r0, _080ADBB4 @ =0x08DAEF64
	ldr r1, [r0]
	adds r1, r1, r7
	movs r0, #0xfc
	ldrb r4, [r1]
	ands r0, r4
	adds r0, #2
	strb r0, [r1]
_080ADB8E:
	adds r7, #0x14
	adds r3, #1
	cmp r3, #0x1f
	ble _080ADAEA
	ldr r0, _080ADBB8 @ =0x08DAEF6C
	ldr r0, [r0]
	mov r1, r8
	str r1, [r0]
	ldr r0, _080ADBB4 @ =0x08DAEF64
	ldr r0, [r0]
	bl sub_0809FBCC
_080ADBA6:
	mov r2, r8
	cmp r2, #0
	beq _080ADBBC
	movs r0, #1
	b _080ADBBE
	.align 2, 0
_080ADBB0: .4byte 0x08DAEF60
_080ADBB4: .4byte 0x08DAEF64
_080ADBB8: .4byte 0x08DAEF6C
_080ADBBC:
	movs r0, #0
_080ADBBE:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080ADBCC
sub_080ADBCC: @ 0x080ADBCC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	adds r5, r0, #0
	ldr r4, _080ADC70 @ =0x08DAEF70
	movs r1, #6
	bl __modsi3
	lsls r0, r0, #4
	ldr r1, [r4]
	adds r6, r1, r0
	lsls r0, r5, #1
	str r0, [sp, #8]
	movs r0, #0x1f
	ldr r1, [sp, #8]
	ands r1, r0
	str r1, [sp, #8]
	ldr r0, _080ADC74 @ =0x08DAEF68
	ldr r1, [r0]
	lsls r0, r5, #2
	adds r0, r0, r1
	ldrb r2, [r0, #1]
	str r2, [sp, #0xc]
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	str r0, [sp, #0x10]
	ldr r3, _080ADC78 @ =0x08DAEF60
	ldr r1, [r3]
	lsls r0, r0, #2
	ldr r2, [sp, #0x10]
	adds r0, r0, r2
	lsls r7, r0, #2
	adds r1, r1, r7
	ldrb r1, [r1, #2]
	mov r8, r1
	movs r3, #0
	mov sb, r3
	ldr r0, [sp, #8]
	lsls r4, r0, #6
	ldr r1, _080ADC7C @ =gBg2Tm
	adds r1, r1, r4
	mov sl, r1
	mov r0, sl
	movs r1, #0x14
	movs r2, #1
	bl TmFillRect_thm
	adds r0, r6, #0
	bl ClearText
	cmp r5, #0x1f
	ble _080ADC3E
	b _080ADD40
_080ADC3E:
	ldr r2, _080ADC78 @ =0x08DAEF60
	ldr r0, [r2]
	adds r0, r0, r7
	movs r2, #3
	ldrb r3, [r0]
	ands r2, r3
	cmp r2, #0
	beq _080ADD40
	cmp r2, #1
	bne _080ADC56
	movs r1, #4
	mov sb, r1
_080ADC56:
	ldr r2, [sp, #0xc]
	cmp r2, #0
	bne _080ADC60
	movs r3, #1
	mov sb, r3
_080ADC60:
	ldrb r0, [r0, #1]
	cmp r0, #0
	blt _080ADD02
	cmp r0, #1
	ble _080ADC80
	cmp r0, #2
	beq _080ADCD4
	b _080ADD02
	.align 2, 0
_080ADC70: .4byte 0x08DAEF70
_080ADC74: .4byte 0x08DAEF68
_080ADC78: .4byte 0x08DAEF60
_080ADC7C: .4byte gBg2Tm
_080ADC80:
	mov r0, r8
	bl GetItemName
	ldr r1, _080ADCD0 @ =gBg2Tm
	adds r1, #4
	adds r1, r4, r1
	movs r2, #0
	str r2, [sp]
	str r0, [sp, #4]
	adds r0, r6, #0
	mov r2, sb
	movs r3, #0
	bl PutDrawText
	ldr r0, _080ADCD0 @ =gBg2Tm
	adds r0, #0x14
	adds r5, r4, r0
	mov r4, sb
	cmp r4, #0
	bne _080ADCAA
	movs r4, #2
_080ADCAA:
	mov r0, r8
	bl GetItemMaxUses
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_08006074
	mov r0, r8
	bl sub_08017808
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	mov r0, sl
	bl PutIcon
	b _080ADD02
	.align 2, 0
_080ADCD0: .4byte gBg2Tm
_080ADCD4:
	mov r0, r8
	bl GetItemName
	ldr r1, _080ADD50 @ =gBg2Tm
	adds r1, #4
	adds r1, r4, r1
	movs r2, #0
	str r2, [sp]
	str r0, [sp, #4]
	adds r0, r6, #0
	mov r2, sb
	movs r3, #0
	bl PutDrawText
	mov r0, r8
	bl sub_08017808
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	mov r0, sl
	bl PutIcon
_080ADD02:
	adds r6, #8
	adds r0, r6, #0
	bl ClearText
	ldr r0, [sp, #8]
	lsls r1, r0, #6
	ldr r0, _080ADD54 @ =0x02023C78
	adds r5, r1, r0
	mov r2, sb
	cmp r2, #0
	bne _080ADD1A
	movs r2, #3
_080ADD1A:
	movs r0, #0
	str r0, [sp]
	ldr r0, _080ADD58 @ =0x08DAEF60
	ldr r3, [sp, #0x10]
	lsls r1, r3, #2
	adds r1, r1, r3
	lsls r1, r1, #2
	ldr r0, [r0]
	adds r0, r0, r1
	adds r0, #3
	str r0, [sp, #4]
	adds r0, r6, #0
	adds r1, r5, #0
	movs r3, #0
	bl PutDrawText
	movs r0, #4
	bl EnableBgSync
_080ADD40:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080ADD50: .4byte gBg2Tm
_080ADD54: .4byte 0x02023C78
_080ADD58: .4byte 0x08DAEF60

	thumb_func_start sub_080ADD5C
sub_080ADD5C: @ 0x080ADD5C
	push {r4, r5, lr}
	ldr r1, _080ADD84 @ =0x08DAEF68
	lsls r0, r0, #2
	ldr r4, [r1]
	adds r4, r4, r0
	movs r5, #0
	ldrsb r5, [r4, r5]
	bl sub_080A0F08
	adds r1, r0, #0
	movs r0, #1
	lsls r0, r5
	orrs r0, r1
	bl sub_080A0F14
	movs r0, #0
	strb r0, [r4, #1]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080ADD84: .4byte 0x08DAEF68

	thumb_func_start sub_080ADD88
sub_080ADD88: @ 0x080ADD88
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	movs r4, #0
	movs r7, #0
	ldr r0, _080ADDEC @ =gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #2
	bne _080ADD9E
	movs r7, #1
_080ADD9E:
	cmp r0, #3
	bne _080ADDA4
	movs r7, #2
_080ADDA4:
	bl sub_08025184
	movs r5, #1
	adds r6, #0x2b
	mov r8, r6
	ldr r6, _080ADDF0 @ =0x08DAEF74
_080ADDB0:
	adds r0, r5, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _080ADE12
	ldr r3, [r2]
	cmp r3, #0
	beq _080ADE12
	ldr r0, [r2, #0xc]
	ldr r1, _080ADDF4 @ =0x00010004
	ands r0, r1
	cmp r0, #0
	bne _080ADE12
	cmp r7, #0
	beq _080ADDF8
	ldrb r0, [r3, #4]
	cmp r0, r7
	bne _080ADDF8
	ldr r0, [r6]
	lsls r1, r4, #3
	adds r1, r1, r0
	str r2, [r1, #4]
	adds r4, #1
	adds r0, r2, #0
	bl GetUnitSMSId
	bl sub_08025278
	b _080ADE12
	.align 2, 0
_080ADDEC: .4byte gPlaySt
_080ADDF0: .4byte 0x08DAEF74
_080ADDF4: .4byte 0x00010004
_080ADDF8:
	ldrb r3, [r3, #4]
	cmp r3, #0x28
	bne _080ADE12
	ldr r0, [r6]
	lsls r1, r4, #3
	adds r1, r1, r0
	str r2, [r1, #4]
	adds r4, #1
	adds r0, r2, #0
	bl GetUnitSMSId
	bl sub_08025278
_080ADE12:
	adds r5, #1
	cmp r5, #0x3f
	ble _080ADDB0
	mov r0, r8
	strb r4, [r0]
	bl ApplyUnitSpritePalettes
	bl sub_08025A0C
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080ADE30
sub_080ADE30: @ 0x080ADE30
	push {r4, lr}
	sub sp, #4
	movs r0, #0
	str r0, [sp]
	movs r0, #3
	movs r1, #6
	movs r2, #0x18
	movs r3, #0xc
	bl sub_0804A4CC
	movs r0, #1
	str r0, [sp]
	movs r0, #0x12
	movs r1, #0x11
	movs r2, #0xa
	movs r3, #3
	bl sub_0804A4CC
	ldr r4, _080ADE80 @ =0x02023112
	bl GetGold
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	bl sub_08006068
	adds r4, #2
	adds r0, r4, #0
	movs r1, #3
	movs r2, #0x1e
	bl sub_08005FEC
	movs r0, #3
	bl EnableBgSync
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080ADE80: .4byte 0x02023112

	thumb_func_start sub_080ADE84
sub_080ADE84: @ 0x080ADE84
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0
	bl InitBgs
	ldr r0, _080AE0A4 @ =0x0842D800
	movs r1, #0xc0
	lsls r1, r1, #1
	movs r2, #0x60
	bl ApplyPaletteExt
	ldr r0, _080AE0A8 @ =0x08439BF0
	ldr r1, _080AE0AC @ =0x06008000
	bl sub_08013688
	ldr r0, _080AE0B0 @ =gBg3Tm
	ldr r1, _080AE0B4 @ =0x0842D860
	movs r2, #0xc0
	lsls r2, r2, #8
	bl TmApplyTsa_thm
	movs r0, #8
	bl EnableBgSync
	bl sub_0804A9F8
	bl ResetText
	bl InitIcons
	movs r0, #4
	bl ApplyIconPalettes
	bl sub_08015A0C
	bl sub_080AD9D0
	bl sub_080ADE30
	ldr r0, _080AE0B8 @ =gDispIo
	mov ip, r0
	movs r0, #0x21
	rsbs r0, r0, #0
	mov r1, ip
	ldrb r1, [r1, #1]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r2, ip
	strb r0, [r2, #1]
	mov r5, ip
	adds r5, #0x35
	movs r1, #1
	ldrb r0, [r5]
	orrs r0, r1
	movs r4, #2
	orrs r0, r4
	movs r2, #4
	orrs r0, r2
	movs r3, #8
	orrs r0, r3
	movs r2, #0x10
	orrs r0, r2
	strb r0, [r5]
	adds r5, #1
	ldrb r0, [r5]
	orrs r1, r0
	orrs r1, r4
	movs r0, #5
	rsbs r0, r0, #0
	ands r1, r0
	orrs r1, r3
	orrs r1, r2
	strb r1, [r5]
	mov r1, ip
	adds r1, #0x2f
	movs r0, #0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x38
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x88
	strb r0, [r1]
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	mov r2, ip
	ldrb r2, [r2, #0xc]
	ands r0, r2
	mov r3, ip
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	orrs r0, r4
	strb r0, [r3, #0x10]
	ldrb r3, [r3, #0x14]
	ands r1, r3
	mov r0, ip
	strb r1, [r0, #0x14]
	movs r0, #3
	mov r1, ip
	ldrb r1, [r1, #0x18]
	orrs r0, r1
	mov r2, ip
	strb r0, [r2, #0x18]
	bl sub_080ADAA0
	movs r5, #0
	ldr r0, _080AE0BC @ =0x08DAEF6C
	ldr r0, [r0]
	ldr r0, [r0]
	cmp r5, r0
	bge _080ADFAE
	ldr r7, _080AE0C0 @ =0x08DAEF70
_080ADF80:
	lsls r0, r5, #4
	ldr r4, [r7]
	adds r4, r4, r0
	adds r0, r4, #0
	movs r1, #7
	bl InitText
	adds r4, #8
	adds r0, r4, #0
	movs r1, #0xa
	bl InitText
	adds r0, r5, #0
	bl sub_080ADBCC
	adds r5, #1
	cmp r5, #5
	bgt _080ADFAE
	ldr r0, _080AE0BC @ =0x08DAEF6C
	ldr r0, [r0]
	ldr r0, [r0]
	cmp r5, r0
	blt _080ADF80
_080ADFAE:
	adds r3, r6, #0
	adds r3, #0x29
	str r3, [sp]
	movs r0, #0x2e
	adds r0, r0, r6
	mov sl, r0
	movs r1, #0x2a
	adds r1, r1, r6
	mov r8, r1
	movs r2, #0x2b
	adds r2, r2, r6
	mov sb, r2
	ldr r7, _080AE0C0 @ =0x08DAEF70
	movs r4, #0x60
	movs r5, #1
_080ADFCC:
	ldr r0, [r7]
	adds r0, r0, r4
	movs r1, #6
	bl InitText
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge _080ADFCC
	movs r5, #2
	ldr r0, _080AE0C0 @ =0x08DAEF70
	ldr r0, [r0]
	adds r0, #0x70
	movs r1, #0xf
	bl InitText
	ldr r0, _080AE0C4 @ =sub_080AD994
	adds r1, r6, #0
	bl sub_080AA20C
	movs r0, #2
	bl EnableBgSync
	ldr r0, _080AE0C8 @ =sub_080ADA3C
	bl SetOnHBlankA
	movs r0, #0
	ldr r3, [sp]
	strb r0, [r3]
	movs r1, #0
	strh r0, [r6, #0x2c]
	mov r2, sl
	strb r1, [r2]
	mov r3, r8
	strb r1, [r3]
	mov r1, sb
	strb r5, [r1]
	str r0, [r6, #0x34]
	ldr r1, _080AE0CC @ =0x0000FFD8
	ldrh r2, [r6, #0x2c]
	subs r2, #0x38
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl SetBgOffset
	adds r0, r6, #0
	bl sub_080AA390
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_080AA3B4
	ldr r2, [sp]
	ldrb r2, [r2]
	lsls r1, r2, #4
	movs r3, #0x2c
	ldrsh r0, [r6, r3]
	subs r0, #0x38
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x28
	movs r2, #0x13
	bl sub_080AA3F8
	adds r0, r6, #0
	bl sub_08005E88
	adds r0, r6, #0
	bl sub_08090DD0
	movs r0, #0xc8
	movs r1, #0x44
	bl sub_08090DE4
	movs r0, #0x80
	lsls r0, r0, #2
	movs r1, #2
	bl sub_08090E38
	ldrh r1, [r6, #0x2c]
	ldr r0, _080AE0BC @ =0x08DAEF6C
	ldr r0, [r0]
	ldrh r2, [r0]
	movs r0, #7
	movs r3, #5
	bl sub_08090E04
	adds r0, r6, #0
	bl sub_080A98C8
	adds r0, r6, #0
	bl sub_080ADD88
	ldr r0, _080AE0D0 @ =0x06013800
	movs r1, #5
	bl sub_08082F74
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AE0A4: .4byte 0x0842D800
_080AE0A8: .4byte 0x08439BF0
_080AE0AC: .4byte 0x06008000
_080AE0B0: .4byte gBg3Tm
_080AE0B4: .4byte 0x0842D860
_080AE0B8: .4byte gDispIo
_080AE0BC: .4byte 0x08DAEF6C
_080AE0C0: .4byte 0x08DAEF70
_080AE0C4: .4byte sub_080AD994
_080AE0C8: .4byte sub_080ADA3C
_080AE0CC: .4byte 0x0000FFD8
_080AE0D0: .4byte 0x06013800

	thumb_func_start sub_080AE0D4
sub_080AE0D4: @ 0x080AE0D4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r6, r5, #0
	adds r6, #0x29
	ldrb r4, [r6]
	movs r0, #0x2e
	adds r0, r0, r5
	mov r8, r0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080AE0F4
	b _080AE2DE
_080AE0F4:
	ldr r0, _080AE130 @ =gpKeySt
	ldr r2, [r0]
	ldrh r1, [r2, #8]
	movs r7, #1
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _080AE1E8
	ldr r0, _080AE134 @ =0x08DAEF68
	ldr r1, [r0]
	lsls r0, r4, #2
	adds r0, r0, r1
	movs r4, #0
	ldrsb r4, [r0, r4]
	bl sub_080A0F08
	adds r1, r7, #0
	lsls r1, r4
	ands r1, r0
	cmp r1, #0
	beq _080AE13C
	movs r1, #1
	rsbs r1, r1, #0
	ldr r2, _080AE138 @ =0x0000072F
	adds r0, r1, #0
	adds r3, r5, #0
	bl sub_080ABB94
	b _080AE32A
	.align 2, 0
_080AE130: .4byte gpKeySt
_080AE134: .4byte 0x08DAEF68
_080AE138: .4byte 0x0000072F
_080AE13C:
	adds r0, r5, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, #0
	beq _080AE1CC
	ldr r7, _080AE164 @ =0x08DAEF60
	ldr r1, [r7]
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r4, r0, #2
	adds r1, r1, r4
	ldrb r0, [r1, #1]
	cmp r0, #0
	bge _080AE15A
	b _080AE32A
_080AE15A:
	cmp r0, #1
	ble _080AE168
	cmp r0, #2
	beq _080AE190
	b _080AE32A
	.align 2, 0
_080AE164: .4byte 0x08DAEF60
_080AE168:
	adds r0, r5, #0
	movs r1, #1
	bl Proc_Goto
	ldr r0, _080AE188 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _080AE17E
	b _080AE32A
_080AE17E:
	ldr r0, _080AE18C @ =0x0000038A
	bl m4aSongNumStart
	b _080AE32A
	.align 2, 0
_080AE188: .4byte gPlaySt
_080AE18C: .4byte 0x0000038A
_080AE190:
	ldrb r1, [r1, #2]
	cmp r1, #0x97
	bne _080AE19C
	ldr r0, _080AE1C4 @ =0x00000BB8
	bl AddGold
_080AE19C:
	ldr r0, [r7]
	adds r0, r0, r4
	ldrb r0, [r0, #2]
	cmp r0, #0x98
	bne _080AE1AC
	ldr r0, _080AE1C8 @ =0x00001388
	bl AddGold
_080AE1AC:
	ldrb r0, [r6]
	bl sub_080ADD5C
	ldrb r0, [r6]
	bl sub_080ADBCC
	adds r0, r5, #0
	movs r1, #2
	bl Proc_Goto
	b _080AE32A
	.align 2, 0
_080AE1C4: .4byte 0x00000BB8
_080AE1C8: .4byte 0x00001388
_080AE1CC:
	ldr r0, _080AE1E4 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _080AE1DA
	b _080AE32A
_080AE1DA:
	movs r0, #0xe3
	lsls r0, r0, #2
	bl m4aSongNumStart
	b _080AE32A
	.align 2, 0
_080AE1E4: .4byte gPlaySt
_080AE1E8:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080AE214
	adds r0, r5, #0
	bl Proc_Break
	ldr r0, _080AE20C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _080AE204
	b _080AE32A
_080AE204:
	ldr r0, _080AE210 @ =0x0000038B
	bl m4aSongNumStart
	b _080AE32A
	.align 2, 0
_080AE20C: .4byte gPlaySt
_080AE210: .4byte 0x0000038B
_080AE214:
	ldrh r1, [r2, #6]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080AE220
	subs r4, #1
_080AE220:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _080AE22A
	adds r4, #1
_080AE22A:
	ldrb r0, [r6]
	cmp r0, r4
	beq _080AE2D0
	cmp r4, #0
	blt _080AE32A
	ldr r0, _080AE274 @ =0x08DAEF6C
	ldr r0, [r0]
	ldr r0, [r0]
	cmp r4, r0
	bge _080AE32A
	ldr r0, _080AE278 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080AE250
	ldr r0, _080AE27C @ =0x00000386
	bl m4aSongNumStart
_080AE250:
	strb r4, [r6]
	ldrb r2, [r6]
	lsls r1, r2, #4
	movs r3, #0x2c
	ldrsh r0, [r5, r3]
	cmp r1, r0
	bne _080AE280
	cmp r2, #0
	beq _080AE280
	movs r0, #0xff
	mov r4, r8
	strb r0, [r4]
	ldrb r0, [r6]
	subs r0, #1
	bl sub_080ADBCC
	b _080AE2D0
	.align 2, 0
_080AE274: .4byte 0x08DAEF6C
_080AE278: .4byte gPlaySt
_080AE27C: .4byte 0x00000386
_080AE280:
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r3, [r0]
	lsls r1, r3, #4
	movs r4, #0x2c
	ldrsh r2, [r5, r4]
	subs r1, r1, r2
	adds r2, r0, #0
	cmp r1, #0x40
	bne _080AE2B8
	ldr r0, _080AE2B4 @ =0x08DAEF6C
	ldr r0, [r0]
	ldr r0, [r0]
	subs r0, #1
	cmp r3, r0
	bge _080AE2B8
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #1
	strb r0, [r1]
	ldrb r0, [r2]
	adds r0, #1
	bl sub_080ADBCC
	b _080AE2D0
	.align 2, 0
_080AE2B4: .4byte 0x08DAEF6C
_080AE2B8:
	ldrb r2, [r2]
	lsls r1, r2, #4
	movs r2, #0x2c
	ldrsh r0, [r5, r2]
	subs r0, #0x38
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x28
	movs r2, #0x13
	bl sub_080AA3F8
_080AE2D0:
	adds r0, r5, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080AE32A
_080AE2DE:
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bge _080AE2F0
	ldrh r0, [r5, #0x2c]
	subs r0, #4
	strh r0, [r5, #0x2c]
_080AE2F0:
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	ble _080AE2FE
	ldrh r0, [r5, #0x2c]
	adds r0, #4
	strh r0, [r5, #0x2c]
_080AE2FE:
	movs r0, #0xf
	ldrh r3, [r5, #0x2c]
	ands r0, r3
	cmp r0, #0
	bne _080AE30A
	strb r0, [r1]
_080AE30A:
	ldr r1, _080AE334 @ =0x0000FFD8
	ldrh r2, [r5, #0x2c]
	subs r2, #0x38
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl SetBgOffset
	ldrh r1, [r5, #0x2c]
	ldr r0, _080AE338 @ =0x08DAEF6C
	ldr r0, [r0]
	ldrh r2, [r0]
	movs r0, #7
	movs r3, #5
	bl sub_08090E04
_080AE32A:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AE334: .4byte 0x0000FFD8
_080AE338: .4byte 0x08DAEF6C

	thumb_func_start sub_080AE33C
sub_080AE33C: @ 0x080AE33C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r5, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r5, r0
	bge _080AE39E
	movs r4, #0x30
_080AE34E:
	ldr r0, _080AE378 @ =0x08DAEF74
	ldr r1, [r0]
	lsls r0, r5, #3
	adds r0, r0, r1
	ldr r1, [r0, #4]
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080AE37C
	ldr r0, [r1, #4]
	ldrb r0, [r0, #4]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x70
	adds r2, r4, #0
	movs r3, #0xc4
	lsls r3, r3, #8
	bl sub_08026628
	b _080AE390
	.align 2, 0
_080AE378: .4byte 0x08DAEF74
_080AE37C:
	ldr r0, [r1, #4]
	ldrb r0, [r0, #4]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x70
	adds r2, r4, #0
	movs r3, #0xf4
	lsls r3, r3, #8
	bl sub_08026628
_080AE390:
	adds r4, #0x10
	adds r5, #1
	adds r0, r6, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r5, r0
	blt _080AE34E
_080AE39E:
	bl sub_080259A4
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080AE3AC
sub_080AE3AC: @ 0x080AE3AC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x34]
	cmp r0, #0
	beq _080AE3BE
	bl Proc_End
	movs r0, #0
	str r0, [r4, #0x34]
_080AE3BE:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080AE3C4
sub_080AE3C4: @ 0x080AE3C4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	str r0, [sp, #4]
	ldr r0, _080AE4D0 @ =0x08DAEF70
	ldr r0, [r0]
	adds r6, r0, #0
	adds r6, #0x60
	ldr r0, [sp, #4]
	adds r0, #0x2b
	ldrb r5, [r0]
	lsls r4, r5, #1
	adds r3, r4, #2
	movs r0, #1
	str r0, [sp]
	movs r0, #0xd
	movs r1, #5
	movs r2, #0xc
	bl sub_0804A4CC
	ldr r3, _080AE4D4 @ =gDispIo
	movs r0, #0x20
	ldrb r1, [r3, #1]
	orrs r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r3, #1]
	adds r2, r3, #0
	adds r2, #0x34
	movs r0, #1
	ldrb r1, [r2]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x2d
	movs r0, #0x68
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x28
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xc8
	strb r0, [r1]
	adds r4, #7
	lsls r4, r4, #3
	adds r0, r3, #0
	adds r0, #0x30
	strb r4, [r0]
	ldr r0, [sp, #4]
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r2, r0, #4
	ldr r3, [sp, #4]
	movs r1, #0x2c
	ldrsh r0, [r3, r1]
	subs r0, #0x38
	subs r2, r2, r0
	movs r0, #0
	movs r1, #0x28
	movs r3, #1
	bl sub_080A98DC
	ldr r0, [sp, #4]
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r1, r0, #4
	adds r1, #0x30
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x70
	movs r2, #9
	bl sub_080AA3F8
	cmp r5, #0
	beq _080AE55E
	ldr r0, _080AE4D8 @ =0x02022C80
	movs r3, #0xc6
	lsls r3, r3, #1
	adds r3, r0, r3
	str r3, [sp, #8]
	movs r1, #0xc0
	lsls r1, r1, #1
	adds r1, r1, r0
	mov sl, r1
	movs r3, #0
	mov r8, r3
	mov sb, r5
_080AE48E:
	movs r7, #0
	ldr r1, _080AE4DC @ =0x08DAEF74
	ldr r0, [r1]
	add r0, r8
	ldr r4, [r0, #4]
	adds r0, r6, #0
	bl ClearText
	adds r0, r6, #0
	movs r1, #0
	bl Text_SetCursor
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	cmp r0, #0x28
	bne _080AE4E4
	bl sub_0802EC3C
	adds r5, r0, #0
	cmp r5, #0x64
	bne _080AE4BA
	movs r7, #1
_080AE4BA:
	adds r0, r6, #0
	movs r1, #0
	adds r2, r7, #0
	bl Text_SetParams
	adds r0, r6, #0
	ldr r1, _080AE4E0 @ =0x08439BE8
	bl Text_DrawString
	b _080AE50C
	.align 2, 0
_080AE4D0: .4byte 0x08DAEF70
_080AE4D4: .4byte gDispIo
_080AE4D8: .4byte 0x02022C80
_080AE4DC: .4byte 0x08DAEF74
_080AE4E0: .4byte 0x08439BE8
_080AE4E4:
	adds r0, r4, #0
	bl GetUnitItemCount
	adds r5, r0, #0
	cmp r5, #5
	bne _080AE4F2
	movs r7, #1
_080AE4F2:
	adds r0, r6, #0
	movs r1, #0
	adds r2, r7, #0
	bl Text_SetParams
	ldr r0, [r4]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r1, r0, #0
	adds r0, r6, #0
	bl Text_DrawString
_080AE50C:
	cmp r7, #0
	bne _080AE520
	ldr r3, _080AE51C @ =0x08DAEF74
	ldr r0, [r3]
	add r0, r8
	movs r1, #1
	b _080AE528
	.align 2, 0
_080AE51C: .4byte 0x08DAEF74
_080AE520:
	ldr r1, _080AE57C @ =0x08DAEF74
	ldr r0, [r1]
	add r0, r8
	movs r1, #0
_080AE528:
	strb r1, [r0]
	adds r0, r6, #0
	mov r1, sl
	bl PutText
	movs r1, #1
	cmp r7, #0
	bne _080AE53A
	movs r1, #2
_080AE53A:
	ldr r0, [sp, #8]
	adds r2, r5, #0
	bl sub_08006068
	adds r6, #8
	ldr r3, [sp, #8]
	adds r3, #0x80
	str r3, [sp, #8]
	movs r0, #0x80
	add sl, r0
	movs r1, #8
	add r8, r1
	movs r3, #1
	rsbs r3, r3, #0
	add sb, r3
	mov r0, sb
	cmp r0, #0
	bne _080AE48E
_080AE55E:
	ldr r0, _080AE580 @ =sub_080AE33C
	ldr r1, [sp, #4]
	bl sub_080AA20C
	ldr r1, [sp, #4]
	str r0, [r1, #0x34]
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AE57C: .4byte 0x08DAEF74
_080AE580: .4byte sub_080AE33C

	thumb_func_start sub_080AE584
sub_080AE584: @ 0x080AE584
	push {r4, r5, r6, r7, lr}
	adds r2, r0, #0
	adds r2, #0x2a
	ldr r1, _080AE5C4 @ =0x08DAEF74
	ldr r1, [r1]
	ldrb r2, [r2]
	lsls r3, r2, #3
	adds r3, r3, r1
	ldr r7, [r3, #4]
	ldr r2, _080AE5C8 @ =0x08DAEF68
	adds r6, r0, #0
	adds r6, #0x29
	ldrb r4, [r6]
	lsls r1, r4, #2
	ldr r0, [r2]
	adds r0, r0, r1
	movs r2, #0
	ldrsb r2, [r0, r2]
	ldr r0, _080AE5CC @ =0x08DAEF60
	ldr r1, [r0]
	lsls r0, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #2
	adds r1, r1, r0
	ldrb r5, [r1, #2]
	movs r0, #0
	ldrsb r0, [r3, r0]
	cmp r0, #0
	bne _080AE5D0
	movs r0, #0
	b _080AE600
	.align 2, 0
_080AE5C4: .4byte 0x08DAEF74
_080AE5C8: .4byte 0x08DAEF68
_080AE5CC: .4byte 0x08DAEF60
_080AE5D0:
	adds r0, r4, #0
	bl sub_080ADD5C
	ldrb r0, [r6]
	bl sub_080ADBCC
	ldr r0, [r7]
	ldrb r0, [r0, #4]
	cmp r0, #0x28
	bne _080AE5F0
	adds r0, r5, #0
	bl MakeNewItem
	bl AddItemToConvoy
	b _080AE5FE
_080AE5F0:
	adds r0, r5, #0
	bl MakeNewItem
	adds r1, r0, #0
	adds r0, r7, #0
	bl UnitAddItem
_080AE5FE:
	movs r0, #1
_080AE600:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080AE608
sub_080AE608: @ 0x080AE608
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r5, #0
	adds r6, #0x2a
	ldrb r4, [r6]
	ldr r0, _080AE638 @ =gpKeySt
	ldr r2, [r0]
	ldrh r1, [r2, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080AE64E
	adds r0, r5, #0
	bl sub_080AE584
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080AE63C
	adds r0, r5, #0
	movs r1, #2
	bl Proc_Goto
	b _080AE6C6
	.align 2, 0
_080AE638: .4byte gpKeySt
_080AE63C:
	movs r1, #1
	rsbs r1, r1, #0
	movs r2, #0xe6
	lsls r2, r2, #3
	adds r0, r1, #0
	adds r3, r5, #0
	bl sub_080ABB94
	b _080AE6C6
_080AE64E:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080AE678
	adds r0, r5, #0
	bl Proc_Break
	ldr r0, _080AE670 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080AE6C6
	ldr r0, _080AE674 @ =0x0000038B
	bl m4aSongNumStart
	b _080AE6C6
	.align 2, 0
_080AE670: .4byte gPlaySt
_080AE674: .4byte 0x0000038B
_080AE678:
	ldrh r1, [r2, #6]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080AE684
	subs r4, #1
_080AE684:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _080AE68E
	adds r4, #1
_080AE68E:
	ldrb r0, [r6]
	cmp r4, r0
	beq _080AE6C6
	cmp r4, #0
	blt _080AE6C6
	adds r0, r5, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r4, r0
	bge _080AE6C6
	ldr r0, _080AE6CC @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080AE6B4
	ldr r0, _080AE6D0 @ =0x00000386
	bl m4aSongNumStart
_080AE6B4:
	strb r4, [r6]
	lsls r1, r4, #4
	adds r1, #0x30
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x70
	movs r2, #9
	bl sub_080AA3F8
_080AE6C6:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AE6CC: .4byte gPlaySt
_080AE6D0: .4byte 0x00000386

	thumb_func_start sub_080AE6D4
sub_080AE6D4: @ 0x080AE6D4
	push {r4, lr}
	adds r4, r0, #0
	bl sub_080AE3AC
	ldr r2, _080AE734 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	ldr r0, _080AE738 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _080AE73C @ =gBg0Tm
	movs r1, #0
	bl TmFill
	bl sub_080ADE30
	movs r0, #3
	bl EnableBgSync
	movs r0, #0
	bl sub_080A998C
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r1, r0, #4
	movs r2, #0x2c
	ldrsh r0, [r4, r2]
	subs r0, #0x38
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x28
	movs r2, #0x13
	bl sub_080AA3F8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AE734: .4byte gDispIo
_080AE738: .4byte gBg1Tm
_080AE73C: .4byte gBg0Tm

	thumb_func_start sub_080AE740
sub_080AE740: @ 0x080AE740
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x34
	adds r4, r0, #0
	adds r6, r4, #0
	adds r6, #0x29
	ldr r0, _080AE880 @ =0x08DAEF68
	ldr r1, [r0]
	ldrb r2, [r6]
	lsls r0, r2, #2
	adds r0, r0, r1
	movs r2, #0
	ldrsb r2, [r0, r2]
	ldr r0, _080AE884 @ =0x08DAEF60
	ldr r1, [r0]
	lsls r0, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #2
	str r0, [sp, #0x30]
	adds r1, r1, r0
	ldrb r1, [r1, #2]
	str r1, [sp, #0x2c]
	ldr r0, _080AE888 @ =0x08DAEF70
	ldr r0, [r0]
	adds r5, r0, #0
	adds r5, #0x70
	ldr r2, _080AE88C @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	ldr r2, _080AE890 @ =gBg0Tm
	mov sl, r2
	mov r0, sl
	movs r1, #0
	bl TmFill
	ldr r0, _080AE894 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	bl sub_080ADE30
	movs r0, #3
	bl EnableBgSync
	adds r0, r4, #0
	bl sub_080AE3AC
	bl sub_080A0F80
	bl WriteGameSave
	movs r0, #0
	str r0, [r4, #0x30]
	bl sub_080A998C
	ldrb r6, [r6]
	lsls r1, r6, #4
	movs r2, #0x2c
	ldrsh r0, [r4, r2]
	subs r0, #0x38
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x28
	movs r2, #0x13
	bl sub_080AA3F8
	adds r0, r5, #0
	bl ClearText
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0
	bl Text_SetParams
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetCursor
	ldr r0, [sp, #0x2c]
	bl GetItemName
	adds r7, r0, #0
	ldr r0, _080AE898 @ =0x000010A7
	add r1, sp, #0xc
	bl sub_08013354
	adds r6, r0, #0
	adds r0, r7, #0
	bl GetStringTextLen
	adds r4, r0, #0
	adds r0, r6, #0
	bl GetStringTextLen
	adds r4, r4, r0
	adds r0, r4, #7
	cmp r0, #0
	bge _080AE81C
	adds r0, #7
_080AE81C:
	asrs r0, r0, #3
	adds r0, #4
	mov sb, r0
	lsrs r0, r0, #0x1f
	add r0, sb
	asrs r0, r0, #1
	movs r1, #0xf
	subs r1, r1, r0
	mov r8, r1
	adds r0, r5, #0
	adds r1, r7, #0
	bl Text_DrawString
	adds r0, r5, #0
	adds r1, r6, #0
	bl Text_DrawString
	mov r0, r8
	lsls r4, r0, #1
	ldr r1, _080AE89C @ =0x00000286
	add r1, sl
	adds r1, r4, r1
	adds r0, r5, #0
	bl PutText
	ldr r0, _080AE8A0 @ =0x00000282
	add r0, sl
	adds r4, r4, r0
	ldr r0, [sp, #0x2c]
	bl sub_08017808
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r4, #0
	bl PutIcon
	ldr r1, _080AE884 @ =0x08DAEF60
	ldr r0, [r1]
	ldr r2, [sp, #0x30]
	adds r0, r0, r2
	ldrb r0, [r0, #1]
	cmp r0, #0
	blt _080AE8D2
	cmp r0, #1
	ble _080AE8A4
	cmp r0, #2
	beq _080AE8C0
	b _080AE8D2
	.align 2, 0
_080AE880: .4byte 0x08DAEF68
_080AE884: .4byte 0x08DAEF60
_080AE888: .4byte 0x08DAEF70
_080AE88C: .4byte gDispIo
_080AE890: .4byte gBg0Tm
_080AE894: .4byte gBg1Tm
_080AE898: .4byte 0x000010A7
_080AE89C: .4byte 0x00000286
_080AE8A0: .4byte 0x00000282
_080AE8A4:
	ldr r0, _080AE8B8 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080AE8D2
	ldr r0, _080AE8BC @ =0x0000037A
	bl m4aSongNumStart
	b _080AE8D2
	.align 2, 0
_080AE8B8: .4byte gPlaySt
_080AE8BC: .4byte 0x0000037A
_080AE8C0:
	ldr r0, _080AE960 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080AE8D2
	movs r0, #0xb9
	bl m4aSongNumStart
_080AE8D2:
	ldr r0, _080AE964 @ =gBg1Tm
	movs r1, #3
	str r1, [sp]
	movs r1, #0
	str r1, [sp, #4]
	movs r1, #1
	str r1, [sp, #8]
	mov r1, r8
	movs r2, #0xa
	mov r3, sb
	bl sub_0804A360
	ldr r0, _080AE968 @ =gDispIo
	mov ip, r0
	movs r0, #0x20
	mov r1, ip
	ldrb r1, [r1, #1]
	orrs r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r2, ip
	strb r0, [r2, #1]
	adds r2, #0x34
	movs r0, #1
	ldrb r1, [r2]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x11
	rsbs r1, r1, #0
	ands r0, r1
	strb r0, [r2]
	mov r2, r8
	lsls r0, r2, #3
	mov r1, ip
	adds r1, #0x2d
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x50
	strb r0, [r1]
	mov r0, r8
	add r0, sb
	lsls r0, r0, #3
	subs r1, #5
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x68
	strb r0, [r1]
	movs r0, #3
	bl EnableBgSync
	ldr r2, _080AE96C @ =0x0000FFFC
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	add sp, #0x34
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AE960: .4byte gPlaySt
_080AE964: .4byte gBg1Tm
_080AE968: .4byte gDispIo
_080AE96C: .4byte 0x0000FFFC

	thumb_func_start sub_080AE970
sub_080AE970: @ 0x080AE970
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0x30]
	adds r0, #1
	str r0, [r2, #0x30]
	cmp r0, #0x1e
	ble _080AE998
	ldr r0, _080AE994 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #3
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080AE998
	adds r0, r2, #0
	bl Proc_Break
	b _080AE9A4
	.align 2, 0
_080AE994: .4byte gpKeySt
_080AE998:
	ldr r0, [r2, #0x30]
	cmp r0, #0x78
	ble _080AE9A4
	adds r0, r2, #0
	bl Proc_Break
_080AE9A4:
	pop {r0}
	bx r0

	thumb_func_start sub_080AE9A8
sub_080AE9A8: @ 0x080AE9A8
	push {lr}
	ldr r0, _080AE9E8 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _080AE9EC @ =gBg1Tm
	movs r1, #0
	bl TmFill
	bl sub_080ADE30
	movs r0, #3
	bl EnableBgSync
	ldr r2, _080AE9F0 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	pop {r0}
	bx r0
	.align 2, 0
_080AE9E8: .4byte gBg0Tm
_080AE9EC: .4byte gBg1Tm
_080AE9F0: .4byte gDispIo

	thumb_func_start sub_080AE9F4
sub_080AE9F4: @ 0x080AE9F4
	push {r4, lr}
	adds r4, r0, #0
	bl sub_08005EAC
	adds r0, r4, #0
	bl sub_080AAC88
	movs r0, #0
	bl SetOnHBlankA
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080AEA10
sub_080AEA10: @ 0x080AEA10
	push {lr}
	adds r1, r0, #0
	ldr r0, _080AEA20 @ =0x08DAEF78
	bl Proc_StartBlocking
	pop {r0}
	bx r0
	.align 2, 0
_080AEA20: .4byte 0x08DAEF78

	thumb_func_start sub_080AEA24
sub_080AEA24: @ 0x080AEA24
	ldr r3, _080AEA44 @ =0x020144F4
	ldr r0, _080AEA48 @ =0x08DAF028
	ldr r0, [r0]
	movs r1, #0x32
	ldrsh r2, [r0, r1]
	ldr r1, _080AEA4C @ =gPlaySt
	movs r0, #0x40
	ldrb r1, [r1, #0x14]
	ands r0, r1
	cmp r0, #0
	beq _080AEA3C
	adds r2, #3
_080AEA3C:
	strh r2, [r3]
	movs r1, #0
	ldrsh r0, [r3, r1]
	bx lr
	.align 2, 0
_080AEA44: .4byte 0x020144F4
_080AEA48: .4byte 0x08DAF028
_080AEA4C: .4byte gPlaySt

	thumb_func_start sub_080AEA50
sub_080AEA50: @ 0x080AEA50
	ldr r0, _080AEA5C @ =0x08DAF028
	ldr r0, [r0]
	ldrh r0, [r0, #0x2a]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bx lr
	.align 2, 0
_080AEA5C: .4byte 0x08DAF028

	thumb_func_start sub_080AEA60
sub_080AEA60: @ 0x080AEA60
	push {lr}
	bl sub_080AEA24
	ldr r1, _080AEA8C @ =0x08DAF054
	lsls r0, r0, #0x10
	asrs r0, r0, #0xd
	adds r1, #4
	adds r0, r0, r1
	ldr r1, _080AEA90 @ =0x08DAF028
	ldr r1, [r1]
	movs r2, #0x2a
	ldrsh r1, [r1, r2]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl sub_080AF278
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0
_080AEA8C: .4byte 0x08DAF054
_080AEA90: .4byte 0x08DAF028

	thumb_func_start sub_080AEA94
sub_080AEA94: @ 0x080AEA94
	push {lr}
	ldr r0, _080AEAA0 @ =0x08DAF0AA
	bl InitBgs
	pop {r0}
	bx r0
	.align 2, 0
_080AEAA0: .4byte 0x08DAF0AA

	thumb_func_start sub_080AEAA4
sub_080AEAA4: @ 0x080AEAA4
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	ldr r4, _080AEB24 @ =gBg3Tm
	cmp r5, #0
	bne _080AEABE
	movs r0, #3
	bl GetBgChrOffset
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r5, r0, r1
_080AEABE:
	cmp r6, #0
	bge _080AEAC4
	movs r6, #0xe
_080AEAC4:
	ldr r0, _080AEB28 @ =0x08439BF0
	adds r1, r5, #0
	bl sub_08013688
	ldr r0, _080AEB2C @ =0x0843F084
	lsls r1, r6, #5
	movs r2, #0x40
	bl ApplyPaletteExt
	movs r0, #3
	bl GetBgChrOffset
	subs r0, r5, r0
	lsls r0, r0, #0xf
	lsrs r0, r0, #0x14
	movs r1, #0xf
	ands r1, r6
	lsls r1, r1, #0xc
	adds r1, r0, r1
	movs r2, #0
	ldr r3, _080AEB30 @ =0x0000027F
_080AEAEE:
	adds r0, r2, r1
	strh r0, [r4]
	adds r4, #2
	adds r2, #1
	cmp r2, r3
	ble _080AEAEE
	ldr r4, _080AEB34 @ =0x02024520
	ldr r3, _080AEB38 @ =0x08D8A220
	movs r5, #0x80
	lsls r5, r5, #5
	adds r1, r5, #0
	movs r2, #0xe0
	lsls r2, r2, #1
_080AEB08:
	ldrh r5, [r4]
	adds r0, r1, r5
	strh r0, [r4]
	adds r4, #2
	subs r2, #1
	cmp r2, #0
	bne _080AEB08
	adds r0, r3, #0
	adds r1, r7, #0
	bl Proc_Start
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AEB24: .4byte gBg3Tm
_080AEB28: .4byte 0x08439BF0
_080AEB2C: .4byte 0x0843F084
_080AEB30: .4byte 0x0000027F
_080AEB34: .4byte 0x02024520
_080AEB38: .4byte 0x08D8A220

	thumb_func_start sub_080AEB3C
sub_080AEB3C: @ 0x080AEB3C
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r5, r0, #0
	lsls r4, r5, #1
	adds r4, r4, r1
	movs r0, #0x1f
	mov r8, r0
	ands r4, r0
	lsls r4, r4, #5
	ldr r6, _080AEBC4 @ =0x08DAF0C4
	bl sub_080AEA24
	ldr r1, _080AEBC8 @ =0x08DAF054
	lsls r0, r0, #0x10
	asrs r0, r0, #0xd
	adds r1, #4
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, r0, r5
	movs r1, #0x2c
	ldrb r0, [r0]
	muls r0, r1, r0
	adds r0, r0, r6
	adds r0, #0x24
	ldrb r1, [r0]
	adds r2, r1, #0
	mov r5, r8
	ands r2, r5
	lsls r0, r1, #1
	ldr r1, _080AEBCC @ =0x0000FFC0
	ands r0, r1
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r0, r1
	adds r2, r2, r0
	movs r0, #0x80
	lsls r0, r0, #7
	adds r1, r2, r0
	ldr r3, _080AEBD0 @ =gBg2Tm
	adds r0, r4, #2
	lsls r0, r0, #1
	adds r0, r0, r3
	strh r1, [r0]
	adds r0, r4, #3
	lsls r0, r0, #1
	adds r0, r0, r3
	ldr r5, _080AEBD4 @ =0x00004001
	adds r1, r2, r5
	strh r1, [r0]
	adds r0, r4, #0
	adds r0, #0x22
	lsls r0, r0, #1
	adds r0, r0, r3
	adds r5, #0x1f
	adds r1, r2, r5
	strh r1, [r0]
	adds r4, #0x23
	lsls r4, r4, #1
	adds r4, r4, r3
	ldr r0, _080AEBD8 @ =0x00004021
	adds r2, r2, r0
	strh r2, [r4]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AEBC4: .4byte 0x08DAF0C4
_080AEBC8: .4byte 0x08DAF054
_080AEBCC: .4byte 0x0000FFC0
_080AEBD0: .4byte gBg2Tm
_080AEBD4: .4byte 0x00004001
_080AEBD8: .4byte 0x00004021

	thumb_func_start sub_080AEBDC
sub_080AEBDC: @ 0x080AEBDC
	push {r4, r5, r6, lr}
	sub sp, #8
	ldr r5, _080AEC3C @ =0x08DAF028
	ldr r0, [r5]
	adds r0, #0xa8
	bl ClearText
	ldr r6, _080AEC40 @ =0x08DAF0C4
	bl sub_080AEA60
	adds r4, r0, #0
	bl sub_080AEA24
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x15
	ldr r1, _080AEC44 @ =0x08DAF054
	lsls r0, r0, #0x10
	asrs r0, r0, #0xd
	adds r1, #4
	adds r0, r0, r1
	ldr r1, [r5]
	movs r2, #0x2a
	ldrsh r1, [r1, r2]
	ldr r0, [r0]
	adds r0, r0, r1
	movs r1, #0x2c
	ldrb r0, [r0]
	muls r0, r1, r0
	adds r4, r4, r0
	adds r4, r4, r6
	ldrh r0, [r4, #4]
	bl DecodeMsg
	adds r3, r0, #0
	ldr r0, [r5]
	adds r0, #0xa8
	ldr r1, _080AEC48 @ =0x020230A8
	movs r2, #0x16
	str r2, [sp]
	str r3, [sp, #4]
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AEC3C: .4byte 0x08DAF028
_080AEC40: .4byte 0x08DAF0C4
_080AEC44: .4byte 0x08DAF054
_080AEC48: .4byte 0x020230A8

	thumb_func_start sub_080AEC4C
sub_080AEC4C: @ 0x080AEC4C
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	sub sp, #8
	mov sb, r0
	adds r4, r1, #0
	adds r5, r2, #0
	ldr r0, _080AECBC @ =0x08DAF028
	mov r8, r0
	lsls r4, r4, #3
	adds r4, #0x38
	ldr r0, [r0]
	adds r0, r0, r4
	bl ClearText
	ldr r6, _080AECC0 @ =0x08DAF0C4
	bl sub_080AEA24
	ldr r1, _080AECC4 @ =0x08DAF054
	lsls r0, r0, #0x10
	asrs r0, r0, #0xd
	adds r1, #4
	adds r0, r0, r1
	ldr r0, [r0]
	add r0, sb
	movs r1, #0x2c
	ldrb r0, [r0]
	muls r0, r1, r0
	adds r0, r0, r6
	ldrh r0, [r0]
	bl DecodeMsg
	adds r2, r0, #0
	mov r1, r8
	ldr r0, [r1]
	adds r0, r0, r4
	lsls r5, r5, #6
	ldr r1, _080AECC8 @ =0x02023C68
	adds r5, r5, r1
	movs r1, #9
	str r1, [sp]
	str r2, [sp, #4]
	adds r1, r5, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AECBC: .4byte 0x08DAF028
_080AECC0: .4byte 0x08DAF0C4
_080AECC4: .4byte 0x08DAF054
_080AECC8: .4byte 0x02023C68

	thumb_func_start sub_080AECCC
sub_080AECCC: @ 0x080AECCC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r4, r0, #0
	str r1, [sp]
	str r2, [sp, #4]
	bl sub_080AEA24
	ldr r1, _080AED98 @ =0x08DAF054
	lsls r0, r0, #0x10
	asrs r0, r0, #0xd
	adds r1, #4
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	mov sb, r0
	ldr r1, _080AED9C @ =0x08DAF0C4
	movs r0, #0x2c
	mov r2, sb
	muls r2, r0, r2
	adds r0, r2, #0
	adds r4, r0, r1
	ldrb r0, [r4, #8]
	lsrs r0, r0, #3
	str r0, [sp, #8]
	ldr r1, _080AEDA0 @ =0x08DAF028
	ldr r2, [sp]
	lsls r0, r2, #3
	adds r5, r0, #0
	adds r5, #0x70
	ldr r0, [r1]
	adds r0, r0, r5
	bl ClearText
	movs r0, #0
	mov r8, r0
	ldrh r0, [r4, #6]
	cmp r0, #0
	beq _080AED6A
	mov sl, r5
_080AED24:
	ldr r0, _080AEDA0 @ =0x08DAF028
	ldr r0, [r0]
	mov r1, sl
	adds r7, r0, r1
	ldrb r6, [r4, #8]
	subs r6, #0x78
	mov r2, sb
	lsls r0, r2, #0x18
	lsrs r0, r0, #0x18
	bl sub_080AF278
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r5, #1
	cmp r8, r0
	bne _080AED46
	movs r5, #2
_080AED46:
	ldrh r0, [r4, #6]
	bl DecodeMsg
	adds r3, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	adds r2, r5, #0
	bl Text_InsertDrawString
	adds r4, #8
	movs r0, #1
	add r8, r0
	mov r1, r8
	cmp r1, #3
	bgt _080AED6A
	ldrh r0, [r4, #6]
	cmp r0, #0
	bne _080AED24
_080AED6A:
	ldr r0, _080AEDA0 @ =0x08DAF028
	ldr r2, [sp]
	lsls r1, r2, #3
	adds r1, #0x70
	ldr r0, [r0]
	adds r0, r0, r1
	ldr r2, [sp, #4]
	lsls r1, r2, #5
	ldr r2, [sp, #8]
	adds r1, r1, r2
	lsls r1, r1, #1
	ldr r2, _080AEDA4 @ =gBg2Tm
	adds r1, r1, r2
	bl PutText
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AED98: .4byte 0x08DAF054
_080AED9C: .4byte 0x08DAF0C4
_080AEDA0: .4byte 0x08DAF028
_080AEDA4: .4byte gBg2Tm

	thumb_func_start sub_080AEDA8
sub_080AEDA8: @ 0x080AEDA8
	push {lr}
	movs r0, #1
	movs r1, #0x12
	bl ApplyIconPalette
	movs r0, #0x80
	movs r1, #3
	bl sub_080B2D90
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080AEDC0
sub_080AEDC0: @ 0x080AEDC0
	push {r4, r5, r6, r7, lr}
	bl sub_080AEA24
	ldr r1, _080AEEA0 @ =0x08DAF054
	lsls r0, r0, #0x10
	asrs r0, r0, #0xd
	adds r1, #4
	adds r0, r0, r1
	ldr r6, _080AEEA4 @ =0x08DAF028
	ldr r1, [r6]
	movs r2, #0x2a
	ldrsh r1, [r1, r2]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r5, [r0]
	bl GetGameTime
	movs r1, #0xf
	ands r0, r1
	movs r1, #8
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldr r2, _080AEEA8 @ =0x08DAF084
	movs r3, #0x83
	lsls r3, r3, #6
	movs r0, #0x22
	movs r1, #8
	bl PutOamHiRam
	ldr r0, [r6]
	movs r1, #0x2a
	ldrsh r4, [r0, r1]
	movs r2, #0x2c
	ldrsh r0, [r0, r2]
	subs r4, r4, r0
	lsls r4, r4, #4
	adds r4, #0x20
	movs r0, #0x10
	adds r1, r4, #0
	bl sub_0804A7EC
	adds r0, r5, #0
	bl sub_080AF278
	ldr r2, _080AEEAC @ =0x08DAF0C4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x15
	movs r1, #0x2c
	muls r1, r5, r1
	adds r0, r0, r1
	adds r0, r0, r2
	ldrb r0, [r0, #8]
	subs r0, #2
	adds r1, r4, #0
	bl sub_0804A740
	ldr r1, [r6]
	movs r2, #0x34
	ldrsh r0, [r1, r2]
	cmp r0, #6
	ble _080AEE70
	movs r2, #0x2c
	ldrsh r0, [r1, r2]
	cmp r0, #0
	beq _080AEE52
	movs r2, #0xc2
	lsls r2, r2, #6
	movs r0, #0x64
	movs r1, #0x1d
	movs r3, #1
	bl sub_080B2DD4
_080AEE52:
	ldr r0, [r6]
	movs r2, #0x2c
	ldrsh r1, [r0, r2]
	movs r2, #0x34
	ldrsh r0, [r0, r2]
	subs r0, #6
	cmp r1, r0
	bge _080AEE70
	movs r2, #0xc2
	lsls r2, r2, #6
	movs r0, #0x64
	movs r1, #0x7d
	movs r3, #0
	bl sub_080B2DD4
_080AEE70:
	bl sub_080AEA50
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080AEE98
	bl sub_080AEA60
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	bne _080AEE98
	ldr r2, _080AEEB0 @ =0x08BFF768
	ldr r3, _080AEEB4 @ =0x000020CC
	cmp r7, #0
	beq _080AEE90
	adds r3, #2
_080AEE90:
	movs r0, #0xc0
	movs r1, #0x20
	bl PutOamHiRam
_080AEE98:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AEEA0: .4byte 0x08DAF054
_080AEEA4: .4byte 0x08DAF028
_080AEEA8: .4byte 0x08DAF084
_080AEEAC: .4byte 0x08DAF0C4
_080AEEB0: .4byte 0x08BFF768
_080AEEB4: .4byte 0x000020CC

	thumb_func_start sub_080AEEB8
sub_080AEEB8: @ 0x080AEEB8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sl, r0
	movs r5, #0
	ldr r0, _080AF0C8 @ =gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #1
	beq _080AEED6
	movs r5, #1
	cmp r0, #2
	beq _080AEED6
	movs r5, #2
_080AEED6:
	ldr r1, _080AF0CC @ =0x08DAF028
	ldr r0, [r1]
	movs r2, #0
	mov sb, r2
	movs r4, #0
	strh r5, [r0, #0x32]
	bl sub_080AEA24
	ldr r2, _080AF0CC @ =0x08DAF028
	ldr r1, [r2]
	ldr r2, _080AF0D0 @ =0x08DAF054
	lsls r0, r0, #0x10
	asrs r0, r0, #0xd
	adds r0, r0, r2
	ldrb r0, [r0]
	strh r0, [r1, #0x34]
	strh r4, [r1, #0x2a]
	strh r4, [r1, #0x2c]
	mov r0, sl
	strh r4, [r0, #0x2e]
	strh r4, [r0, #0x30]
	adds r0, #0x36
	mov r1, sb
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	bl sub_0804A9F8
	ldr r7, _080AF0D4 @ =gDispIo
	movs r4, #1
	ldrb r0, [r7, #1]
	orrs r0, r4
	movs r2, #2
	mov r8, r2
	mov r1, r8
	orrs r0, r1
	movs r2, #4
	orrs r0, r2
	movs r6, #8
	orrs r0, r6
	movs r5, #0x10
	orrs r0, r5
	strb r0, [r7, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	mov r0, sl
	ldrh r2, [r0, #0x2e]
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #0x20
	ldrb r1, [r7, #1]
	orrs r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r7, #1]
	adds r0, r7, #0
	adds r0, #0x2d
	mov r2, sb
	strb r2, [r0]
	adds r1, r7, #0
	adds r1, #0x31
	movs r0, #0x20
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x80
	strb r0, [r1]
	adds r1, #4
	ldrb r0, [r1]
	orrs r0, r4
	mov r2, r8
	orrs r0, r2
	movs r2, #4
	orrs r0, r2
	orrs r0, r6
	orrs r0, r5
	strb r0, [r1]
	adds r1, #2
	ldrb r0, [r1]
	orrs r4, r0
	mov r2, r8
	orrs r4, r2
	movs r0, #5
	rsbs r0, r0, #0
	ands r4, r0
	orrs r4, r6
	orrs r4, r5
	strb r4, [r1]
	ldr r0, _080AF0D8 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r5, _080AF0DC @ =gBg1Tm
	adds r0, r5, #0
	movs r1, #0
	bl TmFill
	ldr r0, _080AF0E0 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r0, _080AF0E4 @ =gBg3Tm
	movs r1, #0
	bl TmFill
	ldr r4, _080AF0E8 @ =0x0843F0E4
	adds r0, r4, #0
	movs r1, #0x80
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r1, #0x90
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080AF0EC @ =0x0843E7EC
	ldr r1, _080AF0F0 @ =0x06011800
	bl sub_08013688
	ldr r0, _080AF0F4 @ =0x0843EA50
	ldr r1, _080AF0F8 @ =0x06004000
	bl sub_08013688
	ldr r4, _080AF0FC @ =0x0843EA3C
	movs r0, #2
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r0, _080AF100 @ =0x06005000
	adds r1, r1, r0
	adds r0, r4, #0
	bl sub_08013688
	ldr r1, _080AF104 @ =0x0843EF2C
	movs r4, #0x80
	lsls r4, r4, #5
	adds r0, r5, #0
	adds r2, r4, #0
	bl TmApplyTsa_thm
	ldr r1, _080AF108 @ =0x00000404
	adds r5, r5, r1
	ldr r1, _080AF10C @ =0x0843EFB0
	adds r0, r5, #0
	adds r2, r4, #0
	bl TmApplyTsa_thm
	bl sub_08005308
	ldr r2, _080AF0CC @ =0x08DAF028
	ldr r0, [r2]
	adds r0, #0xa8
	movs r1, #0x16
	bl InitText
	bl sub_080AEBDC
	ldr r1, _080AF0CC @ =0x08DAF028
	ldr r0, [r1]
	adds r0, #0x68
	movs r1, #9
	bl InitText
	ldr r2, _080AF0CC @ =0x08DAF028
	ldr r0, [r2]
	adds r0, #0xa0
	movs r1, #0xe
	bl InitText
	movs r5, #0
	ldr r0, _080AF0CC @ =0x08DAF028
	mov r8, r0
	movs r7, #0x70
	movs r6, #0x38
	movs r4, #4
_080AF060:
	adds r0, r5, #0
	movs r1, #4
	bl sub_080AEB3C
	mov r1, r8
	ldr r0, [r1]
	adds r0, r0, r6
	movs r1, #9
	bl InitText
	mov r2, r8
	ldr r0, [r2]
	adds r0, r0, r7
	movs r1, #0xe
	bl InitText
	adds r0, r5, #0
	adds r1, r5, #0
	adds r2, r4, #0
	bl sub_080AEC4C
	adds r0, r5, #0
	adds r1, r5, #0
	adds r2, r4, #0
	bl sub_080AECCC
	adds r7, #8
	adds r6, #8
	adds r4, #2
	adds r5, #1
	cmp r5, #5
	ble _080AF060
	movs r2, #1
	rsbs r2, r2, #0
	mov r0, sl
	movs r1, #0
	bl sub_080AEAA4
	ldr r0, _080AF110 @ =0x08DAF3D0
	mov r1, sl
	bl Proc_Start
	movs r0, #0xf
	bl EnableBgSync
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AF0C8: .4byte gPlaySt
_080AF0CC: .4byte 0x08DAF028
_080AF0D0: .4byte 0x08DAF054
_080AF0D4: .4byte gDispIo
_080AF0D8: .4byte gBg0Tm
_080AF0DC: .4byte gBg1Tm
_080AF0E0: .4byte gBg2Tm
_080AF0E4: .4byte gBg3Tm
_080AF0E8: .4byte 0x0843F0E4
_080AF0EC: .4byte 0x0843E7EC
_080AF0F0: .4byte 0x06011800
_080AF0F4: .4byte 0x0843EA50
_080AF0F8: .4byte 0x06004000
_080AF0FC: .4byte 0x0843EA3C
_080AF100: .4byte 0x06005000
_080AF104: .4byte 0x0843EF2C
_080AF108: .4byte 0x00000404
_080AF10C: .4byte 0x0843EFB0
_080AF110: .4byte 0x08DAF3D0

	thumb_func_start sub_080AF114
sub_080AF114: @ 0x080AF114
	push {lr}
	bl sub_080AF194
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080AF128
	movs r0, #1
	rsbs r0, r0, #0
	bl sub_0804A30C
_080AF128:
	movs r0, #0
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080AF130
sub_080AF130: @ 0x080AF130
	push {r4, lr}
	adds r4, r0, #0
	bl sub_080AF194
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080AF18C
	bl sub_080AEA24
	ldr r1, _080AF16C @ =0x08DAF054
	lsls r0, r0, #0x10
	asrs r0, r0, #0xd
	adds r1, #4
	adds r0, r0, r1
	ldr r1, _080AF170 @ =0x08DAF028
	ldr r1, [r1]
	movs r2, #0x2a
	ldrsh r1, [r1, r2]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl sub_080AF278
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080AF174
	movs r0, #1
	bl sub_080034C8
	b _080AF18C
	.align 2, 0
_080AF16C: .4byte 0x08DAF054
_080AF170: .4byte 0x08DAF028
_080AF174:
	adds r0, r4, #0
	adds r0, #0x37
	ldrb r0, [r0]
	cmp r0, #0
	beq _080AF188
	movs r0, #0x49
	movs r1, #0
	bl sub_0800376C
	b _080AF18C
_080AF188:
	bl sub_08016400
_080AF18C:
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_080AF194
sub_080AF194: @ 0x080AF194
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	movs r7, #0
	ldr r0, _080AF1F0 @ =0x08DAF028
	ldr r0, [r0]
	movs r1, #0x2a
	ldrsh r5, [r0, r1]
	bl sub_080AEA24
	ldr r1, _080AF1F4 @ =0x08DAF054
	lsls r0, r0, #0x10
	asrs r0, r0, #0xd
	adds r1, #4
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, r0, r5
	ldrb r4, [r0]
	adds r6, r4, #0
	bl sub_080AEA60
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	ldr r0, _080AF1F8 @ =gpKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0x30
	ands r0, r1
	cmp r0, #0
	beq _080AF25A
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _080AF1FC
	cmp r3, #0
	beq _080AF222
	subs r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	adds r0, r4, #0
	adds r1, r3, #0
	bl sub_080AF3F4
	movs r7, #1
	b _080AF226
	.align 2, 0
_080AF1F0: .4byte 0x08DAF028
_080AF1F4: .4byte 0x08DAF054
_080AF1F8: .4byte gpKeySt
_080AF1FC:
	ldr r2, _080AF268 @ =0x08DAF0C4
	adds r4, r3, #1
	lsls r0, r4, #3
	movs r1, #0x2c
	muls r1, r6, r1
	adds r0, r0, r1
	adds r0, r0, r2
	ldrh r0, [r0, #6]
	cmp r0, #0
	beq _080AF222
	cmp r3, #2
	bhi _080AF222
	lsls r0, r4, #0x18
	lsrs r3, r0, #0x18
	adds r0, r6, #0
	adds r1, r3, #0
	bl sub_080AF3F4
	movs r7, #1
_080AF222:
	cmp r7, #0
	beq _080AF25A
_080AF226:
	ldr r0, _080AF26C @ =0x08DAF3B0
	mov r1, r8
	bl Proc_Start
	adds r0, r5, #0
	movs r1, #7
	bl __modsi3
	adds r1, r0, #0
	lsls r2, r5, #1
	adds r2, #4
	adds r0, r5, #0
	bl sub_080AECCC
	movs r0, #5
	bl EnableBgSync
	ldr r0, _080AF270 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080AF25A
	ldr r0, _080AF274 @ =0x00000387
	bl m4aSongNumStart
_080AF25A:
	adds r0, r7, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080AF268: .4byte 0x08DAF0C4
_080AF26C: .4byte 0x08DAF3B0
_080AF270: .4byte gPlaySt
_080AF274: .4byte 0x00000387

	thumb_func_start sub_080AF278
sub_080AF278: @ 0x080AF278
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r2, #0
	cmp r0, #0x10
	bls _080AF284
	b _080AF3EA
_080AF284:
	lsls r0, r0, #2
	ldr r1, _080AF290 @ =_080AF294
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080AF290: .4byte _080AF294
_080AF294: @ jump table
	.4byte _080AF2D8 @ case 0
	.4byte _080AF30E @ case 1
	.4byte _080AF31C @ case 2
	.4byte _080AF328 @ case 3
	.4byte _080AF338 @ case 4
	.4byte _080AF348 @ case 5
	.4byte _080AF354 @ case 6
	.4byte _080AF364 @ case 7
	.4byte _080AF374 @ case 8
	.4byte _080AF3EA @ case 9
	.4byte _080AF384 @ case 10
	.4byte _080AF394 @ case 11
	.4byte _080AF3A4 @ case 12
	.4byte _080AF3B0 @ case 13
	.4byte _080AF3C0 @ case 14
	.4byte _080AF3D0 @ case 15
	.4byte _080AF3E0 @ case 16
_080AF2D8:
	ldr r0, _080AF2F0 @ =gPlaySt
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x1d
	lsrs r0, r0, #0x1e
	cmp r0, #1
	beq _080AF306
	cmp r0, #1
	bgt _080AF2F4
	cmp r0, #0
	beq _080AF2FE
	b _080AF30E
	.align 2, 0
_080AF2F0: .4byte gPlaySt
_080AF2F4:
	cmp r0, #2
	beq _080AF30A
	cmp r0, #3
	beq _080AF302
	b _080AF30E
_080AF2FE:
	movs r0, #0
	b _080AF3EC
_080AF302:
	movs r0, #1
	b _080AF3EC
_080AF306:
	movs r0, #2
	b _080AF3EC
_080AF30A:
	movs r0, #3
	b _080AF3EC
_080AF30E:
	ldr r0, _080AF318 @ =gPlaySt
	adds r0, #0x40
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	b _080AF3E8
	.align 2, 0
_080AF318: .4byte gPlaySt
_080AF31C:
	ldr r0, _080AF324 @ =gPlaySt
	adds r0, #0x40
	b _080AF378
	.align 2, 0
_080AF324: .4byte gPlaySt
_080AF328:
	ldr r0, _080AF334 @ =gPlaySt
	adds r0, #0x40
	ldrb r0, [r0]
	lsls r0, r0, #0x1b
	b _080AF3E8
	.align 2, 0
_080AF334: .4byte gPlaySt
_080AF338:
	ldr r0, _080AF344 @ =gPlaySt
	adds r0, #0x40
	ldrb r0, [r0]
	lsls r0, r0, #0x19
	lsrs r2, r0, #0x1e
	b _080AF3EA
	.align 2, 0
_080AF344: .4byte gPlaySt
_080AF348:
	ldr r0, _080AF350 @ =gPlaySt
	adds r0, #0x40
	b _080AF398
	.align 2, 0
_080AF350: .4byte gPlaySt
_080AF354:
	ldr r0, _080AF360 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	b _080AF3E8
	.align 2, 0
_080AF360: .4byte gPlaySt
_080AF364:
	ldr r0, _080AF370 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	b _080AF3E8
	.align 2, 0
_080AF370: .4byte gPlaySt
_080AF374:
	ldr r0, _080AF380 @ =gPlaySt
	adds r0, #0x41
_080AF378:
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r2, r0, #0x1e
	b _080AF3EA
	.align 2, 0
_080AF380: .4byte gPlaySt
_080AF384:
	ldr r0, _080AF390 @ =gPlaySt
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x1b
	lsrs r2, r0, #0x1e
	b _080AF3EA
	.align 2, 0
_080AF390: .4byte gPlaySt
_080AF394:
	ldr r0, _080AF3A0 @ =gPlaySt
	adds r0, #0x41
_080AF398:
	ldrb r0, [r0]
	lsrs r2, r0, #7
	b _080AF3EA
	.align 2, 0
_080AF3A0: .4byte gPlaySt
_080AF3A4:
	ldr r0, _080AF3AC @ =gPlaySt
	adds r0, #0x41
	b _080AF3E4
	.align 2, 0
_080AF3AC: .4byte gPlaySt
_080AF3B0:
	ldr r0, _080AF3BC @ =gPlaySt
	adds r0, #0x40
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	b _080AF3E8
	.align 2, 0
_080AF3BC: .4byte gPlaySt
_080AF3C0:
	ldr r0, _080AF3CC @ =gPlaySt
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	b _080AF3E8
	.align 2, 0
_080AF3CC: .4byte gPlaySt
_080AF3D0:
	ldr r0, _080AF3DC @ =gPlaySt
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x1a
	b _080AF3E8
	.align 2, 0
_080AF3DC: .4byte gPlaySt
_080AF3E0:
	ldr r0, _080AF3F0 @ =gPlaySt
	adds r0, #0x42
_080AF3E4:
	ldrb r0, [r0]
	lsls r0, r0, #0x19
_080AF3E8:
	lsrs r2, r0, #0x1f
_080AF3EA:
	adds r0, r2, #0
_080AF3EC:
	bx lr
	.align 2, 0
_080AF3F0: .4byte gPlaySt

	thumb_func_start sub_080AF3F4
sub_080AF3F4: @ 0x080AF3F4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r3, r1, #0x18
	cmp r0, #0x10
	bls _080AF402
	b _080AF600
_080AF402:
	lsls r0, r0, #2
	ldr r1, _080AF40C @ =_080AF410
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080AF40C: .4byte _080AF410
_080AF410: @ jump table
	.4byte _080AF454 @ case 0
	.4byte _080AF4BC @ case 1
	.4byte _080AF4D4 @ case 2
	.4byte _080AF4EC @ case 3
	.4byte _080AF504 @ case 4
	.4byte _080AF51C @ case 5
	.4byte _080AF528 @ case 6
	.4byte _080AF53C @ case 7
	.4byte _080AF554 @ case 8
	.4byte _080AF600 @ case 9
	.4byte _080AF56C @ case 10
	.4byte _080AF584 @ case 11
	.4byte _080AF59C @ case 12
	.4byte _080AF5A8 @ case 13
	.4byte _080AF5BC @ case 14
	.4byte _080AF5D0 @ case 15
	.4byte _080AF5E8 @ case 16
_080AF454:
	cmp r3, #1
	beq _080AF480
	cmp r3, #1
	bgt _080AF462
	cmp r3, #0
	beq _080AF46C
	b _080AF4BC
_080AF462:
	cmp r3, #2
	beq _080AF494
	cmp r3, #3
	beq _080AF4A8
	b _080AF4BC
_080AF46C:
	ldr r1, _080AF47C @ =gPlaySt
	adds r1, #0x42
	movs r0, #7
	rsbs r0, r0, #0
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	b _080AF600
	.align 2, 0
_080AF47C: .4byte gPlaySt
_080AF480:
	ldr r1, _080AF490 @ =gPlaySt
	adds r1, #0x42
	movs r0, #6
	ldrb r3, [r1]
	orrs r0, r3
	strb r0, [r1]
	b _080AF600
	.align 2, 0
_080AF490: .4byte gPlaySt
_080AF494:
	ldr r0, _080AF4A4 @ =gPlaySt
	adds r0, #0x42
	movs r1, #7
	rsbs r1, r1, #0
	ldrb r2, [r0]
	ands r1, r2
	movs r2, #2
	b _080AF590
	.align 2, 0
_080AF4A4: .4byte gPlaySt
_080AF4A8:
	ldr r0, _080AF4B8 @ =gPlaySt
	adds r0, #0x42
	movs r1, #7
	rsbs r1, r1, #0
	ldrb r3, [r0]
	ands r1, r3
	movs r2, #4
	b _080AF590
	.align 2, 0
_080AF4B8: .4byte gPlaySt
_080AF4BC:
	ldr r2, _080AF4D0 @ =gPlaySt
	adds r2, #0x40
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #1
	movs r0, #3
	rsbs r0, r0, #0
	b _080AF5F8
	.align 2, 0
_080AF4D0: .4byte gPlaySt
_080AF4D4:
	ldr r2, _080AF4E8 @ =gPlaySt
	adds r2, #0x40
	movs r0, #3
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #2
	movs r0, #0xd
	rsbs r0, r0, #0
	b _080AF5F8
	.align 2, 0
_080AF4E8: .4byte gPlaySt
_080AF4EC:
	ldr r2, _080AF500 @ =gPlaySt
	adds r2, #0x40
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #4
	movs r0, #0x11
	rsbs r0, r0, #0
	b _080AF5F8
	.align 2, 0
_080AF500: .4byte gPlaySt
_080AF504:
	ldr r2, _080AF518 @ =gPlaySt
	adds r2, #0x40
	movs r0, #3
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #5
	movs r0, #0x61
	rsbs r0, r0, #0
	b _080AF5F8
	.align 2, 0
_080AF518: .4byte gPlaySt
_080AF51C:
	ldr r0, _080AF524 @ =gPlaySt
	adds r0, #0x40
	b _080AF588
	.align 2, 0
_080AF524: .4byte gPlaySt
_080AF528:
	ldr r2, _080AF538 @ =gPlaySt
	adds r2, #0x41
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	movs r0, #2
	rsbs r0, r0, #0
	b _080AF5F8
	.align 2, 0
_080AF538: .4byte gPlaySt
_080AF53C:
	ldr r2, _080AF550 @ =gPlaySt
	adds r2, #0x41
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #1
	movs r0, #3
	rsbs r0, r0, #0
	b _080AF5F8
	.align 2, 0
_080AF550: .4byte gPlaySt
_080AF554:
	ldr r2, _080AF568 @ =gPlaySt
	adds r2, #0x41
	movs r0, #3
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #2
	movs r0, #0xd
	rsbs r0, r0, #0
	b _080AF5F8
	.align 2, 0
_080AF568: .4byte gPlaySt
_080AF56C:
	ldr r2, _080AF580 @ =gPlaySt
	adds r2, #0x42
	movs r0, #3
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #3
	movs r0, #0x19
	rsbs r0, r0, #0
	b _080AF5F8
	.align 2, 0
_080AF580: .4byte gPlaySt
_080AF584:
	ldr r0, _080AF598 @ =gPlaySt
	adds r0, #0x41
_080AF588:
	lsls r2, r3, #7
	movs r1, #0x7f
	ldrb r3, [r0]
	ands r1, r3
_080AF590:
	orrs r1, r2
	strb r1, [r0]
	b _080AF600
	.align 2, 0
_080AF598: .4byte gPlaySt
_080AF59C:
	ldr r2, _080AF5A4 @ =gPlaySt
	adds r2, #0x41
	b _080AF5EC
	.align 2, 0
_080AF5A4: .4byte gPlaySt
_080AF5A8:
	ldr r2, _080AF5B8 @ =gPlaySt
	adds r2, #0x40
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	movs r0, #2
	rsbs r0, r0, #0
	b _080AF5F8
	.align 2, 0
_080AF5B8: .4byte gPlaySt
_080AF5BC:
	ldr r2, _080AF5CC @ =gPlaySt
	adds r2, #0x42
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	movs r0, #2
	rsbs r0, r0, #0
	b _080AF5F8
	.align 2, 0
_080AF5CC: .4byte gPlaySt
_080AF5D0:
	ldr r2, _080AF5E4 @ =gPlaySt
	adds r2, #0x42
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #5
	movs r0, #0x21
	rsbs r0, r0, #0
	b _080AF5F8
	.align 2, 0
_080AF5E4: .4byte gPlaySt
_080AF5E8:
	ldr r2, _080AF604 @ =gPlaySt
	adds r2, #0x42
_080AF5EC:
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #6
	movs r0, #0x41
	rsbs r0, r0, #0
_080AF5F8:
	ldrb r3, [r2]
	ands r0, r3
	orrs r0, r1
	strb r0, [r2]
_080AF600:
	bx lr
	.align 2, 0
_080AF604: .4byte gPlaySt

	thumb_func_start sub_080AF608
sub_080AF608: @ 0x080AF608
	push {r4, r5, r6, r7, lr}
	adds r6, r1, #0
	adds r7, r2, #0
	lsls r0, r6, #1
	adds r5, r0, #4
	movs r0, #0x1f
	ands r5, r0
	lsls r0, r5, #5
	ldr r2, _080AF684 @ =gBg2Tm
	movs r4, #0
	adds r1, r0, #0
	adds r1, #0x22
	adds r0, #2
	movs r3, #0x1a
	lsls r0, r0, #1
	adds r0, r0, r2
	lsls r1, r1, #1
	adds r1, r1, r2
_080AF62C:
	strh r4, [r0]
	strh r4, [r1]
	adds r1, #2
	adds r0, #2
	subs r3, #1
	cmp r3, #0
	bge _080AF62C
	adds r0, r6, #0
	movs r1, #7
	bl __modsi3
	adds r4, r0, #0
	adds r0, r6, #0
	movs r1, #4
	bl sub_080AEB3C
	adds r0, r6, #0
	adds r1, r4, #0
	adds r2, r5, #0
	bl sub_080AEC4C
	adds r0, r6, #0
	adds r1, r4, #0
	adds r2, r5, #0
	bl sub_080AECCC
	ldr r1, _080AF688 @ =gBg0Tm
	movs r2, #0
	adds r0, r7, #0
	adds r0, #0x62
	movs r3, #0x1a
	lsls r0, r0, #1
	adds r0, r0, r1
_080AF66E:
	strh r2, [r0]
	adds r0, #2
	subs r3, #1
	cmp r3, #0
	bge _080AF66E
	movs r0, #5
	bl EnableBgSync
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AF684: .4byte gBg2Tm
_080AF688: .4byte gBg0Tm

	thumb_func_start sub_080AF68C
sub_080AF68C: @ 0x080AF68C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	movs r3, #0
	movs r1, #0x30
	ldrsh r0, [r5, r1]
	cmp r0, #6
	bls _080AF6A0
	b _080AF8E4
_080AF6A0:
	lsls r0, r0, #2
	ldr r1, _080AF6AC @ =_080AF6B0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080AF6AC: .4byte _080AF6B0
_080AF6B0: @ jump table
	.4byte _080AF6CC @ case 0
	.4byte _080AF8C0 @ case 1
	.4byte _080AF8C0 @ case 2
	.4byte _080AF8C0 @ case 3
	.4byte _080AF8D0 @ case 4
	.4byte _080AF8D0 @ case 5
	.4byte _080AF8D0 @ case 6
_080AF6CC:
	ldr r0, _080AF6F0 @ =gpKeySt
	ldr r2, [r0]
	ldrh r1, [r2, #8]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080AF6FC
	ldr r0, _080AF6F4 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080AF752
	ldr r0, _080AF6F8 @ =0x0000038B
	bl m4aSongNumStart
	b _080AF752
	.align 2, 0
_080AF6F0: .4byte gpKeySt
_080AF6F4: .4byte gPlaySt
_080AF6F8: .4byte 0x0000038B
_080AF6FC:
	movs r4, #1
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq _080AF76C
	bl sub_080AEA24
	ldr r1, _080AF75C @ =0x08DAF054
	lsls r0, r0, #0x10
	asrs r0, r0, #0xd
	adds r1, #4
	adds r0, r0, r1
	ldr r1, _080AF760 @ =0x08DAF028
	ldr r1, [r1]
	movs r2, #0x2a
	ldrsh r1, [r1, r2]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #0
	beq _080AF728
	b _080AF8E4
_080AF728:
	movs r0, #0
	bl sub_080AF278
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	beq _080AF738
	b _080AF8E4
_080AF738:
	ldr r0, _080AF764 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080AF74A
	ldr r0, _080AF768 @ =0x0000038A
	bl m4aSongNumStart
_080AF74A:
	adds r1, r5, #0
	adds r1, #0x36
	movs r0, #1
	strb r0, [r1]
_080AF752:
	adds r0, r5, #0
	bl Proc_Break
	b _080AF8E4
	.align 2, 0
_080AF75C: .4byte 0x08DAF054
_080AF760: .4byte 0x08DAF028
_080AF764: .4byte gPlaySt
_080AF768: .4byte 0x0000038A
_080AF76C:
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	ands r0, r1
	cmp r0, #0
	beq _080AF850
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080AF7CC
	ldr r0, _080AF7C8 @ =0x08DAF028
	ldr r2, [r0]
	ldrh r1, [r2, #0x2a]
	movs r6, #0x2a
	ldrsh r0, [r2, r6]
	cmp r0, #0
	beq _080AF81A
	subs r0, r1, #1
	strh r0, [r2, #0x2a]
	movs r1, #0x2a
	ldrsh r0, [r2, r1]
	movs r3, #0x2c
	ldrsh r1, [r2, r3]
	subs r0, r0, r1
	cmp r0, #0
	bgt _080AF7C2
	ldrh r1, [r2, #0x2c]
	movs r6, #0x2c
	ldrsh r0, [r2, r6]
	cmp r0, #0
	beq _080AF7C2
	subs r0, r1, #1
	strh r0, [r2, #0x2c]
	movs r0, #0x2a
	ldrsh r1, [r2, r0]
	subs r1, #1
	adds r0, r5, #0
	movs r2, #0
	bl sub_080AF608
	ldrh r0, [r5, #0x2e]
	subs r0, #4
	strh r0, [r5, #0x2e]
	strh r4, [r5, #0x30]
_080AF7C2:
	movs r3, #1
	b _080AF81E
	.align 2, 0
_080AF7C8: .4byte 0x08DAF028
_080AF7CC:
	ldr r0, _080AF840 @ =0x08DAF028
	ldr r2, [r0]
	movs r4, #0x2a
	ldrsh r1, [r2, r4]
	movs r6, #0x34
	ldrsh r0, [r2, r6]
	subs r0, #1
	cmp r1, r0
	bge _080AF81A
	ldrh r0, [r2, #0x2a]
	adds r0, #1
	strh r0, [r2, #0x2a]
	movs r0, #0x2a
	ldrsh r1, [r2, r0]
	movs r3, #0x2c
	ldrsh r0, [r2, r3]
	subs r0, r1, r0
	cmp r0, #4
	ble _080AF818
	movs r4, #0x34
	ldrsh r0, [r2, r4]
	subs r0, #1
	cmp r1, r0
	bge _080AF818
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	adds r1, #1
	movs r2, #0xa0
	lsls r2, r2, #1
	adds r0, r5, #0
	bl sub_080AF608
	ldrh r0, [r5, #0x2e]
	adds r0, #4
	strh r0, [r5, #0x2e]
	movs r0, #4
	strh r0, [r5, #0x30]
_080AF818:
	movs r3, #1
_080AF81A:
	cmp r3, #0
	beq _080AF850
_080AF81E:
	ldr r0, _080AF844 @ =0x08DAF3B0
	adds r1, r5, #0
	bl Proc_Start
	movs r0, #5
	bl EnableBgSync
	ldr r0, _080AF848 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080AF8E4
	ldr r0, _080AF84C @ =0x00000386
	bl m4aSongNumStart
	b _080AF8E4
	.align 2, 0
_080AF840: .4byte 0x08DAF028
_080AF844: .4byte 0x08DAF3B0
_080AF848: .4byte gPlaySt
_080AF84C: .4byte 0x00000386
_080AF850:
	ldr r0, _080AF8B0 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0x30
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080AF8E4
	ldr r4, _080AF8B4 @ =0x08DAF0C4
	bl sub_080AEA24
	ldr r1, _080AF8B8 @ =0x08DAF054
	lsls r0, r0, #0x10
	asrs r0, r0, #0xd
	adds r1, #4
	mov r8, r1
	add r0, r8
	ldr r7, _080AF8BC @ =0x08DAF028
	ldr r1, [r7]
	movs r2, #0x2a
	ldrsh r1, [r1, r2]
	ldr r0, [r0]
	adds r0, r0, r1
	movs r6, #0x2c
	ldrb r0, [r0]
	muls r0, r6, r0
	adds r4, #0x28
	adds r0, r0, r4
	ldr r0, [r0]
	cmp r0, #0
	beq _080AF8E4
	bl sub_080AEA24
	lsls r0, r0, #0x10
	asrs r0, r0, #0xd
	add r0, r8
	ldr r1, [r7]
	movs r3, #0x2a
	ldrsh r1, [r1, r3]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	muls r0, r6, r0
	adds r0, r0, r4
	ldr r1, [r0]
	adds r0, r5, #0
	bl _call_via_r1
	b _080AF8E4
	.align 2, 0
_080AF8B0: .4byte gpKeySt
_080AF8B4: .4byte 0x08DAF0C4
_080AF8B8: .4byte 0x08DAF054
_080AF8BC: .4byte 0x08DAF028
_080AF8C0:
	ldrh r0, [r5, #0x2e]
	subs r0, #4
	strh r0, [r5, #0x2e]
	ldrh r0, [r5, #0x30]
	cmp r0, #3
	bne _080AF8E0
	movs r0, #0
	b _080AF8E2
_080AF8D0:
	ldrh r0, [r5, #0x2e]
	adds r0, #4
	strh r0, [r5, #0x2e]
	ldrh r0, [r5, #0x30]
	cmp r0, #6
	bne _080AF8E0
	movs r0, #0
	b _080AF8E2
_080AF8E0:
	adds r0, #1
_080AF8E2:
	strh r0, [r5, #0x30]
_080AF8E4:
	ldrh r2, [r5, #0x2e]
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080AF8F8
sub_080AF8F8: @ 0x080AF8F8
	push {r4, lr}
	adds r4, r0, #0
	bl sub_080807BC
	ldr r0, _080AF91C @ =0x08DAF3D0
	bl sub_08004748
	ldr r0, _080AF920 @ =0x08DAF3B0
	bl sub_08004748
	adds r0, r4, #0
	adds r0, #0x36
	ldrb r0, [r0]
	cmp r0, #0
	bne _080AF924
	movs r0, #1
	b _080AF934
	.align 2, 0
_080AF91C: .4byte 0x08DAF3D0
_080AF920: .4byte 0x08DAF3B0
_080AF924:
	adds r0, r4, #0
	bl sub_0808B4C0
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
	movs r0, #0
_080AF934:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080AF93C
sub_080AF93C: @ 0x080AF93C
	adds r0, #0x37
	movs r1, #1
	strb r1, [r0]
	bx lr

	thumb_func_start sub_080AF944
sub_080AF944: @ 0x080AF944
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r3, [r5, #0x5c]
	ldr r0, [r5, #0x60]
	adds r0, r3, r0
	cmp r3, r0
	bge _080AF970
	ldr r2, _080AF978 @ =0x020144F8
	ldr r1, _080AF97C @ =gPal
	lsls r0, r3, #1
	adds r4, r0, r1
	adds r2, r0, r2
_080AF95C:
	ldrh r0, [r4]
	strh r0, [r2]
	adds r4, #2
	adds r2, #2
	adds r3, #1
	ldr r0, [r5, #0x5c]
	ldr r1, [r5, #0x60]
	adds r0, r0, r1
	cmp r3, r0
	blt _080AF95C
_080AF970:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AF978: .4byte 0x020144F8
_080AF97C: .4byte gPal

	thumb_func_start nullsub_088
nullsub_088: @ 0x080AF980
	bx lr
	.align 2, 0

	thumb_func_start sub_080AF984
sub_080AF984: @ 0x080AF984
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	mov r1, r8
	adds r1, #0x4e
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
	ldrh r1, [r1]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov sb, r0
	mov r0, r8
	ldr r7, [r0, #0x5c]
	ldr r0, [r0, #0x60]
	adds r0, r7, r0
	cmp r7, r0
	bge _080AFA3A
	movs r1, #0xf8
	lsls r1, r1, #7
	mov sl, r1
_080AF9B6:
	lsls r2, r7, #1
	mov ip, r2
	ldr r0, _080AFA68 @ =0x020144F8
	add r0, ip
	ldrh r6, [r0]
	mov r1, sl
	ands r1, r6
	mov r0, r8
	ldr r4, [r0, #0x58]
	adds r0, r4, #0
	mov r2, sl
	ands r0, r2
	subs r0, r1, r0
	mov r1, sb
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge _080AF9DC
	adds r0, #0xff
_080AF9DC:
	asrs r0, r0, #8
	adds r2, r0, r4
	mov r0, sl
	ands r2, r0
	movs r5, #0xf8
	lsls r5, r5, #2
	adds r1, r5, #0
	ands r1, r6
	adds r0, r4, #0
	ands r0, r5
	subs r0, r1, r0
	mov r1, sb
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge _080AF9FE
	adds r0, #0xff
_080AF9FE:
	asrs r0, r0, #8
	adds r3, r0, r4
	ands r3, r5
	movs r5, #0x1f
	adds r1, r5, #0
	ands r1, r6
	adds r0, r4, #0
	ands r0, r5
	subs r0, r1, r0
	mov r1, sb
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge _080AFA1C
	adds r0, #0xff
_080AFA1C:
	asrs r0, r0, #8
	adds r0, r0, r4
	ands r0, r5
	ldr r1, _080AFA6C @ =gPal
	add r1, ip
	orrs r2, r3
	orrs r2, r0
	strh r2, [r1]
	adds r7, #1
	mov r2, r8
	ldr r0, [r2, #0x5c]
	ldr r1, [r2, #0x60]
	adds r0, r0, r1
	cmp r7, r0
	blt _080AF9B6
_080AFA3A:
	bl EnablePalSync
	mov r1, r8
	adds r1, #0x4e
	mov r0, r8
	adds r0, #0x64
	ldrh r2, [r1]
	ldrh r0, [r0]
	adds r0, r2, r0
	strh r0, [r1]
	mov r0, sb
	cmp r0, #0
	bne _080AFA5A
	mov r0, r8
	bl Proc_Break
_080AFA5A:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AFA68: .4byte 0x020144F8
_080AFA6C: .4byte gPal

	thumb_func_start sub_080AFA70
sub_080AFA70: @ 0x080AFA70
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	mov r1, r8
	adds r1, #0x4e
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
	ldrh r1, [r1]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov sb, r0
	cmp r0, #0
	beq _080AFB2A
	mov r3, r8
	ldr r6, [r3, #0x5c]
	ldr r0, [r3, #0x60]
	adds r0, r6, r0
	cmp r6, r0
	bge _080AFB2A
	movs r4, #0xf8
	lsls r4, r4, #7
	mov sl, r4
_080AFAA6:
	mov r0, r8
	ldr r5, [r0, #0x58]
	adds r1, r5, #0
	mov r2, sl
	ands r1, r2
	lsls r3, r6, #1
	mov ip, r3
	ldr r2, _080AFB8C @ =0x020144F8
	add r2, ip
	mov r0, sl
	ldrh r4, [r2]
	ands r0, r4
	subs r0, r1, r0
	mov r1, sb
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge _080AFACC
	adds r0, #0xff
_080AFACC:
	asrs r0, r0, #8
	ldrh r4, [r2]
	adds r2, r0, r4
	mov r3, sl
	ands r2, r3
	movs r7, #0xf8
	lsls r7, r7, #2
	adds r1, r5, #0
	ands r1, r7
	adds r0, r4, #0
	ands r0, r7
	subs r0, r1, r0
	mov r1, sb
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge _080AFAF0
	adds r0, #0xff
_080AFAF0:
	asrs r0, r0, #8
	adds r3, r0, r4
	ands r3, r7
	movs r1, #0x1f
	ands r5, r1
	adds r0, r4, #0
	ands r0, r1
	subs r0, r5, r0
	mov r5, sb
	muls r5, r0, r5
	adds r0, r5, #0
	cmp r0, #0
	bge _080AFB0C
	adds r0, #0xff
_080AFB0C:
	asrs r0, r0, #8
	adds r0, r0, r4
	ands r0, r1
	ldr r1, _080AFB90 @ =gPal
	add r1, ip
	orrs r2, r3
	orrs r2, r0
	strh r2, [r1]
	adds r6, #1
	mov r1, r8
	ldr r0, [r1, #0x5c]
	ldr r1, [r1, #0x60]
	adds r0, r0, r1
	cmp r6, r0
	blt _080AFAA6
_080AFB2A:
	bl EnablePalSync
	mov r1, r8
	adds r1, #0x4e
	mov r0, r8
	adds r0, #0x64
	ldrh r2, [r1]
	ldrh r0, [r0]
	adds r0, r2, r0
	strh r0, [r1]
	mov r3, sb
	cmp r3, #0
	bne _080AFB7E
	mov r4, r8
	ldr r6, [r4, #0x5c]
	ldr r0, [r4, #0x60]
	adds r0, r6, r0
	cmp r6, r0
	bge _080AFB78
	ldr r0, _080AFB90 @ =gPal
	ldr r2, _080AFB8C @ =0x020144F8
	lsls r1, r6, #1
	adds r3, r1, r0
	adds r2, r1, r2
_080AFB5A:
	ldrh r0, [r2]
	strh r0, [r3]
	ldrh r0, [r2]
	strh r0, [r3]
	ldrh r0, [r2]
	strh r0, [r3]
	adds r3, #2
	adds r2, #2
	adds r6, #1
	mov r5, r8
	ldr r0, [r5, #0x5c]
	ldr r1, [r5, #0x60]
	adds r0, r0, r1
	cmp r6, r0
	blt _080AFB5A
_080AFB78:
	mov r0, r8
	bl Proc_Break
_080AFB7E:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AFB8C: .4byte 0x020144F8
_080AFB90: .4byte gPal

	thumb_func_start sub_080AFB94
sub_080AFB94: @ 0x080AFB94
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r4, r2, #0
	adds r1, r3, #0
	ldr r0, _080AFBC0 @ =0x08DAF5FC
	bl Proc_StartBlocking
	adds r1, r0, #0
	adds r0, #0x64
	movs r2, #0
	strh r5, [r0]
	str r4, [r1, #0x58]
	subs r0, #0x16
	strh r2, [r0]
	cmp r6, #1
	beq _080AFBD0
	cmp r6, #1
	bgt _080AFBC4
	cmp r6, #0
	beq _080AFBCA
	b _080AFBE0
	.align 2, 0
_080AFBC0: .4byte 0x08DAF5FC
_080AFBC4:
	cmp r6, #2
	beq _080AFBD8
	b _080AFBE0
_080AFBCA:
	movs r0, #0x80
	str r0, [r1, #0x5c]
	b _080AFBDE
_080AFBD0:
	str r2, [r1, #0x5c]
	movs r0, #0x80
	lsls r0, r0, #2
	b _080AFBDE
_080AFBD8:
	str r2, [r1, #0x5c]
	movs r0, #0x80
	lsls r0, r0, #3
_080AFBDE:
	str r0, [r1, #0x60]
_080AFBE0:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080AFBE8
sub_080AFBE8: @ 0x080AFBE8
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r4, r2, #0
	adds r1, r3, #0
	ldr r0, _080AFC14 @ =0x08DAF62C
	bl Proc_StartBlocking
	adds r1, r0, #0
	adds r0, #0x64
	movs r2, #0
	strh r5, [r0]
	str r4, [r1, #0x58]
	subs r0, #0x16
	strh r2, [r0]
	cmp r6, #1
	beq _080AFC24
	cmp r6, #1
	bgt _080AFC18
	cmp r6, #0
	beq _080AFC1E
	b _080AFC34
	.align 2, 0
_080AFC14: .4byte 0x08DAF62C
_080AFC18:
	cmp r6, #2
	beq _080AFC2C
	b _080AFC34
_080AFC1E:
	movs r0, #0x80
	str r0, [r1, #0x5c]
	b _080AFC32
_080AFC24:
	str r2, [r1, #0x5c]
	movs r0, #0x80
	lsls r0, r0, #2
	b _080AFC32
_080AFC2C:
	str r2, [r1, #0x5c]
	movs r0, #0x80
	lsls r0, r0, #3
_080AFC32:
	str r0, [r1, #0x60]
_080AFC34:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080AFC3C
sub_080AFC3C: @ 0x080AFC3C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r4, _080AFCC0 @ =gDispIo
	movs r0, #8
	rsbs r0, r0, #0
	ldrb r1, [r4]
	ands r0, r1
	strb r0, [r4]
	movs r0, #0
	bl InitBgs
	bl sub_08055670
	bl sub_080647C8
	movs r5, #0
	str r5, [r6, #0x38]
	str r5, [r6, #0x3c]
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r4, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r4, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	adds r0, r6, #0
	adds r0, #0x34
	strb r5, [r0]
	adds r1, r6, #0
	adds r1, #0x2c
	movs r0, #2
	strb r0, [r1]
	adds r0, r6, #0
	adds r0, #0x32
	strb r5, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AFCC0: .4byte gDispIo

	thumb_func_start sub_080AFCC4
sub_080AFCC4: @ 0x080AFCC4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AFD1C @ =0x08DAE43C
	bl Proc_Find
	bl Proc_End
	ldr r0, _080AFD20 @ =0x08DAE46C
	bl Proc_Find
	bl Proc_End
	adds r0, r4, #0
	bl sub_080AAC88
	movs r0, #1
	bl sub_080034C8
	ldr r2, _080AFD24 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #0
	bl sub_08013200
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AFD1C: .4byte 0x08DAE43C
_080AFD20: .4byte 0x08DAE46C
_080AFD24: .4byte gDispIo

	thumb_func_start sub_080AFD28
sub_080AFD28: @ 0x080AFD28
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r4, #0
	adds r6, #0x2c
	ldrb r0, [r6]
	cmp r0, #2
	beq _080AFD46
	cmp r0, #2
	bgt _080AFD40
	cmp r0, #1
	beq _080AFD8E
	b _080AFDA2
_080AFD40:
	cmp r0, #3
	beq _080AFD80
	b _080AFDA2
_080AFD46:
	adds r0, r4, #0
	adds r0, #0x33
	ldrb r0, [r0]
	adds r5, r4, #0
	adds r5, #0x34
	ldrb r1, [r5]
	bl sub_080B10D4
	str r0, [r4, #0x4c]
	cmp r0, #0
	bne _080AFD6C
	movs r0, #1
	bl sub_08013200
	adds r0, r4, #0
	movs r1, #4
	bl Proc_Goto
	b _080AFDA2
_080AFD6C:
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	movs r0, #1
	strb r0, [r6]
	ldr r1, [r4, #0x4c]
	adds r0, r4, #0
	bl sub_080B0170
	b _080AFDA2
_080AFD80:
	ldr r1, [r4, #0x4c]
	adds r0, r4, #0
	bl sub_080B0EBC
	movs r0, #1
	strb r0, [r6]
	b _080AFDA2
_080AFD8E:
	ldr r0, _080AFDA8 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0xb
	ldrh r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _080AFDA2
	adds r0, r4, #0
	bl sub_080AFCC4
_080AFDA2:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AFDA8: .4byte gpKeySt

	thumb_func_start sub_080AFDAC
sub_080AFDAC: @ 0x080AFDAC
	push {lr}
	ldr r0, _080AFDD0 @ =0x08DAF65C
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	beq _080AFDD4
	adds r0, #0x33
	ldrb r0, [r0]
	adds r1, #0x34
	ldrb r1, [r1]
	bl sub_080B10D4
	cmp r0, #0
	bne _080AFDD4
	movs r0, #1
	b _080AFDD6
	.align 2, 0
_080AFDD0: .4byte 0x08DAF65C
_080AFDD4:
	movs r0, #0
_080AFDD6:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080AFDDC
sub_080AFDDC: @ 0x080AFDDC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AFDF4 @ =0x08DAF65C
	bl Proc_Find
	cmp r0, #0
	beq _080AFDEE
	adds r0, #0x2c
	strb r4, [r0]
_080AFDEE:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AFDF4: .4byte 0x08DAF65C

	thumb_func_start sub_080AFDF8
sub_080AFDF8: @ 0x080AFDF8
	push {lr}
	movs r0, #3
	bl sub_080034C8
	pop {r0}
	bx r0

	thumb_func_start sub_080AFE04
sub_080AFE04: @ 0x080AFE04
	push {lr}
	bl sub_080AAC88
	bl sub_08055690
	movs r0, #0
	bl sub_08012D60
	bl sub_080647F8
	pop {r0}
	bx r0

	thumb_func_start sub_080AFE1C
sub_080AFE1C: @ 0x080AFE1C
	push {r4, lr}
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _080AFE34 @ =0x08DAF65C
	bl Proc_StartBlocking
	adds r0, #0x33
	strb r4, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AFE34: .4byte 0x08DAF65C

	thumb_func_start sub_080AFE38
sub_080AFE38: @ 0x080AFE38
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	str r2, [sp, #8]
	str r3, [sp, #0xc]
	ldr r2, [sp, #0x30]
	ldr r3, [sp, #0x34]
	ldr r4, [sp, #0x38]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #4]
	lsls r1, r1, #0x18
	lsrs r7, r1, #0x18
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	mov sl, r2
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov r8, r3
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	movs r5, #1
	ldr r2, _080AFE94 @ =gPal
	movs r0, #0x80
	lsls r0, r0, #1
	ldr r1, _080AFE98 @ =0x0000021E
	adds r6, r2, r1
	adds r0, r4, r0
	lsls r1, r7, #5
	lsls r0, r0, #1
	adds r0, r0, r2
	adds r3, r0, #2
	ldr r0, _080AFE9C @ =0x00000222
	adds r1, r1, r0
	adds r1, r1, r2
_080AFE84:
	adds r0, r5, r4
	cmp r0, #0xf
	ble _080AFEA0
	ldrh r0, [r6]
	strh r0, [r1]
	adds r2, r7, #1
	mov sb, r2
	b _080AFEA8
	.align 2, 0
_080AFE94: .4byte gPal
_080AFE98: .4byte 0x0000021E
_080AFE9C: .4byte 0x00000222
_080AFEA0:
	ldrh r0, [r3]
	strh r0, [r1]
	adds r0, r7, #1
	mov sb, r0
_080AFEA8:
	adds r1, #2
	adds r3, #2
	adds r5, #1
	cmp r5, #0xf
	ble _080AFE84
	bl EnablePalSync
	mov r1, sl
	cmp r1, #7
	bhi _080AFEC0
	movs r2, #8
	mov sl, r2
_080AFEC0:
	mov r4, r8
	cmp r4, #7
	bhi _080AFECA
	movs r0, #8
	mov r8, r0
_080AFECA:
	ldr r4, _080AFF64 @ =gSinLut
	ldr r1, _080AFF68 @ =0x080C0F18
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, sl
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	mov r1, sl
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	ldr r1, _080AFF68 @ =0x080C0F18
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	adds r0, r7, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	ldr r0, _080AFF6C @ =0x000001FF
	ldr r4, [sp, #8]
	ands r4, r0
	lsls r1, r7, #9
	adds r1, r4, r1
	ldr r2, [sp, #0xc]
	ands r2, r0
	str r2, [sp, #0xc]
	ldr r3, _080AFF70 @ =0x08DAF6B4
	ldr r4, [sp, #4]
	adds r0, r4, r7
	lsls r0, r0, #2
	movs r2, #0xf
	mov r4, sb
	ands r4, r2
	lsls r2, r4, #0xc
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #4
	ldr r2, [sp, #0xc]
	bl sub_080068C4
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AFF64: .4byte gSinLut
_080AFF68: .4byte 0x080C0F18
_080AFF6C: .4byte 0x000001FF
_080AFF70: .4byte 0x08DAF6B4

	thumb_func_start sub_080AFF74
sub_080AFF74: @ 0x080AFF74
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r3, _080B0030 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r3, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r3, #1]
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r2, r3, #0
	adds r2, #0x44
	movs r1, #0
	movs r0, #0x10
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x45
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	strh r1, [r5, #0x2a]
	movs r2, #0
	movs r1, #9
	adds r0, r5, #0
	adds r0, #0x58
_080AFFB8:
	str r2, [r0]
	subs r0, #4
	subs r1, #1
	cmp r1, #0
	bge _080AFFB8
	movs r0, #0
	str r0, [r5, #0x5c]
	ldr r0, [r5, #0x64]
	ldr r0, [r0, #8]
	ldr r1, _080B0034 @ =0x06010000
	bl sub_08013688
	ldr r0, _080B0038 @ =0x0844186C
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r4, _080B003C @ =0x0843FB60
	movs r1, #0xf0
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r1, #0xf8
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080B0040 @ =0x0843F1A4
	ldr r1, _080B0044 @ =0x06016000
	bl sub_08013688
	ldr r0, [r5, #0x64]
	ldrb r2, [r0, #0xd]
	lsls r1, r2, #3
	subs r1, r1, r2
	lsls r1, r1, #2
	movs r0, #0xf0
	subs r0, r0, r1
	asrs r0, r0, #1
	subs r0, #0x10
	strh r0, [r5, #0x2c]
	adds r0, r5, #0
	movs r1, #0
	bl sub_080B03B4
	str r0, [r5, #0x34]
	ldr r0, [r5, #0x64]
	ldrb r1, [r0, #0xf]
	adds r0, r5, #0
	bl sub_080B0694
	str r0, [r5, #0x5c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B0030: .4byte gDispIo
_080B0034: .4byte 0x06010000
_080B0038: .4byte 0x0844186C
_080B003C: .4byte 0x0843FB60
_080B0040: .4byte 0x0843F1A4
_080B0044: .4byte 0x06016000

	thumb_func_start sub_080B0048
sub_080B0048: @ 0x080B0048
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _080B009C @ =gDispIo
	mov ip, r0
	mov r3, ip
	adds r3, #0x3c
	movs r2, #0x3f
	ldrb r0, [r3]
	ands r2, r0
	movs r0, #0x80
	orrs r2, r0
	mov r0, ip
	adds r0, #0x44
	movs r5, #0
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
	ldrh r0, [r4, #0x2a]
	lsrs r1, r0, #1
	movs r0, #0x10
	subs r0, r0, r1
	mov r1, ip
	adds r1, #0x46
	strb r0, [r1]
	movs r0, #0x20
	orrs r2, r0
	strb r2, [r3]
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x20
	bne _080B0094
	strh r5, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
_080B0094:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B009C: .4byte gDispIo

	thumb_func_start sub_080B00A0
sub_080B00A0: @ 0x080B00A0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x5f
	bls _080B00B4
	adds r0, r4, #0
	bl Proc_Break
	movs r0, #0
	b _080B00F6
_080B00B4:
	cmp r0, #0xf
	bls _080B00F2
	ldrh r1, [r4, #0x2a]
	adds r6, r1, #0
	subs r6, #0x10
	movs r0, #3
	ands r0, r6
	cmp r0, #0
	bne _080B00F2
	adds r0, r6, #0
	cmp r6, #0
	bge _080B00D0
	adds r0, r1, #0
	subs r0, #0xd
_080B00D0:
	asrs r0, r0, #2
	adds r5, r0, #1
	ldr r0, [r4, #0x64]
	ldrb r0, [r0, #0xd]
	cmp r5, r0
	bge _080B00F2
	lsls r1, r5, #0x18
	lsrs r1, r1, #0x18
	adds r0, r4, #0
	bl sub_080B03B4
	adds r2, r0, #0
	lsls r1, r5, #2
	adds r0, r4, #0
	adds r0, #0x34
	adds r0, r0, r1
	str r2, [r0]
_080B00F2:
	ldrh r0, [r4, #0x2a]
	adds r0, #1
_080B00F6:
	strh r0, [r4, #0x2a]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B0100
sub_080B0100: @ 0x080B0100
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x14
	bne _080B0112
	ldr r0, [r4, #0x5c]
	movs r1, #4
	bl Proc_Goto
_080B0112:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x4f
	bls _080B0122
	adds r0, r4, #0
	bl Proc_Break
	movs r0, #0
	b _080B0158
_080B0122:
	ldrh r5, [r4, #0x2a]
	adds r0, r5, #0
	movs r1, #6
	bl __umodsi3
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080B0154
	adds r0, r5, #0
	movs r1, #6
	bl __udivsi3
	ldr r1, [r4, #0x64]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrb r1, [r1, #0xd]
	cmp r0, r1
	bhs _080B0154
	lsls r0, r0, #2
	adds r1, r4, #0
	adds r1, #0x34
	adds r1, r1, r0
	ldr r0, [r1]
	bl Proc_Break
_080B0154:
	ldrh r0, [r4, #0x2a]
	adds r0, #1
_080B0158:
	strh r0, [r4, #0x2a]
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080B0160
sub_080B0160: @ 0x080B0160
	push {lr}
	bl sub_080AAC88
	movs r0, #3
	bl sub_080AFDDC
	pop {r0}
	bx r0

	thumb_func_start sub_080B0170
sub_080B0170: @ 0x080B0170
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _080B0188 @ =0x08DAF6BC
	adds r1, r4, #0
	bl Proc_Start
	str r4, [r0, #0x60]
	str r5, [r0, #0x64]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080B0188: .4byte 0x08DAF6BC

	thumb_func_start sub_080B018C
sub_080B018C: @ 0x080B018C
	push {r4, lr}
	adds r3, r0, #0
	movs r0, #0
	strh r0, [r3, #0x2a]
	ldr r0, [r3, #0x14]
	ldr r0, [r0, #0x64]
	ldrb r1, [r0, #0xc]
	adds r0, r3, #0
	adds r0, #0x2c
	strb r1, [r0]
	ldr r1, [r3, #0x14]
	adds r2, r3, #0
	adds r2, #0x2d
	ldrb r4, [r2]
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #2
	ldrh r1, [r1, #0x2c]
	adds r0, r1, r0
	strh r0, [r3, #0x2e]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B01BC
sub_080B01BC: @ 0x080B01BC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	adds r7, r0, #0
	movs r0, #0x2d
	adds r0, r0, r7
	mov sb, r0
	ldrb r1, [r0]
	str r1, [sp, #0xc]
	cmp r1, #0
	bne _080B029C
	ldr r3, _080B0294 @ =gSinLut
	movs r2, #0xa0
	lsls r2, r2, #1
	adds r0, r3, r2
	movs r1, #0
	ldrsh r4, [r0, r1]
	asrs r4, r4, #6
	mov sl, r4
	adds r0, r3, #0
	adds r0, #0xc0
	movs r2, #0
	ldrsh r0, [r0, r2]
	lsls r5, r0, #1
	adds r5, r5, r0
	asrs r5, r5, #9
	ldrh r0, [r7, #0x2a]
	movs r2, #0xc0
	subs r2, r2, r0
	movs r1, #0xff
	ands r2, r1
	adds r1, r2, #0
	adds r1, #0x40
	lsls r1, r1, #1
	adds r1, r1, r3
	movs r4, #0
	ldrsh r1, [r1, r4]
	asrs r6, r1, #6
	lsls r2, r2, #1
	adds r2, r2, r3
	movs r1, #0
	ldrsh r2, [r2, r1]
	lsls r1, r2, #1
	adds r1, r1, r2
	asrs r3, r1, #9
	lsls r0, r0, #8
	movs r1, #0x60
	str r3, [sp, #0x14]
	bl __divsi3
	movs r2, #0x80
	lsls r2, r2, #2
	adds r1, r2, #0
	subs r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	adds r0, r7, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	mov r8, r0
	mov r4, sb
	ldrb r4, [r4]
	mov sb, r4
	movs r0, #0x2e
	ldrsh r4, [r7, r0]
	adds r4, r4, r6
	mov r2, sl
	subs r4, r4, r2
	ldr r0, _080B0298 @ =0x000001FF
	ands r4, r0
	subs r5, #0x18
	ldr r3, [sp, #0x14]
	subs r5, r3, r5
	ands r5, r0
	str r1, [sp]
	str r1, [sp, #4]
	ldrh r0, [r7, #0x2a]
	movs r1, #0xc
	bl __divsi3
	movs r1, #8
	subs r1, r1, r0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	str r1, [sp, #8]
	mov r0, r8
	mov r1, sb
	adds r2, r4, #0
	adds r3, r5, #0
	bl sub_080AFE38
	ldrh r0, [r7, #0x2a]
	adds r0, #4
	strh r0, [r7, #0x2a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x60
	bne _080B02F0
	mov r4, sp
	ldrh r4, [r4, #0xc]
	strh r4, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_Break
	b _080B02F0
	.align 2, 0
_080B0294: .4byte gSinLut
_080B0298: .4byte 0x000001FF
_080B029C:
	ldrh r1, [r7, #0x2a]
	adds r0, r1, #0
	adds r2, r1, #0
	asrs r4, r0, #4
	movs r0, #0x10
	subs r6, r0, r4
	adds r3, r6, #0
	adds r0, r7, #0
	adds r0, #0x2c
	ldrb r5, [r0]
	mov r0, sb
	ldrb r6, [r0]
	movs r2, #0x2e
	ldrsh r0, [r7, r2]
	subs r2, r0, r3
	movs r0, #0x18
	subs r3, r0, r3
	str r1, [sp]
	adds r0, #0xe8
	mov r8, r0
	str r0, [sp, #4]
	movs r0, #0x10
	subs r0, r0, r4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #8]
	adds r0, r5, #0
	adds r1, r6, #0
	bl sub_080AFE38
	ldrh r0, [r7, #0x2a]
	adds r0, #0x10
	strh r0, [r7, #0x2a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, r8
	bne _080B02F0
	movs r0, #0
	strh r0, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_Break
_080B02F0:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B0300
sub_080B0300: @ 0x080B0300
	push {r4, r5, lr}
	sub sp, #0xc
	adds r5, r0, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	adds r1, r5, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	movs r3, #0x2e
	ldrsh r2, [r5, r3]
	movs r3, #0x80
	lsls r3, r3, #1
	str r3, [sp]
	str r3, [sp, #4]
	movs r4, #0
	str r4, [sp, #8]
	movs r3, #0x18
	bl sub_080AFE38
	strh r4, [r5, #0x2a]
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080B0330
sub_080B0330: @ 0x080B0330
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0xc
	adds r6, r0, #0
	ldrh r1, [r6, #0x2a]
	movs r7, #0x80
	lsls r7, r7, #1
	adds r2, r1, r7
	subs r3, r7, r1
	movs r0, #0x2e
	ldrsh r4, [r6, r0]
	adds r5, r4, #0
	subs r5, #0x58
	adds r0, r5, #0
	muls r0, r1, r0
	muls r0, r1, r0
	asrs r5, r0, #0xf
	adds r0, r6, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	mov ip, r0
	movs r0, #0x2d
	adds r0, r0, r6
	mov r8, r0
	ldrb r1, [r0]
	adds r4, r4, r5
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	str r2, [sp]
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	str r3, [sp, #4]
	ldrh r0, [r6, #0x2a]
	asrs r0, r0, #4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #8]
	mov r0, ip
	adds r2, r4, #0
	movs r3, #0x18
	bl sub_080AFE38
	ldrh r2, [r6, #0x2a]
	cmp r2, r7
	bne _080B03A2
	ldr r0, [r6, #0x14]
	mov r3, r8
	ldrb r3, [r3]
	lsls r1, r3, #2
	adds r0, #0x34
	adds r0, r0, r1
	movs r1, #0
	str r1, [r0]
	adds r0, r6, #0
	bl Proc_Break
_080B03A2:
	ldrh r0, [r6, #0x2a]
	adds r0, #8
	strh r0, [r6, #0x2a]
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B03B4
sub_080B03B4: @ 0x080B03B4
	push {r4, lr}
	adds r2, r0, #0
	lsls r4, r1, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _080B03D0 @ =0x08DAF70C
	adds r1, r2, #0
	bl Proc_Start
	adds r1, r0, #0
	adds r1, #0x2d
	strb r4, [r1]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080B03D0: .4byte 0x08DAF70C

	thumb_func_start sub_080B03D4
sub_080B03D4: @ 0x080B03D4
	push {lr}
	bl EnablePalSync
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B03E0
sub_080B03E0: @ 0x080B03E0
	push {r4, r5, r6, r7, lr}
	adds r3, r0, #0
	movs r0, #0
	strh r0, [r3, #0x2a]
	ldr r0, _080B0444 @ =gPal
	movs r1, #0
	movs r4, #0xf
	ldr r2, _080B0448 @ =0x000003FE
	adds r0, r0, r2
_080B03F2:
	strh r1, [r0]
	subs r0, #2
	subs r4, #1
	cmp r4, #0
	bge _080B03F2
	adds r0, r3, #0
	adds r0, #0x2e
	movs r1, #0
	strb r1, [r0]
	adds r2, r3, #0
	adds r2, #0x2d
	strb r1, [r2]
	movs r4, #0
	adds r7, r3, #0
	adds r7, #0x2c
	adds r6, r0, #0
	adds r5, r2, #0
_080B0414:
	ldrb r0, [r7]
	bl GetClassData
	adds r0, #0x2c
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0
	beq _080B0434
	movs r0, #1
	lsls r0, r4
	ldrb r1, [r6]
	orrs r0, r1
	strb r0, [r6]
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
_080B0434:
	adds r4, #1
	cmp r4, #7
	ble _080B0414
	bl EnablePalSync
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B0444: .4byte gPal
_080B0448: .4byte 0x000003FE

	thumb_func_start sub_080B044C
sub_080B044C: @ 0x080B044C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	lsls r1, r1, #0x18
	movs r7, #0xe0
	lsls r7, r7, #8
	cmp r1, #0
	beq _080B046A
	movs r7, #0xf0
	lsls r7, r7, #8
_080B046A:
	ldr r4, _080B04AC @ =0x08DAF900
	str r7, [sp]
	movs r0, #4
	movs r1, #0x74
	movs r2, #0x48
	adds r3, r4, #0
	bl sub_080068C4
	movs r5, #0
	cmp r5, r8
	bge _080B04D6
	mov sb, r4
	movs r6, #0x74
	movs r4, #0x74
_080B0486:
	mov r0, r8
	subs r0, #1
	cmp r5, r0
	bge _080B04B0
	str r7, [sp]
	movs r0, #4
	adds r1, r4, #0
	movs r2, #0x48
	mov r3, sb
	bl sub_080068C4
	str r7, [sp]
	movs r0, #4
	adds r1, r6, #0
	movs r2, #0x48
	mov r3, sb
	bl sub_080068C4
	b _080B04CC
	.align 2, 0
_080B04AC: .4byte 0x08DAF900
_080B04B0:
	str r7, [sp]
	movs r0, #4
	adds r1, r4, #0
	movs r2, #0x48
	ldr r3, _080B04E4 @ =0x08DAF8F8
	bl sub_080068C4
	str r7, [sp]
	movs r0, #4
	adds r1, r6, #0
	movs r2, #0x48
	ldr r3, _080B04E8 @ =0x08DAF908
	bl sub_080068C4
_080B04CC:
	adds r6, #8
	subs r4, #8
	adds r5, #1
	cmp r5, r8
	blt _080B0486
_080B04D6:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B04E4: .4byte 0x08DAF8F8
_080B04E8: .4byte 0x08DAF908

	thumb_func_start sub_080B04EC
sub_080B04EC: @ 0x080B04EC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov r8, r1
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	mov sb, r2
	movs r0, #0xe0
	lsls r0, r0, #8
	mov sl, r0
	cmp r5, #0
	beq _080B0518
	movs r1, #0xf0
	lsls r1, r1, #8
	mov sl, r1
_080B0518:
	movs r4, #0
	ldr r6, _080B05A8 @ =gPal
	movs r7, #0xf8
	lsls r7, r7, #2
	adds r3, r6, r7
	lsls r2, r5, #0x10
	movs r0, #0xf0
	lsls r0, r0, #1
	mov ip, r0
_080B052A:
	adds r0, r5, r4
	movs r1, #0xf
	cmp r0, #0xf
	bgt _080B0534
	lsrs r1, r2, #0x10
_080B0534:
	mov r7, ip
	adds r0, r1, r7
	lsls r0, r0, #1
	adds r0, r0, r6
	ldrh r0, [r0]
	strh r0, [r3]
	adds r3, #2
	movs r0, #0x80
	lsls r0, r0, #9
	adds r2, r2, r0
	adds r4, #1
	cmp r4, #0xf
	ble _080B052A
	bl EnablePalSync
	movs r4, #0
	mov r1, r8
	lsls r0, r1, #5
	subs r0, #0x88
	ldr r6, _080B05AC @ =0x08DAF8C4
	rsbs r5, r0, #0
_080B055E:
	mov r0, sb
	asrs r0, r4
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _080B0580
	ldr r1, _080B05B0 @ =0x000001FF
	ands r1, r5
	ldr r3, [r6]
	movs r0, #0xf0
	lsls r0, r0, #8
	str r0, [sp]
	movs r0, #4
	movs r2, #0x50
	bl sub_080068C4
	adds r5, #0x20
_080B0580:
	adds r6, #4
	adds r4, #1
	cmp r4, #7
	ble _080B055E
	ldr r3, _080B05B4 @ =0x08DAF8E4
	mov r7, sl
	str r7, [sp]
	movs r0, #4
	movs r1, #0x90
	movs r2, #0x50
	bl sub_080068C4
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B05A8: .4byte gPal
_080B05AC: .4byte 0x08DAF8C4
_080B05B0: .4byte 0x000001FF
_080B05B4: .4byte 0x08DAF8E4

	thumb_func_start sub_080B05B8
sub_080B05B8: @ 0x080B05B8
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	adds r1, r0, #0
	strh r0, [r4, #0x2a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0xd
	bhi _080B05D8
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	movs r1, #0
	bl sub_080B044C
	b _080B05EA
_080B05D8:
	movs r0, #0xe
	movs r1, #0
	bl sub_080B044C
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
_080B05EA:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080B05F0
sub_080B05F0: @ 0x080B05F0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	adds r1, r0, #0
	strh r0, [r4, #0x2a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x10
	bls _080B060E
	movs r5, #0
	adds r0, r4, #0
	bl Proc_Break
	b _080B0616
_080B060E:
	movs r0, #0x10
	subs r0, r0, r1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_080B0616:
	movs r0, #0xe
	movs r1, #0
	bl sub_080B044C
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r1, [r0]
	adds r0, #1
	ldrb r2, [r0]
	adds r0, r5, #0
	bl sub_080B04EC
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080B0634
sub_080B0634: @ 0x080B0634
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0xe
	movs r1, #0
	bl sub_080B044C
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r1, [r0]
	adds r0, #1
	ldrb r2, [r0]
	movs r0, #0
	bl sub_080B04EC
	movs r0, #0
	strh r0, [r4, #0x2a]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B065C
sub_080B065C: @ 0x080B065C
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #0x2a]
	adds r0, #1
	strh r0, [r2, #0x2a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x11
	cmp r0, #0x10
	bls _080B0676
	adds r0, r2, #0
	bl Proc_Break
	b _080B0690
_080B0676:
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r2, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	adds r2, #0x2e
	ldrb r2, [r2]
	bl sub_080B04EC
	movs r0, #0xe
	movs r1, #1
	bl sub_080B044C
_080B0690:
	pop {r0}
	bx r0

	thumb_func_start sub_080B0694
sub_080B0694: @ 0x080B0694
	push {r4, lr}
	adds r2, r0, #0
	lsls r4, r1, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _080B06B0 @ =0x08DAF744
	adds r1, r2, #0
	bl Proc_Start
	adds r1, r0, #0
	adds r1, #0x2c
	strb r4, [r1]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080B06B0: .4byte 0x08DAF744

	thumb_func_start sub_080B06B4
sub_080B06B4: @ 0x080B06B4
	ldr r0, _080B06DC @ =0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x6d
	bhi _080B06EC
	ldr r3, _080B06E0 @ =0x04000008
	ldrh r2, [r3]
	ldr r1, _080B06E4 @ =0x0000FFFC
	adds r0, r1, #0
	ands r0, r2
	adds r0, #2
	strh r0, [r3]
	ldr r2, _080B06E8 @ =0x0400000C
	ldrh r0, [r2]
	ands r1, r0
	adds r1, #2
	b _080B0702
	.align 2, 0
_080B06DC: .4byte 0x04000006
_080B06E0: .4byte 0x04000008
_080B06E4: .4byte 0x0000FFFC
_080B06E8: .4byte 0x0400000C
_080B06EC:
	ldr r3, _080B0708 @ =0x04000008
	ldrh r2, [r3]
	ldr r1, _080B070C @ =0x0000FFFC
	adds r0, r1, #0
	ands r0, r2
	adds r0, #1
	strh r0, [r3]
	ldr r2, _080B0710 @ =0x0400000C
	ldrh r0, [r2]
	ands r1, r0
	adds r1, #1
_080B0702:
	strh r1, [r2]
	bx lr
	.align 2, 0
_080B0708: .4byte 0x04000008
_080B070C: .4byte 0x0000FFFC
_080B0710: .4byte 0x0400000C

	thumb_func_start sub_080B0714
sub_080B0714: @ 0x080B0714
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r0, _080B07E0 @ =gDispIo
	mov ip, r0
	mov r2, ip
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	mov r1, ip
	adds r1, #0x44
	movs r2, #0
	movs r3, #0x10
	mov r8, r3
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x46
	strb r2, [r0]
	ldr r0, _080B07E4 @ =0x0000FFE0
	mov r1, ip
	ldrh r1, [r1, #0x3c]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	ldr r1, _080B07E8 @ =0x0000E0FF
	ands r0, r1
	movs r3, #0xe0
	lsls r3, r3, #5
	adds r1, r3, #0
	orrs r0, r1
	mov r1, ip
	strh r0, [r1, #0x3c]
	movs r5, #0x20
	ldrb r0, [r1, #1]
	orrs r0, r5
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r3, ip
	strb r0, [r3, #1]
	mov r0, ip
	adds r0, #0x2d
	strb r2, [r0]
	adds r0, #4
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x2c
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	mov r6, ip
	adds r6, #0x34
	movs r0, #1
	ldrb r1, [r6]
	orrs r1, r0
	movs r2, #2
	orrs r1, r2
	movs r4, #4
	orrs r1, r4
	movs r3, #8
	orrs r1, r3
	mov r2, r8
	orrs r1, r2
	mov r7, ip
	adds r7, #0x36
	ldrb r2, [r7]
	orrs r0, r2
	movs r2, #3
	rsbs r2, r2, #0
	ands r0, r2
	orrs r0, r4
	orrs r0, r3
	mov r3, r8
	orrs r0, r3
	orrs r1, r5
	strb r1, [r6]
	movs r1, #0x21
	rsbs r1, r1, #0
	ands r0, r1
	strb r0, [r7]
	mov r0, ip
	adds r0, #0x3d
	ldrb r1, [r0]
	orrs r5, r1
	strb r5, [r0]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B07E0: .4byte gDispIo
_080B07E4: .4byte 0x0000FFE0
_080B07E8: .4byte 0x0000E0FF

	thumb_func_start sub_080B07EC
sub_080B07EC: @ 0x080B07EC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x24
	mov sb, r0
	movs r0, #0
	str r0, [sp, #0x1c]
	add r1, sp, #4
	ldr r0, _080B0818 @ =0x0844BCB8
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	mov r1, sb
	ldr r0, [r1, #0x34]
	ldr r0, [r0, #0x1c]
	str r0, [r1, #0x38]
	movs r7, #4
	b _080B081E
	.align 2, 0
_080B0818: .4byte 0x0844BCB8
_080B081C:
	adds r7, #1
_080B081E:
	cmp r7, #7
	bgt _080B083A
	mov r2, sb
	ldr r0, [r2, #0x34]
	ldrb r0, [r0, #0xf]
	bl GetClassData
	adds r0, #0x2c
	adds r0, r0, r7
	ldrb r0, [r0]
	cmp r0, #0
	beq _080B081C
	movs r3, #1
	str r3, [sp, #0x1c]
_080B083A:
	movs r4, #0
	movs r0, #0
	mov r1, sb
	strh r0, [r1, #0x2a]
	strh r0, [r1, #0x2c]
	adds r1, #0x46
	movs r0, #0xfa
	strb r0, [r1]
	ldr r6, _080B0A18 @ =gBg0Tm
	adds r0, r6, #0
	movs r1, #0
	bl TmFill
	ldr r0, _080B0A1C @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r2, _080B0A20 @ =gBg2Tm
	mov r8, r2
	mov r0, r8
	movs r1, #0
	bl TmFill
	ldr r5, _080B0A24 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r3, [r5, #1]
	ands r0, r3
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r5, #1]
	adds r1, r5, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x45
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	bl sub_08005308
	bl ResetText
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r3, [r5, #0xc]
	ands r0, r3
	movs r2, #2
	orrs r0, r2
	strb r0, [r5, #0xc]
	adds r0, r1, #0
	ldrb r4, [r5, #0x10]
	ands r0, r4
	orrs r0, r2
	strb r0, [r5, #0x10]
	ldrb r0, [r5, #0x14]
	ands r1, r0
	orrs r1, r2
	strb r1, [r5, #0x14]
	movs r0, #3
	ldrb r1, [r5, #0x18]
	orrs r0, r1
	strb r0, [r5, #0x18]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r4, _080B0A28 @ =0x08421C64
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r5, #0xc0
	lsls r5, r5, #0x13
	adds r1, r1, r5
	adds r0, r4, #0
	bl sub_08013688
	ldr r0, _080B0A2C @ =0x08440300
	movs r1, #0xa0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080B0A30 @ =gBg3Tm
	ldr r1, _080B0A34 @ =0x08440320
	movs r2, #0xa0
	lsls r2, r2, #8
	bl TmApplyTsa_thm
	ldr r4, _080B0A38 @ =0x0843FBE0
	movs r0, #2
	bl GetBgChrOffset
	adds r1, r0, #0
	adds r1, r1, r5
	adds r0, r4, #0
	bl sub_08013688
	ldr r0, _080B0A3C @ =0x0843FDC8
	movs r1, #0x90
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r1, _080B0A40 @ =0x0843FDE8
	movs r2, #0x90
	lsls r2, r2, #8
	mov r0, r8
	bl TmApplyTsa_thm
	movs r0, #0xf
	bl EnableBgSync
	adds r0, r6, #0
	movs r1, #0
	bl TmFill
	mov r2, sb
	ldr r0, [r2, #0x34]
	ldrb r0, [r0, #0xf]
	bl GetClassData
	ldrb r0, [r0, #0xb]
	mov r4, sb
	adds r4, #0x40
	strb r0, [r4]
	mov r3, sb
	ldr r0, [r3, #0x34]
	ldrb r0, [r0, #0xf]
	bl GetClassData
	ldrb r0, [r0, #0xc]
	mov r1, sb
	adds r1, #0x41
	strb r0, [r1]
	mov r1, sb
	ldr r0, [r1, #0x34]
	ldrb r0, [r0, #0xf]
	bl GetClassData
	ldrb r0, [r0, #0xd]
	mov r1, sb
	adds r1, #0x42
	strb r0, [r1]
	mov r2, sb
	ldr r0, [r2, #0x34]
	ldrb r0, [r0, #0xf]
	bl GetClassData
	ldrb r0, [r0, #0xe]
	mov r1, sb
	adds r1, #0x43
	strb r0, [r1]
	mov r3, sb
	ldr r0, [r3, #0x34]
	ldrb r0, [r0, #0xf]
	bl GetClassData
	ldrb r1, [r0, #0xf]
	mov r0, sb
	adds r0, #0x44
	strb r1, [r0]
	mov r1, sb
	ldr r0, [r1, #0x34]
	ldrb r0, [r0, #0xf]
	bl GetClassData
	ldrb r0, [r0, #0x10]
	mov r1, sb
	adds r1, #0x45
	strb r0, [r1]
	movs r7, #0
	str r4, [sp, #0x20]
	ldr r2, _080B0A44 @ =0x0200FB28
	mov r8, r2
	movs r3, #0x4a
	adds r3, r3, r6
	mov sl, r3
	adds r6, #0x42
	mov r5, r8
	add r4, sp, #4
_080B09E2:
	adds r0, r5, #0
	movs r1, #3
	bl InitText
	adds r0, r5, #0
	bl ClearText
	adds r0, r5, #0
	movs r1, #3
	bl Text_SetColor
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetCursor
	ldr r0, [sp, #0x1c]
	cmp r0, #0
	beq _080B0A4C
	cmp r7, #1
	bne _080B0A4C
	mov r0, r8
	adds r0, #8
	ldr r1, _080B0A48 @ =0x0844BCD0
	bl Text_DrawString
	b _080B0A54
	.align 2, 0
_080B0A18: .4byte gBg0Tm
_080B0A1C: .4byte gBg1Tm
_080B0A20: .4byte gBg2Tm
_080B0A24: .4byte gDispIo
_080B0A28: .4byte 0x08421C64
_080B0A2C: .4byte 0x08440300
_080B0A30: .4byte gBg3Tm
_080B0A34: .4byte 0x08440320
_080B0A38: .4byte 0x0843FBE0
_080B0A3C: .4byte 0x0843FDC8
_080B0A40: .4byte 0x0843FDE8
_080B0A44: .4byte 0x0200FB28
_080B0A48: .4byte 0x0844BCD0
_080B0A4C:
	ldr r1, [r4]
	adds r0, r5, #0
	bl Text_DrawString
_080B0A54:
	adds r0, r5, #0
	adds r1, r6, #0
	bl PutText
	ldr r1, [sp, #0x20]
	adds r0, r1, r7
	ldrb r2, [r0]
	mov r0, sl
	movs r1, #0
	bl sub_08006068
	movs r2, #0x80
	add sl, r2
	adds r6, #0x80
	adds r5, #8
	adds r4, #4
	adds r7, #1
	cmp r7, #5
	ble _080B09E2
	movs r5, #0
	mov r0, sb
	bl sub_080B10B8
	mov r3, sb
	str r0, [r3, #0x3c]
	movs r0, #0x80
	lsls r0, r0, #1
	movs r1, #2
	movs r2, #0
	bl InitTalk
	bl sub_08007DF4
	bl sub_0800968C
	bl sub_08007EF8
	mov r4, sb
	ldr r0, [r4, #0x34]
	ldr r2, [r0, #4]
	movs r0, #2
	movs r1, #0xf
	bl sub_08007EAC
	movs r0, #0
	bl sub_08007F84
	movs r0, #1
	bl sub_08007F24
	movs r0, #2
	bl sub_08007F24
	movs r0, #4
	bl sub_08007F24
	movs r0, #8
	bl sub_08007F24
	movs r0, #0x40
	bl sub_08007F24
	movs r0, #4
	bl sub_08007F68
	ldr r0, _080B0BB4 @ =gAnims
	ldr r3, [r4, #0x34]
	movs r1, #0xe
	ldrsb r1, [r3, r1]
	strh r1, [r0, #8]
	movs r1, #0x82
	lsls r1, r1, #1
	strh r1, [r0, #2]
	movs r1, #0x58
	strh r1, [r0, #4]
	ldrb r1, [r3, #0x11]
	strh r1, [r0, #6]
	movs r1, #6
	strh r1, [r0, #0xa]
	ldrb r1, [r3, #0x10]
	strb r1, [r0, #1]
	movs r4, #1
	strh r4, [r0, #0xc]
	movs r1, #0xc0
	lsls r1, r1, #1
	strh r1, [r0, #0xe]
	movs r1, #2
	strh r1, [r0, #0x10]
	ldr r1, _080B0BB8 @ =0x02000038
	str r1, [r0, #0x1c]
	ldr r1, _080B0BBC @ =0x02002038
	str r1, [r0, #0x24]
	ldr r1, _080B0BC0 @ =0x02007838
	str r1, [r0, #0x20]
	ldr r1, _080B0BC4 @ =0x020078D8
	str r1, [r0, #0x28]
	ldr r1, _080B0BC8 @ =0x0200A2D8
	str r1, [r0, #0x30]
	ldrb r2, [r3, #0x12]
	strh r2, [r1]
	ldrb r2, [r3, #0x13]
	strh r2, [r1, #2]
	ldrb r2, [r3, #0x14]
	strh r2, [r1, #4]
	ldrb r2, [r3, #0x15]
	strh r2, [r1, #6]
	ldrb r2, [r3, #0x16]
	strh r2, [r1, #8]
	movs r2, #0xa0
	lsls r2, r2, #2
	strh r2, [r1, #0xe]
	movs r3, #0xf
	strh r3, [r1, #0x10]
	subs r2, #0x80
	strh r2, [r1, #0xa]
	strh r3, [r1, #0xc]
	strh r4, [r1, #0x12]
	ldr r2, _080B0BCC @ =gBg1Tm
	str r2, [r1, #0x14]
	ldr r2, _080B0BD0 @ =0x0200A300
	str r2, [r1, #0x18]
	ldr r2, _080B0BD4 @ =0x0200C300
	str r2, [r1, #0x1c]
	ldr r2, _080B0BD8 @ =0x0200CB00
	str r2, [r1, #0x20]
	ldr r2, _080B0BDC @ =sub_080B0714
	str r2, [r1, #0x24]
	bl sub_080556B0
	ldr r4, _080B0BE0 @ =0x0200DB00
	mov r0, sb
	ldr r1, [r0, #0x34]
	ldrb r0, [r1, #0x17]
	strh r0, [r4]
	movs r0, #0xa
	strh r0, [r4, #2]
	movs r0, #0xe0
	lsls r0, r0, #2
	strh r0, [r4, #4]
	ldrb r0, [r1, #0x18]
	strh r0, [r4, #6]
	movs r0, #0xb
	strh r0, [r4, #8]
	movs r0, #0xf0
	lsls r0, r0, #2
	strh r0, [r4, #0xa]
	strh r5, [r4, #0xc]
	ldr r0, _080B0BE4 @ =0x0000FFFF
	strh r0, [r4, #0xe]
	ldr r0, _080B0BE8 @ =0x06010000
	str r0, [r4, #0x1c]
	ldr r0, _080B0BEC @ =0x0200DB28
	str r0, [r4, #0x20]
	adds r0, r4, #0
	bl sub_08055718
	movs r3, #0x98
	lsls r3, r3, #1
	movs r0, #0x68
	str r0, [sp]
	adds r0, r4, #0
	movs r1, #0xd0
	movs r2, #0x68
	bl sub_08055AF0
	ldr r0, _080B0BF0 @ =sub_080B06B4
	bl SetOnHBlankA
	add sp, #0x24
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B0BB4: .4byte gAnims
_080B0BB8: .4byte 0x02000038
_080B0BBC: .4byte 0x02002038
_080B0BC0: .4byte 0x02007838
_080B0BC4: .4byte 0x020078D8
_080B0BC8: .4byte 0x0200A2D8
_080B0BCC: .4byte gBg1Tm
_080B0BD0: .4byte 0x0200A300
_080B0BD4: .4byte 0x0200C300
_080B0BD8: .4byte 0x0200CB00
_080B0BDC: .4byte sub_080B0714
_080B0BE0: .4byte 0x0200DB00
_080B0BE4: .4byte 0x0000FFFF
_080B0BE8: .4byte 0x06010000
_080B0BEC: .4byte 0x0200DB28
_080B0BF0: .4byte sub_080B06B4

	thumb_func_start sub_080B0BF4
sub_080B0BF4: @ 0x080B0BF4
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0xc8
	lsls r0, r0, #1
	ldrh r1, [r4, #0x2c]
	cmp r1, r0
	bne _080B0C24
	bl sub_080AFDAC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B0C1C
	movs r0, #0x3c
	bl sub_080034C8
	adds r0, r4, #0
	movs r1, #7
	bl Proc_Goto
	b _080B0C24
_080B0C1C:
	adds r0, r4, #0
	movs r1, #4
	bl Proc_Goto
_080B0C24:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080B0C30
sub_080B0C30: @ 0x080B0C30
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	movs r0, #0x46
	adds r0, r0, r7
	mov sb, r0
	movs r0, #0x50
	ldrh r1, [r7, #0x2a]
	subs r0, r0, r1
	movs r1, #0xe
	bl __divsi3
	adds r0, #1
	mov r2, sb
	ldrb r2, [r2]
	subs r0, r2, r0
	mov r1, sb
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xb3
	bhi _080B0C68
	movs r0, #0xb4
	strb r0, [r1]
_080B0C68:
	ldr r2, _080B0D18 @ =gDispIo
	mov ip, r2
	movs r2, #1
	mov r1, ip
	ldrb r0, [r1, #1]
	orrs r0, r2
	movs r1, #2
	mov r8, r1
	mov r1, r8
	orrs r0, r1
	movs r1, #4
	mov sl, r1
	mov r1, sl
	orrs r0, r1
	movs r5, #8
	orrs r0, r5
	movs r4, #0x10
	orrs r0, r4
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r1, ip
	strb r0, [r1, #1]
	mov r0, ip
	adds r0, #0x2d
	movs r1, #0
	strb r1, [r0]
	ldrh r6, [r7, #0x2a]
	adds r1, r6, #0
	movs r0, #0x50
	subs r0, r0, r1
	mov r3, ip
	adds r3, #0x31
	strb r0, [r3]
	subs r3, #5
	movs r0, #0xf0
	strb r0, [r3]
	adds r1, #0x50
	mov r0, ip
	adds r0, #0x30
	strb r1, [r0]
	adds r0, #4
	ldrb r1, [r0]
	orrs r2, r1
	mov r1, r8
	orrs r2, r1
	mov r1, sl
	orrs r2, r1
	orrs r2, r5
	orrs r2, r4
	strb r2, [r0]
	mov r2, ip
	adds r2, #0x36
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2]
	lsls r0, r6, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x50
	bne _080B0D20
	movs r0, #0xb4
	mov r2, sb
	strb r0, [r2]
	movs r0, #0
	strh r0, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_Break
	ldr r0, _080B0D1C @ =sub_080B0BF4
	adds r1, r7, #0
	bl sub_080AA20C
	b _080B0D24
	.align 2, 0
_080B0D18: .4byte gDispIo
_080B0D1C: .4byte sub_080B0BF4
_080B0D20:
	adds r0, r6, #4
	strh r0, [r7, #0x2a]
_080B0D24:
	ldr r0, _080B0D5C @ =gAnims
	adds r4, r7, #0
	adds r4, #0x46
	ldrb r1, [r4]
	movs r2, #0x58
	bl sub_080555F8
	ldr r0, _080B0D60 @ =0x0200DB00
	ldrb r3, [r4]
	adds r1, r3, #0
	subs r1, #0x30
	adds r3, #0x30
	movs r2, #0x68
	str r2, [sp]
	bl sub_08055AF0
	ldr r0, [r7, #0x3c]
	movs r1, #0x78
	bl sub_080B10CC
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B0D5C: .4byte gAnims
_080B0D60: .4byte 0x0200DB00

	thumb_func_start sub_080B0D64
sub_080B0D64: @ 0x080B0D64
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x38]
	ldrb r0, [r0]
	cmp r0, #8
	bhi _080B0DEA
	lsls r0, r0, #2
	ldr r1, _080B0D7C @ =_080B0D80
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080B0D7C: .4byte _080B0D80
_080B0D80: @ jump table
	.4byte _080B0DA4 @ case 0
	.4byte _080B0DAE @ case 1
	.4byte _080B0DB8 @ case 2
	.4byte _080B0DC4 @ case 3
	.4byte _080B0DD0 @ case 4
	.4byte _080B0DEA @ case 5
	.4byte _080B0DE0 @ case 6
	.4byte _080B0DC4 @ case 7
	.4byte _080B0DEA @ case 8
_080B0DA4:
	adds r0, r4, #0
	movs r1, #0xa
	bl Proc_Goto
	b _080B0DEA
_080B0DAE:
	ldr r0, _080B0DB4 @ =gAnims
	movs r1, #0
	b _080B0DD4
	.align 2, 0
_080B0DB4: .4byte gAnims
_080B0DB8:
	ldr r0, _080B0DC0 @ =gAnims
	movs r1, #1
	b _080B0DD4
	.align 2, 0
_080B0DC0: .4byte gAnims
_080B0DC4:
	ldr r0, _080B0DCC @ =gAnims
	bl sub_08055644
	b _080B0DEA
	.align 2, 0
_080B0DCC: .4byte gAnims
_080B0DD0:
	ldr r0, _080B0DDC @ =gAnims
	movs r1, #2
_080B0DD4:
	strh r1, [r0, #0xa]
	bl sub_08055474
	b _080B0DEA
	.align 2, 0
_080B0DDC: .4byte gAnims
_080B0DE0:
	ldr r0, _080B0DF4 @ =gAnims
	movs r1, #4
	strh r1, [r0, #0xa]
	bl sub_08055474
_080B0DEA:
	movs r0, #0
	strh r0, [r4, #0x2a]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B0DF4: .4byte gAnims

	thumb_func_start sub_080B0DF8
sub_080B0DF8: @ 0x080B0DF8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x38]
	ldrb r0, [r0]
	subs r0, #1
	cmp r0, #7
	bhi _080B0E70
	lsls r0, r0, #2
	ldr r1, _080B0E10 @ =_080B0E14
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080B0E10: .4byte _080B0E14
_080B0E14: @ jump table
	.4byte _080B0E34 @ case 0
	.4byte _080B0E34 @ case 1
	.4byte _080B0E34 @ case 2
	.4byte _080B0E34 @ case 3
	.4byte _080B0E3A @ case 4
	.4byte _080B0E34 @ case 5
	.4byte _080B0E34 @ case 6
	.4byte _080B0E58 @ case 7
_080B0E34:
	ldr r0, [r4, #0x38]
	adds r0, #2
	b _080B0E4E
_080B0E3A:
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	ldr r1, [r4, #0x38]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrb r2, [r1, #1]
	cmp r0, r2
	blo _080B0E70
	adds r0, r1, #2
_080B0E4E:
	str r0, [r4, #0x38]
	adds r0, r4, #0
	bl Proc_Break
	b _080B0E70
_080B0E58:
	ldr r0, _080B0E78 @ =gAnims
	bl sub_08055624
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B0E70
	ldr r0, [r4, #0x38]
	adds r0, #2
	str r0, [r4, #0x38]
	adds r0, r4, #0
	bl Proc_Break
_080B0E70:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B0E78: .4byte gAnims

	thumb_func_start sub_080B0E7C
sub_080B0E7C: @ 0x080B0E7C
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	bl SetOnHBlankA
	bl sub_08007EF8
	bl sub_080647F8
	ldr r0, _080B0EB4 @ =0x0200DB00
	bl sub_08055AC4
	bl sub_080647DC
	ldr r0, _080B0EB8 @ =gAnims
	bl sub_080556D8
	ldr r0, [r4, #0x3c]
	cmp r0, #0
	beq _080B0EA8
	bl Proc_End
_080B0EA8:
	movs r0, #2
	bl sub_080AFDDC
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B0EB4: .4byte 0x0200DB00
_080B0EB8: .4byte gAnims

	thumb_func_start sub_080B0EBC
sub_080B0EBC: @ 0x080B0EBC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _080B0ED8 @ =0x08DAF78C
	adds r1, r4, #0
	bl Proc_Start
	str r4, [r0, #0x30]
	str r5, [r0, #0x34]
	movs r1, #0
	str r1, [r0, #0x3c]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080B0ED8: .4byte 0x08DAF78C

	thumb_func_start sub_080B0EDC
sub_080B0EDC: @ 0x080B0EDC
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x14]
	str r0, [r4, #0x30]
	movs r1, #0
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r2, r4, #0
	adds r2, #0x34
	strb r1, [r2]
	adds r1, r4, #0
	adds r1, #0x35
	movs r0, #0xfa
	strb r0, [r1]
	movs r5, #0
	ldr r0, [r4, #0x30]
	ldr r0, [r0, #0x34]
	ldr r0, [r0]
	ldrb r0, [r0]
	cmp r0, #0
	beq _080B0F36
	adds r6, r2, #0
_080B0F08:
	ldr r0, [r4, #0x30]
	ldr r0, [r0, #0x34]
	ldr r0, [r0]
	adds r0, r0, r5
	ldrb r0, [r0]
	bl sub_080B1110
	ldrb r1, [r0, #5]
	ldrb r2, [r0, #4]
	subs r0, r1, r2
	ldrb r1, [r6]
	adds r0, r1, r0
	strb r0, [r6]
	adds r5, #1
	cmp r5, #0xd
	bgt _080B0F36
	ldr r0, [r4, #0x30]
	ldr r0, [r0, #0x34]
	ldr r0, [r0]
	adds r0, r0, r5
	ldrb r0, [r0]
	cmp r0, #0
	bne _080B0F08
_080B0F36:
	ldr r0, _080B0F50 @ =0x08440838
	ldr r1, _080B0F54 @ =0x06010000
	bl sub_08013688
	ldr r0, _080B0F58 @ =0x0844182C
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x40
	bl ApplyPaletteExt
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B0F50: .4byte 0x08440838
_080B0F54: .4byte 0x06010000
_080B0F58: .4byte 0x0844182C

	thumb_func_start sub_080B0F5C
sub_080B0F5C: @ 0x080B0F5C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	mov sl, r0
	movs r0, #0
	mov sb, r0
_080B0F6E:
	mov r1, sl
	ldr r0, [r1, #0x30]
	adds r0, #0x40
	add r0, sb
	ldrb r5, [r0]
	cmp r5, #0x1d
	bls _080B0F7E
	movs r5, #0x1e
_080B0F7E:
	movs r2, #0
	mov r8, r2
	lsrs r0, r5, #2
	mov r3, sb
	adds r3, #1
	str r3, [sp, #0xc]
	mov r1, sl
	adds r1, #0x34
	str r1, [sp, #4]
	mov r2, sl
	adds r2, #0x35
	str r2, [sp, #8]
	cmp r8, r0
	bge _080B0FCA
	adds r7, r0, #0
	movs r4, #0x30
	mov r3, sb
	lsls r6, r3, #4
	mov r8, r7
_080B0FA4:
	ldr r0, _080B1020 @ =0x08DAF874
	ldr r3, [r0, #0xc]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0xd
	adds r1, r4, #0
	adds r2, r6, #0
	adds r2, #0x10
	bl sub_080068C4
	adds r4, #8
	movs r1, #1
	rsbs r1, r1, #0
	add r8, r1
	mov r2, r8
	cmp r2, #0
	bne _080B0FA4
	mov r8, r7
_080B0FCA:
	movs r0, #3
	ands r0, r5
	cmp r0, #0
	beq _080B0FF4
	mov r3, r8
	lsls r1, r3, #3
	adds r1, #0x30
	mov r3, sb
	lsls r2, r3, #4
	adds r2, #0x10
	subs r0, #1
	lsls r0, r0, #2
	ldr r3, _080B1020 @ =0x08DAF874
	adds r0, r0, r3
	ldr r3, [r0]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0xd
	bl sub_080068C4
_080B0FF4:
	ldr r0, [sp, #0xc]
	mov sb, r0
	cmp r0, #5
	ble _080B0F6E
	movs r0, #0x78
	ldr r1, [sp, #4]
	ldrb r1, [r1]
	subs r0, r0, r1
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	ldr r2, [sp, #8]
	ldrb r3, [r2]
	adds r3, r3, r0
	mov r8, r3
	movs r0, #0
	mov sb, r0
	mov r2, sl
	ldr r1, [r2, #0x30]
	ldr r0, [r1, #0x34]
	ldr r0, [r0]
	b _080B1094
	.align 2, 0
_080B1020: .4byte 0x08DAF874
_080B1024:
	ldr r0, [r1, #0x34]
	ldr r0, [r0]
	add r0, sb
	ldrb r0, [r0]
	bl sub_080B1110
	adds r4, r0, #0
	ldr r3, [r4]
	cmp r3, #0
	beq _080B1080
	movs r1, #4
	ldrsb r1, [r4, r1]
	mov r0, r8
	subs r1, r0, r1
	movs r0, #6
	ldrsb r0, [r4, r0]
	movs r2, #8
	subs r2, r2, r0
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #4
	bl sub_080068C4
	movs r1, #4
	ldrsb r1, [r4, r1]
	mov r2, r8
	subs r1, r2, r1
	subs r1, #2
	movs r0, #6
	ldrsb r0, [r4, r0]
	movs r2, #6
	subs r2, r2, r0
	ldr r3, [r4]
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #4
	bl sub_080068C4
	movs r0, #5
	ldrsb r0, [r4, r0]
	movs r1, #4
	ldrsb r1, [r4, r1]
	subs r0, r0, r1
	add r8, r0
_080B1080:
	movs r3, #1
	add sb, r3
	mov r0, sb
	cmp r0, #0xd
	bgt _080B109A
	mov r2, sl
	ldr r1, [r2, #0x30]
	ldr r0, [r1, #0x34]
	ldr r0, [r0]
	add r0, sb
_080B1094:
	ldrb r0, [r0]
	cmp r0, #0
	bne _080B1024
_080B109A:
	mov r3, sl
	ldrh r0, [r3, #0x2a]
	cmp r0, #0xfe
	bhi _080B10A6
	adds r0, #1
	strh r0, [r3, #0x2a]
_080B10A6:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B10B8
sub_080B10B8: @ 0x080B10B8
	push {lr}
	adds r1, r0, #0
	ldr r0, _080B10C8 @ =0x08DAF82C
	bl Proc_Start
	pop {r1}
	bx r1
	.align 2, 0
_080B10C8: .4byte 0x08DAF82C

	thumb_func_start sub_080B10CC
sub_080B10CC: @ 0x080B10CC
	adds r0, #0x35
	strb r1, [r0]
	bx lr
	.align 2, 0

	thumb_func_start sub_080B10D4
sub_080B10D4: @ 0x080B10D4
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _080B1104 @ =0x08DB0454
	lsls r4, r4, #2
	adds r4, r4, r0
	adds r0, r5, #0
	movs r1, #6
	bl __divsi3
	ldr r1, [r4]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r4, [r0]
	cmp r4, #0
	beq _080B1108
	adds r0, r5, #0
	movs r1, #6
	bl __modsi3
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r0, [r0]
	b _080B110A
	.align 2, 0
_080B1104: .4byte 0x08DB0454
_080B1108:
	movs r0, #0
_080B110A:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_080B1110
sub_080B1110: @ 0x080B1110
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	adds r2, r1, #0
	adds r0, r1, #0
	subs r0, #0x61
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x19
	bhi _080B112C
	lsls r0, r1, #3
	ldr r1, _080B1128 @ =0x08DB02D4
	b _080B1140
	.align 2, 0
_080B1128: .4byte 0x08DB02D4
_080B112C:
	adds r0, r1, #0
	subs r0, #0x41
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x19
	bls _080B113C
	movs r0, #0
	b _080B1142
_080B113C:
	lsls r0, r2, #3
	ldr r1, _080B1144 @ =0x08DB04A4
_080B1140:
	adds r0, r0, r1
_080B1142:
	bx lr
	.align 2, 0
_080B1144: .4byte 0x08DB04A4

	thumb_func_start sub_080B1148
sub_080B1148: @ 0x080B1148
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _080B1168 @ =0x08DB0798
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x61
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	b _080B116C
	.align 2, 0
_080B1168: .4byte 0x08DB0798
_080B116C:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_080B1174
sub_080B1174: @ 0x080B1174
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, _080B11D8 @ =0x08DB078C
	ldr r2, [r7, #4]
	adds r1, r2, #0
	adds r2, #0x61
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r7]
	ldr r0, [r0]
	adds r1, r1, r0
	str r1, [r7, #8]
	bl sub_08007DF4
	bl sub_0800968C
	ldr r1, [r7, #8]
	adds r0, r1, #0
	bl DecodeMsg
	adds r2, r0, #0
	ldr r3, [r7, #4]
	movs r0, #8
	movs r1, #2
	bl sub_08007E08
	movs r0, #0
	bl sub_08007F84
	movs r0, #1
	bl sub_08007F24
	movs r0, #2
	bl sub_08007F24
	movs r0, #4
	bl sub_08007F24
	movs r0, #1
	bl sub_08008CB8
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B11D8: .4byte 0x08DB078C

	thumb_func_start sub_080B11DC
sub_080B11DC: @ 0x080B11DC
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r3, [r7, #4]
	ldr r0, [r7]
	movs r1, #0
	movs r2, #0
	bl sub_080B127C
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B11FC
sub_080B11FC: @ 0x080B11FC
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, [r7, #4]
	ldr r0, [r7]
	movs r2, #0
	movs r3, #0
	bl sub_080B127C
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B121C
sub_080B121C: @ 0x080B121C
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, [r7, #4]
	ldr r0, [r7]
	movs r2, #1
	movs r3, #0
	bl sub_080B127C
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B123C
sub_080B123C: @ 0x080B123C
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, [r7, #4]
	ldr r0, [r7]
	movs r2, #2
	movs r3, #0
	bl sub_080B127C
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B125C
sub_080B125C: @ 0x080B125C
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, [r7, #4]
	ldr r0, [r7]
	movs r2, #0
	movs r3, #0
	bl sub_080B127C
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B127C
sub_080B127C: @ 0x080B127C
	push {r7, lr}
	sub sp, #0x1c
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	adds r0, r2, #0
	str r3, [r7, #0xc]
	adds r1, r7, #0
	adds r1, #8
	strb r0, [r1]
	bl sub_0808667C
	ldr r0, [r7, #0xc]
	cmp r0, #0
	beq _080B12AC
	ldr r0, _080B12A8 @ =0x08DB081C
	ldr r1, [r7, #0xc]
	bl Proc_StartBlocking
	str r0, [r7, #0x10]
	b _080B12B8
	.align 2, 0
_080B12A8: .4byte 0x08DB081C
_080B12AC:
	ldr r1, _080B12E8 @ =0x08DB081C
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	str r0, [r7, #0x10]
_080B12B8:
	ldr r0, [r7, #0x10]
	adds r1, r7, #0
	adds r1, #8
	adds r2, r0, #0
	adds r0, #0x61
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, [r7, #0x10]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	ldr r0, [r7, #4]
	cmp r0, #0
	beq _080B12EC
	ldr r0, [r7, #4]
	str r0, [r7, #0x14]
	b _080B12F0
	.align 2, 0
_080B12E8: .4byte 0x08DB081C
_080B12EC:
	ldr r0, _080B12FC @ =0x08DB077C
	str r0, [r7, #0x14]
_080B12F0:
	movs r0, #0
	str r0, [r7, #0x18]
_080B12F4:
	ldr r0, [r7, #0x18]
	cmp r0, #0x14
	ble _080B1300
	b _080B1338
	.align 2, 0
_080B12FC: .4byte 0x08DB077C
_080B1300:
	adds r0, r7, #0
	adds r0, #0x14
	ldr r1, [r0]
	ldrh r2, [r1]
	adds r1, #2
	str r1, [r0]
	adds r0, r2, #0
	bl MakeNewItem
	ldr r1, [r7, #0x10]
	ldr r2, [r7, #0x18]
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r3, r1, #0
	adds r3, #0x30
	adds r1, r3, r2
	ldrh r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r0
	adds r0, r2, #0
	strh r0, [r1]
	ldr r0, [r7, #0x18]
	adds r1, r0, #1
	str r1, [r7, #0x18]
	b _080B12F4
_080B1338:
	ldr r1, [r7, #0x10]
	adds r0, r1, #0
	bl sub_080B1348
	add sp, #0x1c
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B1348
sub_080B1348: @ 0x080B1348
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	str r0, [r7, #4]
_080B1354:
	ldr r0, [r7]
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r0, #0x30
	adds r1, r0, r1
	ldrh r0, [r1]
	cmp r0, #0
	bne _080B1368
	b _080B1370
_080B1368:
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _080B1354
_080B1370:
	ldr r1, [r7]
	ldr r2, [r7, #4]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x5a
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r0, [r7]
	ldr r1, [r0, #0x2c]
	adds r0, r1, #0
	bl GetUnitItemCount
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x5b
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r0
	adds r0, r2, #0
	strb r0, [r1]
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B13B0
sub_080B13B0: @ 0x080B13B0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	ldr r1, _080B13D0 @ =0x08DB081C
	adds r0, r1, #0
	bl Proc_Find
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x60
	ldrb r0, [r1]
	cmp r0, #0
	bne _080B13D4
	b _080B13DA
	.align 2, 0
_080B13D0: .4byte 0x08DB081C
_080B13D4:
	ldr r0, [r7]
	bl sub_080B2714
_080B13DA:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B13E4
sub_080B13E4: @ 0x080B13E4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	ldr r1, _080B1404 @ =0x08DB081C
	adds r0, r1, #0
	bl Proc_Find
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x60
	ldrb r0, [r1]
	cmp r0, #1
	bne _080B1408
	b _080B140E
	.align 2, 0
_080B1404: .4byte 0x08DB081C
_080B1408:
	ldr r0, [r7]
	bl sub_080B2904
_080B140E:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B1418
sub_080B1418: @ 0x080B1418
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B1428
sub_080B1428: @ 0x080B1428
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x2c]
	cmp r1, #0
	bne _080B1442
	ldr r0, [r7]
	movs r1, #0xd
	bl Proc_Goto
	b _080B144A
_080B1442:
	movs r0, #9
	ldr r1, [r7]
	bl sub_080B1174
_080B144A:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B1454
sub_080B1454: @ 0x080B1454
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl sub_08009E60
	cmp r0, #1
	beq _080B147E
	cmp r0, #1
	bgt _080B146E
	cmp r0, #0
	beq _080B1474
	b _080B1474
_080B146E:
	cmp r0, #2
	beq _080B1488
	b _080B1474
_080B1474:
	ldr r0, [r7]
	movs r1, #0xc
	bl Proc_Goto
	b _080B14B0
_080B147E:
	ldr r0, [r7]
	movs r1, #1
	bl Proc_Goto
	b _080B14B0
_080B1488:
	ldr r0, [r7]
	ldr r1, [r0, #0x2c]
	adds r0, r1, #0
	bl GetUnitItemCount
	cmp r0, #0
	bne _080B14A8
	movs r0, #0x1b
	ldr r1, [r7]
	bl sub_080B1174
	ldr r0, [r7]
	movs r1, #7
	bl Proc_Goto
	b _080B14B0
_080B14A8:
	ldr r0, [r7]
	movs r1, #4
	bl Proc_Goto
_080B14B0:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B14B8
sub_080B14B8: @ 0x080B14B8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #0x12
	ldr r1, [r7]
	bl sub_080B1174
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B14D0
sub_080B14D0: @ 0x080B14D0
	push {r4, r5, r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, [r7]
	str r0, [r7, #8]
	ldr r1, [r7, #4]
	adds r0, r1, #0
	movs r1, #6
	bl DivRem
	str r0, [r7, #0xc]
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	movs r0, #4
	bl EnableBgSync
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	lsls r0, r1, #3
	ldr r2, _080B1524 @ =0x0203EE48
	adds r1, r0, r2
	adds r0, r1, #0
	bl ClearText
	ldr r0, [r7, #8]
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r0, #0x30
	adds r1, r0, r1
	ldrh r0, [r1]
	str r0, [r7, #0x10]
	ldr r0, [r7, #0x10]
	cmp r0, #0
	bne _080B1528
	b _080B1550
	.align 2, 0
_080B1524: .4byte 0x0203EE48
_080B1528:
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	lsls r0, r1, #3
	ldr r1, _080B1558 @ =0x0203EE48
	adds r0, r0, r1
	ldr r1, [r7, #0x10]
	ldr r3, [r7, #8]
	ldr r2, [r3, #0x2c]
	ldr r3, [r7, #4]
	adds r4, r3, #0
	lsls r3, r4, #1
	movs r4, #0x1f
	ands r3, r4
	lsls r4, r3, #5
	adds r3, r4, #0
	lsls r4, r3, #1
	ldr r5, _080B155C @ =0x02023C6E
	adds r3, r4, r5
	bl sub_080B2A9C
_080B1550:
	add sp, #0x14
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B1558: .4byte 0x0203EE48
_080B155C: .4byte 0x02023C6E

	thumb_func_start sub_080B1560
sub_080B1560: @ 0x080B1560
	push {r4, r5, r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, [r7]
	str r0, [r7, #8]
	ldr r1, [r7, #4]
	adds r0, r1, #0
	movs r1, #6
	bl DivRem
	str r0, [r7, #0xc]
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	movs r0, #4
	bl EnableBgSync
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	lsls r0, r1, #3
	ldr r2, _080B15B4 @ =0x0203EE48
	adds r1, r0, r2
	adds r0, r1, #0
	bl ClearText
	ldr r0, [r7, #8]
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r0, #0x30
	adds r1, r0, r1
	ldrh r0, [r1]
	str r0, [r7, #0x10]
	ldr r0, [r7, #0x10]
	cmp r0, #0
	bne _080B15B8
	b _080B15E0
	.align 2, 0
_080B15B4: .4byte 0x0203EE48
_080B15B8:
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	lsls r0, r1, #3
	ldr r1, _080B15E8 @ =0x0203EE48
	adds r0, r0, r1
	ldr r1, [r7, #0x10]
	ldr r3, [r7, #8]
	ldr r2, [r3, #0x2c]
	ldr r3, [r7, #4]
	adds r4, r3, #0
	lsls r3, r4, #1
	movs r4, #0x1f
	ands r3, r4
	lsls r4, r3, #5
	adds r3, r4, #0
	lsls r4, r3, #1
	ldr r5, _080B15EC @ =0x02023C6E
	adds r3, r4, r5
	bl sub_080B2AF8
_080B15E0:
	add sp, #0x14
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B15E8: .4byte 0x0203EE48
_080B15EC: .4byte 0x02023C6E

	thumb_func_start sub_080B15F0
sub_080B15F0: @ 0x080B15F0
	push {r4, r7, lr}
	sub sp, #0x10
	add r7, sp, #0xc
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5a
	ldrb r1, [r2]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r4, r3, #0
	adds r4, #0x5f
	ldrb r3, [r4]
	movs r2, #0x48
	str r2, [sp]
	ldr r2, _080B162C @ =sub_080B14D0
	str r2, [sp, #4]
	ldr r2, [r7]
	str r2, [sp, #8]
	movs r2, #5
	bl sub_080B30E0
	add sp, #0x10
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B162C: .4byte sub_080B14D0

	thumb_func_start sub_080B1630
sub_080B1630: @ 0x080B1630
	push {r4, r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	adds r0, r7, #4
	movs r1, #0
	strb r1, [r0]
	bl sub_080B31DC
	bl sub_080B332C
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r2, r0, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	adds r4, r0, #0
	bl sub_080B3310
	lsls r2, r4, #0x10
	lsrs r1, r2, #0x10
	lsls r2, r0, #0x10
	lsrs r0, r2, #0x10
	cmp r1, r0
	beq _080B1674
	adds r0, r7, #4
	movs r1, #1
	strb r1, [r0]
_080B1674:
	bl sub_080B3310
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x5c
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r0
	adds r0, r2, #0
	strb r0, [r1]
	bl sub_080B3350
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x5d
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r0
	adds r0, r2, #0
	strb r0, [r1]
	ldr r0, [r7]
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x5c
	adds r2, r0, #0
	adds r0, #0x5e
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, [r7]
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x5d
	adds r2, r0, #0
	adds r0, #0x5f
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5d
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r1, #0
	subs r2, #0x48
	subs r1, r0, r2
	movs r0, #0x38
	bl sub_0804A740
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x62
	ldrb r0, [r1]
	cmp r0, #0
	beq _080B1756
	adds r0, r7, #4
	movs r1, #0
	ldrsb r1, [r0, r1]
	cmp r1, #0
	beq _080B1756
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5d
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r1, #0
	subs r2, #0x48
	subs r1, r0, r2
	ldr r0, [r7]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x5c
	ldrb r2, [r3]
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r0, #0x30
	adds r3, r0, r2
	ldrh r2, [r3]
	movs r0, #0x38
	bl sub_080826EC
_080B1756:
	bl sub_080B2D50
	bl sub_080B33C4
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _080B1768
	b _080B18CC
_080B1768:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x62
	ldrb r0, [r1]
	cmp r0, #0
	beq _080B17AA
	ldr r1, _080B17A4 @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #0x81
	lsls r2, r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080B17A0
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x62
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	bl sub_080828A4
_080B17A0:
	b _080B18CC
	.align 2, 0
_080B17A4: .4byte gpKeySt
_080B17A8:
	b _080B1818
_080B17AA:
	ldr r1, _080B1814 @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080B1818
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x62
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5d
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r1, #0
	subs r2, #0x48
	subs r1, r0, r2
	ldr r0, [r7]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x5c
	ldrb r2, [r3]
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r0, #0x30
	adds r3, r0, r2
	ldrh r2, [r3]
	movs r0, #0x38
	bl sub_080826EC
	b _080B18CC
	.align 2, 0
_080B1814: .4byte gpKeySt
_080B1818:
	ldr r1, [r7]
	ldr r0, [r1, #0x2c]
	ldr r1, [r7]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x5c
	ldrb r2, [r3]
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r1, #0x30
	adds r2, r1, r2
	ldrh r1, [r2]
	bl sub_080B2B64
	lsls r1, r0, #0x10
	lsrs r0, r1, #0x10
	str r0, [r7, #8]
	ldr r1, _080B186C @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080B1888
	bl GetGold
	ldr r1, [r7, #8]
	cmp r1, r0
	ble _080B1870
	movs r0, #0x21
	ldr r1, [r7]
	bl sub_080B1174
	ldr r0, [r7]
	movs r1, #1
	bl Proc_Goto
	b _080B1886
	.align 2, 0
_080B186C: .4byte gpKeySt
_080B1870:
	ldr r1, [r7, #8]
	adds r0, r1, #0
	bl sub_08009E78
	movs r0, #0x24
	ldr r1, [r7]
	bl sub_080B1174
	ldr r0, [r7]
	bl Proc_Break
_080B1886:
	b _080B18CC
_080B1888:
	ldr r1, _080B18C0 @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #2
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080B18CC
	ldr r1, _080B18C4 @ =gPlaySt
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r0, [r1]
	lsls r1, r0, #0x1e
	lsrs r0, r1, #0x1f
	cmp r0, #0
	bne _080B18B6
	ldr r1, _080B18C8 @ =0x0000038B
	adds r0, r1, #0
	bl m4aSongNumStart
_080B18B6:
	ldr r0, [r7]
	movs r1, #7
	bl Proc_Goto
	b _080B18CC
	.align 2, 0
_080B18C0: .4byte gpKeySt
_080B18C4: .4byte gPlaySt
_080B18C8: .4byte 0x0000038B
_080B18CC:
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B18D4
sub_080B18D4: @ 0x080B18D4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl sub_08009E60
	cmp r0, #1
	beq _080B18F4
	cmp r0, #1
	bgt _080B18EE
	cmp r0, #0
	beq _080B18F6
	b _080B18F6
_080B18EE:
	cmp r0, #2
	beq _080B18F6
	b _080B18F6
_080B18F4:
	b _080B1900
_080B18F6:
	ldr r0, [r7]
	movs r1, #1
	bl Proc_Goto
	b _080B1900
_080B1900:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B1908
sub_080B1908: @ 0x080B1908
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5b
	ldrb r0, [r1]
	cmp r0, #4
	bls _080B1944
	bl sub_0802ECE4
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _080B1932
	movs r0, #0x2d
	ldr r1, [r7]
	bl sub_080B1174
	b _080B1942
_080B1932:
	movs r0, #0x30
	ldr r1, [r7]
	bl sub_080B1174
	ldr r0, [r7]
	movs r1, #0xb
	bl Proc_Goto
_080B1942:
	b _080B196E
_080B1944:
	ldr r1, [r7]
	ldr r0, [r1, #0x2c]
	ldr r1, [r7]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x5c
	ldrb r2, [r3]
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r1, #0x30
	adds r2, r1, r2
	ldrh r1, [r2]
	bl UnitAddItem
	ldr r0, [r7]
	bl sub_080B2E44
	ldr r0, [r7]
	movs r1, #3
	bl Proc_Goto
_080B196E:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B1978
sub_080B1978: @ 0x080B1978
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl sub_08009E60
	cmp r0, #1
	beq _080B1998
	cmp r0, #1
	bgt _080B1992
	cmp r0, #0
	beq _080B199A
	b _080B199A
_080B1992:
	cmp r0, #2
	beq _080B199A
	b _080B199A
_080B1998:
	b _080B19A4
_080B199A:
	ldr r0, [r7]
	movs r1, #0xb
	bl Proc_Goto
	b _080B19A4
_080B19A4:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B19AC
sub_080B19AC: @ 0x080B19AC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl sub_0802ECE4
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _080B19CA
	movs r0, #0x36
	ldr r1, [r7]
	bl sub_080B1174
	b _080B19D2
_080B19CA:
	movs r0, #0x39
	ldr r1, [r7]
	bl sub_080B1174
_080B19D2:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B19DC
sub_080B19DC: @ 0x080B19DC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5c
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r0, #0x30
	adds r1, r0, r1
	ldrh r2, [r1]
	adds r0, r2, #0
	bl AddItemToConvoy
	ldr r0, [r7]
	bl sub_080B2E44
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B1A0C
sub_080B1A0C: @ 0x080B1A0C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #0x33
	ldr r1, [r7]
	bl sub_080B1174
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B1A24
sub_080B1A24: @ 0x080B1A24
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl sub_0802EC3C
	cmp r0, #0x63
	bgt _080B1A3C
	ldr r0, [r7]
	movs r1, #0xa
	bl Proc_Goto
_080B1A3C:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B1A44
sub_080B1A44: @ 0x080B1A44
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #0x3c
	ldr r1, [r7]
	bl sub_080B1174
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B1A5C
sub_080B1A5C: @ 0x080B1A5C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #0x15
	ldr r1, [r7]
	bl sub_080B1174
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B1A74
sub_080B1A74: @ 0x080B1A74
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #0x18
	ldr r1, [r7]
	bl sub_080B1174
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B1A8C
sub_080B1A8C: @ 0x080B1A8C
	push {r7, lr}
	sub sp, #0x10
	add r7, sp, #0xc
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5b
	ldrb r1, [r2]
	movs r2, #0x48
	str r2, [sp]
	ldr r2, _080B1AC0 @ =sub_080B1560
	str r2, [sp, #4]
	ldr r2, [r7]
	str r2, [sp, #8]
	movs r2, #5
	movs r3, #0
	bl sub_080B30E0
	add sp, #0x10
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B1AC0: .4byte sub_080B1560

	thumb_func_start sub_080B1AC4
sub_080B1AC4: @ 0x080B1AC4
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	adds r0, r7, #4
	movs r1, #0
	strb r1, [r0]
	bl sub_080B31DC
	bl sub_080B332C
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r2, r0, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	adds r4, r0, #0
	bl sub_080B3310
	lsls r2, r4, #0x10
	lsrs r1, r2, #0x10
	lsls r2, r0, #0x10
	lsrs r0, r2, #0x10
	cmp r1, r0
	beq _080B1B08
	adds r0, r7, #4
	movs r1, #1
	strb r1, [r0]
_080B1B08:
	bl sub_080B3310
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x5c
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r0
	adds r0, r2, #0
	strb r0, [r1]
	bl sub_080B3350
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x5d
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r0
	adds r0, r2, #0
	strb r0, [r1]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5d
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r1, #0
	subs r2, #0x48
	subs r1, r0, r2
	movs r0, #0x38
	bl sub_0804A740
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x62
	ldrb r0, [r1]
	cmp r0, #0
	beq _080B1BB0
	adds r0, r7, #4
	movs r1, #0
	ldrsb r1, [r0, r1]
	cmp r1, #0
	beq _080B1BB0
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5d
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r1, #0
	subs r2, #0x48
	subs r1, r0, r2
	ldr r2, [r7]
	ldr r0, [r2, #0x2c]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x5c
	ldrb r2, [r3]
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r0, #0x1e
	adds r3, r0, r2
	ldrh r2, [r3]
	movs r0, #0x38
	bl sub_080826EC
_080B1BB0:
	bl sub_080B33C4
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _080B1BBE
	b _080B1D3C
_080B1BBE:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x62
	ldrb r0, [r1]
	cmp r0, #0
	beq _080B1BFE
	ldr r1, _080B1BF8 @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #0x81
	lsls r2, r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080B1BF6
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x62
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	bl sub_080828A4
_080B1BF6:
	b _080B1D3C
	.align 2, 0
_080B1BF8: .4byte gpKeySt
_080B1BFC:
	b _080B1C70
_080B1BFE:
	ldr r1, _080B1C6C @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080B1C70
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x62
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5d
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r1, #0
	subs r2, #0x48
	subs r1, r0, r2
	ldr r2, [r7]
	ldr r0, [r2, #0x2c]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x5c
	ldrb r2, [r3]
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r0, #0x1e
	adds r3, r0, r2
	ldrh r2, [r3]
	movs r0, #0x38
	bl sub_080826EC
	b _080B1D3C
	.align 2, 0
_080B1C6C: .4byte gpKeySt
_080B1C70:
	ldr r1, _080B1CBC @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080B1CF6
	ldr r1, [r7]
	ldr r0, [r1, #0x2c]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5c
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r0, #0x1e
	adds r1, r0, r1
	ldrh r2, [r1]
	adds r0, r2, #0
	bl sub_080B2BDC
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	bne _080B1CC0
	movs r0, #0x2a
	ldr r1, [r7]
	bl sub_080B1174
	ldr r0, [r7]
	movs r1, #4
	bl Proc_Goto
	b _080B1CF4
	.align 2, 0
_080B1CBC: .4byte gpKeySt
_080B1CC0:
	ldr r1, [r7]
	ldr r0, [r1, #0x2c]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5c
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r0, #0x1e
	adds r1, r0, r1
	ldrh r2, [r1]
	adds r0, r2, #0
	bl sub_080B2BB4
	lsls r2, r0, #0x10
	lsrs r1, r2, #0x10
	adds r0, r1, #0
	bl sub_08009E78
	movs r0, #0x24
	ldr r1, [r7]
	bl sub_080B1174
	ldr r0, [r7]
	bl Proc_Break
_080B1CF4:
	b _080B1D3C
_080B1CF6:
	ldr r1, _080B1D30 @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #2
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080B1D3C
	ldr r1, _080B1D34 @ =gPlaySt
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r0, [r1]
	lsls r1, r0, #0x1e
	lsrs r0, r1, #0x1f
	cmp r0, #0
	bne _080B1D24
	ldr r1, _080B1D38 @ =0x0000038B
	adds r0, r1, #0
	bl m4aSongNumStart
_080B1D24:
	ldr r0, [r7]
	movs r1, #8
	bl Proc_Goto
	b _080B1D3C
	.align 2, 0
_080B1D30: .4byte gpKeySt
_080B1D34: .4byte gPlaySt
_080B1D38: .4byte 0x0000038B
_080B1D3C:
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B1D44
sub_080B1D44: @ 0x080B1D44
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	bl sub_08009E60
	cmp r0, #1
	beq _080B1D64
	cmp r0, #1
	bgt _080B1D5E
	cmp r0, #0
	beq _080B1DFA
	b _080B1DFA
_080B1D5E:
	cmp r0, #2
	beq _080B1DFA
	b _080B1DFA
_080B1D64:
	movs r0, #0xb9
	movs r1, #8
	bl sub_0801525C
	ldr r0, _080B1DF0 @ =gActionSt
	ldrb r1, [r0, #0x11]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x14
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x11]
	bl GetGold
	str r0, [r7, #4]
	ldr r1, [r7]
	ldr r0, [r1, #0x2c]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5c
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r0, #0x1e
	adds r1, r0, r1
	ldrh r2, [r1]
	adds r0, r2, #0
	bl sub_080B2BB4
	lsls r1, r0, #0x10
	lsrs r0, r1, #0x10
	ldr r1, [r7, #4]
	adds r0, r1, r0
	str r0, [r7, #4]
	ldr r1, [r7, #4]
	adds r0, r1, #0
	bl SetGold
	ldr r1, [r7]
	ldr r0, [r1, #0x2c]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5c
	ldrb r1, [r2]
	bl UnitRemoveItem
	ldr r0, [r7]
	bl sub_080B1348
	ldr r0, [r7]
	bl sub_080B2904
	ldr r1, _080B1DF4 @ =0x02022E16
	adds r0, r1, #0
	bl sub_080B26DC
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5b
	ldrb r0, [r1]
	cmp r0, #0
	bne _080B1DF8
	ldr r0, [r7]
	movs r1, #7
	bl Proc_Goto
	b _080B1E04
	.align 2, 0
_080B1DF0: .4byte gActionSt
_080B1DF4: .4byte 0x02022E16
_080B1DF8:
	b _080B1E04
_080B1DFA:
	ldr r0, [r7]
	movs r1, #4
	bl Proc_Goto
	b _080B1E04
_080B1E04:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B1E0C
sub_080B1E0C: @ 0x080B1E0C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #0x1e
	ldr r1, [r7]
	bl sub_080B1174
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B1E24
sub_080B1E24: @ 0x080B1E24
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x5c
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	movs r0, #0xc
	ldr r1, [r7]
	bl sub_080B1174
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B1E4C
sub_080B1E4C: @ 0x080B1E4C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #0xf
	ldr r1, [r7]
	bl sub_080B1174
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B1E64
sub_080B1E64: @ 0x080B1E64
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x2c]
	cmp r1, #0
	bne _080B1E7E
	movs r0, #7
	ldr r1, [r7]
	bl sub_080B1174
	b _080B1E86
_080B1E7E:
	movs r0, #0x27
	ldr r1, [r7]
	bl sub_080B1174
_080B1E86:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B1E90
sub_080B1E90: @ 0x080B1E90
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _080B1EB0 @ =0x08DB0ADC
	adds r0, r1, #0
	bl sub_08004748
	ldr r0, _080B1EB4 @ =0x08D64F4C
	ldr r1, _080B1EB8 @ =sub_0806E2C8
	bl sub_08004670
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B1EB0: .4byte 0x08DB0ADC
_080B1EB4: .4byte 0x08D64F4C
_080B1EB8: .4byte sub_0806E2C8

	thumb_func_start sub_080B1EBC
sub_080B1EBC: @ 0x080B1EBC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #5
	ldr r1, [r7]
	bl sub_080B1174
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B1ED4
sub_080B1ED4: @ 0x080B1ED4
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	adds r0, r7, #4
	movs r1, #0
	strb r1, [r0]
	bl sub_080B31DC
	bl sub_080B332C
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r2, r0, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	adds r4, r0, #0
	bl sub_080B3310
	lsls r2, r4, #0x10
	lsrs r1, r2, #0x10
	lsls r2, r0, #0x10
	lsrs r0, r2, #0x10
	cmp r1, r0
	beq _080B1F18
	adds r0, r7, #4
	movs r1, #1
	strb r1, [r0]
_080B1F18:
	bl sub_080B3310
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x5c
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r0
	adds r0, r2, #0
	strb r0, [r1]
	bl sub_080B3350
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x5d
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r0
	adds r0, r2, #0
	strb r0, [r1]
	ldr r0, [r7]
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x5c
	adds r2, r0, #0
	adds r0, #0x5e
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, [r7]
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x5d
	adds r2, r0, #0
	adds r0, #0x5f
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5d
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r1, #0
	subs r2, #0x48
	subs r1, r0, r2
	movs r0, #0x38
	bl sub_0804A740
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x62
	ldrb r0, [r1]
	cmp r0, #0
	beq _080B1FFA
	adds r0, r7, #4
	movs r1, #0
	ldrsb r1, [r0, r1]
	cmp r1, #0
	beq _080B1FFA
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5d
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r1, #0
	subs r2, #0x48
	subs r1, r0, r2
	ldr r0, [r7]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x5c
	ldrb r2, [r3]
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r0, #0x30
	adds r3, r0, r2
	ldrh r2, [r3]
	movs r0, #0x38
	bl sub_080826EC
_080B1FFA:
	bl sub_080B2D50
	bl sub_080B33C4
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _080B200C
	b _080B2100
_080B200C:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x62
	ldrb r0, [r1]
	cmp r0, #0
	beq _080B204E
	ldr r1, _080B2048 @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #0x81
	lsls r2, r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080B2044
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x62
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	bl sub_080828A4
_080B2044:
	b _080B2100
	.align 2, 0
_080B2048: .4byte gpKeySt
_080B204C:
	b _080B20BC
_080B204E:
	ldr r1, _080B20B8 @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080B20BC
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x62
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5d
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r1, #0
	subs r2, #0x48
	subs r1, r0, r2
	ldr r0, [r7]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x5c
	ldrb r2, [r3]
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r0, #0x30
	adds r3, r0, r2
	ldrh r2, [r3]
	movs r0, #0x38
	bl sub_080826EC
	b _080B2100
	.align 2, 0
_080B20B8: .4byte gpKeySt
_080B20BC:
	ldr r1, _080B20F4 @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #3
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080B2100
	ldr r1, _080B20F8 @ =gPlaySt
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r0, [r1]
	lsls r1, r0, #0x1e
	lsrs r0, r1, #0x1f
	cmp r0, #0
	bne _080B20EA
	ldr r1, _080B20FC @ =0x0000038B
	adds r0, r1, #0
	bl m4aSongNumStart
_080B20EA:
	ldr r0, [r7]
	movs r1, #0xc
	bl Proc_Goto
	b _080B2100
	.align 2, 0
_080B20F4: .4byte gpKeySt
_080B20F8: .4byte gPlaySt
_080B20FC: .4byte 0x0000038B
_080B2100:
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B2108
sub_080B2108: @ 0x080B2108
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _080B2138 @ =gBmSt
	ldrb r1, [r0, #4]
	movs r2, #0x10
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x18
	lsrs r0, r1, #0x18
	cmp r0, #0
	bne _080B212E
	ldr r1, _080B213C @ =0x08DB07A4
	adds r0, r1, #0
	ldr r1, [r7]
	bl Proc_StartBlocking
_080B212E:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B2138: .4byte gBmSt
_080B213C: .4byte 0x08DB07A4

	thumb_func_start sub_080B2140
sub_080B2140: @ 0x080B2140
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _080B2168 @ =gBmSt
	ldrb r1, [r0, #4]
	movs r2, #0x10
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x18
	lsrs r0, r1, #0x18
	cmp r0, #0
	bne _080B2170
	ldr r1, _080B216C @ =0x08DB07DC
	adds r0, r1, #0
	ldr r1, [r7]
	bl Proc_StartBlocking
	b _080B2174
	.align 2, 0
_080B2168: .4byte gBmSt
_080B216C: .4byte 0x08DB07DC
_080B2170:
	bl sub_0800EC08
_080B2174:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B217C
sub_080B217C: @ 0x080B217C
	push {r4, r7, lr}
	sub sp, #0xc
	add r7, sp, #4
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x61
	ldrb r0, [r1]
	cmp r0, #0
	bne _080B219A
	movs r0, #0x4d
	movs r1, #0
	bl sub_0800376C
	b _080B21A2
_080B219A:
	movs r0, #0x46
	movs r1, #0
	bl sub_0800376C
_080B21A2:
	ldr r0, _080B22B4 @ =0x08D64F4C
	ldr r1, _080B22B8 @ =sub_0806E2A0
	bl sub_08004670
	bl sub_080B2C4C
	ldr r0, _080B22BC @ =gDispIo
	ldrb r1, [r0, #0xc]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0xc]
	ldr r0, _080B22BC @ =gDispIo
	ldrb r1, [r0, #0x10]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x10]
	ldr r0, _080B22BC @ =gDispIo
	ldrb r1, [r0, #0x14]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0x14]
	ldr r0, _080B22BC @ =gDispIo
	ldrb r1, [r0, #0x18]
	movs r2, #3
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0x18]
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r1, #0
	movs r1, #2
	movs r2, #0
	bl InitTalk
	bl sub_080069C4
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x5c
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x5e
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x5f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x5d
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x60
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x62
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	movs r1, #0x90
	lsls r1, r1, #2
	adds r0, r1, #0
	movs r1, #3
	bl sub_080B2D90
	ldr r0, [r7]
	bl sub_080B1148
	movs r1, #1
	str r1, [sp]
	movs r1, #0x20
	movs r2, #8
	movs r3, #3
	bl sub_08008DA8
	ldr r0, _080B22C0 @ =0x083FAD4C
	ldr r1, _080B22C4 @ =gBuf
	bl sub_08013688
	ldr r0, _080B22C8 @ =gBg1Tm
	ldr r1, _080B22C4 @ =gBuf
	movs r2, #0x80
	lsls r2, r2, #5
	bl TmApplyTsa_thm
	movs r0, #0
	str r0, [sp]
	movs r0, #6
	movs r1, #8
	movs r2, #0x14
	movs r3, #0xc
	bl sub_0804A4CC
	movs r0, #2
	bl EnableBgSync
	ldr r0, [r7]
	bl sub_080B25C8
	movs r0, #0
	str r0, [r7, #4]
_080B22AC:
	ldr r0, [r7, #4]
	cmp r0, #5
	ble _080B22CC
	b _080B22EC
	.align 2, 0
_080B22B4: .4byte 0x08D64F4C
_080B22B8: .4byte sub_0806E2A0
_080B22BC: .4byte gDispIo
_080B22C0: .4byte 0x083FAD4C
_080B22C4: .4byte gBuf
_080B22C8: .4byte gBg1Tm
_080B22CC:
	ldr r0, [r7, #4]
	adds r1, r0, #0
	lsls r0, r1, #3
	ldr r2, _080B22E8 @ =0x0203EE48
	adds r1, r0, r2
	adds r0, r1, #0
	movs r1, #0x14
	bl InitText
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _080B22AC
	.align 2, 0
_080B22E8: .4byte 0x0203EE48
_080B22EC:
	ldr r0, [r7]
	bl sub_080B27D8
	ldr r0, _080B25A8 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _080B25A8 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x40
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _080B25A8 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #4
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r2, #0xfb
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0xfb
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2d
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x38
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x31
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x48
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xf0
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x30
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x98
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x33
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #8
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2e
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xf0
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x32
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x38
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0xc0
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #8
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B25AC @ =0x030027CC
	ldr r1, _080B25AC @ =0x030027CC
	ldrh r2, [r1]
	ldr r3, _080B25B0 @ =0x0000FFE0
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _080B25AC @ =0x030027CC
	ldr r1, _080B25AC @ =0x030027CC
	ldrh r2, [r1]
	movs r3, #8
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _080B25AC @ =0x030027CC
	ldr r1, _080B25AC @ =0x030027CC
	ldrh r2, [r1]
	ldr r3, _080B25B4 @ =0x0000E0FF
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _080B25AC @ =0x030027CC
	ldr r1, _080B25AC @ =0x030027CC
	ldrh r2, [r1]
	strh r2, [r0]
	ldr r4, _080B25B8 @ =0x08439BF0
	movs r0, #3
	bl GetBgChrOffset
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r0, r2
	adds r0, r4, #0
	bl sub_08013688
	ldr r0, _080B25BC @ =gBg3Tm
	ldr r1, _080B25C0 @ =0x0842D860
	movs r2, #0xe0
	lsls r2, r2, #8
	bl TmApplyTsa_thm
	ldr r0, _080B25C4 @ =0x0843F144
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #8
	bl EnableBgSync
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B25A8: .4byte gDispIo
_080B25AC: .4byte 0x030027CC
_080B25B0: .4byte 0x0000FFE0
_080B25B4: .4byte 0x0000E0FF
_080B25B8: .4byte 0x08439BF0
_080B25BC: .4byte gBg3Tm
_080B25C0: .4byte 0x0842D860
_080B25C4: .4byte 0x0843F144

	thumb_func_start sub_080B25C8
sub_080B25C8: @ 0x080B25C8
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r0, _080B2650 @ =0x083FAE28
	ldr r1, _080B2654 @ =0x06014C00
	bl sub_08013688
	ldr r1, _080B2658 @ =0x08DB0ADC
	adds r0, r1, #0
	ldr r1, [r7]
	bl Proc_Start
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xac
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7, #4]
	adds r1, r0, #0
	adds r0, #0x66
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x2c
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7, #4]
	adds r1, r0, #0
	adds r0, #0x68
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	ldr r3, _080B265C @ =0x00004260
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _080B2660 @ =0x081DBD64
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r1, _080B2664 @ =0x02022E18
	adds r0, r1, #0
	bl sub_080B266C
	ldr r1, _080B2668 @ =0x02022E16
	adds r0, r1, #0
	bl sub_080B26DC
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B2650: .4byte 0x083FAE28
_080B2654: .4byte 0x06014C00
_080B2658: .4byte 0x08DB0ADC
_080B265C: .4byte 0x00004260
_080B2660: .4byte 0x081DBD64
_080B2664: .4byte 0x02022E18
_080B2668: .4byte 0x02022E16

	thumb_func_start sub_080B266C
sub_080B266C: @ 0x080B266C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	ldr r1, _080B269C @ =0x03001618
	adds r0, r1, #0
	movs r1, #1
	bl InitText
	ldr r2, _080B26A0 @ =0x0844BF6C
	ldr r0, [r7]
	movs r1, #3
	bl sub_08014B14
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B269C: .4byte 0x03001618
_080B26A0: .4byte 0x0844BF6C

	thumb_func_start sub_080B26A4
sub_080B26A4: @ 0x080B26A4
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
_080B26AE:
	ldr r0, [r7, #4]
	cmp r0, #0
	bgt _080B26B6
	b _080B26D4
_080B26B6:
	ldr r0, [r7]
	movs r1, #0
	strh r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r0, #0x40
	movs r1, #0
	strh r1, [r0]
	ldr r0, [r7]
	subs r1, r0, #2
	str r1, [r7]
	ldr r0, [r7, #4]
	subs r1, r0, #1
	str r1, [r7, #4]
	b _080B26AE
_080B26D4:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B26DC
sub_080B26DC: @ 0x080B26DC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	ldr r0, [r7]
	movs r1, #6
	bl sub_080B26A4
	bl GetGold
	adds r2, r0, #0
	ldr r0, [r7]
	movs r1, #2
	bl sub_08006068
	movs r0, #1
	bl EnableBgSync
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B2714
sub_080B2714: @ 0x080B2714
	push {r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x60
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, _080B2764 @ =0x08DB0A84
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	ldr r1, [r7]
	str r1, [r0, #0x54]
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	str r0, [r7, #4]
_080B2752:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	adds r1, r0, #5
	ldr r0, [r7, #4]
	cmp r0, r1
	blt _080B2768
	b _080B27A8
	.align 2, 0
_080B2764: .4byte 0x08DB0A84
_080B2768:
	ldr r1, [r7, #4]
	adds r0, r1, #0
	movs r1, #6
	bl DivRem
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	adds r1, r0, #0
	lsls r0, r1, #3
	ldr r1, _080B27A0 @ =0x0203EE48
	adds r0, r0, r1
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #1
	movs r2, #0x1f
	ands r1, r2
	lsls r2, r1, #5
	adds r1, r2, #0
	lsls r2, r1, #1
	ldr r3, _080B27A4 @ =0x02023C6E
	adds r1, r2, r3
	bl PutBlankText
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _080B2752
	.align 2, 0
_080B27A0: .4byte 0x0203EE48
_080B27A4: .4byte 0x02023C6E
_080B27A8:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	adds r1, r0, #0
	lsls r0, r1, #4
	adds r1, r0, #0
	adds r0, r1, #0
	subs r0, #0x48
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r2, r0, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	movs r0, #4
	bl EnableBgSync
	add sp, #0x10
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B27D8
sub_080B27D8: @ 0x080B27D8
	push {r4, r5, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	str r0, [r7, #4]
_080B27F4:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	adds r1, r0, #5
	ldr r0, [r7, #4]
	cmp r0, r1
	blt _080B2806
	b _080B2830
_080B2806:
	ldr r1, [r7, #4]
	adds r0, r1, #0
	movs r1, #6
	bl DivRem
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	lsls r0, r1, #3
	ldr r2, _080B282C @ =0x0203EE48
	adds r1, r0, r2
	adds r0, r1, #0
	bl ClearText
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _080B27F4
	.align 2, 0
_080B282C: .4byte 0x0203EE48
_080B2830:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	str r0, [r7, #4]
_080B283A:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	adds r1, r0, #5
	ldr r0, [r7, #4]
	cmp r0, r1
	blt _080B284C
	b _080B28A8
_080B284C:
	ldr r1, [r7, #4]
	adds r0, r1, #0
	movs r1, #6
	bl DivRem
	str r0, [r7, #0xc]
	ldr r0, [r7]
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r0, #0x30
	adds r1, r0, r1
	ldrh r0, [r1]
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	cmp r0, #0
	bne _080B2870
	b _080B28A8
_080B2870:
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	lsls r0, r1, #3
	ldr r1, _080B28A0 @ =0x0203EE48
	adds r0, r0, r1
	ldr r1, [r7, #8]
	ldr r3, [r7]
	ldr r2, [r3, #0x2c]
	ldr r3, [r7, #4]
	adds r4, r3, #0
	lsls r3, r4, #1
	movs r4, #0x1f
	ands r3, r4
	lsls r4, r3, #5
	adds r3, r4, #0
	lsls r4, r3, #1
	ldr r5, _080B28A4 @ =0x02023C6E
	adds r3, r4, r5
	bl sub_080B2A9C
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _080B283A
	.align 2, 0
_080B28A0: .4byte 0x0203EE48
_080B28A4: .4byte 0x02023C6E
_080B28A8:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	adds r1, r0, #0
	lsls r0, r1, #4
	adds r1, r0, #0
	adds r0, r1, #0
	subs r0, #0x48
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r2, r0, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	movs r0, #4
	bl EnableBgSync
	add sp, #0x10
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B28D8
sub_080B28D8: @ 0x080B28D8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x54]
	adds r0, r1, #0
	bl sub_080B15F0
	ldr r0, [r7]
	ldr r1, [r0, #0x54]
	adds r0, r1, #0
	bl sub_080B27D8
	ldr r0, [r7]
	bl Proc_Break
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B2904
sub_080B2904: @ 0x080B2904
	push {r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x60
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, _080B294C @ =0x08DB0A94
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	ldr r1, [r7]
	str r1, [r0, #0x54]
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	movs r0, #0
	str r0, [r7, #4]
_080B2944:
	ldr r0, [r7, #4]
	cmp r0, #4
	ble _080B2950
	b _080B2990
	.align 2, 0
_080B294C: .4byte 0x08DB0A94
_080B2950:
	ldr r1, [r7, #4]
	adds r0, r1, #0
	movs r1, #6
	bl DivRem
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	adds r1, r0, #0
	lsls r0, r1, #3
	ldr r1, _080B2988 @ =0x0203EE48
	adds r0, r0, r1
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #1
	movs r2, #0x1f
	ands r1, r2
	lsls r2, r1, #5
	adds r1, r2, #0
	lsls r2, r1, #1
	ldr r3, _080B298C @ =0x02023C6E
	adds r1, r2, r3
	bl PutBlankText
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _080B2944
	.align 2, 0
_080B2988: .4byte 0x0203EE48
_080B298C: .4byte 0x02023C6E
_080B2990:
	ldr r2, _080B29A8 @ =0x0000FFB8
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	movs r0, #4
	bl EnableBgSync
	add sp, #0x10
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B29A8: .4byte 0x0000FFB8

	thumb_func_start sub_080B29AC
sub_080B29AC: @ 0x080B29AC
	push {r4, r5, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	movs r0, #0
	str r0, [r7, #4]
_080B29C2:
	ldr r0, [r7, #4]
	cmp r0, #4
	ble _080B29CA
	b _080B29F4
_080B29CA:
	ldr r1, [r7, #4]
	adds r0, r1, #0
	movs r1, #6
	bl DivRem
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	lsls r0, r1, #3
	ldr r2, _080B29F0 @ =0x0203EE48
	adds r1, r0, r2
	adds r0, r1, #0
	bl ClearText
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _080B29C2
	.align 2, 0
_080B29F0: .4byte 0x0203EE48
_080B29F4:
	movs r0, #0
	str r0, [r7, #4]
_080B29F8:
	ldr r0, [r7, #4]
	cmp r0, #4
	ble _080B2A00
	b _080B2A60
_080B2A00:
	ldr r1, [r7, #4]
	adds r0, r1, #0
	movs r1, #6
	bl DivRem
	str r0, [r7, #0xc]
	ldr r1, [r7]
	ldr r0, [r1, #0x2c]
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r0, #0x1e
	adds r1, r0, r1
	ldrh r0, [r1]
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	cmp r0, #0
	bne _080B2A26
	b _080B2A60
_080B2A26:
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	lsls r0, r1, #3
	ldr r1, _080B2A58 @ =0x0203EE48
	adds r0, r0, r1
	ldr r1, [r7, #8]
	ldr r3, [r7]
	ldr r2, [r3, #0x2c]
	ldr r3, [r7, #4]
	adds r4, r3, #0
	lsls r3, r4, #1
	movs r4, #0x1f
	ands r3, r4
	lsls r4, r3, #5
	adds r3, r4, #0
	lsls r4, r3, #1
	ldr r5, _080B2A5C @ =0x02023C6E
	adds r3, r4, r5
	bl sub_080B2AF8
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _080B29F8
	.align 2, 0
_080B2A58: .4byte 0x0203EE48
_080B2A5C: .4byte 0x02023C6E
_080B2A60:
	movs r0, #4
	bl EnableBgSync
	add sp, #0x10
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B2A70
sub_080B2A70: @ 0x080B2A70
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x54]
	adds r0, r1, #0
	bl sub_080B1A8C
	ldr r0, [r7]
	ldr r1, [r0, #0x54]
	adds r0, r1, #0
	bl sub_080B29AC
	ldr r0, [r7]
	bl Proc_Break
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B2A9C
sub_080B2A9C: @ 0x080B2A9C
	push {r4, r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, [r7, #8]
	ldr r1, [r7, #4]
	bl sub_080B2B64
	lsls r1, r0, #0x10
	lsrs r0, r1, #0x10
	str r0, [r7, #0x10]
	ldr r4, [r7, #4]
	ldr r0, [r7, #8]
	ldr r1, [r7, #4]
	bl sub_08016F04
	lsls r1, r0, #0x18
	asrs r2, r1, #0x18
	ldr r3, [r7, #0xc]
	ldr r0, [r7]
	adds r1, r4, #0
	bl sub_080168EC
	ldr r0, [r7, #0xc]
	adds r4, r0, #0
	adds r4, #0x22
	bl GetGold
	ldr r1, [r7, #0x10]
	cmp r0, r1
	blt _080B2AE4
	movs r1, #2
	b _080B2AE6
_080B2AE4:
	movs r1, #1
_080B2AE6:
	ldr r2, [r7, #0x10]
	adds r0, r4, #0
	bl sub_08006068
	add sp, #0x14
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B2AF8
sub_080B2AF8: @ 0x080B2AF8
	push {r4, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r4, [r7, #4]
	ldr r0, [r7, #8]
	ldr r1, [r7, #4]
	bl sub_08016F04
	lsls r1, r0, #0x18
	asrs r2, r1, #0x18
	ldr r3, [r7, #0xc]
	ldr r0, [r7]
	adds r1, r4, #0
	bl sub_080168EC
	ldr r1, [r7, #4]
	adds r0, r1, #0
	bl sub_080B2BDC
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _080B2B4A
	ldr r0, [r7, #0xc]
	adds r4, r0, #0
	adds r4, #0x22
	ldr r1, [r7, #4]
	adds r0, r1, #0
	bl sub_080B2BB4
	lsls r1, r0, #0x10
	lsrs r2, r1, #0x10
	adds r0, r4, #0
	movs r1, #2
	bl sub_08006068
	b _080B2B56
_080B2B4A:
	ldr r3, _080B2B60 @ =0x0844BFA0
	ldr r0, [r7]
	movs r1, #0x5c
	movs r2, #2
	bl Text_InsertDrawString
_080B2B56:
	add sp, #0x10
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B2B60: .4byte 0x0844BFA0

	thumb_func_start sub_080B2B64
sub_080B2B64: @ 0x080B2B64
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, [r7, #4]
	adds r0, r1, #0
	bl sub_08017748
	str r0, [r7, #8]
	ldr r0, [r7]
	movs r1, #0x72
	bl UnitHasItem
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _080B2B9E
	ldr r0, [r7, #8]
	asrs r1, r0, #0x1f
	lsrs r2, r1, #0x1f
	adds r1, r0, r2
	asrs r0, r1, #1
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r1, r0, #0x10
	adds r0, r1, #0
	b _080B2BAA
_080B2B9C:
	b _080B2BAA
_080B2B9E:
	ldr r1, [r7, #8]
	adds r0, r1, #0
	lsls r2, r0, #0x10
	lsrs r1, r2, #0x10
	adds r0, r1, #0
	b _080B2BAA
_080B2BAA:
	add sp, #0xc
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080B2BB4
sub_080B2BB4: @ 0x080B2BB4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	bl sub_08017748
	asrs r1, r0, #0x1f
	lsrs r2, r1, #0x1f
	adds r1, r0, r2
	asrs r0, r1, #1
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r1, r0, #0x10
	adds r0, r1, #0
	b _080B2BD4
_080B2BD4:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_080B2BDC
sub_080B2BDC: @ 0x080B2BDC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	bl GetItemAttributes
	movs r1, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080B2BF6
	movs r0, #0
	b _080B2C0C
_080B2BF6:
	ldr r0, [r7]
	bl sub_080B2BB4
	lsls r1, r0, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	bne _080B2C08
	movs r0, #0
	b _080B2C0C
_080B2C08:
	movs r0, #1
	b _080B2C0C
_080B2C0C:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_080B2C14
sub_080B2C14: @ 0x080B2C14
	push {r4, r5, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	movs r2, #0
	ldrsh r0, [r1, r2]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x66
	movs r3, #0
	ldrsh r1, [r2, r3]
	ldr r2, _080B2C48 @ =0x08DB0AA4
	ldr r4, [r7]
	adds r3, r4, #0
	adds r4, #0x68
	movs r5, #0
	ldrsh r3, [r4, r5]
	bl PutOamHiRam
	add sp, #4
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B2C48: .4byte 0x08DB0AA4

	thumb_func_start sub_080B2C4C
sub_080B2C4C: @ 0x080B2C4C
	push {r7, lr}
	mov r7, sp
	ldr r0, _080B2D28 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _080B2D28 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _080B2D28 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #4
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _080B2D28 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _080B2D28 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _080B2D28 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _080B2D28 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xbf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _080B2D28 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r1, _080B2D2C @ =gBg0Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	ldr r1, _080B2D30 @ =gBg1Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	ldr r1, _080B2D34 @ =gBg2Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	ldr r1, _080B2D38 @ =gBg3Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	movs r0, #0xf
	bl EnableBgSync
	bl ResetText
	bl sub_0804A9F8
	bl InitIcons
	movs r0, #4
	bl ApplyIconPalettes
	movs r1, #1
	rsbs r1, r1, #0
	movs r0, #0
	bl sub_08082F74
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B2D28: .4byte gDispIo
_080B2D2C: .4byte gBg0Tm
_080B2D30: .4byte gBg1Tm
_080B2D34: .4byte gBg2Tm
_080B2D38: .4byte gBg3Tm

	thumb_func_start sub_080B2D3C
sub_080B2D3C: @ 0x080B2D3C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl sub_080B2D50
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B2D50
sub_080B2D50: @ 0x080B2D50
	push {r7, lr}
	mov r7, sp
	bl sub_080B33F4
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _080B2D6E
	movs r2, #0xc9
	lsls r2, r2, #6
	movs r0, #0x78
	movs r1, #0x40
	movs r3, #1
	bl sub_080B2DD4
_080B2D6E:
	bl sub_080B3418
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _080B2D88
	movs r2, #0xc9
	lsls r2, r2, #6
	movs r0, #0x78
	movs r1, #0x98
	movs r3, #0
	bl sub_080B2DD4
_080B2D88:
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B2D90
sub_080B2D90: @ 0x080B2D90
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, _080B2DC8 @ =0x08427974
	ldr r1, [r7]
	lsls r2, r1, #0x16
	lsrs r1, r2, #0x16
	lsls r2, r1, #5
	ldr r3, _080B2DCC @ =0x06010000
	adds r1, r2, r3
	bl sub_08013688
	ldr r0, _080B2DD0 @ =0x0841E45C
	ldr r2, [r7, #4]
	adds r1, r2, #0
	adds r1, #0x10
	adds r2, r1, #0
	lsls r1, r2, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B2DC8: .4byte 0x08427974
_080B2DCC: .4byte 0x06010000
_080B2DD0: .4byte 0x0841E45C

	thumb_func_start sub_080B2DD4
sub_080B2DD4: @ 0x080B2DD4
	push {r4, r7, lr}
	sub sp, #0x1c
	add r7, sp, #4
	str r0, [r7]
	str r1, [r7, #4]
	adds r0, r2, #0
	str r3, [r7, #0xc]
	adds r1, r7, #0
	adds r1, #8
	strh r0, [r1]
	bl GetGameTime
	adds r1, r0, #0
	adds r0, r1, #0
	movs r1, #0x28
	bl DivRem
	str r0, [r7, #0x10]
	ldr r1, [r7, #0x10]
	adds r0, r1, #0
	movs r1, #8
	bl Div
	adds r1, r0, #0
	lsls r0, r1, #1
	str r0, [r7, #0x10]
	ldr r0, [r7, #0xc]
	cmp r0, #0
	bne _080B2E16
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [r7, #0x14]
	b _080B2E1A
_080B2E16:
	movs r0, #0
	str r0, [r7, #0x14]
_080B2E1A:
	ldr r0, [r7]
	ldr r2, [r7, #0x14]
	adds r1, r0, #0
	orrs r1, r2
	ldr r2, [r7, #4]
	ldr r3, _080B2E40 @ =0x08BFF798
	adds r0, r7, #0
	adds r0, #8
	ldrh r4, [r0]
	ldr r0, [r7, #0x10]
	adds r4, r4, r0
	str r4, [sp]
	movs r0, #2
	bl sub_080068C4
	add sp, #0x1c
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B2E40: .4byte 0x08BFF798

	thumb_func_start sub_080B2E44
sub_080B2E44: @ 0x080B2E44
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	movs r0, #0xb9
	movs r1, #8
	bl sub_0801525C
	ldr r0, _080B2EB8 @ =gActionSt
	ldrb r1, [r0, #0x11]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x14
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x11]
	bl GetGold
	str r0, [r7, #4]
	ldr r1, [r7]
	ldr r0, [r1, #0x2c]
	ldr r1, [r7]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x5c
	ldrb r2, [r3]
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r1, #0x30
	adds r2, r1, r2
	ldrh r1, [r2]
	bl sub_080B2B64
	lsls r1, r0, #0x10
	lsrs r0, r1, #0x10
	ldr r1, [r7, #4]
	subs r0, r1, r0
	str r0, [r7, #4]
	ldr r1, [r7, #4]
	adds r0, r1, #0
	bl SetGold
	ldr r0, [r7]
	bl sub_080B1348
	ldr r0, [r7]
	bl sub_080B27D8
	ldr r1, _080B2EBC @ =0x02022E16
	adds r0, r1, #0
	bl sub_080B26DC
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B2EB8: .4byte gActionSt
_080B2EBC: .4byte 0x02022E16

	thumb_func_start sub_080B2EC0
sub_080B2EC0: @ 0x080B2EC0
	push {r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	adds r0, r2, #0
	adds r1, r7, #0
	adds r1, #8
	strb r0, [r1]
	ldr r0, [r7]
	cmp r0, #0
	bge _080B2EDC
	movs r0, #0
	str r0, [r7]
_080B2EDC:
	ldr r0, [r7]
	ldr r1, [r7, #4]
	cmp r0, r1
	blt _080B2EEA
	ldr r0, [r7, #4]
	subs r1, r0, #1
	str r1, [r7]
_080B2EEA:
	ldr r0, [r7]
	str r0, [r7, #0xc]
	ldr r1, _080B2F34 @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	movs r2, #0x40
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080B2F40
	ldr r0, [r7]
	cmp r0, #0
	bne _080B2F38
	adds r0, r7, #0
	adds r0, #8
	movs r1, #0
	ldrsb r1, [r0, r1]
	cmp r1, #0
	beq _080B2F32
	ldr r1, _080B2F34 @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #0x40
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080B2F32
	ldr r0, [r7, #4]
	subs r1, r0, #1
	str r1, [r7]
_080B2F32:
	b _080B2F3E
	.align 2, 0
_080B2F34: .4byte gpKeySt
_080B2F38:
	ldr r0, [r7]
	subs r1, r0, #1
	str r1, [r7]
_080B2F3E:
	b _080B2F92
_080B2F40:
	ldr r1, _080B2F88 @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	movs r2, #0x80
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080B2F92
	ldr r1, [r7, #4]
	subs r0, r1, #1
	ldr r1, [r7]
	cmp r1, r0
	bne _080B2F8C
	adds r0, r7, #0
	adds r0, #8
	movs r1, #0
	ldrsb r1, [r0, r1]
	cmp r1, #0
	beq _080B2F86
	ldr r1, _080B2F88 @ =gpKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #0x80
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080B2F86
	movs r0, #0
	str r0, [r7]
_080B2F86:
	b _080B2F92
	.align 2, 0
_080B2F88: .4byte gpKeySt
_080B2F8C:
	ldr r0, [r7]
	adds r1, r0, #1
	str r1, [r7]
_080B2F92:
	ldr r0, [r7, #0xc]
	ldr r1, [r7]
	cmp r0, r1
	beq _080B2FB2
	ldr r1, _080B2FB8 @ =gPlaySt
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r0, [r1]
	lsls r1, r0, #0x1e
	lsrs r0, r1, #0x1f
	cmp r0, #0
	bne _080B2FB2
	ldr r1, _080B2FBC @ =0x00000386
	adds r0, r1, #0
	bl m4aSongNumStart
_080B2FB2:
	ldr r1, [r7]
	adds r0, r1, #0
	b _080B2FC0
	.align 2, 0
_080B2FB8: .4byte gPlaySt
_080B2FBC: .4byte 0x00000386
_080B2FC0:
	add sp, #0x10
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_080B2FC8
sub_080B2FC8: @ 0x080B2FC8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _080B2FE0 @ =0x0203EE94
	ldr r1, [r7]
	str r1, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B2FE0: .4byte 0x0203EE94

	thumb_func_start sub_080B2FE4
sub_080B2FE4: @ 0x080B2FE4
	push {r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, _080B300C @ =0x0203EE94
	ldr r1, [r0]
	str r1, [r7, #0x10]
	ldr r0, _080B300C @ =0x0203EE94
	ldr r1, [r7]
	str r1, [r0]
	ldr r0, [r7]
	ldr r1, [r7, #0x10]
	cmp r0, r1
	bne _080B3010
	movs r0, #0
	b _080B3066
	.align 2, 0
_080B300C: .4byte 0x0203EE94
_080B3010:
	ldr r0, [r7, #8]
	ldr r1, [r7, #4]
	cmp r0, r1
	ble _080B301C
	movs r0, #0
	b _080B3066
_080B301C:
	ldr r0, [r7]
	ldr r1, [r7, #0x10]
	cmp r0, r1
	bge _080B3040
	ldr r0, [r7, #0xc]
	cmp r0, #0
	bne _080B302E
	movs r0, #0
	b _080B3066
_080B302E:
	ldr r0, [r7]
	ldr r1, [r7, #0xc]
	subs r0, r0, r1
	cmp r0, #0
	bgt _080B303E
	movs r0, #1
	rsbs r0, r0, #0
	b _080B3066
_080B303E:
	b _080B3062
_080B3040:
	ldr r0, [r7, #8]
	ldr r1, [r7, #0xc]
	adds r0, r0, r1
	ldr r1, [r7, #4]
	cmp r0, r1
	bne _080B3050
	movs r0, #0
	b _080B3066
_080B3050:
	ldr r0, [r7]
	ldr r1, [r7, #0xc]
	subs r0, r0, r1
	ldr r2, [r7, #8]
	subs r1, r2, #1
	cmp r0, r1
	blt _080B3062
	movs r0, #1
	b _080B3066
_080B3062:
	movs r0, #0
	b _080B3066
_080B3066:
	add sp, #0x14
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080B3070
sub_080B3070: @ 0x080B3070
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r0, [r7]
	ldr r1, [r7, #4]
	subs r0, r0, r1
	cmp r0, #0
	blt _080B3094
	ldr r0, [r7]
	ldr r1, [r7, #4]
	subs r0, r0, r1
	ldr r1, [r7, #8]
	cmp r0, r1
	blt _080B30A2
	b _080B30A8
_080B3094:
	ldr r0, [r7, #4]
	ldr r1, [r7]
	subs r0, r0, r1
	ldr r1, [r7, #8]
	cmp r0, r1
	blt _080B30A2
	b _080B30A8
_080B30A2:
	ldr r1, [r7, #4]
	adds r0, r1, #0
	b _080B30D6
_080B30A8:
	ldr r0, [r7, #4]
	ldr r1, [r7]
	subs r0, r0, r1
	cmp r0, #0
	bgt _080B30C8
	ldr r0, [r7]
	ldr r1, [r7, #4]
	ldr r2, [r7]
	subs r1, r1, r2
	cmp r1, #0
	bge _080B30C6
	ldr r1, [r7, #8]
	adds r2, r1, #0
	rsbs r1, r2, #0
	adds r0, r0, r1
_080B30C6:
	b _080B30CE
_080B30C8:
	ldr r1, [r7]
	ldr r2, [r7, #8]
	adds r0, r1, r2
_080B30CE:
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	b _080B30D6
_080B30D6:
	add sp, #0xc
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080B30E0
sub_080B30E0: @ 0x080B30E0
	push {r4, r5, r7, lr}
	sub sp, #8
	mov r7, sp
	adds r5, r0, #0
	adds r4, r1, #0
	adds r1, r2, #0
	adds r0, r3, #0
	adds r2, r7, #0
	adds r3, r5, #0
	strh r3, [r2]
	adds r2, r7, #2
	adds r3, r4, #0
	strh r3, [r2]
	adds r2, r7, #4
	strh r1, [r2]
	adds r1, r7, #6
	strh r0, [r1]
	adds r0, r7, #0
	ldrh r1, [r0]
	adds r0, r1, #0
	bl sub_080B2FC8
	ldr r1, _080B31D8 @ =0x08DB0AF4
	ldr r0, [r1]
	adds r1, r7, #0
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrh r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, _080B31D8 @ =0x08DB0AF4
	ldr r0, [r1]
	adds r1, r7, #2
	ldrh r2, [r0, #2]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrh r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #2]
	ldr r1, _080B31D8 @ =0x08DB0AF4
	ldr r0, [r1]
	adds r1, r7, #4
	ldrh r2, [r0, #4]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrh r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #4]
	ldr r1, _080B31D8 @ =0x08DB0AF4
	ldr r0, [r1]
	adds r1, r7, #6
	ldrh r2, [r0, #6]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrh r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #6]
	ldr r1, _080B31D8 @ =0x08DB0AF4
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #8]
	ldr r1, _080B31D8 @ =0x08DB0AF4
	ldr r0, [r1]
	ldrh r1, [r0, #0xa]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #4
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0xa]
	ldr r1, _080B31D8 @ =0x08DB0AF4
	ldr r0, [r1]
	ldr r1, [r7, #0x1c]
	str r1, [r0, #0x14]
	ldr r1, _080B31D8 @ =0x08DB0AF4
	ldr r0, [r1]
	ldr r1, [r7, #0x20]
	str r1, [r0, #0x18]
	ldr r1, _080B31D8 @ =0x08DB0AF4
	ldr r0, [r1]
	ldr r1, [r7, #0x18]
	rsbs r2, r1, #0
	str r2, [r0, #0x10]
	ldr r1, _080B31D8 @ =0x08DB0AF4
	ldr r0, [r1]
	adds r1, r7, #6
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #4
	ldrh r2, [r0, #0xc]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0xc]
	add sp, #8
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B31D8: .4byte 0x08DB0AF4

	thumb_func_start sub_080B31DC
sub_080B31DC: @ 0x080B31DC
	push {r4, r7, lr}
	mov r7, sp
	ldr r0, _080B3238 @ =0x08DB0AF4
	ldr r1, [r0]
	ldrh r0, [r1]
	ldr r2, _080B3238 @ =0x08DB0AF4
	ldr r1, [r2]
	ldrh r2, [r1, #2]
	adds r1, r2, #0
	movs r2, #0
	bl sub_080B2EC0
	adds r1, r0, #0
	ldr r2, _080B3238 @ =0x08DB0AF4
	ldr r0, [r2]
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, _080B3238 @ =0x08DB0AF4
	ldr r1, [r0]
	ldrh r0, [r1]
	ldr r1, _080B3238 @ =0x08DB0AF4
	ldr r2, [r1]
	ldrh r1, [r2, #2]
	ldr r2, _080B3238 @ =0x08DB0AF4
	ldr r3, [r2]
	ldrh r2, [r3, #4]
	ldr r3, _080B3238 @ =0x08DB0AF4
	ldr r4, [r3]
	ldrh r3, [r4, #6]
	bl sub_080B2FE4
	cmp r0, #0
	beq _080B3242
	cmp r0, #0
	bgt _080B323C
	movs r1, #1
	cmn r0, r1
	beq _080B3290
	b _080B3242
	.align 2, 0
_080B3238: .4byte 0x08DB0AF4
_080B323C:
	cmp r0, #1
	beq _080B3244
	b _080B3242
_080B3242:
	b _080B32D0
_080B3244:
	ldr r1, _080B328C @ =0x08DB0AF4
	ldr r0, [r1]
	ldr r1, _080B328C @ =0x08DB0AF4
	ldr r0, [r1]
	ldr r2, _080B328C @ =0x08DB0AF4
	ldr r1, [r2]
	ldrh r2, [r1, #6]
	adds r1, r2, #1
	ldrh r2, [r0, #6]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #6]
	ldr r1, _080B328C @ =0x08DB0AF4
	ldr r0, [r1]
	ldr r1, _080B328C @ =0x08DB0AF4
	ldr r2, [r1]
	ldr r1, [r2, #0x18]
	ldr r2, _080B328C @ =0x08DB0AF4
	ldr r3, [r2]
	ldrh r2, [r3, #6]
	ldr r4, _080B328C @ =0x08DB0AF4
	ldr r3, [r4]
	ldrh r4, [r3, #4]
	adds r3, r2, r4
	subs r2, r3, #1
	ldr r3, [r0, #0x14]
	adds r0, r1, #0
	adds r1, r2, #0
	bl _call_via_r3
	b _080B32D0
	.align 2, 0
_080B328C: .4byte 0x08DB0AF4
_080B3290:
	ldr r1, _080B32CC @ =0x08DB0AF4
	ldr r0, [r1]
	ldr r1, _080B32CC @ =0x08DB0AF4
	ldr r0, [r1]
	ldr r2, _080B32CC @ =0x08DB0AF4
	ldr r1, [r2]
	ldrh r2, [r1, #6]
	subs r1, r2, #1
	ldrh r2, [r0, #6]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #6]
	ldr r1, _080B32CC @ =0x08DB0AF4
	ldr r0, [r1]
	ldr r1, _080B32CC @ =0x08DB0AF4
	ldr r2, [r1]
	ldr r1, [r2, #0x18]
	ldr r2, _080B32CC @ =0x08DB0AF4
	ldr r3, [r2]
	ldrh r2, [r3, #6]
	ldr r3, [r0, #0x14]
	adds r0, r1, #0
	adds r1, r2, #0
	bl _call_via_r3
	b _080B32D0
	.align 2, 0
_080B32CC: .4byte 0x08DB0AF4
_080B32D0:
	ldr r0, _080B330C @ =0x08DB0AF4
	ldr r1, [r0]
	ldrh r0, [r1, #0xc]
	ldr r1, _080B330C @ =0x08DB0AF4
	ldr r2, [r1]
	ldrh r1, [r2, #6]
	ldr r3, _080B330C @ =0x08DB0AF4
	ldr r2, [r3]
	ldrh r3, [r2, #8]
	muls r1, r3, r1
	ldr r2, _080B330C @ =0x08DB0AF4
	ldr r3, [r2]
	ldrh r2, [r3, #0xa]
	bl sub_080B3070
	adds r1, r0, #0
	ldr r2, _080B330C @ =0x08DB0AF4
	ldr r0, [r2]
	ldrh r2, [r0, #0xc]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0xc]
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B330C: .4byte 0x08DB0AF4

	thumb_func_start sub_080B3310
sub_080B3310: @ 0x080B3310
	push {r7, lr}
	mov r7, sp
	ldr r1, _080B3320 @ =0x08DB0AF4
	ldr r0, [r1]
	ldrh r1, [r0]
	adds r0, r1, #0
	b _080B3324
	.align 2, 0
_080B3320: .4byte 0x08DB0AF4
_080B3324:
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080B332C
sub_080B332C: @ 0x080B332C
	push {r7, lr}
	mov r7, sp
	ldr r1, _080B3344 @ =0x08DB0AF4
	ldr r0, [r1]
	ldr r2, _080B3344 @ =0x08DB0AF4
	ldr r1, [r2]
	ldrh r2, [r1, #0xc]
	ldr r0, [r0, #0x10]
	adds r1, r2, r0
	adds r0, r1, #0
	b _080B3348
	.align 2, 0
_080B3344: .4byte 0x08DB0AF4
_080B3348:
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080B3350
sub_080B3350: @ 0x080B3350
	push {r7, lr}
	mov r7, sp
	ldr r1, _080B3360 @ =0x08DB0AF4
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	adds r0, r1, #0
	b _080B3364
	.align 2, 0
_080B3360: .4byte 0x08DB0AF4
_080B3364:
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080B336C
sub_080B336C: @ 0x080B336C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _080B3394 @ =0x08DB0AF4
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	ldrh r2, [r0, #8]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #8]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B3394: .4byte 0x08DB0AF4

	thumb_func_start sub_080B3398
sub_080B3398: @ 0x080B3398
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _080B33C0 @ =0x08DB0AF4
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	ldrh r2, [r0, #0xa]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0xa]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B33C0: .4byte 0x08DB0AF4

	thumb_func_start sub_080B33C4
sub_080B33C4: @ 0x080B33C4
	push {r7, lr}
	mov r7, sp
	ldr r0, _080B33E4 @ =0x08DB0AF4
	ldr r1, [r0]
	ldrh r0, [r1, #0xc]
	ldr r1, _080B33E4 @ =0x08DB0AF4
	ldr r2, [r1]
	ldrh r1, [r2, #6]
	ldr r3, _080B33E4 @ =0x08DB0AF4
	ldr r2, [r3]
	ldrh r3, [r2, #8]
	muls r1, r3, r1
	cmp r0, r1
	beq _080B33E8
	movs r0, #1
	b _080B33EC
	.align 2, 0
_080B33E4: .4byte 0x08DB0AF4
_080B33E8:
	movs r0, #0
	b _080B33EC
_080B33EC:
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080B33F4
sub_080B33F4: @ 0x080B33F4
	push {r7, lr}
	mov r7, sp
	ldr r1, _080B3408 @ =0x08DB0AF4
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	cmp r1, #0
	beq _080B340C
	movs r0, #1
	b _080B3410
	.align 2, 0
_080B3408: .4byte 0x08DB0AF4
_080B340C:
	movs r0, #0
	b _080B3410
_080B3410:
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080B3418
sub_080B3418: @ 0x080B3418
	push {r7, lr}
	mov r7, sp
	ldr r0, _080B3438 @ =0x08DB0AF4
	ldr r1, [r0]
	ldrh r0, [r1, #6]
	ldr r2, _080B3438 @ =0x08DB0AF4
	ldr r1, [r2]
	ldrh r2, [r1, #4]
	adds r0, r0, r2
	ldr r2, _080B3438 @ =0x08DB0AF4
	ldr r1, [r2]
	ldrh r2, [r1, #2]
	cmp r0, r2
	bge _080B343C
	movs r0, #1
	b _080B3440
	.align 2, 0
_080B3438: .4byte 0x08DB0AF4
_080B343C:
	movs r0, #0
	b _080B3440
_080B3440:
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080B3448
sub_080B3448: @ 0x080B3448
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r0, _080B3488 @ =0x086EA858
	ldr r2, _080B348C @ =0x086EA8D0
	adds r1, r2, #0
	movs r1, #0x8f
	lsls r1, r1, #2
	adds r2, r2, r1
	ldrh r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #1
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	str r1, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r0, #4]
	lsls r2, r1, #0x10
	lsrs r0, r2, #0x10
	cmp r0, #0
	bne _080B3492
	ldr r0, [r7, #4]
	ldr r1, [r0, #4]
	lsrs r2, r1, #0x1f
	lsls r0, r2, #0x1f
	cmp r0, #0
	bne _080B3492
	movs r0, #0
	b _080B3496
	.align 2, 0
_080B3488: .4byte 0x086EA858
_080B348C: .4byte 0x086EA8D0
_080B3490:
	b _080B3496
_080B3492:
	movs r0, #1
	b _080B3496
_080B3496:
	add sp, #8
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080B34A0
sub_080B34A0: @ 0x080B34A0
	push {r7, lr}
	mov r7, sp
	ldr r0, _080B34C0 @ =gActiveUnit
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_0802EF4C
	ldr r1, _080B34C4 @ =0x08DB0AF8
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B34C0: .4byte gActiveUnit
_080B34C4: .4byte 0x08DB0AF8

	thumb_func_start sub_080B34C8
sub_080B34C8: @ 0x080B34C8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	ldr r1, _080B34E4 @ =0x08DB0C58
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Start
	str r0, [r7]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B34E4: .4byte 0x08DB0C58

	thumb_func_start sub_080B34E8
sub_080B34E8: @ 0x080B34E8
	push {r4, r7, lr}
	sub sp, #8
	add r7, sp, #4
	str r0, [r7]
	ldr r0, _080B383C @ =0x08D64F4C
	ldr r1, _080B3840 @ =sub_0806E2A0
	bl sub_08004670
	bl sub_080B2C4C
	ldr r0, _080B3844 @ =gDispIo
	ldrb r1, [r0, #0xc]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0xc]
	ldr r0, _080B3844 @ =gDispIo
	ldrb r1, [r0, #0x10]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x10]
	ldr r0, _080B3844 @ =gDispIo
	ldrb r1, [r0, #0x14]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0x14]
	ldr r0, _080B3844 @ =gDispIo
	ldrb r1, [r0, #0x18]
	movs r2, #3
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0x18]
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r1, #0
	movs r1, #2
	movs r2, #0
	bl InitTalk
	bl sub_080069C4
	movs r0, #1
	str r0, [sp]
	movs r0, #0xe2
	movs r1, #0x20
	movs r2, #8
	movs r3, #3
	bl sub_08008DA8
	ldr r0, _080B3848 @ =0x083FAD4C
	ldr r1, _080B384C @ =gBuf
	bl sub_08013688
	ldr r0, _080B3850 @ =gBg1Tm
	ldr r1, _080B384C @ =gBuf
	movs r2, #0x80
	lsls r2, r2, #5
	bl TmApplyTsa_thm
	ldr r1, _080B3854 @ =0x02023660
	adds r0, r1, #0
	movs r1, #0x1e
	movs r2, #0xc
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #2
	bl EnableBgSync
	ldr r0, [r7]
	bl sub_080B25C8
	ldr r0, _080B3844 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _080B3844 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x40
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _080B3844 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #4
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r2, #0xfb
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0xfb
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2d
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x58
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x31
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x48
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xf0
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x30
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x98
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x33
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #8
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2e
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xf0
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x32
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x38
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0xc0
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #8
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080B3858 @ =0x030027CC
	ldr r1, _080B3858 @ =0x030027CC
	ldrh r2, [r1]
	ldr r3, _080B385C @ =0x0000FFE0
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _080B3858 @ =0x030027CC
	ldr r1, _080B3858 @ =0x030027CC
	ldrh r2, [r1]
	movs r3, #8
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _080B3858 @ =0x030027CC
	ldr r1, _080B3858 @ =0x030027CC
	ldrh r2, [r1]
	ldr r3, _080B3860 @ =0x0000E0FF
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _080B3858 @ =0x030027CC
	ldr r1, _080B3858 @ =0x030027CC
	ldrh r2, [r1]
	strh r2, [r0]
	ldr r4, _080B3864 @ =0x083F64B8
	movs r0, #3
	bl GetBgChrOffset
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r0, r2
	adds r0, r4, #0
	bl sub_08013688
	ldr r0, _080B3868 @ =gBg3Tm
	ldr r1, _080B386C @ =0x083F9094
	movs r2, #0xc0
	lsls r2, r2, #8
	bl TmApplyTsa_thm
	ldr r0, _080B3870 @ =0x083F9548
	movs r1, #0xc0
	lsls r1, r1, #1
	movs r2, #0x80
	bl ApplyPaletteExt
	movs r0, #8
	bl EnableBgSync
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B383C: .4byte 0x08D64F4C
_080B3840: .4byte sub_0806E2A0
_080B3844: .4byte gDispIo
_080B3848: .4byte 0x083FAD4C
_080B384C: .4byte gBuf
_080B3850: .4byte gBg1Tm
_080B3854: .4byte 0x02023660
_080B3858: .4byte 0x030027CC
_080B385C: .4byte 0x0000FFE0
_080B3860: .4byte 0x0000E0FF
_080B3864: .4byte 0x083F64B8
_080B3868: .4byte gBg3Tm
_080B386C: .4byte 0x083F9094
_080B3870: .4byte 0x083F9548

	thumb_func_start sub_080B3874
sub_080B3874: @ 0x080B3874
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _080B38A0 @ =gArenaSt
	ldr r1, [r0]
	ldr r2, _080B38A4 @ =gBattleActor
	adds r0, r1, #0
	adds r1, r2, #0
	bl UpdateUnitFromBattle
	ldr r0, _080B38A8 @ =gActiveUnit
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_0806C2DC
	bl sub_0806C7CC
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B38A0: .4byte gArenaSt
_080B38A4: .4byte gBattleActor
_080B38A8: .4byte gActiveUnit

	thumb_func_start sub_080B38AC
sub_080B38AC: @ 0x080B38AC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _080B38D0 @ =gArenaSt
	ldr r1, [r0]
	ldr r2, [r1, #0xc]
	lsrs r0, r2, #0x11
	movs r1, #7
	ands r0, r1
	cmp r0, #4
	bhi _080B38D4
	movs r0, #0x3f
	ldr r1, [r7]
	bl sub_080B3BD0
	b _080B38DC
	.align 2, 0
_080B38D0: .4byte gArenaSt
_080B38D4:
	movs r0, #0x40
	ldr r1, [r7]
	bl sub_080B3BD0
_080B38DC:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B38E4
sub_080B38E4: @ 0x080B38E4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl sub_0802F5A0
	adds r1, r0, #0
	adds r0, r1, #0
	bl sub_08009E78
	movs r0, #0x41
	ldr r1, [r7]
	bl sub_080B3BD0
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B3908
sub_080B3908: @ 0x080B3908
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl sub_08009E60
	cmp r0, #1
	beq _080B393A
	cmp r0, #1
	bgt _080B3922
	cmp r0, #0
	beq _080B3928
	b _080B3928
_080B3922:
	cmp r0, #2
	beq _080B3928
	b _080B3928
_080B3928:
	movs r0, #0x43
	ldr r1, [r7]
	bl sub_080B3BD0
	ldr r0, [r7]
	movs r1, #2
	bl Proc_Goto
	b _080B395E
_080B393A:
	bl sub_0802F5A0
	adds r4, r0, #0
	bl GetGold
	cmp r4, r0
	bgt _080B394C
	b _080B395E
_080B394A:
	b _080B395C
_080B394C:
	movs r0, #0x49
	ldr r1, [r7]
	bl sub_080B3BD0
	ldr r0, [r7]
	movs r1, #2
	bl Proc_Goto
_080B395C:
	b _080B395E
_080B395E:
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B3968
sub_080B3968: @ 0x080B3968
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	bl GetGold
	str r0, [r7, #4]
	bl sub_0802F5A0
	ldr r1, [r7, #4]
	subs r0, r1, r0
	str r0, [r7, #4]
	ldr r1, [r7, #4]
	adds r0, r1, #0
	bl SetGold
	ldr r1, _080B39B4 @ =gPlaySt
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r0, [r1]
	lsls r1, r0, #0x1e
	lsrs r0, r1, #0x1f
	cmp r0, #0
	bne _080B399E
	movs r0, #0xb9
	bl m4aSongNumStart
_080B399E:
	ldr r1, _080B39B8 @ =0x02022E16
	adds r0, r1, #0
	bl sub_080B26DC
	ldr r0, [r7]
	bl sub_080B3C1C
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B39B4: .4byte gPlaySt
_080B39B8: .4byte 0x02022E16

	thumb_func_start sub_080B39BC
sub_080B39BC: @ 0x080B39BC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #0x44
	ldr r1, [r7]
	bl sub_080B3BD0
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B39D4
sub_080B39D4: @ 0x080B39D4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #0x42
	ldr r1, [r7]
	bl sub_080B3BD0
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B39EC
sub_080B39EC: @ 0x080B39EC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r1, #1
	rsbs r1, r1, #0
	adds r0, r1, #0
	bl sub_080034C8
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B3A08
sub_080B3A08: @ 0x080B3A08
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	movs r1, #7
	bl sub_0800463C
	bl sub_0800EC08
	ldr r1, _080B3A78 @ =0x08DB0ADC
	adds r0, r1, #0
	bl sub_08004748
	ldr r0, _080B3A7C @ =gActionSt
	ldrb r1, [r0, #0x11]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x16
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x11]
	ldr r1, _080B3A80 @ =gActiveUnit
	ldr r0, [r1]
	ldr r2, _080B3A80 @ =gActiveUnit
	ldr r1, [r2]
	ldr r2, [r1, #0xc]
	movs r1, #0x40
	orrs r2, r1
	str r2, [r0, #0xc]
	ldr r0, _080B3A80 @ =gActiveUnit
	ldr r1, [r0]
	adds r0, r1, #0
	bl PidStatsAddBattleAmt
	bl MU_EndAll
	ldr r0, _080B3A7C @ =gActionSt
	ldrb r1, [r0, #0x15]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0x15]
	ldr r0, _080B3A80 @ =gActiveUnit
	ldr r1, [r0]
	adds r0, r1, #0
	bl BattleGenerateArena
	bl BeginBattleAnimations
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B3A78: .4byte 0x08DB0ADC
_080B3A7C: .4byte gActionSt
_080B3A80: .4byte gActiveUnit

	thumb_func_start sub_080B3A84
sub_080B3A84: @ 0x080B3A84
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	bl sub_08015020
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B3A9C
sub_080B3A9C: @ 0x080B3A9C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	bl sub_080B34E8
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B3AB4
sub_080B3AB4: @ 0x080B3AB4
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	bl GetGold
	str r0, [r7, #4]
	bl sub_0802F5AC
	cmp r0, #2
	beq _080B3B0C
	cmp r0, #2
	bgt _080B3AD4
	cmp r0, #1
	beq _080B3ADE
	b _080B3B3C
_080B3AD4:
	cmp r0, #3
	beq _080B3B16
	cmp r0, #4
	beq _080B3B32
	b _080B3B3C
_080B3ADE:
	bl sub_0802F5A0
	adds r1, r0, #0
	lsls r2, r1, #1
	adds r0, r2, #0
	bl sub_08009E78
	movs r0, #0x45
	ldr r1, [r7]
	bl sub_080B3BD0
	bl sub_0802F5A0
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, [r7, #4]
	adds r0, r1, r0
	str r0, [r7, #4]
	ldr r1, [r7, #4]
	adds r0, r1, #0
	bl SetGold
	b _080B3B3C
_080B3B0C:
	movs r0, #0x46
	ldr r1, [r7]
	bl sub_080B3BD0
	b _080B3B3C
_080B3B16:
	movs r0, #0x48
	ldr r1, [r7]
	bl sub_080B3BD0
	bl sub_0802F5A0
	ldr r1, [r7, #4]
	adds r0, r1, r0
	str r0, [r7, #4]
	ldr r1, [r7, #4]
	adds r0, r1, #0
	bl SetGold
	b _080B3B3C
_080B3B32:
	movs r0, #0x47
	ldr r1, [r7]
	bl sub_080B3BD0
	b _080B3B3C
_080B3B3C:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B3B44
sub_080B3B44: @ 0x080B3B44
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl sub_0802F5AC
	cmp r0, #2
	beq _080B3B98
	cmp r0, #2
	bgt _080B3B5E
	cmp r0, #1
	beq _080B3B68
	b _080B3B9C
_080B3B5E:
	cmp r0, #3
	beq _080B3B68
	cmp r0, #4
	beq _080B3B9A
	b _080B3B9C
_080B3B68:
	ldr r1, _080B3B90 @ =0x02022E16
	adds r0, r1, #0
	bl sub_080B26DC
	ldr r1, _080B3B94 @ =gPlaySt
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r0, [r1]
	lsls r1, r0, #0x1e
	lsrs r0, r1, #0x1f
	cmp r0, #0
	bne _080B3B86
	movs r0, #0xb9
	bl m4aSongNumStart
_080B3B86:
	ldr r0, [r7]
	movs r1, #0x3c
	bl sub_080149B4
	b _080B3B9C
	.align 2, 0
_080B3B90: .4byte 0x02022E16
_080B3B94: .4byte gPlaySt
_080B3B98:
	b _080B3B9C
_080B3B9A:
	b _080B3B9C
_080B3B9C:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B3BA4
sub_080B3BA4: @ 0x080B3BA4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _080B3BC4 @ =0x08DB0ADC
	adds r0, r1, #0
	bl sub_08004748
	ldr r0, _080B3BC8 @ =0x08D64F4C
	ldr r1, _080B3BCC @ =sub_0806E2C8
	bl sub_08004670
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B3BC4: .4byte 0x08DB0ADC
_080B3BC8: .4byte 0x08D64F4C
_080B3BCC: .4byte sub_0806E2C8

	thumb_func_start sub_080B3BD0
sub_080B3BD0: @ 0x080B3BD0
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	bl sub_08007DF4
	bl sub_0800968C
	ldr r0, [r7]
	bl DecodeMsg
	adds r2, r0, #0
	ldr r3, [r7, #4]
	movs r0, #8
	movs r1, #2
	bl sub_08007E08
	movs r0, #0
	bl sub_08007F84
	movs r0, #1
	bl sub_08007F24
	movs r0, #2
	bl sub_08007F24
	movs r0, #4
	bl sub_08007F24
	movs r0, #1
	bl sub_08008CB8
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B3C1C
sub_080B3C1C: @ 0x080B3C1C
	push {r4, r5, r7, lr}
	sub sp, #8
	add r7, sp, #4
	str r0, [r7]
	movs r0, #0
	str r0, [sp]
	movs r0, #7
	movs r1, #9
	movs r2, #0x10
	movs r3, #6
	bl sub_0804A4CC
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	ldr r4, _080B3CB8 @ =0x02022EF0
	ldr r5, _080B3CBC @ =0x08D8AC98
	bl GetLang
	adds r1, r0, #0
	lsls r0, r1, #2
	adds r1, r5, r0
	ldr r2, [r1]
	adds r0, r4, #0
	movs r1, #0
	bl sub_08014B14
	ldr r0, _080B3CC0 @ =0x02022EF8
	ldr r1, _080B3CC4 @ =gArenaSt
	ldr r3, [r1, #4]
	movs r2, #8
	ldrsb r2, [r3, r2]
	movs r1, #2
	bl sub_08006068
	ldr r4, _080B3CC8 @ =0x02022F70
	ldr r0, _080B3CC4 @ =gArenaSt
	ldr r1, [r0, #4]
	ldr r0, [r1]
	ldrh r1, [r0]
	adds r0, r1, #0
	bl DecodeMsg
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #0
	bl sub_08014B14
	ldr r4, _080B3CCC @ =0x02022EFE
	ldr r0, _080B3CC4 @ =gArenaSt
	ldr r1, [r0, #4]
	ldr r0, [r1, #4]
	ldrh r1, [r0]
	adds r0, r1, #0
	bl DecodeMsg
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #0
	bl sub_08014B14
	ldr r4, _080B3CD0 @ =0x02022F7E
	ldr r0, _080B3CC4 @ =gArenaSt
	ldrh r1, [r0, #0x1c]
	adds r0, r1, #0
	bl GetItemName
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #0
	bl sub_08014B14
	add sp, #8
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B3CB8: .4byte 0x02022EF0
_080B3CBC: .4byte 0x08D8AC98
_080B3CC0: .4byte 0x02022EF8
_080B3CC4: .4byte gArenaSt
_080B3CC8: .4byte 0x02022F70
_080B3CCC: .4byte 0x02022EFE
_080B3CD0: .4byte 0x02022F7E

	thumb_func_start sub_080B3CD4
sub_080B3CD4: @ 0x080B3CD4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl sub_0802F5AC
	cmp r0, #1
	beq _080B3CE6
	b _080B3D04
_080B3CE6:
	ldr r1, _080B3D00 @ =gPlaySt
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r0, [r1]
	lsls r1, r0, #0x1f
	lsrs r0, r1, #0x1f
	cmp r0, #0
	bne _080B3CFE
	movs r0, #0x2d
	movs r1, #0
	bl sub_08003684
_080B3CFE:
	b _080B3D28
	.align 2, 0
_080B3D00: .4byte gPlaySt
_080B3D04:
	ldr r1, _080B3D24 @ =gPlaySt
	adds r0, r1, #0
	adds r1, #0x41
	ldrb r0, [r1]
	lsls r1, r0, #0x1f
	lsrs r0, r1, #0x1f
	cmp r0, #0
	bne _080B3D1C
	movs r0, #0x47
	movs r1, #0
	bl sub_08003684
_080B3D1C:
	ldr r0, [r7]
	bl Proc_End
	b _080B3D28
	.align 2, 0
_080B3D24: .4byte gPlaySt
_080B3D28:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B3D30
sub_080B3D30: @ 0x080B3D30
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #0x47
	movs r1, #0
	movs r2, #0
	bl sub_08003788
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B3D4C
sub_080B3D4C: @ 0x080B3D4C
	push {r7, lr}
	mov r7, sp
	ldr r1, _080B3D60 @ =0x08DB0D68
	adds r0, r1, #0
	bl sub_0800AE98
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B3D60: .4byte 0x08DB0D68

	thumb_func_start sub_080B3D64
sub_080B3D64: @ 0x080B3D64
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl sub_08009E60
	cmp r0, #1
	beq _080B3D84
	cmp r0, #1
	bgt _080B3D7E
	cmp r0, #0
	beq _080B3D8C
	b _080B3D8C
_080B3D7E:
	cmp r0, #2
	beq _080B3D88
	b _080B3D8C
_080B3D84:
	movs r0, #1
	b _080B3D90
_080B3D88:
	movs r0, #0
	b _080B3D90
_080B3D8C:
	movs r0, #0
	b _080B3D90
_080B3D90:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_080B3D98
sub_080B3D98: @ 0x080B3D98
	push {r7, lr}
	mov r7, sp
	ldr r0, _080B3DB4 @ =gActionSt
	ldrb r1, [r0, #0x16]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0x16]
	movs r0, #3
	bl WriteSuspendSave
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B3DB4: .4byte gActionSt

	thumb_func_start sub_080B3DB8
sub_080B3DB8: @ 0x080B3DB8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	bl sub_08013200
	ldr r0, [r7]
	bl sub_0800E43C
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B3DD4
sub_080B3DD4: @ 0x080B3DD4
	ldr r0, _080B3DE0 @ =gAnims
	ldrb r0, [r0, #2]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bx lr
	.align 2, 0
_080B3DE0: .4byte gAnims

	thumb_func_start sub_080B3DE4
sub_080B3DE4: @ 0x080B3DE4
	ldr r1, _080B3DEC @ =gAnims
	strb r0, [r1, #2]
	bx lr
	.align 2, 0
_080B3DEC: .4byte gAnims

	thumb_func_start sub_080B3DF0
sub_080B3DF0: @ 0x080B3DF0
	push {r4, r5, lr}
	sub sp, #8
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [sp]
	ldr r4, _080B3E48 @ =0x0200000C
	ldr r2, _080B3E4C @ =0x01000200
	mov r0, sp
	adds r1, r4, #0
	bl CpuFastSet
	movs r5, #0
	str r5, [sp, #4]
	add r0, sp, #4
	ldr r1, _080B3E50 @ =0x06001000
	ldr r2, _080B3E54 @ =0x01001400
	bl CpuFastSet
	ldr r0, _080B3E58 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	movs r1, #0x80
	lsls r1, r1, #4
	adds r0, r4, r1
	strh r5, [r0]
	adds r1, #2
	adds r0, r4, r1
	strh r5, [r0]
	ldr r0, _080B3E5C @ =0x00000804
	adds r4, r4, r0
	strh r5, [r4]
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #4
	bl EnableBgSync
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B3E48: .4byte 0x0200000C
_080B3E4C: .4byte 0x01000200
_080B3E50: .4byte 0x06001000
_080B3E54: .4byte 0x01001400
_080B3E58: .4byte gBg2Tm
_080B3E5C: .4byte 0x00000804

	thumb_func_start sub_080B3E60
sub_080B3E60: @ 0x080B3E60
	push {r4, lr}
	ldr r2, _080B3E88 @ =0x0200000C
	ldr r4, _080B3E8C @ =0x00000802
	adds r3, r2, r4
	ldrh r4, [r3]
	adds r0, r4, r0
	strh r0, [r3]
	ldr r0, _080B3E90 @ =0x00000804
	adds r2, r2, r0
	ldrh r4, [r2]
	adds r1, r4, r1
	strh r1, [r2]
	ldrh r1, [r3]
	ldrh r2, [r2]
	movs r0, #2
	bl SetBgOffset
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B3E88: .4byte 0x0200000C
_080B3E8C: .4byte 0x00000802
_080B3E90: .4byte 0x00000804

	thumb_func_start sub_080B3E94
sub_080B3E94: @ 0x080B3E94
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	mov r8, r0
	adds r7, r1, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	mov sb, r2
	ldr r2, _080B3F30 @ =0x0200000C
	ldr r1, _080B3F34 @ =0x00000802
	adds r0, r2, r1
	movs r3, #0
	ldrsh r0, [r0, r3]
	add r8, r0
	adds r1, #2
	adds r0, r2, r1
	movs r3, #0
	ldrsh r0, [r0, r3]
	adds r7, r7, r0
	mov r0, r8
	asrs r5, r0, #3
	asrs r4, r7, #3
	cmp r5, #0x1f
	bhi _080B3F24
	cmp r4, #0x1f
	bhi _080B3F24
	lsls r0, r5, #1
	lsls r1, r4, #6
	adds r0, r0, r1
	adds r6, r0, r2
	ldr r0, _080B3F38 @ =0x0000FFFF
	ldrh r1, [r6]
	cmp r1, r0
	bne _080B3F00
	movs r3, #0x80
	lsls r3, r3, #4
	adds r2, r2, r3
	ldrh r1, [r2]
	strh r1, [r6]
	ldr r3, _080B3F3C @ =gBg2Tm
	lsls r0, r4, #5
	adds r0, r0, r5
	lsls r0, r0, #1
	adds r0, r0, r3
	ldr r3, _080B3F40 @ =0x0000A080
	adds r1, r1, r3
	strh r1, [r0]
	ldrh r0, [r2]
	adds r0, #1
	strh r0, [r2]
	movs r0, #4
	bl EnableBgSync
_080B3F00:
	ldrh r6, [r6]
	lsls r0, r6, #5
	ldr r1, _080B3F44 @ =0x06001000
	adds r0, r0, r1
	movs r2, #7
	ands r7, r2
	lsls r1, r7, #2
	adds r1, r1, r0
	movs r0, #0xf
	mov r3, sb
	ands r3, r0
	mov r0, r8
	ands r0, r2
	lsls r0, r0, #2
	lsls r3, r0
	ldr r0, [r1]
	orrs r0, r3
	str r0, [r1]
_080B3F24:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B3F30: .4byte 0x0200000C
_080B3F34: .4byte 0x00000802
_080B3F38: .4byte 0x0000FFFF
_080B3F3C: .4byte gBg2Tm
_080B3F40: .4byte 0x0000A080
_080B3F44: .4byte 0x06001000

	thumb_func_start sub_080B3F48
sub_080B3F48: @ 0x080B3F48
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x20
	mov sl, r0
	mov sb, r1
	str r2, [sp, #0x10]
	str r3, [sp, #0x14]
	ldr r0, [sp, #0x50]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x18]
	cmp sb, r3
	ble _080B3F6A
	adds r1, r3, #0
_080B3F6A:
	ldr r0, [sp, #0x44]
	cmp r1, r0
	ble _080B3F72
	adds r1, r0, #0
_080B3F72:
	ldr r0, [sp, #0x4c]
	cmp r1, r0
	ble _080B3F7A
	adds r1, r0, #0
_080B3F7A:
	mov r7, sb
	ldr r0, [sp, #0x14]
	cmp r7, r0
	bge _080B3F84
	adds r7, r0, #0
_080B3F84:
	ldr r0, [sp, #0x44]
	cmp r7, r0
	bge _080B3F8C
	adds r7, r0, #0
_080B3F8C:
	ldr r0, [sp, #0x4c]
	cmp r7, r0
	bge _080B3F94
	adds r7, r0, #0
_080B3F94:
	mov r8, sl
	ldr r0, [sp, #0x10]
	cmp sl, r0
	ble _080B3F9E
	mov r8, r0
_080B3F9E:
	ldr r0, [sp, #0x40]
	cmp r8, r0
	ble _080B3FA6
	mov r8, r0
_080B3FA6:
	ldr r0, [sp, #0x48]
	cmp r8, r0
	ble _080B3FAE
	mov r8, r0
_080B3FAE:
	mov r6, sl
	ldr r0, [sp, #0x10]
	cmp r6, r0
	bge _080B3FB8
	adds r6, r0, #0
_080B3FB8:
	ldr r0, [sp, #0x40]
	cmp r6, r0
	bge _080B3FC0
	adds r6, r0, #0
_080B3FC0:
	ldr r0, [sp, #0x48]
	cmp r6, r0
	bge _080B3FC8
	adds r6, r0, #0
_080B3FC8:
	adds r5, r1, #0
	cmp r5, r7
	bgt _080B403E
_080B3FCE:
	mov r4, r8
	adds r0, r5, #1
	str r0, [sp, #0x1c]
	cmp r4, r6
	bgt _080B4038
_080B3FD8:
	ldr r0, [sp, #0x10]
	str r0, [sp]
	ldr r0, [sp, #0x14]
	str r0, [sp, #4]
	ldr r0, [sp, #0x40]
	str r0, [sp, #8]
	ldr r0, [sp, #0x44]
	str r0, [sp, #0xc]
	adds r0, r4, #0
	adds r1, r5, #0
	mov r2, sl
	mov r3, sb
	bl sub_080ABBB4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B4006
	adds r0, r4, #0
	adds r1, r5, #0
	ldr r2, [sp, #0x18]
	bl sub_080B3E94
	b _080B4032
_080B4006:
	ldr r0, [sp, #0x40]
	str r0, [sp]
	ldr r0, [sp, #0x44]
	str r0, [sp, #4]
	ldr r0, [sp, #0x48]
	str r0, [sp, #8]
	ldr r0, [sp, #0x4c]
	str r0, [sp, #0xc]
	adds r0, r4, #0
	adds r1, r5, #0
	mov r2, sl
	mov r3, sb
	bl sub_080ABBB4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B4032
	adds r0, r4, #0
	adds r1, r5, #0
	ldr r2, [sp, #0x18]
	bl sub_080B3E94
_080B4032:
	adds r4, #1
	cmp r4, r6
	ble _080B3FD8
_080B4038:
	ldr r5, [sp, #0x1c]
	cmp r5, r7
	ble _080B3FCE
_080B403E:
	add sp, #0x20
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B4050
sub_080B4050: @ 0x080B4050
	push {r4, r5, lr}
	adds r4, r1, #0
	adds r5, r2, #0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, _080B40A4 @ =gAnims
	movs r3, #0
	strb r0, [r1]
	adds r2, r1, #0
	cmp r0, #1
	bne _080B40A8
	strh r4, [r2, #8]
	strh r5, [r2, #0xa]
	lsls r0, r4, #0x10
	cmp r0, #0
	bge _080B4072
	strh r3, [r2, #8]
_080B4072:
	movs r1, #8
	ldrsh r0, [r2, r1]
	movs r1, #0xc4
	lsls r1, r1, #2
	cmp r0, r1
	ble _080B4080
	strh r1, [r2, #8]
_080B4080:
	movs r4, #0xa
	ldrsh r0, [r2, r4]
	cmp r0, #0
	bge _080B408A
	strh r3, [r2, #0xa]
_080B408A:
	movs r1, #0xa
	ldrsh r0, [r2, r1]
	movs r1, #0x84
	lsls r1, r1, #2
	cmp r0, r1
	ble _080B4098
	strh r1, [r2, #0xa]
_080B4098:
	ldrh r0, [r2, #8]
	strh r0, [r2, #4]
	ldrh r0, [r2, #0xa]
	strh r0, [r2, #6]
	b _080B40B0
	.align 2, 0
_080B40A4: .4byte gAnims
_080B40A8:
	strh r3, [r2, #4]
	strh r3, [r2, #8]
	strh r3, [r2, #6]
	strh r3, [r2, #0xa]
_080B40B0:
	adds r0, r2, #0
	ldrb r3, [r0]
	movs r4, #4
	ldrsh r1, [r0, r4]
	cmp r1, #0
	bge _080B40BE
	adds r1, #7
_080B40BE:
	asrs r1, r1, #3
	movs r4, #6
	ldrsh r0, [r2, r4]
	cmp r0, #0
	bge _080B40CA
	adds r0, #7
_080B40CA:
	asrs r2, r0, #3
	adds r0, r3, #0
	bl sub_080B6BBC
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080B40D8
sub_080B40D8: @ 0x080B40D8
	push {lr}
	ldr r2, _080B4100 @ =gAnims
	ldrb r0, [r2]
	movs r3, #4
	ldrsh r1, [r2, r3]
	cmp r1, #0
	bge _080B40E8
	adds r1, #7
_080B40E8:
	asrs r1, r1, #3
	movs r3, #6
	ldrsh r2, [r2, r3]
	cmp r2, #0
	bge _080B40F4
	adds r2, #7
_080B40F4:
	asrs r2, r2, #3
	bl sub_080B6C8C
	pop {r0}
	bx r0
	.align 2, 0
_080B4100: .4byte gAnims

	thumb_func_start sub_080B4104
sub_080B4104: @ 0x080B4104
	push {r4, r5, lr}
	adds r3, r1, #0
	ldr r2, _080B416C @ =gAnims
	ldrb r1, [r2]
	cmp r1, #1
	bne _080B4164
	ldrh r4, [r2, #8]
	adds r1, r4, r0
	movs r4, #0
	strh r1, [r2, #8]
	ldrh r5, [r2, #0xa]
	adds r0, r5, r3
	strh r0, [r2, #0xa]
	lsls r1, r1, #0x10
	cmp r1, #0
	bge _080B4126
	strh r4, [r2, #8]
_080B4126:
	movs r1, #8
	ldrsh r0, [r2, r1]
	movs r1, #0xc4
	lsls r1, r1, #2
	cmp r0, r1
	ble _080B4134
	strh r1, [r2, #8]
_080B4134:
	movs r3, #0xa
	ldrsh r0, [r2, r3]
	cmp r0, #0
	bge _080B413E
	strh r4, [r2, #0xa]
_080B413E:
	movs r4, #0xa
	ldrsh r0, [r2, r4]
	movs r1, #0x84
	lsls r1, r1, #2
	cmp r0, r1
	ble _080B414C
	strh r1, [r2, #0xa]
_080B414C:
	movs r5, #8
	ldrsh r0, [r2, r5]
	movs r3, #4
	ldrsh r1, [r2, r3]
	subs r0, r0, r1
	movs r4, #0xa
	ldrsh r1, [r2, r4]
	movs r5, #6
	ldrsh r2, [r2, r5]
	subs r1, r1, r2
	bl sub_080B3E60
_080B4164:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B416C: .4byte gAnims

	thumb_func_start sub_080B4170
sub_080B4170: @ 0x080B4170
	push {r4, r5, lr}
	adds r2, r0, #0
	ldr r0, _080B41EC @ =gAnims
	adds r4, r0, #0
	ldrb r0, [r4]
	cmp r0, #1
	bne _080B41E6
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	beq _080B418E
	cmp r1, r0
	beq _080B418E
	strh r2, [r4, #8]
	strh r1, [r4, #0xa]
_080B418E:
	adds r3, r4, #0
	ldr r1, [r3, #8]
	ldr r0, [r3, #4]
	cmp r1, r0
	beq _080B41E6
	movs r1, #4
	ldrsh r0, [r3, r1]
	cmp r0, #0
	bge _080B41A2
	adds r0, #7
_080B41A2:
	asrs r0, r0, #3
	movs r2, #6
	ldrsh r1, [r3, r2]
	cmp r1, #0
	bge _080B41AE
	adds r1, #7
_080B41AE:
	asrs r1, r1, #3
	movs r5, #8
	ldrsh r2, [r3, r5]
	cmp r2, #0
	bge _080B41BA
	adds r2, #7
_080B41BA:
	asrs r2, r2, #3
	movs r5, #0xa
	ldrsh r3, [r3, r5]
	cmp r3, #0
	bge _080B41C6
	adds r3, #7
_080B41C6:
	asrs r3, r3, #3
	bl sub_080B6A1C
	movs r2, #0xff
	adds r1, r2, #0
	ldrh r0, [r4, #8]
	ands r1, r0
	ldrh r5, [r4, #0xa]
	ands r2, r5
	movs r0, #3
	bl SetBgOffset
	ldrh r0, [r4, #8]
	strh r0, [r4, #4]
	ldrh r0, [r4, #0xa]
	strh r0, [r4, #6]
_080B41E6:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B41EC: .4byte gAnims

	thumb_func_start sub_080B41F0
sub_080B41F0: @ 0x080B41F0
	ldr r0, _080B41F8 @ =gAnims
	movs r1, #4
	ldrsh r0, [r0, r1]
	bx lr
	.align 2, 0
_080B41F8: .4byte gAnims

	thumb_func_start sub_080B41FC
sub_080B41FC: @ 0x080B41FC
	ldr r0, _080B4204 @ =gAnims
	movs r1, #6
	ldrsh r0, [r0, r1]
	bx lr
	.align 2, 0
_080B4204: .4byte gAnims

	thumb_func_start sub_080B4208
sub_080B4208: @ 0x080B4208
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	str r0, [sp, #4]
	str r1, [sp, #8]
	ldr r0, [sp, #0x38]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp, #0xc]
	cmp r2, #7
	bgt _080B4226
	b _080B44A2
_080B4226:
	cmp r3, #7
	bgt _080B422C
	b _080B44A2
_080B422C:
	ldr r5, [sp, #4]
	adds r5, #8
	ldr r0, [sp, #4]
	adds r1, r0, r2
	adds r0, r1, #0
	subs r0, #0x28
	str r1, [sp, #0x14]
	ldr r1, [sp, #8]
	adds r1, r1, r3
	mov sb, r1
	ldr r2, [sp, #8]
	adds r2, #8
	str r2, [sp, #0x10]
	cmp r5, r0
	bge _080B4296
	movs r3, #0xff
	mov r8, r3
	ldr r7, _080B44B4 @ =0x08BFF7B8
	ldr r0, [sp, #0xc]
	ldr r1, _080B44B8 @ =0x00000806
	adds r6, r0, r1
	movs r2, #8
	rsbs r2, r2, #0
	add r2, sb
	mov sl, r2
_080B425E:
	ldr r4, _080B44BC @ =0x000001FF
	ands r4, r5
	str r6, [sp]
	movs r0, #2
	adds r1, r4, #0
	ldr r2, [sp, #8]
	mov r3, r8
	ands r2, r3
	adds r3, r7, #0
	bl sub_080068C4
	movs r0, #0x80
	lsls r0, r0, #6
	adds r4, r4, r0
	str r6, [sp]
	movs r0, #2
	adds r1, r4, #0
	mov r2, sl
	mov r3, r8
	ands r2, r3
	adds r3, r7, #0
	bl sub_080068C4
	adds r5, #0x20
	ldr r0, [sp, #0x14]
	subs r0, #0x28
	cmp r5, r0
	blt _080B425E
_080B4296:
	ldr r0, [sp, #0x14]
	subs r0, #0x18
	cmp r5, r0
	bge _080B42EA
	movs r0, #0xff
	mov r8, r0
	ldr r7, _080B44C0 @ =0x08BFF798
	ldr r1, [sp, #0xc]
	ldr r2, _080B44B8 @ =0x00000806
	adds r6, r1, r2
	movs r3, #8
	rsbs r3, r3, #0
	add r3, sb
	mov sl, r3
_080B42B2:
	ldr r4, _080B44BC @ =0x000001FF
	ands r4, r5
	str r6, [sp]
	movs r0, #2
	adds r1, r4, #0
	ldr r2, [sp, #8]
	mov r3, r8
	ands r2, r3
	adds r3, r7, #0
	bl sub_080068C4
	movs r0, #0x80
	lsls r0, r0, #6
	adds r4, r4, r0
	str r6, [sp]
	movs r0, #2
	adds r1, r4, #0
	mov r2, sl
	mov r3, r8
	ands r2, r3
	adds r3, r7, #0
	bl sub_080068C4
	adds r5, #0x10
	ldr r0, [sp, #0x14]
	subs r0, #0x18
	cmp r5, r0
	blt _080B42B2
_080B42EA:
	ldr r0, [sp, #0x14]
	subs r0, #8
	cmp r5, r0
	bge _080B433E
	movs r0, #0xff
	mov r8, r0
	ldr r7, _080B44C4 @ =0x08BFF760
	ldr r1, [sp, #0xc]
	ldr r2, _080B44B8 @ =0x00000806
	adds r6, r1, r2
	movs r3, #8
	rsbs r3, r3, #0
	add r3, sb
	mov sl, r3
_080B4306:
	ldr r4, _080B44BC @ =0x000001FF
	ands r4, r5
	str r6, [sp]
	movs r0, #2
	adds r1, r4, #0
	ldr r2, [sp, #8]
	mov r3, r8
	ands r2, r3
	adds r3, r7, #0
	bl sub_080068C4
	movs r0, #0x80
	lsls r0, r0, #6
	adds r4, r4, r0
	str r6, [sp]
	movs r0, #2
	adds r1, r4, #0
	mov r2, sl
	mov r3, r8
	ands r2, r3
	adds r3, r7, #0
	bl sub_080068C4
	adds r5, #8
	ldr r0, [sp, #0x14]
	subs r0, #8
	cmp r5, r0
	blt _080B4306
_080B433E:
	ldr r5, [sp, #0x10]
	mov r0, sb
	subs r0, #0x28
	cmp r5, r0
	bge _080B438E
	ldr r0, _080B44BC @ =0x000001FF
	mov sl, r0
	ldr r1, _080B44C8 @ =0x08BFF7C0
	mov r8, r1
	ldr r2, [sp, #0xc]
	ldr r3, _080B44CC @ =0x00000804
	adds r7, r2, r3
	ldr r6, [sp, #0x14]
	subs r6, #8
	ands r6, r0
_080B435C:
	movs r4, #0xff
	ands r4, r5
	str r7, [sp]
	movs r0, #2
	ldr r1, [sp, #4]
	mov r2, sl
	ands r1, r2
	adds r2, r4, #0
	mov r3, r8
	bl sub_080068C4
	str r7, [sp]
	movs r0, #2
	movs r3, #0x80
	lsls r3, r3, #5
	adds r1, r6, r3
	adds r2, r4, #0
	mov r3, r8
	bl sub_080068C4
	adds r5, #0x20
	mov r0, sb
	subs r0, #0x28
	cmp r5, r0
	blt _080B435C
_080B438E:
	mov r0, sb
	subs r0, #0x18
	cmp r5, r0
	bge _080B43DC
	ldr r0, _080B44BC @ =0x000001FF
	mov sl, r0
	ldr r1, _080B44D0 @ =0x08BFF780
	mov r8, r1
	ldr r2, [sp, #0xc]
	ldr r3, _080B44CC @ =0x00000804
	adds r7, r2, r3
	ldr r6, [sp, #0x14]
	subs r6, #8
	ands r6, r0
_080B43AA:
	movs r4, #0xff
	ands r4, r5
	str r7, [sp]
	movs r0, #2
	ldr r1, [sp, #4]
	mov r2, sl
	ands r1, r2
	adds r2, r4, #0
	mov r3, r8
	bl sub_080068C4
	str r7, [sp]
	movs r0, #2
	movs r3, #0x80
	lsls r3, r3, #5
	adds r1, r6, r3
	adds r2, r4, #0
	mov r3, r8
	bl sub_080068C4
	adds r5, #0x10
	mov r0, sb
	subs r0, #0x18
	cmp r5, r0
	blt _080B43AA
_080B43DC:
	mov r0, sb
	subs r0, #8
	cmp r5, r0
	bge _080B442A
	ldr r0, _080B44BC @ =0x000001FF
	mov sl, r0
	ldr r1, _080B44C4 @ =0x08BFF760
	mov r8, r1
	ldr r2, [sp, #0xc]
	ldr r3, _080B44CC @ =0x00000804
	adds r7, r2, r3
	ldr r6, [sp, #0x14]
	subs r6, #8
	ands r6, r0
_080B43F8:
	movs r4, #0xff
	ands r4, r5
	str r7, [sp]
	movs r0, #2
	ldr r1, [sp, #4]
	mov r2, sl
	ands r1, r2
	adds r2, r4, #0
	mov r3, r8
	bl sub_080068C4
	str r7, [sp]
	movs r0, #2
	movs r3, #0x80
	lsls r3, r3, #5
	adds r1, r6, r3
	adds r2, r4, #0
	mov r3, r8
	bl sub_080068C4
	adds r5, #8
	mov r0, sb
	subs r0, #8
	cmp r5, r0
	blt _080B43F8
_080B442A:
	ldr r0, _080B44BC @ =0x000001FF
	mov sl, r0
	mov r6, sl
	ldr r1, [sp, #4]
	ands r6, r1
	movs r4, #0xff
	ldr r2, [sp, #8]
	ands r4, r2
	ldr r7, _080B44C4 @ =0x08BFF760
	ldr r3, [sp, #0xc]
	ldr r0, _080B44D4 @ =0x00000805
	adds r3, r3, r0
	mov r8, r3
	str r3, [sp]
	movs r0, #2
	adds r1, r6, #0
	adds r2, r4, #0
	adds r3, r7, #0
	bl sub_080068C4
	ldr r5, [sp, #0x14]
	subs r5, #8
	mov r1, sl
	ands r5, r1
	movs r1, #0x80
	lsls r1, r1, #5
	adds r1, r5, r1
	mov r2, r8
	str r2, [sp]
	movs r0, #2
	adds r2, r4, #0
	adds r3, r7, #0
	bl sub_080068C4
	movs r0, #0x80
	lsls r0, r0, #6
	adds r6, r6, r0
	mov r4, sb
	subs r4, #8
	movs r3, #0xff
	ands r4, r3
	mov r0, r8
	str r0, [sp]
	movs r0, #2
	adds r1, r6, #0
	adds r2, r4, #0
	adds r3, r7, #0
	bl sub_080068C4
	movs r0, #0xc0
	lsls r0, r0, #6
	adds r5, r5, r0
	mov r1, r8
	str r1, [sp]
	movs r0, #2
	adds r1, r5, #0
	adds r2, r4, #0
	adds r3, r7, #0
	bl sub_080068C4
_080B44A2:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B44B4: .4byte 0x08BFF7B8
_080B44B8: .4byte 0x00000806
_080B44BC: .4byte 0x000001FF
_080B44C0: .4byte 0x08BFF798
_080B44C4: .4byte 0x08BFF760
_080B44C8: .4byte 0x08BFF7C0
_080B44CC: .4byte 0x00000804
_080B44D0: .4byte 0x08BFF780
_080B44D4: .4byte 0x00000805

	thumb_func_start sub_080B44D8
sub_080B44D8: @ 0x080B44D8
	push {r4, r5, lr}
	adds r4, r0, #0
	bl sub_080B40D8
	ldr r3, _080B4528 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r2, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	ldr r0, _080B452C @ =0x0000FFE0
	ldrh r5, [r3, #0x3c]
	ands r0, r5
	movs r1, #4
	orrs r0, r1
	ldr r1, _080B4530 @ =0x0000E0FF
	ands r0, r1
	movs r5, #0x80
	lsls r5, r5, #4
	adds r1, r5, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	str r2, [r4, #0x2c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B4528: .4byte gDispIo
_080B452C: .4byte 0x0000FFE0
_080B4530: .4byte 0x0000E0FF

	thumb_func_start sub_080B4534
sub_080B4534: @ 0x080B4534
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	cmp r0, #0
	bne _080B454C
	ldr r0, [r4, #0x30]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, [r4, #0x34]
	ldr r2, [r4, #0x38]
	bl sub_080B4050
_080B454C:
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080B4558
sub_080B4558: @ 0x080B4558
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r3, r0, #0
	ldr r0, [r3, #0x2c]
	adds r0, #1
	str r0, [r3, #0x2c]
	asrs r4, r0, #2
	ldr r2, _080B45D8 @ =gDispIo
	adds r6, r2, #0
	adds r6, #0x3c
	movs r0, #0x3f
	mov sl, r0
	ldrb r1, [r6]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r6]
	movs r0, #0x10
	subs r0, r0, r4
	movs r1, #0x44
	adds r1, r1, r2
	mov sb, r1
	movs r5, #0
	strb r0, [r1]
	movs r0, #0x45
	adds r0, r0, r2
	mov r8, r0
	strb r4, [r0]
	adds r7, r2, #0
	adds r7, #0x46
	strb r5, [r7]
	cmp r4, #0x10
	bne _080B45CA
	adds r0, r3, #0
	bl Proc_Break
	movs r0, #2
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
	mov r0, sl
	ldrb r1, [r6]
	ands r0, r1
	strb r0, [r6]
	mov r0, sb
	strb r4, [r0]
	mov r1, r8
	strb r5, [r1]
	strb r5, [r7]
_080B45CA:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B45D8: .4byte gDispIo

	thumb_func_start sub_080B45DC
sub_080B45DC: @ 0x080B45DC
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	adds r1, r3, #0
	ldr r0, _080B45F8 @ =0x08DB0DC4
	bl Proc_StartBlocking
	str r4, [r0, #0x34]
	str r5, [r0, #0x38]
	str r6, [r0, #0x30]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B45F8: .4byte 0x08DB0DC4

	thumb_func_start sub_080B45FC
sub_080B45FC: @ 0x080B45FC
	push {r4, lr}
	ldr r0, _080B4670 @ =0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0xa0
	bls _080B460E
	movs r3, #0
_080B460E:
	movs r0, #1
	ands r0, r3
	cmp r0, #0
	bne _080B4668
	ldr r1, _080B4674 @ =0x02000814
	movs r0, #2
	ldrb r2, [r1]
	ands r0, r2
	adds r4, r1, #0
	cmp r0, #0
	beq _080B463C
	ldr r1, _080B4678 @ =0x0203E640
	cmp r3, #0
	bne _080B4630
	ldr r0, _080B467C @ =0x0203E638
	ldr r0, [r0]
	str r0, [r1]
_080B4630:
	ldr r2, _080B4680 @ =0x04000040
	ldr r1, [r1]
	lsls r0, r3, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
_080B463C:
	movs r0, #1
	ldrb r4, [r4]
	ands r0, r4
	cmp r0, #0
	beq _080B4668
	ldr r0, _080B4684 @ =0x02000815
	ldrb r1, [r0]
	cmp r3, r1
	blo _080B4668
	adds r0, r1, #0
	adds r0, #0x28
	cmp r3, r0
	bge _080B4668
	subs r0, r3, r1
	lsls r0, r0, #1
	ldr r1, _080B4688 @ =0x02022AE0
	adds r0, r0, r1
	ldrh r1, [r0]
	ldr r0, _080B468C @ =0x05000268
	strh r1, [r0]
	subs r0, #0x20
	strh r1, [r0]
_080B4668:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B4670: .4byte 0x04000006
_080B4674: .4byte 0x02000814
_080B4678: .4byte 0x0203E640
_080B467C: .4byte 0x0203E638
_080B4680: .4byte 0x04000040
_080B4684: .4byte 0x02000815
_080B4688: .4byte 0x02022AE0
_080B468C: .4byte 0x05000268

	thumb_func_start sub_080B4690
sub_080B4690: @ 0x080B4690
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r4, r0, #0
	adds r7, r1, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	str r2, [sp]
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov sl, r3
	movs r2, #0
	cmp r2, r7
	bge _080B473E
	movs r0, #0x1f
	mov r1, sl
	ands r1, r0
	str r1, [sp, #4]
	movs r3, #0
	str r3, [sp, #8]
	mov r8, r4
	ldr r1, [sp]
	mov sb, r1
	mov r3, sb
	ands r3, r0
	mov sb, r3
_080B46CA:
	subs r6, r7, r2
	mov r0, sb
	muls r0, r6, r0
	ldr r1, [sp, #8]
	adds r0, r0, r1
	adds r1, r7, #0
	str r2, [sp, #0xc]
	bl __divsi3
	adds r4, r0, #0
	movs r3, #0x1f
	ands r4, r3
	ldr r0, [sp]
	movs r1, #0xf8
	lsls r1, r1, #2
	ands r0, r1
	muls r0, r6, r0
	mov r1, sl
	movs r3, #0xf8
	lsls r3, r3, #2
	ands r1, r3
	ldr r2, [sp, #0xc]
	muls r1, r2, r1
	adds r0, r0, r1
	adds r1, r7, #0
	bl __divsi3
	movs r1, #0xf8
	lsls r1, r1, #2
	ands r0, r1
	adds r4, r4, r0
	movs r5, #0xf8
	lsls r5, r5, #7
	ldr r0, [sp]
	ands r0, r5
	muls r0, r6, r0
	mov r1, sl
	ands r1, r5
	ldr r2, [sp, #0xc]
	muls r1, r2, r1
	adds r0, r0, r1
	adds r1, r7, #0
	bl __divsi3
	ands r0, r5
	adds r4, r4, r0
	mov r3, r8
	strh r4, [r3]
	ldr r0, [sp, #8]
	ldr r1, [sp, #4]
	adds r0, r0, r1
	str r0, [sp, #8]
	movs r3, #2
	add r8, r3
	ldr r2, [sp, #0xc]
	adds r2, #1
	cmp r2, r7
	blt _080B46CA
_080B473E:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B4750
sub_080B4750: @ 0x080B4750
	adds r2, r0, #0
	adds r0, #0x2b
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	subs r0, #2
	strb r1, [r0]
	subs r0, #1
	strb r1, [r0]
	strh r1, [r2, #0x2e]
	movs r3, #0
	movs r1, #3
	adds r0, #0x1f
_080B476C:
	str r3, [r0]
	subs r0, #8
	subs r1, #1
	cmp r1, #0
	bge _080B476C
	bx lr

	thumb_func_start sub_080B4778
sub_080B4778: @ 0x080B4778
	push {r4, lr}
	adds r2, r0, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, #0
	beq _080B4806
	adds r0, r2, #0
	adds r0, #0x29
	ldrb r3, [r0]
	cmp r3, #0
	beq _080B47A4
	adds r0, #1
	ldrb r1, [r0]
	adds r4, r0, #0
	cmp r1, #0
	bne _080B479E
	bl sub_080B49A8
	b _080B47DE
_080B479E:
	subs r0, r1, #1
	strb r0, [r4]
	b _080B47DE
_080B47A4:
	adds r1, r2, #0
	adds r1, #0x2c
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x1b
	cmp r0, #0x10
	bne _080B47B8
	strb r3, [r1]
_080B47B8:
	ldrb r1, [r1]
	lsrs r1, r1, #3
	movs r0, #0xf
	ands r0, r1
	cmp r0, #7
	bls _080B47CE
	movs r0, #7
	ands r1, r0
	movs r0, #0xa
	subs r0, r0, r1
	b _080B47D4
_080B47CE:
	movs r0, #7
	ands r1, r0
	adds r0, r1, #2
_080B47D4:
	lsls r1, r0, #2
	adds r0, r2, #0
	adds r0, #0x2a
	strb r1, [r0]
	adds r4, r0, #0
_080B47DE:
	ldr r3, _080B480C @ =gDispIo
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	ldrb r4, [r4]
	lsrs r1, r4, #2
	adds r0, r3, #0
	adds r0, #0x44
	movs r2, #0
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r2, [r0]
_080B4806:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B480C: .4byte gDispIo

	thumb_func_start sub_080B4810
sub_080B4810: @ 0x080B4810
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r4, r0, #0
	mov r8, r1
	ldr r0, _080B4914 @ =0x08DB0E8C
	bl Proc_Find
	adds r7, r0, #0
	cmp r4, #3
	bhi _080B4902
	cmp r7, #0
	beq _080B4902
	lsls r4, r4, #3
	mov sl, r4
	adds r0, #0x30
	add r0, sl
	mov sb, r0
	ldr r0, [r0]
	cmp r0, #0
	bne _080B4902
	ldr r5, _080B4918 @ =0x08622B38
	mov r0, r8
	lsls r4, r0, #2
	add r4, r8
	lsls r4, r4, #2
	adds r6, r4, r5
	ldr r0, [r6]
	ldr r1, _080B491C @ =0x06010000
	ldrh r2, [r7, #0x2e]
	orrs r1, r2
	bl sub_08013688
	movs r3, #0xe
	ldrsh r1, [r6, r3]
	ldr r3, _080B4920 @ =gAnims
	movs r2, #4
	ldrsh r0, [r3, r2]
	subs r1, r1, r0
	movs r2, #0x10
	ldrsh r0, [r6, r2]
	mov ip, r0
	movs r2, #6
	ldrsh r0, [r3, r2]
	mov r3, ip
	subs r2, r3, r0
	movs r0, #0x80
	lsls r0, r0, #3
	adds r0, r0, r2
	mov ip, r0
	adds r0, r5, #4
	adds r0, r4, r0
	ldr r0, [r0]
	ldrh r2, [r7, #0x2e]
	lsrs r2, r2, #5
	str r2, [sp, #8]
	movs r3, #0x9c
	lsls r3, r3, #8
	adds r3, r2, r3
	str r3, [sp, #8]
	adds r5, #8
	adds r4, r4, r5
	ldr r4, [r4]
	str r4, [sp]
	movs r4, #0xd
	str r4, [sp, #4]
	mov r2, ip
	bl sub_08012AF0
	mov r5, sb
	str r0, [r5]
	mov r1, sl
	adds r0, r7, r1
	ldrh r1, [r7, #0x2e]
	movs r4, #0
	strh r1, [r0, #0x36]
	adds r0, #0x34
	mov r2, r8
	strb r2, [r0]
	ldrh r3, [r7, #0x2e]
	ldrh r6, [r6, #0xc]
	adds r0, r3, r6
	strh r0, [r7, #0x2e]
	adds r3, r7, #0
	adds r3, #0x2b
	ldrb r0, [r3]
	cmp r0, #0
	bne _080B48E6
	ldr r2, _080B4924 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r5, [r1]
	ands r0, r5
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x44
	strb r4, [r0]
	adds r1, #9
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x46
	strb r4, [r0]
_080B48E6:
	ldrb r0, [r3]
	adds r0, #1
	strb r0, [r3]
	ldr r2, _080B4928 @ =0x030027CC
	ldr r0, _080B492C @ =0x0000FFE0
	ldrh r1, [r2]
	ands r0, r1
	ldr r1, _080B4930 @ =0x0000E0FF
	ands r0, r1
	movs r3, #0x80
	lsls r3, r3, #4
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
_080B4902:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B4914: .4byte 0x08DB0E8C
_080B4918: .4byte 0x08622B38
_080B491C: .4byte 0x06010000
_080B4920: .4byte gAnims
_080B4924: .4byte gDispIo
_080B4928: .4byte 0x030027CC
_080B492C: .4byte 0x0000FFE0
_080B4930: .4byte 0x0000E0FF

	thumb_func_start sub_080B4934
sub_080B4934: @ 0x080B4934
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, _080B497C @ =0x08DB0E8C
	bl Proc_Find
	adds r4, r0, #0
	cmp r5, #3
	bhi _080B499E
	cmp r4, #0
	beq _080B499E
	lsls r6, r5, #3
	adds r0, #0x30
	adds r5, r0, r6
	ldr r0, [r5]
	cmp r0, #0
	beq _080B499E
	bl EndSpriteAnimProc
	movs r0, #0
	str r0, [r5]
	adds r1, r4, #0
	adds r1, #0x2b
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _080B4980
	movs r1, #0
	strh r0, [r4, #0x2e]
	adds r0, r4, #0
	adds r0, #0x2c
	strb r1, [r0]
	b _080B499E
	.align 2, 0
_080B497C: .4byte 0x08DB0E8C
_080B4980:
	ldrh r3, [r4, #0x2e]
	adds r1, r4, r6
	ldrh r5, [r1, #0x36]
	ldr r2, _080B49A4 @ =0x08622B38
	adds r1, #0x34
	ldrb r6, [r1]
	lsls r0, r6, #2
	adds r0, r0, r6
	lsls r0, r0, #2
	adds r0, r0, r2
	ldrh r0, [r0, #0xc]
	adds r0, r0, r5
	cmp r3, r0
	bne _080B499E
	strh r5, [r4, #0x2e]
_080B499E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B49A4: .4byte 0x08622B38

	thumb_func_start sub_080B49A8
sub_080B49A8: @ 0x080B49A8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	ldr r0, _080B4A1C @ =0x08DB0E8C
	bl Proc_Find
	adds r5, r0, #0
	cmp r5, #0
	beq _080B4A0A
	movs r0, #0x2b
	adds r0, r0, r5
	mov sl, r0
	adds r0, r5, #0
	adds r0, #0x2c
	str r0, [sp]
	movs r0, #0x2a
	adds r0, r0, r5
	mov sb, r0
	movs r0, #0x29
	adds r0, r0, r5
	mov r8, r0
	movs r7, #0
	adds r4, r5, #0
	adds r4, #0x30
	movs r6, #3
_080B49E0:
	ldr r0, [r4]
	cmp r0, #0
	beq _080B49EC
	bl EndSpriteAnimProc
	str r7, [r4]
_080B49EC:
	adds r4, #8
	subs r6, #1
	cmp r6, #0
	bge _080B49E0
	movs r1, #0
	movs r0, #0
	strh r0, [r5, #0x2e]
	mov r0, sl
	strb r1, [r0]
	ldr r0, [sp]
	strb r1, [r0]
	mov r0, sb
	strb r1, [r0]
	mov r0, r8
	strb r1, [r0]
_080B4A0A:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B4A1C: .4byte 0x08DB0E8C

	thumb_func_start sub_080B4A20
sub_080B4A20: @ 0x080B4A20
	push {lr}
	ldr r0, _080B4A38 @ =0x08DB0E8C
	bl Proc_Find
	cmp r0, #0
	beq _080B4A34
	adds r1, r0, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
_080B4A34:
	pop {r0}
	bx r0
	.align 2, 0
_080B4A38: .4byte 0x08DB0E8C

	thumb_func_start sub_080B4A3C
sub_080B4A3C: @ 0x080B4A3C
	push {lr}
	adds r1, r0, #0
	ldr r0, _080B4A4C @ =0x08DB0E8C
	bl Proc_Start
	pop {r1}
	bx r1
	.align 2, 0
_080B4A4C: .4byte 0x08DB0E8C

	thumb_func_start sub_080B4A50
sub_080B4A50: @ 0x080B4A50
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	ldr r0, _080B4A88 @ =0x08DB0E8C
	bl Proc_Find
	cmp r0, #0
	beq _080B4A80
	lsls r1, r4, #3
	adds r0, #0x30
	adds r0, r0, r1
	ldr r2, [r0]
	cmp r2, #0
	beq _080B4A80
	ldr r0, _080B4A8C @ =gAnims
	movs r3, #4
	ldrsh r1, [r0, r3]
	subs r1, r5, r1
	str r1, [r2, #0x54]
	movs r1, #6
	ldrsh r0, [r0, r1]
	subs r0, r6, r0
	str r0, [r2, #0x58]
_080B4A80:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B4A88: .4byte 0x08DB0E8C
_080B4A8C: .4byte gAnims

	thumb_func_start sub_080B4A90
sub_080B4A90: @ 0x080B4A90
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r6, _080B4ABC @ =0x44444444
	ldr r5, _080B4AC0 @ =0x06014000
	movs r4, #3
_080B4A9A:
	str r6, [sp]
	mov r0, sp
	adds r1, r5, #0
	ldr r2, _080B4AC4 @ =0x010000D8
	bl CpuFastSet
	movs r0, #0x80
	lsls r0, r0, #3
	adds r5, r5, r0
	subs r4, #1
	cmp r4, #0
	bge _080B4A9A
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B4ABC: .4byte 0x44444444
_080B4AC0: .4byte 0x06014000
_080B4AC4: .4byte 0x010000D8

	thumb_func_start sub_080B4AC8
sub_080B4AC8: @ 0x080B4AC8
	push {r4, lr}
	adds r3, r0, #0
	adds r3, #0x29
	movs r2, #0
	movs r4, #1
	movs r1, #1
	strb r1, [r3]
	adds r0, #0x2a
	strb r2, [r0]
	bl sub_080B4A90
	ldr r0, _080B4AF8 @ =0x02000814
	ldrb r1, [r0]
	eors r4, r1
	strb r4, [r0]
	ldr r0, _080B4AFC @ =0x02022AE0
	ldr r2, _080B4B00 @ =0x000044C3
	ldr r3, _080B4B04 @ =0x00007247
	movs r1, #0x28
	bl sub_080B4690
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B4AF8: .4byte 0x02000814
_080B4AFC: .4byte 0x02022AE0
_080B4B00: .4byte 0x000044C3
_080B4B04: .4byte 0x00007247

	thumb_func_start sub_080B4B08
sub_080B4B08: @ 0x080B4B08
	push {r4, lr}
	sub sp, #4
	adds r1, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	beq _080B4B48
	movs r4, #0
	adds r0, r1, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	bne _080B4B24
	movs r4, #0x70
_080B4B24:
	ldr r3, _080B4B50 @ =0x08DB0DFC
	movs r0, #0xc0
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #2
	movs r1, #0
	adds r2, r4, #0
	bl sub_080068C4
	ldr r3, _080B4B54 @ =0x08DB0E6A
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #1
	movs r1, #0
	adds r2, r4, #0
	bl sub_080068C4
_080B4B48:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B4B50: .4byte 0x08DB0DFC
_080B4B54: .4byte 0x08DB0E6A

	thumb_func_start sub_080B4B58
sub_080B4B58: @ 0x080B4B58
	push {r4, r5, r6, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r6, r4, #0
	ldr r0, _080B4BA4 @ =0x08DB0EAC
	bl Proc_Find
	adds r5, r0, #0
	cmp r5, #0
	beq _080B4B9C
	bl sub_080B4A90
	cmp r4, #0
	bne _080B4B7A
	ldr r1, _080B4BA8 @ =0x02000815
	movs r0, #4
	strb r0, [r1]
_080B4B7A:
	cmp r4, #1
	bne _080B4B84
	ldr r1, _080B4BA8 @ =0x02000815
	movs r0, #0x74
	strb r0, [r1]
_080B4B84:
	ldr r1, _080B4BAC @ =0x02000814
	movs r0, #1
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x29
	strb r6, [r0]
	adds r1, r5, #0
	adds r1, #0x2a
	movs r0, #1
	strb r0, [r1]
_080B4B9C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B4BA4: .4byte 0x08DB0EAC
_080B4BA8: .4byte 0x02000815
_080B4BAC: .4byte 0x02000814

	thumb_func_start sub_080B4BB0
sub_080B4BB0: @ 0x080B4BB0
	push {lr}
	ldr r0, _080B4BD4 @ =0x08DB0EAC
	bl Proc_Find
	adds r2, r0, #0
	cmp r2, #0
	beq _080B4BD0
	ldr r1, _080B4BD8 @ =0x02000814
	movs r0, #1
	ldrb r3, [r1]
	eors r0, r3
	strb r0, [r1]
	adds r1, r2, #0
	adds r1, #0x2a
	movs r0, #0
	strb r0, [r1]
_080B4BD0:
	pop {r0}
	bx r0
	.align 2, 0
_080B4BD4: .4byte 0x08DB0EAC
_080B4BD8: .4byte 0x02000814

	thumb_func_start sub_080B4BDC
sub_080B4BDC: @ 0x080B4BDC
	push {lr}
	adds r1, r0, #0
	ldr r0, _080B4BEC @ =0x08DB0EAC
	bl Proc_Start
	pop {r1}
	bx r1
	.align 2, 0
_080B4BEC: .4byte 0x08DB0EAC

	thumb_func_start sub_080B4BF0
sub_080B4BF0: @ 0x080B4BF0
	push {r4, lr}
	sub sp, #0xc
	movs r2, #0x2a
	ldrsh r1, [r0, r2]
	ldr r3, _080B4C2C @ =gAnims
	movs r4, #4
	ldrsh r2, [r3, r4]
	subs r1, r1, r2
	subs r1, #4
	movs r4, #0x2c
	ldrsh r2, [r0, r4]
	movs r4, #6
	ldrsh r0, [r3, r4]
	subs r2, r2, r0
	subs r2, #4
	ldr r3, _080B4C30 @ =0x08DB0DF4
	movs r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [sp, #8]
	movs r0, #0xb
	bl sub_080B4C58
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B4C2C: .4byte gAnims
_080B4C30: .4byte 0x08DB0DF4

	thumb_func_start sub_080B4C34
sub_080B4C34: @ 0x080B4C34
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r1, r3, #0
	ldr r0, _080B4C54 @ =0x08DB0ECC
	bl Proc_Start
	strh r4, [r0, #0x2a]
	strh r5, [r0, #0x2c]
	adds r0, #0x29
	strb r6, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B4C54: .4byte 0x08DB0ECC

	thumb_func_start sub_080B4C58
sub_080B4C58: @ 0x080B4C58
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r1, #0
	adds r5, r2, #0
	adds r7, r3, #0
	ldr r1, [sp, #0x18]
	ldr r2, [sp, #0x1c]
	ldr r3, [sp, #0x20]
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	lsls r1, r1, #0x10
	lsrs r0, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	movs r1, #0x10
	rsbs r1, r1, #0
	cmp r4, r1
	blt _080B4CA2
	cmp r5, r1
	blt _080B4CA2
	cmp r4, #0xef
	bgt _080B4CA2
	cmp r5, #0x9f
	bgt _080B4CA2
	ldr r1, _080B4CAC @ =0x000001FF
	ands r1, r4
	adds r1, r1, r2
	movs r2, #0xff
	ands r2, r5
	adds r2, r2, r0
	str r3, [sp]
	adds r0, r6, #0
	adds r3, r7, #0
	bl sub_080068C4
_080B4CA2:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B4CAC: .4byte 0x000001FF

	thumb_func_start sub_080B4CB0
sub_080B4CB0: @ 0x080B4CB0
	adds r2, r0, #0
	adds r0, #0x2a
	movs r1, #0
	strb r1, [r0]
	str r1, [r2, #0x50]
	adds r0, #0x36
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	str r1, [r2, #0x5c]
	adds r1, r2, #0
	adds r1, #0x62
	movs r0, #1
	strb r0, [r1]
	bx lr
	.align 2, 0

	thumb_func_start sub_080B4CD0
sub_080B4CD0: @ 0x080B4CD0
	push {lr}
	adds r2, r0, #0
	adds r2, #0x29
	ldrb r3, [r2]
	cmp r1, r3
	beq _080B4CE6
	strb r1, [r2]
	ldr r0, [r0, #0x58]
	ldrb r1, [r2]
	bl sub_0806C738
_080B4CE6:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B4CEC
sub_080B4CEC: @ 0x080B4CEC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x24
	adds r4, r0, #0
	ldr r0, [r4, #0x50]
	lsrs r1, r0, #0x14
	str r1, [sp, #4]
	lsls r0, r0, #0xc
	lsrs r0, r0, #0x16
	str r0, [sp, #8]
	adds r1, r4, #0
	adds r1, #0x2a
	ldrb r0, [r1]
	cmp r0, #0
	bne _080B4D12
	b _080B50D0
_080B4D12:
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	mov sl, r0
	ldrb r1, [r1]
	subs r1, #1
	ldr r2, [sp, #4]
	cmp r2, r1
	blt _080B4D26
	b _080B5010
_080B4D26:
	adds r0, r4, #0
	adds r0, #0x61
	ldrb r1, [r0]
	str r0, [sp, #0x20]
	adds r2, r4, #0
	adds r2, #0x60
	ldr r3, [sp, #4]
	cmp r1, r3
	beq _080B4D48
	ldr r0, [r4, #0x54]
	lsrs r0, r0, #0x15
	movs r1, #3
	ands r0, r1
	lsls r1, r0, #4
	subs r1, r1, r0
	lsls r1, r1, #1
	strb r1, [r2]
_080B4D48:
	ldrb r0, [r2]
	cmp r0, #0
	beq _080B4D6C
	subs r0, #1
	strb r0, [r2]
	adds r1, r4, #0
	adds r1, #0x4a
	movs r6, #0
	ldrsh r5, [r1, r6]
	str r5, [sp, #0xc]
	adds r0, r4, #0
	adds r0, #0x4c
	movs r2, #0
	ldrsh r7, [r0, r2]
	str r7, [sp, #0x10]
	mov sb, r1
	adds r6, r0, #0
	b _080B5098
_080B4D6C:
	ldr r3, [sp, #4]
	cmp r3, #0
	ble _080B4D8C
	adds r0, r3, #0
	subs r0, #1
	lsls r0, r0, #1
	adds r1, r4, #0
	adds r1, #0x2e
	adds r0, r1, r0
	movs r6, #0
	ldrsh r5, [r0, r6]
	str r5, [sp, #0x14]
	adds r3, r1, #0
	ldr r7, [sp, #4]
	lsls r5, r7, #1
	b _080B4DA0
_080B4D8C:
	ldr r0, [sp, #4]
	lsls r2, r0, #1
	adds r1, r4, #0
	adds r1, #0x2e
	adds r0, r1, r2
	movs r5, #0
	ldrsh r3, [r0, r5]
	str r3, [sp, #0x14]
	adds r3, r1, #0
	adds r5, r2, #0
_080B4DA0:
	adds r0, r3, r5
	movs r7, #0
	ldrsh r6, [r0, r7]
	str r6, [sp, #0x18]
	ldr r2, [sp, #4]
	adds r2, #1
	lsls r0, r2, #1
	adds r0, r3, r0
	movs r6, #0
	ldrsh r1, [r0, r6]
	mov sb, r1
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r1, [r0]
	subs r1, #2
	mov ip, r0
	ldr r7, [sp, #4]
	cmp r7, r1
	bge _080B4DD6
	adds r0, r7, #0
	adds r0, #2
	lsls r0, r0, #1
	adds r0, r3, r0
	movs r3, #0
	ldrsh r1, [r0, r3]
	mov r8, r1
	b _080B4DD8
_080B4DD6:
	mov r8, sb
_080B4DD8:
	ldr r6, [sp, #4]
	cmp r6, #0
	ble _080B4DF0
	adds r0, r6, #0
	subs r0, #1
	lsls r0, r0, #1
	adds r1, r4, #0
	adds r1, #0x3c
	adds r0, r1, r0
	movs r3, #0
	ldrsh r7, [r0, r3]
	b _080B4DFA
_080B4DF0:
	adds r1, r4, #0
	adds r1, #0x3c
	adds r0, r1, r5
	movs r6, #0
	ldrsh r7, [r0, r6]
_080B4DFA:
	adds r0, r1, r5
	movs r5, #0
	ldrsh r3, [r0, r5]
	str r3, [sp, #0x1c]
	lsls r0, r2, #1
	adds r0, r1, r0
	movs r2, #0
	ldrsh r6, [r0, r2]
	mov r3, ip
	ldrb r0, [r3]
	subs r0, #2
	ldr r5, [sp, #4]
	cmp r5, r0
	bge _080B4E24
	adds r0, r5, #0
	adds r0, #2
	lsls r0, r0, #1
	adds r0, r1, r0
	movs r1, #0
	ldrsh r5, [r0, r1]
	b _080B4E26
_080B4E24:
	adds r5, r6, #0
_080B4E26:
	ldr r2, [sp, #8]
	str r2, [sp]
	ldr r0, [sp, #0x14]
	ldr r1, [sp, #0x18]
	mov r2, sb
	mov r3, r8
	bl sub_080A95B4
	str r0, [sp, #0xc]
	ldr r3, [sp, #8]
	str r3, [sp]
	adds r0, r7, #0
	ldr r1, [sp, #0x1c]
	adds r2, r6, #0
	adds r3, r5, #0
	bl sub_080A95B4
	str r0, [sp, #0x10]
	ldr r0, [sp, #8]
	str r0, [sp]
	ldr r0, [sp, #0x14]
	ldr r1, [sp, #0x18]
	mov r2, sb
	mov r3, r8
	bl sub_080A968C
	mov r8, r0
	ldr r1, [sp, #8]
	str r1, [sp]
	adds r0, r7, #0
	ldr r1, [sp, #0x1c]
	adds r2, r6, #0
	adds r3, r5, #0
	bl sub_080A968C
	adds r6, r0, #0
	mov r2, r8
	mov r0, r8
	muls r0, r2, r0
	adds r1, r6, #0
	muls r1, r6, r1
	adds r0, r0, r1
	bl Sqrt
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	ldr r3, [r4, #0x5c]
	adds r2, r3, r5
	str r2, [r4, #0x5c]
	ldr r0, [r4, #0x54]
	movs r1, #0x80
	lsls r1, r1, #0x11
	ands r0, r1
	cmp r0, #0
	beq _080B4EA8
	lsrs r1, r2, #0xc
	lsrs r0, r3, #0xc
	cmp r1, r0
	bls _080B4EA8
	ldr r0, [sp, #0xc]
	ldr r1, [sp, #0x10]
	movs r2, #0
	adds r3, r4, #0
	bl sub_080B4C34
_080B4EA8:
	adds r1, r5, #1
	movs r0, #0x80
	lsls r0, r0, #0xb
	bl __divsi3
	adds r1, r0, #0
	ldr r0, _080B4F38 @ =0x000001FF
	cmp r1, r0
	bgt _080B4EBE
	movs r1, #0x80
	lsls r1, r1, #2
_080B4EBE:
	ldr r2, [r4, #0x54]
	movs r0, #0x80
	lsls r0, r0, #5
	ands r0, r2
	cmp r0, #0
	beq _080B4ECC
	lsls r1, r1, #1
_080B4ECC:
	movs r0, #0x80
	lsls r0, r0, #0xd
	ands r2, r0
	cmp r2, #0
	beq _080B4ED8
	asrs r1, r1, #1
_080B4ED8:
	ldr r0, [r4, #0x50]
	adds r0, r0, r1
	str r0, [r4, #0x50]
	mov r3, r8
	lsls r0, r3, #0x10
	asrs r0, r0, #0x10
	lsls r1, r6, #0x10
	asrs r1, r1, #0x10
	bl ArcTan2
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x18
	adds r2, r4, #0
	adds r2, #0x62
	ldrb r0, [r2]
	cmp r0, #0
	beq _080B4F3C
	adds r0, r1, #0
	subs r0, #0x21
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xbf
	bls _080B4F0A
	movs r5, #1
	mov sl, r5
_080B4F0A:
	cmp r0, #0x3f
	bhi _080B4F12
	movs r6, #2
	mov sl, r6
_080B4F12:
	adds r0, r1, #0
	subs r0, #0x61
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x3f
	bhi _080B4F22
	movs r7, #0
	mov sl, r7
_080B4F22:
	adds r0, r1, #0
	adds r0, #0x5f
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x3f
	bhi _080B4F32
	movs r0, #3
	mov sl, r0
_080B4F32:
	movs r0, #0
	strb r0, [r2]
	b _080B4F7C
	.align 2, 0
_080B4F38: .4byte 0x000001FF
_080B4F3C:
	adds r0, r1, #0
	subs r0, #0x1d
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xc7
	bls _080B4F4C
	movs r2, #1
	mov sl, r2
_080B4F4C:
	adds r0, r1, #0
	subs r0, #0x25
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x37
	bhi _080B4F5C
	movs r3, #2
	mov sl, r3
_080B4F5C:
	adds r0, r1, #0
	subs r0, #0x65
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x37
	bhi _080B4F6C
	movs r5, #0
	mov sl, r5
_080B4F6C:
	adds r0, r1, #0
	adds r0, #0x5b
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x37
	bhi _080B4F7C
	movs r6, #3
	mov sl, r6
_080B4F7C:
	adds r0, r4, #0
	mov r1, sl
	bl sub_080B4CD0
	ldr r1, [r4, #0x54]
	movs r0, #0x80
	lsls r0, r0, #8
	ands r1, r0
	movs r7, #0x4a
	adds r7, r7, r4
	mov sb, r7
	adds r6, r4, #0
	adds r6, #0x4c
	cmp r1, #0
	beq _080B4FF8
	ldr r1, _080B500C @ =gAnims
	movs r0, #4
	ldrsh r2, [r1, r0]
	ldr r3, [sp, #0xc]
	subs r0, r3, r2
	adds r5, r0, #0
	subs r5, #8
	movs r7, #6
	ldrsh r1, [r1, r7]
	ldr r3, [sp, #0x10]
	subs r0, r3, r1
	adds r3, r0, #0
	subs r3, #0xc
	mov r7, sb
	movs r0, #0
	ldrsh r7, [r7, r0]
	subs r2, r7, r2
	subs r2, #8
	movs r0, #0
	ldrsh r7, [r6, r0]
	subs r1, r7, r1
	subs r1, #0xc
	cmp r5, #0x6f
	bgt _080B4FCE
	cmp r5, r2
	blt _080B4FE6
_080B4FCE:
	cmp r5, #0x80
	ble _080B4FD6
	cmp r5, r2
	bgt _080B4FE6
_080B4FD6:
	cmp r3, #0x5f
	bgt _080B4FDE
	cmp r3, r1
	blt _080B4FE6
_080B4FDE:
	cmp r3, #0x40
	ble _080B4FF8
	cmp r3, r1
	ble _080B4FF8
_080B4FE6:
	subs r0, r5, r2
	subs r1, r3, r1
	bl sub_080B4104
	movs r1, #1
	rsbs r1, r1, #0
	adds r0, r1, #0
	bl sub_080B4170
_080B4FF8:
	ldr r0, [r4, #0x54]
	movs r1, #0x80
	lsls r1, r1, #0x12
	ands r0, r1
	cmp r0, #0
	beq _080B5098
	movs r0, #1
	bl sub_080B3DE4
	b _080B5098
	.align 2, 0
_080B500C: .4byte gAnims
_080B5010:
	lsls r1, r1, #1
	adds r0, r4, #0
	adds r0, #0x2e
	adds r0, r0, r1
	movs r3, #0
	ldrsh r2, [r0, r3]
	str r2, [sp, #0xc]
	adds r0, r4, #0
	adds r0, #0x3c
	adds r0, r0, r1
	movs r6, #0
	ldrsh r5, [r0, r6]
	str r5, [sp, #0x10]
	ldr r1, [r4, #0x54]
	movs r0, #0xc0
	lsls r0, r0, #2
	ands r1, r0
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r1, r0
	beq _080B505E
	cmp r1, r0
	bhi _080B5044
	cmp r1, #0
	beq _080B5066
	b _080B5076
_080B5044:
	movs r0, #0x80
	lsls r0, r0, #2
	cmp r1, r0
	bne _080B5076
	adds r1, r4, #0
	adds r1, #0x62
	movs r0, #1
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #4
	bl sub_080B4CD0
	b _080B5076
_080B505E:
	ldr r0, [r4, #0x58]
	bl sub_0806E2C8
	b _080B5076
_080B5066:
	adds r1, r4, #0
	adds r1, #0x62
	movs r0, #1
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #0xf
	bl sub_080B4CD0
_080B5076:
	ldr r1, [r4, #0x54]
	movs r0, #0x80
	lsls r0, r0, #0x12
	ands r1, r0
	adds r7, r4, #0
	adds r7, #0x61
	str r7, [sp, #0x20]
	movs r0, #0x4a
	adds r0, r0, r4
	mov sb, r0
	adds r6, r4, #0
	adds r6, #0x4c
	cmp r1, #0
	beq _080B5098
	movs r0, #0
	bl sub_080B3DE4
_080B5098:
	mov r1, sp
	ldrh r2, [r1, #0xc]
	mov r1, sb
	strh r2, [r1]
	mov r3, sp
	ldrh r3, [r3, #0x10]
	strh r3, [r6]
	ldr r0, [r4, #0x58]
	ldr r2, _080B50CC @ =gAnims
	movs r5, #4
	ldrsh r1, [r2, r5]
	ldr r6, [sp, #0xc]
	subs r1, r6, r1
	subs r1, #8
	movs r7, #6
	ldrsh r2, [r2, r7]
	ldr r3, [sp, #0x10]
	subs r2, r3, r2
	subs r2, #0xc
	bl sub_0806E2E8
	ldr r0, [r4, #0x58]
	bl sub_0806E2C8
	b _080B50DA
	.align 2, 0
_080B50CC: .4byte gAnims
_080B50D0:
	ldr r0, [r4, #0x58]
	bl sub_0806E2A0
	adds r4, #0x61
	str r4, [sp, #0x20]
_080B50DA:
	mov r5, sp
	ldrb r6, [r5, #4]
	ldr r5, [sp, #0x20]
	strb r6, [r5]
	add sp, #0x24
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B50F4
sub_080B50F4: @ 0x080B50F4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x58]
	cmp r0, #0
	beq _080B5102
	bl sub_0806D4BC
_080B5102:
	ldr r0, [r4, #0x54]
	movs r1, #0x80
	lsls r1, r1, #0x12
	ands r0, r1
	cmp r0, #0
	beq _080B5114
	movs r0, #0
	bl sub_080B3DE4
_080B5114:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B511C
sub_080B511C: @ 0x080B511C
	push {lr}
	adds r1, r0, #0
	ldr r0, _080B512C @ =0x08DB0EE4
	bl Proc_Start
	pop {r1}
	bx r1
	.align 2, 0
_080B512C: .4byte 0x08DB0EE4

	thumb_func_start sub_080B5130
sub_080B5130: @ 0x080B5130
	movs r1, #0
	adds r0, #0x2c
	movs r2, #4
_080B5136:
	str r1, [r0, #4]
	strb r1, [r0, #8]
	strh r1, [r0, #2]
	strh r1, [r0]
	adds r0, #0xc
	subs r2, #1
	cmp r2, #0
	bge _080B5136
	bx lr

	thumb_func_start sub_080B5148
sub_080B5148: @ 0x080B5148
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	movs r6, #0
	movs r0, #0
	strh r0, [r4, #0x30]
	ldr r5, _080B5198 @ =0x08DB0F0C
	adds r0, r5, #0
	adds r1, r4, #0
	bl Proc_Start
	str r0, [r4, #0x34]
	adds r0, r5, #0
	adds r1, r4, #0
	bl Proc_Start
	str r0, [r4, #0x38]
	adds r0, r5, #0
	adds r1, r4, #0
	bl Proc_Start
	str r0, [r4, #0x3c]
	adds r0, r5, #0
	adds r1, r4, #0
	bl Proc_Start
	str r0, [r4, #0x40]
	ldr r0, [r4, #0x14]
	str r0, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x44
	strb r6, [r0]
	adds r0, #1
	strb r6, [r0]
	adds r0, #2
	strb r6, [r0]
	adds r4, #0x48
	strb r6, [r4]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B5198: .4byte 0x08DB0F0C

	thumb_func_start sub_080B519C
sub_080B519C: @ 0x080B519C
	push {r4, r5, lr}
	adds r3, r1, #0
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #2
	adds r0, r3, #0
	adds r0, #0x30
	adds r0, r0, r1
	ldr r0, [r0]
	cmp r0, #0
	beq _080B5206
	adds r5, r0, #0
	adds r3, r3, r1
	movs r0, #0x2c
	ldrsh r1, [r3, r0]
	ldr r2, _080B51F4 @ =gAnims
	movs r4, #4
	ldrsh r0, [r2, r4]
	subs r4, r1, r0
	movs r0, #0x2e
	ldrsh r1, [r3, r0]
	movs r3, #6
	ldrsh r0, [r2, r3]
	subs r3, r1, r0
	adds r1, r4, #0
	adds r1, #0x1f
	movs r0, #0x97
	lsls r0, r0, #1
	cmp r1, r0
	bhi _080B51FC
	movs r0, #0x20
	rsbs r0, r0, #0
	cmp r3, r0
	ble _080B51FC
	cmp r3, #0xbf
	bgt _080B51FC
	ldr r0, _080B51F8 @ =0x000001FF
	ands r4, r0
	str r4, [r5, #0x54]
	movs r0, #0xff
	ands r3, r0
	str r3, [r5, #0x58]
	b _080B5206
	.align 2, 0
_080B51F4: .4byte gAnims
_080B51F8: .4byte 0x000001FF
_080B51FC:
	movs r0, #0x80
	lsls r0, r0, #1
	str r0, [r5, #0x54]
	movs r0, #0
	str r0, [r5, #0x58]
_080B5206:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080B520C
sub_080B520C: @ 0x080B520C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	ldr r0, [r0, #0x40]
	mov sb, r0
	movs r0, #0xff
	mov r8, r0
	movs r1, #0x10
	mov ip, r1
	mov r6, sb
	adds r6, #0x2e
	mov r7, sb
	adds r7, #0x2c
	movs r0, #0
	str r0, [sp]
	movs r1, #3
	mov sl, r1
_080B5234:
	mov r0, sb
	adds r0, #0x30
	ldr r1, [sp]
	adds r0, r0, r1
	ldr r0, [r0]
	cmp r0, #0
	beq _080B530A
	adds r5, r0, #0
	movs r0, #0
	ldrsh r4, [r7, r0]
	adds r3, r6, #0
	ldrh r2, [r6]
	movs r0, #0x80
	lsls r0, r0, #4
	ands r0, r2
	cmp r0, #0
	beq _080B52A6
	mov r1, r8
	ands r1, r2
	cmp r1, #0xf
	bhi _080B52A6
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r2
	cmp r0, #0
	beq _080B527C
	mov r0, ip
	subs r1, r0, r1
	lsls r0, r1, #5
	muls r0, r1, r0
	cmp r0, #0
	bge _080B5276
	adds r0, #0xff
_080B5276:
	asrs r0, r0, #8
	adds r0, r4, r0
	strh r0, [r5, #0x34]
_080B527C:
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080B52A0
	mov r0, r8
	ands r0, r1
	mov r1, ip
	subs r0, r1, r0
	lsls r1, r0, #5
	muls r0, r1, r0
	cmp r0, #0
	bge _080B529A
	adds r0, #0xff
_080B529A:
	asrs r0, r0, #8
	subs r0, r4, r0
	strh r0, [r5, #0x34]
_080B52A0:
	ldrh r0, [r3]
	adds r0, #1
	strh r0, [r3]
_080B52A6:
	ldrh r2, [r3]
	movs r0, #0x80
	lsls r0, r0, #5
	ands r0, r2
	cmp r0, #0
	beq _080B530A
	mov r1, r8
	ands r1, r2
	cmp r1, #0xf
	bhi _080B530A
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r2
	cmp r0, #0
	beq _080B52DC
	adds r2, r4, #0
	subs r2, #0x20
	mov r0, ip
	subs r1, r0, r1
	lsls r0, r1, #5
	muls r0, r1, r0
	cmp r0, #0
	bge _080B52D6
	adds r0, #0xff
_080B52D6:
	asrs r0, r0, #8
	adds r0, r2, r0
	strh r0, [r5, #0x34]
_080B52DC:
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080B5304
	adds r2, r4, #0
	adds r2, #0x20
	mov r0, r8
	ands r0, r1
	mov r1, ip
	subs r0, r1, r0
	lsls r1, r0, #5
	muls r0, r1, r0
	cmp r0, #0
	bge _080B52FE
	adds r0, #0xff
_080B52FE:
	asrs r0, r0, #8
	subs r0, r2, r0
	strh r0, [r5, #0x34]
_080B5304:
	ldrh r0, [r3]
	adds r0, #1
	strh r0, [r3]
_080B530A:
	adds r6, #0xc
	adds r7, #0xc
	ldr r0, [sp]
	adds r0, #0xc
	str r0, [sp]
	movs r1, #1
	rsbs r1, r1, #0
	add sl, r1
	mov r0, sl
	cmp r0, #0
	bge _080B5234
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B5330
sub_080B5330: @ 0x080B5330
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	ldr r4, _080B5428 @ =gDispIo
	adds r1, r4, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r5, r7, #0
	adds r5, #0x45
	ldrb r1, [r5]
	lsrs r2, r1, #1
	adds r0, r4, #0
	adds r0, #0x44
	movs r3, #0
	strb r2, [r0]
	movs r0, #0x10
	subs r0, r0, r2
	adds r2, r4, #0
	adds r2, #0x45
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x46
	strb r3, [r0]
	adds r0, r7, #0
	adds r0, #0x44
	ldrb r2, [r0]
	adds r1, r2, r1
	strb r1, [r5]
	lsls r1, r1, #0x18
	cmp r1, #0
	bne _080B53C6
	movs r6, #0
	mov r8, r0
	movs r0, #1
	rsbs r0, r0, #0
	mov sb, r0
	movs r4, #0
	movs r5, #0
_080B5386:
	ldr r1, [r7, #0x40]
	adds r0, r1, #0
	adds r0, #0x30
	adds r0, r0, r4
	ldr r0, [r0]
	cmp r0, #0
	beq _080B53B8
	adds r0, r1, r4
	adds r0, #0x34
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, sb
	bne _080B53B8
	adds r0, r6, #0
	bl EndFaceById
	ldr r0, [r7, #0x40]
	adds r0, r0, r4
	adds r0, #0x34
	strb r5, [r0]
	ldr r0, [r7, #0x40]
	adds r0, #0x30
	adds r0, r0, r4
	str r5, [r0]
_080B53B8:
	adds r4, #0xc
	adds r6, #1
	cmp r6, #3
	ble _080B5386
	movs r0, #0
	mov r1, r8
	strb r0, [r1]
_080B53C6:
	adds r0, r7, #0
	adds r0, #0x45
	ldrb r0, [r0]
	cmp r0, #0x20
	bne _080B541A
	movs r2, #0x44
	adds r2, r2, r7
	mov r8, r2
	movs r5, #0
	movs r6, #3
_080B53DA:
	ldr r1, [r7, #0x40]
	adds r0, r1, #0
	adds r0, #0x30
	adds r0, r0, r5
	ldr r4, [r0]
	cmp r4, #0
	beq _080B540C
	adds r0, r1, r5
	adds r0, #0x34
	ldrb r0, [r0]
	cmp r0, #1
	bne _080B540C
	adds r0, r4, #0
	bl sub_08006C2C
	ldr r1, _080B542C @ =0xFFFFFBFF
	ands r1, r0
	adds r0, r4, #0
	bl sub_08006BF8
	ldr r0, [r7, #0x40]
	adds r0, r0, r5
	adds r0, #0x34
	movs r1, #0
	strb r1, [r0]
_080B540C:
	adds r5, #0xc
	subs r6, #1
	cmp r6, #0
	bge _080B53DA
	movs r0, #0
	mov r1, r8
	strb r0, [r1]
_080B541A:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B5428: .4byte gDispIo
_080B542C: .4byte 0xFFFFFBFF

	thumb_func_start sub_080B5430
sub_080B5430: @ 0x080B5430
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r5, r0, #0
	adds r4, r1, #0
	lsls r2, r2, #0x18
	lsrs r3, r2, #0x18
	movs r0, #0x1f
	mov r8, r0
	movs r2, #0xf8
	lsls r2, r2, #2
	mov ip, r2
	movs r7, #0xf8
	lsls r7, r7, #7
	mov sb, r7
	movs r6, #0xf
_080B5452:
	ldrh r2, [r4]
	movs r0, #0x1f
	ands r0, r2
	adds r1, r0, #0
	muls r1, r3, r1
	asrs r1, r1, #5
	mov r0, r8
	ands r1, r0
	mov r0, ip
	ands r0, r2
	muls r0, r3, r0
	asrs r0, r0, #5
	mov r7, ip
	ands r0, r7
	adds r1, r1, r0
	mov r0, sb
	ands r0, r2
	muls r0, r3, r0
	asrs r0, r0, #5
	mov r2, sb
	ands r0, r2
	adds r1, r1, r0
	strh r1, [r5]
	adds r5, #2
	adds r4, #2
	subs r6, #1
	cmp r6, #0
	bge _080B5452
	bl EnablePalSync
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B549C
sub_080B549C: @ 0x080B549C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	adds r4, r6, #0
	adds r4, #0x48
	adds r5, r6, #0
	adds r5, #0x47
	ldrb r1, [r4]
	ldrb r2, [r5]
	adds r0, r1, r2
	strb r0, [r4]
	ldr r0, _080B5550 @ =0x02022BA0
	adds r1, r6, #0
	adds r1, #0x46
	ldrb r1, [r1]
	lsls r1, r1, #5
	ldr r3, _080B5554 @ =0xFFFFFEC0
	adds r2, r0, r3
	adds r1, r1, r2
	ldrb r2, [r4]
	bl sub_080B5430
	ldrb r0, [r4]
	cmp r0, #0
	bne _080B550A
	movs r4, #0
	adds r7, r5, #0
	movs r0, #1
	rsbs r0, r0, #0
	mov r8, r0
	movs r5, #0
_080B54DC:
	ldr r1, [r6, #0x34]
	adds r0, r1, #0
	adds r0, #0x30
	adds r0, r0, r5
	ldr r0, [r0]
	cmp r0, #0
	beq _080B54FE
	adds r0, r1, r5
	adds r0, #0x34
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, r8
	bne _080B54FE
	adds r0, r4, #0
	bl sub_080B58FC
_080B54FE:
	adds r5, #0xc
	adds r4, #1
	cmp r4, #3
	ble _080B54DC
	movs r0, #0
	strb r0, [r7]
_080B550A:
	adds r0, r6, #0
	adds r0, #0x48
	ldrb r0, [r0]
	cmp r0, #0x20
	bne _080B5544
	adds r7, r6, #0
	adds r7, #0x47
	movs r5, #0x2c
	movs r4, #3
_080B551C:
	ldr r0, [r6, #0x34]
	adds r1, r0, r5
	ldr r2, [r1, #4]
	cmp r2, #0
	beq _080B5538
	ldrb r3, [r1, #8]
	cmp r3, #1
	bne _080B5538
	movs r0, #0
	strb r0, [r1, #8]
	ldr r0, [r2, #0x58]
	ldrb r1, [r1, #9]
	bl sub_0806EA0C
_080B5538:
	adds r5, #0xc
	subs r4, #1
	cmp r4, #0
	bge _080B551C
	movs r0, #0
	strb r0, [r7]
_080B5544:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B5550: .4byte 0x02022BA0
_080B5554: .4byte 0xFFFFFEC0

	thumb_func_start sub_080B5558
sub_080B5558: @ 0x080B5558
	push {r4, r5, r6, r7, lr}
	sub sp, #0x38
	adds r5, r0, #0
	ldr r1, _080B55F4 @ =0x08622BEC
	mov r0, sp
	movs r2, #0x37
	bl memcpy
	ldrh r0, [r5, #0x30]
	adds r0, #1
	strh r0, [r5, #0x30]
	add r0, sp
	ldrb r0, [r0]
	cmp r0, #0xff
	bne _080B557A
	movs r0, #0
	strh r0, [r5, #0x30]
_080B557A:
	ldrh r0, [r5, #0x30]
	add r0, sp
	ldrb r0, [r0]
	lsls r4, r0, #5
	ldr r0, _080B55F8 @ =0x0844F64C
	adds r0, r4, r0
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080B55FC @ =0x0844F5CC
	adds r4, r4, r0
	movs r1, #0x88
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r4, #0
	adds r6, r5, #0
	adds r6, #0x44
	adds r7, r5, #0
	adds r7, #0x47
_080B55AA:
	ldr r1, [r5, #0x38]
	adds r0, r4, #0
	bl sub_080B519C
	adds r4, #1
	cmp r4, #3
	ble _080B55AA
	movs r4, #0
_080B55BA:
	ldr r1, [r5, #0x3c]
	adds r0, r4, #0
	bl sub_080B519C
	adds r4, #1
	cmp r4, #4
	ble _080B55BA
	adds r0, r5, #0
	bl sub_080B520C
	movs r0, #0
	ldrsb r0, [r6, r0]
	cmp r0, #0
	beq _080B55DC
	adds r0, r5, #0
	bl sub_080B5330
_080B55DC:
	movs r0, #0
	ldrsb r0, [r7, r0]
	cmp r0, #0
	beq _080B55EA
	adds r0, r5, #0
	bl sub_080B549C
_080B55EA:
	add sp, #0x38
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B55F4: .4byte 0x08622BEC
_080B55F8: .4byte 0x0844F64C
_080B55FC: .4byte 0x0844F5CC

	thumb_func_start sub_080B5600
sub_080B5600: @ 0x080B5600
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r4, #0
	movs r5, #0
_080B5608:
	ldr r0, [r6, #0x38]
	adds r0, #0x30
	adds r0, r0, r5
	ldr r0, [r0]
	cmp r0, #0
	beq _080B561A
	adds r0, r4, #0
	bl sub_080B5A48
_080B561A:
	adds r5, #0xc
	adds r4, #1
	cmp r4, #3
	ble _080B5608
	movs r4, #0
	movs r5, #0
_080B5626:
	ldr r0, [r6, #0x3c]
	adds r0, #0x30
	adds r0, r0, r5
	ldr r0, [r0]
	cmp r0, #0
	beq _080B5638
	adds r0, r4, #0
	bl sub_080B5B34
_080B5638:
	adds r5, #0xc
	adds r4, #1
	cmp r4, #4
	ble _080B5626
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B5648
sub_080B5648: @ 0x080B5648
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, _080B56A4 @ =0x08DB0F24
	bl Proc_Find
	adds r5, r0, #0
	lsls r0, r4, #1
	adds r0, r0, r4
	lsls r0, r0, #2
	adds r0, #0x2c
	ldr r1, [r5, #0x34]
	adds r6, r1, r0
	cmp r5, #0
	beq _080B569C
	ldr r7, [r6, #4]
	cmp r7, #0
	beq _080B569C
	movs r4, #0
	str r4, [sp]
	ldr r1, _080B56A8 @ =0x02022BA0
	ldr r2, _080B56AC @ =0x01000008
	mov r0, sp
	bl CpuFastSet
	bl EnablePalSync
	ldr r0, [r7, #0x58]
	movs r1, #0xa
	bl sub_0806EA0C
	movs r1, #1
	strb r1, [r6, #8]
	ldrb r0, [r6, #9]
	adds r2, r5, #0
	adds r2, #0x46
	strb r0, [r2]
	adds r0, r5, #0
	adds r0, #0x47
	strb r1, [r0]
	adds r0, #1
	strb r4, [r0]
_080B569C:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B56A4: .4byte 0x08DB0F24
_080B56A8: .4byte 0x02022BA0
_080B56AC: .4byte 0x01000008

	thumb_func_start sub_080B56B0
sub_080B56B0: @ 0x080B56B0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, _080B571C @ =0x08DB0F24
	bl Proc_Find
	adds r5, r0, #0
	lsls r0, r4, #1
	adds r0, r0, r4
	lsls r0, r0, #2
	adds r0, #0x2c
	ldr r1, [r5, #0x34]
	adds r4, r1, r0
	cmp r5, #0
	beq _080B5714
	ldr r6, [r4, #4]
	cmp r6, #0
	beq _080B5714
	ldrb r1, [r4, #9]
	lsls r0, r1, #5
	ldr r1, _080B5720 @ =0x02022A60
	adds r0, r0, r1
	movs r2, #0xa0
	lsls r2, r2, #1
	adds r1, r1, r2
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
	ldr r0, [r6, #0x58]
	movs r1, #0xa
	bl sub_0806EA0C
	movs r1, #0xff
	ldrb r0, [r4, #8]
	orrs r0, r1
	strb r0, [r4, #8]
	ldrb r0, [r4, #9]
	adds r2, r5, #0
	adds r2, #0x46
	strb r0, [r2]
	adds r0, r5, #0
	adds r0, #0x47
	ldrb r2, [r0]
	orrs r1, r2
	strb r1, [r0]
	adds r1, r5, #0
	adds r1, #0x48
	movs r0, #0x20
	strb r0, [r1]
_080B5714:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B571C: .4byte 0x08DB0F24
_080B5720: .4byte 0x02022A60

	thumb_func_start sub_080B5724
sub_080B5724: @ 0x080B5724
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov sb, r0
	adds r7, r1, #0
	mov r8, r2
	mov sl, r3
	ldr r0, _080B577C @ =0x08DB0F24
	bl Proc_Find
	adds r4, r0, #0
	mov r1, sb
	lsls r0, r1, #1
	add r0, sb
	lsls r0, r0, #2
	adds r0, #0x2c
	ldr r1, [r4, #0x34]
	adds r1, r1, r0
	str r1, [sp, #4]
	movs r1, #0xf0
	lsls r1, r1, #0xc
	mov r2, sl
	ands r1, r2
	movs r0, #0x80
	lsls r0, r0, #0xb
	cmp r1, r0
	beq _080B57CC
	cmp r1, r0
	bhi _080B578A
	movs r0, #0x80
	lsls r0, r0, #0xa
	cmp r1, r0
	beq _080B57BA
	cmp r1, r0
	bhi _080B5780
	movs r0, #0x80
	lsls r0, r0, #9
	cmp r1, r0
	beq _080B57B2
	b _080B57EA
	.align 2, 0
_080B577C: .4byte 0x08DB0F24
_080B5780:
	movs r0, #0xc0
	lsls r0, r0, #0xa
	cmp r1, r0
	beq _080B57C2
	b _080B57EA
_080B578A:
	movs r0, #0xc0
	lsls r0, r0, #0xb
	cmp r1, r0
	beq _080B57DE
	cmp r1, r0
	bhi _080B57A0
	movs r0, #0xa0
	lsls r0, r0, #0xb
	cmp r1, r0
	beq _080B57D6
	b _080B57EA
_080B57A0:
	movs r0, #0xe0
	lsls r0, r0, #0xb
	cmp r1, r0
	beq _080B57E4
	movs r0, #0x80
	lsls r0, r0, #0xc
	cmp r1, r0
	beq _080B57E8
	b _080B57EA
_080B57B2:
	subs r7, #8
	movs r0, #8
	add r8, r0
	b _080B57EA
_080B57BA:
	adds r7, #8
	movs r1, #8
	add r8, r1
	b _080B57EA
_080B57C2:
	subs r7, #8
	movs r2, #8
	rsbs r2, r2, #0
	add r8, r2
	b _080B57EA
_080B57CC:
	adds r7, #8
	movs r0, #8
	rsbs r0, r0, #0
	add r8, r0
	b _080B57EA
_080B57D6:
	movs r1, #0xe
	rsbs r1, r1, #0
	add r8, r1
	b _080B57EA
_080B57DE:
	movs r2, #0xe
	add r8, r2
	b _080B57EA
_080B57E4:
	subs r7, #0xe
	b _080B57EA
_080B57E8:
	adds r7, #0xe
_080B57EA:
	ldr r1, [sp, #4]
	ldr r0, [r1, #4]
	cmp r0, #0
	bne _080B58A4
	ldr r0, _080B58A0 @ =0x08DB0EE4
	adds r1, r4, #0
	bl Proc_Start
	adds r6, r0, #0
	ldr r1, [r4, #0x34]
	mov r2, sb
	lsls r0, r2, #1
	add r0, sb
	lsls r0, r0, #2
	adds r1, #0x30
	adds r1, r1, r0
	str r6, [r1]
	movs r0, #0xff
	mov r2, sl
	ands r2, r0
	movs r3, #0xa0
	lsls r3, r3, #2
	mov r0, sl
	lsrs r4, r0, #0xd
	movs r0, #3
	ands r0, r4
	adds r0, #0xc
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl sub_0806C4A0
	str r0, [r6, #0x58]
	bl sub_0806E2A0
	adds r1, r6, #0
	adds r1, #0x29
	movs r0, #2
	strb r0, [r1]
	ldr r0, [r6, #0x58]
	movs r1, #2
	bl sub_0806C738
	ldr r0, [r6, #0x58]
	bl sub_0806C474
	adds r0, r6, #0
	adds r0, #0x2b
	mov r1, sl
	strb r1, [r0]
	movs r0, #3
	ands r4, r0
	adds r4, #0xc
	adds r5, r6, #0
	adds r5, #0x2c
	strb r4, [r5]
	ldr r0, [r6, #0x58]
	adds r0, #0x46
	movs r2, #0
	mov ip, r2
	movs r1, #0x80
	lsls r1, r1, #3
	strh r1, [r0]
	ldr r1, [r6, #0x58]
	ldr r3, [r1, #0x30]
	ldr r2, [r1, #0x34]
	movs r0, #0xf
	ldrb r4, [r2, #1]
	ands r0, r4
	lsls r0, r0, #0xc
	ldrh r2, [r2, #2]
	adds r0, r2, r0
	adds r1, #0x46
	ldrh r1, [r1]
	adds r0, r1, r0
	strh r0, [r3, #0x22]
	adds r0, r6, #0
	adds r0, #0x4a
	strh r7, [r0]
	adds r0, #2
	mov r1, r8
	strh r1, [r0]
	ldrb r0, [r5]
	ldr r2, [sp, #4]
	strb r0, [r2, #9]
	mov r4, ip
	strb r4, [r2, #8]
	mov r0, sb
	bl sub_080B5648
	b _080B58B4
	.align 2, 0
_080B58A0: .4byte 0x08DB0EE4
_080B58A4:
	ldr r1, [r4, #0x34]
	mov r2, sb
	lsls r0, r2, #1
	add r0, sb
	lsls r0, r0, #2
	adds r1, #0x30
	adds r1, r1, r0
	ldr r6, [r1]
_080B58B4:
	ldr r0, [r6, #0x58]
	ldr r2, [r0, #0x30]
	mov r4, sl
	lsrs r0, r4, #0xa
	movs r1, #3
	ands r0, r1
	adds r0, #6
	strh r0, [r2, #0x1e]
	str r4, [r6, #0x54]
	adds r2, r6, #0
	adds r2, #0x2a
	ldrb r0, [r2]
	lsls r1, r0, #1
	adds r0, r6, #0
	adds r0, #0x2e
	adds r0, r0, r1
	strh r7, [r0]
	ldrb r4, [r2]
	lsls r1, r4, #1
	adds r0, r6, #0
	adds r0, #0x3c
	adds r0, r0, r1
	mov r1, r8
	strh r1, [r0]
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B58FC
sub_080B58FC: @ 0x080B58FC
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _080B5930 @ =0x08DB0F24
	bl Proc_Find
	adds r5, r0, #0
	ldr r1, [r5, #0x34]
	lsls r0, r4, #1
	adds r0, r0, r4
	lsls r4, r0, #2
	adds r1, #0x30
	adds r1, r1, r4
	ldr r0, [r1]
	cmp r0, #0
	beq _080B5928
	bl Proc_End
	ldr r0, [r5, #0x34]
	adds r0, #0x30
	adds r0, r0, r4
	movs r1, #0
	str r1, [r0]
_080B5928:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B5930: .4byte 0x08DB0F24

	thumb_func_start sub_080B5934
sub_080B5934: @ 0x080B5934
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080B596C @ =0x08DB0F24
	bl Proc_Find
	cmp r0, #0
	beq _080B5964
	ldr r1, [r0, #0x34]
	lsls r0, r4, #1
	adds r0, r0, r4
	lsls r0, r0, #2
	adds r1, #0x30
	adds r1, r1, r0
	ldr r0, [r1]
	cmp r0, #0
	beq _080B5964
	ldr r0, [r0, #0x58]
	ldr r1, [r0, #0x30]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r2, #0
	ldrh r2, [r1, #0x22]
	orrs r0, r2
	strh r0, [r1, #0x22]
_080B5964:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B596C: .4byte 0x08DB0F24

	thumb_func_start sub_080B5970
sub_080B5970: @ 0x080B5970
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080B59A8 @ =0x08DB0F24
	bl Proc_Find
	cmp r0, #0
	beq _080B59A0
	ldr r1, [r0, #0x34]
	lsls r0, r4, #1
	adds r0, r0, r4
	lsls r0, r0, #2
	adds r1, #0x30
	adds r1, r1, r0
	ldr r0, [r1]
	cmp r0, #0
	beq _080B59A0
	ldr r0, [r0, #0x58]
	ldr r1, [r0, #0x30]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r2, #0
	ldrh r2, [r1, #0x22]
	orrs r0, r2
	strh r0, [r1, #0x22]
_080B59A0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B59A8: .4byte 0x08DB0F24

	thumb_func_start sub_080B59AC
sub_080B59AC: @ 0x080B59AC
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r4, r0, #0
	lsls r1, r1, #0x10
	lsrs r7, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	mov r8, r2
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	mov sb, r3
	ldr r0, _080B5A3C @ =0x08DB0F24
	bl Proc_Find
	adds r6, r0, #0
	ldr r1, [r6, #0x38]
	lsls r0, r4, #1
	adds r0, r0, r4
	lsls r5, r0, #2
	adds r1, r1, r5
	strh r7, [r1, #0x2c]
	ldr r0, [r6, #0x38]
	adds r0, r0, r5
	mov r1, r8
	strh r1, [r0, #0x2e]
	ldr r0, [r6, #0x38]
	adds r0, #0x30
	adds r0, r0, r5
	ldr r0, [r0]
	cmp r0, #0
	bne _080B5A2C
	lsls r1, r7, #0x10
	asrs r1, r1, #0x10
	ldr r3, _080B5A40 @ =gAnims
	movs r2, #4
	ldrsh r0, [r3, r2]
	subs r1, r1, r0
	mov r4, r8
	lsls r2, r4, #0x10
	asrs r2, r2, #0x10
	movs r4, #6
	ldrsh r0, [r3, r4]
	subs r2, r2, r0
	ldr r0, _080B5A44 @ =0x0844C5A0
	movs r3, #0xf
	mov r4, sb
	ands r3, r4
	lsls r3, r3, #0xc
	movs r4, #0xe0
	lsls r4, r4, #4
	adds r3, r3, r4
	movs r4, #1
	str r4, [sp]
	movs r4, #7
	str r4, [sp, #4]
	bl sub_08012AF0
	ldr r1, [r6, #0x38]
	adds r1, #0x30
	adds r1, r1, r5
	str r0, [r1]
_080B5A2C:
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B5A3C: .4byte 0x08DB0F24
_080B5A40: .4byte gAnims
_080B5A44: .4byte 0x0844C5A0

	thumb_func_start sub_080B5A48
sub_080B5A48: @ 0x080B5A48
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _080B5A7C @ =0x08DB0F24
	bl Proc_Find
	adds r5, r0, #0
	ldr r1, [r5, #0x38]
	lsls r0, r4, #1
	adds r0, r0, r4
	lsls r4, r0, #2
	adds r1, #0x30
	adds r1, r1, r4
	ldr r0, [r1]
	cmp r0, #0
	beq _080B5A6A
	bl EndSpriteAnimProc
_080B5A6A:
	ldr r0, [r5, #0x38]
	adds r0, #0x30
	adds r0, r0, r4
	movs r1, #0
	str r1, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B5A7C: .4byte 0x08DB0F24

	thumb_func_start sub_080B5A80
sub_080B5A80: @ 0x080B5A80
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r4, r0, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov r8, r1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	mov sb, r2
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	mov sl, r3
	ldr r0, _080B5B28 @ =0x08DB0F24
	bl Proc_Find
	adds r6, r0, #0
	ldr r1, [r6, #0x3c]
	lsls r0, r4, #1
	adds r0, r0, r4
	lsls r5, r0, #2
	adds r1, r1, r5
	mov r0, r8
	strh r0, [r1, #0x2c]
	ldr r0, [r6, #0x3c]
	adds r0, r0, r5
	mov r1, sb
	strh r1, [r0, #0x2e]
	ldr r0, [r6, #0x3c]
	adds r0, #0x30
	adds r0, r0, r5
	ldr r7, [r0]
	cmp r7, #0
	bne _080B5B16
	mov r2, r8
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	ldr r3, _080B5B2C @ =gAnims
	movs r4, #4
	ldrsh r0, [r3, r4]
	subs r1, r1, r0
	mov r0, sb
	lsls r2, r0, #0x10
	asrs r2, r2, #0x10
	movs r4, #6
	ldrsh r0, [r3, r4]
	subs r2, r2, r0
	ldr r0, _080B5B30 @ =0x0844C5A0
	movs r3, #0xf
	mov r4, sl
	ands r3, r4
	lsls r3, r3, #0xc
	movs r4, #0xe0
	lsls r4, r4, #4
	adds r3, r3, r4
	str r7, [sp]
	movs r4, #0xa
	str r4, [sp, #4]
	bl sub_08012AF0
	ldr r1, [r6, #0x3c]
	adds r1, #0x30
	adds r1, r1, r5
	str r0, [r1]
	ldr r0, [r6, #0x38]
	adds r0, r0, r5
	mov r1, r8
	strh r1, [r0, #0x2c]
	ldr r0, [r6, #0x38]
	adds r0, r0, r5
	mov r2, sb
	strh r2, [r0, #0x2e]
_080B5B16:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B5B28: .4byte 0x08DB0F24
_080B5B2C: .4byte gAnims
_080B5B30: .4byte 0x0844C5A0

	thumb_func_start sub_080B5B34
sub_080B5B34: @ 0x080B5B34
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _080B5B68 @ =0x08DB0F24
	bl Proc_Find
	adds r5, r0, #0
	ldr r1, [r5, #0x3c]
	lsls r0, r4, #1
	adds r0, r0, r4
	lsls r4, r0, #2
	adds r1, #0x30
	adds r1, r1, r4
	ldr r0, [r1]
	cmp r0, #0
	beq _080B5B56
	bl EndSpriteAnimProc
_080B5B56:
	ldr r0, [r5, #0x3c]
	adds r0, #0x30
	adds r0, r0, r4
	movs r1, #0
	str r1, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B5B68: .4byte 0x08DB0F24

	thumb_func_start sub_080B5B6C
sub_080B5B6C: @ 0x080B5B6C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r7, r0, #0
	mov sb, r1
	lsls r2, r2, #0x10
	lsrs r4, r2, #0x10
	adds r6, r4, #0
	ldr r0, _080B5C08 @ =0x08DB0F24
	bl Proc_Find
	mov r8, r0
	lsls r0, r7, #1
	adds r0, r0, r7
	lsls r0, r0, #2
	adds r0, #0x2c
	mov r2, r8
	ldr r1, [r2, #0x40]
	adds r5, r1, r0
	ldr r2, _080B5C0C @ =0x030027CC
	ldr r0, _080B5C10 @ =0x0000FFE0
	ldrh r3, [r2]
	ands r0, r3
	ldr r1, _080B5C14 @ =0x0000E0FF
	ands r0, r1
	movs r3, #0x80
	lsls r3, r3, #4
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r0, [r5, #4]
	cmp r0, #0
	bne _080B5C96
	movs r0, #0xff
	ands r0, r4
	strh r0, [r5]
	movs r0, #0xff
	lsls r0, r0, #8
	ands r0, r4
	adds r0, r0, r1
	strh r0, [r5, #2]
	movs r0, #0
	ldrsh r2, [r5, r0]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r4
	ldr r1, _080B5C18 @ =0x00000442
	cmp r0, #0
	beq _080B5BD4
	adds r1, #1
_080B5BD4:
	movs r0, #0x80
	lsls r0, r0, #8
	ands r0, r4
	cmp r0, #0
	beq _080B5BE4
	movs r0, #0x80
	lsls r0, r0, #6
	orrs r1, r0
_080B5BE4:
	str r1, [sp]
	adds r0, r7, #0
	mov r1, sb
	movs r3, #0x28
	bl sub_08007A5C
	adds r2, r0, #0
	str r2, [r5, #4]
	movs r1, #0xc0
	lsls r1, r1, #7
	adds r0, r4, #0
	ands r0, r1
	cmp r0, r1
	bne _080B5C1C
	adds r1, r2, #0
	adds r1, #0x41
	movs r0, #6
	b _080B5C46
	.align 2, 0
_080B5C08: .4byte 0x08DB0F24
_080B5C0C: .4byte 0x030027CC
_080B5C10: .4byte 0x0000FFE0
_080B5C14: .4byte 0x0000E0FF
_080B5C18: .4byte 0x00000442
_080B5C1C:
	movs r0, #0x80
	lsls r0, r0, #7
	ands r0, r4
	cmp r0, #0
	beq _080B5C2E
	adds r1, r2, #0
	adds r1, #0x41
	movs r0, #5
	b _080B5C46
_080B5C2E:
	movs r0, #0x80
	lsls r0, r0, #6
	ands r6, r0
	cmp r6, #0
	beq _080B5C40
	adds r1, r2, #0
	adds r1, #0x41
	movs r0, #4
	b _080B5C46
_080B5C40:
	adds r1, r2, #0
	adds r1, #0x41
	movs r0, #3
_080B5C46:
	strb r0, [r1]
	adds r0, r7, #0
	movs r1, #5
	bl sub_080078F4
	movs r6, #0
	movs r0, #1
	strb r0, [r5, #8]
	mov r1, r8
	adds r1, #0x44
	movs r0, #2
	strb r0, [r1]
	mov r4, r8
	adds r4, #0x45
	ldrb r1, [r4]
	cmp r1, #0x20
	bne _080B5C96
	strb r6, [r4]
	ldr r3, _080B5CA4 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	ldrb r1, [r4]
	adds r0, r3, #0
	adds r0, #0x44
	strb r1, [r0]
	movs r0, #0x10
	ldrb r4, [r4]
	subs r0, r0, r4
	adds r1, r3, #0
	adds r1, #0x45
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r6, [r0]
_080B5C96:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B5CA4: .4byte gDispIo

	thumb_func_start sub_080B5CA8
sub_080B5CA8: @ 0x080B5CA8
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r4, r0, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov sb, r1
	ldr r0, _080B5D54 @ =0x08DB0F24
	bl Proc_Find
	adds r7, r0, #0
	lsls r0, r4, #1
	adds r0, r0, r4
	lsls r0, r0, #2
	adds r0, #0x2c
	ldr r1, [r7, #0x40]
	adds r5, r1, r0
	ldr r6, _080B5D58 @ =0x030027CC
	ldr r0, _080B5D5C @ =0x0000FFE0
	ldrh r1, [r6]
	ands r0, r1
	ldr r1, _080B5D60 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r6]
	ldr r4, [r5, #4]
	cmp r4, #0
	beq _080B5D48
	movs r0, #0x80
	lsls r0, r0, #5
	mov r8, r0
	ldrh r1, [r5, #2]
	ands r0, r1
	cmp r0, #0
	bne _080B5D48
	adds r0, r4, #0
	bl sub_08006C2C
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r1, r0
	adds r0, r4, #0
	bl sub_08006BF8
	movs r0, #0xff
	lsls r0, r0, #8
	mov r2, sb
	ands r0, r2
	add r0, r8
	strh r0, [r5, #2]
	movs r0, #0xff
	strb r0, [r5, #8]
	adds r1, r7, #0
	adds r1, #0x44
	movs r0, #0xfe
	strb r0, [r1]
	adds r1, #1
	ldrb r0, [r1]
	cmp r0, #0
	bne _080B5D48
	movs r0, #0x20
	strb r0, [r1]
	movs r0, #0x3f
	ldrb r2, [r6]
	ands r0, r2
	strb r0, [r6]
	ldrb r2, [r1]
	lsrs r0, r2, #1
	strb r0, [r6, #8]
	ldrb r1, [r1]
	lsrs r1, r1, #1
	movs r0, #0x10
	subs r0, r0, r1
	strb r0, [r6, #9]
	movs r0, #0
	strb r0, [r6, #0xa]
_080B5D48:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B5D54: .4byte 0x08DB0F24
_080B5D58: .4byte 0x030027CC
_080B5D5C: .4byte 0x0000FFE0
_080B5D60: .4byte 0x0000E0FF

	thumb_func_start sub_080B5D64
sub_080B5D64: @ 0x080B5D64
	push {lr}
	adds r1, r0, #0
	ldr r0, _080B5D74 @ =0x08DB0F24
	bl Proc_Start
	pop {r1}
	bx r1
	.align 2, 0
_080B5D74: .4byte 0x08DB0F24

	thumb_func_start sub_080B5D78
sub_080B5D78: @ 0x080B5D78
	push {lr}
	ldr r0, _080B5D84 @ =0x08DB0F24
	bl sub_08004748
	pop {r0}
	bx r0
	.align 2, 0
_080B5D84: .4byte 0x08DB0F24

	thumb_func_start nullsub_5
nullsub_5: @ 0x080B5D88
	bx lr
	.align 2, 0

	thumb_func_start nullsub_6
nullsub_6: @ 0x080B5D8C
	bx lr
	.align 2, 0

	thumb_func_start nullsub_4
nullsub_4: @ 0x080B5D90
	bx lr
	.align 2, 0

	thumb_func_start nullsub_3
nullsub_3: @ 0x080B5D94
	bx lr
	.align 2, 0

	thumb_func_start sub_080B5D98
sub_080B5D98: @ 0x080B5D98
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r4, r2, #0
	ldr r0, _080B5DB8 @ =0x08DB0F44
	bl Proc_Find
	adds r3, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl sub_080B45DC
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B5DB8: .4byte 0x08DB0F44

	thumb_func_start sub_080B5DBC
sub_080B5DBC: @ 0x080B5DBC
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r7, r2, #0
	ldr r0, _080B5E00 @ =0x08DB0F44
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	beq _080B5DF8
	bl sub_080B41F0
	adds r1, r4, #0
	adds r1, #0x4c
	strh r0, [r1]
	bl sub_080B41FC
	adds r1, r4, #0
	adds r1, #0x4e
	strh r0, [r1]
	adds r0, r4, #0
	adds r0, #0x50
	strh r5, [r0]
	adds r0, #2
	strh r6, [r0]
	strh r7, [r4, #0x34]
	adds r0, r4, #0
	movs r1, #2
	bl Proc_Goto
_080B5DF8:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B5E00: .4byte 0x08DB0F44

	thumb_func_start sub_080B5E04
sub_080B5E04: @ 0x080B5E04
	push {r4, lr}
	adds r4, r0, #0
	bl sub_08007EF8
	movs r0, #0x80
	lsls r0, r0, #2
	movs r1, #2
	movs r2, #2
	bl InitSpriteTalk
	ldr r0, _080B5E4C @ =0x02000815
	ldrb r0, [r0]
	lsrs r1, r0, #3
	adds r1, #1
	movs r0, #1
	adds r2, r4, #0
	bl sub_08007EAC
	movs r0, #4
	bl sub_08007F68
	movs r0, #0x20
	bl sub_08007F24
	movs r0, #0x80
	bl sub_08007F24
	movs r0, #4
	bl sub_08007F24
	movs r0, #1
	bl sub_08007F24
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B5E4C: .4byte 0x02000815

	thumb_func_start sub_080B5E50
sub_080B5E50: @ 0x080B5E50
	push {r4, lr}
	sub sp, #0x20
	mov r1, sp
	ldr r0, _080B5ED8 @ =0x08622C24
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3}
	stm r1!, {r2, r3}
	movs r0, #0
	bl InitBgs
	ldr r4, _080B5EDC @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r4, #0xc]
	ands r0, r2
	strb r0, [r4, #0xc]
	ldrb r3, [r4, #0x10]
	ands r1, r3
	movs r0, #1
	orrs r1, r0
	strb r1, [r4, #0x10]
	movs r0, #3
	ldrb r1, [r4, #0x14]
	orrs r1, r0
	strb r1, [r4, #0x14]
	ldrb r1, [r4, #0x18]
	orrs r0, r1
	strb r0, [r4, #0x18]
	bl sub_0804A9F8
	bl ResetText
	bl sub_080069C4
	mov r0, sp
	bl sub_080069E0
	bl sub_08025184
	bl MU_Init
	bl ApplyUnitSpritePalettes
	ldr r1, _080B5EE0 @ =gBmSt
	movs r0, #0
	strh r0, [r1, #0xc]
	strh r0, [r1, #0xe]
	subs r0, #2
	ldrb r2, [r4, #1]
	ands r0, r2
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r4, #1]
	add sp, #0x20
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B5ED8: .4byte 0x08622C24
_080B5EDC: .4byte gDispIo
_080B5EE0: .4byte gBmSt

	thumb_func_start sub_080B5EE4
sub_080B5EE4: @ 0x080B5EE4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r4, r0, #0
	adds r0, #0x40
	movs r5, #0
	movs r1, #0
	strh r1, [r0]
	adds r0, #8
	strh r1, [r0]
	adds r0, #0xc
	strb r5, [r0]
	ldr r7, _080B6050 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r7, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	movs r2, #4
	orrs r0, r2
	subs r1, #6
	ands r0, r1
	movs r3, #0x10
	mov sb, r3
	mov r1, sb
	orrs r0, r1
	strb r0, [r7, #1]
	adds r0, r4, #0
	adds r0, #0x4a
	ldrb r0, [r0]
	movs r2, #0x30
	ldrsh r1, [r4, r2]
	movs r3, #0x32
	ldrsh r2, [r4, r3]
	bl sub_080B4050
	movs r0, #0x3c
	adds r0, r0, r7
	mov r8, r0
	movs r6, #0x3f
	adds r0, r6, #0
	mov r1, r8
	ldrb r1, [r1]
	ands r0, r1
	mov r2, r8
	strb r0, [r2]
	movs r0, #0x10
	ldr r3, _080B6054 @ =0x030027D4
	strb r0, [r3]
	ldr r0, _080B6058 @ =0x030027D5
	strb r5, [r0]
	movs r1, #0x46
	adds r1, r1, r7
	mov sl, r1
	strb r5, [r1]
	ldr r0, _080B605C @ =0x0844C614
	movs r1, #0x98
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080B6060 @ =0x0844F1E8
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080B6064 @ =0x0818FE70
	movs r1, #0xd8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080B6068 @ =0x0844C9E8
	movs r1, #0xc8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080B606C @ =0x0844C0B8
	ldr r1, _080B6070 @ =0x06015000
	bl sub_08013688
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r2, [r7, #1]
	ands r0, r2
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r7, #1]
	movs r3, #0x36
	adds r3, r3, r7
	mov ip, r3
	movs r0, #1
	ldrb r1, [r3]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r2, #4
	orrs r0, r2
	movs r1, #8
	orrs r0, r1
	mov r3, sb
	orrs r0, r3
	adds r3, r7, #0
	adds r3, #0x34
	movs r2, #0x20
	ldrb r1, [r3]
	orrs r1, r2
	strb r1, [r3]
	adds r3, #1
	ldrb r1, [r3]
	orrs r1, r2
	strb r1, [r3]
	orrs r0, r2
	mov r1, ip
	strb r0, [r1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl sub_080AB01C
	mov r2, r8
	ldrb r2, [r2]
	ands r6, r2
	mov r3, r8
	strb r6, [r3]
	ldr r0, _080B6054 @ =0x030027D4
	strb r5, [r0]
	ldr r1, _080B6058 @ =0x030027D5
	strb r5, [r1]
	mov r2, sl
	strb r5, [r2]
	ldr r0, _080B6074 @ =0x0000FFE0
	ldrh r3, [r7, #0x3c]
	ands r0, r3
	ldr r1, _080B6078 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xc0
	lsls r2, r2, #5
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r7, #0x3c]
	ldr r0, _080B607C @ =0x02000814
	strb r5, [r0]
	movs r0, #0
	bl SetOnHBlankA
	ldr r0, _080B6080 @ =sub_080B45FC
	bl SetOnHBlankA
	adds r0, r4, #0
	bl sub_080B4A3C
	adds r0, r4, #0
	bl sub_080B4BDC
	adds r0, r4, #0
	bl sub_080B5D64
	ldr r1, [r4, #0x2c]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _080B608C
	movs r0, #0x40
	ands r1, r0
	cmp r1, #0
	beq _080B6084
	movs r0, #1
	movs r1, #0
	bl sub_080AB164
	b _080B608C
	.align 2, 0
_080B6050: .4byte gDispIo
_080B6054: .4byte 0x030027D4
_080B6058: .4byte 0x030027D5
_080B605C: .4byte 0x0844C614
_080B6060: .4byte 0x0844F1E8
_080B6064: .4byte 0x0818FE70
_080B6068: .4byte 0x0844C9E8
_080B606C: .4byte 0x0844C0B8
_080B6070: .4byte 0x06015000
_080B6074: .4byte 0x0000FFE0
_080B6078: .4byte 0x0000E0FF
_080B607C: .4byte 0x02000814
_080B6080: .4byte sub_080B45FC
_080B6084:
	movs r0, #2
	movs r1, #0
	bl sub_080AB164
_080B608C:
	movs r0, #0
	bl sub_080B3DE4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B60A0
sub_080B60A0: @ 0x080B60A0
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	bl SetOnHBlankB
	movs r0, #0
	bl SetOnHBlankA
	bl sub_08007EF8
	bl sub_0800968C
	bl sub_08025184
	ldr r2, _080B60E8 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0xc0
	ldrb r3, [r1]
	orrs r0, r3
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r2, #0x46
	movs r0, #0x10
	strb r0, [r2]
	adds r4, #0x54
	strb r1, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B60E8: .4byte gDispIo

	thumb_func_start nullsub_089
nullsub_089: @ 0x080B60EC
	bx lr
	.align 2, 0

	thumb_func_start sub_080B60F0
sub_080B60F0: @ 0x080B60F0
	push {lr}
	ldr r0, [r0, #0x2c]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	beq _080B615A
	bl sub_0807702C
	ldr r0, _080B6160 @ =sub_08078030
	bl SetOnHBlankB
	movs r0, #0
	bl sub_08077E50
	ldr r0, _080B6164 @ =gDispIo
	mov ip, r0
	mov r2, ip
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	mov r1, ip
	adds r1, #0x44
	movs r3, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x46
	strb r3, [r0]
	ldr r0, _080B6168 @ =0x0000FFE0
	mov r3, ip
	ldrh r3, [r3, #0x3c]
	ands r0, r3
	movs r1, #8
	orrs r0, r1
	ldr r1, _080B616C @ =0x0000E0FF
	ands r0, r1
	mov r1, ip
	strh r0, [r1, #0x3c]
	movs r0, #0x20
	ldrb r1, [r2]
	orrs r1, r0
	strb r1, [r2]
	mov r1, ip
	adds r1, #0x3d
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
_080B615A:
	pop {r0}
	bx r0
	.align 2, 0
_080B6160: .4byte sub_08078030
_080B6164: .4byte gDispIo
_080B6168: .4byte 0x0000FFE0
_080B616C: .4byte 0x0000E0FF

	thumb_func_start sub_080B6170
sub_080B6170: @ 0x080B6170
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r6, #0x30
	ldr r0, [r5, #0x2c]
	movs r1, #0x20
	ands r0, r1
	cmp r0, #0
	beq _080B618A
	adds r0, r5, #0
	adds r0, #0x48
	ldrh r1, [r0]
	adds r1, #2
	b _080B6192
_080B618A:
	adds r0, r5, #0
	adds r0, #0x48
	ldrh r1, [r0]
	adds r1, #1
_080B6192:
	strh r1, [r0]
	adds r2, r0, #0
	ldr r1, [r5, #0x2c]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080B61A6
	ldrh r2, [r2]
	lsrs r4, r2, #1
	b _080B61A8
_080B61A6:
	ldrh r4, [r2]
_080B61A8:
	movs r7, #8
	ands r1, r7
	cmp r1, #0
	beq _080B61CC
	subs r1, r6, r4
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #4
	muls r0, r1, r0
	adds r1, r6, #0
	muls r1, r6, r1
	bl __divsi3
	adds r1, r0, #0
	movs r0, #0x70
	subs r0, r0, r1
	bl sub_08077E50
_080B61CC:
	cmp r4, r6
	bne _080B622C
	adds r0, r5, #0
	bl Proc_Break
	ldr r0, [r5, #0x2c]
	ands r0, r7
	cmp r0, #0
	beq _080B622C
	movs r0, #0
	bl SetOnHBlankB
	ldr r3, _080B6234 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r0, #0
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	ldr r0, _080B6238 @ =0x0000FFE0
	ldrh r4, [r3, #0x3c]
	ands r0, r4
	ldr r1, _080B623C @ =0x0000E0FF
	ands r0, r1
	movs r4, #0x80
	lsls r4, r4, #3
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	movs r1, #0x21
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r4, [r2]
	ands r0, r4
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x3d
	ldrb r2, [r0]
	ands r1, r2
	strb r1, [r0]
_080B622C:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B6234: .4byte gDispIo
_080B6238: .4byte 0x0000FFE0
_080B623C: .4byte 0x0000E0FF

	thumb_func_start sub_080B6240
sub_080B6240: @ 0x080B6240
	adds r2, r0, #0
	adds r2, #0x40
	movs r1, #0
	strh r1, [r2]
	adds r0, #0x54
	movs r1, #1
	strb r1, [r0]
	bx lr

	thumb_func_start sub_080B6250
sub_080B6250: @ 0x080B6250
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	bl sub_080B41F0
	mov r8, r0
	bl sub_080B41FC
	adds r7, r0, #0
	mov r5, r8
	adds r3, r7, #0
	adds r1, r4, #0
	adds r1, #0x40
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0xff
	bgt _080B62F8
	movs r3, #0x80
	lsls r3, r3, #1
	mov ip, r3
	ldr r6, _080B6310 @ =0x0000FFFF
_080B627C:
	ldrh r2, [r1]
	ldrh r3, [r4, #0x34]
	adds r0, r2, r3
	strh r0, [r1]
	movs r2, #0
	ldrsh r0, [r1, r2]
	mov r3, ip
	subs r1, r3, r0
	adds r0, r4, #0
	adds r0, #0x50
	movs r2, #0
	ldrsh r3, [r0, r2]
	subs r0, #4
	movs r2, #0
	ldrsh r0, [r0, r2]
	subs r2, r3, r0
	cmp r2, #0
	bge _080B62A2
	subs r2, r0, r3
_080B62A2:
	adds r0, r2, #0
	muls r0, r1, r0
	muls r0, r1, r0
	cmp r0, #0
	bge _080B62AE
	adds r0, r0, r6
_080B62AE:
	asrs r0, r0, #0x10
	subs r5, r2, r0
	adds r0, r4, #0
	adds r0, #0x40
	movs r3, #0
	ldrsh r0, [r0, r3]
	mov r1, ip
	subs r2, r1, r0
	adds r0, r4, #0
	adds r0, #0x52
	movs r1, #0
	ldrsh r3, [r0, r1]
	subs r0, #4
	movs r1, #0
	ldrsh r0, [r0, r1]
	subs r1, r3, r0
	cmp r1, #0
	bge _080B62D4
	subs r1, r0, r3
_080B62D4:
	adds r0, r1, #0
	muls r0, r2, r0
	muls r0, r2, r0
	cmp r0, #0
	bge _080B62E0
	adds r0, r0, r6
_080B62E0:
	asrs r0, r0, #0x10
	subs r3, r1, r0
	adds r1, r4, #0
	adds r1, #0x40
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0xff
	bgt _080B62F8
	cmp r5, r8
	bne _080B62F8
	cmp r3, r7
	beq _080B627C
_080B62F8:
	adds r0, r4, #0
	adds r0, #0x50
	adds r2, r4, #0
	adds r2, #0x4c
	movs r6, #0
	ldrsh r1, [r0, r6]
	movs r6, #0
	ldrsh r0, [r2, r6]
	cmp r1, r0
	ble _080B6314
	adds r5, r5, r0
	b _080B631A
	.align 2, 0
_080B6310: .4byte 0x0000FFFF
_080B6314:
	movs r6, #0
	ldrsh r0, [r2, r6]
	subs r5, r0, r5
_080B631A:
	adds r0, r4, #0
	adds r0, #0x52
	adds r2, r4, #0
	adds r2, #0x4e
	movs r6, #0
	ldrsh r1, [r0, r6]
	movs r6, #0
	ldrsh r0, [r2, r6]
	cmp r1, r0
	ble _080B6332
	adds r3, r3, r0
	b _080B6338
_080B6332:
	movs r6, #0
	ldrsh r0, [r2, r6]
	subs r3, r0, r3
_080B6338:
	mov r1, r8
	subs r0, r5, r1
	subs r1, r3, r7
	bl sub_080B4104
	movs r1, #1
	rsbs r1, r1, #0
	adds r0, r1, #0
	bl sub_080B4170
	adds r1, r4, #0
	adds r1, #0x40
	movs r0, #0x80
	lsls r0, r0, #1
	ldrh r1, [r1]
	cmp r1, r0
	bne _080B6368
	adds r0, r4, #0
	bl Proc_Break
	adds r1, r4, #0
	adds r1, #0x54
	movs r0, #0
	strb r0, [r1]
_080B6368:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B6374
sub_080B6374: @ 0x080B6374
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	mov r8, r3
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _080B63A8 @ =0x08DB0F44
	movs r1, #3
	bl Proc_Start
	adds r1, r0, #0
	adds r1, #0x4a
	strb r4, [r1]
	strh r5, [r0, #0x30]
	strh r6, [r0, #0x32]
	mov r1, r8
	str r1, [r0, #0x2c]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B63A8: .4byte 0x08DB0F44

	thumb_func_start sub_080B63AC
sub_080B63AC: @ 0x080B63AC
	push {lr}
	ldr r0, _080B63D4 @ =0x08DAE43C
	bl Proc_Find
	bl Proc_End
	ldr r0, _080B63D8 @ =0x08DB0F44
	bl Proc_Find
	bl Proc_End
	bl sub_0800EC08
	bl EndEachSpriteAnimProc
	movs r0, #0
	bl InitBgs
	pop {r0}
	bx r0
	.align 2, 0
_080B63D4: .4byte 0x08DAE43C
_080B63D8: .4byte 0x08DB0F44

	thumb_func_start sub_080B63DC
sub_080B63DC: @ 0x080B63DC
	push {lr}
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq _080B63FA
	ldr r0, _080B6400 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetROMChapterStruct
	ldrh r0, [r0, #0x26]
	movs r1, #0
	bl sub_0800376C
_080B63FA:
	pop {r0}
	bx r0
	.align 2, 0
_080B6400: .4byte gPlaySt

	thumb_func_start sub_080B6404
sub_080B6404: @ 0x080B6404
	push {r4, r5, lr}
	ldr r5, _080B643C @ =0x08D64CE4
	ldr r4, _080B6440 @ =gPlaySt
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetROMChapterStruct
	adds r0, #0x75
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r5
	ldr r0, [r0]
	cmp r0, #0
	beq _080B6436
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetROMChapterStruct
	adds r0, #0x75
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r5
	ldr r0, [r0]
	bl sub_0800AE98
_080B6436:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B643C: .4byte 0x08D64CE4
_080B6440: .4byte gPlaySt

	thumb_func_start sub_080B6444
sub_080B6444: @ 0x080B6444
	push {lr}
	movs r0, #4
	bl sub_080034C8
	pop {r0}
	bx r0

	thumb_func_start sub_080B6450
sub_080B6450: @ 0x080B6450
	push {lr}
	bl sub_08004110
	bl sub_080B5D78
	movs r0, #0
	bl sub_080B3DE4
	pop {r0}
	bx r0

	thumb_func_start sub_080B6464
sub_080B6464: @ 0x080B6464
	push {lr}
	ldr r0, _080B6478 @ =0x08DB0F44
	bl Proc_Find
	cmp r0, #0
	beq _080B6472
	movs r0, #1
_080B6472:
	pop {r1}
	bx r1
	.align 2, 0
_080B6478: .4byte 0x08DB0F44

	thumb_func_start sub_080B647C
sub_080B647C: @ 0x080B647C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	cmp r0, #0
	ble _080B648C
	subs r0, #1
	str r0, [r4, #0x2c]
	b _080B657A
_080B648C:
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0xc
	bhi _080B6574
	lsls r0, r0, #2
	ldr r1, _080B64A0 @ =_080B64A4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080B64A0: .4byte _080B64A4
_080B64A4: @ jump table
	.4byte _080B64D8 @ case 0
	.4byte _080B64E6 @ case 1
	.4byte _080B64EE @ case 2
	.4byte _080B64F8 @ case 3
	.4byte _080B6500 @ case 4
	.4byte _080B6516 @ case 5
	.4byte _080B652C @ case 6
	.4byte _080B653C @ case 7
	.4byte _080B654A @ case 8
	.4byte _080B655E @ case 9
	.4byte _080B6556 @ case 10
	.4byte _080B656E @ case 11
	.4byte _080B6566 @ case 12
_080B64D8:
	ldr r0, [r4, #0x34]
	ldr r1, [r4, #0x38]
	ldr r2, [r4, #0x3c]
	ldr r3, [r4, #0x44]
	bl sub_080B5724
	b _080B6574
_080B64E6:
	ldr r0, [r4, #0x34]
	bl sub_080B58FC
	b _080B6574
_080B64EE:
	ldr r0, [r4, #0x34]
	ldr r1, [r4, #0x40]
	bl sub_080B4810
	b _080B6574
_080B64F8:
	ldr r0, [r4, #0x34]
	bl sub_080B4934
	b _080B6574
_080B6500:
	ldr r0, [r4, #0x34]
	movs r2, #0x38
	ldrsh r1, [r4, r2]
	movs r3, #0x3c
	ldrsh r2, [r4, r3]
	ldr r3, [r4, #0x44]
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	bl sub_080B59AC
	b _080B6574
_080B6516:
	ldr r0, [r4, #0x34]
	movs r2, #0x38
	ldrsh r1, [r4, r2]
	movs r3, #0x3c
	ldrsh r2, [r4, r3]
	ldr r3, [r4, #0x44]
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	bl sub_080B5A80
	b _080B6574
_080B652C:
	ldr r0, [r4, #0x34]
	ldr r1, [r4, #0x40]
	ldr r2, [r4, #0x44]
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	bl sub_080B5B6C
	b _080B6574
_080B653C:
	ldr r0, [r4, #0x34]
	ldr r1, [r4, #0x44]
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	bl sub_080B5CA8
	b _080B6574
_080B654A:
	ldr r0, [r4, #0x38]
	ldr r1, [r4, #0x3c]
	ldr r2, [r4, #0x44]
	bl sub_080B5DBC
	b _080B6574
_080B6556:
	ldr r0, [r4, #0x44]
	bl sub_080B6664
	b _080B6574
_080B655E:
	ldr r0, [r4, #0x44]
	bl sub_080B6754
	b _080B6574
_080B6566:
	ldr r0, [r4, #0x44]
	bl sub_080B56B0
	b _080B6574
_080B656E:
	ldr r0, [r4, #0x44]
	bl sub_080B5648
_080B6574:
	adds r0, r4, #0
	bl Proc_Break
_080B657A:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080B6580
sub_080B6580: @ 0x080B6580
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r4, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r7, [sp, #0x18]
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _080B65C4 @ =0x08DB0F44
	bl Proc_Find
	adds r1, r0, #0
	ldr r0, _080B65C8 @ =0x08DB1004
	bl Proc_Start
	str r5, [r0, #0x2c]
	adds r1, r0, #0
	adds r1, #0x30
	strb r4, [r1]
	str r6, [r0, #0x34]
	mov r1, r8
	str r1, [r0, #0x40]
	str r7, [r0, #0x38]
	ldr r1, [sp, #0x1c]
	str r1, [r0, #0x3c]
	ldr r1, [sp, #0x20]
	str r1, [r0, #0x44]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B65C4: .4byte 0x08DB0F44
_080B65C8: .4byte 0x08DB1004

	thumb_func_start sub_080B65CC
sub_080B65CC: @ 0x080B65CC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	ldr r0, [r6, #0x30]
	lsls r0, r0, #5
	ldr r1, _080B6660 @ =0x02022862
	adds r5, r0, r1
	adds r4, r6, #0
	adds r4, #0x34
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	movs r1, #0x1f
	mov sb, r1
	movs r1, #0x20
	subs r3, r1, r0
	movs r2, #0xf8
	lsls r2, r2, #2
	mov r8, r2
	movs r7, #0xf8
	lsls r7, r7, #7
	mov ip, r7
	movs r0, #0xe
	mov sl, r0
_080B6602:
	ldrh r2, [r4]
	movs r0, #0x1f
	ands r0, r2
	adds r1, r0, #0
	muls r1, r3, r1
	asrs r1, r1, #5
	mov r7, sb
	ands r1, r7
	mov r0, r8
	ands r0, r2
	muls r0, r3, r0
	asrs r0, r0, #5
	mov r7, r8
	ands r0, r7
	adds r1, r1, r0
	mov r0, ip
	ands r0, r2
	muls r0, r3, r0
	asrs r0, r0, #5
	mov r2, ip
	ands r0, r2
	adds r1, r1, r0
	strh r1, [r5]
	adds r4, #2
	adds r5, #2
	movs r7, #1
	rsbs r7, r7, #0
	add sl, r7
	mov r0, sl
	cmp r0, #0
	bge _080B6602
	bl EnablePalSync
	ldr r0, [r6, #0x2c]
	cmp r0, #0x20
	bne _080B6650
	adds r0, r6, #0
	bl Proc_Break
_080B6650:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B6660: .4byte 0x02022862

	thumb_func_start sub_080B6664
sub_080B6664: @ 0x080B6664
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _080B66B0 @ =0x08DB0F44
	bl Proc_Find
	adds r1, r0, #0
	ldr r0, _080B66B4 @ =0x08DB101C
	bl Proc_Start
	adds r5, r0, #0
	movs r0, #0x1f
	ands r4, r0
	str r4, [r5, #0x30]
	movs r0, #0
	str r0, [r5, #0x2c]
	ldr r0, _080B66B8 @ =0x081900E8
	movs r1, #0xe0
	lsls r1, r1, #2
	movs r2, #0x80
	bl ApplyPaletteExt
	ldr r0, _080B66BC @ =gPal
	lsls r4, r4, #5
	adds r4, r4, r0
	adds r4, #2
	adds r5, #0x34
	movs r1, #0xe
_080B669A:
	ldrh r0, [r4]
	strh r0, [r5]
	adds r4, #2
	adds r5, #2
	subs r1, #1
	cmp r1, #0
	bge _080B669A
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B66B0: .4byte 0x08DB0F44
_080B66B4: .4byte 0x08DB101C
_080B66B8: .4byte 0x081900E8
_080B66BC: .4byte gPal

	thumb_func_start sub_080B66C0
sub_080B66C0: @ 0x080B66C0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	ldr r0, [r6, #0x30]
	lsls r0, r0, #5
	ldr r1, _080B6750 @ =0x02022862
	adds r5, r0, r1
	adds r4, r6, #0
	adds r4, #0x34
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	movs r1, #0x1f
	mov sb, r1
	adds r3, r0, #0
	movs r2, #0xf8
	lsls r2, r2, #2
	mov r8, r2
	movs r7, #0xf8
	lsls r7, r7, #7
	mov ip, r7
	movs r0, #0xe
	mov sl, r0
_080B66F4:
	ldrh r2, [r4]
	movs r0, #0x1f
	ands r0, r2
	adds r1, r0, #0
	muls r1, r3, r1
	asrs r1, r1, #5
	mov r7, sb
	ands r1, r7
	mov r0, r8
	ands r0, r2
	muls r0, r3, r0
	asrs r0, r0, #5
	mov r7, r8
	ands r0, r7
	adds r1, r1, r0
	mov r0, ip
	ands r0, r2
	muls r0, r3, r0
	asrs r0, r0, #5
	mov r2, ip
	ands r0, r2
	adds r1, r1, r0
	strh r1, [r5]
	adds r4, #2
	adds r5, #2
	movs r7, #1
	rsbs r7, r7, #0
	add sl, r7
	mov r0, sl
	cmp r0, #0
	bge _080B66F4
	bl EnablePalSync
	ldr r0, [r6, #0x2c]
	cmp r0, #0x20
	bne _080B6742
	adds r0, r6, #0
	bl Proc_Break
_080B6742:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B6750: .4byte 0x02022862

	thumb_func_start sub_080B6754
sub_080B6754: @ 0x080B6754
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _080B67A0 @ =0x08DB0F44
	bl Proc_Find
	adds r1, r0, #0
	ldr r0, _080B67A4 @ =0x08DB1034
	bl Proc_Start
	adds r5, r0, #0
	movs r0, #0x1f
	ands r4, r0
	str r4, [r5, #0x30]
	movs r0, #0
	str r0, [r5, #0x2c]
	ldr r0, _080B67A8 @ =0x081900E8
	movs r1, #0xe0
	lsls r1, r1, #2
	movs r2, #0x80
	bl ApplyPaletteExt
	ldr r0, _080B67AC @ =gPal
	lsls r4, r4, #5
	adds r4, r4, r0
	adds r4, #2
	adds r5, #0x34
	movs r1, #0xe
_080B678A:
	ldrh r0, [r4]
	strh r0, [r5]
	adds r4, #2
	adds r5, #2
	subs r1, #1
	cmp r1, #0
	bge _080B678A
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B67A0: .4byte 0x08DB0F44
_080B67A4: .4byte 0x08DB1034
_080B67A8: .4byte 0x081900E8
_080B67AC: .4byte gPal

	thumb_func_start sub_080B67B0
sub_080B67B0: @ 0x080B67B0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	movs r1, #0
	mov sb, r1
	str r1, [r0, #0x2c]
	bl sub_0807702C
	ldr r2, _080B6898 @ =0x030027CC
	mov ip, r2
	ldr r0, _080B689C @ =0x0000FFE0
	ldrh r3, [r2]
	ands r0, r3
	movs r1, #0xf
	orrs r0, r1
	strh r0, [r2]
	subs r2, #0x3c
	mov r0, ip
	subs r0, #0xf
	mov r5, sb
	strb r5, [r0]
	adds r0, #4
	strb r5, [r0]
	mov r1, ip
	subs r1, #0x10
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	movs r6, #0x20
	ldrb r0, [r2, #1]
	orrs r0, r6
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #8
	rsbs r0, r0, #0
	add r0, ip
	mov sl, r0
	ldrb r0, [r0]
	orrs r0, r6
	mov r1, sl
	strb r0, [r1]
	mov r7, ip
	subs r7, #6
	movs r2, #0x21
	rsbs r2, r2, #0
	adds r0, r2, #0
	ldrb r3, [r7]
	ands r0, r3
	strb r0, [r7]
	movs r1, #1
	mov r5, sl
	ldrb r0, [r5]
	orrs r0, r1
	movs r4, #2
	orrs r0, r4
	movs r3, #4
	mov r8, r3
	mov r5, r8
	orrs r0, r5
	movs r3, #8
	orrs r0, r3
	movs r3, #0x10
	orrs r0, r3
	mov r5, sl
	strb r0, [r5]
	ldrb r0, [r7]
	orrs r1, r0
	orrs r1, r4
	mov r5, r8
	orrs r1, r5
	movs r0, #8
	orrs r1, r0
	orrs r1, r3
	strb r1, [r7]
	mov r1, sl
	ldrb r1, [r1]
	orrs r6, r1
	mov r3, sl
	strb r6, [r3]
	ldrb r5, [r7]
	ands r2, r5
	strb r2, [r7]
	movs r0, #0x3f
	mov r1, ip
	ldrb r1, [r1]
	ands r0, r1
	movs r1, #0x80
	orrs r0, r1
	mov r2, ip
	strb r0, [r2]
	mov r3, sb
	strb r3, [r2, #8]
	strb r3, [r2, #9]
	strb r3, [r2, #0xa]
	bl sub_08077C1C
	ldr r0, _080B68A0 @ =0x02000814
	ldrb r5, [r0]
	orrs r4, r5
	strb r4, [r0]
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B6898: .4byte 0x030027CC
_080B689C: .4byte 0x0000FFE0
_080B68A0: .4byte 0x02000814

	thumb_func_start sub_080B68A4
sub_080B68A4: @ 0x080B68A4
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	movs r0, #0x18
	ldr r4, [r7, #0x2c]
	adds r4, #1
	str r4, [r7, #0x2c]
	muls r0, r4, r0
	muls r0, r4, r0
	movs r5, #0xe1
	lsls r5, r5, #4
	adds r1, r5, #0
	bl __divsi3
	adds r6, r0, #0
	lsls r0, r4, #4
	muls r0, r4, r0
	adds r1, r5, #0
	bl __divsi3
	movs r4, #0x10
	subs r4, r4, r0
	ldr r0, [r7, #0x30]
	ldr r2, _080B6918 @ =gAnims
	movs r3, #4
	ldrsh r1, [r2, r3]
	subs r0, r0, r1
	ldr r1, [r7, #0x34]
	subs r1, #1
	movs r3, #6
	ldrsh r2, [r2, r3]
	subs r1, r1, r2
	adds r2, r6, #0
	bl sub_08077E1C
	ldr r3, _080B691C @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x80
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r4, [r0]
	ldr r0, [r7, #0x2c]
	cmp r0, #0x3c
	blt _080B6912
	str r1, [r7, #0x2c]
_080B6912:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B6918: .4byte gAnims
_080B691C: .4byte gDispIo

	thumb_func_start sub_080B6920
sub_080B6920: @ 0x080B6920
	ldr r1, _080B695C @ =0x02000814
	movs r0, #0xfd
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	ldr r2, _080B6960 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r1, #8
	movs r0, #0
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	subs r0, #0x21
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_080B695C: .4byte 0x02000814
_080B6960: .4byte gDispIo

	thumb_func_start sub_080B6964
sub_080B6964: @ 0x080B6964
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r4, _080B6984 @ =0x08DB104C
	ldr r0, _080B6988 @ =0x08DB0F44
	bl Proc_Find
	adds r1, r0, #0
	adds r0, r4, #0
	bl Proc_Start
	str r5, [r0, #0x30]
	str r6, [r0, #0x34]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B6984: .4byte 0x08DB104C
_080B6988: .4byte 0x08DB0F44

	thumb_func_start sub_080B698C
sub_080B698C: @ 0x080B698C
	push {lr}
	ldr r0, _080B699C @ =0x08DB104C
	bl Proc_Find
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_080B699C: .4byte 0x08DB104C

	thumb_func_start sub_080B69A0
sub_080B69A0: @ 0x080B69A0
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r5, r1, #0
	cmp r6, #0
	blt _080B6A04
	cmp r5, #0
	blt _080B6A04
	cmp r6, #0x7f
	bgt _080B6A04
	cmp r5, #0x55
	bgt _080B6A04
	ldr r1, _080B6A0C @ =0x08DB10A4
	asrs r3, r6, #5
	lsls r3, r3, #2
	asrs r0, r5, #5
	lsls r0, r0, #4
	adds r3, r3, r0
	adds r1, r3, r1
	ldr r4, [r1]
	movs r2, #0x1f
	adds r1, r2, #0
	ands r1, r5
	subs r0, r2, r1
	lsls r0, r0, #6
	adds r0, #2
	adds r4, r4, r0
	ands r2, r6
	lsls r0, r2, #1
	adds r4, r4, r0
	ldr r5, _080B6A10 @ =gBg3Tm
	lsls r1, r1, #5
	adds r1, r1, r2
	lsls r0, r1, #1
	adds r0, r0, r5
	ldrh r2, [r4]
	strh r2, [r0]
	ldr r0, _080B6A14 @ =0x08DB1074
	adds r3, r3, r0
	ldr r0, [r3]
	lsls r1, r1, #5
	adds r0, r0, r1
	ldr r2, _080B6A18 @ =0x06008000
	adds r1, r1, r2
	movs r2, #8
	bl CpuFastSet
	movs r0, #8
	bl EnableBgSync
_080B6A04:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B6A0C: .4byte 0x08DB10A4
_080B6A10: .4byte gBg3Tm
_080B6A14: .4byte 0x08DB1074
_080B6A18: .4byte 0x06008000

	thumb_func_start sub_080B6A1C
sub_080B6A1C: @ 0x080B6A1C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov sb, r0
	adds r7, r1, #0
	mov r8, r2
	str r3, [sp]
	cmp r0, #0
	bge _080B6A5A
	cmp r7, #0
	bge _080B6A5A
	movs r5, #0
_080B6A3A:
	movs r4, #0
	ldr r0, [sp]
	adds r7, r0, r5
	adds r6, r5, #1
_080B6A42:
	mov r1, r8
	adds r0, r1, r4
	adds r1, r7, #0
	bl sub_080B69A0
	adds r4, #1
	cmp r4, #0x1e
	ble _080B6A42
	adds r5, r6, #0
	cmp r5, #0x14
	ble _080B6A3A
	b _080B6B4E
_080B6A5A:
	ldr r0, [sp]
	cmp r0, r7
	bge _080B6AD0
	adds r5, r0, #0
	movs r1, #0x15
	adds r1, r1, r5
	mov sl, r1
_080B6A68:
	movs r4, #0
	adds r6, r5, #1
_080B6A6C:
	mov r1, r8
	adds r0, r1, r4
	adds r1, r5, #0
	bl sub_080B69A0
	adds r4, #1
	cmp r4, #0x1e
	ble _080B6A6C
	adds r5, r6, #0
	cmp r5, r7
	blt _080B6A68
	adds r5, r7, #0
	cmp r5, sl
	bge _080B6AA4
_080B6A88:
	mov r4, r8
	adds r6, r5, #1
	cmp r4, sb
	bge _080B6A9E
_080B6A90:
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_080B69A0
	adds r4, #1
	cmp r4, sb
	blt _080B6A90
_080B6A9E:
	adds r5, r6, #0
	cmp r5, sl
	blt _080B6A88
_080B6AA4:
	adds r5, r7, #0
	cmp r5, sl
	bge _080B6B4E
	mov r7, r8
	adds r7, #0x1f
	mov r8, r7
_080B6AB0:
	mov r4, sb
	adds r4, #0x1f
	adds r6, r5, #1
	cmp r4, r8
	bge _080B6AC8
_080B6ABA:
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_080B69A0
	adds r4, #1
	cmp r4, r7
	blt _080B6ABA
_080B6AC8:
	adds r5, r6, #0
	cmp r5, sl
	blt _080B6AB0
	b _080B6B4E
_080B6AD0:
	adds r5, r7, #0
	adds r5, #0x15
	ldr r0, [sp]
	adds r0, #0x15
	mov sl, r0
	str r5, [sp, #4]
	cmp r5, sl
	bge _080B6AFA
_080B6AE0:
	movs r4, #0
	adds r6, r5, #1
_080B6AE4:
	mov r1, r8
	adds r0, r1, r4
	adds r1, r5, #0
	bl sub_080B69A0
	adds r4, #1
	cmp r4, #0x1e
	ble _080B6AE4
	adds r5, r6, #0
	cmp r5, sl
	blt _080B6AE0
_080B6AFA:
	ldr r5, [sp]
	ldr r0, [sp, #4]
	cmp r5, r0
	bge _080B6B20
_080B6B02:
	mov r4, r8
	adds r6, r5, #1
	cmp r4, sb
	bge _080B6B18
_080B6B0A:
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_080B69A0
	adds r4, #1
	cmp r4, sb
	blt _080B6B0A
_080B6B18:
	adds r5, r6, #0
	ldr r1, [sp, #4]
	cmp r5, r1
	blt _080B6B02
_080B6B20:
	ldr r5, [sp]
	ldr r0, [sp, #4]
	cmp r5, r0
	bge _080B6B4E
	mov r7, r8
	adds r7, #0x1f
	mov r8, r7
_080B6B2E:
	mov r4, sb
	adds r4, #0x1f
	adds r6, r5, #1
	cmp r4, r8
	bge _080B6B46
_080B6B38:
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_080B69A0
	adds r4, #1
	cmp r4, r7
	blt _080B6B38
_080B6B46:
	adds r5, r6, #0
	ldr r1, [sp, #4]
	cmp r5, r1
	blt _080B6B2E
_080B6B4E:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B6B60
sub_080B6B60: @ 0x080B6B60
	push {r4, r5, r6, lr}
	bl sub_080B7968
	adds r6, r0, #0
	ldr r0, [r6, #8]
	movs r2, #0x80
	lsls r2, r2, #1
	movs r1, #0
	bl ApplyPaletteExt
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r4, #0
	ldr r5, _080B6BB4 @ =0x06008000
_080B6B82:
	ldr r0, [r6]
	lsls r1, r4, #2
	adds r1, r1, r0
	ldr r0, [r1]
	adds r1, r5, #0
	bl sub_08013688
	movs r0, #0x80
	lsls r0, r0, #4
	adds r5, r5, r0
	adds r4, #1
	cmp r4, #9
	ble _080B6B82
	ldr r0, _080B6BB8 @ =gBg3Tm
	ldr r1, [r6, #4]
	movs r2, #0
	bl TmApplyTsa_thm
	movs r0, #8
	bl EnableBgSync
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B6BB4: .4byte 0x06008000
_080B6BB8: .4byte gBg3Tm

	thumb_func_start sub_080B6BBC
sub_080B6BBC: @ 0x080B6BBC
	push {r4, r5, lr}
	adds r4, r1, #0
	adds r5, r2, #0
	cmp r0, #1
	beq _080B6BD6
	cmp r0, #1
	bgt _080B6BD0
	cmp r0, #0
	beq _080B6C04
	b _080B6C80
_080B6BD0:
	cmp r0, #2
	beq _080B6C3C
	b _080B6C80
_080B6BD6:
	ldr r0, _080B6C00 @ =0x085AE7BC
	movs r1, #0
	movs r2, #0x80
	bl ApplyPaletteExt
	lsls r1, r4, #3
	movs r0, #0xff
	ands r1, r0
	lsls r2, r5, #3
	ands r2, r0
	movs r0, #3
	bl SetBgOffset
	movs r1, #1
	rsbs r1, r1, #0
	adds r0, r1, #0
	adds r2, r4, #0
	adds r3, r5, #0
	bl sub_080B6A1C
	b _080B6C86
	.align 2, 0
_080B6C00: .4byte 0x085AE7BC
_080B6C04:
	ldr r0, _080B6C28 @ =0x0860A86C
	movs r1, #0
	movs r2, #0x80
	bl ApplyPaletteExt
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, _080B6C2C @ =0x0860A8EC
	ldr r1, _080B6C30 @ =0x06008000
	bl sub_08013688
	ldr r0, _080B6C34 @ =gBg3Tm
	ldr r1, _080B6C38 @ =0x0860F964
	b _080B6C5C
	.align 2, 0
_080B6C28: .4byte 0x0860A86C
_080B6C2C: .4byte 0x0860A8EC
_080B6C30: .4byte 0x06008000
_080B6C34: .4byte gBg3Tm
_080B6C38: .4byte 0x0860F964
_080B6C3C:
	ldr r0, _080B6C6C @ =0x0860FE18
	movs r1, #0
	movs r2, #0x80
	bl ApplyPaletteExt
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, _080B6C70 @ =0x0860FE98
	ldr r1, _080B6C74 @ =0x06008000
	bl sub_08013688
	ldr r0, _080B6C78 @ =gBg3Tm
	ldr r1, _080B6C7C @ =0x086151B8
_080B6C5C:
	movs r2, #0
	bl TmApplyTsa_thm
	movs r0, #8
	bl EnableBgSync
	b _080B6C86
	.align 2, 0
_080B6C6C: .4byte 0x0860FE18
_080B6C70: .4byte 0x0860FE98
_080B6C74: .4byte 0x06008000
_080B6C78: .4byte gBg3Tm
_080B6C7C: .4byte 0x086151B8
_080B6C80:
	subs r0, #3
	bl sub_080B6B60
_080B6C86:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080B6C8C
sub_080B6C8C: @ 0x080B6C8C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r4, r0, #0
	mov sb, r1
	mov sl, r2
	ldr r0, _080B6D4C @ =gPal
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r0, r2
	movs r2, #0x20
	bl CpuFastSet
	cmp r4, #1
	bne _080B6D64
	movs r7, #0
	movs r5, #0x1f
	mov r8, r5
	movs r3, #0
_080B6CB8:
	mov r0, sl
	adds r6, r0, r7
	mov r1, r8
	ands r6, r1
	movs r5, #0
	ldr r2, _080B6D50 @ =0x06001000
	adds r4, r3, r2
_080B6CC6:
	mov r1, sb
	adds r0, r1, r5
	mov r2, r8
	ands r0, r2
	lsls r1, r6, #5
	adds r0, r0, r1
	lsls r0, r0, #5
	ldr r1, _080B6D54 @ =0x06008000
	adds r0, r0, r1
	adds r1, r4, #0
	movs r2, #8
	str r3, [sp]
	bl CpuFastSet
	adds r4, #0x20
	adds r5, #1
	ldr r3, [sp]
	cmp r5, #0x1d
	ble _080B6CC6
	movs r2, #0x80
	lsls r2, r2, #3
	adds r3, r3, r2
	adds r7, #1
	cmp r7, #0x13
	ble _080B6CB8
	movs r7, #0
	movs r5, #0x1f
	mov r8, r5
_080B6CFE:
	mov r1, sl
	adds r0, r1, r7
	mov r2, r8
	ands r0, r2
	movs r5, #0
	adds r4, r7, #1
	lsls r1, r7, #5
	mov ip, r1
	lsls r6, r0, #5
	lsls r0, r7, #6
	ldr r2, _080B6D58 @ =gBg2Tm
	adds r3, r0, r2
_080B6D16:
	mov r7, sb
	adds r0, r7, r5
	mov r1, r8
	ands r0, r1
	mov r7, ip
	adds r2, r7, r5
	adds r0, r6, r0
	lsls r0, r0, #1
	ldr r1, _080B6D5C @ =gBg3Tm
	adds r0, r0, r1
	movs r1, #0xf0
	lsls r1, r1, #8
	ldrh r0, [r0]
	ands r1, r0
	adds r1, #0x80
	adds r2, r2, r1
	ldr r7, _080B6D60 @ =0xFFFF8000
	adds r2, r2, r7
	strh r2, [r3]
	adds r3, #2
	adds r5, #1
	cmp r5, #0x1d
	ble _080B6D16
	adds r7, r4, #0
	cmp r7, #0x13
	ble _080B6CFE
	b _080B6D9E
	.align 2, 0
_080B6D4C: .4byte gPal
_080B6D50: .4byte 0x06001000
_080B6D54: .4byte 0x06008000
_080B6D58: .4byte gBg2Tm
_080B6D5C: .4byte gBg3Tm
_080B6D60: .4byte 0xFFFF8000
_080B6D64:
	ldr r0, _080B6DB8 @ =0x06008000
	ldr r1, _080B6DBC @ =0x06001000
	movs r2, #0xa0
	lsls r2, r2, #5
	bl CpuFastSet
	movs r7, #0
	ldr r0, _080B6DC0 @ =gBg2Tm
	mov r8, r0
	ldr r6, _080B6DC4 @ =gBg3Tm
	ldr r1, _080B6DC8 @ =0x00008080
	adds r3, r1, #0
_080B6D7C:
	adds r4, r7, #1
	lsls r0, r7, #6
	adds r2, r0, r6
	mov r5, r8
	adds r1, r0, r5
	movs r5, #0x1d
_080B6D88:
	ldrh r7, [r2]
	adds r0, r3, r7
	strh r0, [r1]
	adds r2, #2
	adds r1, #2
	subs r5, #1
	cmp r5, #0
	bge _080B6D88
	adds r7, r4, #0
	cmp r7, #0x13
	ble _080B6D7C
_080B6D9E:
	bl EnablePalSync
	movs r0, #4
	bl EnableBgSync
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B6DB8: .4byte 0x06008000
_080B6DBC: .4byte 0x06001000
_080B6DC0: .4byte gBg2Tm
_080B6DC4: .4byte gBg3Tm
_080B6DC8: .4byte 0x00008080

	thumb_func_start sub_080B6DCC
sub_080B6DCC: @ 0x080B6DCC
	push {lr}
	ldr r0, _080B6DDC @ =0x08DB0F44
	bl Proc_Find
	cmp r0, #0
	bne _080B6DE0
	movs r0, #0
	b _080B6DE8
	.align 2, 0
_080B6DDC: .4byte 0x08DB0F44
_080B6DE0:
	adds r0, #0x54
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
_080B6DE8:
	pop {r1}
	bx r1

	thumb_func_start sub_080B6DEC
sub_080B6DEC: @ 0x080B6DEC
	ldr r0, _080B6E2C @ =0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0xa0
	bls _080B6DFC
	movs r3, #0
_080B6DFC:
	movs r0, #1
	ands r0, r3
	cmp r0, #0
	bne _080B6E28
	ldr r1, _080B6E30 @ =0x02000814
	movs r0, #2
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _080B6E28
	ldr r1, _080B6E34 @ =0x0203E640
	cmp r3, #0
	bne _080B6E1C
	ldr r0, _080B6E38 @ =0x0203E638
	ldr r0, [r0]
	str r0, [r1]
_080B6E1C:
	ldr r2, _080B6E3C @ =0x04000040
	ldr r1, [r1]
	lsls r0, r3, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
_080B6E28:
	bx lr
	.align 2, 0
_080B6E2C: .4byte 0x04000006
_080B6E30: .4byte 0x02000814
_080B6E34: .4byte 0x0203E640
_080B6E38: .4byte 0x0203E638
_080B6E3C: .4byte 0x04000040

	thumb_func_start sub_080B6E40
sub_080B6E40: @ 0x080B6E40
	push {r4, lr}
	adds r4, r0, #0
	bl sub_0800EC08
	ldr r0, _080B6E84 @ =0x0860A86C
	movs r1, #0
	movs r2, #0x80
	bl ApplyPaletteExt
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, _080B6E88 @ =0x0860A8EC
	ldr r1, _080B6E8C @ =0x06008000
	bl sub_08013688
	ldr r0, _080B6E90 @ =gBg3Tm
	ldr r1, _080B6E94 @ =0x0860F964
	movs r2, #0
	bl TmApplyTsa_thm
	movs r0, #8
	bl EnableBgSync
	movs r0, #0xb4
	str r0, [r4, #0x30]
	movs r0, #0x60
	str r0, [r4, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B6E84: .4byte 0x0860A86C
_080B6E88: .4byte 0x0860A8EC
_080B6E8C: .4byte 0x06008000
_080B6E90: .4byte gBg3Tm
_080B6E94: .4byte 0x0860F964

	thumb_func_start sub_080B6E98
sub_080B6E98: @ 0x080B6E98
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	movs r1, #0
	str r1, [r0, #0x2c]
	bl sub_0807702C
	ldr r2, _080B6F84 @ =0x030027CC
	mov ip, r2
	ldr r0, _080B6F88 @ =0x0000FFE0
	ldrh r1, [r2]
	ands r0, r1
	movs r1, #0x1f
	orrs r0, r1
	strh r0, [r2]
	subs r2, #0x3c
	mov r0, ip
	subs r0, #0xf
	movs r1, #0
	strb r1, [r0]
	adds r0, #4
	strb r1, [r0]
	mov r1, ip
	subs r1, #0x10
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	movs r0, #0x20
	mov r8, r0
	mov r0, r8
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	movs r2, #8
	rsbs r2, r2, #0
	add r2, ip
	mov sb, r2
	mov r1, r8
	ldrb r0, [r2]
	orrs r1, r0
	mov r7, ip
	subs r7, #6
	movs r2, #0x21
	rsbs r2, r2, #0
	mov sl, r2
	mov r0, sl
	ldrb r2, [r7]
	ands r0, r2
	movs r6, #1
	orrs r1, r6
	movs r3, #2
	orrs r1, r3
	movs r5, #4
	orrs r1, r5
	movs r4, #8
	orrs r1, r4
	movs r2, #0x10
	orrs r1, r2
	orrs r0, r6
	orrs r0, r3
	orrs r0, r5
	orrs r0, r4
	orrs r0, r2
	mov r2, r8
	orrs r1, r2
	mov r2, sb
	strb r1, [r2]
	mov r1, sl
	ands r0, r1
	strb r0, [r7]
	movs r0, #0x3f
	mov r2, ip
	ldrb r2, [r2]
	ands r0, r2
	movs r1, #0x80
	orrs r0, r1
	mov r1, ip
	strb r0, [r1]
	movs r2, #0
	strb r2, [r1, #8]
	strb r2, [r1, #9]
	strb r2, [r1, #0xa]
	ldr r0, _080B6F8C @ =0x02000814
	ldrb r1, [r0]
	orrs r3, r1
	strb r3, [r0]
	movs r0, #0
	bl SetOnHBlankA
	ldr r0, _080B6F90 @ =sub_080B6DEC
	bl SetOnHBlankA
	ldr r0, _080B6F94 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080B6F74
	ldr r0, _080B6F98 @ =0x00000269
	bl m4aSongNumStart
_080B6F74:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B6F84: .4byte 0x030027CC
_080B6F88: .4byte 0x0000FFE0
_080B6F8C: .4byte 0x02000814
_080B6F90: .4byte sub_080B6DEC
_080B6F94: .4byte gPlaySt
_080B6F98: .4byte 0x00000269

	thumb_func_start sub_080B6F9C
sub_080B6F9C: @ 0x080B6F9C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	movs r5, #0x40
	movs r0, #0x96
	lsls r0, r0, #1
	ldr r4, [r7, #0x2c]
	adds r4, #1
	str r4, [r7, #0x2c]
	muls r0, r4, r0
	muls r0, r4, r0
	movs r6, #0x80
	lsls r6, r6, #5
	adds r1, r6, #0
	bl __divsi3
	mov r8, r0
	subs r5, r5, r4
	lsls r0, r5, #3
	muls r0, r5, r0
	adds r1, r6, #0
	bl __divsi3
	movs r4, #8
	subs r4, r4, r0
	ldr r0, [r7, #0x30]
	ldr r1, [r7, #0x34]
	mov r2, r8
	bl sub_08077E1C
	ldr r3, _080B7014 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x80
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r4, #8
	adds r0, #1
	strb r4, [r0]
	ldr r0, [r7, #0x2c]
	cmp r0, #0x40
	blt _080B700A
	adds r0, r7, #0
	bl Proc_Break
_080B700A:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B7014: .4byte gDispIo

	thumb_func_start sub_080B7018
sub_080B7018: @ 0x080B7018
	push {lr}
	bl EndEachSpriteAnimProc
	ldr r3, _080B706C @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x80
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x46
	movs r0, #0x10
	strb r0, [r1]
	subs r1, #0x10
	movs r0, #0x20
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r3, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r3, #1]
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0
	.align 2, 0
_080B706C: .4byte gDispIo

	thumb_func_start sub_080B7070
sub_080B7070: @ 0x080B7070
	push {lr}
	adds r1, r0, #0
	ldr r0, _080B7080 @ =0x08DB10D4
	bl Proc_StartBlocking
	pop {r0}
	bx r0
	.align 2, 0
_080B7080: .4byte 0x08DB10D4

	thumb_func_start sub_080B7084
sub_080B7084: @ 0x080B7084
	ldr r1, _080B7090 @ =gAnims
	movs r2, #4
	ldrsh r1, [r1, r2]
	subs r0, r0, r1
	bx lr
	.align 2, 0
_080B7090: .4byte gAnims

	thumb_func_start sub_080B7094
sub_080B7094: @ 0x080B7094
	ldr r1, _080B70A0 @ =gAnims
	movs r2, #6
	ldrsh r1, [r1, r2]
	subs r0, r0, r1
	bx lr
	.align 2, 0
_080B70A0: .4byte gAnims

	thumb_func_start sub_080B70A4
sub_080B70A4: @ 0x080B70A4
	push {r4, lr}
	adds r3, r0, #0
	ldr r4, _080B70CC @ =0x08DB1074
	asrs r0, r3, #5
	lsls r0, r0, #2
	asrs r2, r1, #5
	lsls r2, r2, #4
	adds r0, r0, r2
	adds r0, r0, r4
	ldr r0, [r0]
	movs r2, #0x1f
	ands r1, r2
	lsls r1, r1, #5
	ands r3, r2
	adds r1, r1, r3
	lsls r1, r1, #5
	adds r0, r0, r1
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080B70CC: .4byte 0x08DB1074

	thumb_func_start sub_080B70D0
sub_080B70D0: @ 0x080B70D0
	push {r4, lr}
	adds r3, r0, #0
	ldr r4, _080B70FC @ =0x08DB10A4
	asrs r0, r3, #5
	lsls r0, r0, #2
	asrs r2, r1, #5
	lsls r2, r2, #4
	adds r0, r0, r2
	adds r0, r0, r4
	ldr r0, [r0]
	movs r4, #0x1f
	adds r2, r4, #0
	bics r2, r1
	lsls r2, r2, #6
	adds r2, #2
	adds r0, r0, r2
	ands r3, r4
	lsls r3, r3, #1
	adds r0, r0, r3
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080B70FC: .4byte 0x08DB10A4

	thumb_func_start sub_080B7100
sub_080B7100: @ 0x080B7100
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	bl sub_080A06BC
	mov sb, r0
	movs r1, #0
	add r0, sp, #0xc
_080B7116:
	str r1, [r0]
	subs r0, #4
	cmp r0, sp
	bge _080B7116
	bl GetNextChapterStatsSlot
	mov r8, r0
	movs r5, #0
	cmp r5, r8
	bge _080B71CE
	ldr r6, _080B71F4 @ =0x08D62110
	movs r7, #0x94
	movs r0, #0x2d
	adds r0, r0, r6
	mov sl, r0
_080B7134:
	adds r0, r5, #0
	bl GetChapterStats
	adds r4, r0, #0
	ldr r0, [r4]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	bl sub_080A0654
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B71C8
	bl sub_08031B54
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r7, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x39
	adds r0, r0, r1
	ldr r1, [sp]
	ldrb r0, [r0]
	adds r1, r0, r1
	str r1, [sp]
	bl sub_08031B54
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r7, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x35
	adds r0, r0, r1
	ldr r1, [sp, #4]
	ldrb r0, [r0]
	adds r1, r0, r1
	str r1, [sp, #4]
	bl sub_08031B54
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r7, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x31
	adds r0, r0, r1
	ldr r1, [sp, #8]
	ldrb r0, [r0]
	adds r1, r0, r1
	str r1, [sp, #8]
	bl sub_08031B54
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r7, r1
	adds r0, r0, r1
	add r0, sl
	ldr r1, [sp, #0xc]
	ldrb r0, [r0]
	adds r1, r0, r1
	str r1, [sp, #0xc]
_080B71C8:
	adds r5, #1
	cmp r5, r8
	blt _080B7134
_080B71CE:
	movs r5, #0
	mov r1, sp
_080B71D2:
	ldr r0, [r1]
	cmp sb, r0
	bgt _080B71E0
	adds r1, #4
	adds r5, #1
	cmp r5, #3
	ble _080B71D2
_080B71E0:
	adds r0, r5, #0
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080B71F4: .4byte 0x08D62110

	thumb_func_start sub_080B71F8
sub_080B71F8: @ 0x080B71F8
	push {lr}
	sub sp, #4
	ldr r1, _080B722C @ =0x08622C44
	mov r0, sp
	movs r2, #4
	bl memcpy
	bl sub_080B75A4
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r1, #0
_080B7210:
	mov r3, sp
	adds r0, r3, r1
	ldrb r0, [r0]
	cmp r2, r0
	bge _080B7224
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _080B7210
_080B7224:
	adds r0, r1, #0
	add sp, #4
	pop {r1}
	bx r1
	.align 2, 0
_080B722C: .4byte 0x08622C44

	thumb_func_start sub_080B7230
sub_080B7230: @ 0x080B7230
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	bl sub_080A0B88
	mov sb, r0
	movs r1, #0
	add r0, sp, #0xc
_080B7246:
	str r1, [r0]
	subs r0, #4
	cmp r0, sp
	bge _080B7246
	bl GetNextChapterStatsSlot
	mov r8, r0
	movs r5, #0
	cmp r5, r8
	bge _080B72FE
	ldr r6, _080B7324 @ =0x08D62110
	movs r7, #0x94
	movs r0, #0x3e
	adds r0, r0, r6
	mov sl, r0
_080B7264:
	adds r0, r5, #0
	bl GetChapterStats
	adds r4, r0, #0
	ldr r0, [r4]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	bl sub_080A0654
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B72F8
	bl sub_08031B54
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x17
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r7, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x56
	adds r0, r0, r1
	ldr r1, [sp]
	ldrh r0, [r0]
	adds r1, r0, r1
	str r1, [sp]
	bl sub_08031B54
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x17
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r7, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x4e
	adds r0, r0, r1
	ldr r1, [sp, #4]
	ldrh r0, [r0]
	adds r1, r0, r1
	str r1, [sp, #4]
	bl sub_08031B54
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x17
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r7, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x46
	adds r0, r0, r1
	ldr r1, [sp, #8]
	ldrh r0, [r0]
	adds r1, r0, r1
	str r1, [sp, #8]
	bl sub_08031B54
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x17
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r7, r1
	adds r0, r0, r1
	add r0, sl
	ldr r1, [sp, #0xc]
	ldrh r0, [r0]
	adds r1, r0, r1
	str r1, [sp, #0xc]
_080B72F8:
	adds r5, #1
	cmp r5, r8
	blt _080B7264
_080B72FE:
	movs r5, #0
	mov r1, sp
_080B7302:
	ldr r0, [r1]
	cmp sb, r0
	blt _080B7310
	adds r1, #4
	adds r5, #1
	cmp r5, #3
	ble _080B7302
_080B7310:
	adds r0, r5, #0
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080B7324: .4byte 0x08D62110

	thumb_func_start sub_080B7328
sub_080B7328: @ 0x080B7328
	push {lr}
	sub sp, #4
	ldr r1, _080B7358 @ =0x08622C48
	mov r0, sp
	movs r2, #4
	bl memcpy
	bl sub_080B75DC
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r1, #0
_080B7340:
	mov r3, sp
	adds r0, r3, r1
	ldrb r0, [r0]
	cmp r2, r0
	blt _080B7350
	adds r1, #1
	cmp r1, #3
	ble _080B7340
_080B7350:
	adds r0, r1, #0
	add sp, #4
	pop {r1}
	bx r1
	.align 2, 0
_080B7358: .4byte 0x08622C48

	thumb_func_start sub_080B735C
sub_080B735C: @ 0x080B735C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	bl sub_08017574
	mov r8, r0
	movs r6, #0
	bl GetNextChapterStatsSlot
	adds r7, r0, #0
	movs r5, #0
	cmp r6, r7
	bge _080B73B4
	ldr r0, _080B73C8 @ =0x08D62170
	mov sb, r0
_080B737C:
	adds r0, r5, #0
	bl GetChapterStats
	adds r4, r0, #0
	ldr r0, [r4]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	bl sub_080A0654
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B73AE
	bl sub_08031B54
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x16
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	movs r2, #0x94
	muls r1, r2, r1
	adds r0, r0, r1
	add r0, sb
	ldr r0, [r0]
	adds r6, r6, r0
_080B73AE:
	adds r5, #1
	cmp r5, r7
	blt _080B737C
_080B73B4:
	movs r0, #0x64
	mov r1, r8
	muls r1, r0, r1
	lsls r0, r6, #2
	adds r2, r0, r6
	lsls r0, r2, #4
	cmp r1, r0
	blo _080B73CC
	movs r0, #4
	b _080B73F0
	.align 2, 0
_080B73C8: .4byte 0x08D62170
_080B73CC:
	lsls r0, r6, #4
	subs r0, r0, r6
	lsls r0, r0, #2
	cmp r1, r0
	blo _080B73DA
	movs r0, #3
	b _080B73F0
_080B73DA:
	lsls r0, r2, #3
	cmp r1, r0
	blo _080B73E4
	movs r0, #2
	b _080B73F0
_080B73E4:
	lsls r0, r2, #2
	cmp r1, r0
	bhs _080B73EE
	movs r0, #0
	b _080B73F0
_080B73EE:
	movs r0, #1
_080B73F0:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_080B73FC
sub_080B73FC: @ 0x080B73FC
	push {r4, r5, r6, lr}
	ldr r6, [sp, #0x10]
	ldr r4, _080B7440 @ =0x08DB6EBC
	adds r0, r0, r4
	adds r5, r4, #5
	adds r1, r1, r5
	ldrb r0, [r0]
	ldrb r1, [r1]
	adds r1, r0, r1
	adds r0, r4, #0
	adds r0, #0xa
	adds r2, r2, r0
	ldrb r2, [r2]
	adds r1, r2, r1
	adds r0, #5
	adds r3, r3, r0
	ldrb r3, [r3]
	adds r1, r3, r1
	adds r4, #0x14
	adds r6, r6, r4
	ldrb r6, [r6]
	adds r1, r6, r1
	movs r0, #0
	ldr r2, _080B7444 @ =0x08DB6ED6
_080B742C:
	ldrh r3, [r2]
	cmp r1, r3
	blo _080B743A
	adds r2, #2
	adds r0, #1
	cmp r0, #4
	ble _080B742C
_080B743A:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080B7440: .4byte 0x08DB6EBC
_080B7444: .4byte 0x08DB6ED6

	thumb_func_start sub_080B7448
sub_080B7448: @ 0x080B7448
	push {r4, lr}
	ldr r3, _080B7478 @ =0x08DB6EE2
	adds r0, r0, r3
	adds r4, r3, #5
	adds r1, r1, r4
	ldrb r0, [r0]
	ldrb r1, [r1]
	adds r4, r0, r1
	adds r3, #0xa
	adds r2, r2, r3
	ldrb r2, [r2]
	adds r4, r2, r4
	movs r0, #0
	ldr r1, _080B747C @ =0x08DB6EF2
_080B7464:
	ldrh r2, [r1]
	cmp r4, r2
	blo _080B7472
	adds r1, #2
	adds r0, #1
	cmp r0, #4
	ble _080B7464
_080B7472:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080B7478: .4byte 0x08DB6EE2
_080B747C: .4byte 0x08DB6EF2

	thumb_func_start sub_080B7480
sub_080B7480: @ 0x080B7480
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	bl sub_080B7100
	mov r8, r0
	bl sub_080B71F8
	adds r6, r0, #0
	bl sub_080B735C
	adds r5, r0, #0
	bl sub_080B7230
	adds r4, r0, #0
	bl sub_080B7328
	str r0, [sp]
	mov r0, r8
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl sub_080B73FC
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080B74C0
sub_080B74C0: @ 0x080B74C0
	push {r4, r5, lr}
	sub sp, #0x10
	ldr r0, _080B7538 @ =gPlaySt
	ldrh r5, [r0, #0x10]
	movs r1, #0xe
	ldrsb r1, [r0, r1]
	movs r0, #0x94
	muls r1, r0, r1
	ldr r0, _080B753C @ =0x08D62110
	adds r4, r1, r0
	bl sub_08031B54
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r4, #0
	adds r1, #0x39
	adds r1, r1, r0
	ldrb r0, [r1]
	str r0, [sp]
	bl sub_08031B54
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r4, #0
	adds r1, #0x35
	adds r1, r1, r0
	ldrb r0, [r1]
	str r0, [sp, #4]
	bl sub_08031B54
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r4, #0
	adds r1, #0x31
	adds r1, r1, r0
	ldrb r0, [r1]
	str r0, [sp, #8]
	bl sub_08031B54
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r4, #0
	adds r1, #0x2d
	adds r1, r1, r0
	ldrb r0, [r1]
	str r0, [sp, #0xc]
	movs r2, #0
	mov r1, sp
_080B7520:
	ldr r0, [r1]
	cmp r5, r0
	bgt _080B752E
	adds r1, #4
	adds r2, #1
	cmp r2, #3
	ble _080B7520
_080B752E:
	adds r0, r2, #0
	add sp, #0x10
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080B7538: .4byte gPlaySt
_080B753C: .4byte 0x08D62110

	thumb_func_start sub_080B7540
sub_080B7540: @ 0x080B7540
	push {lr}
	sub sp, #4
	ldr r1, _080B7574 @ =0x08622C4C
	mov r0, sp
	movs r2, #4
	bl memcpy
	bl sub_080B75FC
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r1, #0
_080B7558:
	mov r3, sp
	adds r0, r3, r1
	ldrb r0, [r0]
	cmp r2, r0
	bge _080B756C
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _080B7558
_080B756C:
	adds r0, r1, #0
	add sp, #4
	pop {r1}
	bx r1
	.align 2, 0
_080B7574: .4byte 0x08622C4C

	thumb_func_start sub_080B7578
sub_080B7578: @ 0x080B7578
	ldr r2, _080B759C @ =0x08DB6EFE
	adds r0, r0, r2
	adds r2, #5
	adds r1, r1, r2
	ldrb r0, [r0]
	ldrb r1, [r1]
	adds r2, r0, r1
	movs r0, #0
	ldr r1, _080B75A0 @ =0x08DB6F08
_080B758A:
	ldrh r3, [r1]
	cmp r2, r3
	blo _080B7598
	adds r1, #2
	adds r0, #1
	cmp r0, #4
	ble _080B758A
_080B7598:
	bx lr
	.align 2, 0
_080B759C: .4byte 0x08DB6EFE
_080B75A0: .4byte 0x08DB6F08

	thumb_func_start sub_080B75A4
sub_080B75A4: @ 0x080B75A4
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #1
_080B75AA:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _080B75C8
	ldr r0, [r1]
	cmp r0, #0
	beq _080B75C8
	ldr r0, [r1, #0xc]
	ldr r1, _080B75D8 @ =0x00010004
	ands r0, r1
	cmp r0, #4
	bne _080B75C8
	adds r5, #1
_080B75C8:
	adds r4, #1
	cmp r4, #0x3f
	ble _080B75AA
	lsls r0, r5, #0x10
	lsrs r0, r0, #0x10
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080B75D8: .4byte 0x00010004

	thumb_func_start sub_080B75DC
sub_080B75DC: @ 0x080B75DC
	push {r4, lr}
	bl sub_080A0AF0
	adds r4, r0, #0
	bl sub_080A0B14
	movs r1, #0x64
	muls r0, r1, r0
	adds r1, r4, #0
	bl __divsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_080B75FC
sub_080B75FC: @ 0x080B75FC
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #1
_080B7602:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _080B7636
	ldr r2, [r0]
	cmp r2, #0
	beq _080B7636
	ldr r0, [r0, #0xc]
	ldr r1, _080B7648 @ =0x00010004
	ands r0, r1
	cmp r0, #4
	bne _080B7636
	ldrb r0, [r2, #4]
	bl GetPidStats
	ldrb r0, [r0, #5]
	lsls r1, r0, #0x1a
	lsrs r1, r1, #0x1a
	ldr r0, _080B764C @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r1, r0
	bne _080B7636
	adds r5, #1
_080B7636:
	adds r4, #1
	cmp r4, #0x3f
	ble _080B7602
	lsls r0, r5, #0x10
	lsrs r0, r0, #0x10
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080B7648: .4byte 0x00010004
_080B764C: .4byte gPlaySt

	thumb_func_start nullsub_90
nullsub_90: @ 0x080B7650
	bx lr
	.align 2, 0

	thumb_func_start sub_080B7654
sub_080B7654: @ 0x080B7654
	push {r4, r5, r6, lr}
	bl sub_08017574
	ldr r1, _080B769C @ =gPlaySt
	ldr r5, [r1, #0x30]
	subs r5, r0, r5
	str r0, [r1, #0x30]
	bl GetNextChapterStatsSlot
	subs r0, #1
	bl GetChapterStats
	adds r6, r0, #0
	ldr r4, _080B76A0 @ =0x08D62110
	bl sub_08031B54
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x16
	ldr r1, [r6]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	movs r2, #0x94
	muls r1, r2, r1
	adds r0, r0, r1
	adds r4, #0x60
	adds r0, r0, r4
	ldr r1, [r0]
	movs r0, #0x64
	muls r5, r0, r5
	lsls r0, r1, #2
	adds r2, r0, r1
	lsls r0, r2, #4
	cmp r5, r0
	blt _080B76A4
	movs r0, #4
	b _080B76C8
	.align 2, 0
_080B769C: .4byte gPlaySt
_080B76A0: .4byte 0x08D62110
_080B76A4:
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #2
	cmp r5, r0
	blt _080B76B2
	movs r0, #3
	b _080B76C8
_080B76B2:
	lsls r0, r2, #3
	cmp r5, r0
	blt _080B76BC
	movs r0, #2
	b _080B76C8
_080B76BC:
	lsls r0, r2, #2
	cmp r5, r0
	bge _080B76C6
	movs r0, #0
	b _080B76C8
_080B76C6:
	movs r0, #1
_080B76C8:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080B76D0
sub_080B76D0: @ 0x080B76D0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	bl sub_080A0AF0
	adds r4, r0, #0
	bl sub_080A0B14
	adds r5, r0, #0
	ldr r7, _080B7704 @ =0x000FFFFF
	cmp r4, r7
	ble _080B76EC
	adds r4, r7, #0
_080B76EC:
	cmp r5, r7
	ble _080B76F2
	adds r5, r7, #0
_080B76F2:
	ldr r6, _080B7708 @ =gPlaySt
	ldr r0, [r6, #0x34]
	mov r8, r0
	lsls r0, r0, #0xc
	lsrs r2, r0, #0xc
	cmp r4, r2
	bne _080B770C
	movs r0, #0x28
	b _080B7758
	.align 2, 0
_080B7704: .4byte 0x000FFFFF
_080B7708: .4byte gPlaySt
_080B770C:
	ldrh r1, [r6, #0x36]
	lsrs r1, r1, #4
	mov ip, r1
	movs r3, #0x38
	adds r3, r3, r6
	mov sb, r3
	ldrb r1, [r3]
	lsls r0, r1, #0xc
	mov r3, ip
	orrs r0, r3
	subs r0, r5, r0
	movs r1, #0x64
	muls r0, r1, r0
	subs r1, r4, r2
	bl __divsi3
	adds r2, r0, #0
	cmp r2, #0x64
	ble _080B7734
	movs r2, #0x64
_080B7734:
	ands r4, r7
	ldr r0, _080B7764 @ =0xFFF00000
	mov r1, r8
	ands r0, r1
	orrs r0, r4
	str r0, [r6, #0x34]
	ldr r1, _080B7768 @ =0x00000FFF
	ands r1, r5
	lsls r1, r1, #4
	movs r0, #0xf
	ldrh r3, [r6, #0x36]
	ands r0, r3
	orrs r0, r1
	strh r0, [r6, #0x36]
	lsrs r0, r5, #0xc
	mov r1, sb
	strb r0, [r1]
	adds r0, r2, #0
_080B7758:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080B7764: .4byte 0xFFF00000
_080B7768: .4byte 0x00000FFF

	thumb_func_start sub_080B776C
sub_080B776C: @ 0x080B776C
	push {lr}
	sub sp, #4
	ldr r1, _080B779C @ =0x08622C48
	mov r0, sp
	movs r2, #4
	bl memcpy
	bl sub_080B76D0
	adds r2, r0, #0
	movs r1, #0
_080B7782:
	mov r3, sp
	adds r0, r3, r1
	ldrb r0, [r0]
	cmp r2, r0
	blt _080B7792
	adds r1, #1
	cmp r1, #3
	ble _080B7782
_080B7792:
	adds r0, r1, #0
	add sp, #4
	pop {r1}
	bx r1
	.align 2, 0
_080B779C: .4byte 0x08622C48

	thumb_func_start sub_080B77A0
sub_080B77A0: @ 0x080B77A0
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	movs r1, #0
	add r0, sp, #0xc
_080B77A8:
	str r1, [r0]
	subs r0, #4
	cmp r0, sp
	bge _080B77A8
	bl sub_080A0B88
	adds r1, r0, #0
	ldr r4, _080B7870 @ =0x000FFFFF
	cmp r1, r4
	ble _080B77BE
	adds r1, r4, #0
_080B77BE:
	ldr r3, _080B7874 @ =gPlaySt
	ldr r2, [r3, #0x38]
	lsls r0, r2, #4
	lsrs r0, r0, #0xc
	subs r7, r1, r0
	ands r1, r4
	lsls r1, r1, #8
	ldr r0, _080B7878 @ =0xF00000FF
	ands r0, r2
	orrs r0, r1
	str r0, [r3, #0x38]
	bl GetNextChapterStatsSlot
	subs r0, #1
	bl GetChapterStats
	adds r5, r0, #0
	bl sub_08031B54
	ldr r6, _080B787C @ =0x08D62110
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x17
	ldr r1, [r5]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	movs r4, #0x94
	muls r1, r4, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x56
	adds r0, r0, r1
	ldrh r0, [r0]
	str r0, [sp]
	bl sub_08031B54
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x17
	ldr r1, [r5]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r4, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x4e
	adds r0, r0, r1
	ldrh r0, [r0]
	str r0, [sp, #4]
	bl sub_08031B54
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x17
	ldr r1, [r5]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r4, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x46
	adds r0, r0, r1
	ldrh r0, [r0]
	str r0, [sp, #8]
	bl sub_08031B54
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x17
	ldr r1, [r5]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r4, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x3e
	adds r0, r0, r1
	ldrh r0, [r0]
	str r0, [sp, #0xc]
	movs r2, #0
	mov r1, sp
_080B7858:
	ldr r0, [r1]
	cmp r7, r0
	blt _080B7866
	adds r1, #4
	adds r2, #1
	cmp r2, #3
	ble _080B7858
_080B7866:
	adds r0, r2, #0
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080B7870: .4byte 0x000FFFFF
_080B7874: .4byte gPlaySt
_080B7878: .4byte 0xF00000FF
_080B787C: .4byte 0x08D62110

	thumb_func_start sub_080B7880
sub_080B7880: @ 0x080B7880
	push {r4, r5, r6, lr}
	sub sp, #4
	bl GetNextChapterStatsSlot
	cmp r0, #0
	ble _080B794A
	ldr r6, _080B7954 @ =gPlaySt
	ldrb r0, [r6, #0x1b]
	cmp r0, #3
	bgt _080B7902
	cmp r0, #1
	blt _080B7902
	bl sub_080B74C0
	adds r5, r6, #0
	adds r5, #0x3e
	movs r4, #7
	ands r0, r4
	lsls r0, r0, #2
	movs r1, #0x1d
	rsbs r1, r1, #0
	ldrb r2, [r5]
	ands r1, r2
	orrs r1, r0
	strb r1, [r5]
	bl sub_080B7540
	lsls r0, r0, #5
	movs r1, #0x1f
	ldrb r3, [r5]
	ands r1, r3
	orrs r1, r0
	strb r1, [r5]
	bl sub_080B7654
	movs r1, #7
	ands r1, r0
	lsls r1, r1, #0xf
	ldr r0, [r6, #0x3c]
	ldr r2, _080B7958 @ =0xFFFC7FFF
	ands r0, r2
	orrs r0, r1
	str r0, [r6, #0x3c]
	bl sub_080B776C
	movs r1, #7
	ands r0, r1
	lsls r0, r0, #6
	ldr r1, _080B795C @ =0xFFFFFE3F
	ldrh r2, [r6, #0x3c]
	ands r1, r2
	orrs r1, r0
	strh r1, [r6, #0x3c]
	bl sub_080B77A0
	adds r2, r6, #0
	adds r2, #0x3d
	ands r0, r4
	lsls r0, r0, #1
	movs r1, #0xf
	rsbs r1, r1, #0
	ldrb r3, [r2]
	ands r1, r3
	orrs r1, r0
	strb r1, [r2]
_080B7902:
	ldr r5, _080B7954 @ =gPlaySt
	adds r0, r5, #0
	adds r0, #0x3e
	ldrb r1, [r0]
	lsls r0, r1, #0x1b
	lsrs r0, r0, #0x1d
	lsrs r1, r1, #5
	ldr r2, [r5, #0x3c]
	lsls r2, r2, #0xe
	lsrs r2, r2, #0x1d
	adds r3, r5, #0
	adds r3, #0x3d
	ldrb r3, [r3]
	lsls r3, r3, #0x1c
	lsrs r3, r3, #0x1d
	ldrh r6, [r5, #0x3c]
	lsls r4, r6, #0x17
	lsrs r4, r4, #0x1d
	str r4, [sp]
	bl sub_080B73FC
	ldrh r2, [r5, #0x2c]
	lsls r1, r2, #0x13
	lsrs r1, r1, #0x17
	adds r1, r1, r0
	cmp r1, #0xff
	ble _080B793A
	movs r1, #0xff
_080B793A:
	ldr r3, _080B7960 @ =0x000001FF
	adds r0, r3, #0
	ands r1, r0
	lsls r1, r1, #4
	ldr r0, _080B7964 @ =0xFFFFE00F
	ands r0, r2
	orrs r0, r1
	strh r0, [r5, #0x2c]
_080B794A:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B7954: .4byte gPlaySt
_080B7958: .4byte 0xFFFC7FFF
_080B795C: .4byte 0xFFFFFE3F
_080B7960: .4byte 0x000001FF
_080B7964: .4byte 0xFFFFE00F

	thumb_func_start sub_080B7968
sub_080B7968: @ 0x080B7968
	adds r1, r0, #0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	ldr r1, _080B7978 @ =0x08DB793C
	adds r0, r0, r1
	bx lr
	.align 2, 0
_080B7978: .4byte 0x08DB793C

	thumb_func_start nullsub_91
nullsub_91: @ 0x080B797C
	bx lr
	.align 2, 0

	thumb_func_start sub_080B7980
sub_080B7980: @ 0x080B7980
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sb, r0
	adds r7, r1, #0
	mov r8, r2
	mov sl, r3
	ldr r0, [sp, #0x20]
	bl sub_080B7968
	adds r6, r0, #0
	movs r5, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r4, r7, r0
_080B79A2:
	ldr r0, [r6]
	lsls r1, r5, #2
	adds r1, r1, r0
	ldr r0, [r1]
	adds r1, r4, #0
	bl sub_08013688
	movs r2, #0x80
	lsls r2, r2, #4
	adds r4, r4, r2
	adds r5, #1
	cmp r5, #9
	ble _080B79A2
	ldr r1, [r6, #4]
	mov r3, r8
	lsls r2, r3, #0xc
	lsls r0, r7, #0x11
	lsrs r0, r0, #0x16
	adds r2, r2, r0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	mov r0, sb
	bl TmApplyTsa_thm
	ldr r0, [r6, #8]
	mov r2, r8
	lsls r1, r2, #5
	mov r3, sl
	lsls r2, r3, #5
	bl ApplyPaletteExt
	ldr r0, [sp, #0x20]
	cmp r0, #0x7f
	bgt _080B79EE
	movs r0, #0
	ldr r1, [sp, #0x20]
	bl sub_080A02A8
_080B79EE:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B79FC
sub_080B79FC: @ 0x080B79FC
	push {r4, lr}
	ldr r0, _080B7A68 @ =0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0xa0
	bls _080B7A0E
	movs r3, #0
_080B7A0E:
	cmp r3, #0x1f
	bhi _080B7A2A
	lsrs r2, r3, #1
	ldr r1, _080B7A6C @ =0x04000050
	movs r4, #0xfd
	lsls r4, r4, #6
	adds r0, r4, #0
	strh r0, [r1]
	adds r1, #2
	movs r0, #0x10
	subs r0, r0, r2
	lsls r0, r0, #8
	adds r0, r0, r2
	strh r0, [r1]
_080B7A2A:
	cmp r3, #0x80
	bls _080B7A4A
	movs r1, #0xa0
	subs r1, r1, r3
	asrs r1, r1, #1
	ldr r2, _080B7A6C @ =0x04000050
	movs r4, #0xfd
	lsls r4, r4, #6
	adds r0, r4, #0
	strh r0, [r2]
	adds r2, #2
	movs r0, #0x10
	subs r0, r0, r1
	lsls r0, r0, #8
	adds r0, r0, r1
	strh r0, [r2]
_080B7A4A:
	cmp r3, #0x20
	bne _080B7A62
	ldr r2, _080B7A6C @ =0x04000050
	ldr r1, _080B7A70 @ =0x030027CC
	ldrh r0, [r1]
	strh r0, [r2]
	adds r2, #2
	ldrb r3, [r1, #9]
	lsls r0, r3, #8
	ldrb r1, [r1, #8]
	orrs r0, r1
	strh r0, [r2]
_080B7A62:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B7A68: .4byte 0x04000006
_080B7A6C: .4byte 0x04000050
_080B7A70: .4byte 0x030027CC

	thumb_func_start sub_080B7A74
sub_080B7A74: @ 0x080B7A74
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	ldr r5, _080B7AA8 @ =0x08DB7D14
	ldr r0, _080B7AAC @ =0x08DB7DCC
	ldr r4, [r0]
	mov r1, sp
	movs r0, #0
	strh r0, [r1]
	ldr r2, _080B7AB0 @ =0x0100005A
	mov r0, sp
	adds r1, r4, #0
	bl CpuSet
	ldr r1, _080B7AB4 @ =0x02000888
	movs r0, #0
	str r0, [r1]
	ldr r0, [r5]
	cmp r0, #0
	beq _080B7B26
	adds r7, r1, #0
_080B7A9C:
	ldr r0, [r5]
	cmp r0, #0xcd
	bne _080B7AB8
	str r5, [r4, #8]
	b _080B7B16
	.align 2, 0
_080B7AA8: .4byte 0x08DB7D14
_080B7AAC: .4byte 0x08DB7DCC
_080B7AB0: .4byte 0x0100005A
_080B7AB4: .4byte 0x02000888
_080B7AB8:
	bl GetUnitFromCharId
	adds r6, r0, #0
	cmp r6, #0
	beq _080B7B1E
	ldrb r0, [r5]
	bl GetPidStats
	adds r2, r0, #0
	str r5, [r4, #8]
	movs r1, #3
	adds r0, r1, #0
	ldrb r3, [r2, #0xc]
	ands r0, r3
	lsls r0, r0, #8
	ldrb r3, [r2, #0xb]
	orrs r0, r3
	cmp r0, #0xff
	ble _080B7AE0
	movs r0, #0xff
_080B7AE0:
	strb r0, [r4, #2]
	ldrb r0, [r2]
	strb r0, [r4, #3]
	adds r0, r1, #0
	ldrb r1, [r2, #0xc]
	ands r0, r1
	lsls r0, r0, #8
	ldrb r3, [r2, #0xb]
	orrs r0, r3
	cmp r0, #0xff
	bgt _080B7AFC
	ldrh r1, [r2, #0xc]
	lsrs r0, r1, #2
	b _080B7AFE
_080B7AFC:
	movs r0, #0xff
_080B7AFE:
	strb r0, [r4, #1]
	ldr r0, [r6, #0xc]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	beq _080B7B12
	ldrb r2, [r2, #5]
	lsls r0, r2, #0x1a
	lsrs r0, r0, #0x1a
	b _080B7B14
_080B7B12:
	movs r0, #0xff
_080B7B14:
	strb r0, [r4]
_080B7B16:
	adds r4, #0xc
	ldr r0, [r7]
	adds r0, #1
	str r0, [r7]
_080B7B1E:
	adds r5, #0xc
	ldr r0, [r5]
	cmp r0, #0
	bne _080B7A9C
_080B7B26:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B7B30
sub_080B7B30: @ 0x080B7B30
	movs r2, #0
_080B7B32:
	ldrb r1, [r0]
	cmp r1, #0
	beq _080B7B46
	cmp r1, #1
	bne _080B7B42
	adds r0, #1
	adds r2, #1
	b _080B7B32
_080B7B42:
	adds r0, #2
	b _080B7B32
_080B7B46:
	adds r0, r2, #3
	bx lr
	.align 2, 0

	thumb_func_start sub_080B7B4C
sub_080B7B4C: @ 0x080B7B4C
	push {r4, r5, lr}
	ldr r0, _080B7B74 @ =0x08DB7DCC
	ldr r4, [r0]
	ldr r1, _080B7B78 @ =0x02000884
	movs r0, #0
	str r0, [r1]
	ldr r0, [r4, #8]
	cmp r0, #0
	beq _080B7BAA
	adds r5, r1, #0
_080B7B60:
	ldr r2, [r4, #8]
	ldr r0, [r2]
	cmp r0, #0xcd
	bne _080B7B7C
	movs r0, #9
	strb r0, [r4, #4]
	ldr r0, [r5]
	adds r0, #9
	str r0, [r5]
	b _080B7BA2
	.align 2, 0
_080B7B74: .4byte 0x08DB7DCC
_080B7B78: .4byte 0x02000884
_080B7B7C:
	cmp r0, #3
	beq _080B7BA2
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #0
	blt _080B7B8C
	ldr r0, [r2, #8]
	b _080B7B8E
_080B7B8C:
	ldr r0, [r2, #4]
_080B7B8E:
	bl DecodeMsg
	bl sub_080B7B30
	strb r0, [r4, #4]
	ldr r0, [r5]
	ldrb r1, [r4, #4]
	adds r0, r1, r0
	str r0, [r5]
	ldr r1, _080B7BB8 @ =0x02000884
_080B7BA2:
	adds r4, #0xc
	ldr r0, [r4, #8]
	cmp r0, #0
	bne _080B7B60
_080B7BAA:
	ldr r0, [r1]
	adds r0, #5
	str r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B7BB8: .4byte 0x02000884

	thumb_func_start sub_080B7BBC
sub_080B7BBC: @ 0x080B7BBC
	push {lr}
	bl sub_080B7A74
	bl sub_080B7B4C
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B7BCC
sub_080B7BCC: @ 0x080B7BCC
	push {r4, r5, lr}
	ldr r4, _080B7C08 @ =0x02000818
	ldr r1, _080B7C0C @ =0x06011000
	adds r0, r4, #0
	movs r2, #0xa
	bl InitSpriteTextFont
	adds r0, r4, #0
	bl SetTextFont
	adds r4, #0x18
	movs r5, #9
_080B7BE4:
	adds r0, r4, #0
	bl InitSpriteText
	adds r0, r4, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge _080B7BE4
	movs r0, #0
	bl SetTextFont
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B7C08: .4byte 0x02000818
_080B7C0C: .4byte 0x06011000

	thumb_func_start sub_080B7C10
sub_080B7C10: @ 0x080B7C10
	push {r4, r5, lr}
	ldr r4, _080B7C3C @ =0x02000818
	adds r0, r4, #0
	bl SetTextFont
	adds r5, r4, #0
	adds r5, #0x18
	movs r4, #9
_080B7C20:
	adds r0, r5, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _080B7C20
	movs r0, #0
	bl SetTextFont
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B7C3C: .4byte 0x02000818

	thumb_func_start sub_080B7C40
sub_080B7C40: @ 0x080B7C40
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _080B7C68 @ =0x02000818
	adds r0, r4, #0
	bl SetTextFont
	lsls r5, r5, #3
	adds r4, #0x18
	adds r5, r5, r4
	adds r0, r5, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	movs r0, #0
	bl SetTextFont
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B7C68: .4byte 0x02000818

	thumb_func_start sub_080B7C6C
sub_080B7C6C: @ 0x080B7C6C
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r4, #0
	str r4, [sp]
_080B7C76:
	ldrb r0, [r1]
	cmp r0, #0
	blt _080B7C88
	cmp r0, #1
	ble _080B7C98
	cmp r0, #4
	bne _080B7C88
	adds r1, #1
	b _080B7C76
_080B7C88:
	adds r0, r1, #0
	mov r1, sp
	bl GetCharTextLen
	adds r1, r0, #0
	ldr r0, [sp]
	adds r4, r4, r0
	b _080B7C76
_080B7C98:
	movs r1, #0xe0
	subs r1, r1, r4
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	adds r0, r5, #0
	bl Text_SetCursor
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_080B7CB0
sub_080B7CB0: @ 0x080B7CB0
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	mov r8, r3
	movs r1, #2
	bl Text_SetColor
	adds r0, r4, #0
	movs r1, #0x50
	bl Text_SetCursor
	adds r0, r4, #0
	adds r1, r5, #0
	bl Text_DrawNumberOrBlank
	adds r0, r4, #0
	movs r1, #0x58
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #3
	bl Text_SetColor
	ldr r1, _080B7D58 @ =0x08622C50
	adds r0, r4, #0
	bl Text_DrawString
	adds r0, r4, #0
	movs r1, #2
	bl Text_SetColor
	adds r0, r4, #0
	movs r1, #0x70
	bl Text_SetCursor
	adds r0, r4, #0
	adds r1, r6, #0
	bl Text_DrawNumberOrBlank
	adds r0, r4, #0
	movs r1, #0x78
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #3
	bl Text_SetColor
	ldr r1, _080B7D5C @ =0x08622C54
	adds r0, r4, #0
	bl Text_DrawString
	adds r0, r4, #0
	movs r1, #2
	bl Text_SetColor
	adds r0, r4, #0
	movs r1, #0x90
	bl Text_SetCursor
	adds r0, r4, #0
	mov r1, r8
	bl Text_DrawNumberOrBlank
	adds r0, r4, #0
	movs r1, #0x98
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #3
	bl Text_SetColor
	ldr r1, _080B7D60 @ =0x08622C58
	adds r0, r4, #0
	bl Text_DrawString
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B7D58: .4byte 0x08622C50
_080B7D5C: .4byte 0x08622C54
_080B7D60: .4byte 0x08622C58

	thumb_func_start sub_080B7D64
sub_080B7D64: @ 0x080B7D64
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0x88
	adds r7, r0, #0
	mov r8, r1
	movs r0, #0
	mov sb, r0
	add r2, sp, #0x80
	str r1, [r2]
	ldr r0, _080B7DF8 @ =0x08DB7DC8
	ldr r0, [r0]
	add r1, sp, #0x84
	str r0, [r1]
	adds r6, r2, #0
	adds r4, r1, #0
	adds r5, r4, #0
_080B7D88:
	ldr r0, [r6]
	ldrb r1, [r0]
	cmp r1, #0
	beq _080B7E04
	cmp r1, #1
	bne _080B7E18
	ldr r0, [r4]
	strb r1, [r0]
	ldr r0, [r6]
	adds r0, #1
	add r1, sp, #0x80
	str r0, [r1]
	ldr r0, [r5]
	adds r0, #1
	str r0, [r5]
	movs r0, #1
	add sb, r0
	mov r0, sb
	cmp r0, #2
	bne _080B7D88
	adds r0, r7, #0
	ldr r1, [r4]
	movs r2, #1
	bl sub_080AB970
	str r0, [r5]
	adds r0, r7, #0
	bl GetROMChapterStruct
	adds r2, r0, #0
	ldr r0, _080B7DFC @ =gPlaySt
	movs r1, #0
	ldrb r0, [r0, #0x1b]
	cmp r0, #3
	bne _080B7DD0
	movs r1, #2
_080B7DD0:
	adds r0, r2, #0
	adds r0, #0x70
	adds r0, r0, r1
	ldrh r0, [r0]
	mov r1, sp
	bl sub_08013354
	ldr r1, [r4]
	bl sub_080AB944
	str r0, [r5]
	ldr r0, _080B7E00 @ =0x00001182
	mov r1, sp
	bl sub_08013354
	ldr r1, [r5]
	bl sub_080AB944
	str r0, [r5]
	b _080B7D88
	.align 2, 0
_080B7DF8: .4byte 0x08DB7DC8
_080B7DFC: .4byte gPlaySt
_080B7E00: .4byte 0x00001182
_080B7E04:
	ldr r0, [r4]
	strb r1, [r0]
	mov r0, r8
	str r0, [r6]
	ldr r0, _080B7E14 @ =0x08DB7DC8
	ldr r0, [r0]
	str r0, [r5]
	b _080B7E22
	.align 2, 0
_080B7E14: .4byte 0x08DB7DC8
_080B7E18:
	adds r0, r6, #0
	adds r1, r4, #0
	bl sub_080ABAAC
	b _080B7D88
_080B7E22:
	ldr r1, [r4]
	ldrb r2, [r1]
	cmp r2, #0
	beq _080B7E48
	cmp r2, #1
	bne _080B7E3E
	ldr r0, [r6]
	strb r2, [r0]
	adds r1, #1
	str r1, [r4]
	adds r0, #1
	add r1, sp, #0x80
	str r0, [r1]
	b _080B7E22
_080B7E3E:
	adds r0, r4, #0
	adds r1, r6, #0
	bl sub_080ABAAC
	b _080B7E22
_080B7E48:
	ldr r0, [r6]
	ldr r1, [r4]
	ldrb r1, [r1]
	strb r1, [r0]
	add sp, #0x88
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B7E60
sub_080B7E60: @ 0x080B7E60
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r2
	adds r6, r3, #0
	ldr r3, _080B7EA8 @ =0x08DB7DCC
	lsls r2, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #2
	ldr r0, [r3]
	adds r4, r0, r2
	ldr r5, [r4, #8]
	lsls r1, r1, #3
	ldr r0, _080B7EAC @ =0x02000830
	adds r7, r1, r0
	subs r0, #0x18
	bl SetTextFont
	movs r0, #1
	bl SetTextFontGlyphs
	adds r0, r7, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	adds r0, r7, #0
	movs r1, #1
	bl Text_SetColor
	mov r0, r8
	cmp r0, #0
	beq _080B7EB0
	cmp r0, #1
	beq _080B7EF8
	b _080B7F1E
	.align 2, 0
_080B7EA8: .4byte 0x08DB7DCC
_080B7EAC: .4byte 0x02000830
_080B7EB0:
	ldr r0, [r5]
	cmp r0, #0xcd
	bne _080B7ECC
	ldr r0, _080B7EC8 @ =gPlaySt
	adds r0, #0x2c
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	cmp r0, #0
	beq _080B7EE8
	ldr r0, [r5, #8]
	b _080B7EEA
	.align 2, 0
_080B7EC8: .4byte gPlaySt
_080B7ECC:
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #0
	blt _080B7EE8
	ldr r0, [r5, #8]
	bl DecodeMsg
	adds r1, r0, #0
	str r1, [r6]
	movs r0, #0
	ldrsb r0, [r4, r0]
	bl sub_080B7D64
	b _080B7EF0
_080B7EE8:
	ldr r0, [r5, #4]
_080B7EEA:
	bl DecodeMsg
	str r0, [r6]
_080B7EF0:
	bl sub_08013374
	str r0, [r6]
	b _080B7F1E
_080B7EF8:
	ldr r0, [r5]
	cmp r0, #0xcd
	beq _080B7F1E
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bge _080B7F1E
	movs r0, #0
	bl SetTextFontGlyphs
	ldrb r1, [r4, #1]
	ldrb r2, [r4, #2]
	ldrb r3, [r4, #3]
	adds r0, r7, #0
	bl sub_080B7CB0
	movs r0, #1
	bl SetTextFontGlyphs
_080B7F1E:
	ldr r1, [r6]
	adds r0, r7, #0
	bl sub_080B7C6C
_080B7F26:
	ldr r0, [r6]
	ldrb r2, [r0]
	adds r1, r0, #0
	cmp r2, #0
	beq _080B7F42
	cmp r2, #1
	beq _080B7F3E
	adds r0, r7, #0
	bl Text_DrawCharacter
	str r0, [r6]
	b _080B7F26
_080B7F3E:
	adds r0, #1
	str r0, [r6]
_080B7F42:
	movs r0, #0
	bl SetTextFont
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B7F54
sub_080B7F54: @ 0x080B7F54
	push {r4, r5, r6, r7, lr}
	ldr r3, _080B7F9C @ =gPal
	movs r0, #0x1f
	mov ip, r0
	movs r6, #0xf8
	lsls r6, r6, #2
	movs r5, #0xf8
	lsls r5, r5, #7
	movs r4, #0x7f
	movs r7, #0x1f
_080B7F68:
	ldrh r2, [r3]
	adds r1, r7, #0
	ands r1, r2
	lsrs r1, r1, #1
	mov r0, ip
	ands r1, r0
	adds r0, r6, #0
	ands r0, r2
	lsrs r0, r0, #1
	ands r0, r6
	adds r1, r1, r0
	adds r0, r5, #0
	ands r0, r2
	lsrs r0, r0, #1
	ands r0, r5
	adds r1, r1, r0
	strh r1, [r3]
	adds r3, #2
	subs r4, #1
	cmp r4, #0
	bge _080B7F68
	bl EnablePalSync
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B7F9C: .4byte gPal

	thumb_func_start sub_080B7FA0
sub_080B7FA0: @ 0x080B7FA0
	push {lr}
	adds r2, r0, #0
	ldr r3, _080B7FC4 @ =gPal
	lsls r1, r1, #4
	cmp r1, #0
	ble _080B7FBA
_080B7FAC:
	ldrh r0, [r2]
	strh r0, [r3]
	adds r2, #2
	adds r3, #2
	subs r1, #1
	cmp r1, #0
	bne _080B7FAC
_080B7FBA:
	bl EnablePalSync
	pop {r0}
	bx r0
	.align 2, 0
_080B7FC4: .4byte gPal

	thumb_func_start sub_080B7FC8
sub_080B7FC8: @ 0x080B7FC8
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, #0x40
	movs r1, #0
	ldrsh r0, [r0, r1]
	bl sub_080B7968
	adds r4, r0, #0
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, [r4, #8]
	movs r2, #0x80
	lsls r2, r2, #1
	movs r1, #0
	movs r3, #0x20
	bl sub_080010CC
	ldr r0, _080B800C @ =gBg3Tm
	ldr r1, [r4, #4]
	movs r2, #0
	bl TmApplyTsa_thm
	movs r0, #8
	bl EnableBgSync
	movs r0, #0
	strh r0, [r5, #0x3e]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B800C: .4byte gBg3Tm

	thumb_func_start sub_080B8010
sub_080B8010: @ 0x080B8010
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x40
	movs r1, #0
	ldrsh r0, [r0, r1]
	bl sub_080B7968
	movs r2, #0x3e
	ldrsh r1, [r4, r2]
	ldr r2, [r0]
	lsls r0, r1, #2
	adds r0, r0, r2
	ldr r0, [r0]
	lsls r1, r1, #0xb
	ldr r2, _080B8050 @ =0x06008000
	adds r1, r1, r2
	bl sub_08013688
	ldrh r0, [r4, #0x3e]
	adds r0, #1
	strh r0, [r4, #0x3e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xa
	bne _080B8048
	adds r0, r4, #0
	bl Proc_Break
_080B8048:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B8050: .4byte 0x06008000

	thumb_func_start sub_080B8054
sub_080B8054: @ 0x080B8054
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	ldr r5, _080B8078 @ =0x08DB7DD0
	adds r0, r5, #0
	bl Proc_Find
	cmp r0, #0
	bne _080B807C
	adds r0, r5, #0
	adds r1, r4, #0
	bl Proc_Start
	adds r1, r0, #0
	adds r1, #0x40
	strh r6, [r1]
	b _080B807E
	.align 2, 0
_080B8078: .4byte 0x08DB7DD0
_080B807C:
	movs r0, #0
_080B807E:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_080B8084
sub_080B8084: @ 0x080B8084
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r3, r1, #0
	adds r6, r2, #0
	movs r5, #0
	lsls r4, r4, #1
	cmp r4, #0x1f
	ble _080B809C
	ldr r5, _080B8098 @ =0x0000FE80
	b _080B80A4
	.align 2, 0
_080B8098: .4byte 0x0000FE80
_080B809C:
	cmp r4, #0x13
	ble _080B80A4
	movs r5, #0xa0
	lsls r5, r5, #2
_080B80A4:
	lsls r1, r4, #0xa
	ldr r0, _080B80D4 @ =0x00007FFF
	ands r1, r0
	ldr r0, _080B80D8 @ =0x06008000
	adds r1, r1, r0
	adds r0, r3, #0
	bl sub_08013688
	movs r0, #0x1f
	ands r0, r4
	lsls r0, r0, #6
	ldr r1, _080B80DC @ =gBg3Tm
	adds r0, r0, r1
	adds r2, r5, #0
	adds r1, r6, #0
	bl TmApplyTsa_thm
	movs r0, #8
	bl EnableBgSync
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B80D4: .4byte 0x00007FFF
_080B80D8: .4byte 0x06008000
_080B80DC: .4byte gBg3Tm

	thumb_func_start sub_080B80E0
sub_080B80E0: @ 0x080B80E0
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x44
	movs r0, #0
	strh r0, [r1]
	adds r1, #6
	ldr r0, _080B8128 @ =0x0000FFFF
	strh r0, [r1]
	ldr r0, [r4, #0x38]
	ldr r0, [r0]
	movs r2, #0x80
	lsls r2, r2, #1
	movs r1, #0
	movs r3, #0x20
	bl sub_080010CC
	ldr r0, [r4, #0x38]
	adds r0, #4
	str r0, [r4, #0x38]
	movs r5, #0
_080B810A:
	ldr r0, [r4, #0x38]
	ldr r1, [r0]
	ldr r2, [r0, #4]
	adds r0, r5, #0
	bl sub_080B8084
	ldr r0, [r4, #0x38]
	adds r0, #8
	str r0, [r4, #0x38]
	adds r5, #1
	cmp r5, #9
	ble _080B810A
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B8128: .4byte 0x0000FFFF

	thumb_func_start sub_080B812C
sub_080B812C: @ 0x080B812C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r4, #0
	adds r6, #0x44
	ldrh r1, [r6]
	lsls r0, r1, #0x10
	adds r5, r4, #0
	adds r5, #0x4a
	asrs r3, r0, #0x17
	movs r1, #0
	ldrsh r0, [r5, r1]
	cmp r3, r0
	beq _080B8174
	ldr r2, [r4, #0x38]
	ldr r1, [r2]
	cmp r1, #0
	bne _080B8156
	adds r0, r4, #0
	bl Proc_Break
	b _080B8190
_080B8156:
	adds r0, r3, #0
	adds r0, #0xa
	ldr r2, [r2, #4]
	bl sub_080B8084
	ldr r0, [r4, #0x38]
	adds r0, #8
	str r0, [r4, #0x38]
	movs r0, #8
	bl EnableBgSync
	ldrh r6, [r6]
	lsls r0, r6, #0x10
	asrs r0, r0, #0x17
	strh r0, [r5]
_080B8174:
	adds r0, r4, #0
	adds r0, #0x44
	ldrh r1, [r0]
	ldrh r4, [r4, #0x3c]
	adds r2, r1, r4
	strh r2, [r0]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x13
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #3
	movs r1, #0
	bl SetBgOffset
_080B8190:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B8198
sub_080B8198: @ 0x080B8198
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r1, r2, #0
	ldr r0, _080B81B0 @ =0x08DB7E28
	bl Proc_Start
	str r4, [r0, #0x38]
	strh r5, [r0, #0x3c]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080B81B0: .4byte 0x08DB7E28

	thumb_func_start sub_080B81B4
sub_080B81B4: @ 0x080B81B4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov sl, r0
	movs r0, #0xf0
	mov sb, r0
	movs r5, #0
_080B81C8:
	lsls r0, r5, #1
	adds r0, r0, r5
	lsls r0, r0, #3
	mov r1, sl
	adds r1, #0x46
	movs r2, #0
	ldrsh r1, [r1, r2]
	subs r0, r0, r1
	adds r4, r0, #0
	adds r4, #0xa0
	cmp r4, #0
	bge _080B81FA
	rsbs r0, r4, #0
	mov r1, sb
	bl __modsi3
	adds r2, r0, #0
	cmp r2, #0x17
	bgt _080B81F6
	movs r0, #0x80
	lsls r0, r0, #1
	subs r4, r0, r2
	b _080B81FA
_080B81F6:
	mov r3, sb
	subs r4, r3, r2
_080B81FA:
	movs r0, #0xff
	ands r4, r0
	cmp r4, #0x9f
	ble _080B820A
	adds r0, r5, #1
	mov r8, r0
	cmp r4, #0xe8
	ble _080B8242
_080B820A:
	lsls r0, r5, #0xb
	adds r5, #1
	mov r8, r5
	movs r1, #0x80
	lsls r1, r1, #5
	adds r0, r0, r1
	ldr r1, _080B8258 @ =0x0001FFFF
	ands r0, r1
	lsrs r0, r0, #5
	movs r2, #0xa4
	lsls r2, r2, #8
	adds r5, r0, r2
	movs r7, #8
	movs r6, #6
_080B8226:
	str r5, [sp]
	movs r0, #4
	adds r1, r7, #0
	movs r3, #0x80
	lsls r3, r3, #3
	adds r2, r4, r3
	ldr r3, _080B825C @ =0x08BFF7A8
	bl sub_080068C4
	adds r5, #4
	adds r7, #0x20
	subs r6, #1
	cmp r6, #0
	bge _080B8226
_080B8242:
	mov r5, r8
	cmp r5, #9
	ble _080B81C8
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B8258: .4byte 0x0001FFFF
_080B825C: .4byte 0x08BFF7A8

	thumb_func_start sub_080B8260
sub_080B8260: @ 0x080B8260
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	movs r1, #0
	ldr r0, _080B82D4 @ =0x0001FFFF
	mov sl, r0
_080B8272:
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r4, r0, #0
	adds r4, #0x18
	lsls r0, r1, #0xb
	adds r1, #1
	mov sb, r1
	movs r1, #0xff
	ands r4, r1
	movs r3, #0x80
	lsls r3, r3, #5
	adds r0, r0, r3
	movs r7, #0xa4
	lsls r7, r7, #8
	movs r6, #8
	mov r1, sl
	ands r0, r1
	lsrs r0, r0, #5
	mov r8, r0
	movs r5, #6
_080B829C:
	mov r3, r8
	adds r0, r3, r7
	str r0, [sp]
	movs r0, #4
	adds r1, r6, #0
	movs r3, #0x80
	lsls r3, r3, #3
	adds r2, r4, r3
	ldr r3, _080B82D8 @ =0x08BFF7A8
	bl sub_080068C4
	adds r7, #4
	adds r6, #0x20
	subs r5, #1
	cmp r5, #0
	bge _080B829C
	mov r1, sb
	cmp r1, #7
	ble _080B8272
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B82D4: .4byte 0x0001FFFF
_080B82D8: .4byte 0x08BFF7A8

	thumb_func_start sub_080B82DC
sub_080B82DC: @ 0x080B82DC
	push {r4, r5, lr}
	adds r4, r0, #0
	bl sub_080B7C10
	ldr r0, _080B836C @ =0x08190268
	movs r1, #0xd0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	adds r0, r4, #0
	adds r0, #0x42
	ldrh r1, [r0]
	adds r0, #2
	movs r5, #0
	strh r1, [r0]
	ldr r0, [r4, #0x34]
	ldr r0, [r0]
	bl DecodeMsg
	str r0, [r4, #0x2c]
	bl sub_08013374
	str r0, [r4, #0x2c]
	ldr r0, _080B8370 @ =0x02000830
	str r0, [r4, #0x30]
	movs r0, #1
	bl SetTextFontGlyphs
	ldr r0, [r4, #0x30]
	ldr r1, [r4, #0x2c]
	bl sub_080B7C6C
	ldr r2, _080B8374 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r1, #8
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x45
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
	ldr r0, _080B8378 @ =0x0000FFE0
	ldrh r1, [r2, #0x3c]
	ands r0, r1
	ldr r1, _080B837C @ =0x0000E0FF
	ands r0, r1
	movs r3, #0xf8
	lsls r3, r3, #5
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2, #0x3c]
	adds r1, r2, #0
	adds r1, #0x3d
	movs r0, #0x20
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	ldr r0, _080B8380 @ =sub_080B8260
	adds r1, r4, #0
	bl sub_080AA20C
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B836C: .4byte 0x08190268
_080B8370: .4byte 0x02000830
_080B8374: .4byte gDispIo
_080B8378: .4byte 0x0000FFE0
_080B837C: .4byte 0x0000E0FF
_080B8380: .4byte sub_080B8260

	thumb_func_start sub_080B8384
sub_080B8384: @ 0x080B8384
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x44
	ldrh r0, [r4]
	subs r0, #1
	strh r0, [r4]
	ldr r0, _080B83C0 @ =0x02000818
	bl SetTextFont
	movs r0, #1
	bl SetTextFontGlyphs
	movs r1, #0
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _080B840A
	adds r0, r5, #0
	adds r0, #0x42
	ldrh r0, [r0]
	strh r0, [r4]
	ldr r0, [r5, #0x2c]
	ldrb r1, [r0]
	cmp r1, #1
	beq _080B83CA
	cmp r1, #1
	bgt _080B83C4
	cmp r1, #0
	beq _080B83E2
	b _080B83F8
	.align 2, 0
_080B83C0: .4byte 0x02000818
_080B83C4:
	cmp r1, #4
	beq _080B83EC
	b _080B83F8
_080B83CA:
	ldrh r1, [r4]
	lsls r0, r1, #1
	strh r0, [r4]
	ldr r1, [r5, #0x2c]
	adds r1, #1
	str r1, [r5, #0x2c]
	ldr r0, [r5, #0x30]
	adds r0, #8
	str r0, [r5, #0x30]
	bl sub_080B7C6C
	b _080B840A
_080B83E2:
	strh r1, [r4]
	adds r0, r5, #0
	bl Proc_Break
	b _080B840A
_080B83EC:
	adds r0, #1
	str r0, [r5, #0x2c]
	ldrh r1, [r4]
	lsls r0, r1, #3
	strh r0, [r4]
	b _080B840A
_080B83F8:
	ldr r0, [r5, #0x30]
	movs r1, #1
	bl Text_SetColor
	ldr r0, [r5, #0x30]
	ldr r1, [r5, #0x2c]
	bl Text_DrawCharacter
	str r0, [r5, #0x2c]
_080B840A:
	movs r0, #0
	bl SetTextFont
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B8418
sub_080B8418: @ 0x080B8418
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, #0x44
	ldrh r2, [r0]
	adds r2, #1
	movs r4, #0
	strh r2, [r0]
	ldr r0, _080B8460 @ =gDispIo
	mov ip, r0
	mov r1, ip
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	lsls r2, r2, #0x10
	asrs r3, r2, #0x11
	movs r0, #0x10
	subs r0, r0, r3
	adds r1, #8
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x45
	strb r3, [r0]
	adds r0, #1
	strb r4, [r0]
	asrs r2, r2, #0x10
	cmp r2, #0x20
	bne _080B8458
	adds r0, r5, #0
	bl Proc_Break
_080B8458:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B8460: .4byte gDispIo

	thumb_func_start sub_080B8464
sub_080B8464: @ 0x080B8464
	push {r4, lr}
	adds r4, r0, #0
	bl sub_080AAC88
	ldr r0, [r4, #0x34]
	ldm r0!, {r1}
	str r0, [r4, #0x34]
	cmp r1, #0
	beq _080B847E
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
_080B847E:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080B8484
sub_080B8484: @ 0x080B8484
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r1, r2, #0
	ldr r0, _080B84A0 @ =0x08DB7E70
	bl Proc_Start
	str r4, [r0, #0x34]
	adds r1, r0, #0
	adds r1, #0x42
	strh r5, [r1]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080B84A0: .4byte 0x08DB7E70

	thumb_func_start sub_080B84A4
sub_080B84A4: @ 0x080B84A4
	push {lr}
	ldr r0, _080B84B4 @ =0x08DB7E70
	bl Proc_Find
	cmp r0, #0
	bne _080B84B8
	movs r0, #0
	b _080B84BA
	.align 2, 0
_080B84B4: .4byte 0x08DB7E70
_080B84B8:
	movs r0, #1
_080B84BA:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080B84C0
sub_080B84C0: @ 0x080B84C0
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r5, r0, #0
	movs r0, #0
	bl InitBgs
	movs r4, #0
	str r4, [sp]
	movs r1, #0xc0
	lsls r1, r1, #0x13
	ldr r2, _080B8578 @ =0x01000008
	mov r0, sp
	bl CpuFastSet
	ldr r6, _080B857C @ =gDispIo
	movs r0, #8
	rsbs r0, r0, #0
	ldrb r1, [r6]
	ands r0, r1
	strb r0, [r6]
	adds r1, r6, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r6, #0
	adds r0, #0x45
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r6, #0xc]
	ands r0, r2
	strb r0, [r6, #0xc]
	adds r0, r1, #0
	ldrb r2, [r6, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r6, #0x10]
	ldrb r0, [r6, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r6, #0x14]
	movs r0, #3
	ldrb r1, [r6, #0x18]
	orrs r0, r1
	strb r0, [r6, #0x18]
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r2, [r6, #1]
	ands r0, r2
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r6, #1]
	str r4, [sp, #4]
	add r0, sp, #4
	ldr r1, _080B8580 @ =gPal
	ldr r2, _080B8584 @ =0x01000100
	bl CpuFastSet
	bl sub_080B7BCC
	movs r0, #0
	bl SetOnHBlankA
	adds r0, r5, #0
	adds r0, #0x4c
	strh r4, [r0]
	adds r5, #0x4e
	strh r4, [r5]
	bl sub_080B7BBC
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B8578: .4byte 0x01000008
_080B857C: .4byte gDispIo
_080B8580: .4byte gPal
_080B8584: .4byte 0x01000100

	thumb_func_start sub_080B8588
sub_080B8588: @ 0x080B8588
	push {lr}
	adds r2, r0, #0
	ldr r3, _080B85B8 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r3, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r3, #1]
	ldr r0, _080B85BC @ =0x08DB7CFC
	movs r1, #8
	bl sub_080B8484
	pop {r0}
	bx r0
	.align 2, 0
_080B85B8: .4byte gDispIo
_080B85BC: .4byte 0x08DB7CFC

	thumb_func_start sub_080B85C0
sub_080B85C0: @ 0x080B85C0
	push {lr}
	adds r3, r0, #0
	adds r2, r3, #0
	adds r2, #0x50
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	beq _080B85EA
	ldr r0, _080B85F0 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #8
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080B85EA
	movs r0, #0
	strb r0, [r2]
	adds r0, r3, #0
	movs r1, #0x32
	bl Proc_Goto
_080B85EA:
	pop {r0}
	bx r0
	.align 2, 0
_080B85F0: .4byte gpKeySt

	thumb_func_start sub_080B85F4
sub_080B85F4: @ 0x080B85F4
	push {r4, r5, r6, lr}
	sub sp, #0x64
	adds r5, r0, #0
	adds r0, #0x44
	movs r4, #0
	movs r1, #0
	strh r1, [r0]
	adds r0, #2
	strh r1, [r0]
	subs r0, #6
	strh r1, [r0]
	strh r1, [r5, #0x3e]
	ldr r0, _080B86A4 @ =0x08190268
	movs r1, #0xd0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080B86A8 @ =sub_080B79FC
	bl SetOnHBlankA
	ldr r2, _080B86AC @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r1, #8
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x45
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	ldr r0, _080B86B0 @ =0x0000FFE0
	ldrh r1, [r2, #0x3c]
	ands r0, r1
	ldr r1, _080B86B4 @ =0x0000E0FF
	ands r0, r1
	movs r3, #0xf8
	lsls r3, r3, #5
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2, #0x3c]
	adds r1, r2, #0
	adds r1, #0x3d
	movs r0, #0x20
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	bl sub_080B7C10
	ldr r0, _080B86B8 @ =sub_080B81B4
	adds r1, r5, #0
	bl sub_080AA20C
	adds r6, r5, #0
	adds r6, #0x51
	strb r4, [r6]
	mov r0, sp
	bl ReadGlobalSaveInfo
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B868A
	mov r1, sp
	movs r0, #3
	ldrb r1, [r1, #0xe]
	ands r0, r1
	cmp r0, #0
	beq _080B868A
	movs r0, #1
	strb r0, [r6]
_080B868A:
	adds r0, r5, #0
	adds r0, #0x50
	movs r1, #0
	strb r1, [r0]
	ldr r0, _080B86BC @ =sub_080B85C0
	adds r1, r5, #0
	bl sub_080AA20C
	add sp, #0x64
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B86A4: .4byte 0x08190268
_080B86A8: .4byte sub_080B79FC
_080B86AC: .4byte gDispIo
_080B86B0: .4byte 0x0000FFE0
_080B86B4: .4byte 0x0000E0FF
_080B86B8: .4byte sub_080B81B4
_080B86BC: .4byte sub_080B85C0

	thumb_func_start sub_080B86C0
sub_080B86C0: @ 0x080B86C0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x44
	movs r0, #0
	ldrsh r6, [r4, r0]
	ldr r0, _080B86F0 @ =0x02000884
	ldr r1, [r0]
	lsls r0, r1, #3
	adds r0, r0, r1
	lsls r0, r0, #3
	cmp r6, r0
	blt _080B86F4
	adds r0, r5, #0
	bl Proc_Break
	mov r8, r4
	adds r5, #0x46
	mov sb, r5
	b _080B87CC
	.align 2, 0
_080B86F0: .4byte 0x02000884
_080B86F4:
	movs r1, #0x3e
	ldrsh r4, [r5, r1]
	cmp r4, #9
	bgt _080B8732
	movs r1, #0xa
	bl __divsi3
	adds r1, r0, #0
	adds r0, r6, #0
	bl __divsi3
	adds r1, r4, #0
	cmp r0, r1
	blt _080B8732
	cmp r4, #0
	bne _080B8724
	movs r0, #0
	adds r1, r5, #0
	bl sub_080B8054
	movs r1, #0
	bl Proc_Goto
	b _080B872C
_080B8724:
	adds r0, r1, #0
	adds r1, r5, #0
	bl sub_080B8054
_080B872C:
	ldrh r0, [r5, #0x3e]
	adds r0, #1
	strh r0, [r5, #0x3e]
_080B8732:
	adds r4, r5, #0
	adds r4, #0x44
	movs r1, #0
	ldrsh r0, [r4, r1]
	movs r1, #0x48
	bl __modsi3
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	mov sl, r0
	mov r8, r4
	movs r2, #0x46
	adds r2, r2, r5
	mov sb, r2
	cmp r0, #0
	bne _080B87CC
	movs r1, #0
	ldrsh r0, [r2, r1]
	movs r1, #0x18
	bl __divsi3
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	adds r6, r5, #0
	adds r6, #0x4c
	movs r2, #0
	ldrsh r7, [r6, r2]
	ldr r0, _080B87B8 @ =0x02000888
	ldr r0, [r0]
	subs r0, #1
	cmp r7, r0
	bge _080B87C0
	adds r0, r1, #0
	movs r1, #0xa
	bl __modsi3
	adds r1, r0, #0
	adds r4, #0xa
	movs r0, #0
	ldrsh r2, [r4, r0]
	adds r3, r5, #0
	adds r3, #0x2c
	adds r0, r7, #0
	bl sub_080B7E60
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	movs r2, #0
	ldrsh r1, [r6, r2]
	ldr r0, _080B87BC @ =0x08DB7DCC
	ldr r2, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r2
	ldrb r1, [r0, #4]
	movs r2, #0
	ldrsh r0, [r4, r2]
	cmp r1, r0
	bne _080B87CC
	ldrh r0, [r6]
	adds r0, #1
	strh r0, [r6]
	mov r0, sl
	strh r0, [r4]
	b _080B87CC
	.align 2, 0
_080B87B8: .4byte 0x02000888
_080B87BC: .4byte 0x08DB7DCC
_080B87C0:
	adds r0, r1, #0
	movs r1, #0xa
	bl __modsi3
	bl sub_080B7C40
_080B87CC:
	mov r1, r8
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	movs r2, #0
	ldrsh r0, [r1, r2]
	movs r1, #3
	bl __divsi3
	mov r1, sb
	strh r0, [r1]
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B87F0
sub_080B87F0: @ 0x080B87F0
	push {lr}
	adds r1, r0, #0
	adds r1, #0x44
	movs r2, #0
	strh r2, [r1]
	adds r0, #0x46
	strh r2, [r0]
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0

	thumb_func_start sub_080B8808
sub_080B8808: @ 0x080B8808
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r6, #0
	adds r5, #0x44
	movs r1, #0
	ldrsh r0, [r5, r1]
	movs r1, #0x48
	bl __modsi3
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080B884C
	adds r0, r6, #0
	adds r0, #0x46
	movs r2, #0
	ldrsh r0, [r0, r2]
	movs r1, #0x18
	bl __divsi3
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, _080B8874 @ =0x02000888
	ldr r4, [r1]
	subs r4, #1
	movs r1, #0xa
	bl __modsi3
	adds r2, r0, #0
	adds r3, r6, #0
	adds r3, #0x2c
	adds r0, r4, #0
	adds r1, r2, #0
	bl sub_080B7E60
_080B884C:
	ldr r0, _080B8878 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #1
	ldrh r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _080B887C
	movs r3, #0
	ldrsh r0, [r5, r3]
	movs r1, #3
	bl __modsi3
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080B887C
	ldrh r0, [r5]
	adds r0, #3
	strh r0, [r5]
	adds r4, r5, #0
	b _080B8888
	.align 2, 0
_080B8874: .4byte 0x02000888
_080B8878: .4byte gpKeySt
_080B887C:
	adds r0, r6, #0
	adds r0, #0x44
	ldrh r1, [r0]
	adds r1, #1
	strh r1, [r0]
	adds r4, r0, #0
_080B8888:
	movs r5, #0
	ldrsh r0, [r4, r5]
	movs r1, #3
	bl __divsi3
	adds r1, r6, #0
	adds r1, #0x46
	movs r3, #0
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xd8
	bne _080B88EA
	ldr r2, _080B88F0 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r5, [r1]
	ands r0, r5
	strb r0, [r1]
	adds r1, #8
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x45
	strb r3, [r0]
	adds r0, #1
	strb r3, [r0]
	ldr r0, _080B88F4 @ =0x0000FFE0
	ldrh r1, [r2, #0x3c]
	ands r0, r1
	ldr r1, _080B88F8 @ =0x0000E0FF
	ands r0, r1
	movs r3, #0xf8
	lsls r3, r3, #5
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2, #0x3c]
	adds r1, r2, #0
	adds r1, #0x3d
	movs r0, #0x20
	ldrb r5, [r1]
	orrs r0, r5
	strb r0, [r1]
	adds r0, r6, #0
	bl Proc_Break
	movs r0, #0
	strh r0, [r4]
_080B88EA:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B88F0: .4byte gDispIo
_080B88F4: .4byte 0x0000FFE0
_080B88F8: .4byte 0x0000E0FF

	thumb_func_start sub_080B88FC
sub_080B88FC: @ 0x080B88FC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x44
	ldrh r2, [r0]
	adds r2, #1
	movs r3, #0
	strh r2, [r0]
	ldr r0, _080B8950 @ =gDispIo
	mov ip, r0
	mov r1, ip
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r5, [r1]
	ands r0, r5
	strb r0, [r1]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x12
	movs r0, #0x10
	subs r0, r0, r2
	adds r1, #8
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r3, [r0]
	cmp r2, #0x10
	bne _080B8948
	adds r0, r4, #0
	bl sub_080AAC88
	ldr r0, _080B8954 @ =sub_080B85C0
	adds r1, r4, #0
	bl sub_080AA20C
	adds r0, r4, #0
	bl Proc_Break
_080B8948:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B8950: .4byte gDispIo
_080B8954: .4byte sub_080B85C0

	thumb_func_start sub_080B8958
sub_080B8958: @ 0x080B8958
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _080B89A4 @ =0x08DB7C54
	movs r1, #2
	adds r2, r4, #0
	bl sub_080B8198
	movs r1, #0
	bl Proc_Goto
	bl sub_080B7C10
	adds r4, #0x44
	movs r2, #0
	movs r3, #0
	ldr r0, _080B89A8 @ =gDispIo
	mov ip, r0
	mov r1, ip
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r5, [r1]
	ands r0, r5
	strb r0, [r1]
	adds r1, #8
	movs r0, #0x10
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	strh r3, [r4]
	movs r0, #0
	bl SetOnHBlankA
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B89A4: .4byte 0x08DB7C54
_080B89A8: .4byte gDispIo

	thumb_func_start sub_080B89AC
sub_080B89AC: @ 0x080B89AC
	push {lr}
	adds r2, r0, #0
	ldr r0, _080B89BC @ =0x08DB7D0C
	movs r1, #0xc
	bl sub_080B8484
	pop {r0}
	bx r0
	.align 2, 0
_080B89BC: .4byte 0x08DB7D0C

	thumb_func_start sub_080B89C0
sub_080B89C0: @ 0x080B89C0
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x44
	ldrh r3, [r4]
	adds r3, #1
	strh r3, [r4]
	movs r0, #1
	ands r0, r3
	cmp r0, #0
	bne _080B89EA
	ldr r0, _080B8A08 @ =0x08DB7C54
	ldr r0, [r0]
	movs r2, #0x80
	lsls r2, r2, #1
	lsls r3, r3, #0x10
	asrs r3, r3, #0x11
	adds r3, #0x20
	movs r1, #0
	bl sub_080010CC
_080B89EA:
	ldrh r4, [r4]
	lsls r0, r4, #0x10
	asrs r0, r0, #0x11
	cmp r0, #0x20
	bne _080B8A02
	adds r1, r5, #0
	adds r1, #0x50
	movs r0, #0
	strb r0, [r1]
	adds r0, r5, #0
	bl Proc_Break
_080B8A02:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B8A08: .4byte 0x08DB7C54

	thumb_func_start sub_080B8A0C
sub_080B8A0C: @ 0x080B8A0C
	push {lr}
	bl sub_080AAC88
	movs r0, #0
	bl SetOnHBlankA
	bl sub_080AB324
	pop {r0}
	bx r0

	thumb_func_start sub_080B8A20
sub_080B8A20: @ 0x080B8A20
	adds r1, r0, #0
	adds r0, #0x51
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080B8A34
	adds r1, #0x50
	movs r0, #1
	strb r0, [r1]
_080B8A34:
	bx lr
	.align 2, 0

	thumb_func_start sub_080B8A38
sub_080B8A38: @ 0x080B8A38
	adds r0, #0x50
	movs r1, #0
	strb r1, [r0]
	bx lr

	thumb_func_start sub_080B8A40
sub_080B8A40: @ 0x080B8A40
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r0, #0
	bl InitBgs
	ldr r2, _080B8A98 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r1, #8
	movs r4, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x45
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	ldr r0, _080B8A9C @ =0x081C8610
	ldr r1, _080B8AA0 @ =0x06000800
	bl sub_08013688
	ldr r0, _080B8AA4 @ =0x081C8AF8
	movs r1, #0xa0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080B8AA8 @ =gBg0Tm
	ldr r1, _080B8AAC @ =0x081C8B18
	ldr r2, _080B8AB0 @ =0x00005040
	bl TmApplyTsa_thm
	movs r0, #1
	bl EnableBgSync
	adds r5, #0x44
	strh r4, [r5]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B8A98: .4byte gDispIo
_080B8A9C: .4byte 0x081C8610
_080B8AA0: .4byte 0x06000800
_080B8AA4: .4byte 0x081C8AF8
_080B8AA8: .4byte gBg0Tm
_080B8AAC: .4byte 0x081C8B18
_080B8AB0: .4byte 0x00005040

	thumb_func_start sub_080B8AB4
sub_080B8AB4: @ 0x080B8AB4
	push {lr}
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x44
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3c
	bne _080B8AD2
	adds r0, r2, #0
	bl Proc_Break
	b _080B8AE6
_080B8AD2:
	ldr r0, _080B8AEC @ =gpKeySt
	ldr r1, [r0]
	movs r0, #8
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080B8AE6
	adds r0, r2, #0
	bl Proc_Break
_080B8AE6:
	pop {r0}
	bx r0
	.align 2, 0
_080B8AEC: .4byte gpKeySt

	thumb_func_start sub_080B8AF0
sub_080B8AF0: @ 0x080B8AF0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r0, #0xc
	bl sub_08013200
	movs r0, #0
	bl InitBgs
	ldr r6, _080B8B60 @ =gDispIo
	adds r1, r6, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r2, #0
	movs r4, #0x10
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r6, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	bl sub_08015A0C
	movs r0, #1
	ldrb r1, [r6, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	orrs r0, r4
	strb r0, [r6, #1]
	movs r1, #1
	rsbs r1, r1, #0
	movs r0, #0
	bl sub_08083C54
	movs r2, #0xa1
	lsls r2, r2, #4
	movs r0, #0x34
	movs r1, #0x20
	adds r3, r5, #0
	bl sub_08084000
	movs r0, #0x90
	bl sub_08083B9C
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B8B60: .4byte gDispIo

	thumb_func_start sub_080B8B64
sub_080B8B64: @ 0x080B8B64
	push {r4, lr}
	adds r4, r0, #0
	bl sub_08009E60
	cmp r0, #2
	bne _080B8B7A
	adds r0, r4, #0
	movs r1, #1
	bl Proc_Goto
	b _080B8B82
_080B8B7A:
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
_080B8B82:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080B8B88
sub_080B8B88: @ 0x080B8B88
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r0, #0
	bl InitBgs
	ldr r6, _080B8BF0 @ =gDispIo
	adds r1, r6, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r2, #0
	movs r4, #0x10
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r6, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	bl sub_08015A0C
	movs r0, #1
	ldrb r1, [r6, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	orrs r0, r4
	strb r0, [r6, #1]
	movs r1, #1
	rsbs r1, r1, #0
	movs r0, #0
	bl sub_08083C54
	ldr r2, _080B8BF4 @ =0x00000A11
	movs r0, #0x40
	movs r1, #0x20
	adds r3, r5, #0
	bl sub_08084000
	movs r0, #0x90
	bl sub_08083B9C
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B8BF0: .4byte gDispIo
_080B8BF4: .4byte 0x00000A11

	thumb_func_start sub_080B8BF8
sub_080B8BF8: @ 0x080B8BF8
	push {lr}
	bl sub_08009E60
	cmp r0, #2
	bne _080B8C0A
	movs r0, #5
	bl sub_08013200
	b _080B8C10
_080B8C0A:
	movs r0, #0xc
	bl sub_08013200
_080B8C10:
	pop {r0}
	bx r0

	thumb_func_start sub_080B8C14
sub_080B8C14: @ 0x080B8C14
	adds r2, r0, #0
	ldr r1, _080B8C1C @ =0x08DB85F4
	b _080B8C2C
	.align 2, 0
_080B8C1C: .4byte 0x08DB85F4
_080B8C20:
	ldrb r0, [r1]
	cmp r0, r2
	bne _080B8C2A
	ldr r0, [r1, #4]
	b _080B8C34
_080B8C2A:
	adds r1, #8
_080B8C2C:
	ldrb r0, [r1]
	cmp r0, #0
	bne _080B8C20
	movs r0, #0
_080B8C34:
	bx lr
	.align 2, 0

	thumb_func_start sub_080B8C38
sub_080B8C38: @ 0x080B8C38
	adds r2, r0, #0
	ldr r1, _080B8C40 @ =0x08DB875C
	b _080B8C50
	.align 2, 0
_080B8C40: .4byte 0x08DB875C
_080B8C44:
	ldrb r0, [r1]
	cmp r0, r2
	bne _080B8C4E
	ldrb r0, [r1, #1]
	b _080B8C58
_080B8C4E:
	adds r1, #4
_080B8C50:
	ldrb r0, [r1]
	cmp r0, #0
	bne _080B8C44
	movs r0, #0
_080B8C58:
	bx lr
	.align 2, 0

	thumb_func_start sub_080B8C5C
sub_080B8C5C: @ 0x080B8C5C
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r0, _080B8CDC @ =0x08DB8118
	ldr r4, [r0]
	adds r0, r5, #0
	bl sub_080B8C38
	adds r7, r0, #0
	cmp r7, #4
	bne _080B8C80
	movs r0, #0x7d
	bl sub_0807A028
	lsls r0, r0, #0x18
	movs r5, #0xf
	cmp r0, #0
	beq _080B8C80
	movs r5, #0x15
_080B8C80:
	lsls r0, r5, #0x18
	lsrs r0, r0, #0x18
	bl GetPidStats
	ldrb r0, [r0, #5]
	lsls r0, r0, #0x1a
	lsrs r6, r0, #0x1a
	adds r0, r6, #0
	adds r1, r4, #0
	movs r2, #1
	bl sub_080AB970
	adds r4, r0, #0
	adds r0, r6, #0
	bl GetROMChapterStruct
	adds r2, r0, #0
	ldr r0, _080B8CE0 @ =gPlaySt
	movs r1, #0
	ldrb r0, [r0, #0x1b]
	cmp r0, #3
	bne _080B8CAE
	movs r1, #2
_080B8CAE:
	adds r0, r2, #0
	adds r0, #0x70
	adds r0, r0, r1
	ldrh r0, [r0]
	bl DecodeMsg
	adds r1, r4, #0
	bl sub_080AB944
	adds r4, r0, #0
	movs r0, #1
	adds r1, r4, #0
	bl sub_080AB964
	adds r4, r0, #0
	cmp r7, #5
	bhi _080B8D54
	lsls r0, r7, #2
	ldr r1, _080B8CE4 @ =_080B8CE8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080B8CDC: .4byte 0x08DB8118
_080B8CE0: .4byte gPlaySt
_080B8CE4: .4byte _080B8CE8
_080B8CE8: @ jump table
	.4byte _080B8D00 @ case 0
	.4byte _080B8D08 @ case 1
	.4byte _080B8D10 @ case 2
	.4byte _080B8D18 @ case 3
	.4byte _080B8D30 @ case 4
	.4byte _080B8D50 @ case 5
_080B8D00:
	ldr r0, _080B8D04 @ =0x0000100F
	b _080B8D3E
	.align 2, 0
_080B8D04: .4byte 0x0000100F
_080B8D08:
	ldr r0, _080B8D0C @ =0x00001010
	b _080B8D3E
	.align 2, 0
_080B8D0C: .4byte 0x00001010
_080B8D10:
	ldr r0, _080B8D14 @ =0x00001011
	b _080B8D3E
	.align 2, 0
_080B8D14: .4byte 0x00001011
_080B8D18:
	adds r0, r6, #0
	subs r0, #0x1d
	cmp r0, #1
	bhi _080B8D28
	ldr r0, _080B8D24 @ =0x00001011
	b _080B8D3E
	.align 2, 0
_080B8D24: .4byte 0x00001011
_080B8D28:
	ldr r0, _080B8D2C @ =0x0000100F
	b _080B8D3E
	.align 2, 0
_080B8D2C: .4byte 0x0000100F
_080B8D30:
	cmp r5, #0x15
	bne _080B8D3C
	ldr r0, _080B8D38 @ =0x00001086
	b _080B8D3E
	.align 2, 0
_080B8D38: .4byte 0x00001086
_080B8D3C:
	ldr r0, _080B8D4C @ =0x00001087
_080B8D3E:
	bl DecodeMsg
	adds r1, r4, #0
	bl sub_080AB944
	b _080B8D54
	.align 2, 0
_080B8D4C: .4byte 0x00001087
_080B8D50:
	movs r0, #0
	b _080B8D58
_080B8D54:
	ldr r0, _080B8D60 @ =0x08DB8118
	ldr r0, [r0]
_080B8D58:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080B8D60: .4byte 0x08DB8118

	thumb_func_start sub_080B8D64
sub_080B8D64: @ 0x080B8D64
	push {lr}
	ldr r0, _080B8D7C @ =0x08615F80
	ldr r1, _080B8D80 @ =0x06005000
	bl sub_08013688
	ldr r0, _080B8D84 @ =0x08421C64
	ldr r1, _080B8D88 @ =0x06008000
	bl sub_08013688
	pop {r0}
	bx r0
	.align 2, 0
_080B8D7C: .4byte 0x08615F80
_080B8D80: .4byte 0x06005000
_080B8D84: .4byte 0x08421C64
_080B8D88: .4byte 0x06008000

	thumb_func_start sub_080B8D8C
sub_080B8D8C: @ 0x080B8D8C
	push {r4, r5, lr}
	ldr r0, _080B8DDC @ =0x08615F40
	movs r1, #0xc0
	lsls r1, r1, #1
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, _080B8DE0 @ =0x08615F00
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, _080B8DE4 @ =gBg3Tm
	ldr r1, _080B8DE8 @ =0x08615A4C
	movs r2, #0xe0
	lsls r2, r2, #8
	bl TmApplyTsa_thm
	ldr r4, _080B8DEC @ =gBg2Tm
	ldr r1, _080B8DF0 @ =0x086167D0
	ldr r5, _080B8DF4 @ =0x0000C280
	adds r0, r4, #0
	adds r2, r5, #0
	bl TmApplyTsa_thm
	movs r0, #0x90
	lsls r0, r0, #3
	adds r4, r4, r0
	ldr r1, _080B8DF8 @ =0x0861684C
	adds r0, r4, #0
	adds r2, r5, #0
	bl TmApplyTsa_thm
	movs r0, #0xc
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B8DDC: .4byte 0x08615F40
_080B8DE0: .4byte 0x08615F00
_080B8DE4: .4byte gBg3Tm
_080B8DE8: .4byte 0x08615A4C
_080B8DEC: .4byte gBg2Tm
_080B8DF0: .4byte 0x086167D0
_080B8DF4: .4byte 0x0000C280
_080B8DF8: .4byte 0x0861684C

	thumb_func_start sub_080B8DFC
sub_080B8DFC: @ 0x080B8DFC
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	sub sp, #0x10
	adds r6, r0, #0
	mov sb, r1
	ldr r0, _080B8E78 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r5, _080B8E7C @ =0x08DB8814
	ldr r0, [r5, #8]
	str r6, [sp]
	movs r1, #2
	add r1, sb
	mov r8, r1
	str r1, [sp, #4]
	movs r4, #0x1e
	str r4, [sp, #8]
	movs r1, #0x10
	str r1, [sp, #0xc]
	movs r1, #0
	movs r2, #1
	movs r3, #2
	bl sub_080A974C
	ldr r0, [r5, #4]
	str r6, [sp]
	mov r1, r8
	str r1, [sp, #4]
	str r4, [sp, #8]
	movs r1, #0x12
	str r1, [sp, #0xc]
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl sub_080A974C
	ldr r0, [r5]
	str r6, [sp]
	mov r1, sb
	str r1, [sp, #4]
	str r4, [sp, #8]
	movs r1, #0x14
	str r1, [sp, #0xc]
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_080A974C
	movs r0, #7
	bl EnableBgSync
	add sp, #0x10
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B8E78: .4byte gBg1Tm
_080B8E7C: .4byte 0x08DB8814

	thumb_func_start sub_080B8E80
sub_080B8E80: @ 0x080B8E80
	push {r4, r5, r6, r7, lr}
	bl ResetText
	ldr r7, _080B8EC8 @ =0x08DB8824
	movs r6, #0x38
	movs r5, #0x28
	movs r4, #1
_080B8E8E:
	ldr r0, [r7]
	adds r0, r0, r5
	movs r1, #0xf
	bl InitText
	ldr r0, [r7]
	adds r0, r0, r6
	movs r1, #0xa
	bl InitText
	adds r6, #8
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _080B8E8E
	movs r4, #0
	ldr r5, _080B8EC8 @ =0x08DB8824
_080B8EB0:
	lsls r1, r4, #3
	ldr r0, [r5]
	adds r0, r0, r1
	movs r1, #0x19
	bl InitText
	adds r4, #1
	cmp r4, #4
	ble _080B8EB0
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B8EC8: .4byte 0x08DB8824

	thumb_func_start sub_080B8ECC
sub_080B8ECC: @ 0x080B8ECC
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0
	bl InitBgs
	bl sub_080069C4
	bl sub_080B8D64
	ldr r3, _080B8F20 @ =gDispIo
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r2, r3, #0
	adds r2, #0x44
	movs r1, #0
	movs r0, #0x10
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x45
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	strh r1, [r4, #0x2e]
	mov r0, sp
	strh r1, [r0]
	adds r1, r4, #0
	adds r1, #0x40
	ldr r2, _080B8F24 @ =0x01000010
	bl CpuSet
	ldr r0, _080B8F28 @ =gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #3
	bne _080B8F30
	ldr r0, _080B8F2C @ =0x08DB85EC
	ldr r0, [r0, #4]
	b _080B8F34
	.align 2, 0
_080B8F20: .4byte gDispIo
_080B8F24: .4byte 0x01000010
_080B8F28: .4byte gPlaySt
_080B8F2C: .4byte 0x08DB85EC
_080B8F30:
	ldr r0, _080B8F44 @ =0x08DB85EC
	ldr r0, [r0]
_080B8F34:
	str r0, [r4, #0x30]
	ldr r0, [r4, #0x30]
	str r0, [r4, #0x34]
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B8F44: .4byte 0x08DB85EC

	thumb_func_start sub_080B8F48
sub_080B8F48: @ 0x080B8F48
	push {lr}
	ldr r0, _080B8F78 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _080B8F7C @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _080B8F80 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	bl sub_0800EC08
	bl sub_080B99F8
	bl sub_080B8D8C
	movs r0, #7
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
_080B8F78: .4byte gBg0Tm
_080B8F7C: .4byte gBg1Tm
_080B8F80: .4byte gBg2Tm

	thumb_func_start sub_080B8F84
sub_080B8F84: @ 0x080B8F84
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #1
_080B8F8A:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _080B8FB2
	ldr r0, [r2]
	cmp r0, #0
	beq _080B8FB2
	ldrb r0, [r0, #4]
	cmp r0, r5
	bne _080B8FB2
	ldr r0, [r2, #0xc]
	movs r1, #0x80
	lsls r1, r1, #9
	ands r0, r1
	cmp r0, #0
	bne _080B8FB8
	adds r0, r2, #0
	b _080B8FBA
_080B8FB2:
	adds r4, #1
	cmp r4, #0x3f
	ble _080B8F8A
_080B8FB8:
	movs r0, #0
_080B8FBA:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_080B8FC0
sub_080B8FC0: @ 0x080B8FC0
	push {r4, r5, lr}
	adds r5, r0, #0
	cmp r5, #0
	bne _080B8FD8
	b _080B8FEC
_080B8FCA:
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_08026AC4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	b _080B8FEE
_080B8FD8:
	movs r4, #0
_080B8FDA:
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_08026B20
	cmp r0, #3
	beq _080B8FCA
	adds r4, #1
	cmp r4, #6
	ble _080B8FDA
_080B8FEC:
	movs r0, #0
_080B8FEE:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_080B8FF4
sub_080B8FF4: @ 0x080B8FF4
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, r1, #0
	ldr r1, [r0]
	ldrb r5, [r1, #4]
	bl sub_080B8FC0
	adds r2, r0, #0
	cmp r2, #0
	bne _080B9028
	b _080B902E
_080B900A:
	movs r0, #1
	b _080B9030
_080B900E:
	ldrb r0, [r4, #1]
	adds r1, r0, #0
	cmp r1, r5
	bne _080B901C
	ldrb r0, [r4, #2]
	cmp r0, r2
	beq _080B900A
_080B901C:
	cmp r1, r2
	bne _080B9026
	ldrb r0, [r4, #2]
	cmp r0, r5
	beq _080B900A
_080B9026:
	adds r4, #8
_080B9028:
	ldrb r0, [r4, #1]
	cmp r0, #0
	bne _080B900E
_080B902E:
	movs r0, #0
_080B9030:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_080B9038
sub_080B9038: @ 0x080B9038
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	movs r0, #0
	str r0, [r4, #0x3c]
	str r0, [r4, #0x38]
_080B9042:
	ldr r5, [r4, #0x30]
	ldrb r0, [r5]
	cmp r0, #0
	bne _080B9054
	adds r0, r4, #0
	movs r1, #0x64
	bl Proc_Goto
	b _080B9166
_080B9054:
	ldrb r0, [r5, #1]
	lsls r1, r0, #0x18
	lsrs r2, r1, #0x18
	mov ip, r2
	lsrs r1, r1, #0x1d
	lsls r1, r1, #2
	adds r1, r1, r4
	movs r7, #0x1f
	adds r2, r7, #0
	ands r2, r0
	ldr r3, [r1, #0x40]
	lsrs r3, r2
	movs r6, #1
	ands r3, r6
	cmp r3, #0
	bne _080B915E
	ldrb r2, [r5, #2]
	lsls r0, r2, #0x18
	cmp r0, #0
	beq _080B9090
	lsrs r0, r0, #0x1d
	lsls r0, r0, #2
	adds r0, r0, r4
	adds r1, r7, #0
	ands r1, r2
	ldr r0, [r0, #0x40]
	lsrs r0, r1
	ands r0, r6
	cmp r0, #0
	bne _080B915E
_080B9090:
	mov r0, ip
	cmp r0, #0xcd
	bne _080B90AC
	ldr r1, _080B90A8 @ =gPlaySt
	adds r1, #0x2b
	adds r0, r6, #0
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _080B915E
	str r3, [r4, #0x38]
	b _080B9124
	.align 2, 0
_080B90A8: .4byte gPlaySt
_080B90AC:
	ldrb r0, [r5, #1]
	bl sub_080B8F84
	adds r1, r0, #0
	str r1, [r4, #0x38]
	cmp r1, #0
	beq _080B915E
	ldr r2, [r4, #0x30]
	ldrb r0, [r2]
	cmp r0, #2
	beq _080B90E4
	cmp r0, #2
	bgt _080B90CC
	cmp r0, #1
	beq _080B90D6
	b _080B9124
_080B90CC:
	cmp r0, #3
	beq _080B9100
	cmp r0, #4
	beq _080B9118
	b _080B9124
_080B90D6:
	ldr r0, [r4, #0x34]
	bl sub_080B8FF4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080B915E
	b _080B9124
_080B90E4:
	ldrb r0, [r2, #2]
	bl sub_080B8F84
	str r0, [r4, #0x3c]
	cmp r0, #0
	beq _080B915E
	ldr r0, [r4, #0x38]
	bl sub_080B8FC0
	ldr r1, [r4, #0x30]
	ldrb r1, [r1, #2]
	cmp r0, r1
	bne _080B915E
	b _080B9124
_080B9100:
	movs r0, #1
	bl GetUnitFromCharId
	bl sub_080B8FC0
	cmp r0, #0x25
	beq _080B915E
	ldr r0, [r4, #0x30]
	ldrb r0, [r0, #2]
	bl sub_080B8F84
	b _080B911E
_080B9118:
	movs r0, #0xf
	bl GetUnitFromCharId
_080B911E:
	str r0, [r4, #0x3c]
	cmp r0, #0
	beq _080B915E
_080B9124:
	ldr r3, [r4, #0x30]
	ldrb r1, [r3, #1]
	lsrs r2, r1, #5
	lsls r2, r2, #2
	adds r2, r2, r4
	movs r6, #0x1f
	adds r0, r6, #0
	ands r0, r1
	movs r5, #1
	adds r1, r5, #0
	lsls r1, r0
	ldr r0, [r2, #0x40]
	orrs r0, r1
	str r0, [r2, #0x40]
	ldrb r1, [r3, #2]
	lsls r2, r1, #0x18
	cmp r2, #0
	beq _080B9166
	lsrs r2, r2, #0x1d
	lsls r2, r2, #2
	adds r2, r2, r4
	adds r0, r6, #0
	ands r0, r1
	adds r1, r5, #0
	lsls r1, r0
	ldr r0, [r2, #0x40]
	orrs r0, r1
	str r0, [r2, #0x40]
	b _080B9166
_080B915E:
	ldr r0, [r4, #0x30]
	adds r0, #8
	str r0, [r4, #0x30]
	b _080B9042
_080B9166:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B916C
sub_080B916C: @ 0x080B916C
	push {lr}
	adds r3, r0, #0
	ldr r0, [r3, #0x30]
	ldrb r0, [r0]
	subs r0, #1
	cmp r0, #4
	bhi _080B91BE
	lsls r0, r0, #2
	ldr r1, _080B9184 @ =_080B9188
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080B9184: .4byte _080B9188
_080B9188: @ jump table
	.4byte _080B919C @ case 0
	.4byte _080B91A8 @ case 1
	.4byte _080B91A8 @ case 2
	.4byte _080B91B4 @ case 3
	.4byte _080B919C @ case 4
_080B919C:
	ldr r0, [r3, #0x30]
	ldr r1, [r3, #0x38]
	adds r2, r3, #0
	bl sub_080B94EC
	b _080B91BE
_080B91A8:
	ldr r0, [r3, #0x30]
	ldr r1, [r3, #0x38]
	ldr r2, [r3, #0x3c]
	bl sub_080B97EC
	b _080B91BE
_080B91B4:
	ldr r0, [r3, #0x30]
	ldr r1, [r3, #0x38]
	ldr r2, [r3, #0x3c]
	bl sub_080B97EC
_080B91BE:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B91C4
sub_080B91C4: @ 0x080B91C4
	push {lr}
	adds r3, r0, #0
	ldr r0, [r3, #0x30]
	ldr r1, [r3, #0x38]
	ldr r2, [r3, #0x3c]
	bl sub_080B99D8
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B91D8
sub_080B91D8: @ 0x080B91D8
	push {lr}
	movs r0, #0
	bl InitBgs
	bl sub_0800EC08
	bl sub_080B99F8
	ldr r3, _080B9238 @ =gDispIo
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0xc0
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x46
	movs r2, #0x10
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _080B923C @ =0x0000FFE0
	ldrh r1, [r3, #0x3c]
	ands r0, r1
	movs r1, #0x1f
	orrs r0, r1
	ldr r1, _080B9240 @ =0x0000E0FF
	ands r0, r1
	strh r0, [r3, #0x3c]
	movs r0, #1
	ldrb r1, [r3, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	orrs r0, r2
	strb r0, [r3, #1]
	pop {r0}
	bx r0
	.align 2, 0
_080B9238: .4byte gDispIo
_080B923C: .4byte 0x0000FFE0
_080B9240: .4byte 0x0000E0FF

	thumb_func_start sub_080B9244
sub_080B9244: @ 0x080B9244
	push {lr}
	movs r0, #0xb
	bl sub_080034C8
	pop {r0}
	bx r0

	thumb_func_start sub_080B9250
sub_080B9250: @ 0x080B9250
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0x30]
	adds r1, r0, #0
	adds r1, #8
	str r1, [r2, #0x30]
	ldrb r0, [r0, #8]
	cmp r0, #0
	bne _080B926A
	adds r0, r2, #0
	movs r1, #0x64
	bl Proc_Goto
_080B926A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B9270
sub_080B9270: @ 0x080B9270
	push {lr}
	adds r1, r0, #0
	ldr r0, _080B9280 @ =0x08DB8828
	bl Proc_StartBlocking
	pop {r0}
	bx r0
	.align 2, 0
_080B9280: .4byte 0x08DB8828

	thumb_func_start sub_080B9284
sub_080B9284: @ 0x080B9284
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	movs r6, #0
_080B928A:
	lsls r1, r6, #2
	adds r0, r4, #0
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r0, [r0]
	cmp r0, #0
	beq _080B92D8
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl GetPidStats
	adds r2, r0, #0
	lsls r3, r6, #1
	adds r1, r4, #0
	adds r1, #0x3c
	adds r1, r1, r3
	ldrh r5, [r2, #0xc]
	lsls r0, r5, #0x12
	lsrs r0, r0, #0x14
	strh r0, [r1]
	adds r0, r4, #0
	adds r0, #0x40
	adds r5, r0, r3
	movs r0, #3
	ldrb r1, [r2, #0xc]
	ands r0, r1
	lsls r0, r0, #8
	ldrb r1, [r2, #0xb]
	orrs r0, r1
	ldr r1, _080B92E4 @ =0x000003E7
	cmp r0, r1
	ble _080B92CC
	adds r0, r1, #0
_080B92CC:
	strh r0, [r5]
	adds r0, r4, #0
	adds r0, #0x44
	adds r0, r0, r3
	ldrb r1, [r2]
	strh r1, [r0]
_080B92D8:
	adds r6, #1
	cmp r6, #1
	ble _080B928A
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B92E4: .4byte 0x000003E7

	thumb_func_start sub_080B92E8
sub_080B92E8: @ 0x080B92E8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	mov r8, r0
	bl sub_080B8E80
	mov r0, r8
	bl sub_080B9284
	ldr r7, _080B9348 @ =0x08DB8814
	ldr r0, [r7]
	movs r1, #0
	bl TmFill
	ldr r0, [r7, #4]
	movs r1, #0
	bl TmFill
	ldr r0, [r7, #8]
	movs r1, #0
	bl TmFill
	ldr r0, [r7, #8]
	ldr r1, _080B934C @ =0x08616D7C
	ldr r4, _080B9350 @ =0x0000C280
	adds r2, r4, #0
	bl TmApplyTsa_thm
	ldr r0, [r7, #4]
	ldr r1, _080B9354 @ =0x086168C8
	adds r2, r4, #0
	bl TmApplyTsa_thm
	mov r1, r8
	ldr r0, [r1, #0x38]
	ldrb r4, [r0, #1]
	cmp r4, #0xcd
	bne _080B93A8
	bl sub_080B7480
	cmp r0, #3
	ble _080B935C
	ldr r0, _080B9358 @ =0x00001069
	bl DecodeMsg
	b _080B9372
	.align 2, 0
_080B9348: .4byte 0x08DB8814
_080B934C: .4byte 0x08616D7C
_080B9350: .4byte 0x0000C280
_080B9354: .4byte 0x086168C8
_080B9358: .4byte 0x00001069
_080B935C:
	cmp r0, #1
	ble _080B936C
	ldr r0, _080B9368 @ =0x0000106B
	bl DecodeMsg
	b _080B9372
	.align 2, 0
_080B9368: .4byte 0x0000106B
_080B936C:
	ldr r0, _080B939C @ =0x0000106D
	bl DecodeMsg
_080B9372:
	bl sub_08013374
	adds r6, r0, #0
	movs r0, #0x78
	adds r1, r6, #0
	bl GetStringTextCenteredPos
	adds r3, r0, #0
	ldr r0, _080B93A0 @ =0x08DB8824
	ldr r0, [r0]
	adds r0, #0x28
	ldr r1, _080B93A4 @ =0x08DB8814
	ldr r1, [r1]
	adds r1, #0xc2
	movs r2, #0
	str r2, [sp]
	str r6, [sp, #4]
	bl PutDrawText
	b _080B945A
	.align 2, 0
_080B939C: .4byte 0x0000106D
_080B93A0: .4byte 0x08DB8824
_080B93A4: .4byte 0x08DB8814
_080B93A8:
	ldrb r0, [r0, #1]
	bl sub_080B8C14
	bl DecodeMsg
	adds r6, r0, #0
	movs r0, #0x78
	adds r1, r6, #0
	bl GetStringTextCenteredPos
	adds r3, r0, #0
	ldr r5, _080B948C @ =0x08DB8824
	ldr r0, [r5]
	adds r0, #0x28
	ldr r1, [r7]
	adds r1, #0xc2
	movs r4, #0
	str r4, [sp]
	str r6, [sp, #4]
	movs r2, #0
	bl PutDrawText
	ldr r0, [r5]
	adds r0, #0x40
	ldr r1, [r7]
	adds r1, #0x68
	str r4, [sp]
	ldr r2, _080B9490 @ =0x08622C5C
	str r2, [sp, #4]
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	ldr r0, [r7]
	adds r0, #0x66
	mov r1, r8
	ldrh r2, [r1, #0x3c]
	movs r1, #2
	bl sub_08006068
	ldr r0, [r7]
	adds r0, #0x6e
	mov r1, r8
	adds r1, #0x40
	ldrh r2, [r1]
	movs r1, #2
	bl sub_08006068
	ldr r0, [r7]
	adds r0, #0x76
	mov r1, r8
	adds r1, #0x44
	ldrh r2, [r1]
	movs r1, #2
	bl sub_08006068
	ldr r2, _080B9494 @ =0x08C4C158
	mov r4, r8
	ldr r0, [r4, #0x38]
	ldrb r1, [r0, #1]
	subs r1, #1
	movs r0, #0x34
	muls r0, r1, r0
	adds r0, r0, r2
	ldrh r1, [r0, #6]
	movs r2, #0xd0
	lsls r2, r2, #1
	ldr r0, _080B9498 @ =0x00000502
	str r0, [sp]
	movs r0, #0
	movs r3, #0x38
	bl sub_08007A5C
	ldr r0, [r4, #0x2c]
	ldr r0, [r0, #0xc]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	beq _080B945A
	movs r0, #0x16
	bl sub_08013C18
	movs r3, #0x80
	lsls r3, r3, #0xf
	movs r0, #0xc0
	movs r1, #0xc0
	movs r2, #0xc0
	bl sub_08013C48
_080B945A:
	movs r2, #0
	mov r0, r8
	str r2, [r0, #0x34]
	ldr r3, _080B949C @ =gDispIo
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r4, [r1]
	ands r0, r4
	strb r0, [r1]
	adds r1, #8
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B948C: .4byte 0x08DB8824
_080B9490: .4byte 0x08622C5C
_080B9494: .4byte 0x08C4C158
_080B9498: .4byte 0x00000502
_080B949C: .4byte gDispIo

	thumb_func_start sub_080B94A0
sub_080B94A0: @ 0x080B94A0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r6, #0x1e
	ldr r0, _080B94E4 @ =0x08DB88D8
	ldr r1, [r5, #0x34]
	adds r0, r1, r0
	ldrb r4, [r0]
	adds r1, #1
	str r1, [r5, #0x34]
	ldr r0, [r5, #0x38]
	ldrb r0, [r0, #1]
	cmp r0, #0xcd
	beq _080B94CC
	subs r1, r6, r4
	lsls r1, r1, #3
	adds r1, #0xb0
	ldr r0, _080B94E8 @ =0x000001FF
	ands r1, r0
	movs r0, #0
	movs r2, #0x38
	bl sub_08007B80
_080B94CC:
	subs r0, r6, r4
	movs r1, #0
	bl sub_080B8DFC
	cmp r4, #0x1e
	bne _080B94DE
	adds r0, r5, #0
	bl Proc_Break
_080B94DE:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B94E4: .4byte 0x08DB88D8
_080B94E8: .4byte 0x000001FF

	thumb_func_start sub_080B94EC
sub_080B94EC: @ 0x080B94EC
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	adds r1, r2, #0
	ldr r0, _080B9508 @ =0x08DB88EC
	bl Proc_StartBlocking
	str r4, [r0, #0x2c]
	movs r1, #0
	str r1, [r0, #0x30]
	str r5, [r0, #0x38]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B9508: .4byte 0x08DB88EC

	thumb_func_start sub_080B950C
sub_080B950C: @ 0x080B950C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	mov sb, r0
	bl sub_080B8E80
	mov r0, sb
	bl sub_080B9284
	ldr r4, _080B96B4 @ =0x08DB8814
	ldr r0, [r4]
	movs r1, #0
	bl TmFill
	ldr r0, [r4, #4]
	movs r1, #0
	bl TmFill
	ldr r0, [r4, #8]
	movs r1, #0
	bl TmFill
	ldr r0, [r4, #8]
	ldr r1, _080B96B8 @ =0x08617B20
	ldr r5, _080B96BC @ =0x0000C280
	adds r2, r5, #0
	bl TmApplyTsa_thm
	ldr r0, [r4, #4]
	ldr r1, _080B96C0 @ =0x0861766C
	adds r2, r5, #0
	bl TmApplyTsa_thm
	mov r1, sb
	ldr r0, [r1, #0x38]
	ldrb r0, [r0, #1]
	bl sub_080B8C14
	bl DecodeMsg
	adds r7, r0, #0
	movs r0, #0x78
	adds r1, r7, #0
	bl GetStringTextCenteredPos
	adds r3, r0, #0
	ldr r6, _080B96C4 @ =0x08DB8824
	ldr r0, [r6]
	adds r0, #0x28
	ldr r1, [r4]
	adds r1, #0xc2
	movs r5, #0
	str r5, [sp]
	str r7, [sp, #4]
	movs r2, #0
	bl PutDrawText
	ldr r0, [r6]
	adds r0, #0x38
	ldr r1, [r4]
	ldr r2, _080B96C8 @ =0x00000446
	adds r1, r1, r2
	str r5, [sp]
	ldr r3, _080B96CC @ =0x08622C5C
	mov r8, r3
	str r3, [sp, #4]
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	ldr r0, [r4]
	ldr r1, _080B96D0 @ =0x00000444
	adds r0, r0, r1
	mov r3, sb
	ldrh r2, [r3, #0x3c]
	movs r1, #2
	bl sub_08006068
	ldr r0, [r4]
	ldr r1, _080B96D4 @ =0x0000044C
	adds r0, r0, r1
	mov r1, sb
	adds r1, #0x40
	ldrh r2, [r1]
	movs r1, #2
	bl sub_08006068
	ldr r0, [r4]
	ldr r2, _080B96D8 @ =0x00000454
	adds r0, r0, r2
	mov r1, sb
	adds r1, #0x44
	ldrh r2, [r1]
	movs r1, #2
	bl sub_08006068
	mov r3, sb
	ldr r0, [r3, #0x38]
	ldrb r0, [r0, #2]
	bl sub_080B8C14
	bl DecodeMsg
	adds r7, r0, #0
	movs r0, #0x78
	adds r1, r7, #0
	bl GetStringTextCenteredPos
	adds r3, r0, #0
	ldr r0, [r6]
	adds r0, #0x30
	ldr r1, [r4]
	ldr r2, _080B96DC @ =0x0000045C
	adds r1, r1, r2
	str r5, [sp]
	str r7, [sp, #4]
	movs r2, #0
	bl PutDrawText
	ldr r0, [r6]
	adds r0, #0x40
	ldr r1, [r4]
	adds r1, #0x68
	str r5, [sp]
	mov r3, r8
	str r3, [sp, #4]
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	ldr r0, [r4]
	adds r0, #0x66
	mov r1, sb
	ldrh r2, [r1, #0x3e]
	movs r1, #2
	bl sub_08006068
	ldr r0, [r4]
	adds r0, #0x6e
	mov r1, sb
	adds r1, #0x42
	ldrh r2, [r1]
	movs r1, #2
	bl sub_08006068
	ldr r0, [r4]
	adds r0, #0x76
	mov r1, sb
	adds r1, #0x46
	ldrh r2, [r1]
	movs r1, #2
	bl sub_08006068
	mov r2, sb
	str r5, [r2, #0x34]
	ldr r2, _080B96E0 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r1, #8
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x45
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
	ldr r5, _080B96E4 @ =0x08C4C158
	mov r1, sb
	ldr r0, [r1, #0x38]
	ldrb r0, [r0, #1]
	subs r0, #1
	movs r4, #0x34
	muls r0, r4, r0
	adds r0, r0, r5
	ldrh r1, [r0, #6]
	movs r2, #0x98
	lsls r2, r2, #1
	ldr r0, _080B96E8 @ =0x00000503
	str r0, [sp]
	movs r0, #0
	movs r3, #0x30
	bl sub_08007A5C
	mov r2, sb
	ldr r0, [r2, #0x38]
	ldrb r0, [r0, #2]
	subs r0, #1
	muls r0, r4, r0
	adds r0, r0, r5
	ldrh r1, [r0, #6]
	movs r2, #0xd0
	lsls r2, r2, #1
	ldr r0, _080B96EC @ =0x00000502
	str r0, [sp]
	movs r0, #1
	movs r3, #0x30
	bl sub_08007A5C
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B96B4: .4byte 0x08DB8814
_080B96B8: .4byte 0x08617B20
_080B96BC: .4byte 0x0000C280
_080B96C0: .4byte 0x0861766C
_080B96C4: .4byte 0x08DB8824
_080B96C8: .4byte 0x00000446
_080B96CC: .4byte 0x08622C5C
_080B96D0: .4byte 0x00000444
_080B96D4: .4byte 0x0000044C
_080B96D8: .4byte 0x00000454
_080B96DC: .4byte 0x0000045C
_080B96E0: .4byte gDispIo
_080B96E4: .4byte 0x08C4C158
_080B96E8: .4byte 0x00000503
_080B96EC: .4byte 0x00000502

	thumb_func_start sub_080B96F0
sub_080B96F0: @ 0x080B96F0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	movs r5, #0x1e
	ldr r0, _080B9748 @ =0x08DB88D8
	ldr r1, [r7, #0x34]
	adds r0, r1, r0
	ldrb r0, [r0]
	mov r8, r0
	adds r1, #1
	str r1, [r7, #0x34]
	subs r5, r5, r0
	lsls r4, r5, #3
	adds r1, r4, #0
	adds r1, #0x40
	ldr r6, _080B974C @ =0x000001FF
	ands r1, r6
	movs r0, #0
	movs r2, #0x30
	bl sub_08007B80
	adds r4, #0xb0
	ands r4, r6
	movs r0, #1
	adds r1, r4, #0
	movs r2, #0x30
	bl sub_08007B80
	adds r0, r5, #0
	movs r1, #0
	bl sub_080B8DFC
	mov r0, r8
	cmp r0, #0x1e
	bne _080B973E
	adds r0, r7, #0
	bl Proc_Break
_080B973E:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B9748: .4byte 0x08DB88D8
_080B974C: .4byte 0x000001FF

	thumb_func_start sub_080B9750
sub_080B9750: @ 0x080B9750
	movs r3, #0
	str r3, [r0, #0x34]
	ldr r0, _080B9794 @ =gDispIo
	mov ip, r0
	mov r2, ip
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	mov r1, ip
	adds r1, #0x44
	movs r0, #0x10
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x45
	strb r3, [r0]
	adds r0, #1
	strb r3, [r0]
	ldr r0, _080B9798 @ =0x0000FFE0
	mov r2, ip
	ldrh r2, [r2, #0x3c]
	ands r0, r2
	ldr r1, _080B979C @ =0x0000E0FF
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	mov r1, ip
	strh r0, [r1, #0x3c]
	bx lr
	.align 2, 0
_080B9794: .4byte gDispIo
_080B9798: .4byte 0x0000FFE0
_080B979C: .4byte 0x0000E0FF

	thumb_func_start sub_080B97A0
sub_080B97A0: @ 0x080B97A0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x34]
	asrs r3, r0, #2
	adds r0, #1
	str r0, [r4, #0x34]
	ldr r0, _080B97E8 @ =gDispIo
	mov ip, r0
	mov r2, ip
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	movs r0, #0x10
	subs r0, r0, r3
	mov r1, ip
	adds r1, #0x44
	movs r2, #0
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x45
	strb r3, [r0]
	adds r0, #1
	strb r2, [r0]
	cmp r3, #8
	bne _080B97E0
	adds r0, r4, #0
	bl Proc_Break
_080B97E0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B97E8: .4byte gDispIo

	thumb_func_start sub_080B97EC
sub_080B97EC: @ 0x080B97EC
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	adds r1, r3, #0
	ldr r0, _080B9808 @ =0x08DB890C
	bl Proc_StartBlocking
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	str r6, [r0, #0x38]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B9808: .4byte 0x08DB890C

	thumb_func_start sub_080B980C
sub_080B980C: @ 0x080B980C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	ldr r4, _080B9870 @ =0x08DB8824
	ldr r0, [r4]
	str r0, [r6, #0x48]
	movs r1, #4
	str r1, [r6, #0x40]
	str r1, [r6, #0x3c]
	movs r1, #0
	bl Text_SetCursor
	ldr r0, [r6, #0x48]
	movs r1, #0
	bl Text_SetColor
	movs r5, #0
	mov r8, r4
	movs r7, #0xc0
	lsls r7, r7, #1
_080B9836:
	lsls r4, r5, #3
	mov r1, r8
	ldr r0, [r1]
	adds r0, r0, r4
	bl ClearText
	mov r1, r8
	ldr r0, [r1]
	adds r0, r0, r4
	ldr r1, _080B9874 @ =0x02022C64
	adds r1, r7, r1
	bl PutText
	adds r7, #0x80
	adds r5, #1
	cmp r5, #4
	ble _080B9836
	movs r0, #1
	bl EnableBgSync
	ldr r2, [r6, #0x2c]
	ldrb r1, [r2]
	cmp r1, #4
	beq _080B98A8
	cmp r1, #4
	bgt _080B9878
	cmp r1, #3
	beq _080B98A4
	b _080B98CA
	.align 2, 0
_080B9870: .4byte 0x08DB8824
_080B9874: .4byte 0x02022C64
_080B9878:
	cmp r1, #5
	bne _080B98CA
	bl sub_080B7480
	adds r5, r0, #0
	cmp r5, #3
	ble _080B9890
	ldr r0, _080B988C @ =0x0000106A
	b _080B98E8
	.align 2, 0
_080B988C: .4byte 0x0000106A
_080B9890:
	cmp r5, #1
	ble _080B989C
	ldr r0, _080B9898 @ =0x0000106C
	b _080B98E8
	.align 2, 0
_080B9898: .4byte 0x0000106C
_080B989C:
	ldr r0, _080B98A0 @ =0x0000106E
	b _080B98E8
	.align 2, 0
_080B98A0: .4byte 0x0000106E
_080B98A4:
	ldr r0, [r2, #4]
	b _080B98E8
_080B98A8:
	ldr r3, [r6, #0x30]
	ldr r0, [r3, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _080B98BC
	ldr r0, [r6, #0x34]
	ldr r0, [r0, #0xc]
	ands r0, r1
	cmp r0, #0
	beq _080B98C6
_080B98BC:
	ldr r0, [r3]
	ldrb r0, [r0, #4]
	bl sub_080B8C5C
	b _080B98EC
_080B98C6:
	ldr r0, [r2, #4]
	b _080B98E8
_080B98CA:
	ldr r2, [r6, #0x30]
	ldr r0, [r2, #0xc]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	beq _080B98E4
	ldr r0, [r2]
	ldrb r0, [r0, #4]
	bl sub_080B8C5C
	str r0, [r6, #0x44]
	cmp r0, #0
	bne _080B98EE
_080B98E4:
	ldr r0, [r6, #0x2c]
	ldr r0, [r0, #4]
_080B98E8:
	bl DecodeMsg
_080B98EC:
	str r0, [r6, #0x44]
_080B98EE:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080B98F8
sub_080B98F8: @ 0x080B98F8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080B9924 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #8
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080B9928
	bl sub_0809F9D0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B9928
	adds r0, r4, #0
	bl Proc_Break
	ldr r0, [r4, #0x14]
	movs r1, #0x64
	bl Proc_Goto
	b _080B99D0
	.align 2, 0
_080B9924: .4byte gpKeySt
_080B9928:
	ldr r0, [r4, #0x3c]
	cmp r0, #0
	beq _080B9932
	subs r0, #1
	b _080B99CE
_080B9932:
	movs r0, #0
	bl SetTextFont
	ldr r0, [r4, #0x44]
	ldrb r0, [r0]
	cmp r0, #7
	bhi _080B99C2
	lsls r0, r0, #2
	ldr r1, _080B994C @ =_080B9950
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080B994C: .4byte _080B9950
_080B9950: @ jump table
	.4byte _080B9970 @ case 0
	.4byte _080B9978 @ case 1
	.4byte _080B99C2 @ case 2
	.4byte _080B99C2 @ case 3
	.4byte _080B999A @ case 4
	.4byte _080B99A4 @ case 5
	.4byte _080B99AE @ case 6
	.4byte _080B99B8 @ case 7
_080B9970:
	adds r0, r4, #0
	bl Proc_Break
	b _080B99CC
_080B9978:
	ldr r0, [r4, #0x44]
	adds r0, #1
	str r0, [r4, #0x44]
	ldr r0, [r4, #0x48]
	adds r0, #8
	str r0, [r4, #0x48]
	ldr r1, [r4, #0x3c]
	adds r1, #0x10
	str r1, [r4, #0x3c]
	movs r1, #0
	bl Text_SetCursor
	ldr r0, [r4, #0x48]
	movs r1, #0
	bl Text_SetColor
	b _080B99CC
_080B999A:
	movs r0, #8
	str r0, [r4, #0x3c]
	ldr r0, [r4, #0x44]
	adds r0, #1
	b _080B99CA
_080B99A4:
	movs r0, #0x10
	str r0, [r4, #0x3c]
	ldr r0, [r4, #0x44]
	adds r0, #1
	b _080B99CA
_080B99AE:
	movs r0, #0x20
	str r0, [r4, #0x3c]
	ldr r0, [r4, #0x44]
	adds r0, #1
	b _080B99CA
_080B99B8:
	movs r0, #0x40
	str r0, [r4, #0x3c]
	ldr r0, [r4, #0x44]
	adds r0, #1
	b _080B99CA
_080B99C2:
	ldr r0, [r4, #0x48]
	ldr r1, [r4, #0x44]
	bl Text_DrawCharacter
_080B99CA:
	str r0, [r4, #0x44]
_080B99CC:
	ldr r0, [r4, #0x40]
_080B99CE:
	str r0, [r4, #0x3c]
_080B99D0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B99D8
sub_080B99D8: @ 0x080B99D8
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r1, r3, #0
	ldr r0, _080B99F4 @ =0x08DB8944
	bl Proc_StartBlocking
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	str r6, [r0, #0x34]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B99F4: .4byte 0x08DB8944

	thumb_func_start sub_080B99F8
sub_080B99F8: @ 0x080B99F8
	push {lr}
	ldr r0, _080B9A04 @ =0x08DB8944
	bl sub_08004748
	pop {r0}
	bx r0
	.align 2, 0
_080B9A04: .4byte 0x08DB8944

	thumb_func_start sub_080B9A08
sub_080B9A08: @ 0x080B9A08
	push {lr}
	ldr r0, _080B9A34 @ =0x08618410
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080B9A38 @ =0x08618430
	ldr r1, _080B9A3C @ =0x06001000
	bl sub_08013688
	ldr r0, _080B9A40 @ =gBg2Tm
	ldr r1, _080B9A44 @ =0x0861882C
	ldr r2, _080B9A48 @ =0x0000E080
	bl TmApplyTsa_thm
	movs r0, #4
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
_080B9A34: .4byte 0x08618410
_080B9A38: .4byte 0x08618430
_080B9A3C: .4byte 0x06001000
_080B9A40: .4byte gBg2Tm
_080B9A44: .4byte 0x0861882C
_080B9A48: .4byte 0x0000E080

	thumb_func_start sub_080B9A4C
sub_080B9A4C: @ 0x080B9A4C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x4c
	movs r0, #0
	strh r0, [r1]
	str r0, [r4, #0x58]
	bl InitBgs
	movs r0, #0x86
	bl sub_0807A0C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B9A94
	ldr r0, _080B9A90 @ =gBg3Tm
	movs r1, #0x80
	lsls r1, r1, #8
	movs r2, #0x40
	str r2, [sp]
	movs r2, #1
	movs r3, #7
	bl sub_080B7980
	movs r0, #8
	bl EnableBgSync
	adds r0, r4, #0
	movs r1, #1
	bl Proc_Goto
	b _080B9A98
	.align 2, 0
_080B9A90: .4byte gBg3Tm
_080B9A94:
	bl sub_080B9A08
_080B9A98:
	ldr r3, _080B9AC0 @ =gDispIo
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r2, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B9AC0: .4byte gDispIo

	thumb_func_start sub_080B9AC4
sub_080B9AC4: @ 0x080B9AC4
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0x58]
	adds r0, #1
	str r0, [r2, #0x58]
	ldr r0, _080B9AE4 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #9
	ldrh r3, [r1, #8]
	ands r0, r3
	cmp r0, #0
	beq _080B9AE8
	adds r0, r2, #0
	bl Proc_Break
	b _080B9B18
	.align 2, 0
_080B9AE4: .4byte gpKeySt
_080B9AE8:
	movs r0, #4
	ldrh r1, [r1, #4]
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	cmp r1, #0
	beq _080B9B12
	adds r1, r2, #0
	adds r1, #0x4c
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x77
	ble _080B9B18
	adds r0, r2, #0
	movs r1, #2
	bl Proc_Goto
	b _080B9B18
_080B9B12:
	adds r0, r2, #0
	adds r0, #0x4c
	strh r1, [r0]
_080B9B18:
	pop {r0}
	bx r0

	thumb_func_start sub_080B9B1C
sub_080B9B1C: @ 0x080B9B1C
	push {r4, lr}
	ldr r1, _080B9B74 @ =gDispIo
	mov ip, r1
	mov r3, ip
	adds r3, #0x3c
	movs r1, #0x3f
	ldrb r2, [r3]
	ands r1, r2
	movs r2, #0x40
	orrs r1, r2
	strb r1, [r3]
	mov r1, ip
	adds r1, #0x44
	movs r3, #0
	strb r3, [r1]
	mov r2, ip
	adds r2, #0x45
	movs r1, #0x10
	strb r1, [r2]
	mov r1, ip
	adds r1, #0x46
	strb r3, [r1]
	ldr r1, _080B9B78 @ =0x0000FFE0
	mov r4, ip
	ldrh r4, [r4, #0x3c]
	ands r1, r4
	movs r2, #4
	orrs r1, r2
	ldr r2, _080B9B7C @ =0x0000E0FF
	ands r1, r2
	movs r4, #0x80
	lsls r4, r4, #4
	adds r2, r4, #0
	orrs r1, r2
	mov r2, ip
	strh r1, [r2, #0x3c]
	adds r0, #0x4c
	strh r3, [r0]
	bl sub_080B9A08
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B9B74: .4byte gDispIo
_080B9B78: .4byte 0x0000FFE0
_080B9B7C: .4byte 0x0000E0FF

	thumb_func_start sub_080B9B80
sub_080B9B80: @ 0x080B9B80
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r6, #0
	adds r4, #0x4c
	ldrh r2, [r4]
	adds r0, r2, #1
	strh r0, [r4]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x12
	ldr r0, _080B9BD0 @ =gDispIo
	mov ip, r0
	mov r3, ip
	adds r3, #0x3c
	movs r0, #0x3f
	ldrb r1, [r3]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r3]
	mov r0, ip
	adds r0, #0x44
	movs r5, #0
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x46
	strb r5, [r0]
	cmp r2, #0x10
	bne _080B9BC8
	adds r0, r6, #0
	bl Proc_Break
	strh r5, [r4]
_080B9BC8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B9BD0: .4byte gDispIo

	thumb_func_start sub_080B9BD4
sub_080B9BD4: @ 0x080B9BD4
	ldr r2, _080B9C04 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0xc0
	ldrb r3, [r1]
	orrs r0, r3
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x46
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _080B9C08 @ =0x0000FFE0
	ldrh r1, [r2, #0x3c]
	ands r0, r1
	movs r1, #0x1f
	orrs r0, r1
	strh r0, [r2, #0x3c]
	bx lr
	.align 2, 0
_080B9C04: .4byte gDispIo
_080B9C08: .4byte 0x0000FFE0

	thumb_func_start sub_080B9C0C
sub_080B9C0C: @ 0x080B9C0C
	push {lr}
	adds r1, r0, #0
	ldr r0, _080B9C1C @ =0x08DB8964
	bl Proc_StartBlocking
	pop {r0}
	bx r0
	.align 2, 0
_080B9C1C: .4byte 0x08DB8964

	thumb_func_start sub_080B9C20
sub_080B9C20: @ 0x080B9C20
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, _080B9C70 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	ldr r0, _080B9C74 @ =0x08407E9C
	movs r1, #0xa0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080B9C78 @ =0x08406218
	ldr r1, _080B9C7C @ =0x06004000
	bl sub_08013688
	ldr r0, _080B9C80 @ =gBg2Tm
	ldr r1, _080B9C84 @ =0x081BD6E4
	movs r2, #0xa4
	lsls r2, r2, #7
	bl TmApplyTsa_thm
	movs r0, #4
	bl EnableBgSync
	adds r4, #0x4c
	movs r0, #0
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B9C70: .4byte gDispIo
_080B9C74: .4byte 0x08407E9C
_080B9C78: .4byte 0x08406218
_080B9C7C: .4byte 0x06004000
_080B9C80: .4byte gBg2Tm
_080B9C84: .4byte 0x081BD6E4

	thumb_func_start sub_080B9C88
sub_080B9C88: @ 0x080B9C88
	push {lr}
	adds r0, #0x4c
	ldrh r1, [r0]
	adds r1, #1
	strh r1, [r0]
	movs r1, #0
	ldrsh r2, [r0, r1]
	lsls r0, r2, #1
	adds r0, r0, r2
	cmp r0, #0
	bge _080B9CA0
	adds r0, #7
_080B9CA0:
	lsls r0, r0, #0xd
	lsrs r1, r0, #0x10
	adds r0, r2, #0
	cmp r0, #0
	bge _080B9CAC
	adds r0, #3
_080B9CAC:
	lsls r2, r0, #0xe
	lsrs r2, r2, #0x10
	movs r0, #2
	bl SetBgOffset
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080B9CBC
sub_080B9CBC: @ 0x080B9CBC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r4, r0, #0
	movs r5, #0
	str r5, [r4, #0x30]
	movs r0, #0x20
	str r0, [r4, #0x34]
	adds r0, r4, #0
	adds r0, #0x39
	strb r5, [r0]
	str r5, [r4, #0x2c]
	bl GetNextChapterStatsSlot
	adds r4, #0x38
	strb r0, [r4]
	ldr r7, _080B9D94 @ =gDispIo
	movs r4, #2
	rsbs r4, r4, #0
	adds r0, r4, #0
	ldrb r1, [r7, #1]
	ands r0, r1
	movs r2, #3
	rsbs r2, r2, #0
	mov sl, r2
	ands r0, r2
	movs r1, #5
	rsbs r1, r1, #0
	mov sb, r1
	ands r0, r1
	subs r2, #6
	mov r8, r2
	ands r0, r2
	movs r6, #0x11
	rsbs r6, r6, #0
	ands r0, r6
	strb r0, [r7, #1]
	movs r0, #0
	bl SetOnHBlankA
	movs r0, #0
	bl InitBgs
	ldrb r0, [r7, #1]
	ands r4, r0
	mov r1, sl
	ands r4, r1
	mov r2, sb
	ands r4, r2
	mov r0, r8
	ands r4, r0
	ands r4, r6
	strb r4, [r7, #1]
	adds r1, r7, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x45
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
	bl ResetText
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r7, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r7, #1]
	ldr r0, _080B9D98 @ =0x0861A420
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, _080B9D9C @ =0x086B7400
	ldr r1, _080B9DA0 @ =0x06008000
	bl sub_08013688
	ldr r0, _080B9DA4 @ =gBg3Tm
	ldr r1, _080B9DA8 @ =0x0861A460
	movs r2, #0xe0
	lsls r2, r2, #8
	bl TmApplyTsa_thm
	movs r0, #8
	bl EnableBgSync
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B9D94: .4byte gDispIo
_080B9D98: .4byte 0x0861A420
_080B9D9C: .4byte 0x086B7400
_080B9DA0: .4byte 0x06008000
_080B9DA4: .4byte gBg3Tm
_080B9DA8: .4byte 0x0861A460

	thumb_func_start sub_080B9DAC
sub_080B9DAC: @ 0x080B9DAC
	push {r4, r5, r6, lr}
	ldr r2, _080B9E8C @ =0x0000FF78
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	ldr r0, _080B9E90 @ =gDispIo
	mov ip, r0
	movs r0, #0x20
	mov r1, ip
	ldrb r1, [r1, #1]
	orrs r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r2, ip
	strb r0, [r2, #1]
	mov r1, ip
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x18
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x88
	strb r0, [r1]
	adds r2, #0x34
	movs r0, #1
	ldrb r1, [r2]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r5, #4
	orrs r0, r5
	movs r4, #8
	orrs r0, r4
	movs r3, #0x10
	orrs r0, r3
	strb r0, [r2]
	adds r2, #2
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	orrs r0, r5
	orrs r0, r4
	orrs r0, r3
	strb r0, [r2]
	movs r4, #0
	ldr r6, _080B9E94 @ =0x08DB8B60
	movs r5, #0x48
_080B9E24:
	lsls r1, r4, #3
	ldr r0, [r6]
	adds r0, r0, r1
	movs r1, #3
	bl InitText
	ldr r0, [r6]
	adds r0, r0, r5
	movs r1, #9
	bl InitText
	adds r5, #8
	adds r4, #1
	cmp r4, #8
	ble _080B9E24
	ldr r5, _080B9E94 @ =0x08DB8B60
	ldr r0, [r5]
	adds r0, #0x90
	movs r1, #3
	bl InitText
	ldr r0, [r5]
	adds r0, #0x98
	movs r1, #2
	bl InitText
	ldr r4, [r5]
	adds r4, #0x90
	ldr r0, _080B9E98 @ =0x00001181
	bl DecodeMsg
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	ldr r0, [r5]
	adds r0, #0x98
	movs r1, #3
	bl Text_SetColor
	ldr r4, [r5]
	adds r4, #0x98
	ldr r0, _080B9E9C @ =0x0000117A
	bl DecodeMsg
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B9E8C: .4byte 0x0000FF78
_080B9E90: .4byte gDispIo
_080B9E94: .4byte 0x08DB8B60
_080B9E98: .4byte 0x00001181
_080B9E9C: .4byte 0x0000117A

	thumb_func_start sub_080B9EA0
sub_080B9EA0: @ 0x080B9EA0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	str r0, [sp, #8]
	adds r4, r1, #0
	movs r0, #0
	str r0, [sp, #0x10]
	adds r0, r4, #0
	movs r1, #9
	bl __modsi3
	str r0, [sp, #0xc]
	lsls r7, r4, #1
	movs r0, #0x1f
	ands r7, r0
	lsls r6, r7, #5
	lsls r0, r7, #6
	ldr r1, _080B9F50 @ =gBg1Tm
	mov sl, r1
	add r0, sl
	movs r1, #0x1f
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #2
	bl EnableBgSync
	ldr r2, _080B9F54 @ =0x08DB8B60
	mov sb, r2
	ldr r3, [sp, #0xc]
	lsls r4, r3, #3
	ldr r0, [r2]
	adds r0, r0, r4
	bl ClearText
	adds r5, r4, #0
	adds r5, #0x48
	mov r1, sb
	ldr r0, [r1]
	adds r0, r0, r5
	bl ClearText
	movs r0, #1
	rsbs r0, r0, #0
	ldr r2, [sp, #8]
	cmp r2, r0
	bne _080B9F5C
	bl sub_080A0628
	adds r4, r0, #0
	mov r3, sb
	ldr r0, [r3]
	adds r0, r0, r5
	adds r1, r6, #0
	adds r1, #0xb
	lsls r1, r1, #1
	add r1, sl
	ldr r2, [sp, #0x10]
	str r2, [sp]
	ldr r2, _080B9F58 @ =0x08622C70
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	adds r0, r6, #0
	adds r0, #0x15
	lsls r0, r0, #1
	add r0, sl
	movs r1, #2
	adds r2, r4, #0
	bl sub_08006068
	mov r3, sb
	ldr r0, [r3]
	adds r0, #0x90
	adds r1, r6, #0
	adds r1, #0x16
	lsls r1, r1, #1
	add r1, sl
	bl PutText
	movs r0, #0
	b _080BA140
	.align 2, 0
_080B9F50: .4byte gBg1Tm
_080B9F54: .4byte 0x08DB8B60
_080B9F58: .4byte 0x08622C70
_080B9F5C:
	ldr r0, [sp, #8]
	cmp r0, #0
	bne _080B9F64
	b _080BA13E
_080B9F64:
	ldr r0, [r0]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	mov r8, r0
	bl GetROMChapterStruct
	adds r1, r0, #0
	movs r2, #0
	ldr r0, _080B9F98 @ =gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #3
	bne _080B9F7E
	movs r2, #1
_080B9F7E:
	adds r0, r1, #0
	adds r0, #0x80
	adds r0, r0, r2
	ldrb r0, [r0]
	lsrs r2, r0, #1
	mov r1, r8
	cmp r1, #0x19
	beq _080B9FE8
	cmp r1, #0x19
	bgt _080B9F9C
	cmp r1, #0
	beq _080B9FC8
	b _080BA012
	.align 2, 0
_080B9F98: .4byte gPlaySt
_080B9F9C:
	mov r3, r8
	cmp r3, #0x2f
	bgt _080BA012
	cmp r3, #0x2e
	blt _080BA012
	ldr r0, _080B9FC4 @ =0x0000117D
	bl DecodeMsg
	adds r2, r0, #0
	mov r1, sb
	ldr r0, [r1]
	adds r0, r0, r4
	adds r1, r6, #5
	lsls r1, r1, #1
	add r1, sl
	ldr r3, [sp, #0x10]
	str r3, [sp]
	str r2, [sp, #4]
	b _080BA068
	.align 2, 0
_080B9FC4: .4byte 0x0000117D
_080B9FC8:
	ldr r0, _080B9FE4 @ =0x0000117E
	bl DecodeMsg
	adds r2, r0, #0
	mov r1, sb
	ldr r0, [r1]
	adds r0, r0, r4
	adds r1, r6, #5
	lsls r1, r1, #1
	add r1, sl
	ldr r3, [sp, #0x10]
	str r3, [sp]
	str r2, [sp, #4]
	b _080BA068
	.align 2, 0
_080B9FE4: .4byte 0x0000117E
_080B9FE8:
	adds r0, r6, #5
	lsls r0, r0, #1
	add r0, sl
	movs r1, #2
	bl sub_08006068
	movs r0, #0x8c
	lsls r0, r0, #5
	bl DecodeMsg
	adds r2, r0, #0
	mov r1, sb
	ldr r0, [r1]
	adds r0, r0, r4
	adds r1, r6, #6
	lsls r1, r1, #1
	add r1, sl
	ldr r3, [sp, #0x10]
	str r3, [sp]
	str r2, [sp, #4]
	b _080BA068
_080BA012:
	lsls r4, r7, #5
	subs r0, r4, #1
	adds r0, #6
	lsls r0, r0, #1
	ldr r7, _080BA074 @ =gBg1Tm
	adds r0, r0, r7
	movs r1, #2
	bl sub_08006068
	mov r0, r8
	bl GetROMChapterStruct
	adds r1, r0, #0
	movs r2, #0
	ldr r0, _080BA078 @ =gPlaySt
	adds r6, r4, #0
	ldrb r0, [r0, #0x1b]
	cmp r0, #3
	bne _080BA03A
	movs r2, #1
_080BA03A:
	adds r0, r1, #0
	adds r0, #0x80
	adds r0, r0, r2
	movs r5, #1
	ldrb r0, [r0]
	ands r5, r0
	cmp r5, #0
	beq _080BA084
	ldr r0, _080BA07C @ =0x0000117F
	bl DecodeMsg
	adds r3, r0, #0
	ldr r0, _080BA080 @ =0x08DB8B60
	ldr r1, [sp, #0xc]
	lsls r4, r1, #3
	ldr r0, [r0]
	adds r0, r0, r4
	adds r1, r6, #6
	lsls r1, r1, #1
	adds r1, r1, r7
	movs r2, #0
	str r2, [sp]
	str r3, [sp, #4]
_080BA068:
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	b _080BA0A8
	.align 2, 0
_080BA074: .4byte gBg1Tm
_080BA078: .4byte gPlaySt
_080BA07C: .4byte 0x0000117F
_080BA080: .4byte 0x08DB8B60
_080BA084:
	ldr r0, _080BA0C8 @ =0x0000117B
	bl DecodeMsg
	adds r2, r0, #0
	ldr r0, _080BA0CC @ =0x08DB8B60
	ldr r3, [sp, #0xc]
	lsls r4, r3, #3
	ldr r0, [r0]
	adds r0, r0, r4
	adds r1, r6, #6
	lsls r1, r1, #1
	adds r1, r1, r7
	str r5, [sp]
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0
	bl PutDrawText
_080BA0A8:
	mov r0, r8
	cmp r0, #0x2f
	bgt _080BA0D0
	cmp r0, #0x2e
	blt _080BA0D0
	ldr r1, [sp, #8]
	ldm r1!, {r0}
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x17
	ldr r0, [r1]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x17
	adds r7, r7, r0
	movs r2, #1
	str r2, [sp, #0x10]
	b _080BA0D8
	.align 2, 0
_080BA0C8: .4byte 0x0000117B
_080BA0CC: .4byte 0x08DB8B60
_080BA0D0:
	ldr r3, [sp, #8]
	ldr r0, [r3]
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x17
_080BA0D8:
	mov r0, r8
	bl GetROMChapterStruct
	adds r2, r0, #0
	ldr r0, _080BA150 @ =gPlaySt
	movs r1, #0
	ldrb r0, [r0, #0x1b]
	cmp r0, #3
	bne _080BA0EC
	movs r1, #2
_080BA0EC:
	adds r0, r2, #0
	adds r0, #0x70
	adds r0, r0, r1
	ldrh r0, [r0]
	bl DecodeMsg
	adds r3, r0, #0
	ldr r5, _080BA154 @ =0x08DB8B60
	adds r1, r4, #0
	adds r1, #0x48
	ldr r0, [r5]
	adds r0, r0, r1
	adds r1, r6, #4
	adds r1, #6
	lsls r1, r1, #1
	ldr r4, _080BA158 @ =gBg1Tm
	adds r1, r1, r4
	movs r2, #0
	str r2, [sp]
	str r3, [sp, #4]
	movs r3, #0
	bl PutDrawText
	adds r0, r6, #0
	adds r0, #0xf
	adds r0, #6
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r1, #2
	adds r2, r7, #0
	bl sub_08006068
	ldr r0, [r5]
	adds r0, #0x90
	adds r1, r6, #0
	adds r1, #0x10
	adds r1, #6
	lsls r1, r1, #1
	adds r1, r1, r4
	bl PutText
_080BA13E:
	ldr r0, [sp, #0x10]
_080BA140:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080BA150: .4byte gPlaySt
_080BA154: .4byte 0x08DB8B60
_080BA158: .4byte gBg1Tm

	thumb_func_start sub_080BA15C
sub_080BA15C: @ 0x080BA15C
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x30]
	asrs r5, r0, #6
	adds r2, r5, #0
	subs r2, #0x88
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	movs r0, #0xf
	ands r0, r5
	cmp r0, #0
	bne _080BA1DE
	adds r0, r4, #0
	adds r0, #0x39
	ldrb r1, [r0]
	adds r2, r5, #0
	adds r5, r0, #0
	cmp r2, #0
	bge _080BA18C
	adds r2, #0xf
_080BA18C:
	asrs r0, r2, #4
	cmp r1, r0
	bne _080BA1DE
	adds r0, r4, #0
	adds r0, #0x38
	ldrb r2, [r0]
	ldr r0, [r4, #0x2c]
	cmp r0, r2
	blt _080BA1C2
	subs r0, r0, r2
	cmp r0, #1
	bne _080BA1AE
	movs r0, #1
	rsbs r0, r0, #0
	bl sub_080B9EA0
	b _080BA1D2
_080BA1AE:
	cmp r0, #2
	ble _080BA1BA
	adds r0, r4, #0
	bl Proc_Break
	b _080BA1D2
_080BA1BA:
	movs r0, #0
	bl sub_080B9EA0
	b _080BA1D2
_080BA1C2:
	bl GetChapterStats
	ldrb r1, [r5]
	bl sub_080B9EA0
	ldr r1, [r4, #0x2c]
	adds r1, r1, r0
	str r1, [r4, #0x2c]
_080BA1D2:
	ldr r0, [r4, #0x2c]
	adds r0, #1
	str r0, [r4, #0x2c]
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
_080BA1DE:
	ldr r0, _080BA200 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #1
	ldrh r1, [r1, #4]
	ands r0, r1
	ldr r1, [r4, #0x34]
	cmp r0, #0
	beq _080BA1F4
	ldr r0, [r4, #0x30]
	adds r0, r0, r1
	str r0, [r4, #0x30]
_080BA1F4:
	ldr r0, [r4, #0x30]
	adds r0, r0, r1
	str r0, [r4, #0x30]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BA200: .4byte gpKeySt

	thumb_func_start sub_080BA204
sub_080BA204: @ 0x080BA204
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	str r0, [sp, #4]
	ldr r3, _080BA3F4 @ =0x08DB8A2C
	ldr r0, _080BA3F8 @ =0x00009480
	str r0, [sp]
	movs r0, #2
	movs r1, #0x18
	movs r2, #0x14
	bl sub_080068C4
	ldr r3, _080BA3FC @ =0x08DB8AA0
	movs r0, #0xc9
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #2
	movs r1, #0x10
	movs r2, #0x80
	bl sub_080068C4
	ldr r1, _080BA400 @ =gPlaySt
	movs r0, #0x80
	ldrb r1, [r1, #0x14]
	ands r0, r1
	cmp r0, #0
	bne _080BA242
	b _080BA42C
_080BA242:
	ldr r3, _080BA404 @ =0x08DB8A4C
	ldr r4, _080BA408 @ =0x00008480
	str r4, [sp]
	movs r0, #2
	movs r1, #0x10
	movs r2, #0x38
	bl sub_080068C4
	ldr r3, _080BA40C @ =0x08DB8A5A
	str r4, [sp]
	movs r0, #2
	movs r1, #0x80
	movs r2, #0x38
	bl sub_080068C4
	ldr r3, _080BA410 @ =0x08DB8A76
	str r4, [sp]
	movs r0, #2
	movs r1, #0x10
	movs r2, #0x58
	bl sub_080068C4
	ldr r3, _080BA414 @ =0x08DB8A92
	movs r0, #0xe9
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #2
	movs r1, #0x80
	movs r2, #0x58
	bl sub_080068C4
	movs r7, #0
	ldr r0, [sp, #4]
	adds r0, #0x4c
	mov sl, r0
	ldr r1, _080BA418 @ =gSinLut
	mov sb, r1
	mov r8, sl
_080BA28E:
	mov r2, r8
	ldrh r2, [r2]
	cmp r2, #0x10
	bls _080BA33C
	ldr r4, _080BA41C @ =0x080C0F18
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	mov r2, r8
	ldrh r1, [r2]
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	mov r4, sb
	movs r1, #0
	ldrsh r0, [r4, r1]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	movs r1, #0x80
	lsls r1, r1, #1
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	mov r4, r8
	ldrh r1, [r4]
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	ldr r1, _080BA41C @ =0x080C0F18
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	movs r1, #0x80
	lsls r1, r1, #1
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	adds r0, r7, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	movs r0, #1
	ands r0, r7
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #4
	lsls r0, r7, #9
	adds r0, #0x50
	adds r1, r1, r0
	asrs r2, r7, #1
	lsls r2, r2, #5
	movs r4, #0x98
	lsls r4, r4, #1
	adds r2, r2, r4
	ldr r3, _080BA420 @ =0x08DB8B10
	ldr r0, [sp, #4]
	adds r0, #0x40
	adds r0, r0, r7
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	adds r0, r7, #0
	adds r0, #0xa
	movs r4, #0xf
	ands r0, r4
	lsls r0, r0, #0xc
	movs r4, #0x90
	lsls r4, r4, #3
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #2
	bl sub_080068C4
_080BA33C:
	movs r0, #2
	add r8, r0
	adds r7, #1
	cmp r7, #2
	ble _080BA28E
	lsls r0, r7, #1
	add sl, r0
	mov r1, sl
	ldrh r1, [r1]
	cmp r1, #0x10
	bhi _080BA354
	b _080BA5FE
_080BA354:
	ldr r4, _080BA418 @ =gSinLut
	movs r2, #0x80
	adds r2, r2, r4
	mov sb, r2
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	mov r2, sl
	ldrh r1, [r2]
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov r8, r2
	mov r1, r8
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	mov r2, sl
	ldrh r1, [r2]
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, sb
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	adds r0, r7, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	movs r0, #1
	ands r0, r7
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #4
	lsls r0, r7, #9
	adds r0, #0x50
	adds r1, r1, r0
	asrs r2, r7, #1
	lsls r2, r2, #5
	movs r4, #0x98
	lsls r4, r4, #1
	adds r2, r2, r4
	ldr r3, _080BA424 @ =0x08DB8B28
	ldr r0, [sp, #4]
	adds r0, #0x40
	adds r0, r0, r7
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	ldr r0, _080BA428 @ =0x0000F480
	str r0, [sp]
	movs r0, #2
	bl sub_080068C4
	b _080BA5FE
	.align 2, 0
_080BA3F4: .4byte 0x08DB8A2C
_080BA3F8: .4byte 0x00009480
_080BA3FC: .4byte 0x08DB8AA0
_080BA400: .4byte gPlaySt
_080BA404: .4byte 0x08DB8A4C
_080BA408: .4byte 0x00008480
_080BA40C: .4byte 0x08DB8A5A
_080BA410: .4byte 0x08DB8A76
_080BA414: .4byte 0x08DB8A92
_080BA418: .4byte gSinLut
_080BA41C: .4byte 0x080C0F18
_080BA420: .4byte 0x08DB8B10
_080BA424: .4byte 0x08DB8B28
_080BA428: .4byte 0x0000F480
_080BA42C:
	ldr r3, _080BA610 @ =0x08DB8A4C
	ldr r4, _080BA614 @ =0x00008480
	str r4, [sp]
	movs r0, #2
	movs r1, #0x10
	movs r2, #0x30
	bl sub_080068C4
	ldr r3, _080BA618 @ =0x08DB8A5A
	str r4, [sp]
	movs r0, #2
	movs r1, #0x80
	movs r2, #0x30
	bl sub_080068C4
	ldr r3, _080BA61C @ =0x08DB8A84
	str r4, [sp]
	movs r0, #2
	movs r1, #0x10
	movs r2, #0x48
	bl sub_080068C4
	ldr r3, _080BA620 @ =0x08DB8A68
	str r4, [sp]
	movs r0, #2
	movs r1, #0x80
	movs r2, #0x48
	bl sub_080068C4
	ldr r3, _080BA624 @ =0x08DB8A76
	str r4, [sp]
	movs r0, #2
	movs r1, #0x10
	movs r2, #0x60
	bl sub_080068C4
	ldr r3, _080BA628 @ =0x08DB8A92
	movs r0, #0xe9
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #2
	movs r1, #0x80
	movs r2, #0x60
	bl sub_080068C4
	movs r7, #0
	ldr r0, [sp, #4]
	adds r0, #0x4c
	mov sl, r0
	ldr r1, _080BA62C @ =gSinLut
	mov sb, r1
	mov r8, sl
_080BA494:
	mov r2, r8
	ldrh r2, [r2]
	cmp r2, #0x10
	bls _080BA546
	ldr r4, _080BA630 @ =0x080C0F18
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	mov r2, r8
	ldrh r1, [r2]
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	mov r4, sb
	movs r1, #0
	ldrsh r0, [r4, r1]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	movs r1, #0x80
	lsls r1, r1, #1
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	mov r4, r8
	ldrh r1, [r4]
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	ldr r1, _080BA630 @ =0x080C0F18
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	movs r1, #0x80
	lsls r1, r1, #1
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	adds r0, r7, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	movs r0, #1
	ands r0, r7
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #4
	lsls r0, r7, #9
	adds r0, #0x50
	adds r1, r1, r0
	asrs r0, r7, #1
	lsls r2, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #3
	movs r4, #0x94
	lsls r4, r4, #1
	adds r2, r2, r4
	ldr r3, _080BA634 @ =0x08DB8B10
	ldr r0, [sp, #4]
	adds r0, #0x40
	adds r0, r0, r7
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	adds r0, r7, #0
	adds r0, #0xa
	movs r4, #0xf
	ands r0, r4
	lsls r0, r0, #0xc
	movs r4, #0x90
	lsls r4, r4, #3
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #2
	bl sub_080068C4
_080BA546:
	movs r0, #2
	add r8, r0
	adds r7, #1
	cmp r7, #4
	ble _080BA494
	lsls r0, r7, #1
	add sl, r0
	mov r1, sl
	ldrh r1, [r1]
	cmp r1, #0x10
	bls _080BA5FE
	ldr r4, _080BA62C @ =gSinLut
	movs r2, #0x80
	adds r2, r2, r4
	mov sb, r2
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	mov r2, sl
	ldrh r1, [r2]
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov r8, r2
	mov r1, r8
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	mov r2, sl
	ldrh r1, [r2]
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, sb
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	adds r0, r7, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	movs r0, #1
	ands r0, r7
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #4
	lsls r0, r7, #9
	adds r0, #0x50
	adds r1, r1, r0
	asrs r0, r7, #1
	lsls r2, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #3
	movs r4, #0x94
	lsls r4, r4, #1
	adds r2, r2, r4
	ldr r3, _080BA638 @ =0x08DB8B28
	ldr r0, [sp, #4]
	adds r0, #0x40
	adds r0, r0, r7
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	ldr r0, _080BA63C @ =0x0000F480
	str r0, [sp]
	movs r0, #2
	bl sub_080068C4
_080BA5FE:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BA610: .4byte 0x08DB8A4C
_080BA614: .4byte 0x00008480
_080BA618: .4byte 0x08DB8A5A
_080BA61C: .4byte 0x08DB8A84
_080BA620: .4byte 0x08DB8A68
_080BA624: .4byte 0x08DB8A76
_080BA628: .4byte 0x08DB8A92
_080BA62C: .4byte gSinLut
_080BA630: .4byte 0x080C0F18
_080BA634: .4byte 0x08DB8B10
_080BA638: .4byte 0x08DB8B28
_080BA63C: .4byte 0x0000F480

	thumb_func_start sub_080BA640
sub_080BA640: @ 0x080BA640
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r5, r0, #0
	movs r0, #0
	str r0, [r5, #0x30]
	str r0, [r5, #0x2c]
	bl sub_0804A9F8
	ldr r0, _080BA71C @ =gBg1Tm
	ldr r1, _080BA720 @ =0x0861A914
	movs r2, #0x80
	lsls r2, r2, #5
	bl TmApplyTsa_thm
	ldr r0, _080BA724 @ =0x08618CE0
	movs r1, #0xc0
	lsls r1, r1, #2
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, _080BA728 @ =0x08618D20
	ldr r1, _080BA72C @ =0x06011000
	bl sub_08013688
	movs r4, #0
	movs r0, #0xa
	add r0, sp
	mov sb, r0
	add r1, sp, #0xc
	mov sl, r1
_080BA684:
	adds r1, r4, #0
	adds r1, #0x1a
	lsls r1, r1, #5
	ldr r0, _080BA730 @ =0x0861A360
	movs r2, #0x20
	bl ApplyPaletteExt
	adds r0, r4, #1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #4
	bls _080BA684
	ldr r0, _080BA734 @ =0x0861A3E0
	movs r1, #0xf8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080BA738 @ =0x0861A380
	movs r1, #0xb0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080BA73C @ =0x0861A3A0
	movs r1, #0xb8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #0xf
	bl EnableBgSync
	ldr r4, _080BA740 @ =gPlaySt
	movs r0, #0x80
	ldrb r6, [r4, #0x14]
	ands r0, r6
	cmp r0, #0
	beq _080BA744
	bl GetGameTime
	ldr r1, [r4, #4]
	subs r0, r0, r1
	add r1, sp, #8
	mov r2, sb
	mov r3, sl
	bl FormatTime
	bl sub_080B74C0
	adds r6, r5, #0
	adds r6, #0x3a
	strb r0, [r6]
	bl sub_080B7540
	adds r4, r5, #0
	adds r4, #0x3b
	strb r0, [r4]
	bl sub_080B776C
	adds r2, r5, #0
	adds r2, #0x3c
	strb r0, [r2]
	ldrb r0, [r6]
	ldrb r1, [r4]
	ldrb r2, [r2]
	bl sub_080B7448
	adds r1, r5, #0
	adds r1, #0x3d
	strb r0, [r1]
	movs r0, #0x29
	movs r1, #0
	bl sub_0800376C
	b _080BA7AA
	.align 2, 0
_080BA71C: .4byte gBg1Tm
_080BA720: .4byte 0x0861A914
_080BA724: .4byte 0x08618CE0
_080BA728: .4byte 0x08618D20
_080BA72C: .4byte 0x06011000
_080BA730: .4byte 0x0861A360
_080BA734: .4byte 0x0861A3E0
_080BA738: .4byte 0x0861A380
_080BA73C: .4byte 0x0861A3A0
_080BA740: .4byte gPlaySt
_080BA744:
	bl sub_080A05FC
	add r1, sp, #8
	mov r2, sb
	mov r3, sl
	bl FormatTime
	bl sub_080B7100
	movs r7, #0x3a
	adds r7, r7, r5
	mov r8, r7
	strb r0, [r7]
	bl sub_080B71F8
	adds r7, r5, #0
	adds r7, #0x3b
	strb r0, [r7]
	bl sub_080B735C
	adds r4, r5, #0
	adds r4, #0x3c
	strb r0, [r4]
	bl sub_080B7230
	adds r6, r5, #0
	adds r6, #0x3d
	strb r0, [r6]
	bl sub_080B7328
	movs r1, #0x3e
	adds r1, r1, r5
	mov ip, r1
	strb r0, [r1]
	mov r1, r8
	ldrb r0, [r1]
	ldrb r1, [r7]
	ldrb r2, [r4]
	ldrb r3, [r6]
	mov r6, ip
	ldrb r4, [r6]
	str r4, [sp]
	bl sub_080B73FC
	adds r1, r5, #0
	adds r1, #0x3f
	strb r0, [r1]
	movs r0, #0x29
	movs r1, #0
	bl sub_0800376C
_080BA7AA:
	ldr r4, _080BA850 @ =0x020230A0
	adds r0, r4, #0
	adds r0, #0xa
	add r1, sp, #8
	ldrh r2, [r1]
	movs r1, #2
	bl sub_08006068
	adds r0, r4, #0
	adds r0, #0xc
	movs r1, #2
	movs r2, #0x20
	bl sub_08005FEC
	adds r0, r4, #0
	adds r0, #0x10
	mov r7, sb
	ldrh r2, [r7]
	movs r1, #2
	bl sub_0800625C
	adds r0, r4, #0
	adds r0, #0x12
	movs r1, #2
	movs r2, #0x20
	bl sub_08005FEC
	adds r0, r4, #0
	adds r0, #0x16
	mov r1, sl
	ldrh r2, [r1]
	movs r1, #2
	bl sub_0800625C
	movs r4, #0
	adds r3, r5, #0
	adds r3, #0x4c
	movs r6, #0
	mov r8, r6
	movs r7, #0
	mov sb, r7
	adds r2, r5, #0
	adds r2, #0x46
	movs r6, #1
	adds r1, r5, #0
	adds r1, #0x40
_080BA806:
	lsls r0, r4, #1
	adds r0, r3, r0
	mov r7, sb
	strh r7, [r0]
	adds r0, r2, r4
	strb r6, [r0]
	adds r0, r1, r4
	mov r7, r8
	strb r7, [r0]
	adds r0, r4, #1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #5
	bls _080BA806
	ldr r0, _080BA854 @ =sub_080BA204
	adds r1, r5, #0
	bl sub_080AA20C
	ldr r0, _080BA858 @ =0x0861A3A0
	adds r1, r0, #0
	adds r1, #0x20
	movs r2, #1
	str r2, [sp]
	str r5, [sp, #4]
	movs r2, #2
	movs r3, #0x17
	bl sub_080AB7F4
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BA850: .4byte 0x020230A0
_080BA854: .4byte sub_080BA204
_080BA858: .4byte 0x0861A3A0

	thumb_func_start sub_080BA85C
sub_080BA85C: @ 0x080BA85C
	push {r4, r5, lr}
	adds r1, r0, #0
	ldr r0, _080BA8CC @ =gDispIo
	mov ip, r0
	mov r3, ip
	adds r3, #0x3c
	movs r0, #0x3f
	ldrb r2, [r3]
	ands r0, r2
	movs r2, #0x40
	orrs r0, r2
	strb r0, [r3]
	mov r2, ip
	adds r2, #0x44
	movs r3, #0
	movs r5, #8
	movs r0, #8
	strb r0, [r2]
	adds r2, #1
	movs r4, #0x10
	movs r0, #0x10
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x46
	strb r3, [r0]
	ldr r0, _080BA8D0 @ =0x0000FFE0
	mov r3, ip
	ldrh r3, [r3, #0x3c]
	ands r0, r3
	movs r2, #4
	orrs r0, r2
	ldr r2, _080BA8D4 @ =0x0000E0FF
	ands r0, r2
	movs r3, #0xf8
	lsls r3, r3, #5
	adds r2, r3, #0
	orrs r0, r2
	mov r2, ip
	strh r0, [r2, #0x3c]
	movs r0, #1
	ldrb r3, [r2, #1]
	orrs r0, r3
	movs r2, #2
	orrs r0, r2
	movs r2, #4
	orrs r0, r2
	orrs r0, r5
	orrs r0, r4
	mov r2, ip
	strb r0, [r2, #1]
	ldr r0, _080BA8D8 @ =0x08DB8B40
	bl Proc_Start
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BA8CC: .4byte gDispIo
_080BA8D0: .4byte 0x0000FFE0
_080BA8D4: .4byte 0x0000E0FF
_080BA8D8: .4byte 0x08DB8B40

	thumb_func_start sub_080BA8DC
sub_080BA8DC: @ 0x080BA8DC
	push {r4, lr}
	sub sp, #0x14
	adds r4, r0, #0
	ldr r0, [r4, #0x58]
	adds r0, #0x10
	bl sub_08013C18
	movs r2, #0x80
	lsls r2, r2, #1
	movs r3, #0x80
	lsls r3, r3, #2
	str r3, [sp]
	str r3, [sp, #4]
	ldr r1, [r4, #0x58]
	adds r1, #0x10
	movs r0, #1
	lsls r0, r1
	str r0, [sp, #8]
	movs r0, #0x10
	str r0, [sp, #0xc]
	str r4, [sp, #0x10]
	adds r0, r2, #0
	adds r1, r2, #0
	bl sub_08013EF8
	add sp, #0x14
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080BA918
sub_080BA918: @ 0x080BA918
	push {r4, lr}
	sub sp, #0x14
	movs r2, #0x80
	lsls r2, r2, #2
	movs r3, #0x80
	lsls r3, r3, #1
	str r3, [sp]
	str r3, [sp, #4]
	ldr r4, [r0, #0x58]
	adds r4, #0x10
	movs r1, #1
	lsls r1, r4
	str r1, [sp, #8]
	movs r1, #0x10
	str r1, [sp, #0xc]
	str r0, [sp, #0x10]
	adds r0, r2, #0
	adds r1, r2, #0
	bl sub_08013EF8
	add sp, #0x14
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080BA948
sub_080BA948: @ 0x080BA948
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080BA95C @ =0x08DB8B64
	bl Proc_Start
	str r4, [r0, #0x58]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BA95C: .4byte 0x08DB8B64

	thumb_func_start sub_080BA960
sub_080BA960: @ 0x080BA960
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r3, [r4, #0x30]
	adds r2, r3, #0
	adds r2, #0x20
	str r2, [r4, #0x30]
	ldr r0, [r4, #0x2c]
	lsls r0, r0, #1
	adds r1, r4, #0
	adds r1, #0x4c
	adds r5, r1, r0
	adds r0, r2, #0
	cmp r2, #0
	bge _080BA980
	ldr r1, _080BA9A4 @ =0x0000021F
	adds r0, r3, r1
_080BA980:
	asrs r0, r0, #9
	lsls r0, r0, #9
	subs r0, r2, r0
	cmp r0, #0xff
	ble _080BA9AC
	adds r0, r2, #0
	cmp r2, #0
	bge _080BA994
	ldr r1, _080BA9A8 @ =0x0000011F
	adds r0, r3, r1
_080BA994:
	asrs r0, r0, #8
	lsls r0, r0, #8
	subs r0, r2, r0
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r2, #0
	subs r1, r1, r0
	b _080BA9BC
	.align 2, 0
_080BA9A4: .4byte 0x0000021F
_080BA9A8: .4byte 0x0000011F
_080BA9AC:
	adds r0, r2, #0
	cmp r2, #0
	bge _080BA9B6
	ldr r1, _080BAA18 @ =0x0000011F
	adds r0, r3, r1
_080BA9B6:
	asrs r0, r0, #8
	lsls r0, r0, #8
	subs r1, r2, r0
_080BA9BC:
	strh r1, [r5]
	ldr r1, [r4, #0x2c]
	lsls r0, r1, #1
	adds r5, r4, #0
	adds r5, #0x4c
	adds r0, r5, r0
	ldrh r0, [r0]
	adds r2, r4, #0
	adds r2, #0x40
	cmp r0, #0
	bne _080BA9DA
	adds r1, r2, r1
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_080BA9DA:
	ldr r3, [r4, #0x2c]
	adds r1, r2, r3
	adds r0, r4, #0
	adds r0, #0x3a
	adds r0, r0, r3
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bne _080BAA48
	lsls r0, r3, #1
	adds r0, r5, r0
	movs r1, #0x80
	lsls r1, r1, #1
	ldrh r0, [r0]
	cmp r0, r1
	bne _080BAA48
	movs r0, #0
	str r0, [r4, #0x30]
	ldr r1, _080BAA1C @ =gPlaySt
	movs r0, #0x80
	ldrb r1, [r1, #0x14]
	ands r0, r1
	cmp r0, #0
	beq _080BAA20
	cmp r3, #3
	bne _080BAA20
	movs r0, #0xf
	adds r1, r4, #0
	bl sub_080BA948
	b _080BAA2A
	.align 2, 0
_080BAA18: .4byte 0x0000011F
_080BAA1C: .4byte gPlaySt
_080BAA20:
	ldr r0, [r4, #0x2c]
	adds r0, #0xa
	adds r1, r4, #0
	bl sub_080BA948
_080BAA2A:
	ldr r0, [r4, #0x2c]
	adds r0, #1
	str r0, [r4, #0x2c]
	ldr r0, _080BAA50 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080BAA42
	movs r0, #0x85
	bl m4aSongNumStart
_080BAA42:
	adds r0, r4, #0
	bl Proc_Break
_080BAA48:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BAA50: .4byte gPlaySt

	thumb_func_start sub_080BAA54
sub_080BAA54: @ 0x080BAA54
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080BAA7C @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0xb
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080BAA74
	movs r0, #1
	rsbs r0, r0, #0
	bl sub_080034C8
	adds r0, r4, #0
	bl Proc_Break
_080BAA74:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BAA7C: .4byte gpKeySt

	thumb_func_start sub_080BAA80
sub_080BAA80: @ 0x080BAA80
	push {lr}
	movs r0, #3
	bl sub_080034C8
	pop {r0}
	bx r0

	thumb_func_start sub_080BAA8C
sub_080BAA8C: @ 0x080BAA8C
	push {lr}
	adds r2, r0, #0
	ldr r1, _080BAAA8 @ =gPlaySt
	movs r0, #0x80
	ldrb r1, [r1, #0x14]
	ands r0, r1
	cmp r0, #0
	beq _080BAAAC
	adds r0, r2, #0
	movs r1, #1
	bl Proc_Goto
	b _080BAAB4
	.align 2, 0
_080BAAA8: .4byte gPlaySt
_080BAAAC:
	adds r0, r2, #0
	movs r1, #0
	bl Proc_Goto
_080BAAB4:
	pop {r0}
	bx r0

	thumb_func_start sub_080BAAB8
sub_080BAAB8: @ 0x080BAAB8
	push {lr}
	adds r1, r0, #0
	ldr r0, _080BAAC8 @ =0x08DB8B94
	bl Proc_StartBlocking
	pop {r0}
	bx r0
	.align 2, 0
_080BAAC8: .4byte 0x08DB8B94

	thumb_func_start sub_080BAACC
sub_080BAACC: @ 0x080BAACC
	push {lr}
	adds r1, r0, #0
	ldr r0, _080BAADC @ =0x08DB8CBC
	bl Proc_StartBlocking
	pop {r0}
	bx r0
	.align 2, 0
_080BAADC: .4byte 0x08DB8CBC

	thumb_func_start sub_080BAAE0
sub_080BAAE0: @ 0x080BAAE0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r1, #0
	str r1, [r5, #0x2c]
	movs r0, #0x18
	str r0, [r5, #0x3c]
	movs r4, #0
	strh r1, [r5, #0x38]
	ldr r0, _080BABF8 @ =0x08DB8D1C
	str r0, [r5, #0x30]
	adds r0, r5, #0
	adds r0, #0x34
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	movs r0, #0
	bl SetOnHBlankA
	movs r0, #0
	bl InitBgs
	bl ResetText
	ldr r2, _080BABFC @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r1, #8
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x45
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	ldr r0, _080BAC00 @ =0x0861AB70
	movs r1, #0xa0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r4, #0
	ldr r6, _080BAC04 @ =0x06008000
_080BAB5C:
	ldr r0, [r5, #0x30]
	lsls r1, r4, #2
	adds r0, r0, r1
	ldr r0, [r0]
	cmp r0, #0
	beq _080BAB7A
	adds r2, r5, #0
	adds r2, #0x36
	ldrb r3, [r2]
	lsls r1, r3, #1
	adds r1, r1, r3
	lsls r1, r1, #0xc
	adds r1, r1, r6
	bl sub_08013688
_080BAB7A:
	movs r0, #0x80
	lsls r0, r0, #4
	adds r6, r6, r0
	adds r4, #1
	cmp r4, #5
	ble _080BAB5C
	adds r1, r5, #0
	adds r1, #0x34
	movs r4, #0
	movs r0, #8
	strb r0, [r1]
	movs r0, #3
	movs r1, #0
	movs r2, #0x60
	bl SetBgOffset
	movs r0, #0x2a
	movs r1, #0
	bl sub_0800376C
	ldr r3, _080BABFC @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	ldr r0, _080BAC08 @ =0x0000FFE0
	ldrh r1, [r3, #0x3c]
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	ldr r1, _080BAC0C @ =0x0000E0FF
	ands r0, r1
	strh r0, [r3, #0x3c]
	movs r0, #0x20
	ldrb r1, [r2]
	orrs r1, r0
	strb r1, [r2]
	adds r1, r3, #0
	adds r1, #0x3d
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	bl sub_080BAE6C
	ldr r0, _080BAC10 @ =sub_080BAEA8
	bl SetOnHBlankA
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BABF8: .4byte 0x08DB8D1C
_080BABFC: .4byte gDispIo
_080BAC00: .4byte 0x0861AB70
_080BAC04: .4byte 0x06008000
_080BAC08: .4byte 0x0000FFE0
_080BAC0C: .4byte 0x0000E0FF
_080BAC10: .4byte sub_080BAEA8

	thumb_func_start sub_080BAC14
sub_080BAC14: @ 0x080BAC14
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x38]
	lsrs r7, r0, #3
	movs r0, #0x1f
	ands r7, r0
	ldr r0, [r4, #0x2c]
	asrs r2, r0, #6
	strh r2, [r4, #0x38]
	lsls r1, r2, #0x10
	ldr r0, _080BAC48 @ =0x061F0000
	cmp r1, r0
	bls _080BAC4C
	movs r0, #3
	movs r1, #0
	movs r2, #0x80
	bl SetBgOffset
	adds r0, r4, #0
	bl Proc_Break
	b _080BAD54
	.align 2, 0
_080BAC48: .4byte 0x061F0000
_080BAC4C:
	subs r2, #0xa0
	movs r0, #0xff
	ands r2, r0
	movs r0, #3
	movs r1, #0
	bl SetBgOffset
	adds r0, r4, #0
	adds r0, #0x34
	mov r8, r0
	ldrb r1, [r0]
	cmp r1, #5
	bhi _080BACAA
	ldr r0, [r4, #0x30]
	mov r5, r8
	ldrb r2, [r5]
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r3, [r0]
	adds r1, r4, #0
	adds r1, #0x36
	ldrb r5, [r1]
	lsls r0, r5, #1
	adds r0, r0, r5
	lsls r0, r0, #0xc
	lsls r2, r2, #0xb
	ldr r1, _080BAC94 @ =0x06008000
	adds r2, r2, r1
	adds r1, r0, r2
	cmp r3, #0
	beq _080BAC98
	adds r0, r3, #0
	bl sub_08013688
	b _080BACA2
	.align 2, 0
_080BAC94: .4byte 0x06008000
_080BAC98:
	str r3, [sp]
	ldr r2, _080BAD40 @ =0x01000200
	mov r0, sp
	bl CpuFastSet
_080BACA2:
	mov r5, r8
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
_080BACAA:
	movs r0, #7
	mov sb, r0
	mov r1, sb
	ands r1, r7
	mov sb, r1
	cmp r1, #0
	bne _080BAD1E
	ldr r0, [r4, #0x30]
	adds r6, r4, #0
	adds r6, #0x35
	ldrb r2, [r6]
	lsls r1, r2, #2
	adds r0, #0x18
	adds r0, r0, r1
	ldr r3, [r0]
	adds r0, r7, #0
	asrs r0, r0, #3
	cmp r2, r0
	bne _080BAD1E
	cmp r3, #0
	beq _080BAD54
	adds r5, r4, #0
	adds r5, #0x36
	ldrb r0, [r5]
	lsls r2, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #0x17
	movs r1, #0xa0
	lsls r1, r1, #0x18
	adds r2, r2, r1
	lsrs r2, r2, #0x10
	lsls r0, r7, #6
	ldr r1, _080BAD44 @ =gBg3Tm
	adds r0, r0, r1
	adds r1, r3, #0
	bl TmApplyTsa_thm
	movs r0, #8
	bl EnableBgSync
	ldrb r0, [r6]
	adds r0, #1
	strb r0, [r6]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #4
	bne _080BAD1E
	mov r0, sb
	strb r0, [r6]
	mov r1, r8
	strb r0, [r1]
	movs r0, #1
	ldrb r1, [r5]
	subs r0, r0, r1
	strb r0, [r5]
	ldr r0, [r4, #0x30]
	adds r0, #0x28
	str r0, [r4, #0x30]
_080BAD1E:
	ldr r0, _080BAD48 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #8
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080BAD4C
	bl sub_0809F9D0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080BAD54
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
	b _080BAD54
	.align 2, 0
_080BAD40: .4byte 0x01000200
_080BAD44: .4byte gBg3Tm
_080BAD48: .4byte gpKeySt
_080BAD4C:
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x3c]
	adds r0, r0, r1
	str r0, [r4, #0x2c]
_080BAD54:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080BAD64
sub_080BAD64: @ 0x080BAD64
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, _080BAE04 @ =0x08DB8DE4
	str r0, [r5, #0x30]
	adds r1, r5, #0
	adds r1, #0x36
	movs r0, #1
	strb r0, [r1]
	ldr r0, _080BAE08 @ =0x0861AB70
	movs r1, #0xa0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #3
	movs r1, #0
	movs r2, #0x80
	bl SetBgOffset
	ldr r0, _080BAE0C @ =gBg3Tm
	movs r1, #0
	bl TmFill
	movs r4, #0
	ldr r6, _080BAE10 @ =0x06008000
_080BAD96:
	ldr r0, [r5, #0x30]
	lsls r1, r4, #2
	adds r0, r0, r1
	ldr r0, [r0]
	cmp r0, #0
	beq _080BADB4
	adds r2, r5, #0
	adds r2, #0x36
	ldrb r3, [r2]
	lsls r1, r3, #1
	adds r1, r1, r3
	lsls r1, r1, #0xc
	adds r1, r1, r6
	bl sub_08013688
_080BADB4:
	movs r0, #0x80
	lsls r0, r0, #4
	adds r6, r6, r0
	adds r4, #1
	cmp r4, #5
	ble _080BAD96
	movs r4, #1
_080BADC2:
	ldr r0, [r5, #0x30]
	lsls r1, r4, #2
	adds r0, #0x18
	adds r0, r0, r1
	ldr r3, [r0]
	cmp r3, #0
	beq _080BADF0
	adds r0, r5, #0
	adds r0, #0x36
	ldrb r1, [r0]
	lsls r2, r1, #1
	adds r2, r2, r1
	lsls r2, r2, #0x17
	movs r0, #0xa0
	lsls r0, r0, #0x18
	adds r2, r2, r0
	lsrs r2, r2, #0x10
	lsls r0, r4, #9
	ldr r1, _080BAE0C @ =gBg3Tm
	adds r0, r0, r1
	adds r1, r3, #0
	bl TmApplyTsa_thm
_080BADF0:
	adds r4, #1
	cmp r4, #3
	ble _080BADC2
	movs r0, #8
	bl EnableBgSync
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BAE04: .4byte 0x08DB8DE4
_080BAE08: .4byte 0x0861AB70
_080BAE0C: .4byte gBg3Tm
_080BAE10: .4byte 0x06008000

	thumb_func_start sub_080BAE14
sub_080BAE14: @ 0x080BAE14
	push {lr}
	movs r0, #0
	bl SetOnHBlankA
	ldr r2, _080BAE50 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0xc0
	ldrb r3, [r1]
	orrs r0, r3
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x46
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _080BAE54 @ =0x0000FFE0
	ldrh r1, [r2, #0x3c]
	ands r0, r1
	movs r1, #0x1f
	orrs r0, r1
	strh r0, [r2, #0x3c]
	pop {r0}
	bx r0
	.align 2, 0
_080BAE50: .4byte gDispIo
_080BAE54: .4byte 0x0000FFE0

	thumb_func_start sub_080BAE58
sub_080BAE58: @ 0x080BAE58
	push {lr}
	adds r1, r0, #0
	ldr r0, _080BAE68 @ =0x08DB8E34
	bl Proc_StartBlocking
	pop {r0}
	bx r0
	.align 2, 0
_080BAE68: .4byte 0x08DB8E34

	thumb_func_start sub_080BAE6C
sub_080BAE6C: @ 0x080BAE6C
	push {r4, r5, r6, lr}
	movs r2, #0
	ldr r3, _080BAEA4 @ =0x08DB8ED4
	adds r6, r3, #0
	movs r5, #0x10
	movs r0, #0x60
	rsbs r0, r0, #0
	adds r4, r0, #0
_080BAE7C:
	ldr r0, [r3]
	adds r0, r0, r2
	strb r5, [r0]
	cmp r2, #0xf
	bgt _080BAE8C
	ldr r0, [r6]
	adds r0, r0, r2
	strb r2, [r0]
_080BAE8C:
	cmp r2, #0x90
	ble _080BAE98
	ldr r0, [r3]
	adds r0, r0, r2
	subs r1, r4, r2
	strb r1, [r0]
_080BAE98:
	adds r2, #1
	cmp r2, #0xa0
	ble _080BAE7C
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BAEA4: .4byte 0x08DB8ED4

	thumb_func_start sub_080BAEA8
sub_080BAEA8: @ 0x080BAEA8
	ldr r0, _080BAEC8 @ =0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0xa0
	bls _080BAEB8
	movs r2, #0
_080BAEB8:
	ldr r1, _080BAECC @ =0x04000052
	ldr r0, _080BAED0 @ =0x08DB8ED4
	ldr r0, [r0]
	adds r0, r0, r2
	ldrb r0, [r0]
	strh r0, [r1]
	bx lr
	.align 2, 0
_080BAEC8: .4byte 0x04000006
_080BAECC: .4byte 0x04000052
_080BAED0: .4byte 0x08DB8ED4

	thumb_func_start sub_080BAED4
sub_080BAED4: @ 0x080BAED4
	ldr r0, _080BAEF4 @ =0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0x9f
	bls _080BAEE4
	movs r2, #0
_080BAEE4:
	ldr r0, _080BAEF8 @ =0x04000012
	movs r1, #1
	ands r1, r2
	lsrs r2, r2, #1
	adds r1, r1, r2
	rsbs r1, r1, #0
	strh r1, [r0]
	bx lr
	.align 2, 0
_080BAEF4: .4byte 0x04000006
_080BAEF8: .4byte 0x04000012

	thumb_func_start sub_080BAEFC
sub_080BAEFC: @ 0x080BAEFC
	push {lr}
	sub sp, #0x14
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r3, #0
	str r3, [sp]
	str r3, [sp, #4]
	mov r1, sp
	strh r3, [r1, #8]
	strh r3, [r1, #0xa]
	movs r2, #0x80
	lsls r2, r2, #1
	strh r2, [r1, #0xc]
	strh r2, [r1, #0xe]
	strh r3, [r1, #0x10]
	ldr r1, _080BAF30 @ =0x030027E8
	cmp r0, #2
	bne _080BAF22
	subs r1, #0x10
_080BAF22:
	mov r0, sp
	movs r2, #1
	bl BgAffineSet
	add sp, #0x14
	pop {r0}
	bx r0
	.align 2, 0
_080BAF30: .4byte 0x030027E8

	thumb_func_start sub_080BAF34
sub_080BAF34: @ 0x080BAF34
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r7, r0, #0
	lsls r1, r1, #0x18
	movs r4, #0
	cmp r1, #0
	bne _080BAF4A
	movs r4, #0x80
	lsls r4, r4, #1
_080BAF4A:
	ldr r0, _080BAFF0 @ =0x086BC444
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0xa0
	bl ApplyPaletteExt
	ldr r0, _080BAFF4 @ =0x086BC4E4
	ldr r1, _080BAFF8 @ =0x06010000
	bl sub_08013688
	ldr r6, _080BAFFC @ =0x086BF118
	adds r4, #0x78
	mov r8, r4
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0
	str r0, [sp]
	movs r4, #0xa
	str r4, [sp, #4]
	adds r0, r6, #0
	mov r1, r8
	movs r2, #0x48
	bl sub_08012AF0
	str r0, [r7, #0x30]
	movs r5, #0x80
	lsls r5, r5, #3
	movs r0, #1
	str r0, [sp]
	str r4, [sp, #4]
	adds r0, r6, #0
	mov r1, r8
	movs r2, #0x48
	adds r3, r5, #0
	bl sub_08012AF0
	str r0, [r7, #0x34]
	movs r0, #3
	str r0, [sp]
	str r4, [sp, #4]
	adds r0, r6, #0
	mov r1, r8
	movs r2, #0x30
	adds r3, r5, #0
	bl sub_08012AF0
	str r0, [r7, #0x38]
	movs r0, #4
	str r0, [sp]
	str r4, [sp, #4]
	adds r0, r6, #0
	mov r1, r8
	movs r2, #0x80
	adds r3, r5, #0
	bl sub_08012AF0
	str r0, [r7, #0x3c]
	movs r0, #5
	str r0, [sp]
	str r4, [sp, #4]
	adds r0, r6, #0
	mov r1, r8
	movs r2, #0x68
	adds r3, r5, #0
	bl sub_08012AF0
	str r0, [r7, #0x40]
	movs r0, #6
	str r0, [sp]
	str r4, [sp, #4]
	adds r0, r6, #0
	mov r1, r8
	movs r2, #0x90
	adds r3, r5, #0
	bl sub_08012AF0
	str r0, [r7, #0x44]
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BAFF0: .4byte 0x086BC444
_080BAFF4: .4byte 0x086BC4E4
_080BAFF8: .4byte 0x06010000
_080BAFFC: .4byte 0x086BF118

	thumb_func_start sub_080BB000
sub_080BB000: @ 0x080BB000
	push {lr}
	ldr r0, _080BB064 @ =0x086B73E0
	movs r1, #0xf0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080BB068 @ =0x086B7400
	ldr r1, _080BB06C @ =0x06008000
	bl sub_08013688
	ldr r0, _080BB070 @ =gBg3Tm
	ldr r1, _080BB074 @ =0x086BB234
	movs r2, #0xf0
	lsls r2, r2, #8
	bl TmApplyTsa_thm
	ldr r0, _080BB078 @ =0x086BB6E8
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080BB07C @ =0x086BB708
	ldr r1, _080BB080 @ =0x0600CC00
	bl sub_08013688
	ldr r0, _080BB084 @ =0x02023CA0
	ldr r1, _080BB088 @ =0x086BBF90
	ldr r2, _080BB08C @ =0x0000E260
	bl TmApplyTsa_thm
	ldr r0, _080BB090 @ =0x086B6E70
	movs r1, #0xd0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080BB094 @ =0x086B6E90
	ldr r1, _080BB098 @ =0x0600DE00
	bl sub_08013688
	ldr r0, _080BB09C @ =gBg1Tm
	ldr r1, _080BB0A0 @ =0x086B7184
	ldr r2, _080BB0A4 @ =0x0000D2F0
	bl TmApplyTsa_thm
	pop {r0}
	bx r0
	.align 2, 0
_080BB064: .4byte 0x086B73E0
_080BB068: .4byte 0x086B7400
_080BB06C: .4byte 0x06008000
_080BB070: .4byte gBg3Tm
_080BB074: .4byte 0x086BB234
_080BB078: .4byte 0x086BB6E8
_080BB07C: .4byte 0x086BB708
_080BB080: .4byte 0x0600CC00
_080BB084: .4byte 0x02023CA0
_080BB088: .4byte 0x086BBF90
_080BB08C: .4byte 0x0000E260
_080BB090: .4byte 0x086B6E70
_080BB094: .4byte 0x086B6E90
_080BB098: .4byte 0x0600DE00
_080BB09C: .4byte gBg1Tm
_080BB0A0: .4byte 0x086B7184
_080BB0A4: .4byte 0x0000D2F0

	thumb_func_start sub_080BB0A8
sub_080BB0A8: @ 0x080BB0A8
	push {r4, r5, r6, r7, lr}
	sub sp, #0x18
	adds r6, r0, #0
	ldr r1, _080BB1CC @ =0x086C44D4
	mov r0, sp
	movs r2, #0x18
	bl memcpy
	adds r0, r6, #0
	adds r0, #0x50
	movs r7, #0
	strb r7, [r0]
	ldr r5, _080BB1D0 @ =gDispIo
	movs r4, #0x21
	rsbs r4, r4, #0
	adds r0, r4, #0
	ldrb r1, [r5, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r5, #1]
	mov r0, sp
	bl InitBgs
	movs r0, #8
	rsbs r0, r0, #0
	ldrb r2, [r5]
	ands r0, r2
	strb r0, [r5]
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r3, [r5, #1]
	ands r0, r3
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r5, #1]
	movs r3, #3
	ldrb r0, [r5, #0xc]
	orrs r0, r3
	strb r0, [r5, #0xc]
	adds r1, #0xd
	adds r0, r1, #0
	ldrb r2, [r5, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r5, #0x10]
	ldrb r0, [r5, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r5, #0x14]
	ldrb r1, [r5, #0x18]
	orrs r3, r1
	strb r3, [r5, #0x18]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r1, _080BB1D4 @ =0x0000FFF8
	ldr r2, _080BB1D8 @ =0x0000FFD0
	movs r0, #1
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, _080BB1DC @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _080BB1E0 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _080BB1E4 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r0, _080BB1E8 @ =gBg3Tm
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl sub_080BAEFC
	adds r2, r5, #0
	adds r2, #0x3c
	adds r1, r4, #0
	ldrb r3, [r2]
	ands r1, r3
	adds r0, r5, #0
	adds r0, #0x3d
	ldrb r3, [r0]
	ands r4, r3
	strb r4, [r0]
	movs r0, #0x3f
	ands r1, r0
	strb r1, [r2]
	adds r1, r5, #0
	adds r1, #0x44
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x45
	strb r7, [r0]
	adds r0, #1
	strb r7, [r0]
	movs r0, #0xf
	bl EnableBgSync
	adds r0, r6, #0
	adds r0, #0x51
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080BB1C0
	adds r0, r6, #0
	movs r1, #0
	bl Proc_Goto
_080BB1C0:
	str r7, [r6, #0x54]
	add sp, #0x18
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BB1CC: .4byte 0x086C44D4
_080BB1D0: .4byte gDispIo
_080BB1D4: .4byte 0x0000FFF8
_080BB1D8: .4byte 0x0000FFD0
_080BB1DC: .4byte gBg0Tm
_080BB1E0: .4byte gBg1Tm
_080BB1E4: .4byte gBg2Tm
_080BB1E8: .4byte gBg3Tm

	thumb_func_start sub_080BB1EC
sub_080BB1EC: @ 0x080BB1EC
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #1
	bl sub_080BAF34
	adds r0, r4, #0
	bl sub_080BB000
	movs r0, #0xe
	bl EnableBgSync
	adds r0, r4, #0
	bl sub_080BB62C
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080BB210
sub_080BB210: @ 0x080BB210
	push {r4, r5, lr}
	sub sp, #0x14
	adds r4, r0, #0
	ldr r0, _080BB28C @ =sub_080BAED4
	bl SetOnHBlankA
	adds r0, r4, #0
	movs r1, #0
	bl sub_080BAF34
	adds r0, r4, #0
	bl sub_080BB000
	ldr r0, _080BB290 @ =0x08DB9A84
	movs r5, #0
	str r5, [sp]
	movs r1, #0xa0
	lsls r1, r1, #6
	str r1, [sp, #4]
	movs r1, #0xa
	str r1, [sp, #8]
	str r5, [sp, #0xc]
	str r4, [sp, #0x10]
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_080AB654
	ldr r2, _080BB294 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #0xe
	bl EnableBgSync
	ldr r0, _080BB298 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080BB27C
	movs r0, #0x63
	bl m4aSongNumStart
_080BB27C:
	adds r0, r4, #0
	adds r0, #0x50
	strb r5, [r0]
	add sp, #0x14
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BB28C: .4byte sub_080BAED4
_080BB290: .4byte 0x08DB9A84
_080BB294: .4byte gDispIo
_080BB298: .4byte gPlaySt

	thumb_func_start sub_080BB29C
sub_080BB29C: @ 0x080BB29C
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x50
	ldrb r0, [r4]
	cmp r0, #8
	bne _080BB2C2
	ldr r0, [r5, #0x34]
	movs r1, #0x48
	str r1, [sp]
	movs r1, #0x10
	str r1, [sp, #4]
	str r5, [sp, #8]
	movs r1, #0x78
	movs r2, #0x38
	movs r3, #0x78
	bl sub_080BBA64
_080BB2C2:
	ldrb r0, [r4]
	subs r0, #0x30
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x20
	bhi _080BB380
	ldrb r0, [r4]
	adds r1, r0, #0
	subs r1, #0x30
	lsrs r2, r1, #0x1f
	adds r1, r1, r2
	asrs r6, r1, #1
	cmp r0, #0x30
	bne _080BB346
	ldr r3, _080BB3DC @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	movs r7, #0x45
	movs r2, #0x10
	movs r0, #0x10
	strb r0, [r7, r3]
	adds r0, r3, #0
	adds r0, #0x46
	strb r1, [r0]
	ldr r0, _080BB3E0 @ =0x0000FFE0
	ldrh r1, [r3, #0x3c]
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	ldr r1, _080BB3E4 @ =0x0000E0FF
	ands r0, r1
	movs r7, #0xf8
	lsls r7, r7, #5
	adds r1, r7, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	movs r0, #1
	ldrb r1, [r3, #1]
	orrs r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	rsbs r1, r1, #0
	ands r0, r1
	orrs r0, r2
	strb r0, [r3, #1]
	ldr r1, _080BB3E8 @ =0x086BB6E8
	str r5, [sp]
	movs r0, #0
	movs r2, #0xe
	movs r3, #0x20
	bl sub_080BDC2C
_080BB346:
	ldr r3, _080BB3DC @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r7, [r2]
	ands r0, r7
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r6, [r0]
	movs r0, #0x10
	subs r0, r0, r6
	adds r2, #9
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x46
	strb r1, [r0]
	ldrb r2, [r4]
	subs r2, #0x30
	asrs r2, r2, #1
	subs r2, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	bl SetBgOffset
_080BB380:
	adds r4, r5, #0
	adds r4, #0x50
	ldrb r0, [r4]
	cmp r0, #0x28
	bne _080BB3A2
	ldr r0, [r5, #0x30]
	movs r1, #0x48
	str r1, [sp]
	movs r1, #0x10
	str r1, [sp, #4]
	movs r1, #0
	str r1, [sp, #8]
	str r5, [sp, #0xc]
	movs r2, #0
	movs r3, #0x78
	bl sub_080BBAA4
_080BB3A2:
	ldrb r1, [r4]
	cmp r1, #0x50
	bne _080BB3BE
	ldr r0, [r5, #0x40]
	movs r1, #0x68
	str r1, [sp]
	movs r1, #0x10
	str r1, [sp, #4]
	str r5, [sp, #8]
	movs r1, #0x78
	movs r2, #0x78
	movs r3, #0x78
	bl sub_080BBA64
_080BB3BE:
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x64
	bne _080BB3D2
	adds r0, r5, #0
	bl Proc_Break
_080BB3D2:
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BB3DC: .4byte gDispIo
_080BB3E0: .4byte 0x0000FFE0
_080BB3E4: .4byte 0x0000E0FF
_080BB3E8: .4byte 0x086BB6E8

	thumb_func_start sub_080BB3EC
sub_080BB3EC: @ 0x080BB3EC
	adds r0, #0x50
	movs r3, #0
	strb r3, [r0]
	ldr r0, _080BB460 @ =gDispIo
	mov ip, r0
	mov r2, ip
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x44
	strb r3, [r0]
	mov r1, ip
	adds r1, #0x45
	movs r2, #0x10
	movs r0, #0x10
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x46
	strb r3, [r0]
	ldr r0, _080BB464 @ =0x0000FFE0
	mov r3, ip
	ldrh r3, [r3, #0x3c]
	ands r0, r3
	movs r1, #8
	orrs r0, r1
	ldr r1, _080BB468 @ =0x0000E0FF
	ands r0, r1
	movs r3, #0xf8
	lsls r3, r3, #5
	adds r1, r3, #0
	orrs r0, r1
	mov r1, ip
	strh r0, [r1, #0x3c]
	movs r0, #1
	ldrb r3, [r1, #1]
	orrs r0, r3
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	orrs r0, r2
	mov r1, ip
	strb r0, [r1, #1]
	adds r1, #0x3d
	movs r0, #0x20
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	bx lr
	.align 2, 0
_080BB460: .4byte gDispIo
_080BB464: .4byte 0x0000FFE0
_080BB468: .4byte 0x0000E0FF

	thumb_func_start sub_080BB46C
sub_080BB46C: @ 0x080BB46C
	push {r4, r5, lr}
	sub sp, #0xc
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x50
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x20
	bhi _080BB4F4
	cmp r0, #0x20
	bne _080BB4C8
	ldr r0, [r5, #0x38]
	movs r1, #0x2c
	str r1, [sp]
	movs r4, #0x10
	str r4, [sp, #4]
	str r5, [sp, #8]
	movs r1, #0xa0
	movs r2, #0x2c
	movs r3, #0x78
	bl sub_080BBA64
	ldr r0, [r5, #0x3c]
	movs r1, #0x80
	str r1, [sp]
	str r4, [sp, #4]
	str r5, [sp, #8]
	movs r1, #0x78
	movs r2, #0x80
	movs r3, #0x78
	bl sub_080BBA64
	ldr r0, [r5, #0x44]
	movs r1, #0x90
	str r1, [sp]
	str r4, [sp, #4]
	str r5, [sp, #8]
	movs r1, #0x78
	movs r2, #0x90
	movs r3, #0x78
	bl sub_080BBA64
	b _080BB4F4
_080BB4C8:
	ldrb r1, [r1]
	lsrs r3, r1, #1
	ldr r4, _080BB50C @ =gDispIo
	adds r2, r4, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x44
	strb r3, [r0]
	movs r0, #0x10
	subs r0, r0, r3
	adds r1, r4, #0
	adds r1, #0x45
	strb r0, [r1]
	adds r1, #1
	movs r0, #0
	strb r0, [r1]
_080BB4F4:
	adds r0, r5, #0
	adds r0, #0x50
	ldrb r0, [r0]
	cmp r0, #0x3c
	bne _080BB504
	adds r0, r5, #0
	bl Proc_Break
_080BB504:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BB50C: .4byte gDispIo

	thumb_func_start sub_080BB510
sub_080BB510: @ 0x080BB510
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	bl SetOnHBlankA
	adds r0, r4, #0
	bl sub_080BB62C
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080BB528
sub_080BB528: @ 0x080BB528
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x54]
	adds r0, #1
	str r0, [r4, #0x54]
	adds r2, r4, #0
	adds r2, #0x50
	ldrb r0, [r2]
	adds r0, #1
	movs r1, #0xff
	ands r0, r1
	movs r1, #0x3f
	ands r0, r1
	strb r0, [r2]
	lsrs r0, r0, #2
	lsls r0, r0, #1
	ldr r1, _080BB584 @ =0x086282F8
	adds r0, r0, r1
	movs r1, #0x8c
	lsls r1, r1, #2
	movs r2, #2
	bl ApplyPaletteExt
	ldr r0, _080BB588 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #9
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080BB594
	ldr r0, _080BB58C @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080BB576
	ldr r0, _080BB590 @ =0x0000038D
	bl m4aSongNumStart
_080BB576:
	movs r0, #0
	bl sub_08013200
	adds r0, r4, #0
	bl Proc_Break
	b _080BB5AA
	.align 2, 0
_080BB584: .4byte 0x086282F8
_080BB588: .4byte gpKeySt
_080BB58C: .4byte gPlaySt
_080BB590: .4byte 0x0000038D
_080BB594:
	ldr r1, [r4, #0x54]
	movs r0, #0xf0
	lsls r0, r0, #1
	cmp r1, r0
	bne _080BB5AA
	movs r0, #1
	bl sub_08013200
	adds r0, r4, #0
	bl Proc_Break
_080BB5AA:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080BB5B0
sub_080BB5B0: @ 0x080BB5B0
	push {r4, r5, lr}
	adds r4, r0, #0
	bl sub_080AAC88
	adds r5, r4, #0
	adds r5, #0x30
	movs r4, #5
_080BB5BE:
	ldm r5!, {r0}
	bl EndSpriteAnimProc
	subs r4, #1
	cmp r4, #0
	bge _080BB5BE
	bl EndEachSpriteAnimProc
	movs r0, #0
	bl SetOnHBlankA
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080BB5DC
sub_080BB5DC: @ 0x080BB5DC
	push {lr}
	adds r1, r0, #0
	ldr r0, _080BB5F8 @ =0x08DB8ED8
	bl Proc_StartBlocking
	adds r0, #0x51
	movs r1, #0
	strb r1, [r0]
	movs r0, #0x5a
	movs r2, #0
	bl sub_08003788
	pop {r0}
	bx r0
	.align 2, 0
_080BB5F8: .4byte 0x08DB8ED8

	thumb_func_start sub_080BB5FC
sub_080BB5FC: @ 0x080BB5FC
	push {lr}
	adds r1, r0, #0
	ldr r0, _080BB610 @ =0x08DB8ED8
	bl Proc_StartBlocking
	adds r0, #0x51
	movs r1, #0
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_080BB610: .4byte 0x08DB8ED8

	thumb_func_start sub_080BB614
sub_080BB614: @ 0x080BB614
	push {lr}
	adds r1, r0, #0
	ldr r0, _080BB628 @ =0x08DB8ED8
	bl Proc_StartBlocking
	adds r0, #0x51
	movs r1, #1
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_080BB628: .4byte 0x08DB8ED8

	thumb_func_start sub_080BB62C
sub_080BB62C: @ 0x080BB62C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	str r0, [sp, #8]
	ldr r7, _080BB79C @ =gDispIo
	movs r0, #1
	ldrb r1, [r7, #1]
	orrs r0, r1
	movs r2, #2
	orrs r0, r2
	movs r1, #4
	mov sb, r1
	mov r2, sb
	orrs r0, r2
	movs r1, #8
	mov sl, r1
	mov r2, sl
	orrs r0, r2
	movs r1, #0x10
	mov r8, r1
	mov r2, r8
	orrs r0, r2
	strb r0, [r7, #1]
	ldr r0, _080BB7A0 @ =0x086BF118
	ldr r2, _080BB7A4 @ =0x00000848
	movs r1, #7
	str r1, [sp]
	movs r1, #0xa
	str r1, [sp, #4]
	movs r1, #0x78
	movs r3, #0
	bl sub_08012AF0
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r7, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x80
	orrs r0, r1
	strb r0, [r7, #1]
	adds r6, r7, #0
	adds r6, #0x34
	movs r1, #2
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r6]
	ands r0, r2
	movs r5, #3
	rsbs r5, r5, #0
	ands r0, r5
	movs r4, #5
	rsbs r4, r4, #0
	ands r0, r4
	movs r3, #9
	rsbs r3, r3, #0
	ands r0, r3
	movs r2, #0x11
	rsbs r2, r2, #0
	ands r0, r2
	strb r0, [r6]
	adds r6, #3
	movs r0, #1
	ldrb r2, [r6]
	orrs r0, r2
	ands r0, r5
	ands r0, r4
	ands r0, r3
	mov r2, r8
	orrs r0, r2
	adds r3, r7, #0
	adds r3, #0x36
	ldrb r2, [r3]
	ands r1, r2
	movs r2, #2
	orrs r1, r2
	mov r2, sb
	orrs r1, r2
	mov r2, sl
	orrs r1, r2
	mov r2, r8
	orrs r1, r2
	movs r2, #0x20
	orrs r0, r2
	strb r0, [r6]
	orrs r1, r2
	strb r1, [r3]
	adds r2, r7, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r7, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r2, #9
	movs r0, #0x10
	strb r0, [r2]
	adds r0, r7, #0
	adds r0, #0x46
	strb r1, [r0]
	ldr r0, _080BB7A8 @ =0x0000FFE0
	ldrh r2, [r7, #0x3c]
	ands r0, r2
	movs r1, #3
	orrs r0, r1
	ldr r1, _080BB7AC @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xf8
	lsls r2, r2, #5
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r7, #0x3c]
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r7, #0xc]
	ands r0, r2
	strb r0, [r7, #0xc]
	adds r0, r1, #0
	ldrb r2, [r7, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r7, #0x10]
	ldrb r0, [r7, #0x14]
	ands r1, r0
	movs r2, #2
	orrs r1, r2
	strb r1, [r7, #0x14]
	movs r0, #3
	ldrb r1, [r7, #0x18]
	orrs r0, r1
	strb r0, [r7, #0x18]
	ldr r1, _080BB7B0 @ =0x0000FFF8
	ldr r2, _080BB7B4 @ =0x0000FFD0
	movs r0, #1
	bl SetBgOffset
	ldr r0, _080BB7B8 @ =0x086C3CF8
	movs r1, #0xc0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080BB7BC @ =0x086C3D18
	ldr r1, _080BB7C0 @ =0x06005000
	bl sub_08013688
	ldr r0, _080BB7C4 @ =gBg0Tm
	ldr r1, _080BB7C8 @ =0x086C40D0
	ldr r2, _080BB7CC @ =0x0000C280
	bl TmApplyTsa_thm
	movs r0, #1
	bl EnableBgSync
	bl sub_0807702C
	ldr r0, _080BB7D0 @ =sub_080782AC
	bl SetOnHBlankA
	ldr r0, _080BB7D4 @ =0x08DB8F80
	ldr r1, [sp, #8]
	bl Proc_Start
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BB79C: .4byte gDispIo
_080BB7A0: .4byte 0x086BF118
_080BB7A4: .4byte 0x00000848
_080BB7A8: .4byte 0x0000FFE0
_080BB7AC: .4byte 0x0000E0FF
_080BB7B0: .4byte 0x0000FFF8
_080BB7B4: .4byte 0x0000FFD0
_080BB7B8: .4byte 0x086C3CF8
_080BB7BC: .4byte 0x086C3D18
_080BB7C0: .4byte 0x06005000
_080BB7C4: .4byte gBg0Tm
_080BB7C8: .4byte 0x086C40D0
_080BB7CC: .4byte 0x0000C280
_080BB7D0: .4byte sub_080782AC
_080BB7D4: .4byte 0x08DB8F80

	thumb_func_start sub_080BB7D8
sub_080BB7D8: @ 0x080BB7D8
	adds r1, r0, #0
	adds r1, #0x64
	movs r2, #0
	strh r2, [r1]
	adds r0, #0x66
	strh r2, [r0]
	ldr r1, _080BB7F8 @ =gAnims
	movs r0, #3
	str r0, [r1]
	str r0, [r1, #4]
	str r0, [r1, #8]
	movs r0, #4
	str r0, [r1, #0xc]
	str r2, [r1, #0x10]
	bx lr
	.align 2, 0
_080BB7F8: .4byte gAnims

	thumb_func_start sub_080BB7FC
sub_080BB7FC: @ 0x080BB7FC
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x66
	ldrh r1, [r4]
	lsls r0, r1, #0x10
	asrs r0, r0, #0x11
	cmp r0, #0x10
	bgt _080BB86E
	adds r0, r1, #1
	strh r0, [r4]
	lsls r2, r0, #0x10
	asrs r0, r2, #0x10
	cmp r0, #0x10
	bgt _080BB83E
	asrs r0, r2, #0x13
	movs r3, #8
	rsbs r3, r3, #0
	adds r1, r3, #0
	subs r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	asrs r0, r2, #0x12
	movs r6, #0x30
	rsbs r6, r6, #0
	adds r2, r6, #0
	subs r2, r2, r0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #1
	bl SetBgOffset
_080BB83E:
	ldr r3, _080BB8C4 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r7, [r2]
	ands r0, r7
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	ldrh r4, [r4]
	lsls r1, r4, #0x10
	asrs r2, r1, #0x11
	adds r0, r3, #0
	adds r0, #0x44
	strb r2, [r0]
	asrs r1, r1, #0x12
	movs r0, #0x10
	subs r0, r0, r1
	adds r1, r3, #0
	adds r1, #0x45
	strb r0, [r1]
	adds r1, #1
	movs r0, #0
	strb r0, [r1]
_080BB86E:
	movs r0, #1
	movs r1, #0
	bl sub_08077CEC
	adds r5, #0x64
	movs r2, #0
	ldrsh r1, [r5, r2]
	ldr r4, _080BB8C8 @ =gAnims
	movs r3, #4
	ldrsh r2, [r4, r3]
	movs r6, #0
	ldrsh r3, [r4, r6]
	movs r6, #0
	str r6, [sp]
	bl sub_08077794
	movs r0, #1
	movs r1, #0xa0
	bl sub_08077CEC
	movs r7, #0
	ldrsh r1, [r5, r7]
	movs r3, #0xc
	ldrsh r2, [r4, r3]
	movs r7, #8
	ldrsh r3, [r4, r7]
	str r6, [sp]
	bl sub_08077794
	bl sub_08077898
	ldrh r2, [r4, #0x10]
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	ldrh r0, [r5]
	adds r0, #1
	strh r0, [r5]
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BB8C4: .4byte gDispIo
_080BB8C8: .4byte gAnims

	thumb_func_start sub_080BB8CC
sub_080BB8CC: @ 0x080BB8CC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x4c
	ldrb r0, [r0]
	cmp r0, #0
	beq _080BB928
	ldr r3, _080BB934 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	movs r5, #0x45
	movs r0, #0x10
	strb r0, [r5, r3]
	adds r0, r3, #0
	adds r0, #0x46
	strb r1, [r0]
	ldr r0, _080BB938 @ =0x0000FFE0
	ldrh r1, [r3, #0x3c]
	ands r0, r1
	ldr r1, _080BB93C @ =0x0000E0FF
	ands r0, r1
	movs r5, #0xf8
	lsls r5, r5, #5
	adds r1, r5, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2]
	ands r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x3d
	movs r0, #0x20
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
_080BB928:
	movs r0, #0
	str r0, [r4, #0x30]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BB934: .4byte gDispIo
_080BB938: .4byte 0x0000FFE0
_080BB93C: .4byte 0x0000E0FF

	thumb_func_start sub_080BB940
sub_080BB940: @ 0x080BB940
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r5, r0, #0
	ldr r0, [r5, #0x30]
	adds r0, #1
	str r0, [r5, #0x30]
	ldr r1, [r5, #0x48]
	cmp r1, #0
	beq _080BB95C
	adds r0, r5, #0
	bl _call_via_r1
_080BB95C:
	ldr r6, [r5, #0x30]
	ldr r7, [r5, #0x34]
	cmp r6, r7
	blt _080BB97A
	adds r0, r5, #0
	bl Proc_Break
	ldr r0, [r5, #0x2c]
	ldr r1, [r5, #0x40]
	ldr r2, [r5, #0x44]
	movs r3, #1
	rsbs r3, r3, #0
	bl sub_08012B70
	b _080BBA56
_080BB97A:
	subs r4, r7, r6
	ldr r0, [r5, #0x38]
	muls r0, r4, r0
	ldr r1, [r5, #0x40]
	muls r1, r6, r1
	adds r0, r0, r1
	adds r1, r7, #0
	bl __divsi3
	mov sb, r0
	ldr r0, _080BB9D0 @ =0x000001FF
	mov r1, sb
	ands r1, r0
	mov sb, r1
	ldr r0, [r5, #0x3c]
	muls r0, r4, r0
	ldr r1, [r5, #0x44]
	muls r1, r6, r1
	adds r0, r0, r1
	adds r1, r7, #0
	bl __divsi3
	mov r8, r0
	movs r0, #0xff
	mov r1, r8
	ands r1, r0
	mov r8, r1
	lsls r0, r6, #4
	adds r1, r7, #0
	bl __divsi3
	adds r4, r0, #0
	adds r0, r5, #0
	adds r0, #0x4c
	ldrb r0, [r0]
	cmp r0, #1
	beq _080BB9DA
	cmp r0, #1
	bgt _080BB9D4
	cmp r0, #0
	beq _080BBA48
	b _080BBA56
	.align 2, 0
_080BB9D0: .4byte 0x000001FF
_080BB9D4:
	cmp r0, #2
	beq _080BBA08
	b _080BBA56
_080BB9DA:
	ldr r3, _080BBA04 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r4, [r0]
	movs r0, #0x10
	subs r0, r0, r4
	adds r2, #9
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x46
	strb r1, [r0]
	b _080BBA30
	.align 2, 0
_080BBA04: .4byte gDispIo
_080BBA08:
	ldr r3, _080BBA44 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	movs r0, #0x10
	subs r0, r0, r4
	adds r1, r3, #0
	adds r1, #0x44
	movs r2, #0
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r4, [r0]
	adds r0, #1
	strb r2, [r0]
_080BBA30:
	ldr r0, [r5, #0x2c]
	movs r2, #0x80
	lsls r2, r2, #3
	add r2, r8
	movs r3, #1
	rsbs r3, r3, #0
	mov r1, sb
	bl sub_08012B70
	b _080BBA56
	.align 2, 0
_080BBA44: .4byte gDispIo
_080BBA48:
	ldr r0, [r5, #0x2c]
	movs r3, #1
	rsbs r3, r3, #0
	mov r1, sb
	mov r2, r8
	bl sub_08012B70
_080BBA56:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080BBA64
sub_080BBA64: @ 0x080BBA64
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r7, [sp, #0x18]
	ldr r1, [sp, #0x20]
	ldr r0, _080BBAA0 @ =0x08DB8FA0
	bl Proc_Start
	str r4, [r0, #0x2c]
	str r5, [r0, #0x38]
	str r6, [r0, #0x3c]
	mov r1, r8
	str r1, [r0, #0x40]
	str r7, [r0, #0x44]
	ldr r1, [sp, #0x1c]
	str r1, [r0, #0x34]
	movs r1, #0
	str r1, [r0, #0x48]
	adds r0, #0x4c
	movs r1, #1
	strb r1, [r0]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BBAA0: .4byte 0x08DB8FA0

	thumb_func_start sub_080BBAA4
sub_080BBAA4: @ 0x080BBAA4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	mov sb, r3
	ldr r7, [sp, #0x1c]
	ldr r4, [sp, #0x24]
	ldr r1, [sp, #0x28]
	ldr r0, _080BBAE8 @ =0x08DB8FA0
	bl Proc_Start
	str r5, [r0, #0x2c]
	str r6, [r0, #0x38]
	mov r1, r8
	str r1, [r0, #0x3c]
	mov r1, sb
	str r1, [r0, #0x40]
	str r7, [r0, #0x44]
	str r4, [r0, #0x48]
	ldr r1, [sp, #0x20]
	str r1, [r0, #0x34]
	adds r0, #0x4c
	movs r1, #0
	strb r1, [r0]
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BBAE8: .4byte 0x08DB8FA0

	thumb_func_start sub_080BBAEC
sub_080BBAEC: @ 0x080BBAEC
	ldr r0, _080BBAF8 @ =0x02007508
	movs r1, #0xf8
	str r1, [r0]
	movs r1, #4
	str r1, [r0, #4]
	bx lr
	.align 2, 0
_080BBAF8: .4byte 0x02007508

	thumb_func_start sub_080BBAFC
sub_080BBAFC: @ 0x080BBAFC
	push {r4, r5, lr}
	sub sp, #4
	movs r5, #0
	str r5, [sp]
	ldr r4, _080BBB3C @ =0x02007030
	ldr r2, _080BBB40 @ =0x010000A0
	mov r0, sp
	adds r1, r4, #0
	bl CpuFastSet
	ldr r0, _080BBB44 @ =0x020072B0
	str r4, [r0]
	movs r1, #0xa0
	lsls r1, r1, #1
	adds r4, r4, r1
	str r4, [r0, #4]
	ldr r0, _080BBB48 @ =0x02007014
	str r5, [r0]
	movs r2, #0xc0
	lsls r2, r2, #2
	str r2, [r0, #4]
	adds r1, #0xc0
	str r1, [r0, #8]
	str r1, [r0, #0xc]
	str r2, [r0, #0x10]
	str r5, [r0, #0x18]
	str r5, [r0, #0x14]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BBB3C: .4byte 0x02007030
_080BBB40: .4byte 0x010000A0
_080BBB44: .4byte 0x020072B0
_080BBB48: .4byte 0x02007014

	thumb_func_start sub_080BBB4C
sub_080BBB4C: @ 0x080BBB4C
	ldr r0, _080BBB58 @ =0x020072B0
	ldr r2, [r0]
	ldr r1, [r0, #4]
	str r1, [r0]
	str r2, [r0, #4]
	bx lr
	.align 2, 0
_080BBB58: .4byte 0x020072B0

	thumb_func_start sub_080BBB5C
sub_080BBB5C: @ 0x080BBB5C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x28
	ldr r1, _080BBC18 @ =0x02007014
	ldr r0, [r1, #4]
	str r0, [sp]
	asrs r0, r0, #0x1f
	str r0, [sp, #4]
	ldr r0, [r1]
	str r0, [sp, #8]
	asrs r0, r0, #0x1f
	str r0, [sp, #0xc]
	ldr r0, [r1, #0xc]
	str r0, [sp, #0x10]
	asrs r0, r0, #0x1f
	str r0, [sp, #0x14]
	ldr r0, [r1, #0x10]
	str r0, [sp, #0x18]
	asrs r0, r0, #0x1f
	str r0, [sp, #0x1c]
	ldr r0, [r1, #0x18]
	cmp r0, #0
	bne _080BBC28
	movs r0, #1
	mov sb, r0
	ldr r1, _080BBC1C @ =gSinLut
	mov sl, r1
	ldr r2, _080BBC20 @ =0x00000FFF
	mov r8, r2
_080BBB9C:
	mov r0, sb
	asrs r1, r0, #0x1f
	ldr r2, [sp]
	ldr r3, [sp, #4]
	bl __muldi3
	ldr r2, [sp, #8]
	ldr r3, [sp, #0xc]
	adds r0, r0, r2
	adcs r1, r3
	lsls r3, r1, #0x18
	lsrs r2, r0, #8
	adds r6, r3, #0
	orrs r6, r2
	asrs r7, r1, #8
	ldr r3, _080BBC24 @ =0x020072B0
	ldr r5, [r3]
	add r5, sb
	movs r4, #0xff
	ands r4, r6
	lsls r0, r4, #1
	add r0, sl
	movs r1, #0
	ldrsh r0, [r0, r1]
	add r0, r8
	asrs r1, r0, #0x1f
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	bl __muldi3
	lsls r3, r1, #0xc
	lsrs r2, r0, #0x14
	adds r0, r3, #0
	orrs r0, r2
	strb r0, [r5]
	ldr r2, _080BBC24 @ =0x020072B0
	ldr r5, [r2]
	add r5, sb
	adds r5, #0xa0
	adds r4, #0x40
	lsls r4, r4, #1
	add r4, sl
	movs r3, #0
	ldrsh r0, [r4, r3]
	add r0, r8
	asrs r1, r0, #0x1f
	ldr r2, [sp, #0x18]
	ldr r3, [sp, #0x1c]
	bl __muldi3
	lsls r3, r1, #0xc
	lsrs r2, r0, #0x14
	adds r0, r3, #0
	orrs r0, r2
	strb r0, [r5]
	movs r0, #2
	add sb, r0
	mov r1, sb
	cmp r1, #0x9f
	ble _080BBB9C
	b _080BBCFA
	.align 2, 0
_080BBC18: .4byte 0x02007014
_080BBC1C: .4byte gSinLut
_080BBC20: .4byte 0x00000FFF
_080BBC24: .4byte 0x020072B0
_080BBC28:
	adds r2, r0, #0
	muls r2, r0, r2
	mov sl, r2
	movs r3, #9
	mov sb, r3
_080BBC32:
	ldr r1, _080BBD18 @ =0x02007014
	ldr r0, [r1, #0x14]
	mov r2, sb
	subs r0, r0, r2
	adds r3, r0, #0
	muls r3, r0, r3
	adds r0, r3, #0
	mov r1, sl
	subs r0, r1, r0
	lsls r0, r0, #8
	bl __divsi3
	mov r8, r0
	cmp r0, #0
	ble _080BBCF0
	mov r0, sb
	asrs r1, r0, #0x1f
	ldr r2, [sp]
	ldr r3, [sp, #4]
	bl __muldi3
	ldr r2, [sp, #8]
	ldr r3, [sp, #0xc]
	adds r0, r0, r2
	adcs r1, r3
	lsls r3, r1, #0x18
	lsrs r2, r0, #8
	adds r6, r3, #0
	orrs r6, r2
	asrs r7, r1, #8
	movs r1, #0xff
	ands r1, r6
	adds r0, r1, #0
	adds r0, #0x40
	lsls r0, r0, #1
	ldr r3, _080BBD1C @ =gSinLut
	adds r0, r0, r3
	movs r2, #0
	ldrsh r0, [r0, r2]
	ldr r3, _080BBD20 @ =0x00000FFF
	adds r0, r0, r3
	adds r6, r0, #0
	asrs r7, r0, #0x1f
	lsls r1, r1, #1
	ldr r0, _080BBD1C @ =gSinLut
	adds r1, r1, r0
	movs r2, #0
	ldrsh r0, [r1, r2]
	adds r0, r0, r3
	str r0, [sp, #0x20]
	asrs r0, r0, #0x1f
	str r0, [sp, #0x24]
	adds r1, r7, #0
	adds r0, r6, #0
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	bl __muldi3
	mov r4, r8
	asrs r5, r4, #0x1f
	adds r3, r5, #0
	adds r2, r4, #0
	bl __muldi3
	lsls r3, r1, #4
	lsrs r2, r0, #0x1c
	adds r6, r3, #0
	orrs r6, r2
	asrs r7, r1, #0x1c
	ldr r0, [sp, #0x20]
	ldr r1, [sp, #0x24]
	ldr r2, [sp, #0x18]
	ldr r3, [sp, #0x1c]
	bl __muldi3
	adds r3, r5, #0
	adds r2, r4, #0
	bl __muldi3
	lsls r3, r1, #4
	lsrs r2, r0, #0x1c
	orrs r3, r2
	str r3, [sp, #0x20]
	asrs r0, r1, #0x1c
	str r0, [sp, #0x24]
	ldr r1, _080BBD24 @ =0x020072B0
	ldr r0, [r1]
	add r0, sb
	strb r6, [r0]
	ldr r0, [r1]
	add r0, sb
	adds r0, #0xa0
	add r3, sp, #0x20
	ldrb r3, [r3]
	strb r3, [r0]
_080BBCF0:
	movs r0, #2
	add sb, r0
	mov r1, sb
	cmp r1, #0x7f
	ble _080BBC32
_080BBCFA:
	bl sub_080BBB4C
	ldr r0, _080BBD18 @ =0x02007014
	ldr r1, [r0]
	ldr r2, [r0, #8]
	adds r1, r1, r2
	str r1, [r0]
	add sp, #0x28
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BBD18: .4byte 0x02007014
_080BBD1C: .4byte gSinLut
_080BBD20: .4byte 0x00000FFF
_080BBD24: .4byte 0x020072B0

	thumb_func_start sub_080BBD28
sub_080BBD28: @ 0x080BBD28
	push {r4, lr}
	sub sp, #4
	ldr r0, _080BBD78 @ =0x00100010
	str r0, [sp]
	ldr r4, _080BBD7C @ =0x020072FC
	ldr r2, _080BBD80 @ =0x01000080
	mov r0, sp
	adds r1, r4, #0
	bl CpuFastSet
	ldr r0, _080BBD84 @ =0x020074FC
	str r4, [r0]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r4, r4, r1
	str r4, [r0, #4]
	ldr r0, _080BBD88 @ =0x02007504
	movs r4, #0
	str r4, [r0]
	bl sub_080BBAFC
	ldr r0, _080BBD8C @ =0x02007518
	movs r1, #0xa0
	str r1, [r0]
	ldr r0, _080BBD90 @ =0x0200751C
	str r1, [r0]
	ldr r1, _080BBD94 @ =0x02007014
	str r4, [r1, #0x18]
	movs r0, #0x50
	str r0, [r1, #0x14]
	movs r0, #0x80
	lsls r0, r0, #5
	str r0, [r1, #4]
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [r1, #8]
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BBD78: .4byte 0x00100010
_080BBD7C: .4byte 0x020072FC
_080BBD80: .4byte 0x01000080
_080BBD84: .4byte 0x020074FC
_080BBD88: .4byte 0x02007504
_080BBD8C: .4byte 0x02007518
_080BBD90: .4byte 0x0200751C
_080BBD94: .4byte 0x02007014

	thumb_func_start sub_080BBD98
sub_080BBD98: @ 0x080BBD98
	ldr r0, _080BBDA4 @ =0x020074FC
	ldr r2, [r0]
	ldr r1, [r0, #4]
	str r1, [r0]
	str r2, [r0, #4]
	bx lr
	.align 2, 0
_080BBDA4: .4byte 0x020074FC

	thumb_func_start sub_080BBDA8
sub_080BBDA8: @ 0x080BBDA8
	push {lr}
	ldr r0, _080BBDC8 @ =0x02007504
	ldr r0, [r0]
	lsls r0, r0, #3
	asrs r0, r0, #6
	movs r1, #0x80
	lsls r1, r1, #5
	adds r0, r0, r1
	ldr r1, _080BBDCC @ =0x020074FC
	ldr r1, [r1]
	strh r0, [r1]
	bl sub_080BBD98
	pop {r0}
	bx r0
	.align 2, 0
_080BBDC8: .4byte 0x02007504
_080BBDCC: .4byte 0x020074FC

	thumb_func_start sub_080BBDD0
sub_080BBDD0: @ 0x080BBDD0
	push {r4, r5, r6, lr}
	ldr r0, _080BBF20 @ =0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0x9f
	bls _080BBDE2
	movs r4, #0
_080BBDE2:
	movs r1, #1
	adds r0, r4, #0
	ands r0, r1
	ldr r6, _080BBF24 @ =0x03001620
	cmp r0, #0
	beq _080BBE68
	ldr r0, [r6]
	ands r0, r1
	cmp r0, #0
	beq _080BBE0A
	ldr r2, _080BBF28 @ =0x04000010
	ldr r0, _080BBF2C @ =0x020072B0
	ldr r0, [r0, #4]
	adds r0, r0, r4
	ldrb r1, [r0]
	strh r1, [r2]
	ldr r1, _080BBF30 @ =0x04000012
	adds r0, #0xa0
	ldrb r0, [r0]
	strh r0, [r1]
_080BBE0A:
	ldr r5, [r6]
	movs r0, #2
	ands r0, r5
	adds r3, r5, #0
	cmp r0, #0
	beq _080BBE2A
	ldr r2, _080BBF34 @ =0x04000014
	ldr r0, _080BBF2C @ =0x020072B0
	ldr r0, [r0, #4]
	adds r0, r0, r4
	ldrb r1, [r0]
	strh r1, [r2]
	ldr r1, _080BBF38 @ =0x04000016
	adds r0, #0xa0
	ldrb r0, [r0]
	strh r0, [r1]
_080BBE2A:
	movs r0, #4
	ands r3, r0
	cmp r3, #0
	beq _080BBE4C
	ldr r2, _080BBF3C @ =0x04000018
	ldr r0, _080BBF2C @ =0x020072B0
	ldr r0, [r0, #4]
	adds r0, r0, r4
	ldrb r1, [r0]
	strh r1, [r2]
	adds r2, #2
	adds r0, #0xa0
	ldr r1, _080BBF40 @ =gDispIo
	ldrb r0, [r0]
	ldrh r1, [r1, #0x26]
	adds r0, r0, r1
	strh r0, [r2]
_080BBE4C:
	movs r0, #8
	ands r5, r0
	cmp r5, #0
	beq _080BBE68
	ldr r2, _080BBF44 @ =0x0400001C
	ldr r0, _080BBF2C @ =0x020072B0
	ldr r0, [r0, #4]
	adds r0, r0, r4
	ldrb r1, [r0]
	strh r1, [r2]
	ldr r1, _080BBF48 @ =0x0400001E
	adds r0, #0xa0
	ldrb r0, [r0]
	strh r0, [r1]
_080BBE68:
	ldr r0, [r6]
	movs r1, #0xc0
	lsls r1, r1, #1
	ands r0, r1
	cmp r0, #0
	beq _080BBEDE
	cmp r4, #0x83
	bne _080BBE8C
	ldr r1, _080BBF4C @ =0x04000050
	movs r2, #0xf4
	lsls r2, r2, #4
	adds r0, r2, #0
	strh r0, [r1]
	adds r1, #2
	movs r3, #0x80
	lsls r3, r3, #5
	adds r0, r3, #0
	strh r0, [r1]
_080BBE8C:
	cmp r4, #0x83
	bls _080BBEC0
	cmp r4, #0x93
	bhi _080BBEAC
	adds r1, r4, #0
	subs r1, #0x84
	ldr r0, _080BBF50 @ =0x020072B8
	ldr r0, [r0]
	muls r1, r0, r1
	asrs r1, r1, #4
	ldr r2, _080BBF54 @ =0x04000052
	movs r0, #0x10
	subs r0, r0, r1
	lsls r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2]
_080BBEAC:
	cmp r4, #0x94
	bne _080BBEC0
	ldr r2, _080BBF54 @ =0x04000052
	ldr r0, _080BBF50 @ =0x020072B8
	ldr r1, [r0]
	movs r0, #0x10
	subs r0, r0, r1
	lsls r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2]
_080BBEC0:
	cmp r4, #0
	bne _080BBEDE
	ldr r2, _080BBF4C @ =0x04000050
	ldr r1, _080BBF58 @ =0x030027CC
	ldrh r0, [r1]
	strh r0, [r2]
	adds r2, #2
	ldrb r3, [r1, #9]
	lsls r0, r3, #8
	ldrb r3, [r1, #8]
	orrs r0, r3
	strh r0, [r2]
	adds r2, #2
	ldrb r0, [r1, #0xa]
	strh r0, [r2]
_080BBEDE:
	ldr r0, [r6]
	movs r1, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080BBEF6
	ldr r0, _080BBF38 @ =0x04000016
	movs r1, #1
	ands r1, r4
	lsrs r2, r4, #1
	adds r1, r1, r2
	rsbs r1, r1, #0
	strh r1, [r0]
_080BBEF6:
	ldr r0, [r6]
	movs r1, #0x60
	ands r0, r1
	cmp r0, #0
	beq _080BBF1A
	cmp r4, #0x9f
	bne _080BBF0C
	ldr r1, _080BBF4C @ =0x04000050
	ldr r2, _080BBF5C @ =0x00000441
	adds r0, r2, #0
	strh r0, [r1]
_080BBF0C:
	cmp r4, #1
	bne _080BBF1A
	ldr r1, _080BBF54 @ =0x04000052
	ldr r0, _080BBF60 @ =0x020074FC
	ldr r0, [r0, #4]
	ldrh r0, [r0]
	strh r0, [r1]
_080BBF1A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BBF20: .4byte 0x04000006
_080BBF24: .4byte 0x03001620
_080BBF28: .4byte 0x04000010
_080BBF2C: .4byte 0x020072B0
_080BBF30: .4byte 0x04000012
_080BBF34: .4byte 0x04000014
_080BBF38: .4byte 0x04000016
_080BBF3C: .4byte 0x04000018
_080BBF40: .4byte gDispIo
_080BBF44: .4byte 0x0400001C
_080BBF48: .4byte 0x0400001E
_080BBF4C: .4byte 0x04000050
_080BBF50: .4byte 0x020072B8
_080BBF54: .4byte 0x04000052
_080BBF58: .4byte 0x030027CC
_080BBF5C: .4byte 0x00000441
_080BBF60: .4byte 0x020074FC

	thumb_func_start sub_080BBF64
sub_080BBF64: @ 0x080BBF64
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _080BBF94 @ =0x03001620
	movs r4, #0
	str r4, [r0]
	ldr r0, _080BBF98 @ =0x020072B8
	str r4, [r0]
	bl sub_080BBD28
	bl sub_080BBAFC
	bl sub_080BBAEC
	movs r0, #0
	bl SetOnHBlankA
	ldr r0, _080BBF9C @ =sub_080BBDD0
	bl SetOnHBlankA
	adds r5, #0x4c
	strh r4, [r5]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BBF94: .4byte 0x03001620
_080BBF98: .4byte 0x020072B8
_080BBF9C: .4byte sub_080BBDD0

	thumb_func_start sub_080BBFA0
sub_080BBFA0: @ 0x080BBFA0
	push {lr}
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0

	thumb_func_start sub_080BBFAC
sub_080BBFAC: @ 0x080BBFAC
	push {r4, r5, lr}
	sub sp, #0x28
	adds r4, r0, #0
	ldr r0, _080BBFCC @ =0x03001620
	ldr r1, [r0]
	movs r0, #0xe0
	lsls r0, r0, #4
	ands r1, r0
	cmp r1, #0
	beq _080BBFD0
	adds r0, r4, #0
	adds r0, #0x4c
	ldrh r1, [r0]
	adds r1, #1
	b _080BBFD4
	.align 2, 0
_080BBFCC: .4byte 0x03001620
_080BBFD0:
	adds r0, r4, #0
	adds r0, #0x4c
_080BBFD4:
	strh r1, [r0]
	adds r5, r0, #0
	ldr r0, _080BC01C @ =0x03001620
	ldr r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	cmp r0, #0
	beq _080BC028
	ldrh r1, [r5]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _080BC064
	ldr r3, _080BC020 @ =0x08DB8FD0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x14
	adds r0, r1, #0
	movs r2, #0xf
	ands r0, r2
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r0, [r0]
	ldr r3, _080BC024 @ =0x08DB9010
	movs r2, #7
	ands r1, r2
	lsls r1, r1, #2
	adds r1, r1, r3
	ldr r2, [r1]
	str r4, [sp]
	movs r1, #0x70
	movs r3, #0x20
	bl sub_080BDF7C
	b _080BC064
	.align 2, 0
_080BC01C: .4byte 0x03001620
_080BC020: .4byte 0x08DB8FD0
_080BC024: .4byte 0x08DB9010
_080BC028:
	movs r0, #0x80
	lsls r0, r0, #2
	ands r1, r0
	cmp r1, #0
	beq _080BC064
	ldrh r1, [r5]
	movs r0, #0x1f
	ands r0, r1
	cmp r0, #0
	bne _080BC064
	ldr r3, _080BC0E8 @ =0x08DB8FD0
	lsls r1, r1, #0x10
	asrs r0, r1, #0x15
	movs r2, #0xf
	ands r0, r2
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r0, [r0]
	ldr r3, _080BC0EC @ =0x08DB9010
	asrs r1, r1, #0x14
	movs r2, #7
	ands r1, r2
	lsls r1, r1, #2
	adds r1, r1, r3
	ldr r2, [r1]
	str r4, [sp]
	movs r1, #0x70
	movs r3, #0x20
	bl sub_080BDF7C
_080BC064:
	ldr r0, _080BC0F0 @ =0x03001620
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #4
	ands r0, r1
	cmp r0, #0
	beq _080BC0B6
	add r0, sp, #8
	ldr r1, _080BC0F4 @ =0x086C44EC
	ldm r1!, {r2, r3, r4}
	stm r0!, {r2, r3, r4}
	ldm r1!, {r2, r3, r4}
	stm r0!, {r2, r3, r4}
	ldm r1!, {r2, r3}
	stm r0!, {r2, r3}
	ldrh r2, [r5]
	movs r0, #0xf
	ands r0, r2
	cmp r0, #0
	bne _080BC0B6
	ldr r0, _080BC0F8 @ =0x086C0C4C
	lsls r2, r2, #0x10
	asrs r2, r2, #0x14
	movs r3, #7
	adds r1, r2, #0
	ands r1, r3
	lsls r1, r1, #2
	add r1, sp
	adds r1, #8
	ldr r1, [r1]
	movs r3, #0xe6
	lsls r3, r3, #6
	movs r4, #1
	ands r2, r4
	adds r2, #1
	str r2, [sp]
	movs r2, #0xa
	str r2, [sp, #4]
	movs r2, #0x50
	bl sub_08012AF0
_080BC0B6:
	ldr r4, _080BC0F0 @ =0x03001620
	ldr r0, [r4]
	movs r1, #0xf
	ands r0, r1
	cmp r0, #0
	beq _080BC0C6
	bl sub_080BBB5C
_080BC0C6:
	ldr r1, [r4]
	movs r0, #0xc0
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080BC114
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080BC100
	ldr r1, _080BC0FC @ =0x020072B8
	ldr r0, [r1]
	cmp r0, #0
	ble _080BC114
	subs r0, #1
	b _080BC112
	.align 2, 0
_080BC0E8: .4byte 0x08DB8FD0
_080BC0EC: .4byte 0x08DB9010
_080BC0F0: .4byte 0x03001620
_080BC0F4: .4byte 0x086C44EC
_080BC0F8: .4byte 0x086C0C4C
_080BC0FC: .4byte 0x020072B8
_080BC100:
	movs r0, #0x80
	ands r1, r0
	cmp r1, #0
	beq _080BC114
	ldr r1, _080BC13C @ =0x020072B8
	ldr r0, [r1]
	cmp r0, #0xf
	bgt _080BC114
	adds r0, #1
_080BC112:
	str r0, [r1]
_080BC114:
	ldr r3, _080BC140 @ =0x03001620
	ldr r1, [r3]
	movs r0, #0x60
	ands r0, r1
	cmp r0, #0
	beq _080BC1A0
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080BC168
	ldr r2, _080BC144 @ =0x02007504
	ldr r0, [r2]
	cmp r0, #0
	bne _080BC148
	movs r0, #0x65
	rsbs r0, r0, #0
	ands r1, r0
	str r1, [r3]
	b _080BC182
	.align 2, 0
_080BC13C: .4byte 0x020072B8
_080BC140: .4byte 0x03001620
_080BC144: .4byte 0x02007504
_080BC148:
	cmp r0, #0
	ble _080BC182
	subs r0, #1
	str r0, [r2]
	cmp r0, #0
	bne _080BC182
	ldr r0, _080BC164 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl EnableBgSync
	b _080BC182
	.align 2, 0
_080BC164: .4byte gBg0Tm
_080BC168:
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _080BC182
	movs r0, #4
	orrs r1, r0
	str r1, [r3]
	ldr r1, _080BC1D0 @ =0x02007504
	ldr r0, [r1]
	cmp r0, #0x3f
	bgt _080BC182
	adds r0, #1
	str r0, [r1]
_080BC182:
	ldr r2, _080BC1D4 @ =0x02007014
	ldr r0, _080BC1D8 @ =0x02007518
	ldr r1, _080BC1D0 @ =0x02007504
	ldr r0, [r0]
	ldr r1, [r1]
	muls r0, r1, r0
	asrs r0, r0, #6
	str r0, [r2, #0xc]
	ldr r0, _080BC1DC @ =0x0200751C
	ldr r0, [r0]
	muls r0, r1, r0
	asrs r0, r0, #6
	str r0, [r2, #0x10]
	bl sub_080BBDA8
_080BC1A0:
	ldr r2, _080BC1E0 @ =0x02007508
	ldr r4, _080BC1E4 @ =gSinLut
	ldrb r1, [r2]
	adds r0, r1, #0
	adds r0, #0x40
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r3, #0
	ldrsh r0, [r0, r3]
	ldr r3, [r2, #4]
	muls r0, r3, r0
	asrs r0, r0, #4
	str r0, [r2, #8]
	lsls r1, r1, #1
	adds r1, r1, r4
	movs r4, #0
	ldrsh r0, [r1, r4]
	muls r0, r3, r0
	asrs r0, r0, #4
	str r0, [r2, #0xc]
	add sp, #0x28
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BC1D0: .4byte 0x02007504
_080BC1D4: .4byte 0x02007014
_080BC1D8: .4byte 0x02007518
_080BC1DC: .4byte 0x0200751C
_080BC1E0: .4byte 0x02007508
_080BC1E4: .4byte gSinLut

	thumb_func_start sub_080BC1E8
sub_080BC1E8: @ 0x080BC1E8
	push {r4, r5, lr}
	sub sp, #4
	ldr r0, _080BC230 @ =0x03001620
	ldr r0, [r0]
	movs r1, #0xc0
	lsls r1, r1, #1
	ands r0, r1
	cmp r0, #0
	beq _080BC214
	movs r4, #0
	movs r5, #0xbc
	lsls r5, r5, #5
_080BC200:
	lsls r1, r4, #6
	str r5, [sp]
	movs r0, #4
	ldr r2, _080BC234 @ =0x00000484
	ldr r3, _080BC238 @ =0x08BFF7B0
	bl sub_080068C4
	adds r4, #1
	cmp r4, #3
	ble _080BC200
_080BC214:
	ldr r3, _080BC23C @ =0x08DB941C
	movs r0, #0x90
	lsls r0, r0, #5
	str r0, [sp]
	movs r0, #4
	movs r1, #8
	movs r2, #0x90
	bl sub_080068C4
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BC230: .4byte 0x03001620
_080BC234: .4byte 0x00000484
_080BC238: .4byte 0x08BFF7B0
_080BC23C: .4byte 0x08DB941C

	thumb_func_start sub_080BC240
sub_080BC240: @ 0x080BC240
	push {r4, r5, r6, lr}
	sub sp, #0x24
	adds r6, r0, #0
	ldr r1, _080BC34C @ =0x086C450C
	mov r0, sp
	movs r2, #0x18
	bl memcpy
	mov r0, sp
	bl InitBgs
	movs r0, #1
	bl sub_080034C8
	movs r4, #0
	str r4, [sp, #0x18]
	add r0, sp, #0x18
	movs r1, #0xc0
	lsls r1, r1, #0x13
	ldr r5, _080BC350 @ =0x01000008
	adds r2, r5, #0
	bl CpuFastSet
	str r4, [sp, #0x1c]
	add r0, sp, #0x1c
	ldr r1, _080BC354 @ =0x06008000
	adds r2, r5, #0
	bl CpuFastSet
	str r4, [sp, #0x20]
	add r0, sp, #0x20
	ldr r1, _080BC358 @ =0x06010000
	adds r2, r5, #0
	bl CpuFastSet
	ldr r5, _080BC35C @ =gPal
	movs r4, #0x1f
_080BC28A:
	ldr r0, _080BC360 @ =0x0864AD14
	adds r1, r5, #0
	movs r2, #8
	bl CpuFastSet
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge _080BC28A
	bl EnablePalSync
	ldr r4, _080BC364 @ =gDispIo
	adds r3, r4, #0
	adds r3, #0x3c
	movs r1, #0x3f
	ldrb r0, [r3]
	ands r1, r0
	adds r2, r4, #0
	adds r2, #0x44
	movs r0, #0
	strb r0, [r2]
	adds r2, #1
	strb r0, [r2]
	adds r2, #1
	strb r0, [r2]
	movs r0, #0x20
	orrs r1, r0
	strb r1, [r3]
	adds r1, r4, #0
	adds r1, #0x3d
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r4, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r4, #1]
	movs r0, #2
	bl sub_080BAEFC
	adds r0, r6, #0
	bl sub_080BCFC4
	ldr r4, _080BC368 @ =0x08630288
	ldr r1, _080BC36C @ =0x06017000
	adds r0, r4, #0
	bl sub_08013688
	ldr r1, _080BC370 @ =0x06017400
	adds r0, r4, #0
	bl sub_08013688
	ldr r1, _080BC374 @ =0x06017800
	adds r0, r4, #0
	bl sub_08013688
	ldr r1, _080BC378 @ =0x06017C00
	adds r0, r4, #0
	bl sub_08013688
	ldr r0, _080BC37C @ =0x086618E8
	ldr r1, _080BC380 @ =0x08DB8FC4
	ldr r1, [r1]
	bl sub_08013688
	ldr r0, _080BC384 @ =0x086C261C
	ldr r1, _080BC388 @ =0x08DB8FC8
	ldr r1, [r1]
	bl sub_08013688
	ldr r0, _080BC38C @ =0x086C10D4
	ldr r1, _080BC390 @ =0x08DB8FCC
	ldr r1, [r1]
	bl sub_08013688
	ldr r0, _080BC394 @ =0x08DB9030
	adds r1, r6, #0
	bl Proc_Start
	movs r0, #3
	bl sub_08013200
	add sp, #0x24
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BC34C: .4byte 0x086C450C
_080BC350: .4byte 0x01000008
_080BC354: .4byte 0x06008000
_080BC358: .4byte 0x06010000
_080BC35C: .4byte gPal
_080BC360: .4byte 0x0864AD14
_080BC364: .4byte gDispIo
_080BC368: .4byte 0x08630288
_080BC36C: .4byte 0x06017000
_080BC370: .4byte 0x06017400
_080BC374: .4byte 0x06017800
_080BC378: .4byte 0x06017C00
_080BC37C: .4byte 0x086618E8
_080BC380: .4byte 0x08DB8FC4
_080BC384: .4byte 0x086C261C
_080BC388: .4byte 0x08DB8FC8
_080BC38C: .4byte 0x086C10D4
_080BC390: .4byte 0x08DB8FCC
_080BC394: .4byte 0x08DB9030

	thumb_func_start sub_080BC398
sub_080BC398: @ 0x080BC398
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r1, _080BC420 @ =gDispIo
	movs r2, #4
	rsbs r2, r2, #0
	adds r0, r2, #0
	ldrb r3, [r1, #0xc]
	ands r0, r3
	movs r3, #2
	orrs r0, r3
	strb r0, [r1, #0xc]
	adds r0, r2, #0
	ldrb r5, [r1, #0x10]
	ands r0, r5
	orrs r0, r3
	strb r0, [r1, #0x10]
	movs r0, #3
	ldrb r3, [r1, #0x14]
	orrs r0, r3
	strb r0, [r1, #0x14]
	ldrb r5, [r1, #0x18]
	ands r2, r5
	strb r2, [r1, #0x18]
	ldr r0, _080BC424 @ =0x0862E778
	movs r1, #0xa0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080BC428 @ =0x0862E798
	ldr r1, _080BC42C @ =0x0600C000
	bl sub_08013688
	ldr r0, _080BC430 @ =gBg3Tm
	ldr r1, _080BC434 @ =0x0862EA60
	movs r2, #0xa2
	lsls r2, r2, #8
	bl TmApplyTsa_thm
	movs r0, #8
	bl EnableBgSync
	movs r0, #0
	str r0, [r4, #0x2c]
	ldr r0, _080BC438 @ =0x08DB9A7C
	movs r2, #1
	rsbs r2, r2, #0
	str r4, [sp]
	movs r1, #2
	movs r3, #0
	bl sub_080BE2A8
	str r0, [r4, #0x3c]
	ldr r0, _080BC43C @ =0x086C08D0
	movs r1, #0x98
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080BC440 @ =0x086C08F0
	ldr r1, _080BC444 @ =0x06013000
	bl sub_08013688
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BC420: .4byte gDispIo
_080BC424: .4byte 0x0862E778
_080BC428: .4byte 0x0862E798
_080BC42C: .4byte 0x0600C000
_080BC430: .4byte gBg3Tm
_080BC434: .4byte 0x0862EA60
_080BC438: .4byte 0x08DB9A7C
_080BC43C: .4byte 0x086C08D0
_080BC440: .4byte 0x086C08F0
_080BC444: .4byte 0x06013000

	thumb_func_start sub_080BC448
sub_080BC448: @ 0x080BC448
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, [r4, #0x2c]
	adds r2, #1
	str r2, [r4, #0x2c]
	ldr r0, _080BC4C0 @ =gDispIo
	mov ip, r0
	mov r3, ip
	adds r3, #0x3c
	movs r0, #0x3f
	ldrb r1, [r3]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r3]
	asrs r2, r2, #1
	movs r0, #0x10
	subs r0, r0, r2
	mov r1, ip
	adds r1, #0x44
	movs r3, #0
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r3, [r0]
	ldr r0, _080BC4C4 @ =0x0000FFE0
	mov r3, ip
	ldrh r3, [r3, #0x3c]
	ands r0, r3
	movs r1, #8
	orrs r0, r1
	ldr r1, _080BC4C8 @ =0x0000E0FF
	ands r0, r1
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r3, #0
	orrs r0, r1
	mov r1, ip
	strh r0, [r1, #0x3c]
	cmp r2, #0x10
	bne _080BC4B8
	ldr r0, _080BC4CC @ =gBg3Tm
	movs r1, #0
	bl TmFill
	movs r0, #8
	bl EnableBgSync
	adds r0, r4, #0
	bl Proc_Break
	adds r0, r4, #0
	bl sub_080BE0A0
_080BC4B8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BC4C0: .4byte gDispIo
_080BC4C4: .4byte 0x0000FFE0
_080BC4C8: .4byte 0x0000E0FF
_080BC4CC: .4byte gBg3Tm

	thumb_func_start sub_080BC4D0
sub_080BC4D0: @ 0x080BC4D0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080BC520 @ =0x0864AC94
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080BC524 @ =0x086496C8
	ldr r1, _080BC528 @ =0x06008000
	bl sub_08013688
	ldr r0, _080BC52C @ =gBg0Tm
	ldr r1, _080BC530 @ =0x0864A790
	movs r2, #0xe0
	lsls r2, r2, #8
	bl TmApplyTsa_thm
	ldr r2, _080BC534 @ =gDispIo
	movs r0, #0x3f
	ldrb r1, [r2, #0xd]
	ands r0, r1
	movs r1, #0x20
	orrs r0, r1
	strb r0, [r2, #0xd]
	movs r0, #1
	bl EnableBgSync
	bl sub_080BBAFC
	ldr r2, _080BC538 @ =0x03001620
	ldr r0, [r2]
	movs r1, #1
	orrs r0, r1
	str r0, [r2]
	movs r0, #0
	str r0, [r4, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BC520: .4byte 0x0864AC94
_080BC524: .4byte 0x086496C8
_080BC528: .4byte 0x06008000
_080BC52C: .4byte gBg0Tm
_080BC530: .4byte 0x0864A790
_080BC534: .4byte gDispIo
_080BC538: .4byte 0x03001620

	thumb_func_start sub_080BC53C
sub_080BC53C: @ 0x080BC53C
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r2, [r4, #0x2c]
	adds r2, #1
	str r2, [r4, #0x2c]
	ldr r0, _080BC5A4 @ =gDispIo
	mov ip, r0
	mov r3, ip
	adds r3, #0x3c
	movs r0, #0x3f
	ldrb r1, [r3]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r3]
	asrs r2, r2, #2
	mov r0, ip
	adds r0, #0x44
	movs r3, #0
	strb r2, [r0]
	movs r0, #0x10
	subs r0, r0, r2
	mov r1, ip
	adds r1, #0x45
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x46
	strb r3, [r0]
	ldr r0, _080BC5A8 @ =0x0000FFE0
	mov r5, ip
	ldrh r5, [r5, #0x3c]
	ands r0, r5
	movs r1, #1
	orrs r0, r1
	ldr r1, _080BC5AC @ =0x0000E0FF
	ands r0, r1
	movs r5, #0xf8
	lsls r5, r5, #5
	adds r1, r5, #0
	orrs r0, r1
	mov r1, ip
	strh r0, [r1, #0x3c]
	cmp r2, #0x10
	bne _080BC59C
	str r3, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
_080BC59C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BC5A4: .4byte gDispIo
_080BC5A8: .4byte 0x0000FFE0
_080BC5AC: .4byte 0x0000E0FF

	thumb_func_start sub_080BC5B0
sub_080BC5B0: @ 0x080BC5B0
	push {lr}
	ldr r0, _080BC5C0 @ =0x0864ACF4
	movs r1, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r0}
	bx r0
	.align 2, 0
_080BC5C0: .4byte 0x0864ACF4

	thumb_func_start sub_080BC5C4
sub_080BC5C4: @ 0x080BC5C4
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r0, #0x5c
	movs r1, #0x1e
	movs r2, #0
	bl sub_08003788
	ldr r6, _080BC654 @ =gDispIo
	movs r0, #4
	rsbs r0, r0, #0
	ldrb r1, [r6, #0xc]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r6, #0xc]
	movs r0, #3
	ldrb r1, [r6, #0x10]
	orrs r1, r0
	strb r1, [r6, #0x10]
	ldrb r1, [r6, #0x14]
	orrs r1, r0
	strb r1, [r6, #0x14]
	ldrb r2, [r6, #0x18]
	orrs r0, r2
	strb r0, [r6, #0x18]
	ldr r0, _080BC658 @ =0x086284F8
	movs r1, #0x88
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #4
	bl EnableBgSync
	movs r4, #0
	str r4, [r5, #0x2c]
	movs r0, #0
	bl sub_080BD4F4
	bl sub_080AA230
	ldr r0, _080BC65C @ =sub_080BC1E8
	adds r1, r5, #0
	bl sub_080AA20C
	adds r0, r5, #0
	bl sub_080BD83C
	adds r1, r6, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r0, r6, #0
	adds r0, #0x44
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	ldr r2, _080BC660 @ =0x03001620
	ldr r0, [r2]
	movs r1, #0x80
	orrs r0, r1
	str r0, [r2]
	str r4, [r5, #0x30]
	str r4, [r5, #0x38]
	str r4, [r5, #0x34]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BC654: .4byte gDispIo
_080BC658: .4byte 0x086284F8
_080BC65C: .4byte sub_080BC1E8
_080BC660: .4byte 0x03001620

	thumb_func_start sub_080BC664
sub_080BC664: @ 0x080BC664
	push {lr}
	sub sp, #8
	ldr r0, _080BC684 @ =0x086C0C4C
	movs r3, #0xe6
	lsls r3, r3, #6
	movs r1, #0
	str r1, [sp]
	movs r1, #0xa
	str r1, [sp, #4]
	movs r1, #0x78
	movs r2, #0x50
	bl sub_08012AF0
	add sp, #8
	pop {r0}
	bx r0
	.align 2, 0
_080BC684: .4byte 0x086C0C4C

	thumb_func_start sub_080BC688
sub_080BC688: @ 0x080BC688
	push {r4, lr}
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r4, _080BC710 @ =gBg0Tm
	adds r0, r4, #0
	movs r1, #0
	bl TmFill
	ldr r0, _080BC714 @ =0x086C10B4
	movs r1, #0xd0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080BC718 @ =0x08DB8FCC
	ldr r0, [r0]
	ldr r1, _080BC71C @ =0x06008000
	movs r2, #0x80
	lsls r2, r2, #4
	bl CpuFastSet
	ldr r1, _080BC720 @ =0x086C2238
	movs r2, #0xd0
	lsls r2, r2, #8
	adds r0, r4, #0
	bl TmApplyTsa_thm
	movs r0, #1
	bl EnableBgSync
	ldr r3, _080BC724 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r2, #9
	movs r0, #0x10
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x46
	strb r1, [r0]
	ldr r0, _080BC728 @ =0x0000FFE0
	ldrh r2, [r3, #0x3c]
	ands r0, r2
	movs r1, #1
	orrs r0, r1
	ldr r1, _080BC72C @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xf8
	lsls r2, r2, #5
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BC710: .4byte gBg0Tm
_080BC714: .4byte 0x086C10B4
_080BC718: .4byte 0x08DB8FCC
_080BC71C: .4byte 0x06008000
_080BC720: .4byte 0x086C2238
_080BC724: .4byte gDispIo
_080BC728: .4byte 0x0000FFE0
_080BC72C: .4byte 0x0000E0FF

	thumb_func_start sub_080BC730
sub_080BC730: @ 0x080BC730
	push {r4, lr}
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r4, _080BC7B8 @ =gBg0Tm
	adds r0, r4, #0
	movs r1, #0
	bl TmFill
	ldr r0, _080BC7BC @ =0x086C25FC
	movs r1, #0xd0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080BC7C0 @ =0x08DB8FC8
	ldr r0, [r0]
	ldr r1, _080BC7C4 @ =0x06008000
	movs r2, #0x80
	lsls r2, r2, #4
	bl CpuFastSet
	ldr r1, _080BC7C8 @ =0x086C38F4
	movs r2, #0xd0
	lsls r2, r2, #8
	adds r0, r4, #0
	bl TmApplyTsa_thm
	movs r0, #1
	bl EnableBgSync
	ldr r3, _080BC7CC @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r2, #9
	movs r0, #0x10
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x46
	strb r1, [r0]
	ldr r0, _080BC7D0 @ =0x0000FFE0
	ldrh r2, [r3, #0x3c]
	ands r0, r2
	movs r1, #1
	orrs r0, r1
	ldr r1, _080BC7D4 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xf8
	lsls r2, r2, #5
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BC7B8: .4byte gBg0Tm
_080BC7BC: .4byte 0x086C25FC
_080BC7C0: .4byte 0x08DB8FC8
_080BC7C4: .4byte 0x06008000
_080BC7C8: .4byte 0x086C38F4
_080BC7CC: .4byte gDispIo
_080BC7D0: .4byte 0x0000FFE0
_080BC7D4: .4byte 0x0000E0FF

	thumb_func_start sub_080BC7D8
sub_080BC7D8: @ 0x080BC7D8
	push {r4, lr}
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	bl sub_080BBD28
	ldr r4, _080BC830 @ =gBg0Tm
	adds r0, r4, #0
	movs r1, #0
	bl TmFill
	ldr r0, _080BC834 @ =0x08661544
	movs r1, #0xd0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080BC838 @ =0x08DB8FC4
	ldr r0, [r0]
	ldr r1, _080BC83C @ =0x06008000
	movs r2, #0x80
	lsls r2, r2, #3
	bl CpuFastSet
	adds r4, #0x80
	ldr r1, _080BC840 @ =0x08661564
	movs r2, #0xd0
	lsls r2, r2, #8
	adds r0, r4, #0
	bl TmApplyTsa_thm
	ldr r2, _080BC844 @ =0x03001620
	ldr r0, [r2]
	movs r1, #0x20
	orrs r0, r1
	str r0, [r2]
	movs r0, #1
	bl EnableBgSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BC830: .4byte gBg0Tm
_080BC834: .4byte 0x08661544
_080BC838: .4byte 0x08DB8FC4
_080BC83C: .4byte 0x06008000
_080BC840: .4byte 0x08661564
_080BC844: .4byte 0x03001620

	thumb_func_start sub_080BC848
sub_080BC848: @ 0x080BC848
	ldr r0, _080BC854 @ =0x03001620
	ldr r1, [r0]
	movs r2, #0x40
	orrs r1, r2
	str r1, [r0]
	bx lr
	.align 2, 0
_080BC854: .4byte 0x03001620

	thumb_func_start sub_080BC858
sub_080BC858: @ 0x080BC858
	push {lr}
	sub sp, #0xc
	movs r3, #1
	rsbs r3, r3, #0
	ldr r1, _080BC87C @ =0x0864AD34
	ldr r2, _080BC880 @ =0x0000FFFF
	str r2, [sp]
	movs r2, #8
	str r2, [sp, #4]
	str r0, [sp, #8]
	adds r0, r3, #0
	movs r2, #0
	movs r3, #0x10
	bl sub_080BDD34
	add sp, #0xc
	pop {r0}
	bx r0
	.align 2, 0
_080BC87C: .4byte 0x0864AD34
_080BC880: .4byte 0x0000FFFF

	thumb_func_start sub_080BC884
sub_080BC884: @ 0x080BC884
	push {r4, lr}
	sub sp, #0xc
	adds r4, r0, #0
	bl sub_080BC664
	movs r0, #1
	rsbs r0, r0, #0
	ldr r1, _080BC8B0 @ =0x0864AD54
	ldr r2, _080BC8B4 @ =0x0000FFFF
	str r2, [sp]
	movs r2, #8
	str r2, [sp, #4]
	str r4, [sp, #8]
	movs r2, #0
	movs r3, #0x10
	bl sub_080BDD34
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BC8B0: .4byte 0x0864AD54
_080BC8B4: .4byte 0x0000FFFF

	thumb_func_start sub_080BC8B8
sub_080BC8B8: @ 0x080BC8B8
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r1, [r4, #0x38]
	ldr r2, [r4, #0x30]
	cmp r1, r2
	ble _080BC8DC
	ldr r0, [r4, #0x34]
	adds r0, r2, r0
	str r0, [r4, #0x30]
	cmp r0, r1
	ble _080BC8D2
	str r1, [r4, #0x30]
_080BC8D2:
	ldr r0, [r4, #0x3c]
	ldr r1, [r4, #0x30]
	rsbs r1, r1, #0
	bl sub_080BE1CC
_080BC8DC:
	ldr r1, [r4, #0x38]
	ldr r2, [r4, #0x30]
	cmp r1, r2
	bge _080BC8FA
	ldr r0, [r4, #0x34]
	subs r0, r2, r0
	str r0, [r4, #0x30]
	cmp r0, r1
	bge _080BC8F0
	str r1, [r4, #0x30]
_080BC8F0:
	ldr r0, [r4, #0x3c]
	ldr r1, [r4, #0x30]
	rsbs r1, r1, #0
	bl sub_080BE1CC
_080BC8FA:
	ldr r1, [r4, #0x2c]
	ldr r0, _080BC928 @ =0x000008A2
	cmp r1, r0
	bne _080BC904
	b _080BCA0E
_080BC904:
	cmp r1, r0
	bgt _080BC958
	movs r0, #0xaf
	lsls r0, r0, #3
	cmp r1, r0
	beq _080BC9E0
	cmp r1, r0
	bgt _080BC938
	subs r0, #0xb4
	cmp r1, r0
	beq _080BC9C4
	cmp r1, r0
	bgt _080BC92C
	movs r0, #0x96
	lsls r0, r0, #1
	cmp r1, r0
	beq _080BC9B8
	b _080BCA9C
	.align 2, 0
_080BC928: .4byte 0x000008A2
_080BC92C:
	ldr r0, _080BC934 @ =0x0000053C
	cmp r1, r0
	beq _080BC9D0
	b _080BCA9C
	.align 2, 0
_080BC934: .4byte 0x0000053C
_080BC938:
	movs r0, #0xdc
	lsls r0, r0, #3
	cmp r1, r0
	beq _080BCA04
	cmp r1, r0
	bgt _080BC94C
	subs r0, #0xb4
	cmp r1, r0
	beq _080BC9EC
	b _080BCA9C
_080BC94C:
	ldr r0, _080BC954 @ =0x0000080C
	cmp r1, r0
	beq _080BCA0E
	b _080BCA9C
	.align 2, 0
_080BC954: .4byte 0x0000080C
_080BC958:
	ldr r0, _080BC97C @ =0x00000B68
	cmp r1, r0
	bne _080BC960
	b _080BCA4C
_080BC960:
	cmp r1, r0
	bgt _080BC98C
	movs r0, #0xa0
	lsls r0, r0, #4
	cmp r1, r0
	bne _080BC96E
	b _080BCA84
_080BC96E:
	cmp r1, r0
	bgt _080BC980
	subs r0, #0xc8
	cmp r1, r0
	beq _080BCA16
	b _080BCA9C
	.align 2, 0
_080BC97C: .4byte 0x00000B68
_080BC980:
	ldr r0, _080BC988 @ =0x00000B2C
	cmp r1, r0
	beq _080BCA34
	b _080BCA9C
	.align 2, 0
_080BC988: .4byte 0x00000B2C
_080BC98C:
	ldr r0, _080BC9A0 @ =0x00000C58
	cmp r1, r0
	bne _080BC994
	b _080BCA84
_080BC994:
	cmp r1, r0
	bgt _080BC9A4
	subs r0, #0x64
	cmp r1, r0
	beq _080BCA6C
	b _080BCA9C
	.align 2, 0
_080BC9A0: .4byte 0x00000C58
_080BC9A4:
	ldr r0, _080BC9B4 @ =0x00000E74
	cmp r1, r0
	beq _080BCA8E
	movs r0, #0xfa
	lsls r0, r0, #4
	cmp r1, r0
	beq _080BCA96
	b _080BCA9C
	.align 2, 0
_080BC9B4: .4byte 0x00000E74
_080BC9B8:
	movs r0, #0xfa
	lsls r0, r0, #2
	adds r1, r4, #0
	bl sub_080BD464
	b _080BCA9C
_080BC9C4:
	ldr r0, _080BC9D8 @ =0x03001620
	ldr r1, [r0]
	movs r2, #0x80
	lsls r2, r2, #2
	orrs r1, r2
	str r1, [r0]
_080BC9D0:
	movs r0, #1
	rsbs r0, r0, #0
	ldr r1, _080BC9DC @ =0x0864ACD4
	b _080BCA72
	.align 2, 0
_080BC9D8: .4byte 0x03001620
_080BC9DC: .4byte 0x0864ACD4
_080BC9E0:
	movs r0, #0x20
	str r0, [r4, #0x34]
	movs r0, #0x80
	lsls r0, r0, #2
	str r0, [r4, #0x38]
	b _080BCA9C
_080BC9EC:
	ldr r0, _080BCA00 @ =0x03001620
	ldr r1, [r0]
	movs r2, #0x80
	lsls r2, r2, #3
	orrs r1, r2
	str r1, [r0]
	bl sub_080BC7D8
	b _080BCA9C
	.align 2, 0
_080BCA00: .4byte 0x03001620
_080BCA04:
	movs r0, #0x20
	str r0, [r4, #0x34]
	movs r0, #0
	str r0, [r4, #0x38]
	b _080BCA9C
_080BCA0E:
	adds r0, r4, #0
	bl sub_080BC858
	b _080BCA9C
_080BCA16:
	adds r0, r4, #0
	bl sub_080BC884
	ldr r0, _080BCA2C @ =0x03001620
	ldr r1, [r0]
	ldr r2, _080BCA30 @ =0xFFFFF9FF
	ands r1, r2
	str r1, [r0]
	bl sub_080BC848
	b _080BCA9C
	.align 2, 0
_080BCA2C: .4byte 0x03001620
_080BCA30: .4byte 0xFFFFF9FF
_080BCA34:
	adds r0, r4, #0
	bl sub_080BC858
	ldr r0, _080BCA48 @ =0x03001620
	ldr r1, [r0]
	movs r2, #0x80
	lsls r2, r2, #4
	orrs r1, r2
	str r1, [r0]
	b _080BCA9C
	.align 2, 0
_080BCA48: .4byte 0x03001620
_080BCA4C:
	movs r0, #0x10
	str r0, [r4, #0x34]
	movs r0, #0xc0
	lsls r0, r0, #1
	str r0, [r4, #0x38]
	ldr r2, _080BCA64 @ =0x03001620
	ldr r0, [r2]
	ldr r1, _080BCA68 @ =0xFFFFF7FF
	ands r0, r1
	str r0, [r2]
	b _080BCA9C
	.align 2, 0
_080BCA64: .4byte 0x03001620
_080BCA68: .4byte 0xFFFFF7FF
_080BCA6C:
	movs r0, #1
	rsbs r0, r0, #0
	ldr r1, _080BCA80 @ =0x0864ACB4
_080BCA72:
	str r4, [sp]
	movs r2, #0
	movs r3, #1
	bl sub_080BDC2C
	b _080BCA9C
	.align 2, 0
_080BCA80: .4byte 0x0864ACB4
_080BCA84:
	movs r0, #0x10
	str r0, [r4, #0x34]
	adds r0, #0xf0
	str r0, [r4, #0x38]
	b _080BCA9C
_080BCA8E:
	adds r0, r4, #0
	bl sub_080BD4E0
	b _080BCA9C
_080BCA96:
	adds r0, r4, #0
	bl Proc_Break
_080BCA9C:
	ldr r0, [r4, #0x2c]
	adds r0, #1
	str r0, [r4, #0x2c]
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080BCAAC
sub_080BCAAC: @ 0x080BCAAC
	push {lr}
	movs r1, #0
	str r1, [r0, #0x2c]
	ldr r2, _080BCAC8 @ =0x03001620
	ldr r0, [r2]
	movs r1, #0x80
	lsls r1, r1, #1
	orrs r0, r1
	str r0, [r2]
	bl sub_08013BCC
	pop {r0}
	bx r0
	.align 2, 0
_080BCAC8: .4byte 0x03001620

	thumb_func_start sub_080BCACC
sub_080BCACC: @ 0x080BCACC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x2c]
	lsls r4, r0, #3
	movs r1, #0x80
	lsls r1, r1, #1
	adds r4, r4, r1
	adds r0, #1
	str r0, [r5, #0x2c]
	adds r0, r4, #0
	adds r1, r4, #0
	adds r2, r4, #0
	movs r3, #1
	bl sub_08013C48
	movs r0, #0x80
	lsls r0, r0, #2
	cmp r4, r0
	bne _080BCAF8
	adds r0, r5, #0
	bl Proc_Break
_080BCAF8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080BCB00
sub_080BCB00: @ 0x080BCB00
	push {lr}
	movs r0, #2
	bl EnableBgSync
	pop {r0}
	bx r0

	thumb_func_start sub_080BCB0C
sub_080BCB0C: @ 0x080BCB0C
	push {lr}
	sub sp, #4
	movs r0, #0
	bl SetOnHBlankA
	bl sub_080BCFD8
	bl sub_080AB348
	movs r0, #0
	str r0, [sp]
	ldr r1, _080BCB60 @ =gPal
	ldr r2, _080BCB64 @ =0x01000008
	mov r0, sp
	bl CpuFastSet
	bl EnablePalSync
	ldr r2, _080BCB68 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #2
	bl sub_080BAEFC
	bl EndEachSpriteAnimProc
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_080BCB60: .4byte gPal
_080BCB64: .4byte 0x01000008
_080BCB68: .4byte gDispIo

	thumb_func_start sub_080BCB6C
sub_080BCB6C: @ 0x080BCB6C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r6, _080BCBEC @ =gDispIo
	adds r1, r6, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r0, r6, #0
	adds r0, #0x44
	movs r4, #0
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	ldr r2, _080BCBF0 @ =0x03001620
	ldr r0, [r2]
	ldr r1, _080BCBF4 @ =0xFFFFFE1E
	ands r0, r1
	str r0, [r2]
	str r4, [sp]
	ldr r1, _080BCBF8 @ =0x06017000
	ldr r2, _080BCBFC @ =0x01000400
	mov r0, sp
	bl CpuFastSet
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r6, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r6, #1]
	ldr r0, _080BCC00 @ =0x086284F8
	movs r1, #0x88
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080BCC04 @ =0x0862B5B4
	movs r1, #0
	bl sub_080BD534
	ldr r0, _080BCC08 @ =0x0862E4D0
	movs r1, #0x80
	lsls r1, r1, #4
	bl sub_080BD534
	str r4, [r5, #0x2c]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BCBEC: .4byte gDispIo
_080BCBF0: .4byte 0x03001620
_080BCBF4: .4byte 0xFFFFFE1E
_080BCBF8: .4byte 0x06017000
_080BCBFC: .4byte 0x01000400
_080BCC00: .4byte 0x086284F8
_080BCC04: .4byte 0x0862B5B4
_080BCC08: .4byte 0x0862E4D0

	thumb_func_start sub_080BCC0C
sub_080BCC0C: @ 0x080BCC0C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r6, r0, #0
	ldr r7, [r6, #0x2c]
	adds r0, r7, #0
	movs r1, #0x78
	bl __modsi3
	cmp r0, #0
	bge _080BCC2A
	adds r0, #7
_080BCC2A:
	asrs r4, r0, #3
	lsls r0, r4, #1
	mov sb, r0
	adds r0, r7, #0
	movs r1, #0x78
	bl __divsi3
	adds r5, r0, #0
	lsls r0, r5, #1
	mov r8, r0
	movs r0, #8
	mov sl, r0
	str r0, [sp]
	lsls r4, r4, #6
	str r4, [sp, #4]
	str r7, [sp, #8]
	mov r0, sb
	mov r1, r8
	movs r2, #2
	movs r3, #2
	bl sub_080BD54C
	mov r0, sl
	str r0, [sp]
	lsls r5, r5, #0xb
	movs r0, #0x80
	lsls r0, r0, #4
	adds r5, r5, r0
	adds r4, r4, r5
	str r4, [sp, #4]
	ldr r0, [r6, #0x2c]
	str r0, [sp, #8]
	mov r0, sb
	mov r1, r8
	movs r2, #2
	movs r3, #2
	bl sub_080BD54C
	ldr r0, [r6, #0x2c]
	cmp r0, #0x78
	bne _080BCC88
	movs r0, #0
	str r0, [r6, #0x2c]
	adds r0, r6, #0
	bl Proc_Break
	b _080BCC8C
_080BCC88:
	adds r0, #1
	str r0, [r6, #0x2c]
_080BCC8C:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080BCC9C
sub_080BCC9C: @ 0x080BCC9C
	push {r4, r5, lr}
	sub sp, #0xc
	adds r5, r0, #0
	ldr r0, [r5, #0x2c]
	cmp r0, #0
	bne _080BCCB2
	movs r0, #0x5f
	movs r1, #0
	movs r2, #0
	bl sub_08003788
_080BCCB2:
	ldr r1, [r5, #0x2c]
	cmp r1, #0x1f
	bgt _080BCCEC
	movs r4, #2
	str r4, [sp]
	movs r0, #0
	str r0, [sp, #4]
	str r1, [sp, #8]
	movs r1, #0
	movs r2, #0x20
	movs r3, #2
	bl sub_080BD614
	str r4, [sp]
	movs r0, #0x80
	lsls r0, r0, #4
	str r0, [sp, #4]
	ldr r0, [r5, #0x2c]
	str r0, [sp, #8]
	movs r0, #0
	movs r1, #0
	movs r2, #0x20
	movs r3, #2
	bl sub_080BD614
	ldr r0, [r5, #0x2c]
	adds r0, #1
	str r0, [r5, #0x2c]
	b _080BCCF2
_080BCCEC:
	adds r0, r5, #0
	bl Proc_Break
_080BCCF2:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start nullsub_92
nullsub_92: @ 0x080BCCFC
	bx lr
	.align 2, 0

	thumb_func_start sub_080BCD00
sub_080BCD00: @ 0x080BCD00
	push {lr}
	sub sp, #4
	adds r2, r0, #0
	adds r0, #0x39
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080BCD28
	ldr r0, [r2, #0x54]
	cmp r0, #1
	bne _080BCD28
	ldr r0, _080BCD30 @ =0x086A511C
	adds r1, r0, #0
	adds r1, #0x20
	str r2, [sp]
	movs r2, #0xa
	movs r3, #0x10
	bl sub_080BDC2C
_080BCD28:
	movs r0, #0
	add sp, #4
	pop {r1}
	bx r1
	.align 2, 0
_080BCD30: .4byte 0x086A511C

	thumb_func_start sub_080BCD34
sub_080BCD34: @ 0x080BCD34
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x14
	mov r8, r0
	ldr r7, _080BCE5C @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r7, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r7, #1]
	ldr r0, _080BCE60 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r6, _080BCE64 @ =gBg1Tm
	adds r0, r6, #0
	movs r1, #0
	bl TmFill
	ldr r0, _080BCE68 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r0, _080BCE6C @ =gBg3Tm
	movs r1, #0
	bl TmFill
	bl sub_080AA230
	movs r2, #4
	rsbs r2, r2, #0
	adds r0, r2, #0
	ldrb r1, [r7, #0xc]
	ands r0, r1
	strb r0, [r7, #0xc]
	adds r0, r2, #0
	ldrb r1, [r7, #0x10]
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	strb r0, [r7, #0x10]
	movs r0, #3
	ldrb r1, [r7, #0x14]
	orrs r0, r1
	strb r0, [r7, #0x14]
	ldrb r0, [r7, #0x18]
	ands r2, r0
	movs r0, #2
	orrs r2, r0
	strb r2, [r7, #0x18]
	ldr r0, _080BCE70 @ =0x08DBA048
	movs r5, #0
	str r5, [sp]
	movs r1, #0x80
	lsls r1, r1, #7
	str r1, [sp, #4]
	movs r1, #0xa
	str r1, [sp, #8]
	ldr r1, _080BCE74 @ =sub_080BCD00
	str r1, [sp, #0xc]
	mov r1, r8
	str r1, [sp, #0x10]
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_080AB654
	ldr r1, _080BCE78 @ =0x03001620
	ldr r0, [r1]
	movs r4, #0x10
	orrs r0, r4
	str r0, [r1]
	ldr r0, _080BCE7C @ =0x086BF37C
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080BCE80 @ =0x086BF39C
	movs r1, #0xc0
	lsls r1, r1, #0x13
	bl sub_08013688
	ldr r1, _080BCE84 @ =0x086C0674
	movs r2, #0xe0
	lsls r2, r2, #8
	adds r0, r6, #0
	bl TmApplyTsa_thm
	ldr r0, _080BCE88 @ =0x0862F448
	movs r1, #0xc0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080BCE8C @ =0x0862F468
	ldr r1, _080BCE90 @ =0x06010000
	bl sub_08013688
	adds r2, r7, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r7, #0
	adds r0, #0x44
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r0, #1
	strb r5, [r0]
	ldr r0, _080BCE94 @ =0x0000FFE0
	ldrh r2, [r7, #0x3c]
	ands r0, r2
	movs r1, #1
	orrs r0, r1
	ldr r1, _080BCE98 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #2
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r7, #0x3c]
	mov r0, r8
	str r5, [r0, #0x2c]
	movs r0, #0xf
	bl EnableBgSync
	add sp, #0x14
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BCE5C: .4byte gDispIo
_080BCE60: .4byte gBg0Tm
_080BCE64: .4byte gBg1Tm
_080BCE68: .4byte gBg2Tm
_080BCE6C: .4byte gBg3Tm
_080BCE70: .4byte 0x08DBA048
_080BCE74: .4byte sub_080BCD00
_080BCE78: .4byte 0x03001620
_080BCE7C: .4byte 0x086BF37C
_080BCE80: .4byte 0x086BF39C
_080BCE84: .4byte 0x086C0674
_080BCE88: .4byte 0x0862F448
_080BCE8C: .4byte 0x0862F468
_080BCE90: .4byte 0x06010000
_080BCE94: .4byte 0x0000FFE0
_080BCE98: .4byte 0x0000E0FF

	thumb_func_start sub_080BCE9C
sub_080BCE9C: @ 0x080BCE9C
	ldr r2, _080BCEB8 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_080BCEB8: .4byte gDispIo

	thumb_func_start sub_080BCEBC
sub_080BCEBC: @ 0x080BCEBC
	push {r4, r5, r6, lr}
	sub sp, #0x20
	adds r5, r0, #0
	mov r0, sp
	ldr r1, _080BCF88 @ =0x086C4524
	ldm r1!, {r2, r3, r4}
	stm r0!, {r2, r3, r4}
	ldm r1!, {r2, r3, r4}
	stm r0!, {r2, r3, r4}
	ldm r1!, {r2, r3}
	stm r0!, {r2, r3}
	ldr r0, [r5, #0x2c]
	movs r1, #0xa
	bl __divsi3
	adds r6, r0, #0
	cmp r6, #0xf
	bgt _080BCF08
	ldr r4, _080BCF8C @ =gDispIo
	adds r2, r4, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r2, #8
	movs r3, #0
	movs r1, #0x10
	movs r0, #0x10
	strb r0, [r2]
	subs r1, r1, r6
	adds r0, r4, #0
	adds r0, #0x45
	strb r1, [r0]
	adds r0, #1
	strb r3, [r0]
_080BCF08:
	ldr r4, [r5, #0x2c]
	adds r0, r4, #0
	movs r1, #0x10
	bl __modsi3
	cmp r0, #0
	bne _080BCF32
	adds r0, r4, #0
	movs r1, #0x10
	bl __divsi3
	adds r2, r0, #0
	cmp r2, #7
	bgt _080BCF32
	lsls r0, r2, #2
	add r0, sp
	ldr r1, [r0]
	adds r0, r2, #0
	adds r2, r5, #0
	bl sub_080BDB24
_080BCF32:
	ldr r0, [r5, #0x2c]
	cmp r0, #0xa0
	bne _080BCF78
	ldr r0, _080BCF90 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl EnableBgSync
	ldr r2, _080BCF8C @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x44
	movs r4, #0
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	movs r0, #0
	bl sub_080AB634
	adds r0, r5, #0
	bl Proc_Break
	ldr r0, _080BCF94 @ =gPal
	strh r4, [r0]
	bl EnablePalSync
_080BCF78:
	ldr r0, [r5, #0x2c]
	adds r0, #1
	str r0, [r5, #0x2c]
	add sp, #0x20
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BCF88: .4byte 0x086C4524
_080BCF8C: .4byte gDispIo
_080BCF90: .4byte gBg1Tm
_080BCF94: .4byte gPal

	thumb_func_start sub_080BCF98
sub_080BCF98: @ 0x080BCF98
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080BCFC0 @ =gpKeySt
	ldr r1, [r0]
	movs r0, #0xb
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080BCFB8
	movs r0, #2
	bl sub_08013200
	ldr r0, [r4, #0x14]
	movs r1, #0x63
	bl Proc_Goto
_080BCFB8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BCFC0: .4byte gpKeySt

	thumb_func_start sub_080BCFC4
sub_080BCFC4: @ 0x080BCFC4
	push {lr}
	adds r1, r0, #0
	ldr r0, _080BCFD4 @ =0x08DB91A8
	bl Proc_Start
	pop {r0}
	bx r0
	.align 2, 0
_080BCFD4: .4byte 0x08DB91A8

	thumb_func_start sub_080BCFD8
sub_080BCFD8: @ 0x080BCFD8
	push {lr}
	ldr r0, _080BCFE8 @ =0x08DB91A8
	bl Proc_Find
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_080BCFE8: .4byte 0x08DB91A8

	thumb_func_start sub_080BCFEC
sub_080BCFEC: @ 0x080BCFEC
	adds r1, r0, #0
	movs r2, #0
	b _080BCFF6
_080BCFF2:
	adds r2, #1
	adds r1, #0xc
_080BCFF6:
	ldr r0, [r1]
	cmp r0, #0
	bne _080BCFF2
	adds r0, r2, #0
	bx lr

	thumb_func_start sub_080BD000
sub_080BD000: @ 0x080BD000
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, _080BD098 @ =0x08630338
	movs r1, #0xf0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r4, #0
	str r4, [sp]
	ldr r1, _080BD09C @ =0x0600C000
	ldr r2, _080BD0A0 @ =0x01001000
	mov r0, sp
	bl CpuFastSet
	ldr r3, _080BD0A4 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	movs r0, #3
	ldrb r2, [r3, #0x10]
	orrs r2, r0
	strb r2, [r3, #0x10]
	ldrb r2, [r3, #0x14]
	orrs r0, r2
	strb r0, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x18]
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	ldr r0, _080BD0A8 @ =0x0000FFE0
	ldrh r2, [r3, #0x3c]
	ands r0, r2
	movs r1, #1
	orrs r0, r1
	ldr r1, _080BD0AC @ =0x0000E0FF
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	ldr r0, _080BD0B0 @ =0x08DB95D8
	str r0, [r5, #0x3c]
	str r4, [r5, #0x2c]
	movs r1, #1
	str r1, [r5, #0x30]
	bl sub_080BCFEC
	str r0, [r5, #0x34]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BD098: .4byte 0x08630338
_080BD09C: .4byte 0x0600C000
_080BD0A0: .4byte 0x01001000
_080BD0A4: .4byte gDispIo
_080BD0A8: .4byte 0x0000FFE0
_080BD0AC: .4byte 0x0000E0FF
_080BD0B0: .4byte 0x08DB95D8

	thumb_func_start sub_080BD0B4
sub_080BD0B4: @ 0x080BD0B4
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	movs r1, #3
	bl __modsi3
	cmp r0, #1
	beq _080BD0EC
	cmp r0, #1
	bgt _080BD0CE
	cmp r0, #0
	beq _080BD0D4
	b _080BD128
_080BD0CE:
	cmp r0, #2
	beq _080BD104
	b _080BD128
_080BD0D4:
	ldr r0, [r4, #0x3c]
	ldr r0, [r0]
	ldr r1, [r4, #0x30]
	lsls r1, r1, #0xd
	ldr r2, _080BD0E8 @ =0x0600C000
	adds r1, r1, r2
	bl sub_08013688
	b _080BD128
	.align 2, 0
_080BD0E8: .4byte 0x0600C000
_080BD0EC:
	ldr r0, [r4, #0x3c]
	ldr r0, [r0, #4]
	ldr r1, [r4, #0x30]
	lsls r1, r1, #0xd
	ldr r3, _080BD100 @ =0x0600D000
	adds r1, r1, r3
	bl sub_08013688
	b _080BD128
	.align 2, 0
_080BD100: .4byte 0x0600D000
_080BD104:
	ldr r0, _080BD18C @ =gBg3Tm
	ldr r1, [r4, #0x3c]
	ldr r1, [r1, #8]
	ldr r2, [r4, #0x30]
	lsls r2, r2, #0x18
	movs r3, #0xf2
	lsls r3, r3, #0x18
	adds r2, r2, r3
	lsrs r2, r2, #0x10
	bl TmApplyTsa_thm
	ldr r1, [r4, #0x30]
	movs r0, #1
	subs r0, r0, r1
	str r0, [r4, #0x30]
	movs r0, #8
	bl EnableBgSync
_080BD128:
	ldr r0, [r4, #0x2c]
	adds r5, r0, #1
	str r5, [r4, #0x2c]
	lsls r0, r5, #4
	ldr r6, [r4, #0x34]
	lsls r1, r6, #1
	adds r1, r1, r6
	bl __divsi3
	adds r7, r0, #0
	ldr r3, _080BD190 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	movs r0, #0x10
	subs r0, r0, r7
	lsls r2, r0, #1
	cmp r2, #0x10
	ble _080BD15A
	movs r2, #0x10
_080BD15A:
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r2, [r0]
	adds r0, #1
	strb r7, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, r5, #0
	movs r1, #3
	bl __modsi3
	cmp r0, #0
	bne _080BD194
	adds r0, r5, #0
	movs r1, #3
	bl __divsi3
	ldr r1, [r4, #0x3c]
	adds r1, #0xc
	str r1, [r4, #0x3c]
	cmp r0, r6
	bne _080BD194
	movs r0, #1
	b _080BD196
	.align 2, 0
_080BD18C: .4byte gBg3Tm
_080BD190: .4byte gDispIo
_080BD194:
	movs r0, #0
_080BD196:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_080BD19C
sub_080BD19C: @ 0x080BD19C
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, _080BD1E4 @ =0x02007014
	ldr r0, [r2, #8]
	ldr r1, _080BD1E8 @ =0x000005FF
	cmp r0, r1
	bgt _080BD1B2
	movs r3, #0x80
	lsls r3, r3, #1
	adds r0, r0, r3
	str r0, [r2, #8]
_080BD1B2:
	ldr r0, [r2, #0xc]
	cmp r0, r1
	bgt _080BD1BC
	adds r0, #0x20
	str r0, [r2, #0xc]
_080BD1BC:
	ldr r1, [r2, #0x10]
	ldr r0, _080BD1EC @ =0x000008FF
	cmp r1, r0
	bgt _080BD1CA
	adds r0, r1, #0
	adds r0, #0x20
	str r0, [r2, #0x10]
_080BD1CA:
	adds r0, r4, #0
	bl sub_080BD0B4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080BD1DC
	adds r0, r4, #0
	bl Proc_Break
_080BD1DC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BD1E4: .4byte 0x02007014
_080BD1E8: .4byte 0x000005FF
_080BD1EC: .4byte 0x000008FF

	thumb_func_start sub_080BD1F0
sub_080BD1F0: @ 0x080BD1F0
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r6, #0
	str r6, [r5, #0x2c]
	ldr r0, _080BD2B0 @ =0x08DB9674
	str r0, [r5, #0x3c]
	bl sub_080BCFEC
	str r0, [r5, #0x34]
	ldr r7, _080BD2B4 @ =gDispIo
	movs r2, #4
	rsbs r2, r2, #0
	adds r0, r2, #0
	ldrb r1, [r7, #0xc]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r7, #0xc]
	movs r0, #3
	ldrb r1, [r7, #0x10]
	orrs r1, r0
	strb r1, [r7, #0x10]
	ldrb r1, [r7, #0x14]
	orrs r0, r1
	strb r0, [r7, #0x14]
	ldrb r0, [r7, #0x18]
	ands r2, r0
	movs r0, #1
	orrs r2, r0
	strb r2, [r7, #0x18]
	ldr r0, _080BD2B8 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl EnableBgSync
	ldr r4, _080BD2BC @ =0x03001620
	ldr r0, [r4]
	movs r1, #2
	rsbs r1, r1, #0
	ands r0, r1
	str r0, [r4]
	adds r2, r7, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r7, #0
	adds r1, #0x44
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x45
	strb r6, [r0]
	adds r0, #1
	strb r6, [r0]
	ldr r0, _080BD2C0 @ =0x0000FFE0
	ldrh r2, [r7, #0x3c]
	ands r0, r2
	movs r1, #8
	orrs r0, r1
	ldr r1, _080BD2C4 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xf8
	lsls r2, r2, #5
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r7, #0x3c]
	ldr r0, [r5, #0x14]
	movs r1, #0
	bl Proc_Goto
	bl sub_080BBAFC
	ldr r1, _080BD2C8 @ =0x02007014
	movs r0, #0xc0
	lsls r0, r0, #2
	str r0, [r1, #8]
	str r0, [r1, #4]
	movs r0, #0xc8
	lsls r0, r0, #1
	str r0, [r1, #0xc]
	movs r0, #0xc8
	lsls r0, r0, #2
	str r0, [r1, #0x10]
	ldr r0, [r4]
	movs r1, #4
	orrs r0, r1
	str r0, [r4]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BD2B0: .4byte 0x08DB9674
_080BD2B4: .4byte gDispIo
_080BD2B8: .4byte gBg0Tm
_080BD2BC: .4byte 0x03001620
_080BD2C0: .4byte 0x0000FFE0
_080BD2C4: .4byte 0x0000E0FF
_080BD2C8: .4byte 0x02007014

	thumb_func_start sub_080BD2CC
sub_080BD2CC: @ 0x080BD2CC
	push {r4, lr}
	adds r4, r0, #0
	bl sub_080BD0B4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080BD2FA
	movs r0, #0
	str r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
	ldr r0, _080BD300 @ =gBg3Tm
	movs r1, #0
	bl TmFill
	movs r0, #8
	bl EnableBgSync
	ldr r0, [r4, #0x14]
	movs r1, #1
	bl Proc_Goto
_080BD2FA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BD300: .4byte gBg3Tm

	thumb_func_start sub_080BD304
sub_080BD304: @ 0x080BD304
	push {r4, r5, r6, lr}
	adds r1, r0, #0
	ldr r2, [r1, #0x2c]
	movs r0, #0xc8
	lsls r0, r0, #1
	cmp r2, r0
	bne _080BD31A
	adds r0, r1, #0
	bl Proc_Break
	b _080BD34E
_080BD31A:
	adds r0, r2, #1
	str r0, [r1, #0x2c]
	cmp r0, #0x8c
	ble _080BD34E
	subs r0, #0x8c
	movs r6, #0x80
	lsls r6, r6, #1
	cmp r0, r6
	bgt _080BD34E
	ldr r5, _080BD354 @ =0x02007014
	subs r0, r6, r0
	lsls r4, r0, #1
	adds r4, r4, r0
	lsls r4, r4, #3
	adds r4, r4, r0
	lsls r0, r4, #5
	adds r1, r6, #0
	bl __divsi3
	str r0, [r5, #0x10]
	lsls r4, r4, #4
	adds r0, r4, #0
	adds r1, r6, #0
	bl __divsi3
	str r0, [r5, #0xc]
_080BD34E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BD354: .4byte 0x02007014

	thumb_func_start sub_080BD358
sub_080BD358: @ 0x080BD358
	ldr r0, _080BD368 @ =0x03001620
	ldr r1, [r0]
	movs r2, #5
	rsbs r2, r2, #0
	ands r1, r2
	str r1, [r0]
	bx lr
	.align 2, 0
_080BD368: .4byte 0x03001620

	thumb_func_start sub_080BD36C
sub_080BD36C: @ 0x080BD36C
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #8
	bl sub_08003E68
	ldr r0, _080BD398 @ =gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080BD388
	movs r0, #0x62
	bl m4aSongNumStart
_080BD388:
	ldr r0, _080BD39C @ =0x08DB91C0
	adds r1, r4, #0
	bl Proc_Start
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BD398: .4byte gPlaySt
_080BD39C: .4byte 0x08DB91C0

	thumb_func_start sub_080BD3A0
sub_080BD3A0: @ 0x080BD3A0
	push {lr}
	movs r1, #0
	str r1, [r0, #0x2c]
	bl sub_080BC730
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080BD3B0
sub_080BD3B0: @ 0x080BD3B0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, [r4, #0x2c]
	adds r3, r5, #1
	str r3, [r4, #0x2c]
	cmp r3, #0x40
	bgt _080BD3F2
	ldr r0, _080BD45C @ =gDispIo
	mov ip, r0
	adds r0, #0x3c
	movs r1, #0x3f
	ldrb r2, [r0]
	ands r1, r2
	movs r2, #0x40
	orrs r1, r2
	strb r1, [r0]
	adds r1, r3, #0
	cmp r1, #0
	bge _080BD3DA
	adds r1, r5, #0
	adds r1, #8
_080BD3DA:
	asrs r1, r1, #3
	mov r0, ip
	adds r0, #0x44
	movs r2, #0
	strb r1, [r0]
	mov r1, ip
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x46
	strb r2, [r0]
_080BD3F2:
	ldr r1, [r4, #0x2c]
	lsls r1, r1, #0xf
	lsrs r1, r1, #0x10
	movs r0, #0
	movs r2, #0
	bl SetBgOffset
	ldr r1, [r4, #0x2c]
	ldr r0, [r4, #0x30]
	cmp r1, r0
	ble _080BD456
	subs r0, r1, r0
	cmp r0, #0
	bge _080BD410
	adds r0, #7
_080BD410:
	asrs r0, r0, #3
	movs r3, #8
	subs r3, r3, r0
	ldr r0, _080BD45C @ =gDispIo
	mov ip, r0
	mov r2, ip
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x44
	movs r1, #0
	strb r3, [r0]
	adds r2, #9
	movs r0, #0x10
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x46
	strb r1, [r0]
	cmp r3, #0
	bne _080BD456
	adds r0, r4, #0
	bl Proc_Break
	ldr r0, _080BD460 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl EnableBgSync
_080BD456:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BD45C: .4byte gDispIo
_080BD460: .4byte gBg0Tm

	thumb_func_start sub_080BD464
sub_080BD464: @ 0x080BD464
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080BD478 @ =0x08DB9208
	bl Proc_Start
	str r4, [r0, #0x30]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BD478: .4byte 0x08DB9208

	thumb_func_start sub_080BD47C
sub_080BD47C: @ 0x080BD47C
	push {lr}
	movs r1, #0
	str r1, [r0, #0x2c]
	bl sub_080BC688
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080BD48C
sub_080BD48C: @ 0x080BD48C
	push {r4, lr}
	ldr r4, [r0, #0x2c]
	adds r3, r4, #1
	str r3, [r0, #0x2c]
	cmp r3, #0x80
	bgt _080BD4D4
	ldr r0, _080BD4D0 @ =gDispIo
	mov ip, r0
	adds r0, #0x3c
	movs r1, #0x3f
	ldrb r2, [r0]
	ands r1, r2
	movs r2, #0x40
	orrs r1, r2
	strb r1, [r0]
	adds r1, r3, #0
	cmp r1, #0
	bge _080BD4B4
	adds r1, r4, #0
	adds r1, #8
_080BD4B4:
	asrs r1, r1, #3
	mov r0, ip
	adds r0, #0x44
	movs r2, #0
	strb r1, [r0]
	mov r1, ip
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x46
	strb r2, [r0]
	b _080BD4D8
	.align 2, 0
_080BD4D0: .4byte gDispIo
_080BD4D4:
	bl Proc_Break
_080BD4D8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080BD4E0
sub_080BD4E0: @ 0x080BD4E0
	push {lr}
	adds r1, r0, #0
	ldr r0, _080BD4F0 @ =0x08DB9228
	bl Proc_Start
	pop {r0}
	bx r0
	.align 2, 0
_080BD4F0: .4byte 0x08DB9228

	thumb_func_start sub_080BD4F4
sub_080BD4F4: @ 0x080BD4F4
	push {lr}
	sub sp, #8
	cmp r0, #0
	beq _080BD502
	cmp r0, #1
	beq _080BD518
	b _080BD526
_080BD502:
	str r0, [sp]
	ldr r1, _080BD510 @ =0x06014000
	ldr r2, _080BD514 @ =0x01000200
	mov r0, sp
	bl CpuFastSet
	b _080BD526
	.align 2, 0
_080BD510: .4byte 0x06014000
_080BD514: .4byte 0x01000200
_080BD518:
	movs r0, #0
	str r0, [sp, #4]
	add r0, sp, #4
	ldr r1, _080BD52C @ =0x06014800
	ldr r2, _080BD530 @ =0x01000600
	bl CpuFastSet
_080BD526:
	add sp, #8
	pop {r0}
	bx r0
	.align 2, 0
_080BD52C: .4byte 0x06014800
_080BD530: .4byte 0x01000600

	thumb_func_start sub_080BD534
sub_080BD534: @ 0x080BD534
	push {lr}
	adds r2, r1, #0
	ldr r1, _080BD548 @ =0x08DB8FC0
	ldr r1, [r1]
	adds r1, r1, r2
	bl sub_08013688
	pop {r0}
	bx r0
	.align 2, 0
_080BD548: .4byte 0x08DB8FC0

	thumb_func_start sub_080BD54C
sub_080BD54C: @ 0x080BD54C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	str r2, [sp]
	str r3, [sp, #4]
	ldr r4, [sp, #0x3c]
	ldr r0, [sp, #0x34]
	muls r4, r0, r4
	movs r1, #0
	mov sb, r1
	cmp sb, r3
	bge _080BD5F6
_080BD56A:
	movs r3, #0
	mov r0, sb
	adds r0, #1
	str r0, [sp, #8]
	ldr r1, [sp]
	cmp r3, r1
	bge _080BD5EC
	ldr r0, _080BD608 @ =0x08DB9248
	str r0, [sp, #0xc]
	ldr r1, _080BD60C @ =0x08DB8FC0
	str r1, [sp, #0x10]
_080BD580:
	adds r0, r3, #1
	mov sl, r0
	ldr r1, [sp, #0x34]
	cmp r1, #0
	ble _080BD5E4
	movs r0, #0x3f
	mov ip, r0
	lsls r7, r3, #5
	mov r1, sb
	lsls r6, r1, #0xa
	ldr r0, [sp, #0x10]
	mov r8, r0
	ldr r5, [sp, #0x34]
_080BD59A:
	mov r1, ip
	ands r4, r1
	mov r0, r8
	ldr r2, [r0]
	ldr r1, [sp, #0x38]
	adds r2, r2, r1
	adds r2, r2, r7
	adds r2, r2, r6
	adds r3, r7, r1
	adds r3, r3, r6
	ldr r0, _080BD610 @ =0x06014000
	adds r3, r3, r0
	adds r0, r4, #0
	mov r1, ip
	ands r0, r1
	lsls r0, r0, #1
	ldr r1, _080BD608 @ =0x08DB9248
	adds r0, r0, r1
	ldrh r1, [r0]
	lsrs r0, r1, #3
	lsls r0, r0, #2
	adds r2, r2, r0
	adds r3, r3, r0
	movs r0, #7
	ands r0, r1
	lsls r0, r0, #2
	movs r1, #0xf
	lsls r1, r0
	ldr r2, [r2]
	ands r2, r1
	ldr r0, [r3]
	orrs r0, r2
	str r0, [r3]
	adds r4, #1
	subs r5, #1
	cmp r5, #0
	bne _080BD59A
_080BD5E4:
	mov r3, sl
	ldr r0, [sp]
	cmp r3, r0
	blt _080BD580
_080BD5EC:
	ldr r1, [sp, #8]
	mov sb, r1
	ldr r0, [sp, #4]
	cmp sb, r0
	blt _080BD56A
_080BD5F6:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BD608: .4byte 0x08DB9248
_080BD60C: .4byte 0x08DB8FC0
_080BD610: .4byte 0x06014000

	thumb_func_start sub_080BD614
sub_080BD614: @ 0x080BD614
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	str r2, [sp]
	str r3, [sp, #4]
	ldr r4, [sp, #0x3c]
	ldr r0, [sp, #0x34]
	muls r4, r0, r4
	movs r1, #0
	mov sb, r1
	cmp sb, r3
	bge _080BD6BE
_080BD632:
	movs r3, #0
	mov r0, sb
	adds r0, #1
	str r0, [sp, #8]
	ldr r1, [sp]
	cmp r3, r1
	bge _080BD6B4
	ldr r0, _080BD6D0 @ =0x08DB9248
	str r0, [sp, #0xc]
	ldr r1, _080BD6D4 @ =0x08DB8FC0
	str r1, [sp, #0x10]
_080BD648:
	adds r0, r3, #1
	mov sl, r0
	ldr r1, [sp, #0x34]
	cmp r1, #0
	ble _080BD6AC
	movs r0, #0x3f
	mov ip, r0
	lsls r7, r3, #5
	mov r1, sb
	lsls r6, r1, #0xa
	ldr r0, [sp, #0x10]
	mov r8, r0
	ldr r5, [sp, #0x34]
_080BD662:
	mov r1, ip
	ands r4, r1
	mov r0, r8
	ldr r2, [r0]
	ldr r1, [sp, #0x38]
	adds r2, r2, r1
	adds r2, r2, r7
	adds r2, r2, r6
	adds r3, r7, r1
	adds r3, r3, r6
	ldr r0, _080BD6D8 @ =0x06014000
	adds r3, r3, r0
	adds r0, r4, #0
	mov r1, ip
	ands r0, r1
	lsls r0, r0, #1
	ldr r1, _080BD6D0 @ =0x08DB9248
	adds r0, r0, r1
	ldrh r1, [r0]
	lsrs r0, r1, #3
	lsls r0, r0, #2
	adds r2, r2, r0
	adds r3, r3, r0
	movs r0, #7
	ands r0, r1
	lsls r0, r0, #2
	movs r1, #0xf
	lsls r1, r0
	ldr r2, [r2]
	bics r2, r1
	ldr r0, [r3]
	ands r0, r2
	str r0, [r3]
	adds r4, #1
	subs r5, #1
	cmp r5, #0
	bne _080BD662
_080BD6AC:
	mov r3, sl
	ldr r0, [sp]
	cmp r3, r0
	blt _080BD648
_080BD6B4:
	ldr r1, [sp, #8]
	mov sb, r1
	ldr r0, [sp, #4]
	cmp sb, r0
	blt _080BD632
_080BD6BE:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BD6D0: .4byte 0x08DB9248
_080BD6D4: .4byte 0x08DB8FC0
_080BD6D8: .4byte 0x06014000

	thumb_func_start sub_080BD6DC
sub_080BD6DC: @ 0x080BD6DC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _080BD704 @ =0x086284F8
	movs r1, #0x88
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080BD708 @ =0x08DB947C
	str r0, [r5, #0x2c]
	movs r4, #0
	str r4, [r5, #0x38]
	movs r0, #0
	bl sub_080BD4F4
	str r4, [r5, #0x3c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BD704: .4byte 0x086284F8
_080BD708: .4byte 0x08DB947C

	thumb_func_start sub_080BD70C
sub_080BD70C: @ 0x080BD70C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	adds r4, r0, #0
	ldr r0, [r4, #0x3c]
	cmp r0, #0
	bne _080BD744
	ldr r0, [r4, #0x2c]
	bl sub_080BE0B4
	str r0, [r4, #0x30]
	cmp r0, #0
	bne _080BD744
	ldr r0, [r4, #0x2c]
	ldr r0, [r0, #8]
	cmp r0, #0
	bne _080BD73C
	adds r0, r4, #0
	movs r1, #0x63
	bl Proc_Goto
	b _080BD7BA
_080BD73C:
	adds r0, r4, #0
	bl Proc_Break
	b _080BD7BA
_080BD744:
	movs r0, #0xe0
	ldr r1, [r4, #0x30]
	muls r0, r1, r0
	ldr r6, [r4, #0x3c]
	cmp r6, r0
	bge _080BD7B4
	adds r0, r6, #0
	movs r1, #0xe0
	bl __modsi3
	adds r5, r0, #0
	adds r1, r5, #0
	cmp r5, #0
	bge _080BD762
	adds r1, #0xf
_080BD762:
	asrs r7, r1, #4
	lsls r0, r7, #1
	mov sb, r0
	adds r0, r6, #0
	movs r1, #0xe0
	bl __divsi3
	adds r6, r0, #0
	lsls r0, r6, #1
	mov r8, r0
	cmp r5, #0
	bne _080BD78C
	ldr r0, [r4, #0x2c]
	lsls r1, r6, #2
	adds r0, r0, r1
	ldr r0, [r0]
	lsls r2, r6, #0xb
	ldr r1, [r4, #0x38]
	adds r1, r1, r2
	bl sub_080BD534
_080BD78C:
	movs r0, #4
	str r0, [sp]
	lsls r1, r7, #6
	ldr r0, [r4, #0x38]
	adds r0, r0, r1
	lsls r1, r6, #0xb
	adds r0, r0, r1
	str r0, [sp, #4]
	ldr r0, [r4, #0x3c]
	str r0, [sp, #8]
	mov r0, sb
	mov r1, r8
	movs r2, #2
	movs r3, #2
	bl sub_080BD54C
	ldr r0, [r4, #0x3c]
	adds r0, #1
	str r0, [r4, #0x3c]
	b _080BD7BA
_080BD7B4:
	adds r0, r4, #0
	bl Proc_Break
_080BD7BA:
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_080BD7C8
sub_080BD7C8: @ 0x080BD7C8
	push {lr}
	adds r2, r0, #0
	ldr r1, [r2, #0x3c]
	adds r1, #1
	str r1, [r2, #0x3c]
	ldr r0, [r2, #0x2c]
	ldr r0, [r0, #8]
	subs r0, #0x20
	cmp r1, r0
	blt _080BD7E6
	movs r0, #0
	str r0, [r2, #0x3c]
	adds r0, r2, #0
	bl Proc_Break
_080BD7E6:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080BD7EC
sub_080BD7EC: @ 0x080BD7EC
	push {r4, lr}
	sub sp, #0xc
	adds r4, r0, #0
	ldr r1, [r4, #0x3c]
	cmp r1, #0x1f
	bgt _080BD818
	ldr r3, [r4, #0x30]
	lsls r3, r3, #1
	movs r0, #2
	str r0, [sp]
	ldr r0, [r4, #0x38]
	str r0, [sp, #4]
	str r1, [sp, #8]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1e
	bl sub_080BD614
	ldr r0, [r4, #0x3c]
	adds r0, #1
	str r0, [r4, #0x3c]
	b _080BD828
_080BD818:
	movs r0, #0
	str r0, [r4, #0x3c]
	ldr r0, [r4, #0x2c]
	adds r0, #0xc
	str r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
_080BD828:
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080BD830
sub_080BD830: @ 0x080BD830
	push {lr}
	movs r0, #0
	bl sub_080BD4F4
	pop {r0}
	bx r0

	thumb_func_start sub_080BD83C
sub_080BD83C: @ 0x080BD83C
	push {lr}
	adds r1, r0, #0
	ldr r0, _080BD84C @ =0x08DB92C8
	bl Proc_Start
	pop {r0}
	bx r0
	.align 2, 0
_080BD84C: .4byte 0x08DB92C8

	thumb_func_start sub_080BD850
sub_080BD850: @ 0x080BD850
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080BD87C @ =0x086284F8
	movs r1, #0x88
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080BD880 @ =0x08DB9548
	str r0, [r4, #0x2c]
	movs r0, #0x80
	lsls r0, r0, #4
	str r0, [r4, #0x38]
	movs r0, #1
	bl sub_080BD4F4
	movs r0, #0
	str r0, [r4, #0x3c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BD87C: .4byte 0x086284F8
_080BD880: .4byte 0x08DB9548

	thumb_func_start sub_080BD884
sub_080BD884: @ 0x080BD884
	push {r4, r5, lr}
	sub sp, #0xc
	adds r4, r0, #0
	ldr r0, [r4, #0x3c]
	cmp r0, #0
	bne _080BD8CE
	ldr r0, [r4, #0x2c]
	bl sub_080BE0B4
	str r0, [r4, #0x30]
	cmp r0, #0
	bne _080BD8AE
	ldr r0, [r4, #0x2c]
	ldr r0, [r0, #8]
	cmp r0, #0
	bne _080BD8D4
	adds r0, r4, #0
	movs r1, #0x63
	bl Proc_Goto
	b _080BD8FA
_080BD8AE:
	movs r5, #0
	cmp r5, r0
	bge _080BD8CE
_080BD8B4:
	ldr r0, [r4, #0x2c]
	lsls r1, r5, #2
	adds r0, r0, r1
	ldr r0, [r0]
	lsls r2, r5, #0xb
	ldr r1, [r4, #0x38]
	adds r1, r1, r2
	bl sub_080BD534
	adds r5, #1
	ldr r0, [r4, #0x30]
	cmp r5, r0
	blt _080BD8B4
_080BD8CE:
	ldr r1, [r4, #0x3c]
	cmp r1, #0x3f
	ble _080BD8DC
_080BD8D4:
	adds r0, r4, #0
	bl Proc_Break
	b _080BD8FA
_080BD8DC:
	ldr r3, [r4, #0x30]
	lsls r3, r3, #1
	movs r0, #1
	str r0, [sp]
	ldr r0, [r4, #0x38]
	str r0, [sp, #4]
	str r1, [sp, #8]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1e
	bl sub_080BD54C
	ldr r0, [r4, #0x3c]
	adds r0, #1
	str r0, [r4, #0x3c]
_080BD8FA:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080BD904
sub_080BD904: @ 0x080BD904
	push {lr}
	adds r2, r0, #0
	ldr r1, [r2, #0x3c]
	adds r1, #1
	str r1, [r2, #0x3c]
	ldr r0, [r2, #0x2c]
	ldr r0, [r0, #8]
	subs r0, #0x20
	cmp r1, r0
	blt _080BD922
	movs r0, #0
	str r0, [r2, #0x3c]
	adds r0, r2, #0
	bl Proc_Break
_080BD922:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080BD928
sub_080BD928: @ 0x080BD928
	push {r4, lr}
	sub sp, #0xc
	adds r4, r0, #0
	ldr r1, [r4, #0x3c]
	cmp r1, #0x1f
	bgt _080BD954
	ldr r3, [r4, #0x30]
	lsls r3, r3, #1
	movs r0, #2
	str r0, [sp]
	ldr r0, [r4, #0x38]
	str r0, [sp, #4]
	str r1, [sp, #8]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1e
	bl sub_080BD614
	ldr r0, [r4, #0x3c]
	adds r0, #1
	str r0, [r4, #0x3c]
	b _080BD964
_080BD954:
	movs r0, #0
	str r0, [r4, #0x3c]
	ldr r0, [r4, #0x2c]
	adds r0, #0xc
	str r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
_080BD964:
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_080BD96C
sub_080BD96C: @ 0x080BD96C
	push {lr}
	movs r0, #1
	bl sub_080BD4F4
	pop {r0}
	bx r0

	thumb_func_start sub_080BD978
sub_080BD978: @ 0x080BD978
	push {lr}
	adds r1, r0, #0
	ldr r0, _080BD988 @ =0x08DB9320
	bl Proc_Start
	pop {r0}
	bx r0
	.align 2, 0
_080BD988: .4byte 0x08DB9320

	thumb_func_start sub_080BD98C
sub_080BD98C: @ 0x080BD98C
	movs r1, #0
	strh r1, [r0, #0x2e]
	ldrh r1, [r0, #0x2c]
	lsrs r2, r1, #2
	lsls r2, r2, #0xd
	movs r3, #3
	ands r1, r3
	lsls r1, r1, #8
	adds r2, r2, r1
	strh r2, [r0, #0x30]
	movs r2, #0xff
	lsls r2, r2, #8
	adds r0, #0x32
	movs r1, #3
_080BD9A8:
	strh r2, [r0]
	strh r2, [r0, #8]
	adds r0, #2
	subs r1, #1
	cmp r1, #0
	bge _080BD9A8
	bx lr
	.align 2, 0

	thumb_func_start sub_080BD9B8
sub_080BD9B8: @ 0x080BD9B8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	str r0, [sp, #4]
	movs r0, #0x40
	movs r4, #0x80
	ldr r1, [sp, #4]
	ldrh r1, [r1, #0x2e]
	subs r0, r0, r1
	lsls r1, r0, #7
	muls r0, r1, r0
	movs r1, #0x80
	lsls r1, r1, #5
	bl __divsi3
	subs r4, r4, r0
	lsls r0, r4, #9
	movs r1, #0x80
	bl __divsi3
	movs r1, #0x80
	lsls r1, r1, #2
	subs r7, r1, r0
	ldr r0, [sp, #4]
	ldrh r0, [r0, #0x2a]
	adds r2, r0, r4
	movs r4, #0xff
	adds r0, r2, #0
	ands r0, r4
	movs r1, #0x80
	lsls r1, r1, #1
	subs r1, r1, r0
	mov sl, r1
	movs r0, #0xb4
	muls r0, r7, r0
	cmp r0, #0
	bge _080BDA0C
	ldr r1, _080BDA28 @ =0x000001FF
	adds r0, r0, r1
_080BDA0C:
	asrs r3, r0, #9
	movs r0, #0x64
	muls r0, r7, r0
	cmp r0, #0
	bge _080BDA1A
	ldr r1, _080BDA28 @ =0x000001FF
	adds r0, r0, r1
_080BDA1A:
	asrs r6, r0, #9
	cmp r7, #7
	bgt _080BDA2C
	ldr r0, [sp, #4]
	bl Proc_Break
	b _080BDB08
	.align 2, 0
_080BDA28: .4byte 0x000001FF
_080BDA2C:
	ldr r5, _080BDB18 @ =gSinLut
	adds r1, r2, #0
	subs r1, #0x40
	ands r1, r4
	lsls r0, r1, #1
	adds r0, r0, r5
	movs r2, #0
	ldrsh r0, [r0, r2]
	adds r2, r0, #0
	muls r2, r3, r2
	asrs r2, r2, #0xc
	mov r8, r2
	movs r0, #0x38
	add r8, r0
	ldr r0, _080BDB1C @ =0x000001FF
	mov r2, r8
	ands r2, r0
	mov r8, r2
	adds r1, #0x40
	lsls r1, r1, #1
	adds r1, r1, r5
	movs r2, #0
	ldrsh r0, [r1, r2]
	muls r0, r6, r0
	asrs r0, r0, #0xc
	movs r1, #0x10
	mov sb, r1
	mov r2, sb
	subs r2, r2, r0
	ands r2, r4
	mov sb, r2
	mov r0, sl
	ands r4, r0
	adds r6, r4, #0
	adds r6, #0x40
	lsls r6, r6, #1
	adds r6, r6, r5
	movs r1, #0
	ldrsh r0, [r6, r1]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	mov sl, r0
	mov r2, sl
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	mov sl, r2
	lsls r4, r4, #1
	adds r4, r4, r5
	movs r1, #0
	ldrsh r0, [r4, r1]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	movs r1, #0
	ldrsh r0, [r6, r1]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r2, [sp, #4]
	ldrh r1, [r2, #0x2c]
	str r0, [sp]
	adds r0, r1, #0
	mov r1, sl
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	ldr r1, [sp, #4]
	ldrh r1, [r1, #0x2c]
	lsls r0, r1, #9
	add r8, r0
	movs r0, #0xc0
	lsls r0, r0, #2
	add sb, r0
	ldr r3, _080BDB20 @ =0x08BFF778
	ldr r2, [sp, #4]
	ldrh r2, [r2, #0x30]
	lsrs r0, r2, #5
	movs r1, #0x80
	lsls r1, r1, #8
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #4
	mov r1, r8
	mov r2, sb
	bl sub_080068C4
	ldr r1, [sp, #4]
	ldrh r0, [r1, #0x2e]
	adds r0, #1
	strh r0, [r1, #0x2e]
_080BDB08:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BDB18: .4byte gSinLut
_080BDB1C: .4byte 0x000001FF
_080BDB20: .4byte 0x08BFF778

	thumb_func_start sub_080BDB24
sub_080BDB24: @ 0x080BDB24
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r1, r2, #0
	ldr r0, _080BDB3C @ =0x08DB9378
	bl Proc_Start
	strh r4, [r0, #0x2c]
	strh r5, [r0, #0x2a]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BDB3C: .4byte 0x08DB9378

	thumb_func_start sub_080BDB40
sub_080BDB40: @ 0x080BDB40
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	mov ip, r1
	adds r5, r3, #0
	lsls r2, r2, #5
	ldr r0, _080BDBE0 @ =gPal
	adds r7, r2, r0
	movs r0, #0x80
	lsls r0, r0, #1
	subs r6, r0, r5
	movs r0, #0xf8
	lsls r0, r0, #7
	mov sl, r0
	movs r0, #0xf
	mov sb, r0
_080BDB66:
	mov r0, r8
	ldrh r4, [r0]
	movs r0, #0x1f
	ands r0, r4
	adds r2, r0, #0
	muls r2, r5, r2
	mov r0, ip
	ldrh r3, [r0]
	movs r0, #0x1f
	ands r0, r3
	muls r0, r6, r0
	adds r2, r2, r0
	asrs r2, r2, #8
	movs r0, #0x1f
	ands r2, r0
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r0, r4
	adds r1, r0, #0
	muls r1, r5, r1
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r0, r3
	muls r0, r6, r0
	adds r1, r1, r0
	asrs r1, r1, #8
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r1, r0
	adds r2, r2, r1
	mov r0, sl
	ands r0, r4
	adds r1, r0, #0
	muls r1, r5, r1
	mov r0, sl
	ands r0, r3
	muls r0, r6, r0
	adds r1, r1, r0
	asrs r1, r1, #8
	mov r0, sl
	ands r1, r0
	adds r2, r2, r1
	strh r2, [r7]
	adds r7, #2
	movs r0, #2
	add r8, r0
	add ip, r0
	subs r0, #3
	add sb, r0
	mov r0, sb
	cmp r0, #0
	bge _080BDB66
	bl EnablePalSync
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BDBE0: .4byte gPal

	thumb_func_start sub_080BDBE4
sub_080BDBE4: @ 0x080BDBE4
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x30]
	ldr r1, [r4, #0x2c]
	adds r0, r0, r1
	str r0, [r4, #0x30]
	movs r5, #0x80
	lsls r5, r5, #1
	cmp r0, r5
	ble _080BDBFA
	str r5, [r4, #0x30]
_080BDBFA:
	ldr r0, [r4, #0x30]
	cmp r0, #0
	bge _080BDC04
	movs r0, #0
	str r0, [r4, #0x30]
_080BDC04:
	ldr r0, _080BDC28 @ =0x020072DC
	adds r1, r0, #0
	subs r1, #0x20
	ldr r2, [r4, #0x34]
	ldr r3, [r4, #0x30]
	bl sub_080BDB40
	ldr r0, [r4, #0x30]
	cmp r0, r5
	beq _080BDC1C
	cmp r0, #0
	bne _080BDC22
_080BDC1C:
	adds r0, r4, #0
	bl Proc_Break
_080BDC22:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BDC28: .4byte 0x020072DC

	thumb_func_start sub_080BDC2C
sub_080BDC2C: @ 0x080BDC2C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r4, r0, #0
	adds r7, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r1, [sp, #0x1c]
	ldr r0, _080BDC60 @ =0x08DB9398
	bl Proc_Start
	adds r5, r0, #0
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _080BDC6C
	lsls r0, r6, #5
	ldr r1, _080BDC64 @ =gPal
	adds r0, r0, r1
	ldr r1, _080BDC68 @ =0x020072BC
	movs r2, #8
	bl CpuFastSet
	b _080BDC92
	.align 2, 0
_080BDC60: .4byte 0x08DB9398
_080BDC64: .4byte gPal
_080BDC68: .4byte 0x020072BC
_080BDC6C:
	cmp r4, #0
	bne _080BDC88
	str r4, [sp]
	ldr r1, _080BDC80 @ =0x020072BC
	ldr r2, _080BDC84 @ =0x01000008
	mov r0, sp
	bl CpuFastSet
	b _080BDC92
	.align 2, 0
_080BDC80: .4byte 0x020072BC
_080BDC84: .4byte 0x01000008
_080BDC88:
	ldr r1, _080BDCB8 @ =0x020072BC
	adds r0, r4, #0
	movs r2, #8
	bl CpuFastSet
_080BDC92:
	ldr r1, _080BDCBC @ =0x020072DC
	adds r0, r7, #0
	movs r2, #8
	bl CpuFastSet
	movs r0, #0
	str r0, [r5, #0x30]
	str r6, [r5, #0x34]
	mov r0, r8
	str r0, [r5, #0x2c]
	bl EnablePalSync
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BDCB8: .4byte 0x020072BC
_080BDCBC: .4byte 0x020072DC

	thumb_func_start sub_080BDCC0
sub_080BDCC0: @ 0x080BDCC0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	lsls r0, r0, #2
	ldr r1, [r4, #0x30]
	adds r1, r1, r0
	str r1, [r4, #0x30]
	movs r5, #0x80
	lsls r5, r5, #1
	cmp r1, r5
	ble _080BDCD8
	str r5, [r4, #0x30]
_080BDCD8:
	ldr r0, _080BDCF8 @ =0x020072DC
	adds r1, r0, #0
	subs r1, #0x20
	ldr r2, [r4, #0x34]
	ldr r3, [r4, #0x30]
	bl sub_080BDB40
	ldr r0, [r4, #0x30]
	cmp r0, r5
	bne _080BDCF2
	adds r0, r4, #0
	bl Proc_Break
_080BDCF2:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BDCF8: .4byte 0x020072DC

	thumb_func_start sub_080BDCFC
sub_080BDCFC: @ 0x080BDCFC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x30]
	ldr r1, [r4, #0x2c]
	subs r0, r0, r1
	str r0, [r4, #0x30]
	cmp r0, #0
	bge _080BDD10
	movs r0, #0
	str r0, [r4, #0x30]
_080BDD10:
	ldr r0, _080BDD30 @ =0x020072DC
	adds r1, r0, #0
	subs r1, #0x20
	ldr r2, [r4, #0x34]
	ldr r3, [r4, #0x30]
	bl sub_080BDB40
	ldr r0, [r4, #0x30]
	cmp r0, #0
	bne _080BDD2A
	adds r0, r4, #0
	bl Proc_Break
_080BDD2A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BDD30: .4byte 0x020072DC

	thumb_func_start sub_080BDD34
sub_080BDD34: @ 0x080BDD34
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r6, r0, #0
	adds r7, r1, #0
	adds r5, r2, #0
	mov r8, r3
	ldr r0, [sp, #0x2c]
	ldr r4, [sp, #0x30]
	ldr r1, [sp, #0x34]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp]
	ldr r0, _080BDD80 @ =0x08DB93B0
	bl Proc_Start
	movs r1, #0
	str r1, [r0, #0x30]
	str r5, [r0, #0x34]
	str r4, [r0, #0x2c]
	bl EnablePalSync
	movs r0, #1
	rsbs r0, r0, #0
	cmp r6, r0
	bne _080BDD8C
	lsls r0, r5, #5
	ldr r1, _080BDD84 @ =gPal
	adds r0, r0, r1
	ldr r1, _080BDD88 @ =0x020072BC
	movs r2, #8
	bl CpuFastSet
	b _080BDD96
	.align 2, 0
_080BDD80: .4byte 0x08DB93B0
_080BDD84: .4byte gPal
_080BDD88: .4byte 0x020072BC
_080BDD8C:
	ldr r1, _080BDE18 @ =0x020072BC
	adds r0, r6, #0
	movs r2, #8
	bl CpuFastSet
_080BDD96:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r7, r0
	bne _080BDE32
	movs r0, #0
	mov ip, r0
	ldr r0, _080BDE18 @ =0x020072BC
	movs r1, #0x1f
	mov sl, r1
	mov r6, sl
	mov r5, r8
	ands r6, r5
	lsls r1, r6, #0xa
	str r1, [sp, #4]
	adds r7, r0, #0
	movs r5, #0x20
	adds r5, r5, r7
	mov sb, r5
_080BDDBA:
	ldr r0, [sp]
	mov r1, ip
	asrs r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _080BDE1C
	ldrh r2, [r7]
	movs r5, #0x1f
	mov r8, r5
	mov r3, sl
	ands r3, r2
	movs r4, #0xf8
	lsls r4, r4, #2
	adds r0, r4, #0
	ands r0, r2
	lsls r1, r6, #5
	adds r0, r0, r1
	str r0, [sp, #8]
	movs r1, #0xf8
	lsls r1, r1, #7
	adds r0, r1, #0
	ands r0, r2
	ldr r5, [sp, #4]
	adds r2, r0, r5
	adds r3, r3, r6
	cmp r3, #0x1f
	ble _080BDDF4
	movs r3, #0x1f
_080BDDF4:
	mov r0, r8
	ands r3, r0
	ldr r0, [sp, #8]
	cmp r0, r4
	ble _080BDE00
	adds r0, r4, #0
_080BDE00:
	ands r0, r4
	adds r3, r3, r0
	adds r0, r2, #0
	cmp r0, r1
	ble _080BDE0C
	adds r0, r1, #0
_080BDE0C:
	ands r0, r1
	adds r0, r3, r0
	mov r1, sb
	strh r0, [r1]
	b _080BDE20
	.align 2, 0
_080BDE18: .4byte 0x020072BC
_080BDE1C:
	ldrh r0, [r7]
	strh r0, [r7, #0x20]
_080BDE20:
	adds r7, #2
	movs r5, #2
	add sb, r5
	movs r0, #1
	add ip, r0
	mov r1, ip
	cmp r1, #0xf
	ble _080BDDBA
	b _080BDE50
_080BDE32:
	ldr r4, _080BDE60 @ =0x020072DC
	adds r0, r7, #0
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	lsls r1, r5, #5
	ldr r0, _080BDE64 @ =gPal
	adds r1, r1, r0
	adds r0, r4, #0
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
_080BDE50:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BDE60: .4byte 0x020072DC
_080BDE64: .4byte gPal

	thumb_func_start sub_080BDE68
sub_080BDE68: @ 0x080BDE68
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #8
	adds r4, r0, #0
	ldr r6, _080BDEB8 @ =0x086C0C4C
	movs r0, #0x36
	ldrsh r1, [r4, r0]
	movs r0, #0x3e
	ldrsh r2, [r4, r0]
	movs r0, #0xe6
	lsls r0, r0, #6
	mov r8, r0
	movs r0, #5
	str r0, [sp]
	movs r5, #0xa
	str r5, [sp, #4]
	adds r0, r6, #0
	mov r3, r8
	bl sub_08012AF0
	str r0, [r4, #0x2c]
	movs r0, #0x3a
	ldrsh r1, [r4, r0]
	ldr r2, [r4, #0x40]
	asrs r2, r2, #0x10
	movs r0, #6
	str r0, [sp]
	str r5, [sp, #4]
	adds r0, r6, #0
	mov r3, r8
	bl sub_08012AF0
	str r0, [r4, #0x30]
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BDEB8: .4byte 0x086C0C4C

	thumb_func_start sub_080BDEBC
sub_080BDEBC: @ 0x080BDEBC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	movs r0, #0
	mov sb, r0
	ldr r1, _080BDF38 @ =0x02007508
	mov sl, r1
_080BDED0:
	mov r3, sb
	lsls r5, r3, #2
	adds r0, r6, #0
	adds r0, #0x2c
	adds r0, r0, r5
	mov r8, r0
	ldr r7, [r0]
	cmp r7, #0
	beq _080BDF4E
	adds r2, r6, #0
	adds r2, #0x44
	adds r2, r2, r5
	ldr r0, [r2]
	mov r3, sl
	ldr r1, [r3, #8]
	adds r0, r0, r1
	str r0, [r2]
	adds r4, r6, #0
	adds r4, #0x4c
	adds r4, r4, r5
	ldr r0, [r4]
	ldr r1, [r3, #0xc]
	adds r0, r0, r1
	str r0, [r4]
	adds r3, r6, #0
	adds r3, #0x34
	adds r3, r3, r5
	ldr r0, [r3]
	ldr r1, [r2]
	adds r0, r0, r1
	str r0, [r3]
	adds r1, r6, #0
	adds r1, #0x3c
	adds r1, r1, r5
	ldr r2, [r1]
	ldr r0, [r4]
	adds r2, r2, r0
	str r2, [r1]
	movs r0, #2
	ldrsh r1, [r3, r0]
	asrs r2, r2, #0x10
	cmp r1, #0xf0
	bhi _080BDF2A
	cmp r2, #0
	bge _080BDF3C
_080BDF2A:
	adds r0, r7, #0
	bl EndSpriteAnimProc
	movs r0, #0
	mov r1, r8
	str r0, [r1]
	b _080BDF4E
	.align 2, 0
_080BDF38: .4byte 0x02007508
_080BDF3C:
	ldr r0, _080BDF78 @ =0x000001FF
	ands r1, r0
	movs r0, #0xff
	ands r2, r0
	adds r0, r7, #0
	movs r3, #0xe6
	lsls r3, r3, #6
	bl sub_08012B70
_080BDF4E:
	movs r3, #1
	add sb, r3
	mov r0, sb
	cmp r0, #1
	ble _080BDED0
	ldr r0, [r6, #0x2c]
	cmp r0, #0
	bne _080BDF6A
	ldr r0, [r6, #0x30]
	cmp r0, #0
	bne _080BDF6A
	adds r0, r6, #0
	bl Proc_Break
_080BDF6A:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BDF78: .4byte 0x000001FF

	thumb_func_start sub_080BDF7C
sub_080BDF7C: @ 0x080BDF7C
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	adds r4, r0, #0
	adds r6, r1, #0
	adds r5, r2, #0
	mov sb, r3
	ldr r1, [sp, #0x18]
	ldr r0, _080BE014 @ =0x08DB93D0
	bl Proc_Start
	lsls r1, r4, #0x10
	str r1, [r0, #0x34]
	lsls r6, r6, #0x10
	str r6, [r0, #0x3c]
	adds r4, #0x80
	movs r1, #0xff
	mov r8, r1
	ands r4, r1
	lsls r4, r4, #0x10
	str r4, [r0, #0x38]
	adds r6, #0x20
	str r6, [r0, #0x40]
	ldr r3, _080BE018 @ =gSinLut
	adds r2, r5, #0
	ands r2, r1
	adds r1, r2, #0
	adds r1, #0x40
	lsls r1, r1, #1
	adds r1, r1, r3
	movs r4, #0
	ldrsh r1, [r1, r4]
	mov r4, sb
	muls r4, r1, r4
	adds r1, r4, #0
	str r1, [r0, #0x44]
	lsls r2, r2, #1
	adds r2, r2, r3
	movs r4, #0
	ldrsh r1, [r2, r4]
	mov r2, sb
	muls r2, r1, r2
	adds r1, r2, #0
	str r1, [r0, #0x4c]
	adds r5, #4
	mov r4, r8
	ands r5, r4
	adds r1, r5, #0
	adds r1, #0x40
	lsls r1, r1, #1
	adds r1, r1, r3
	movs r2, #0
	ldrsh r1, [r1, r2]
	mov r4, sb
	muls r4, r1, r4
	adds r1, r4, #0
	str r1, [r0, #0x48]
	lsls r5, r5, #1
	adds r5, r5, r3
	movs r2, #0
	ldrsh r1, [r5, r2]
	mov r4, sb
	muls r4, r1, r4
	adds r1, r4, #0
	str r1, [r0, #0x50]
	movs r1, #0
	str r1, [r0, #0x2c]
	str r1, [r0, #0x30]
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BE014: .4byte 0x08DB93D0
_080BE018: .4byte gSinLut

	thumb_func_start sub_080BE01C
sub_080BE01C: @ 0x080BE01C
	push {lr}
	movs r1, #0x74
	str r1, [r0, #0x2c]
	movs r1, #0
	str r1, [r0, #0x30]
	str r1, [r0, #0x38]
	ldr r0, _080BE040 @ =0x08622C7C
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080BE044 @ =0x08622C9C
	ldr r1, _080BE048 @ =0x06010000
	bl sub_08013688
	pop {r0}
	bx r0
	.align 2, 0
_080BE040: .4byte 0x08622C7C
_080BE044: .4byte 0x08622C9C
_080BE048: .4byte 0x06010000

	thumb_func_start sub_080BE04C
sub_080BE04C: @ 0x080BE04C
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, [r4, #0x38]
	adds r0, #1
	str r0, [r4, #0x38]
	ldr r1, [r4, #0x30]
	adds r5, r1, r0
	str r5, [r4, #0x30]
	cmp r5, #0x4f
	ble _080BE072
	adds r0, r4, #0
	bl Proc_Break
	ldr r0, [r4, #0x14]
	movs r1, #2
	bl Proc_Goto
	b _080BE08C
_080BE072:
	ldr r1, [r4, #0x2c]
	ldr r3, _080BE09C @ =0x08BFF760
	ldr r0, [r4, #0x34]
	movs r2, #1
	ands r0, r2
	movs r2, #0x88
	lsls r2, r2, #7
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #4
	adds r2, r5, #0
	bl sub_080068C4
_080BE08C:
	ldr r0, [r4, #0x34]
	adds r0, #1
	str r0, [r4, #0x34]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BE09C: .4byte 0x08BFF760

	thumb_func_start sub_080BE0A0
sub_080BE0A0: @ 0x080BE0A0
	push {lr}
	adds r1, r0, #0
	ldr r0, _080BE0B0 @ =0x08DB93F0
	bl Proc_Start
	pop {r0}
	bx r0
	.align 2, 0
_080BE0B0: .4byte 0x08DB93F0

	thumb_func_start sub_080BE0B4
sub_080BE0B4: @ 0x080BE0B4
	movs r2, #0
	adds r1, r0, #0
_080BE0B8:
	ldr r0, [r1]
	cmp r0, #0
	beq _080BE0C6
	adds r1, #4
	adds r2, #1
	cmp r2, #1
	ble _080BE0B8
_080BE0C6:
	adds r0, r2, #0
	bx lr
	.align 2, 0

	thumb_func_start sub_080BE0CC
sub_080BE0CC: @ 0x080BE0CC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	mov sb, r1
	mov r8, r2
	ldr r1, [r1, #4]
	lsls r0, r2, #3
	adds r0, r0, r1
	ldr r1, [r0]
	mov sl, r1
	ldr r7, [r0, #4]
	cmp r2, #0
	blt _080BE1BC
	cmp r1, #0
	beq _080BE11E
	adds r0, r6, #0
	bl GetBgChrOffset
	adds r4, r0, #0
	mov r2, sb
	ldr r2, [r2]
	ldr r1, [r2, #0x14]
	mov r0, r8
	bl __modsi3
	lsls r0, r0, #0xa
	movs r3, #0xc0
	lsls r3, r3, #0x13
	adds r0, r0, r3
	adds r4, r4, r0
	mov r1, sb
	ldr r1, [r1]
	ldr r0, [r1, #0x10]
	adds r4, r4, r0
	mov r0, sl
	adds r1, r4, #0
	bl sub_08013688
_080BE11E:
	cmp r7, #0
	beq _080BE17C
	ldrb r2, [r7]
	mov sl, r2
	ldrh r3, [r7]
	lsrs r4, r3, #8
	adds r7, #2
	adds r0, r6, #0
	bl GetBgTilemap
	movs r1, #0x1f
	mov r2, r8
	ands r1, r2
	lsls r1, r1, #6
	adds r6, r0, r1
	mov r3, sb
	ldr r5, [r3]
	ldr r1, [r5, #0x14]
	mov r0, r8
	bl __modsi3
	subs r4, r4, r0
	mov r3, sl
	adds r3, #1
	adds r0, r4, #0
	muls r0, r3, r0
	lsls r0, r0, #1
	adds r7, r7, r0
	movs r2, #0
	cmp r2, sl
	bgt _080BE1BC
	ldr r0, [r5, #4]
	lsls r4, r0, #0xc
	ldr r0, [r5, #0x10]
	lsls r0, r0, #0xf
	lsrs r1, r0, #0x14
	adds r2, r3, #0
_080BE168:
	ldrh r3, [r7]
	adds r0, r3, r4
	adds r0, r0, r1
	strh r0, [r6]
	adds r6, #2
	adds r7, #2
	subs r2, #1
	cmp r2, #0
	bne _080BE168
	b _080BE1BC
_080BE17C:
	mov r1, sb
	ldr r0, [r1]
	ldr r1, [r0, #0x14]
	mov r0, r8
	bl __modsi3
	adds r4, r0, #0
	lsls r4, r4, #5
	adds r0, r6, #0
	bl GetBgTilemap
	movs r1, #0x1f
	mov r2, r8
	ands r1, r2
	lsls r1, r1, #6
	adds r6, r0, r1
	mov r3, sb
	ldr r0, [r3]
	ldr r1, [r0, #4]
	ldr r0, [r0, #0x10]
	lsls r0, r0, #0xf
	lsrs r0, r0, #0x14
	lsls r1, r1, #0xc
	adds r4, r4, r1
	adds r0, r4, r0
	movs r2, #0x1f
_080BE1B0:
	strh r0, [r6]
	adds r6, #2
	adds r0, #1
	subs r2, #1
	cmp r2, #0
	bge _080BE1B0
_080BE1BC:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_080BE1CC
sub_080BE1CC: @ 0x080BE1CC
	str r1, [r0, #0x3c]
	bx lr

	thumb_func_start sub_080BE1D0
sub_080BE1D0: @ 0x080BE1D0
	movs r1, #0
	str r1, [r0, #0x3c]
	str r1, [r0, #0x34]
	str r1, [r0, #0x30]
	str r1, [r0, #0x2c]
	bx lr

	thumb_func_start sub_080BE1DC
sub_080BE1DC: @ 0x080BE1DC
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	adds r4, r0, #0
	ldr r2, [r4, #0x38]
	asrs r6, r2, #0xa
	mov r1, sp
	ldr r0, _080BE2A4 @ =0x086C4544
	ldm r0!, {r3, r5, r7}
	stm r1!, {r3, r5, r7}
	ldr r0, [r0]
	str r0, [r1]
	ldr r0, [r4, #0x2c]
	cmp r0, #0
	beq _080BE29A
	ldr r0, [r4, #0x3c]
	adds r0, r2, r0
	str r0, [r4, #0x38]
	cmp r0, #0
	bge _080BE20C
	movs r0, #0
	str r0, [r4, #0x38]
	adds r0, r4, #0
	bl Proc_Break
_080BE20C:
	ldr r1, [r4, #0x38]
	asrs r1, r1, #0xa
	ldr r0, [r4, #0x34]
	subs r0, #0x14
	lsls r0, r0, #3
	cmp r1, r0
	ble _080BE220
	adds r0, r4, #0
	bl Proc_Break
_080BE220:
	ldr r0, [r4, #0x38]
	asrs r5, r0, #0xa
	cmp r6, r5
	beq _080BE29A
	cmp r6, r5
	ble _080BE24E
	adds r2, r6, #0
	cmp r6, #0
	bge _080BE234
	adds r2, r6, #7
_080BE234:
	asrs r2, r2, #3
	adds r0, r5, #0
	cmp r5, #0
	bge _080BE23E
	adds r0, r5, #7
_080BE23E:
	asrs r0, r0, #3
	cmp r2, r0
	beq _080BE24E
	ldr r0, [r4, #0x30]
	ldr r1, [r4, #0x2c]
	subs r2, #1
	bl sub_080BE0CC
_080BE24E:
	cmp r6, r5
	bge _080BE282
	adds r3, r6, #7
	adds r0, r3, #0
	cmp r3, #0
	bge _080BE25E
	adds r0, r6, #0
	adds r0, #0xe
_080BE25E:
	asrs r1, r0, #3
	adds r0, r5, #7
	cmp r0, #0
	bge _080BE268
	adds r0, #7
_080BE268:
	asrs r0, r0, #3
	cmp r1, r0
	beq _080BE282
	ldr r0, [r4, #0x30]
	ldr r1, [r4, #0x2c]
	adds r2, r6, #0
	cmp r2, #0
	bge _080BE27A
	adds r2, r3, #0
_080BE27A:
	asrs r2, r2, #3
	adds r2, #0x14
	bl sub_080BE0CC
_080BE282:
	ldr r0, [r4, #0x30]
	lsls r0, r0, #2
	add r0, sp
	ldr r0, [r0]
	bl EnableBgSync
	ldrh r0, [r4, #0x30]
	lsls r2, r5, #0x10
	lsrs r2, r2, #0x10
	movs r1, #0
	bl SetBgOffset
_080BE29A:
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BE2A4: .4byte 0x086C4544

	thumb_func_start sub_080BE2A8
sub_080BE2A8: @ 0x080BE2A8
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0x10
	adds r6, r0, #0
	mov r8, r1
	mov sb, r2
	adds r4, r3, #0
	ldr r1, [sp, #0x2c]
	mov r2, sp
	ldr r0, _080BE38C @ =0x086C4544
	ldm r0!, {r3, r5, r7}
	stm r2!, {r3, r5, r7}
	ldr r0, [r0]
	str r0, [r2]
	ldr r0, _080BE390 @ =0x08DB9794
	bl Proc_Start
	adds r5, r0, #0
	movs r0, #0
	str r0, [r5, #0x34]
	ldr r2, [r6, #4]
	ldr r0, [r2]
	movs r1, #1
	rsbs r1, r1, #0
	cmp r0, r1
	beq _080BE2F2
	adds r3, r1, #0
	movs r1, #0
_080BE2E4:
	adds r1, #1
	lsls r0, r1, #3
	adds r0, r0, r2
	ldr r0, [r0]
	cmp r0, r3
	bne _080BE2E4
	str r1, [r5, #0x34]
_080BE2F2:
	movs r0, #1
	rsbs r0, r0, #0
	cmp sb, r0
	bne _080BE300
	ldr r0, [r5, #0x34]
	subs r0, #0x14
	mov sb, r0
_080BE300:
	mov r0, sb
	lsls r2, r0, #0xd
	str r2, [r5, #0x38]
	str r6, [r5, #0x2c]
	mov r1, r8
	str r1, [r5, #0x30]
	str r4, [r5, #0x3c]
	lsls r0, r1, #0x10
	lsrs r0, r0, #0x10
	lsls r2, r2, #6
	lsrs r2, r2, #0x10
	movs r1, #0
	bl SetBgOffset
	ldr r0, [r6]
	ldr r4, [r0, #0xc]
	cmp r4, #0
	beq _080BE33E
	mov r0, r8
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r0, [r6]
	ldr r0, [r0, #0x10]
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r0, r0, r2
	adds r1, r1, r0
	adds r0, r4, #0
	bl sub_08013688
_080BE33E:
	ldr r1, [r6]
	ldr r0, [r1]
	cmp r0, #0
	beq _080BE356
	ldr r2, [r1, #8]
	cmp r2, #0
	beq _080BE356
	ldr r1, [r1, #4]
	lsls r1, r1, #5
	lsls r2, r2, #5
	bl ApplyPaletteExt
_080BE356:
	movs r4, #1
	rsbs r4, r4, #0
	mov r3, r8
	lsls r7, r3, #2
_080BE35E:
	mov r0, sb
	adds r2, r0, r4
	mov r0, r8
	adds r1, r6, #0
	bl sub_080BE0CC
	adds r4, #1
	cmp r4, #0x13
	ble _080BE35E
	mov r1, sp
	adds r0, r1, r7
	ldr r0, [r0]
	bl EnableBgSync
	adds r0, r5, #0
	add sp, #0x10
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080BE38C: .4byte 0x086C4544
_080BE390: .4byte 0x08DB9794
